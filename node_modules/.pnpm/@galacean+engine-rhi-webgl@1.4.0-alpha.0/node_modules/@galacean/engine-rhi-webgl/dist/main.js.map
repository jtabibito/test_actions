{"version":3,"file":"main.js","sources":["../src/type.ts","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_create_class.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_set_prototype_of.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_inherits.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_instanceof.js","../src/WebCanvas.ts","../src/WebGLEngine.ts","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_extends.js","../src/GLBuffer.ts","../src/GLCapability.ts","../src/GLExtensions.ts","../src/GLPrimitive.ts","../src/GLRenderStates.ts","../src/GLTexture.ts","../src/GLRenderTarget.ts","../src/GLTexture2D.ts","../src/GLTexture2DArray.ts","../src/GLTextureCube.ts","../src/WebGLGraphicDevice.ts"],"sourcesContent":["/**\n * Smoothing plug-in.\n * */\nexport interface WebGLExtension {\n  MAX_DRAW_BUFFERS: GLenum;\n  UNSIGNED_INT_24_8: GLenum;\n  MAX_SAMPLES: GLenum;\n  RGBA8: GLenum;\n  RGBA16F: GLenum;\n  RGBA32F: GLenum;\n  DEPTH_COMPONENT32F: GLenum;\n  READ_FRAMEBUFFER: GLenum;\n  DRAW_FRAMEBUFFER: GLenum;\n\n  createVertexArray(): WebGLVertexArrayObject | null;\n  deleteVertexArray(vertexArray: WebGLVertexArrayObject | null): void;\n  isVertexArray(vertexArray: WebGLVertexArrayObject | null): GLboolean;\n  bindVertexArray(array: WebGLVertexArrayObject | null): void;\n\n  renderbufferStorageMultisample(\n    target: GLenum,\n    samples: GLsizei,\n    internalformat: GLenum,\n    width: GLsizei,\n    height: GLsizei\n  ): void;\n  blitFramebuffer(\n    srcX0: GLint,\n    srcY0: GLint,\n    srcX1: GLint,\n    srcY1: GLint,\n    dstX0: GLint,\n    dstY0: GLint,\n    dstX1: GLint,\n    dstY1: GLint,\n    mask: GLbitfield,\n    filter: GLenum\n  ): void;\n\n  drawArraysInstanced(mode: GLenum, first: GLint, count: GLsizei, instanceCount: GLsizei): void;\n  drawElementsInstanced(mode: GLenum, count: GLsizei, type: GLenum, offset: GLintptr, instanceCount: GLsizei): void;\n  vertexAttribDivisor(index: GLuint, divisor: GLuint): void;\n  drawBuffers(buffers: Iterable<GLenum>): void;\n}\n\nexport interface TextureFormatDetail {\n  internalFormat: GLint;\n  baseFormat?: GLenum;\n  dataType?: GLenum;\n  isCompressed: boolean;\n  attachment?: GLenum;\n}\n\n/**\n * @deprecated\n */\nexport enum GLCompressedTextureInternalFormat {\n  // astc\n  RGBA_ASTC_4X4_KHR = 0x93b0,\n  RGBA_ASTC_5X4_KHR = 0x93b1,\n  RGBA_ASTC_5X5_KHR = 0x93b2,\n  RGBA_ASTC_6X5_KHR = 0x93b3,\n  RGBA_ASTC_6X6_KHR = 0x93b4,\n  RGBA_ASTC_8X5_KHR = 0x93b5,\n  RGBA_ASTC_8X6_KHR = 0x93b6,\n  RGBA_ASTC_8X8_KHR = 0x93b7,\n  RGBA_ASTC_10X5_KHR = 0x93b8,\n  RGBA_ASTC_10X6_KHR = 0x93b9,\n  RGBA_ASTC_10X8_KHR = 0x93ba,\n  RGBA_ASTC_10X10_KHR = 0x93bb,\n  RGBA_ASTC_12X10_KHR = 0x93bc,\n  RGBA_ASTC_12X12_KHR = 0x93bd,\n  SRGB8_ALPHA8_ASTC_4X4_KHR = 0x93d0,\n  SRGB8_ALPHA8_ASTC_5X4_KHR = 0x93d1,\n  SRGB8_ALPHA8_ASTC_5X5_KHR = 0x93d2,\n  SRGB8_ALPHA8_ASTC_6X5_KHR = 0x93d3,\n  SRGB8_ALPHA8_ASTC_6X6_KHR = 0x93d4,\n  SRGB8_ALPHA8_ASTC_8X5_KHR = 0x93d5,\n  SRGB8_ALPHA8_ASTC_8X6_KHR = 0x93d6,\n  SRGB8_ALPHA8_ASTC_8X8_KHR = 0x93d7,\n  SRGB8_ALPHA8_ASTC_10X5_KHR = 0x93d8,\n  SRGB8_ALPHA8_ASTC_10X6_KHR = 0x93d9,\n  SRGB8_ALPHA8_ASTC_10X8_KHR = 0x93da,\n  SRGB8_ALPHA8_ASTC_10X10_KHR = 0x93db,\n  SRGB8_ALPHA8_ASTC_12X10_KHR = 0x93dc,\n  SRGB8_ALPHA8_ASTC_12X12_KHR = 0x93dd,\n\n  // etc1\n  RGB_ETC1_WEBGL = 0x8d64,\n\n  // etc2\n  R11_EAC = 0x9270,\n  SIGNED_R11_EAC = 0x9271,\n  RG11_EAC = 0x9272,\n  SIGNED_RG11_EAC = 0x9273,\n  RGB8_ETC2 = 0x9274,\n  SRGB8_ETC2 = 0x9275,\n  RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276,\n  SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277,\n  RGBA8_ETC2_EAC = 0x9278,\n  SRGB8_ALPHA8_ETC2_EAC = 0x9279,\n\n  // pvrtc\n  RGB_PVRTC_4BPPV1_IMG = 0x8c00,\n  RGB_PVRTC_2BPPV1_IMG = 0x8c01,\n  RGBA_PVRTC_4BPPV1_IMG = 0x8c02,\n  RGBA_PVRTC_2BPPV1_IMG = 0x8c03,\n\n  // s3tc\n  RGB_S3TC_DXT1_EXT = 0x83f0,\n  RGBA_S3TC_DXT1_EXT = 0x83f1,\n  RGBA_S3TC_DXT3_EXT = 0x83f2,\n  RGBA_S3TC_DXT5_EXT = 0x83f3,\n\n  // bptc\n  RGBA_BPTC_UNORM_EXT = 0x8e8c,\n  SRGB_ALPHA_BPTC_UNORM_EXT = 0x8e8d,\n  RGB_BPTC_SIGNED_FLOAT_EXT = 0x8e8e,\n  RGB_BPTC_UNSIGNED_FLOAT_EXT = 0x8e8f\n}\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","function _set_prototype_of(o, p) {\n    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {\n        o.__proto__ = p;\n\n        return o;\n    };\n\n    return _set_prototype_of(o, p);\n}\nexport { _set_prototype_of as _ };\n","import { _ as _set_prototype_of } from \"./_set_prototype_of.js\";\n\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });\n\n    if (superClass) _set_prototype_of(subClass, superClass);\n}\nexport { _inherits as _ };\n","function _instanceof(left, right) {\n    if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n        return !!right[Symbol.hasInstance](left);\n    } else return left instanceof right;\n}\nexport { _instanceof as _ };\n","import { Canvas } from \"@galacean/engine-core\";\nimport { Vector2 } from \"@galacean/engine-math\";\n\ntype OffscreenCanvas = any;\n\n/**\n * The canvas used on the web, which can support HTMLCanvasElement and OffscreenCanvas.\n */\nexport class WebCanvas extends Canvas {\n  _webCanvas: HTMLCanvasElement | OffscreenCanvas;\n\n  private _scale: Vector2 = new Vector2();\n\n  /**\n   * The scale of canvas, the value is visible width/height divide the render width/height.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get scale(): Vector2 {\n    const webCanvas = this._webCanvas;\n    if (typeof OffscreenCanvas === \"undefined\" || !(webCanvas instanceof OffscreenCanvas)) {\n      this._scale.set(\n        (webCanvas.clientWidth * devicePixelRatio) / webCanvas.width,\n        (webCanvas.clientHeight * devicePixelRatio) / webCanvas.height\n      );\n    }\n    return this._scale;\n  }\n\n  set scale(value: Vector2) {\n    const webCanvas = this._webCanvas;\n    if (typeof OffscreenCanvas === \"undefined\" || !(webCanvas instanceof OffscreenCanvas)) {\n      webCanvas.style.transformOrigin = `left top`;\n      webCanvas.style.transform = `scale(${value.x}, ${value.y})`;\n    }\n  }\n\n  /**\n   * Resize the rendering size according to the clientWidth and clientHeight of the canvas.\n   * @param pixelRatio - Pixel ratio\n   */\n  resizeByClientSize(pixelRatio: number = window.devicePixelRatio): void {\n    const webCanvas = this._webCanvas;\n    if (typeof OffscreenCanvas === \"undefined\" || !(webCanvas instanceof OffscreenCanvas)) {\n      const exportWidth = webCanvas.clientWidth * pixelRatio;\n      const exportHeight = webCanvas.clientHeight * pixelRatio;\n      this.width = exportWidth;\n      this.height = exportHeight;\n    }\n  }\n\n  /**\n   * Create a web canvas.\n   * @param webCanvas - Web native canvas\n   */\n  constructor(webCanvas: HTMLCanvasElement | OffscreenCanvas) {\n    super();\n    const width = webCanvas.width;\n    const height = webCanvas.height;\n    this._webCanvas = webCanvas;\n    this.width = width;\n    this.height = height;\n  }\n\n  /**\n   * Set scale.\n   * @param x - Scale along the X axis\n   * @param y - Scale along the Y axis\n   */\n  setScale(x: number, y: number): void {\n    this._scale.set(x, y);\n    this.scale = this._scale;\n  }\n\n  protected override _onWidthChanged(value: number): void {\n    this._webCanvas.width = value;\n  }\n\n  protected override _onHeightChange(value: number): void {\n    this._webCanvas.height = value;\n  }\n}\n","import { Engine, EngineConfiguration, Scene } from \"@galacean/engine-core\";\nimport { WebGLGraphicDevice, WebGLGraphicDeviceOptions } from \"./\";\nimport { WebCanvas } from \"./WebCanvas\";\n\n/**\n * WebGL platform engine,support includes WebGL1.0 and WebGL2.0.\n */\nexport class WebGLEngine extends Engine {\n  /**\n   * Create a WebGL engine.\n   * @param configuration - WebGL engine configuration\n   * @returns A promise that will resolve when the engine is created\n   */\n  static create(configuration: WebGLEngineConfiguration): Promise<WebGLEngine> {\n    const canvas = configuration.canvas;\n    const webCanvas = new WebCanvas(typeof canvas === \"string\" ? document.getElementById(canvas) : canvas);\n    const webGLGraphicDevice = new WebGLGraphicDevice(configuration.graphicDeviceOptions);\n    const engine = new WebGLEngine(webCanvas, webGLGraphicDevice, configuration);\n    // @ts-ignore\n    const promise = engine._initialize(configuration) as Promise<WebGLEngine>;\n    return promise.then(() => {\n      engine.sceneManager.addScene(new Scene(engine, \"DefaultScene\"));\n      return engine;\n    });\n  }\n\n  /**\n   * Web canvas.\n   */\n  override get canvas(): WebCanvas {\n    // @ts-ignore\n    return this._canvas as WebCanvas;\n  }\n}\n\n/**\n * WebGL engine configuration.\n */\nexport interface WebGLEngineConfiguration extends EngineConfiguration {\n  /** Canvas element or canvas id. */\n  canvas: HTMLCanvasElement | OffscreenCanvas | string;\n  /** Graphic device options. */\n  graphicDeviceOptions?: WebGLGraphicDeviceOptions;\n}\n","function _extends() {\n    _extends = Object.assign || function assign(target) {\n        for (var i = 1; i < arguments.length; i++) {\n            var source = arguments[i];\n            for (var key in source) if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];\n        }\n\n        return target;\n    };\n\n    return _extends.apply(this, arguments);\n}\nexport { _extends as _ };\n","import { BufferBindFlag, BufferUsage, IPlatformBuffer, SetDataOptions } from \"@galacean/engine-core\";\nimport { WebGLGraphicDevice } from \"./WebGLGraphicDevice\";\nimport { WebGLExtension } from \"./type\";\n\nexport class GLBuffer implements IPlatformBuffer {\n  private _gl: (WebGLRenderingContext & WebGLExtension) | WebGL2RenderingContext;\n  private _glBindTarget: number;\n  private _glBufferUsage: number;\n  private _glBuffer: WebGLBuffer;\n  private _isWebGL2: boolean;\n\n  constructor(\n    rhi: WebGLGraphicDevice,\n    type: BufferBindFlag,\n    byteLength: number,\n    bufferUsage: BufferUsage = BufferUsage.Static,\n    data?: ArrayBuffer | ArrayBufferView\n  ) {\n    const gl = rhi.gl;\n    const glBuffer = gl.createBuffer();\n    const glBufferUsage = this._getGLBufferUsage(gl, bufferUsage);\n    const glBindTarget = type === BufferBindFlag.VertexBuffer ? gl.ARRAY_BUFFER : gl.ELEMENT_ARRAY_BUFFER;\n\n    this._gl = gl;\n    this._glBuffer = glBuffer;\n    this._glBufferUsage = glBufferUsage;\n    this._glBindTarget = glBindTarget;\n    this._isWebGL2 = rhi.isWebGL2;\n\n    this.bind();\n\n    if (data) {\n      gl.bufferData(glBindTarget, data, glBufferUsage);\n    } else {\n      gl.bufferData(glBindTarget, byteLength, glBufferUsage);\n    }\n    gl.bindBuffer(glBindTarget, null);\n  }\n\n  bind(): void {\n    this._gl.bindBuffer(this._glBindTarget, this._glBuffer);\n  }\n\n  setData(\n    byteLength: number,\n    data: ArrayBuffer | ArrayBufferView,\n    bufferByteOffset?: number,\n    dataOffset?: number,\n    dataLength?: number,\n    options?: SetDataOptions\n  ): void {\n    const gl = this._gl;\n    const glBindTarget = this._glBindTarget;\n\n    this.bind();\n\n    if (options === SetDataOptions.Discard) {\n      gl.bufferData(glBindTarget, byteLength, this._glBufferUsage);\n    }\n\n    // TypeArray is BYTES_PER_ELEMENT, unTypeArray is 1\n    const byteSize = (<Uint8Array>data).BYTES_PER_ELEMENT || 1;\n    const dataByteLength = dataLength ? byteSize * dataLength : data.byteLength;\n\n    if (dataOffset !== 0 || dataByteLength < data.byteLength) {\n      const isArrayBufferView = (<ArrayBufferView>data).byteOffset !== undefined;\n      if (this._isWebGL2 && isArrayBufferView) {\n        gl.bufferSubData(glBindTarget, bufferByteOffset, <ArrayBufferView>data, dataOffset, dataByteLength / byteSize);\n      } else {\n        const subData = new Uint8Array(\n          isArrayBufferView ? (<ArrayBufferView>data).buffer : <ArrayBuffer>data,\n          dataOffset * byteSize,\n          dataByteLength\n        );\n        gl.bufferSubData(glBindTarget, bufferByteOffset, subData);\n      }\n    } else {\n      gl.bufferSubData(glBindTarget, bufferByteOffset, data);\n    }\n    gl.bindBuffer(glBindTarget, null);\n  }\n\n  getData(data: ArrayBufferView, bufferByteOffset?: number, dataOffset?: number, dataLength?: number): void {\n    if (this._isWebGL2) {\n      const gl = <WebGL2RenderingContext>this._gl;\n      this.bind();\n      gl.getBufferSubData(this._glBindTarget, bufferByteOffset, data, dataOffset, dataLength);\n    } else {\n      throw \"Buffer is write-only on WebGL1.0 platforms.\";\n    }\n  }\n\n  destroy(): void {\n    this._gl.deleteBuffer(this._glBuffer);\n    this._gl = null;\n    this._glBuffer = null;\n  }\n\n  private _getGLBufferUsage(gl: WebGLRenderingContext, bufferUsage: BufferUsage): number {\n    switch (bufferUsage) {\n      case BufferUsage.Static:\n        return gl.STATIC_DRAW;\n      case BufferUsage.Dynamic:\n        return gl.DYNAMIC_DRAW;\n      case BufferUsage.Stream:\n        return gl.STREAM_DRAW;\n    }\n  }\n}\n","import { GLCapabilityType } from \"@galacean/engine-core\";\nimport { WebGLGraphicDevice } from \"./WebGLGraphicDevice\";\nimport { GLCompressedTextureInternalFormat } from \"./type\";\n\ntype extensionKey = string;\n\n/**\n * GL capability.\n */\nexport class GLCapability {\n  private _maxDrawBuffers: number;\n  private _maxAnisoLevel: number;\n  private _maxAntiAliasing: number;\n\n  _rhi: WebGLGraphicDevice;\n  capabilityList: Map<GLCapabilityType, boolean>;\n\n  get maxTextureSize(): boolean {\n    return this.rhi.renderStates.getParameter(this.rhi.gl.MAX_TEXTURE_SIZE);\n  }\n\n  get canUseFloatTextureBlendShape(): boolean {\n    return (\n      this.canIUse(GLCapabilityType.shaderVertexID) &&\n      this.canIUse(GLCapabilityType.textureFloat) &&\n      this.rhi.renderStates.getParameter(this.rhi.gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS) > 0\n    );\n  }\n\n  /**\n   * Whether can use more joints.\n   */\n  get canIUseMoreJoints(): boolean {\n    return (\n      this.canIUse(GLCapabilityType.textureFloat) &&\n      this.rhi.renderStates.getParameter(this.rhi.gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS) > 0\n    );\n  }\n\n  get maxDrawBuffers() {\n    if (!this._maxDrawBuffers) {\n      if (this.canIUse(GLCapabilityType.drawBuffers)) {\n        this._maxDrawBuffers = this._rhi.gl.getParameter(this._rhi.gl.MAX_DRAW_BUFFERS);\n      } else {\n        this._maxDrawBuffers = 1;\n      }\n    }\n    return this._maxDrawBuffers;\n  }\n\n  /**\n   * Max anisoLevel.\n   */\n  get maxAnisoLevel(): number {\n    if (!this._maxAnisoLevel) {\n      const ext = this._rhi.requireExtension(GLCapabilityType.textureFilterAnisotropic);\n      this._maxAnisoLevel = ext ? this._rhi.gl.getParameter(ext.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 1;\n    }\n    return this._maxAnisoLevel;\n  }\n\n  /**\n   * Max MSAA count.\n   */\n  get maxAntiAliasing(): number {\n    if (!this._maxAntiAliasing) {\n      const gl = this._rhi.gl;\n      const canMSAA = this.canIUse(GLCapabilityType.multipleSample);\n\n      this._maxAntiAliasing = canMSAA ? gl.getParameter(gl.MAX_SAMPLES) : 1;\n    }\n    return this._maxAntiAliasing;\n  }\n\n  get rhi() {\n    return this._rhi;\n  }\n\n  constructor(rhi: WebGLGraphicDevice) {\n    this._rhi = rhi;\n    this.capabilityList = new Map();\n\n    this._init();\n    this._compatibleAllInterface();\n  }\n\n  /**\n   * Check device capabilities.\n   */\n  canIUse(capabilityType: GLCapabilityType): boolean {\n    return this.capabilityList.get(capabilityType);\n  }\n\n  /**\n   * Check if can use some compressed texture format.\n   */\n  canIUseCompressedTextureInternalFormat(internalType: GLCompressedTextureInternalFormat): boolean {\n    const {\n      // astc\n      RGBA_ASTC_4X4_KHR,\n      RGBA_ASTC_12X12_KHR,\n      SRGB8_ALPHA8_ASTC_4X4_KHR,\n      SRGB8_ALPHA8_ASTC_12X12_KHR,\n      // etc1\n      RGB_ETC1_WEBGL,\n      // etc\n      R11_EAC,\n      SRGB8_ALPHA8_ETC2_EAC,\n      // pvrtc\n      RGB_PVRTC_4BPPV1_IMG,\n      RGBA_PVRTC_2BPPV1_IMG,\n      // s3tc\n      RGB_S3TC_DXT1_EXT,\n      RGBA_S3TC_DXT5_EXT,\n\n      // bptc\n      RGBA_BPTC_UNORM_EXT,\n      RGB_BPTC_UNSIGNED_FLOAT_EXT\n    } = GLCompressedTextureInternalFormat;\n    if (\n      (internalType >= RGBA_ASTC_4X4_KHR && RGBA_ASTC_12X12_KHR <= RGBA_ASTC_12X12_KHR) ||\n      (internalType >= SRGB8_ALPHA8_ASTC_4X4_KHR && internalType <= SRGB8_ALPHA8_ASTC_12X12_KHR)\n    ) {\n      return this.canIUse(GLCapabilityType.astc);\n    } else if (internalType === RGB_ETC1_WEBGL) {\n      return this.canIUse(GLCapabilityType.etc1);\n    } else if (internalType >= R11_EAC && internalType <= SRGB8_ALPHA8_ETC2_EAC) {\n      return this.canIUse(GLCapabilityType.etc);\n    } else if (internalType >= RGB_PVRTC_4BPPV1_IMG && internalType <= RGBA_PVRTC_2BPPV1_IMG) {\n      return this.canIUse(GLCapabilityType.pvrtc);\n    } else if (internalType >= RGB_S3TC_DXT1_EXT && internalType <= RGBA_S3TC_DXT5_EXT) {\n      return this.canIUse(GLCapabilityType.s3tc);\n    } else if (internalType >= RGBA_BPTC_UNORM_EXT && internalType <= RGB_BPTC_UNSIGNED_FLOAT_EXT) {\n      return this.canIUse(GLCapabilityType.bptc);\n    }\n    return false;\n  }\n\n  /**\n   *  Init capabilities.\n   */\n  private _init() {\n    const cap = this.capabilityList;\n    const { isWebGL2 } = this.rhi;\n    const requireExtension = this.rhi.requireExtension.bind(this.rhi);\n\n    const {\n      shaderVertexID,\n      standardDerivatives,\n      shaderTextureLod,\n      elementIndexUint,\n      depthTexture,\n      vertexArrayObject,\n      instancedArrays,\n      multipleSample,\n      drawBuffers,\n      blendMinMax,\n\n      astc,\n      astc_webkit,\n      etc,\n      etc_webkit,\n      etc1,\n      etc1_webkit,\n      pvrtc,\n      pvrtc_webkit,\n      s3tc,\n      s3tc_webkit,\n      bptc,\n\n      textureFloat,\n      textureHalfFloat,\n      textureFloatLinear,\n      textureHalfFloatLinear,\n      WEBGL_colorBufferFloat,\n      colorBufferFloat,\n      colorBufferHalfFloat,\n      textureFilterAnisotropic,\n      fragDepth\n    } = GLCapabilityType;\n    cap.set(shaderVertexID, isWebGL2);\n    cap.set(standardDerivatives, isWebGL2 || !!requireExtension(standardDerivatives));\n    cap.set(shaderTextureLod, isWebGL2 || !!requireExtension(shaderTextureLod));\n    cap.set(elementIndexUint, isWebGL2 || !!requireExtension(elementIndexUint));\n    cap.set(depthTexture, isWebGL2 || !!requireExtension(depthTexture));\n    cap.set(vertexArrayObject, isWebGL2 || !!requireExtension(vertexArrayObject));\n    cap.set(instancedArrays, isWebGL2 || !!requireExtension(instancedArrays));\n    cap.set(multipleSample, isWebGL2);\n    cap.set(drawBuffers, isWebGL2 || !!requireExtension(drawBuffers));\n    cap.set(blendMinMax, isWebGL2 || !!requireExtension(blendMinMax));\n    cap.set(textureFloat, isWebGL2 || !!requireExtension(textureFloat));\n    cap.set(textureHalfFloat, isWebGL2 || !!requireExtension(textureHalfFloat));\n    cap.set(textureFloatLinear, !!requireExtension(textureFloatLinear));\n    cap.set(textureHalfFloatLinear, isWebGL2 || !!requireExtension(textureHalfFloatLinear));\n    cap.set(\n      colorBufferFloat,\n      (isWebGL2 && !!requireExtension(colorBufferFloat)) || !!requireExtension(WEBGL_colorBufferFloat)\n    );\n    cap.set(\n      colorBufferHalfFloat,\n      (isWebGL2 && !!requireExtension(colorBufferFloat)) || !!requireExtension(colorBufferHalfFloat)\n    );\n    cap.set(textureFilterAnisotropic, !!requireExtension(textureFilterAnisotropic));\n    cap.set(fragDepth, isWebGL2 || !!requireExtension(fragDepth));\n\n    cap.set(astc, !!(requireExtension(astc) || requireExtension(astc_webkit)));\n    cap.set(etc, !!(requireExtension(etc) || requireExtension(etc_webkit)));\n    cap.set(etc1, !!(requireExtension(etc1) || requireExtension(etc1_webkit)));\n    cap.set(pvrtc, !!(requireExtension(pvrtc) || requireExtension(pvrtc_webkit)));\n    cap.set(s3tc, !!(requireExtension(s3tc) || requireExtension(s3tc_webkit)));\n    cap.set(bptc, !!requireExtension(bptc));\n  }\n\n  /**\n   * If there are extensions that can supplement this ability, smooth out the difference.\n   * @example\n   * compatible(GLCapabilityType.depthTexture,{\n   *    UNSIGNED_INT_24_8: \"UNSIGNED_INT_24_8_WEBGL\"\n   * })\n   * gl.UNSIGNED_INT_24_8 = ext.UNSIGNED_INT_24_8_WEBGL\n   */\n  private _compatibleInterface(capabilityType: GLCapabilityType, flatItem: { [glKey: string]: extensionKey }) {\n    const rhi = this.rhi;\n    const gl = rhi.gl;\n    let ext = null;\n\n    if ((ext = rhi.requireExtension(capabilityType))) {\n      for (let glKey in flatItem) {\n        const extensionKey = flatItem[glKey];\n        const extensionVal = ext[extensionKey];\n\n        // Mini game hack the native function,use “.bind” to smooth out if is “Funcion”.\n        if (extensionVal?.bind) {\n          gl[glKey] = extensionVal.bind(ext);\n        } else {\n          gl[glKey] = extensionVal;\n        }\n      }\n    }\n  }\n\n  private _compatibleAllInterface() {\n    const {\n      depthTexture,\n      vertexArrayObject,\n      instancedArrays,\n      drawBuffers,\n      textureFilterAnisotropic,\n      textureHalfFloat,\n      colorBufferHalfFloat,\n      WEBGL_colorBufferFloat,\n      blendMinMax\n    } = GLCapabilityType;\n    const { isWebGL2 } = this.rhi;\n\n    if (!isWebGL2) {\n      this._compatibleInterface(blendMinMax, {\n        MIN: \"MIN_EXT\",\n        MAX: \"MAX_EXT\"\n      });\n      this._compatibleInterface(depthTexture, {\n        UNSIGNED_INT_24_8: \"UNSIGNED_INT_24_8_WEBGL\"\n      });\n      this._compatibleInterface(vertexArrayObject, {\n        createVertexArray: \"createVertexArrayOES\",\n        deleteVertexArray: \"deleteVertexArrayOES\",\n        isVertexArray: \"isVertexArrayOES\",\n        bindVertexArray: \"bindVertexArrayOES\"\n      });\n      this._compatibleInterface(instancedArrays, {\n        drawArraysInstanced: \"drawArraysInstancedANGLE\",\n        drawElementsInstanced: \"drawElementsInstancedANGLE\",\n        vertexAttribDivisor: \"vertexAttribDivisorANGLE\"\n      });\n      this._compatibleInterface(drawBuffers, {\n        MAX_DRAW_BUFFERS: \"MAX_DRAW_BUFFERS_WEBGL\"\n      });\n      const items = {};\n      if (this.canIUse(GLCapabilityType.drawBuffers)) {\n        const maxDrawBuffers = this.maxDrawBuffers;\n        for (let i = 0; i < maxDrawBuffers; i++) {\n          i != 0 && (items[`COLOR_ATTACHMENT${i}`] = `COLOR_ATTACHMENT${i}_WEBGL`);\n          items[`DRAW_BUFFER${i}`] = `DRAW_BUFFER${i}_WEBGL`;\n        }\n        this._compatibleInterface(drawBuffers, {\n          drawBuffers: \"drawBuffersWEBGL\",\n          ...items\n        });\n      }\n      this._compatibleInterface(textureHalfFloat, {\n        HALF_FLOAT: \"HALF_FLOAT_OES\"\n      });\n      this._compatibleInterface(colorBufferHalfFloat, {\n        RGBA16F: \"RBGA16F_EXT\"\n      });\n      this._compatibleInterface(WEBGL_colorBufferFloat, {\n        RGBA32F: \"RBGA32F_EXT\"\n      });\n    }\n\n    this._compatibleInterface(textureFilterAnisotropic, {\n      TEXTURE_MAX_ANISOTROPY_EXT: \"TEXTURE_MAX_ANISOTROPY_EXT\"\n    });\n  }\n}\n","import { WebGLGraphicDevice } from \"./WebGLGraphicDevice\";\nimport { GLCapabilityType } from \"@galacean/engine-core\";\n\n/**\n * GLContext extension.\n */\nexport class GLExtensions {\n  private rhi: WebGLGraphicDevice;\n  private _requireResult;\n\n  constructor(rhi: WebGLGraphicDevice) {\n    this.rhi = rhi;\n    this._requireResult = {};\n  }\n\n  /**\n   * Require an extension.\n   */\n  requireExtension(ext: GLCapabilityType) {\n    if (this._requireResult[ext] !== undefined) {\n      return this._requireResult[ext];\n    }\n\n    this._requireResult[ext] = this.rhi.gl.getExtension(ext);\n    return this._requireResult[ext];\n  }\n}\n","import { GLCapabilityType, Logger, Primitive } from \"@galacean/engine-core\";\nimport { SubPrimitive } from \"@galacean/engine-core/types/graphic/SubPrimitive\";\nimport { IPlatformPrimitive } from \"@galacean/engine-design\";\nimport { WebGLGraphicDevice } from \"./WebGLGraphicDevice\";\nimport { WebGLExtension } from \"./type\";\n\n/**\n * Improvement of VAO:\n * 1) WebGL2.0 must support VAO, almost all devices support vao extensions in webgl1.0, we can use PollyFill,only keep VAO mode.\n */\n\n/**\n * @internal\n * GL platform primitive.\n */\nexport class GLPrimitive implements IPlatformPrimitive {\n  private _attribLocArray: number[] = [];\n  private readonly _primitive: Primitive;\n  private readonly _canUseInstancedArrays: boolean;\n\n  private _gl: (WebGLRenderingContext & WebGLExtension) | WebGL2RenderingContext;\n  private _vaoMap: Map<number, WebGLVertexArrayObject> = new Map();\n  private readonly _isSupportVAO: boolean;\n\n  constructor(rhi: WebGLGraphicDevice, primitive: Primitive) {\n    this._primitive = primitive;\n    this._canUseInstancedArrays = rhi.canIUse(GLCapabilityType.instancedArrays);\n    this._isSupportVAO = rhi.canIUse(GLCapabilityType.vertexArrayObject);\n    this._gl = rhi.gl;\n  }\n\n  /**\n   * Draw the primitive.\n   */\n  draw(shaderProgram: any, subMesh: SubPrimitive): void {\n    const gl = this._gl;\n    const primitive = this._primitive;\n    const useVao = this._isSupportVAO && primitive.enableVAO;\n\n    if (useVao) {\n      if (primitive._bufferStructChanged) {\n        this._clearVAO();\n      }\n      if (!this._vaoMap.has(shaderProgram.id)) {\n        this._registerVAO(shaderProgram);\n      }\n      const vao = this._vaoMap.get(shaderProgram.id);\n      gl.bindVertexArray(vao);\n    } else {\n      this._bindBufferAndAttrib(shaderProgram);\n    }\n\n    const { indexBufferBinding, instanceCount, _glIndexType, _glIndexByteCount } = primitive;\n    const { topology, start, count } = subMesh;\n\n    if (!instanceCount) {\n      if (indexBufferBinding) {\n        if (useVao) {\n          gl.drawElements(topology, count, _glIndexType, start * _glIndexByteCount);\n        } else {\n          const { _glBuffer } = indexBufferBinding.buffer._platformBuffer;\n          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, _glBuffer);\n          gl.drawElements(topology, count, _glIndexType, start * _glIndexByteCount);\n          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n        }\n      } else {\n        gl.drawArrays(topology, start, count);\n      }\n    } else {\n      if (this._canUseInstancedArrays) {\n        if (indexBufferBinding) {\n          if (useVao) {\n            gl.drawElementsInstanced(topology, count, _glIndexType, start * _glIndexByteCount, instanceCount);\n          } else {\n            const { _glBuffer } = indexBufferBinding.buffer._platformBuffer;\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, _glBuffer);\n            gl.drawElementsInstanced(topology, count, _glIndexType, start * _glIndexByteCount, instanceCount);\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n          }\n        } else {\n          gl.drawArraysInstanced(topology, start, count, instanceCount);\n        }\n      } else {\n        Logger.error(\"ANGLE_instanced_arrays extension is not supported\");\n      }\n    }\n\n    // Unbind\n    if (useVao) {\n      gl.bindVertexArray(null);\n    } else {\n      this._disableAttrib();\n    }\n  }\n\n  destroy(): void {\n    this._isSupportVAO && this._clearVAO();\n  }\n\n  /**\n   * Bind buffer and attribute.\n   */\n  private _bindBufferAndAttrib(shaderProgram: any): void {\n    const gl = this._gl;\n    const primitive = this._primitive;\n    const vertexBufferBindings = primitive.vertexBufferBindings;\n\n    this._attribLocArray.length = 0;\n    const attributeLocation = shaderProgram.attributeLocation;\n    const attributes = primitive._vertexElementMap;\n\n    let vbo: WebGLBuffer;\n    let lastBoundVbo: WebGLBuffer;\n\n    for (const name in attributeLocation) {\n      const loc = attributeLocation[name];\n      if (loc === -1) continue;\n\n      const element = attributes[name];\n      if (element) {\n        const { buffer, stride } = vertexBufferBindings[element.bindingIndex];\n        vbo = buffer._platformBuffer._glBuffer;\n        // prevent binding the vbo which already bound at the last loop, e.g. a buffer with multiple attributes.\n        if (lastBoundVbo !== vbo) {\n          lastBoundVbo = vbo;\n          gl.bindBuffer(gl.ARRAY_BUFFER, vbo);\n        }\n\n        gl.enableVertexAttribArray(loc);\n        const elementInfo = element._formatMetaInfo;\n        gl.vertexAttribPointer(loc, elementInfo.size, elementInfo.type, elementInfo.normalized, stride, element.offset);\n        if (this._canUseInstancedArrays) {\n          gl.vertexAttribDivisor(loc, element.instanceStepRate);\n        }\n        this._attribLocArray.push(loc);\n      } else {\n        Logger.warn(\"vertex attribute not found: \" + name);\n      }\n    }\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n  }\n\n  private _disableAttrib() {\n    const gl = this._gl;\n    for (let i = 0, l = this._attribLocArray.length; i < l; i++) {\n      gl.disableVertexAttribArray(this._attribLocArray[i]);\n    }\n  }\n\n  private _registerVAO(shaderProgram: any): void {\n    const gl = this._gl;\n    const vao = gl.createVertexArray();\n\n    /** register VAO */\n    gl.bindVertexArray(vao);\n\n    const { indexBufferBinding } = this._primitive;\n    if (indexBufferBinding) {\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBufferBinding.buffer._platformBuffer._glBuffer);\n    }\n    this._bindBufferAndAttrib(shaderProgram);\n\n    /** unbind */\n    gl.bindVertexArray(null);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    this._disableAttrib();\n\n    this._vaoMap.set(shaderProgram.id, vao);\n  }\n\n  private _clearVAO(): void {\n    const gl = this._gl;\n    this._vaoMap.forEach((vao) => {\n      gl.deleteVertexArray(vao);\n    });\n    this._vaoMap.clear();\n  }\n}\n","/**\n * @private\n */\nexport class GLRenderStates {\n  private _gl: WebGLRenderingContext;\n  private _parameters = {};\n  /**\n   * @param {WebGLRenderingContext} gl\n   */\n  constructor(gl: WebGLRenderingContext) {\n    this._gl = gl;\n    this._parameters = {}; // current gl state parameters\n\n    /** cache */\n    this._parameters[gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS] = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this._parameters[gl.MAX_VERTEX_UNIFORM_VECTORS] = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n    this._parameters[gl.MAX_VERTEX_ATTRIBS] = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    this._parameters[gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS] = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);\n    this._parameters[gl.MAX_TEXTURE_SIZE] = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n\n    // init blend state same as BlendState default value.\n    gl.blendFuncSeparate(gl.ONE, gl.ZERO, gl.ONE, gl.ZERO);\n    gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n    gl.colorMask(true, true, true, true);\n    gl.blendColor(0, 0, 0, 0);\n    gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n\n    // init depth state same as DepthState default value.\n    gl.enable(gl.DEPTH_TEST);\n    gl.depthFunc(gl.LESS);\n    gl.depthMask(true);\n\n    // init stencil state same as StencilState default value.\n    gl.disable(gl.STENCIL_TEST);\n    gl.stencilFuncSeparate(gl.FRONT, gl.ALWAYS, 0, 0xff);\n    gl.stencilFuncSeparate(gl.BACK, gl.ALWAYS, 0, 0xff);\n    gl.stencilOpSeparate(gl.FRONT, gl.KEEP, gl.KEEP, gl.KEEP);\n    gl.stencilOpSeparate(gl.BACK, gl.KEEP, gl.KEEP, gl.KEEP);\n    gl.stencilMask(0xff);\n\n    // init raster state same as RasterState default value.\n    gl.enable(gl.CULL_FACE);\n    gl.cullFace(gl.BACK);\n    gl.disable(gl.POLYGON_OFFSET_FILL);\n    gl.polygonOffset(0, 0);\n  }\n\n  /**\n   * Get a parameter.\n   */\n  getParameter(pname) {\n    return this._parameters[pname];\n  }\n}\n","import {\n  GLCapabilityType,\n  IPlatformTexture,\n  Logger,\n  Texture,\n  TextureCubeFace,\n  TextureDepthCompareFunction,\n  TextureFilterMode,\n  TextureFormat,\n  TextureUsage,\n  TextureWrapMode\n} from \"@galacean/engine-core\";\nimport { WebGLGraphicDevice } from \"./WebGLGraphicDevice\";\nimport { GLCompressedTextureInternalFormat, TextureFormatDetail } from \"./type\";\n\n/**\n * Texture in WebGL platform.\n */\nexport class GLTexture implements IPlatformTexture {\n  /** @internal */\n  static _isPowerOf2(v: number): boolean {\n    return (v & (v - 1)) === 0;\n  }\n\n  /**\n   * Get more texture info from TextureFormat.\n   * @internal\n   */\n  static _getFormatDetail(\n    format: TextureFormat,\n    gl: WebGLRenderingContext & WebGL2RenderingContext,\n    isWebGL2: boolean\n  ): TextureFormatDetail {\n    switch (format) {\n      case TextureFormat.R8G8B8:\n        return {\n          internalFormat: isWebGL2 ? gl.RGB8 : gl.RGB,\n          baseFormat: gl.RGB,\n          dataType: gl.UNSIGNED_BYTE,\n          isCompressed: false\n        };\n      case TextureFormat.R8G8B8A8:\n        return {\n          internalFormat: isWebGL2 ? gl.RGBA8 : gl.RGBA,\n          baseFormat: gl.RGBA,\n          dataType: gl.UNSIGNED_BYTE,\n          isCompressed: false\n        };\n      case TextureFormat.R4G4B4A4:\n        return {\n          internalFormat: isWebGL2 ? gl.RGBA4 : gl.RGBA,\n          baseFormat: gl.RGBA,\n          dataType: gl.UNSIGNED_SHORT_4_4_4_4,\n          isCompressed: false\n        };\n      case TextureFormat.R5G5B5A1:\n        return {\n          internalFormat: isWebGL2 ? gl.RGB5_A1 : gl.RGBA,\n          baseFormat: gl.RGBA,\n          dataType: gl.UNSIGNED_SHORT_5_5_5_1,\n          isCompressed: false\n        };\n      case TextureFormat.R5G6B5:\n        return {\n          internalFormat: isWebGL2 ? gl.RGB565 : gl.RGB,\n          baseFormat: gl.RGB,\n          dataType: gl.UNSIGNED_SHORT_5_6_5,\n          isCompressed: false\n        };\n      case TextureFormat.Alpha8:\n        return {\n          internalFormat: gl.ALPHA,\n          baseFormat: gl.ALPHA,\n          dataType: gl.UNSIGNED_BYTE,\n          isCompressed: false\n        };\n      case TextureFormat.LuminanceAlpha:\n        return {\n          internalFormat: gl.LUMINANCE_ALPHA,\n          baseFormat: gl.LUMINANCE_ALPHA,\n          dataType: gl.UNSIGNED_BYTE,\n          isCompressed: false\n        };\n      case TextureFormat.R11G11B10_UFloat:\n        return {\n          internalFormat: isWebGL2 ? gl.R11F_G11F_B10F : gl.NONE,\n          baseFormat: gl.RGB,\n          dataType: gl.FLOAT,\n          isCompressed: false\n        };\n      case TextureFormat.R16G16B16A16:\n        return {\n          internalFormat: isWebGL2 ? gl.RGBA16F : gl.RGBA,\n          baseFormat: gl.RGBA,\n          dataType: gl.HALF_FLOAT,\n          isCompressed: false\n        };\n      case TextureFormat.R32G32B32A32:\n        return {\n          internalFormat: isWebGL2 ? gl.RGBA32F : gl.RGBA,\n          baseFormat: gl.RGBA,\n          dataType: gl.FLOAT,\n          isCompressed: false\n        };\n      case TextureFormat.R32G32B32A32_UInt:\n        return {\n          internalFormat: isWebGL2 ? gl.RGBA32UI : gl.NONE,\n          baseFormat: gl.RGBA_INTEGER,\n          dataType: gl.UNSIGNED_INT,\n          isCompressed: false\n        };\n      case TextureFormat.BC1:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGB_S3TC_DXT1_EXT,\n          isCompressed: true\n        };\n      case TextureFormat.BC3:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_S3TC_DXT5_EXT,\n          isCompressed: true\n        };\n      case TextureFormat.BC7:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_BPTC_UNORM_EXT,\n          isCompressed: true\n        };\n      case TextureFormat.ETC1_RGB:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGB_ETC1_WEBGL,\n          isCompressed: true\n        };\n      case TextureFormat.ETC2_RGB:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGB8_ETC2,\n          isCompressed: true\n        };\n      case TextureFormat.ETC2_RGBA5:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGB8_PUNCHTHROUGH_ALPHA1_ETC2,\n          isCompressed: true\n        };\n      case TextureFormat.ETC2_RGBA8:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA8_ETC2_EAC,\n          isCompressed: true\n        };\n      case TextureFormat.PVRTC_RGB2:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGB_PVRTC_2BPPV1_IMG,\n          isCompressed: true\n        };\n      case TextureFormat.PVRTC_RGBA2:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_PVRTC_2BPPV1_IMG,\n          isCompressed: true\n        };\n      case TextureFormat.PVRTC_RGB4:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGB_PVRTC_4BPPV1_IMG,\n          isCompressed: true\n        };\n      case TextureFormat.PVRTC_RGBA4:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_PVRTC_4BPPV1_IMG,\n          isCompressed: true\n        };\n      case TextureFormat.ASTC_4x4:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_4X4_KHR,\n          isCompressed: true\n        };\n      case TextureFormat.ASTC_5x5:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_5X5_KHR,\n          isCompressed: true\n        };\n      case TextureFormat.ASTC_6x6:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_6X6_KHR,\n          isCompressed: true\n        };\n      case TextureFormat.ASTC_8x8:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_8X8_KHR,\n          isCompressed: true\n        };\n      case TextureFormat.ASTC_10x10:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_10X10_KHR,\n          isCompressed: true\n        };\n      case TextureFormat.ASTC_12x12:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_12X12_KHR,\n          isCompressed: true\n        };\n\n      case TextureFormat.Depth:\n        return {\n          internalFormat: isWebGL2 ? gl.DEPTH_COMPONENT32F : gl.DEPTH_COMPONENT,\n          baseFormat: gl.DEPTH_COMPONENT,\n          dataType: isWebGL2 ? gl.FLOAT : gl.UNSIGNED_SHORT,\n          isCompressed: false,\n          attachment: gl.DEPTH_ATTACHMENT\n        };\n      case TextureFormat.DepthStencil:\n        return {\n          internalFormat: isWebGL2 ? gl.DEPTH32F_STENCIL8 : gl.DEPTH_STENCIL,\n          baseFormat: gl.DEPTH_STENCIL,\n          dataType: isWebGL2 ? gl.FLOAT_32_UNSIGNED_INT_24_8_REV : gl.UNSIGNED_INT_24_8,\n          isCompressed: false,\n          attachment: gl.DEPTH_STENCIL_ATTACHMENT\n        };\n      case TextureFormat.Depth16:\n        return {\n          internalFormat: isWebGL2 ? gl.DEPTH_COMPONENT16 : gl.DEPTH_COMPONENT,\n          baseFormat: gl.DEPTH_COMPONENT,\n          dataType: gl.UNSIGNED_SHORT,\n          isCompressed: false,\n          attachment: gl.DEPTH_ATTACHMENT\n        };\n      case TextureFormat.Depth24Stencil8:\n        return {\n          internalFormat: isWebGL2 ? gl.DEPTH24_STENCIL8 : gl.DEPTH_STENCIL,\n          baseFormat: gl.DEPTH_STENCIL,\n          dataType: gl.UNSIGNED_INT_24_8,\n          isCompressed: false,\n          attachment: gl.DEPTH_STENCIL_ATTACHMENT\n        };\n      case TextureFormat.Depth24:\n        return {\n          internalFormat: gl.DEPTH_COMPONENT24,\n          baseFormat: gl.DEPTH_COMPONENT,\n          dataType: gl.UNSIGNED_INT,\n          isCompressed: false,\n          attachment: gl.DEPTH_ATTACHMENT\n        };\n      case TextureFormat.Depth32:\n        return {\n          internalFormat: gl.DEPTH_COMPONENT32F,\n          baseFormat: gl.DEPTH_COMPONENT,\n          dataType: gl.FLOAT,\n          isCompressed: false,\n          attachment: gl.DEPTH_ATTACHMENT\n        };\n      case TextureFormat.Depth32Stencil8:\n        return {\n          internalFormat: gl.DEPTH32F_STENCIL8,\n          baseFormat: gl.DEPTH_STENCIL,\n          dataType: gl.FLOAT_32_UNSIGNED_INT_24_8_REV,\n          isCompressed: false,\n          attachment: gl.DEPTH_STENCIL_ATTACHMENT\n        };\n      default:\n        throw new Error(`this TextureFormat is not supported in Galacean Engine: ${format}`);\n    }\n  }\n\n  /**\n   * In WebGL 1, internalformat must be the same as baseFormat when call texImage2D.\n   * @internal\n   */\n  static _getRenderBufferDepthFormatDetail(\n    format: TextureFormat,\n    gl: WebGLRenderingContext & WebGL2RenderingContext,\n    isWebGL2: boolean\n  ): TextureFormatDetail {\n    switch (format) {\n      case TextureFormat.Depth:\n        return {\n          internalFormat: isWebGL2 ? gl.DEPTH_COMPONENT32F : gl.DEPTH_COMPONENT16,\n          baseFormat: gl.DEPTH_COMPONENT,\n          dataType: isWebGL2 ? gl.FLOAT : gl.UNSIGNED_SHORT,\n          isCompressed: false,\n          attachment: gl.DEPTH_ATTACHMENT\n        };\n      case TextureFormat.DepthStencil:\n        return {\n          internalFormat: isWebGL2 ? gl.DEPTH32F_STENCIL8 : gl.DEPTH_STENCIL,\n          baseFormat: gl.DEPTH_STENCIL,\n          dataType: isWebGL2 ? gl.FLOAT_32_UNSIGNED_INT_24_8_REV : gl.UNSIGNED_INT_24_8,\n          isCompressed: false,\n          attachment: gl.DEPTH_STENCIL_ATTACHMENT\n        };\n      case TextureFormat.Stencil:\n        return {\n          internalFormat: gl.STENCIL_INDEX8,\n          baseFormat: gl.STENCIL_ATTACHMENT,\n          dataType: gl.UNSIGNED_BYTE,\n          isCompressed: false,\n          attachment: gl.STENCIL_ATTACHMENT\n        };\n      case TextureFormat.Depth16:\n        return {\n          internalFormat: gl.DEPTH_COMPONENT16,\n          baseFormat: gl.DEPTH_COMPONENT,\n          dataType: gl.UNSIGNED_SHORT,\n          isCompressed: false,\n          attachment: gl.DEPTH_ATTACHMENT\n        };\n      case TextureFormat.Depth24Stencil8:\n        return {\n          internalFormat: isWebGL2 ? gl.DEPTH24_STENCIL8 : gl.DEPTH_STENCIL,\n          baseFormat: gl.DEPTH_STENCIL,\n          dataType: gl.UNSIGNED_INT_24_8,\n          isCompressed: false,\n          attachment: gl.DEPTH_STENCIL_ATTACHMENT\n        };\n      case TextureFormat.Depth24:\n        return {\n          internalFormat: gl.DEPTH_COMPONENT24,\n          baseFormat: gl.DEPTH_COMPONENT,\n          dataType: gl.UNSIGNED_INT,\n          isCompressed: false,\n          attachment: gl.DEPTH_ATTACHMENT\n        };\n      case TextureFormat.Depth32:\n        return {\n          internalFormat: gl.DEPTH_COMPONENT32F,\n          baseFormat: gl.DEPTH_COMPONENT,\n          dataType: gl.FLOAT,\n          isCompressed: false,\n          attachment: gl.DEPTH_ATTACHMENT\n        };\n\n      case TextureFormat.Depth32Stencil8:\n        return {\n          internalFormat: gl.DEPTH32F_STENCIL8,\n          baseFormat: gl.DEPTH_STENCIL,\n          dataType: gl.FLOAT_32_UNSIGNED_INT_24_8_REV,\n          isCompressed: false,\n          attachment: gl.DEPTH_STENCIL_ATTACHMENT\n        };\n      default:\n        throw new Error(`this TextureFormat is not supported in Galacean Engine: ${format}`);\n    }\n  }\n\n  /**\n   * Check whether the corresponding texture format is supported.\n   * @internal\n   */\n  static _supportTextureFormat(format: TextureFormat, rhi: WebGLGraphicDevice): boolean {\n    switch (format) {\n      case TextureFormat.R16G16B16A16:\n        if (!rhi.canIUse(GLCapabilityType.textureHalfFloat)) {\n          return false;\n        }\n        break;\n      case TextureFormat.R32G32B32A32:\n        if (!rhi.canIUse(GLCapabilityType.textureFloat)) {\n          return false;\n        }\n        break;\n      case TextureFormat.Depth16:\n      case TextureFormat.Depth24Stencil8:\n      case TextureFormat.Depth:\n      case TextureFormat.DepthStencil:\n        if (!rhi.canIUse(GLCapabilityType.depthTexture)) {\n          return false;\n        }\n        break;\n      case TextureFormat.R11G11B10_UFloat:\n      case TextureFormat.R32G32B32A32_UInt:\n      case TextureFormat.Depth24:\n      case TextureFormat.Depth32:\n      case TextureFormat.Depth32Stencil8:\n        return rhi.isWebGL2;\n    }\n\n    return true;\n  }\n  /**\n   * @internal\n   */\n  static _supportRenderBufferColorFormat(format: TextureFormat, rhi: WebGLGraphicDevice): boolean {\n    let isSupported = true;\n\n    switch (format) {\n      case TextureFormat.R16G16B16A16:\n        {\n          if (!rhi.canIUse(GLCapabilityType.colorBufferHalfFloat) || !rhi.canIUse(GLCapabilityType.textureHalfFloat)) {\n            isSupported = false;\n          }\n        }\n        break;\n      case TextureFormat.R32G32B32A32:\n        {\n          if (!rhi.canIUse(GLCapabilityType.colorBufferFloat) || !rhi.canIUse(GLCapabilityType.textureFloat)) {\n            isSupported = false;\n          }\n        }\n        break;\n\n      case TextureFormat.R11G11B10_UFloat:\n        {\n          isSupported = rhi.isWebGL2;\n        }\n        break;\n    }\n\n    return isSupported;\n  }\n\n  /**\n   * @internal\n   */\n  static _supportRenderBufferDepthFormat(format: TextureFormat, rhi: WebGLGraphicDevice): boolean {\n    if (!rhi.isWebGL2) {\n      switch (format) {\n        case TextureFormat.Depth24:\n        case TextureFormat.Depth32:\n        case TextureFormat.Depth32Stencil8:\n          return false;\n      }\n    }\n\n    return true;\n  }\n\n  /** @internal */\n  _texture: Texture;\n  /** @internal */\n  _glTexture: WebGLTexture;\n  /** @internal */\n  _rhi: WebGLGraphicDevice;\n  /** @internal */\n  _gl: WebGLRenderingContext & WebGL2RenderingContext;\n  /** @internal */\n  _isWebGL2: boolean;\n  /** @internal */\n  _target: GLenum; // gl.TEXTURE_2D | gl.TEXTURE_CUBE_MAP\n  /** @internal */\n  _formatDetail: TextureFormatDetail;\n\n  /**\n   * Wrapping mode for texture coordinate S.\n   */\n  set wrapModeU(value: TextureWrapMode) {\n    this._bind();\n    this._setWrapMode(value, this._gl.TEXTURE_WRAP_S);\n  }\n\n  /**\n   * Wrapping mode for texture coordinate T.\n   */\n  set wrapModeV(value: TextureWrapMode) {\n    this._bind();\n    this._setWrapMode(value, this._gl.TEXTURE_WRAP_T);\n  }\n\n  /**\n   * Filter mode for texture.\n   */\n  set filterMode(value: TextureFilterMode) {\n    const gl = this._gl;\n    const target = this._target;\n    /** @ts-ignore */\n    const { _mipmap } = this._texture;\n\n    this._bind();\n    switch (value) {\n      case TextureFilterMode.Point:\n        gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, _mipmap ? gl.NEAREST_MIPMAP_NEAREST : gl.NEAREST);\n        break;\n      case TextureFilterMode.Bilinear:\n        gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, _mipmap ? gl.LINEAR_MIPMAP_NEAREST : gl.LINEAR);\n        break;\n      case TextureFilterMode.Trilinear:\n        gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, _mipmap ? gl.LINEAR_MIPMAP_LINEAR : gl.LINEAR);\n        break;\n    }\n  }\n\n  /**\n   * Anisotropic level for texture.\n   */\n  set anisoLevel(value: number) {\n    const gl = this._gl as WebGLRenderingContext & WebGL2RenderingContext & EXT_texture_filter_anisotropic;\n\n    this._bind();\n    gl.texParameterf(this._target, gl.TEXTURE_MAX_ANISOTROPY_EXT, value);\n  }\n\n  set depthCompareFunction(value: TextureDepthCompareFunction) {\n    this._bind();\n\n    const gl = this._gl;\n    switch (value) {\n      case TextureDepthCompareFunction.Never:\n        gl.texParameteri(this._target, gl.TEXTURE_COMPARE_FUNC, gl.NEVER);\n        break;\n      case TextureDepthCompareFunction.Less:\n        gl.texParameteri(this._target, gl.TEXTURE_COMPARE_FUNC, gl.LESS);\n        break;\n      case TextureDepthCompareFunction.Equal:\n        gl.texParameteri(this._target, gl.TEXTURE_COMPARE_FUNC, gl.EQUAL);\n        break;\n      case TextureDepthCompareFunction.LessEqual:\n        gl.texParameteri(this._target, gl.TEXTURE_COMPARE_FUNC, gl.LEQUAL);\n        break;\n      case TextureDepthCompareFunction.Greater:\n        gl.texParameteri(this._target, gl.TEXTURE_COMPARE_FUNC, gl.GREATER);\n        break;\n      case TextureDepthCompareFunction.NotEqual:\n        gl.texParameteri(this._target, gl.TEXTURE_COMPARE_FUNC, gl.NOTEQUAL);\n        break;\n      case TextureDepthCompareFunction.GreaterEqual:\n        gl.texParameteri(this._target, gl.TEXTURE_COMPARE_FUNC, gl.GEQUAL);\n        break;\n      case TextureDepthCompareFunction.Always:\n        gl.texParameteri(this._target, gl.TEXTURE_COMPARE_FUNC, gl.ALWAYS);\n        break;\n    }\n  }\n  /**\n   * Create texture in WebGL platform.\n   */\n  constructor(rhi: WebGLGraphicDevice, texture: Texture, target: GLenum) {\n    this._texture = texture;\n    this._rhi = rhi;\n    this._gl = rhi.gl as WebGLRenderingContext & WebGL2RenderingContext;\n    this._isWebGL2 = rhi.isWebGL2;\n    this._target = target;\n    this._glTexture = this._gl.createTexture();\n  }\n\n  /**\n   * Destroy texture.\n   */\n  destroy() {\n    this._gl.deleteTexture(this._glTexture);\n    this._texture = null;\n    this._glTexture = null;\n    this._formatDetail = null;\n  }\n\n  /**\n   * @internal\n   */\n  setUseDepthCompareMode(value: boolean): void {\n    const gl = this._gl;\n    gl.texParameteri(this._target, gl.TEXTURE_COMPARE_MODE, value ? gl.COMPARE_REF_TO_TEXTURE : gl.NONE);\n  }\n\n  /**\n   * Generate multi-level textures based on the 0th level data.\n   */\n  generateMipmaps(): void {\n    // @todo (1x1).generateMipmap() will flash back in uc.\n    if (this._texture.width !== 1 || this._texture.height !== 1) {\n      this._bind();\n      this._gl.generateMipmap(this._target);\n    }\n  }\n\n  protected _bind() {\n    this._rhi.bindTexture(this);\n  }\n\n  /**\n   * Pre-development mipmapping GPU memory.\n   */\n  protected _init(isCube: boolean): void {\n    const gl = this._gl;\n    const isWebGL2 = this._isWebGL2;\n    let { internalFormat, baseFormat, dataType } = this._formatDetail;\n    // @ts-ignore\n    const { mipmapCount, width, height, usage, _isDepthTexture } = this._texture;\n\n    this._bind();\n\n    if (isWebGL2 && !(baseFormat === gl.LUMINANCE_ALPHA || baseFormat === gl.ALPHA) && usage !== TextureUsage.Dynamic) {\n      gl.texStorage2D(this._target, mipmapCount, internalFormat, width, height);\n    } else {\n      if (!isCube) {\n        if (_isDepthTexture) {\n          gl.texImage2D(this._target, 0, internalFormat, width, height, 0, baseFormat, dataType, null);\n        } else {\n          for (let i = 0; i < mipmapCount; i++) {\n            const mipWidth = Math.max(1, width >> i);\n            const mipHeight = Math.max(1, height >> i);\n            gl.texImage2D(this._target, i, internalFormat, mipWidth, mipHeight, 0, baseFormat, dataType, null);\n          }\n        }\n      } else {\n        for (let i = 0; i < mipmapCount; i++) {\n          const size = Math.max(1, width >> i);\n          for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n            gl.texImage2D(\n              gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex,\n              i,\n              internalFormat,\n              size,\n              size,\n              0,\n              baseFormat,\n              dataType,\n              null\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Get the pixel color buffer according to the specified cube face and area.\n   * @param face - You can choose which cube face to read\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param out - Color buffer\n   * @param mipLevel - Set mip level the data want to get from\n   */\n  protected _getPixelBuffer(\n    face: TextureCubeFace | null,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    mipLevel: number,\n    out: ArrayBufferView\n  ): void {\n    const gl = this._gl;\n    const { baseFormat, dataType } = this._formatDetail;\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this._getReadFrameBuffer());\n\n    if (mipLevel > 0 && !this._isWebGL2) {\n      mipLevel = 0;\n      Logger.error(\"mipLevel only take effect in WebGL2.0\");\n    }\n\n    if (face != null) {\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_CUBE_MAP_POSITIVE_X + face,\n        this._glTexture,\n        mipLevel\n      );\n    } else {\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this._glTexture, mipLevel);\n    }\n    gl.readPixels(x, y, width, height, baseFormat, dataType, out);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  }\n\n  private _setWrapMode(value: TextureWrapMode, pname: GLenum): void {\n    const gl = this._gl;\n    const isWebGL2 = this._isWebGL2;\n    const target = this._target;\n    const { width, height } = this._texture;\n\n    if (\n      !isWebGL2 &&\n      value !== TextureWrapMode.Clamp &&\n      (!GLTexture._isPowerOf2(width) || !GLTexture._isPowerOf2(height))\n    ) {\n      Logger.warn(\n        \"non-power-2 texture is not supported for REPEAT or MIRRORED_REPEAT in WebGL1,and has automatically downgraded to CLAMP_TO_EDGE\"\n      );\n      value = TextureWrapMode.Clamp;\n    }\n\n    switch (value) {\n      case TextureWrapMode.Clamp:\n        gl.texParameteri(target, pname, gl.CLAMP_TO_EDGE);\n        break;\n      case TextureWrapMode.Repeat:\n        gl.texParameteri(target, pname, gl.REPEAT);\n        break;\n      case TextureWrapMode.Mirror:\n        gl.texParameteri(target, pname, gl.MIRRORED_REPEAT);\n        break;\n    }\n  }\n\n  protected _getReadFrameBuffer(): WebGLFramebuffer {\n    let frameBuffer = this._rhi._readFrameBuffer;\n    if (!frameBuffer) {\n      this._rhi._readFrameBuffer = frameBuffer = this._gl.createFramebuffer();\n    }\n    return frameBuffer;\n  }\n}\n","import {\n  GLCapabilityType,\n  IPlatformRenderTarget,\n  Logger,\n  RenderTarget,\n  Texture,\n  TextureCube,\n  TextureCubeFace,\n  TextureFormat\n} from \"@galacean/engine-core\";\nimport { GLTexture } from \"./GLTexture\";\nimport { WebGLGraphicDevice } from \"./WebGLGraphicDevice\";\n\n/**\n * The render target in WebGL platform is used for off-screen rendering.\n */\nexport class GLRenderTarget implements IPlatformRenderTarget {\n  private _gl: WebGLRenderingContext & WebGL2RenderingContext;\n  private _isWebGL2: boolean;\n  private _target: RenderTarget;\n  private _frameBuffer: WebGLFramebuffer;\n  private _MSAAFrameBuffer: WebGLFramebuffer | null;\n  private _depthRenderBuffer: WebGLRenderbuffer | null;\n  private _MSAAColorRenderBuffers: WebGLRenderbuffer[] = [];\n  private _MSAADepthRenderBuffer: WebGLRenderbuffer | null;\n  private _oriDrawBuffers: GLenum[];\n  private _blitDrawBuffers: GLenum[] | null;\n  private _curMipLevel: number = 0;\n  private _curFaceIndex: TextureCubeFace = undefined;\n\n  /**\n   * Create render target in WebGL platform.\n   */\n  constructor(rhi: WebGLGraphicDevice, target: RenderTarget) {\n    this._gl = rhi.gl as WebGLRenderingContext & WebGL2RenderingContext;\n    this._isWebGL2 = rhi.isWebGL2;\n    this._target = target;\n\n    /** @ts-ignore */\n    const { _colorTextures, _depth, width, height } = target;\n    const isDepthTexture = _depth instanceof Texture;\n\n    /** todo\n     * MRT + Cube + [,MSAA]\n     * MRT + MSAA\n     */\n\n    for (let i = 0, n = _colorTextures.length; i < n; i++) {\n      const format = _colorTextures[i]._format;\n      if (!GLTexture._supportRenderBufferColorFormat(format, rhi)) {\n        throw new Error(`TextureFormat is not supported:${TextureFormat[format]} in RenderTarget`);\n      }\n    }\n\n    if (!isDepthTexture && !GLTexture._supportRenderBufferDepthFormat(_depth, rhi)) {\n      throw new Error(`TextureFormat is not supported:${TextureFormat[_depth]} in RenderTarget`);\n    }\n\n    if (_colorTextures.length > 1 && !rhi.canIUse(GLCapabilityType.drawBuffers)) {\n      throw new Error(\"MRT is not supported\");\n    }\n\n    if (_colorTextures.some((v: Texture) => v.width !== width || v.height !== height)) {\n      throw new Error(\"ColorTexture's size must as same as RenderTarget\");\n    }\n\n    if (isDepthTexture && (_depth.width !== width || _depth.height !== height)) {\n      throw new Error(\"DepthTexture's size must as same as RenderTarget\");\n    }\n\n    // todo: necessary to support MRT + Cube + [,MSAA] ?\n    if (_colorTextures.length > 1 && _colorTextures.some((v: Texture) => v instanceof TextureCube)) {\n      throw new Error(\"MRT+Cube+[,MSAA] is not supported\");\n    }\n\n    const maxAntiAliasing = rhi.capability.maxAntiAliasing;\n    if (target.antiAliasing > maxAntiAliasing) {\n      Logger.warn(`MSAA antiAliasing exceeds the limit and is automatically downgraded to:${maxAntiAliasing}`);\n\n      /** @ts-ignore */\n      target._antiAliasing = maxAntiAliasing;\n    }\n\n    this._frameBuffer = this._gl.createFramebuffer();\n\n    // bind main FBO\n    this._bindMainFBO();\n\n    // bind MSAA FBO\n    if (target.antiAliasing > 1) {\n      this._MSAAFrameBuffer = this._gl.createFramebuffer();\n      this._bindMSAAFBO();\n    }\n  }\n\n  /**\n   * Set which face and mipLevel of the cube texture to render to.\n   * @param mipLevel - Set mip level the data want to write\n   * @param faceIndex - Cube texture face\n   */\n  activeRenderTarget(mipLevel: number, faceIndex?: TextureCubeFace): void {\n    // @todo: support MRT\n    const { _gl: gl, _target: target } = this;\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);\n\n    const mipChanged = mipLevel !== this._curMipLevel;\n    const faceChanged = faceIndex !== this._curFaceIndex;\n\n    const colorTexture = target.getColorTexture(0);\n    if (colorTexture) {\n      const isCube = colorTexture instanceof TextureCube;\n      if (mipChanged || (isCube && faceChanged)) {\n        gl.framebufferTexture2D(\n          gl.FRAMEBUFFER,\n          gl.COLOR_ATTACHMENT0,\n          isCube ? gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex : gl.TEXTURE_2D,\n          // @ts-ignore\n          (colorTexture._platformTexture as GLTexture)._glTexture,\n          mipLevel\n        );\n      }\n    }\n\n    const { depthTexture } = target;\n    if (depthTexture) {\n      const isCube = depthTexture instanceof TextureCube;\n      if (mipChanged || isCube) {\n        // @ts-ignore\n        const platformTexture = <GLTexture>depthTexture._platformTexture;\n        gl.framebufferTexture2D(\n          gl.FRAMEBUFFER,\n          platformTexture._formatDetail.attachment,\n          isCube ? gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex : gl.TEXTURE_2D,\n          platformTexture._glTexture,\n          mipLevel\n        );\n      }\n    } else {\n      if (mipChanged) {\n        // @ts-ignore\n        const { internalFormat } = GLTexture._getRenderBufferDepthFormatDetail(target._depth, gl, this._isWebGL2);\n        gl.bindRenderbuffer(gl.RENDERBUFFER, this._depthRenderBuffer);\n        gl.renderbufferStorage(gl.RENDERBUFFER, internalFormat, target.width >> mipLevel, target.height >> mipLevel);\n      }\n    }\n\n    this._curMipLevel = mipLevel;\n    this._curFaceIndex = faceIndex;\n\n    if (this._MSAAFrameBuffer) {\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this._MSAAFrameBuffer);\n    }\n  }\n\n  /**\n   * Blit FBO.\n   */\n  blitRenderTarget(): void {\n    if (!this._MSAAFrameBuffer) return;\n\n    const gl = this._gl;\n    const mask = gl.COLOR_BUFFER_BIT | (this._target.depthTexture ? gl.DEPTH_BUFFER_BIT : 0);\n    const { colorTextureCount, width, height } = this._target;\n\n    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, this._MSAAFrameBuffer);\n    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this._frameBuffer);\n\n    for (let textureIndex = 0; textureIndex < colorTextureCount; textureIndex++) {\n      const attachment = gl.COLOR_ATTACHMENT0 + textureIndex;\n\n      this._blitDrawBuffers[textureIndex] = attachment;\n\n      gl.readBuffer(attachment);\n      gl.drawBuffers(this._blitDrawBuffers);\n      gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, gl.NEAREST);\n\n      this._blitDrawBuffers[textureIndex] = gl.NONE;\n    }\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  }\n\n  /**\n   * Destroy render target.\n   */\n  destroy(): void {\n    const gl = this._gl;\n\n    this._frameBuffer && gl.deleteFramebuffer(this._frameBuffer);\n    this._depthRenderBuffer && gl.deleteRenderbuffer(this._depthRenderBuffer);\n    this._MSAAFrameBuffer && gl.deleteFramebuffer(this._MSAAFrameBuffer);\n    this._MSAADepthRenderBuffer && gl.deleteRenderbuffer(this._MSAADepthRenderBuffer);\n\n    for (let i = 0; i < this._MSAAColorRenderBuffers.length; i++) {\n      gl.deleteRenderbuffer(this._MSAAColorRenderBuffers[i]);\n    }\n\n    this._frameBuffer = null;\n    this._depthRenderBuffer = null;\n    this._MSAAFrameBuffer = null;\n    this._MSAAColorRenderBuffers.length = 0;\n    this._MSAADepthRenderBuffer = null;\n  }\n\n  private _bindMainFBO(): void {\n    const gl = this._gl;\n    const isWebGL2: boolean = this._isWebGL2;\n\n    /** @ts-ignore */\n    const { _depth, colorTextureCount, width, height } = this._target;\n    const drawBuffers = new Array(colorTextureCount);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);\n\n    /** color render buffer */\n    for (let i = 0; i < colorTextureCount; i++) {\n      const colorTexture = this._target.getColorTexture(i);\n      const attachment = gl.COLOR_ATTACHMENT0 + i;\n\n      drawBuffers[i] = attachment;\n\n      if (!(colorTexture instanceof TextureCube)) {\n        gl.framebufferTexture2D(\n          gl.FRAMEBUFFER,\n          attachment,\n          gl.TEXTURE_2D,\n          /** @ts-ignore */\n          (colorTexture._platformTexture as GLTexture)._glTexture,\n          0\n        );\n      }\n    }\n\n    if (colorTextureCount > 1) {\n      gl.drawBuffers(drawBuffers);\n    }\n    this._oriDrawBuffers = drawBuffers;\n\n    /** depth render buffer */\n    if (_depth !== null) {\n      if (_depth instanceof Texture && !(_depth instanceof TextureCube)) {\n        // @ts-ignore\n        const platformTexture = _depth._platformTexture as GLTexture;\n        gl.framebufferTexture2D(\n          gl.FRAMEBUFFER,\n          platformTexture._formatDetail.attachment,\n          gl.TEXTURE_2D,\n          platformTexture._glTexture,\n          0\n        );\n      } else if (this._target.antiAliasing <= 1) {\n        const { internalFormat, attachment } = GLTexture._getRenderBufferDepthFormatDetail(_depth, gl, isWebGL2);\n        const depthRenderBuffer = gl.createRenderbuffer();\n\n        this._depthRenderBuffer = depthRenderBuffer;\n\n        gl.bindRenderbuffer(gl.RENDERBUFFER, depthRenderBuffer);\n        gl.renderbufferStorage(gl.RENDERBUFFER, internalFormat, width, height);\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachment, gl.RENDERBUFFER, depthRenderBuffer);\n      }\n    }\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n  }\n\n  private _bindMSAAFBO(): void {\n    const gl = this._gl;\n    const isWebGL2 = this._isWebGL2;\n    const MSAADepthRenderBuffer = gl.createRenderbuffer();\n\n    /** @ts-ignore */\n    const { _depth, colorTextureCount, antiAliasing, width, height } = this._target;\n\n    this._blitDrawBuffers = new Array(colorTextureCount);\n    this._MSAADepthRenderBuffer = MSAADepthRenderBuffer;\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this._MSAAFrameBuffer);\n\n    // prepare MRT+MSAA color RBOs\n    for (let i = 0; i < colorTextureCount; i++) {\n      const MSAAColorRenderBuffer = gl.createRenderbuffer();\n\n      this._MSAAColorRenderBuffers[i] = MSAAColorRenderBuffer;\n      this._blitDrawBuffers[i] = gl.NONE;\n\n      gl.bindRenderbuffer(gl.RENDERBUFFER, MSAAColorRenderBuffer);\n      gl.renderbufferStorageMultisample(\n        gl.RENDERBUFFER,\n        antiAliasing,\n        /** @ts-ignore */\n        (this._target.getColorTexture(i)._platformTexture as GLTexture)._formatDetail.internalFormat,\n        width,\n        height\n      );\n      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, gl.RENDERBUFFER, MSAAColorRenderBuffer);\n    }\n    gl.drawBuffers(this._oriDrawBuffers);\n\n    // prepare MSAA depth RBO\n    if (_depth !== null) {\n      const { internalFormat, attachment } =\n        _depth instanceof Texture\n          ? /** @ts-ignore */\n            (_depth._platformTexture as GLTexture)._formatDetail\n          : GLTexture._getRenderBufferDepthFormatDetail(_depth, gl, isWebGL2);\n\n      gl.bindRenderbuffer(gl.RENDERBUFFER, MSAADepthRenderBuffer);\n      gl.renderbufferStorageMultisample(gl.RENDERBUFFER, antiAliasing, internalFormat, width, height);\n      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachment, gl.RENDERBUFFER, MSAADepthRenderBuffer);\n    }\n\n    this._checkFrameBuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n  }\n\n  private _checkFrameBuffer(): void {\n    const gl = this._gl;\n    const isWebGL2 = this._isWebGL2;\n    const e = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n\n    switch (e) {\n      case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n        throw new Error(\n          \"The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete\"\n        );\n      case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n        throw new Error(\"There is no attachment\");\n      case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n        throw new Error(\" Height and width of the attachment are not the same.\");\n      case gl.FRAMEBUFFER_UNSUPPORTED:\n        throw new Error(\n          \"The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer\"\n        );\n    }\n\n    if (isWebGL2 && e === gl.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE) {\n      throw new Error(\n        \"The values of gl.RENDERBUFFER_SAMPLES are different among attached renderbuffers, or are non-zero if the attached images are a mix of renderbuffers and textures.\"\n      );\n    }\n  }\n}\n","import { IPlatformTexture2D, Logger, Texture2D, TextureFormat, TextureUsage } from \"@galacean/engine-core\";\nimport { GLTexture } from \"./GLTexture\";\nimport { WebGLGraphicDevice } from \"./WebGLGraphicDevice\";\n\n/**\n * Texture 2d in WebGL platform.\n */\nexport class GLTexture2D extends GLTexture implements IPlatformTexture2D {\n  /** Backward compatible with WebGL1.0. */\n  private _compressedMipFilled: number = 0;\n\n  constructor(rhi: WebGLGraphicDevice, texture2D: Texture2D) {\n    super(rhi, texture2D, rhi.gl.TEXTURE_2D);\n\n    /** @ts-ignore */\n    const { format, _mipmap, width, height } = texture2D;\n    const isWebGL2 = this._isWebGL2;\n\n    /** @ts-ignore */\n    if (!GLTexture._supportTextureFormat(format, rhi)) {\n      throw new Error(`Texture format is not supported:${TextureFormat[format]}`);\n    }\n\n    if (_mipmap && !isWebGL2 && (!GLTexture._isPowerOf2(width) || !GLTexture._isPowerOf2(height))) {\n      Logger.warn(\n        \"non-power-2 texture is not supported for mipmap in WebGL1,and has automatically downgraded to non-mipmap\"\n      );\n\n      /** @ts-ignore */\n      texture2D._mipmap = false;\n      /** @ts-ignore */\n      texture2D._mipmapCount = texture2D._getMipmapCount();\n    }\n\n    this._formatDetail = GLTexture._getFormatDetail(format, this._gl, isWebGL2);\n    (this._formatDetail.isCompressed && !isWebGL2) || this._init(false);\n  }\n\n  /**\n   * {@inheritDoc IPlatformTexture2D.setPixelBuffer}\n   */\n  setPixelBuffer(\n    colorBuffer: ArrayBufferView,\n    mipLevel: number = 0,\n    x: number,\n    y: number,\n    width?: number,\n    height?: number\n  ): void {\n    const gl = this._gl;\n    const isWebGL2: boolean = this._isWebGL2;\n    const { internalFormat, baseFormat, dataType, isCompressed } = this._formatDetail;\n    const mipWidth = Math.max(1, this._texture.width >> mipLevel);\n    const mipHeight = Math.max(1, this._texture.height >> mipLevel);\n\n    width = width || mipWidth - x;\n    height = height || mipHeight - y;\n\n    this._bind();\n\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 0);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0);\n\n    if (isCompressed) {\n      const mipBit = 1 << mipLevel;\n      if (isWebGL2 || this._compressedMipFilled & mipBit) {\n        gl.compressedTexSubImage2D(this._target, mipLevel, x, y, width, height, internalFormat, colorBuffer);\n      } else {\n        gl.compressedTexImage2D(this._target, mipLevel, internalFormat, width, height, 0, colorBuffer);\n        this._compressedMipFilled |= mipBit;\n      }\n    } else {\n      gl.texSubImage2D(this._target, mipLevel, x, y, width, height, baseFormat, dataType, colorBuffer);\n    }\n  }\n\n  /**\n   * {@inheritDoc IPlatformTexture2D.setImageSource}\n   */\n  setImageSource(\n    imageSource: TexImageSource,\n    mipLevel: number,\n    flipY: boolean,\n    premultiplyAlpha: boolean,\n    x: number,\n    y: number\n  ): void {\n    const gl = this._gl;\n    const { internalFormat, baseFormat, dataType } = this._formatDetail;\n\n    this._bind();\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, +flipY);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, +premultiplyAlpha);\n\n    if (this._texture.usage === TextureUsage.Dynamic) {\n      gl.texImage2D(this._target, mipLevel, internalFormat, baseFormat, dataType, imageSource);\n    } else {\n      gl.texSubImage2D(this._target, mipLevel, x || 0, y || 0, baseFormat, dataType, imageSource);\n    }\n  }\n\n  /**\n   * {@inheritDoc IPlatformTexture2D.getPixelBuffer }\n   */\n  getPixelBuffer(x: number, y: number, width: number, height: number, mipLevel: number, out: ArrayBufferView): void {\n    if (this._formatDetail.isCompressed) {\n      throw new Error(\"Unable to read compressed texture\");\n    }\n    super._getPixelBuffer(null, x, y, width, height, mipLevel, out);\n  }\n}\n","import { IPlatformTexture2DArray, Texture2DArray, TextureFormat } from \"@galacean/engine-core\";\nimport { GLTexture } from \"./GLTexture\";\nimport { WebGLGraphicDevice } from \"./WebGLGraphicDevice\";\n\n/**\n * Texture 2D array in WebGL platform.\n */\nexport class GLTexture2DArray extends GLTexture implements IPlatformTexture2DArray {\n  constructor(rhi: WebGLGraphicDevice, texture2DArray: Texture2DArray) {\n    super(rhi, texture2DArray, (<WebGL2RenderingContext>rhi.gl).TEXTURE_2D_ARRAY);\n\n    const { format, width, height, length, mipmapCount } = texture2DArray;\n\n    if (!this._isWebGL2) {\n      throw new Error(`Texture2D Array is not supported in WebGL1.0`);\n    }\n\n    /** @ts-ignore */\n    if (!GLTexture._supportTextureFormat(format, rhi)) {\n      throw new Error(`Texture format is not supported:${TextureFormat[format]}`);\n    }\n\n    this._bind();\n    this._formatDetail = GLTexture._getFormatDetail(format, this._gl, true);\n    this._gl.texStorage3D(this._target, mipmapCount, this._formatDetail.internalFormat, width, height, length);\n  }\n\n  /**\n   * {@inheritDoc IPlatformTexture2DArray.setPixelBuffer}\n   */\n  setPixelBuffer(\n    offsetIndex: number,\n    colorBuffer: ArrayBufferView,\n    mipLevel: number,\n    x: number,\n    y: number,\n    width?: number,\n    height?: number,\n    length?: number\n  ): void {\n    const { _target: target, _gl: gl } = this;\n    const { internalFormat, baseFormat, dataType, isCompressed } = this._formatDetail;\n\n    width = width || Math.max(1, this._texture.width >> mipLevel) - x;\n    height = height || Math.max(1, this._texture.height >> mipLevel) - y;\n    length = length || (<Texture2DArray>this._texture).length;\n\n    this._bind();\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 0);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0);\n\n    if (isCompressed) {\n      gl.compressedTexSubImage3D(\n        target,\n        mipLevel,\n        x,\n        y,\n        offsetIndex,\n        width,\n        height,\n        length,\n        internalFormat,\n        colorBuffer\n      );\n    } else {\n      gl.texSubImage3D(target, mipLevel, x, y, offsetIndex, width, height, length, baseFormat, dataType, colorBuffer);\n    }\n  }\n\n  /**\n   * {@inheritDoc IPlatformTexture2DArray.setImageSource}\n   */\n  setImageSource(\n    elementIndex: number,\n    imageSource: TexImageSource,\n    mipLevel: number,\n    flipY: boolean,\n    premultiplyAlpha: boolean,\n    x: number,\n    y: number\n  ): void {\n    const gl = this._gl;\n    const { baseFormat, dataType } = this._formatDetail;\n\n    this._bind();\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, +flipY);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, +premultiplyAlpha);\n    gl.texSubImage3D(\n      this._target,\n      mipLevel,\n      x,\n      y,\n      elementIndex,\n      (<Exclude<TexImageSource, VideoFrame>>imageSource).width ?? (<VideoFrame>imageSource).codedWidth,\n      (<Exclude<TexImageSource, VideoFrame>>imageSource).height ?? (<VideoFrame>imageSource).codedHeight,\n      1,\n      baseFormat,\n      dataType,\n      imageSource\n    );\n  }\n\n  /**\n   * {@inheritDoc IPlatformTexture2DArray.getPixelBuffer}\n   */\n  getPixelBuffer(\n    elementIndex: number,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    mipLevel: number,\n    out: ArrayBufferView\n  ): void {\n    const { _gl: gl, _formatDetail: formatDetail } = this;\n\n    if (formatDetail.isCompressed) {\n      throw new Error(\"Unable to read compressed texture\");\n    }\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this._getReadFrameBuffer());\n    gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, this._glTexture, mipLevel, elementIndex);\n    gl.readPixels(x, y, width, height, formatDetail.baseFormat, formatDetail.dataType, out);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  }\n}\n","import { IPlatformTextureCube, Logger, TextureCube, TextureCubeFace, TextureFormat } from \"@galacean/engine-core\";\nimport { GLTexture } from \"./GLTexture\";\nimport { WebGLGraphicDevice } from \"./WebGLGraphicDevice\";\n\n/**\n * Cube texture in WebGL platform.\n */\nexport class GLTextureCube extends GLTexture implements IPlatformTextureCube {\n  /** Backward compatible with WebGL1.0. */\n  private _compressedFaceFilled: number[] = [0, 0, 0, 0, 0, 0];\n\n  constructor(rhi: WebGLGraphicDevice, textureCube: TextureCube) {\n    super(rhi, textureCube, rhi.gl.TEXTURE_CUBE_MAP);\n\n    /** @ts-ignore */\n    const { format, _mipmap, width: size } = textureCube;\n    const isWebGL2 = this._isWebGL2;\n\n    /** @ts-ignore */\n    if (!GLTexture._supportTextureFormat(format, rhi)) {\n      throw new Error(`Texture format is not supported:${TextureFormat[format]}`);\n    }\n\n    if (_mipmap && !isWebGL2 && !GLTexture._isPowerOf2(size)) {\n      Logger.warn(\n        \"non-power-2 texture is not supported for mipmap in WebGL1,and has automatically downgraded to non-mipmap\"\n      );\n\n      /** @ts-ignore */\n      textureCube._mipmap = false;\n      /** @ts-ignore */\n      textureCube._mipmapCount = textureCube._getMipmapCount();\n    }\n\n    this._formatDetail = GLTexture._getFormatDetail(format, this._gl, isWebGL2);\n    (this._formatDetail.isCompressed && !isWebGL2) || this._init(true);\n  }\n\n  /**\n   * {@inheritDoc IPlatformTextureCube.setPixelBuffer}\n   */\n  setPixelBuffer(\n    face: TextureCubeFace,\n    colorBuffer: ArrayBufferView,\n    mipLevel: number,\n    x: number,\n    y: number,\n    width?: number,\n    height?: number\n  ): void {\n    const gl = this._gl;\n    const isWebGL2 = this._isWebGL2;\n    const { internalFormat, baseFormat, dataType, isCompressed } = this._formatDetail;\n    const mipSize = Math.max(1, this._texture.width >> mipLevel);\n\n    width = width || mipSize - x;\n    height = height || mipSize - y;\n\n    this._bind();\n\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 0);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0);\n\n    if (isCompressed) {\n      const mipBit = 1 << mipLevel;\n      if (isWebGL2 || this._compressedFaceFilled[face] & mipBit) {\n        gl.compressedTexSubImage2D(\n          gl.TEXTURE_CUBE_MAP_POSITIVE_X + face,\n          mipLevel,\n          x,\n          y,\n          width,\n          height,\n          internalFormat,\n          colorBuffer\n        );\n      } else {\n        gl.compressedTexImage2D(\n          gl.TEXTURE_CUBE_MAP_POSITIVE_X + face,\n          mipLevel,\n          internalFormat,\n          width,\n          height,\n          0,\n          colorBuffer\n        );\n        this._compressedFaceFilled[face] |= mipBit;\n      }\n    } else {\n      gl.texSubImage2D(\n        gl.TEXTURE_CUBE_MAP_POSITIVE_X + face,\n        mipLevel,\n        x,\n        y,\n        width,\n        height,\n        baseFormat,\n        dataType,\n        colorBuffer\n      );\n    }\n  }\n\n  /**\n   * {@inheritDoc IPlatformTextureCube.setImageSource}\n   */\n  setImageSource(\n    face: TextureCubeFace,\n    imageSource: TexImageSource,\n    mipLevel: number,\n    flipY: boolean,\n    premultiplyAlpha: boolean,\n    x: number,\n    y: number\n  ): void {\n    const gl = this._gl;\n    const { baseFormat, dataType } = this._formatDetail;\n\n    this._bind();\n\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, +flipY);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, +premultiplyAlpha);\n    gl.texSubImage2D(\n      gl.TEXTURE_CUBE_MAP_POSITIVE_X + face,\n      mipLevel,\n      x || 0,\n      y || 0,\n      baseFormat,\n      dataType,\n      imageSource\n    );\n  }\n\n  /**\n   * {@inheritDoc IPlatformTextureCube.getPixelBuffer}\n   */\n  getPixelBuffer(\n    face: TextureCubeFace,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    mipLevel: number,\n    out: ArrayBufferView\n  ): void {\n    if (this._formatDetail.isCompressed) {\n      throw new Error(\"Unable to read compressed texture\");\n    }\n    super._getPixelBuffer(face, x, y, width, height, mipLevel, out);\n  }\n}\n","import {\n  BufferBindFlag,\n  BufferUsage,\n  CameraClearFlags,\n  Canvas,\n  ColorWriteMask,\n  Engine,\n  GLCapabilityType,\n  IPlatformBuffer,\n  IPlatformRenderTarget,\n  IPlatformTexture2D,\n  IPlatformTextureCube,\n  Logger,\n  Mesh,\n  Platform,\n  RenderTarget,\n  SubMesh,\n  SystemInfo,\n  Texture2D,\n  Texture2DArray,\n  TextureCube,\n  TextureCubeFace\n} from \"@galacean/engine-core\";\nimport { IHardwareRenderer, IPlatformPrimitive } from \"@galacean/engine-design\";\nimport { Color, Vector4 } from \"@galacean/engine-math\";\nimport { GLBuffer } from \"./GLBuffer\";\nimport { GLCapability } from \"./GLCapability\";\nimport { GLExtensions } from \"./GLExtensions\";\nimport { GLPrimitive } from \"./GLPrimitive\";\nimport { GLRenderStates } from \"./GLRenderStates\";\nimport { GLRenderTarget } from \"./GLRenderTarget\";\nimport { GLTexture } from \"./GLTexture\";\nimport { GLTexture2D } from \"./GLTexture2D\";\nimport { GLTexture2DArray } from \"./GLTexture2DArray\";\nimport { GLTextureCube } from \"./GLTextureCube\";\nimport { WebCanvas } from \"./WebCanvas\";\nimport { WebGLExtension } from \"./type\";\n\n/**\n * WebGL mode.\n */\nexport enum WebGLMode {\n  /** Auto, use WebGL2.0 if support, or will fallback to WebGL1.0. */\n  Auto = 0,\n  /** WebGL2.0. */\n  WebGL2 = 1,\n  /** WebGL1.0, */\n  WebGL1 = 2\n}\n\n/**\n * WebGL graphic device options.\n */\nexport interface WebGLGraphicDeviceOptions extends WebGLContextAttributes {\n  /** WebGL mode.*/\n  webGLMode?: WebGLMode;\n\n  /**\n   * @internal\n   * iOS 15 webgl implement has bug, maybe should force call flush command buffer, for example iPhone13(iOS 15.4.1).\n   */\n  _forceFlush?: boolean;\n\n  /**\n   * @internal\n   * Max allow skin uniform vectors count, default is 256\n   *\n   * @remarks large count maybe cause performance issue.\n   */\n  _maxAllowSkinUniformVectorCount?: number;\n}\n\n/**\n * WebGL graphic device, including WebGL1.0 and WebGL2.0.\n */\nexport class WebGLGraphicDevice implements IHardwareRenderer {\n  /** @internal */\n  _readFrameBuffer: WebGLFramebuffer = null;\n  /** @internal */\n  _mainFrameBuffer: WebGLFramebuffer = null;\n  /** @internal */\n  _mainFrameWidth: number = 0;\n  /** @internal */\n  _mainFrameHeight: number = 0;\n  /** @internal */\n  _enableGlobalDepthBias: boolean = false;\n  /** @internal */\n  _currentBindShaderProgram: any;\n\n  private _options: WebGLGraphicDeviceOptions;\n  private _gl: (WebGLRenderingContext & WebGLExtension) | WebGL2RenderingContext;\n  private _renderStates;\n  private _extensions;\n  private _capability: GLCapability;\n  private _isWebGL2: boolean;\n  private _renderer: string;\n  private _webCanvas: HTMLCanvasElement | OffscreenCanvas;\n\n  private _activeTextureID: number;\n  private _activeTextures: GLTexture[] = new Array(32);\n\n  private _lastViewport: Vector4 = new Vector4(null, null, null, null);\n  private _lastScissor: Vector4 = new Vector4(null, null, null, null);\n  private _lastClearColor: Color = new Color(null, null, null, null);\n  private _scissorEnable: boolean = false;\n\n  private _onDeviceLost: () => void;\n  private _onDeviceRestored: () => void;\n\n  get isWebGL2(): boolean {\n    return this._isWebGL2;\n  }\n\n  get renderer(): string {\n    return this._renderer;\n  }\n\n  /**\n   * GL Context\n   * @member {WebGLRenderingContext}\n   */\n  get gl() {\n    return this._gl;\n  }\n\n  get renderStates(): GLRenderStates {\n    return this._renderStates;\n  }\n\n  get capability(): GLCapability {\n    return this._capability;\n  }\n\n  get canIUseMoreJoints() {\n    return this.capability.canIUseMoreJoints;\n  }\n\n  constructor(initializeOptions: WebGLGraphicDeviceOptions = {}) {\n    const options = {\n      webGLMode: WebGLMode.Auto,\n      stencil: true,\n      _forceFlush: false,\n      _maxAllowSkinUniformVectorCount: 256,\n      ...initializeOptions\n    };\n    if (SystemInfo.platform === Platform.IPhone || SystemInfo.platform === Platform.IPad) {\n      const version = SystemInfo.operatingSystem.match(/(\\d+).?(\\d+)?.?(\\d+)?/);\n      if (version) {\n        const majorVersion = parseInt(version[1]);\n        const minorVersion = parseInt(version[2]);\n        if (majorVersion === 15 && minorVersion >= 0 && minorVersion <= 4) {\n          options._forceFlush = true;\n        }\n      }\n    }\n    this._options = options;\n\n    this._onWebGLContextLost = this._onWebGLContextLost.bind(this);\n    this._onWebGLContextRestored = this._onWebGLContextRestored.bind(this);\n  }\n\n  init(canvas: Canvas, onDeviceLost: () => void, onDeviceRestored: () => void): void {\n    const options = this._options;\n    const webCanvas = (canvas as WebCanvas)._webCanvas;\n    const webGLMode = options.webGLMode;\n\n    this._onDeviceLost = onDeviceLost;\n    this._onDeviceRestored = onDeviceRestored;\n    webCanvas.addEventListener(\"webglcontextlost\", this._onWebGLContextLost, false);\n    webCanvas.addEventListener(\"webglcontextrestored\", this._onWebGLContextRestored, false);\n    webCanvas.addEventListener(\"webglcontextcreationerror\", this._onContextCreationError, false);\n\n    this._webCanvas = webCanvas;\n\n    let gl: (WebGLRenderingContext & WebGLExtension) | WebGL2RenderingContext;\n    if (webGLMode == WebGLMode.Auto || webGLMode == WebGLMode.WebGL2) {\n      gl = webCanvas.getContext(\"webgl2\", options);\n      if (!gl && (typeof OffscreenCanvas === \"undefined\" || !(webCanvas instanceof OffscreenCanvas))) {\n        gl = <WebGL2RenderingContext>webCanvas.getContext(\"experimental-webgl2\", options);\n      }\n      this._isWebGL2 = true;\n\n      // Prevent weird browsers to lie (such as safari!)\n      if (gl && !(<WebGL2RenderingContext>gl).deleteQuery) {\n        this._isWebGL2 = false;\n      }\n    }\n\n    if (!gl) {\n      if (webGLMode == WebGLMode.Auto || webGLMode == WebGLMode.WebGL1) {\n        gl = <WebGLRenderingContext & WebGLExtension>webCanvas.getContext(\"webgl\", options);\n        if (!gl && (typeof OffscreenCanvas === \"undefined\" || !(webCanvas instanceof OffscreenCanvas))) {\n          gl = <WebGLRenderingContext & WebGLExtension>webCanvas.getContext(\"experimental-webgl\", options);\n        }\n        this._isWebGL2 = false;\n      }\n    }\n\n    if (!gl) {\n      throw new Error(\"Get GL Context FAILED.\");\n    }\n\n    this._gl = gl;\n    this._initGLState(gl);\n  }\n\n  createPlatformPrimitive(primitive: Mesh): IPlatformPrimitive {\n    return new GLPrimitive(this, primitive);\n  }\n\n  createPlatformTexture2D(texture2D: Texture2D): IPlatformTexture2D {\n    return new GLTexture2D(this, texture2D);\n  }\n\n  createPlatformTexture2DArray(texture2D: Texture2DArray): GLTexture2DArray {\n    return new GLTexture2DArray(this, texture2D);\n  }\n\n  createPlatformTextureCube(textureCube: TextureCube): IPlatformTextureCube {\n    return new GLTextureCube(this, textureCube);\n  }\n\n  createPlatformRenderTarget(target: RenderTarget): IPlatformRenderTarget {\n    return new GLRenderTarget(this, target);\n  }\n\n  createPlatformBuffer(\n    type: BufferBindFlag,\n    byteLength: number,\n    bufferUsage: BufferUsage = BufferUsage.Static,\n    data?: ArrayBuffer | ArrayBufferView\n  ): IPlatformBuffer {\n    return new GLBuffer(this, type, byteLength, bufferUsage, data);\n  }\n\n  requireExtension(ext) {\n    return this._extensions.requireExtension(ext);\n  }\n\n  canIUse(capabilityType: GLCapabilityType) {\n    return this.capability.canIUse(capabilityType);\n  }\n\n  canIUseCompressedTextureInternalFormat(type: number) {\n    return this.capability.canIUseCompressedTextureInternalFormat(type);\n  }\n\n  viewport(x: number, y: number, width: number, height: number): void {\n    const { _gl: gl, _lastViewport: lastViewport } = this;\n    if (x !== lastViewport.x || y !== lastViewport.y || width !== lastViewport.z || height !== lastViewport.w) {\n      gl.viewport(x, y, width, height);\n      lastViewport.set(x, y, width, height);\n    }\n  }\n\n  scissor(x: number, y: number, width: number, height: number): void {\n    const { _gl: gl, _lastScissor: lastScissor } = this;\n    if (x !== lastScissor.x || y !== lastScissor.y || width !== lastScissor.z || height !== lastScissor.w) {\n      const { _webCanvas: webCanvas } = this;\n      if (x === 0 && y === 0 && width === webCanvas.width && height === webCanvas.height) {\n        if (this._scissorEnable) {\n          gl.disable(gl.SCISSOR_TEST);\n          this._scissorEnable = false;\n        }\n      } else {\n        if (!this._scissorEnable) {\n          gl.enable(gl.SCISSOR_TEST);\n          this._scissorEnable = true;\n        }\n        gl.scissor(x, y, width, height);\n      }\n      lastScissor.set(x, y, width, height);\n    }\n  }\n\n  colorMask(r: boolean, g: boolean, b: boolean, a: boolean): void {\n    this._gl.colorMask(r, g, b, a);\n  }\n\n  clearRenderTarget(engine: Engine, clearFlags: CameraClearFlags, clearColor: Color) {\n    const gl = this._gl;\n\n    const {\n      blendState: { targetBlendState },\n      depthState,\n      stencilState\n      // @ts-ignore\n    } = engine._lastRenderState;\n    let clearFlag = 0;\n    if (clearFlags & CameraClearFlags.Color) {\n      clearFlag |= gl.COLOR_BUFFER_BIT;\n\n      const lc = this._lastClearColor;\n      const { r, g, b, a } = clearColor;\n      if (clearColor && (r !== lc.r || g !== lc.g || b !== lc.b || a !== lc.a)) {\n        gl.clearColor(r, g, b, a);\n        lc.set(r, g, b, a);\n      }\n\n      if (targetBlendState.colorWriteMask !== ColorWriteMask.All) {\n        gl.colorMask(true, true, true, true);\n        targetBlendState.colorWriteMask = ColorWriteMask.All;\n      }\n    }\n    if (clearFlags & CameraClearFlags.Depth) {\n      clearFlag |= gl.DEPTH_BUFFER_BIT;\n      if (depthState.writeEnabled !== true) {\n        gl.depthMask(true);\n        depthState.writeEnabled = true;\n      }\n    }\n    if (clearFlags & CameraClearFlags.Stencil) {\n      clearFlag |= gl.STENCIL_BUFFER_BIT;\n      if (stencilState.writeMask !== 0xff) {\n        gl.stencilMask(0xff);\n        stencilState.writeMask = 0xff;\n      }\n    }\n    gl.clear(clearFlag);\n  }\n\n  drawPrimitive(primitive: GLPrimitive, subPrimitive: SubMesh, shaderProgram: any) {\n    // todo: VAO not support morph animation\n    if (primitive) {\n      primitive.draw(shaderProgram, subPrimitive);\n    } else {\n      Logger.error(\"draw primitive failed.\");\n    }\n  }\n\n  getMainFrameBufferWidth(): number {\n    return this._mainFrameWidth || this._gl.drawingBufferWidth;\n  }\n\n  getMainFrameBufferHeight(): number {\n    return this._mainFrameHeight || this._gl.drawingBufferHeight;\n  }\n\n  activeRenderTarget(\n    renderTarget: RenderTarget,\n    viewport: Vector4,\n    isFlipProjection: boolean,\n    mipLevel: number,\n    faceIndex?: TextureCubeFace\n  ) {\n    let bufferWidth: number, bufferHeight: number;\n    if (renderTarget) {\n      /** @ts-ignore */\n      renderTarget._isContentLost = false;\n\n      /** @ts-ignore */\n      const platformRenderTarget = renderTarget._platformRenderTarget as GLRenderTarget;\n      platformRenderTarget.activeRenderTarget(mipLevel, faceIndex);\n\n      bufferWidth = renderTarget.width >> mipLevel;\n      bufferHeight = renderTarget.height >> mipLevel;\n    } else {\n      const gl = this._gl;\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this._mainFrameBuffer);\n      bufferWidth = this.getMainFrameBufferWidth();\n      bufferHeight = this.getMainFrameBufferHeight();\n    }\n\n    const width = bufferWidth * viewport.z;\n    const height = bufferHeight * viewport.w;\n    const x = viewport.x * bufferWidth;\n    const y = isFlipProjection ? viewport.y * bufferHeight : bufferHeight - viewport.y * bufferHeight - height;\n    this.viewport(x, y, width, height);\n    this.scissor(x, y, width, height);\n  }\n\n  activeTexture(textureID: number): void {\n    if (this._activeTextureID !== textureID) {\n      this._gl.activeTexture(textureID);\n      this._activeTextureID = textureID;\n    }\n  }\n\n  bindTexture(texture: GLTexture): void {\n    const index = this._activeTextureID - this._gl.TEXTURE0;\n    if (this._activeTextures[index] !== texture) {\n      this._gl.bindTexture(texture._target, texture._glTexture);\n      this._activeTextures[index] = texture;\n    }\n  }\n\n  setGlobalDepthBias(bias: number, slopeBias: number): void {\n    const gl = this._gl;\n    const enable = bias !== 0 || slopeBias !== 0;\n    if (enable) {\n      gl.enable(gl.POLYGON_OFFSET_FILL);\n      gl.polygonOffset(slopeBias, bias);\n    } else {\n      gl.disable(gl.POLYGON_OFFSET_FILL);\n    }\n    this._enableGlobalDepthBias = enable;\n  }\n\n  flush(): void {\n    this._gl.flush();\n  }\n\n  forceLoseDevice(): void {\n    const extension = this.requireExtension(GLCapabilityType.WEBGL_lose_context);\n    extension.loseContext();\n  }\n\n  forceRestoreDevice(): void {\n    const extension = this.requireExtension(GLCapabilityType.WEBGL_lose_context);\n    extension.restoreContext();\n  }\n\n  resetState(): void {\n    this._readFrameBuffer = null;\n    this._enableGlobalDepthBias = false;\n    this._currentBindShaderProgram = null;\n\n    const activeTextures = this._activeTextures;\n    for (let i = 0, n = activeTextures.length; i < n; i++) {\n      activeTextures[i] = null;\n    }\n\n    this._lastViewport.set(null, null, null, null);\n    this._lastScissor.set(null, null, null, null);\n    this._lastClearColor.set(null, null, null, null);\n    this._scissorEnable = false;\n\n    this._initGLState(this._gl);\n  }\n\n  protected _initGLState(gl: (WebGLRenderingContext & WebGLExtension) | WebGL2RenderingContext): void {\n    this._activeTextureID = gl.TEXTURE0;\n    this._renderStates = new GLRenderStates(gl);\n    this._extensions = new GLExtensions(this);\n    this._capability = new GLCapability(this);\n    // Make sure the active texture in gl context is on default, because gl context may be used in other webgl renderer.\n    gl.activeTexture(gl.TEXTURE0);\n\n    const debugRenderInfo = gl.getExtension(\"WEBGL_debug_renderer_info\");\n    if (debugRenderInfo != null) {\n      this._renderer = gl.getParameter(debugRenderInfo.UNMASKED_RENDERER_WEBGL);\n    }\n  }\n\n  destroy(): void {\n    const webCanvas = this._webCanvas;\n    webCanvas.removeEventListener(\"webglcontextcreationerror\", this._onContextCreationError, false);\n    webCanvas.removeEventListener(\"webglcontextlost\", this._onWebGLContextLost, false);\n    webCanvas.removeEventListener(\"webglcontextrestored\", this._onWebGLContextRestored, false);\n  }\n\n  private _onContextCreationError(event: WebGLContextEvent) {\n    console.error(\"WebGLRenderer: WebGL context could not be created. Reason: \", event.statusMessage);\n  }\n\n  private _onWebGLContextLost(event: WebGLContextEvent) {\n    event.preventDefault();\n    this._onDeviceLost();\n  }\n\n  private _onWebGLContextRestored(event: WebGLContextEvent) {\n    this._onDeviceRestored();\n  }\n}\n"],"names":["GLCompressedTextureInternalFormat","WebCanvas","webCanvas","_scale","Vector2","width","height","_webCanvas","resizeByClientSize","pixelRatio","window","devicePixelRatio","OffscreenCanvas","exportWidth","clientWidth","exportHeight","clientHeight","setScale","x","y","set","scale","_onWidthChanged","value","_onHeightChange","style","transformOrigin","transform","Canvas","WebGLEngine","create","configuration","canvas","document","getElementById","webGLGraphicDevice","WebGLGraphicDevice","graphicDeviceOptions","engine","promise","_initialize","then","sceneManager","addScene","Scene","_canvas","Engine","GLBuffer","rhi","type","byteLength","bufferUsage","data","BufferUsage","Static","gl","glBuffer","createBuffer","glBufferUsage","_getGLBufferUsage","glBindTarget","BufferBindFlag","VertexBuffer","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","_gl","_glBuffer","_glBufferUsage","_glBindTarget","_isWebGL2","isWebGL2","bind","bufferData","bindBuffer","setData","bufferByteOffset","dataOffset","dataLength","options","SetDataOptions","Discard","byteSize","BYTES_PER_ELEMENT","dataByteLength","isArrayBufferView","byteOffset","undefined","bufferSubData","subData","Uint8Array","buffer","getData","getBufferSubData","destroy","deleteBuffer","STATIC_DRAW","Dynamic","DYNAMIC_DRAW","Stream","STREAM_DRAW","GLCapability","_rhi","capabilityList","Map","_init","_compatibleAllInterface","canIUse","capabilityType","get","canIUseCompressedTextureInternalFormat","internalType","RGBA_ASTC_4X4_KHR","RGBA_ASTC_12X12_KHR","SRGB8_ALPHA8_ASTC_4X4_KHR","SRGB8_ALPHA8_ASTC_12X12_KHR","RGB_ETC1_WEBGL","R11_EAC","SRGB8_ALPHA8_ETC2_EAC","RGB_PVRTC_4BPPV1_IMG","RGBA_PVRTC_2BPPV1_IMG","RGB_S3TC_DXT1_EXT","RGBA_S3TC_DXT5_EXT","RGBA_BPTC_UNORM_EXT","RGB_BPTC_UNSIGNED_FLOAT_EXT","GLCapabilityType","astc","etc1","etc","pvrtc","s3tc","bptc","cap","requireExtension","shaderVertexID","standardDerivatives","shaderTextureLod","elementIndexUint","depthTexture","vertexArrayObject","instancedArrays","multipleSample","drawBuffers","blendMinMax","astc_webkit","etc_webkit","etc1_webkit","pvrtc_webkit","s3tc_webkit","textureFloat","textureHalfFloat","textureFloatLinear","textureHalfFloatLinear","WEBGL_colorBufferFloat","colorBufferFloat","colorBufferHalfFloat","textureFilterAnisotropic","fragDepth","_compatibleInterface","flatItem","ext","glKey","extensionKey","extensionVal","MIN","MAX","UNSIGNED_INT_24_8","createVertexArray","deleteVertexArray","isVertexArray","bindVertexArray","drawArraysInstanced","drawElementsInstanced","vertexAttribDivisor","MAX_DRAW_BUFFERS","items","maxDrawBuffers","i","HALF_FLOAT","RGBA16F","RGBA32F","TEXTURE_MAX_ANISOTROPY_EXT","maxTextureSize","renderStates","getParameter","MAX_TEXTURE_SIZE","canUseFloatTextureBlendShape","MAX_VERTEX_TEXTURE_IMAGE_UNITS","canIUseMoreJoints","_maxDrawBuffers","maxAnisoLevel","_maxAnisoLevel","MAX_TEXTURE_MAX_ANISOTROPY_EXT","maxAntiAliasing","_maxAntiAliasing","canMSAA","MAX_SAMPLES","GLExtensions","_requireResult","getExtension","GLPrimitive","primitive","_attribLocArray","_vaoMap","_primitive","_canUseInstancedArrays","_isSupportVAO","draw","shaderProgram","subMesh","useVao","enableVAO","_bufferStructChanged","_clearVAO","has","id","_registerVAO","vao","_bindBufferAndAttrib","indexBufferBinding","instanceCount","_glIndexType","_glIndexByteCount","topology","start","count","drawElements","_platformBuffer","drawArrays","Logger","error","_disableAttrib","vertexBufferBindings","length","attributeLocation","attributes","_vertexElementMap","vbo","lastBoundVbo","name","loc","element","bindingIndex","stride","enableVertexAttribArray","elementInfo","_formatMetaInfo","vertexAttribPointer","size","normalized","offset","instanceStepRate","push","warn","l","disableVertexAttribArray","forEach","clear","GLRenderStates","_parameters","MAX_COMBINED_TEXTURE_IMAGE_UNITS","MAX_VERTEX_UNIFORM_VECTORS","MAX_VERTEX_ATTRIBS","blendFuncSeparate","ONE","ZERO","blendEquationSeparate","FUNC_ADD","colorMask","blendColor","disable","SAMPLE_ALPHA_TO_COVERAGE","enable","DEPTH_TEST","depthFunc","LESS","depthMask","STENCIL_TEST","stencilFuncSeparate","FRONT","ALWAYS","BACK","stencilOpSeparate","KEEP","stencilMask","CULL_FACE","cullFace","POLYGON_OFFSET_FILL","polygonOffset","pname","GLTexture","texture","target","_texture","_target","_glTexture","createTexture","deleteTexture","_formatDetail","setUseDepthCompareMode","texParameteri","TEXTURE_COMPARE_MODE","COMPARE_REF_TO_TEXTURE","NONE","generateMipmaps","_bind","generateMipmap","bindTexture","isCube","internalFormat","baseFormat","dataType","mipmapCount","usage","_isDepthTexture","LUMINANCE_ALPHA","ALPHA","TextureUsage","texStorage2D","texImage2D","mipWidth","Math","max","mipHeight","faceIndex","TEXTURE_CUBE_MAP_POSITIVE_X","_getPixelBuffer","face","mipLevel","out","bindFramebuffer","FRAMEBUFFER","_getReadFrameBuffer","framebufferTexture2D","COLOR_ATTACHMENT0","TEXTURE_2D","readPixels","_setWrapMode","TextureWrapMode","Clamp","_isPowerOf2","CLAMP_TO_EDGE","Repeat","REPEAT","Mirror","MIRRORED_REPEAT","frameBuffer","_readFrameBuffer","createFramebuffer","v","_getFormatDetail","format","TextureFormat","R8G8B8","RGB8","RGB","UNSIGNED_BYTE","isCompressed","R8G8B8A8","RGBA8","RGBA","R4G4B4A4","RGBA4","UNSIGNED_SHORT_4_4_4_4","R5G5B5A1","RGB5_A1","UNSIGNED_SHORT_5_5_5_1","R5G6B5","RGB565","UNSIGNED_SHORT_5_6_5","Alpha8","LuminanceAlpha","R11G11B10_UFloat","R11F_G11F_B10F","FLOAT","R16G16B16A16","R32G32B32A32","R32G32B32A32_UInt","RGBA32UI","RGBA_INTEGER","UNSIGNED_INT","BC1","BC3","BC7","ETC1_RGB","ETC2_RGB","RGB8_ETC2","ETC2_RGBA5","RGB8_PUNCHTHROUGH_ALPHA1_ETC2","ETC2_RGBA8","RGBA8_ETC2_EAC","PVRTC_RGB2","RGB_PVRTC_2BPPV1_IMG","PVRTC_RGBA2","PVRTC_RGB4","PVRTC_RGBA4","RGBA_PVRTC_4BPPV1_IMG","ASTC_4x4","ASTC_5x5","RGBA_ASTC_5X5_KHR","ASTC_6x6","RGBA_ASTC_6X6_KHR","ASTC_8x8","RGBA_ASTC_8X8_KHR","ASTC_10x10","RGBA_ASTC_10X10_KHR","ASTC_12x12","Depth","DEPTH_COMPONENT32F","DEPTH_COMPONENT","UNSIGNED_SHORT","attachment","DEPTH_ATTACHMENT","DepthStencil","DEPTH32F_STENCIL8","DEPTH_STENCIL","FLOAT_32_UNSIGNED_INT_24_8_REV","DEPTH_STENCIL_ATTACHMENT","Depth16","DEPTH_COMPONENT16","Depth24Stencil8","DEPTH24_STENCIL8","Depth24","DEPTH_COMPONENT24","Depth32","Depth32Stencil8","Error","_getRenderBufferDepthFormatDetail","Stencil","STENCIL_INDEX8","STENCIL_ATTACHMENT","_supportTextureFormat","_supportRenderBufferColorFormat","isSupported","_supportRenderBufferDepthFormat","wrapModeU","TEXTURE_WRAP_S","wrapModeV","TEXTURE_WRAP_T","filterMode","_mipmap","TextureFilterMode","Point","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","NEAREST_MIPMAP_NEAREST","Bilinear","LINEAR","LINEAR_MIPMAP_NEAREST","Trilinear","LINEAR_MIPMAP_LINEAR","anisoLevel","texParameterf","depthCompareFunction","TextureDepthCompareFunction","Never","TEXTURE_COMPARE_FUNC","NEVER","Less","Equal","EQUAL","LessEqual","LEQUAL","Greater","GREATER","NotEqual","NOTEQUAL","GreaterEqual","GEQUAL","Always","GLRenderTarget","_MSAAColorRenderBuffers","_curMipLevel","_curFaceIndex","_colorTextures","_depth","isDepthTexture","Texture","n","_format","some","TextureCube","capability","antiAliasing","_antiAliasing","_frameBuffer","_bindMainFBO","_MSAAFrameBuffer","_bindMSAAFBO","activeRenderTarget","mipChanged","faceChanged","colorTexture","getColorTexture","_platformTexture","platformTexture","bindRenderbuffer","RENDERBUFFER","_depthRenderBuffer","renderbufferStorage","blitRenderTarget","mask","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","colorTextureCount","READ_FRAMEBUFFER","DRAW_FRAMEBUFFER","textureIndex","_blitDrawBuffers","readBuffer","blitFramebuffer","deleteFramebuffer","deleteRenderbuffer","_MSAADepthRenderBuffer","Array","_oriDrawBuffers","depthRenderBuffer","createRenderbuffer","framebufferRenderbuffer","MSAADepthRenderBuffer","MSAAColorRenderBuffer","renderbufferStorageMultisample","_checkFrameBuffer","e","checkFramebufferStatus","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_UNSUPPORTED","FRAMEBUFFER_INCOMPLETE_MULTISAMPLE","GLTexture2D","texture2D","_compressedMipFilled","_mipmapCount","_getMipmapCount","setPixelBuffer","colorBuffer","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","mipBit","compressedTexSubImage2D","compressedTexImage2D","texSubImage2D","setImageSource","imageSource","flipY","premultiplyAlpha","getPixelBuffer","GLTexture2DArray","texture2DArray","TEXTURE_2D_ARRAY","texStorage3D","offsetIndex","compressedTexSubImage3D","texSubImage3D","elementIndex","codedWidth","codedHeight","formatDetail","framebufferTextureLayer","GLTextureCube","textureCube","TEXTURE_CUBE_MAP","_compressedFaceFilled","mipSize","WebGLMode","initializeOptions","_mainFrameBuffer","_mainFrameWidth","_mainFrameHeight","_enableGlobalDepthBias","_activeTextures","_lastViewport","Vector4","_lastScissor","_lastClearColor","Color","_scissorEnable","webGLMode","stencil","_forceFlush","_maxAllowSkinUniformVectorCount","SystemInfo","platform","Platform","IPhone","IPad","version","operatingSystem","match","majorVersion","parseInt","minorVersion","_options","_onWebGLContextLost","_onWebGLContextRestored","init","onDeviceLost","onDeviceRestored","_onDeviceLost","_onDeviceRestored","addEventListener","_onContextCreationError","getContext","deleteQuery","_initGLState","createPlatformPrimitive","createPlatformTexture2D","createPlatformTexture2DArray","createPlatformTextureCube","createPlatformRenderTarget","createPlatformBuffer","_extensions","viewport","lastViewport","z","w","scissor","lastScissor","SCISSOR_TEST","r","g","b","a","clearRenderTarget","clearFlags","clearColor","_lastRenderState","blendState","targetBlendState","depthState","stencilState","clearFlag","CameraClearFlags","lc","colorWriteMask","ColorWriteMask","All","writeEnabled","STENCIL_BUFFER_BIT","writeMask","drawPrimitive","subPrimitive","getMainFrameBufferWidth","drawingBufferWidth","getMainFrameBufferHeight","drawingBufferHeight","renderTarget","isFlipProjection","bufferWidth","bufferHeight","_isContentLost","platformRenderTarget","_platformRenderTarget","activeTexture","textureID","_activeTextureID","index","TEXTURE0","setGlobalDepthBias","bias","slopeBias","flush","forceLoseDevice","extension","WEBGL_lose_context","loseContext","forceRestoreDevice","restoreContext","resetState","_currentBindShaderProgram","activeTextures","_renderStates","_capability","debugRenderInfo","_renderer","UNMASKED_RENDERER_WEBGL","removeEventListener","event","console","statusMessage","preventDefault","renderer"],"mappings":"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"}