import { ShaderFactory, Shader } from '@galacean/engine';
import { PBRSource, fragmentList } from './shaders/index.js';
import './shaders/shadingPBR/index.js';

function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
}

function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);

    var n = Object.prototype.toString.call(o).slice(8, -1);

    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}

function _create_for_of_iterator_helper_loose(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

    if (it) return (it = it.call(o)).next.bind(it);
    // Fallback for engines without symbol support
    if (Array.isArray(o) || (it = _unsupported_iterable_to_array(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it) o = it;

        var i = 0;

        return function() {
            if (i >= o.length) return { done: true };

            return { done: false, value: o[i++] };
        };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var includeRegistered = false;
var shaderRegistered = false;
function registerIncludes() {
    if (includeRegistered) return;
    for(var _iterator = _create_for_of_iterator_helper_loose(fragmentList), _step; !(_step = _iterator()).done;){
        var sourceFragment = _step.value;
        ShaderFactory.registerInclude(sourceFragment.includeKey, sourceFragment.source);
    }
    includeRegistered = true;
}
function registerShader() {
    if (shaderRegistered) return;
    Shader.create(PBRSource);
    shaderRegistered = true;
}

export { fragmentList, registerIncludes, registerShader };
//# sourceMappingURL=index.js.map
