{"version":3,"file":"main.js","sources":["../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_extends.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_set_prototype_of.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_inherits.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_type_of.js","../../../node_modules/.pnpm/tslib@2.8.1/node_modules/tslib/tslib.es6.mjs","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_create_class.js","../src/resource-deserialize/utils/BufferReader.ts","../src/resource-deserialize/utils/Decorator.ts","../src/resource-deserialize/utils/FileHeader.ts","../src/resource-deserialize/resources/mesh/MeshDecoder.ts","../src/resource-deserialize/resources/texture2D/TextureDecoder.ts","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_is_native_reflect_construct.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_construct.js","../src/resource-deserialize/resources/parser/ParserContext.ts","../src/resource-deserialize/resources/parser/ReflectionParser.ts","../src/resource-deserialize/resources/animationClip/AnimationClipDecoder.ts","../src/resource-deserialize/resources/schema/MaterialSchema.ts","../src/resource-deserialize/resources/schema/SceneSchema.ts","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_instanceof.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_array_like_to_array.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_create_for_of_iterator_helper_loose.js","../src/prefab/PrefabResource.ts","../src/resource-deserialize/resources/parser/HierarchyParser.ts","../src/resource-deserialize/resources/scene/SceneParser.ts","../src/resource-deserialize/resources/scene/EditorTextureLoader.ts","../src/resource-deserialize/index.ts","../src/AnimationClipLoader.ts","../src/AnimatorControllerLoader.ts","../src/BufferLoader.ts","../src/EnvLoader.ts","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_async_to_generator.js","../src/FontLoader.ts","../src/gltf/GLTFResource.ts","../src/gltf/GLTFSchema.ts","../src/gltf/parser/GLTFParserContext.ts","../src/gltf/GLTFUtils.ts","../src/ktx2/KTX2Container.ts","../src/ktx2/KTX2TargetFormat.ts","../src/ktx2/WorkerPool.ts","../src/ktx2/transcoder/AbstractTranscoder.ts","../src/ktx2/transcoder/BinomialLLCWorkerCode.ts","../src/ktx2/transcoder/BinomialLLCTranscoder.ts","../src/ktx2/transcoder/KhronosWorkerCode.ts","../src/ktx2/transcoder/KhronosTranscoder.ts","../src/ktx2/KTX2Loader.ts","../src/GLTFContentRestorer.ts","../src/gltf/extensions/GLTFExtensionParser.ts","../src/gltf/parser/GLTFParser.ts","../src/gltf/parser/GLTFSchemaParser.ts","../src/gltf/parser/GLTFAnimationParser.ts","../src/gltf/parser/GLTFBufferParser.ts","../src/gltf/parser/GLTFEntityParser.ts","../src/gltf/parser/GLTFMaterialParser.ts","../src/gltf/parser/GLTFMeshParser.ts","../src/gltf/parser/GLTFSceneParser.ts","../src/gltf/parser/GLTFSkinParser.ts","../src/gltf/parser/GLTFTextureParser.ts","../src/gltf/parser/GLTFValidator.ts","../src/gltf/parser/GLTFBufferViewParser.ts","../src/gltf/parser/GLTFAnimatorControllerParser.ts","../src/gltf/extensions/MeshoptDecoder.ts","../src/GLTFLoader.ts","../src/prefab/PrefabParser.ts","../src/PrefabLoader.ts","../src/HDRLoader.ts","../src/JSONLoader.ts","../src/compressed-texture/KhronosTextureContainer.ts","../src/compressed-texture/index.ts","../src/KTXCubeLoader.ts","../src/KTXLoader.ts","../src/MaterialLoader.ts","../src/MeshLoader.ts","../src/PrimitiveMeshLoader.ts","../src/ProjectLoader.ts","../src/SourceFontLoader.ts","../src/SpriteAtlasLoader.ts","../src/SpriteLoader.ts","../src/Texture2DContentRestorer.ts","../src/Texture2DLoader.ts","../src/TextureCubeContentRestorer.ts","../src/TextureCubeLoader.ts","../src/ShaderChunkLoader.ts","../src/ShaderLoader.ts","../src/SceneLoader.ts","../src/gltf/extensions/KHR_lights_punctual.ts","../src/gltf/extensions/KHR_materials_clearcoat.ts","../src/gltf/extensions/KHR_materials_ior.ts","../src/gltf/extensions/KHR_materials_pbrSpecularGlossiness.ts","../src/gltf/extensions/KHR_materials_unlit.ts","../src/gltf/extensions/KHR_materials_variants.ts","../src/gltf/extensions/KHR_mesh_quantization.ts","../src/gltf/extensions/KHR_texture_basisu.ts","../src/gltf/extensions/KHR_texture_transform.ts","../src/gltf/extensions/GALACEAN_materials_remap.ts","../src/gltf/extensions/GALACEAN_animation_event.ts","../src/gltf/extensions/EXT_meshopt_compression.ts","../src/gltf/extensions/KHR_materials_anisotropy.ts","../src/gltf/extensions/KHR_materials_iridescence.ts","../src/gltf/extensions/EXT_texture_webp.ts"],"sourcesContent":["function _extends() {\n    _extends = Object.assign || function assign(target) {\n        for (var i = 1; i < arguments.length; i++) {\n            var source = arguments[i];\n            for (var key in source) if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];\n        }\n\n        return target;\n    };\n\n    return _extends.apply(this, arguments);\n}\nexport { _extends as _ };\n","function _set_prototype_of(o, p) {\n    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {\n        o.__proto__ = p;\n\n        return o;\n    };\n\n    return _set_prototype_of(o, p);\n}\nexport { _set_prototype_of as _ };\n","import { _ as _set_prototype_of } from \"./_set_prototype_of.js\";\n\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });\n\n    if (superClass) _set_prototype_of(subClass, superClass);\n}\nexport { _inherits as _ };\n","function _type_of(obj) {\n    \"@swc/helpers - typeof\";\n\n    return obj && typeof Symbol !== \"undefined\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n}\nexport { _type_of as _ };\n","/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nvar ownKeys = function(o) {\n  ownKeys = Object.getOwnPropertyNames || function (o) {\n    var ar = [];\n    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n    return ar;\n  };\n  return ownKeys(o);\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r, s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n        }\n        else s |= 1;\n      }\n      catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\n  if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\n      return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\n          return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\n      });\n  }\n  return path;\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __esDecorate,\n  __runInitializers,\n  __propKey,\n  __setFunctionName,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n  __rewriteRelativeImportExtension,\n};\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { Utils } from \"@galacean/engine-core\";\nexport class BufferReader {\n  private _dataView: DataView;\n  private _littleEndian: boolean;\n  private _position: number;\n  private _baseOffset: number;\n\n  constructor(\n    public data: Uint8Array,\n    byteOffset: number = 0,\n    byteLength?: number,\n    littleEndian: boolean = true\n  ) {\n    this._dataView = new DataView(\n      data.buffer,\n      data.byteOffset + byteOffset,\n      byteLength ?? data.byteLength - byteOffset\n    );\n    this._littleEndian = littleEndian;\n    this._position = 0;\n    this._baseOffset = byteOffset;\n  }\n\n  get position() {\n    return this._position;\n  }\n\n  get offset() {\n    return this._position + this._baseOffset;\n  }\n\n  nextUint8() {\n    const value = this._dataView.getUint8(this._position);\n    this._position += 1;\n    return value;\n  }\n\n  nextUint16() {\n    const value = this._dataView.getUint16(this._position, this._littleEndian);\n    this._position += 2;\n    return value;\n  }\n\n  nextUint32() {\n    const value = this._dataView.getUint32(this._position, this._littleEndian);\n    this._position += 4;\n    return value;\n  }\n\n  nextInt32() {\n    const value = this._dataView.getInt32(this._position, this._littleEndian);\n    this._position += 4;\n    return value;\n  }\n\n  nextInt32Array(len: number) {\n    const value = new Int32Array(this.data.buffer, this._position + this._dataView.byteOffset, len);\n    this._position += 4 * len;\n    return value;\n  }\n\n  nextFloat32() {\n    const value = this._dataView.getFloat32(this._position, this._littleEndian);\n    this._position += 4;\n    return value;\n  }\n\n  nextFloat32Array(len: number) {\n    const value = new Float32Array(this.data.buffer, this._position + this._dataView.byteOffset, len);\n    this._position += 4 * len;\n    return value;\n  }\n\n  nextUint32Array(len: number) {\n    const value = new Uint32Array(this.data.buffer, this._position + this._dataView.byteOffset, len);\n    this._position += 4 * len;\n    return value;\n  }\n\n  nextUint8Array(len: number) {\n    const value = new Uint8Array(this.data.buffer, this._position + this._dataView.byteOffset, len);\n    this._position += len;\n    return value;\n  }\n\n  nextUint64() {\n    const left = this._dataView.getUint32(this._position, this._littleEndian);\n    const right = this._dataView.getUint32(this._position + 4, this._littleEndian);\n    const value = left + 2 ** 32 * right;\n    this._position += 8;\n    return value;\n  }\n\n  nextStr(): string {\n    const strByteLength = this.nextUint16();\n    const uint8Array = new Uint8Array(this.data.buffer, this._position + this._dataView.byteOffset, strByteLength);\n    this._position += strByteLength;\n    return Utils.decodeText(uint8Array);\n  }\n\n  /**\n   * image data 放在最后\n   */\n  nextImageData(count: number = 0): Uint8Array {\n    return new Uint8Array(this.data.buffer, this.data.byteOffset + this._position);\n  }\n\n  nextImagesData(count: number): Uint8Array[] {\n    const imagesLen = new Array(count);\n    // Start offset of Uint32Array should be a multiple of 4. ref: https://stackoverflow.com/questions/15417310/why-typed-array-constructors-require-offset-to-be-multiple-of-underlying-type-si\n    for (let i = 0; i < count; i++) {\n      const len = this._dataView.getUint32(this._position, this._littleEndian);\n      imagesLen[i] = len;\n      this._position += 4;\n    }\n    const imagesData: Uint8Array[] = [];\n\n    for (let i = 0; i < count; i++) {\n      const len = imagesLen[i];\n      const buffer = new Uint8Array(this.data.buffer, this._dataView.byteOffset + this._position, len);\n      this._position += len;\n      imagesData.push(buffer);\n    }\n    return imagesData;\n  }\n\n  skip(bytes: number) {\n    this._position += bytes;\n    return this;\n  }\n\n  scan(maxByteLength: number, term: number = 0x00): Uint8Array {\n    const byteOffset = this._position;\n    let byteLength = 0;\n    while (this._dataView.getUint8(this._position) !== term && byteLength < maxByteLength) {\n      byteLength++;\n      this._position++;\n    }\n\n    if (byteLength < maxByteLength) this._position++;\n\n    return new Uint8Array(this._dataView.buffer, this._dataView.byteOffset + byteOffset, byteLength);\n  }\n}\n","import { Engine } from \"@galacean/engine-core\";\nimport type { BufferReader } from \"./BufferReader\";\n\nexport const decoderMap: Record<\n  string,\n  {\n    decode: (engine: Engine, bufferReader: BufferReader) => Promise<any>;\n  }\n> = {};\n\n/**\n * Decoder decorator generator.\n * @param type - resource file type.\n * @returns Decoder decorator\n */\nexport function decoder(type: string): ClassDecorator {\n  return (target: any) => {\n    decoderMap[type] = target;\n  };\n}\n","import { Utils } from \"@galacean/engine-core\";\n\nexport class FileHeader {\n  totalLength: number = 0;\n  version: number = 0;\n  type: string = \"\";\n  name: string = \"\";\n  headerLength: number = 0;\n\n  static decode(arrayBuffer: ArrayBuffer): FileHeader {\n    const dataView = new DataView(arrayBuffer);\n    const totalLen = dataView.getUint32(0, true);\n    const fileVersion = dataView.getUint8(4);\n    const typeLen = dataView.getUint16(5, true);\n    const typeUint8Array = new Uint8Array(arrayBuffer, 7, typeLen);\n    const nameLen = dataView.getUint16(7 + typeLen, true);\n    const nameUint8Array = new Uint8Array(arrayBuffer, 9 + typeLen, nameLen);\n\n    const name = Utils.decodeText(nameUint8Array);\n    const type = Utils.decodeText(typeUint8Array);\n    const header = new FileHeader();\n    header.totalLength = totalLen;\n    header.name = name;\n    header.type = type;\n    header.version = fileVersion;\n    header.headerLength = nameUint8Array.byteLength + typeUint8Array.byteLength + 9;\n    return header;\n  }\n\n  public get dataLength() {\n    return this.totalLength - this.headerLength;\n  }\n}\n","import type { Engine } from \"@galacean/engine-core\";\nimport { BlendShape, ModelMesh } from \"@galacean/engine-core\";\nimport { Color, Vector2, Vector3, Vector4 } from \"@galacean/engine-math\";\nimport type { BufferReader } from \"../../utils/BufferReader\";\nimport { decoder } from \"../../utils/Decorator\";\nimport type { IEncodedModelMesh } from \"./IModelMesh\";\n\n/**\n * @todo refactor\n */\n@decoder(\"Mesh\")\nexport class MeshDecoder {\n  public static decode(engine: Engine, bufferReader: BufferReader): Promise<ModelMesh> {\n    return new Promise((resolve) => {\n      const modelMesh = new ModelMesh(engine);\n      const jsonDataString = bufferReader.nextStr();\n      const encodedMeshData: IEncodedModelMesh = JSON.parse(jsonDataString);\n\n      // @ts-ignore Vector3 is not compatible with {x: number, y: number, z: number}.\n      encodedMeshData.bounds && modelMesh.bounds.copyFrom(encodedMeshData.bounds);\n\n      const offset = Math.ceil(bufferReader.offset / 4) * 4 + bufferReader.data.byteOffset;\n      const buffer = bufferReader.data.buffer;\n\n      const float32Array = new Float32Array(\n        buffer,\n        encodedMeshData.positions.start + offset,\n        (encodedMeshData.positions.end - encodedMeshData.positions.start) / 4\n      );\n      const vertexCount = float32Array.length / 3;\n      const positions = float32ArrayToVector3(float32Array, vertexCount);\n      modelMesh.setPositions(positions);\n      if (encodedMeshData.normals) {\n        const float32Array = new Float32Array(\n          buffer,\n          encodedMeshData.normals.start + offset,\n          (encodedMeshData.normals.end - encodedMeshData.normals.start) / 4\n        );\n        const normals = float32ArrayToVector3(float32Array, vertexCount);\n        modelMesh.setNormals(normals);\n      }\n      if (encodedMeshData.uvs) {\n        const float32Array = new Float32Array(\n          buffer,\n          encodedMeshData.uvs.start + offset,\n          (encodedMeshData.uvs.end - encodedMeshData.uvs.start) / 4\n        );\n        modelMesh.setUVs(float32ArrayToVector2(float32Array, vertexCount));\n      }\n      if (encodedMeshData.uv1) {\n        const float32Array = new Float32Array(\n          buffer,\n          encodedMeshData.uv1.start + offset,\n          (encodedMeshData.uv1.end - encodedMeshData.uv1.start) / 4\n        );\n        modelMesh.setUVs(float32ArrayToVector2(float32Array, vertexCount), 1);\n      }\n      if (encodedMeshData.uv2) {\n        const float32Array = new Float32Array(\n          buffer,\n          encodedMeshData.uv2.start + offset,\n          (encodedMeshData.uv2.end - encodedMeshData.uv2.start) / 4\n        );\n        modelMesh.setUVs(float32ArrayToVector2(float32Array, vertexCount), 2);\n      }\n      if (encodedMeshData.uv3) {\n        const float32Array = new Float32Array(\n          buffer,\n          encodedMeshData.uv3.start + offset,\n          (encodedMeshData.uv3.end - encodedMeshData.uv3.start) / 4\n        );\n        modelMesh.setUVs(float32ArrayToVector2(float32Array, vertexCount), 3);\n      }\n      if (encodedMeshData.uv4) {\n        const float32Array = new Float32Array(\n          buffer,\n          encodedMeshData.uv4.start + offset,\n          (encodedMeshData.uv4.end - encodedMeshData.uv4.start) / 4\n        );\n        modelMesh.setUVs(float32ArrayToVector2(float32Array, vertexCount), 4);\n      }\n      if (encodedMeshData.uv5) {\n        const float32Array = new Float32Array(\n          buffer,\n          encodedMeshData.uv5.start + offset,\n          (encodedMeshData.uv5.end - encodedMeshData.uv5.start) / 4\n        );\n        modelMesh.setUVs(float32ArrayToVector2(float32Array, vertexCount), 5);\n      }\n      if (encodedMeshData.uv6) {\n        const float32Array = new Float32Array(\n          buffer,\n          encodedMeshData.uv6.start + offset,\n          (encodedMeshData.uv6.end - encodedMeshData.uv6.start) / 4\n        );\n        modelMesh.setUVs(float32ArrayToVector2(float32Array, vertexCount), 6);\n      }\n      if (encodedMeshData.uv7) {\n        const float32Array = new Float32Array(\n          buffer,\n          encodedMeshData.uv7.start + offset,\n          (encodedMeshData.uv7.end - encodedMeshData.uv7.start) / 4\n        );\n        modelMesh.setUVs(float32ArrayToVector2(float32Array, vertexCount), 7);\n      }\n      if (encodedMeshData.colors) {\n        const float32Array = new Float32Array(\n          buffer,\n          encodedMeshData.colors.start + offset,\n          (encodedMeshData.colors.end - encodedMeshData.colors.start) / 4\n        );\n        modelMesh.setColors(float32ArrayToVColor(float32Array, vertexCount));\n      }\n      if (encodedMeshData.boneWeights) {\n        const float32Array = new Float32Array(\n          buffer,\n          encodedMeshData.boneWeights.start + offset,\n          (encodedMeshData.boneWeights.end - encodedMeshData.boneWeights.start) / 4\n        );\n        modelMesh.setBoneWeights(float32ArrayToVector4(float32Array, vertexCount));\n      }\n      if (encodedMeshData.boneIndices) {\n        const float32Array = new Float32Array(\n          buffer,\n          encodedMeshData.boneIndices.start + offset,\n          (encodedMeshData.boneIndices.end - encodedMeshData.boneIndices.start) / 4\n        );\n        modelMesh.setBoneIndices(float32ArrayToVector4(float32Array, vertexCount));\n      }\n      if (encodedMeshData.blendShapes) {\n        encodedMeshData.blendShapes.forEach((blendShapeData) => {\n          const blendShape = new BlendShape(blendShapeData.name);\n          blendShapeData.frames.forEach((frameData) => {\n            const positionArray = new Float32Array(\n              buffer,\n              frameData.deltaPosition.start + offset,\n              (frameData.deltaPosition.end - frameData.deltaPosition.start) / 4\n            );\n            const count = positionArray.length / 3;\n            const deltaPosition = float32ArrayToVector3(positionArray, count);\n            let deltaNormals: Vector3[] | null = null;\n            if (frameData.deltaNormals) {\n              const normalsArray = new Float32Array(\n                buffer,\n                frameData.deltaNormals.start + offset,\n                (frameData.deltaNormals.end - frameData.deltaNormals.start) / 4\n              );\n              deltaNormals = float32ArrayToVector3(normalsArray, count);\n            }\n            let deltaTangents: Vector4[] | null = null;\n            if (frameData.deltaTangents) {\n              const tangentsArray = new Float32Array(\n                buffer,\n                frameData.deltaTangents.start + offset,\n                (frameData.deltaTangents.end - frameData.deltaTangents.start) / 4\n              );\n              deltaTangents = float32ArrayToVector4(tangentsArray, count);\n            }\n            blendShape.addFrame(frameData.weight, deltaPosition);\n          });\n          modelMesh.addBlendShape(blendShape);\n        });\n      }\n      if (encodedMeshData.indices) {\n        let indices: Uint16Array | Uint32Array = null;\n        if (encodedMeshData.indices.type === 0) {\n          indices = new Uint16Array(\n            buffer,\n            encodedMeshData.indices.start + offset,\n            (encodedMeshData.indices.end - encodedMeshData.indices.start) / 2\n          );\n        } else {\n          indices = new Uint32Array(\n            buffer,\n            encodedMeshData.indices.start + offset,\n            (encodedMeshData.indices.end - encodedMeshData.indices.start) / 4\n          );\n        }\n        modelMesh.setIndices(indices);\n      }\n\n      encodedMeshData.subMeshes.forEach((subMesh) => modelMesh.addSubMesh(subMesh));\n      modelMesh.uploadData(false);\n      resolve(modelMesh);\n    });\n  }\n}\n\nfunction float32ArrayToVColor(float32Array: Float32Array, vertexCount: number) {\n  const array = new Array(vertexCount);\n  for (let i = 0; i < vertexCount; i++) {\n    array[i] = new Color(\n      float32Array[i * 4],\n      float32Array[i * 4 + 1],\n      float32Array[i * 4 + 2],\n      float32Array[i * 4 + 3]\n    );\n  }\n  return array;\n}\n\nfunction float32ArrayToVector4(float32Array: Float32Array, vertexCount: number) {\n  const array = new Array(vertexCount);\n  for (let i = 0; i < vertexCount; i++) {\n    array[i] = new Vector4(\n      float32Array[i * 4],\n      float32Array[i * 4 + 1],\n      float32Array[i * 4 + 2],\n      float32Array[i * 4 + 3]\n    );\n  }\n  return array;\n}\n\nfunction float32ArrayToVector3(float32Array: Float32Array, vertexCount: number) {\n  const array = new Array(vertexCount);\n  for (let i = 0; i < vertexCount; i++) {\n    array[i] = new Vector3(float32Array[i * 3], float32Array[i * 3 + 1], float32Array[i * 3 + 2]);\n  }\n  return array;\n}\n\nfunction float32ArrayToVector2(float32Array: Float32Array, vertexCount: number) {\n  const array = new Array(vertexCount);\n  for (let i = 0; i < vertexCount; i++) {\n    array[i] = new Vector2(float32Array[i * 2], float32Array[i * 2 + 1]);\n  }\n  return array;\n}\n","import { Engine, Texture2D } from \"@galacean/engine-core\";\nimport { BufferReader } from \"../../utils/BufferReader\";\nimport { decoder } from \"../../utils/Decorator\";\n\n@decoder(\"Texture2D\")\nexport class Texture2DDecoder {\n  static decode(engine: Engine, bufferReader: BufferReader): Promise<Texture2D> {\n    return new Promise((resolve, reject) => {\n      const objectId = bufferReader.nextStr();\n      const mipmap = !!bufferReader.nextUint8();\n      const filterMode = bufferReader.nextUint8();\n      const anisoLevel = bufferReader.nextUint8();\n      const wrapModeU = bufferReader.nextUint8();\n      const wrapModeV = bufferReader.nextUint8();\n      const format = bufferReader.nextUint8();\n      const width = bufferReader.nextUint16();\n      const height = bufferReader.nextUint16();\n      const isPixelBuffer = bufferReader.nextUint8();\n\n      const mipCount = bufferReader.nextUint8();\n      const imagesData = bufferReader.nextImagesData(mipCount);\n\n      const texture2D = new Texture2D(engine, width, height, format, mipmap);\n      texture2D.filterMode = filterMode;\n      texture2D.anisoLevel = anisoLevel;\n      texture2D.wrapModeU = wrapModeU;\n      texture2D.wrapModeV = wrapModeV;\n\n      if (isPixelBuffer) {\n        const pixelBuffer = imagesData[0];\n        texture2D.setPixelBuffer(pixelBuffer);\n        if (mipmap) {\n          texture2D.generateMipmaps();\n          for (let i = 1; i < mipCount; i++) {\n            const pixelBuffer = imagesData[i];\n            texture2D.setPixelBuffer(pixelBuffer, i);\n          }\n        }\n        // @ts-ignore\n        engine.resourceManager._objectPool[objectId] = texture2D;\n        resolve(texture2D);\n      } else {\n        const blob = new window.Blob([imagesData[0]]);\n        const img = new Image();\n        img.onload = () => {\n          texture2D.setImageSource(img);\n          let completedCount = 0;\n          const onComplete = () => {\n            completedCount++;\n            if (completedCount >= mipCount) {\n              resolve(texture2D);\n            }\n          };\n          onComplete();\n          if (mipmap) {\n            texture2D.generateMipmaps();\n            for (let i = 1; i < mipCount; i++) {\n              const blob = new window.Blob([imagesData[i]]);\n              const img = new Image();\n              img.onload = () => {\n                texture2D.setImageSource(img, i);\n                onComplete();\n              };\n              img.src = URL.createObjectURL(blob);\n            }\n          }\n        };\n        img.src = URL.createObjectURL(blob);\n      }\n    });\n  }\n}\n","function _is_native_reflect_construct() {\n    // Since Reflect.construct can't be properly polyfilled, some\n    // implementations (e.g. core-js@2) don't set the correct internal slots.\n    // Those polyfills don't allow us to subclass built-ins, so we need to\n    // use our fallback implementation.\n    try {\n        // If the internal slots aren't set, this throws an error similar to\n        //   TypeError: this is not a Boolean object.\n        var result = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n    } catch (_) {}\n    return (_is_native_reflect_construct = function() {\n        return !!result;\n    })();\n}\n\nexport { _is_native_reflect_construct as _ };\n","import { _ as _is_native_reflect_construct } from \"./_is_native_reflect_construct.js\";\nimport { _ as _set_prototype_of } from \"./_set_prototype_of.js\";\nfunction _construct(Parent, args, Class) {\n    if (_is_native_reflect_construct()) _construct = Reflect.construct;\n    else {\n        _construct = function construct(Parent, args, Class) {\n            var a = [null];\n            a.push.apply(a, args);\n            var Constructor = Function.bind.apply(Parent, a);\n            var instance = new Constructor();\n\n            if (Class) _set_prototype_of(instance, Class.prototype);\n\n            return instance;\n        };\n    }\n\n    return _construct.apply(null, arguments);\n}\nexport { _construct as _ };\n","import { Component, Engine, EngineObject, Entity, ReferResource, ResourceManager, Scene } from \"@galacean/engine-core\";\nimport type { IEntity, IHierarchyFile } from \"../schema\";\n\nexport enum ParserType {\n  Prefab,\n  Scene\n}\n/**\n * Parser context\n * @export\n * @class ParserContext\n * @template T\n * @template I\n */\nexport class ParserContext<T extends IHierarchyFile, I extends EngineObject> {\n  entityMap: Map<string, Entity> = new Map();\n  entityConfigMap: Map<string, IEntity> = new Map();\n  components: Map<string, Component> = new Map();\n  rootIds: string[] = [];\n  strippedIds: string[] = [];\n\n  readonly resourceManager: ResourceManager;\n\n  constructor(\n    public readonly engine: Engine,\n    public readonly type = ParserType.Scene,\n    public readonly resource: ReferResource | Scene\n  ) {\n    this.resourceManager = engine.resourceManager;\n  }\n\n  /**\n   * Destroy the context.\n   * @memberof ParserContext\n   */\n  clear() {\n    this.entityMap.clear();\n    this.components.clear();\n    this.entityConfigMap.clear();\n    this.rootIds.length = 0;\n    this.strippedIds.length = 0;\n  }\n}\n","import { EngineObject, Entity, Loader, ReferResource } from \"@galacean/engine-core\";\nimport type { IAssetRef, IBasicType, IClassObject, IEntity, IEntityRef, IHierarchyFile, IRefEntity } from \"../schema\";\nimport { ParserContext, ParserType } from \"./ParserContext\";\n\nexport class ReflectionParser {\n  static customParseComponentHandles = new Map<string, Function>();\n\n  static registerCustomParseComponent(componentType: string, handle: Function) {\n    this.customParseComponentHandles[componentType] = handle;\n  }\n\n  constructor(private readonly _context: ParserContext<IHierarchyFile, EngineObject>) {}\n\n  parseEntity(entityConfig: IEntity): Promise<Entity> {\n    return this._getEntityByConfig(entityConfig).then((entity) => {\n      entity.isActive = entityConfig.isActive ?? true;\n      const { position, rotation, scale } = entityConfig;\n      if (position) entity.transform.position.copyFrom(position);\n      if (rotation) entity.transform.rotation.copyFrom(rotation);\n      if (scale) entity.transform.scale.copyFrom(scale);\n      entity.layer = entityConfig.layer ?? entity.layer;\n      // @ts-ignore\n      this._context.type === ParserType.Prefab && entity._markAsTemplate(this._context.resource);\n      return entity;\n    });\n  }\n\n  parseClassObject(item: IClassObject) {\n    const Class = Loader.getClass(item.class);\n    const params = item.constructParams ?? [];\n    return Promise.all(params.map((param) => this.parseBasicType(param)))\n      .then((resultParams) => new Class(...resultParams))\n      .then((instance) => this.parsePropsAndMethods(instance, item));\n  }\n\n  parsePropsAndMethods(instance: any, item: Omit<IClassObject, \"class\">) {\n    const promises = [];\n    if (item.methods) {\n      for (let methodName in item.methods) {\n        const methodParams = item.methods[methodName];\n        for (let i = 0, count = methodParams.length; i < count; i++) {\n          promises.push(this.parseMethod(instance, methodName, methodParams[i]));\n        }\n      }\n    }\n\n    if (item.props) {\n      for (let key in item.props) {\n        const value = item.props[key];\n        const promise = this.parseBasicType(value, instance[key]).then((v) => {\n          return (instance[key] = v);\n        });\n        promises.push(promise);\n      }\n    }\n\n    return Promise.all(promises).then(() => {\n      const handle = ReflectionParser.customParseComponentHandles[instance.constructor.name];\n      if (handle) return handle(instance, item);\n      else return instance;\n    });\n  }\n\n  parseMethod(instance: any, methodName: string, methodParams: Array<IBasicType>) {\n    return Promise.all(methodParams.map((param) => this.parseBasicType(param))).then((result) => {\n      return instance[methodName](...result);\n    });\n  }\n\n  parseBasicType(value: IBasicType, originValue?: any): Promise<any> {\n    if (Array.isArray(value)) {\n      return Promise.all(value.map((item) => this.parseBasicType(item)));\n    } else if (typeof value === \"object\" && value != null) {\n      if (ReflectionParser._isClass(value)) {\n        // class object\n        return this.parseClassObject(value);\n      } else if (ReflectionParser._isAssetRef(value)) {\n        const { _context: context } = this;\n        // reference object\n        // @ts-ignore\n        return context.resourceManager.getResourceByRef(value).then((resource) => {\n          if (context.type === ParserType.Prefab) {\n            // @ts-ignore\n            context.resource._addDependenceAsset(resource);\n          }\n          return resource;\n        });\n      } else if (ReflectionParser._isEntityRef(value)) {\n        // entity reference\n        return Promise.resolve(this._context.entityMap.get(value.entityId));\n      } else if (originValue) {\n        const promises: Promise<any>[] = [];\n        for (let key in value as any) {\n          if (key === \"methods\") {\n            const methods: any = value[key];\n            for (let methodName in methods) {\n              const methodParams = methods[methodName];\n              for (let i = 0, count = methodParams.length; i < count; i++) {\n                const params = methodParams[i];\n                const promise = this.parseMethod(originValue, methodName, params);\n                promises.push(promise);\n              }\n            }\n          } else {\n            promises.push(this.parseBasicType(value[key], originValue[key]).then((v) => (originValue[key] = v)));\n          }\n        }\n        return Promise.all(promises).then(() => originValue);\n      }\n    }\n    // primitive type\n    return Promise.resolve(value);\n  }\n\n  private _getEntityByConfig(entityConfig: IEntity) {\n    // @ts-ignore\n    const assetRefId: string = entityConfig.assetRefId;\n    const engine = this._context.engine;\n\n    if (assetRefId) {\n      return (\n        engine.resourceManager\n          // @ts-ignore\n          .getResourceByRef({\n            refId: assetRefId,\n            key: (entityConfig as IRefEntity).key,\n            isClone: (entityConfig as IRefEntity).isClone\n          })\n          .then((entity) => {\n            // @ts-ignore\n            const resource = engine.resourceManager._objectPool[assetRefId];\n            if (this._context.type === ParserType.Prefab) {\n              // @ts-ignore\n              this._context.resource._addDependenceAsset(resource);\n            }\n            entity.name = entityConfig.name;\n            return entity;\n          })\n      );\n    } else {\n      const entity = new Entity(engine, entityConfig.name);\n      return Promise.resolve(entity);\n    }\n  }\n\n  private static _isClass(value: any): value is IClassObject {\n    return value[\"class\"] != undefined;\n  }\n\n  private static _isAssetRef(value: any): value is IAssetRef {\n    return value[\"refId\"] != undefined;\n  }\n\n  private static _isEntityRef(value: any): value is IEntityRef {\n    return value[\"entityId\"] != undefined;\n  }\n}\n","import {\n  AnimationArrayCurve,\n  AnimationClip,\n  AnimationColorCurve,\n  AnimationCurve,\n  AnimationEvent,\n  AnimationFloatArrayCurve,\n  AnimationFloatCurve,\n  AnimationQuaternionCurve,\n  AnimationVector2Curve,\n  AnimationVector3Curve,\n  AnimationVector4Curve,\n  AnimationRefCurve,\n  Engine,\n  Keyframe,\n  KeyframeValueType,\n  ReferResource,\n  AnimationStringCurve,\n  AnimationBoolCurve,\n  Loader\n} from \"@galacean/engine-core\";\nimport { Color, Quaternion, Vector2, Vector3, Vector4 } from \"@galacean/engine-math\";\nimport type { BufferReader } from \"../../utils/BufferReader\";\nimport { decoder } from \"../../utils/Decorator\";\n\nexport enum InterpolableValueType {\n  Float,\n  FloatArray,\n  Vector2,\n  Vector3,\n  Vector4,\n  Quaternion,\n  Color,\n  Array,\n  Boolean,\n  Rect,\n  ReferResource\n}\n\n@decoder(\"AnimationClip\")\nexport class AnimationClipDecoder {\n  public static decode(engine: Engine, bufferReader: BufferReader): Promise<AnimationClip> {\n    return new Promise((resolve) => {\n      const name = bufferReader.nextStr();\n      const clip = new AnimationClip(name);\n      const eventsLen = bufferReader.nextUint16();\n      for (let i = 0; i < eventsLen; ++i) {\n        const event = new AnimationEvent();\n        event.time = bufferReader.nextFloat32();\n        event.functionName = bufferReader.nextStr();\n        event.parameter = JSON.parse(bufferReader.nextStr()).val;\n        clip.addEvent(event);\n      }\n\n      const curveBindingsLen = bufferReader.nextUint16();\n      for (let i = 0; i < curveBindingsLen; ++i) {\n        const relativePath = bufferReader.nextStr();\n        const componentStr = bufferReader.nextStr();\n        const componentType = Loader.getClass(componentStr);\n        const property = bufferReader.nextStr();\n        const getProperty = bufferReader.nextStr();\n        let curve: AnimationCurve<KeyframeValueType>;\n        const interpolation = bufferReader.nextUint8();\n        const keysLen = bufferReader.nextUint16();\n        const curveType = bufferReader.nextStr();\n        switch (curveType) {\n          case \"AnimationFloatCurve\": {\n            curve = new AnimationFloatCurve();\n            curve.interpolation = interpolation;\n            for (let j = 0; j < keysLen; ++j) {\n              const keyframe = new Keyframe<number>();\n              keyframe.time = bufferReader.nextFloat32();\n              keyframe.value = bufferReader.nextFloat32();\n              keyframe.inTangent = bufferReader.nextFloat32();\n              keyframe.outTangent = bufferReader.nextFloat32();\n              (<AnimationFloatCurve>curve).addKey(keyframe);\n            }\n            break;\n          }\n          case \"AnimationArrayCurve\": {\n            curve = new AnimationArrayCurve();\n            curve.interpolation = interpolation;\n            for (let j = 0; j < keysLen; ++j) {\n              const keyframe = new Keyframe<number[]>();\n              keyframe.time = bufferReader.nextFloat32();\n              const len = bufferReader.nextUint16();\n              keyframe.value = Array.from(bufferReader.nextFloat32Array(len));\n              keyframe.inTangent = Array.from(bufferReader.nextFloat32Array(len));\n              keyframe.outTangent = Array.from(bufferReader.nextFloat32Array(len));\n              (<AnimationArrayCurve>curve).addKey(keyframe);\n            }\n            break;\n          }\n          case \"AnimationFloatArrayCurve\": {\n            curve = new AnimationFloatArrayCurve();\n            curve.interpolation = interpolation;\n            for (let j = 0; j < keysLen; ++j) {\n              const keyframe = new Keyframe<Float32Array>();\n              keyframe.time = bufferReader.nextFloat32();\n              const len = bufferReader.nextUint16();\n              keyframe.value = bufferReader.nextFloat32Array(len);\n              keyframe.inTangent = Array.from(bufferReader.nextFloat32Array(len));\n              keyframe.outTangent = Array.from(bufferReader.nextFloat32Array(len));\n              (<AnimationFloatArrayCurve>curve).addKey(keyframe);\n            }\n            break;\n          }\n          case \"AnimationVector2Curve\": {\n            curve = new AnimationVector2Curve();\n            curve.interpolation = interpolation;\n            for (let j = 0; j < keysLen; ++j) {\n              const keyframe = new Keyframe<Vector2>();\n              keyframe.time = bufferReader.nextFloat32();\n              keyframe.value = new Vector2(bufferReader.nextFloat32(), bufferReader.nextFloat32());\n              keyframe.inTangent = new Vector2(bufferReader.nextFloat32(), bufferReader.nextFloat32());\n              keyframe.outTangent = new Vector2(bufferReader.nextFloat32(), bufferReader.nextFloat32());\n              (<AnimationVector2Curve>curve).addKey(keyframe);\n            }\n            break;\n          }\n          case \"AnimationVector3Curve\": {\n            curve = new AnimationVector3Curve();\n            curve.interpolation = interpolation;\n            for (let j = 0; j < keysLen; ++j) {\n              const keyframe = new Keyframe<Vector3>();\n              keyframe.time = bufferReader.nextFloat32();\n              keyframe.value = new Vector3(\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32()\n              );\n              keyframe.inTangent = new Vector3(\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32()\n              );\n              keyframe.outTangent = new Vector3(\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32()\n              );\n              (<AnimationVector3Curve>curve).addKey(keyframe);\n            }\n            break;\n          }\n          case \"AnimationVector4Curve\": {\n            curve = new AnimationVector4Curve();\n            curve.interpolation = interpolation;\n            const keyframe = new Keyframe<Vector4>();\n            keyframe.time = bufferReader.nextFloat32();\n            keyframe.value = new Vector4(\n              bufferReader.nextFloat32(),\n              bufferReader.nextFloat32(),\n              bufferReader.nextFloat32(),\n              bufferReader.nextFloat32()\n            );\n            keyframe.inTangent = new Vector4(\n              bufferReader.nextFloat32(),\n              bufferReader.nextFloat32(),\n              bufferReader.nextFloat32(),\n              bufferReader.nextFloat32()\n            );\n            keyframe.outTangent = new Vector4(\n              bufferReader.nextFloat32(),\n              bufferReader.nextFloat32(),\n              bufferReader.nextFloat32(),\n              bufferReader.nextFloat32()\n            );\n            (<AnimationVector4Curve>curve).addKey(keyframe);\n            break;\n          }\n          case \"AnimationColorCurve\": {\n            curve = new AnimationColorCurve();\n            curve.interpolation = interpolation;\n            for (let j = 0; j < keysLen; ++j) {\n              const keyframe = new Keyframe<Color>();\n              keyframe.time = bufferReader.nextFloat32();\n              keyframe.value = new Color(\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32()\n              );\n              keyframe.inTangent = new Vector4(\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32()\n              );\n              keyframe.outTangent = new Vector4(\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32()\n              );\n              (<AnimationColorCurve>curve).addKey(keyframe);\n            }\n            break;\n          }\n          case \"AnimationQuaternionCurve\": {\n            curve = new AnimationQuaternionCurve();\n            curve.interpolation = interpolation;\n            for (let j = 0; j < keysLen; ++j) {\n              const keyframe = new Keyframe<Quaternion>();\n              keyframe.time = bufferReader.nextFloat32();\n              keyframe.value = new Quaternion(\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32()\n              );\n              keyframe.inTangent = new Vector4(\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32()\n              );\n              keyframe.outTangent = new Vector4(\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32()\n              );\n              (<AnimationQuaternionCurve>curve).addKey(keyframe);\n            }\n            break;\n          }\n          case \"AnimationRefCurve\": {\n            curve = new AnimationRefCurve();\n            curve.interpolation = interpolation;\n            for (let j = 0; j < keysLen; ++j) {\n              const keyframe = new Keyframe<ReferResource>();\n              keyframe.time = bufferReader.nextFloat32();\n              const str = bufferReader.nextStr();\n              if (str) {\n                keyframe.value = JSON.parse(str);\n              } else {\n                keyframe.value = null;\n              }\n              (<AnimationRefCurve>curve).addKey(keyframe);\n            }\n            break;\n          }\n          case \"AnimationBoolCurve\": {\n            curve = new AnimationBoolCurve();\n            curve.interpolation = interpolation;\n            for (let j = 0; j < keysLen; ++j) {\n              const keyframe = new Keyframe<boolean>();\n              keyframe.time = bufferReader.nextFloat32();\n              keyframe.value = bufferReader.nextUint8() === 1;\n              (<AnimationBoolCurve>curve).addKey(keyframe);\n            }\n            break;\n          }\n          case \"AnimationStringCurve\": {\n            curve = new AnimationStringCurve();\n            curve.interpolation = interpolation;\n            for (let j = 0; j < keysLen; ++j) {\n              const keyframe = new Keyframe<string>();\n              keyframe.time = bufferReader.nextFloat32();\n              keyframe.value = bufferReader.nextStr();\n              (<AnimationStringCurve>curve).addKey(keyframe);\n            }\n            break;\n          }\n        }\n        clip.addCurveBinding(relativePath, componentType, property, getProperty, curve);\n      }\n      resolve(clip);\n    });\n  }\n}\n","import {\n  BlendFactor,\n  BlendOperation,\n  ColorWriteMask,\n  CompareFunction,\n  CullMode,\n  RenderQueueType,\n  StencilOperation\n} from \"@galacean/engine-core\";\nimport type { IAssetRef, IColor, IVector2, IVector3 } from \"./BasicSchema\";\n\nexport interface IRenderState {\n  /** Blend state. */\n  blendState: {\n    /** The blend state of the render target. */\n    targetBlendState: {\n      /** Whether to enable blend. */\n      enabled: boolean;\n      /** color (RGB) blend operation. */\n      colorBlendOperation: BlendOperation;\n      /** alpha (A) blend operation. */\n      alphaBlendOperation: BlendOperation;\n      /** color blend factor (RGB) for source. */\n      sourceColorBlendFactor: BlendFactor;\n      /** alpha blend factor (A) for source. */\n      sourceAlphaBlendFactor: BlendFactor;\n      /** color blend factor (RGB) for destination. */\n      destinationColorBlendFactor: BlendFactor;\n      /** alpha blend factor (A) for destination. */\n      destinationAlphaBlendFactor: BlendFactor;\n      /** color mask. */\n      colorWriteMask: ColorWriteMask;\n    };\n    blendColor: IColor;\n    /** Whether to use (Alpha-to-Coverage) technology. */\n    alphaToCoverage: boolean;\n  };\n\n  /** Depth state. */\n  depthState: {\n    /** Whether to enable the depth test. */\n    enabled: boolean;\n    /** Whether the depth value can be written.*/\n    writeEnabled: boolean;\n    /** Depth comparison function. */\n    compareFunction: CompareFunction;\n  };\n  /** Stencil state. */\n  stencilState: {\n    /** Whether to enable stencil test. */\n    enabled: boolean;\n    /** Write the reference value of the stencil buffer. */\n    referenceValue: number;\n    /** Specifying a bit-wise mask that is used to AND the reference value and the stored stencil value when the test is done. */\n    mask: number;\n    /** Specifying a bit mask to enable or disable writing of individual bits in the stencil planes. */\n    writeMask: number;\n    /** The comparison function of the reference value of the front face of the geometry and the current buffer storage value. */\n    compareFunctionFront: CompareFunction;\n    /** The comparison function of the reference value of the back of the geometry and the current buffer storage value. */\n    compareFunctionBack: CompareFunction;\n    /** specifying the function to use for front face when both the stencil test and the depth test pass. */\n    passOperationFront: StencilOperation;\n    /** specifying the function to use for back face when both the stencil test and the depth test pass. */\n    passOperationBack: StencilOperation;\n    /** specifying the function to use for front face when the stencil test fails. */\n    failOperationFront: StencilOperation;\n    /** specifying the function to use for back face when the stencil test fails. */\n    failOperationBack: StencilOperation;\n    /** specifying the function to use for front face when the stencil test passes, but the depth test fails. */\n    zFailOperationFront: StencilOperation;\n    /** specifying the function to use for back face when the stencil test passes, but the depth test fails. */\n    zFailOperationBack: StencilOperation;\n  };\n  /** Raster state. */\n  rasterState: {\n    /** Specifies whether or not front- and/or back-facing polygons can be culled. */\n    cullMode: CullMode;\n    /** The multiplier by which an implementation-specific value is multiplied with to create a constant depth offset. */\n    depthBias: number;\n    /** The scale factor for the variable depth offset for each polygon. */\n    slopeScaledDepthBias: number;\n  };\n  /** Render queue type. */\n  renderQueueType: RenderQueueType;\n}\n\nexport interface IMaterialSchema {\n  name: string;\n  shader: string;\n  shaderData: {\n    [key: string]: {\n      type: MaterialLoaderType;\n      value: IVector3 | IVector2 | IColor | number | IAssetRef;\n    };\n  };\n  macros: Array<{ name: string; value?: string }>;\n  renderState: IRenderState;\n  shaderRef: IAssetRef;\n}\n\nexport enum MaterialLoaderType {\n  Vector2 = \"Vector2\",\n  Vector3 = \"Vector3\",\n  Vector4 = \"Vector4\",\n  Color = \"Color\",\n  Float = \"Float\",\n  Texture = \"Texture\",\n  Boolean = \"Boolean\",\n  Integer = \"Integer\"\n}\n","import {\n  BackgroundMode,\n  BackgroundTextureFillMode,\n  BloomDownScaleMode,\n  DiffuseMode,\n  FogMode,\n  ShadowCascadesMode,\n  ShadowResolution,\n  TonemappingMode\n} from \"@galacean/engine-core\";\nimport type { IReferable } from \"@galacean/engine-core/types/asset/IReferable\";\nimport type { IColor, IHierarchyFile, IVector3 } from \"./BasicSchema\";\n\nexport enum SpecularMode {\n  Sky = \"Sky\",\n  Custom = \"Custom\"\n}\n\nexport interface IScene extends IHierarchyFile {\n  scene: {\n    background: {\n      mode: BackgroundMode;\n      color: IColor;\n      texture?: IReferable;\n      textureFillMode?: BackgroundTextureFillMode;\n      skyMesh?: IReferable;\n      skyMaterial?: IReferable;\n    };\n    ambient: {\n      diffuseMode: DiffuseMode;\n      ambientLight: IReferable;\n      customAmbientLight: IReferable;\n      customSpecularTexture: IReferable;\n      diffuseSolidColor: IColor;\n      diffuseIntensity: number;\n      specularIntensity: number;\n      specularMode: SpecularMode;\n      bakerResolution: number;\n    };\n    shadow?: {\n      castShadows: boolean;\n      enableTransparentShadow: boolean;\n      shadowResolution: ShadowResolution;\n      shadowDistance: number;\n      shadowCascades: ShadowCascadesMode;\n      shadowTwoCascadeSplits: number;\n      shadowFourCascadeSplits: IVector3;\n      shadowFadeBorder: number;\n    };\n    fog?: {\n      fogMode: FogMode;\n      fogStart: number;\n      fogEnd: number;\n      fogDensity: number;\n      fogColor: IColor;\n    };\n    postProcess?: {\n      isActive: boolean;\n      bloom: {\n        enabled: boolean;\n        downScale: BloomDownScaleMode;\n        threshold: number;\n        scatter: number;\n        intensity: number;\n        tint: IColor;\n        dirtTexture: IReferable;\n        dirtIntensity: number;\n      };\n      tonemapping: {\n        enabled: boolean;\n        mode: TonemappingMode;\n      };\n    };\n  };\n  files: Array<{ id: string; type: string; virtualPath: string; path: string }>;\n}\n","function _instanceof(left, right) {\n    if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n        return !!right[Symbol.hasInstance](left);\n    } else return left instanceof right;\n}\nexport { _instanceof as _ };\n","function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n","import { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _create_for_of_iterator_helper_loose(o, allowArrayLike) {\n    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n    if (it) return (it = it.call(o)).next.bind(it);\n    // Fallback for engines without symbol support\n    if (Array.isArray(o) || (it = _unsupported_iterable_to_array(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n        if (it) o = it;\n\n        var i = 0;\n\n        return function() {\n            if (i >= o.length) return { done: true };\n\n            return { done: false, value: o[i++] };\n        };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _create_for_of_iterator_helper_loose as _ };\n","import { Engine, Entity, ReferResource } from \"@galacean/engine-core\";\n\n/**\n * The Prefab resource.\n */\nexport class PrefabResource extends ReferResource {\n  /** @internal */\n  _root: Entity;\n\n  private _dependenceAssets: Set<ReferResource> = new Set();\n\n  /**\n   * @internal\n   * @param url - The url of the prefab\n   */\n  constructor(\n    engine: Engine,\n    public readonly url: string\n  ) {\n    super(engine);\n  }\n\n  /**\n   * Instantiate prefab.\n   * @returns prefab's root entity\n   */\n  instantiate(): Entity {\n    return this._root?.clone();\n  }\n\n  /**\n   * @internal\n   */\n  _addDependenceAsset(resource: ReferResource) {\n    this._dependenceAssets.add(resource);\n    // @ts-ignore\n    resource._associationSuperResource(this);\n  }\n\n  protected override _onDestroy(): void {\n    super._onDestroy();\n    this._root.destroy();\n    this._dependenceAssets.forEach((asset) => {\n      // @ts-ignore\n      asset._disassociationSuperResource(this);\n    });\n  }\n}\n","import { Entity, Engine, Loader, Scene } from \"@galacean/engine-core\";\nimport type { IEntity, IHierarchyFile, IRefEntity, IStrippedEntity } from \"../schema\";\nimport { ReflectionParser } from \"./ReflectionParser\";\nimport { ParserContext, ParserType } from \"./ParserContext\";\nimport { PrefabResource } from \"../../../prefab/PrefabResource\";\nimport { GLTFResource } from \"../../../gltf\";\n\n/** @Internal */\nexport abstract class HierarchyParser<T extends Scene | PrefabResource, V extends ParserContext<IHierarchyFile, T>> {\n  /**\n   * The promise of parsed object.\n   */\n  readonly promise: Promise<T>;\n\n  protected _resolve: (item: T) => void;\n  protected _reject: (reason: any) => void;\n  protected _engine: Engine;\n  protected _reflectionParser: ReflectionParser;\n\n  private _prefabContextMap = new WeakMap<Entity, ParserContext<IHierarchyFile, Entity>>();\n\n  private _prefabPromiseMap = new Map<\n    string,\n    {\n      resolve: (context: ParserContext<IHierarchyFile, Entity>) => void;\n      reject: (reason: any) => void;\n    }[]\n  >();\n\n  constructor(\n    public readonly data: IHierarchyFile,\n    public readonly context: V\n  ) {\n    this._engine = this.context.engine;\n    this._organizeEntities = this._organizeEntities.bind(this);\n    this._parseComponents = this._parseComponents.bind(this);\n    this._parsePrefabModification = this._parsePrefabModification.bind(this);\n    this._parsePrefabRemovedEntities = this._parsePrefabRemovedEntities.bind(this);\n    this._parsePrefabRemovedComponents = this._parsePrefabRemovedComponents.bind(this);\n    this._clearAndResolve = this._clearAndResolve.bind(this);\n    this.promise = new Promise<T>((resolve, reject) => {\n      this._reject = reject;\n      this._resolve = resolve;\n    });\n    this._reflectionParser = new ReflectionParser(context);\n  }\n\n  /** start parse the scene or prefab or others */\n  public start() {\n    this._parseEntities()\n      .then(this._organizeEntities)\n      .then(this._parseComponents)\n      .then(this._parsePrefabModification)\n      .then(this._parsePrefabRemovedEntities)\n      .then(this._parsePrefabRemovedComponents)\n      .then(this._clearAndResolve)\n      .then(this._resolve)\n      .catch(this._reject);\n  }\n\n  protected abstract _handleRootEntity(id: string): void;\n  protected abstract _clearAndResolve(): Scene | PrefabResource;\n\n  private _parseEntities(): Promise<Entity[]> {\n    const entitiesConfig = this.data.entities;\n    const entityConfigMap = this.context.entityConfigMap;\n    const entityMap = this.context.entityMap;\n    const engine = this._engine;\n    const promises = entitiesConfig.map((entityConfig) => {\n      const id = (entityConfig as IStrippedEntity).strippedId ?? entityConfig.id;\n      entityConfig.id = id;\n      entityConfigMap.set(id, entityConfig);\n      return this._getEntityByConfig(entityConfig, engine);\n    });\n    return Promise.all(promises).then((entities) => {\n      for (let i = 0, l = entities.length; i < l; i++) {\n        entityMap.set(entitiesConfig[i].id, entities[i]);\n      }\n\n      return entities;\n    });\n  }\n\n  private _parseComponents(): Promise<any[]> {\n    const entitiesConfig = this.data.entities;\n    const entityMap = this.context.entityMap;\n    const components = this.context.components;\n\n    const promises = [];\n    for (let i = 0, l = entitiesConfig.length; i < l; i++) {\n      const entityConfig = entitiesConfig[i];\n      const entity = entityMap.get(entityConfig.id);\n      for (let i = 0; i < entityConfig.components.length; i++) {\n        const componentConfig = entityConfig.components[i];\n        const key = !componentConfig.refId ? componentConfig.class : componentConfig.refId;\n        const component = entity.addComponent(Loader.getClass(key));\n        components.set(componentConfig.id, component);\n        const promise = this._reflectionParser.parsePropsAndMethods(component, componentConfig);\n        promises.push(promise);\n      }\n    }\n    return Promise.all(promises);\n  }\n\n  private _parsePrefabModification() {\n    const entitiesConfig = this.data.entities;\n    const entityMap = this.context.entityMap;\n\n    const promises = [];\n    for (let i = 0, l = entitiesConfig.length; i < l; i++) {\n      const entityConfig = entitiesConfig[i];\n      const { id, modifications } = entityConfig as IRefEntity;\n\n      if (modifications?.length) {\n        const rootEntity = entityMap.get(id);\n        promises.push(\n          ...modifications.map((modification) => {\n            const { target, props, methods } = modification;\n            const { entityId, componentId } = target;\n            const context = this._prefabContextMap.get(rootEntity);\n            const targetEntity = context.entityMap.get(entityId);\n            const targetComponent = context.components.get(componentId);\n            if (targetComponent) {\n              return this._reflectionParser.parsePropsAndMethods(targetComponent, {\n                props,\n                methods\n              });\n            } else if (targetEntity) {\n              return Promise.resolve(this._applyEntityData(targetEntity, props));\n            }\n          })\n        );\n      }\n    }\n\n    return Promise.all(promises);\n  }\n\n  private _parsePrefabRemovedEntities() {\n    const entitiesConfig = this.data.entities;\n    const entityMap = this.context.entityMap;\n\n    const promises = [];\n    for (let i = 0, l = entitiesConfig.length; i < l; i++) {\n      const entityConfig = entitiesConfig[i];\n      const { id, removedEntities } = entityConfig as IRefEntity;\n\n      if (removedEntities?.length) {\n        const rootEntity = entityMap.get(id);\n        promises.push(\n          ...removedEntities.map((target) => {\n            const { entityId } = target;\n            const context = this._prefabContextMap.get(rootEntity);\n            const targetEntity = context.entityMap.get(entityId);\n            if (targetEntity) {\n              targetEntity.destroy();\n            }\n          })\n        );\n      }\n    }\n\n    return Promise.all(promises);\n  }\n\n  private _parsePrefabRemovedComponents() {\n    const entitiesConfig = this.data.entities;\n    const entityMap = this.context.entityMap;\n\n    const promises = [];\n    for (let i = 0, l = entitiesConfig.length; i < l; i++) {\n      const entityConfig = entitiesConfig[i];\n      const { id, removedComponents } = entityConfig as IRefEntity;\n\n      if (removedComponents?.length) {\n        const rootEntity = entityMap.get(id);\n        promises.concat(\n          ...removedComponents.map((target) => {\n            const { componentId } = target;\n            const context = this._prefabContextMap.get(rootEntity);\n            const targetComponent = context.components.get(componentId);\n            if (targetComponent) {\n              targetComponent.destroy();\n            }\n          })\n        );\n      }\n    }\n\n    return Promise.all(promises);\n  }\n\n  private _organizeEntities(): void {\n    const { rootIds, strippedIds } = this.context;\n    const parentIds = rootIds.concat(strippedIds);\n    for (const parentId of parentIds) {\n      this._parseChildren(parentId);\n    }\n    for (let i = 0; i < rootIds.length; i++) {\n      this._handleRootEntity(rootIds[i]);\n    }\n  }\n\n  private _getEntityByConfig(entityConfig: IEntity, engine: Engine): Promise<Entity> {\n    let entityPromise: Promise<Entity>;\n    if ((<IRefEntity>entityConfig).assetRefId) {\n      entityPromise = this._parsePrefab(<IRefEntity>entityConfig, engine);\n    } else if ((<IStrippedEntity>entityConfig).strippedId) {\n      entityPromise = this._parseStrippedEntity(<IStrippedEntity>entityConfig);\n    } else {\n      entityPromise = this._parseEntity(entityConfig, engine);\n    }\n    return entityPromise.then((entity) => {\n      return this._applyEntityData(entity, entityConfig);\n    });\n  }\n\n  private _parseEntity(entityConfig: IEntity, engine: Engine): Promise<Entity> {\n    const entity = new Entity(engine, entityConfig.name);\n    if (!entityConfig.parent) this.context.rootIds.push(entityConfig.id);\n\n    return Promise.resolve(entity);\n  }\n\n  private _parsePrefab(entityConfig: IRefEntity, engine: Engine): Promise<Entity> {\n    const assetRefId: string = entityConfig.assetRefId;\n\n    return (\n      engine.resourceManager\n        // @ts-ignore\n        .getResourceByRef<Entity>({\n          refId: assetRefId\n        })\n        .then((prefabResource: PrefabResource | GLTFResource) => {\n          const entity =\n            prefabResource instanceof PrefabResource\n              ? prefabResource.instantiate()\n              : prefabResource.instantiateSceneRoot();\n          const instanceContext = new ParserContext<IHierarchyFile, Entity>(engine, ParserType.Prefab, null);\n          if (!entityConfig.parent) this.context.rootIds.push(entityConfig.id);\n\n          this._generateInstanceContext(entity, instanceContext, \"\");\n\n          this._prefabContextMap.set(entity, instanceContext);\n          const cbArray = this._prefabPromiseMap.get(entityConfig.id);\n          if (cbArray) {\n            for (let i = 0, n = cbArray.length; i < n; i++) {\n              cbArray[i].resolve(instanceContext);\n            }\n          }\n          return entity;\n        })\n    );\n  }\n\n  private _parseStrippedEntity(entityConfig: IStrippedEntity): Promise<Entity> {\n    this.context.strippedIds.push(entityConfig.id);\n\n    return new Promise<ParserContext<IHierarchyFile, Entity>>((resolve, reject) => {\n      const cbArray = this._prefabPromiseMap.get((<IStrippedEntity>entityConfig).prefabInstanceId) ?? [];\n      cbArray.push({ resolve, reject });\n      this._prefabPromiseMap.set((<IStrippedEntity>entityConfig).prefabInstanceId, cbArray);\n    }).then((context) => {\n      const { entityId } = entityConfig.prefabSource;\n\n      return context.entityMap.get(entityId);\n    });\n  }\n\n  private _parseChildren(parentId: string) {\n    const { entityConfigMap, entityMap } = this.context;\n    const children = entityConfigMap.get(parentId).children;\n    if (children && children.length > 0) {\n      const parent = entityMap.get(parentId);\n      for (let i = 0; i < children.length; i++) {\n        const childId = children[i];\n        const entity = entityMap.get(childId);\n        parent.addChild(entity);\n        this._parseChildren(childId);\n      }\n    }\n  }\n\n  private _applyEntityData(entity: Entity, entityConfig: IEntity = {}): Entity {\n    entity.isActive = entityConfig.isActive ?? entity.isActive;\n    entity.name = entityConfig.name ?? entity.name;\n    const { position, rotation, scale, layer } = entityConfig;\n    if (position) entity.transform.position.copyFrom(position);\n    if (rotation) entity.transform.rotation.copyFrom(rotation);\n    if (scale) entity.transform.scale.copyFrom(scale);\n    if (layer) entity.layer = layer;\n    return entity;\n  }\n\n  private _generateInstanceContext(entity: Entity, context: ParserContext<IHierarchyFile, Entity>, path: string) {\n    const { entityMap, components } = context;\n    const componentsMap = {};\n    const componentIndexMap = {};\n\n    entityMap.set(path, entity);\n    // @ts-ignore\n    entity._components.forEach((component) => {\n      // @ts-ignore\n      const name = Loader.getClassName(component.constructor);\n      if (!componentsMap[name]) {\n        componentsMap[name] = entity.getComponents(component.constructor, []);\n        componentIndexMap[name] = 0;\n      }\n      components.set(`${path}:${name}/${componentIndexMap[name]++}`, component);\n    });\n    for (let i = 0, n = entity.children.length; i < n; i++) {\n      const child = entity.children[i];\n      const childPath = path ? `${path}/${i}` : `${i}`;\n      this._generateInstanceContext(child, context, childPath);\n    }\n  }\n}\n","import { Engine, Scene } from \"@galacean/engine-core\";\nimport type { IScene } from \"../schema\";\nimport { HierarchyParser } from \"../parser/HierarchyParser\";\nimport { ParserContext, ParserType } from \"../parser/ParserContext\";\n\n/** @Internal */\nexport class SceneParser extends HierarchyParser<Scene, ParserContext<IScene, Scene>> {\n  /**\n   * Parse scene data.\n   * @param engine - the engine of the parser context\n   * @param sceneData - scene data which is exported by editor\n   * @returns a promise of scene\n   */\n  static parse(engine: Engine, sceneData: IScene): Promise<Scene> {\n    const scene = new Scene(engine);\n    const context = new ParserContext<IScene, Scene>(engine, ParserType.Scene, scene);\n    const parser = new SceneParser(sceneData, context, scene);\n    parser.start();\n    return parser.promise.then(() => scene);\n  }\n\n  constructor(\n    data: IScene,\n    context: ParserContext<IScene, Scene>,\n    public readonly scene: Scene\n  ) {\n    super(data, context);\n  }\n\n  protected override _handleRootEntity(id: string): void {\n    const { entityMap } = this.context;\n    this.scene.addRootEntity(entityMap.get(id));\n  }\n\n  protected override _clearAndResolve() {\n    this.context.clear();\n    return this.scene;\n  }\n}\n","import { AssetPromise, Loader, LoadItem, resourceLoader, ResourceManager, Texture2D } from \"@galacean/engine-core\";\nimport { decode } from \"../..\";\n\n@resourceLoader(\"EditorTexture2D\", [\"prefab\"], true)\nexport class EditorTextureLoader extends Loader<Texture2D> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<Texture2D> {\n    return new AssetPromise((resolve, reject) => {\n      resourceManager\n        // @ts-ignore\n        ._request<ArrayBuffer>(item.url, { ...item, type: \"arraybuffer\" })\n        .then((data) => {\n          decode<Texture2D>(data, resourceManager.engine).then((texture) => {\n            resolve(texture);\n          });\n        })\n        .catch(reject);\n    });\n  }\n}\n","import { Engine } from \"@galacean/engine-core\";\nimport { BufferReader } from \"./utils/BufferReader\";\nimport { decoderMap } from \"./utils/Decorator\";\nimport { FileHeader } from \"./utils/FileHeader\";\n\nexport { MeshDecoder } from \"./resources/mesh/MeshDecoder\";\nexport { Texture2DDecoder } from \"./resources/texture2D/TextureDecoder\";\nexport { ReflectionParser } from \"./resources/parser/ReflectionParser\";\nexport * from \"./resources/animationClip/AnimationClipDecoder\";\nexport type { IModelMesh } from \"./resources/mesh/IModelMesh\";\n\n/**\n * Decode engine binary resource.\n * @param arrayBuffer - array buffer of decode binary file\n * @param engine - engine\n * @returns\n */\nexport function decode<T>(arrayBuffer: ArrayBuffer, engine: Engine): Promise<T> {\n  const header = FileHeader.decode(arrayBuffer);\n  const bufferReader = new BufferReader(new Uint8Array(arrayBuffer), header.headerLength, header.dataLength);\n  return decoderMap[header.type].decode(engine, bufferReader).then((object) => {\n    object.name = header.name;\n    return object;\n  });\n}\n\nexport * from \"./resources/schema\";\nexport * from \"./resources/scene/SceneParser\";\nexport * from \"./resources/scene/EditorTextureLoader\";\nexport * from \"./resources/parser/ParserContext\";\n\nexport * from \"./utils/BufferReader\";\nexport * from \"./utils/Decorator\";\nexport * from \"./utils/FileHeader\";\n","import {\n  resourceLoader,\n  Loader,\n  AssetPromise,\n  AssetType,\n  LoadItem,\n  ResourceManager,\n  AnimationClip,\n  ReferResource\n} from \"@galacean/engine-core\";\nimport { decode } from \"./resource-deserialize\";\n\n@resourceLoader(AssetType.AnimationClip, [\"ani\"])\nclass AnimationClipLoader extends Loader<AnimationClip> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<AnimationClip> {\n    return new AssetPromise((resolve, reject) => {\n      resourceManager\n        // @ts-ignore\n        ._request<any>(item.url, {\n          ...item,\n          type: \"arraybuffer\"\n        })\n        .then((data) => {\n          return decode<AnimationClip>(data, resourceManager.engine)\n            .then((clip) => {\n              const curveBindingPromises = clip.curveBindings.map((curveBinding) => {\n                const { curve } = curveBinding;\n                const promises = curve.keys.map((key) => {\n                  return this._parseKeyframeValue(key, resourceManager).then((actualValue) => {\n                    key.value = actualValue;\n                  });\n                });\n                return Promise.all(promises);\n              });\n              return Promise.all(curveBindingPromises).then(() => {\n                resolve(clip);\n              });\n            })\n            .catch(reject);\n        })\n        .catch(reject);\n    });\n  }\n\n  private _parseKeyframeValue(keyframe: any, resourceManager: ResourceManager): Promise<any> {\n    const value = keyframe.value;\n\n    if (typeof value === \"object\" && (value as any)?.refId) {\n      return new Promise((resolve) => {\n        resourceManager\n          // @ts-ignore\n          .getResourceByRef<ReferResource>(value as any)\n          .then((asset: ReferResource) => {\n            keyframe.value = asset;\n            resolve(keyframe.value);\n          });\n      });\n    } else {\n      return Promise.resolve(keyframe.value);\n    }\n  }\n}\n","import {\n  resourceLoader,\n  Loader,\n  AssetPromise,\n  AssetType,\n  LoadItem,\n  ResourceManager,\n  AnimatorController,\n  AnimatorControllerLayer,\n  AnimatorStateTransition,\n  AnimatorState,\n  AnimatorConditionMode,\n  AnimatorControllerParameterValue,\n  WrapMode\n} from \"@galacean/engine-core\";\n\n@resourceLoader(AssetType.AnimatorController, [\"json\"], false)\nclass AnimatorControllerLoader extends Loader<AnimatorController> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<AnimatorController> {\n    return new AssetPromise((resolve, reject) => {\n      resourceManager\n        // @ts-ignore\n        ._request<any>(item.url, {\n          ...item,\n          type: \"json\"\n        })\n        .then((data) => {\n          const animatorController = new AnimatorController(resourceManager.engine);\n          const { layers, parameters } = data;\n          const promises = [];\n          layers.forEach((layerData, layerIndex: number) => {\n            const { name, blendingMode, weight, stateMachine: stateMachineData } = layerData;\n            const layer = new AnimatorControllerLayer(name);\n            layer.blendingMode = blendingMode;\n            layer.weight = weight;\n            if (stateMachineData) {\n              const { states, transitions, entryTransitions, anyTransitions } = stateMachineData;\n              const stateMachine = layer.stateMachine;\n              const statesMap: Record<string, AnimatorState> = {};\n              const transitionsMap: Record<string, AnimatorStateTransition> = {};\n              states.forEach((stateData: IStateData, stateIndex: number) => {\n                const {\n                  id,\n                  name,\n                  speed,\n                  wrapMode,\n                  clipStartNormalizedTime,\n                  clipEndNormalizedTime,\n                  clip: clipData,\n                  scripts\n                } = stateData;\n                const state = stateMachine.addState(name);\n                state.speed = speed;\n                state.wrapMode = wrapMode;\n                state.clipStartTime = clipStartNormalizedTime;\n                state.clipEndTime = clipEndNormalizedTime;\n                scripts.forEach((script) => {\n                  state.addStateMachineScript(Loader.getClass(script));\n                });\n                statesMap[id] = state;\n                if (clipData) {\n                  promises.push(\n                    new Promise((resolve) => {\n                      //@ts-ignore\n                      resourceManager.getResourceByRef(clipData).then((clip) => {\n                        resolve({\n                          layerIndex,\n                          stateIndex,\n                          clip\n                        });\n                      });\n                    })\n                  );\n                }\n              });\n              transitions.forEach((transitionData: ITransitionData) => {\n                const transition = this._createTransition(transitionData, statesMap[transitionData.destinationStateId]);\n                transitionsMap[transitionData.id] = transition;\n              });\n\n              states.forEach((stateData: IStateData) => {\n                const { id, transitions } = stateData;\n                transitions.forEach((transitionId) => {\n                  const transition = transitionsMap[transitionId];\n                  transition && statesMap[id].addTransition(transition);\n                });\n              });\n\n              entryTransitions.forEach((entryTransitionData: ITransitionData) => {\n                stateMachine.addEntryStateTransition(\n                  this._createTransition(entryTransitionData, statesMap[entryTransitionData.destinationStateId])\n                );\n              });\n\n              anyTransitions.forEach((anyTransitionData: ITransitionData) => {\n                stateMachine.addAnyStateTransition(\n                  this._createTransition(anyTransitionData, statesMap[anyTransitionData.destinationStateId])\n                );\n              });\n            }\n            animatorController.addLayer(layer);\n          });\n          parameters.forEach((parameterData) => {\n            if (parameterData.isTrigger) {\n              animatorController.addTriggerParameter(parameterData.name);\n            } else {\n              animatorController.addParameter(parameterData.name, parameterData.defaultValue);\n            }\n          });\n          Promise.all(promises).then((clipData) => {\n            clipData.forEach((data) => {\n              const { layerIndex, stateIndex, clip } = data;\n              animatorController.layers[layerIndex].stateMachine.states[stateIndex].clip = clip;\n            });\n            resolve(animatorController);\n          });\n        })\n        .catch(reject);\n    });\n  }\n\n  private _createTransition(transitionData: ITransitionData, destinationState: AnimatorState): AnimatorStateTransition {\n    const transition = new AnimatorStateTransition();\n    transition.hasExitTime = transitionData.hasExitTime;\n    transition.isFixedDuration = transitionData.isFixedDuration;\n    transition.duration = transitionData.duration;\n    transition.offset = transitionData.offset;\n    transition.exitTime = transitionData.exitTime;\n    transition.solo = transitionData.solo;\n    transition.mute = transitionData.mute;\n    // @ts-ignore\n    transition._isExit = transitionData.isExit;\n    transition.destinationState = destinationState;\n    transitionData.conditions.forEach((conditionData) => {\n      transition.addCondition(conditionData.parameterName, conditionData.mode, conditionData.threshold);\n    });\n    return transition;\n  }\n}\n\ninterface IStateData {\n  id?: string;\n  name: string;\n  speed: number;\n  wrapMode: WrapMode;\n  clipStartNormalizedTime: number;\n  clipEndNormalizedTime: number;\n  clip: any;\n  transitions: string[];\n  scripts: string[];\n  isEntryState: boolean;\n  isExitState: boolean;\n  isAnyState: boolean;\n}\n\ninterface ITransitionData {\n  id?: string;\n  duration: number;\n  offset: number;\n  exitTime: number;\n  destinationStateId: string;\n  solo: boolean;\n  mute: boolean;\n  isExit: boolean;\n  conditions: IConditionData[];\n  hasExitTime: boolean;\n  isFixedDuration: boolean;\n}\n\ninterface IConditionData {\n  mode: AnimatorConditionMode;\n  parameterName: string;\n  threshold?: AnimatorControllerParameterValue;\n}\n","import { resourceLoader, Loader, AssetPromise, AssetType, LoadItem, ResourceManager } from \"@galacean/engine-core\";\n\nfunction isBase64(url) {\n  return /^data:(.+?);base64,/.test(url);\n}\n@resourceLoader(AssetType.Buffer, [\"bin\", \"r3bin\"], false)\nclass BufferLoader extends Loader<ArrayBuffer> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<ArrayBuffer> {\n    const url = item.url;\n    if (isBase64(url)) {\n      return new AssetPromise((resolve) => {\n        const base64Str = url.slice(13 + RegExp.$1.length);\n        const result = Uint8Array.from(atob(base64Str), (c) => c.charCodeAt(0));\n        resolve(result.buffer);\n      });\n    }\n    // @ts-ignore\n    return resourceManager._request(url, {\n      ...item,\n      type: \"arraybuffer\"\n    });\n  }\n}\n","import {\n  AmbientLight,\n  AssetPromise,\n  AssetType,\n  DiffuseMode,\n  Loader,\n  LoadItem,\n  resourceLoader,\n  ResourceManager,\n  TextureCube,\n  TextureCubeFace,\n  TextureFilterMode\n} from \"@galacean/engine-core\";\nimport { SphericalHarmonics3 } from \"@galacean/engine-math\";\n\n@resourceLoader(AssetType.Env, [\"env\"])\nclass EnvLoader extends Loader<AmbientLight> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<AmbientLight> {\n    return new AssetPromise((resolve, reject) => {\n      resourceManager\n        // @ts-ignore\n        ._request<ArrayBuffer>(item.url, { ...item, type: \"arraybuffer\" })\n        .then((arraybuffer) => {\n          const shArray = new Float32Array(arraybuffer, 0, 27);\n          const shByteLength = 27 * 4;\n          const size = new Uint16Array(arraybuffer, shByteLength, 1)?.[0];\n\n          const { engine } = resourceManager;\n          const texture = new TextureCube(engine, size);\n          texture.filterMode = TextureFilterMode.Trilinear;\n          const mipmapCount = texture.mipmapCount;\n          let offset = shByteLength + 2;\n\n          for (let mipLevel = 0; mipLevel < mipmapCount; mipLevel++) {\n            const mipSize = size >> mipLevel;\n\n            for (let face = 0; face < 6; face++) {\n              const dataSize = mipSize * mipSize * 4;\n              const data = new Uint8Array(arraybuffer, offset, dataSize);\n              offset += dataSize;\n              texture.setPixelBuffer(TextureCubeFace.PositiveX + face, data, mipLevel);\n            }\n          }\n\n          const ambientLight = new AmbientLight(engine);\n          const sh = new SphericalHarmonics3();\n\n          ambientLight.diffuseMode = DiffuseMode.SphericalHarmonics;\n          sh.copyFromArray(shArray);\n          ambientLight.diffuseSphericalHarmonics = sh;\n          ambientLight.specularTexture = texture;\n          ambientLight.specularTextureDecodeRGBM = true;\n          resolve(ambientLight);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n}\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) resolve(value);\n    else Promise.resolve(value).then(_next, _throw);\n}\nfunction _async_to_generator(fn) {\n    return function() {\n        var self = this, args = arguments;\n\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n\n            _next(undefined);\n        });\n    };\n}\nexport { _async_to_generator as _ };\n","import {\n  AssetPromise,\n  AssetType,\n  Font,\n  Loader,\n  LoadItem,\n  resourceLoader,\n  ResourceManager\n} from \"@galacean/engine-core\";\n\n@resourceLoader(AssetType.Font, [\"font\"], false)\nclass FontLoader extends Loader<Font> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<Font> {\n    return new AssetPromise((resolve, reject) => {\n      resourceManager\n        // @ts-ignore\n        ._request<any>(item.url, { ...item, type: \"json\" })\n        .then((data) => {\n          const { fontName, fontUrl } = data;\n\n          if (fontUrl) {\n            this._registerFont(fontName, fontUrl)\n              .then(() => {\n                const font = new Font(resourceManager.engine, fontName);\n                resolve(font);\n              })\n              .catch((e) => {\n                reject(`load font ${fontUrl} fail`);\n              });\n          } else {\n            const font = new Font(resourceManager.engine, fontName);\n            resolve(font);\n          }\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n\n  private async _registerFont(fontName: string, fontUrl: string): Promise<void> {\n    const fontFace = new FontFace(fontName, `url(${fontUrl})`);\n    await fontFace.load();\n    document.fonts.add(fontFace);\n  }\n}\n","import {\n  AnimationClip,\n  AnimatorController,\n  Camera,\n  Engine,\n  Entity,\n  Light,\n  Material,\n  ModelMesh,\n  ReferResource,\n  Skin,\n  Texture2D\n} from \"@galacean/engine-core\";\n\n/**\n * The glTF resource.\n */\nexport class GLTFResource extends ReferResource {\n  /** glTF file url. */\n  readonly url: string;\n  /** The array of loaded textures. */\n  readonly textures?: Texture2D[];\n  /** The array of loaded materials. */\n  readonly materials?: Material[];\n  /** The array of loaded Meshes. */\n  readonly meshes?: ModelMesh[][];\n  /** The array of loaded skins. */\n  readonly skins?: Skin[];\n  /** The array of loaded animationClips. */\n  readonly animations?: AnimationClip[];\n  /** The loaded  AnimatorController. */\n  readonly animatorController?: AnimatorController;\n\n  /** @internal */\n  _defaultSceneRoot: Entity;\n  /** @internal */\n  _sceneRoots: Entity[];\n  /** @internal */\n  _extensionsData: Record<string, any>;\n\n  /**\n   * Extensions data.\n   */\n  get extensionsData(): Record<string, any> {\n    return this._extensionsData;\n  }\n\n  /**\n   * @internal\n   */\n  constructor(engine: Engine, url: string) {\n    super(engine);\n    this.url = url;\n  }\n\n  /**\n   * Instantiate scene root entity.\n   * @param sceneIndex - Scene index\n   * @returns Root entity\n   */\n  instantiateSceneRoot(sceneIndex?: number): Entity {\n    const sceneRoot = sceneIndex === undefined ? this._defaultSceneRoot : this._sceneRoots[sceneIndex];\n    return sceneRoot.clone();\n  }\n\n  protected override _onDestroy(): void {\n    super._onDestroy();\n\n    const { textures, materials, meshes } = this;\n    textures && this._disassociationSuperResource(textures);\n    materials && this._disassociationSuperResource(materials);\n    if (meshes) {\n      for (let i = 0, n = meshes.length; i < n; i++) {\n        this._disassociationSuperResource(meshes[i]);\n      }\n    }\n  }\n\n  private _disassociationSuperResource(resources: ReferResource[]): void {\n    for (let i = 0, n = resources.length; i < n; i++) {\n      // @ts-ignore\n      resources[i]._disassociationSuperResource(this);\n    }\n  }\n\n  /**\n   * @deprecated\n   * Entity after EntityParser.\n   */\n  entities: Entity[];\n\n  /**\n   * @deprecated\n   * Camera after SceneParser.\n   */\n  cameras?: Camera[];\n\n  /**\n   * @deprecated\n   * Export lights in extension KHR_lights_punctual.\n   */\n  lights?: Light[];\n\n  /**\n   * @deprecated Please use `instantiateSceneRoot` instead.\n   * RootEntities after SceneParser.\n   */\n  get sceneRoots(): Entity[] {\n    return this._sceneRoots;\n  }\n\n  /**\n   * @deprecated Please use `instantiateSceneRoot` instead.\n   * RootEntity after SceneParser.\n   */\n  get defaultSceneRoot(): Entity {\n    return this._defaultSceneRoot;\n  }\n}\n","/**\n * Module for glTF 2.0 Interface\n */\n\nimport type { MeshTopology, TextureFilterMode, TextureWrapMode as EngineTextureWrapMode } from \"@galacean/engine-core\";\n\n/**\n * The datatype of the components in the attribute\n */\nexport enum AccessorComponentType {\n  /**\n   * Byte\n   */\n  BYTE = 5120,\n  /**\n   * Unsigned Byte\n   */\n  UNSIGNED_BYTE = 5121,\n  /**\n   * Short\n   */\n  SHORT = 5122,\n  /**\n   * Unsigned Short\n   */\n  UNSIGNED_SHORT = 5123,\n  /**\n   * Unsigned Int\n   */\n  UNSIGNED_INT = 5125,\n  /**\n   * Float\n   */\n  FLOAT = 5126\n}\n\n/**\n * Specifies if the attirbute is a scalar, vector, or matrix\n */\nexport enum AccessorType {\n  /**\n   * Scalar\n   */\n  SCALAR = \"SCALAR\",\n  /**\n   * Vector2\n   */\n  VEC2 = \"VEC2\",\n  /**\n   * Vector3\n   */\n  VEC3 = \"VEC3\",\n  /**\n   * Vector4\n   */\n  VEC4 = \"VEC4\",\n  /**\n   * Matrix2x2\n   */\n  MAT2 = \"MAT2\",\n  /**\n   * Matrix3x3\n   */\n  MAT3 = \"MAT3\",\n  /**\n   * Matrix4x4\n   */\n  MAT4 = \"MAT4\"\n}\n\n/**\n * The name of the node's TRS property to modify, or the weights of the Morph Targets it instantiates\n */\nexport enum AnimationChannelTargetPath {\n  /**\n   * Translation\n   */\n  TRANSLATION = \"translation\",\n  /**\n   * Rotation\n   */\n  ROTATION = \"rotation\",\n  /**\n   * Scale\n   */\n  SCALE = \"scale\",\n  /**\n   * Weights\n   */\n  WEIGHTS = \"weights\"\n}\n\n/**\n * Interpolation algorithm\n */\nexport enum AnimationSamplerInterpolation {\n  /**\n   * The animated values are linearly interpolated between keyframes\n   */\n  Linear = \"LINEAR\",\n  /**\n   * The animated values remain constant to the output of the first keyframe, until the next keyframe\n   */\n  Step = \"STEP\",\n  /**\n   * The animation's interpolation is computed using a cubic spline with specified tangents\n   */\n  CubicSpine = \"CUBICSPLINE\"\n}\n\n/**\n * A camera's projection.  A node can reference a camera to apply a transform to place the camera in the scene\n */\nexport enum CameraType {\n  /**\n   * A perspective camera containing properties to create a perspective projection matrix\n   */\n  PERSPECTIVE = \"perspective\",\n  /**\n   * An orthographic camera containing properties to create an orthographic projection matrix\n   */\n  ORTHOGRAPHIC = \"orthographic\"\n}\n\n/**\n * The mime-type of the image\n */\nexport enum ImageMimeType {\n  /**\n   * JPEG Mime-type\n   */\n  JPEG = \"image/jpeg\",\n  /**\n   * PNG Mime-type\n   */\n  PNG = \"image/png\"\n}\n\n/**\n * The alpha rendering mode of the material\n */\nexport enum MaterialAlphaMode {\n  /**\n   * The alpha value is ignored and the rendered output is fully opaque\n   */\n  OPAQUE = \"OPAQUE\",\n  /**\n   * The rendered output is either fully opaque or fully transparent depending on the alpha value and the specified alpha cutoff value\n   */\n  MASK = \"MASK\",\n  /**\n   * The alpha value is used to composite the source and destination areas. The rendered output is combined with the background using the normal painting operation (i.e. the Porter and Duff over operator)\n   */\n  BLEND = \"BLEND\"\n}\n\n/**\n * Magnification filter.  Valid values correspond to WebGL enums: 9728 (NEAREST) and 9729 (LINEAR)\n */\nexport enum TextureMagFilter {\n  /**\n   * Nearest\n   */\n  NEAREST = 9728,\n  /**\n   * Linear\n   */\n  LINEAR = 9729\n}\n\n/**\n * Minification filter.  All valid values correspond to WebGL enums\n */\nexport enum TextureMinFilter {\n  /**\n   * Nearest\n   */\n  NEAREST = 9728,\n  /**\n   * Linear\n   */\n  LINEAR = 9729,\n  /**\n   * Nearest Mip-Map Nearest\n   */\n  NEAREST_MIPMAP_NEAREST = 9984,\n  /**\n   * Linear Mipmap Nearest\n   */\n  LINEAR_MIPMAP_NEAREST = 9985,\n  /**\n   * Nearest Mipmap Linear\n   */\n  NEAREST_MIPMAP_LINEAR = 9986,\n  /**\n   * Linear Mipmap Linear\n   */\n  LINEAR_MIPMAP_LINEAR = 9987\n}\n\n/**\n * S (U) wrapping mode.  All valid values correspond to WebGL enums\n */\nexport enum TextureWrapMode {\n  /**\n   * Clamp to Edge\n   */\n  CLAMP_TO_EDGE = 33071,\n  /**\n   * Mirrored Repeat\n   */\n  MIRRORED_REPEAT = 33648,\n  /**\n   * Repeat\n   */\n  REPEAT = 10497\n}\n\n/**\n * glTF Property\n */\nexport interface IProperty {\n  /**\n   * Dictionary object with extension-specific objects\n   */\n  extensions?: {\n    [key: string]: any;\n  };\n  /**\n   * Application-Specific data\n   */\n  extras?: any;\n}\n\n/**\n * glTF Child of Root Property\n */\nexport interface IChildRootProperty extends IProperty {\n  /**\n   * The user-defined name of this object\n   */\n  name?: string;\n}\n\n/**\n * Indices of those attributes that deviate from their initialization value\n */\nexport interface IAccessorSparseIndices extends IProperty {\n  /**\n   * The index of the bufferView with sparse indices. Referenced bufferView can't have ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER target\n   */\n  bufferView: number;\n  /**\n   * The offset relative to the start of the bufferView in bytes. Must be aligned\n   */\n  byteOffset?: number;\n  /**\n   * The indices data type.  Valid values correspond to WebGL enums: 5121 (UNSIGNED_BYTE), 5123 (UNSIGNED_SHORT), 5125 (UNSIGNED_INT)\n   */\n  componentType: AccessorComponentType;\n}\n\n/**\n * Array of size accessor.sparse.count times number of components storing the displaced accessor attributes pointed by accessor.sparse.indices\n */\nexport interface IAccessorSparseValues extends IProperty {\n  /**\n   * The index of the bufferView with sparse values. Referenced bufferView can't have ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER target\n   */\n  bufferView: number;\n  /**\n   * The offset relative to the start of the bufferView in bytes. Must be aligned\n   */\n  byteOffset?: number;\n}\n\n/**\n * Sparse storage of attributes that deviate from their initialization value\n */\nexport interface IAccessorSparse extends IProperty {\n  /**\n   * The number of attributes encoded in this sparse accessor\n   */\n  count: number;\n  /**\n   * Index array of size count that points to those accessor attributes that deviate from their initialization value. Indices must strictly increase\n   */\n  indices: IAccessorSparseIndices;\n  /**\n   * Array of size count times number of components, storing the displaced accessor attributes pointed by indices. Substituted values must have the same componentType and number of components as the base accessor\n   */\n  values: IAccessorSparseValues;\n}\n\n/**\n * A typed view into a bufferView.  A bufferView contains raw binary data.  An accessor provides a typed view into a bufferView or a subset of a bufferView similar to how WebGL's vertexAttribPointer() defines an attribute in a buffer\n */\nexport interface IAccessor extends IChildRootProperty {\n  /**\n   * The index of the bufferview\n   */\n  bufferView?: number;\n  /**\n   * The offset relative to the start of the bufferView in bytes\n   */\n  byteOffset?: number;\n  /**\n   * The datatype of components in the attribute\n   */\n  componentType: AccessorComponentType;\n  /**\n   * Specifies whether integer data values should be normalized\n   */\n  normalized?: boolean;\n  /**\n   * The number of attributes referenced by this accessor\n   */\n  count: number;\n  /**\n   * Specifies if the attribute is a scalar, vector, or matrix\n   */\n  type: AccessorType;\n  /**\n   * Maximum value of each component in this attribute\n   */\n  max?: number[];\n  /**\n   * Minimum value of each component in this attribute\n   */\n  min?: number[];\n  /**\n   * Sparse storage of attributes that deviate from their initialization value\n   */\n  sparse?: IAccessorSparse;\n}\n\n/**\n * Targets an animation's sampler at a node's property\n */\nexport interface IAnimationChannel extends IProperty {\n  /**\n   * The index of a sampler in this animation used to compute the value for the target\n   */\n  sampler: number;\n  /**\n   * The index of the node and TRS property to target\n   */\n  target: IAnimationChannelTarget;\n}\n\n/**\n * The index of the node and TRS property that an animation channel targets\n */\nexport interface IAnimationChannelTarget extends IProperty {\n  /**\n   * The index of the node to target\n   */\n  node: number;\n  /**\n   * The name of the node's TRS property to modify, or the weights of the Morph Targets it instantiates\n   */\n  path: AnimationChannelTargetPath;\n}\n\n/**\n * Combines input and output accessors with an interpolation algorithm to define a keyframe graph (but not its target)\n */\nexport interface IAnimationSampler extends IProperty {\n  /**\n   * The index of an accessor containing keyframe input values, e.g., time\n   */\n  input: number;\n  /**\n   * Interpolation algorithm\n   */\n  interpolation?: AnimationSamplerInterpolation;\n  /**\n   * The index of an accessor, containing keyframe output values\n   */\n  output: number;\n}\n\n/**\n * A keyframe animation\n */\nexport interface IAnimation extends IChildRootProperty {\n  /**\n   * An array of channels, each of which targets an animation's sampler at a node's property\n   */\n  channels: IAnimationChannel[];\n  /**\n   * An array of samplers that combines input and output accessors with an interpolation algorithm to define a keyframe graph (but not its target)\n   */\n  samplers: IAnimationSampler[];\n}\n\n/**\n * Metadata about the glTF asset\n */\nexport interface IAsset extends IChildRootProperty {\n  /**\n   * A copyright message suitable for display to credit the content creator\n   */\n  copyright?: string;\n  /**\n   * Tool that generated this glTF model.  Useful for debugging\n   */\n  generator?: string;\n  /**\n   * The glTF version that this asset targets\n   */\n  version: string;\n  /**\n   * The minimum glTF version that this asset targets\n   */\n  minVersion?: string;\n}\n\n/**\n * A buffer points to binary geometry, animation, or skins\n */\nexport interface IBuffer extends IChildRootProperty {\n  /**\n   * The uri of the buffer.  Relative paths are relative to the .gltf file.  Instead of referencing an external file, the uri can also be a data-uri\n   */\n  uri?: string;\n  /**\n   * The length of the buffer in bytes\n   */\n  byteLength: number;\n}\n\n/**\n * A view into a buffer generally representing a subset of the buffer\n */\nexport interface IBufferView extends IChildRootProperty {\n  /**\n   * The index of the buffer\n   */\n  buffer: number;\n  /**\n   * The offset into the buffer in bytes\n   */\n  byteOffset?: number;\n  /**\n   * The length of the bufferView in bytes\n   */\n  byteLength: number;\n  /**\n   * The stride, in bytes\n   */\n  byteStride?: number;\n}\n\n/**\n * An orthographic camera containing properties to create an orthographic projection matrix\n */\nexport interface ICameraOrthographic extends IProperty {\n  /**\n   * The floating-point horizontal magnification of the view. Must not be zero\n   */\n  xmag: number;\n  /**\n   * The floating-point vertical magnification of the view. Must not be zero\n   */\n  ymag: number;\n  /**\n   * The floating-point distance to the far clipping plane. zfar must be greater than znear\n   */\n  zfar: number;\n  /**\n   * The floating-point distance to the near clipping plane\n   */\n  znear: number;\n}\n\n/**\n * A perspective camera containing properties to create a perspective projection matrix\n */\nexport interface ICameraPerspective extends IProperty {\n  /**\n   * The floating-point aspect ratio of the field of view\n   */\n  aspectRatio?: number;\n  /**\n   * The floating-point vertical field of view in radians\n   */\n  yfov: number;\n  /**\n   * The floating-point distance to the far clipping plane\n   */\n  zfar?: number;\n  /**\n   * The floating-point distance to the near clipping plane\n   */\n  znear: number;\n}\n\n/**\n * A camera's projection.  A node can reference a camera to apply a transform to place the camera in the scene\n */\nexport interface ICamera extends IChildRootProperty {\n  /**\n   * An orthographic camera containing properties to create an orthographic projection matrix\n   */\n  orthographic?: ICameraOrthographic;\n  /**\n   * A perspective camera containing properties to create a perspective projection matrix\n   */\n  perspective?: ICameraPerspective;\n  /**\n   * Specifies if the camera uses a perspective or orthographic projection\n   */\n  type: CameraType;\n}\n\n/**\n * Image data used to create a texture. Image can be referenced by URI or bufferView index. mimeType is required in the latter case\n */\nexport interface IImage extends IChildRootProperty {\n  /**\n   * The uri of the image.  Relative paths are relative to the .gltf file.  Instead of referencing an external file, the uri can also be a data-uri.  The image format must be jpg or png\n   */\n  uri?: string;\n  /**\n   * The image's MIME type\n   */\n  mimeType?: ImageMimeType;\n  /**\n   * The index of the bufferView that contains the image. Use this instead of the image's uri property\n   */\n  bufferView?: number;\n}\n\n/**\n * Material Normal Texture Info\n */\nexport interface IMaterialNormalTextureInfo extends ITextureInfo {\n  /**\n   * The scalar multiplier applied to each normal vector of the normal texture\n   */\n  scale?: number;\n}\n\n/**\n * Material Occlusion Texture Info\n */\nexport interface IMaterialOcclusionTextureInfo extends ITextureInfo {\n  /**\n   * A scalar multiplier controlling the amount of occlusion applied\n   */\n  strength?: number;\n}\n\n/**\n * A set of parameter values that are used to define the metallic-roughness material model from Physically-Based Rendering (PBR) methodology\n */\nexport interface IMaterialPbrMetallicRoughness {\n  /**\n   * The material's base color factor\n   */\n  baseColorFactor?: number[];\n  /**\n   * The base color texture\n   */\n  baseColorTexture?: ITextureInfo;\n  /**\n   * The metalness of the material\n   */\n  metallicFactor?: number;\n  /**\n   * The roughness of the material\n   */\n  roughnessFactor?: number;\n  /**\n   * The metallic-roughness texture\n   */\n  metallicRoughnessTexture?: ITextureInfo;\n}\n\n/**\n * The material appearance of a primitive\n */\nexport interface IMaterial extends IChildRootProperty {\n  /**\n   * A set of parameter values that are used to define the metallic-roughness material model from Physically-Based Rendering (PBR) methodology. When not specified, all the default values of pbrMetallicRoughness apply\n   */\n  pbrMetallicRoughness?: IMaterialPbrMetallicRoughness;\n  /**\n   * The normal map texture\n   */\n  normalTexture?: IMaterialNormalTextureInfo;\n  /**\n   * The occlusion map texture\n   */\n  occlusionTexture?: IMaterialOcclusionTextureInfo;\n  /**\n   * The emissive map texture\n   */\n  emissiveTexture?: ITextureInfo;\n  /**\n   * The RGB components of the emissive color of the material. These values are linear. If an emissiveTexture is specified, this value is multiplied with the texel values\n   */\n  emissiveFactor?: number[];\n  /**\n   * The alpha rendering mode of the material\n   */\n  alphaMode?: MaterialAlphaMode;\n  /**\n   * The alpha cutoff value of the material\n   */\n  alphaCutoff?: number;\n  /**\n   * Specifies whether the material is double sided\n   */\n  doubleSided?: boolean;\n}\n\n/**\n * Geometry to be rendered with the given material\n */\nexport interface IMeshPrimitive extends IProperty {\n  /**\n   * A dictionary object, where each key corresponds to mesh attribute semantic and each value is the index of the accessor containing attribute's data\n   */\n  attributes: {\n    [name: string]: number;\n  };\n  /**\n   * The index of the accessor that contains the indices\n   */\n  indices?: number;\n  /**\n   * The index of the material to apply to this primitive when rendering\n   */\n  material?: number;\n  /**\n   * The type of primitives to render. All valid values correspond to WebGL enums\n   */\n  mode?: MeshTopology;\n  /**\n   * An array of Morph Targets, each  Morph Target is a dictionary mapping attributes (only POSITION, NORMAL, and TANGENT supported) to their deviations in the Morph Target\n   */\n  targets?: {\n    [name: string]: number;\n  }[];\n}\n\n/**\n * A set of primitives to be rendered.  A node can contain one mesh.  A node's transform places the mesh in the scene\n */\nexport interface IMesh extends IChildRootProperty {\n  /**\n   * An array of primitives, each defining geometry to be rendered with a material\n   */\n  primitives: IMeshPrimitive[];\n  /**\n   * Array of weights to be applied to the Morph Targets\n   */\n  weights?: number[];\n}\n\n/**\n * A node in the node hierarchy\n */\nexport interface INode extends IChildRootProperty {\n  /**\n   * The index of the camera referenced by this node\n   */\n  camera?: number;\n  /**\n   * The indices of this node's children\n   */\n  children?: number[];\n  /**\n   * The index of the skin referenced by this node\n   */\n  skin?: number;\n  /**\n   * A floating-point 4x4 transformation matrix stored in column-major order\n   */\n  matrix?: number[];\n  /**\n   * The index of the mesh in this node\n   */\n  mesh?: number;\n  /**\n   * The node's unit quaternion rotation in the order (x, y, z, w), where w is the scalar\n   */\n  rotation?: number[];\n  /**\n   * The node's non-uniform scale, given as the scaling factors along the x, y, and z axes\n   */\n  scale?: number[];\n  /**\n   * The node's translation along the x, y, and z axes\n   */\n  translation?: number[];\n  /**\n   * The weights of the instantiated Morph Target. Number of elements must match number of Morph Targets of used mesh\n   */\n  weights?: number[];\n}\n\n/**\n * Texture sampler properties for filtering and wrapping modes\n */\nexport interface ISampler extends IChildRootProperty {\n  /**\n   * Magnification filter.  Valid values correspond to WebGL enums: 9728 (NEAREST) and 9729 (LINEAR)\n   */\n  magFilter?: TextureMagFilter;\n  /**\n   * Minification filter.  All valid values correspond to WebGL enums\n   */\n  minFilter?: TextureMinFilter;\n  /**\n   * S (U) wrapping mode.  All valid values correspond to WebGL enums\n   */\n  wrapS?: TextureWrapMode;\n  /**\n   * T (V) wrapping mode.  All valid values correspond to WebGL enums\n   */\n  wrapT?: TextureWrapMode;\n}\n\n/**\n * The root nodes of a scene\n */\nexport interface IScene extends IChildRootProperty {\n  /**\n   * The indices of each root node\n   */\n  nodes?: number[];\n}\n\n/**\n * Joints and matrices defining a skin\n */\nexport interface ISkin extends IChildRootProperty {\n  /**\n   * The index of the accessor containing the floating-point 4x4 inverse-bind matrices.  The default is that each matrix is a 4x4 identity matrix, which implies that inverse-bind matrices were pre-applied\n   */\n  inverseBindMatrices?: number;\n  /**\n   * The index of the node used as a skeleton root. When undefined, joints transforms resolve to scene root\n   */\n  skeleton?: number;\n  /**\n   * Indices of skeleton nodes, used as joints in this skin.  The array length must be the same as the count property of the inverseBindMatrices accessor (when defined)\n   */\n  joints: number[];\n}\n\n/**\n * A texture and its sampler\n */\nexport interface ITexture extends IChildRootProperty {\n  /**\n   * The index of the sampler used by this texture. When undefined, a sampler with repeat wrapping and auto filtering should be used\n   */\n  sampler?: number;\n  /**\n   * The index of the image used by this texture\n   */\n  source?: number;\n}\n\n/**\n * Reference to a texture\n */\nexport interface ITextureInfo extends IProperty {\n  /**\n   * The index of the texture\n   */\n  index: number;\n  /**\n   * The set index of texture's TEXCOORD attribute used for texture coordinate mapping\n   */\n  texCoord?: number;\n}\n\n/**\n * The root object for a glTF asset\n */\nexport interface IGLTF extends IProperty {\n  /**\n   * An array of accessors. An accessor is a typed view into a bufferView\n   */\n  accessors?: IAccessor[];\n  /**\n   * An array of keyframe animations\n   */\n  animations?: IAnimation[];\n  /**\n   * Metadata about the glTF asset\n   */\n  asset: IAsset;\n  /**\n   * An array of buffers.  A buffer points to binary geometry, animation, or skins\n   */\n  buffers?: IBuffer[];\n  /**\n   * An array of bufferViews.  A bufferView is a view into a buffer generally representing a subset of the buffer\n   */\n  bufferViews?: IBufferView[];\n  /**\n   * An array of cameras\n   */\n  cameras?: ICamera[];\n  /**\n   * Names of glTF extensions used somewhere in this asset\n   */\n  extensionsUsed?: string[];\n  /**\n   * Names of glTF extensions required to properly load this asset\n   */\n  extensionsRequired?: string[];\n  /**\n   * An array of images.  An image defines data used to create a texture\n   */\n  images?: IImage[];\n  /**\n   * An array of materials.  A material defines the appearance of a primitive\n   */\n  materials?: IMaterial[];\n  /**\n   * An array of meshes.  A mesh is a set of primitives to be rendered\n   */\n  meshes?: IMesh[];\n  /**\n   * An array of nodes\n   */\n  nodes?: INode[];\n  /**\n   * An array of samplers.  A sampler contains properties for texture filtering and wrapping modes\n   */\n  samplers?: ISampler[];\n  /**\n   * The index of the default scene\n   */\n  scene?: number;\n  /**\n   * An array of scenes\n   */\n  scenes?: IScene[];\n  /**\n   * An array of skins.  A skin is defined by joints and matrices\n   */\n  skins?: ISkin[];\n  /**\n   * An array of textures\n   */\n  textures?: ITexture[];\n}\n\n/** glTF extensible owner schema. */\nexport type GLTFExtensionOwnerSchema = IMeshPrimitive | IMaterial | ITextureInfo | INode;\n\nexport interface ISamplerInfo {\n  filterMode?: TextureFilterMode;\n  wrapModeU?: EngineTextureWrapMode;\n  wrapModeV?: EngineTextureWrapMode;\n  mipmap?: boolean;\n}\n","import {\n  AnimationClip,\n  Animator,\n  AnimatorController,\n  Buffer,\n  Entity,\n  Material,\n  ModelMesh,\n  ResourceManager,\n  Skin,\n  Texture2D,\n  TypedArray\n} from \"@galacean/engine-core\";\nimport { BufferDataRestoreInfo, GLTFContentRestorer } from \"../../GLTFContentRestorer\";\nimport { GLTFParams } from \"../../GLTFLoader\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport type { IGLTF } from \"../GLTFSchema\";\nimport { GLTFParser } from \"./GLTFParser\";\n\n/**\n * @internal\n */\nexport class GLTFParserContext {\n  private static readonly _parsers: Record<string, GLTFParser> = {};\n\n  static addParser(parserType: GLTFParserType, parser: GLTFParser) {\n    this._parsers[parserType] = parser;\n  }\n\n  glTF: IGLTF;\n  accessorBufferCache: Record<string, BufferInfo> = {};\n  contentRestorer: GLTFContentRestorer;\n  buffers?: ArrayBuffer[];\n  needAnimatorController = false;\n\n  private _resourceCache = new Map<string, any>();\n  private _progress = {\n    taskDetail: {},\n    taskComplete: { loaded: 0, total: 0 }\n  };\n\n  /** @internal */\n  _setTaskCompleteProgress: (loaded: number, total: number) => void;\n  /** @internal */\n  _setTaskDetailProgress: (url: string, loaded: number, total: number) => void;\n\n  constructor(\n    public glTFResource: GLTFResource,\n    public resourceManager: ResourceManager,\n    public params: GLTFParams\n  ) {\n    this.contentRestorer = new GLTFContentRestorer(glTFResource);\n  }\n\n  get<T>(type: GLTFParserType.Entity, index: number): Entity;\n  get<T>(type: GLTFParserType.Entity): Entity[];\n  get<T>(type: GLTFParserType.Schema): Promise<T>;\n  get<T>(type: GLTFParserType.Validator): Promise<T>;\n  get<T>(type: GLTFParserType.AnimatorController): Promise<T>;\n  get<T>(type: GLTFParserType, index: number): Promise<T>;\n  get<T>(type: GLTFParserType): Promise<T[]>;\n  get<T>(type: GLTFParserType, index?: number): Entity | Entity[] | Promise<T> | Promise<T[]> {\n    const parser = GLTFParserContext._parsers[type];\n\n    if (!parser) {\n      return Promise.resolve(null);\n    }\n\n    const cache = this._resourceCache;\n    const cacheKey = index === undefined ? `${type}` : `${type}:${index}`;\n    let resource: Entity | Entity[] | Promise<T> | Promise<T[]> = cache.get(cacheKey);\n\n    if (resource) {\n      return resource;\n    }\n\n    const glTFSchemaKey = glTFSchemaMap[type];\n    const isSubAsset = !!glTFResourceMap[type];\n\n    if (glTFSchemaKey) {\n      const glTFItems = this.glTF[glTFSchemaKey];\n      if (glTFItems && (index === undefined || glTFItems[index])) {\n        if (index === undefined) {\n          resource =\n            type === GLTFParserType.Entity\n              ? <Entity[]>glTFItems.map((_, index) => this.get<T>(type, index))\n              : Promise.all<T>(glTFItems.map((_, index) => this.get<T>(type, index)));\n        } else {\n          resource = parser.parse(this, index);\n          isSubAsset && this._handleSubAsset(resource, type, index);\n        }\n      } else {\n        resource = Promise.resolve<T>(null);\n      }\n    } else {\n      resource = parser.parse(this, index);\n      isSubAsset && this._handleSubAsset(resource, type, index);\n    }\n\n    cache.set(cacheKey, resource);\n    return resource;\n  }\n\n  parse(): Promise<GLTFResource> {\n    const promise = this.get<IGLTF>(GLTFParserType.Schema).then((json) => {\n      this.glTF = json;\n      this.needAnimatorController = !!(json.skins || json.animations);\n\n      return Promise.all([\n        this.get<void>(GLTFParserType.Validator),\n        this.get<Texture2D>(GLTFParserType.Texture),\n        this.get<Material>(GLTFParserType.Material),\n        this.get<ModelMesh[]>(GLTFParserType.Mesh),\n        this.get<Skin>(GLTFParserType.Skin),\n        this.get<AnimationClip>(GLTFParserType.Animation),\n        this.get<AnimatorController>(GLTFParserType.AnimatorController),\n        this.get<Entity>(GLTFParserType.Scene)\n      ]).then(() => {\n        const glTFResource = this.glTFResource;\n        const animatorController = glTFResource.animatorController;\n\n        if (animatorController) {\n          const animator = glTFResource._defaultSceneRoot.addComponent(Animator);\n          animator.animatorController = animatorController;\n        }\n\n        this.resourceManager.addContentRestorer(this.contentRestorer);\n        return glTFResource;\n      });\n    });\n\n    this._addTaskCompletePromise(promise);\n    return promise;\n  }\n\n  /**\n   * @internal\n   */\n  _onTaskDetail = (url: string, loaded: number, total: number) => {\n    const detail = (this._progress.taskDetail[url] ||= {});\n    detail.loaded = loaded;\n    detail.total = total;\n\n    this._setTaskDetailProgress(url, loaded, total);\n  };\n\n  /**\n   * @internal\n   */\n  _addTaskCompletePromise(taskPromise: Promise<any>): void {\n    const task = this._progress.taskComplete;\n    task.total += 1;\n    taskPromise.then(() => {\n      this._setTaskCompleteProgress(++task.loaded, task.total);\n    });\n  }\n\n  private _handleSubAsset<T>(\n    resource: Entity | Entity[] | Promise<T> | Promise<T[]>,\n    type: GLTFParserType,\n    index?: number\n  ): void {\n    const glTFResourceKey = glTFResourceMap[type];\n\n    if (type === GLTFParserType.Entity) {\n      (this.glTFResource[glTFResourceKey] ||= [])[index] = <Entity>resource;\n    } else {\n      const url = this.glTFResource.url;\n\n      (<Promise<T>>resource).then((item: T) => {\n        if (index == undefined) {\n          this.glTFResource[glTFResourceKey] = item;\n        } else {\n          (this.glTFResource[glTFResourceKey] ||= [])[index] = item;\n        }\n\n        if (type === GLTFParserType.Mesh) {\n          for (let i = 0, length = (<ModelMesh[]>item).length; i < length; i++) {\n            const mesh = item[i] as ModelMesh;\n            // @ts-ignore\n            this.resourceManager._onSubAssetSuccess<ModelMesh>(url, `${glTFResourceKey}[${index}][${i}]`, mesh);\n          }\n        } else {\n          // @ts-ignore\n          this.resourceManager._onSubAssetSuccess<T>(\n            url,\n            `${glTFResourceKey}${index === undefined ? \"\" : `[${index}]`}`,\n            item\n          );\n\n          if (type === GLTFParserType.Scene && (this.glTF.scene ?? 0) === index) {\n            // @ts-ignore\n            this.resourceManager._onSubAssetSuccess<Entity>(url, `defaultSceneRoot`, item as Entity);\n          }\n        }\n      });\n    }\n  }\n}\n\n/**\n * @internal\n */\nexport class BufferInfo {\n  vertexBuffer: Buffer;\n  vertexBindingInfos: Record<number, number> = {};\n  restoreInfo: BufferDataRestoreInfo;\n\n  constructor(\n    public data: TypedArray,\n    public interleaved: boolean,\n    public stride: number\n  ) {}\n}\n\nexport enum GLTFParserType {\n  Schema,\n  Validator,\n  Scene,\n  Buffer,\n  BufferView,\n  Texture,\n  Material,\n  Mesh,\n  Entity,\n  Skin,\n  Animation,\n  AnimatorController\n}\n\nconst glTFSchemaMap = {\n  [GLTFParserType.Scene]: \"scenes\",\n  [GLTFParserType.Buffer]: \"buffers\",\n  [GLTFParserType.Texture]: \"textures\",\n  [GLTFParserType.Material]: \"materials\",\n  [GLTFParserType.Mesh]: \"meshes\",\n  [GLTFParserType.Entity]: \"nodes\",\n  [GLTFParserType.Skin]: \"skins\",\n  [GLTFParserType.Animation]: \"animations\",\n  [GLTFParserType.BufferView]: \"bufferViews\"\n};\n\nconst glTFResourceMap = {\n  [GLTFParserType.Scene]: \"_sceneRoots\",\n  [GLTFParserType.Texture]: \"textures\",\n  [GLTFParserType.Material]: \"materials\",\n  [GLTFParserType.Mesh]: \"meshes\",\n  [GLTFParserType.Entity]: \"entities\",\n  [GLTFParserType.Skin]: \"skins\",\n  [GLTFParserType.Animation]: \"animations\",\n  [GLTFParserType.AnimatorController]: \"animatorController\"\n};\n\nexport function registerGLTFParser(pipeline: GLTFParserType) {\n  return (Parser: new () => GLTFParser) => {\n    const parser = new Parser();\n    GLTFParserContext.addParser(pipeline, parser);\n  };\n}\n","import {\n  IndexFormat,\n  Texture2D,\n  TextureFilterMode,\n  TypedArray,\n  Utils,\n  VertexElementFormat\n} from \"@galacean/engine-core\";\nimport { Color, Vector2, Vector3, Vector4 } from \"@galacean/engine-math\";\nimport { BufferDataRestoreInfo, RestoreDataAccessor } from \"../GLTFContentRestorer\";\nimport {\n  AccessorComponentType,\n  AccessorType,\n  IAccessor,\n  IBufferView,\n  IGLTF,\n  ISampler,\n  ISamplerInfo,\n  TextureMagFilter,\n  TextureMinFilter\n} from \"./GLTFSchema\";\nimport { GLTFTextureParser } from \"./parser\";\nimport { BufferInfo, GLTFParserContext, GLTFParserType } from \"./parser/GLTFParserContext\";\n\n/**\n * @internal\n */\nexport class GLTFUtils {\n  public static floatBufferToVector2Array(buffer: Float32Array): Vector2[] {\n    const bufferLen = buffer.length;\n    const array = new Array<Vector2>(bufferLen / 2);\n    for (let i = 0; i < bufferLen; i += 2) {\n      array[i / 2] = new Vector2(buffer[i], buffer[i + 1]);\n    }\n    return array;\n  }\n\n  public static floatBufferToVector3Array(buffer: Float32Array): Vector3[] {\n    const bufferLen = buffer.length;\n    const array = new Array<Vector3>(bufferLen / 3);\n    for (let i = 0; i < bufferLen; i += 3) {\n      array[i / 3] = new Vector3(buffer[i], buffer[i + 1], buffer[i + 2]);\n    }\n    return array;\n  }\n\n  public static floatBufferToVector4Array(buffer: Float32Array): Vector4[] {\n    const bufferLen = buffer.length;\n    const array = new Array<Vector4>(bufferLen / 4);\n    for (let i = 0; i < bufferLen; i += 4) {\n      array[i / 4] = new Vector4(buffer[i], buffer[i + 1], buffer[i + 2], buffer[i + 3]);\n    }\n    return array;\n  }\n\n  public static floatBufferToColorArray(buffer: Float32Array, isColor3: boolean): Color[] {\n    const bufferLen = buffer.length;\n    const colors = new Array<Color>(bufferLen / (isColor3 ? 3 : 4));\n\n    if (isColor3) {\n      for (let i = 0; i < bufferLen; i += 3) {\n        colors[i / 3] = new Color(buffer[i], buffer[i + 1], buffer[i + 2], 1.0);\n      }\n    } else {\n      for (let i = 0; i < bufferLen; i += 4) {\n        colors[i / 4] = new Color(buffer[i], buffer[i + 1], buffer[i + 2], buffer[i + 3]);\n      }\n    }\n\n    return colors;\n  }\n\n  /**\n   * Get the number of bytes occupied by accessor type.\n   */\n  static getAccessorTypeSize(accessorType: AccessorType): number {\n    switch (accessorType) {\n      case AccessorType.SCALAR:\n        return 1;\n      case AccessorType.VEC2:\n        return 2;\n      case AccessorType.VEC3:\n        return 3;\n      case AccessorType.VEC4:\n        return 4;\n      case AccessorType.MAT2:\n        return 4;\n      case AccessorType.MAT3:\n        return 9;\n      case AccessorType.MAT4:\n        return 16;\n    }\n  }\n\n  /**\n   * Get the TypedArray corresponding to the component type.\n   */\n  static getComponentType(componentType: AccessorComponentType) {\n    switch (componentType) {\n      case AccessorComponentType.BYTE:\n        return Int8Array;\n      case AccessorComponentType.UNSIGNED_BYTE:\n        return Uint8Array;\n      case AccessorComponentType.SHORT:\n        return Int16Array;\n      case AccessorComponentType.UNSIGNED_SHORT:\n        return Uint16Array;\n      case AccessorComponentType.UNSIGNED_INT:\n        return Uint32Array;\n      case AccessorComponentType.FLOAT:\n        return Float32Array;\n    }\n  }\n\n  static getNormalizedComponentScale(componentType: AccessorComponentType) {\n    // Reference: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_mesh_quantization#encoding-quantized-data\n    switch (componentType) {\n      case AccessorComponentType.BYTE:\n        return 1 / 127;\n      case AccessorComponentType.UNSIGNED_BYTE:\n        return 1 / 255;\n      case AccessorComponentType.SHORT:\n        return 1 / 32767;\n      case AccessorComponentType.UNSIGNED_SHORT:\n        return 1 / 65535;\n      default:\n        throw new Error(\"Galacean.GLTFLoader: Unsupported normalized accessor component type.\");\n    }\n  }\n\n  static getAccessorBuffer(\n    context: GLTFParserContext,\n    bufferViews: IBufferView[],\n    accessor: IAccessor\n  ): Promise<BufferInfo> {\n    const componentType = accessor.componentType;\n    const TypedArray = GLTFUtils.getComponentType(componentType);\n    const dataElementSize = GLTFUtils.getAccessorTypeSize(accessor.type);\n    const dataElementBytes = TypedArray.BYTES_PER_ELEMENT;\n    const elementStride = dataElementSize * dataElementBytes;\n    const accessorCount = accessor.count;\n\n    let promise: Promise<BufferInfo>;\n\n    if (accessor.bufferView !== undefined) {\n      const bufferViewIndex = accessor.bufferView;\n      const bufferView = bufferViews[bufferViewIndex];\n\n      promise = context.get<Uint8Array>(GLTFParserType.BufferView, accessor.bufferView).then((bufferViewData) => {\n        const bufferIndex = bufferView.buffer;\n        const bufferByteOffset = bufferViewData.byteOffset ?? 0;\n        const byteOffset = accessor.byteOffset ?? 0;\n\n        const bufferStride = bufferView.byteStride;\n\n        let bufferInfo: BufferInfo;\n        // According to the glTF official documentation only byteStride not undefined is allowed\n        if (bufferStride !== undefined && bufferStride !== elementStride) {\n          const bufferSlice = Math.floor(byteOffset / bufferStride);\n          const bufferCacheKey = bufferViewIndex + \":\" + componentType + \":\" + bufferSlice + \":\" + accessorCount;\n          const accessorBufferCache = context.accessorBufferCache;\n          bufferInfo = accessorBufferCache[bufferCacheKey];\n          if (!bufferInfo) {\n            const offset = bufferByteOffset + bufferSlice * bufferStride;\n            const count = accessorCount * (bufferStride / dataElementBytes);\n            const data = new TypedArray(bufferViewData.buffer, offset, count);\n            accessorBufferCache[bufferCacheKey] = bufferInfo = new BufferInfo(data, true, bufferStride);\n            bufferInfo.restoreInfo = new BufferDataRestoreInfo(\n              new RestoreDataAccessor(bufferIndex, TypedArray, offset, count)\n            );\n          }\n        } else {\n          const offset = bufferByteOffset + byteOffset;\n          const count = accessorCount * dataElementSize;\n          const data = new TypedArray(bufferViewData.buffer, offset, count);\n          bufferInfo = new BufferInfo(data, false, elementStride);\n          bufferInfo.restoreInfo = new BufferDataRestoreInfo(\n            new RestoreDataAccessor(bufferIndex, TypedArray, offset, count)\n          );\n        }\n\n        return bufferInfo;\n      });\n    } else {\n      const count = accessorCount * dataElementSize;\n      const data = new TypedArray(count);\n      const bufferInfo = new BufferInfo(data, false, elementStride);\n      bufferInfo.restoreInfo = new BufferDataRestoreInfo(\n        new RestoreDataAccessor(undefined, TypedArray, undefined, count)\n      );\n\n      promise = Promise.resolve(bufferInfo);\n    }\n\n    return accessor.sparse\n      ? promise.then((bufferInfo) =>\n          GLTFUtils.processingSparseData(context, accessor, bufferInfo).then(() => bufferInfo)\n        )\n      : promise;\n  }\n\n  static bufferToVector3Array(\n    buffer: TypedArray,\n    byteOffset: number,\n    count: number,\n    normalized: boolean,\n    componentType: AccessorComponentType\n  ): Vector3[] {\n    const baseOffset = byteOffset / buffer.BYTES_PER_ELEMENT;\n    const stride = buffer.length / count;\n    const vertices = new Array<Vector3>(count);\n\n    const factor = normalized ? GLTFUtils.getNormalizedComponentScale(componentType) : 1;\n    for (let i = 0; i < count; i++) {\n      const index = baseOffset + i * stride;\n      vertices[i] = new Vector3(buffer[index] * factor, buffer[index + 1] * factor, buffer[index + 2] * factor);\n    }\n    return vertices;\n  }\n\n  static getBufferViewData(bufferView: IBufferView, buffers: ArrayBuffer[]): ArrayBuffer {\n    const { byteOffset = 0 } = bufferView;\n    const arrayBuffer = buffers[bufferView.buffer];\n\n    return arrayBuffer.slice(byteOffset, byteOffset + bufferView.byteLength);\n  }\n\n  /**\n   * Get accessor data.\n   */\n  static processingSparseData(context: GLTFParserContext, accessor: IAccessor, bufferInfo: BufferInfo) {\n    const { restoreInfo } = bufferInfo;\n    const bufferViews = context.glTF.bufferViews;\n    const accessorTypeSize = GLTFUtils.getAccessorTypeSize(accessor.type);\n    const TypedArray = GLTFUtils.getComponentType(accessor.componentType);\n    const data = bufferInfo.data.slice();\n\n    const { count, indices, values } = accessor.sparse;\n\n    const indicesBufferView = bufferViews[indices.bufferView];\n    const valuesBufferView = bufferViews[values.bufferView];\n\n    return Promise.all([\n      context.get<Uint8Array>(GLTFParserType.BufferView, indices.bufferView),\n      context.get<Uint8Array>(GLTFParserType.BufferView, values.bufferView)\n    ]).then(([indicesUint8Array, valuesUin8Array]) => {\n      const indicesByteOffset = (indices.byteOffset ?? 0) + (indicesUint8Array.byteOffset ?? 0);\n      const indicesByteLength = indicesUint8Array.byteLength;\n      const valuesByteOffset = (values.byteOffset ?? 0) + (valuesUin8Array.byteOffset ?? 0);\n      const valuesByteLength = valuesUin8Array.byteLength;\n\n      restoreInfo.typeSize = accessorTypeSize;\n      restoreInfo.sparseCount = count;\n\n      const IndexTypeArray = GLTFUtils.getComponentType(indices.componentType);\n\n      const indexLength = indicesByteLength / IndexTypeArray.BYTES_PER_ELEMENT;\n      const indicesArray = new IndexTypeArray(indicesUint8Array.buffer, indicesByteOffset, indexLength);\n      restoreInfo.sparseIndices = new RestoreDataAccessor(\n        indicesBufferView.buffer,\n        IndexTypeArray,\n        indicesByteOffset,\n        indexLength\n      );\n\n      const valueLength = valuesByteLength / TypedArray.BYTES_PER_ELEMENT;\n      const valuesArray = new TypedArray(valuesUin8Array.buffer, valuesByteOffset, valueLength);\n      restoreInfo.sparseValues = new RestoreDataAccessor(\n        valuesBufferView.buffer,\n        TypedArray,\n        valuesByteOffset,\n        valueLength\n      );\n\n      for (let i = 0; i < count; i++) {\n        const replaceIndex = indicesArray[i];\n        for (let j = 0; j < accessorTypeSize; j++) {\n          data[replaceIndex * accessorTypeSize + j] = valuesArray[i * accessorTypeSize + j];\n        }\n      }\n\n      bufferInfo.data = data;\n    });\n  }\n\n  static getIndexFormat(type: AccessorComponentType): IndexFormat {\n    switch (type) {\n      case AccessorComponentType.UNSIGNED_BYTE:\n        return IndexFormat.UInt8;\n      case AccessorComponentType.UNSIGNED_SHORT:\n        return IndexFormat.UInt16;\n      case AccessorComponentType.UNSIGNED_INT:\n        return IndexFormat.UInt32;\n    }\n  }\n\n  static getElementFormat(type: AccessorComponentType, size: number, normalized: boolean = false): VertexElementFormat {\n    if (type == AccessorComponentType.FLOAT) {\n      switch (size) {\n        case 1:\n          return VertexElementFormat.Float;\n        case 2:\n          return VertexElementFormat.Vector2;\n        case 3:\n          return VertexElementFormat.Vector3;\n        case 4:\n          return VertexElementFormat.Vector4;\n      }\n    }\n\n    if (type == AccessorComponentType.SHORT) {\n      switch (size) {\n        case 2:\n          return normalized ? VertexElementFormat.NormalizedShort2 : VertexElementFormat.Short2;\n        case 3:\n        case 4:\n          return normalized ? VertexElementFormat.NormalizedShort4 : VertexElementFormat.Short4;\n      }\n    }\n\n    if (type == AccessorComponentType.UNSIGNED_SHORT) {\n      switch (size) {\n        case 2:\n          return normalized ? VertexElementFormat.NormalizedUShort2 : VertexElementFormat.UShort2;\n        case 3:\n        case 4:\n          return normalized ? VertexElementFormat.NormalizedUShort4 : VertexElementFormat.UShort4;\n      }\n    }\n\n    if (type == AccessorComponentType.BYTE) {\n      switch (size) {\n        case 2:\n        case 3:\n        case 4:\n          return normalized ? VertexElementFormat.NormalizedByte4 : VertexElementFormat.Byte4;\n      }\n    }\n\n    if (type == AccessorComponentType.UNSIGNED_BYTE) {\n      switch (size) {\n        case 2:\n        case 3:\n        case 4:\n          return normalized ? VertexElementFormat.NormalizedUByte4 : VertexElementFormat.UByte4;\n      }\n    }\n  }\n\n  /**\n   * Load image buffer\n   */\n  static loadImageBuffer(imageBuffer: ArrayBuffer, type: string): Promise<HTMLImageElement> {\n    return new Promise((resolve, reject) => {\n      const blob = new window.Blob([imageBuffer], { type });\n      const img = new Image();\n      img.onerror = function () {\n        reject(new Error(\"Failed to load image buffer\"));\n      };\n      img.onload = function () {\n        // Call requestAnimationFrame to avoid iOS's bug.\n        requestAnimationFrame(() => {\n          resolve(img);\n          img.onload = null;\n          img.onerror = null;\n          img.onabort = null;\n        });\n      };\n      img.crossOrigin = \"anonymous\";\n      img.src = URL.createObjectURL(blob);\n    });\n  }\n\n  /**\n   * Parse the glb format.\n   */\n  static parseGLB(\n    context: GLTFParserContext,\n    originBuffer: ArrayBuffer\n  ): {\n    glTF?: IGLTF;\n    buffers?: ArrayBuffer[];\n    originBuffer?: ArrayBuffer;\n  } {\n    const UINT32_LENGTH = 4;\n    const GLB_HEADER_MAGIC = 0x46546c67; // 'glTF'\n    const GLB_HEADER_LENGTH = 12;\n    const GLB_CHUNK_TYPES = { JSON: 0x4e4f534a, BIN: 0x004e4942 };\n\n    const dataView = new DataView(originBuffer);\n\n    // Read header\n    const header = {\n      magic: dataView.getUint32(0, true),\n      version: dataView.getUint32(UINT32_LENGTH, true),\n      length: dataView.getUint32(2 * UINT32_LENGTH, true)\n    };\n\n    // Return the original buffer if it is not a glb\n    if (header.magic !== GLB_HEADER_MAGIC) {\n      return { originBuffer };\n    }\n\n    // Read main data\n    let chunkLength = dataView.getUint32(GLB_HEADER_LENGTH, true);\n    let chunkType = dataView.getUint32(GLB_HEADER_LENGTH + UINT32_LENGTH, true);\n\n    // Read glTF json\n    if (chunkType !== GLB_CHUNK_TYPES.JSON) {\n      console.error(\"Invalid glb chunk type. Expected 0x4E4F534A, found 0x\" + chunkType.toString(16));\n      return null;\n    }\n\n    const glTFData = new Uint8Array(originBuffer, GLB_HEADER_LENGTH + 2 * UINT32_LENGTH, chunkLength);\n    const glTF = <IGLTF>JSON.parse(Utils.decodeText(glTFData));\n\n    // Read all buffers\n    const buffers: ArrayBuffer[] = [];\n    let byteOffset = GLB_HEADER_LENGTH + 2 * UINT32_LENGTH + chunkLength;\n\n    const restoreGLBBufferSlice = context.contentRestorer.glbBufferSlices;\n    while (byteOffset < header.length) {\n      chunkLength = dataView.getUint32(byteOffset, true);\n      chunkType = dataView.getUint32(byteOffset + UINT32_LENGTH, true);\n\n      if (chunkType !== GLB_CHUNK_TYPES.BIN) {\n        console.error(\"Invalid glb chunk type. Expected 0x004E4942, found 0x\" + chunkType.toString(16));\n        return null;\n      }\n\n      const currentOffset = byteOffset + 2 * UINT32_LENGTH;\n      const buffer = originBuffer.slice(currentOffset, currentOffset + chunkLength);\n      buffers.push(buffer);\n      restoreGLBBufferSlice.push(new Vector2(currentOffset, chunkLength));\n\n      byteOffset += chunkLength + 2 * UINT32_LENGTH;\n    }\n\n    return {\n      glTF,\n      buffers\n    };\n  }\n\n  static parseSampler(texture: Texture2D, samplerInfo: ISamplerInfo): void {\n    const { filterMode, wrapModeU, wrapModeV } = samplerInfo;\n\n    if (filterMode !== undefined) {\n      texture.filterMode = filterMode;\n    }\n\n    if (wrapModeU !== undefined) {\n      texture.wrapModeU = wrapModeU;\n    }\n\n    if (wrapModeV !== undefined) {\n      texture.wrapModeV = wrapModeV;\n    }\n  }\n\n  static getSamplerInfo(sampler: ISampler): ISamplerInfo {\n    const { minFilter, magFilter, wrapS, wrapT } = sampler;\n    const info = <ISamplerInfo>{};\n\n    if (minFilter || magFilter) {\n      info.mipmap = minFilter >= TextureMinFilter.NEAREST_MIPMAP_NEAREST;\n\n      if (magFilter === TextureMagFilter.NEAREST) {\n        info.filterMode = TextureFilterMode.Point;\n      } else {\n        if (minFilter <= TextureMinFilter.LINEAR_MIPMAP_NEAREST) {\n          info.filterMode = TextureFilterMode.Bilinear;\n        } else {\n          info.filterMode = TextureFilterMode.Trilinear;\n        }\n      }\n    }\n\n    if (wrapS) {\n      info.wrapModeU = GLTFTextureParser._wrapMap[wrapS];\n    }\n\n    if (wrapT) {\n      info.wrapModeV = GLTFTextureParser._wrapMap[wrapT];\n    }\n\n    return info;\n  }\n}\n","import { Utils } from \"@galacean/engine-core\";\nimport { BufferReader } from \"../resource-deserialize/utils/BufferReader\";\n\nenum DFDTransferFunction {\n  linear = 1,\n  sRGB = 2\n}\n\nenum ColorModel {\n  ETC1S = 163,\n  UASTC = 166\n}\n\nexport enum SupercompressionScheme {\n  None,\n  BasisLZ,\n  Zstd,\n  ZLib\n}\n\n/** @internal */\nexport class KTX2Container {\n  vkFormat = 0;\n\n  typeSize = 1;\n\n  pixelWidth = 0;\n\n  pixelHeight = 0;\n\n  pixelDepth = 0;\n\n  layerCount = 0;\n\n  faceCount = 1;\n\n  supercompressionScheme: SupercompressionScheme = SupercompressionScheme.None;\n\n  levels: KTX2Level[] = [];\n\n  dataFormatDescriptor: KTX2DataFormatDescriptorBasicFormat;\n\n  keyValue: { [key: string]: string | Uint8Array } = {};\n\n  globalData: KTX2GlobalDataBasisLZ | null = null;\n\n  constructor(buffer: Uint8Array) {\n    this.parse(buffer);\n  }\n\n  get isSRGB() {\n    return this.dataFormatDescriptor.transferFunction === DFDTransferFunction.sRGB;\n  }\n\n  get isUASTC() {\n    return this.dataFormatDescriptor.colorModel === ColorModel.UASTC;\n  }\n\n  private parse(data: Uint8Array) {\n    const buffer = data.buffer;\n    const byteOffset = data.byteOffset;\n    const headerBufferReader = new BufferReader(data, 12);\n    this.vkFormat = headerBufferReader.nextUint32();\n    this.typeSize = headerBufferReader.nextUint32();\n    this.pixelWidth = headerBufferReader.nextUint32();\n    this.pixelHeight = headerBufferReader.nextUint32();\n\n    this.pixelDepth = headerBufferReader.nextUint32();\n    this.layerCount = headerBufferReader.nextUint32();\n    this.faceCount = headerBufferReader.nextUint32();\n\n    const levelCount = Math.max(1, headerBufferReader.nextUint32());\n    this.supercompressionScheme = headerBufferReader.nextUint32();\n\n    const dfdByteOffset = headerBufferReader.nextUint32();\n    const dfdByteLength = headerBufferReader.nextUint32();\n\n    const kvdByteOffset = headerBufferReader.nextUint32();\n    const kvdByteLength = headerBufferReader.nextUint32();\n\n    const sgdByteOffset = headerBufferReader.nextUint64();\n    const sgdByteLength = headerBufferReader.nextUint64();\n\n    // level index\n    const ktxLevels = new Array<KTX2Level>(levelCount);\n    const levelByteLength = levelCount * 3 * 8;\n    const levelReader = new BufferReader(data, headerBufferReader.offset, levelByteLength);\n    this.levels = ktxLevels;\n\n    for (let i = 0; i < levelCount; i++) {\n      ktxLevels[i] = {\n        levelData: new Uint8Array(buffer, byteOffset + levelReader.nextUint64(), levelReader.nextUint64()),\n        uncompressedByteLength: levelReader.nextUint64()\n      };\n    }\n    // Data Format Descriptor (DFD).\n    const dfdReader = new BufferReader(data, dfdByteOffset, dfdByteLength);\n\n    const dfd: KTX2DataFormatDescriptorBasicFormat = {\n      vendorId: dfdReader.skip(4 /* totalSize */).nextUint16(),\n      descriptorType: dfdReader.nextUint16(),\n      versionNumber: dfdReader.nextUint16(),\n      descriptorBlockSize: dfdReader.nextUint16(),\n      colorModel: dfdReader.nextUint8(),\n      colorPrimaries: dfdReader.nextUint8(),\n      transferFunction: dfdReader.nextUint8(),\n      flags: dfdReader.nextUint8(),\n      texelBlockDimension: [dfdReader.nextUint8(), dfdReader.nextUint8(), dfdReader.nextUint8(), dfdReader.nextUint8()],\n      bytesPlane: [\n        dfdReader.nextUint8(),\n        dfdReader.nextUint8(),\n        dfdReader.nextUint8(),\n        dfdReader.nextUint8(),\n        dfdReader.nextUint8(),\n        dfdReader.nextUint8(),\n        dfdReader.nextUint8(),\n        dfdReader.nextUint8()\n      ],\n      samples: []\n    };\n\n    this.dataFormatDescriptor = dfd;\n\n    const sampleStart = 6;\n    const sampleWords = 4;\n    const numSamples = (dfd.descriptorBlockSize / 4 - sampleStart) / sampleWords;\n\n    for (let i = 0; i < numSamples; i++) {\n      const sample = {\n        bitOffset: dfdReader.nextUint16(),\n        bitLength: dfdReader.nextUint8(),\n        channelType: dfdReader.nextUint8(),\n        samplePosition: [dfdReader.nextUint8(), dfdReader.nextUint8(), dfdReader.nextUint8(), dfdReader.nextUint8()],\n        sampleLower: -Infinity,\n        sampleUpper: Infinity\n      };\n\n      if (sample.channelType & 0x40) {\n        sample.sampleLower = dfdReader.nextInt32();\n        sample.sampleUpper = dfdReader.nextInt32();\n      } else {\n        sample.sampleLower = dfdReader.nextUint32();\n        sample.sampleUpper = dfdReader.nextUint32();\n      }\n\n      dfd.samples[i] = sample;\n    }\n\n    const kvdReader = new BufferReader(data, kvdByteOffset, kvdByteLength, true);\n\n    while (kvdReader.position < kvdByteLength) {\n      const keyValueByteLength = kvdReader.nextUint32();\n      const keyData = kvdReader.scan(keyValueByteLength);\n      const key = Utils.decodeText(keyData);\n\n      // 4-byte alignment.\n      const valueData = kvdReader.nextUint8Array(keyValueByteLength - keyData.byteLength - 1);\n      this.keyValue[key] = key.match(/^ktx/i) ? Utils.decodeText(valueData).replace(/^(.*)\\x00$/, \"$1\") : valueData;\n\n      const kvPadding = keyValueByteLength % 4 ? 4 - (keyValueByteLength % 4) : 0; // align(4)\n      // 4-byte alignment.\n      kvdReader.skip(kvPadding);\n    }\n\n    if (sgdByteLength <= 0) return this;\n\n    const sgdReader = new BufferReader(data, sgdByteOffset, sgdByteLength, true);\n\n    const endpointCount = sgdReader.nextUint16();\n    const selectorCount = sgdReader.nextUint16();\n    const endpointsByteLength = sgdReader.nextUint32();\n    const selectorsByteLength = sgdReader.nextUint32();\n    const tablesByteLength = sgdReader.nextUint32();\n    const extendedByteLength = sgdReader.nextUint32();\n\n    const imageDescs: KTX2GlobalDataBasisLZImageDesc[] = new Array(levelCount);\n\n    for (let i = 0; i < levelCount; i++) {\n      imageDescs[i] = {\n        imageFlags: sgdReader.nextUint32(),\n        rgbSliceByteOffset: sgdReader.nextUint32(),\n        rgbSliceByteLength: sgdReader.nextUint32(),\n        alphaSliceByteOffset: sgdReader.nextUint32(),\n        alphaSliceByteLength: sgdReader.nextUint32()\n      };\n    }\n\n    const endpointsByteOffset = sgdByteOffset + sgdReader.position;\n    const selectorsByteOffset = endpointsByteOffset + endpointsByteLength;\n    const tablesByteOffset = selectorsByteOffset + selectorsByteLength;\n    const extendedByteOffset = tablesByteOffset + tablesByteLength;\n\n    const endpointsData = new Uint8Array(buffer, byteOffset + endpointsByteOffset, endpointsByteLength);\n    const selectorsData = new Uint8Array(buffer, byteOffset + selectorsByteOffset, selectorsByteLength);\n    const tablesData = new Uint8Array(buffer, byteOffset + tablesByteOffset, tablesByteLength);\n    const extendedData = new Uint8Array(buffer, byteOffset + extendedByteOffset, extendedByteLength);\n\n    this.globalData = {\n      endpointCount,\n      selectorCount,\n      imageDescs,\n      endpointsData,\n      selectorsData,\n      tablesData,\n      extendedData\n    };\n  }\n}\n\ninterface KTX2Level {\n  levelData: Uint8Array;\n  uncompressedByteLength: number;\n}\n\ninterface KTX2DataFormatDescriptorBasicFormat {\n  vendorId: number;\n  descriptorType: number;\n  versionNumber: number;\n  /** @deprecated Inferred. */\n  descriptorBlockSize: number;\n  colorModel: number;\n  colorPrimaries: number;\n  transferFunction: number;\n  flags: number;\n  texelBlockDimension: [number, number, number, number];\n  bytesPlane: [number, number, number, number, number, number, number, number];\n  samples: KTX2BasicFormatSample[];\n}\n\ninterface KTX2BasicFormatSample {\n  bitOffset: number;\n  bitLength: number;\n  /** @deprecated Renamed to 'channelType'. */\n  channelID?: number;\n  channelType: number;\n  samplePosition: number[];\n  sampleLower: number;\n  sampleUpper: number;\n}\n\ninterface KTX2GlobalDataBasisLZ {\n  endpointCount: number;\n  selectorCount: number;\n  imageDescs: KTX2GlobalDataBasisLZImageDesc[];\n  endpointsData: Uint8Array;\n  selectorsData: Uint8Array;\n  tablesData: Uint8Array;\n  extendedData: Uint8Array;\n}\n\ninterface KTX2GlobalDataBasisLZImageDesc {\n  imageFlags: number;\n  rgbSliceByteOffset: number;\n  rgbSliceByteLength: number;\n  alphaSliceByteOffset: number;\n  alphaSliceByteLength: number;\n}\n","/**\n * KTX2 transcode target format.\n */\nexport enum KTX2TargetFormat {\n  /** RGB(A) compressed format, 128 bits per 4x4 pixel block. */\n  ASTC,\n  /** RGB(A) compressed format, 128 bits per 4x4 pixel block. */\n  BC7,\n  /** RGB(A) compressed format, 4 bits per pixel if no alpha channel, 8 bits per pixel if has alpha channel. */\n  BC1_BC3,\n  /** RGB(A) compressed format, 4 bits per pixel. */\n  PVRTC,\n  /** RGB(A) compressed format, 4 bits per pixel if no alpha channel, 8 bits per pixel if has alpha channel. */\n  ETC,\n  /** R format, 8 bits per pixel. */\n  R8,\n  /** RG format, 16 bits per pixel. */\n  R8G8,\n  /** RGBA format, 32 bits per pixel. */\n  R8G8B8A8\n}\n","/**\n * @internal\n * WorkerPool, T is is post message type, U is return type.\n */\nexport class WorkerPool<T = any, U = any> {\n  private _taskQueue: TaskItem<T, U>[] = [];\n  private _workerStatus: number = 0;\n  private _workerItems: WorkerItem<U>[];\n\n  /**\n   * Constructor of WorkerPool.\n   * @param limitedCount - worker limit count\n   * @param _workerCreator - creator of worker\n   */\n  constructor(\n    public readonly limitedCount = 4,\n    private readonly _workerCreator: () => Worker | Promise<Worker>\n  ) {\n    this._workerItems = new Array<WorkerItem<U>>(limitedCount);\n  }\n\n  prepareWorker() {\n    const count = this.limitedCount;\n    const promises = new Array<Promise<Worker>>(count);\n    for (let i = 0; i < count; i++) {\n      promises.push(this._initWorker(i));\n    }\n    return Promise.all(promises);\n  }\n\n  /**\n   * Post message to worker.\n   * @param message - Message which posted to worker\n   * @returns Return a promise of message\n   */\n  postMessage(message: T): Promise<U> {\n    return new Promise((resolve, reject) => {\n      const workerId = this._getIdleWorkerId();\n      if (workerId !== -1) {\n        this._workerStatus |= 1 << workerId;\n        const workerItems = this._workerItems;\n        Promise.resolve(workerItems[workerId] ?? this._initWorker(workerId))\n          .then(() => {\n            const workerItem = workerItems[workerId];\n            workerItem.resolve = resolve;\n            workerItem.reject = reject;\n            workerItem.worker.postMessage(message);\n          })\n          .catch(reject);\n      } else {\n        this._taskQueue.push({ resolve, reject, message });\n      }\n    });\n  }\n\n  /**\n   * Destroy the worker pool.\n   */\n  destroy(): void {\n    const workerItems = this._workerItems;\n    for (let i = 0, n = workerItems.length; i < n; i++) {\n      const workerItem = workerItems[i];\n      workerItem.worker.terminate();\n      workerItem.reject = null;\n      workerItem.resolve = null;\n    }\n    workerItems.length = 0;\n    this._taskQueue.length = 0;\n    this._workerStatus = 0;\n  }\n\n  private _initWorker(workerId: number): Promise<Worker> {\n    return Promise.resolve(this._workerCreator()).then((worker) => {\n      worker.addEventListener(\"message\", this._onMessage.bind(this, workerId));\n      this._workerItems[workerId] = { worker, resolve: null, reject: null };\n      return worker;\n    });\n  }\n\n  private _getIdleWorkerId() {\n    for (let i = 0, count = this.limitedCount; i < count; i++) {\n      if (!(this._workerStatus & (1 << i))) return i;\n    }\n    return -1;\n  }\n\n  private _onMessage(workerId: number, msg: MessageEvent<U>) {\n    // onerror of web worker can't catch error in promise\n    const error = (msg.data as ErrorMessageData).error;\n    if (error) {\n      this._workerItems[workerId].reject(error);\n    } else {\n      this._workerItems[workerId].resolve(msg.data);\n    }\n    this._nextTask(workerId);\n  }\n\n  private _nextTask(workerId: number) {\n    if (this._taskQueue.length) {\n      const taskItem = this._taskQueue.shift() as TaskItem<T, U>;\n      const workerItem = this._workerItems[workerId];\n      workerItem.resolve = taskItem.resolve;\n      workerItem.reject = taskItem.reject;\n      workerItem.worker.postMessage(taskItem.message);\n    } else {\n      this._workerStatus ^= 1 << workerId;\n    }\n  }\n}\n\ninterface ErrorMessageData {\n  error: unknown;\n}\n\ninterface WorkerItem<U> {\n  worker: Worker;\n  resolve: (item: U | PromiseLike<U>) => void;\n  reject: (reason?: any) => void;\n}\n\ninterface TaskItem<T, U> {\n  message: T;\n  transfer?: Array<Transferable>;\n  resolve: (item: U | PromiseLike<U>) => void;\n  reject: (reason?: any) => void;\n}\n","import { WorkerPool } from \"../WorkerPool\";\n\nexport abstract class AbstractTranscoder {\n  protected _transcodeWorkerPool: WorkerPool;\n  protected _initPromise: Promise<any>;\n\n  constructor(public readonly workerLimitCount: number) {}\n\n  init() {\n    if (!this._initPromise) {\n      this._initPromise = this._initTranscodeWorkerPool();\n    }\n    return this._initPromise;\n  }\n\n  destroy() {\n    this._transcodeWorkerPool.destroy();\n  }\n\n  protected abstract _initTranscodeWorkerPool(): Promise<any>;\n\n  protected _createTranscodePool(workerURL: string, wasmBuffer: ArrayBuffer) {\n    this._transcodeWorkerPool = new WorkerPool(this.workerLimitCount, () => {\n      return new Promise<Worker>((resolve, reject) => {\n        const worker = new Worker(workerURL);\n        const msg: InitMessage = {\n          type: \"init\",\n          transcoderWasm: wasmBuffer\n        };\n        function onMessage(e: MessageEvent<{ error?: Error }>) {\n          if (e.data.error) {\n            reject(e.data.error);\n          } else {\n            resolve(worker);\n          }\n        }\n        worker.addEventListener(\"message\", onMessage);\n        worker.postMessage(msg);\n      });\n    });\n    return this._transcodeWorkerPool.prepareWorker();\n  }\n}\n\ntype MessageType = \"init\" | \"transcode\";\n\nexport interface BaseMessage {\n  type: MessageType;\n}\n\nexport interface InitMessage extends BaseMessage {\n  type: \"init\";\n  transcoderWasm: ArrayBuffer;\n}\n\nexport interface BinomialTranscodeMessage extends BaseMessage {\n  type: \"transcode\";\n  format: number;\n  buffer: Uint8Array;\n}\n\nexport type IBinomialMessage = InitMessage | BinomialTranscodeMessage;\n\nexport type TranscodeResult = {\n  width: number;\n  height: number;\n  hasAlpha: boolean;\n  format: number;\n  faces: Array<{ data: Uint8Array; width: number; height: number }>[];\n  faceCount: number;\n};\n\nexport type TranscodeResponse = {\n  id: number;\n  type: \"transcoded\";\n} & TranscodeResult;\n\nexport interface EncodedData {\n  buffer: Uint8Array;\n  levelWidth: number;\n  levelHeight: number;\n  uncompressedByteLength: number;\n}\n\nexport interface KhronosTranscoderMessage extends BaseMessage {\n  type: \"transcode\";\n  format: number;\n  needZstd: boolean;\n  data: EncodedData[][];\n}\n\nexport type IKhronosMessageMessage = InitMessage | KhronosTranscoderMessage;\n","import { IBinomialMessage, TranscodeResult } from \"./AbstractTranscoder\";\n\n/** @internal */\nexport function TranscodeWorkerCode() {\n  let initPromise: any;\n\n  const init = function (wasmBinary?) {\n    if (!initPromise) {\n      initPromise = new Promise((resolve, reject) => {\n        const BasisModule = {\n          wasmBinary,\n          onRuntimeInitialized: () => resolve(BasisModule),\n          onAbort: reject\n        };\n        self[\"BASIS\"](BasisModule);\n      }).then((BasisModule: any) => {\n        BasisModule.initializeBasis();\n        return BasisModule.KTX2File;\n      });\n    }\n    return initPromise;\n  };\n\n  self.onmessage = function onmessage(event: MessageEvent<IBinomialMessage>) {\n    const message = event.data;\n\n    switch (message.type) {\n      case \"init\":\n        init(message.transcoderWasm)\n          .then(() => {\n            self.postMessage(\"init-completed\");\n          })\n          .catch((e) => self.postMessage({ error: e }));\n        break;\n      case \"transcode\":\n        init()\n          .then((KTX2File) => {\n            const result = transcode(message.buffer, message.format, KTX2File);\n            // @ts-ignore\n            result.type = \"transcoded\";\n            self.postMessage(result);\n          })\n          .catch((e) => self.postMessage({ error: e }));\n        break;\n    }\n  };\n}\n\nexport const _init = function init() {\n  let initPromise: any;\n  return function init(wasmBinary?: ArrayBuffer) {\n    if (!initPromise) {\n      initPromise = new Promise((resolve, reject) => {\n        const BasisModule = {\n          wasmBinary,\n          onRuntimeInitialized: () => resolve(BasisModule),\n          onAbort: reject\n        };\n        self[\"BASIS\"](BasisModule);\n      }).then((BasisModule: any) => {\n        BasisModule.initializeBasis();\n        return BasisModule.KTX2File;\n      });\n    }\n    return initPromise;\n  };\n};\n\nexport const init = _init();\n\nexport function transcode(buffer: Uint8Array, targetFormat: any, KTX2File: any): TranscodeResult {\n  enum BasisFormat {\n    ETC1 = 0,\n    ETC2 = 1,\n    BC1 = 2,\n    BC3 = 3,\n    BC4 = 4,\n    BC5 = 5,\n    BC7 = 7,\n    PVRTC1_4_RGB = 8,\n    PVRTC1_4_RGBA = 9,\n    ASTC_4x4 = 10,\n    RGBA8 = 13\n  }\n\n  enum TargetFormat {\n    ASTC,\n    BC7,\n    BC1_BC3,\n    PVRTC,\n    ETC,\n    R8,\n    RG8,\n    RGBA8\n  }\n\n  function getTranscodeFormatFromTarget(target: TargetFormat, hasAlpha: boolean) {\n    switch (target) {\n      case TargetFormat.BC1_BC3:\n        return hasAlpha ? BasisFormat.BC3 : BasisFormat.BC1;\n      case TargetFormat.ETC:\n        return hasAlpha ? BasisFormat.ETC2 : BasisFormat.ETC1;\n      case TargetFormat.PVRTC:\n        return hasAlpha ? BasisFormat.PVRTC1_4_RGBA : BasisFormat.PVRTC1_4_RGB;\n      case TargetFormat.RGBA8:\n        return BasisFormat.RGBA8;\n      case TargetFormat.ASTC:\n        return BasisFormat.ASTC_4x4;\n      case TargetFormat.BC7:\n        return BasisFormat.BC7;\n    }\n  }\n\n  function concat(arrays: Uint8Array[]) {\n    if (arrays.length === 1) return arrays[0];\n    let totalByteLength = 0;\n\n    for (let i = 0; i < arrays.length; i++) {\n      totalByteLength += arrays[i].byteLength;\n    }\n\n    const result = new Uint8Array(totalByteLength);\n\n    let byteOffset = 0;\n\n    for (let i = 0; i < arrays.length; i++) {\n      result.set(arrays[i], byteOffset);\n      byteOffset += arrays[i].byteLength;\n    }\n\n    return result;\n  }\n  const ktx2File = new KTX2File(new Uint8Array(buffer));\n\n  function cleanup() {\n    ktx2File.close();\n    ktx2File.delete();\n  }\n\n  if (!ktx2File.isValid()) {\n    cleanup();\n    throw new Error(\"Invalid or unsupported .ktx2 file\");\n  }\n\n  if (!ktx2File.startTranscoding()) {\n    cleanup();\n    throw new Error(\"KTX2 startTranscoding failed\");\n  }\n\n  let width: number = ktx2File.getWidth();\n  let height: number = ktx2File.getHeight();\n  const layerCount = ktx2File.getLayers() || 1;\n  const levelCount = ktx2File.getLevels();\n  const hasAlpha = ktx2File.getHasAlpha();\n  const faceCount = ktx2File.getFaces();\n  const format = getTranscodeFormatFromTarget(targetFormat, hasAlpha);\n  const faces = new Array(faceCount);\n  const isBC = format === BasisFormat.BC1 || format === BasisFormat.BC3 || format === BasisFormat.BC7;\n\n  for (let face = 0; face < faceCount; face++) {\n    const mipmaps = new Array(levelCount);\n    for (let mip = 0; mip < levelCount; mip++) {\n      const layerMips: Uint8Array[] = new Array(layerCount);\n      let mipWidth: number, mipHeight: number;\n\n      for (let layer = 0; layer < layerCount; layer++) {\n        const levelInfo = ktx2File.getImageLevelInfo(mip, layer, face);\n        // see: https://github.com/KhronosGroup/KTX-Software/issues/254\n        if (isBC && mip === 0 && (width !== levelInfo.width || height !== levelInfo.height)) {\n          width = mipWidth = levelInfo.width;\n          height = mipHeight = levelInfo.height;\n          console.warn(\n            `KTX2 transcode to BC will resize to width: ${width}, height: ${height}. You'd better use an image whose size if multiple of 4.`\n          );\n        } else {\n          mipWidth = levelInfo.origWidth;\n          mipHeight = levelInfo.origHeight;\n        }\n\n        const dst = new Uint8Array(ktx2File.getImageTranscodedSizeInBytes(mip, layer, 0, format));\n\n        const status = ktx2File.transcodeImage(dst, mip, layer, face, format, 0, -1, -1);\n\n        if (!status) {\n          cleanup();\n          throw new Error(\"transcodeImage failed.\");\n        }\n        layerMips[layer] = dst;\n      }\n\n      mipmaps[mip] = {\n        data: concat(layerMips),\n        width: mipWidth,\n        height: mipHeight\n      };\n    }\n    faces[face] = mipmaps;\n  }\n\n  cleanup();\n\n  return {\n    faces,\n    width,\n    height,\n    hasAlpha,\n    faceCount: faceCount,\n    format: format!\n  };\n}\n","import { KTX2TargetFormat } from \"../KTX2TargetFormat\";\nimport { AbstractTranscoder, TranscodeResult } from \"./AbstractTranscoder\";\nimport { TranscodeWorkerCode, init, transcode, _init } from \"./BinomialLLCWorkerCode\";\n\n/** @internal */\nexport class BinomialLLCTranscoder extends AbstractTranscoder {\n  constructor(workerLimitCount: number) {\n    super(workerLimitCount);\n  }\n\n  _initTranscodeWorkerPool() {\n    return Promise.all([\n      fetch(\"https://mdn.alipayobjects.com/rms/afts/file/A*nG8SR6vCgXgAAAAAAAAAAAAAARQnAQ/basis_transcoder.js\").then(\n        (res) => res.text()\n      ),\n      fetch(\"https://mdn.alipayobjects.com/rms/afts/file/A*qEUfQ7317KsAAAAAAAAAAAAAARQnAQ/basis_transcoder.wasm\").then(\n        (res) => res.arrayBuffer()\n      )\n    ]).then(([jsCode, wasmBuffer]) => {\n      if (this.workerLimitCount === 0) {\n        return new Promise<any>((resolve, reject) => {\n          const scriptDom = document.createElement(\"script\");\n          scriptDom.src = URL.createObjectURL(new Blob([jsCode], { type: \"application/javascript\" }));\n          document.body.appendChild(scriptDom);\n          scriptDom.onload = () => {\n            init(wasmBuffer).then(() => {\n              resolve(null);\n            });\n          };\n          scriptDom.onerror = () => {\n            reject();\n          };\n        });\n      } else {\n        const funcCode = TranscodeWorkerCode.toString();\n        const transcodeString = funcCode.substring(funcCode.indexOf(\"{\"), funcCode.lastIndexOf(\"}\") + 1);\n\n        const workerCode = `\n        ${jsCode}\n        ${transcode.toString()}\n        ${transcodeString}\n        `;\n\n        const workerURL = URL.createObjectURL(new Blob([workerCode], { type: \"application/javascript\" }));\n\n        return this._createTranscodePool(workerURL, wasmBuffer);\n      }\n    });\n  }\n\n  transcode(buffer: Uint8Array, format: KTX2TargetFormat): Promise<TranscodeResult> {\n    if (this.workerLimitCount === 0) {\n      return init().then((KTX2File) => transcode(buffer, format, KTX2File));\n    } else {\n      return this._transcodeWorkerPool.postMessage({\n        buffer,\n        format,\n        type: \"transcode\"\n      });\n    }\n  }\n}\n","import { EncodedData, IKhronosMessageMessage } from \"./AbstractTranscoder\";\n\ninterface WasmModule extends WebAssembly.Exports {\n  memory: WebAssembly.Memory;\n  transcode: (nBlocks: number) => number;\n}\n\ninterface DecoderExports {\n  memory: Uint8Array;\n\n  ZSTD_findDecompressedSize: (compressedPtr: number, compressedSize: number) => number;\n  ZSTD_decompress: (\n    uncompressedPtr: number,\n    uncompressedSize: number,\n    compressedPtr: number,\n    compressedSize: number\n  ) => number;\n  malloc: (ptr: number) => number;\n  free: (ptr: number) => void;\n}\n\nexport function TranscodeWorkerCode() {\n  let wasmPromise: Promise<WasmModule>;\n  /**\n   * ZSTD (Zstandard) decoder.\n   */\n  class ZSTDDecoder {\n    public static heap: Uint8Array;\n    public static IMPORT_OBJECT = {\n      env: {\n        emscripten_notify_memory_growth: function (): void {\n          ZSTDDecoder.heap = new Uint8Array(ZSTDDecoder.instance.exports.memory.buffer);\n        }\n      }\n    };\n    public static instance: { exports: DecoderExports };\n    public static WasmModuleURL =\n      \"https://mdn.alipayobjects.com/rms/afts/file/A*awNJR7KqIAEAAAAAAAAAAAAAARQnAQ/zstddec.wasm\";\n\n    public _initPromise: Promise<any>;\n\n    init(): Promise<void> {\n      if (!this._initPromise) {\n        this._initPromise = fetch(ZSTDDecoder.WasmModuleURL)\n          .then((response) => {\n            if (response.ok) {\n              return response.arrayBuffer();\n            }\n            throw new Error(\n              `Could not fetch the wasm component for the Zstandard decompression lib: ${response.status} - ${response.statusText}`\n            );\n          })\n          .then((arrayBuffer) => WebAssembly.instantiate(arrayBuffer, ZSTDDecoder.IMPORT_OBJECT))\n          .then(this._init);\n      }\n      return this._initPromise;\n    }\n\n    _init(result: WebAssembly.WebAssemblyInstantiatedSource): void {\n      ZSTDDecoder.instance = result.instance as unknown as {\n        exports: DecoderExports;\n      };\n\n      ZSTDDecoder.IMPORT_OBJECT.env.emscripten_notify_memory_growth(); // initialize heap.\n    }\n\n    decode(array: Uint8Array, uncompressedSize = 0): Uint8Array {\n      if (!ZSTDDecoder.instance) {\n        throw new Error(`ZSTDDecoder: Await .init() before decoding.`);\n      }\n\n      const exports = ZSTDDecoder.instance.exports;\n\n      // Write compressed data into WASM memory\n      const compressedSize = array.byteLength;\n      const compressedPtr = exports.malloc(compressedSize);\n      ZSTDDecoder.heap.set(array, compressedPtr);\n\n      // Decompress into WASM memory\n      uncompressedSize = uncompressedSize || Number(exports.ZSTD_findDecompressedSize(compressedPtr, compressedSize));\n      const uncompressedPtr = exports.malloc(uncompressedSize);\n      const actualSize = exports.ZSTD_decompress(uncompressedPtr, uncompressedSize, compressedPtr, compressedSize);\n\n      // Read decompressed data and free WASM memory\n      const dec = ZSTDDecoder.heap.slice(uncompressedPtr, uncompressedPtr + actualSize);\n      exports.free(compressedPtr);\n      exports.free(uncompressedPtr);\n\n      return dec;\n    }\n  }\n  function transcodeASTCAndBC7(wasmTranscoder: WasmModule, compressedData: Uint8Array, width: number, height: number) {\n    const nBlocks = ((width + 3) >> 2) * ((height + 3) >> 2);\n\n    const texMemoryPages = (nBlocks * 16 + 65535) >> 16;\n    const memory = wasmTranscoder.memory;\n    const delta = texMemoryPages + 1 - (memory.buffer.byteLength >> 16);\n    if (delta > 0) memory.grow(delta);\n\n    const textureView = new Uint8Array(memory.buffer, 65536, nBlocks * 16);\n    textureView.set(compressedData);\n    return wasmTranscoder.transcode(nBlocks) === 0 ? textureView : null;\n  }\n\n  function initWasm(buffer: ArrayBuffer): Promise<WasmModule> {\n    wasmPromise = WebAssembly.instantiate(buffer, {\n      env: { memory: new WebAssembly.Memory({ initial: 16 }) }\n    }).then((moduleWrapper) => <WasmModule>moduleWrapper.instance.exports);\n    return wasmPromise;\n  }\n\n  const zstdDecoder = new ZSTDDecoder();\n\n  function transcode(data: EncodedData[][], needZstd: boolean, wasmModule: WasmModule) {\n    const faceCount = data.length;\n    const result = new Array<\n      {\n        width: number;\n        height: number;\n        data: Uint8Array;\n      }[]\n    >(faceCount);\n\n    let promise = Promise.resolve();\n    if (needZstd) {\n      zstdDecoder.init();\n      promise = zstdDecoder._initPromise;\n    }\n\n    return promise.then(() => {\n      for (let faceIndex = 0; faceIndex < faceCount; faceIndex++) {\n        const mipmapCount = data[faceIndex].length;\n        const decodedData = new Array<{\n          width: number;\n          height: number;\n          data: Uint8Array;\n        }>(mipmapCount);\n\n        for (let i = 0; i < mipmapCount; i++) {\n          let { buffer, levelHeight, levelWidth, uncompressedByteLength } = data[faceIndex][i];\n          if (needZstd) buffer = zstdDecoder.decode(buffer.slice(), uncompressedByteLength);\n\n          const faceByteLength = buffer.byteLength / faceCount;\n          const originByteOffset = buffer.byteOffset;\n          const decodedBuffer = transcodeASTCAndBC7(\n            wasmModule,\n            new Uint8Array(buffer.buffer, originByteOffset + faceIndex * faceByteLength, faceByteLength),\n            levelWidth,\n            levelHeight\n          );\n          if (decodedBuffer) {\n            decodedData[i] = {\n              // use wasm memory as buffer, should slice to avoid duplicate\n              data: decodedBuffer.slice(),\n              width: levelWidth,\n              height: levelHeight\n            };\n          } else {\n            throw \"buffer decoded error\";\n          }\n        }\n        result[faceIndex] = decodedData;\n      }\n      return result;\n    });\n  }\n\n  self.onmessage = function onmessage(event: MessageEvent<IKhronosMessageMessage>) {\n    const message = event.data;\n    switch (message.type) {\n      case \"init\":\n        initWasm(message.transcoderWasm)\n          .then(() => {\n            self.postMessage(\"init-completed\");\n          })\n          .catch((e) => {\n            self.postMessage({ error: e });\n          });\n        break;\n      case \"transcode\":\n        wasmPromise.then((module) => {\n          transcode(message.data, message.needZstd, module)\n            .then((decodedData) => {\n              self.postMessage(decodedData);\n            })\n            .catch((e) => self.postMessage({ error: e }));\n        });\n        break;\n    }\n  };\n}\n","import { KTX2Container, SupercompressionScheme } from \"../KTX2Container\";\nimport { KTX2TargetFormat } from \"../KTX2TargetFormat\";\nimport { AbstractTranscoder, EncodedData, KhronosTranscoderMessage, TranscodeResult } from \"./AbstractTranscoder\";\nimport { TranscodeWorkerCode } from \"./KhronosWorkerCode\";\n\n/** @internal */\nexport class KhronosTranscoder extends AbstractTranscoder {\n  public static transcoderMap = {\n    // TODO: support bc7\n    [KTX2TargetFormat.ASTC]:\n      \"https://mdn.alipayobjects.com/rms/afts/file/A*0jiKRK6D1-kAAAAAAAAAAAAAARQnAQ/uastc_astc.wasm\"\n  };\n\n  constructor(\n    workerLimitCount: number,\n    public readonly type: KTX2TargetFormat\n  ) {\n    super(workerLimitCount);\n  }\n\n  _initTranscodeWorkerPool() {\n    return fetch(KhronosTranscoder.transcoderMap[this.type])\n      .then((res) => res.arrayBuffer())\n      .then((wasmBuffer) => {\n        const funcCode = TranscodeWorkerCode.toString();\n        const workerURL = URL.createObjectURL(\n          new Blob([funcCode.substring(funcCode.indexOf(\"{\") + 1, funcCode.lastIndexOf(\"}\"))], {\n            type: \"application/javascript\"\n          })\n        );\n\n        return this._createTranscodePool(workerURL, wasmBuffer);\n      });\n  }\n\n  transcode(ktx2Container: KTX2Container): Promise<TranscodeResult> {\n    const needZstd = ktx2Container.supercompressionScheme === SupercompressionScheme.Zstd;\n\n    const levelCount = ktx2Container.levels.length;\n    const faceCount = ktx2Container.faceCount;\n\n    const decodedData: any = {\n      width: ktx2Container.pixelWidth,\n      height: ktx2Container.pixelHeight,\n      mipmaps: null\n    };\n\n    const postMessageData: KhronosTranscoderMessage = {\n      type: \"transcode\",\n      format: 0,\n      needZstd,\n      data: new Array<EncodedData[]>(faceCount)\n    };\n\n    const messageData = postMessageData.data;\n\n    for (let faceIndex = 0; faceIndex < faceCount; faceIndex++) {\n      const mipmapData = new Array(levelCount);\n      for (let mipmapIndex = 0; mipmapIndex < levelCount; mipmapIndex++) {\n        const level = ktx2Container.levels[mipmapIndex];\n        const levelWidth = Math.floor(ktx2Container.pixelWidth / (1 << mipmapIndex)) || 1;\n        const levelHeight = Math.floor(ktx2Container.pixelHeight / (1 << mipmapIndex)) || 1;\n        const originBuffer = level.levelData.buffer;\n        const originOffset = level.levelData.byteOffset;\n        const originByteLength = level.levelData.byteLength;\n\n        mipmapData[mipmapIndex] = {\n          buffer: new Uint8Array(originBuffer, originOffset, originByteLength),\n          levelWidth,\n          levelHeight,\n          uncompressedByteLength: level.uncompressedByteLength\n        };\n      }\n      messageData[faceIndex] = mipmapData;\n    }\n\n    return this._transcodeWorkerPool.postMessage(postMessageData).then((data) => {\n      decodedData.faces = data;\n      decodedData.hasAlpha = true;\n      return decodedData;\n    });\n  }\n}\n","import {\n  AssetPromise,\n  AssetType,\n  Engine,\n  EngineConfiguration,\n  GLCapabilityType,\n  LoadItem,\n  Loader,\n  Logger,\n  ResourceManager,\n  Texture2D,\n  TextureCube,\n  TextureCubeFace,\n  TextureFormat,\n  resourceLoader\n} from \"@galacean/engine-core\";\nimport { MathUtil } from \"@galacean/engine-math\";\nimport { KTX2Container } from \"./KTX2Container\";\nimport { KTX2TargetFormat } from \"./KTX2TargetFormat\";\nimport { TranscodeResult } from \"./transcoder/AbstractTranscoder\";\nimport { BinomialLLCTranscoder } from \"./transcoder/BinomialLLCTranscoder\";\nimport { KhronosTranscoder } from \"./transcoder/KhronosTranscoder\";\n\n@resourceLoader(AssetType.KTX2, [\"ktx2\"])\nexport class KTX2Loader extends Loader<Texture2D | TextureCube> {\n  private static _isBinomialInit: boolean = false;\n  private static _binomialLLCTranscoder: BinomialLLCTranscoder;\n  private static _khronosTranscoder: KhronosTranscoder;\n  private static _priorityFormats = {\n    etc1s: [\n      KTX2TargetFormat.ETC,\n      KTX2TargetFormat.BC7,\n      KTX2TargetFormat.ASTC,\n      KTX2TargetFormat.BC1_BC3,\n      KTX2TargetFormat.PVRTC\n    ],\n    uastc: [\n      KTX2TargetFormat.ASTC,\n      KTX2TargetFormat.BC7,\n      KTX2TargetFormat.ETC,\n      KTX2TargetFormat.BC1_BC3,\n      KTX2TargetFormat.PVRTC\n    ]\n  };\n  private static _supportedMap = {\n    [KTX2TargetFormat.ASTC]: [GLCapabilityType.astc],\n    [KTX2TargetFormat.ETC]: [GLCapabilityType.etc],\n    [KTX2TargetFormat.BC7]: [GLCapabilityType.bptc],\n    [KTX2TargetFormat.BC1_BC3]: [GLCapabilityType.s3tc],\n    [KTX2TargetFormat.PVRTC]: [GLCapabilityType.pvrtc, GLCapabilityType.pvrtc_webkit]\n  };\n\n  /**\n   * Release ktx2 transcoder worker.\n   * @remarks If use loader after releasing, we should release again.\n   */\n  static release(): void {\n    if (this._binomialLLCTranscoder) this._binomialLLCTranscoder.destroy();\n    if (this._khronosTranscoder) this._khronosTranscoder.destroy();\n    this._binomialLLCTranscoder = null;\n    this._khronosTranscoder = null;\n    this._isBinomialInit = false;\n  }\n\n  /** @internal */\n  static _parseBuffer(buffer: Uint8Array, engine: Engine, params?: KTX2Params) {\n    const ktx2Container = new KTX2Container(buffer);\n    const formatPriorities =\n      params?.priorityFormats ?? KTX2Loader._priorityFormats[ktx2Container.isUASTC ? \"uastc\" : \"etc1s\"];\n    const targetFormat = KTX2Loader._decideTargetFormat(engine, ktx2Container, formatPriorities);\n    let transcodeResultPromise: Promise<TranscodeResult>;\n    if (KTX2Loader._isBinomialInit || !KhronosTranscoder.transcoderMap[targetFormat] || !ktx2Container.isUASTC) {\n      const binomialLLCWorker = KTX2Loader._getBinomialLLCTranscoder();\n      transcodeResultPromise = binomialLLCWorker.init().then(() => binomialLLCWorker.transcode(buffer, targetFormat));\n    } else {\n      const khronosWorker = KTX2Loader._getKhronosTranscoder();\n      transcodeResultPromise = khronosWorker.init().then(() => khronosWorker.transcode(ktx2Container));\n    }\n    return transcodeResultPromise.then((result) => {\n      return { engine, result, targetFormat, params: ktx2Container.keyValue[\"GalaceanTextureParams\"] as Uint8Array };\n    });\n  }\n\n  /** @internal */\n  static _createTextureByBuffer(\n    engine: Engine,\n    transcodeResult: TranscodeResult,\n    targetFormat: KTX2TargetFormat,\n    params?: Uint8Array\n  ): Texture2D | TextureCube {\n    const { width, height, faces } = transcodeResult;\n    const faceCount = faces.length;\n    const mipmaps = faces[0];\n    const mipmap = mipmaps.length > 1;\n    const engineFormat = this._getEngineTextureFormat(targetFormat, transcodeResult);\n    let texture: Texture2D | TextureCube;\n    if (faceCount !== 6) {\n      texture = new Texture2D(engine, width, height, engineFormat, mipmap);\n      for (let mipLevel = 0; mipLevel < mipmaps.length; mipLevel++) {\n        const { data } = mipmaps[mipLevel];\n        texture.setPixelBuffer(data, mipLevel);\n      }\n    } else {\n      texture = new TextureCube(engine, height, engineFormat, mipmap);\n      for (let i = 0; i < faces.length; i++) {\n        const faceData = faces[i];\n        for (let mipLevel = 0; mipLevel < mipmaps.length; mipLevel++) {\n          texture.setPixelBuffer(TextureCubeFace.PositiveX + i, faceData[mipLevel].data, mipLevel);\n        }\n      }\n    }\n    if (params) {\n      texture.wrapModeU = params[0];\n      texture.wrapModeV = params[1];\n      texture.filterMode = params[2];\n      texture.anisoLevel = params[3];\n    }\n    return texture as Texture2D | TextureCube;\n  }\n\n  private static _decideTargetFormat(\n    engine: Engine,\n    ktx2Container: KTX2Container,\n    priorityFormats?: KTX2TargetFormat[]\n  ): KTX2TargetFormat {\n    const renderer = (engine as any)._hardwareRenderer;\n\n    const targetFormat = this._detectSupportedFormat(renderer, priorityFormats) as KTX2TargetFormat;\n\n    if (\n      targetFormat === KTX2TargetFormat.PVRTC &&\n      (!MathUtil.isPowerOf2(ktx2Container.pixelWidth) ||\n        !MathUtil.isPowerOf2(ktx2Container.pixelHeight) ||\n        ktx2Container.pixelWidth !== ktx2Container.pixelHeight)\n    ) {\n      Logger.warn(\"PVRTC image need power of 2 and width===height, downgrade to RGBA8\");\n      return KTX2TargetFormat.R8G8B8A8;\n    }\n\n    if (targetFormat === null) {\n      Logger.warn(\"Can't support any compressed texture, downgrade to RGBA8\");\n      return KTX2TargetFormat.R8G8B8A8;\n    }\n    return targetFormat;\n  }\n\n  private static _detectSupportedFormat(renderer: any, priorityFormats: KTX2TargetFormat[]): KTX2TargetFormat | null {\n    for (let i = 0; i < priorityFormats.length; i++) {\n      const format = priorityFormats[i];\n      const capabilities = this._supportedMap[format];\n      if (capabilities) {\n        for (let j = 0; j < capabilities.length; j++) {\n          if (renderer.canIUse(capabilities[j])) {\n            return format;\n          }\n        }\n      } else {\n        switch (priorityFormats[i]) {\n          case KTX2TargetFormat.R8G8B8A8:\n            return format;\n          case KTX2TargetFormat.R8:\n          case KTX2TargetFormat.R8G8:\n            if (renderer.isWebGL2) return format;\n        }\n      }\n    }\n    return null;\n  }\n\n  private static _getBinomialLLCTranscoder(workerCount: number = 4) {\n    KTX2Loader._isBinomialInit = true;\n    return (this._binomialLLCTranscoder ??= new BinomialLLCTranscoder(workerCount));\n  }\n\n  private static _getKhronosTranscoder(workerCount: number = 4) {\n    return (this._khronosTranscoder ??= new KhronosTranscoder(workerCount, KTX2TargetFormat.ASTC));\n  }\n\n  private static _getEngineTextureFormat(\n    basisFormat: KTX2TargetFormat,\n    transcodeResult: TranscodeResult\n  ): TextureFormat {\n    const { hasAlpha } = transcodeResult;\n    switch (basisFormat) {\n      case KTX2TargetFormat.ASTC:\n        return TextureFormat.ASTC_4x4;\n      case KTX2TargetFormat.ETC:\n        return hasAlpha ? TextureFormat.ETC2_RGBA8 : TextureFormat.ETC2_RGB;\n      case KTX2TargetFormat.BC7:\n        return TextureFormat.BC7;\n      case KTX2TargetFormat.BC1_BC3:\n        return hasAlpha ? TextureFormat.BC3 : TextureFormat.BC1;\n      case KTX2TargetFormat.PVRTC:\n        return hasAlpha ? TextureFormat.PVRTC_RGBA4 : TextureFormat.PVRTC_RGB4;\n      case KTX2TargetFormat.R8G8B8A8:\n        return TextureFormat.R8G8B8A8;\n    }\n  }\n\n  override initialize(_: Engine, configuration: EngineConfiguration): Promise<void> {\n    if (configuration.ktx2Loader) {\n      const options = configuration.ktx2Loader;\n      if (options.priorityFormats) {\n        KTX2Loader._priorityFormats[\"etc1s\"] = options.priorityFormats;\n        KTX2Loader._priorityFormats[\"uastc\"] = options.priorityFormats;\n      }\n\n      if (options.transcoder === KTX2Transcoder.Khronos) {\n        return KTX2Loader._getKhronosTranscoder(options.workerCount).init();\n      } else {\n        return KTX2Loader._getBinomialLLCTranscoder(options.workerCount).init();\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  load(\n    item: LoadItem & { params?: KTX2Params },\n    resourceManager: ResourceManager\n  ): AssetPromise<Texture2D | TextureCube> {\n    return new AssetPromise((resolve, reject, setTaskCompleteProgress, setTaskDetailProgress) => {\n      resourceManager\n        // @ts-ignore\n        ._request<ArrayBuffer>(item.url, { type: \"arraybuffer\" })\n        .onProgress(setTaskCompleteProgress, setTaskDetailProgress)\n        .then((buffer) =>\n          KTX2Loader._parseBuffer(new Uint8Array(buffer), resourceManager.engine, item.params).then(\n            ({ engine, result, targetFormat, params }) =>\n              KTX2Loader._createTextureByBuffer(engine, result, targetFormat, params)\n          )\n        )\n        .then(resolve)\n        .catch(reject);\n    });\n  }\n}\n\n/**\n * KTX2 loader params interface.\n */\nexport interface KTX2Params {\n  /** Priority transcoding format queue which is preferred options, default is BC7/ASTC/BC3_BC1/ETC/PVRTC/R8G8B8A8. */\n  /** @deprecated */\n  priorityFormats: KTX2TargetFormat[];\n}\n\n/** Used for initialize KTX2 transcoder. */\nexport enum KTX2Transcoder {\n  /** BinomialLLC transcoder. */\n  BinomialLLC,\n  /** Khronos transcoder. */\n  Khronos\n}\n\ndeclare module \"@galacean/engine-core\" {\n  interface EngineConfiguration {\n    /** KTX2 loader options. If set this option and workCount is great than 0, workers will be created. */\n    ktx2Loader?: {\n      /** Worker count for transcoder, default is 4. */\n      workerCount?: number;\n      /** Global transcoding format queue which will be used if not specified in per-instance param, default is BC7/ASTC/BC3_BC1/ETC/PVRTC/R8G8B8A8. */\n      /** @deprecated */\n      priorityFormats?: KTX2TargetFormat[];\n      /** Used for initialize KTX2 transcoder, default is BinomialLLC. */\n      transcoder?: KTX2Transcoder;\n    };\n  }\n}\n","import {\n  AssetPromise,\n  BlendShape,\n  Buffer,\n  ContentRestorer,\n  ModelMesh,\n  request,\n  Texture2D,\n  TypedArray\n} from \"@galacean/engine-core\";\nimport { RequestConfig } from \"@galacean/engine-core/types/asset/request\";\nimport { Vector2 } from \"@galacean/engine-math\";\nimport { GLTFResource } from \"./gltf/GLTFResource\";\nimport type { AccessorComponentType, IBufferView } from \"./gltf/GLTFSchema\";\nimport { GLTFUtils } from \"./gltf/GLTFUtils\";\nimport { KTX2Loader } from \"./ktx2/KTX2Loader\";\n\n/**\n * @internal\n */\nexport class GLTFContentRestorer extends ContentRestorer<GLTFResource> {\n  isGLB: boolean;\n  bufferRequests: BufferRequestInfo[] = [];\n  glbBufferSlices: Vector2[] = [];\n  bufferTextures: BufferTextureRestoreInfo[] = [];\n  meshes: ModelMeshRestoreInfo[] = [];\n\n  override restoreContent(): AssetPromise<GLTFResource> {\n    return new AssetPromise((resolve, reject) => {\n      Promise.all(\n        this.bufferRequests.map((bufferRequestInfo) => {\n          return request<ArrayBuffer>(bufferRequestInfo.url, bufferRequestInfo.config);\n        })\n      )\n        .then((buffers: ArrayBuffer[]) => {\n          // Buffer parse\n          if (this.isGLB) {\n            const glbBufferSlice = this.glbBufferSlices;\n            const bigBuffer = buffers[0];\n            const bufferCount = glbBufferSlice.length;\n            buffers.length = bufferCount;\n            for (let i = 0; i < bufferCount; i++) {\n              const slice = glbBufferSlice[i];\n              buffers[i] = bigBuffer.slice(slice.x, slice.x + slice.y);\n            }\n          }\n\n          // Restore texture\n          AssetPromise.all(\n            this.bufferTextures.map((textureRestoreInfo) => {\n              const { bufferView } = textureRestoreInfo;\n              const buffer = buffers[bufferView.buffer];\n              const bufferData = new Uint8Array(buffer, bufferView.byteOffset ?? 0, bufferView.byteLength);\n              const texture = textureRestoreInfo.texture;\n              if (textureRestoreInfo.mimeType === \"image/ktx2\") {\n                return KTX2Loader._parseBuffer(bufferData, texture.engine).then(({ result }) => {\n                  const { faces } = result;\n                  const mipmaps = faces[0];\n                  for (let i = 0; i < mipmaps.length; i++) {\n                    texture.setPixelBuffer(mipmaps[i].data, i);\n                  }\n                });\n              } else {\n                return GLTFUtils.loadImageBuffer(bufferData, textureRestoreInfo.mimeType).then((image) => {\n                  texture.setImageSource(image);\n                  texture.generateMipmaps();\n                });\n              }\n            })\n          )\n            .then(() => {\n              // Restore mesh\n              for (const meshInfo of this.meshes) {\n                const mesh = meshInfo.mesh;\n                for (const bufferRestoreInfo of meshInfo.vertexBuffers) {\n                  const vertexData = this._getBufferData(buffers, bufferRestoreInfo.data);\n                  bufferRestoreInfo.buffer.setData(vertexData);\n                }\n\n                if (meshInfo.indexBuffer) {\n                  const indexData = this._getBufferData(buffers, meshInfo.indexBuffer);\n                  mesh.setIndices(<Uint8Array | Uint16Array | Uint32Array>indexData);\n                }\n\n                for (const restoreInfo of meshInfo.blendShapes) {\n                  const frame = restoreInfo.blendShape.frames[0];\n                  const position = restoreInfo.position;\n                  const positionData = this._getBufferData(buffers, position.buffer);\n                  frame.deltaPositions = GLTFUtils.bufferToVector3Array(\n                    positionData,\n                    position.byteOffset,\n                    position.count,\n                    position.normalized,\n                    position.componentType\n                  );\n\n                  if (restoreInfo.normal) {\n                    const normal = restoreInfo.normal;\n                    const normalData = this._getBufferData(buffers, normal.buffer);\n                    frame.deltaNormals = GLTFUtils.bufferToVector3Array(\n                      normalData,\n                      normal.byteOffset,\n                      normal.count,\n                      normal.normalized,\n                      normal.componentType\n                    );\n                  }\n\n                  if (restoreInfo.tangent) {\n                    const tangent = restoreInfo.tangent;\n                    const tangentData = this._getBufferData(buffers, tangent.buffer);\n                    frame.deltaTangents = GLTFUtils.bufferToVector3Array(\n                      tangentData,\n                      tangent.byteOffset,\n                      tangent.count,\n                      tangent.normalized,\n                      tangent.componentType\n                    );\n                  }\n                }\n                mesh.uploadData(true);\n              }\n              resolve(this.resource);\n            })\n            .catch(reject);\n        })\n        .catch(reject);\n    });\n  }\n\n  private _getBufferData(buffers: ArrayBuffer[], restoreInfo: BufferDataRestoreInfo): TypedArray {\n    const main = restoreInfo.main;\n    let data: TypedArray;\n    if (main) {\n      const buffer = buffers[main.bufferIndex];\n      data = new main.TypedArray(buffer, main.byteOffset, main.length);\n    } else {\n      data = new main.TypedArray(main.length);\n    }\n\n    const sparseCount = restoreInfo.sparseCount;\n    if (sparseCount) {\n      const sparseIndex = restoreInfo.sparseIndices;\n      const sparseIndexBuffer = buffers[sparseIndex.bufferIndex];\n      const sparseIndexData = new sparseIndex.TypedArray(sparseIndexBuffer, sparseIndex.byteOffset, sparseIndex.length);\n\n      const sparseValue = restoreInfo.sparseValues;\n      const sparseValueBuffer = buffers[sparseValue.bufferIndex];\n      const sparseValueData = new sparseValue.TypedArray(sparseValueBuffer, sparseValue.byteOffset, sparseValue.length);\n\n      const typeSize = restoreInfo.typeSize;\n      for (let i = 0; i < sparseCount; i++) {\n        const replaceIndex = sparseIndexData[i];\n        for (let j = 0; j < typeSize; j++) {\n          data[replaceIndex * typeSize + j] = sparseValueData[i * typeSize + j];\n        }\n      }\n    }\n\n    return data;\n  }\n}\n\n/**\n * @internal\n */\nexport class BufferRequestInfo {\n  constructor(\n    public url: string,\n    public config: RequestConfig\n  ) {}\n}\n\n/**\n * @internal\n */\nexport class BufferTextureRestoreInfo {\n  constructor(\n    public texture: Texture2D,\n    public bufferView: IBufferView,\n    public mimeType: string\n  ) {}\n}\n\n/**\n * @internal\n */\nexport class ModelMeshRestoreInfo {\n  public mesh: ModelMesh;\n  public vertexBuffers: BufferRestoreInfo[] = [];\n  public indexBuffer: BufferDataRestoreInfo;\n  public blendShapes: BlendShapeRestoreInfo[] = [];\n}\n\n/**\n * @internal\n */\nexport class BufferRestoreInfo {\n  constructor(\n    public buffer: Buffer,\n    public data: BufferDataRestoreInfo\n  ) {}\n}\n\n/**\n * @internal\n */\nexport class BufferDataRestoreInfo {\n  constructor(\n    public main: RestoreDataAccessor,\n    public typeSize?: number,\n    public sparseCount?: number,\n    public sparseIndices?: RestoreDataAccessor,\n    public sparseValues?: RestoreDataAccessor\n  ) {}\n}\n\n/**\n * @internal\n */\nexport class RestoreDataAccessor {\n  constructor(\n    public bufferIndex: number,\n    public TypedArray:\n      | Uint8ArrayConstructor\n      | Int8ArrayConstructor\n      | Int16ArrayConstructor\n      | Uint16ArrayConstructor\n      | Uint32ArrayConstructor\n      | Float32ArrayConstructor,\n    public byteOffset: number,\n    public length: number\n  ) {}\n}\n\n/**\n * @internal\n */\nexport class BlendShapeRestoreInfo {\n  constructor(\n    public blendShape: BlendShape,\n    public position: BlendShapeDataRestoreInfo,\n    public normal?: BlendShapeDataRestoreInfo,\n    public tangent?: BlendShapeDataRestoreInfo\n  ) {}\n}\n\n/**\n * @internal\n */\nexport class BlendShapeDataRestoreInfo {\n  constructor(\n    public buffer: BufferDataRestoreInfo,\n    public byteOffset: number,\n    public count: number,\n    public normalized: boolean,\n    public componentType: AccessorComponentType\n  ) {}\n}\n","import { EngineObject } from \"@galacean/engine-core\";\nimport { GLTFExtensionOwnerSchema } from \"../GLTFSchema\";\nimport { GLTFParserContext } from \"../parser/GLTFParserContext\";\nimport { GLTFExtensionSchema } from \"./GLTFExtensionSchema\";\n\n/**\n * Base class of glTF extension parser.\n */\nexport abstract class GLTFExtensionParser {\n  /**\n   * @internal\n   * The extension mode.\n   */\n  _mode: GLTFExtensionMode;\n\n  /**\n   * Create and parse the resource.\n   * @remarks This method overrides the default resource creation.\n   * @param context - The parser context\n   * @param extensionSchema - The extension schema\n   * @param extensionOwnerSchema - The extension owner schema\n   * @returns The resource or promise\n   */\n  createAndParse(\n    context: GLTFParserContext,\n    extensionSchema: GLTFExtensionSchema,\n    extensionOwnerSchema: GLTFExtensionOwnerSchema,\n    ...extra\n  ): EngineObject | Promise<EngineObject | Uint8Array> {\n    throw \"Not implemented.\";\n  }\n\n  /**\n   * Additive parse to the resource.\n   * @param context - The parser context\n   * @param parseResource - The parsed resource\n   * @param extensionSchema - The extension schema\n   * @param extensionOwnerSchema - The extension owner schema\n   * @returns The void or promise\n   */\n  additiveParse(\n    context: GLTFParserContext,\n    parseResource: EngineObject,\n    extensionSchema: GLTFExtensionSchema,\n    extensionOwnerSchema: GLTFExtensionOwnerSchema,\n    ...extra\n  ): void | Promise<void> {\n    throw \"Not implemented.\";\n  }\n}\n\n/**\n * glTF Extension mode.\n */\nexport enum GLTFExtensionMode {\n  /**\n   * Cerate instance and parse mode.\n   * @remarks\n   * If the glTF property has multiple extensions of `CreateAndParse` mode, only execute the last one.\n   * If this method is registered, the default pipeline processing will be ignored.\n   */\n  CreateAndParse,\n\n  /** Additive parse mode. */\n  AdditiveParse\n}\n","import { AnimationClip, EngineObject, Material, Mesh } from \"@galacean/engine-core\";\nimport type { GLTFExtensionOwnerSchema } from \"../GLTFSchema\";\nimport { GLTFExtensionMode, GLTFExtensionParser } from \"../extensions/GLTFExtensionParser\";\nimport { GLTFExtensionSchema } from \"../extensions/GLTFExtensionSchema\";\nimport { GLTFParserContext } from \"./GLTFParserContext\";\n\n/**\n * Base class of glTF parser.\n */\nexport abstract class GLTFParser {\n  private static readonly _extensionParsers: Record<string, GLTFExtensionParser[]> = {};\n\n  /**\n   * Execute all parses of extension to create resource.\n   * @param extensions - Related extensions field\n   * @param context - The parser context\n   * @param ownerSchema - The extension owner schema\n   * @param extra - Extra params\n   * @returns\n   */\n  static executeExtensionsCreateAndParse(\n    extensions: { [key: string]: any } = {},\n    context: GLTFParserContext,\n    ownerSchema: GLTFExtensionOwnerSchema,\n    ...extra\n  ): EngineObject | void | Promise<EngineObject | Uint8Array | void> {\n    let resource: EngineObject | Promise<EngineObject> = null;\n\n    const extensionArray = Object.keys(extensions);\n    for (let i = extensionArray.length - 1; i >= 0; --i) {\n      const extensionName = extensionArray[i];\n      const extensionSchema = extensions[extensionName];\n\n      resource = <EngineObject | Promise<EngineObject>>(\n        GLTFParser._createAndParse(extensionName, context, extensionSchema, ownerSchema, ...extra)\n      );\n      if (resource) {\n        return resource;\n      }\n    }\n  }\n\n  /**\n   * Execute all parses of extension to parse resource.\n   * @param extensions - Related extensions field\n   * @param context - The parser context\n   * @param parseResource -  The parsed resource\n   * @param ownerSchema - The extension owner schema\n   * @param extra - Extra params\n   */\n  static executeExtensionsAdditiveAndParse(\n    extensions: { [key: string]: any },\n    context: GLTFParserContext,\n    parseResource: EngineObject,\n    ownerSchema: GLTFExtensionOwnerSchema,\n    ...extra\n  ): void {\n    for (let extensionName in extensions) {\n      const extensionSchema = extensions[extensionName];\n      GLTFParser._additiveParse(extensionName, context, parseResource, extensionSchema, ownerSchema, ...extra);\n    }\n  }\n\n  /**\n   * Whether the plugin is registered.\n   * @param extensionName - Extension name\n   * @returns Boolean\n   */\n  static hasExtensionParser(extensionName: string): boolean {\n    return !!GLTFParser._extensionParsers[extensionName]?.length;\n  }\n\n  /**\n   * Get the last plugin by glTF extension mode.\n   * @param extensionName - Extension name\n   * @param mode - GLTF extension mode\n   * @returns GLTF extension parser\n   */\n  static getExtensionParser(extensionName: string, mode: GLTFExtensionMode): GLTFExtensionParser | undefined {\n    const parsers = GLTFParser._extensionParsers[extensionName];\n    const length = parsers?.length;\n\n    if (length) {\n      // only use the last parser.\n      for (let i = length - 1; i >= 0; --i) {\n        const currentParser = parsers[i];\n        if (currentParser._mode === mode) {\n          return currentParser;\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _addExtensionParser(extensionName: string, extensionParser: GLTFExtensionParser) {\n    if (!GLTFParser._extensionParsers[extensionName]) {\n      GLTFParser._extensionParsers[extensionName] = [];\n    }\n    GLTFParser._extensionParsers[extensionName].push(extensionParser);\n  }\n\n  private static _createAndParse(\n    extensionName: string,\n    context: GLTFParserContext,\n    extensionSchema: GLTFExtensionSchema,\n    ownerSchema: GLTFExtensionOwnerSchema,\n    ...extra\n  ): EngineObject | Uint8Array | Promise<EngineObject | Uint8Array> {\n    const parser = GLTFParser.getExtensionParser(extensionName, GLTFExtensionMode.CreateAndParse);\n\n    if (parser) {\n      return parser.createAndParse(context, extensionSchema, ownerSchema, ...extra);\n    }\n  }\n\n  private static _additiveParse(\n    extensionName: string,\n    context: GLTFParserContext,\n    parseResource: EngineObject,\n    extensionSchema: GLTFExtensionSchema,\n    ownerSchema: GLTFExtensionOwnerSchema,\n    ...extra\n  ): void {\n    const parser = GLTFParser.getExtensionParser(extensionName, GLTFExtensionMode.AdditiveParse);\n\n    if (parser) {\n      parser.additiveParse(context, parseResource, extensionSchema, ownerSchema, ...extra);\n    }\n  }\n\n  abstract parse(context: GLTFParserContext, index?: number);\n}\n\n/**\n * Declare ExtensionParser's decorator.\n * @param extensionName - Extension name\n */\nexport function registerGLTFExtension(extensionName: string, mode: GLTFExtensionMode) {\n  return (parser: new () => GLTFExtensionParser) => {\n    const extensionParser = new parser();\n    extensionParser._mode = mode;\n    GLTFParser._addExtensionParser(extensionName, extensionParser);\n  };\n}\n","import { Utils, request } from \"@galacean/engine-core\";\nimport { RequestConfig } from \"@galacean/engine-core/types/asset/request\";\nimport { BufferRequestInfo } from \"../../GLTFContentRestorer\";\nimport { IGLTF } from \"../GLTFSchema\";\nimport { GLTFUtils } from \"../GLTFUtils\";\nimport { GLTFParser } from \"./GLTFParser\";\nimport { GLTFParserContext, GLTFParserType, registerGLTFParser } from \"./GLTFParserContext\";\n\n@registerGLTFParser(GLTFParserType.Schema)\nexport class GLTFSchemaParser extends GLTFParser {\n  parse(context: GLTFParserContext): Promise<IGLTF> {\n    const { glTFResource, contentRestorer, resourceManager } = context;\n    const url = glTFResource.url;\n    const restoreBufferRequests = contentRestorer.bufferRequests;\n    const requestConfig = <RequestConfig>{ type: \"arraybuffer\" };\n    // @ts-ignore\n    const remoteUrl = resourceManager._getRemoteUrl(url);\n    return (\n      resourceManager\n        // @ts-ignore\n        ._requestByRemoteUrl<ArrayBuffer>(remoteUrl, requestConfig)\n        .onProgress(undefined, context._onTaskDetail)\n        .then((buffer) => {\n          const parseResult = GLTFUtils.parseGLB(context, buffer);\n          // If the buffer is a GLB file, we need to restore the buffer data\n          if (parseResult?.glTF) {\n            restoreBufferRequests.push(new BufferRequestInfo(remoteUrl, requestConfig));\n          }\n          return parseResult;\n        })\n        .then((result) => {\n          if (result?.glTF) {\n            contentRestorer.isGLB = true;\n            context.buffers = result.buffers;\n            return result.glTF;\n          } else {\n            contentRestorer.isGLB = false;\n            return JSON.parse(Utils.decodeText(new Uint8Array(result.originBuffer)));\n          }\n        })\n    );\n  }\n}\n","import {\n  AnimationClip,\n  AnimationFloatArrayCurve,\n  AnimationQuaternionCurve,\n  AnimationVector3Curve,\n  Component,\n  Entity,\n  InterpolationType,\n  Keyframe,\n  SkinnedMeshRenderer,\n  Transform,\n  TypedArray\n} from \"@galacean/engine-core\";\nimport { Quaternion, Vector3, Vector4 } from \"@galacean/engine-math\";\nimport {\n  AccessorType,\n  AnimationChannelTargetPath,\n  AnimationSamplerInterpolation,\n  IAnimation,\n  IAnimationChannel\n} from \"../GLTFSchema\";\nimport { GLTFUtils } from \"../GLTFUtils\";\nimport { GLTFParser } from \"./GLTFParser\";\nimport { GLTFParserContext, GLTFParserType, registerGLTFParser } from \"./GLTFParserContext\";\n\n@registerGLTFParser(GLTFParserType.Animation)\nexport class GLTFAnimationParser extends GLTFParser {\n  /**\n   * @internal\n   */\n  static _parseStandardProperty(\n    context: GLTFParserContext,\n    animationClip: AnimationClip,\n    animationInfo: IAnimation\n  ): Promise<AnimationClip> {\n    const { glTF } = context;\n    const { accessors, bufferViews } = glTF;\n    const { channels, samplers } = animationInfo;\n    const len = samplers.length;\n    const sampleDataCollection = new Array<SampleData>(len);\n    const entities = context.get<Entity>(GLTFParserType.Entity);\n\n    let duration = -1;\n    let promises = new Array<Promise<void | Entity[]>>();\n\n    // parse samplers\n    for (let j = 0, m = len; j < m; j++) {\n      const glTFSampler = samplers[j];\n      const inputAccessor = accessors[glTFSampler.input];\n      const outputAccessor = accessors[glTFSampler.output];\n\n      const promise = Promise.all([\n        GLTFUtils.getAccessorBuffer(context, bufferViews, inputAccessor),\n        GLTFUtils.getAccessorBuffer(context, bufferViews, outputAccessor)\n      ]).then((bufferInfos) => {\n        const input = bufferInfos[0].data;\n        let output = bufferInfos[1].data;\n        if (outputAccessor.normalized) {\n          const scale = GLTFUtils.getNormalizedComponentScale(outputAccessor.componentType);\n          const scaled = new Float32Array(output.length);\n          for (let k = 0, v = output.length; k < v; k++) {\n            scaled[k] = output[k] * scale;\n          }\n          output = scaled;\n        }\n\n        const outputStride = output.length / input.length;\n\n        const interpolation = glTFSampler.interpolation ?? AnimationSamplerInterpolation.Linear;\n        let samplerInterpolation: InterpolationType;\n        switch (interpolation) {\n          case AnimationSamplerInterpolation.CubicSpine:\n            samplerInterpolation = InterpolationType.CubicSpine;\n            break;\n          case AnimationSamplerInterpolation.Step:\n            samplerInterpolation = InterpolationType.Step;\n            break;\n          case AnimationSamplerInterpolation.Linear:\n            samplerInterpolation = InterpolationType.Linear;\n            break;\n        }\n\n        const maxTime = input[input.length - 1];\n        if (maxTime > duration) {\n          duration = maxTime;\n        }\n\n        sampleDataCollection[j] = {\n          type: outputAccessor.type,\n          interpolation: samplerInterpolation,\n          input,\n          output,\n          outputSize: outputStride\n        };\n      });\n      promises.push(promise);\n    }\n\n    promises.push(context.get<Entity>(GLTFParserType.Scene));\n\n    return Promise.all(promises).then(() => {\n      for (let j = 0, m = channels.length; j < m; j++) {\n        const glTFChannel = channels[j];\n        const { target } = glTFChannel;\n        const channelTargetEntity = entities[target.node];\n\n        let relativePath = \"\";\n        let entity = channelTargetEntity;\n        while (entity.parent) {\n          relativePath = relativePath === \"\" ? `${entity.name}` : `${entity.name}/${relativePath}`;\n          entity = entity.parent;\n        }\n\n        // If the target node is in the default scene, relativePath will be empty\n        if (context.glTFResource.sceneRoots.indexOf(entity) === -1) {\n          continue;\n        }\n\n        let ComponentType: new (entity: Entity) => Component;\n        let propertyName: string;\n        switch (target.path) {\n          case AnimationChannelTargetPath.TRANSLATION:\n            ComponentType = Transform;\n            propertyName = \"position\";\n            break;\n          case AnimationChannelTargetPath.ROTATION:\n            ComponentType = Transform;\n            propertyName = \"rotationQuaternion\";\n            break;\n          case AnimationChannelTargetPath.SCALE:\n            ComponentType = Transform;\n            propertyName = \"scale\";\n            break;\n          case AnimationChannelTargetPath.WEIGHTS:\n            ComponentType = SkinnedMeshRenderer;\n            propertyName = \"blendShapeWeights\";\n            break;\n          default:\n        }\n\n        const curve = this._addCurve(target.path, glTFChannel, sampleDataCollection);\n\n        if (target.path === AnimationChannelTargetPath.WEIGHTS) {\n          const mesh = glTF.nodes[target.node].mesh;\n          for (let i = 0, n = glTF.meshes[mesh].primitives.length; i < n; i++) {\n            animationClip.addCurveBinding(relativePath, ComponentType, i, propertyName, curve);\n          }\n        } else {\n          animationClip.addCurveBinding(relativePath, ComponentType, propertyName, curve);\n        }\n      }\n      return animationClip;\n    });\n  }\n\n  private static _addCurve(\n    animationChannelTargetPath: AnimationChannelTargetPath,\n    glTFChannel: IAnimationChannel,\n    sampleDataCollection: SampleData[]\n  ) {\n    const sampleData = sampleDataCollection[glTFChannel.sampler];\n    const { input, output, outputSize } = sampleData;\n\n    switch (animationChannelTargetPath) {\n      case AnimationChannelTargetPath.TRANSLATION:\n      case AnimationChannelTargetPath.SCALE: {\n        const curve = new AnimationVector3Curve();\n        const interpolation = (curve.interpolation = sampleData.interpolation);\n\n        let offset = 0;\n        for (let i = 0, n = input.length; i < n; i++) {\n          const keyframe = new Keyframe<Vector3>();\n          keyframe.time = input[i];\n          if (interpolation === InterpolationType.CubicSpine) {\n            keyframe.inTangent = new Vector3(output[offset++], output[offset++], output[offset++]);\n            keyframe.value = new Vector3(output[offset++], output[offset++], output[offset++]);\n            keyframe.outTangent = new Vector3(output[offset++], output[offset++], output[offset++]);\n          } else {\n            keyframe.value = new Vector3(output[offset++], output[offset++], output[offset++]);\n          }\n          curve.addKey(keyframe);\n        }\n        return curve;\n      }\n      case AnimationChannelTargetPath.ROTATION: {\n        const curve = new AnimationQuaternionCurve();\n        const interpolation = (curve.interpolation = sampleData.interpolation);\n\n        let offset = 0;\n        for (let i = 0, n = input.length; i < n; i++) {\n          const keyframe = new Keyframe<Quaternion>();\n          keyframe.time = input[i];\n          if (interpolation === InterpolationType.CubicSpine) {\n            keyframe.inTangent = new Vector4(output[offset++], output[offset++], output[offset++], output[offset++]);\n            keyframe.value = new Quaternion(output[offset++], output[offset++], output[offset++], output[offset++]);\n            keyframe.outTangent = new Vector4(output[offset++], output[offset++], output[offset++], output[offset++]);\n          } else {\n            keyframe.value = new Quaternion(output[offset++], output[offset++], output[offset++], output[offset++]);\n          }\n          curve.addKey(keyframe);\n        }\n        return curve;\n      }\n      case AnimationChannelTargetPath.WEIGHTS: {\n        const curve = new AnimationFloatArrayCurve();\n        curve.interpolation = sampleData.interpolation;\n\n        let offset = 0;\n        for (let i = 0, n = input.length; i < n; i++) {\n          const keyframe = new Keyframe<Float32Array>();\n          keyframe.time = input[i];\n          if (curve.interpolation === InterpolationType.CubicSpine) {\n            keyframe.inTangent = Array.from(output.subarray(offset, offset + outputSize));\n            offset += outputSize;\n            keyframe.value = output.slice(offset, offset + outputSize) as Float32Array;\n            offset += outputSize;\n            keyframe.outTangent = Array.from(output.subarray(offset, offset + outputSize));\n            offset += outputSize;\n          } else {\n            keyframe.value = output.slice(offset, offset + outputSize) as Float32Array;\n            offset += outputSize;\n          }\n          curve.addKey(keyframe);\n        }\n        return curve;\n      }\n    }\n  }\n\n  parse(context: GLTFParserContext, index: number): Promise<AnimationClip> {\n    const animationInfo = context.glTF.animations[index];\n    const { name = `AnimationClip${index}` } = animationInfo;\n\n    const animationClipPromise =\n      <Promise<AnimationClip> | AnimationClip>(\n        GLTFParser.executeExtensionsCreateAndParse(animationInfo.extensions, context, animationInfo)\n      ) || GLTFAnimationParser._parseStandardProperty(context, new AnimationClip(name), animationInfo);\n\n    return Promise.resolve(animationClipPromise).then((animationClip) => {\n      GLTFParser.executeExtensionsAdditiveAndParse(animationInfo.extensions, context, animationClip, animationInfo);\n      return animationClip;\n    });\n  }\n}\n\ninterface SampleData {\n  type: AccessorType;\n  input: TypedArray;\n  output: TypedArray;\n  interpolation: InterpolationType;\n  outputSize: number;\n}\n","import { request, Utils } from \"@galacean/engine-core\";\nimport { RequestConfig } from \"@galacean/engine-core/types/asset/request\";\nimport { BufferRequestInfo } from \"../../GLTFContentRestorer\";\nimport type { IBuffer } from \"../GLTFSchema\";\nimport { GLTFParser } from \"./GLTFParser\";\nimport { GLTFParserContext, GLTFParserType, registerGLTFParser } from \"./GLTFParserContext\";\n\n@registerGLTFParser(GLTFParserType.Buffer)\nexport class GLTFBufferParser extends GLTFParser {\n  parse(context: GLTFParserContext, index: number): Promise<ArrayBuffer> {\n    const buffers = context.glTF.buffers;\n\n    return context.buffers ? Promise.resolve(context.buffers[index]) : this._parseSingleBuffer(context, buffers[index]);\n  }\n\n  private _parseSingleBuffer(context: GLTFParserContext, bufferInfo: IBuffer): Promise<ArrayBuffer> {\n    const { glTFResource, contentRestorer, resourceManager } = context;\n    const url = glTFResource.url;\n    // @ts-ignore\n    const remoteUrl = resourceManager._getRemoteUrl(url);\n    const restoreBufferRequests = contentRestorer.bufferRequests;\n    const requestConfig = <RequestConfig>{ type: \"arraybuffer\" };\n    const absoluteUrl = Utils.resolveAbsoluteUrl(remoteUrl, bufferInfo.uri);\n\n    restoreBufferRequests.push(new BufferRequestInfo(absoluteUrl, requestConfig));\n    const promise = resourceManager\n      // @ts-ignore\n      ._requestByRemoteUrl<ArrayBuffer>(absoluteUrl, requestConfig)\n      .onProgress(undefined, context._onTaskDetail);\n\n    context._addTaskCompletePromise(promise);\n    return promise;\n  }\n}\n","import { Entity } from \"@galacean/engine-core\";\nimport { GLTFParser } from \"./GLTFParser\";\nimport { GLTFParserContext, GLTFParserType, registerGLTFParser } from \"./GLTFParserContext\";\n\n@registerGLTFParser(GLTFParserType.Entity)\nexport class GLTFEntityParser extends GLTFParser {\n  parse(context: GLTFParserContext, index: number): Entity {\n    const glTFResource = context.glTFResource;\n    const entityInfo = context.glTF.nodes[index];\n    const engine = glTFResource.engine;\n    const { matrix, translation, rotation, scale, extensions } = entityInfo;\n    const entity = new Entity(engine, entityInfo.name || `_GLTF_ENTITY_${index}`);\n    // @ts-ignore\n    entity._markAsTemplate(glTFResource);\n\n    const { transform } = entity;\n    if (matrix) {\n      const localMatrix = transform.localMatrix;\n      localMatrix.copyFromArray(matrix);\n      transform.localMatrix = localMatrix;\n    } else {\n      if (translation) {\n        transform.setPosition(translation[0], translation[1], translation[2]);\n      }\n      if (rotation) {\n        transform.setRotationQuaternion(rotation[0], rotation[1], rotation[2], rotation[3]);\n      }\n      if (scale) {\n        transform.setScale(scale[0], scale[1], scale[2]);\n      }\n    }\n\n    const children = entityInfo.children;\n    if (children) {\n      for (let i = 0; i < children.length; i++) {\n        const childIndex = children[i];\n        const childEntity = context.get<Entity>(GLTFParserType.Entity, childIndex);\n        entity.addChild(childEntity);\n      }\n    }\n\n    GLTFParser.executeExtensionsAdditiveAndParse(extensions, context, entity, entityInfo);\n\n    return entity;\n  }\n}\n","import {\n  BlinnPhongMaterial,\n  Engine,\n  Logger,\n  Material,\n  PBRMaterial,\n  PBRSpecularMaterial,\n  RenderFace,\n  Texture2D,\n  TextureCoordinate,\n  UnlitMaterial\n} from \"@galacean/engine-core\";\nimport { Color } from \"@galacean/engine-math\";\nimport { IMaterial, ITextureInfo, MaterialAlphaMode } from \"../GLTFSchema\";\nimport { GLTFParser } from \"./GLTFParser\";\nimport { GLTFParserContext, GLTFParserType, registerGLTFParser } from \"./GLTFParserContext\";\n\n@registerGLTFParser(GLTFParserType.Material)\nexport class GLTFMaterialParser extends GLTFParser {\n  /** @internal */\n  static _getDefaultMaterial(engine: Engine): BlinnPhongMaterial {\n    return (GLTFMaterialParser._defaultMaterial ||= new BlinnPhongMaterial(engine));\n  }\n  private static _defaultMaterial: BlinnPhongMaterial;\n\n  /**\n   * @internal\n   */\n  static _checkOtherTextureTransform(texture: ITextureInfo, textureName: string): void {\n    if (texture.extensions?.KHR_texture_transform) {\n      Logger.warn(`${textureName} texture always use the KHR_texture_transform of the base texture.`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _parseStandardProperty(\n    context: GLTFParserContext,\n    material: UnlitMaterial | PBRMaterial | PBRSpecularMaterial,\n    materialInfo: IMaterial\n  ) {\n    const {\n      pbrMetallicRoughness,\n      normalTexture,\n      occlusionTexture,\n      emissiveTexture,\n      emissiveFactor,\n      alphaMode,\n      alphaCutoff,\n      doubleSided\n    } = materialInfo;\n\n    if (pbrMetallicRoughness) {\n      const { baseColorFactor, baseColorTexture, metallicFactor, roughnessFactor, metallicRoughnessTexture } =\n        pbrMetallicRoughness;\n\n      if (baseColorFactor) {\n        material.baseColor = new Color(\n          Color.linearToGammaSpace(baseColorFactor[0]),\n          Color.linearToGammaSpace(baseColorFactor[1]),\n          Color.linearToGammaSpace(baseColorFactor[2]),\n          baseColorFactor[3]\n        );\n      }\n      if (baseColorTexture) {\n        context.get<Texture2D>(GLTFParserType.Texture, baseColorTexture.index).then((texture) => {\n          material.baseTexture = texture;\n          GLTFParser.executeExtensionsAdditiveAndParse(\n            baseColorTexture.extensions,\n            context,\n            material,\n            baseColorTexture\n          );\n        });\n      }\n\n      if (material.constructor === PBRMaterial) {\n        material.metallic = metallicFactor ?? 1;\n        material.roughness = roughnessFactor ?? 1;\n        if (metallicRoughnessTexture) {\n          GLTFMaterialParser._checkOtherTextureTransform(metallicRoughnessTexture, \"Roughness metallic\");\n\n          context.get<Texture2D>(GLTFParserType.Texture, metallicRoughnessTexture.index).then((texture) => {\n            material.roughnessMetallicTexture = texture;\n          });\n        }\n      }\n    }\n\n    if (material.constructor === PBRMaterial || material.constructor === PBRSpecularMaterial) {\n      if (emissiveTexture) {\n        GLTFMaterialParser._checkOtherTextureTransform(emissiveTexture, \"Emissive\");\n\n        context.get<Texture2D>(GLTFParserType.Texture, emissiveTexture.index).then((texture) => {\n          material.emissiveTexture = texture;\n        });\n      }\n\n      if (emissiveFactor) {\n        material.emissiveColor = new Color(\n          Color.linearToGammaSpace(emissiveFactor[0]),\n          Color.linearToGammaSpace(emissiveFactor[1]),\n          Color.linearToGammaSpace(emissiveFactor[2])\n        );\n      }\n\n      if (normalTexture) {\n        const { index, scale } = normalTexture;\n        GLTFMaterialParser._checkOtherTextureTransform(normalTexture, \"Normal\");\n\n        context.get<Texture2D>(GLTFParserType.Texture, index).then((texture) => {\n          material.normalTexture = texture;\n        });\n\n        if (scale !== undefined) {\n          material.normalTextureIntensity = scale;\n        }\n      }\n\n      if (occlusionTexture) {\n        const { index, strength, texCoord } = occlusionTexture;\n        GLTFMaterialParser._checkOtherTextureTransform(occlusionTexture, \"Occlusion\");\n\n        context.get<Texture2D>(GLTFParserType.Texture, index).then((texture) => {\n          material.occlusionTexture = texture;\n        });\n\n        if (strength !== undefined) {\n          material.occlusionTextureIntensity = strength;\n        }\n        if (texCoord === TextureCoordinate.UV1) {\n          material.occlusionTextureCoord = TextureCoordinate.UV1;\n        } else if (texCoord > TextureCoordinate.UV1) {\n          Logger.warn(\"Occlusion texture uv coordinate must be UV0 or UV1.\");\n        }\n      }\n    }\n\n    if (doubleSided) {\n      material.renderFace = RenderFace.Double;\n    } else {\n      material.renderFace = RenderFace.Front;\n    }\n\n    switch (alphaMode) {\n      case MaterialAlphaMode.OPAQUE:\n        material.isTransparent = false;\n        break;\n      case MaterialAlphaMode.BLEND:\n        material.isTransparent = true;\n        break;\n      case MaterialAlphaMode.MASK:\n        material.alphaCutoff = alphaCutoff ?? 0.5;\n        break;\n    }\n  }\n\n  parse(context: GLTFParserContext, index: number): Promise<Material> {\n    const materialInfo = context.glTF.materials[index];\n    const glTFResource = context.glTFResource;\n    const engine = glTFResource.engine;\n\n    let material = <Material | Promise<Material>>(\n      GLTFParser.executeExtensionsCreateAndParse(materialInfo.extensions, context, materialInfo)\n    );\n\n    if (!material) {\n      material = new PBRMaterial(engine);\n      material.name = materialInfo.name;\n      GLTFMaterialParser._parseStandardProperty(context, material as PBRMaterial, materialInfo);\n    }\n\n    return Promise.resolve(material).then((material) => {\n      material ||= GLTFMaterialParser._getDefaultMaterial(engine);\n      GLTFParser.executeExtensionsAdditiveAndParse(materialInfo.extensions, context, material, materialInfo);\n      // @ts-ignore\n      material._associationSuperResource(glTFResource);\n      return material;\n    });\n  }\n}\n","import { BlendShape, Buffer, BufferBindFlag, BufferUsage, ModelMesh, VertexElement } from \"@galacean/engine-core\";\nimport { Vector3 } from \"@galacean/engine-math\";\nimport {\n  BlendShapeDataRestoreInfo,\n  BlendShapeRestoreInfo,\n  BufferRestoreInfo,\n  ModelMeshRestoreInfo\n} from \"../../GLTFContentRestorer\";\nimport type { IAccessor, IGLTF, IMesh, IMeshPrimitive } from \"../GLTFSchema\";\nimport { GLTFUtils } from \"../GLTFUtils\";\nimport { GLTFParser } from \"./GLTFParser\";\nimport { GLTFParserContext, GLTFParserType, registerGLTFParser } from \"./GLTFParserContext\";\n\n@registerGLTFParser(GLTFParserType.Mesh)\nexport class GLTFMeshParser extends GLTFParser {\n  private static _tempVector3 = new Vector3();\n\n  /**\n   * @internal\n   */\n  static _parseMeshFromGLTFPrimitive(\n    context: GLTFParserContext,\n    mesh: ModelMesh,\n    meshRestoreInfo: ModelMeshRestoreInfo,\n    gltfMesh: IMesh,\n    gltfPrimitive: IMeshPrimitive,\n    gltf: IGLTF,\n    keepMeshData: boolean\n  ): Promise<ModelMesh> {\n    const { accessors } = gltf;\n    const { attributes, targets, indices, mode } = gltfPrimitive;\n    const engine = mesh.engine;\n    const vertexElements = new Array<VertexElement>();\n\n    let vertexCount: number;\n    let bufferBindIndex = 0;\n\n    const promises = new Array<Promise<void>>();\n    for (const attribute in attributes) {\n      const accessor = accessors[attributes[attribute]];\n      const promise = GLTFUtils.getAccessorBuffer(context, gltf.bufferViews, accessor).then((accessorBuffer) => {\n        const dataElementSize = GLTFUtils.getAccessorTypeSize(accessor.type);\n        const accessorCount = accessor.count;\n        const vertices = accessorBuffer.data;\n\n        let vertexElement: VertexElement;\n        const meshId = mesh.instanceId;\n        const vertexBindingInfos = accessorBuffer.vertexBindingInfos;\n        const elementNormalized = accessor.normalized;\n        const elementFormat = GLTFUtils.getElementFormat(accessor.componentType, dataElementSize, elementNormalized);\n\n        let scaleFactor: number;\n        elementNormalized && (scaleFactor = GLTFUtils.getNormalizedComponentScale(accessor.componentType));\n\n        let elementOffset: number;\n        if (accessorBuffer.interleaved) {\n          const byteOffset = accessor.byteOffset || 0;\n          const stride = accessorBuffer.stride;\n          elementOffset = byteOffset % stride;\n          if (vertexBindingInfos[meshId] === undefined) {\n            vertexElement = new VertexElement(attribute, elementOffset, elementFormat, bufferBindIndex);\n\n            let vertexBuffer = accessorBuffer.vertexBuffer;\n            if (!vertexBuffer) {\n              vertexBuffer = new Buffer(\n                engine,\n                BufferBindFlag.VertexBuffer,\n                vertices,\n                BufferUsage.Static,\n                keepMeshData\n              );\n              accessorBuffer.vertexBuffer = vertexBuffer;\n              meshRestoreInfo.vertexBuffers.push(new BufferRestoreInfo(vertexBuffer, accessorBuffer.restoreInfo));\n            }\n            mesh.setVertexBufferBinding(vertexBuffer, stride, bufferBindIndex);\n            vertexBindingInfos[meshId] = bufferBindIndex++;\n          } else {\n            vertexElement = new VertexElement(attribute, elementOffset, elementFormat, vertexBindingInfos[meshId]);\n          }\n        } else {\n          elementOffset = 0;\n          vertexElement = new VertexElement(attribute, elementOffset, elementFormat, bufferBindIndex);\n\n          let vertexBuffer = accessorBuffer.vertexBuffer;\n          if (!vertexBuffer) {\n            vertexBuffer = new Buffer(engine, BufferBindFlag.VertexBuffer, vertices, BufferUsage.Static, keepMeshData);\n            meshRestoreInfo.vertexBuffers.push(new BufferRestoreInfo(vertexBuffer, accessorBuffer.restoreInfo));\n          }\n          mesh.setVertexBufferBinding(vertexBuffer, accessorBuffer.stride, bufferBindIndex);\n          vertexBindingInfos[meshId] = bufferBindIndex++;\n        }\n        vertexElements.push(vertexElement);\n\n        if (attribute === \"POSITION\") {\n          vertexCount = accessorCount;\n\n          const { min, max } = mesh.bounds;\n          if (accessor.min && accessor.max) {\n            min.copyFromArray(accessor.min);\n            max.copyFromArray(accessor.max);\n          } else {\n            const position = GLTFMeshParser._tempVector3;\n            min.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n            max.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n\n            const baseOffset = elementOffset / vertices.BYTES_PER_ELEMENT;\n            const stride = vertices.length / accessorCount;\n            for (let j = 0; j < accessorCount; j++) {\n              const offset = baseOffset + j * stride;\n              position.copyFromArray(vertices, offset);\n              Vector3.min(min, position, min);\n              Vector3.max(max, position, max);\n            }\n          }\n          if (elementNormalized) {\n            min.scale(scaleFactor);\n            max.scale(scaleFactor);\n          }\n        }\n      });\n      promises.push(promise);\n    }\n\n    return Promise.all(promises).then(() => {\n      mesh.setVertexElements(vertexElements);\n\n      // Indices\n      if (indices !== undefined) {\n        const indexAccessor = gltf.accessors[indices];\n        const promise = GLTFUtils.getAccessorBuffer(context, gltf.bufferViews, indexAccessor).then((accessorBuffer) => {\n          mesh.setIndices(<Uint8Array | Uint16Array | Uint32Array>accessorBuffer.data);\n          mesh.addSubMesh(0, indexAccessor.count, mode);\n          meshRestoreInfo.indexBuffer = accessorBuffer.restoreInfo;\n        });\n        promises.push(promise);\n      } else {\n        mesh.addSubMesh(0, vertexCount, mode);\n      }\n\n      // BlendShapes\n      if (targets) {\n        promises.push(\n          GLTFMeshParser._createBlendShape(context, mesh, meshRestoreInfo, gltfMesh, gltfPrimitive, targets)\n        );\n      }\n\n      return Promise.all(promises).then(() => {\n        mesh.uploadData(!keepMeshData);\n        return mesh;\n      });\n    });\n  }\n\n  private static _getBlendShapeData(\n    context: GLTFParserContext,\n    glTF: IGLTF,\n    accessor: IAccessor\n  ): Promise<{ vertices: Vector3[]; restoreInfo: BlendShapeDataRestoreInfo }> {\n    return GLTFUtils.getAccessorBuffer(context, glTF.bufferViews, accessor).then((bufferInfo) => {\n      const buffer = bufferInfo.data;\n      const byteOffset = bufferInfo.interleaved ? (accessor.byteOffset ?? 0) % bufferInfo.stride : 0;\n      const { count, normalized, componentType } = accessor;\n      const vertices = GLTFUtils.bufferToVector3Array(buffer, byteOffset, count, normalized, componentType);\n\n      const restoreInfo = new BlendShapeDataRestoreInfo(\n        bufferInfo.restoreInfo,\n        byteOffset,\n        count,\n        normalized,\n        componentType\n      );\n\n      return { vertices, restoreInfo };\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static _createBlendShape(\n    context: GLTFParserContext,\n    mesh: ModelMesh,\n    meshRestoreInfo: ModelMeshRestoreInfo,\n    glTFMesh: IMesh,\n    gltfPrimitive: IMeshPrimitive,\n    glTFTargets: {\n      [name: string]: number;\n    }[]\n  ): Promise<void> {\n    const glTF = context.glTF;\n    const accessors = glTF.accessors;\n    const blendShapeNames = glTFMesh.extras ? glTFMesh.extras.targetNames : null;\n    let promises = new Array<Promise<void>>();\n\n    const blendShapeCount = glTFTargets.length;\n    const blendShapeCollection = new Array<BlendShapeData>(blendShapeCount);\n    for (let i = 0; i < blendShapeCount; i++) {\n      const blendShapeData = <BlendShapeData>{};\n      blendShapeCollection[i] = blendShapeData;\n\n      const name = blendShapeNames ? blendShapeNames[i] : `blendShape${i}`;\n\n      const targets = gltfPrimitive.targets[i];\n      const normalTarget = targets[\"NORMAL\"];\n      const tangentTarget = targets[\"TANGENT\"];\n      const hasNormal = normalTarget !== undefined;\n      const hasTangent = tangentTarget !== undefined;\n\n      const promise = Promise.all([\n        this._getBlendShapeData(context, glTF, accessors[targets[\"POSITION\"]]),\n        hasNormal ? this._getBlendShapeData(context, glTF, accessors[normalTarget]) : null,\n        hasTangent ? this._getBlendShapeData(context, glTF, accessors[tangentTarget]) : null\n      ]).then((vertices) => {\n        const [positionData, normalData, tangentData] = vertices;\n\n        const blendShape = new BlendShape(name);\n        blendShape.addFrame(\n          1.0,\n          positionData.vertices,\n          hasNormal ? normalData.vertices : null,\n          hasTangent ? tangentData.vertices : null\n        );\n        blendShapeData.blendShape = blendShape;\n\n        blendShapeData.restoreInfo = new BlendShapeRestoreInfo(\n          blendShape,\n          positionData.restoreInfo,\n          hasNormal ? normalData.restoreInfo : null,\n          hasTangent ? tangentData?.restoreInfo : null\n        );\n      });\n      promises.push(promise);\n    }\n\n    return Promise.all(promises).then(() => {\n      for (const blendShape of blendShapeCollection) {\n        mesh.addBlendShape(blendShape.blendShape);\n        meshRestoreInfo.blendShapes.push(blendShape.restoreInfo);\n      }\n    });\n  }\n\n  parse(context: GLTFParserContext, index: number): Promise<ModelMesh[]> {\n    const meshInfo = context.glTF.meshes[index];\n\n    const { glTF, glTFResource } = context;\n    const engine = glTFResource.engine;\n    const primitivePromises = new Array<Promise<ModelMesh>>();\n\n    for (let i = 0, length = meshInfo.primitives.length; i < length; i++) {\n      const gltfPrimitive = meshInfo.primitives[i];\n\n      primitivePromises[i] = new Promise((resolve) => {\n        const mesh = <ModelMesh | Promise<ModelMesh>>(\n          GLTFParser.executeExtensionsCreateAndParse(gltfPrimitive.extensions, context, gltfPrimitive, meshInfo)\n        );\n\n        if (mesh) {\n          if (mesh instanceof ModelMesh) {\n            // @ts-ignore\n            mesh._associationSuperResource(glTFResource);\n            resolve(mesh);\n          } else {\n            mesh.then((mesh) => {\n              // @ts-ignore\n              mesh._associationSuperResource(glTFResource);\n              resolve(mesh);\n            });\n          }\n        } else {\n          const mesh = new ModelMesh(engine, meshInfo.name || i + \"\");\n          // @ts-ignore\n          mesh._associationSuperResource(glTFResource);\n\n          const meshRestoreInfo = new ModelMeshRestoreInfo();\n          meshRestoreInfo.mesh = mesh;\n          context.contentRestorer.meshes.push(meshRestoreInfo);\n\n          GLTFMeshParser._parseMeshFromGLTFPrimitive(\n            context,\n            mesh,\n            meshRestoreInfo,\n            meshInfo,\n            gltfPrimitive,\n            glTF,\n            context.params.keepMeshData\n          ).then(resolve);\n        }\n      });\n    }\n\n    return Promise.all(primitivePromises);\n  }\n}\n\ninterface BlendShapeData {\n  blendShape: BlendShape;\n  restoreInfo: BlendShapeRestoreInfo;\n}\n","import {\n  Camera,\n  Entity,\n  Material,\n  Mesh,\n  MeshRenderer,\n  ModelMesh,\n  Skin,\n  SkinnedMeshRenderer\n} from \"@galacean/engine-core\";\nimport { BoundingBox, Matrix } from \"@galacean/engine-math\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport { CameraType, ICamera, INode } from \"../GLTFSchema\";\nimport { GLTFMaterialParser } from \"./GLTFMaterialParser\";\nimport { GLTFParser } from \"./GLTFParser\";\nimport { GLTFParserContext, GLTFParserType, registerGLTFParser } from \"./GLTFParserContext\";\n\n@registerGLTFParser(GLTFParserType.Scene)\nexport class GLTFSceneParser extends GLTFParser {\n  parse(context: GLTFParserContext, index: number): Promise<Entity> {\n    const {\n      glTF: { scenes, scene = 0 },\n      glTFResource\n    } = context;\n    const sceneInfo = scenes[index];\n    const sceneExtensions = sceneInfo.extensions;\n\n    const engine = glTFResource.engine;\n    const isDefaultScene = scene === index;\n    const sceneNodes = sceneInfo.nodes || [];\n    let sceneRoot: Entity;\n\n    if (sceneNodes.length === 1) {\n      sceneRoot = context.get<Entity>(GLTFParserType.Entity, sceneNodes[0]);\n    } else {\n      sceneRoot = new Entity(engine, \"GLTF_ROOT\");\n      // @ts-ignore\n      sceneRoot._markAsTemplate(glTFResource);\n      for (let i = 0; i < sceneNodes.length; i++) {\n        const childEntity = context.get<Entity>(GLTFParserType.Entity, sceneNodes[i]);\n        sceneRoot.addChild(childEntity);\n      }\n    }\n\n    if (isDefaultScene) {\n      glTFResource._defaultSceneRoot = sceneRoot;\n    }\n\n    const promises = new Array<Promise<void[]>>();\n\n    for (let i = 0; i < sceneNodes.length; i++) {\n      promises.push(this._parseEntityComponent(context, sceneNodes[i]));\n    }\n\n    return Promise.all(promises).then(() => {\n      GLTFParser.executeExtensionsAdditiveAndParse(sceneExtensions, context, sceneRoot, sceneInfo);\n      return sceneRoot;\n    });\n  }\n\n  private _parseEntityComponent(context: GLTFParserContext, index: number): Promise<void[]> {\n    const { glTF, glTFResource } = context;\n    const entityInfo = glTF.nodes[index];\n    const { camera: cameraID, mesh: meshID } = entityInfo;\n    const entity = context.get<Entity>(GLTFParserType.Entity, index);\n    let promise: Promise<void>;\n\n    if (cameraID !== undefined) {\n      this._createCamera(glTFResource, glTF.cameras[cameraID], entity);\n    }\n\n    if (meshID !== undefined) {\n      promise = this._createRenderer(context, entityInfo, entity);\n    }\n\n    return Promise.resolve(promise).then(() => {\n      const promises = [];\n      const children = entityInfo.children;\n\n      if (children) {\n        for (let i = 0; i < children.length; i++) {\n          promises.push(this._parseEntityComponent(context, children[i]));\n        }\n      }\n\n      return Promise.all(promises);\n    });\n  }\n\n  private _createCamera(resource: GLTFResource, cameraSchema: ICamera, entity: Entity): void {\n    const { orthographic, perspective, type } = cameraSchema;\n    const camera = entity.addComponent(Camera);\n\n    if (type === CameraType.ORTHOGRAPHIC) {\n      const { xmag, ymag, zfar, znear } = orthographic;\n\n      camera.isOrthographic = true;\n\n      if (znear !== undefined) {\n        camera.nearClipPlane = znear;\n      }\n      if (zfar !== undefined) {\n        camera.farClipPlane = zfar;\n      }\n\n      camera.orthographicSize = Math.max(ymag ?? 0, xmag ?? 0) / 2;\n    } else if (type === CameraType.PERSPECTIVE) {\n      const { aspectRatio, yfov, zfar, znear } = perspective;\n\n      if (aspectRatio !== undefined) {\n        camera.aspectRatio = aspectRatio;\n      }\n      if (yfov !== undefined) {\n        camera.fieldOfView = (yfov * 180) / Math.PI;\n      }\n      if (zfar !== undefined) {\n        camera.farClipPlane = zfar;\n      }\n      if (znear !== undefined) {\n        camera.nearClipPlane = znear;\n      }\n    }\n\n    resource.cameras ||= [];\n    resource.cameras.push(camera);\n    // @todo: use engine camera by default\n    camera.enabled = false;\n  }\n\n  private _createRenderer(context: GLTFParserContext, entityInfo: INode, entity: Entity): Promise<void> {\n    const { mesh: meshID, skin: skinID } = entityInfo;\n    const glTFMesh = context.glTF.meshes[meshID];\n\n    const glTFMeshPrimitives = glTFMesh.primitives;\n    const rendererCount = glTFMeshPrimitives.length;\n    const blendShapeWeights = entityInfo.weights || glTFMesh.weights;\n    const materialPromises = new Array<Promise<Material>>(rendererCount);\n\n    for (let i = 0; i < rendererCount; i++) {\n      materialPromises[i] = context.get<Material>(GLTFParserType.Material, glTFMeshPrimitives[i].material ?? -1);\n    }\n\n    return Promise.all([\n      context.get<ModelMesh[]>(GLTFParserType.Mesh, meshID),\n      skinID !== undefined && context.get<Skin>(GLTFParserType.Skin, skinID),\n      Promise.all(materialPromises)\n    ]).then(([meshes, skin, materials]) => {\n      for (let i = 0; i < rendererCount; i++) {\n        const material = materials[i] || GLTFMaterialParser._getDefaultMaterial(context.glTFResource.engine);\n        const glTFPrimitive = glTFMeshPrimitives[i];\n        const mesh = meshes[i];\n\n        let renderer: MeshRenderer | SkinnedMeshRenderer;\n\n        if (skin || blendShapeWeights) {\n          const skinRenderer = entity.addComponent(SkinnedMeshRenderer);\n          skinRenderer.mesh = mesh;\n          if (skin) {\n            this._computeLocalBounds(skinRenderer, mesh, skin.bones, skin.rootBone, skin.inverseBindMatrices);\n            skinRenderer.skin = skin;\n          }\n          if (blendShapeWeights) {\n            skinRenderer.blendShapeWeights = new Float32Array(blendShapeWeights);\n          }\n          renderer = skinRenderer;\n        } else {\n          renderer = entity.addComponent(MeshRenderer);\n          renderer.mesh = mesh;\n        }\n\n        renderer.setMaterial(material);\n\n        // Enable vertex color if mesh has COLOR_0 vertex element\n        mesh.vertexElements.forEach((element) => {\n          if (element.semantic === \"COLOR_0\") {\n            renderer.enableVertexColor = true;\n          }\n        });\n\n        GLTFParser.executeExtensionsAdditiveAndParse(glTFPrimitive.extensions, context, renderer, glTFPrimitive);\n      }\n    });\n  }\n\n  private _computeLocalBounds(\n    skinnedMeshRenderer: SkinnedMeshRenderer,\n    mesh: Mesh,\n    bones: ReadonlyArray<Entity>,\n    rootBone: Entity,\n    inverseBindMatrices: Matrix[]\n  ): void {\n    const rootBoneIndex = bones.indexOf(rootBone);\n    if (rootBoneIndex !== -1) {\n      BoundingBox.transform(mesh.bounds, inverseBindMatrices[rootBoneIndex], skinnedMeshRenderer.localBounds);\n    } else {\n      // Root bone is not in joints list, we can only compute approximate inverse bind matrix\n      // Average all root bone's children inverse bind matrix\n      const approximateBindMatrix = new Matrix(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n      let subRootBoneCount = this._computeApproximateBindMatrix(\n        bones,\n        inverseBindMatrices,\n        rootBone,\n        approximateBindMatrix\n      );\n\n      if (subRootBoneCount !== 0) {\n        Matrix.multiplyScalar(approximateBindMatrix, 1.0 / subRootBoneCount, approximateBindMatrix);\n        BoundingBox.transform(mesh.bounds, approximateBindMatrix, skinnedMeshRenderer.localBounds);\n      } else {\n        skinnedMeshRenderer.localBounds.copyFrom(mesh.bounds);\n      }\n    }\n  }\n\n  private _computeApproximateBindMatrix(\n    jointEntities: ReadonlyArray<Entity>,\n    inverseBindMatrices: Matrix[],\n    rootEntity: Entity,\n    approximateBindMatrix: Matrix\n  ): number {\n    let subRootBoneCount = 0;\n    const children = rootEntity.children;\n    for (let i = 0, n = children.length; i < n; i++) {\n      const rootChild = children[i];\n      const index = jointEntities.indexOf(rootChild);\n      if (index !== -1) {\n        Matrix.add(approximateBindMatrix, inverseBindMatrices[index], approximateBindMatrix);\n        subRootBoneCount++;\n      } else {\n        subRootBoneCount += this._computeApproximateBindMatrix(\n          jointEntities,\n          inverseBindMatrices,\n          rootChild,\n          approximateBindMatrix\n        );\n      }\n    }\n\n    return subRootBoneCount;\n  }\n}\n","import { Entity, Skin } from \"@galacean/engine-core\";\nimport { Matrix } from \"@galacean/engine-math\";\nimport { GLTFUtils } from \"../GLTFUtils\";\nimport { GLTFParser } from \"./GLTFParser\";\nimport { GLTFParserContext, GLTFParserType, registerGLTFParser } from \"./GLTFParserContext\";\n\n@registerGLTFParser(GLTFParserType.Skin)\nexport class GLTFSkinParser extends GLTFParser {\n  parse(context: GLTFParserContext, index: number): Promise<Skin> {\n    const glTF = context.glTF;\n    const skinInfo = glTF.skins[index];\n    const { inverseBindMatrices, skeleton, joints, name = `SKIN_${index}` } = skinInfo;\n    const jointCount = joints.length;\n\n    const skin = new Skin(name);\n    skin.inverseBindMatrices.length = jointCount;\n\n    const bones = new Array<Entity>(jointCount);\n\n    // parse IBM\n    const accessor = glTF.accessors[inverseBindMatrices];\n    const skinPromise = GLTFUtils.getAccessorBuffer(context, glTF.bufferViews, accessor).then((bufferInfo) => {\n      const entities = context.get<Entity>(GLTFParserType.Entity);\n      const buffer = bufferInfo.data;\n      for (let i = 0; i < jointCount; i++) {\n        const inverseBindMatrix = new Matrix();\n        inverseBindMatrix.copyFromArray(buffer, i * 16);\n        skin.inverseBindMatrices[i] = inverseBindMatrix;\n\n        // Get bones\n        const bone = entities[joints[i]];\n        bones[i] = bone;\n        skin.joints[i] = bone.name;\n      }\n      skin.bones = bones;\n\n      // Get skeleton\n      if (skeleton !== undefined) {\n        const rootBone = entities[skeleton];\n        skin.rootBone = rootBone;\n      } else {\n        const rootBone = this._findSkeletonRootBone(joints, entities);\n        if (rootBone) {\n          skin.rootBone = rootBone;\n        } else {\n          throw \"Failed to find skeleton root bone.\";\n        }\n      }\n\n      return skin;\n    });\n\n    return Promise.resolve(skinPromise);\n  }\n\n  private _findSkeletonRootBone(joints: number[], entities: Entity[]): Entity {\n    const paths = <Record<number, Entity[]>>{};\n    for (const index of joints) {\n      const path = new Array<Entity>();\n      let entity = entities[index];\n      while (entity) {\n        path.unshift(entity);\n        entity = entity.parent;\n      }\n      paths[index] = path;\n    }\n\n    let rootNode = <Entity>null;\n    for (let i = 0; ; i++) {\n      let path = paths[joints[0]];\n      if (i >= path.length) {\n        return rootNode;\n      }\n\n      const entity = path[i];\n      for (let j = 1, m = joints.length; j < m; j++) {\n        path = paths[joints[j]];\n        if (i >= path.length || entity !== path[i]) {\n          return rootNode;\n        }\n      }\n\n      rootNode = entity;\n    }\n  }\n}\n","import { AssetType, Texture, Texture2D, TextureWrapMode, Utils } from \"@galacean/engine-core\";\nimport { BufferTextureRestoreInfo } from \"../../GLTFContentRestorer\";\nimport { TextureWrapMode as GLTFTextureWrapMode } from \"../GLTFSchema\";\nimport { GLTFUtils } from \"../GLTFUtils\";\nimport { GLTFParser } from \"./GLTFParser\";\nimport { GLTFParserContext, GLTFParserType, registerGLTFParser } from \"./GLTFParserContext\";\n\n@registerGLTFParser(GLTFParserType.Texture)\nexport class GLTFTextureParser extends GLTFParser {\n  /** @internal */\n  static _wrapMap = {\n    [GLTFTextureWrapMode.CLAMP_TO_EDGE]: TextureWrapMode.Clamp,\n    [GLTFTextureWrapMode.MIRRORED_REPEAT]: TextureWrapMode.Mirror,\n    [GLTFTextureWrapMode.REPEAT]: TextureWrapMode.Repeat\n  };\n\n  /** @internal */\n  static _parseTexture(\n    context: GLTFParserContext,\n    imageIndex: number,\n    textureIndex: number,\n    sampler?: number,\n    textureName?: string\n  ): Promise<Texture2D> {\n    const { glTFResource, glTF } = context;\n    const { engine, url } = glTFResource;\n    const { uri, bufferView: bufferViewIndex, mimeType, name: imageName } = glTF.images[imageIndex];\n\n    const useSampler = sampler !== undefined;\n    const samplerInfo = useSampler && GLTFUtils.getSamplerInfo(glTF.samplers[sampler]);\n    let texture: Promise<Texture2D>;\n\n    if (uri) {\n      const extIndex = uri.lastIndexOf(\".\");\n      const ext = uri.substring(extIndex + 1);\n      const type = ext.startsWith(\"ktx\") ? AssetType.KTX : AssetType.Texture2D;\n      texture = engine.resourceManager\n        .load<Texture2D>({\n          url: Utils.resolveAbsoluteUrl(url, uri),\n          type,\n          params: {\n            mipmap: samplerInfo?.mipmap\n          }\n        })\n        .onProgress(undefined, context._onTaskDetail)\n        .then<Texture2D>((texture) => {\n          texture.name = textureName || imageName || texture.name || `texture_${textureIndex}`;\n          useSampler && GLTFUtils.parseSampler(texture, samplerInfo);\n          return texture;\n        });\n\n      context._addTaskCompletePromise(texture);\n    } else {\n      const bufferView = glTF.bufferViews[bufferViewIndex];\n\n      texture = context.get<ArrayBuffer>(GLTFParserType.Buffer).then((buffers) => {\n        const buffer = buffers[bufferView.buffer];\n        const imageBuffer = new Uint8Array(buffer, bufferView.byteOffset, bufferView.byteLength);\n\n        return GLTFUtils.loadImageBuffer(imageBuffer, mimeType).then((image) => {\n          const texture = new Texture2D(engine, image.width, image.height, undefined, samplerInfo?.mipmap);\n          texture.setImageSource(image);\n          texture.generateMipmaps();\n\n          texture.name = textureName || imageName || `texture_${textureIndex}`;\n          useSampler && GLTFUtils.parseSampler(texture, samplerInfo);\n\n          const bufferTextureRestoreInfo = new BufferTextureRestoreInfo(texture, bufferView, mimeType);\n          context.contentRestorer.bufferTextures.push(bufferTextureRestoreInfo);\n\n          return texture;\n        });\n      });\n    }\n\n    return texture;\n  }\n\n  parse(context: GLTFParserContext, textureIndex: number): Promise<Texture> {\n    const textureInfo = context.glTF.textures[textureIndex];\n    const glTFResource = context.glTFResource;\n    const { sampler, source: imageIndex = 0, name: textureName, extensions } = textureInfo;\n\n    let texture = <Texture | Promise<Texture>>(\n      GLTFParser.executeExtensionsCreateAndParse(extensions, context, textureInfo, textureIndex)\n    );\n\n    if (!texture) {\n      texture = GLTFTextureParser._parseTexture(context, imageIndex, textureIndex, sampler, textureName);\n    }\n\n    return Promise.resolve(texture).then((texture) => {\n      GLTFParser.executeExtensionsAdditiveAndParse(extensions, context, texture, textureInfo);\n      // @ts-ignore\n      texture._associationSuperResource(glTFResource);\n      return texture;\n    });\n  }\n}\n","import { Logger } from \"@galacean/engine-core\";\nimport { GLTFParser } from \"./GLTFParser\";\nimport { GLTFParserContext, GLTFParserType, registerGLTFParser } from \"./GLTFParserContext\";\n\n@registerGLTFParser(GLTFParserType.Validator)\nexport class GLTFValidator extends GLTFParser {\n  parse(context: GLTFParserContext): Promise<void> {\n    const {\n      asset: { version },\n      extensionsUsed,\n      extensionsRequired\n    } = context.glTF;\n\n    const glTFVersion = Number(version);\n    if (!(glTFVersion >= 2 && glTFVersion < 3)) {\n      throw \"Only support glTF 2.x.\";\n    }\n\n    if (extensionsUsed) {\n      Logger.info(\"extensionsUsed: \", extensionsUsed);\n      for (let i = 0; i < extensionsUsed.length; i++) {\n        const extensionUsed = extensionsUsed[i];\n        if (!GLTFParser.hasExtensionParser(extensionUsed)) {\n          Logger.warn(`Extension ${extensionUsed} is not implemented, you can customize this extension in gltf.`);\n        }\n      }\n    }\n\n    if (extensionsRequired) {\n      Logger.info(`extensionsRequired: ${extensionsRequired}`);\n      for (let i = 0; i < extensionsRequired.length; i++) {\n        const extensionRequired = extensionsRequired[i];\n\n        if (!GLTFParser.hasExtensionParser(extensionRequired)) {\n          Logger.error(`GLTF parser has not supported required extension ${extensionRequired}.`);\n        }\n      }\n    }\n\n    return Promise.resolve(null);\n  }\n}\n","import { registerGLTFParser, GLTFParserType, GLTFParserContext } from \"./GLTFParserContext\";\nimport { GLTFParser } from \"./GLTFParser\";\n\n@registerGLTFParser(GLTFParserType.BufferView)\nexport class GLTFBufferViewParser extends GLTFParser {\n  parse(context: GLTFParserContext, index: number): Promise<Uint8Array> {\n    const bufferView = context.glTF.bufferViews[index];\n    const { extensions, byteOffset = 0, byteLength, buffer: bufferIndex } = bufferView;\n    return extensions\n      ? <Promise<Uint8Array>>GLTFParser.executeExtensionsCreateAndParse(extensions, context, bufferView)\n      : context\n          .get<ArrayBuffer>(GLTFParserType.Buffer, bufferIndex)\n          .then((buffer) => new Uint8Array(buffer, byteOffset, byteLength));\n  }\n}\n","import {\n  AnimationClip,\n  AnimatorController,\n  AnimatorControllerLayer,\n  AnimatorStateMachine\n} from \"@galacean/engine-core\";\nimport { GLTFParser } from \"./GLTFParser\";\nimport { GLTFParserContext, GLTFParserType, registerGLTFParser } from \"./GLTFParserContext\";\n\n@registerGLTFParser(GLTFParserType.AnimatorController)\nexport class GLTFAnimatorControllerParser extends GLTFParser {\n  parse(context: GLTFParserContext): Promise<AnimatorController> {\n    if (!context.needAnimatorController) {\n      return Promise.resolve(null);\n    }\n\n    return context.get<AnimationClip>(GLTFParserType.Animation).then((animations) => {\n      const animatorController = this._createAnimatorController(context, animations);\n      return Promise.resolve(animatorController);\n    });\n  }\n\n  private _createAnimatorController(context: GLTFParserContext, animations: AnimationClip[]): AnimatorController {\n    const { glTFResource } = context;\n    const engine = glTFResource.engine;\n    const animatorController = new AnimatorController(engine);\n    const layer = new AnimatorControllerLayer(\"layer\");\n    const animatorStateMachine = new AnimatorStateMachine();\n    animatorController.addLayer(layer);\n    layer.stateMachine = animatorStateMachine;\n    if (animations) {\n      for (let i = 0; i < animations.length; i++) {\n        const animationClip = animations[i];\n        const name = animationClip.name;\n        const uniqueName = animatorStateMachine.makeUniqueStateName(name);\n        if (uniqueName !== name) {\n          console.warn(`AnimatorState name is existed, name: ${name} reset to ${uniqueName}`);\n        }\n        const animatorState = animatorStateMachine.addState(uniqueName);\n        animatorState.clip = animationClip;\n      }\n    }\n\n    return animatorController;\n  }\n}\n","// Source: https://github.com/zeux/meshoptimizer/blob/master/js/meshopt_decoder.js\n// This file is part of meshoptimizer library and is distributed under the terms of MIT License.\n// Copyright (C) 2016-2022, by Arseny Kapoulkine (arseny.kapoulkine@gmail.com)\n\nimport { SystemInfo } from \"@galacean/engine-core\";\n\ninterface WorkerItem {\n  object: Worker;\n  pending: number;\n  requests: Record<string, any>;\n}\n\nexport let ready: Promise<{\n  workerCount: number;\n  useWorkers: (count?: number) => void;\n  decodeGltfBuffer: (count, stride, source, mode, filter) => Promise<Uint8Array>;\n  release: () => void;\n}>;\n\nexport function getMeshoptDecoder() {\n  if (ready) return ready;\n  const wasm_base =\n    \"b9H79Tebbbe8Fv9Gbb9Gvuuuuueu9Giuuub9Geueu9Giuuueuikqbeeedddillviebeoweuec:q;iekr;leDo9TW9T9VV95dbH9F9F939H79T9F9J9H229F9Jt9VV7bb8A9TW79O9V9Wt9F9KW9J9V9KW9wWVtW949c919M9MWVbeY9TW79O9V9Wt9F9KW9J9V9KW69U9KW949c919M9MWVbdE9TW79O9V9Wt9F9KW9J9V9KW69U9KW949tWG91W9U9JWbiL9TW79O9V9Wt9F9KW9J9V9KWS9P2tWV9p9JtblK9TW79O9V9Wt9F9KW9J9V9KWS9P2tWV9r919HtbvL9TW79O9V9Wt9F9KW9J9V9KWS9P2tWVT949Wbol79IV9Rbrq:P8Yqdbk;3sezu8Jjjjjbcj;eb9Rgv8Kjjjjbc9:hodnadcefal0mbcuhoaiRbbc:Ge9hmbavaialfgrad9Radz1jjjbhwcj;abad9UhoaicefhldnadTmbaoc;WFbGgocjdaocjd6EhDcbhqinaqae9pmeaDaeaq9RaqaDfae6Egkcsfgocl4cifcd4hxdndndndnaoc9WGgmTmbcbhPcehsawcjdfhzalhHinaraH9Rax6midnaraHaxfgl9RcK6mbczhoinawcj;cbfaogifgoc9WfhOdndndndndnaHaic9WfgAco4fRbbaAci4coG4ciGPlbedibkaO9cb83ibaOcwf9cb83ibxikaOalRblalRbbgAco4gCaCciSgCE86bbaocGfalclfaCfgORbbaAcl4ciGgCaCciSgCE86bbaocVfaOaCfgORbbaAcd4ciGgCaCciSgCE86bbaoc7faOaCfgORbbaAciGgAaAciSgAE86bbaoctfaOaAfgARbbalRbegOco4gCaCciSgCE86bbaoc91faAaCfgARbbaOcl4ciGgCaCciSgCE86bbaoc4faAaCfgARbbaOcd4ciGgCaCciSgCE86bbaoc93faAaCfgARbbaOciGgOaOciSgOE86bbaoc94faAaOfgARbbalRbdgOco4gCaCciSgCE86bbaoc95faAaCfgARbbaOcl4ciGgCaCciSgCE86bbaoc96faAaCfgARbbaOcd4ciGgCaCciSgCE86bbaoc97faAaCfgARbbaOciGgOaOciSgOE86bbaoc98faAaOfgORbbalRbiglco4gAaAciSgAE86bbaoc99faOaAfgORbbalcl4ciGgAaAciSgAE86bbaoc9:faOaAfgORbbalcd4ciGgAaAciSgAE86bbaocufaOaAfgoRbbalciGglalciSglE86bbaoalfhlxdkaOalRbwalRbbgAcl4gCaCcsSgCE86bbaocGfalcwfaCfgORbbaAcsGgAaAcsSgAE86bbaocVfaOaAfgORbbalRbegAcl4gCaCcsSgCE86bbaoc7faOaCfgORbbaAcsGgAaAcsSgAE86bbaoctfaOaAfgORbbalRbdgAcl4gCaCcsSgCE86bbaoc91faOaCfgORbbaAcsGgAaAcsSgAE86bbaoc4faOaAfgORbbalRbigAcl4gCaCcsSgCE86bbaoc93faOaCfgORbbaAcsGgAaAcsSgAE86bbaoc94faOaAfgORbbalRblgAcl4gCaCcsSgCE86bbaoc95faOaCfgORbbaAcsGgAaAcsSgAE86bbaoc96faOaAfgORbbalRbvgAcl4gCaCcsSgCE86bbaoc97faOaCfgORbbaAcsGgAaAcsSgAE86bbaoc98faOaAfgORbbalRbogAcl4gCaCcsSgCE86bbaoc99faOaCfgORbbaAcsGgAaAcsSgAE86bbaoc9:faOaAfgORbbalRbrglcl4gAaAcsSgAE86bbaocufaOaAfgoRbbalcsGglalcsSglE86bbaoalfhlxekaOal8Pbb83bbaOcwfalcwf8Pbb83bbalczfhlkdnaiam9pmbaiczfhoaral9RcL0mekkaiam6mialTmidnakTmbawaPfRbbhOcbhoazhiinaiawcj;cbfaofRbbgAce4cbaAceG9R7aOfgO86bbaiadfhiaocefgoak9hmbkkazcefhzaPcefgPad6hsalhHaPad9hmexvkkcbhlasceGmdxikalaxad2fhCdnakTmbcbhHcehsawcjdfhminaral9Rax6mialTmdalaxfhlawaHfRbbhOcbhoamhiinaiawcj;cbfaofRbbgAce4cbaAceG9R7aOfgO86bbaiadfhiaocefgoak9hmbkamcefhmaHcefgHad6hsaHad9hmbkaChlxikcbhocehsinaral9Rax6mdalTmealaxfhlaocefgoad6hsadao9hmbkaChlxdkcbhlasceGTmekc9:hoxikabaqad2fawcjdfakad2z1jjjb8Aawawcjdfakcufad2fadz1jjjb8Aakaqfhqalmbkc9:hoxekcbc99aral9Radcaadca0ESEhokavcj;ebf8Kjjjjbaok;yzeHu8Jjjjjbc;ae9Rgv8Kjjjjbc9:hodnaeci9UgrcHfal0mbcuhoaiRbbgwc;WeGc;Ge9hmbawcsGgDce0mbavc;abfcFecjez:jjjjb8AavcUf9cu83ibavc8Wf9cu83ibavcyf9cu83ibavcaf9cu83ibavcKf9cu83ibavczf9cu83ibav9cu83iwav9cu83ibaialfc9WfhqaicefgwarfhodnaeTmbcmcsaDceSEhkcbhxcbhmcbhDcbhicbhlindnaoaq9nmbc9:hoxikdndnawRbbgrc;Ve0mbavc;abfalarcl4cu7fcsGcitfgPydlhsaPydbhzdnarcsGgPak9pmbavaiarcu7fcsGcdtfydbaxaPEhraPThPdndnadcd9hmbabaDcetfgHaz87ebaHcdfas87ebaHclfar87ebxekabaDcdtfgHazBdbaHclfasBdbaHcwfarBdbkaxaPfhxavc;abfalcitfgHarBdbaHasBdlavaicdtfarBdbavc;abfalcefcsGglcitfgHazBdbaHarBdlaiaPfhialcefhlxdkdndnaPcsSmbamaPfaPc987fcefhmxekaocefhrao8SbbgPcFeGhHdndnaPcu9mmbarhoxekaocvfhoaHcFbGhHcrhPdninar8SbbgOcFbGaPtaHVhHaOcu9kmearcefhraPcrfgPc8J9hmbxdkkarcefhokaHce4cbaHceG9R7amfhmkdndnadcd9hmbabaDcetfgraz87ebarcdfas87ebarclfam87ebxekabaDcdtfgrazBdbarclfasBdbarcwfamBdbkavc;abfalcitfgramBdbarasBdlavaicdtfamBdbavc;abfalcefcsGglcitfgrazBdbaramBdlaicefhialcefhlxekdnarcpe0mbaxcefgOavaiaqarcsGfRbbgPcl49RcsGcdtfydbaPcz6gHEhravaiaP9RcsGcdtfydbaOaHfgsaPcsGgOEhPaOThOdndnadcd9hmbabaDcetfgzax87ebazcdfar87ebazclfaP87ebxekabaDcdtfgzaxBdbazclfarBdbazcwfaPBdbkavaicdtfaxBdbavc;abfalcitfgzarBdbazaxBdlavaicefgicsGcdtfarBdbavc;abfalcefcsGcitfgzaPBdbazarBdlavaiaHfcsGgicdtfaPBdbavc;abfalcdfcsGglcitfgraxBdbaraPBdlalcefhlaiaOfhiasaOfhxxekaxcbaoRbbgzEgAarc;:eSgrfhsazcsGhCazcl4hXdndnazcs0mbascefhOxekashOavaiaX9RcsGcdtfydbhskdndnaCmbaOcefhxxekaOhxavaiaz9RcsGcdtfydbhOkdndnarTmbaocefhrxekaocdfhrao8SbegHcFeGhPdnaHcu9kmbaocofhAaPcFbGhPcrhodninar8SbbgHcFbGaotaPVhPaHcu9kmearcefhraocrfgoc8J9hmbkaAhrxekarcefhrkaPce4cbaPceG9R7amfgmhAkdndnaXcsSmbarhPxekarcefhPar8SbbgocFeGhHdnaocu9kmbarcvfhsaHcFbGhHcrhodninaP8SbbgrcFbGaotaHVhHarcu9kmeaPcefhPaocrfgoc8J9hmbkashPxekaPcefhPkaHce4cbaHceG9R7amfgmhskdndnaCcsSmbaPhoxekaPcefhoaP8SbbgrcFeGhHdnarcu9kmbaPcvfhOaHcFbGhHcrhrdninao8SbbgPcFbGartaHVhHaPcu9kmeaocefhoarcrfgrc8J9hmbkaOhoxekaocefhokaHce4cbaHceG9R7amfgmhOkdndnadcd9hmbabaDcetfgraA87ebarcdfas87ebarclfaO87ebxekabaDcdtfgraABdbarclfasBdbarcwfaOBdbkavc;abfalcitfgrasBdbaraABdlavaicdtfaABdbavc;abfalcefcsGcitfgraOBdbarasBdlavaicefgicsGcdtfasBdbavc;abfalcdfcsGcitfgraABdbaraOBdlavaiazcz6aXcsSVfgicsGcdtfaOBdbaiaCTaCcsSVfhialcifhlkawcefhwalcsGhlaicsGhiaDcifgDae6mbkkcbc99aoaqSEhokavc;aef8Kjjjjbaok:llevu8Jjjjjbcz9Rhvc9:hodnaecvfal0mbcuhoaiRbbc;:eGc;qe9hmbav9cb83iwaicefhraialfc98fhwdnaeTmbdnadcdSmbcbhDindnaraw6mbc9:skarcefhoar8SbbglcFeGhidndnalcu9mmbaohrxekarcvfhraicFbGhicrhldninao8SbbgdcFbGaltaiVhiadcu9kmeaocefhoalcrfglc8J9hmbxdkkaocefhrkabaDcdtfaicd4cbaice4ceG9R7avcwfaiceGcdtVgoydbfglBdbaoalBdbaDcefgDae9hmbxdkkcbhDindnaraw6mbc9:skarcefhoar8SbbglcFeGhidndnalcu9mmbaohrxekarcvfhraicFbGhicrhldninao8SbbgdcFbGaltaiVhiadcu9kmeaocefhoalcrfglc8J9hmbxdkkaocefhrkabaDcetfaicd4cbaice4ceG9R7avcwfaiceGcdtVgoydbfgl87ebaoalBdbaDcefgDae9hmbkkcbc99arawSEhokaok:Lvoeue99dud99eud99dndnadcl9hmbaeTmeindndnabcdfgd8Sbb:Yab8Sbbgi:Ygl:l:tabcefgv8Sbbgo:Ygr:l:tgwJbb;:9cawawNJbbbbawawJbbbb9GgDEgq:mgkaqaicb9iEalMgwawNakaqaocb9iEarMgqaqNMM:r:vglNJbbbZJbbb:;aDEMgr:lJbbb9p9DTmbar:Ohixekcjjjj94hikadai86bbdndnaqalNJbbbZJbbb:;aqJbbbb9GEMgq:lJbbb9p9DTmbaq:Ohdxekcjjjj94hdkavad86bbdndnawalNJbbbZJbbb:;awJbbbb9GEMgw:lJbbb9p9DTmbaw:Ohdxekcjjjj94hdkabad86bbabclfhbaecufgembxdkkaeTmbindndnabclfgd8Ueb:Yab8Uebgi:Ygl:l:tabcdfgv8Uebgo:Ygr:l:tgwJb;:FSawawNJbbbbawawJbbbb9GgDEgq:mgkaqaicb9iEalMgwawNakaqaocb9iEarMgqaqNMM:r:vglNJbbbZJbbb:;aDEMgr:lJbbb9p9DTmbar:Ohixekcjjjj94hikadai87ebdndnaqalNJbbbZJbbb:;aqJbbbb9GEMgq:lJbbb9p9DTmbaq:Ohdxekcjjjj94hdkavad87ebdndnawalNJbbbZJbbb:;awJbbbb9GEMgw:lJbbb9p9DTmbaw:Ohdxekcjjjj94hdkabad87ebabcwfhbaecufgembkkk;siliui99iue99dnaeTmbcbhiabhlindndnJ;Zl81Zalcof8UebgvciV:Y:vgoal8Ueb:YNgrJb;:FSNJbbbZJbbb:;arJbbbb9GEMgw:lJbbb9p9DTmbaw:OhDxekcjjjj94hDkalclf8Uebhqalcdf8UebhkabavcefciGaiVcetfaD87ebdndnaoak:YNgwJb;:FSNJbbbZJbbb:;awJbbbb9GEMgx:lJbbb9p9DTmbax:Ohkxekcjjjj94hkkabavcdfciGaiVcetfak87ebdndnaoaq:YNgoJb;:FSNJbbbZJbbb:;aoJbbbb9GEMgx:lJbbb9p9DTmbax:Ohqxekcjjjj94hqkabavcufciGaiVcetfaq87ebdndnJbbjZararN:tawawN:taoaoN:tgrJbbbbarJbbbb9GE:rJb;:FSNJbbbZMgr:lJbbb9p9DTmbar:Ohqxekcjjjj94hqkabavciGaiVcetfaq87ebalcwfhlaiclfhiaecufgembkkk9mbdnadcd4ae2geTmbinababydbgdcwtcw91:Yadce91cjjj;8ifcjjj98G::NUdbabclfhbaecufgembkkk9teiucbcbydj1jjbgeabcifc98GfgbBdj1jjbdndnabZbcztgd9nmbcuhiabad9RcFFifcz4nbcuSmekaehikaik;LeeeudndnaeabVciGTmbabhixekdndnadcz9pmbabhixekabhiinaiaeydbBdbaiclfaeclfydbBdbaicwfaecwfydbBdbaicxfaecxfydbBdbaiczfhiaeczfheadc9Wfgdcs0mbkkadcl6mbinaiaeydbBdbaeclfheaiclfhiadc98fgdci0mbkkdnadTmbinaiaeRbb86bbaicefhiaecefheadcufgdmbkkabk;aeedudndnabciGTmbabhixekaecFeGc:b:c:ew2hldndnadcz9pmbabhixekabhiinaialBdbaicxfalBdbaicwfalBdbaiclfalBdbaiczfhiadc9Wfgdcs0mbkkadcl6mbinaialBdbaiclfhiadc98fgdci0mbkkdnadTmbinaiae86bbaicefhiadcufgdmbkkabkkkebcjwklz9Kbb\";\n  const wasm_simd =\n    \"b9H79TebbbeKl9Gbb9Gvuuuuueu9Giuuub9Geueuikqbbebeedddilve9Weeeviebeoweuec:q;Aekr;leDo9TW9T9VV95dbH9F9F939H79T9F9J9H229F9Jt9VV7bb8A9TW79O9V9Wt9F9KW9J9V9KW9wWVtW949c919M9MWVbdY9TW79O9V9Wt9F9KW9J9V9KW69U9KW949c919M9MWVblE9TW79O9V9Wt9F9KW9J9V9KW69U9KW949tWG91W9U9JWbvL9TW79O9V9Wt9F9KW9J9V9KWS9P2tWV9p9JtboK9TW79O9V9Wt9F9KW9J9V9KWS9P2tWV9r919HtbrL9TW79O9V9Wt9F9KW9J9V9KWS9P2tWVT949Wbwl79IV9RbDq;t9tqlbzik9:evu8Jjjjjbcz9Rhbcbheincbhdcbhiinabcwfadfaicjuaead4ceGglE86bbaialfhiadcefgdcw9hmbkaec:q:yjjbfai86bbaecitc:q1jjbfab8Piw83ibaecefgecjd9hmbkk;h8JlHud97euo978Jjjjjbcj;kb9Rgv8Kjjjjbc9:hodnadcefal0mbcuhoaiRbbc:Ge9hmbavaialfgrad9Rad;8qbbcj;abad9UhoaicefhldnadTmbaoc;WFbGgocjdaocjd6EhwcbhDinaDae9pmeawaeaD9RaDawfae6Egqcsfgoc9WGgkci2hxakcethmaocl4cifcd4hPabaDad2fhscbhzdnincehHalhOcbhAdninaraO9RaP6miavcj;cbfaAak2fhCaOaPfhlcbhidnakc;ab6mbaral9Rc;Gb6mbcbhoinaCaofhidndndndndnaOaoco4fRbbgXciGPlbedibkaipxbbbbbbbbbbbbbbbbpklbxikaialpbblalpbbbgQclp:meaQpmbzeHdOiAlCvXoQrLgQcdp:meaQpmbzeHdOiAlCvXoQrLpxiiiiiiiiiiiiiiiip9ogLpxiiiiiiiiiiiiiiiip8JgQp5b9cjF;8;4;W;G;ab9:9cU1:NgKcitc:q1jjbfpbibaKc:q:yjjbfpbbbgYaYpmbbbbbbbbbbbbbbbbaQp5e9cjF;8;4;W;G;ab9:9cU1:NgKcitc:q1jjbfpbibp9UpmbedilvorzHOACXQLpPaLaQp9spklbalclfaYpQbfaKc:q:yjjbfRbbfhlxdkaialpbbwalpbbbgQclp:meaQpmbzeHdOiAlCvXoQrLpxssssssssssssssssp9ogLpxssssssssssssssssp8JgQp5b9cjF;8;4;W;G;ab9:9cU1:NgKcitc:q1jjbfpbibaKc:q:yjjbfpbbbgYaYpmbbbbbbbbbbbbbbbbaQp5e9cjF;8;4;W;G;ab9:9cU1:NgKcitc:q1jjbfpbibp9UpmbedilvorzHOACXQLpPaLaQp9spklbalcwfaYpQbfaKc:q:yjjbfRbbfhlxekaialpbbbpklbalczfhlkdndndndndnaXcd4ciGPlbedibkaipxbbbbbbbbbbbbbbbbpklzxikaialpbblalpbbbgQclp:meaQpmbzeHdOiAlCvXoQrLgQcdp:meaQpmbzeHdOiAlCvXoQrLpxiiiiiiiiiiiiiiiip9ogLpxiiiiiiiiiiiiiiiip8JgQp5b9cjF;8;4;W;G;ab9:9cU1:NgKcitc:q1jjbfpbibaKc:q:yjjbfpbbbgYaYpmbbbbbbbbbbbbbbbbaQp5e9cjF;8;4;W;G;ab9:9cU1:NgKcitc:q1jjbfpbibp9UpmbedilvorzHOACXQLpPaLaQp9spklzalclfaYpQbfaKc:q:yjjbfRbbfhlxdkaialpbbwalpbbbgQclp:meaQpmbzeHdOiAlCvXoQrLpxssssssssssssssssp9ogLpxssssssssssssssssp8JgQp5b9cjF;8;4;W;G;ab9:9cU1:NgKcitc:q1jjbfpbibaKc:q:yjjbfpbbbgYaYpmbbbbbbbbbbbbbbbbaQp5e9cjF;8;4;W;G;ab9:9cU1:NgKcitc:q1jjbfpbibp9UpmbedilvorzHOACXQLpPaLaQp9spklzalcwfaYpQbfaKc:q:yjjbfRbbfhlxekaialpbbbpklzalczfhlkdndndndndnaXcl4ciGPlbedibkaipxbbbbbbbbbbbbbbbbpklaxikaialpbblalpbbbgQclp:meaQpmbzeHdOiAlCvXoQrLgQcdp:meaQpmbzeHdOiAlCvXoQrLpxiiiiiiiiiiiiiiiip9ogLpxiiiiiiiiiiiiiiiip8JgQp5b9cjF;8;4;W;G;ab9:9cU1:NgKcitc:q1jjbfpbibaKc:q:yjjbfpbbbgYaYpmbbbbbbbbbbbbbbbbaQp5e9cjF;8;4;W;G;ab9:9cU1:NgKcitc:q1jjbfpbibp9UpmbedilvorzHOACXQLpPaLaQp9spklaalclfaYpQbfaKc:q:yjjbfRbbfhlxdkaialpbbwalpbbbgQclp:meaQpmbzeHdOiAlCvXoQrLpxssssssssssssssssp9ogLpxssssssssssssssssp8JgQp5b9cjF;8;4;W;G;ab9:9cU1:NgKcitc:q1jjbfpbibaKc:q:yjjbfpbbbgYaYpmbbbbbbbbbbbbbbbbaQp5e9cjF;8;4;W;G;ab9:9cU1:NgKcitc:q1jjbfpbibp9UpmbedilvorzHOACXQLpPaLaQp9spklaalcwfaYpQbfaKc:q:yjjbfRbbfhlxekaialpbbbpklaalczfhlkdndndndndnaXco4Plbedibkaipxbbbbbbbbbbbbbbbbpkl8WxikaialpbblalpbbbgQclp:meaQpmbzeHdOiAlCvXoQrLgQcdp:meaQpmbzeHdOiAlCvXoQrLpxiiiiiiiiiiiiiiiip9ogLpxiiiiiiiiiiiiiiiip8JgQp5b9cjF;8;4;W;G;ab9:9cU1:NgXcitc:q1jjbfpbibaXc:q:yjjbfpbbbgYaYpmbbbbbbbbbbbbbbbbaQp5e9cjF;8;4;W;G;ab9:9cU1:NgXcitc:q1jjbfpbibp9UpmbedilvorzHOACXQLpPaLaQp9spkl8WalclfaYpQbfaXc:q:yjjbfRbbfhlxdkaialpbbwalpbbbgQclp:meaQpmbzeHdOiAlCvXoQrLpxssssssssssssssssp9ogLpxssssssssssssssssp8JgQp5b9cjF;8;4;W;G;ab9:9cU1:NgXcitc:q1jjbfpbibaXc:q:yjjbfpbbbgYaYpmbbbbbbbbbbbbbbbbaQp5e9cjF;8;4;W;G;ab9:9cU1:NgXcitc:q1jjbfpbibp9UpmbedilvorzHOACXQLpPaLaQp9spkl8WalcwfaYpQbfaXc:q:yjjbfRbbfhlxekaialpbbbpkl8Walczfhlkaoc;abfhiaocjefak0meaihoaral9Rc;Fb0mbkkdndnaiak9pmbaici4hoinaral9RcK6mdaCaifhXdndndndndnaOaico4fRbbaocoG4ciGPlbedibkaXpxbbbbbbbbbbbbbbbbpklbxikaXalpbblalpbbbgQclp:meaQpmbzeHdOiAlCvXoQrLgQcdp:meaQpmbzeHdOiAlCvXoQrLpxiiiiiiiiiiiiiiiip9ogLpxiiiiiiiiiiiiiiiip8JgQp5b9cjF;8;4;W;G;ab9:9cU1:NgKcitc:q1jjbfpbibaKc:q:yjjbfpbbbgYaYpmbbbbbbbbbbbbbbbbaQp5e9cjF;8;4;W;G;ab9:9cU1:NgKcitc:q1jjbfpbibp9UpmbedilvorzHOACXQLpPaLaQp9spklbalclfaYpQbfaKc:q:yjjbfRbbfhlxdkaXalpbbwalpbbbgQclp:meaQpmbzeHdOiAlCvXoQrLpxssssssssssssssssp9ogLpxssssssssssssssssp8JgQp5b9cjF;8;4;W;G;ab9:9cU1:NgKcitc:q1jjbfpbibaKc:q:yjjbfpbbbgYaYpmbbbbbbbbbbbbbbbbaQp5e9cjF;8;4;W;G;ab9:9cU1:NgKcitc:q1jjbfpbibp9UpmbedilvorzHOACXQLpPaLaQp9spklbalcwfaYpQbfaKc:q:yjjbfRbbfhlxekaXalpbbbpklbalczfhlkaocdfhoaiczfgiak6mbkkalTmbaAci6hHalhOaAcefgohAaoclSmdxekkcbhlaHceGmdkdnakTmbavcjdfazfhiavazfpbdbhYcbhXinaiavcj;cbfaXfgopblbgLcep9TaLpxeeeeeeeeeeeeeeeegQp9op9Hp9rgLaoakfpblbg8Acep9Ta8AaQp9op9Hp9rg8ApmbzeHdOiAlCvXoQrLgEaoamfpblbg3cep9Ta3aQp9op9Hp9rg3aoaxfpblbg5cep9Ta5aQp9op9Hp9rg5pmbzeHdOiAlCvXoQrLg8EpmbezHdiOAlvCXorQLgQaQpmbedibedibedibediaYp9UgYp9AdbbaiadfgoaYaQaQpmlvorlvorlvorlvorp9UgYp9AdbbaoadfgoaYaQaQpmwDqkwDqkwDqkwDqkp9UgYp9AdbbaoadfgoaYaQaQpmxmPsxmPsxmPsxmPsp9UgYp9AdbbaoadfgoaYaEa8EpmwDKYqk8AExm35Ps8E8FgQaQpmbedibedibedibedip9UgYp9AdbbaoadfgoaYaQaQpmlvorlvorlvorlvorp9UgYp9AdbbaoadfgoaYaQaQpmwDqkwDqkwDqkwDqkp9UgYp9AdbbaoadfgoaYaQaQpmxmPsxmPsxmPsxmPsp9UgYp9AdbbaoadfgoaYaLa8ApmwKDYq8AkEx3m5P8Es8FgLa3a5pmwKDYq8AkEx3m5P8Es8Fg8ApmbezHdiOAlvCXorQLgQaQpmbedibedibedibedip9UgYp9AdbbaoadfgoaYaQaQpmlvorlvorlvorlvorp9UgYp9AdbbaoadfgoaYaQaQpmwDqkwDqkwDqkwDqkp9UgYp9AdbbaoadfgoaYaQaQpmxmPsxmPsxmPsxmPsp9UgYp9AdbbaoadfgoaYaLa8ApmwDKYqk8AExm35Ps8E8FgQaQpmbedibedibedibedip9UgYp9AdbbaoadfgoaYaQaQpmlvorlvorlvorlvorp9UgYp9AdbbaoadfgoaYaQaQpmwDqkwDqkwDqkwDqkp9UgYp9AdbbaoadfgoaYaQaQpmxmPsxmPsxmPsxmPsp9UgYp9AdbbaoadfhiaXczfgXak6mbkkazclfgzad6mbkasavcjdfaqad2;8qbbavavcjdfaqcufad2fad;8qbbaqaDfhDc9:hoalmexikkc9:hoxekcbc99aral9Radcaadca0ESEhokavcj;kbf8Kjjjjbaokwbz:bjjjbk;uzeHu8Jjjjjbc;ae9Rgv8Kjjjjbc9:hodnaeci9UgrcHfal0mbcuhoaiRbbgwc;WeGc;Ge9hmbawcsGgDce0mbavc;abfcFecje;8kbavcUf9cu83ibavc8Wf9cu83ibavcyf9cu83ibavcaf9cu83ibavcKf9cu83ibavczf9cu83ibav9cu83iwav9cu83ibaialfc9WfhqaicefgwarfhodnaeTmbcmcsaDceSEhkcbhxcbhmcbhDcbhicbhlindnaoaq9nmbc9:hoxikdndnawRbbgrc;Ve0mbavc;abfalarcl4cu7fcsGcitfgPydlhsaPydbhzdnarcsGgPak9pmbavaiarcu7fcsGcdtfydbaxaPEhraPThPdndnadcd9hmbabaDcetfgHaz87ebaHcdfas87ebaHclfar87ebxekabaDcdtfgHazBdbaHclfasBdbaHcwfarBdbkaxaPfhxavc;abfalcitfgHarBdbaHasBdlavaicdtfarBdbavc;abfalcefcsGglcitfgHazBdbaHarBdlaiaPfhialcefhlxdkdndnaPcsSmbamaPfaPc987fcefhmxekaocefhrao8SbbgPcFeGhHdndnaPcu9mmbarhoxekaocvfhoaHcFbGhHcrhPdninar8SbbgOcFbGaPtaHVhHaOcu9kmearcefhraPcrfgPc8J9hmbxdkkarcefhokaHce4cbaHceG9R7amfhmkdndnadcd9hmbabaDcetfgraz87ebarcdfas87ebarclfam87ebxekabaDcdtfgrazBdbarclfasBdbarcwfamBdbkavc;abfalcitfgramBdbarasBdlavaicdtfamBdbavc;abfalcefcsGglcitfgrazBdbaramBdlaicefhialcefhlxekdnarcpe0mbaxcefgOavaiaqarcsGfRbbgPcl49RcsGcdtfydbaPcz6gHEhravaiaP9RcsGcdtfydbaOaHfgsaPcsGgOEhPaOThOdndnadcd9hmbabaDcetfgzax87ebazcdfar87ebazclfaP87ebxekabaDcdtfgzaxBdbazclfarBdbazcwfaPBdbkavaicdtfaxBdbavc;abfalcitfgzarBdbazaxBdlavaicefgicsGcdtfarBdbavc;abfalcefcsGcitfgzaPBdbazarBdlavaiaHfcsGgicdtfaPBdbavc;abfalcdfcsGglcitfgraxBdbaraPBdlalcefhlaiaOfhiasaOfhxxekaxcbaoRbbgzEgAarc;:eSgrfhsazcsGhCazcl4hXdndnazcs0mbascefhOxekashOavaiaX9RcsGcdtfydbhskdndnaCmbaOcefhxxekaOhxavaiaz9RcsGcdtfydbhOkdndnarTmbaocefhrxekaocdfhrao8SbegHcFeGhPdnaHcu9kmbaocofhAaPcFbGhPcrhodninar8SbbgHcFbGaotaPVhPaHcu9kmearcefhraocrfgoc8J9hmbkaAhrxekarcefhrkaPce4cbaPceG9R7amfgmhAkdndnaXcsSmbarhPxekarcefhPar8SbbgocFeGhHdnaocu9kmbarcvfhsaHcFbGhHcrhodninaP8SbbgrcFbGaotaHVhHarcu9kmeaPcefhPaocrfgoc8J9hmbkashPxekaPcefhPkaHce4cbaHceG9R7amfgmhskdndnaCcsSmbaPhoxekaPcefhoaP8SbbgrcFeGhHdnarcu9kmbaPcvfhOaHcFbGhHcrhrdninao8SbbgPcFbGartaHVhHaPcu9kmeaocefhoarcrfgrc8J9hmbkaOhoxekaocefhokaHce4cbaHceG9R7amfgmhOkdndnadcd9hmbabaDcetfgraA87ebarcdfas87ebarclfaO87ebxekabaDcdtfgraABdbarclfasBdbarcwfaOBdbkavc;abfalcitfgrasBdbaraABdlavaicdtfaABdbavc;abfalcefcsGcitfgraOBdbarasBdlavaicefgicsGcdtfasBdbavc;abfalcdfcsGcitfgraABdbaraOBdlavaiazcz6aXcsSVfgicsGcdtfaOBdbaiaCTaCcsSVfhialcifhlkawcefhwalcsGhlaicsGhiaDcifgDae6mbkkcbc99aoaqSEhokavc;aef8Kjjjjbaok:llevu8Jjjjjbcz9Rhvc9:hodnaecvfal0mbcuhoaiRbbc;:eGc;qe9hmbav9cb83iwaicefhraialfc98fhwdnaeTmbdnadcdSmbcbhDindnaraw6mbc9:skarcefhoar8SbbglcFeGhidndnalcu9mmbaohrxekarcvfhraicFbGhicrhldninao8SbbgdcFbGaltaiVhiadcu9kmeaocefhoalcrfglc8J9hmbxdkkaocefhrkabaDcdtfaicd4cbaice4ceG9R7avcwfaiceGcdtVgoydbfglBdbaoalBdbaDcefgDae9hmbxdkkcbhDindnaraw6mbc9:skarcefhoar8SbbglcFeGhidndnalcu9mmbaohrxekarcvfhraicFbGhicrhldninao8SbbgdcFbGaltaiVhiadcu9kmeaocefhoalcrfglc8J9hmbxdkkaocefhrkabaDcetfaicd4cbaice4ceG9R7avcwfaiceGcdtVgoydbfgl87ebaoalBdbaDcefgDae9hmbkkcbc99arawSEhokaok:EPliuo97eue978Jjjjjbca9Rhidndnadcl9hmbdnaec98GglTmbcbhvabhdinadadpbbbgocKp:RecKp:Sep;6egraocwp:RecKp:Sep;6earp;Geaoczp:RecKp:Sep;6egwp;Gep;Kep;LegDpxbbbbbbbbbbbbbbbbp:2egqarpxbbbjbbbjbbbjbbbjgkp9op9rp;Kegrpxbb;:9cbb;:9cbb;:9cbb;:9cararp;MeaDaDp;Meawaqawakp9op9rp;Kegrarp;Mep;Kep;Kep;Jep;Negwp;Mepxbbn0bbn0bbn0bbn0gqp;KepxFbbbFbbbFbbbFbbbp9oaopxbbbFbbbFbbbFbbbFp9op9qarawp;Meaqp;Kecwp:RepxbFbbbFbbbFbbbFbbp9op9qaDawp;Meaqp;Keczp:RepxbbFbbbFbbbFbbbFbp9op9qpkbbadczfhdavclfgval6mbkkalae9pmeaiaeciGgvcdtgdVcbczad9R;8kbaiabalcdtfglad;8qbbdnavTmbaiaipblbgocKp:RecKp:Sep;6egraocwp:RecKp:Sep;6earp;Geaoczp:RecKp:Sep;6egwp;Gep;Kep;LegDpxbbbbbbbbbbbbbbbbp:2egqarpxbbbjbbbjbbbjbbbjgkp9op9rp;Kegrpxbb;:9cbb;:9cbb;:9cbb;:9cararp;MeaDaDp;Meawaqawakp9op9rp;Kegrarp;Mep;Kep;Kep;Jep;Negwp;Mepxbbn0bbn0bbn0bbn0gqp;KepxFbbbFbbbFbbbFbbbp9oaopxbbbFbbbFbbbFbbbFp9op9qarawp;Meaqp;Kecwp:RepxbFbbbFbbbFbbbFbbp9op9qaDawp;Meaqp;Keczp:RepxbbFbbbFbbbFbbbFbp9op9qpklbkalaiad;8qbbskdnaec98GgxTmbcbhvabhdinadczfglalpbbbgopxbbbbbbFFbbbbbbFFgkp9oadpbbbgDaopmlvorxmPsCXQL358E8FpxFubbFubbFubbFubbp9op;6eaDaopmbediwDqkzHOAKY8AEgoczp:Sep;6egrp;Geaoczp:Reczp:Sep;6egwp;Gep;Kep;Legopxb;:FSb;:FSb;:FSb;:FSawaopxbbbbbbbbbbbbbbbbp:2egqawpxbbbjbbbjbbbjbbbjgmp9op9rp;Kegwawp;Meaoaop;Mearaqaramp9op9rp;Kegoaop;Mep;Kep;Kep;Jep;Negrp;Mepxbbn0bbn0bbn0bbn0gqp;Keczp:Reawarp;Meaqp;KepxFFbbFFbbFFbbFFbbp9op9qgwaoarp;Meaqp;KepxFFbbFFbbFFbbFFbbp9ogopmwDKYqk8AExm35Ps8E8Fp9qpkbbadaDakp9oawaopmbezHdiOAlvCXorQLp9qpkbbadcafhdavclfgvax6mbkkaxae9pmbaiaeciGgvcitgdfcbcaad9R;8kbaiabaxcitfglad;8qbbdnavTmbaiaipblzgopxbbbbbbFFbbbbbbFFgkp9oaipblbgDaopmlvorxmPsCXQL358E8FpxFubbFubbFubbFubbp9op;6eaDaopmbediwDqkzHOAKY8AEgoczp:Sep;6egrp;Geaoczp:Reczp:Sep;6egwp;Gep;Kep;Legopxb;:FSb;:FSb;:FSb;:FSawaopxbbbbbbbbbbbbbbbbp:2egqawpxbbbjbbbjbbbjbbbjgmp9op9rp;Kegwawp;Meaoaop;Mearaqaramp9op9rp;Kegoaop;Mep;Kep;Kep;Jep;Negrp;Mepxbbn0bbn0bbn0bbn0gqp;Keczp:Reawarp;Meaqp;KepxFFbbFFbbFFbbFFbbp9op9qgwaoarp;Meaqp;KepxFFbbFFbbFFbbFFbbp9ogopmwDKYqk8AExm35Ps8E8Fp9qpklzaiaDakp9oawaopmbezHdiOAlvCXorQLp9qpklbkalaiad;8qbbkk;4wllue97euv978Jjjjjbc8W9Rhidnaec98GglTmbcbhvabhoinaiaopbbbgraoczfgwpbbbgDpmlvorxmPsCXQL358E8Fgqczp:Segkclp:RepklbaopxbbjZbbjZbbjZbbjZpx;Zl81Z;Zl81Z;Zl81Z;Zl81Zakpxibbbibbbibbbibbbp9qp;6ep;NegkaraDpmbediwDqkzHOAKY8AEgrczp:Reczp:Sep;6ep;MegDaDp;Meakarczp:Sep;6ep;Megxaxp;Meakaqczp:Reczp:Sep;6ep;Megqaqp;Mep;Kep;Kep;Lepxbbbbbbbbbbbbbbbbp:4ep;Jepxb;:FSb;:FSb;:FSb;:FSgkp;Mepxbbn0bbn0bbn0bbn0grp;KepxFFbbFFbbFFbbFFbbgmp9oaxakp;Mearp;Keczp:Rep9qgxaqakp;Mearp;Keczp:ReaDakp;Mearp;Keamp9op9qgkpmbezHdiOAlvCXorQLgrp5baipblbpEb:T:j83ibaocwfarp5eaipblbpEe:T:j83ibawaxakpmwDKYqk8AExm35Ps8E8Fgkp5baipblbpEd:T:j83ibaocKfakp5eaipblbpEi:T:j83ibaocafhoavclfgval6mbkkdnalae9pmbaiaeciGgvcitgofcbcaao9R;8kbaiabalcitfgwao;8qbbdnavTmbaiaipblbgraipblzgDpmlvorxmPsCXQL358E8Fgqczp:Segkclp:RepklaaipxbbjZbbjZbbjZbbjZpx;Zl81Z;Zl81Z;Zl81Z;Zl81Zakpxibbbibbbibbbibbbp9qp;6ep;NegkaraDpmbediwDqkzHOAKY8AEgrczp:Reczp:Sep;6ep;MegDaDp;Meakarczp:Sep;6ep;Megxaxp;Meakaqczp:Reczp:Sep;6ep;Megqaqp;Mep;Kep;Kep;Lepxbbbbbbbbbbbbbbbbp:4ep;Jepxb;:FSb;:FSb;:FSb;:FSgkp;Mepxbbn0bbn0bbn0bbn0grp;KepxFFbbFFbbFFbbFFbbgmp9oaxakp;Mearp;Keczp:Rep9qgxaqakp;Mearp;Keczp:ReaDakp;Mearp;Keamp9op9qgkpmbezHdiOAlvCXorQLgrp5baipblapEb:T:j83ibaiarp5eaipblapEe:T:j83iwaiaxakpmwDKYqk8AExm35Ps8E8Fgkp5baipblapEd:T:j83izaiakp5eaipblapEi:T:j83iKkawaiao;8qbbkk:Pddiue978Jjjjjbc;ab9Rhidnadcd4ae2glc98GgvTmbcbhdabheinaeaepbbbgocwp:Recwp:Sep;6eaocep:SepxbbjZbbjZbbjZbbjZp:UepxbbjFbbjFbbjFbbjFp9op;Mepkbbaeczfheadclfgdav6mbkkdnaval9pmbaialciGgdcdtgeVcbc;abae9R;8kbaiabavcdtfgvae;8qbbdnadTmbaiaipblbgocwp:Recwp:Sep;6eaocep:SepxbbjZbbjZbbjZbbjZp:UepxbbjFbbjFbbjFbbjFp9op;Mepklbkavaiae;8qbbkk9teiucbcbydj1jjbgeabcifc98GfgbBdj1jjbdndnabZbcztgd9nmbcuhiabad9RcFFifcz4nbcuSmekaehikaikkkebcjwklz9Tbb\";\n\n  const wasmpack = new Uint8Array([\n    32, 0, 65, 2, 1, 106, 34, 33, 3, 128, 11, 4, 13, 64, 6, 253, 10, 7, 15, 116, 127, 5, 8, 12, 40, 16, 19, 54, 20, 9,\n    27, 255, 113, 17, 42, 67, 24, 23, 146, 148, 18, 14, 22, 45, 70, 69, 56, 114, 101, 21, 25, 63, 75, 136, 108, 28, 118,\n    29, 73, 115\n  ]);\n\n  // @ts-ignore\n  const wasm = SystemInfo._detectSIMDSupported() ? wasm_simd : wasm_base;\n\n  let instance;\n\n  ready = WebAssembly.instantiate(unpack(wasm))\n    .then(function (result) {\n      instance = result.instance;\n      instance.exports.__wasm_call_ctors();\n    })\n    .then(() => ({\n      workerCount: 4,\n      ready: ready,\n      useWorkers: function (workerCount?: number) {\n        this.workerCount = workerCount ?? this.workerCount;\n        initWorkers(this.workerCount);\n      },\n      decodeGltfBuffer: function (count, stride, source, mode, filter): Promise<Uint8Array> {\n        if (this.workerCount > 0 && workers.length === 0) this.useWorkers();\n\n        if (workers.length > 0) return decodeWorker(count, stride, source, decoders[mode], filters[filter]);\n\n        return ready.then(function () {\n          const target = new Uint8Array(count * stride);\n          decode(instance.exports[decoders[mode]], target, count, stride, source, instance.exports[filters[filter]]);\n          return target;\n        });\n      },\n      release() {\n        for (let i = 0; i < workers.length; i++) {\n          workers[i].object.terminate();\n        }\n      }\n    }));\n\n  function unpack(data) {\n    const result = new Uint8Array(data.length);\n    for (let i = 0; i < data.length; ++i) {\n      const ch = data.charCodeAt(i);\n      result[i] = ch > 96 ? ch - 97 : ch > 64 ? ch - 39 : ch + 4;\n    }\n    let write = 0;\n    for (let i = 0; i < data.length; ++i) {\n      result[write++] = result[i] < 60 ? wasmpack[result[i]] : (result[i] - 60) * 64 + result[++i];\n    }\n    return result.buffer.slice(0, write);\n  }\n\n  function decode(fun, target, count, size, source, filter?) {\n    const sbrk = instance.exports.sbrk;\n    const count4 = (count + 3) & ~3;\n    const tp = sbrk(count4 * size);\n    const sp = sbrk(source.length);\n    const heap = new Uint8Array(instance.exports.memory.buffer);\n    heap.set(source, sp);\n    const res = fun(tp, count, size, sp, source.length);\n    if (res == 0 && filter) {\n      filter(tp, count4, size);\n    }\n    target.set(heap.subarray(tp, tp + count * size));\n    sbrk(tp - sbrk(0));\n    if (res != 0) {\n      throw new Error(\"Malformed buffer data: \" + res);\n    }\n  }\n\n  const filters = {\n    NONE: \"\",\n    OCTAHEDRAL: \"meshopt_decodeFilterOct\",\n    QUATERNION: \"meshopt_decodeFilterQuat\",\n    EXPONENTIAL: \"meshopt_decodeFilterExp\"\n  };\n\n  const decoders = {\n    ATTRIBUTES: \"meshopt_decodeVertexBuffer\",\n    TRIANGLES: \"meshopt_decodeIndexBuffer\",\n    INDICES: \"meshopt_decodeIndexSequence\"\n  };\n\n  const workers: Array<WorkerItem> = [];\n  let requestId = 0;\n\n  function createWorker(url): WorkerItem {\n    const worker = {\n      object: new Worker(url),\n      pending: 0,\n      requests: {}\n    };\n\n    worker.object.onmessage = function (event) {\n      const data = event.data;\n\n      worker.pending -= data.count;\n      worker.requests[data.id][data.action](data.value);\n\n      delete worker.requests[data.id];\n    };\n\n    return worker;\n  }\n\n  function initWorkers(count) {\n    const source =\n      \"var instance; var ready = WebAssembly.instantiate(new Uint8Array([\" +\n      new Uint8Array(unpack(wasm)) +\n      \"]), {})\" +\n      \".then(function(result) {instance = result.instance; instance.exports.__wasm_call_ctors();});\\n\" +\n      \"self.onmessage = workerProcess;\\n\" +\n      `function decode(fun, target, count, size, source, filter) {\n      const sbrk = instance.exports.sbrk;\n      const count4 = (count + 3) & ~3;\n      const tp = sbrk(count4 * size);\n      const sp = sbrk(source.length);\n      const heap = new Uint8Array(instance.exports.memory.buffer);\n      heap.set(source, sp);\n      const res = fun(tp, count, size, sp, source.length);\n      if (res == 0 && filter) {\n        filter(tp, count4, size);\n      }\n      target.set(heap.subarray(tp, tp + count * size));\n      sbrk(tp - sbrk(0));\n      if (res != 0) {\n        throw new Error(\"Malformed buffer data: \" + res);\n      }\n    }\\n` +\n      `function workerProcess(event) {\n      ready.then(function () {\n        const data = event.data;\n        try {\n          const target = new Uint8Array(data.count * data.size);\n          decode(instance.exports[data.mode], target, data.count, data.size, data.source, instance.exports[data.filter]);\n          self.postMessage({ id: data.id, count: data.count, action: \"resolve\", value: target }, [target.buffer]);\n        } catch (error) {\n          self.postMessage({\n            id: data.id,\n            count: data.count,\n            action: \"reject\",\n            value: error\n          });\n        }\n      });\n    }`;\n\n    const blob = new Blob([source], { type: \"text/javascript\" });\n    const url = URL.createObjectURL(blob);\n\n    for (let i = 0; i < count; ++i) {\n      workers[i] = createWorker(url);\n    }\n\n    URL.revokeObjectURL(url);\n  }\n\n  function decodeWorker(count: number, size: number, source: ArrayBuffer, mode, filter): Promise<Uint8Array> {\n    let worker = workers[0];\n\n    for (let i = 1; i < workers.length; ++i) {\n      if (workers[i].pending < worker.pending) {\n        worker = workers[i];\n      }\n    }\n\n    return new Promise(function (resolve, reject) {\n      const data = new Uint8Array(source);\n      const id = requestId++;\n\n      worker.pending += count;\n      worker.requests[id] = { resolve: resolve, reject: reject };\n      worker.object.postMessage(\n        {\n          id: id,\n          count: count,\n          size: size,\n          source: data,\n          mode: mode,\n          filter: filter\n        },\n        [data.buffer]\n      );\n    });\n  }\n\n  return ready;\n}\n","import {\n  AssetPromise,\n  AssetType,\n  Engine,\n  EngineConfiguration,\n  Loader,\n  LoadItem,\n  resourceLoader,\n  ResourceManager\n} from \"@galacean/engine-core\";\nimport { GLTFResource } from \"./gltf/GLTFResource\";\nimport { GLTFParserContext } from \"./gltf/parser\";\nimport { getMeshoptDecoder, ready } from \"./gltf/extensions/MeshoptDecoder\";\n\n@resourceLoader(AssetType.GLTF, [\"gltf\", \"glb\"])\nexport class GLTFLoader extends Loader<GLTFResource> {\n  /**\n   * Release glTF loader memory(includes meshopt workers).\n   * @remarks If use loader after releasing, we should release again.\n   */\n  static release(): void {\n    if (ready) {\n      getMeshoptDecoder().then((meshoptDecoder) => {\n        meshoptDecoder.release();\n      });\n    }\n  }\n\n  override initialize(_: Engine, configuration: EngineConfiguration): Promise<void> {\n    const meshOptOptions = configuration.glTFLoader?.meshOpt ?? configuration.glTF?.meshOpt;\n    if (meshOptOptions) {\n      return getMeshoptDecoder().then((meshoptDecoder) => {\n        meshoptDecoder.useWorkers(meshOptOptions.workerCount);\n      });\n    }\n    return Promise.resolve();\n  }\n\n  override load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<GLTFResource> {\n    const params = <GLTFParams>item.params;\n    const glTFResource = new GLTFResource(resourceManager.engine, item.url);\n    const context = new GLTFParserContext(glTFResource, resourceManager, {\n      keepMeshData: false,\n      ...params\n    });\n\n    return new AssetPromise((resolve, reject, setTaskCompleteProgress, setTaskDetailProgress) => {\n      context._setTaskCompleteProgress = setTaskCompleteProgress;\n      context._setTaskDetailProgress = setTaskDetailProgress;\n      context.parse().then(resolve).catch(reject);\n    });\n  }\n}\n\n/**\n * GlTF loader params.\n */\nexport interface GLTFParams {\n  /**\n   * @beta Now only contains vertex information, need to improve.\n   * Keep raw mesh data for glTF parser, default is false.\n   */\n  keepMeshData?: boolean;\n  [key: string]: any;\n}\n","import { Engine, Entity } from \"@galacean/engine-core\";\nimport { HierarchyParser } from \"../resource-deserialize/resources/parser/HierarchyParser\";\nimport { PrefabResource } from \"./PrefabResource\";\nimport { IHierarchyFile, ParserContext, ParserType } from \"../resource-deserialize\";\n\nexport class PrefabParser extends HierarchyParser<PrefabResource, ParserContext<IHierarchyFile, Entity>> {\n  static parse(engine: Engine, url: string, data: IHierarchyFile): Promise<PrefabResource> {\n    const prefabResource = new PrefabResource(engine, url);\n    const context = new ParserContext<IHierarchyFile, Entity>(engine, ParserType.Prefab, prefabResource);\n    const parser = new PrefabParser(data, context, prefabResource);\n    parser.start();\n    return parser.promise.then(() => prefabResource);\n  }\n\n  constructor(\n    data: IHierarchyFile,\n    context: ParserContext<IHierarchyFile, Entity>,\n    public readonly prefabResource: PrefabResource\n  ) {\n    super(data, context);\n  }\n\n  protected override _handleRootEntity(id: string): void {\n    this.prefabResource._root = this.context.entityMap.get(id);\n  }\n\n  protected override _clearAndResolve(): PrefabResource {\n    this.context.clear();\n    return this.prefabResource;\n  }\n}\n","import { AssetPromise, AssetType, Loader, LoadItem, resourceLoader, ResourceManager } from \"@galacean/engine-core\";\nimport { PrefabParser } from \"./prefab/PrefabParser\";\nimport { PrefabResource } from \"./prefab/PrefabResource\";\nimport { IHierarchyFile } from \"./resource-deserialize\";\n\n@resourceLoader(AssetType.Prefab, [\"prefab\"])\nexport class PrefabLoader extends Loader<PrefabResource> {\n  override load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<PrefabResource> {\n    const engine = resourceManager.engine;\n\n    return new AssetPromise((resolve, reject) => {\n      resourceManager\n        // @ts-ignore\n        ._request<IHierarchyFile>(item.url, {\n          ...item,\n          type: \"json\"\n        })\n        .then((data) => {\n          PrefabParser.parse(engine, item.url, data).then(resolve).catch(reject);\n        });\n    });\n  }\n}\n","import {\n  AssetPromise,\n  AssetType,\n  ContentRestorer,\n  Engine,\n  LoadItem,\n  Loader,\n  ResourceManager,\n  TextureCube,\n  TextureCubeFace,\n  request,\n  resourceLoader\n} from \"@galacean/engine-core\";\nimport { RequestConfig } from \"@galacean/engine-core/types/asset/request\";\nimport { Color, Vector3 } from \"@galacean/engine-math\";\n\nconst PI = Math.PI;\n\ninterface IHDRHeader {\n  /**\n   * The width of the texture in pixels.\n   */\n  width: number;\n  /**\n   * The height of the texture in pixels.\n   */\n  height: number;\n  /**\n   * The index of the beginning of the data in the binary file.\n   */\n  dataPosition: number;\n}\n\n// referenece: https://www.flipcode.com/archives/HDR_Image_Reader.shtml\n@resourceLoader(AssetType.HDR, [\"hdr\"])\nclass HDRLoader extends Loader<TextureCube> {\n  private static _rightBottomBack = new Vector3(1.0, -1.0, -1.0);\n  private static _rightBottomFront = new Vector3(1.0, -1.0, 1.0);\n  private static _rightUpBack = new Vector3(1.0, 1.0, -1.0);\n  private static _rightUpFront = new Vector3(1.0, 1.0, 1.0);\n  private static _leftBottomBack = new Vector3(-1.0, -1.0, -1.0);\n  private static _leftBottomFront = new Vector3(-1.0, -1.0, 1.0);\n  private static _leftUpBack = new Vector3(-1.0, 1.0, -1.0);\n  private static _leftUpFront = new Vector3(-1.0, 1.0, 1.0);\n\n  private static _faceRight = [\n    HDRLoader._rightBottomBack,\n    HDRLoader._rightBottomFront,\n    HDRLoader._rightUpBack,\n    HDRLoader._rightUpFront\n  ];\n  private static _faceLeft = [\n    HDRLoader._leftBottomFront,\n    HDRLoader._leftBottomBack,\n    HDRLoader._leftUpFront,\n    HDRLoader._leftUpBack\n  ];\n  private static _faceUp = [\n    HDRLoader._leftBottomFront,\n    HDRLoader._rightBottomFront,\n    HDRLoader._leftBottomBack,\n    HDRLoader._rightBottomBack\n  ];\n  private static _faceBottom = [\n    HDRLoader._leftUpBack,\n    HDRLoader._rightUpBack,\n    HDRLoader._leftUpFront,\n    HDRLoader._rightUpFront\n  ];\n  private static _faceFront = [\n    HDRLoader._leftBottomBack,\n    HDRLoader._rightBottomBack,\n    HDRLoader._leftUpBack,\n    HDRLoader._rightUpBack\n  ];\n  private static _faceBack = [\n    HDRLoader._rightBottomFront,\n    HDRLoader._leftBottomFront,\n    HDRLoader._rightUpFront,\n    HDRLoader._leftUpFront\n  ];\n\n  private static _tempVector3 = new Vector3();\n  private static _temp2Vector3 = new Vector3();\n  private static _temp3Vector3 = new Vector3();\n  private static _temp4Vector3 = new Vector3();\n  private static _temp5Vector3 = new Vector3();\n\n  /**\n   * @internal\n   */\n  static _setTextureByBuffer(engine: Engine, buffer: ArrayBuffer, texture?: TextureCube) {\n    const bufferArray = new Uint8Array(buffer);\n    const { width, height, dataPosition } = HDRLoader._parseHeader(bufferArray);\n    const cubeSize = height >> 1;\n    texture ||= new TextureCube(engine, cubeSize);\n    const pixels = HDRLoader._readPixels(bufferArray.subarray(dataPosition), width, height);\n    const cubeMapData = HDRLoader._convertToCubemap(pixels, width, height, cubeSize);\n    for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n      texture.setPixelBuffer(TextureCubeFace.PositiveX + faceIndex, cubeMapData[faceIndex], 0);\n    }\n    texture.generateMipmaps();\n    return texture;\n  }\n\n  private static _convertToCubemap(\n    pixels: Uint8Array,\n    inputWidth: number,\n    inputHeight: number,\n    size: number\n  ): Uint8ClampedArray[] {\n    if (!pixels) {\n      throw \"ConvertPanoramaToCubemap: input cannot be null\";\n    }\n\n    if (pixels.length != inputWidth * inputHeight * 4) {\n      throw \"ConvertPanoramaToCubemap: input size is wrong\";\n    }\n\n    const textureRight = this._createCubemapData(size, this._faceRight, pixels, inputWidth, inputHeight);\n    const textureLeft = this._createCubemapData(size, this._faceLeft, pixels, inputWidth, inputHeight);\n    const textureUp = this._createCubemapData(size, this._faceUp, pixels, inputWidth, inputHeight);\n    const textureDown = this._createCubemapData(size, this._faceBottom, pixels, inputWidth, inputHeight);\n    const textureFront = this._createCubemapData(size, this._faceFront, pixels, inputWidth, inputHeight);\n    const textureBack = this._createCubemapData(size, this._faceBack, pixels, inputWidth, inputHeight);\n\n    return [textureRight, textureLeft, textureUp, textureDown, textureFront, textureBack];\n  }\n\n  private static _createCubemapData(\n    texSize: number,\n    faceData: Vector3[],\n    pixels: Uint8Array,\n    inputWidth: number,\n    inputHeight: number\n  ): Uint8ClampedArray {\n    const textureArray = new Uint8ClampedArray(texSize * texSize * 4);\n    const rotDX1 = this._tempVector3\n      .set(0, 0, 0)\n      .add(faceData[1])\n      .subtract(faceData[0])\n      .scale(1 / texSize);\n    const rotDX2 = this._temp2Vector3\n      .set(0, 0, 0)\n      .add(faceData[3])\n      .subtract(faceData[2])\n      .scale(1 / texSize);\n\n    const dy = 1 / texSize;\n    let fy = 0;\n\n    for (let y = 0; y < texSize; y++) {\n      let xv1 = this._temp3Vector3.set(0, 0, 0).add(faceData[0]);\n      let xv2 = this._temp4Vector3.set(0, 0, 0).add(faceData[2]);\n\n      for (let x = 0; x < texSize; x++) {\n        const v = this._temp5Vector3.set(0, 0, 0).add(xv2).subtract(xv1).scale(fy).add(xv1);\n        v.normalize();\n\n        const color = this._calcProjectionSpherical(v, pixels, inputWidth, inputHeight);\n        this._RGBEToLinear(color);\n        this._linearToRGBM(color, 5);\n\n        // 4 channels per pixels\n        const index = y * texSize * 4 + x * 4;\n        textureArray[index] = color.r;\n        textureArray[index + 1] = color.g;\n        textureArray[index + 2] = color.b;\n        textureArray[index + 3] = color.a;\n\n        xv1.add(rotDX1);\n        xv2.add(rotDX2);\n      }\n\n      fy += dy;\n    }\n\n    return textureArray;\n  }\n\n  private static _calcProjectionSpherical(\n    vDir: Vector3,\n    pixels: Uint8Array,\n    inputWidth: number,\n    inputHeight: number\n  ): Color {\n    let theta = Math.atan2(vDir.z, vDir.x);\n    let phi = Math.acos(vDir.y);\n\n    while (theta < -PI) {\n      theta += 2 * PI;\n    }\n    while (theta > PI) {\n      theta -= 2 * PI;\n    }\n\n    let dx = theta / PI;\n    let dy = phi / PI;\n\n    // recenter.\n    dx = dx * 0.5 + 0.5;\n\n    let px = Math.round(dx * inputWidth);\n    if (px < 0) {\n      px = 0;\n    } else if (px >= inputWidth) {\n      px = inputWidth - 1;\n    }\n\n    let py = Math.round(dy * inputHeight);\n    if (py < 0) {\n      py = 0;\n    } else if (py >= inputHeight) {\n      py = inputHeight - 1;\n    }\n\n    const inputY = inputHeight - py - 1;\n    const index = inputY * inputWidth * 4 + px * 4;\n    const r = pixels[index];\n    const g = pixels[index + 1];\n    const b = pixels[index + 2];\n    const a = pixels[index + 3];\n\n    return new Color(r, g, b, a);\n  }\n\n  private static _readStringLine(uint8array: Uint8Array, startIndex: number): string {\n    let line = \"\";\n    let character = \"\";\n\n    for (let i = startIndex; i < uint8array.length - startIndex; i++) {\n      character = String.fromCharCode(uint8array[i]);\n\n      if (character == \"\\n\") {\n        break;\n      }\n\n      line += character;\n    }\n\n    return line;\n  }\n\n  private static _parseHeader(uint8array: Uint8Array): IHDRHeader {\n    let height: number = 0;\n    let width: number = 0;\n\n    let line = this._readStringLine(uint8array, 0);\n    if (line[0] != \"#\" || line[1] != \"?\") {\n      throw \"Bad HDR Format.\";\n    }\n\n    let endOfHeader = false;\n    let findFormat = false;\n    let lineIndex: number = 0;\n\n    do {\n      lineIndex += line.length + 1;\n      line = this._readStringLine(uint8array, lineIndex);\n\n      if (line == \"FORMAT=32-bit_rle_rgbe\") {\n        findFormat = true;\n      } else if (line.length == 0) {\n        endOfHeader = true;\n      }\n    } while (!endOfHeader);\n\n    if (!findFormat) {\n      throw \"HDR Bad header format, unsupported FORMAT\";\n    }\n\n    lineIndex += line.length + 1;\n    line = this._readStringLine(uint8array, lineIndex);\n\n    const sizeRegexp = /^\\-Y (.*) \\+X (.*)$/g;\n    const match = sizeRegexp.exec(line);\n\n    // TODO. Support +Y and -X if needed.\n    if (!match || match.length < 3) {\n      throw \"HDR Bad header format, no size\";\n    }\n    width = parseInt(match[2]);\n    height = parseInt(match[1]);\n\n    if (width < 8 || width > 0x7fff) {\n      throw \"HDR Bad header format, unsupported size\";\n    }\n\n    lineIndex += line.length + 1;\n\n    return {\n      height: height,\n      width: width,\n      dataPosition: lineIndex\n    };\n  }\n\n  private static _readPixels(buffer: Uint8Array, width: number, height: number): Uint8Array {\n    const scanLineWidth = width;\n    const byteLength = buffer.byteLength;\n\n    const dataRGBA = new Uint8Array(4 * width * height);\n\n    let offset = 0,\n      pos = 0;\n    const ptrEnd = 4 * scanLineWidth;\n    const scanLineBuffer = new Uint8Array(ptrEnd);\n    let numScanLines = height; // read in each successive scanLine\n\n    while (numScanLines > 0 && pos < byteLength) {\n      const a = buffer[pos++];\n      const b = buffer[pos++];\n      const c = buffer[pos++];\n      const d = buffer[pos++];\n\n      if (a != 2 || b != 2 || c & 0x80 || width < 8 || width > 32767) {\n        // this file is not run length encoded\n        // read values sequentially\n        return buffer;\n      }\n\n      if (((c << 8) | d) != scanLineWidth) {\n        // eslint-disable-next-line no-throw-literal\n        throw \"HDR Bad header format, wrong scan line width\";\n      }\n\n      // read each of the four channels for the scanline into the buffer\n      // first red, then green, then blue, then exponent\n\n      let ptr = 0,\n        count;\n\n      while (ptr < ptrEnd && pos < byteLength) {\n        count = buffer[pos++];\n        const isEncodedRun = count > 128;\n        if (isEncodedRun) count -= 128;\n\n        if (0 === count || ptr + count > ptrEnd) {\n          throw \"HDR Bad Format, bad scanline data (run)\";\n        }\n\n        if (isEncodedRun) {\n          // a (encoded) run of the same value\n          const byteValue = buffer[pos++];\n\n          for (let i = 0; i < count; i++) {\n            scanLineBuffer[ptr++] = byteValue;\n          } //ptr += count;\n        } else {\n          // a literal-run\n          scanLineBuffer.set(buffer.subarray(pos, pos + count), ptr);\n          ptr += count;\n          pos += count;\n        }\n      } // now convert data from buffer into rgba\n      // first red, then green, then blue, then exponent (alpha)\n\n      const l = scanLineWidth; //scanLine_buffer.byteLength;\n\n      for (let i = 0; i < l; i++) {\n        let off = 0;\n        dataRGBA[offset] = scanLineBuffer[i + off];\n        off += scanLineWidth;\n\n        dataRGBA[offset + 1] = scanLineBuffer[i + off];\n        off += scanLineWidth;\n\n        dataRGBA[offset + 2] = scanLineBuffer[i + off];\n        off += scanLineWidth;\n\n        dataRGBA[offset + 3] = scanLineBuffer[i + off];\n        offset += 4;\n      }\n\n      numScanLines--;\n    }\n\n    return dataRGBA;\n  }\n\n  private static _RGBEToLinear(color: Color): void {\n    const scaleFactor = Math.pow(2, color.a - 128) / 255;\n    color.r *= scaleFactor;\n    color.g *= scaleFactor;\n    color.b *= scaleFactor;\n    color.a = 1;\n  }\n\n  private static _linearToRGBM(color: Color, maxRange: number): void {\n    const maxRGB = Math.max(color.r, Math.max(color.g, color.b));\n    let M = Math.min(maxRGB / maxRange, 1);\n    M = Math.ceil(M * 255);\n    const scaleFactor = 65025 / (M * maxRange); // 255 * (255 / (M * maxRange) )\n\n    color.r *= scaleFactor;\n    color.g *= scaleFactor;\n    color.b *= scaleFactor;\n    color.a *= M;\n  }\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<TextureCube> {\n    return new AssetPromise((resolve, reject) => {\n      const engine = resourceManager.engine;\n      const requestConfig = { ...item, type: \"arraybuffer\" } as RequestConfig;\n      resourceManager\n        // @ts-ignore\n        ._request<ArrayBuffer>(item.url, requestConfig)\n        .then((buffer) => {\n          const texture = HDRLoader._setTextureByBuffer(engine, buffer);\n          engine.resourceManager.addContentRestorer(new HDRContentRestorer(texture, item.url, requestConfig));\n          resolve(texture);\n        })\n        .catch(reject);\n    });\n  }\n}\n\n/**\n * @internal\n */\nclass HDRContentRestorer extends ContentRestorer<TextureCube> {\n  constructor(\n    resource: TextureCube,\n    public url: string,\n    public requestConfig: RequestConfig\n  ) {\n    super(resource);\n  }\n\n  override restoreContent(): AssetPromise<TextureCube> {\n    return new AssetPromise((resolve, reject) => {\n      request<ArrayBuffer>(this.url, this.requestConfig)\n        .then((buffer) => {\n          HDRLoader._setTextureByBuffer(this.resource.engine, buffer, this.resource);\n          resolve(this.resource);\n        })\n        .catch(reject);\n    });\n  }\n}\n","import { resourceLoader, Loader, AssetPromise, AssetType, LoadItem, ResourceManager } from \"@galacean/engine-core\";\n\n@resourceLoader(AssetType.JSON, [\"json\"], false)\nclass JSONLoader extends Loader<string> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<string> {\n    // @ts-ignore\n    return resourceManager._request(item.url, {\n      ...item,\n      type: \"json\"\n    });\n  }\n}\n","/**\n *\n * ported from https://github.com/BabylonJS/Babylon.js/blob/master/src/Tools/babylon.khronosTextureContainer.ts\n */\n\nimport { TextureFormat } from \"@galacean/engine-core\";\nimport { GLCompressedTextureInternalFormat } from \"@galacean/engine-rhi-webgl\";\nimport { KTXContainer, Mipmap } from \"./type\";\n\nconst HEADER_LEN = 12 + 13 * 4; // identifier + header elements (not including key value meta-data pairs)\n\n// load types\nconst COMPRESSED_2D = 0; // uses a gl.compressedTexImage2D()\nconst COMPRESSED_3D = 1; // uses a gl.compressedTexImage3D()\nconst TEX_2D = 2; // uses a gl.texImage2D()\nconst TEX_3D = 3; // uses a gl.texImage3D()\n\nfunction getMipmaps(ktxContainer: KTXContainer, loadMipmaps: boolean): Mipmap[] {\n  const mipmaps = [];\n\n  // initialize width & height for level 1\n  var dataOffset = HEADER_LEN + ktxContainer.bytesOfKeyValueData;\n  var width = ktxContainer.pixelWidth;\n  var height = ktxContainer.pixelHeight;\n  var mipmapCount = loadMipmaps ? ktxContainer.numberOfMipmapLevels : 1;\n\n  for (var level = 0; level < mipmapCount; level++) {\n    var imageSize = new Int32Array(ktxContainer.buffer, dataOffset, 1)[0]; // size per face, since not supporting array cubemaps\n    dataOffset += 4; // size of the image + 4 for the imageSize field\n\n    for (var face = 0; face < ktxContainer.numberOfFaces; face++) {\n      var byteArray = new Uint8Array(ktxContainer.buffer, dataOffset, imageSize);\n\n      mipmaps.push({ data: byteArray, width: width, height: height });\n\n      dataOffset += imageSize;\n      dataOffset += 3 - ((imageSize + 3) % 4); // add padding for odd sized image\n    }\n    width = Math.max(1.0, width * 0.5);\n    height = Math.max(1.0, height * 0.5);\n  }\n\n  return mipmaps;\n}\n\n/**\n * Checks if the given data starts with a KTX file identifier.\n * @param data the data to check\n * @returns true if the data is a KTX file or false otherwise\n */\nfunction isValid(data: ArrayBuffer): boolean {\n  if (data.byteLength >= 12) {\n    // '«', 'K', 'T', 'X', ' ', '1', '1', '»', '\\r', '\\n', '\\x1A', '\\n'\n    const identifier = new Uint8Array(data, 0, 12);\n    if (\n      identifier[0] === 0xab &&\n      identifier[1] === 0x4b &&\n      identifier[2] === 0x54 &&\n      identifier[3] === 0x58 &&\n      identifier[4] === 0x20 &&\n      identifier[5] === 0x31 &&\n      identifier[6] === 0x31 &&\n      identifier[7] === 0xbb &&\n      identifier[8] === 0x0d &&\n      identifier[9] === 0x0a &&\n      identifier[10] === 0x1a &&\n      identifier[11] === 0x0a\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getEngineFormat(internalFormat: GLint): TextureFormat {\n  switch (internalFormat) {\n    // case GLCompressedTextureInternalFormat.RGBA_S3TC_DXT3_EXT:\n    // case GLCompressedTextureInternalFormat.RGBA_S3TC_DXT5_EXT:\n    // break;\n    case GLCompressedTextureInternalFormat.RGB_S3TC_DXT1_EXT:\n      return TextureFormat.BC1;\n    case GLCompressedTextureInternalFormat.RGBA_S3TC_DXT5_EXT:\n      return TextureFormat.BC3;\n    case GLCompressedTextureInternalFormat.RGBA_BPTC_UNORM_EXT:\n      return TextureFormat.BC7;\n    case GLCompressedTextureInternalFormat.RGB_ETC1_WEBGL:\n      return TextureFormat.ETC1_RGB;\n    case GLCompressedTextureInternalFormat.RGB8_ETC2:\n      return TextureFormat.ETC2_RGB;\n    case GLCompressedTextureInternalFormat.RGB8_PUNCHTHROUGH_ALPHA1_ETC2:\n      return TextureFormat.ETC2_RGBA5;\n    case GLCompressedTextureInternalFormat.RGBA8_ETC2_EAC:\n      return TextureFormat.ETC2_RGBA8;\n    case GLCompressedTextureInternalFormat.RGB_PVRTC_2BPPV1_IMG:\n      return TextureFormat.PVRTC_RGB2;\n    case GLCompressedTextureInternalFormat.RGBA_PVRTC_2BPPV1_IMG:\n      return TextureFormat.PVRTC_RGBA2;\n    case GLCompressedTextureInternalFormat.RGB_PVRTC_4BPPV1_IMG:\n      return TextureFormat.PVRTC_RGB4;\n    case GLCompressedTextureInternalFormat.RGBA_PVRTC_4BPPV1_IMG:\n      return TextureFormat.PVRTC_RGBA4;\n    case GLCompressedTextureInternalFormat.RGBA_ASTC_4X4_KHR:\n      return TextureFormat.ASTC_4x4;\n    case GLCompressedTextureInternalFormat.RGBA_ASTC_5X5_KHR:\n      return TextureFormat.ASTC_5x5;\n    case GLCompressedTextureInternalFormat.RGBA_ASTC_6X6_KHR:\n      return TextureFormat.ASTC_6x6;\n    case GLCompressedTextureInternalFormat.RGBA_ASTC_8X8_KHR:\n      return TextureFormat.ASTC_8x8;\n    case GLCompressedTextureInternalFormat.RGBA_ASTC_10X10_KHR:\n      return TextureFormat.ASTC_10x10;\n    case GLCompressedTextureInternalFormat.RGBA_ASTC_12X12_KHR:\n      return TextureFormat.ASTC_12x12;\n    default:\n      const formatName: any = GLCompressedTextureInternalFormat[internalFormat];\n      throw new Error(`this format is not supported in Galacean Engine: ${formatName}`);\n  }\n}\n/**\n * for description see https://www.khronos.org/opengles/sdk/tools/KTX/\n * for file layout see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/\n */\nexport const khronosTextureContainerParser = {\n  /**\n   *\n   * @param buffer contents of the KTX container file\n   * @param facesExpected should be either 1 or 6, based whether a cube texture or or\n   * @param threeDExpected provision for indicating that data should be a 3D texture, not implemented\n   * @param textureArrayExpected provision for indicating that data should be a texture array, not implemented\n   * @param mapEngineFormat get Galacean Engine native TextureFormat?\n   */\n  parse(\n    buffer: ArrayBuffer,\n    facesExpected: number,\n    withMipmaps: boolean,\n    mapEngineFormat: boolean = false\n  ): KTXContainer {\n    if (!isValid(buffer)) {\n      throw new Error(\"khronosTextureContainerParser: invalid KTX file, texture missing KTX identifier\");\n    }\n\n    // load the reset of the header in native 32 bit uint\n    const dataSize = Uint32Array.BYTES_PER_ELEMENT;\n    const headerDataView = new DataView(buffer, 12, 13 * dataSize);\n    const endianness = headerDataView.getUint32(0, true);\n    const littleEndian = endianness === 0x04030201;\n\n    const parsedResult: KTXContainer = {\n      buffer: buffer,\n      glType: headerDataView.getUint32(1 * dataSize, littleEndian), // must be 0 for compressed textures\n      glTypeSize: headerDataView.getUint32(2 * dataSize, littleEndian), // must be 1 for compressed textures\n      glFormat: headerDataView.getUint32(3 * dataSize, littleEndian), // must be 0 for compressed textures\n      glInternalFormat: headerDataView.getUint32(4 * dataSize, littleEndian), // the value of arg passed to gl.compressedTexImage2D(,,x,,,,)\n      glBaseInternalFormat: headerDataView.getUint32(5 * dataSize, littleEndian), // specify GL_RGB, GL_RGBA, GL_ALPHA, etc (un-compressed only)\n      pixelWidth: headerDataView.getUint32(6 * dataSize, littleEndian), // level 0 value of arg passed to gl.compressedTexImage2D(,,,x,,,)\n      pixelHeight: headerDataView.getUint32(7 * dataSize, littleEndian), // level 0 value of arg passed to gl.compressedTexImage2D(,,,,x,,)\n      pixelDepth: headerDataView.getUint32(8 * dataSize, littleEndian), // level 0 value of arg passed to gl.compressedTexImage3D(,,,,,x,,)\n      numberOfArrayElements: headerDataView.getUint32(9 * dataSize, littleEndian), // used for texture arrays\n      numberOfFaces: headerDataView.getUint32(10 * dataSize, littleEndian), // used for cubemap textures, should either be 1 or 6\n      numberOfMipmapLevels: headerDataView.getUint32(11 * dataSize, littleEndian), // number of levels; disregard possibility of 0 for compressed textures\n      bytesOfKeyValueData: headerDataView.getUint32(12 * dataSize, littleEndian), // the amount of space after the header for meta-data\n      // would need to make this more elaborate & adjust checks above to support more than one load type\n      loadType: COMPRESSED_2D\n    };\n\n    // Make sure we have a compressed type.  Not only reduces work, but probably better to let dev know they are not compressing.\n    if (parsedResult.glType !== 0) {\n      throw new Error(\"only compressed formats currently supported\");\n    } else {\n      // value of zero is an indication to generate mipmaps @ runtime.  Not usually allowed for compressed, so disregard.\n      parsedResult.numberOfMipmapLevels = Math.max(1, parsedResult.numberOfMipmapLevels);\n    }\n\n    if (parsedResult.pixelHeight === 0 || parsedResult.pixelDepth !== 0) {\n      throw new Error(\"only 2D textures currently supported\");\n    }\n\n    if (parsedResult.numberOfArrayElements !== 0) {\n      throw new Error(\"texture arrays not currently supported\");\n    }\n\n    if (parsedResult.numberOfFaces !== facesExpected) {\n      throw new Error(\"number of faces expected\" + facesExpected + \", but found \" + parsedResult.numberOfFaces);\n    }\n\n    if (withMipmaps) {\n      parsedResult.mipmaps = getMipmaps(parsedResult, true);\n    }\n\n    if (mapEngineFormat) {\n      parsedResult.engineFormat = getEngineFormat(parsedResult.glInternalFormat);\n    }\n    return parsedResult;\n  }\n};\n","import { CompressedTextureData, CompressedCubeData } from \"./type\";\nimport { khronosTextureContainerParser } from \"./KhronosTextureContainer\";\nimport { TextureFormat } from \"@galacean/engine-core\";\n\nexport function parseSingleKTX(data: ArrayBuffer): CompressedTextureData {\n  const ktx = khronosTextureContainerParser.parse(data, 1, true, true);\n  return {\n    mipmaps: ktx.mipmaps,\n    engineFormat: ktx.engineFormat,\n    internalFormat: ktx.glInternalFormat,\n    width: ktx.pixelWidth,\n    height: ktx.pixelHeight\n  };\n}\n\nexport function parseCubeKTX(dataArray: ArrayBuffer[]): CompressedCubeData {\n  const mipmapsFaces = [];\n  let internalFormat: number;\n  let engineFormat: TextureFormat;\n  let width: number;\n  let height: number;\n  for (let i = 0; i < dataArray.length; i++) {\n    const ktx = khronosTextureContainerParser.parse(dataArray[i], 1, true, true);\n    mipmapsFaces.push(ktx.mipmaps);\n    if (i === 0) {\n      width = ktx.pixelWidth;\n      height = ktx.pixelHeight;\n      internalFormat = ktx.glInternalFormat;\n      engineFormat = ktx.engineFormat;\n    }\n  }\n  return {\n    mipmapsFaces,\n    engineFormat,\n    internalFormat,\n    width,\n    height\n  };\n}\n","import {\n  AssetPromise,\n  AssetType,\n  Loader,\n  LoadItem,\n  resourceLoader,\n  ResourceManager,\n  TextureCubeFace,\n  TextureCube\n} from \"@galacean/engine-core\";\nimport { parseCubeKTX } from \"./compressed-texture\";\n\n@resourceLoader(AssetType.KTXCube, [])\nclass KTXCubeLoader extends Loader<TextureCube> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<TextureCube> {\n    return new AssetPromise((resolve, reject) => {\n      Promise.all(\n        item.urls.map((url) =>\n          // @ts-ignore\n          resourceManager._request<ArrayBuffer>(url, {\n            ...item,\n            type: \"arraybuffer\"\n          })\n        )\n      )\n        .then((data) => {\n          const parsedData = parseCubeKTX(data);\n          const { width, mipmapsFaces, engineFormat } = parsedData;\n          const mipmap = mipmapsFaces[0].length > 1;\n          const texture = new TextureCube(resourceManager.engine, width, engineFormat, mipmap);\n\n          for (let face = 0; face < 6; face++) {\n            const length = mipmapsFaces[face].length;\n\n            for (let miplevel = 0; miplevel < length; miplevel++) {\n              const { data, width, height } = mipmapsFaces[face][miplevel];\n\n              texture.setPixelBuffer(TextureCubeFace.PositiveX + face, data, miplevel, 0, 0, width, height);\n            }\n          }\n\n          resolve(texture);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n}\n","import {\n  AssetPromise,\n  AssetType,\n  Loader,\n  LoadItem,\n  resourceLoader,\n  ResourceManager,\n  Texture2D\n} from \"@galacean/engine-core\";\nimport { parseSingleKTX } from \"./compressed-texture\";\n\n@resourceLoader(AssetType.KTX, [\"ktx\"])\nexport class KTXLoader extends Loader<Texture2D> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<Texture2D> {\n    return new AssetPromise((resolve, reject) => {\n      resourceManager\n        // @ts-ignore\n        ._request<ArrayBuffer>(item.url, {\n          ...item,\n          type: \"arraybuffer\"\n        })\n        .then((bin) => {\n          const parsedData = parseSingleKTX(bin);\n          const { width, height, mipmaps, engineFormat } = parsedData;\n          const mipmap = mipmaps.length > 1;\n          const texture = new Texture2D(resourceManager.engine, width, height, engineFormat, mipmap);\n\n          for (let miplevel = 0; miplevel < mipmaps.length; miplevel++) {\n            const { width, height, data } = mipmaps[miplevel];\n            texture.setPixelBuffer(data, miplevel, 0, 0, width, height);\n          }\n\n          resolve(texture);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n}\n","import {\n  AssetPromise,\n  AssetType,\n  Engine,\n  LoadItem,\n  Loader,\n  Material,\n  ResourceManager,\n  Shader,\n  Texture2D,\n  resourceLoader\n} from \"@galacean/engine-core\";\nimport { Color, Vector2, Vector3, Vector4 } from \"@galacean/engine-math\";\nimport {\n  MaterialLoaderType,\n  type IAssetRef,\n  type IColor,\n  type IMaterialSchema,\n  type IVector2,\n  type IVector3,\n  type IVector4\n} from \"./resource-deserialize\";\n\nfunction parseProperty(object: Object, key: string, value: any) {\n  if (typeof value === \"object\") {\n    for (let subKey in value) {\n      parseProperty(object[key], subKey, value[subKey]);\n    }\n  } else {\n    object[key] = value;\n  }\n}\n\n@resourceLoader(AssetType.Material, [\"json\"])\nclass MaterialLoader extends Loader<Material> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<Material> {\n    return new AssetPromise((resolve, reject) => {\n      resourceManager\n        // @ts-ignore\n        ._request(item.url, {\n          ...item,\n          type: \"json\"\n        })\n        .then((materialSchema: IMaterialSchema) => {\n          const engine = resourceManager.engine;\n          const { shaderRef, shader: shaderName } = materialSchema;\n          const shader = Shader.find(shaderName);\n          if (shader) {\n            resolve(this._getMaterialByShader(materialSchema, shader, engine));\n          } else if (shaderRef) {\n            resolve(\n              resourceManager\n                // @ts-ignore\n                .getResourceByRef<Shader>(<IAssetRef>shaderRef)\n                .then((shader) => this._getMaterialByShader(materialSchema, shader, engine))\n            );\n          }\n        })\n        .catch(reject);\n    });\n  }\n\n  private _getMaterialByShader(materialSchema: IMaterialSchema, shader: Shader, engine: Engine): Promise<Material> {\n    const { name, shaderData, macros, renderState } = materialSchema;\n\n    const material = new Material(engine, shader);\n    material.name = name;\n\n    const texturePromises = new Array<Promise<Texture2D>>();\n    const materialShaderData = material.shaderData;\n    for (let key in shaderData) {\n      const { type, value } = shaderData[key];\n\n      switch (type) {\n        case MaterialLoaderType.Vector2:\n          materialShaderData.setVector2(key, new Vector2((<IVector2>value).x, (<IVector2>value).y));\n          break;\n        case MaterialLoaderType.Vector3:\n          materialShaderData.setVector3(\n            key,\n            new Vector3((<IVector3>value).x, (<IVector3>value).y, (<IVector3>value).z)\n          );\n          break;\n        case MaterialLoaderType.Vector4:\n          materialShaderData.setVector4(\n            key,\n            new Vector4((<IVector4>value).x, (<IVector4>value).y, (<IVector4>value).z, (<IVector4>value).w)\n          );\n          break;\n        case MaterialLoaderType.Color:\n          materialShaderData.setColor(\n            key,\n            new Color((<IColor>value).r, (<IColor>value).g, (<IColor>value).b, (<IColor>value).a)\n          );\n          break;\n        case MaterialLoaderType.Float:\n          materialShaderData.setFloat(key, <number>value);\n          break;\n        case MaterialLoaderType.Texture:\n          texturePromises.push(\n            // @ts-ignore\n            engine.resourceManager.getResourceByRef<Texture2D>(<IAssetRef>value).then((texture) => {\n              materialShaderData.setTexture(key, texture);\n            })\n          );\n          break;\n        case MaterialLoaderType.Boolean:\n          materialShaderData.setInt(key, value ? 1 : 0);\n          break;\n        case MaterialLoaderType.Integer:\n          materialShaderData.setInt(key, Number(value));\n          break;\n      }\n    }\n\n    for (let i = 0, length = macros.length; i < length; i++) {\n      const { name, value } = macros[i];\n      if (value == undefined) {\n        materialShaderData.enableMacro(name);\n      } else {\n        materialShaderData.enableMacro(name, value);\n      }\n    }\n\n    parseProperty(material, \"renderState\", renderState);\n\n    return Promise.all(texturePromises).then(() => {\n      return material;\n    });\n  }\n}\n","import {\n  resourceLoader,\n  Loader,\n  AssetPromise,\n  AssetType,\n  LoadItem,\n  ResourceManager,\n  ModelMesh\n} from \"@galacean/engine-core\";\nimport { decode } from \"./resource-deserialize\";\n\n@resourceLoader(AssetType.Mesh, [\"mesh\"])\nclass MeshLoader extends Loader<ModelMesh> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<ModelMesh> {\n    return new AssetPromise((resolve, reject) => {\n      resourceManager\n        // @ts-ignore\n        ._request<any>(item.url, {\n          ...item,\n          type: \"arraybuffer\"\n        })\n        .then((data) => {\n          return decode<ModelMesh>(data, resourceManager.engine);\n        })\n        .then((mesh) => {\n          resolve(mesh);\n        })\n        .catch(reject);\n    });\n  }\n}\n","import {\n  AssetPromise,\n  AssetType,\n  LoadItem,\n  Loader,\n  ModelMesh,\n  PrimitiveMesh,\n  ResourceManager,\n  resourceLoader\n} from \"@galacean/engine-core\";\n\n@resourceLoader(AssetType.PrimitiveMesh, [\"mesh\"], false)\nclass PrimitiveMeshLoader extends Loader<ModelMesh> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<ModelMesh> {\n    const { engine } = resourceManager;\n    return (\n      resourceManager\n        // @ts-ignore\n        ._request<IPrimitiveMesh>(item.url, {\n          ...item,\n          type: \"json\"\n        })\n        .then((data) => {\n          switch (data.type) {\n            case PrimitiveMeshType.Sphere:\n              return PrimitiveMesh.createSubdivisionSurfaceSphere(engine, data.sphereRadius, data.sphereStep);\n            case PrimitiveMeshType.Capsule:\n              return PrimitiveMesh.createCapsule(\n                engine,\n                data.capsuleRadius,\n                data.capsuleHeight,\n                data.capsuleRadialSegments,\n                data.capsuleHeightSegments\n              );\n            case PrimitiveMeshType.Cone:\n              return PrimitiveMesh.createCone(\n                engine,\n                data.coneRadius,\n                data.coneHeight,\n                data.coneRadialSegment,\n                data.coneHeightSegment\n              );\n            case PrimitiveMeshType.Cuboid:\n              return PrimitiveMesh.createCuboid(engine, data.cuboidWidth, data.cuboidHeight, data.cuboidDepth);\n            case PrimitiveMeshType.Cylinder:\n              return PrimitiveMesh.createCylinder(\n                engine,\n                data.cylinderRadiusTop,\n                data.cylinderRadiusBottom,\n                data.cylinderHeight,\n                data.cylinderRadialSegment,\n                data.cylinderHeightSegment\n              );\n            case PrimitiveMeshType.Plane:\n              return PrimitiveMesh.createPlane(\n                engine,\n                data.planeWidth,\n                data.planeHeight,\n                data.planeHorizontalSegments,\n                data.planeVerticalSegments\n              );\n            case PrimitiveMeshType.Torus:\n              return PrimitiveMesh.createTorus(\n                engine,\n                data.torusRadius,\n                data.torusTubeRadius,\n                data.torusRadialSegments,\n                data.torusTubularSegments,\n                data.torusArc\n              );\n          }\n        })\n    );\n  }\n}\n\n/** @internal */\nenum PrimitiveMeshType {\n  Sphere = \"sphere\",\n  Cuboid = \"cuboid\",\n  Plane = \"plane\",\n  Cylinder = \"cylinder\",\n  Torus = \"torus\",\n  Cone = \"cone\",\n  Capsule = \"capsule\"\n}\n\n/** @internal */\ntype IPrimitiveMesh = {\n  type: PrimitiveMeshType;\n  sphereRadius: number;\n  sphereStep: number;\n  capsuleRadius: number;\n  capsuleHeight: number;\n  capsuleRadialSegments: number;\n  capsuleHeightSegments: number;\n  coneRadius: number;\n  coneHeight: number;\n  coneRadialSegment: number;\n  coneHeightSegment: number;\n  cuboidWidth: number;\n  cuboidHeight: number;\n  cuboidDepth: number;\n  cylinderRadiusTop: number;\n  cylinderRadiusBottom: number;\n  cylinderHeight: number;\n  cylinderRadialSegment: number;\n  cylinderHeightSegment: number;\n  planeWidth: number;\n  planeHeight: number;\n  planeHorizontalSegments: number;\n  planeVerticalSegments: number;\n  torusRadius: number;\n  torusTubeRadius: number;\n  torusRadialSegments: number;\n  torusTubularSegments: number;\n  torusArc: number;\n};\n","import {\n  AssetPromise,\n  AssetType,\n  Loader,\n  LoadItem,\n  resourceLoader,\n  ResourceManager,\n  Scene\n} from \"@galacean/engine-core\";\nimport { IProject } from \"./resource-deserialize\";\n\n@resourceLoader(AssetType.Project, [\"proj\"], false)\nclass ProjectLoader extends Loader<void> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<void> {\n    const { engine } = resourceManager;\n    return new AssetPromise((resolve, reject) => {\n      resourceManager\n        // @ts-ignore\n        ._request<IProject>(item.url, { ...item, type: \"json\" })\n        .then((data) => {\n          // @ts-ignore\n          engine.resourceManager.initVirtualResources(data.files);\n          return resourceManager.load<Scene>({ type: AssetType.Scene, url: data.scene }).then((scene) => {\n            engine.sceneManager.activeScene = scene;\n            resolve();\n          });\n        })\n        .catch(reject);\n    });\n  }\n}\n","import {\n  AssetPromise,\n  AssetType,\n  Font,\n  Loader,\n  LoadItem,\n  resourceLoader,\n  ResourceManager\n} from \"@galacean/engine-core\";\n\n@resourceLoader(AssetType.SourceFont, [\"ttf\", \"otf\", \"woff\"], false)\nclass SourceFontLoader extends Loader<Font> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<Font> {\n    return new AssetPromise((resolve, reject) => {\n      // @ts-ignore\n      const url = resourceManager._getRemoteUrl(item.url);\n      this._registerFont(url, url)\n        .then(() => {\n          const font = new Font(resourceManager.engine, url);\n          resolve(font);\n        })\n        .catch((e) => {\n          reject(`load font ${url} fail`);\n        });\n    });\n  }\n\n  private async _registerFont(fontName: string, fontUrl: string): Promise<void> {\n    const fontFace = new FontFace(fontName, `url(${fontUrl})`);\n    await fontFace.load();\n    document.fonts.add(fontFace);\n  }\n}\n","import {\n  AssetPromise,\n  AssetType,\n  Engine,\n  Loader,\n  LoadItem,\n  resourceLoader,\n  ResourceManager,\n  Sprite,\n  SpriteAtlas,\n  Texture2D,\n  Utils\n} from \"@galacean/engine-core\";\nimport { AtlasConfig, AtlasSprite } from \"@galacean/engine-core/types/2d/atlas/types\";\nimport { Rect, Vector2, Vector4 } from \"@galacean/engine-math\";\n\n@resourceLoader(AssetType.SpriteAtlas, [\"atlas\"], false)\nclass SpriteAtlasLoader extends Loader<SpriteAtlas> {\n  private _tempRect: Rect = new Rect();\n  private _tempVec2: Vector2 = new Vector2();\n  private _tempVec4: Vector4 = new Vector4();\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<SpriteAtlas> {\n    return new AssetPromise<SpriteAtlas>((resolve, reject, _, __, onCancel) => {\n      const chainPromises = [];\n      onCancel(() => {\n        for (let i = 0; i < chainPromises.length; i++) {\n          chainPromises[i].cancel();\n        }\n      });\n      // @ts-ignore\n      const configPromise = resourceManager._request<AtlasConfig>(item.url, {\n        ...item,\n        type: \"json\"\n      });\n      chainPromises.push(configPromise);\n      configPromise\n        .then((atlasData) => {\n          const { atlasItems, mipmap, anisoLevel, filterMode, wrapModeU, wrapModeV, format } = atlasData;\n          const atlasItemsLen = atlasItems ? atlasItems.length : 0;\n          const { engine } = resourceManager;\n          const spriteAtlas = new SpriteAtlas(engine);\n          if (atlasItemsLen <= 0) {\n            resolve(spriteAtlas);\n            return;\n          }\n          chainPromises.length = 0;\n          for (let i = 0; i < atlasItemsLen; i++) {\n            const atlasItem = atlasItems[i];\n            if (atlasItem.img) {\n              chainPromises.push(\n                resourceManager\n                  .load<Texture2D>({\n                    url: Utils.resolveAbsoluteUrl(item.url, atlasItem.img),\n                    type: atlasItem.type ?? AssetType.Texture2D,\n                    params: { format, mipmap }\n                  })\n                  .then((texture: Texture2D) => {\n                    anisoLevel && (texture.anisoLevel = anisoLevel);\n                    filterMode !== undefined && (texture.filterMode = filterMode);\n                    wrapModeU !== undefined && (texture.wrapModeU = wrapModeU);\n                    wrapModeV !== undefined && (texture.wrapModeV = wrapModeV);\n                    for (let i = 0; i < atlasItem.sprites.length; i++) {\n                      // @ts-ignore\n                      spriteAtlas._addSprite(this._makeSprite(engine, atlasItem.sprites[i], texture));\n                    }\n                  })\n                  .catch(reject)\n              );\n            } else {\n              for (let i = 0; i < atlasItem.sprites.length; i++) {\n                // @ts-ignore\n                spriteAtlas._addSprite(this._makeSprite(engine, atlasItem.sprites[i]));\n              }\n            }\n          }\n          AssetPromise.all(chainPromises)\n            .then(() => {\n              resolve(spriteAtlas);\n            })\n            .catch(reject);\n        })\n        .catch(reject);\n    });\n  }\n\n  private _makeSprite(engine: Engine, config: AtlasSprite, texture?: Texture2D): Sprite {\n    // Generate a SpriteAtlas object.\n    const { region, atlasRegionOffset, atlasRegion, pivot, border, width, height } = config;\n    const sprite = new Sprite(\n      engine,\n      texture,\n      region ? this._tempRect.set(region.x, region.y, region.w, region.h) : undefined,\n      pivot ? this._tempVec2.set(pivot.x, pivot.y) : undefined,\n      border ? this._tempVec4.set(border.x, border.y, border.z, border.w) : undefined,\n      config.name\n    );\n    if (texture) {\n      const invW = 1 / texture.width;\n      const invH = 1 / texture.height;\n      sprite.atlasRegion.set(atlasRegion.x * invW, atlasRegion.y * invH, atlasRegion.w * invW, atlasRegion.h * invH);\n      if (atlasRegionOffset) {\n        const { x: offsetLeft, y: offsetTop, z: offsetRight, w: offsetBottom } = atlasRegionOffset;\n        sprite.atlasRegionOffset.set(offsetLeft * invW, offsetTop * invH, offsetRight * invW, offsetBottom * invH);\n      }\n      config.atlasRotated && (sprite.atlasRotated = true);\n    }\n    isNaN(width) || (sprite.width = width);\n    isNaN(height) || (sprite.height = height);\n    return sprite;\n  }\n}\n","import {\n  AssetPromise,\n  AssetType,\n  LoadItem,\n  Loader,\n  ResourceManager,\n  Sprite,\n  SpriteAtlas,\n  Texture2D,\n  resourceLoader\n} from \"@galacean/engine-core\";\n\n@resourceLoader(AssetType.Sprite, [\"sprite\"], false)\nclass SpriteLoader extends Loader<Sprite> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<Sprite> {\n    return (\n      resourceManager\n        // @ts-ignore\n        ._request<any>(item.url, {\n          ...item,\n          type: \"json\"\n        })\n        .then((data) => {\n          return data.belongToAtlas\n            ? this._loadFromAtlas(resourceManager, data)\n            : this._loadFromTexture(resourceManager, data);\n        })\n    );\n  }\n\n  private _loadFromAtlas(resourceManager: ResourceManager, data: any): AssetPromise<Sprite> {\n    return (\n      resourceManager\n        // @ts-ignore\n        .getResourceByRef(data.belongToAtlas)\n        .then((atlas: SpriteAtlas) => {\n          return atlas.getSprite(data.fullPath) || this._loadFromTexture(resourceManager, data);\n        })\n    );\n  }\n\n  private _loadFromTexture(resourceManager: ResourceManager, data: any): AssetPromise<Sprite> {\n    if (data.texture) {\n      return (\n        resourceManager\n          // @ts-ignore\n          .getResourceByRef(data.texture)\n          .then((texture: Texture2D) => {\n            const sprite = new Sprite(resourceManager.engine, texture, data.region, data.pivot, data.border);\n            const { width, height } = data;\n            isNaN(width) || (sprite.width = width);\n            isNaN(height) || (sprite.height = height);\n            return sprite;\n          })\n      );\n    } else {\n      return new AssetPromise((resolve) => {\n        const sprite = new Sprite(resourceManager.engine, null, data.region, data.pivot, data.border);\n        const { width, height } = data;\n        isNaN(width) || (sprite.width = width);\n        isNaN(height) || (sprite.height = height);\n        resolve(sprite);\n      });\n    }\n  }\n}\n","import { AssetPromise, ContentRestorer, request, Texture2D } from \"@galacean/engine-core\";\nimport { RequestConfig } from \"@galacean/engine-core/types/asset/request\";\n\n/**\n * @internal\n */\nexport class Texture2DContentRestorer extends ContentRestorer<Texture2D> {\n  constructor(\n    resource: Texture2D,\n    public url: string,\n    public requestConfig: RequestConfig\n  ) {\n    super(resource);\n  }\n\n  override restoreContent(): AssetPromise<Texture2D> {\n    return request<HTMLImageElement>(this.url, this.requestConfig).then((image) => {\n      const resource = this.resource;\n      resource.setImageSource(image);\n      resource.generateMipmaps();\n      return resource;\n    });\n  }\n}\n","import {\n  AssetPromise,\n  AssetType,\n  Loader,\n  LoadItem,\n  resourceLoader,\n  ResourceManager,\n  Texture2D,\n  TextureFilterMode,\n  TextureFormat,\n  TextureWrapMode\n} from \"@galacean/engine-core\";\nimport { RequestConfig } from \"@galacean/engine-core/types/asset/request\";\nimport { Texture2DContentRestorer } from \"./Texture2DContentRestorer\";\n\n@resourceLoader(AssetType.Texture2D, [\"png\", \"jpg\", \"webp\", \"jpeg\"])\nclass Texture2DLoader extends Loader<Texture2D> {\n  override load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<Texture2D> {\n    return new AssetPromise((resolve, reject, setTaskCompleteProgress, setTaskDetailProgress) => {\n      const url = item.url;\n      const requestConfig = <RequestConfig>{\n        ...item,\n        type: \"image\"\n      };\n      resourceManager\n        // @ts-ignore\n        ._request<HTMLImageElement>(url, requestConfig)\n        .onProgress(setTaskCompleteProgress, setTaskDetailProgress)\n        .then((image) => {\n          const { format, mipmap, anisoLevel, wrapModeU, wrapModeV, filterMode } =\n            (item.params as Partial<Texture2DParams>) ?? {};\n\n          const texture = new Texture2D(resourceManager.engine, image.width, image.height, format, mipmap);\n\n          texture.anisoLevel = anisoLevel ?? texture.anisoLevel;\n          texture.filterMode = filterMode ?? texture.filterMode;\n          texture.wrapModeU = wrapModeU ?? texture.wrapModeU;\n          texture.wrapModeV = wrapModeV ?? texture.wrapModeV;\n\n          texture.setImageSource(image);\n          texture.generateMipmaps();\n\n          if (url.indexOf(\"data:\") !== 0) {\n            const index = url.lastIndexOf(\"/\");\n            texture.name = url.substring(index + 1);\n          }\n\n          resourceManager.addContentRestorer(new Texture2DContentRestorer(texture, url, requestConfig));\n          resolve(texture);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n}\n\n/**\n * Texture2D loader params interface.\n */\nexport interface Texture2DParams {\n  /** Texture format. default  `TextureFormat.R8G8B8A8` */\n  format: TextureFormat;\n  /** Whether to use multi-level texture, default is true. */\n  mipmap: boolean;\n  /** Wrapping mode for texture coordinate S. */\n  wrapModeU: TextureWrapMode;\n  /** Wrapping mode for texture coordinate T. */\n  wrapModeV: TextureWrapMode;\n  /** Filter mode for texture. */\n  filterMode: TextureFilterMode;\n  /** Anisotropic level for texture. */\n  anisoLevel: number;\n}\n","import { AssetPromise, ContentRestorer, request, TextureCube, TextureCubeFace } from \"@galacean/engine-core\";\nimport { RequestConfig } from \"@galacean/engine-core/types/asset/request\";\n\n/**\n * @internal\n */\nexport class TextureCubeContentRestorer extends ContentRestorer<TextureCube> {\n  constructor(\n    resource: TextureCube,\n    public urls: string[],\n    public requestConfig: RequestConfig\n  ) {\n    super(resource);\n  }\n\n  override restoreContent(): AssetPromise<TextureCube> {\n    return new AssetPromise((resolve, reject) => {\n      Promise.all(this.urls.map((url) => request<HTMLImageElement>(url, this.requestConfig)))\n        .then((images) => {\n          const resource = this.resource;\n          for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n            resource.setImageSource(TextureCubeFace.PositiveX + faceIndex, images[faceIndex], 0);\n          }\n          resource.generateMipmaps();\n          resolve(resource);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n}\n","import {\n  AssetPromise,\n  AssetType,\n  Loader,\n  LoadItem,\n  resourceLoader,\n  ResourceManager,\n  TextureCube,\n  TextureCubeFace\n} from \"@galacean/engine-core\";\nimport { RequestConfig } from \"@galacean/engine-core/types/asset/request\";\nimport { TextureCubeContentRestorer } from \"./TextureCubeContentRestorer\";\n\n@resourceLoader(AssetType.TextureCube, [\"\"])\nclass TextureCubeLoader extends Loader<TextureCube> {\n  override load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<TextureCube> {\n    return new AssetPromise((resolve, reject) => {\n      const urls = item.urls;\n      const requestConfig = <RequestConfig>{\n        ...item,\n        type: \"image\"\n      };\n\n      // @ts-ignore\n      Promise.all(urls.map((url) => resourceManager._request<HTMLImageElement>(url, requestConfig)))\n        .then((images) => {\n          const { width, height } = images[0];\n\n          if (width !== height) {\n            console.error(\"The cube texture must have the same width and height\");\n            return;\n          }\n\n          const texture = new TextureCube(resourceManager.engine, width);\n          for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n            texture.setImageSource(TextureCubeFace.PositiveX + faceIndex, images[faceIndex], 0);\n          }\n          texture.generateMipmaps();\n\n          resourceManager.addContentRestorer(new TextureCubeContentRestorer(texture, urls, requestConfig));\n          resolve(texture);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n}\n","import {\n  AssetPromise,\n  LoadItem,\n  Loader,\n  ResourceManager,\n  ShaderFactory,\n  resourceLoader,\n  // @ts-ignore\n  ShaderLib,\n  Utils\n} from \"@galacean/engine-core\";\n\n@resourceLoader(\"ShaderChunk\", [\"glsl\"])\nexport class ShaderChunkLoader extends Loader<void[]> {\n  private static _shaderIncludeRegex = /\\s#include\\s+\"([./][^\\\\\"]+)\"/gm;\n\n  /**\n   * @internal\n   */\n  static _loadChunksInCode(code: string, basePath: string, resourceManager: ResourceManager): Promise<void[]> {\n    const shaderChunkPaths = new Array<string>();\n    const matches = code.matchAll(ShaderChunkLoader._shaderIncludeRegex);\n    for (const match of matches) {\n      const chunkPath = Utils.resolveAbsoluteUrl(basePath, match[1]);\n      if (!ShaderLib[chunkPath.substring(1)]) {\n        shaderChunkPaths.push(chunkPath);\n      }\n    }\n\n    return Promise.all(\n      shaderChunkPaths.map((chunkPath) => {\n        return resourceManager.load<void>({\n          type: \"ShaderChunk\",\n          url: chunkPath\n        });\n      })\n    );\n  }\n\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<void[]> {\n    const { url } = item;\n\n    // @ts-ignore\n    return resourceManager._request<string>(url, { ...item, type: \"text\" }).then((code) => {\n      ShaderFactory.registerInclude(url.substring(1), code);\n\n      return ShaderChunkLoader._loadChunksInCode(code, url, resourceManager);\n    });\n  }\n}\n","import {\n  AssetPromise,\n  AssetType,\n  LoadItem,\n  Loader,\n  ResourceManager,\n  Shader,\n  resourceLoader\n} from \"@galacean/engine-core\";\nimport { ShaderChunkLoader } from \"./ShaderChunkLoader\";\n\n@resourceLoader(AssetType.Shader, [\"gs\", \"gsl\"])\nclass ShaderLoader extends Loader<Shader> {\n  private static _builtinRegex = /^\\s*\\/\\/\\s*@builtin\\s+(\\w+)/;\n\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<Shader> {\n    const { url } = item;\n\n    // @ts-ignore\n    return resourceManager._request<string>(url, { ...item, type: \"text\" }).then((code: string) => {\n      const builtinShader = this._getBuiltinShader(code);\n      if (builtinShader) {\n        return Shader.find(builtinShader);\n      }\n\n      return ShaderChunkLoader._loadChunksInCode(code, url, resourceManager).then(() => {\n        const shader = Shader.create(code);\n        // @ts-ignore\n        shader._registerPath(url);\n        return shader;\n      });\n    });\n  }\n\n  private _getBuiltinShader(code: string) {\n    const match = code.match(ShaderLoader._builtinRegex);\n    if (match && match[1]) return match[1];\n  }\n}\n","import {\n  AssetPromise,\n  AssetType,\n  BackgroundMode,\n  BloomEffect,\n  DiffuseMode,\n  Font,\n  Loader,\n  LoadItem,\n  Logger,\n  Mesh,\n  resourceLoader,\n  ResourceManager,\n  Scene,\n  TonemappingEffect\n} from \"@galacean/engine-core\";\nimport { IClassObject, IScene, ReflectionParser, SceneParser, SpecularMode } from \"./resource-deserialize\";\n\n@resourceLoader(AssetType.Scene, [\"scene\"], true)\nclass SceneLoader extends Loader<Scene> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<Scene> {\n    const { engine } = resourceManager;\n    return new AssetPromise((resolve, reject) => {\n      resourceManager\n        // @ts-ignore\n        ._request<IScene>(item.url, { ...item, type: \"json\" })\n        .then((data) => {\n          return SceneParser.parse(engine, data).then((scene) => {\n            const promises = [];\n            // parse ambient light\n            const ambient = data.scene.ambient;\n            if (ambient) {\n              const useCustomAmbient = ambient.specularMode === SpecularMode.Custom;\n              const useSH = ambient.diffuseMode === DiffuseMode.SphericalHarmonics;\n\n              scene.ambientLight.diffuseIntensity = ambient.diffuseIntensity;\n              scene.ambientLight.specularIntensity = ambient.specularIntensity;\n              scene.ambientLight.diffuseMode = ambient.diffuseMode;\n              scene.ambientLight.diffuseSolidColor.copyFrom(ambient.diffuseSolidColor);\n              scene.ambientLight.specularTextureDecodeRGBM = true;\n\n              if (useCustomAmbient && ambient.customAmbientLight) {\n                promises.push(\n                  // @ts-ignore\n                  resourceManager.getResourceByRef<any>(ambient.customAmbientLight).then((ambientLight) => {\n                    scene.ambientLight.specularTexture = ambientLight?.specularTexture;\n                  })\n                );\n              }\n\n              if (ambient.ambientLight && (!useCustomAmbient || useSH)) {\n                promises.push(\n                  // @ts-ignore\n                  resourceManager.getResourceByRef<any>(ambient.ambientLight).then((ambientLight) => {\n                    if (!useCustomAmbient) {\n                      scene.ambientLight.specularTexture = ambientLight?.specularTexture;\n                    }\n\n                    if (useSH) {\n                      scene.ambientLight.diffuseSphericalHarmonics = ambientLight?.diffuseSphericalHarmonics;\n                    }\n                  })\n                );\n              }\n            }\n\n            // parse background\n            const background = data.scene.background;\n            scene.background.mode = background.mode;\n\n            switch (scene.background.mode) {\n              case BackgroundMode.SolidColor:\n                scene.background.solidColor.copyFrom(background.color);\n                break;\n              case BackgroundMode.Sky:\n                if (background.skyMesh && background.skyMaterial) {\n                  // @ts-ignore\n                  const skyMeshPromise = resourceManager.getResourceByRef<Mesh>(background.skyMesh).then((mesh) => {\n                    scene.background.sky.mesh = mesh;\n                  });\n                  // @ts-ignore\n                  // prettier-ignore\n                  const skyMaterialPromise = resourceManager.getResourceByRef<Material>(background.skyMaterial).then((material) => {\n                    scene.background.sky.material = material;\n                  });\n                  promises.push(skyMeshPromise, skyMaterialPromise);\n                } else {\n                  Logger.warn(\"Sky background mode requires skyMesh and skyMaterial\");\n                }\n                break;\n              case BackgroundMode.Texture:\n                if (background.texture) {\n                  // @ts-ignore\n                  // prettier-ignore\n                  const backgroundPromise = resourceManager.getResourceByRef<any>(background.texture).then((texture) => {\n                    scene.background.texture = texture;\n                  });\n                  promises.push(backgroundPromise);\n                  scene.background.textureFillMode = background.textureFillMode ?? scene.background.textureFillMode;\n                }\n                break;\n            }\n\n            // parse shadow\n            const shadow = data.scene.shadow;\n            if (shadow) {\n              if (shadow.castShadows != undefined) scene.castShadows = shadow.castShadows;\n              if (shadow.shadowResolution != undefined) scene.shadowResolution = shadow.shadowResolution;\n              if (shadow.shadowDistance != undefined) scene.shadowDistance = shadow.shadowDistance;\n              if (shadow.shadowCascades != undefined) scene.shadowCascades = shadow.shadowCascades;\n              if (shadow.enableTransparentShadow != undefined) {\n                scene.enableTransparentShadow = shadow.enableTransparentShadow;\n              }\n              scene.shadowTwoCascadeSplits = shadow.shadowTwoCascadeSplits ?? scene.shadowTwoCascadeSplits;\n              shadow.shadowFourCascadeSplits && scene.shadowFourCascadeSplits.copyFrom(shadow.shadowFourCascadeSplits);\n              scene.shadowFadeBorder = shadow.shadowFadeBorder ?? scene.shadowFadeBorder;\n            }\n\n            // parse fog\n            const fog = data.scene.fog;\n            if (fog) {\n              if (fog.fogMode != undefined) scene.fogMode = fog.fogMode;\n              if (fog.fogStart != undefined) scene.fogStart = fog.fogStart;\n              if (fog.fogEnd != undefined) scene.fogEnd = fog.fogEnd;\n              if (fog.fogDensity != undefined) scene.fogDensity = fog.fogDensity;\n              if (fog.fogColor != undefined) scene.fogColor.copyFrom(fog.fogColor);\n            }\n\n            // Post Process\n            const postProcessData = data.scene.postProcess;\n            if (postProcessData) {\n              // @ts-ignore\n              const postProcessManager = scene._postProcessManager;\n              const bloomEffect = postProcessManager._bloomEffect as BloomEffect;\n              const tonemappingEffect = postProcessManager._tonemappingEffect as TonemappingEffect;\n\n              postProcessManager.isActive = postProcessData.isActive;\n              bloomEffect.enabled = postProcessData.bloom.enabled;\n              bloomEffect.downScale = postProcessData.bloom.downScale;\n              bloomEffect.threshold = postProcessData.bloom.threshold;\n              bloomEffect.scatter = postProcessData.bloom.scatter;\n              bloomEffect.intensity = postProcessData.bloom.intensity;\n              bloomEffect.tint.copyFrom(postProcessData.bloom.tint);\n              bloomEffect.dirtIntensity = postProcessData.bloom.dirtIntensity;\n              tonemappingEffect.enabled = postProcessData.tonemapping.enabled;\n              tonemappingEffect.mode = postProcessData.tonemapping.mode;\n              if (postProcessData.bloom.dirtTexture) {\n                // @ts-ignore\n                // prettier-ignore\n                const dirtTexturePromise = resourceManager.getResourceByRef<any>(postProcessData.bloom.dirtTexture).then((texture) => {\n                    bloomEffect.dirtTexture = texture;\n                });\n                promises.push(dirtTexturePromise);\n              }\n            }\n\n            return Promise.all(promises).then(() => {\n              resolve(scene);\n            });\n          });\n        })\n        .catch(reject);\n    });\n  }\n}\n\nReflectionParser.registerCustomParseComponent(\n  \"TextRenderer\",\n  async (instance: any, item: Omit<IClassObject, \"class\">) => {\n    const { props } = item;\n    if (!props.font) {\n      // @ts-ignore\n      instance.font = Font.createFromOS(instance.engine, props.fontFamily || \"Arial\");\n    }\n    return instance;\n  }\n);\n","import { DirectLight, Entity, PointLight, SpotLight } from \"@galacean/engine-core\";\nimport { registerGLTFExtension } from \"../parser/GLTFParser\";\nimport { GLTFParserContext } from \"../parser/GLTFParserContext\";\nimport { GLTFExtensionMode, GLTFExtensionParser } from \"./GLTFExtensionParser\";\nimport { IKHRLightsPunctual, IKHRLightsPunctual_LightNode } from \"./GLTFExtensionSchema\";\n\n@registerGLTFExtension(\"KHR_lights_punctual\", GLTFExtensionMode.AdditiveParse)\nclass KHR_lights_punctual extends GLTFExtensionParser {\n  override additiveParse(\n    context: GLTFParserContext,\n    entity: Entity,\n    extensionSchema: IKHRLightsPunctual_LightNode\n  ): void {\n    const lightsSchema = (<IKHRLightsPunctual>context.glTF.extensions.KHR_lights_punctual).lights;\n    const lightSchema = lightsSchema[extensionSchema.light];\n\n    const { color, intensity = 1, type, range, spot } = lightSchema;\n    const glTFResource = context.glTFResource;\n    let light: DirectLight | PointLight | SpotLight;\n\n    if (type === \"directional\") {\n      light = entity.addComponent(DirectLight);\n    } else if (type === \"point\") {\n      light = entity.addComponent(PointLight);\n    } else if (type === \"spot\") {\n      light = entity.addComponent(SpotLight);\n    }\n\n    if (color) {\n      light.color.set(color[0], color[1], color[2], 1);\n    }\n\n    light.intensity = intensity;\n\n    if (range && !(light instanceof DirectLight)) {\n      light.distance = range;\n    }\n\n    if (spot && light instanceof SpotLight) {\n      const { innerConeAngle = 0, outerConeAngle = Math.PI / 4 } = spot;\n\n      light.angle = innerConeAngle;\n      light.penumbra = outerConeAngle - innerConeAngle;\n    }\n\n    glTFResource.lights ||= [];\n    glTFResource.lights.push(light);\n  }\n}\n","import { PBRMaterial, Texture2D } from \"@galacean/engine-core\";\nimport { GLTFMaterialParser } from \"../parser/GLTFMaterialParser\";\nimport { registerGLTFExtension } from \"../parser/GLTFParser\";\nimport { GLTFParserContext, GLTFParserType } from \"../parser/GLTFParserContext\";\nimport { GLTFExtensionMode, GLTFExtensionParser } from \"./GLTFExtensionParser\";\nimport { IKHRMaterialsClearcoat } from \"./GLTFExtensionSchema\";\n\n@registerGLTFExtension(\"KHR_materials_clearcoat\", GLTFExtensionMode.AdditiveParse)\nclass KHR_materials_clearcoat extends GLTFExtensionParser {\n  override additiveParse(context: GLTFParserContext, material: PBRMaterial, schema: IKHRMaterialsClearcoat): void {\n    const {\n      clearcoatFactor = 0,\n      clearcoatTexture,\n      clearcoatRoughnessFactor = 0,\n      clearcoatRoughnessTexture,\n      clearcoatNormalTexture\n    } = schema;\n\n    material.clearCoat = clearcoatFactor;\n    material.clearCoatRoughness = clearcoatRoughnessFactor;\n\n    if (clearcoatTexture) {\n      GLTFMaterialParser._checkOtherTextureTransform(clearcoatTexture, \"Clear coat\");\n\n      context.get<Texture2D>(GLTFParserType.Texture, clearcoatTexture.index).then((texture) => {\n        material.clearCoatTexture = texture;\n      });\n    }\n    if (clearcoatRoughnessTexture) {\n      GLTFMaterialParser._checkOtherTextureTransform(clearcoatRoughnessTexture, \"Clear coat roughness\");\n\n      context.get<Texture2D>(GLTFParserType.Texture, clearcoatRoughnessTexture.index).then((texture) => {\n        material.clearCoatRoughnessTexture = texture;\n      });\n    }\n    if (clearcoatNormalTexture) {\n      GLTFMaterialParser._checkOtherTextureTransform(clearcoatNormalTexture, \"Clear coat normal\");\n\n      context.get<Texture2D>(GLTFParserType.Texture, clearcoatNormalTexture.index).then((texture) => {\n        material.clearCoatNormalTexture = texture;\n      });\n    }\n  }\n}\n","import { PBRMaterial } from \"@galacean/engine-core\";\nimport { registerGLTFExtension } from \"../parser/GLTFParser\";\nimport { GLTFParserContext } from \"../parser/GLTFParserContext\";\nimport { GLTFExtensionMode, GLTFExtensionParser } from \"./GLTFExtensionParser\";\nimport { IKHRMaterialsIor } from \"./GLTFExtensionSchema\";\n\n@registerGLTFExtension(\"KHR_materials_ior\", GLTFExtensionMode.AdditiveParse)\nclass KHR_materials_ior extends GLTFExtensionParser {\n  override additiveParse(context: GLTFParserContext, material: PBRMaterial, schema: IKHRMaterialsIor): void {\n    const { ior = 1.5 } = schema;\n\n    material.ior = ior;\n  }\n}\n","import { PBRSpecularMaterial, Texture2D } from \"@galacean/engine-core\";\nimport { Color } from \"@galacean/engine-math\";\nimport type { IMaterial } from \"../GLTFSchema\";\nimport { GLTFMaterialParser } from \"../parser/GLTFMaterialParser\";\nimport { GLTFParser, registerGLTFExtension } from \"../parser/GLTFParser\";\nimport { GLTFParserContext, GLTFParserType } from \"../parser/GLTFParserContext\";\nimport { GLTFExtensionMode, GLTFExtensionParser } from \"./GLTFExtensionParser\";\nimport { IKHRMaterialsPbrSpecularGlossiness } from \"./GLTFExtensionSchema\";\n\n@registerGLTFExtension(\"KHR_materials_pbrSpecularGlossiness\", GLTFExtensionMode.CreateAndParse)\nclass KHR_materials_pbrSpecularGlossiness extends GLTFExtensionParser {\n  override createAndParse(\n    context: GLTFParserContext,\n    schema: IKHRMaterialsPbrSpecularGlossiness,\n    ownerSchema: IMaterial\n  ): PBRSpecularMaterial {\n    const engine = context.glTFResource.engine;\n    const material = new PBRSpecularMaterial(engine);\n    const { diffuseFactor, diffuseTexture, specularFactor, glossinessFactor, specularGlossinessTexture } = schema;\n\n    if (diffuseFactor) {\n      material.baseColor = new Color(\n        Color.linearToGammaSpace(diffuseFactor[0]),\n        Color.linearToGammaSpace(diffuseFactor[1]),\n        Color.linearToGammaSpace(diffuseFactor[2]),\n        diffuseFactor[3]\n      );\n    }\n\n    if (diffuseTexture) {\n      context.get<Texture2D>(GLTFParserType.Texture, diffuseTexture.index).then((texture) => {\n        material.baseTexture = texture;\n        GLTFParser.executeExtensionsAdditiveAndParse(diffuseTexture.extensions, context, material, diffuseTexture);\n      });\n    }\n\n    if (specularFactor) {\n      material.specularColor = new Color(\n        Color.linearToGammaSpace(specularFactor[0]),\n        Color.linearToGammaSpace(specularFactor[1]),\n        Color.linearToGammaSpace(specularFactor[2])\n      );\n    }\n\n    if (glossinessFactor !== undefined) {\n      material.glossiness = glossinessFactor;\n    }\n\n    if (specularGlossinessTexture) {\n      GLTFMaterialParser._checkOtherTextureTransform(specularGlossinessTexture, \"Specular glossiness\");\n\n      context.get<Texture2D>(GLTFParserType.Texture, specularGlossinessTexture.index).then((texture) => {\n        material.specularGlossinessTexture = texture;\n      });\n    }\n\n    material.name = ownerSchema.name;\n    GLTFMaterialParser._parseStandardProperty(context, material, ownerSchema);\n    return material;\n  }\n}\n","import { UnlitMaterial } from \"@galacean/engine-core\";\nimport type { IMaterial } from \"../GLTFSchema\";\nimport { GLTFMaterialParser } from \"../parser/GLTFMaterialParser\";\nimport { registerGLTFExtension } from \"../parser/GLTFParser\";\nimport { GLTFParserContext } from \"../parser/GLTFParserContext\";\nimport { GLTFExtensionMode, GLTFExtensionParser } from \"./GLTFExtensionParser\";\n\n@registerGLTFExtension(\"KHR_materials_unlit\", GLTFExtensionMode.CreateAndParse)\nclass KHR_materials_unlit extends GLTFExtensionParser {\n  override createAndParse(context: GLTFParserContext, _, ownerSchema: IMaterial): UnlitMaterial {\n    const { engine } = context.glTFResource;\n    const material = new UnlitMaterial(engine);\n    material.name = ownerSchema.name;\n\n    GLTFMaterialParser._parseStandardProperty(context, material, ownerSchema);\n    return material;\n  }\n}\n","import { Material, Renderer } from \"@galacean/engine-core\";\nimport { registerGLTFExtension } from \"../parser/GLTFParser\";\nimport { GLTFParserContext, GLTFParserType } from \"../parser/GLTFParserContext\";\nimport { GLTFExtensionMode, GLTFExtensionParser } from \"./GLTFExtensionParser\";\nimport { IKHRMaterialVariants_Mapping } from \"./GLTFExtensionSchema\";\n\nexport type IGLTFExtensionVariants = Array<{\n  renderer: Renderer;\n  material: Material;\n  variants: string[];\n}>;\n\n@registerGLTFExtension(\"KHR_materials_variants\", GLTFExtensionMode.AdditiveParse)\nclass KHR_materials_variants extends GLTFExtensionParser {\n  override additiveParse(context: GLTFParserContext, renderer: Renderer, schema: IKHRMaterialVariants_Mapping): void {\n    const {\n      glTF: {\n        extensions: {\n          KHR_materials_variants: { variants: variantNames }\n        }\n      },\n      glTFResource\n    } = context;\n    const { mappings } = schema;\n\n    glTFResource._extensionsData ||= {};\n    const extensionData: IGLTFExtensionVariants = [];\n    glTFResource.extensionsData.variants = extensionData;\n\n    for (let i = 0; i < mappings.length; i++) {\n      const { material: materialIndex, variants } = mappings[i];\n      context.get<Material>(GLTFParserType.Material, materialIndex).then((material) => {\n        extensionData.push({\n          renderer,\n          material,\n          variants: variants.map((index) => variantNames[index].name)\n        });\n      });\n    }\n  }\n}\n","import { registerGLTFExtension } from \"../parser/GLTFParser\";\nimport { GLTFExtensionMode, GLTFExtensionParser } from \"./GLTFExtensionParser\";\n\n@registerGLTFExtension(\"KHR_mesh_quantization\", GLTFExtensionMode.AdditiveParse)\nclass KHR_mesh_quantization extends GLTFExtensionParser {}\n","import { AssetType, Texture2D, Utils } from \"@galacean/engine-core\";\nimport type { ITexture } from \"../GLTFSchema\";\nimport { registerGLTFExtension } from \"../parser/GLTFParser\";\nimport { GLTFParserContext, GLTFParserType } from \"../parser/GLTFParserContext\";\nimport { GLTFExtensionMode, GLTFExtensionParser } from \"./GLTFExtensionParser\";\nimport { GLTFUtils } from \"../GLTFUtils\";\nimport { BufferTextureRestoreInfo } from \"../../GLTFContentRestorer\";\nimport { KTX2Loader } from \"../../ktx2/KTX2Loader\";\n\ninterface KHRBasisSchema {\n  source: number;\n}\n\n@registerGLTFExtension(\"KHR_texture_basisu\", GLTFExtensionMode.CreateAndParse)\nclass KHR_texture_basisu extends GLTFExtensionParser {\n  override async createAndParse(\n    context: GLTFParserContext,\n    schema: KHRBasisSchema,\n    textureInfo: ITexture\n  ): Promise<Texture2D> {\n    const { glTF, glTFResource } = context;\n    const { engine, url } = glTFResource;\n\n    const { sampler, name: textureName } = textureInfo;\n    const { source } = schema;\n    const { uri, bufferView: bufferViewIndex, mimeType, name: imageName } = glTF.images[source];\n    const samplerInfo = sampler !== undefined && GLTFUtils.getSamplerInfo(glTF.samplers[sampler]);\n    if (uri) {\n      const index = uri.lastIndexOf(\".\");\n      const promise = engine.resourceManager\n        .load<Texture2D>({\n          url: Utils.resolveAbsoluteUrl(url, uri),\n          type: AssetType.KTX2\n        })\n        .onProgress(undefined, context._onTaskDetail)\n        .then<Texture2D>((texture) => {\n          if (!texture.name) {\n            texture.name = textureName || imageName || `texture_${index}`;\n          }\n          if (sampler !== undefined) {\n            GLTFUtils.parseSampler(texture, samplerInfo);\n          }\n          return texture;\n        });\n\n      context._addTaskCompletePromise(promise);\n      return promise;\n    } else {\n      const bufferView = glTF.bufferViews[bufferViewIndex];\n\n      return context.get<ArrayBuffer>(GLTFParserType.Buffer, bufferView.buffer).then((buffer) => {\n        const imageBuffer = new Uint8Array(buffer, bufferView.byteOffset, bufferView.byteLength);\n\n        return KTX2Loader._parseBuffer(imageBuffer, engine)\n          .then(({ engine, result, targetFormat, params }) =>\n            KTX2Loader._createTextureByBuffer(engine, result, targetFormat, params)\n          )\n          .then((texture: Texture2D) => {\n            texture.name = textureName || imageName || `texture_${bufferViewIndex}`;\n            if (sampler !== undefined) {\n              GLTFUtils.parseSampler(texture, samplerInfo);\n            }\n            const bufferTextureRestoreInfo = new BufferTextureRestoreInfo(texture, bufferView, mimeType);\n            context.contentRestorer.bufferTextures.push(bufferTextureRestoreInfo);\n            return texture;\n          });\n      });\n    }\n  }\n}\n","import { Logger, PBRBaseMaterial, UnlitMaterial } from \"@galacean/engine-core\";\nimport { registerGLTFExtension } from \"../parser/GLTFParser\";\nimport { GLTFParserContext } from \"../parser/GLTFParserContext\";\nimport { GLTFExtensionMode, GLTFExtensionParser } from \"./GLTFExtensionParser\";\nimport { IKHRTextureTransform } from \"./GLTFExtensionSchema\";\n\n@registerGLTFExtension(\"KHR_texture_transform\", GLTFExtensionMode.AdditiveParse)\nclass KHR_texture_transform extends GLTFExtensionParser {\n  override additiveParse(\n    context: GLTFParserContext,\n    material: PBRBaseMaterial | UnlitMaterial,\n    schema: IKHRTextureTransform\n  ): void {\n    const { offset, rotation, scale, texCoord } = schema;\n\n    if (offset) {\n      material.tilingOffset.z = offset[0];\n      material.tilingOffset.w = offset[1];\n    }\n\n    if (scale) {\n      material.tilingOffset.x = scale[0];\n      material.tilingOffset.y = scale[1];\n    }\n\n    if (rotation) {\n      Logger.warn(\"rotation in KHR_texture_transform is not supported now\");\n    }\n\n    if (texCoord) {\n      Logger.warn(\"texCoord in KHR_texture_transform is not supported now\");\n    }\n  }\n}\n","import { Material } from \"@galacean/engine-core\";\nimport { registerGLTFExtension } from \"../parser/GLTFParser\";\nimport { GLTFParserContext } from \"../parser/GLTFParserContext\";\nimport { GLTFExtensionMode, GLTFExtensionParser } from \"./GLTFExtensionParser\";\nimport { IGalaceanMaterialRemap } from \"./GLTFExtensionSchema\";\n\n@registerGLTFExtension(\"GALACEAN_materials_remap\", GLTFExtensionMode.CreateAndParse)\nclass GALACEAN_materials_remap extends GLTFExtensionParser {\n  override createAndParse(context: GLTFParserContext, schema: IGalaceanMaterialRemap): Promise<Material> {\n    const { engine } = context.glTFResource;\n    // @ts-ignore\n    const promise = engine.resourceManager.getResourceByRef<Material>(schema);\n    context._addTaskCompletePromise(promise);\n\n    return promise;\n  }\n}\n","import { AnimationClip, AnimationEvent } from \"@galacean/engine-core\";\nimport { registerGLTFExtension } from \"../parser/GLTFParser\";\nimport { GLTFParserContext } from \"../parser/GLTFParserContext\";\nimport { GLTFExtensionMode, GLTFExtensionParser } from \"./GLTFExtensionParser\";\nimport { IGalaceanAnimation } from \"./GLTFExtensionSchema\";\n\n@registerGLTFExtension(\"GALACEAN_animation_event\", GLTFExtensionMode.AdditiveParse)\nclass GALACEAN_animation_event extends GLTFExtensionParser {\n  override additiveParse(context: GLTFParserContext, animationClip: AnimationClip, schema: IGalaceanAnimation): void {\n    const { engine } = context.glTFResource;\n    const { events } = schema;\n    events.map((eventData) => {\n      const event = new AnimationEvent();\n      event.functionName = eventData.functionName;\n      event.time = eventData.time;\n      event.parameter = eventData.parameter;\n      animationClip.addEvent(event);\n    });\n  }\n}\n","import { registerGLTFExtension } from \"../parser/GLTFParser\";\nimport { GLTFParserContext, GLTFParserType } from \"../parser/GLTFParserContext\";\nimport { GLTFExtensionMode, GLTFExtensionParser } from \"./GLTFExtensionParser\";\nimport { IEXTMeshoptCompressionSchema } from \"./GLTFExtensionSchema\";\nimport { getMeshoptDecoder } from \"./MeshoptDecoder\";\n\n@registerGLTFExtension(\"EXT_meshopt_compression\", GLTFExtensionMode.CreateAndParse)\nclass EXT_meshopt_compression extends GLTFExtensionParser {\n  override createAndParse(context: GLTFParserContext, schema: IEXTMeshoptCompressionSchema): Promise<Uint8Array> {\n    return context.get<ArrayBuffer>(GLTFParserType.Buffer, schema.buffer).then((arrayBuffer) => {\n      return getMeshoptDecoder().then((decoder) =>\n        decoder.decodeGltfBuffer(\n          schema.count,\n          schema.byteStride,\n          new Uint8Array(arrayBuffer, schema.byteOffset, schema.byteLength),\n          schema.mode,\n          schema.filter\n        )\n      );\n    });\n  }\n}\n\ndeclare module \"@galacean/engine-core\" {\n  interface EngineConfiguration {\n    glTFLoader?: {\n      /** Meshopt options. If set this option and workCount is great than 0, workers will be created. */\n      meshOpt?: {\n        /**\n         * Worker count for transcoder.\n         * @defaultValue 4\n         */\n        workerCount?: number;\n      };\n    };\n    /** @deprecated glTF loader options. */\n    glTF?: {\n      /** Meshopt options. If set this option and workCount is great than 0, workers will be created. */\n      meshOpt?: {\n        /**\n         * Worker count for transcoder.\n         * @defaultValue 4\n         */\n        workerCount?: number;\n      };\n    };\n  }\n}\n","import { PBRMaterial, Texture2D } from \"@galacean/engine-core\";\nimport { GLTFMaterialParser } from \"../parser/GLTFMaterialParser\";\nimport { registerGLTFExtension } from \"../parser/GLTFParser\";\nimport { GLTFParserContext, GLTFParserType } from \"../parser/GLTFParserContext\";\nimport { GLTFExtensionMode, GLTFExtensionParser } from \"./GLTFExtensionParser\";\nimport { IKHRMaterialsAnisotropy } from \"./GLTFExtensionSchema\";\n\n@registerGLTFExtension(\"KHR_materials_anisotropy\", GLTFExtensionMode.AdditiveParse)\nclass KHR_materials_anisotropy extends GLTFExtensionParser {\n  override additiveParse(context: GLTFParserContext, material: PBRMaterial, schema: IKHRMaterialsAnisotropy): void {\n    const { anisotropyStrength = 0, anisotropyRotation = 0, anisotropyTexture } = schema;\n\n    material.anisotropy = anisotropyStrength;\n    material.anisotropyRotation = anisotropyRotation;\n\n    if (anisotropyTexture) {\n      GLTFMaterialParser._checkOtherTextureTransform(anisotropyTexture, \"Anisotropy texture\");\n\n      context.get<Texture2D>(GLTFParserType.Texture, anisotropyTexture.index).then((texture) => {\n        material.anisotropyTexture = texture;\n      });\n    }\n  }\n}\n","import { PBRMaterial, Texture2D } from \"@galacean/engine-core\";\nimport { GLTFMaterialParser } from \"../parser/GLTFMaterialParser\";\nimport { registerGLTFExtension } from \"../parser/GLTFParser\";\nimport { GLTFParserContext, GLTFParserType } from \"../parser/GLTFParserContext\";\nimport { GLTFExtensionMode, GLTFExtensionParser } from \"./GLTFExtensionParser\";\nimport { IKHRMaterialsIridescence } from \"./GLTFExtensionSchema\";\n\n@registerGLTFExtension(\"KHR_materials_iridescence\", GLTFExtensionMode.AdditiveParse)\nclass KHR_materials_iridescence extends GLTFExtensionParser {\n  override additiveParse(context: GLTFParserContext, material: PBRMaterial, schema: IKHRMaterialsIridescence): void {\n    const {\n      iridescenceFactor = 0,\n      iridescenceTexture,\n      iridescenceIor = 1.3,\n      iridescenceThicknessMinimum = 100,\n      iridescenceThicknessMaximum = 400,\n      iridescenceThicknessTexture\n    } = schema;\n\n    material.iridescence = iridescenceFactor;\n    material.iridescenceIOR = iridescenceIor;\n    material.iridescenceThicknessRange.set(iridescenceThicknessMinimum, iridescenceThicknessMaximum);\n\n    if (iridescenceTexture) {\n      GLTFMaterialParser._checkOtherTextureTransform(iridescenceTexture, \"Iridescence texture\");\n\n      context.get<Texture2D>(GLTFParserType.Texture, iridescenceTexture.index).then((texture) => {\n        material.iridescenceTexture = texture;\n      });\n    }\n    if (iridescenceThicknessTexture) {\n      GLTFMaterialParser._checkOtherTextureTransform(iridescenceThicknessTexture, \"IridescenceThickness texture\");\n\n      context.get<Texture2D>(GLTFParserType.Texture, iridescenceThicknessTexture.index).then((texture) => {\n        material.iridescenceThicknessTexture = texture;\n      });\n    }\n  }\n}\n","import { SystemInfo, Texture2D } from \"@galacean/engine-core\";\nimport type { ITexture } from \"../GLTFSchema\";\nimport { registerGLTFExtension } from \"../parser/GLTFParser\";\nimport { GLTFParserContext } from \"../parser/GLTFParserContext\";\nimport { GLTFTextureParser } from \"../parser/GLTFTextureParser\";\nimport { GLTFExtensionMode, GLTFExtensionParser } from \"./GLTFExtensionParser\";\n\ninterface EXTWebPSchema {\n  source: number;\n}\n\n@registerGLTFExtension(\"EXT_texture_webp\", GLTFExtensionMode.CreateAndParse)\nclass EXT_texture_webp extends GLTFExtensionParser {\n  private _supportWebP = false;\n\n  constructor() {\n    super();\n\n    // @ts-ignore\n    if (SystemInfo._isBrowser) {\n      const testCanvas = document.createElement(\"canvas\");\n      testCanvas.width = testCanvas.height = 1;\n      this._supportWebP = testCanvas.toDataURL(\"image/webp\").indexOf(\"data:image/webp\") == 0;\n    } else {\n      this._supportWebP = false;\n    }\n  }\n\n  override async createAndParse(\n    context: GLTFParserContext,\n    schema: EXTWebPSchema,\n    textureInfo: ITexture,\n    textureIndex: number\n  ): Promise<Texture2D> {\n    const webPIndex = schema.source;\n    const { sampler, source: fallbackIndex = 0, name: textureName } = textureInfo;\n    const texture = GLTFTextureParser._parseTexture(\n      context,\n      this._supportWebP ? webPIndex : fallbackIndex,\n      textureIndex,\n      sampler,\n      textureName\n    );\n\n    return texture;\n  }\n}\n"],"names":["BufferReader","byteOffset","byteLength","littleEndian","data","_dataView","DataView","buffer","_littleEndian","_position","_baseOffset","nextUint8","value","getUint8","nextUint16","getUint16","nextUint32","getUint32","nextInt32","getInt32","nextInt32Array","len","Int32Array","nextFloat32","getFloat32","nextFloat32Array","Float32Array","nextUint32Array","Uint32Array","nextUint8Array","Uint8Array","nextUint64","left","right","nextStr","strByteLength","uint8Array","Utils","decodeText","nextImageData","count","nextImagesData","imagesLen","Array","i","imagesData","push","skip","bytes","scan","maxByteLength","term","position","offset","decoderMap","decoder","type","target","FileHeader","totalLength","version","name","headerLength","decode","arrayBuffer","dataView","totalLen","fileVersion","typeLen","typeUint8Array","nameLen","nameUint8Array","header","dataLength","MeshDecoder","engine","bufferReader","Promise","resolve","modelMesh","ModelMesh","jsonDataString","encodedMeshData","JSON","parse","bounds","copyFrom","Math","ceil","float32Array","positions","start","end","vertexCount","length","float32ArrayToVector3","setPositions","normals","setNormals","uvs","setUVs","float32ArrayToVector2","uv1","uv2","uv3","uv4","uv5","uv6","uv7","colors","setColors","float32ArrayToVColor","boneWeights","setBoneWeights","float32ArrayToVector4","boneIndices","setBoneIndices","blendShapes","forEach","blendShapeData","blendShape","BlendShape","frames","frameData","positionArray","deltaPosition","deltaNormals","normalsArray","deltaTangents","tangentsArray","addFrame","weight","addBlendShape","indices","Uint16Array","setIndices","subMeshes","subMesh","addSubMesh","uploadData","array","Color","Vector4","Vector3","Vector2","Texture2DDecoder","reject","objectId","mipmap","filterMode","anisoLevel","wrapModeU","wrapModeV","format","width","height","isPixelBuffer","mipCount","texture2D","Texture2D","pixelBuffer","setPixelBuffer","generateMipmaps","resourceManager","_objectPool","blob","window","Blob","img","Image","onload","setImageSource","completedCount","onComplete","src","URL","createObjectURL","ParserType","ParserContext","resource","entityMap","Map","entityConfigMap","components","rootIds","strippedIds","clear","ReflectionParser","_context","parseEntity","entityConfig","_getEntityByConfig","then","entity","isActive","rotation","scale","transform","layer","Prefab","_markAsTemplate","parseClassObject","item","Class","Loader","getClass","class","params","constructParams","all","map","param","parseBasicType","resultParams","instance","parsePropsAndMethods","promises","methods","methodName","methodParams","parseMethod","props","key","promise","v","handle","customParseComponentHandles","constructor","result","originValue","isArray","_isClass","_isAssetRef","context","getResourceByRef","_addDependenceAsset","_isEntityRef","get","entityId","assetRefId","refId","isClone","Entity","registerCustomParseComponent","componentType","undefined","InterpolableValueType","AnimationClipDecoder","clip","AnimationClip","eventsLen","event","AnimationEvent","time","functionName","parameter","val","addEvent","curveBindingsLen","relativePath","componentStr","property","getProperty","curve","interpolation","keysLen","curveType","AnimationFloatCurve","j","keyframe","Keyframe","inTangent","outTangent","addKey","AnimationArrayCurve","from","AnimationFloatArrayCurve","AnimationVector2Curve","AnimationVector3Curve","AnimationVector4Curve","AnimationColorCurve","AnimationQuaternionCurve","Quaternion","AnimationRefCurve","str","AnimationBoolCurve","AnimationStringCurve","addCurveBinding","MaterialLoaderType","SpecularMode","PrefabResource","url","_dependenceAssets","Set","instantiate","_root","clone","add","_associationSuperResource","_onDestroy","destroy","asset","_disassociationSuperResource","ReferResource","HierarchyParser","_prefabContextMap","WeakMap","_prefabPromiseMap","_engine","_organizeEntities","bind","_parseComponents","_parsePrefabModification","_parsePrefabRemovedEntities","_parsePrefabRemovedComponents","_clearAndResolve","_reject","_resolve","_reflectionParser","_parseEntities","catch","entitiesConfig","entities","id","strippedId","set","l","componentConfig","component","addComponent","modifications","rootEntity","modification","componentId","targetEntity","targetComponent","_applyEntityData","removedEntities","removedComponents","concat","parentIds","parentId","_parseChildren","_handleRootEntity","entityPromise","_parsePrefab","_parseStrippedEntity","_parseEntity","parent","prefabResource","instantiateSceneRoot","instanceContext","_generateInstanceContext","cbArray","n","prefabInstanceId","prefabSource","children","childId","addChild","path","componentsMap","componentIndexMap","_components","getClassName","getComponents","child","childPath","SceneParser","scene","addRootEntity","sceneData","Scene","parser","EditorTextureLoader","load","AssetPromise","_request","texture","object","AnimationClipLoader","curveBindingPromises","curveBindings","curveBinding","keys","_parseKeyframeValue","actualValue","AnimatorControllerLoader","animatorController","AnimatorController","layers","parameters","layerData","layerIndex","blendingMode","stateMachine","stateMachineData","AnimatorControllerLayer","states","transitions","entryTransitions","anyTransitions","statesMap","transitionsMap","stateData","stateIndex","speed","wrapMode","clipStartNormalizedTime","clipEndNormalizedTime","scripts","state","addState","clipStartTime","clipEndTime","script","addStateMachineScript","clipData","transitionData","transition","_createTransition","destinationStateId","transitionId","addTransition","entryTransitionData","addEntryStateTransition","anyTransitionData","addAnyStateTransition","addLayer","parameterData","isTrigger","addTriggerParameter","addParameter","defaultValue","destinationState","AnimatorStateTransition","hasExitTime","isFixedDuration","duration","exitTime","solo","mute","_isExit","isExit","conditions","conditionData","addCondition","parameterName","mode","threshold","isBase64","test","BufferLoader","base64Str","slice","RegExp","$1","atob","c","charCodeAt","Buffer","EnvLoader","arraybuffer","shArray","shByteLength","size","TextureCube","TextureFilterMode","Trilinear","mipmapCount","mipLevel","mipSize","face","dataSize","TextureCubeFace","PositiveX","ambientLight","AmbientLight","sh","SphericalHarmonics3","diffuseMode","DiffuseMode","SphericalHarmonics","copyFromArray","diffuseSphericalHarmonics","specularTexture","specularTextureDecodeRGBM","e","Env","FontLoader","fontName","fontUrl","_registerFont","font","Font","fontFace","FontFace","document","fonts","GLTFResource","sceneIndex","sceneRoot","_defaultSceneRoot","_sceneRoots","textures","materials","meshes","resources","extensionsData","_extensionsData","sceneRoots","defaultSceneRoot","AccessorComponentType","AccessorType","AnimationChannelTargetPath","AnimationSamplerInterpolation","CameraType","MaterialAlphaMode","TextureMagFilter","TextureMinFilter","TextureWrapMode","GLTFParserContext","glTFResource","accessorBufferCache","needAnimatorController","_resourceCache","_progress","taskDetail","taskComplete","loaded","total","_onTaskDetail","detail","_setTaskDetailProgress","contentRestorer","GLTFContentRestorer","index","_parsers","cache","cacheKey","glTFSchemaKey","glTFSchemaMap","isSubAsset","glTFResourceMap","glTFItems","glTF","_","_handleSubAsset","json","skins","animations","animator","Animator","addContentRestorer","_addTaskCompletePromise","taskPromise","task","_setTaskCompleteProgress","glTFResourceKey","mesh","_onSubAssetSuccess","addParser","parserType","BufferInfo","interleaved","stride","vertexBindingInfos","GLTFParserType","_obj","registerGLTFParser","pipeline","Parser","GLTFUtils","floatBufferToVector2Array","bufferLen","floatBufferToVector3Array","floatBufferToVector4Array","floatBufferToColorArray","isColor3","getAccessorTypeSize","accessorType","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","getComponentType","BYTE","Int8Array","UNSIGNED_BYTE","SHORT","Int16Array","UNSIGNED_SHORT","UNSIGNED_INT","FLOAT","getNormalizedComponentScale","Error","getAccessorBuffer","bufferViews","accessor","TypedArray","dataElementSize","dataElementBytes","BYTES_PER_ELEMENT","elementStride","accessorCount","bufferView","bufferViewIndex","BufferView","bufferViewData","bufferIndex","bufferByteOffset","bufferStride","byteStride","bufferInfo","bufferSlice","floor","bufferCacheKey","restoreInfo","BufferDataRestoreInfo","RestoreDataAccessor","sparse","processingSparseData","bufferToVector3Array","normalized","baseOffset","vertices","factor","getBufferViewData","buffers","accessorTypeSize","values","indicesBufferView","valuesBufferView","indicesUint8Array","valuesUin8Array","indicesByteOffset","indicesByteLength","valuesByteOffset","valuesByteLength","typeSize","sparseCount","IndexTypeArray","indexLength","indicesArray","sparseIndices","valueLength","valuesArray","sparseValues","replaceIndex","getIndexFormat","IndexFormat","UInt8","UInt16","UInt32","getElementFormat","VertexElementFormat","Float","NormalizedShort2","Short2","NormalizedShort4","Short4","NormalizedUShort2","UShort2","NormalizedUShort4","UShort4","NormalizedByte4","Byte4","NormalizedUByte4","UByte4","loadImageBuffer","imageBuffer","onerror","requestAnimationFrame","onabort","crossOrigin","parseGLB","originBuffer","UINT32_LENGTH","GLB_HEADER_MAGIC","GLB_HEADER_LENGTH","GLB_CHUNK_TYPES","BIN","magic","chunkLength","chunkType","console","error","toString","glTFData","restoreGLBBufferSlice","glbBufferSlices","currentOffset","parseSampler","samplerInfo","getSamplerInfo","sampler","minFilter","magFilter","wrapS","wrapT","info","NEAREST_MIPMAP_NEAREST","NEAREST","Point","LINEAR_MIPMAP_NEAREST","Bilinear","GLTFTextureParser","_wrapMap","SupercompressionScheme","KTX2Container","vkFormat","pixelWidth","pixelHeight","pixelDepth","layerCount","faceCount","supercompressionScheme","levels","keyValue","globalData","headerBufferReader","levelCount","max","dfdByteOffset","dfdByteLength","kvdByteOffset","kvdByteLength","sgdByteOffset","sgdByteLength","ktxLevels","levelByteLength","levelReader","levelData","uncompressedByteLength","dfdReader","dfd","vendorId","descriptorType","versionNumber","descriptorBlockSize","colorModel","colorPrimaries","transferFunction","flags","texelBlockDimension","bytesPlane","samples","dataFormatDescriptor","sampleStart","sampleWords","numSamples","sample","bitOffset","bitLength","channelType","samplePosition","sampleLower","Infinity","sampleUpper","kvdReader","keyValueByteLength","keyData","valueData","match","replace","kvPadding","sgdReader","endpointCount","selectorCount","endpointsByteLength","selectorsByteLength","tablesByteLength","extendedByteLength","imageDescs","imageFlags","rgbSliceByteOffset","rgbSliceByteLength","alphaSliceByteOffset","alphaSliceByteLength","endpointsByteOffset","selectorsByteOffset","tablesByteOffset","extendedByteOffset","endpointsData","selectorsData","tablesData","extendedData","isSRGB","isUASTC","KTX2TargetFormat","WorkerPool","_workerCreator","limitedCount","_taskQueue","_workerStatus","_workerItems","prepareWorker","_initWorker","postMessage","message","workerId","_getIdleWorkerId","workerItems","workerItem","worker","terminate","addEventListener","_onMessage","msg","_nextTask","taskItem","shift","AbstractTranscoder","workerLimitCount","init","_initPromise","_initTranscodeWorkerPool","_transcodeWorkerPool","_createTranscodePool","workerURL","wasmBuffer","onMessage","Worker","transcoderWasm","TranscodeWorkerCode","initPromise","wasmBinary","BasisModule","onRuntimeInitialized","onAbort","self","initializeBasis","KTX2File","onmessage","transcode","_init","targetFormat","getTranscodeFormatFromTarget","hasAlpha","arrays","totalByteLength","ktx2File","cleanup","close","delete","isValid","startTranscoding","getWidth","getHeight","getLayers","getLevels","getHasAlpha","getFaces","faces","isBC","mipmaps","mip","layerMips","mipWidth","mipHeight","levelInfo","getImageLevelInfo","warn","origWidth","origHeight","dst","getImageTranscodedSizeInBytes","status","transcodeImage","BinomialLLCTranscoder","fetch","res","text","jsCode","scriptDom","createElement","body","appendChild","funcCode","transcodeString","substring","indexOf","lastIndexOf","workerCode","wasmPromise","ZSTDDecoder","WasmModuleURL","response","ok","statusText","WebAssembly","IMPORT_OBJECT","env","emscripten_notify_memory_growth","uncompressedSize","exports","compressedSize","compressedPtr","malloc","heap","Number","ZSTD_findDecompressedSize","uncompressedPtr","actualSize","ZSTD_decompress","dec","free","memory","transcodeASTCAndBC7","wasmTranscoder","compressedData","nBlocks","texMemoryPages","delta","grow","textureView","initWasm","Memory","initial","moduleWrapper","zstdDecoder","needZstd","wasmModule","faceIndex","decodedData","levelHeight","levelWidth","faceByteLength","originByteOffset","decodedBuffer","module","KhronosTranscoder","transcoderMap","ktx2Container","Zstd","postMessageData","messageData","mipmapData","mipmapIndex","level","originOffset","originByteLength","ASTC","KTX2Loader","initialize","configuration","ktx2Loader","options","priorityFormats","_priorityFormats","transcoder","_getKhronosTranscoder","workerCount","_getBinomialLLCTranscoder","setTaskCompleteProgress","setTaskDetailProgress","onProgress","_parseBuffer","_createTextureByBuffer","release","_binomialLLCTranscoder","_khronosTranscoder","_isBinomialInit","formatPriorities","_decideTargetFormat","transcodeResultPromise","binomialLLCWorker","khronosWorker","transcodeResult","engineFormat","_getEngineTextureFormat","faceData","renderer","_hardwareRenderer","_detectSupportedFormat","PVRTC","MathUtil","isPowerOf2","Logger","R8G8B8A8","capabilities","_supportedMap","canIUse","R8","R8G8","isWebGL2","basisFormat","TextureFormat","ASTC_4x4","ETC","ETC2_RGBA8","ETC2_RGB","BC7","BC1_BC3","BC3","BC1","PVRTC_RGBA4","PVRTC_RGB4","etc1s","uastc","GLCapabilityType","astc","etc","bptc","s3tc","pvrtc","pvrtc_webkit","KTX2","KTX2Transcoder","bufferRequests","bufferTextures","restoreContent","bufferRequestInfo","request","config","isGLB","glbBufferSlice","bigBuffer","bufferCount","x","y","textureRestoreInfo","bufferData","mimeType","image","meshInfo","vertexBuffers","bufferRestoreInfo","vertexData","_getBufferData","setData","indexBuffer","indexData","frame","positionData","deltaPositions","normal","normalData","tangent","tangentData","main","sparseIndex","sparseIndexBuffer","sparseIndexData","sparseValue","sparseValueBuffer","sparseValueData","ContentRestorer","BufferRequestInfo","BufferTextureRestoreInfo","ModelMeshRestoreInfo","BufferRestoreInfo","BlendShapeRestoreInfo","BlendShapeDataRestoreInfo","GLTFExtensionParser","createAndParse","extensionSchema","extensionOwnerSchema","extra","additiveParse","parseResource","GLTFExtensionMode","GLTFParser","executeExtensionsCreateAndParse","extensions","ownerSchema","extensionArray","Object","extensionName","_createAndParse","executeExtensionsAdditiveAndParse","_additiveParse","hasExtensionParser","_extensionParsers","getExtensionParser","parsers","currentParser","_mode","_addExtensionParser","extensionParser","CreateAndParse","AdditiveParse","registerGLTFExtension","GLTFSchemaParser","restoreBufferRequests","requestConfig","remoteUrl","_getRemoteUrl","_requestByRemoteUrl","parseResult","Schema","GLTFAnimationParser","animationInfo","animationClipPromise","_parseStandardProperty","animationClip","glTFSampler","samplers","inputAccessor","accessors","input","outputAccessor","output","bufferInfos","scaled","k","outputStride","Linear","samplerInterpolation","CubicSpine","InterpolationType","Step","sampleDataCollection","outputSize","channels","m","glTFChannel","channelTargetEntity","node","ComponentType","propertyName","TRANSLATION","Transform","ROTATION","SCALE","WEIGHTS","SkinnedMeshRenderer","_addCurve","nodes","primitives","animationChannelTargetPath","sampleData","subarray","Animation","GLTFBufferParser","_parseSingleBuffer","absoluteUrl","resolveAbsoluteUrl","uri","GLTFEntityParser","entityInfo","matrix","translation","localMatrix","setPosition","setRotationQuaternion","setScale","childIndex","childEntity","GLTFMaterialParser","materialInfo","material","PBRMaterial","_getDefaultMaterial","_defaultMaterial","BlinnPhongMaterial","_checkOtherTextureTransform","textureName","KHR_texture_transform","pbrMetallicRoughness","normalTexture","occlusionTexture","emissiveTexture","emissiveFactor","alphaMode","alphaCutoff","doubleSided","baseColorFactor","baseColorTexture","metallicFactor","roughnessFactor","metallicRoughnessTexture","baseColor","linearToGammaSpace","Texture","baseTexture","metallic","roughness","roughnessMetallicTexture","PBRSpecularMaterial","emissiveColor","normalTextureIntensity","strength","texCoord","occlusionTextureIntensity","TextureCoordinate","UV1","occlusionTextureCoord","renderFace","RenderFace","Double","Front","OPAQUE","isTransparent","BLEND","MASK","Material","GLTFMeshParser","gltfPrimitive","primitivePromises","meshRestoreInfo","_parseMeshFromGLTFPrimitive","keepMeshData","gltfMesh","gltf","attributes","attribute","accessorBuffer","vertexElement","meshId","instanceId","elementNormalized","elementFormat","scaleFactor","elementOffset","VertexElement","bufferBindIndex","vertexBuffer","BufferBindFlag","VertexBuffer","BufferUsage","Static","setVertexBufferBinding","vertexElements","min","_tempVector3","MAX_VALUE","targets","setVertexElements","indexAccessor","_createBlendShape","_getBlendShapeData","glTFMesh","glTFTargets","blendShapeCollection","blendShapeNames","normalTarget","tangentTarget","hasNormal","hasTangent","extras","targetNames","blendShapeCount","Mesh","GLTFSceneParser","scenes","sceneInfo","sceneExtensions","isDefaultScene","sceneNodes","_parseEntityComponent","camera","meshID","cameraID","_createCamera","cameras","_createRenderer","cameraSchema","orthographic","perspective","Camera","ORTHOGRAPHIC","xmag","ymag","zfar","znear","isOrthographic","nearClipPlane","farClipPlane","orthographicSize","PERSPECTIVE","aspectRatio","yfov","fieldOfView","PI","enabled","skin","skinID","glTFMeshPrimitives","rendererCount","blendShapeWeights","weights","materialPromises","Skin","glTFPrimitive","skinRenderer","_computeLocalBounds","bones","rootBone","inverseBindMatrices","MeshRenderer","setMaterial","element","semantic","enableVertexColor","skinnedMeshRenderer","rootBoneIndex","BoundingBox","localBounds","approximateBindMatrix","Matrix","subRootBoneCount","_computeApproximateBindMatrix","multiplyScalar","jointEntities","rootChild","GLTFSkinParser","skinInfo","skeleton","joints","jointCount","skinPromise","inverseBindMatrix","bone","_findSkeletonRootBone","paths","unshift","rootNode","textureIndex","textureInfo","imageIndex","source","_parseTexture","images","imageName","useSampler","extIndex","ext","startsWith","AssetType","KTX","bufferTextureRestoreInfo","GLTFTextureWrapMode","CLAMP_TO_EDGE","Clamp","MIRRORED_REPEAT","Mirror","REPEAT","Repeat","GLTFValidator","extensionsUsed","extensionsRequired","glTFVersion","extensionUsed","extensionRequired","Validator","GLTFBufferViewParser","GLTFAnimatorControllerParser","_createAnimatorController","animatorStateMachine","AnimatorStateMachine","uniqueName","makeUniqueStateName","animatorState","ready","getMeshoptDecoder","wasm_base","wasm_simd","wasmpack","wasm","SystemInfo","_detectSIMDSupported","unpack","__wasm_call_ctors","useWorkers","initWorkers","decodeGltfBuffer","filter","workers","decodeWorker","decoders","filters","ch","write","fun","sbrk","count4","tp","sp","NONE","OCTAHEDRAL","QUATERNION","EXPONENTIAL","ATTRIBUTES","TRIANGLES","INDICES","requestId","createWorker","pending","requests","action","revokeObjectURL","GLTFLoader","meshOptOptions","glTFLoader","meshOpt","meshoptDecoder","GLTF","PrefabParser","PrefabLoader","HDRLoader","_setTextureByBuffer","HDRContentRestorer","bufferArray","_parseHeader","dataPosition","cubeSize","pixels","_readPixels","cubeMapData","_convertToCubemap","inputWidth","inputHeight","textureRight","_createCubemapData","_faceRight","textureLeft","_faceLeft","textureUp","_faceUp","textureDown","_faceBottom","textureFront","_faceFront","textureBack","_faceBack","texSize","textureArray","Uint8ClampedArray","rotDX1","subtract","rotDX2","_temp2Vector3","dy","fy","xv1","_temp3Vector3","xv2","_temp4Vector3","_temp5Vector3","normalize","color","_calcProjectionSpherical","_RGBEToLinear","_linearToRGBM","r","g","b","a","vDir","theta","atan2","z","phi","acos","dx","px","round","py","inputY","_readStringLine","uint8array","startIndex","line","character","String","fromCharCode","endOfHeader","findFormat","lineIndex","sizeRegexp","exec","parseInt","scanLineWidth","dataRGBA","pos","ptrEnd","scanLineBuffer","numScanLines","d","ptr","isEncodedRun","byteValue","off","pow","maxRange","maxRGB","M","_rightBottomBack","_rightBottomFront","_rightUpBack","_rightUpFront","_leftBottomBack","_leftBottomFront","_leftUpBack","_leftUpFront","HDR","JSONLoader","HEADER_LEN","COMPRESSED_2D","getMipmaps","ktxContainer","loadMipmaps","dataOffset","bytesOfKeyValueData","numberOfMipmapLevels","imageSize","numberOfFaces","byteArray","identifier","getEngineFormat","internalFormat","GLCompressedTextureInternalFormat","RGB_S3TC_DXT1_EXT","RGBA_S3TC_DXT5_EXT","RGBA_BPTC_UNORM_EXT","RGB_ETC1_WEBGL","ETC1_RGB","RGB8_ETC2","RGB8_PUNCHTHROUGH_ALPHA1_ETC2","ETC2_RGBA5","RGBA8_ETC2_EAC","RGB_PVRTC_2BPPV1_IMG","PVRTC_RGB2","RGBA_PVRTC_2BPPV1_IMG","PVRTC_RGBA2","RGB_PVRTC_4BPPV1_IMG","RGBA_PVRTC_4BPPV1_IMG","RGBA_ASTC_4X4_KHR","RGBA_ASTC_5X5_KHR","ASTC_5x5","RGBA_ASTC_6X6_KHR","ASTC_6x6","RGBA_ASTC_8X8_KHR","ASTC_8x8","RGBA_ASTC_10X10_KHR","ASTC_10x10","RGBA_ASTC_12X12_KHR","ASTC_12x12","formatName","khronosTextureContainerParser","facesExpected","withMipmaps","mapEngineFormat","headerDataView","endianness","parsedResult","glType","glTypeSize","glFormat","glInternalFormat","glBaseInternalFormat","numberOfArrayElements","loadType","parseSingleKTX","ktx","parseCubeKTX","dataArray","mipmapsFaces","KTXCubeLoader","urls","parsedData","miplevel","KTXCube","KTXLoader","bin","parseProperty","subKey","MaterialLoader","materialSchema","shaderRef","shader","shaderName","Shader","find","_getMaterialByShader","shaderData","materialShaderData","setVector2","setVector3","setVector4","w","setColor","setFloat","texturePromises","setTexture","Boolean","setInt","Integer","macros","renderState","enableMacro","MeshLoader","PrimitiveMeshLoader","PrimitiveMesh","createSubdivisionSurfaceSphere","sphereRadius","sphereStep","createCapsule","capsuleRadius","capsuleHeight","capsuleRadialSegments","capsuleHeightSegments","createCone","coneRadius","coneHeight","coneRadialSegment","coneHeightSegment","createCuboid","cuboidWidth","cuboidHeight","cuboidDepth","createCylinder","cylinderRadiusTop","cylinderRadiusBottom","cylinderHeight","cylinderRadialSegment","cylinderHeightSegment","createPlane","planeWidth","planeHeight","planeHorizontalSegments","planeVerticalSegments","createTorus","torusRadius","torusTubeRadius","torusRadialSegments","torusTubularSegments","torusArc","ProjectLoader","initVirtualResources","files","sceneManager","activeScene","Project","SourceFontLoader","SourceFont","SpriteAtlasLoader","_tempRect","Rect","_tempVec2","_tempVec4","__","onCancel","chainPromises","cancel","configPromise","atlasData","atlasItem","atlasItems","sprites","spriteAtlas","_addSprite","_makeSprite","atlasItemsLen","SpriteAtlas","region","atlasRegionOffset","atlasRegion","pivot","border","sprite","Sprite","h","invW","invH","offsetLeft","offsetRight","offsetBottom","offsetTop","atlasRotated","isNaN","SpriteLoader","belongToAtlas","_loadFromAtlas","_loadFromTexture","atlas","getSprite","fullPath","Texture2DContentRestorer","Texture2DLoader","TextureCubeContentRestorer","TextureCubeLoader","ShaderChunkLoader","code","ShaderFactory","registerInclude","_loadChunksInCode","basePath","shaderChunkPaths","matches","matchAll","_shaderIncludeRegex","chunkPath","ShaderLib","ShaderLoader","builtinShader","_getBuiltinShader","create","_registerPath","_builtinRegex","SceneLoader","ambient","useCustomAmbient","specularMode","Custom","useSH","diffuseIntensity","specularIntensity","diffuseSolidColor","customAmbientLight","background","BackgroundMode","SolidColor","solidColor","Sky","skyMesh","skyMaterial","skyMeshPromise","sky","skyMaterialPromise","backgroundPromise","textureFillMode","shadow","castShadows","shadowResolution","shadowDistance","shadowCascades","enableTransparentShadow","shadowTwoCascadeSplits","shadowFourCascadeSplits","shadowFadeBorder","fog","fogMode","fogStart","fogEnd","fogDensity","fogColor","postProcessData","postProcess","postProcessManager","_postProcessManager","bloomEffect","_bloomEffect","tonemappingEffect","_tonemappingEffect","bloom","downScale","scatter","intensity","tint","dirtIntensity","tonemapping","dirtTexture","dirtTexturePromise","createFromOS","fontFamily","KHR_lights_punctual","lightsSchema","lights","lightSchema","light","range","spot","DirectLight","PointLight","SpotLight","distance","innerConeAngle","outerConeAngle","angle","penumbra","KHR_materials_clearcoat","schema","clearcoatFactor","clearcoatTexture","clearcoatRoughnessFactor","clearcoatRoughnessTexture","clearcoatNormalTexture","clearCoat","clearCoatRoughness","clearCoatTexture","clearCoatRoughnessTexture","clearCoatNormalTexture","KHR_materials_ior","ior","KHR_materials_pbrSpecularGlossiness","diffuseFactor","diffuseTexture","specularFactor","glossinessFactor","specularGlossinessTexture","specularColor","glossiness","KHR_materials_unlit","UnlitMaterial","KHR_materials_variants","mappings","variants","materialIndex","extensionData","variantNames","KHR_mesh_quantization","KHR_texture_basisu","tilingOffset","GALACEAN_materials_remap","GALACEAN_animation_event","events","eventData","EXT_meshopt_compression","KHR_materials_anisotropy","anisotropyStrength","anisotropyRotation","anisotropyTexture","anisotropy","KHR_materials_iridescence","iridescenceFactor","iridescenceTexture","iridescenceIor","iridescenceThicknessMinimum","iridescenceThicknessMaximum","iridescenceThicknessTexture","iridescence","iridescenceIOR","iridescenceThicknessRange","EXT_texture_webp","_supportWebP","_isBrowser","testCanvas","toDataURL","webPIndex","fallbackIndex"],"mappings":"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"}