export declare enum SupercompressionScheme {
    None = 0,
    BasisLZ = 1,
    Zstd = 2,
    ZLib = 3
}
/** @internal */
export declare class KTX2Container {
    vkFormat: number;
    typeSize: number;
    pixelWidth: number;
    pixelHeight: number;
    pixelDepth: number;
    layerCount: number;
    faceCount: number;
    supercompressionScheme: SupercompressionScheme;
    levels: KTX2Level[];
    dataFormatDescriptor: KTX2DataFormatDescriptorBasicFormat;
    keyValue: {
        [key: string]: string | Uint8Array;
    };
    globalData: KTX2GlobalDataBasisLZ | null;
    constructor(buffer: Uint8Array);
    get isSRGB(): boolean;
    get isUASTC(): boolean;
    private parse;
}
interface KTX2Level {
    levelData: Uint8Array;
    uncompressedByteLength: number;
}
interface KTX2DataFormatDescriptorBasicFormat {
    vendorId: number;
    descriptorType: number;
    versionNumber: number;
    /** @deprecated Inferred. */
    descriptorBlockSize: number;
    colorModel: number;
    colorPrimaries: number;
    transferFunction: number;
    flags: number;
    texelBlockDimension: [number, number, number, number];
    bytesPlane: [number, number, number, number, number, number, number, number];
    samples: KTX2BasicFormatSample[];
}
interface KTX2BasicFormatSample {
    bitOffset: number;
    bitLength: number;
    /** @deprecated Renamed to 'channelType'. */
    channelID?: number;
    channelType: number;
    samplePosition: number[];
    sampleLower: number;
    sampleUpper: number;
}
interface KTX2GlobalDataBasisLZ {
    endpointCount: number;
    selectorCount: number;
    imageDescs: KTX2GlobalDataBasisLZImageDesc[];
    endpointsData: Uint8Array;
    selectorsData: Uint8Array;
    tablesData: Uint8Array;
    extendedData: Uint8Array;
}
interface KTX2GlobalDataBasisLZImageDesc {
    imageFlags: number;
    rgbSliceByteOffset: number;
    rgbSliceByteLength: number;
    alphaSliceByteOffset: number;
    alphaSliceByteLength: number;
}
export {};
