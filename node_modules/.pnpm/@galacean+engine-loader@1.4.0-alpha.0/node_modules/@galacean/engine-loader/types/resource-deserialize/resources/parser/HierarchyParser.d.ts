import { Engine, Scene } from "@galacean/engine-core";
import type { IHierarchyFile } from "../schema";
import { ReflectionParser } from "./ReflectionParser";
import { ParserContext } from "./ParserContext";
import { PrefabResource } from "../../../prefab/PrefabResource";
/** @Internal */
export declare abstract class HierarchyParser<T extends Scene | PrefabResource, V extends ParserContext<IHierarchyFile, T>> {
    readonly data: IHierarchyFile;
    readonly context: V;
    /**
     * The promise of parsed object.
     */
    readonly promise: Promise<T>;
    protected _resolve: (item: T) => void;
    protected _reject: (reason: any) => void;
    protected _engine: Engine;
    protected _reflectionParser: ReflectionParser;
    private _prefabContextMap;
    private _prefabPromiseMap;
    constructor(data: IHierarchyFile, context: V);
    /** start parse the scene or prefab or others */
    start(): void;
    protected abstract _handleRootEntity(id: string): void;
    protected abstract _clearAndResolve(): Scene | PrefabResource;
    private _parseEntities;
    private _parseComponents;
    private _parsePrefabModification;
    private _parsePrefabRemovedEntities;
    private _parsePrefabRemovedComponents;
    private _organizeEntities;
    private _getEntityByConfig;
    private _parseEntity;
    private _parsePrefab;
    private _parseStrippedEntity;
    private _parseChildren;
    private _applyEntityData;
    private _generateInstanceContext;
}
