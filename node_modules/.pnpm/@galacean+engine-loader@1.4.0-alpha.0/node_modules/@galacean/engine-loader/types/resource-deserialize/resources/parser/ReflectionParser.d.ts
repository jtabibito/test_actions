import { EngineObject, Entity } from "@galacean/engine-core";
import type { IBasicType, IClassObject, IEntity, IHierarchyFile } from "../schema";
import { ParserContext } from "./ParserContext";
export declare class ReflectionParser {
    private readonly _context;
    static customParseComponentHandles: Map<string, Function>;
    static registerCustomParseComponent(componentType: string, handle: Function): void;
    constructor(_context: ParserContext<IHierarchyFile, EngineObject>);
    parseEntity(entityConfig: IEntity): Promise<Entity>;
    parseClassObject(item: IClassObject): Promise<any>;
    parsePropsAndMethods(instance: any, item: Omit<IClassObject, "class">): Promise<any>;
    parseMethod(instance: any, methodName: string, methodParams: Array<IBasicType>): Promise<any>;
    parseBasicType(value: IBasicType, originValue?: any): Promise<any>;
    private _getEntityByConfig;
    private static _isClass;
    private static _isAssetRef;
    private static _isEntityRef;
}
