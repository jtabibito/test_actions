import { AnimationClip, AnimatorController, Camera, Engine, Entity, Light, Material, ModelMesh, ReferResource, Skin, Texture2D } from "@galacean/engine-core";
/**
 * The glTF resource.
 */
export declare class GLTFResource extends ReferResource {
    /** glTF file url. */
    readonly url: string;
    /** The array of loaded textures. */
    readonly textures?: Texture2D[];
    /** The array of loaded materials. */
    readonly materials?: Material[];
    /** The array of loaded Meshes. */
    readonly meshes?: ModelMesh[][];
    /** The array of loaded skins. */
    readonly skins?: Skin[];
    /** The array of loaded animationClips. */
    readonly animations?: AnimationClip[];
    /** The loaded  AnimatorController. */
    readonly animatorController?: AnimatorController;
    /** @internal */
    _defaultSceneRoot: Entity;
    /** @internal */
    _sceneRoots: Entity[];
    /** @internal */
    _extensionsData: Record<string, any>;
    /**
     * Extensions data.
     */
    get extensionsData(): Record<string, any>;
    /**
     * @internal
     */
    constructor(engine: Engine, url: string);
    /**
     * Instantiate scene root entity.
     * @param sceneIndex - Scene index
     * @returns Root entity
     */
    instantiateSceneRoot(sceneIndex?: number): Entity;
    protected _onDestroy(): void;
    private _disassociationSuperResource;
    /**
     * @deprecated
     * Entity after EntityParser.
     */
    entities: Entity[];
    /**
     * @deprecated
     * Camera after SceneParser.
     */
    cameras?: Camera[];
    /**
     * @deprecated
     * Export lights in extension KHR_lights_punctual.
     */
    lights?: Light[];
    /**
     * @deprecated Please use `instantiateSceneRoot` instead.
     * RootEntities after SceneParser.
     */
    get sceneRoots(): Entity[];
    /**
     * @deprecated Please use `instantiateSceneRoot` instead.
     * RootEntity after SceneParser.
     */
    get defaultSceneRoot(): Entity;
}
