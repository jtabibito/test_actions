import { ModelMesh } from "@galacean/engine-core";
import { ModelMeshRestoreInfo } from "../../GLTFContentRestorer";
import type { IGLTF, IMesh, IMeshPrimitive } from "../GLTFSchema";
import { GLTFParser } from "./GLTFParser";
import { GLTFParserContext } from "./GLTFParserContext";
export declare class GLTFMeshParser extends GLTFParser {
    private static _tempVector3;
    /**
     * @internal
     */
    static _parseMeshFromGLTFPrimitive(context: GLTFParserContext, mesh: ModelMesh, meshRestoreInfo: ModelMeshRestoreInfo, gltfMesh: IMesh, gltfPrimitive: IMeshPrimitive, gltf: IGLTF, keepMeshData: boolean): Promise<ModelMesh>;
    private static _getBlendShapeData;
    /**
     * @internal
     */
    static _createBlendShape(context: GLTFParserContext, mesh: ModelMesh, meshRestoreInfo: ModelMeshRestoreInfo, glTFMesh: IMesh, gltfPrimitive: IMeshPrimitive, glTFTargets: {
        [name: string]: number;
    }[]): Promise<void>;
    parse(context: GLTFParserContext, index: number): Promise<ModelMesh[]>;
}
