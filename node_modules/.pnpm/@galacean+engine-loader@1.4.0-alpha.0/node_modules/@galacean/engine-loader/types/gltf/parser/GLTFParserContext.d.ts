import { Buffer, Entity, ResourceManager, TypedArray } from "@galacean/engine-core";
import { BufferDataRestoreInfo, GLTFContentRestorer } from "../../GLTFContentRestorer";
import { GLTFParams } from "../../GLTFLoader";
import { GLTFResource } from "../GLTFResource";
import type { IGLTF } from "../GLTFSchema";
import { GLTFParser } from "./GLTFParser";
/**
 * @internal
 */
export declare class GLTFParserContext {
    glTFResource: GLTFResource;
    resourceManager: ResourceManager;
    params: GLTFParams;
    private static readonly _parsers;
    static addParser(parserType: GLTFParserType, parser: GLTFParser): void;
    glTF: IGLTF;
    accessorBufferCache: Record<string, BufferInfo>;
    contentRestorer: GLTFContentRestorer;
    buffers?: ArrayBuffer[];
    needAnimatorController: boolean;
    private _resourceCache;
    private _progress;
    /** @internal */
    _setTaskCompleteProgress: (loaded: number, total: number) => void;
    /** @internal */
    _setTaskDetailProgress: (url: string, loaded: number, total: number) => void;
    constructor(glTFResource: GLTFResource, resourceManager: ResourceManager, params: GLTFParams);
    get<T>(type: GLTFParserType.Entity, index: number): Entity;
    get<T>(type: GLTFParserType.Entity): Entity[];
    get<T>(type: GLTFParserType.Schema): Promise<T>;
    get<T>(type: GLTFParserType.Validator): Promise<T>;
    get<T>(type: GLTFParserType.AnimatorController): Promise<T>;
    get<T>(type: GLTFParserType, index: number): Promise<T>;
    get<T>(type: GLTFParserType): Promise<T[]>;
    parse(): Promise<GLTFResource>;
    /**
     * @internal
     */
    _onTaskDetail: (url: string, loaded: number, total: number) => void;
    /**
     * @internal
     */
    _addTaskCompletePromise(taskPromise: Promise<any>): void;
    private _handleSubAsset;
}
/**
 * @internal
 */
export declare class BufferInfo {
    data: TypedArray;
    interleaved: boolean;
    stride: number;
    vertexBuffer: Buffer;
    vertexBindingInfos: Record<number, number>;
    restoreInfo: BufferDataRestoreInfo;
    constructor(data: TypedArray, interleaved: boolean, stride: number);
}
export declare enum GLTFParserType {
    Schema = 0,
    Validator = 1,
    Scene = 2,
    Buffer = 3,
    BufferView = 4,
    Texture = 5,
    Material = 6,
    Mesh = 7,
    Entity = 8,
    Skin = 9,
    Animation = 10,
    AnimatorController = 11
}
export declare function registerGLTFParser(pipeline: GLTFParserType): (Parser: new () => GLTFParser) => void;
