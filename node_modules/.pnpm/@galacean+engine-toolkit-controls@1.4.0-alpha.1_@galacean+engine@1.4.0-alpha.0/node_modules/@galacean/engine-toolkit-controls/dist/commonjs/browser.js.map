{"version":3,"file":"browser.js","sources":["../../../../node_modules/.pnpm/@swc+helpers@0.5.7/node_modules/@swc/helpers/esm/_create_class.js","../../../../node_modules/.pnpm/@swc+helpers@0.5.7/node_modules/@swc/helpers/esm/_set_prototype_of.js","../../../../node_modules/.pnpm/@swc+helpers@0.5.7/node_modules/@swc/helpers/esm/_inherits.js","../../src/box-selection/BoxSelectionComponent.ts","../../src/box-selection/PlaneMesh.ts","../../src/box-selection/BoxSelectionSSMaterial.ts","../../src/box-selection/BoxSelectionSSHelper.ts","../../src/box-selection/BoxSelectionControls.ts","../../../../node_modules/.pnpm/@swc+helpers@0.5.7/node_modules/@swc/helpers/esm/_assert_this_initialized.js","../../src/enums/ControlHandlerType.ts","../../src/inputDevice/ControlFreeKeyboard.ts","../../src/inputDevice/ControlFreePointer.ts","../../src/Spherical.ts","../../src/FreeControl.ts","../../../../node_modules/.pnpm/@swc+helpers@0.5.7/node_modules/@swc/helpers/esm/_instanceof.js","../../src/inputDevice/ControlKeyboard.ts","../../src/inputDevice/ControlPointer.ts","../../src/inputDevice/ControlWheel.ts","../../src/OrbitControl.ts","../../src/OrthoControl.ts"],"sourcesContent":["function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","export function _set_prototype_of(o, p) {\n    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {\n        o.__proto__ = p;\n\n        return o;\n    };\n\n    return _set_prototype_of(o, p);\n}\nexport { _set_prototype_of as _ };\n","import { _set_prototype_of } from \"./_set_prototype_of.js\";\n\nexport function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });\n\n    if (superClass) _set_prototype_of(subClass, superClass);\n}\nexport { _inherits as _ };\n","import { Component } from \"@galacean/engine\";\n\nexport class BoxSelectionComponent extends Component {\n  private _isSelected = false;\n\n  get isSelect() {\n    return this._isSelected;\n  }\n\n  set isSelect(v: boolean) {\n    if (this._isSelected !== v) {\n      this._isSelected = v;\n      if (v) {\n        this.onSelect();\n      } else {\n        this.onUnselect();\n      }\n    }\n  }\n\n  onSelect = () => {};\n  onUnselect = () => {};\n}\n","import { Engine, ModelMesh, Vector3 } from \"@galacean/engine\";\n\nexport class PlaneMesh {\n  static createPlane(engine: Engine): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    PlaneMesh._initGeometryData(mesh);\n    return mesh;\n  }\n\n  static _initGeometryData(mesh: ModelMesh) {\n    const positions = new Array<Vector3>(4);\n    positions[0] = new Vector3(-1, -1, 0);\n    positions[1] = new Vector3(1, -1, 0);\n    positions[2] = new Vector3(1, 1, 0);\n    positions[3] = new Vector3(-1, 1, 0);\n\n    const indices = new Uint8Array(6);\n    indices[0] = 0;\n    indices[1] = 1;\n    indices[2] = 2;\n    indices[3] = 0;\n    indices[4] = 2;\n    indices[5] = 3;\n\n    mesh.setPositions(positions);\n    mesh.setIndices(indices);\n    mesh.uploadData(true);\n    mesh.addSubMesh(0, 6);\n    return mesh;\n  }\n}\n","import { BaseMaterial, Engine, Shader, ShaderProperty, Vector2, Vector4 } from \"@galacean/engine\";\n\nexport class BoxSelectionSSMaterial extends BaseMaterial {\n  private static _borderWidth = ShaderProperty.getByName(\"u_width\");\n  private static _minPoint = ShaderProperty.getByName(\"u_min\");\n  private static _maxPoint = ShaderProperty.getByName(\"u_max\");\n  private static _boxColor = ShaderProperty.getByName(\"u_boxColor\");\n  private static _borderColor = ShaderProperty.getByName(\"u_borderColor\");\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"box\"));\n    this.isTransparent = true;\n    this.boxColor = new Vector4(0.29, 0.63, 1, 0.3);\n    this.borderColor = new Vector4(0.22, 0.48, 1, 0.9);\n    this.borderWidth = devicePixelRatio;\n  }\n\n  get minPoint(): Vector2 {\n    return this.shaderData.getVector2(BoxSelectionSSMaterial._minPoint);\n  }\n\n  set minPoint(value: Vector2) {\n    this.shaderData.setVector2(BoxSelectionSSMaterial._minPoint, value);\n  }\n\n  get maxPoint(): Vector2 {\n    return this.shaderData.getVector2(BoxSelectionSSMaterial._maxPoint);\n  }\n\n  set maxPoint(value: Vector2) {\n    this.shaderData.setVector2(BoxSelectionSSMaterial._maxPoint, value);\n  }\n\n  get boxColor(): Vector4 {\n    return this.shaderData.getVector4(BoxSelectionSSMaterial._boxColor);\n  }\n\n  set boxColor(value: Vector4) {\n    this.shaderData.setVector4(BoxSelectionSSMaterial._boxColor, value);\n  }\n\n  get borderColor(): Vector4 {\n    return this.shaderData.getVector4(BoxSelectionSSMaterial._borderColor);\n  }\n\n  set borderColor(value: Vector4) {\n    this.shaderData.setVector4(BoxSelectionSSMaterial._borderColor, value);\n  }\n\n  get borderWidth(): number {\n    return this.shaderData.getFloat(BoxSelectionSSMaterial._borderWidth);\n  }\n\n  set borderWidth(value: number) {\n    this.shaderData.setFloat(BoxSelectionSSMaterial._borderWidth, value);\n  }\n}\n\nShader.create(\n  \"box\",\n  `\n#include <common>\n#include <common_vert>\n\nvoid main() {\n  gl_Position = vec4(POSITION, 1.0);\n}`,\n\n  `\nuniform vec2 u_min;\nuniform vec2 u_max;\nuniform vec4 u_boxColor;\nuniform vec4 u_borderColor;\nuniform float u_width;\n\nvoid main() {\n  float vColor = step(u_min.x + u_width, gl_FragCoord.x) * step(gl_FragCoord.x, u_max.x - u_width) * step(u_min.y + u_width, gl_FragCoord.y) * step(gl_FragCoord.y, u_max.y - u_width);\n  float vBorder = step(u_min.x, gl_FragCoord.x) * step(gl_FragCoord.x, u_max.x) * step(u_min.y, gl_FragCoord.y) * step(gl_FragCoord.y, u_max.y);\n  gl_FragColor = u_boxColor * vColor + (1. - vColor) * vBorder * u_borderColor;\n}\n`\n);\n","import { Entity, InputManager, MeshRenderer, PointerButton, PrimitiveMesh, Script, Vector2, WebGLEngine } from \"@galacean/engine\";\nimport { PlaneMesh } from \"./PlaneMesh\";\nimport { BoxSelectionSSMaterial } from \"./BoxSelectionSSMaterial\";\nimport { IBoxSelectionHelper } from \"./types\";\n\n// draw according to screen space\nexport class BoxSelectionSSHelper implements IBoxSelectionHelper {\n  element: Entity;\n  sceneRoot: Entity;\n  startPoint: Vector2;\n  pointBottomLeft: Vector2;\n  pointTopRight: Vector2;\n  isDown: boolean;\n  onPointerDown: any;\n  onPointerMove: any;\n  onPointerUp: any;\n  input: InputManager;\n  engine: WebGLEngine;\n  material: BoxSelectionSSMaterial;\n\n  constructor(engine: WebGLEngine, sceneRoot: Entity) {\n    this.engine = engine;\n    this.element = new Entity(engine);\n    this.sceneRoot = sceneRoot;\n    this.startPoint = new Vector2();\n    this.pointBottomLeft = new Vector2();\n    this.pointTopRight = new Vector2();\n    this.input = engine.inputManager;\n    this.init();\n  }\n\n  private init() {\n    const renderer = this.element.addComponent(MeshRenderer);\n    renderer.receiveShadows = false;\n    renderer.castShadows = false;\n    renderer.mesh = PlaneMesh.createPlane(this.engine); // PrimitiveMesh.createPlane is xoz plane, but we need xoy plane\n    this.material = new BoxSelectionSSMaterial(this.engine);\n    renderer.setMaterial(this.material);\n    this.element.transform.rotation.x = Math.PI * 0.5;\n  }\n\n  onSelectStart(vec2: Vector2) {\n    this.startPoint.x = vec2.x;\n    this.startPoint.y = this.engine.canvas.height - vec2.y;\n    this.sceneRoot.addChild(this.element);\n  }\n\n  onSelecting(vec2: Vector2) {\n    this.pointTopRight.x = Math.max(this.startPoint.x, vec2.x);\n    this.pointTopRight.y = Math.max(this.startPoint.y, this.engine.canvas.height - vec2.y);\n    this.pointBottomLeft.x = Math.min(this.startPoint.x, vec2.x);\n    this.pointBottomLeft.y = Math.min(this.startPoint.y, this.engine.canvas.height - vec2.y);\n\n    this.material.maxPoint = this.pointTopRight;\n    this.material.minPoint = this.pointBottomLeft;\n  }\n\n  onSelectEnd() {\n    this.sceneRoot.removeChild(this.element);\n  }\n}\n","import {\n  BoundingFrustum,\n  Vector3,\n  Matrix,\n  Camera,\n  Entity,\n  Plane,\n  CollisionUtil,\n  ContainmentType,\n  Script,\n  InputManager,\n  PointerButton,\n  WebGLEngine,\n  Vector2\n} from \"@galacean/engine\";\nimport { BoxSelectionComponent } from './BoxSelectionComponent';\nimport { BoxSelectionSSHelper } from \"./BoxSelectionSSHelper\";\nimport { IBoxSelectionHelper } from \"./types\";\n\nconst _frustum = new BoundingFrustum();\nconst _center = new Vector3();\nconst _tmpPoint = new Vector2();\nconst _vecNear = new Vector3();\nconst _vecTopLeft = new Vector3();\nconst _vecTopRight = new Vector3();\nconst _vecDownRight = new Vector3();\nconst _vecDownLeft = new Vector3();\nconst _vecFarTopLeft = new Vector3();\nconst _vecFarTopRight = new Vector3();\nconst _vecFarDownRight = new Vector3();\nconst _vecFarDownLeft = new Vector3();\nconst _vectemp1 = new Vector3();\nconst _vectemp2 = new Vector3();\nconst _vectemp3 = new Vector3();\n\nconst pojectInvertMatrix = new Matrix();\nfunction unproject(vec: Vector3, entity: Entity) {\n  Vector3.transformCoordinate(vec, pojectInvertMatrix, vec);\n  return Vector3.transformCoordinate(vec, entity.transform.worldMatrix, vec);\n}\n\nexport class BoxSelectionControls extends Script {\n  startPoint: Vector2 = new Vector2();\n  endPoint: Vector2 = new Vector2();\n  collection: Entity[] = [];\n  instances: any = {};\n  deep: number = Number.MAX_VALUE;\n  camera: Camera;\n  selectChildren: false;\n  input: InputManager;\n  isDeep = true;\n  helper: undefined | IBoxSelectionHelper;\n\n  override onAwake(): void {\n    const { engine, entity } = this;\n    this.camera = entity.getComponent(Camera);\n    this.input = engine.inputManager;\n    this.helper = new BoxSelectionSSHelper(this.engine as WebGLEngine, this.scene.getRootEntity()!);\n  }\n\n  override onUpdate() {\n    const p = this.input.pointers[0];\n    if (!p) {\n      return;\n    }\n    const canvas = this.engine.canvas;\n    if (this.input.isPointerDown(PointerButton.Primary)) {\n      const x = p.position.x / canvas.width * 2 - 1;\n      const y = 1 - p.position.y / canvas.height * 2;\n      this.startPoint.set(x, y);\n      this.helper?.onSelectStart(p.position);\n    }\n    if (this.input.isPointerUp(PointerButton.Primary)) {\n      const x = p.position.x / canvas.width * 2 - 1;\n      const y = 1 - p.position.y / canvas.height * 2;\n      this.endPoint.set(x, y);\n      this.helper?.onSelectEnd(p.position);\n    }\n    if (this.input.isPointerHeldDown(PointerButton.Primary)) {\n      const x = p.position.x / canvas.width * 2 - 1;\n      const y = 1 - p.position.y / canvas.height * 2;\n      this.endPoint.set(x, y);\n      this.select();\n      this.helper?.onSelecting(p.position);\n    }\n  }\n\n  select(startPoint?: Vector2, endPoint?: Vector2) {\n    this.startPoint = startPoint || this.startPoint;\n    this.endPoint = endPoint || this.endPoint;\n    this.collection.length = 0;\n\n    pojectInvertMatrix.copyFrom(this.camera.projectionMatrix);\n    pojectInvertMatrix.invert();\n    this.updateBoundingFrustum(this.startPoint, this.endPoint);\n    return this.searchChildInBoundingFrustum(_frustum, this.scene.getRootEntity()!, this.isDeep);\n  }\n\n  updateBoundingFrustum(startPoint: Vector2, endPoint: Vector2) {\n    startPoint = startPoint || this.startPoint;\n    endPoint = endPoint || this.endPoint;\n\n    // Avoid invalid BoundingFrustum\n    if (startPoint.x === endPoint.x) {\n      endPoint.x += Number.EPSILON;\n    }\n\n    if (startPoint.y === endPoint.y) {\n      endPoint.y += Number.EPSILON;\n    }\n\n    if (!this.camera.isOrthographic) {\n      _tmpPoint.set(Math.min(startPoint.x, endPoint.x), Math.max(startPoint.y, endPoint.y));\n      endPoint.set(Math.max(startPoint.x, endPoint.x), Math.min(startPoint.y, endPoint.y));\n\n      this.entity.transform.worldMatrix.getTranslation(_vecNear);\n      _vecTopLeft.set(_tmpPoint.x, _tmpPoint.y, 0.5);\n      _vecTopRight.set(endPoint.x, _tmpPoint.y, 0);\n      _vecDownRight.set(endPoint.x, endPoint.y, 0.5);\n      _vecDownLeft.set(_tmpPoint.x, endPoint.y, 0);\n\n      unproject(_vecTopLeft, this.entity);\n      unproject(_vecTopRight, this.entity);\n      unproject(_vecDownRight, this.entity);\n      unproject(_vecDownLeft, this.entity);\n\n      _vectemp1.copyFrom(_vecTopLeft).subtract(_vecNear);\n      _vectemp2.copyFrom(_vecTopRight).subtract(_vecNear);\n      _vectemp3.copyFrom(_vecDownRight).subtract(_vecNear);\n      _vectemp1.normalize();\n      _vectemp2.normalize();\n      _vectemp3.normalize();\n\n      _vectemp1.scale(this.deep);\n      _vectemp2.scale(this.deep);\n      _vectemp3.scale(this.deep);\n      _vectemp1.add(_vecNear);\n      _vectemp2.add(_vecNear);\n      _vectemp3.add(_vecNear);\n\n      Plane.fromPoints(_vecNear, _vecTopLeft, _vecTopRight, _frustum.top);\n      Plane.fromPoints(_vecNear, _vecTopRight, _vecDownRight, _frustum.right);\n      Plane.fromPoints(_vecDownRight, _vecDownLeft, _vecNear, _frustum.bottom);\n      Plane.fromPoints(_vecDownLeft, _vecTopLeft, _vecNear, _frustum.left);\n      Plane.fromPoints(_vecTopRight, _vecDownRight, _vecDownLeft, _frustum.near);\n      Plane.fromPoints(_vectemp3, _vectemp2, _vectemp1, _frustum.far);\n      _frustum.far.normal.scale(-1);\n    } else {\n      const left = Math.min(startPoint.x, endPoint.x);\n      const top = Math.max(startPoint.y, endPoint.y);\n      const right = Math.max(startPoint.x, endPoint.x);\n      const down = Math.min(startPoint.y, endPoint.y);\n\n      _vecTopLeft.set(left, top, - 1);\n      _vecTopRight.set(right, top, - 1);\n      _vecDownRight.set(right, down, - 1);\n      _vecDownLeft.set(left, down, - 1);\n\n      _vecFarTopLeft.set(left, top, 1);\n      _vecFarTopRight.set(right, top, 1);\n      _vecFarDownRight.set(right, down, 1);\n      _vecFarDownLeft.set(left, down, 1);\n\n      unproject(_vecTopLeft, this.entity);\n      unproject(_vecTopRight, this.entity);\n      unproject(_vecDownRight, this.entity);\n      unproject(_vecDownLeft, this.entity);\n\n      unproject(_vecFarTopLeft, this.entity);\n      unproject(_vecFarTopRight, this.entity);\n      unproject(_vecFarDownRight, this.entity);\n      unproject(_vecFarDownLeft, this.entity);\n\n      Plane.fromPoints(_vecTopLeft, _vecFarTopLeft, _vecFarTopRight, _frustum.top);\n      Plane.fromPoints(_vecTopRight, _vecFarTopRight, _vecFarDownRight, _frustum.right);\n      Plane.fromPoints(_vecFarDownRight, _vecFarDownLeft, _vecDownLeft, _frustum.bottom);\n      Plane.fromPoints(_vecFarDownLeft, _vecFarTopLeft, _vecTopLeft, _frustum.left);\n      Plane.fromPoints(_vecTopRight, _vecDownRight, _vecDownLeft, _frustum.near);\n      Plane.fromPoints(_vecFarDownRight, _vecFarTopRight, _vecFarTopLeft, _frustum.far);\n      _frustum.far.normal.scale(-1);\n    }\n  }\n\n  searchChildInBoundingFrustum(frustum: BoundingFrustum, entity: Entity, isDeep: boolean = false) {\n    let c = entity.getComponent(BoxSelectionComponent);\n    if (c && c.enabled) {\n      _center.copyFrom(entity.transform.worldPosition);\n      c.isSelect = CollisionUtil.frustumContainsPoint(frustum, _center) !== ContainmentType.Disjoint;\n      if (c.isSelect) {\n        this.collection.push(entity);\n      }\n    }\n    const len = entity.children.length;\n    if (isDeep && len) {\n      for (let x = 0; x < len; x++) {\n        this.searchChildInBoundingFrustum(frustum, entity.children[x], isDeep);\n      }\n    }\n    return this.collection;\n  }\n}\n","export function _assert_this_initialized(self) {\n    if (self === void 0) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\n    return self;\n}\nexport { _assert_this_initialized as _ };\n","export enum ControlHandlerType {\n  None = 0,\n  ROTATE = 1,\n  ZOOM = 2,\n  PAN = 4,\n  All = 7\n}\n","import { InputManager, Keys, Vector3 } from \"@galacean/engine\";\nimport { FreeControl } from \"../FreeControl\";\nimport { ControlHandlerType } from \"../enums/ControlHandlerType\";\nexport class ControlFreeKeyboard {\n  onUpdateHandler(input: InputManager): ControlHandlerType {\n    if (\n      input.isKeyHeldDown(Keys.ArrowLeft) ||\n      input.isKeyHeldDown(Keys.KeyA) ||\n      input.isKeyHeldDown(Keys.ArrowUp) ||\n      input.isKeyHeldDown(Keys.KeyW) ||\n      input.isKeyHeldDown(Keys.ArrowDown) ||\n      input.isKeyHeldDown(Keys.KeyS) ||\n      input.isKeyHeldDown(Keys.ArrowRight) ||\n      input.isKeyHeldDown(Keys.KeyD)\n    ) {\n      return ControlHandlerType.PAN;\n    } else {\n      return ControlHandlerType.None;\n    }\n  }\n\n  onUpdateDelta(control: FreeControl, outDelta: Vector3): void {\n    const { movementSpeed, input } = control;\n    outDelta.x = outDelta.y = outDelta.z = 0;\n    if (input.isKeyHeldDown(Keys.ArrowLeft) || input.isKeyHeldDown(Keys.KeyA)) {\n      outDelta.x -= movementSpeed;\n    }\n    if (input.isKeyHeldDown(Keys.ArrowRight) || input.isKeyHeldDown(Keys.KeyD)) {\n      outDelta.x += movementSpeed;\n    }\n    if (input.isKeyHeldDown(Keys.ArrowUp) || input.isKeyHeldDown(Keys.KeyW)) {\n      outDelta.z -= movementSpeed;\n    }\n    if (input.isKeyHeldDown(Keys.ArrowDown) || input.isKeyHeldDown(Keys.KeyS)) {\n      outDelta.z += movementSpeed;\n    }\n  }\n}\n","import { InputManager, PointerButton, Vector3 } from \"@galacean/engine\";\nimport { OrbitControl } from \"../OrbitControl\";\nimport { ControlHandlerType } from \"../enums/ControlHandlerType\";\nimport { IControlInput } from \"./IControlInput\";\n\nenum DeltaType {\n  Moving,\n  Distance,\n  None\n}\nexport class ControlFreePointer implements IControlInput {\n  private _deltaType: DeltaType = DeltaType.Moving;\n  private _handlerType: ControlHandlerType = ControlHandlerType.None;\n  private _frameIndex: number = 0;\n  private _lastUsefulFrameIndex: number = -1;\n  onUpdateHandler(input: InputManager): ControlHandlerType {\n    ++this._frameIndex;\n    if (input.pointers.length === 1) {\n      if (input.isPointerHeldDown(PointerButton.Primary)) {\n        this._updateType(ControlHandlerType.ROTATE, DeltaType.Moving);\n      } else {\n        const { deltaPosition } = input.pointers[0];\n        if ((deltaPosition.x !== 0 || deltaPosition.y !== 0) && input.isPointerUp(PointerButton.Primary)) {\n          this._updateType(ControlHandlerType.ROTATE, DeltaType.Moving);\n        } else {\n          this._updateType(ControlHandlerType.None, DeltaType.None);\n        }\n      }\n    } else {\n      this._updateType(ControlHandlerType.None, DeltaType.None);\n    }\n    return this._handlerType;\n  }\n\n  onUpdateDelta(control: OrbitControl, outDelta: Vector3): void {\n    const { _frameIndex: frameIndex } = this;\n    switch (this._deltaType) {\n      case DeltaType.Moving:\n        if (this._lastUsefulFrameIndex === frameIndex - 1) {\n          const { deltaPosition } = control.input.pointers[0];\n          outDelta.x = deltaPosition.x;\n          outDelta.y = deltaPosition.y;\n        } else {\n          outDelta.x = 0;\n          outDelta.y = 0;\n        }\n        break;\n      default:\n        break;\n    }\n    this._lastUsefulFrameIndex = frameIndex;\n  }\n\n  private _updateType(handlerType: ControlHandlerType, deltaType: DeltaType) {\n    if (this._handlerType !== handlerType || this._deltaType !== deltaType) {\n      this._handlerType = handlerType;\n      this._deltaType = deltaType;\n      this._lastUsefulFrameIndex = -1;\n    }\n  }\n}\n","import { MathUtil, Matrix, Vector3 } from \"@galacean/engine\";\n// Prevent gimbal lock.\nconst ESP = MathUtil.zeroTolerance;\n// Spherical.\nexport class Spherical {\n  private static _xAxis: Vector3 = new Vector3();\n  private static _yAxis: Vector3 = new Vector3();\n  private static _zAxis: Vector3 = new Vector3();\n  private _matrix: Matrix = new Matrix();\n  private _matrixInv: Matrix = new Matrix();\n  constructor(public radius?: number, public phi?: number, public theta?: number) {\n    this.radius = radius !== undefined ? radius : 1.0;\n    this.phi = phi !== undefined ? phi : 0;\n    this.theta = theta !== undefined ? theta : 0;\n  }\n\n  makeSafe(): Spherical {\n    const count = Math.floor(this.phi / Math.PI);\n    this.phi = MathUtil.clamp(this.phi, count * Math.PI + ESP, (count + 1) * Math.PI - ESP);\n    return this;\n  }\n\n  set(radius: number, phi: number, theta: number): Spherical {\n    this.radius = radius;\n    this.phi = phi;\n    this.theta = theta;\n    return this;\n  }\n\n  setYAxis(up: Vector3): void {\n    const { _xAxis: xAxis, _yAxis: yAxis, _zAxis: zAxis } = Spherical;\n    if (Vector3.equals(xAxis.set(1, 0, 0), yAxis.copyFrom(up).normalize())) {\n      xAxis.set(0, 1, 0);\n    }\n    Vector3.cross(xAxis, yAxis, zAxis);\n    zAxis.normalize();\n    Vector3.cross(yAxis, zAxis, xAxis);\n    const { elements: es } = this._matrix;\n    (es[0] = xAxis.x), (es[1] = xAxis.y), (es[2] = xAxis.z);\n    (es[4] = yAxis.x), (es[5] = yAxis.y), (es[6] = yAxis.z);\n    (es[8] = zAxis.x), (es[9] = zAxis.y), (es[10] = zAxis.z);\n\n    const { elements: eInv } = this._matrixInv;\n    (eInv[0] = xAxis.x), (eInv[4] = xAxis.y), (eInv[8] = xAxis.z);\n    (eInv[1] = yAxis.x), (eInv[5] = yAxis.y), (eInv[9] = yAxis.z);\n    (eInv[2] = zAxis.x), (eInv[6] = zAxis.y), (eInv[10] = zAxis.z);\n  }\n\n  setFromVec3(value: Vector3, atTheBack: boolean = false): Spherical {\n    value.transformNormal(this._matrixInv);\n    this.radius = value.length();\n    if (this.radius === 0) {\n      this.theta = 0;\n      this.phi = 0;\n    } else {\n      if (atTheBack) {\n        this.phi = 2 * Math.PI - Math.acos(MathUtil.clamp(value.y / this.radius, -1, 1));\n        this.theta = Math.atan2(-value.x, -value.z);\n      } else {\n        this.phi = Math.acos(MathUtil.clamp(value.y / this.radius, -1, 1));\n        this.theta = Math.atan2(value.x, value.z);\n      }\n    }\n    return this;\n  }\n\n  setToVec3(value: Vector3): boolean {\n    const { radius, phi, theta } = this;\n    const sinPhiRadius = Math.sin(phi) * radius;\n    this.phi -= Math.floor(this.phi / Math.PI / 2) * Math.PI * 2;\n    value.set(sinPhiRadius * Math.sin(theta), radius * Math.cos(phi), sinPhiRadius * Math.cos(theta));\n    value.transformNormal(this._matrix);\n    return this.phi > Math.PI;\n  }\n}\n","import { Entity, InputManager, MathUtil, Script, Transform, Vector3 } from \"@galacean/engine\";\nimport { ControlHandlerType } from \"./enums/ControlHandlerType\";\nimport { ControlFreeKeyboard } from \"./inputDevice/ControlFreeKeyboard\";\nimport { ControlFreePointer } from \"./inputDevice/ControlFreePointer\";\nimport { IControlInput } from \"./inputDevice/IControlInput\";\nimport { Spherical } from \"./Spherical\";\n\n/**\n * The camera's roaming controller, can move up and down, left and right, and rotate the viewing angle.\n */\nexport class FreeControl extends Script {\n  input: InputManager;\n  inputDevices: IControlInput[] = [new ControlFreeKeyboard(), new ControlFreePointer()];\n\n  /** Movement distance per second, the unit is the unit before MVP conversion. */\n  movementSpeed: number = 1.0;\n  /** Rotate speed. */\n  rotateSpeed: number = 1.0;\n  /** Simulate a ground. */\n  floorMock: boolean = true;\n  /** Simulated ground height. */\n  floorY: number = 0;\n\n  private _cameraTransform: Transform;\n  private _spherical: Spherical = new Spherical();\n  private _tempVec: Vector3 = new Vector3();\n  private _atTheBack: boolean = false;\n  private _topVec: Vector3 = new Vector3(0, 1, 0);\n  private _bottomVec: Vector3 = new Vector3(0, -1, 0);\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.input = this.engine.inputManager;\n    const transform = (this._cameraTransform = entity.transform);\n    /** Init spherical. */\n    const { _tempVec: tempVec, _spherical: spherical } = this;\n    Vector3.transformByQuat(tempVec.set(0, 0, -1), transform.rotationQuaternion, tempVec);\n    spherical.setFromVec3(tempVec, this._atTheBack);\n  }\n\n  override onLateUpdate(deltaTime: number): void {\n    if (this.enabled === false) return;\n    let curHandlerType = ControlHandlerType.None;\n    const { _tempVec: delta } = this;\n    const { inputDevices, input } = this;\n    for (let i = inputDevices.length - 1; i >= 0; i--) {\n      const handler = inputDevices[i];\n      const handlerType = handler.onUpdateHandler(input);\n      if (handlerType) {\n        curHandlerType |= handlerType;\n        handler.onUpdateDelta(this, delta);\n        switch (handlerType) {\n          case ControlHandlerType.ROTATE:\n            this._rotate(delta);\n            break;\n          case ControlHandlerType.PAN:\n            this._pan(delta, deltaTime);\n            break;\n          default:\n            break;\n        }\n      }\n    }\n    if (this.floorMock) {\n      const position = this._cameraTransform.position;\n      if (position.y !== this.floorY) {\n        this._cameraTransform.setPosition(position.x, this.floorY, position.z);\n      }\n    }\n  }\n\n  private _pan(moveDelta: Vector3, delta: number): void {\n    const actualMoveSpeed = delta * this.movementSpeed;\n    moveDelta.normalize().scale(actualMoveSpeed);\n    this._cameraTransform.translate(moveDelta, true);\n  }\n\n  private _rotate(moveDelta: Vector3): void {\n    if (moveDelta.x !== 0 || moveDelta.y !== 0) {\n      const canvas = this.engine.canvas;\n      const deltaAlpha = (-moveDelta.x * 180) / canvas.width;\n      const deltaPhi = (moveDelta.y * 180) / canvas.height;\n      this._spherical.theta += MathUtil.degreeToRadian(deltaAlpha);\n      this._spherical.phi += MathUtil.degreeToRadian(deltaPhi);\n      this._spherical.makeSafe();\n      this._atTheBack = this._spherical.setToVec3(this._tempVec);\n      Vector3.add(this._cameraTransform.position, this._tempVec, this._tempVec);\n      this._atTheBack\n        ? this._cameraTransform.lookAt(this._tempVec, this._bottomVec)\n        : this._cameraTransform.lookAt(this._tempVec, this._topVec);\n    }\n  }\n}\n","export function _instanceof(left, right) {\n    if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n        return !!right[Symbol.hasInstance](left);\n    } else return left instanceof right;\n}\nexport { _instanceof as _ };\n","import { InputManager, Keys, Vector3 } from \"@galacean/engine\";\nimport { OrbitControl } from \"../OrbitControl\";\nimport { ControlHandlerType } from \"../enums/ControlHandlerType\";\nimport { IControlInput } from \"./IControlInput\";\n\nexport class ControlKeyboard implements IControlInput {\n  onUpdateHandler(input: InputManager): ControlHandlerType {\n    if (\n      input.isKeyHeldDown(Keys.ArrowLeft) ||\n      input.isKeyHeldDown(Keys.ArrowRight) ||\n      input.isKeyHeldDown(Keys.ArrowUp) ||\n      input.isKeyHeldDown(Keys.ArrowDown)\n    ) {\n      return ControlHandlerType.PAN;\n    } else {\n      return ControlHandlerType.None;\n    }\n  }\n\n  onUpdateDelta(control: OrbitControl, outDelta: Vector3): void {\n    const { keyPanSpeed, input } = control;\n    outDelta.x = outDelta.y = 0;\n    if (input.isKeyHeldDown(Keys.ArrowLeft)) {\n      outDelta.x += keyPanSpeed;\n    }\n    if (input.isKeyHeldDown(Keys.ArrowRight)) {\n      outDelta.x -= keyPanSpeed;\n    }\n    if (input.isKeyHeldDown(Keys.ArrowUp)) {\n      outDelta.y += keyPanSpeed;\n    }\n    if (input.isKeyHeldDown(Keys.ArrowDown)) {\n      outDelta.y -= keyPanSpeed;\n    }\n  }\n}\n","import { InputManager, PointerButton, Vector2, Vector3 } from \"@galacean/engine\";\nimport { OrbitControl } from \"../OrbitControl\";\nimport { ControlHandlerType } from \"../enums/ControlHandlerType\";\nimport { IControlInput } from \"./IControlInput\";\n\nenum DeltaType {\n  Moving,\n  Distance,\n  None\n}\n\nexport class ControlPointer implements IControlInput {\n  private _deltaType: DeltaType = DeltaType.None;\n  private _handlerType: ControlHandlerType = ControlHandlerType.None;\n  private _frameIndex: number = 0;\n  private _lastUsefulFrameIndex: number = -1;\n  private _distanceOfPointers: number = 0;\n  onUpdateHandler(input: InputManager): ControlHandlerType {\n    ++this._frameIndex;\n    const { pointers } = input;\n    switch (pointers.length) {\n      case 1:\n        if (input.isPointerHeldDown(PointerButton.Secondary)) {\n          this._updateType(ControlHandlerType.PAN, DeltaType.Moving);\n        } else if (input.isPointerHeldDown(PointerButton.Auxiliary)) {\n          this._updateType(ControlHandlerType.ZOOM, DeltaType.Moving);\n        } else if (input.isPointerHeldDown(PointerButton.Primary)) {\n          this._updateType(ControlHandlerType.ROTATE, DeltaType.Moving);\n        } else {\n          // When `onPointerMove` happens on the same frame as `onPointerUp`\n          // Need to record the movement of this frame\n          const { deltaPosition } = input.pointers[0];\n          if (deltaPosition.x !== 0 && deltaPosition.y !== 0) {\n            if (input.isPointerUp(PointerButton.Secondary)) {\n              this._updateType(ControlHandlerType.PAN, DeltaType.Moving);\n            } else if (input.isPointerUp(PointerButton.Auxiliary)) {\n              this._updateType(ControlHandlerType.ZOOM, DeltaType.Moving);\n            } else if (input.isPointerUp(PointerButton.Primary)) {\n              this._updateType(ControlHandlerType.ROTATE, DeltaType.Moving);\n            } else {\n              this._updateType(ControlHandlerType.None, DeltaType.None);\n            }\n          } else {\n            this._updateType(ControlHandlerType.None, DeltaType.None);\n          }\n        }\n        break;\n      case 2:\n        this._updateType(ControlHandlerType.ZOOM, DeltaType.Distance);\n        break;\n      case 3:\n        this._updateType(ControlHandlerType.PAN, DeltaType.Moving);\n        break;\n      default:\n        this._updateType(ControlHandlerType.None, DeltaType.None);\n        break;\n    }\n    return this._handlerType;\n  }\n\n  onUpdateDelta(control: OrbitControl, outDelta: Vector3): void {\n    const { _frameIndex: frameIndex } = this;\n    switch (this._deltaType) {\n      case DeltaType.Moving:\n        outDelta.x = 0;\n        outDelta.y = 0;\n        if (this._lastUsefulFrameIndex === frameIndex - 1) {\n          const { pointers } = control.input;\n          const length = pointers.length;\n          for (let i = length - 1; i >= 0; i--) {\n            const { deltaPosition } = pointers[i];\n            outDelta.x += deltaPosition.x;\n            outDelta.y += deltaPosition.y;\n          }\n          outDelta.x /= length;\n          outDelta.y /= length;\n        }\n        break;\n      case DeltaType.Distance:\n        const { pointers } = control.input;\n        const pointer1 = pointers[0];\n        const pointer2 = pointers[1];\n        const curDistance = Vector2.distance(pointer1.position, pointer2.position);\n        if (this._lastUsefulFrameIndex === frameIndex - 1) {\n          outDelta.set(0, this._distanceOfPointers - curDistance, 0);\n        } else {\n          outDelta.set(0, 0, 0);\n        }\n        this._distanceOfPointers = curDistance;\n        break;\n      default:\n        break;\n    }\n    this._lastUsefulFrameIndex = frameIndex;\n  }\n\n  private _updateType(handlerType: ControlHandlerType, deltaType: DeltaType) {\n    if (this._handlerType !== handlerType || this._deltaType !== deltaType) {\n      this._handlerType = handlerType;\n      this._deltaType = deltaType;\n      this._lastUsefulFrameIndex = -1;\n    }\n  }\n}\n","import { InputManager, Vector3 } from \"@galacean/engine\";\nimport { OrbitControl } from \"../OrbitControl\";\nimport { ControlHandlerType } from \"../enums/ControlHandlerType\";\nimport { IControlInput } from \"./IControlInput\";\n\nexport class ControlWheel implements IControlInput {\n  onUpdateHandler(input: InputManager): ControlHandlerType {\n    const { wheelDelta } = input;\n    if (wheelDelta.x === 0 && wheelDelta.y === 0 && wheelDelta.z === 0) {\n      return ControlHandlerType.None;\n    } else {\n      return ControlHandlerType.ZOOM;\n    }\n  }\n\n  onUpdateDelta(control: OrbitControl, outDelta: Vector3): void {\n    outDelta.copyFrom(control.input.wheelDelta);\n  }\n}\n","import { Camera, Canvas, InputManager, Script, Transform, Vector3 } from \"@galacean/engine\";\nimport { Spherical } from \"./Spherical\";\nimport { ControlHandlerType } from \"./enums/ControlHandlerType\";\nimport { ControlKeyboard } from \"./inputDevice/ControlKeyboard\";\nimport { ControlPointer } from \"./inputDevice/ControlPointer\";\nimport { ControlWheel } from \"./inputDevice/ControlWheel\";\nimport { IControlInput } from \"./inputDevice/IControlInput\";\n\n/**\n * The camera's track controller, can rotate, zoom, pan, support mouse and touch events.\n */\nexport class OrbitControl extends Script {\n  canvas: Canvas;\n  input: InputManager;\n  inputDevices: IControlInput[] = [new ControlKeyboard(), new ControlPointer(), new ControlWheel()];\n  camera: Camera;\n  cameraTransform: Transform;\n\n  /** Whether to automatically rotate the camera, the default is false. */\n  autoRotate: boolean = false;\n  /** The radian of automatic rotation per second. */\n  autoRotateSpeed: number = Math.PI;\n  /** Whether to enable camera damping, the default is true. */\n  enableDamping: boolean = true;\n  /** Rotation speed, default is 1.0 . */\n  rotateSpeed: number = 1.0;\n  /** Camera zoom speed, the default is 1.0. */\n  zoomSpeed: number = 1.0;\n  /** Keyboard translation speed, the default is 7.0 . */\n  keyPanSpeed: number = 7.0;\n  /** Rotation damping parameter, default is 0.1 . */\n  dampingFactor: number = 0.1;\n  /** Zoom damping parameter, default is 0.2 . */\n  zoomFactor: number = 0.2;\n  /**  The minimum distance, the default is 0.1, should be greater than 0. */\n  minDistance: number = 0.1;\n  /** The maximum distance, the default is infinite, should be greater than the minimum distance. */\n  maxDistance: number = Infinity;\n  /** Minimum zoom speed, the default is 0.0. */\n  minZoom: number = 0.0;\n  /** Maximum zoom speed, the default is positive infinity. */\n  maxZoom: number = Infinity;\n  /** The minimum radian in the vertical direction, the default is 1 degree. */\n  minPolarAngle: number = (1 / 180) * Math.PI;\n  /** The maximum radian in the vertical direction,  the default is 179 degree.  */\n  maxPolarAngle: number = (179 / 180) * Math.PI;\n  /** The minimum radian in the horizontal direction, the default is negative infinity. */\n  minAzimuthAngle: number = -Infinity;\n  /** The maximum radian in the horizontal direction, the default is positive infinity.  */\n  maxAzimuthAngle: number = Infinity;\n\n  private _enableKeys: boolean = true;\n  private _up: Vector3 = new Vector3(0, 1, 0);\n  private _target: Vector3 = new Vector3();\n  private _atTheBack: boolean = false;\n  private _spherical: Spherical = new Spherical();\n  private _sphericalDelta: Spherical = new Spherical();\n  private _sphericalDump: Spherical = new Spherical();\n  private _zoomFrag: number = 0;\n  private _scale: number = 1;\n  private _panOffset: Vector3 = new Vector3();\n  private _tempVec3: Vector3 = new Vector3();\n  private _enableHandler: number = ControlHandlerType.All;\n\n  /**\n   * Return whether to enable keyboard.\n   */\n  get enableKeys(): boolean {\n    return this._enableKeys;\n  }\n\n  set enableKeys(value: boolean) {\n    if (this._enableKeys !== value) {\n      this._enableKeys = value;\n      const { inputDevices } = this;\n      if (value) {\n        inputDevices.push(new ControlKeyboard());\n      } else {\n        for (let i = inputDevices.length - 1; i >= 0; i--) {\n          if (inputDevices[i] instanceof ControlKeyboard) {\n            inputDevices.splice(i, 1);\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  /*\n   * Return up vector.\n   */\n  get up(): Vector3 {\n    return this._up;\n  }\n\n  set up(value: Vector3) {\n    this._up.copyFrom(value);\n    this._spherical.setYAxis(value);\n    this._atTheBack = false;\n  }\n\n  /**\n   * Return target position.\n   * */\n  get target(): Vector3 {\n    return this._target;\n  }\n\n  set target(value: Vector3) {\n    this._target.copyFrom(value);\n    this._atTheBack = false;\n  }\n\n  /**\n   *  Return Whether to enable rotation, the default is true.\n   */\n  get enableRotate(): boolean {\n    return (this._enableHandler & ControlHandlerType.ROTATE) !== 0;\n  }\n\n  set enableRotate(value: boolean) {\n    if (value) {\n      this._enableHandler |= ControlHandlerType.ROTATE;\n    } else {\n      this._enableHandler &= ~ControlHandlerType.ROTATE;\n    }\n  }\n\n  /**\n   *  Whether to enable camera damping, the default is true.\n   */\n  get enableZoom(): boolean {\n    return (this._enableHandler & ControlHandlerType.ZOOM) !== 0;\n  }\n\n  set enableZoom(value: boolean) {\n    if (value) {\n      this._enableHandler |= ControlHandlerType.ZOOM;\n    } else {\n      this._enableHandler &= ~ControlHandlerType.ZOOM;\n    }\n  }\n\n  /**\n   *  Whether to enable translation, the default is true.\n   */\n  get enablePan(): boolean {\n    return (this._enableHandler & ControlHandlerType.PAN) !== 0;\n  }\n\n  set enablePan(value: boolean) {\n    if (value) {\n      this._enableHandler |= ControlHandlerType.PAN;\n    } else {\n      this._enableHandler &= ~ControlHandlerType.PAN;\n    }\n  }\n\n  override onAwake(): void {\n    const { engine, entity } = this;\n    this.canvas = engine.canvas;\n    this.input = engine.inputManager;\n    this.camera = entity.getComponent(Camera);\n    this.cameraTransform = entity.transform;\n    this._spherical.setYAxis(this._up);\n    this._atTheBack = false;\n  }\n\n  override onLateUpdate(deltaTime: number): void {\n    /** Update this._sphericalDelta, this._scale and this._panOffset. */\n    this._updateInputDelta(deltaTime);\n    /** Update camera's transform. */\n    this._updateTransform();\n  }\n\n  private _updateInputDelta(deltaTime: number): void {\n    let curHandlerType = ControlHandlerType.None;\n    const { _tempVec3: delta, _enableHandler: enableHandler } = this;\n    const { inputDevices, input } = this;\n    for (let i = inputDevices.length - 1; i >= 0; i--) {\n      const handler = inputDevices[i];\n      const handlerType = handler.onUpdateHandler(input);\n      if (handlerType & enableHandler) {\n        curHandlerType |= handlerType;\n        handler.onUpdateDelta(this, delta);\n        switch (handlerType) {\n          case ControlHandlerType.ROTATE:\n            this._rotate(delta);\n            break;\n          case ControlHandlerType.ZOOM:\n            this._zoom(delta);\n            break;\n          case ControlHandlerType.PAN:\n            this._pan(delta);\n            break;\n          default:\n            break;\n        }\n      }\n    }\n    const { _sphericalDump, _sphericalDelta } = this;\n    if (this.enableDamping) {\n      if (enableHandler & ControlHandlerType.ZOOM && curHandlerType ^ ControlHandlerType.ZOOM) {\n        this._zoomFrag *= 1 - this.zoomFactor;\n      }\n      if (enableHandler & ControlHandlerType.ROTATE && curHandlerType ^ ControlHandlerType.ROTATE) {\n        _sphericalDelta.theta = _sphericalDump.theta *= 1 - this.dampingFactor;\n        _sphericalDelta.phi = _sphericalDump.phi *= 1 - this.dampingFactor;\n      }\n    }\n    if (curHandlerType === ControlHandlerType.None && this.autoRotate) {\n      const rotateAngle = this.autoRotateSpeed * deltaTime;\n      _sphericalDelta.theta -= rotateAngle;\n    }\n  }\n\n  private _rotate(delta: Vector3): void {\n    const radianLeft = ((2 * Math.PI * delta.x) / this.canvas.width) * this.rotateSpeed;\n    this._sphericalDelta.theta -= radianLeft;\n    const radianUp = ((2 * Math.PI * delta.y) / this.canvas.height) * this.rotateSpeed;\n    this._sphericalDelta.phi -= radianUp;\n    if (this.enableDamping) {\n      this._sphericalDump.theta = -radianLeft;\n      this._sphericalDump.phi = -radianUp;\n    }\n  }\n\n  private _zoom(delta: Vector3): void {\n    if (delta.y > 0) {\n      this._scale /= Math.pow(0.95, this.zoomSpeed);\n    } else if (delta.y < 0) {\n      this._scale *= Math.pow(0.95, this.zoomSpeed);\n    }\n  }\n\n  private _pan(delta: Vector3): void {\n    const { cameraTransform } = this;\n    const { elements } = cameraTransform.worldMatrix;\n    const { height } = this.canvas;\n    const targetDistance =\n      Vector3.distance(cameraTransform.position, this.target) * (this.camera.fieldOfView / 2) * (Math.PI / 180);\n    const distanceLeft = -2 * delta.x * (targetDistance / height);\n    const distanceUp = 2 * delta.y * (targetDistance / height);\n    this._panOffset.x += elements[0] * distanceLeft + elements[4] * distanceUp;\n    this._panOffset.y += elements[1] * distanceLeft + elements[5] * distanceUp;\n    this._panOffset.z += elements[2] * distanceLeft + elements[6] * distanceUp;\n  }\n\n  private _updateTransform(): void {\n    const { cameraTransform, target, _tempVec3, _spherical, _sphericalDelta, _panOffset } = this;\n    _tempVec3.copyFrom(cameraTransform.worldUp);\n    this._atTheBack = _tempVec3.y <= 0;\n    Vector3.subtract(cameraTransform.position, target, _tempVec3);\n    _spherical.setFromVec3(_tempVec3, this._atTheBack);\n    _spherical.theta += _sphericalDelta.theta;\n    _spherical.phi += _sphericalDelta.phi;\n    _spherical.theta = Math.max(this.minAzimuthAngle, Math.min(this.maxAzimuthAngle, _spherical.theta));\n    _spherical.phi = Math.max(this.minPolarAngle, Math.min(this.maxPolarAngle, _spherical.phi));\n    _spherical.makeSafe();\n    if (this._scale !== 1) {\n      this._zoomFrag = _spherical.radius * (this._scale - 1);\n    }\n    _spherical.radius += this._zoomFrag;\n    _spherical.radius = Math.max(this.minDistance, Math.min(this.maxDistance, _spherical.radius));\n    this._atTheBack = _spherical.setToVec3(_tempVec3);\n    Vector3.add(target.add(_panOffset), _tempVec3, cameraTransform.worldPosition);\n    cameraTransform.lookAt(target, _tempVec3.copyFrom(this.up).scale(this._atTheBack ? -1 : 1));\n    /** Reset cache value. */\n    this._zoomFrag = 0;\n    this._scale = 1;\n    _sphericalDelta.set(0, 0, 0);\n    _panOffset.set(0, 0, 0);\n  }\n}\n","import { Camera, Canvas, Entity, InputManager, Script, Transform, Vector3 } from \"@galacean/engine\";\nimport { ControlHandlerType } from \"./enums/ControlHandlerType\";\nimport { ControlKeyboard } from \"./inputDevice/ControlKeyboard\";\nimport { ControlPointer } from \"./inputDevice/ControlPointer\";\nimport { ControlWheel } from \"./inputDevice/ControlWheel\";\nimport { IControlInput } from \"./inputDevice/IControlInput\";\n\n/**\n * The camera's track controller, can rotate, zoom, pan, support mouse and touch events.\n */\nexport class OrthoControl extends Script {\n  canvas: Canvas;\n  input: InputManager;\n  inputDevices: IControlInput[] = [new ControlKeyboard(), new ControlPointer(), new ControlWheel()];\n  camera: Camera;\n  cameraTransform: Transform;\n\n  /** Target position. */\n  target: Vector3 = new Vector3();\n  /** Up vector */\n  up: Vector3 = new Vector3(0, 1, 0);\n  /** Whether to automatically rotate the camera, the default is false. */\n  autoRotate: boolean = false;\n  /** The radian of automatic rotation per second. */\n  autoRotateSpeed: number = Math.PI;\n  /** Whether to enable keyboard. */\n  enableKeys: boolean = false;\n  /** Whether to enable camera damping, the default is true. */\n  enableDamping: boolean = true;\n  /** Rotation speed, default is 1.0 . */\n  rotateSpeed: number = 1.0;\n  /** Camera zoom speed, the default is 1.0. */\n  zoomSpeed: number = 1.0;\n  /** Keyboard translation speed, the default is 7.0 . */\n  keyPanSpeed: number = 7.0;\n  /** Rotation damping parameter, default is 0.1 . */\n  dampingFactor: number = 0.1;\n  /** Zoom damping parameter, default is 0.2 . */\n  zoomFactor: number = 0.2;\n  /**  The minimum distance, the default is 0.1, should be greater than 0. */\n  minDistance: number = 0.1;\n  /** The maximum distance, the default is infinite, should be greater than the minimum distance. */\n  maxDistance: number = Infinity;\n  /** Minimum zoom speed, the default is 0.0. */\n  minZoom: number = 0.0;\n  /** Maximum zoom speed, the default is positive infinity. */\n  maxZoom: number = Infinity;\n  /** The minimum radian in the vertical direction, the default is 0 radian, the value range is 0 - Math.PI. */\n  minPolarAngle: number = 0.0;\n  /** The maximum radian in the vertical direction, the default is Math.PI, and the value range is 0 - Math.PI. */\n  maxPolarAngle: number = Math.PI;\n  /** The minimum radian in the horizontal direction, the default is negative infinity. */\n  minAzimuthAngle: number = -Infinity;\n  /** The maximum radian in the horizontal direction, the default is positive infinity.  */\n  maxAzimuthAngle: number = Infinity;\n\n  private _zoomScaleUnit: number = 2;\n  private _scale: number = 1;\n  private _panOffset: Vector3 = new Vector3();\n  private _tempVec3: Vector3 = new Vector3();\n  private _enableHandler: number = ControlHandlerType.All;\n\n  /**\n   *  Return Whether to enable rotation, the default is true.\n   */\n  get enableRotate(): boolean {\n    return (this._enableHandler & ControlHandlerType.ROTATE) !== 0;\n  }\n\n  set enableRotate(value: boolean) {\n    if (value) {\n      this._enableHandler |= ControlHandlerType.ROTATE;\n    } else {\n      this._enableHandler &= ~ControlHandlerType.ROTATE;\n    }\n  }\n\n  /**\n   *  Whether to enable camera damping, the default is true.\n   */\n  get enableZoom(): boolean {\n    return (this._enableHandler & ControlHandlerType.ZOOM) !== 0;\n  }\n\n  set enableZoom(value: boolean) {\n    if (value) {\n      this._enableHandler |= ControlHandlerType.ZOOM;\n    } else {\n      this._enableHandler &= ~ControlHandlerType.ZOOM;\n    }\n  }\n\n  /**\n   *  Whether to enable translation, the default is true.\n   */\n  get enablePan(): boolean {\n    return (this._enableHandler & ControlHandlerType.PAN) !== 0;\n  }\n\n  set enablePan(value: boolean) {\n    if (value) {\n      this._enableHandler |= ControlHandlerType.PAN;\n    } else {\n      this._enableHandler &= ~ControlHandlerType.PAN;\n    }\n  }\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.enableRotate = false;\n  }\n\n  override onAwake(): void {\n    const { engine, entity } = this;\n    this.canvas = engine.canvas;\n    this.input = engine.inputManager;\n    this.camera = entity.getComponent(Camera);\n    this.cameraTransform = entity.transform;\n  }\n\n  override onLateUpdate(deltaTime: number): void {\n    /** Update this._sphericalDelta, this._scale and this._panOffset. */\n    this._updateInputDelta(deltaTime);\n    /** Update camera's transform. */\n    this._updateCamera();\n  }\n\n  private _updateInputDelta(deltaTime: number): void {\n    let curHandlerType = ControlHandlerType.None;\n    const { _tempVec3: delta, _enableHandler: enableHandler } = this;\n    const { inputDevices, input } = this;\n    for (let i = inputDevices.length - 1; i >= 0; i--) {\n      const handler = inputDevices[i];\n      const handlerType = handler.onUpdateHandler(input);\n      if (handlerType & enableHandler) {\n        curHandlerType |= handlerType;\n        handler.onUpdateDelta(this, delta);\n        switch (handlerType) {\n          case ControlHandlerType.ZOOM:\n            this._zoom(delta);\n            break;\n          case ControlHandlerType.PAN:\n            this._pan(delta);\n            break;\n          default:\n            break;\n        }\n      }\n    }\n  }\n\n  private _zoom(delta: Vector3): void {\n    if (delta.y > 0) {\n      this._scale /= Math.pow(0.95, this.zoomSpeed);\n    } else if (delta.y < 0) {\n      this._scale *= Math.pow(0.95, this.zoomSpeed);\n    }\n  }\n\n  private _pan(delta: Vector3): void {\n    this._panOffset.copyFrom(delta);\n  }\n\n  private _updateCamera(): void {\n    const { cameraTransform, camera, _panOffset } = this;\n\n    // Update Zoom\n    const sizeDiff = this._zoomScaleUnit * Math.log1p(camera.orthographicSize) * (this._scale - 1);\n    const size = camera.orthographicSize + sizeDiff;\n    camera.orthographicSize = Math.max(this.minZoom, Math.min(this.maxZoom, size));\n\n    // Update X and Y\n    const { width, height } = this.canvas;\n    const { x, y } = _panOffset;\n    const doubleOrthographicSize = camera.orthographicSize * 2;\n    const width3D = doubleOrthographicSize * camera.aspectRatio;\n    const height3D = doubleOrthographicSize;\n    const cameraPosition = cameraTransform.position;\n    const curPosition = this._tempVec3;\n    curPosition.x = cameraPosition.x - (x * width3D) / width;\n    curPosition.y = cameraPosition.y + (y * height3D) / height;\n    curPosition.z = cameraPosition.z;\n\n    // Update camera transform\n    cameraTransform.position = curPosition;\n    /** Reset cache value. */\n    this._scale = 1;\n    _panOffset.set(0, 0, 0);\n  }\n}\n"],"names":["BoxSelectionComponent","_isSelected","onSelect","onUnselect","isSelect","v","Component","PlaneMesh","createPlane","engine","mesh","ModelMesh","_initGeometryData","positions","Array","Vector3","indices","Uint8Array","setPositions","setIndices","uploadData","addSubMesh","BoxSelectionSSMaterial","Shader","find","isTransparent","boxColor","Vector4","borderColor","borderWidth","devicePixelRatio","minPoint","shaderData","getVector2","_minPoint","value","setVector2","maxPoint","_maxPoint","getVector4","_boxColor","setVector4","_borderColor","getFloat","_borderWidth","setFloat","BaseMaterial","ShaderProperty","getByName","create","BoxSelectionSSHelper","sceneRoot","element","Entity","startPoint","Vector2","pointBottomLeft","pointTopRight","input","inputManager","init","renderer","addComponent","MeshRenderer","receiveShadows","castShadows","material","setMaterial","transform","rotation","x","Math","PI","onSelectStart","vec2","y","canvas","height","addChild","onSelecting","max","min","onSelectEnd","removeChild","_frustum","BoundingFrustum","_center","_tmpPoint","_vecNear","_vecTopLeft","_vecTopRight","_vecDownRight","_vecDownLeft","_vecFarTopLeft","_vecFarTopRight","_vecFarDownRight","_vecFarDownLeft","_vectemp1","_vectemp2","_vectemp3","pojectInvertMatrix","Matrix","unproject","vec","entity","transformCoordinate","worldMatrix","BoxSelectionControls","endPoint","collection","instances","deep","Number","MAX_VALUE","isDeep","onAwake","camera","getComponent","Camera","helper","scene","getRootEntity","onUpdate","p","pointers","isPointerDown","PointerButton","Primary","position","width","set","isPointerUp","isPointerHeldDown","select","length","copyFrom","projectionMatrix","invert","updateBoundingFrustum","searchChildInBoundingFrustum","EPSILON","isOrthographic","getTranslation","subtract","normalize","scale","add","Plane","fromPoints","top","right","bottom","left","near","far","normal","down","frustum","c","enabled","worldPosition","CollisionUtil","frustumContainsPoint","ContainmentType","Disjoint","push","len","children","Script","ControlHandlerType","ControlFreeKeyboard","onUpdateHandler","isKeyHeldDown","Keys","ArrowLeft","KeyA","ArrowUp","KeyW","ArrowDown","KeyS","ArrowRight","KeyD","PAN","None","onUpdateDelta","control","outDelta","movementSpeed","z","DeltaType","ControlFreePointer","_deltaType","_handlerType","_frameIndex","_lastUsefulFrameIndex","_updateType","ROTATE","deltaPosition","frameIndex","handlerType","deltaType","ESP","MathUtil","zeroTolerance","Spherical","radius","phi","theta","_matrix","_matrixInv","undefined","makeSafe","count","floor","clamp","setYAxis","up","xAxis","_xAxis","_yAxis","yAxis","_zAxis","zAxis","equals","cross","es","elements","eInv","setFromVec3","atTheBack","transformNormal","acos","atan2","setToVec3","sinPhiRadius","sin","cos","FreeControl","inputDevices","rotateSpeed","floorMock","floorY","_spherical","_tempVec","_atTheBack","_topVec","_bottomVec","_cameraTransform","tempVec","transformByQuat","rotationQuaternion","spherical","onLateUpdate","deltaTime","delta","i","handler","_rotate","_pan","setPosition","moveDelta","actualMoveSpeed","translate","deltaAlpha","deltaPhi","degreeToRadian","lookAt","ControlKeyboard","keyPanSpeed","ControlPointer","_distanceOfPointers","Secondary","Auxiliary","ZOOM","pointer1","pointer2","curDistance","distance","ControlWheel","wheelDelta","OrbitControl","autoRotate","autoRotateSpeed","enableDamping","zoomSpeed","dampingFactor","zoomFactor","minDistance","maxDistance","Infinity","minZoom","maxZoom","minPolarAngle","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","_enableKeys","_up","_target","_sphericalDelta","_sphericalDump","_zoomFrag","_scale","_panOffset","_tempVec3","_enableHandler","All","cameraTransform","_updateInputDelta","_updateTransform","curHandlerType","enableHandler","_zoom","rotateAngle","radianLeft","radianUp","pow","targetDistance","target","fieldOfView","distanceLeft","distanceUp","worldUp","enableKeys","splice","enableRotate","enableZoom","enablePan","OrthoControl","_zoomScaleUnit","_updateCamera","sizeDiff","log1p","orthographicSize","size","doubleOrthographicSize","width3D","aspectRatio","height3D","cameraPosition","curPosition"],"mappings":"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","x_google_ignoreList":[0,1,2,8,14]}