{"version":3,"file":"BoxSelectionSSMaterial.js","sources":["../../../src/box-selection/BoxSelectionSSMaterial.ts"],"sourcesContent":["import { BaseMaterial, Engine, Shader, ShaderProperty, Vector2, Vector4 } from \"@galacean/engine\";\n\nexport class BoxSelectionSSMaterial extends BaseMaterial {\n  private static _borderWidth = ShaderProperty.getByName(\"u_width\");\n  private static _minPoint = ShaderProperty.getByName(\"u_min\");\n  private static _maxPoint = ShaderProperty.getByName(\"u_max\");\n  private static _boxColor = ShaderProperty.getByName(\"u_boxColor\");\n  private static _borderColor = ShaderProperty.getByName(\"u_borderColor\");\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"box\"));\n    this.isTransparent = true;\n    this.boxColor = new Vector4(0.29, 0.63, 1, 0.3);\n    this.borderColor = new Vector4(0.22, 0.48, 1, 0.9);\n    this.borderWidth = devicePixelRatio;\n  }\n\n  get minPoint(): Vector2 {\n    return this.shaderData.getVector2(BoxSelectionSSMaterial._minPoint);\n  }\n\n  set minPoint(value: Vector2) {\n    this.shaderData.setVector2(BoxSelectionSSMaterial._minPoint, value);\n  }\n\n  get maxPoint(): Vector2 {\n    return this.shaderData.getVector2(BoxSelectionSSMaterial._maxPoint);\n  }\n\n  set maxPoint(value: Vector2) {\n    this.shaderData.setVector2(BoxSelectionSSMaterial._maxPoint, value);\n  }\n\n  get boxColor(): Vector4 {\n    return this.shaderData.getVector4(BoxSelectionSSMaterial._boxColor);\n  }\n\n  set boxColor(value: Vector4) {\n    this.shaderData.setVector4(BoxSelectionSSMaterial._boxColor, value);\n  }\n\n  get borderColor(): Vector4 {\n    return this.shaderData.getVector4(BoxSelectionSSMaterial._borderColor);\n  }\n\n  set borderColor(value: Vector4) {\n    this.shaderData.setVector4(BoxSelectionSSMaterial._borderColor, value);\n  }\n\n  get borderWidth(): number {\n    return this.shaderData.getFloat(BoxSelectionSSMaterial._borderWidth);\n  }\n\n  set borderWidth(value: number) {\n    this.shaderData.setFloat(BoxSelectionSSMaterial._borderWidth, value);\n  }\n}\n\nShader.create(\n  \"box\",\n  `\n#include <common>\n#include <common_vert>\n\nvoid main() {\n  gl_Position = vec4(POSITION, 1.0);\n}`,\n\n  `\nuniform vec2 u_min;\nuniform vec2 u_max;\nuniform vec4 u_boxColor;\nuniform vec4 u_borderColor;\nuniform float u_width;\n\nvoid main() {\n  float vColor = step(u_min.x + u_width, gl_FragCoord.x) * step(gl_FragCoord.x, u_max.x - u_width) * step(u_min.y + u_width, gl_FragCoord.y) * step(gl_FragCoord.y, u_max.y - u_width);\n  float vBorder = step(u_min.x, gl_FragCoord.x) * step(gl_FragCoord.x, u_max.x) * step(u_min.y, gl_FragCoord.y) * step(gl_FragCoord.y, u_max.y);\n  gl_FragColor = u_boxColor * vColor + (1. - vColor) * vBorder * u_borderColor;\n}\n`\n);\n"],"names":["BoxSelectionSSMaterial","engine","Shader","find","isTransparent","boxColor","Vector4","borderColor","borderWidth","devicePixelRatio","minPoint","shaderData","getVector2","_minPoint","value","setVector2","maxPoint","_maxPoint","getVector4","_boxColor","setVector4","_borderColor","getFloat","_borderWidth","setFloat","BaseMaterial","ShaderProperty","getByName","create"],"mappings":"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"}