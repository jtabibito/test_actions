{"version":3,"file":"ControlPointer.js","sources":["../../../src/inputDevice/ControlPointer.ts"],"sourcesContent":["import { InputManager, PointerButton, Vector2, Vector3 } from \"@galacean/engine\";\nimport { OrbitControl } from \"../OrbitControl\";\nimport { ControlHandlerType } from \"../enums/ControlHandlerType\";\nimport { IControlInput } from \"./IControlInput\";\n\nenum DeltaType {\n  Moving,\n  Distance,\n  None\n}\n\nexport class ControlPointer implements IControlInput {\n  private _deltaType: DeltaType = DeltaType.None;\n  private _handlerType: ControlHandlerType = ControlHandlerType.None;\n  private _frameIndex: number = 0;\n  private _lastUsefulFrameIndex: number = -1;\n  private _distanceOfPointers: number = 0;\n  onUpdateHandler(input: InputManager): ControlHandlerType {\n    ++this._frameIndex;\n    const { pointers } = input;\n    switch (pointers.length) {\n      case 1:\n        if (input.isPointerHeldDown(PointerButton.Secondary)) {\n          this._updateType(ControlHandlerType.PAN, DeltaType.Moving);\n        } else if (input.isPointerHeldDown(PointerButton.Auxiliary)) {\n          this._updateType(ControlHandlerType.ZOOM, DeltaType.Moving);\n        } else if (input.isPointerHeldDown(PointerButton.Primary)) {\n          this._updateType(ControlHandlerType.ROTATE, DeltaType.Moving);\n        } else {\n          // When `onPointerMove` happens on the same frame as `onPointerUp`\n          // Need to record the movement of this frame\n          const { deltaPosition } = input.pointers[0];\n          if (deltaPosition.x !== 0 && deltaPosition.y !== 0) {\n            if (input.isPointerUp(PointerButton.Secondary)) {\n              this._updateType(ControlHandlerType.PAN, DeltaType.Moving);\n            } else if (input.isPointerUp(PointerButton.Auxiliary)) {\n              this._updateType(ControlHandlerType.ZOOM, DeltaType.Moving);\n            } else if (input.isPointerUp(PointerButton.Primary)) {\n              this._updateType(ControlHandlerType.ROTATE, DeltaType.Moving);\n            } else {\n              this._updateType(ControlHandlerType.None, DeltaType.None);\n            }\n          } else {\n            this._updateType(ControlHandlerType.None, DeltaType.None);\n          }\n        }\n        break;\n      case 2:\n        this._updateType(ControlHandlerType.ZOOM, DeltaType.Distance);\n        break;\n      case 3:\n        this._updateType(ControlHandlerType.PAN, DeltaType.Moving);\n        break;\n      default:\n        this._updateType(ControlHandlerType.None, DeltaType.None);\n        break;\n    }\n    return this._handlerType;\n  }\n\n  onUpdateDelta(control: OrbitControl, outDelta: Vector3): void {\n    const { _frameIndex: frameIndex } = this;\n    switch (this._deltaType) {\n      case DeltaType.Moving:\n        outDelta.x = 0;\n        outDelta.y = 0;\n        if (this._lastUsefulFrameIndex === frameIndex - 1) {\n          const { pointers } = control.input;\n          const length = pointers.length;\n          for (let i = length - 1; i >= 0; i--) {\n            const { deltaPosition } = pointers[i];\n            outDelta.x += deltaPosition.x;\n            outDelta.y += deltaPosition.y;\n          }\n          outDelta.x /= length;\n          outDelta.y /= length;\n        }\n        break;\n      case DeltaType.Distance:\n        const { pointers } = control.input;\n        const pointer1 = pointers[0];\n        const pointer2 = pointers[1];\n        const curDistance = Vector2.distance(pointer1.position, pointer2.position);\n        if (this._lastUsefulFrameIndex === frameIndex - 1) {\n          outDelta.set(0, this._distanceOfPointers - curDistance, 0);\n        } else {\n          outDelta.set(0, 0, 0);\n        }\n        this._distanceOfPointers = curDistance;\n        break;\n      default:\n        break;\n    }\n    this._lastUsefulFrameIndex = frameIndex;\n  }\n\n  private _updateType(handlerType: ControlHandlerType, deltaType: DeltaType) {\n    if (this._handlerType !== handlerType || this._deltaType !== deltaType) {\n      this._handlerType = handlerType;\n      this._deltaType = deltaType;\n      this._lastUsefulFrameIndex = -1;\n    }\n  }\n}\n"],"names":["DeltaType","ControlPointer","_deltaType","_handlerType","ControlHandlerType","None","_frameIndex","_lastUsefulFrameIndex","_distanceOfPointers","onUpdateHandler","input","pointers","length","isPointerHeldDown","PointerButton","Secondary","_updateType","PAN","Auxiliary","ZOOM","Primary","ROTATE","deltaPosition","x","y","isPointerUp","onUpdateDelta","control","outDelta","frameIndex","i","pointer1","pointer2","curDistance","Vector2","distance","position","set","handlerType","deltaType"],"mappings":"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"}