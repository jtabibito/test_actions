import { _ as _create_class } from '../_create_class-8d4b456b.js';
import { _ as _inherits } from '../_inherits-5a51c3d0.js';
import { ShaderProperty, Shader, Vector4, BaseMaterial } from '@galacean/engine';

var BoxSelectionSSMaterial = /*#__PURE__*/ function(BaseMaterial) {
    _inherits(BoxSelectionSSMaterial, BaseMaterial);
    function BoxSelectionSSMaterial(engine) {
        var _this;
        _this = BaseMaterial.call(this, engine, Shader.find("box")) || this;
        _this.isTransparent = true;
        _this.boxColor = new Vector4(0.29, 0.63, 1, 0.3);
        _this.borderColor = new Vector4(0.22, 0.48, 1, 0.9);
        _this.borderWidth = devicePixelRatio;
        return _this;
    }
    _create_class(BoxSelectionSSMaterial, [
        {
            key: "minPoint",
            get: function get() {
                return this.shaderData.getVector2(BoxSelectionSSMaterial._minPoint);
            },
            set: function set(value) {
                this.shaderData.setVector2(BoxSelectionSSMaterial._minPoint, value);
            }
        },
        {
            key: "maxPoint",
            get: function get() {
                return this.shaderData.getVector2(BoxSelectionSSMaterial._maxPoint);
            },
            set: function set(value) {
                this.shaderData.setVector2(BoxSelectionSSMaterial._maxPoint, value);
            }
        },
        {
            key: "boxColor",
            get: function get() {
                return this.shaderData.getVector4(BoxSelectionSSMaterial._boxColor);
            },
            set: function set(value) {
                this.shaderData.setVector4(BoxSelectionSSMaterial._boxColor, value);
            }
        },
        {
            key: "borderColor",
            get: function get() {
                return this.shaderData.getVector4(BoxSelectionSSMaterial._borderColor);
            },
            set: function set(value) {
                this.shaderData.setVector4(BoxSelectionSSMaterial._borderColor, value);
            }
        },
        {
            key: "borderWidth",
            get: function get() {
                return this.shaderData.getFloat(BoxSelectionSSMaterial._borderWidth);
            },
            set: function set(value) {
                this.shaderData.setFloat(BoxSelectionSSMaterial._borderWidth, value);
            }
        }
    ]);
    return BoxSelectionSSMaterial;
}(BaseMaterial);
BoxSelectionSSMaterial._borderWidth = ShaderProperty.getByName("u_width");
BoxSelectionSSMaterial._minPoint = ShaderProperty.getByName("u_min");
BoxSelectionSSMaterial._maxPoint = ShaderProperty.getByName("u_max");
BoxSelectionSSMaterial._boxColor = ShaderProperty.getByName("u_boxColor");
BoxSelectionSSMaterial._borderColor = ShaderProperty.getByName("u_borderColor");
Shader.create("box", "\n#include <common>\n#include <common_vert>\n\nvoid main() {\n  gl_Position = vec4(POSITION, 1.0);\n}", "\nuniform vec2 u_min;\nuniform vec2 u_max;\nuniform vec4 u_boxColor;\nuniform vec4 u_borderColor;\nuniform float u_width;\n\nvoid main() {\n  float vColor = step(u_min.x + u_width, gl_FragCoord.x) * step(gl_FragCoord.x, u_max.x - u_width) * step(u_min.y + u_width, gl_FragCoord.y) * step(gl_FragCoord.y, u_max.y - u_width);\n  float vBorder = step(u_min.x, gl_FragCoord.x) * step(gl_FragCoord.x, u_max.x) * step(u_min.y, gl_FragCoord.y) * step(gl_FragCoord.y, u_max.y);\n  gl_FragColor = u_boxColor * vColor + (1. - vColor) * vBorder * u_borderColor;\n}\n");

export { BoxSelectionSSMaterial };
//# sourceMappingURL=BoxSelectionSSMaterial.js.map
