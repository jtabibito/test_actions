import { ISphereColliderShape } from "@galacean/engine-design";
import { LiteColliderShape } from "./LiteColliderShape";
import { Vector3 } from "@galacean/engine";
import { LitePhysicsMaterial } from "../LitePhysicsMaterial";
/**
 * Sphere collider shape in Lite.
 */
export declare class LiteSphereColliderShape extends LiteColliderShape implements ISphereColliderShape {
    private static _tempSphere;
    private _radius;
    private _maxScale;
    get worldRadius(): number;
    /**
     * Init sphere shape.
     * @param uniqueID - UniqueID mark collider
     * @param radius - Size of SphereCollider
     * @param material - Material of PhysXCollider
     */
    constructor(uniqueID: number, radius: number, material: LitePhysicsMaterial);
    /**
     * {@inheritDoc ISphereColliderShape.setRadius }
     */
    setRadius(value: number): void;
    /**
     * {@inheritDoc IColliderShape.setWorldScale }
     */
    setWorldScale(scale: Vector3): void;
}
