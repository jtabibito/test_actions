import { Ray, Vector3 } from "@galacean/engine";
import { IColliderShape, IPhysicsMaterial } from "@galacean/engine-design";
import { LiteHitResult } from "../LiteHitResult";
/**
 * Abstract class for collider shapes.
 */
export declare abstract class LiteColliderShape implements IColliderShape {
    private static _ray;
    private static _tempPoint;
    protected constructor();
    /**
     * {@inheritDoc IColliderShape.setRotation }
     */
    setRotation(rotation: Vector3): void;
    /**
     * {@inheritDoc IColliderShape.setPosition }
     */
    setPosition(position: Vector3): void;
    /**
     * {@inheritDoc IColliderShape.setWorldScale }
     */
    setWorldScale(scale: Vector3): void;
    /**
     * {@inheritDoc IColliderShape.setContactOffset }
     */
    setContactOffset(offset: number): void;
    /**
     * {@inheritDoc IColliderShape.setMaterial }
     */
    setMaterial(material: IPhysicsMaterial): void;
    /**
     * {@inheritDoc IColliderShape.setUniqueID }
     */
    setUniqueID(id: number): void;
    /**
     * {@inheritDoc IColliderShape.setIsTrigger }
     */
    setIsTrigger(value: boolean): void;
    /**
     * {@inheritDoc IColliderShape.destroy }
     */
    destroy(): void;
    protected _updateHitResult(ray: Ray, rayDistance: number, outHit: LiteHitResult, origin: Vector3, isWorldRay?: boolean): void;
    protected _getLocalRay(ray: Ray): Ray;
    private _getInvModelMatrix;
    private _setLocalPose;
}
