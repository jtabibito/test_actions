import { Ray, Vector3 } from "@galacean/engine";
import { ICharacterController, IPhysicsScene } from "@galacean/engine-design";
import { LiteCollider } from "./LiteCollider";
import { LiteColliderShape } from "./shape/LiteColliderShape";
/**
 * A manager is a collection of colliders and constraints which can interact.
 */
export declare class LitePhysicsScene implements IPhysicsScene {
    private static _tempSphere;
    private static _tempBox;
    private static _currentHit;
    private static _hitResult;
    private readonly _onContactEnter?;
    private readonly _onContactExit?;
    private readonly _onContactStay?;
    private readonly _onTriggerEnter?;
    private readonly _onTriggerExit?;
    private readonly _onTriggerStay?;
    private _staticColliders;
    private _dynamicColliders;
    private _sphere;
    private _box;
    private _currentEvents;
    private _eventMap;
    private _eventPool;
    constructor(onContactEnter?: (obj1: number, obj2: number) => void, onContactExit?: (obj1: number, obj2: number) => void, onContactStay?: (obj1: number, obj2: number) => void, onTriggerEnter?: (obj1: number, obj2: number) => void, onTriggerExit?: (obj1: number, obj2: number) => void, onTriggerStay?: (obj1: number, obj2: number) => void);
    /**
     * {@inheritDoc IPhysicsManager.setGravity }
     */
    setGravity(value: Vector3): void;
    /**
     * {@inheritDoc IPhysicsManager.addColliderShape }
     */
    addColliderShape(colliderShape: LiteColliderShape): void;
    /**
     * {@inheritDoc IPhysicsManager.removeColliderShape }
     */
    removeColliderShape(colliderShape: LiteColliderShape): void;
    /**
     * {@inheritDoc IPhysicsManager.addCollider }
     */
    addCollider(actor: LiteCollider): void;
    /**
     * {@inheritDoc IPhysicsManager.removeCollider }
     */
    removeCollider(collider: LiteCollider): void;
    /**
     * {@inheritDoc IPhysicsManager.update }
     */
    update(deltaTime: number): void;
    /**
     * {@inheritDoc IPhysicsManager.raycast }
     */
    raycast(ray: Ray, distance: number, onRaycast: (obj: number) => boolean, hit?: (shapeUniqueID: number, distance: number, position: Vector3, normal: Vector3) => void): boolean;
    /**
     * {@inheritDoc IPhysicsManager.addCharacterController }
     */
    addCharacterController(characterController: ICharacterController): void;
    /**
     * {@inheritDoc IPhysicsManager.removeCharacterController }
     */
    removeCharacterController(characterController: ICharacterController): void;
    /**
     * Calculate the bounding box in world space from boxCollider.
     * @param boxCollider - The boxCollider to calculate
     * @param out - The calculated boundingBox
     */
    private static _updateWorldBox;
    /**
     * Get the sphere info of the given sphere collider in world space.
     * @param sphereCollider - The given sphere collider
     * @param out - The calculated boundingSphere
     */
    private static _upWorldSphere;
    private _getTrigger;
    private _collisionDetection;
    private _fireEvent;
    private _boxCollision;
    private _sphereCollision;
    private _raycast;
}
