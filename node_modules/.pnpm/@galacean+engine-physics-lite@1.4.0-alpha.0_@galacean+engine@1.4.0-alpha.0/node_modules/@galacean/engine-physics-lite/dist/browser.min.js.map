{"version":3,"file":"browser.min.js","sources":["../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_set_prototype_of.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_inherits.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_create_class.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_instanceof.js","../src/LiteUpdateFlag.ts","../src/LiteUpdateFlagManager.ts","../src/shape/LiteColliderShape.ts","../src/LiteTransform.ts","../src/LiteCollider.ts","../src/LiteDynamicCollider.ts","../src/LitePhysicsMaterial.ts","../src/LiteHitResult.ts","../src/shape/LiteBoxColliderShape.ts","../src/shape/LiteSphereColliderShape.ts","../src/LitePhysicsScene.ts","../src/LiteStaticCollider.ts","../src/LitePhysics.ts","../src/index.ts"],"sourcesContent":["function _set_prototype_of(o, p) {\n    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {\n        o.__proto__ = p;\n\n        return o;\n    };\n\n    return _set_prototype_of(o, p);\n}\nexport { _set_prototype_of as _ };\n","import { _ as _set_prototype_of } from \"./_set_prototype_of.js\";\n\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });\n\n    if (superClass) _set_prototype_of(subClass, superClass);\n}\nexport { _inherits as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","function _instanceof(left, right) {\n    if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n        return !!right[Symbol.hasInstance](left);\n    } else return left instanceof right;\n}\nexport { _instanceof as _ };\n","import { Utils } from \"@galacean/engine\";\n\n/**\n * Used to update tags.\n */\nexport class LiteUpdateFlag {\n  /** Flag. */\n  flag = true;\n\n  constructor(private _flags: LiteUpdateFlag[] = []) {\n    this._flags.push(this);\n  }\n\n  /**\n   * Destroy.\n   */\n  destroy(): void {\n    Utils.removeFromArray(this._flags, this);\n    this._flags = null;\n  }\n}\n","import { LiteUpdateFlag } from \"./LiteUpdateFlag\";\n\n/**\n * @internal\n */\nexport class LiteUpdateFlagManager {\n  private _updateFlags: LiteUpdateFlag[] = [];\n\n  register(): LiteUpdateFlag {\n    return new LiteUpdateFlag(this._updateFlags);\n  }\n\n  distribute(): void {\n    const updateFlags = this._updateFlags;\n    for (let i = updateFlags.length - 1; i >= 0; i--) {\n      updateFlags[i].flag = true;\n    }\n  }\n}\n","import { Matrix, Ray, Vector3 } from \"@galacean/engine\";\nimport { IColliderShape, IPhysicsMaterial } from \"@galacean/engine-design\";\nimport { LiteCollider } from \"../LiteCollider\";\nimport { LiteHitResult } from \"../LiteHitResult\";\nimport { LiteTransform } from \"../LiteTransform\";\nimport { LiteUpdateFlag } from \"../LiteUpdateFlag\";\n\n/**\n * Abstract class for collider shapes.\n */\nexport abstract class LiteColliderShape implements IColliderShape {\n  private static _ray = new Ray();\n  private static _tempPoint = new Vector3();\n\n  /** @internal */\n  _id: number;\n  /** @internal */\n  _collider: LiteCollider;\n  /** @internal */\n  _position: Vector3 = new Vector3();\n  /** @internal */\n  _worldScale: Vector3 = new Vector3(1, 1, 1);\n  /** @internal */\n  _transform: LiteTransform = new LiteTransform();\n  /** @internal */\n  _invModelMatrix: Matrix = new Matrix();\n  /** @internal */\n  _inverseWorldMatFlag: LiteUpdateFlag;\n\n  protected constructor() {\n    this._transform.owner = this;\n    this._inverseWorldMatFlag = this._transform.registerWorldChangeFlag();\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.setRotation }\n   */\n  setRotation(rotation: Vector3): void {\n    console.log(\"Physics-lite don't support setRotation. Use Physics-PhysX instead!\");\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.setPosition }\n   */\n  setPosition(position: Vector3): void {\n    if (position !== this._position) {\n      this._position.copyFrom(position);\n    }\n    this._setLocalPose();\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.setWorldScale }\n   */\n  setWorldScale(scale: Vector3): void {\n    this._worldScale.copyFrom(scale);\n    this._setLocalPose();\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.setContactOffset }\n   */\n  setContactOffset(offset: number): void {\n    console.log(\"Physics-lite don't support setContactOffset. Use Physics-PhysX instead!\");\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.setMaterial }\n   */\n  setMaterial(material: IPhysicsMaterial): void {\n    console.log(\"Physics-lite don't support setMaterial. Use Physics-PhysX instead!\");\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.setUniqueID }\n   */\n  setUniqueID(id: number): void {\n    this._id = id;\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.setIsTrigger }\n   */\n  setIsTrigger(value: boolean): void {\n    console.log(\"Physics-lite don't support setIsTrigger. Use Physics-PhysX instead!\");\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.destroy }\n   */\n  destroy(): void {}\n\n  /**\n   * @internal\n   */\n  abstract _raycast(ray: Ray, hit: LiteHitResult): boolean;\n\n  protected _updateHitResult(\n    ray: Ray,\n    rayDistance: number,\n    outHit: LiteHitResult,\n    origin: Vector3,\n    isWorldRay: boolean = false\n  ): void {\n    const hitPoint = LiteColliderShape._tempPoint;\n    ray.getPoint(rayDistance, hitPoint);\n    if (!isWorldRay) {\n      Vector3.transformCoordinate(hitPoint, this._transform.worldMatrix, hitPoint);\n    }\n\n    const distance = Vector3.distance(origin, hitPoint);\n\n    if (distance < outHit.distance) {\n      outHit.point.copyFrom(hitPoint);\n      outHit.distance = distance;\n      outHit.shapeID = this._id;\n    }\n  }\n\n  protected _getLocalRay(ray: Ray): Ray {\n    const worldToLocal = this._getInvModelMatrix();\n    const outRay = LiteColliderShape._ray;\n\n    Vector3.transformCoordinate(ray.origin, worldToLocal, outRay.origin);\n    Vector3.transformNormal(ray.direction, worldToLocal, outRay.direction);\n    outRay.direction.normalize();\n\n    return outRay;\n  }\n\n  private _getInvModelMatrix(): Matrix {\n    if (this._inverseWorldMatFlag.flag) {\n      Matrix.invert(this._transform.worldMatrix, this._invModelMatrix);\n      this._inverseWorldMatFlag.flag = false;\n    }\n    return this._invModelMatrix;\n  }\n\n  private _setLocalPose() {\n    const shapePosition = LiteColliderShape._tempPoint;\n    Vector3.multiply(this._position, this._worldScale, shapePosition);\n    this._transform.position = shapePosition;\n  }\n}\n","import { MathUtil, Matrix, Quaternion, Vector3 } from \"@galacean/engine\";\nimport { LiteCollider } from \"./LiteCollider\";\nimport { LiteUpdateFlag } from \"./LiteUpdateFlag\";\nimport { LiteUpdateFlagManager } from \"./LiteUpdateFlagManager\";\nimport { LiteColliderShape } from \"./shape/LiteColliderShape\";\n\n/**\n * Used to implement transformation related functions.\n */\nexport class LiteTransform {\n  private static _tempQuat0: Quaternion = new Quaternion();\n  private static _tempMat42: Matrix = new Matrix();\n\n  private _position: Vector3 = new Vector3();\n  private _rotation: Vector3 = new Vector3();\n  private _rotationQuaternion: Quaternion = new Quaternion();\n  private _scale: Vector3 = new Vector3(1, 1, 1);\n  private _worldRotationQuaternion: Quaternion = new Quaternion();\n  private _localMatrix: Matrix = new Matrix();\n  private _worldMatrix: Matrix = new Matrix();\n  private _updateFlagManager: LiteUpdateFlagManager = new LiteUpdateFlagManager();\n  private _isParentDirty: boolean = true;\n  private _parentTransformCache: LiteTransform = null;\n  private _dirtyFlag: number = TransformFlag.WmWpWeWqWs;\n\n  private _owner: LiteColliderShape | LiteCollider;\n\n  set owner(value: LiteColliderShape | LiteCollider) {\n    this._owner = value;\n  }\n\n  /**\n   * Local position.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get position(): Vector3 {\n    return this._position;\n  }\n\n  set position(value: Vector3) {\n    if (this._position !== value) {\n      this._position.copyFrom(value);\n    }\n    this._setDirtyFlagTrue(TransformFlag.LocalMatrix);\n    this._updateWorldPositionFlag();\n  }\n\n  /**\n   * Local rotation, defining the rotation by using a unit quaternion.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get rotationQuaternion(): Quaternion {\n    if (this._isContainDirtyFlag(TransformFlag.LocalQuat)) {\n      Quaternion.rotationEuler(\n        MathUtil.degreeToRadian(this._rotation.x),\n        MathUtil.degreeToRadian(this._rotation.y),\n        MathUtil.degreeToRadian(this._rotation.z),\n        this._rotationQuaternion\n      );\n      this._setDirtyFlagFalse(TransformFlag.LocalQuat);\n    }\n    return this._rotationQuaternion;\n  }\n\n  set rotationQuaternion(value: Quaternion) {\n    if (this._rotationQuaternion !== value) {\n      this._rotationQuaternion.copyFrom(value);\n    }\n    this._setDirtyFlagTrue(TransformFlag.LocalMatrix | TransformFlag.LocalEuler);\n    this._setDirtyFlagFalse(TransformFlag.LocalQuat);\n    this._updateWorldRotationFlag();\n  }\n\n  /**\n   * World rotation, defining the rotation by using a unit quaternion.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get worldRotationQuaternion(): Quaternion {\n    if (this._isContainDirtyFlag(TransformFlag.WorldQuat)) {\n      const parent = this._getParentTransform();\n      if (parent != null) {\n        Quaternion.multiply(parent.worldRotationQuaternion, this.rotationQuaternion, this._worldRotationQuaternion);\n      } else {\n        this._worldRotationQuaternion.copyFrom(this.rotationQuaternion);\n      }\n      this._setDirtyFlagFalse(TransformFlag.WorldQuat);\n    }\n    return this._worldRotationQuaternion;\n  }\n\n  set worldRotationQuaternion(value: Quaternion) {\n    if (this._worldRotationQuaternion !== value) {\n      this._worldRotationQuaternion.copyFrom(value);\n    }\n    const parent = this._getParentTransform();\n    if (parent) {\n      Quaternion.invert(parent.worldRotationQuaternion, LiteTransform._tempQuat0);\n      Quaternion.multiply(value, LiteTransform._tempQuat0, this._rotationQuaternion);\n    } else {\n      this._rotationQuaternion.copyFrom(value);\n    }\n    this.rotationQuaternion = this._rotationQuaternion;\n    this._setDirtyFlagFalse(TransformFlag.WorldQuat);\n  }\n\n  /**\n   * Local scaling.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get scale(): Vector3 {\n    return this._scale;\n  }\n\n  set scale(value: Vector3) {\n    if (this._scale !== value) {\n      this._scale.copyFrom(value);\n    }\n    this._setDirtyFlagTrue(TransformFlag.LocalMatrix);\n    this._updateWorldScaleFlag();\n  }\n\n  /**\n   * Local matrix.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get localMatrix(): Matrix {\n    if (this._isContainDirtyFlag(TransformFlag.LocalMatrix)) {\n      Matrix.affineTransformation(this._scale, this.rotationQuaternion, this._position, this._localMatrix);\n      this._setDirtyFlagFalse(TransformFlag.LocalMatrix);\n    }\n    return this._localMatrix;\n  }\n\n  set localMatrix(value: Matrix) {\n    if (this._localMatrix !== value) {\n      this._localMatrix.copyFrom(value);\n    }\n    this._localMatrix.decompose(this._position, this._rotationQuaternion, this._scale);\n    this._setDirtyFlagTrue(TransformFlag.LocalEuler);\n    this._setDirtyFlagFalse(TransformFlag.LocalMatrix);\n    this._updateAllWorldFlag();\n  }\n\n  /**\n   * World matrix.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get worldMatrix(): Matrix {\n    if (this._isContainDirtyFlag(TransformFlag.WorldMatrix)) {\n      const parent = this._getParentTransform();\n      if (parent) {\n        Matrix.multiply(parent.worldMatrix, this.localMatrix, this._worldMatrix);\n      } else {\n        this._worldMatrix.copyFrom(this.localMatrix);\n      }\n      this._setDirtyFlagFalse(TransformFlag.WorldMatrix);\n    }\n    return this._worldMatrix;\n  }\n\n  set worldMatrix(value: Matrix) {\n    if (this._worldMatrix !== value) {\n      this._worldMatrix.copyFrom(value);\n    }\n    const parent = this._getParentTransform();\n    if (parent) {\n      Matrix.invert(parent.worldMatrix, LiteTransform._tempMat42);\n      Matrix.multiply(LiteTransform._tempMat42, value, this._localMatrix);\n    } else {\n      this._localMatrix.copyFrom(value);\n    }\n    this.localMatrix = this._localMatrix;\n    this._setDirtyFlagFalse(TransformFlag.WorldMatrix);\n  }\n\n  /**\n   * Set local position by X, Y, Z value.\n   * @param x - X coordinate\n   * @param y - Y coordinate\n   * @param z - Z coordinate\n   */\n  setPosition(x: number, y: number, z: number): void {\n    this._position.set(x, y, z);\n    this.position = this._position;\n  }\n\n  /**\n   * Set local rotation by the X, Y, Z, and W components of the quaternion.\n   * @param x - X component of quaternion\n   * @param y - Y component of quaternion\n   * @param z - Z component of quaternion\n   * @param w - W component of quaternion\n   */\n  setRotationQuaternion(x: number, y: number, z: number, w: number): void {\n    this._rotationQuaternion.set(x, y, z, w);\n    this.rotationQuaternion = this._rotationQuaternion;\n  }\n\n  /**\n   * Set local scaling by scaling values along X, Y, Z axis.\n   * @param x - Scaling along X axis\n   * @param y - Scaling along Y axis\n   * @param z - Scaling along Z axis\n   */\n  setScale(x: number, y: number, z: number): void {\n    this._scale.set(x, y, z);\n    this.scale = this._scale;\n  }\n\n  /**\n   * Register world transform change flag.\n   * @returns Change flag\n   */\n  registerWorldChangeFlag(): LiteUpdateFlag {\n    return this._updateFlagManager.register();\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix or worldRotationQuaternion) to be false.\n   */\n  private _updateWorldPositionFlag(): void {\n    if (!this._isContainDirtyFlags(TransformFlag.WmWp)) {\n      this._worldAssociatedChange(TransformFlag.WmWp);\n      if (this._owner instanceof LiteCollider) {\n        const shapes = this._owner._shapes;\n        for (let i: number = 0, n: number = shapes.length; i < n; i++) {\n          shapes[i]._transform._updateWorldPositionFlag();\n        }\n      }\n    }\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * Get worldRotationQuaternion: Will trigger the world rotation (in quaternion) update of itself and all parent entities.\n   * Get worldRotation: Will trigger the world rotation(in euler and quaternion) update of itself and world rotation(in quaternion) update of all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix or worldRotationQuaternion) to be false.\n   */\n  private _updateWorldRotationFlag() {\n    if (!this._isContainDirtyFlags(TransformFlag.WmWeWq)) {\n      this._worldAssociatedChange(TransformFlag.WmWeWq);\n      if (this._owner instanceof LiteCollider) {\n        const shapes = this._owner._shapes;\n        for (let i: number = 0, n: number = shapes.length; i < n; i++) {\n          shapes[i]._transform._updateWorldRotationFlag();\n        }\n      }\n    }\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * Get worldScale: Will trigger the scaling update of itself and all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix) to be false.\n   */\n  private _updateWorldScaleFlag() {\n    if (!this._isContainDirtyFlags(TransformFlag.WmWs)) {\n      this._worldAssociatedChange(TransformFlag.WmWs);\n      if (this._owner instanceof LiteCollider) {\n        const shapes = this._owner._shapes;\n        for (let i: number = 0, n: number = shapes.length; i < n; i++) {\n          shapes[i]._transform._updateWorldScaleFlag();\n        }\n      }\n    }\n  }\n\n  /**\n   * Update all world transform property dirty flag, the principle is the same as above.\n   */\n  private _updateAllWorldFlag(): void {\n    if (!this._isContainDirtyFlags(TransformFlag.WmWpWeWqWs)) {\n      this._worldAssociatedChange(TransformFlag.WmWpWeWqWs);\n      if (this._owner instanceof LiteCollider) {\n        const shapes = this._owner._shapes;\n        for (let i: number = 0, n: number = shapes.length; i < n; i++) {\n          shapes[i]._transform._updateAllWorldFlag();\n        }\n      }\n    }\n  }\n\n  private _getParentTransform(): LiteTransform | null {\n    if (!this._isParentDirty) {\n      return this._parentTransformCache;\n    }\n    let parentCache: LiteTransform = null;\n    if (this._owner instanceof LiteColliderShape) {\n      let parent = this._owner._collider;\n      parentCache = parent._transform;\n    }\n\n    this._parentTransformCache = parentCache;\n    this._isParentDirty = false;\n    return parentCache;\n  }\n\n  private _isContainDirtyFlags(targetDirtyFlags: number): boolean {\n    return (this._dirtyFlag & targetDirtyFlags) === targetDirtyFlags;\n  }\n\n  private _isContainDirtyFlag(type: number): boolean {\n    return (this._dirtyFlag & type) != 0;\n  }\n\n  private _setDirtyFlagTrue(type: number) {\n    this._dirtyFlag |= type;\n  }\n\n  private _setDirtyFlagFalse(type: number) {\n    this._dirtyFlag &= ~type;\n  }\n\n  private _worldAssociatedChange(type: number): void {\n    this._dirtyFlag |= type;\n    this._updateFlagManager.distribute();\n  }\n}\n\n/**\n * Dirty flag of transform.\n */\nenum TransformFlag {\n  LocalEuler = 0x1,\n  LocalQuat = 0x2,\n  WorldPosition = 0x4,\n  WorldEuler = 0x8,\n  WorldQuat = 0x10,\n  WorldScale = 0x20,\n  LocalMatrix = 0x40,\n  WorldMatrix = 0x80,\n\n  /** WorldMatrix | WorldPosition */\n  WmWp = 0x84,\n  /** WorldMatrix | WorldEuler | WorldQuat */\n  WmWeWq = 0x98,\n  /** WorldMatrix | WorldPosition | WorldEuler | WorldQuat */\n  WmWpWeWq = 0x9c,\n  /** WorldMatrix | WorldScale */\n  WmWs = 0xa0,\n  /** WorldMatrix | WorldPosition | WorldScale */\n  WmWpWs = 0xa4,\n  /** WorldMatrix | WorldPosition | WorldEuler | WorldQuat | WorldScale */\n  WmWpWeWqWs = 0xbc\n}\n","import { ICollider } from \"@galacean/engine-design\";\nimport { Quaternion, Ray, Vector3 } from \"@galacean/engine\";\nimport { LiteHitResult } from \"./LiteHitResult\";\nimport { LiteColliderShape } from \"./shape/LiteColliderShape\";\nimport { LiteTransform } from \"./LiteTransform\";\n\n/**\n * Abstract class of physical collider.\n */\nexport abstract class LiteCollider implements ICollider {\n  /** @internal */\n  abstract readonly _isStaticCollider: boolean;\n\n  /** @internal */\n  _shapes: LiteColliderShape[] = [];\n  /** @internal */\n  _transform: LiteTransform = new LiteTransform();\n\n  protected constructor() {\n    this._transform.owner = this;\n  }\n\n  /**\n   * {@inheritDoc ICollider.addShape }\n   */\n  addShape(shape: LiteColliderShape): void {\n    const oldCollider = shape._collider;\n    if (oldCollider !== this) {\n      if (oldCollider) {\n        oldCollider.removeShape(shape);\n      }\n      this._shapes.push(shape);\n      shape._collider = this;\n    }\n  }\n\n  /**\n   * {@inheritDoc ICollider.removeShape }\n   */\n  removeShape(shape: LiteColliderShape): void {\n    const index = this._shapes.indexOf(shape);\n    if (index !== -1) {\n      this._shapes.splice(index, 1);\n      shape._collider = null;\n    }\n  }\n\n  /**\n   * {@inheritDoc ICollider.setWorldTransform }\n   */\n  setWorldTransform(position: Vector3, rotation: Quaternion): void {\n    this._transform.setPosition(position.x, position.y, position.z);\n    this._transform.setRotationQuaternion(rotation.x, rotation.y, rotation.z, rotation.w);\n  }\n\n  /**\n   * {@inheritDoc ICollider.getWorldTransform }\n   */\n  getWorldTransform(outPosition: Vector3, outRotation: Quaternion): void {\n    const { position, rotationQuaternion } = this._transform;\n    outPosition.set(position.x, position.y, position.z);\n    outRotation.set(rotationQuaternion.x, rotationQuaternion.y, rotationQuaternion.z, rotationQuaternion.w);\n  }\n\n  /**\n   * {@inheritDoc ICollider.destroy }\n   */\n  destroy(): void {}\n\n  /**\n   * @internal\n   */\n  _raycast(ray: Ray, onRaycast: (obj: number) => boolean, hit: LiteHitResult): boolean {\n    hit.distance = Number.MAX_VALUE;\n    const shapes = this._shapes;\n    for (let i = 0, n = shapes.length; i < n; i++) {\n      const shape = shapes[i];\n      onRaycast(shape._id) && shape._raycast(ray, hit);\n    }\n\n    return hit.distance != Number.MAX_VALUE;\n  }\n}\n","import { LiteCollider } from \"./LiteCollider\";\nimport { IDynamicCollider } from \"@galacean/engine-design\";\nimport { Quaternion, Vector3 } from \"@galacean/engine\";\n\n/**\n * A dynamic collider can act with self-defined movement or physical force\n */\nexport class LiteDynamicCollider extends LiteCollider implements IDynamicCollider {\n  /** @internal */\n  readonly _isStaticCollider: boolean = false;\n  /**\n   * Initialize dynamic actor.\n   * @param position - The global position\n   * @param rotation - The global rotation\n   */\n  constructor(position: Vector3, rotation: Quaternion) {\n    super();\n    this._transform.setPosition(position.x, position.y, position.z);\n    this._transform.setRotationQuaternion(rotation.x, rotation.y, rotation.z, rotation.w);\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.addForce }\n   */\n  addForce(force: Vector3): void {\n    throw \"Physics-lite don't support addForce. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.addTorque }\n   */\n  addTorque(torque: Vector3): void {\n    throw \"Physics-lite don't support addTorque. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.move }\n   */\n  move(positionOrRotation: Vector3 | Quaternion, rotation?: Quaternion): void {\n    throw \"Physics-lite don't support move. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.sleep }\n   */\n  sleep(): void {\n    throw \"Physics-lite don't support putToSleep. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setAngularDamping }\n   */\n  setAngularDamping(value: number): void {\n    throw \"Physics-lite don't support setAngularDamping. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setAngularVelocity }\n   */\n  setAngularVelocity(value: Vector3): void {\n    throw \"Physics-lite don't support setAngularVelocity. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setCenterOfMass }\n   */\n  setCenterOfMass(value: Vector3): void {\n    throw \"Physics-lite don't support setCenterOfMass. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setCollisionDetectionMode }\n   */\n  setCollisionDetectionMode(value: number): void {\n    throw \"Physics-lite don't support setCollisionDetectionMode. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setConstraints }\n   */\n  setConstraints(flags: number): void {\n    throw \"Physics-lite don't support setConstraints. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setInertiaTensor }\n   */\n  setInertiaTensor(value: Vector3): void {\n    throw \"Physics-lite don't support setInertiaTensor. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setIsKinematic }\n   */\n  setIsKinematic(value: boolean): void {\n    throw \"Physics-lite don't support setIsKinematic. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setLinearDamping }\n   */\n  setLinearDamping(value: number): void {\n    throw \"Physics-lite don't support setLinearDamping. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setLinearVelocity }\n   */\n  setLinearVelocity(value: Vector3): void {\n    throw \"Physics-lite don't support setLinearVelocity. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setMass }\n   */\n  setMass(value: number): void {\n    throw \"Physics-lite don't support setMass. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setMaxAngularVelocity }\n   */\n  setMaxAngularVelocity(value: number): void {\n    throw \"Physics-lite don't support setMaxAngularVelocity. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setMaxDepenetrationVelocity }\n   */\n  setMaxDepenetrationVelocity(value: number): void {\n    throw \"Physics-lite don't support setMaxDepenetrationVelocity. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setSleepThreshold }\n   */\n  setSleepThreshold(value: number): void {\n    throw \"Physics-lite don't support setSleepThreshold. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setSolverIterations }\n   */\n  setSolverIterations(value: number): void {\n    throw \"Physics-lite don't support setSolverIterations. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.wakeUp }\n   */\n  wakeUp(): void {\n    throw \"Physics-lite don't support wakeUp. Use Physics-PhysX instead!\";\n  }\n}\n","import { IPhysicsMaterial } from \"@galacean/engine-design\";\n\n/**\n * Physics material describes how to handle colliding objects (friction, bounciness).\n */\nexport class LitePhysicsMaterial implements IPhysicsMaterial {\n  constructor(\n    staticFriction: number,\n    dynamicFriction: number,\n    bounciness: number,\n    frictionCombine: number,\n    bounceCombine: number\n  ) {}\n\n  /**\n   * {@inheritDoc IPhysicsMaterial.setBounciness }\n   */\n  setBounciness(value: number): void {\n    throw \"Physics-lite don't support physics material. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IPhysicsMaterial.setDynamicFriction }\n   */\n  setDynamicFriction(value: number): void {\n    throw \"Physics-lite don't support physics material. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IPhysicsMaterial.setStaticFriction }\n   */\n  setStaticFriction(value: number): void {\n    throw \"Physics-lite don't support physics material. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IPhysicsMaterial.setBounceCombine }\n   */\n  setBounceCombine(value: number): void {\n    throw \"Physics-lite don't support physics material. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IPhysicsMaterial.setFrictionCombine }\n   */\n  setFrictionCombine(value: number): void {\n    throw \"Physics-lite don't support physics material. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IPhysicsMaterial.destroy }\n   */\n  destroy(): void {}\n}\n","import { Vector3 } from \"@galacean/engine\";\n\n/**\n * Structure used to get information back from a raycast or a sweep.\n * @internal\n */\nexport class LiteHitResult {\n  /** The collider that was hit. */\n  shapeID: number = -1;\n  /** The distance from the origin to the hit point. */\n  distance: number = 0;\n  /** The hit point of the collider that was hit in world space. */\n  point: Vector3 = new Vector3();\n  /** The hit normal of the collider that was hit in world space. */\n  normal: Vector3 = new Vector3();\n}\n","import { BoundingBox, Ray, Vector3 } from \"@galacean/engine\";\nimport { IBoxColliderShape } from \"@galacean/engine-design\";\nimport { LiteHitResult } from \"../LiteHitResult\";\nimport { LitePhysicsMaterial } from \"../LitePhysicsMaterial\";\nimport { LiteColliderShape } from \"./LiteColliderShape\";\n\n/**\n * Box collider shape in Lite.\n */\nexport class LiteBoxColliderShape extends LiteColliderShape implements IBoxColliderShape {\n  private static _tempBox: BoundingBox = new BoundingBox();\n  private _halfSize: Vector3 = new Vector3();\n  private _sizeScale: Vector3 = new Vector3(1, 1, 1);\n\n  /** @internal */\n  _boxMin: Vector3 = new Vector3(-0.5, -0.5, -0.5);\n  /** @internal */\n  _boxMax: Vector3 = new Vector3(0.5, 0.5, 0.5);\n\n  /**\n   * Init Box Shape.\n   * @param uniqueID - UniqueID mark Shape.\n   * @param size - Size of Shape.\n   * @param material - Material of PhysXCollider.\n   */\n  constructor(uniqueID: number, size: Vector3, material: LitePhysicsMaterial) {\n    super();\n    this._id = uniqueID;\n    this._halfSize.set(size.x * 0.5, size.y * 0.5, size.z * 0.5);\n    this._setBondingBox();\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.setPosition }\n   */\n  override setPosition(position: Vector3): void {\n    super.setPosition(position);\n    this._setBondingBox();\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.setWorldScale }\n   */\n  override setWorldScale(scale: Vector3): void {\n    super.setWorldScale(scale);\n    this._sizeScale.set(Math.abs(scale.x), Math.abs(scale.y), Math.abs(scale.z));\n    this._setBondingBox();\n  }\n\n  /**\n   * {@inheritDoc IBoxColliderShape.setSize }\n   */\n  setSize(value: Vector3): void {\n    this._halfSize.set(value.x * 0.5, value.y * 0.5, value.z * 0.5);\n    this._setBondingBox();\n  }\n\n  /**\n   * @internal\n   */\n  _raycast(ray: Ray, hit: LiteHitResult): boolean {\n    const localRay = this._getLocalRay(ray);\n    const sizeScale = this._sizeScale;\n    const halfSize = this._halfSize;\n    const boundingBox = LiteBoxColliderShape._tempBox;\n    boundingBox.min.set(-halfSize.x * sizeScale.x, -halfSize.y * sizeScale.y, -halfSize.z * sizeScale.z);\n    boundingBox.max.set(halfSize.x * sizeScale.x, halfSize.y * sizeScale.y, halfSize.z * sizeScale.z);\n    const rayDistance = localRay.intersectBox(boundingBox);\n    if (rayDistance !== -1) {\n      this._updateHitResult(localRay, rayDistance, hit, ray.origin);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  private _setBondingBox(): void {\n    const { position } = this._transform;\n    const scale = this._sizeScale;\n    const halfSize = this._halfSize;\n\n    this._boxMin.set(\n      -halfSize.x * scale.x + position.x,\n      -halfSize.y * scale.y + position.y,\n      -halfSize.z * scale.z + position.z\n    );\n    this._boxMax.set(\n      halfSize.x * scale.x + position.x,\n      halfSize.y * scale.y + position.y,\n      halfSize.z * scale.z + position.z\n    );\n  }\n}\n","import { ISphereColliderShape } from \"@galacean/engine-design\";\nimport { LiteColliderShape } from \"./LiteColliderShape\";\nimport { BoundingSphere, Quaternion, Ray, Vector3 } from \"@galacean/engine\";\nimport { LiteHitResult } from \"../LiteHitResult\";\nimport { LitePhysicsMaterial } from \"../LitePhysicsMaterial\";\n\n/**\n * Sphere collider shape in Lite.\n */\nexport class LiteSphereColliderShape extends LiteColliderShape implements ISphereColliderShape {\n  private static _tempSphere: BoundingSphere = new BoundingSphere();\n\n  private _radius: number = 1;\n  private _maxScale: number = 1;\n\n  get worldRadius(): number {\n    return this._radius * this._maxScale;\n  }\n\n  /**\n   * Init sphere shape.\n   * @param uniqueID - UniqueID mark collider\n   * @param radius - Size of SphereCollider\n   * @param material - Material of PhysXCollider\n   */\n  constructor(uniqueID: number, radius: number, material: LitePhysicsMaterial) {\n    super();\n    this._radius = radius;\n    this._id = uniqueID;\n  }\n\n  /**\n   * {@inheritDoc ISphereColliderShape.setRadius }\n   */\n  setRadius(value: number): void {\n    this._radius = value;\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.setWorldScale }\n   */\n  override setWorldScale(scale: Vector3): void {\n    super.setWorldScale(scale);\n    this._maxScale = Math.max(Math.abs(scale.x), Math.abs(scale.y), Math.abs(scale.z));\n  }\n\n  /**\n   * @internal\n   */\n  _raycast(ray: Ray, hit: LiteHitResult): boolean {\n    const boundingSphere = LiteSphereColliderShape._tempSphere;\n    Vector3.transformCoordinate(this._transform.position, this._collider._transform.worldMatrix, boundingSphere.center);\n    boundingSphere.radius = this.worldRadius;\n\n    const rayDistance = ray.intersectSphere(boundingSphere);\n    if (rayDistance !== -1) {\n      this._updateHitResult(ray, rayDistance, hit, ray.origin, true);\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n","import { BoundingBox, BoundingSphere, CollisionUtil, DisorderedArray, Ray, Vector3 } from \"@galacean/engine\";\nimport { ICharacterController, IPhysicsScene } from \"@galacean/engine-design\";\nimport { LiteCollider } from \"./LiteCollider\";\nimport { LiteDynamicCollider } from \"./LiteDynamicCollider\";\nimport { LiteHitResult } from \"./LiteHitResult\";\nimport { LiteStaticCollider } from \"./LiteStaticCollider\";\nimport { LiteBoxColliderShape } from \"./shape/LiteBoxColliderShape\";\nimport { LiteColliderShape } from \"./shape/LiteColliderShape\";\nimport { LiteSphereColliderShape } from \"./shape/LiteSphereColliderShape\";\n\n/**\n * A manager is a collection of colliders and constraints which can interact.\n */\nexport class LitePhysicsScene implements IPhysicsScene {\n  private static _tempSphere: BoundingSphere = new BoundingSphere();\n  private static _tempBox: BoundingBox = new BoundingBox();\n  private static _currentHit: LiteHitResult = new LiteHitResult();\n  private static _hitResult: LiteHitResult = new LiteHitResult();\n\n  private readonly _onContactEnter?: (obj1: number, obj2: number) => void;\n  private readonly _onContactExit?: (obj1: number, obj2: number) => void;\n  private readonly _onContactStay?: (obj1: number, obj2: number) => void;\n  private readonly _onTriggerEnter?: (obj1: number, obj2: number) => void;\n  private readonly _onTriggerExit?: (obj1: number, obj2: number) => void;\n  private readonly _onTriggerStay?: (obj1: number, obj2: number) => void;\n\n  private _staticColliders: LiteStaticCollider[] = [];\n  private _dynamicColliders: LiteDynamicCollider[] = [];\n  private _sphere: BoundingSphere = new BoundingSphere();\n  private _box: BoundingBox = new BoundingBox();\n\n  private _currentEvents: DisorderedArray<TriggerEvent> = new DisorderedArray<TriggerEvent>();\n  private _eventMap: Record<number, Record<number, TriggerEvent>> = {};\n  private _eventPool: TriggerEvent[] = [];\n\n  constructor(\n    onContactEnter?: (obj1: number, obj2: number) => void,\n    onContactExit?: (obj1: number, obj2: number) => void,\n    onContactStay?: (obj1: number, obj2: number) => void,\n    onTriggerEnter?: (obj1: number, obj2: number) => void,\n    onTriggerExit?: (obj1: number, obj2: number) => void,\n    onTriggerStay?: (obj1: number, obj2: number) => void\n  ) {\n    this._onContactEnter = onContactEnter;\n    this._onContactExit = onContactExit;\n    this._onContactStay = onContactStay;\n    this._onTriggerEnter = onTriggerEnter;\n    this._onTriggerExit = onTriggerExit;\n    this._onTriggerStay = onTriggerStay;\n  }\n\n  /**\n   * {@inheritDoc IPhysicsManager.setGravity }\n   */\n  setGravity(value: Vector3): void {\n    console.log(\"Physics-lite don't support gravity. Use Physics-PhysX instead!\");\n  }\n\n  /**\n   * {@inheritDoc IPhysicsManager.addColliderShape }\n   */\n  addColliderShape(colliderShape: LiteColliderShape): void {\n    this._eventMap[colliderShape._id] = {};\n  }\n\n  /**\n   * {@inheritDoc IPhysicsManager.removeColliderShape }\n   */\n  removeColliderShape(colliderShape: LiteColliderShape): void {\n    const { _eventPool: eventPool, _currentEvents: currentEvents, _eventMap: eventMap } = this;\n    const { _id: id } = colliderShape;\n    currentEvents.forEach((event, i) => {\n      if (event.index1 == id) {\n        currentEvents.deleteByIndex(i);\n        eventPool.push(event);\n      } else if (event.index2 == id) {\n        currentEvents.deleteByIndex(i);\n        eventPool.push(event);\n        // If the shape is big index, should clear from the small index shape subMap\n        eventMap[event.index1][id] = undefined;\n      }\n    });\n    delete eventMap[id];\n  }\n\n  /**\n   * {@inheritDoc IPhysicsManager.addCollider }\n   */\n  addCollider(actor: LiteCollider): void {\n    const colliders = actor._isStaticCollider ? this._staticColliders : this._dynamicColliders;\n    colliders.push(actor);\n  }\n\n  /**\n   * {@inheritDoc IPhysicsManager.removeCollider }\n   */\n  removeCollider(collider: LiteCollider): void {\n    const colliders = collider._isStaticCollider ? this._staticColliders : this._dynamicColliders;\n    const index = colliders.indexOf(collider);\n    if (index !== -1) {\n      colliders.splice(index, 1);\n    }\n  }\n\n  /**\n   * {@inheritDoc IPhysicsManager.update }\n   */\n  update(deltaTime: number): void {\n    const dynamicColliders = this._dynamicColliders;\n    for (let i = 0, len = dynamicColliders.length; i < len; i++) {\n      const collider = dynamicColliders[i];\n      this._collisionDetection(collider, this._staticColliders);\n      this._collisionDetection(collider, dynamicColliders);\n    }\n    this._fireEvent();\n  }\n\n  /**\n   * {@inheritDoc IPhysicsManager.raycast }\n   */\n  raycast(\n    ray: Ray,\n    distance: number,\n    onRaycast: (obj: number) => boolean,\n    hit?: (shapeUniqueID: number, distance: number, position: Vector3, normal: Vector3) => void\n  ): boolean {\n    if (!hit) {\n      return (\n        this._raycast(ray, distance, onRaycast, this._staticColliders, hit) ||\n        this._raycast(ray, distance, onRaycast, this._dynamicColliders, hit)\n      );\n    } else {\n      const raycastStaticRes = this._raycast(ray, distance, onRaycast, this._staticColliders, hit);\n\n      if (raycastStaticRes) {\n        distance = LitePhysicsScene._currentHit.distance;\n      }\n\n      const raycastDynamicRes = this._raycast(ray, distance, onRaycast, this._dynamicColliders, hit);\n      const isHit = raycastStaticRes || raycastDynamicRes;\n      const hitResult = LitePhysicsScene._hitResult;\n\n      if (!isHit) {\n        hitResult.shapeID = -1;\n        hitResult.distance = 0;\n        hitResult.point.set(0, 0, 0);\n        hitResult.normal.set(0, 0, 0);\n      } else {\n        hit(hitResult.shapeID, hitResult.distance, hitResult.point, hitResult.normal);\n      }\n      return isHit;\n    }\n  }\n\n  /**\n   * {@inheritDoc IPhysicsManager.addCharacterController }\n   */\n  addCharacterController(characterController: ICharacterController): void {\n    throw \"Physics-lite don't support addCharacterController. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IPhysicsManager.removeCharacterController }\n   */\n  removeCharacterController(characterController: ICharacterController): void {\n    throw \"Physics-lite don't support removeCharacterController. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * Calculate the bounding box in world space from boxCollider.\n   * @param boxCollider - The boxCollider to calculate\n   * @param out - The calculated boundingBox\n   */\n  private static _updateWorldBox(boxCollider: LiteBoxColliderShape, out: BoundingBox): void {\n    const mat = boxCollider._transform.worldMatrix;\n    out.min.copyFrom(boxCollider._boxMin);\n    out.max.copyFrom(boxCollider._boxMax);\n    BoundingBox.transform(out, mat, out);\n  }\n\n  /**\n   * Get the sphere info of the given sphere collider in world space.\n   * @param sphereCollider - The given sphere collider\n   * @param out - The calculated boundingSphere\n   */\n  private static _upWorldSphere(sphereCollider: LiteSphereColliderShape, out: BoundingSphere): void {\n    Vector3.transformCoordinate(sphereCollider._transform.position, sphereCollider._transform.worldMatrix, out.center);\n    out.radius = sphereCollider.worldRadius;\n  }\n\n  private _getTrigger(index1: number, index2: number): TriggerEvent {\n    let event: TriggerEvent;\n    if (this._eventPool.length) {\n      event = this._eventPool.pop();\n      event.index1 = index1;\n      event.index2 = index2;\n    } else {\n      event = new TriggerEvent(index1, index2);\n    }\n    this._eventMap[index1][index2] = event;\n    return event;\n  }\n\n  private _collisionDetection(myCollider: LiteCollider, colliders: LiteCollider[]): void {\n    const myColliderShapes = myCollider._shapes;\n    for (let i = 0, len = myColliderShapes.length; i < len; i++) {\n      const myShape = myColliderShapes[i];\n      if (myShape instanceof LiteBoxColliderShape) {\n        LitePhysicsScene._updateWorldBox(myShape, this._box);\n        for (let j = 0, len = colliders.length; j < len; j++) {\n          const colliderShape = colliders[j]._shapes;\n          for (let k = 0, len = colliderShape.length; k < len; k++) {\n            const shape = colliderShape[k];\n            const index1 = shape._id;\n            const index2 = myShape._id;\n            const event = index1 < index2 ? this._eventMap[index1][index2] : this._eventMap[index2][index1];\n            if (event !== undefined && !event.alreadyInvoked) {\n              continue;\n            }\n            if (shape != myShape && this._boxCollision(shape)) {\n              if (event === undefined) {\n                const event = index1 < index2 ? this._getTrigger(index1, index2) : this._getTrigger(index2, index1);\n                event.state = TriggerEventState.Enter;\n                event.alreadyInvoked = false;\n                this._currentEvents.add(event);\n              } else if (event.state === TriggerEventState.Enter) {\n                event.state = TriggerEventState.Stay;\n                event.alreadyInvoked = false;\n              } else if (event.state === TriggerEventState.Stay) {\n                event.alreadyInvoked = false;\n              }\n            }\n          }\n        }\n      } else if (myShape instanceof LiteSphereColliderShape) {\n        LitePhysicsScene._upWorldSphere(myShape, this._sphere);\n        for (let j = 0, len = colliders.length; j < len; j++) {\n          const colliderShape = colliders[j]._shapes;\n          for (let k = 0, len = colliderShape.length; k < len; k++) {\n            const shape = colliderShape[k];\n            const index1 = shape._id;\n            const index2 = myShape._id;\n            const event = index1 < index2 ? this._eventMap[index1][index2] : this._eventMap[index2][index1];\n            if (event !== undefined && !event.alreadyInvoked) {\n              continue;\n            }\n            if (shape != myShape && this._sphereCollision(shape)) {\n              if (event === undefined) {\n                const event = index1 < index2 ? this._getTrigger(index1, index2) : this._getTrigger(index2, index1);\n                event.state = TriggerEventState.Enter;\n                event.alreadyInvoked = false;\n                this._currentEvents.add(event);\n              } else if (event.state === TriggerEventState.Enter) {\n                event.state = TriggerEventState.Stay;\n                event.alreadyInvoked = false;\n              } else if (event.state === TriggerEventState.Stay) {\n                event.alreadyInvoked = false;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private _fireEvent(): void {\n    const { _eventPool: eventPool, _currentEvents: currentEvents } = this;\n    currentEvents.forEach((event, i) => {\n      if (!event.alreadyInvoked) {\n        if (event.state == TriggerEventState.Enter) {\n          this._onTriggerEnter(event.index1, event.index2);\n          event.alreadyInvoked = true;\n        } else if (event.state == TriggerEventState.Stay) {\n          this._onTriggerStay(event.index1, event.index2);\n          event.alreadyInvoked = true;\n        }\n      } else {\n        event.state = TriggerEventState.Exit;\n        this._eventMap[event.index1][event.index2] = undefined;\n\n        currentEvents.deleteByIndex(i);\n        this._onTriggerExit(event.index1, event.index2);\n        eventPool.push(event);\n      }\n    });\n  }\n\n  private _boxCollision(other: LiteColliderShape): boolean {\n    if (other instanceof LiteBoxColliderShape) {\n      const box = LitePhysicsScene._tempBox;\n      LitePhysicsScene._updateWorldBox(other, box);\n      return CollisionUtil.intersectsBoxAndBox(box, this._box);\n    } else if (other instanceof LiteSphereColliderShape) {\n      const sphere = LitePhysicsScene._tempSphere;\n      LitePhysicsScene._upWorldSphere(other, sphere);\n      return CollisionUtil.intersectsSphereAndBox(sphere, this._box);\n    }\n    return false;\n  }\n\n  private _sphereCollision(other: LiteColliderShape): boolean {\n    if (other instanceof LiteBoxColliderShape) {\n      const box = LitePhysicsScene._tempBox;\n      LitePhysicsScene._updateWorldBox(other, box);\n      return CollisionUtil.intersectsSphereAndBox(this._sphere, box);\n    } else if (other instanceof LiteSphereColliderShape) {\n      const sphere = LitePhysicsScene._tempSphere;\n      LitePhysicsScene._upWorldSphere(other, sphere);\n      return CollisionUtil.intersectsSphereAndSphere(sphere, this._sphere);\n    }\n    return false;\n  }\n\n  private _raycast(\n    ray: Ray,\n    distance: number,\n    onRaycast: (obj: number) => boolean,\n    colliders: LiteCollider[],\n    hit?: (shapeUniqueID: number, distance: number, position: Vector3, normal: Vector3) => void\n  ): boolean {\n    let isHit = false;\n    const curHit = LitePhysicsScene._currentHit;\n    for (let i = 0, len = colliders.length; i < len; i++) {\n      if (colliders[i]._raycast(ray, onRaycast, curHit) && curHit.distance < distance) {\n        if (hit) {\n          isHit = true;\n          const hitResult = LitePhysicsScene._hitResult;\n          hitResult.normal.copyFrom(curHit.normal);\n          hitResult.point.copyFrom(curHit.point);\n          hitResult.distance = distance = curHit.distance;\n          hitResult.shapeID = curHit.shapeID;\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return isHit;\n  }\n}\n\n/**\n * Physics state\n */\nenum TriggerEventState {\n  Enter,\n  Stay,\n  Exit\n}\n\n/**\n * Trigger event to store interactive object ids and state.\n */\nclass TriggerEvent {\n  state: TriggerEventState;\n  index1: number;\n  index2: number;\n  alreadyInvoked: boolean = false;\n\n  constructor(index1: number, index2: number) {\n    this.index1 = index1;\n    this.index2 = index2;\n  }\n}\n","import { IStaticCollider } from \"@galacean/engine-design\";\nimport { LiteCollider } from \"./LiteCollider\";\nimport { Quaternion, Vector3 } from \"@galacean/engine\";\n\n/**\n * A static collider component that will not move.\n * @remarks Mostly used for object which always stays at the same place and never moves around.\n */\nexport class LiteStaticCollider extends LiteCollider implements IStaticCollider {\n  /** @internal */\n  readonly _isStaticCollider: boolean = true;\n  /**\n   * Initialize static actor.\n   * @param position - The global position\n   * @param rotation - The global rotation\n   */\n  constructor(position: Vector3, rotation: Quaternion) {\n    super();\n    this._transform.setPosition(position.x, position.y, position.z);\n    this._transform.setRotationQuaternion(rotation.x, rotation.y, rotation.z, rotation.w);\n  }\n}\n","import { Quaternion, Vector3 } from \"@galacean/engine\";\nimport {\n  IBoxColliderShape,\n  ICapsuleColliderShape,\n  ICharacterController,\n  IDynamicCollider,\n  IFixedJoint,\n  IHingeJoint,\n  IPhysics,\n  IPhysicsManager,\n  IPhysicsMaterial,\n  IPlaneColliderShape,\n  ISphereColliderShape,\n  ISpringJoint,\n  IStaticCollider\n} from \"@galacean/engine-design\";\nimport { LiteCollider } from \"./LiteCollider\";\nimport { LiteDynamicCollider } from \"./LiteDynamicCollider\";\nimport { LitePhysicsMaterial } from \"./LitePhysicsMaterial\";\nimport { LitePhysicsScene } from \"./LitePhysicsScene\";\nimport { LiteStaticCollider } from \"./LiteStaticCollider\";\nimport { LiteBoxColliderShape } from \"./shape/LiteBoxColliderShape\";\nimport { LiteSphereColliderShape } from \"./shape/LiteSphereColliderShape\";\nimport { LitePhysicsManager } from \"./LitePhysicsManager\";\n\nexport class LitePhysics implements IPhysics {\n  /**\n   * {@inheritDoc IPhysics.initialize }\n   */\n  initialize(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createPhysicsManager }\n   */\n  createPhysicsManager(): IPhysicsManager {\n    return null;\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createPhysicsScene }\n   */\n  createPhysicsScene(\n    physicsManager: LitePhysicsManager,\n    onContactBegin?: (obj1: number, obj2: number) => void,\n    onContactEnd?: (obj1: number, obj2: number) => void,\n    onContactPersist?: (obj1: number, obj2: number) => void,\n    onTriggerBegin?: (obj1: number, obj2: number) => void,\n    onTriggerEnd?: (obj1: number, obj2: number) => void,\n    onTriggerPersist?: (obj1: number, obj2: number) => void\n  ): LitePhysicsScene {\n    return new LitePhysicsScene(\n      onContactBegin,\n      onContactEnd,\n      onContactPersist,\n      onTriggerBegin,\n      onTriggerEnd,\n      onTriggerPersist\n    );\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createStaticCollider }\n   */\n  createStaticCollider(position: Vector3, rotation: Quaternion): IStaticCollider {\n    return new LiteStaticCollider(position, rotation);\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createDynamicCollider }\n   */\n  createDynamicCollider(position: Vector3, rotation: Quaternion): IDynamicCollider {\n    return new LiteDynamicCollider(position, rotation);\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createCharacterController }\n   */\n  createCharacterController(): ICharacterController {\n    throw \"Physics-lite don't support createCharacterController. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createPhysicsMaterial }\n   */\n  createPhysicsMaterial(\n    staticFriction: number,\n    dynamicFriction: number,\n    bounciness: number,\n    frictionCombine: number,\n    bounceCombine: number\n  ): IPhysicsMaterial {\n    return new LitePhysicsMaterial(staticFriction, dynamicFriction, bounciness, frictionCombine, bounceCombine);\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createBoxColliderShape }\n   */\n  createBoxColliderShape(uniqueID: number, size: Vector3, material: LitePhysicsMaterial): IBoxColliderShape {\n    return new LiteBoxColliderShape(uniqueID, size, material);\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createSphereColliderShape }\n   */\n  createSphereColliderShape(uniqueID: number, radius: number, material: LitePhysicsMaterial): ISphereColliderShape {\n    return new LiteSphereColliderShape(uniqueID, radius, material);\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createPlaneColliderShape }\n   */\n  createPlaneColliderShape(uniqueID: number, material: LitePhysicsMaterial): IPlaneColliderShape {\n    throw \"Physics-lite don't support PlaneColliderShape. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createCapsuleColliderShape }\n   */\n  createCapsuleColliderShape(\n    uniqueID: number,\n    radius: number,\n    height: number,\n    material: LitePhysicsMaterial\n  ): ICapsuleColliderShape {\n    throw \"Physics-lite don't support CapsuleColliderShape. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createFixedJoint }\n   */\n  createFixedJoint(collider: LiteCollider): IFixedJoint {\n    throw \"Physics-lite don't support CapsuleColliderShape. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createHingeJoint }\n   */\n  createHingeJoint(collider: LiteCollider): IHingeJoint {\n    throw \"Physics-lite don't support CapsuleColliderShape. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createSpringJoint }\n   */\n  createSpringJoint(collider: LiteCollider): ISpringJoint {\n    throw \"Physics-lite don't support CapsuleColliderShape. Use Physics-PhysX instead!\";\n  }\n}\n","export { LitePhysics } from \"./LitePhysics\";\n\n//@ts-ignore\nexport const version = `__buildVersion`;\n\nconsole.log(`Galacean PhysicsLite version: ${version}`);\n"],"names":["_set_prototype_of","o","p","Object","setPrototypeOf","__proto__","_inherits","subClass","superClass","TypeError","prototype","create","constructor","value","writable","configurable","_defineProperties","target","props","i","length","descriptor","enumerable","defineProperty","key","_create_class","Constructor","protoProps","staticProps","_instanceof","left","right","Symbol","hasInstance","LiteUpdateFlag","_flags","flag","push","destroy","Utils","removeFromArray","LiteUpdateFlagManager","_updateFlags","register","distribute","updateFlags","LiteColliderShape","_position","Vector3","_worldScale","_transform","LiteTransform","_invModelMatrix","Matrix","owner","_inverseWorldMatFlag","registerWorldChangeFlag","setRotation","rotation","console","log","setPosition","position","copyFrom","_setLocalPose","setWorldScale","scale","setContactOffset","offset","setMaterial","material","setUniqueID","id","_id","setIsTrigger","_proto","_updateHitResult","ray","rayDistance","outHit","origin","isWorldRay","hitPoint","_tempPoint","getPoint","transformCoordinate","worldMatrix","distance","point","shapeID","_getLocalRay","worldToLocal","_getInvModelMatrix","outRay","_ray","transformNormal","direction","normalize","invert","shapePosition","multiply","Ray","_rotation","_rotationQuaternion","Quaternion","_scale","_worldRotationQuaternion","_localMatrix","_worldMatrix","_updateFlagManager","_isParentDirty","_parentTransformCache","_dirtyFlag","x","y","z","set","setRotationQuaternion","w","rotationQuaternion","setScale","_updateWorldPositionFlag","_isContainDirtyFlags","_worldAssociatedChange","_owner","LiteCollider","shapes","_shapes","n","_updateWorldRotationFlag","_updateWorldScaleFlag","_updateAllWorldFlag","_getParentTransform","parentCache","parent","_collider","targetDirtyFlags","_isContainDirtyFlag","type","_setDirtyFlagTrue","_setDirtyFlagFalse","rotationEuler","MathUtil","degreeToRadian","TransformFlag","worldRotationQuaternion","_tempQuat0","localMatrix","affineTransformation","decompose","_tempMat42","addShape","shape","oldCollider","removeShape","index","indexOf","splice","setWorldTransform","getWorldTransform","outPosition","outRotation","_this__transform","_raycast","onRaycast","hit","Number","MAX_VALUE","LiteDynamicCollider","call","_isStaticCollider","_this","addForce","force","addTorque","torque","move","positionOrRotation","sleep","setAngularDamping","setAngularVelocity","setCenterOfMass","setCollisionDetectionMode","setConstraints","flags","setInertiaTensor","setIsKinematic","setLinearDamping","setLinearVelocity","setMass","setMaxAngularVelocity","setMaxDepenetrationVelocity","setSleepThreshold","setSolverIterations","wakeUp","LitePhysicsMaterial","staticFriction","dynamicFriction","bounciness","frictionCombine","bounceCombine","setBounciness","setDynamicFriction","setStaticFriction","setBounceCombine","setFrictionCombine","LiteHitResult","normal","LiteBoxColliderShape","uniqueID","size","_halfSize","_sizeScale","_boxMin","_boxMax","_setBondingBox","Math","abs","setSize","localRay","sizeScale","halfSize","boundingBox","_tempBox","min","max","intersectBox","BoundingBox","LiteSphereColliderShape","radius","_radius","_maxScale","setRadius","boundingSphere","_tempSphere","center","worldRadius","intersectSphere","get","BoundingSphere","LitePhysicsScene","onContactEnter","onContactExit","onContactStay","onTriggerEnter","onTriggerExit","onTriggerStay","_staticColliders","_dynamicColliders","_sphere","_box","_currentEvents","DisorderedArray","_eventMap","_eventPool","_onContactEnter","_onContactExit","_onContactStay","_onTriggerEnter","_onTriggerExit","_onTriggerStay","setGravity","addColliderShape","colliderShape","removeColliderShape","eventPool","currentEvents","eventMap","forEach","event","index1","deleteByIndex","index2","undefined","addCollider","actor","colliders","removeCollider","collider","update","deltaTime","dynamicColliders","len","_collisionDetection","_fireEvent","raycast","raycastStaticRes","_currentHit","raycastDynamicRes","isHit","hitResult","_hitResult","addCharacterController","characterController","removeCharacterController","_getTrigger","pop","TriggerEvent","myCollider","myColliderShapes","myShape","_updateWorldBox","j","k","alreadyInvoked","_boxCollision","state","add","_upWorldSphere","_sphereCollision","_this1","other","box","CollisionUtil","intersectsBoxAndBox","sphere","intersectsSphereAndBox","intersectsSphereAndSphere","curHit","boxCollider","out","mat","transform","sphereCollider","LiteStaticCollider","LitePhysics","initialize","Promise","resolve","createPhysicsManager","createPhysicsScene","physicsManager","onContactBegin","onContactEnd","onContactPersist","onTriggerBegin","onTriggerEnd","onTriggerPersist","createStaticCollider","createDynamicCollider","createCharacterController","createPhysicsMaterial","createBoxColliderShape","createSphereColliderShape","createPlaneColliderShape","createCapsuleColliderShape","height","createFixedJoint","createHingeJoint","createSpringJoint","version"],"mappings":"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"}