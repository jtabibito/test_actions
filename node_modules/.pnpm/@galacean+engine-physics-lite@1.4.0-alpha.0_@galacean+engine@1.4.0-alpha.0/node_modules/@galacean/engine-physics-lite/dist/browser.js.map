{"version":3,"file":"browser.js","sources":["../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_set_prototype_of.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_inherits.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_create_class.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_instanceof.js","../src/LiteUpdateFlag.ts","../src/LiteUpdateFlagManager.ts","../src/shape/LiteColliderShape.ts","../src/LiteTransform.ts","../src/LiteCollider.ts","../src/LiteDynamicCollider.ts","../src/LitePhysicsMaterial.ts","../src/LiteHitResult.ts","../src/shape/LiteBoxColliderShape.ts","../src/shape/LiteSphereColliderShape.ts","../src/LitePhysicsScene.ts","../src/LiteStaticCollider.ts","../src/LitePhysics.ts","../src/index.ts"],"sourcesContent":["function _set_prototype_of(o, p) {\n    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {\n        o.__proto__ = p;\n\n        return o;\n    };\n\n    return _set_prototype_of(o, p);\n}\nexport { _set_prototype_of as _ };\n","import { _ as _set_prototype_of } from \"./_set_prototype_of.js\";\n\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });\n\n    if (superClass) _set_prototype_of(subClass, superClass);\n}\nexport { _inherits as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","function _instanceof(left, right) {\n    if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n        return !!right[Symbol.hasInstance](left);\n    } else return left instanceof right;\n}\nexport { _instanceof as _ };\n","import { Utils } from \"@galacean/engine\";\n\n/**\n * Used to update tags.\n */\nexport class LiteUpdateFlag {\n  /** Flag. */\n  flag = true;\n\n  constructor(private _flags: LiteUpdateFlag[] = []) {\n    this._flags.push(this);\n  }\n\n  /**\n   * Destroy.\n   */\n  destroy(): void {\n    Utils.removeFromArray(this._flags, this);\n    this._flags = null;\n  }\n}\n","import { LiteUpdateFlag } from \"./LiteUpdateFlag\";\n\n/**\n * @internal\n */\nexport class LiteUpdateFlagManager {\n  private _updateFlags: LiteUpdateFlag[] = [];\n\n  register(): LiteUpdateFlag {\n    return new LiteUpdateFlag(this._updateFlags);\n  }\n\n  distribute(): void {\n    const updateFlags = this._updateFlags;\n    for (let i = updateFlags.length - 1; i >= 0; i--) {\n      updateFlags[i].flag = true;\n    }\n  }\n}\n","import { Matrix, Ray, Vector3 } from \"@galacean/engine\";\nimport { IColliderShape, IPhysicsMaterial } from \"@galacean/engine-design\";\nimport { LiteCollider } from \"../LiteCollider\";\nimport { LiteHitResult } from \"../LiteHitResult\";\nimport { LiteTransform } from \"../LiteTransform\";\nimport { LiteUpdateFlag } from \"../LiteUpdateFlag\";\n\n/**\n * Abstract class for collider shapes.\n */\nexport abstract class LiteColliderShape implements IColliderShape {\n  private static _ray = new Ray();\n  private static _tempPoint = new Vector3();\n\n  /** @internal */\n  _id: number;\n  /** @internal */\n  _collider: LiteCollider;\n  /** @internal */\n  _position: Vector3 = new Vector3();\n  /** @internal */\n  _worldScale: Vector3 = new Vector3(1, 1, 1);\n  /** @internal */\n  _transform: LiteTransform = new LiteTransform();\n  /** @internal */\n  _invModelMatrix: Matrix = new Matrix();\n  /** @internal */\n  _inverseWorldMatFlag: LiteUpdateFlag;\n\n  protected constructor() {\n    this._transform.owner = this;\n    this._inverseWorldMatFlag = this._transform.registerWorldChangeFlag();\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.setRotation }\n   */\n  setRotation(rotation: Vector3): void {\n    console.log(\"Physics-lite don't support setRotation. Use Physics-PhysX instead!\");\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.setPosition }\n   */\n  setPosition(position: Vector3): void {\n    if (position !== this._position) {\n      this._position.copyFrom(position);\n    }\n    this._setLocalPose();\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.setWorldScale }\n   */\n  setWorldScale(scale: Vector3): void {\n    this._worldScale.copyFrom(scale);\n    this._setLocalPose();\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.setContactOffset }\n   */\n  setContactOffset(offset: number): void {\n    console.log(\"Physics-lite don't support setContactOffset. Use Physics-PhysX instead!\");\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.setMaterial }\n   */\n  setMaterial(material: IPhysicsMaterial): void {\n    console.log(\"Physics-lite don't support setMaterial. Use Physics-PhysX instead!\");\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.setUniqueID }\n   */\n  setUniqueID(id: number): void {\n    this._id = id;\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.setIsTrigger }\n   */\n  setIsTrigger(value: boolean): void {\n    console.log(\"Physics-lite don't support setIsTrigger. Use Physics-PhysX instead!\");\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.destroy }\n   */\n  destroy(): void {}\n\n  /**\n   * @internal\n   */\n  abstract _raycast(ray: Ray, hit: LiteHitResult): boolean;\n\n  protected _updateHitResult(\n    ray: Ray,\n    rayDistance: number,\n    outHit: LiteHitResult,\n    origin: Vector3,\n    isWorldRay: boolean = false\n  ): void {\n    const hitPoint = LiteColliderShape._tempPoint;\n    ray.getPoint(rayDistance, hitPoint);\n    if (!isWorldRay) {\n      Vector3.transformCoordinate(hitPoint, this._transform.worldMatrix, hitPoint);\n    }\n\n    const distance = Vector3.distance(origin, hitPoint);\n\n    if (distance < outHit.distance) {\n      outHit.point.copyFrom(hitPoint);\n      outHit.distance = distance;\n      outHit.shapeID = this._id;\n    }\n  }\n\n  protected _getLocalRay(ray: Ray): Ray {\n    const worldToLocal = this._getInvModelMatrix();\n    const outRay = LiteColliderShape._ray;\n\n    Vector3.transformCoordinate(ray.origin, worldToLocal, outRay.origin);\n    Vector3.transformNormal(ray.direction, worldToLocal, outRay.direction);\n    outRay.direction.normalize();\n\n    return outRay;\n  }\n\n  private _getInvModelMatrix(): Matrix {\n    if (this._inverseWorldMatFlag.flag) {\n      Matrix.invert(this._transform.worldMatrix, this._invModelMatrix);\n      this._inverseWorldMatFlag.flag = false;\n    }\n    return this._invModelMatrix;\n  }\n\n  private _setLocalPose() {\n    const shapePosition = LiteColliderShape._tempPoint;\n    Vector3.multiply(this._position, this._worldScale, shapePosition);\n    this._transform.position = shapePosition;\n  }\n}\n","import { MathUtil, Matrix, Quaternion, Vector3 } from \"@galacean/engine\";\nimport { LiteCollider } from \"./LiteCollider\";\nimport { LiteUpdateFlag } from \"./LiteUpdateFlag\";\nimport { LiteUpdateFlagManager } from \"./LiteUpdateFlagManager\";\nimport { LiteColliderShape } from \"./shape/LiteColliderShape\";\n\n/**\n * Used to implement transformation related functions.\n */\nexport class LiteTransform {\n  private static _tempQuat0: Quaternion = new Quaternion();\n  private static _tempMat42: Matrix = new Matrix();\n\n  private _position: Vector3 = new Vector3();\n  private _rotation: Vector3 = new Vector3();\n  private _rotationQuaternion: Quaternion = new Quaternion();\n  private _scale: Vector3 = new Vector3(1, 1, 1);\n  private _worldRotationQuaternion: Quaternion = new Quaternion();\n  private _localMatrix: Matrix = new Matrix();\n  private _worldMatrix: Matrix = new Matrix();\n  private _updateFlagManager: LiteUpdateFlagManager = new LiteUpdateFlagManager();\n  private _isParentDirty: boolean = true;\n  private _parentTransformCache: LiteTransform = null;\n  private _dirtyFlag: number = TransformFlag.WmWpWeWqWs;\n\n  private _owner: LiteColliderShape | LiteCollider;\n\n  set owner(value: LiteColliderShape | LiteCollider) {\n    this._owner = value;\n  }\n\n  /**\n   * Local position.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get position(): Vector3 {\n    return this._position;\n  }\n\n  set position(value: Vector3) {\n    if (this._position !== value) {\n      this._position.copyFrom(value);\n    }\n    this._setDirtyFlagTrue(TransformFlag.LocalMatrix);\n    this._updateWorldPositionFlag();\n  }\n\n  /**\n   * Local rotation, defining the rotation by using a unit quaternion.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get rotationQuaternion(): Quaternion {\n    if (this._isContainDirtyFlag(TransformFlag.LocalQuat)) {\n      Quaternion.rotationEuler(\n        MathUtil.degreeToRadian(this._rotation.x),\n        MathUtil.degreeToRadian(this._rotation.y),\n        MathUtil.degreeToRadian(this._rotation.z),\n        this._rotationQuaternion\n      );\n      this._setDirtyFlagFalse(TransformFlag.LocalQuat);\n    }\n    return this._rotationQuaternion;\n  }\n\n  set rotationQuaternion(value: Quaternion) {\n    if (this._rotationQuaternion !== value) {\n      this._rotationQuaternion.copyFrom(value);\n    }\n    this._setDirtyFlagTrue(TransformFlag.LocalMatrix | TransformFlag.LocalEuler);\n    this._setDirtyFlagFalse(TransformFlag.LocalQuat);\n    this._updateWorldRotationFlag();\n  }\n\n  /**\n   * World rotation, defining the rotation by using a unit quaternion.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get worldRotationQuaternion(): Quaternion {\n    if (this._isContainDirtyFlag(TransformFlag.WorldQuat)) {\n      const parent = this._getParentTransform();\n      if (parent != null) {\n        Quaternion.multiply(parent.worldRotationQuaternion, this.rotationQuaternion, this._worldRotationQuaternion);\n      } else {\n        this._worldRotationQuaternion.copyFrom(this.rotationQuaternion);\n      }\n      this._setDirtyFlagFalse(TransformFlag.WorldQuat);\n    }\n    return this._worldRotationQuaternion;\n  }\n\n  set worldRotationQuaternion(value: Quaternion) {\n    if (this._worldRotationQuaternion !== value) {\n      this._worldRotationQuaternion.copyFrom(value);\n    }\n    const parent = this._getParentTransform();\n    if (parent) {\n      Quaternion.invert(parent.worldRotationQuaternion, LiteTransform._tempQuat0);\n      Quaternion.multiply(value, LiteTransform._tempQuat0, this._rotationQuaternion);\n    } else {\n      this._rotationQuaternion.copyFrom(value);\n    }\n    this.rotationQuaternion = this._rotationQuaternion;\n    this._setDirtyFlagFalse(TransformFlag.WorldQuat);\n  }\n\n  /**\n   * Local scaling.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get scale(): Vector3 {\n    return this._scale;\n  }\n\n  set scale(value: Vector3) {\n    if (this._scale !== value) {\n      this._scale.copyFrom(value);\n    }\n    this._setDirtyFlagTrue(TransformFlag.LocalMatrix);\n    this._updateWorldScaleFlag();\n  }\n\n  /**\n   * Local matrix.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get localMatrix(): Matrix {\n    if (this._isContainDirtyFlag(TransformFlag.LocalMatrix)) {\n      Matrix.affineTransformation(this._scale, this.rotationQuaternion, this._position, this._localMatrix);\n      this._setDirtyFlagFalse(TransformFlag.LocalMatrix);\n    }\n    return this._localMatrix;\n  }\n\n  set localMatrix(value: Matrix) {\n    if (this._localMatrix !== value) {\n      this._localMatrix.copyFrom(value);\n    }\n    this._localMatrix.decompose(this._position, this._rotationQuaternion, this._scale);\n    this._setDirtyFlagTrue(TransformFlag.LocalEuler);\n    this._setDirtyFlagFalse(TransformFlag.LocalMatrix);\n    this._updateAllWorldFlag();\n  }\n\n  /**\n   * World matrix.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get worldMatrix(): Matrix {\n    if (this._isContainDirtyFlag(TransformFlag.WorldMatrix)) {\n      const parent = this._getParentTransform();\n      if (parent) {\n        Matrix.multiply(parent.worldMatrix, this.localMatrix, this._worldMatrix);\n      } else {\n        this._worldMatrix.copyFrom(this.localMatrix);\n      }\n      this._setDirtyFlagFalse(TransformFlag.WorldMatrix);\n    }\n    return this._worldMatrix;\n  }\n\n  set worldMatrix(value: Matrix) {\n    if (this._worldMatrix !== value) {\n      this._worldMatrix.copyFrom(value);\n    }\n    const parent = this._getParentTransform();\n    if (parent) {\n      Matrix.invert(parent.worldMatrix, LiteTransform._tempMat42);\n      Matrix.multiply(LiteTransform._tempMat42, value, this._localMatrix);\n    } else {\n      this._localMatrix.copyFrom(value);\n    }\n    this.localMatrix = this._localMatrix;\n    this._setDirtyFlagFalse(TransformFlag.WorldMatrix);\n  }\n\n  /**\n   * Set local position by X, Y, Z value.\n   * @param x - X coordinate\n   * @param y - Y coordinate\n   * @param z - Z coordinate\n   */\n  setPosition(x: number, y: number, z: number): void {\n    this._position.set(x, y, z);\n    this.position = this._position;\n  }\n\n  /**\n   * Set local rotation by the X, Y, Z, and W components of the quaternion.\n   * @param x - X component of quaternion\n   * @param y - Y component of quaternion\n   * @param z - Z component of quaternion\n   * @param w - W component of quaternion\n   */\n  setRotationQuaternion(x: number, y: number, z: number, w: number): void {\n    this._rotationQuaternion.set(x, y, z, w);\n    this.rotationQuaternion = this._rotationQuaternion;\n  }\n\n  /**\n   * Set local scaling by scaling values along X, Y, Z axis.\n   * @param x - Scaling along X axis\n   * @param y - Scaling along Y axis\n   * @param z - Scaling along Z axis\n   */\n  setScale(x: number, y: number, z: number): void {\n    this._scale.set(x, y, z);\n    this.scale = this._scale;\n  }\n\n  /**\n   * Register world transform change flag.\n   * @returns Change flag\n   */\n  registerWorldChangeFlag(): LiteUpdateFlag {\n    return this._updateFlagManager.register();\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix or worldRotationQuaternion) to be false.\n   */\n  private _updateWorldPositionFlag(): void {\n    if (!this._isContainDirtyFlags(TransformFlag.WmWp)) {\n      this._worldAssociatedChange(TransformFlag.WmWp);\n      if (this._owner instanceof LiteCollider) {\n        const shapes = this._owner._shapes;\n        for (let i: number = 0, n: number = shapes.length; i < n; i++) {\n          shapes[i]._transform._updateWorldPositionFlag();\n        }\n      }\n    }\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * Get worldRotationQuaternion: Will trigger the world rotation (in quaternion) update of itself and all parent entities.\n   * Get worldRotation: Will trigger the world rotation(in euler and quaternion) update of itself and world rotation(in quaternion) update of all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix or worldRotationQuaternion) to be false.\n   */\n  private _updateWorldRotationFlag() {\n    if (!this._isContainDirtyFlags(TransformFlag.WmWeWq)) {\n      this._worldAssociatedChange(TransformFlag.WmWeWq);\n      if (this._owner instanceof LiteCollider) {\n        const shapes = this._owner._shapes;\n        for (let i: number = 0, n: number = shapes.length; i < n; i++) {\n          shapes[i]._transform._updateWorldRotationFlag();\n        }\n      }\n    }\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * Get worldScale: Will trigger the scaling update of itself and all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix) to be false.\n   */\n  private _updateWorldScaleFlag() {\n    if (!this._isContainDirtyFlags(TransformFlag.WmWs)) {\n      this._worldAssociatedChange(TransformFlag.WmWs);\n      if (this._owner instanceof LiteCollider) {\n        const shapes = this._owner._shapes;\n        for (let i: number = 0, n: number = shapes.length; i < n; i++) {\n          shapes[i]._transform._updateWorldScaleFlag();\n        }\n      }\n    }\n  }\n\n  /**\n   * Update all world transform property dirty flag, the principle is the same as above.\n   */\n  private _updateAllWorldFlag(): void {\n    if (!this._isContainDirtyFlags(TransformFlag.WmWpWeWqWs)) {\n      this._worldAssociatedChange(TransformFlag.WmWpWeWqWs);\n      if (this._owner instanceof LiteCollider) {\n        const shapes = this._owner._shapes;\n        for (let i: number = 0, n: number = shapes.length; i < n; i++) {\n          shapes[i]._transform._updateAllWorldFlag();\n        }\n      }\n    }\n  }\n\n  private _getParentTransform(): LiteTransform | null {\n    if (!this._isParentDirty) {\n      return this._parentTransformCache;\n    }\n    let parentCache: LiteTransform = null;\n    if (this._owner instanceof LiteColliderShape) {\n      let parent = this._owner._collider;\n      parentCache = parent._transform;\n    }\n\n    this._parentTransformCache = parentCache;\n    this._isParentDirty = false;\n    return parentCache;\n  }\n\n  private _isContainDirtyFlags(targetDirtyFlags: number): boolean {\n    return (this._dirtyFlag & targetDirtyFlags) === targetDirtyFlags;\n  }\n\n  private _isContainDirtyFlag(type: number): boolean {\n    return (this._dirtyFlag & type) != 0;\n  }\n\n  private _setDirtyFlagTrue(type: number) {\n    this._dirtyFlag |= type;\n  }\n\n  private _setDirtyFlagFalse(type: number) {\n    this._dirtyFlag &= ~type;\n  }\n\n  private _worldAssociatedChange(type: number): void {\n    this._dirtyFlag |= type;\n    this._updateFlagManager.distribute();\n  }\n}\n\n/**\n * Dirty flag of transform.\n */\nenum TransformFlag {\n  LocalEuler = 0x1,\n  LocalQuat = 0x2,\n  WorldPosition = 0x4,\n  WorldEuler = 0x8,\n  WorldQuat = 0x10,\n  WorldScale = 0x20,\n  LocalMatrix = 0x40,\n  WorldMatrix = 0x80,\n\n  /** WorldMatrix | WorldPosition */\n  WmWp = 0x84,\n  /** WorldMatrix | WorldEuler | WorldQuat */\n  WmWeWq = 0x98,\n  /** WorldMatrix | WorldPosition | WorldEuler | WorldQuat */\n  WmWpWeWq = 0x9c,\n  /** WorldMatrix | WorldScale */\n  WmWs = 0xa0,\n  /** WorldMatrix | WorldPosition | WorldScale */\n  WmWpWs = 0xa4,\n  /** WorldMatrix | WorldPosition | WorldEuler | WorldQuat | WorldScale */\n  WmWpWeWqWs = 0xbc\n}\n","import { ICollider } from \"@galacean/engine-design\";\nimport { Quaternion, Ray, Vector3 } from \"@galacean/engine\";\nimport { LiteHitResult } from \"./LiteHitResult\";\nimport { LiteColliderShape } from \"./shape/LiteColliderShape\";\nimport { LiteTransform } from \"./LiteTransform\";\n\n/**\n * Abstract class of physical collider.\n */\nexport abstract class LiteCollider implements ICollider {\n  /** @internal */\n  abstract readonly _isStaticCollider: boolean;\n\n  /** @internal */\n  _shapes: LiteColliderShape[] = [];\n  /** @internal */\n  _transform: LiteTransform = new LiteTransform();\n\n  protected constructor() {\n    this._transform.owner = this;\n  }\n\n  /**\n   * {@inheritDoc ICollider.addShape }\n   */\n  addShape(shape: LiteColliderShape): void {\n    const oldCollider = shape._collider;\n    if (oldCollider !== this) {\n      if (oldCollider) {\n        oldCollider.removeShape(shape);\n      }\n      this._shapes.push(shape);\n      shape._collider = this;\n    }\n  }\n\n  /**\n   * {@inheritDoc ICollider.removeShape }\n   */\n  removeShape(shape: LiteColliderShape): void {\n    const index = this._shapes.indexOf(shape);\n    if (index !== -1) {\n      this._shapes.splice(index, 1);\n      shape._collider = null;\n    }\n  }\n\n  /**\n   * {@inheritDoc ICollider.setWorldTransform }\n   */\n  setWorldTransform(position: Vector3, rotation: Quaternion): void {\n    this._transform.setPosition(position.x, position.y, position.z);\n    this._transform.setRotationQuaternion(rotation.x, rotation.y, rotation.z, rotation.w);\n  }\n\n  /**\n   * {@inheritDoc ICollider.getWorldTransform }\n   */\n  getWorldTransform(outPosition: Vector3, outRotation: Quaternion): void {\n    const { position, rotationQuaternion } = this._transform;\n    outPosition.set(position.x, position.y, position.z);\n    outRotation.set(rotationQuaternion.x, rotationQuaternion.y, rotationQuaternion.z, rotationQuaternion.w);\n  }\n\n  /**\n   * {@inheritDoc ICollider.destroy }\n   */\n  destroy(): void {}\n\n  /**\n   * @internal\n   */\n  _raycast(ray: Ray, onRaycast: (obj: number) => boolean, hit: LiteHitResult): boolean {\n    hit.distance = Number.MAX_VALUE;\n    const shapes = this._shapes;\n    for (let i = 0, n = shapes.length; i < n; i++) {\n      const shape = shapes[i];\n      onRaycast(shape._id) && shape._raycast(ray, hit);\n    }\n\n    return hit.distance != Number.MAX_VALUE;\n  }\n}\n","import { LiteCollider } from \"./LiteCollider\";\nimport { IDynamicCollider } from \"@galacean/engine-design\";\nimport { Quaternion, Vector3 } from \"@galacean/engine\";\n\n/**\n * A dynamic collider can act with self-defined movement or physical force\n */\nexport class LiteDynamicCollider extends LiteCollider implements IDynamicCollider {\n  /** @internal */\n  readonly _isStaticCollider: boolean = false;\n  /**\n   * Initialize dynamic actor.\n   * @param position - The global position\n   * @param rotation - The global rotation\n   */\n  constructor(position: Vector3, rotation: Quaternion) {\n    super();\n    this._transform.setPosition(position.x, position.y, position.z);\n    this._transform.setRotationQuaternion(rotation.x, rotation.y, rotation.z, rotation.w);\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.addForce }\n   */\n  addForce(force: Vector3): void {\n    throw \"Physics-lite don't support addForce. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.addTorque }\n   */\n  addTorque(torque: Vector3): void {\n    throw \"Physics-lite don't support addTorque. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.move }\n   */\n  move(positionOrRotation: Vector3 | Quaternion, rotation?: Quaternion): void {\n    throw \"Physics-lite don't support move. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.sleep }\n   */\n  sleep(): void {\n    throw \"Physics-lite don't support putToSleep. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setAngularDamping }\n   */\n  setAngularDamping(value: number): void {\n    throw \"Physics-lite don't support setAngularDamping. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setAngularVelocity }\n   */\n  setAngularVelocity(value: Vector3): void {\n    throw \"Physics-lite don't support setAngularVelocity. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setCenterOfMass }\n   */\n  setCenterOfMass(value: Vector3): void {\n    throw \"Physics-lite don't support setCenterOfMass. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setCollisionDetectionMode }\n   */\n  setCollisionDetectionMode(value: number): void {\n    throw \"Physics-lite don't support setCollisionDetectionMode. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setConstraints }\n   */\n  setConstraints(flags: number): void {\n    throw \"Physics-lite don't support setConstraints. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setInertiaTensor }\n   */\n  setInertiaTensor(value: Vector3): void {\n    throw \"Physics-lite don't support setInertiaTensor. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setIsKinematic }\n   */\n  setIsKinematic(value: boolean): void {\n    throw \"Physics-lite don't support setIsKinematic. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setLinearDamping }\n   */\n  setLinearDamping(value: number): void {\n    throw \"Physics-lite don't support setLinearDamping. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setLinearVelocity }\n   */\n  setLinearVelocity(value: Vector3): void {\n    throw \"Physics-lite don't support setLinearVelocity. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setMass }\n   */\n  setMass(value: number): void {\n    throw \"Physics-lite don't support setMass. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setMaxAngularVelocity }\n   */\n  setMaxAngularVelocity(value: number): void {\n    throw \"Physics-lite don't support setMaxAngularVelocity. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setMaxDepenetrationVelocity }\n   */\n  setMaxDepenetrationVelocity(value: number): void {\n    throw \"Physics-lite don't support setMaxDepenetrationVelocity. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setSleepThreshold }\n   */\n  setSleepThreshold(value: number): void {\n    throw \"Physics-lite don't support setSleepThreshold. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setSolverIterations }\n   */\n  setSolverIterations(value: number): void {\n    throw \"Physics-lite don't support setSolverIterations. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.wakeUp }\n   */\n  wakeUp(): void {\n    throw \"Physics-lite don't support wakeUp. Use Physics-PhysX instead!\";\n  }\n}\n","import { IPhysicsMaterial } from \"@galacean/engine-design\";\n\n/**\n * Physics material describes how to handle colliding objects (friction, bounciness).\n */\nexport class LitePhysicsMaterial implements IPhysicsMaterial {\n  constructor(\n    staticFriction: number,\n    dynamicFriction: number,\n    bounciness: number,\n    frictionCombine: number,\n    bounceCombine: number\n  ) {}\n\n  /**\n   * {@inheritDoc IPhysicsMaterial.setBounciness }\n   */\n  setBounciness(value: number): void {\n    throw \"Physics-lite don't support physics material. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IPhysicsMaterial.setDynamicFriction }\n   */\n  setDynamicFriction(value: number): void {\n    throw \"Physics-lite don't support physics material. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IPhysicsMaterial.setStaticFriction }\n   */\n  setStaticFriction(value: number): void {\n    throw \"Physics-lite don't support physics material. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IPhysicsMaterial.setBounceCombine }\n   */\n  setBounceCombine(value: number): void {\n    throw \"Physics-lite don't support physics material. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IPhysicsMaterial.setFrictionCombine }\n   */\n  setFrictionCombine(value: number): void {\n    throw \"Physics-lite don't support physics material. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IPhysicsMaterial.destroy }\n   */\n  destroy(): void {}\n}\n","import { Vector3 } from \"@galacean/engine\";\n\n/**\n * Structure used to get information back from a raycast or a sweep.\n * @internal\n */\nexport class LiteHitResult {\n  /** The collider that was hit. */\n  shapeID: number = -1;\n  /** The distance from the origin to the hit point. */\n  distance: number = 0;\n  /** The hit point of the collider that was hit in world space. */\n  point: Vector3 = new Vector3();\n  /** The hit normal of the collider that was hit in world space. */\n  normal: Vector3 = new Vector3();\n}\n","import { BoundingBox, Ray, Vector3 } from \"@galacean/engine\";\nimport { IBoxColliderShape } from \"@galacean/engine-design\";\nimport { LiteHitResult } from \"../LiteHitResult\";\nimport { LitePhysicsMaterial } from \"../LitePhysicsMaterial\";\nimport { LiteColliderShape } from \"./LiteColliderShape\";\n\n/**\n * Box collider shape in Lite.\n */\nexport class LiteBoxColliderShape extends LiteColliderShape implements IBoxColliderShape {\n  private static _tempBox: BoundingBox = new BoundingBox();\n  private _halfSize: Vector3 = new Vector3();\n  private _sizeScale: Vector3 = new Vector3(1, 1, 1);\n\n  /** @internal */\n  _boxMin: Vector3 = new Vector3(-0.5, -0.5, -0.5);\n  /** @internal */\n  _boxMax: Vector3 = new Vector3(0.5, 0.5, 0.5);\n\n  /**\n   * Init Box Shape.\n   * @param uniqueID - UniqueID mark Shape.\n   * @param size - Size of Shape.\n   * @param material - Material of PhysXCollider.\n   */\n  constructor(uniqueID: number, size: Vector3, material: LitePhysicsMaterial) {\n    super();\n    this._id = uniqueID;\n    this._halfSize.set(size.x * 0.5, size.y * 0.5, size.z * 0.5);\n    this._setBondingBox();\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.setPosition }\n   */\n  override setPosition(position: Vector3): void {\n    super.setPosition(position);\n    this._setBondingBox();\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.setWorldScale }\n   */\n  override setWorldScale(scale: Vector3): void {\n    super.setWorldScale(scale);\n    this._sizeScale.set(Math.abs(scale.x), Math.abs(scale.y), Math.abs(scale.z));\n    this._setBondingBox();\n  }\n\n  /**\n   * {@inheritDoc IBoxColliderShape.setSize }\n   */\n  setSize(value: Vector3): void {\n    this._halfSize.set(value.x * 0.5, value.y * 0.5, value.z * 0.5);\n    this._setBondingBox();\n  }\n\n  /**\n   * @internal\n   */\n  _raycast(ray: Ray, hit: LiteHitResult): boolean {\n    const localRay = this._getLocalRay(ray);\n    const sizeScale = this._sizeScale;\n    const halfSize = this._halfSize;\n    const boundingBox = LiteBoxColliderShape._tempBox;\n    boundingBox.min.set(-halfSize.x * sizeScale.x, -halfSize.y * sizeScale.y, -halfSize.z * sizeScale.z);\n    boundingBox.max.set(halfSize.x * sizeScale.x, halfSize.y * sizeScale.y, halfSize.z * sizeScale.z);\n    const rayDistance = localRay.intersectBox(boundingBox);\n    if (rayDistance !== -1) {\n      this._updateHitResult(localRay, rayDistance, hit, ray.origin);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  private _setBondingBox(): void {\n    const { position } = this._transform;\n    const scale = this._sizeScale;\n    const halfSize = this._halfSize;\n\n    this._boxMin.set(\n      -halfSize.x * scale.x + position.x,\n      -halfSize.y * scale.y + position.y,\n      -halfSize.z * scale.z + position.z\n    );\n    this._boxMax.set(\n      halfSize.x * scale.x + position.x,\n      halfSize.y * scale.y + position.y,\n      halfSize.z * scale.z + position.z\n    );\n  }\n}\n","import { ISphereColliderShape } from \"@galacean/engine-design\";\nimport { LiteColliderShape } from \"./LiteColliderShape\";\nimport { BoundingSphere, Quaternion, Ray, Vector3 } from \"@galacean/engine\";\nimport { LiteHitResult } from \"../LiteHitResult\";\nimport { LitePhysicsMaterial } from \"../LitePhysicsMaterial\";\n\n/**\n * Sphere collider shape in Lite.\n */\nexport class LiteSphereColliderShape extends LiteColliderShape implements ISphereColliderShape {\n  private static _tempSphere: BoundingSphere = new BoundingSphere();\n\n  private _radius: number = 1;\n  private _maxScale: number = 1;\n\n  get worldRadius(): number {\n    return this._radius * this._maxScale;\n  }\n\n  /**\n   * Init sphere shape.\n   * @param uniqueID - UniqueID mark collider\n   * @param radius - Size of SphereCollider\n   * @param material - Material of PhysXCollider\n   */\n  constructor(uniqueID: number, radius: number, material: LitePhysicsMaterial) {\n    super();\n    this._radius = radius;\n    this._id = uniqueID;\n  }\n\n  /**\n   * {@inheritDoc ISphereColliderShape.setRadius }\n   */\n  setRadius(value: number): void {\n    this._radius = value;\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.setWorldScale }\n   */\n  override setWorldScale(scale: Vector3): void {\n    super.setWorldScale(scale);\n    this._maxScale = Math.max(Math.abs(scale.x), Math.abs(scale.y), Math.abs(scale.z));\n  }\n\n  /**\n   * @internal\n   */\n  _raycast(ray: Ray, hit: LiteHitResult): boolean {\n    const boundingSphere = LiteSphereColliderShape._tempSphere;\n    Vector3.transformCoordinate(this._transform.position, this._collider._transform.worldMatrix, boundingSphere.center);\n    boundingSphere.radius = this.worldRadius;\n\n    const rayDistance = ray.intersectSphere(boundingSphere);\n    if (rayDistance !== -1) {\n      this._updateHitResult(ray, rayDistance, hit, ray.origin, true);\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n","import { BoundingBox, BoundingSphere, CollisionUtil, DisorderedArray, Ray, Vector3 } from \"@galacean/engine\";\nimport { ICharacterController, IPhysicsScene } from \"@galacean/engine-design\";\nimport { LiteCollider } from \"./LiteCollider\";\nimport { LiteDynamicCollider } from \"./LiteDynamicCollider\";\nimport { LiteHitResult } from \"./LiteHitResult\";\nimport { LiteStaticCollider } from \"./LiteStaticCollider\";\nimport { LiteBoxColliderShape } from \"./shape/LiteBoxColliderShape\";\nimport { LiteColliderShape } from \"./shape/LiteColliderShape\";\nimport { LiteSphereColliderShape } from \"./shape/LiteSphereColliderShape\";\n\n/**\n * A manager is a collection of colliders and constraints which can interact.\n */\nexport class LitePhysicsScene implements IPhysicsScene {\n  private static _tempSphere: BoundingSphere = new BoundingSphere();\n  private static _tempBox: BoundingBox = new BoundingBox();\n  private static _currentHit: LiteHitResult = new LiteHitResult();\n  private static _hitResult: LiteHitResult = new LiteHitResult();\n\n  private readonly _onContactEnter?: (obj1: number, obj2: number) => void;\n  private readonly _onContactExit?: (obj1: number, obj2: number) => void;\n  private readonly _onContactStay?: (obj1: number, obj2: number) => void;\n  private readonly _onTriggerEnter?: (obj1: number, obj2: number) => void;\n  private readonly _onTriggerExit?: (obj1: number, obj2: number) => void;\n  private readonly _onTriggerStay?: (obj1: number, obj2: number) => void;\n\n  private _staticColliders: LiteStaticCollider[] = [];\n  private _dynamicColliders: LiteDynamicCollider[] = [];\n  private _sphere: BoundingSphere = new BoundingSphere();\n  private _box: BoundingBox = new BoundingBox();\n\n  private _currentEvents: DisorderedArray<TriggerEvent> = new DisorderedArray<TriggerEvent>();\n  private _eventMap: Record<number, Record<number, TriggerEvent>> = {};\n  private _eventPool: TriggerEvent[] = [];\n\n  constructor(\n    onContactEnter?: (obj1: number, obj2: number) => void,\n    onContactExit?: (obj1: number, obj2: number) => void,\n    onContactStay?: (obj1: number, obj2: number) => void,\n    onTriggerEnter?: (obj1: number, obj2: number) => void,\n    onTriggerExit?: (obj1: number, obj2: number) => void,\n    onTriggerStay?: (obj1: number, obj2: number) => void\n  ) {\n    this._onContactEnter = onContactEnter;\n    this._onContactExit = onContactExit;\n    this._onContactStay = onContactStay;\n    this._onTriggerEnter = onTriggerEnter;\n    this._onTriggerExit = onTriggerExit;\n    this._onTriggerStay = onTriggerStay;\n  }\n\n  /**\n   * {@inheritDoc IPhysicsManager.setGravity }\n   */\n  setGravity(value: Vector3): void {\n    console.log(\"Physics-lite don't support gravity. Use Physics-PhysX instead!\");\n  }\n\n  /**\n   * {@inheritDoc IPhysicsManager.addColliderShape }\n   */\n  addColliderShape(colliderShape: LiteColliderShape): void {\n    this._eventMap[colliderShape._id] = {};\n  }\n\n  /**\n   * {@inheritDoc IPhysicsManager.removeColliderShape }\n   */\n  removeColliderShape(colliderShape: LiteColliderShape): void {\n    const { _eventPool: eventPool, _currentEvents: currentEvents, _eventMap: eventMap } = this;\n    const { _id: id } = colliderShape;\n    currentEvents.forEach((event, i) => {\n      if (event.index1 == id) {\n        currentEvents.deleteByIndex(i);\n        eventPool.push(event);\n      } else if (event.index2 == id) {\n        currentEvents.deleteByIndex(i);\n        eventPool.push(event);\n        // If the shape is big index, should clear from the small index shape subMap\n        eventMap[event.index1][id] = undefined;\n      }\n    });\n    delete eventMap[id];\n  }\n\n  /**\n   * {@inheritDoc IPhysicsManager.addCollider }\n   */\n  addCollider(actor: LiteCollider): void {\n    const colliders = actor._isStaticCollider ? this._staticColliders : this._dynamicColliders;\n    colliders.push(actor);\n  }\n\n  /**\n   * {@inheritDoc IPhysicsManager.removeCollider }\n   */\n  removeCollider(collider: LiteCollider): void {\n    const colliders = collider._isStaticCollider ? this._staticColliders : this._dynamicColliders;\n    const index = colliders.indexOf(collider);\n    if (index !== -1) {\n      colliders.splice(index, 1);\n    }\n  }\n\n  /**\n   * {@inheritDoc IPhysicsManager.update }\n   */\n  update(deltaTime: number): void {\n    const dynamicColliders = this._dynamicColliders;\n    for (let i = 0, len = dynamicColliders.length; i < len; i++) {\n      const collider = dynamicColliders[i];\n      this._collisionDetection(collider, this._staticColliders);\n      this._collisionDetection(collider, dynamicColliders);\n    }\n    this._fireEvent();\n  }\n\n  /**\n   * {@inheritDoc IPhysicsManager.raycast }\n   */\n  raycast(\n    ray: Ray,\n    distance: number,\n    onRaycast: (obj: number) => boolean,\n    hit?: (shapeUniqueID: number, distance: number, position: Vector3, normal: Vector3) => void\n  ): boolean {\n    if (!hit) {\n      return (\n        this._raycast(ray, distance, onRaycast, this._staticColliders, hit) ||\n        this._raycast(ray, distance, onRaycast, this._dynamicColliders, hit)\n      );\n    } else {\n      const raycastStaticRes = this._raycast(ray, distance, onRaycast, this._staticColliders, hit);\n\n      if (raycastStaticRes) {\n        distance = LitePhysicsScene._currentHit.distance;\n      }\n\n      const raycastDynamicRes = this._raycast(ray, distance, onRaycast, this._dynamicColliders, hit);\n      const isHit = raycastStaticRes || raycastDynamicRes;\n      const hitResult = LitePhysicsScene._hitResult;\n\n      if (!isHit) {\n        hitResult.shapeID = -1;\n        hitResult.distance = 0;\n        hitResult.point.set(0, 0, 0);\n        hitResult.normal.set(0, 0, 0);\n      } else {\n        hit(hitResult.shapeID, hitResult.distance, hitResult.point, hitResult.normal);\n      }\n      return isHit;\n    }\n  }\n\n  /**\n   * {@inheritDoc IPhysicsManager.addCharacterController }\n   */\n  addCharacterController(characterController: ICharacterController): void {\n    throw \"Physics-lite don't support addCharacterController. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IPhysicsManager.removeCharacterController }\n   */\n  removeCharacterController(characterController: ICharacterController): void {\n    throw \"Physics-lite don't support removeCharacterController. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * Calculate the bounding box in world space from boxCollider.\n   * @param boxCollider - The boxCollider to calculate\n   * @param out - The calculated boundingBox\n   */\n  private static _updateWorldBox(boxCollider: LiteBoxColliderShape, out: BoundingBox): void {\n    const mat = boxCollider._transform.worldMatrix;\n    out.min.copyFrom(boxCollider._boxMin);\n    out.max.copyFrom(boxCollider._boxMax);\n    BoundingBox.transform(out, mat, out);\n  }\n\n  /**\n   * Get the sphere info of the given sphere collider in world space.\n   * @param sphereCollider - The given sphere collider\n   * @param out - The calculated boundingSphere\n   */\n  private static _upWorldSphere(sphereCollider: LiteSphereColliderShape, out: BoundingSphere): void {\n    Vector3.transformCoordinate(sphereCollider._transform.position, sphereCollider._transform.worldMatrix, out.center);\n    out.radius = sphereCollider.worldRadius;\n  }\n\n  private _getTrigger(index1: number, index2: number): TriggerEvent {\n    let event: TriggerEvent;\n    if (this._eventPool.length) {\n      event = this._eventPool.pop();\n      event.index1 = index1;\n      event.index2 = index2;\n    } else {\n      event = new TriggerEvent(index1, index2);\n    }\n    this._eventMap[index1][index2] = event;\n    return event;\n  }\n\n  private _collisionDetection(myCollider: LiteCollider, colliders: LiteCollider[]): void {\n    const myColliderShapes = myCollider._shapes;\n    for (let i = 0, len = myColliderShapes.length; i < len; i++) {\n      const myShape = myColliderShapes[i];\n      if (myShape instanceof LiteBoxColliderShape) {\n        LitePhysicsScene._updateWorldBox(myShape, this._box);\n        for (let j = 0, len = colliders.length; j < len; j++) {\n          const colliderShape = colliders[j]._shapes;\n          for (let k = 0, len = colliderShape.length; k < len; k++) {\n            const shape = colliderShape[k];\n            const index1 = shape._id;\n            const index2 = myShape._id;\n            const event = index1 < index2 ? this._eventMap[index1][index2] : this._eventMap[index2][index1];\n            if (event !== undefined && !event.alreadyInvoked) {\n              continue;\n            }\n            if (shape != myShape && this._boxCollision(shape)) {\n              if (event === undefined) {\n                const event = index1 < index2 ? this._getTrigger(index1, index2) : this._getTrigger(index2, index1);\n                event.state = TriggerEventState.Enter;\n                event.alreadyInvoked = false;\n                this._currentEvents.add(event);\n              } else if (event.state === TriggerEventState.Enter) {\n                event.state = TriggerEventState.Stay;\n                event.alreadyInvoked = false;\n              } else if (event.state === TriggerEventState.Stay) {\n                event.alreadyInvoked = false;\n              }\n            }\n          }\n        }\n      } else if (myShape instanceof LiteSphereColliderShape) {\n        LitePhysicsScene._upWorldSphere(myShape, this._sphere);\n        for (let j = 0, len = colliders.length; j < len; j++) {\n          const colliderShape = colliders[j]._shapes;\n          for (let k = 0, len = colliderShape.length; k < len; k++) {\n            const shape = colliderShape[k];\n            const index1 = shape._id;\n            const index2 = myShape._id;\n            const event = index1 < index2 ? this._eventMap[index1][index2] : this._eventMap[index2][index1];\n            if (event !== undefined && !event.alreadyInvoked) {\n              continue;\n            }\n            if (shape != myShape && this._sphereCollision(shape)) {\n              if (event === undefined) {\n                const event = index1 < index2 ? this._getTrigger(index1, index2) : this._getTrigger(index2, index1);\n                event.state = TriggerEventState.Enter;\n                event.alreadyInvoked = false;\n                this._currentEvents.add(event);\n              } else if (event.state === TriggerEventState.Enter) {\n                event.state = TriggerEventState.Stay;\n                event.alreadyInvoked = false;\n              } else if (event.state === TriggerEventState.Stay) {\n                event.alreadyInvoked = false;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private _fireEvent(): void {\n    const { _eventPool: eventPool, _currentEvents: currentEvents } = this;\n    currentEvents.forEach((event, i) => {\n      if (!event.alreadyInvoked) {\n        if (event.state == TriggerEventState.Enter) {\n          this._onTriggerEnter(event.index1, event.index2);\n          event.alreadyInvoked = true;\n        } else if (event.state == TriggerEventState.Stay) {\n          this._onTriggerStay(event.index1, event.index2);\n          event.alreadyInvoked = true;\n        }\n      } else {\n        event.state = TriggerEventState.Exit;\n        this._eventMap[event.index1][event.index2] = undefined;\n\n        currentEvents.deleteByIndex(i);\n        this._onTriggerExit(event.index1, event.index2);\n        eventPool.push(event);\n      }\n    });\n  }\n\n  private _boxCollision(other: LiteColliderShape): boolean {\n    if (other instanceof LiteBoxColliderShape) {\n      const box = LitePhysicsScene._tempBox;\n      LitePhysicsScene._updateWorldBox(other, box);\n      return CollisionUtil.intersectsBoxAndBox(box, this._box);\n    } else if (other instanceof LiteSphereColliderShape) {\n      const sphere = LitePhysicsScene._tempSphere;\n      LitePhysicsScene._upWorldSphere(other, sphere);\n      return CollisionUtil.intersectsSphereAndBox(sphere, this._box);\n    }\n    return false;\n  }\n\n  private _sphereCollision(other: LiteColliderShape): boolean {\n    if (other instanceof LiteBoxColliderShape) {\n      const box = LitePhysicsScene._tempBox;\n      LitePhysicsScene._updateWorldBox(other, box);\n      return CollisionUtil.intersectsSphereAndBox(this._sphere, box);\n    } else if (other instanceof LiteSphereColliderShape) {\n      const sphere = LitePhysicsScene._tempSphere;\n      LitePhysicsScene._upWorldSphere(other, sphere);\n      return CollisionUtil.intersectsSphereAndSphere(sphere, this._sphere);\n    }\n    return false;\n  }\n\n  private _raycast(\n    ray: Ray,\n    distance: number,\n    onRaycast: (obj: number) => boolean,\n    colliders: LiteCollider[],\n    hit?: (shapeUniqueID: number, distance: number, position: Vector3, normal: Vector3) => void\n  ): boolean {\n    let isHit = false;\n    const curHit = LitePhysicsScene._currentHit;\n    for (let i = 0, len = colliders.length; i < len; i++) {\n      if (colliders[i]._raycast(ray, onRaycast, curHit) && curHit.distance < distance) {\n        if (hit) {\n          isHit = true;\n          const hitResult = LitePhysicsScene._hitResult;\n          hitResult.normal.copyFrom(curHit.normal);\n          hitResult.point.copyFrom(curHit.point);\n          hitResult.distance = distance = curHit.distance;\n          hitResult.shapeID = curHit.shapeID;\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return isHit;\n  }\n}\n\n/**\n * Physics state\n */\nenum TriggerEventState {\n  Enter,\n  Stay,\n  Exit\n}\n\n/**\n * Trigger event to store interactive object ids and state.\n */\nclass TriggerEvent {\n  state: TriggerEventState;\n  index1: number;\n  index2: number;\n  alreadyInvoked: boolean = false;\n\n  constructor(index1: number, index2: number) {\n    this.index1 = index1;\n    this.index2 = index2;\n  }\n}\n","import { IStaticCollider } from \"@galacean/engine-design\";\nimport { LiteCollider } from \"./LiteCollider\";\nimport { Quaternion, Vector3 } from \"@galacean/engine\";\n\n/**\n * A static collider component that will not move.\n * @remarks Mostly used for object which always stays at the same place and never moves around.\n */\nexport class LiteStaticCollider extends LiteCollider implements IStaticCollider {\n  /** @internal */\n  readonly _isStaticCollider: boolean = true;\n  /**\n   * Initialize static actor.\n   * @param position - The global position\n   * @param rotation - The global rotation\n   */\n  constructor(position: Vector3, rotation: Quaternion) {\n    super();\n    this._transform.setPosition(position.x, position.y, position.z);\n    this._transform.setRotationQuaternion(rotation.x, rotation.y, rotation.z, rotation.w);\n  }\n}\n","import { Quaternion, Vector3 } from \"@galacean/engine\";\nimport {\n  IBoxColliderShape,\n  ICapsuleColliderShape,\n  ICharacterController,\n  IDynamicCollider,\n  IFixedJoint,\n  IHingeJoint,\n  IPhysics,\n  IPhysicsManager,\n  IPhysicsMaterial,\n  IPlaneColliderShape,\n  ISphereColliderShape,\n  ISpringJoint,\n  IStaticCollider\n} from \"@galacean/engine-design\";\nimport { LiteCollider } from \"./LiteCollider\";\nimport { LiteDynamicCollider } from \"./LiteDynamicCollider\";\nimport { LitePhysicsMaterial } from \"./LitePhysicsMaterial\";\nimport { LitePhysicsScene } from \"./LitePhysicsScene\";\nimport { LiteStaticCollider } from \"./LiteStaticCollider\";\nimport { LiteBoxColliderShape } from \"./shape/LiteBoxColliderShape\";\nimport { LiteSphereColliderShape } from \"./shape/LiteSphereColliderShape\";\nimport { LitePhysicsManager } from \"./LitePhysicsManager\";\n\nexport class LitePhysics implements IPhysics {\n  /**\n   * {@inheritDoc IPhysics.initialize }\n   */\n  initialize(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createPhysicsManager }\n   */\n  createPhysicsManager(): IPhysicsManager {\n    return null;\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createPhysicsScene }\n   */\n  createPhysicsScene(\n    physicsManager: LitePhysicsManager,\n    onContactBegin?: (obj1: number, obj2: number) => void,\n    onContactEnd?: (obj1: number, obj2: number) => void,\n    onContactPersist?: (obj1: number, obj2: number) => void,\n    onTriggerBegin?: (obj1: number, obj2: number) => void,\n    onTriggerEnd?: (obj1: number, obj2: number) => void,\n    onTriggerPersist?: (obj1: number, obj2: number) => void\n  ): LitePhysicsScene {\n    return new LitePhysicsScene(\n      onContactBegin,\n      onContactEnd,\n      onContactPersist,\n      onTriggerBegin,\n      onTriggerEnd,\n      onTriggerPersist\n    );\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createStaticCollider }\n   */\n  createStaticCollider(position: Vector3, rotation: Quaternion): IStaticCollider {\n    return new LiteStaticCollider(position, rotation);\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createDynamicCollider }\n   */\n  createDynamicCollider(position: Vector3, rotation: Quaternion): IDynamicCollider {\n    return new LiteDynamicCollider(position, rotation);\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createCharacterController }\n   */\n  createCharacterController(): ICharacterController {\n    throw \"Physics-lite don't support createCharacterController. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createPhysicsMaterial }\n   */\n  createPhysicsMaterial(\n    staticFriction: number,\n    dynamicFriction: number,\n    bounciness: number,\n    frictionCombine: number,\n    bounceCombine: number\n  ): IPhysicsMaterial {\n    return new LitePhysicsMaterial(staticFriction, dynamicFriction, bounciness, frictionCombine, bounceCombine);\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createBoxColliderShape }\n   */\n  createBoxColliderShape(uniqueID: number, size: Vector3, material: LitePhysicsMaterial): IBoxColliderShape {\n    return new LiteBoxColliderShape(uniqueID, size, material);\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createSphereColliderShape }\n   */\n  createSphereColliderShape(uniqueID: number, radius: number, material: LitePhysicsMaterial): ISphereColliderShape {\n    return new LiteSphereColliderShape(uniqueID, radius, material);\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createPlaneColliderShape }\n   */\n  createPlaneColliderShape(uniqueID: number, material: LitePhysicsMaterial): IPlaneColliderShape {\n    throw \"Physics-lite don't support PlaneColliderShape. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createCapsuleColliderShape }\n   */\n  createCapsuleColliderShape(\n    uniqueID: number,\n    radius: number,\n    height: number,\n    material: LitePhysicsMaterial\n  ): ICapsuleColliderShape {\n    throw \"Physics-lite don't support CapsuleColliderShape. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createFixedJoint }\n   */\n  createFixedJoint(collider: LiteCollider): IFixedJoint {\n    throw \"Physics-lite don't support CapsuleColliderShape. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createHingeJoint }\n   */\n  createHingeJoint(collider: LiteCollider): IHingeJoint {\n    throw \"Physics-lite don't support CapsuleColliderShape. Use Physics-PhysX instead!\";\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createSpringJoint }\n   */\n  createSpringJoint(collider: LiteCollider): ISpringJoint {\n    throw \"Physics-lite don't support CapsuleColliderShape. Use Physics-PhysX instead!\";\n  }\n}\n","export { LitePhysics } from \"./LitePhysics\";\n\n//@ts-ignore\nexport const version = `__buildVersion`;\n\nconsole.log(`Galacean PhysicsLite version: ${version}`);\n"],"names":["LiteUpdateFlag","_flags","flag","push","destroy","Utils","removeFromArray","LiteUpdateFlagManager","_updateFlags","register","distribute","updateFlags","i","length","LiteColliderShape","_position","Vector3","_worldScale","_transform","LiteTransform","_invModelMatrix","Matrix","owner","_inverseWorldMatFlag","registerWorldChangeFlag","setRotation","rotation","console","log","setPosition","position","copyFrom","_setLocalPose","setWorldScale","scale","setContactOffset","offset","setMaterial","material","setUniqueID","id","_id","setIsTrigger","value","_updateHitResult","ray","rayDistance","outHit","origin","isWorldRay","hitPoint","_tempPoint","getPoint","transformCoordinate","worldMatrix","distance","point","shapeID","_getLocalRay","worldToLocal","_getInvModelMatrix","outRay","_ray","transformNormal","direction","normalize","invert","shapePosition","multiply","Ray","_rotation","_rotationQuaternion","Quaternion","_scale","_worldRotationQuaternion","_localMatrix","_worldMatrix","_updateFlagManager","_isParentDirty","_parentTransformCache","_dirtyFlag","x","y","z","set","setRotationQuaternion","w","rotationQuaternion","setScale","_updateWorldPositionFlag","_isContainDirtyFlags","_worldAssociatedChange","_owner","LiteCollider","shapes","_shapes","n","_updateWorldRotationFlag","_updateWorldScaleFlag","_updateAllWorldFlag","_getParentTransform","parentCache","parent","_collider","targetDirtyFlags","_isContainDirtyFlag","type","_setDirtyFlagTrue","_setDirtyFlagFalse","rotationEuler","MathUtil","degreeToRadian","TransformFlag","worldRotationQuaternion","_tempQuat0","localMatrix","affineTransformation","decompose","_tempMat42","addShape","shape","oldCollider","removeShape","index","indexOf","splice","setWorldTransform","getWorldTransform","outPosition","outRotation","_raycast","onRaycast","hit","Number","MAX_VALUE","LiteDynamicCollider","_isStaticCollider","addForce","force","addTorque","torque","move","positionOrRotation","sleep","setAngularDamping","setAngularVelocity","setCenterOfMass","setCollisionDetectionMode","setConstraints","flags","setInertiaTensor","setIsKinematic","setLinearDamping","setLinearVelocity","setMass","setMaxAngularVelocity","setMaxDepenetrationVelocity","setSleepThreshold","setSolverIterations","wakeUp","LitePhysicsMaterial","staticFriction","dynamicFriction","bounciness","frictionCombine","bounceCombine","setBounciness","setDynamicFriction","setStaticFriction","setBounceCombine","setFrictionCombine","LiteHitResult","normal","LiteBoxColliderShape","uniqueID","size","_halfSize","_sizeScale","_boxMin","_boxMax","_setBondingBox","Math","abs","setSize","localRay","sizeScale","halfSize","boundingBox","_tempBox","min","max","intersectBox","BoundingBox","LiteSphereColliderShape","radius","_radius","_maxScale","setRadius","boundingSphere","_tempSphere","center","worldRadius","intersectSphere","BoundingSphere","LitePhysicsScene","onContactEnter","onContactExit","onContactStay","onTriggerEnter","onTriggerExit","onTriggerStay","_staticColliders","_dynamicColliders","_sphere","_box","_currentEvents","DisorderedArray","_eventMap","_eventPool","_onContactEnter","_onContactExit","_onContactStay","_onTriggerEnter","_onTriggerExit","_onTriggerStay","setGravity","addColliderShape","colliderShape","removeColliderShape","eventPool","currentEvents","eventMap","forEach","event","index1","deleteByIndex","index2","undefined","addCollider","actor","colliders","removeCollider","collider","update","deltaTime","dynamicColliders","len","_collisionDetection","_fireEvent","raycast","raycastStaticRes","_currentHit","raycastDynamicRes","isHit","hitResult","_hitResult","addCharacterController","characterController","removeCharacterController","_getTrigger","pop","TriggerEvent","myCollider","myColliderShapes","myShape","_updateWorldBox","j","k","alreadyInvoked","_boxCollision","state","add","_upWorldSphere","_sphereCollision","other","box","CollisionUtil","intersectsBoxAndBox","sphere","intersectsSphereAndBox","intersectsSphereAndSphere","curHit","boxCollider","out","mat","transform","sphereCollider","LiteStaticCollider","LitePhysics","initialize","Promise","resolve","createPhysicsManager","createPhysicsScene","physicsManager","onContactBegin","onContactEnd","onContactPersist","onTriggerBegin","onTriggerEnd","onTriggerPersist","createStaticCollider","createDynamicCollider","createCharacterController","createPhysicsMaterial","createBoxColliderShape","createSphereColliderShape","createPlaneColliderShape","createCapsuleColliderShape","height","createFixedJoint","createHingeJoint","createSpringJoint","version"],"mappings":"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"}