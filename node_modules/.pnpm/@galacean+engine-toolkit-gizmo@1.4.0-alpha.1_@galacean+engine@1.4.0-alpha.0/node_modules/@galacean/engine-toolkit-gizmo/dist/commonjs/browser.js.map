{"version":3,"file":"browser.js","sources":["../../../../node_modules/.pnpm/@swc+helpers@0.5.7/node_modules/@swc/helpers/esm/_create_class.js","../../../../node_modules/.pnpm/@swc+helpers@0.5.7/node_modules/@swc/helpers/esm/_set_prototype_of.js","../../../../node_modules/.pnpm/@swc+helpers@0.5.7/node_modules/@swc/helpers/esm/_inherits.js","../../../../node_modules/.pnpm/@swc+helpers@0.5.7/node_modules/@swc/helpers/esm/_array_like_to_array.js","../../../../node_modules/.pnpm/@swc+helpers@0.5.7/node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js","../../../../node_modules/.pnpm/@swc+helpers@0.5.7/node_modules/@swc/helpers/esm/_create_for_of_iterator_helper_loose.js","../../src/Axis.ts","../../src/enums/GizmoState.ts","../../src/GizmoMeshRestore.ts","../../src/GizmoMesh.ts","../../src/Utils.ts","../../src/Type.ts","../../src/Scale.ts","../../src/Translate.ts","../../src/Rotate.ts","../../src/enums/GroupState.ts","../../src/Group.ts","../../src/Gizmo.ts"],"sourcesContent":["function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","export function _set_prototype_of(o, p) {\n    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {\n        o.__proto__ = p;\n\n        return o;\n    };\n\n    return _set_prototype_of(o, p);\n}\nexport { _set_prototype_of as _ };\n","import { _set_prototype_of } from \"./_set_prototype_of.js\";\n\nexport function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });\n\n    if (superClass) _set_prototype_of(subClass, superClass);\n}\nexport { _inherits as _ };\n","export function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n","import { _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nexport function _create_for_of_iterator_helper_loose(o, allowArrayLike) {\n    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n    if (it) return (it = it.call(o)).next.bind(it);\n    // Fallback for engines without symbol support\n    if (Array.isArray(o) || (it = _unsupported_iterable_to_array(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n        if (it) o = it;\n\n        var i = 0;\n\n        return function() {\n            if (i >= o.length) return { done: true };\n\n            return { done: false, value: o[i++] };\n        };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _create_for_of_iterator_helper_loose as _ };\n","import { Component, Entity, MeshRenderer, Color } from \"@galacean/engine\";\nimport { AxisProps } from \"./Type\";\nimport { PlainColorMaterial } from \"@galacean/engine-toolkit-custom-material\";\n\nexport class Axis extends Component {\n  private _material: PlainColorMaterial;\n  private _color: Color = new Color();\n  private _highLightColor: Color = new Color();\n  private _yellowColor: Color = new Color(1.0, 0.95, 0.0, 1.0);\n  private _grayColor: Color = new Color(0.75, 0.75, 0.75, 0.6);\n\n  constructor(entity: Entity) {\n    super(entity);\n  }\n\n  /** setup axis geometry */\n  initAxis(value: AxisProps): void {\n    this._material = value.axisMaterial;\n    this._color.copyFrom(value.axisMaterial.baseColor);\n\n    this._highLightColor.copyFrom(this._color);\n    this._highLightColor.r = this._highLightColor.r + 0.3;\n    this._highLightColor.g = this._highLightColor.g + 0.3;\n    this._highLightColor.b = this._highLightColor.b + 0.3;\n    this._highLightColor.a = this._highLightColor.a + 0.1;\n\n    // setup visible axis\n    for (let i = 0; i < value.axisMesh.length; i++) {\n      const axisEntity = this.entity.createChild(value.name);\n      axisEntity.transform.rotate(value.axisRotation[i]);\n      axisEntity.transform.translate(value.axisTranslation[i], false);\n      const axisRenderer = axisEntity.addComponent(MeshRenderer);\n      axisRenderer.receiveShadows = false;\n      axisRenderer.castShadows = false;\n      axisRenderer.priority = value.priority ? value.priority : 100;\n      axisRenderer.mesh = value.axisMesh[i];\n      axisRenderer.setMaterial(this._material);\n    }\n\n    // setup invisible axis\n    const gizmoHelperEntity = this.entity.parent.parent.findByName(\"invisible\");\n    for (let i = 0; i < value.axisHelperMesh.length; i++) {\n      const temp = gizmoHelperEntity.createChild(value.name);\n      const axisHelperEntity = temp.createChild(value.name);\n      axisHelperEntity.transform.rotate(value.axisRotation[i]);\n      axisHelperEntity.transform.translate(value.axisTranslation[i], false);\n      const axisHelperRenderer = axisHelperEntity.addComponent(MeshRenderer);\n      axisHelperRenderer.receiveShadows = false;\n      axisHelperRenderer.castShadows = false;\n      axisHelperRenderer.priority = value.priority ? value.priority : 100;\n      axisHelperRenderer.mesh = value.axisHelperMesh[i];\n      axisHelperRenderer.setMaterial(value.axisHelperMaterial);\n    }\n  }\n  /** highlight axis */\n  highLight(): void {\n    this._material.baseColor.copyFrom(this._highLightColor);\n  }\n  /** unhighligh axis */\n  unLight(): void {\n    this._material.baseColor.copyFrom(this._color);\n  }\n  /** change axis color into yellow */\n  yellow(): void {\n    this._material.baseColor.copyFrom(this._yellowColor);\n  }\n  /** change axis color into gray */\n  gray(): void {\n    this._material.baseColor.copyFrom(this._grayColor);\n  }\n  /** recover axis color */\n  recover(): void {\n    this._material.baseColor.copyFrom(this._color);\n  }\n  /** change axis alpha */\n  alpha(v: number): void {\n    this._material.baseColor.a = v;\n  }\n}\n","/**\n * Gizmo State\n */\nexport enum State {\n  /**\n   * translate state\n   */\n  translate = 0x1,\n  /**\n   * rotate state\n   */\n  rotate = 0x2,\n  /**\n   * scale state\n   */\n  scale = 0x4,\n  /**\n   * all state\n   */\n  all = 0xf\n}\n","import { ContentRestorer, ModelMesh, Vector3 } from \"@galacean/engine\";\nimport { GizmoMesh } from \"./GizmoMesh\";\n\n/**\n * @internal\n */\nexport class GizmoMeshRestorer extends ContentRestorer<ModelMesh> {\n  constructor(resource: ModelMesh, public primitiveInfo: GizmoMeshRestoreInfo) {\n    super(resource);\n  }\n\n  /**\n   * @override\n   */\n  restoreContent(): void {\n    const primitiveInfo = this.primitiveInfo;\n    switch (primitiveInfo.type) {\n      case GizmoMeshType.Circle:\n        const circleInfo = <CircleRestoreInfo>primitiveInfo;\n        GizmoMesh.updateCircle(\n          this.resource,\n          circleInfo.startPoint,\n          circleInfo.normal,\n          circleInfo.thetaLength,\n          circleInfo.center\n        );\n        break;\n\n      case GizmoMeshType.CircleTube:\n        const tubeInfo = <CircleTubeRestoreInfo>primitiveInfo;\n        GizmoMesh.updateCircleTube(\n          this.resource,\n          tubeInfo.arc,\n          tubeInfo.radius,\n          tubeInfo.tubeRadius,\n          tubeInfo.tubularSegments,\n          tubeInfo.radialSegments\n        );\n        break;\n\n      case GizmoMeshType.Line:\n        const lineInfo = <LineRestoreInfo>primitiveInfo;\n        GizmoMesh.updateLine(this.resource, lineInfo.points);\n        break;\n    }\n  }\n}\n\nenum GizmoMeshType {\n  Circle,\n  Line,\n  CircleTube\n}\n\n/**\n * @internal\n */\nexport class GizmoMeshRestoreInfo {\n  constructor(public type: GizmoMeshType) {}\n}\n\n/**\n * @internal\n */\nexport class CircleRestoreInfo extends GizmoMeshRestoreInfo {\n  constructor(public startPoint: Vector3, public normal: Vector3, public thetaLength: number, public center: Vector3) {\n    super(GizmoMeshType.Circle);\n  }\n}\n\n/**\n * @internal\n */\nexport class CircleTubeRestoreInfo extends GizmoMeshRestoreInfo {\n  constructor(\n    public arc: number,\n    public radius: number,\n    public tubeRadius: number,\n    public tubularSegments: number,\n    public radialSegments: number\n  ) {\n    super(GizmoMeshType.CircleTube);\n  }\n}\n\n/**\n * @internal\n */\nexport class LineRestoreInfo extends GizmoMeshRestoreInfo {\n  constructor(public points: Array<Vector3>) {\n    super(GizmoMeshType.Line);\n  }\n}\n","import { Engine, MeshTopology, ModelMesh, Quaternion, Vector2, Vector3 } from \"@galacean/engine\";\nimport { CircleRestoreInfo, CircleTubeRestoreInfo, GizmoMeshRestorer, LineRestoreInfo } from \"./GizmoMeshRestore\";\n\nexport class GizmoMesh {\n  private static _tempQuat: Quaternion = new Quaternion();\n  private static _tempVect: Vector3 = new Vector3();\n\n  static createCircle(\n    engine: Engine,\n    center: Vector3 = new Vector3(),\n    normal: Vector3 = new Vector3(0, 0, 1),\n    startPoint: Vector3 = new Vector3(1.6, 0, 0),\n    thetaLength: number = Math.PI / 2\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    GizmoMesh.updateCircle(mesh, startPoint, normal, thetaLength, center);\n    engine.resourceManager.addContentRestorer(\n      new GizmoMeshRestorer(mesh, new CircleRestoreInfo(startPoint, normal, thetaLength, center))\n    );\n    return mesh;\n  }\n\n  static updateCircle(\n    mesh: ModelMesh,\n    startPoint: Vector3 = new Vector3(1.6, 0, 0),\n    normal: Vector3 = new Vector3(0, 0, 1),\n    thetaLength: number = Math.PI / 2,\n    center: Vector3 = new Vector3(),\n    /**\n     * segments per half Pi\n     */\n    segmentFactor: number = 16\n  ) {\n    const newSegments = Math.abs(Math.ceil((segmentFactor * thetaLength) / Math.PI));\n    const segments = Math.max(6, newSegments);\n\n    const indices: Uint16Array = new Uint16Array(segments * 3);\n    const vertices: Array<Vector3> = [];\n\n    // indices\n    for (let i = 1; i <= segments; i++) {\n      const start = (i - 1) * 3;\n      indices[start] = i;\n      indices[start + 1] = i + 1;\n      indices[start + 2] = 0;\n    }\n\n    // vertices\n    vertices.push(center);\n    for (let s = 0; s <= segments; s++) {\n      const segment = (s / segments) * thetaLength;\n      Quaternion.rotationAxisAngle(normal, segment, GizmoMesh._tempQuat);\n      Vector3.transformByQuat(startPoint, GizmoMesh._tempQuat, GizmoMesh._tempVect);\n      vertices[s + 1] = GizmoMesh._tempVect.clone();\n    }\n\n    GizmoMesh._initialize(mesh, vertices, indices, MeshTopology.Triangles);\n  }\n\n  static createCircleTube(\n    engine: Engine,\n    arc: number = Math.PI,\n    radius: number = 1.6,\n    tubeRadius: number = 0.02,\n    tubularSegments: number = 48,\n    radialSegments: number = 6\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    GizmoMesh.updateCircleTube(mesh, arc, radius, tubeRadius, tubularSegments, radialSegments);\n    engine.resourceManager.addContentRestorer(\n      new GizmoMeshRestorer(mesh, new CircleTubeRestoreInfo(arc, radius, tubeRadius, tubularSegments, radialSegments))\n    );\n    return mesh;\n  }\n\n  static updateCircleTube(\n    mesh: ModelMesh,\n    arc: number = Math.PI,\n    radius: number = 1.6,\n    tubeRadius: number = 0.02,\n    tubularSegments: number = 48,\n    radialSegments: number = 6\n  ) {\n    const vertexCount = (radialSegments + 1) * (tubularSegments + 1);\n    const rectangleCount = radialSegments * tubularSegments;\n    const indices: Uint16Array = new Uint16Array(rectangleCount * 6);\n\n    const vertices: Vector3[] = new Array(vertexCount);\n    const normals: Vector3[] = new Array(vertexCount);\n    const uvs: Vector2[] = new Array(vertexCount);\n\n    let offset = 0;\n\n    for (let i = 0; i <= radialSegments; i++) {\n      for (let j = 0; j <= tubularSegments; j++) {\n        const u = (j / tubularSegments) * arc;\n        const v = (i / radialSegments) * Math.PI * 2;\n        const cosV = Math.cos(v);\n        const sinV = Math.sin(v);\n        const cosU = Math.cos(u);\n        const sinU = Math.sin(u);\n\n        const position = new Vector3(\n          (radius + tubeRadius * cosV) * cosU,\n          (radius + tubeRadius * cosV) * sinU,\n          tubeRadius * sinV\n        );\n        vertices[offset] = position;\n\n        const centerX = radius * cosU;\n        const centerY = radius * sinU;\n        normals[offset] = new Vector3(position.x - centerX, position.y - centerY, position.z).normalize();\n\n        uvs[offset++] = new Vector2(j / tubularSegments, i / radialSegments);\n      }\n    }\n\n    offset = 0;\n    for (let i = 1; i <= radialSegments; i++) {\n      for (let j = 1; j <= tubularSegments; j++) {\n        const a = (tubularSegments + 1) * i + j - 1;\n        const b = (tubularSegments + 1) * (i - 1) + j - 1;\n        const c = (tubularSegments + 1) * (i - 1) + j;\n        const d = (tubularSegments + 1) * i + j;\n\n        indices[offset++] = a;\n        indices[offset++] = b;\n        indices[offset++] = d;\n\n        indices[offset++] = b;\n        indices[offset++] = c;\n        indices[offset++] = d;\n      }\n    }\n\n    const { bounds } = mesh;\n    const outerRadius = radius + tubeRadius;\n    bounds.min.set(-outerRadius, -outerRadius, -tubeRadius);\n    bounds.max.set(outerRadius, outerRadius, tubeRadius);\n\n    GizmoMesh._initialize(mesh, vertices, indices, MeshTopology.Triangles, normals, uvs);\n  }\n\n  static createLine(engine: Engine, points: Array<Vector3>): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    GizmoMesh.updateLine(mesh, points);\n    engine.resourceManager.addContentRestorer(new GizmoMeshRestorer(mesh, new LineRestoreInfo(points)));\n    return mesh;\n  }\n\n  static updateLine(mesh: ModelMesh, points: Array<Vector3>) {\n    const vertices: Array<Vector3> = points;\n    const indices: Uint8Array = new Uint8Array(vertices.length);\n\n    for (let i = 0; i < vertices.length; i++) {\n      indices[i] = i;\n    }\n\n    GizmoMesh._initialize(mesh, vertices, indices, MeshTopology.Lines);\n  }\n\n  private static _initialize(\n    mesh: ModelMesh,\n    vertices: Array<Vector3>,\n    indices: Uint16Array | Uint8Array,\n    meshTopology: MeshTopology,\n    normals?: Array<Vector3>,\n    uvs?: Array<Vector2>\n  ) {\n    mesh.setPositions(vertices);\n    mesh.setIndices(indices);\n\n    normals && mesh.setNormals(normals);\n    uvs && mesh.setUVs(uvs);\n\n    mesh.clearSubMesh();\n\n    mesh.uploadData(false);\n    mesh.addSubMesh(0, indices.length, meshTopology);\n  }\n}\n","import { Engine, PrimitiveMesh, ModelMesh, CullMode, Vector3 } from \"@galacean/engine\";\nimport { State } from \"./enums/GizmoState\";\nimport { GizmoMesh } from \"./GizmoMesh\";\nimport { PlainColorMaterial } from \"@galacean/engine-toolkit-custom-material\";\nexport class Utils {\n  static rotateCircleRadius = 1.6;\n  static scaleFactor = 0.05773502691896257;\n\n  static redMaterialTrans: PlainColorMaterial;\n  static lightRedMaterial: PlainColorMaterial;\n  static greenMaterialTrans: PlainColorMaterial;\n  static lightGreenMaterial: PlainColorMaterial;\n  static blueMaterialTrans: PlainColorMaterial;\n  static lightBlueMaterial: PlainColorMaterial;\n  static invisibleMaterialTrans: PlainColorMaterial;\n\n  static redArcMaterial: PlainColorMaterial;\n  static greenArcMaterial: PlainColorMaterial;\n  static blueArcMaterial: PlainColorMaterial;\n  static yellowMaterial: PlainColorMaterial;\n  static rotatePlaneMaterial: PlainColorMaterial;\n  static invisibleMaterialRotate: PlainColorMaterial;\n  static invisibleMaterialCircle: PlainColorMaterial;\n\n  static redMaterialScale: PlainColorMaterial;\n  static greenMaterialScale: PlainColorMaterial;\n  static blueMaterialScale: PlainColorMaterial;\n  static greyMaterial: PlainColorMaterial;\n  static lightMaterial: PlainColorMaterial;\n  static invisibleMaterialScale: PlainColorMaterial;\n\n  static lineMesh: ModelMesh;\n  static lineMeshShort: ModelMesh;\n  static axisXTorusMesh: ModelMesh;\n  static axisYTorusMesh: ModelMesh;\n  static axisZTorusMesh: ModelMesh;\n  static axisXYZTorusMesh: ModelMesh;\n\n  static axisHelpertorusMesh: ModelMesh;\n  static axisHelperLineMesh: ModelMesh;\n  static axisHelperPlaneMesh: ModelMesh;\n  static axisArrowMesh: ModelMesh;\n  static axisPlaneMesh: ModelMesh;\n  static axisCubeMesh: ModelMesh;\n  static axisSphereMesh: ModelMesh;\n  static axisEndCubeMesh: ModelMesh;\n\n  static xAxisPositive: Vector3;\n  static yAxisPositive: Vector3;\n  static zAxisPositive: Vector3;\n\n  static init(engine: Engine) {\n    // translate material\n    Utils.redMaterialTrans = this._createPlainColorMaterial(engine, State.translate, 1.0, 0.25, 0.25, 1.0);\n    Utils.lightRedMaterial = this._createPlainColorMaterial(engine, State.translate, 1.0, 0.25, 0.25, 0.9);\n    Utils.greenMaterialTrans = this._createPlainColorMaterial(engine, State.translate, 0.5, 0.8, 0.2, 1.0);\n    Utils.lightGreenMaterial = this._createPlainColorMaterial(engine, State.translate, 0.5, 0.8, 0.2, 0.9);\n    Utils.blueMaterialTrans = this._createPlainColorMaterial(engine, State.translate, 0.3, 0.5, 1.0, 1.0);\n    Utils.lightBlueMaterial = this._createPlainColorMaterial(engine, State.translate, 0.3, 0.5, 1.0, 0.9);\n    Utils.invisibleMaterialTrans = this._createPlainColorMaterial(engine, State.translate, 0, 0, 0, 0);\n\n    // rotate material\n    Utils.redArcMaterial = this._createPlainColorMaterial(engine, State.rotate, 1.0, 0.25, 0.25);\n    Utils.greenArcMaterial = this._createPlainColorMaterial(engine, State.rotate, 0.5, 0.8, 0.2);\n    Utils.blueArcMaterial = this._createPlainColorMaterial(engine, State.rotate, 0.3, 0.5, 1.0);\n    Utils.yellowMaterial = this._createPlainColorMaterial(engine, State.rotate, 1.0, 0.95, 0.0, 1.0);\n    Utils.rotatePlaneMaterial = this._createPlainColorMaterial(engine, State.rotate, 1.0, 0.95, 0.0, 0.2);\n    Utils.rotatePlaneMaterial.renderState.rasterState.cullMode = CullMode.Off;\n    Utils.invisibleMaterialRotate = this._createPlainColorMaterial(engine, State.rotate, 0, 0, 0, 0);\n    Utils.invisibleMaterialRotate.renderState.rasterState.cullMode = CullMode.Off;\n\n    Utils.invisibleMaterialCircle = this._createPlainColorMaterial(engine, State.rotate, 0, 0, 0, 0);\n\n    // scale material\n    Utils.redMaterialScale = this._createPlainColorMaterial(engine, State.scale, 1.0, 0.25, 0.25, 1.0);\n    Utils.greenMaterialScale = this._createPlainColorMaterial(engine, State.scale, 0.5, 0.8, 0.2, 1.0);\n    Utils.blueMaterialScale = this._createPlainColorMaterial(engine, State.scale, 0.3, 0.5, 1.0, 1.0);\n    Utils.greyMaterial = this._createPlainColorMaterial(engine, State.scale, 0.75, 0.75, 0.75, 1.0);\n\n    Utils.lightMaterial = this._createPlainColorMaterial(engine, State.scale, 0.7, 0.7, 0.7, 1.0);\n\n    Utils.invisibleMaterialScale = this._createPlainColorMaterial(engine, State.scale, 0, 0, 0, 0);\n\n    Utils.lineMesh = PrimitiveMesh.createCylinder(engine, 0.02, 0.02, 1.5);\n    Utils.lineMeshShort = PrimitiveMesh.createCylinder(engine, 0.02, 0.02, 1.3);\n    Utils.axisArrowMesh = PrimitiveMesh.createCone(engine, 0.08, 0.3);\n    Utils.axisPlaneMesh = PrimitiveMesh.createPlane(engine, 0.35, 0.35);\n    Utils.axisCubeMesh = PrimitiveMesh.createCuboid(engine, 0.32, 0.32, 0.32);\n    Utils.axisSphereMesh = PrimitiveMesh.createSphere(engine, 1.8, 48);\n    Utils.axisEndCubeMesh = PrimitiveMesh.createCuboid(engine, 0.25, 0.25, 0.25);\n    Utils.axisXTorusMesh = GizmoMesh.createCircleTube(engine, Math.PI, 1.6, 0.02);\n    Utils.axisYTorusMesh = GizmoMesh.createCircleTube(engine, Math.PI, 1.6, 0.02);\n    Utils.axisZTorusMesh = GizmoMesh.createCircleTube(engine, Math.PI, 1.6, 0.02);\n\n    Utils.axisXYZTorusMesh = GizmoMesh.createCircleTube(engine, 2 * Math.PI, 1.8, 0.02);\n\n    Utils.axisHelperLineMesh = PrimitiveMesh.createCylinder(engine, 0.15, 0.15, 1.75);\n    Utils.axisHelperPlaneMesh = PrimitiveMesh.createPlane(engine, 0.75, 0.75);\n    Utils.axisHelpertorusMesh = GizmoMesh.createCircleTube(engine, Math.PI, 1.6, 0.24);\n\n    Utils.xAxisPositive = new Vector3(-1, 0, 0);\n    Utils.yAxisPositive = new Vector3(0, -1, 0);\n    Utils.zAxisPositive = new Vector3(0, 0, -1);\n  }\n\n  private static _createPlainColorMaterial(\n    engine: Engine,\n    name: State,\n    r: number = 1.0,\n    g: number = 1.0,\n    b: number = 1.0,\n    a: number = 1.0\n  ): PlainColorMaterial {\n    const material = new PlainColorMaterial(engine);\n    material.isTransparent = true;\n    material.renderState.depthState.enabled = false;\n    material.baseColor.set(r, g, b, a);\n    material.name = name.toString();\n    return material;\n  }\n}\n","import { Component, Entity, Ray, Vector3, Mesh, Camera, Plane, ModelMesh, Pointer } from \"@galacean/engine\";\nimport { PlainColorMaterial } from \"@galacean/engine-toolkit-custom-material\";\nimport { State } from \"./enums/GizmoState\";\nimport { Group } from \"./Group\";\n\n/**\n * @internal\n * Gizmo Component\n */\nexport abstract class GizmoComponent extends Component {\n  /** gizmo state */\n  type: State;\n  /** gizmo entity, visible part */\n  gizmoEntity: Entity;\n  /** gizmo entity, invisible part */\n  gizmoHelperEntity: Entity;\n  /** Get group when init gizmo. */\n  abstract init(camera: Camera, group: Group): void;\n  /** Called when pointer enters gizmo. */\n  abstract onHoverStart(axisName: string): void;\n  /** Called when pointer leaves gizmo. */\n  abstract onHoverEnd(): void;\n  /** Called when gizmo starts to move.*/\n  abstract onMoveStart(ray: Ray, axisName: string): void;\n  /** Called when gizmo is moving.*/\n  abstract onMove(ray: Ray, pointer?: Pointer): void;\n  /** Called when gizmo movement ends.*/\n  abstract onMoveEnd(): void;\n  /** Called when gizmo's transform is dirty.*/\n  abstract onUpdate(isModified: boolean): void;\n  /** Called when camera switch between ortho and perps.*/\n  abstract onSwitch(isModified: boolean): void;\n  /** Called when axis alpha needs to be modified.*/\n  abstract onAlphaChange(axisName: string, value: number): void;\n}\n\nexport enum axisType {\n  \"x\" = 0,\n  \"y\" = 1,\n  \"z\" = 2,\n  \"xyz\" = 3,\n  \"xy\" = 4,\n  \"yz\" = 5,\n  \"xz\" = 6\n}\n\nexport const axisVector = [\n  new Vector3(1, 0, 0),\n  new Vector3(0, 1, 0),\n  new Vector3(0, 0, 1),\n  new Vector3(1, 1, 1),\n  new Vector3(1, 1, 0),\n  new Vector3(0, 1, 1),\n  new Vector3(1, 0, 1)\n];\n\nexport const axisPlane = [\n  new Plane(new Vector3(1, 0, 0), 0),\n  new Plane(new Vector3(0, 1, 0), 0),\n  new Plane(new Vector3(0, 0, 1), 0),\n  new Plane(new Vector3(0, 0, 0), 0),\n  new Plane(new Vector3(0, 0, 1), 0),\n  new Plane(new Vector3(1, 0, 0), 0),\n  new Plane(new Vector3(0, 1, 0), 0)\n];\n\nexport interface AxisProps {\n  name: string;\n  axisMesh: Array<ModelMesh>;\n  axisMaterial: PlainColorMaterial;\n  axisHelperMesh: Array<Mesh>;\n  axisHelperMaterial: PlainColorMaterial;\n  axisRotation: Array<Vector3>;\n  axisTranslation: Array<Vector3>;\n  priority?: number;\n}\n","import { Camera, Entity, Plane, Ray, Vector3, Matrix } from \"@galacean/engine\";\n\nimport { Axis } from \"./Axis\";\nimport { Utils } from \"./Utils\";\nimport { Group } from \"./Group\";\nimport { GizmoComponent, AxisProps, axisVector, axisType } from \"./Type\";\nimport { State } from \"./enums/GizmoState\";\n\n/** @internal */\nexport class ScaleControl extends GizmoComponent {\n  private _camera: Camera;\n  private _group: Group;\n  private _scaleFactor: number = 1;\n  private _scaleAxisComponent: Array<Axis> = [];\n  private _scaleControlMap: Array<AxisProps> = [];\n\n  private _selectedAxis: axisType;\n\n  private _preMatrix: Matrix = new Matrix();\n  private _startGroupMatrix: Matrix = new Matrix();\n  private _startInvMatrix: Matrix = new Matrix();\n  private _startPoint: Vector3 = new Vector3();\n  private _factorVec: Vector3 = new Vector3();\n  private _currPoint = new Vector3();\n  private _plane: Plane = new Plane();\n\n  private _tempVec0: Vector3 = new Vector3();\n  private _tempVec1: Vector3 = new Vector3();\n  private _tempVec2: Vector3 = new Vector3();\n  private _tempMat: Matrix = new Matrix();\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.type = State.scale;\n    this._initAxis();\n    this._createAxis(entity);\n  }\n\n  init(camera: Camera, group: Group): void {\n    this._camera = camera;\n    this._group = group;\n  }\n\n  onHoverStart(axisName: string): void {\n    if (this._selectedAxis === axisType[axisName]) return;\n    this.onHoverEnd();\n\n    this._selectedAxis = axisType[axisName];\n    const currEntity = this.gizmoEntity.findByName(axisName);\n    const currComponent = currEntity.getComponent(Axis);\n    currComponent.highLight && currComponent.highLight();\n  }\n\n  onHoverEnd(): void {\n    const axesEntity = this.gizmoEntity.children;\n    for (let entity of axesEntity) {\n      const component = entity.getComponent(Axis);\n      component.unLight && component.unLight();\n    }\n\n    this._selectedAxis = null;\n  }\n\n  onMoveStart(ray: Ray, axisName: string): void {\n    this._selectedAxis = axisType[axisName];\n    // get gizmo start worldPosition\n    this._group.getWorldMatrix(this._startGroupMatrix);\n    this._preMatrix.copyFrom(this._startGroupMatrix);\n    Matrix.invert(this._startGroupMatrix, this._startInvMatrix);\n    const { _startPoint, _scaleFactor } = this;\n\n    // get start point\n    this._getHitPlane();\n    this._calRayIntersection(ray, this._startPoint);\n    const localAxis = axisVector[this._selectedAxis];\n    this._factorVec.set(\n      _startPoint.x === 0 ? 0 : (_scaleFactor * localAxis.x) / _startPoint.x,\n      _startPoint.y === 0 ? 0 : (_scaleFactor * localAxis.y) / _startPoint.y,\n      _startPoint.z === 0 ? 0 : (_scaleFactor * localAxis.z) / _startPoint.z\n    );\n\n    // change axis color\n    const entityArray = this.gizmoEntity.children;\n    for (let i = 0; i < entityArray.length; i++) {\n      const currEntity = entityArray[i];\n      const currComponent = currEntity.getComponent(Axis);\n      if (axisType[currEntity.name] === this._selectedAxis) {\n        currComponent.yellow && currComponent.yellow();\n      } else {\n        currComponent.gray && currComponent.gray();\n      }\n    }\n  }\n\n  onMove(ray: Ray): void {\n    // transform ray to local space\n    this._calRayIntersection(ray, this._currPoint);\n    const { _factorVec: factorVec, _tempVec0: scaleVec, _tempMat: mat } = this;\n    Vector3.subtract(this._currPoint, this._startPoint, scaleVec);\n\n    switch (this._selectedAxis) {\n      case axisType.x:\n      case axisType.y:\n      case axisType.z:\n        scaleVec.x = scaleVec.x * factorVec.x + 1;\n        scaleVec.y = scaleVec.y * factorVec.y + 1;\n        scaleVec.z = scaleVec.z * factorVec.z + 1;\n        break;\n      case axisType.xyz:\n        const start = this._startPoint.length();\n        const end = this._currPoint.length();\n\n        scaleVec.x = end / start;\n        scaleVec.y = end / start;\n        scaleVec.z = end / start;\n        break;\n    }\n\n    Matrix.scale(this._startGroupMatrix, scaleVec, mat);\n    this._group.applyTransform(this._preMatrix, mat);\n    this._preMatrix.copyFrom(mat);\n    this.engine.dispatch(\"gizmo-move\", \"scale\");\n  }\n\n  onMoveEnd(): void {\n    const entityArray = this.gizmoEntity.children;\n    for (let i = 0; i < entityArray.length; i++) {\n      const currEntity = entityArray[i];\n      const currComponent = currEntity.getComponent(Axis);\n      currComponent.recover && currComponent.recover();\n    }\n  }\n\n  onUpdate(isModified: boolean = false): void {\n    this._resizeControl(isModified);\n  }\n\n  onSwitch(isModified: boolean = false) {\n    this._resizeControl(isModified);\n  }\n\n  onAlphaChange(axisName: string, value: number): void {\n    const entity = this.gizmoEntity.findByName(axisName);\n    if (entity) {\n      const component = entity.getComponent(Axis);\n      component.alpha(value);\n    }\n  }\n\n  private _initAxis(): void {\n    this._scaleControlMap = [\n      {\n        name: \"x\",\n        axisMesh: [Utils.lineMeshShort, Utils.axisEndCubeMesh],\n        axisMaterial: Utils.redMaterialScale,\n        axisHelperMesh: [Utils.axisHelperLineMesh],\n        axisHelperMaterial: Utils.invisibleMaterialScale,\n        axisRotation: [new Vector3(0, 0, -90), new Vector3(0, 0, -90)],\n        axisTranslation: [new Vector3(0.75, 0, 0), new Vector3(1.5, 0, 0)],\n        priority: 102\n      },\n      {\n        name: \"y\",\n        axisMesh: [Utils.lineMeshShort, Utils.axisEndCubeMesh],\n        axisMaterial: Utils.greenMaterialScale,\n        axisHelperMesh: [Utils.axisHelperLineMesh],\n        axisHelperMaterial: Utils.invisibleMaterialScale,\n        axisRotation: [new Vector3(0, 90, 0), new Vector3(0, 0, 0)],\n        axisTranslation: [new Vector3(0, 0.75, 0), new Vector3(0, 1.5, 0)],\n        priority: 102\n      },\n      {\n        name: \"z\",\n        axisMesh: [Utils.lineMeshShort, Utils.axisEndCubeMesh],\n        axisMaterial: Utils.blueMaterialScale,\n        axisHelperMesh: [Utils.axisHelperLineMesh],\n        axisHelperMaterial: Utils.invisibleMaterialScale,\n        axisRotation: [new Vector3(0, 90, 90), new Vector3(0, 90, 90)],\n        axisTranslation: [new Vector3(0, 0, 0.75), new Vector3(0, 0, 1.5)],\n        priority: 102\n      },\n      {\n        name: \"xyz\",\n        axisMesh: [Utils.axisCubeMesh],\n        axisMaterial: Utils.greyMaterial,\n        axisHelperMesh: [Utils.axisCubeMesh],\n        axisHelperMaterial: Utils.invisibleMaterialScale,\n        axisRotation: [new Vector3(0, 0, 0)],\n        axisTranslation: [new Vector3(0, 0, 0)],\n        priority: 105\n      }\n    ];\n  }\n\n  private _createAxis(entity: Entity): void {\n    this.gizmoEntity = entity.createChild(\"visible\");\n    this.gizmoHelperEntity = entity.createChild(\"invisible\");\n\n    const axisX = this.gizmoEntity.createChild(\"x\");\n    const axisY = this.gizmoEntity.createChild(\"y\");\n    const axisZ = this.gizmoEntity.createChild(\"z\");\n    const axisXYZ = this.gizmoEntity.createChild(\"xyz\");\n\n    this._scaleAxisComponent = [\n      axisX.addComponent(Axis),\n      axisY.addComponent(Axis),\n      axisZ.addComponent(Axis),\n      axisXYZ.addComponent(Axis)\n    ];\n\n    for (let i = 0; i < this._scaleControlMap.length; i++) {\n      const currentComponent = this._scaleAxisComponent[i];\n      const currentGeometry = this._scaleControlMap[i];\n\n      currentComponent.initAxis(currentGeometry);\n    }\n  }\n\n  private _getHitPlane(): void {\n    switch (this._selectedAxis) {\n      case axisType.x:\n      case axisType.y:\n      case axisType.z:\n      case axisType.xyz:\n        const { _tempVec0: centerP, _tempVec1: crossP, _tempVec2: cameraP } = this;\n        cameraP.copyFrom(this._camera.entity.transform.worldPosition);\n        cameraP.transformToVec3(this._startInvMatrix);\n        const localAxis = axisVector[this._selectedAxis];\n        Vector3.cross(cameraP, localAxis, crossP);\n        Plane.fromPoints(localAxis, centerP.set(0, 0, 0), crossP, this._plane);\n        break;\n    }\n  }\n\n  private _calRayIntersection(ray: Ray, out: Vector3): void {\n    const worldToLocal = this._startInvMatrix;\n    Vector3.transformCoordinate(ray.origin, worldToLocal, ray.origin);\n    Vector3.transformNormal(ray.direction, worldToLocal, ray.direction);\n    ray.getPoint(ray.intersectPlane(this._plane), out);\n  }\n\n  private _resizeControl(isModified: boolean = false): void {\n    const { _tempVec0, _tempMat } = this;\n    const cameraPosition = this._camera.entity.transform.worldPosition;\n    this._group.getWorldMatrix(_tempMat);\n\n    if (this._camera.isOrthographic) {\n      const s = isModified\n        ? this._camera.orthographicSize * Utils.scaleFactor * 3 * 0.75\n        : this._camera.orthographicSize * Utils.scaleFactor * 3;\n\n      this.entity.transform.worldMatrix = this._tempMat.scale(this._tempVec0.set(s, s, s));\n    } else {\n      const { elements: ele } = _tempMat;\n      _tempVec0.set(ele[12], ele[13], ele[14]);\n\n      const s = isModified\n        ? Vector3.distance(cameraPosition, _tempVec0) * Utils.scaleFactor * 0.75\n        : Vector3.distance(cameraPosition, _tempVec0) * Utils.scaleFactor;\n\n      const sx = s / Math.sqrt(ele[0] ** 2 + ele[1] ** 2 + ele[2] ** 2);\n      const sy = s / Math.sqrt(ele[4] ** 2 + ele[5] ** 2 + ele[6] ** 2);\n      const sz = s / Math.sqrt(ele[8] ** 2 + ele[9] ** 2 + ele[10] ** 2);\n      this.entity.transform.worldMatrix = this._tempMat.scale(this._tempVec0.set(sx, sy, sz));\n    }\n  }\n}\n","import { Camera, Entity, Plane, Ray, Vector3, Matrix } from \"@galacean/engine\";\n\nimport { Axis } from \"./Axis\";\nimport { Utils } from \"./Utils\";\nimport { Group } from \"./Group\";\nimport { GizmoComponent, AxisProps, axisVector, axisPlane, axisType } from \"./Type\";\nimport { State } from \"./enums/GizmoState\";\n\n/** @internal */\nexport class TranslateControl extends GizmoComponent {\n  private _scale: number = 1;\n  private _camera: Camera;\n  private _group: Group;\n  private _translateAxisComponent: Array<Axis>;\n  private _translateControlMap: Array<AxisProps>;\n\n  private _selectedAxis: axisType;\n\n  private _preMatrix: Matrix = new Matrix();\n  private _startGroupMatrix: Matrix = new Matrix();\n  private _startInvMatrix: Matrix = new Matrix();\n  private _startScale: number = 1;\n  private _startPoint: Vector3 = new Vector3();\n  private _currPoint = new Vector3();\n  private _plane: Plane = new Plane();\n\n  private _tempVec0: Vector3 = new Vector3();\n  private _tempVec1: Vector3 = new Vector3();\n  private _tempVec2: Vector3 = new Vector3();\n  private _tempMat: Matrix = new Matrix();\n  private _tempScale: number = 1;\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.type = State.translate;\n    this._initAxis();\n    this._createAxis(entity);\n  }\n\n  init(camera: Camera, group: Group): void {\n    this._camera = camera;\n    this._group = group;\n  }\n\n  onHoverStart(axisName: string): void {\n    if (this._selectedAxis === axisType[axisName]) return;\n    this.onHoverEnd();\n\n    this._selectedAxis = axisType[axisName];\n    const currEntity = this.gizmoEntity.findByName(axisName);\n    const currComponent = currEntity.getComponent(Axis);\n    currComponent.highLight && currComponent.highLight();\n  }\n\n  onHoverEnd(): void {\n    const axesEntity = this.gizmoEntity.children;\n    for (let entity of axesEntity) {\n      const component = entity.getComponent(Axis);\n      component.unLight && component.unLight();\n    }\n\n    this._selectedAxis = null;\n  }\n\n  onMoveStart(ray: Ray, axisName: string): void {\n    this._selectedAxis = axisType[axisName];\n    // get gizmo start worldPosition\n    this._group.getWorldMatrix(this._startGroupMatrix);\n    this._preMatrix.copyFrom(this._startGroupMatrix);\n    Matrix.invert(this._startGroupMatrix, this._startInvMatrix);\n\n    // get start scale\n    this._startScale = this._scale;\n\n    // get start point\n    this._getHitPlane();\n    this._calRayIntersection(ray, this._startPoint);\n\n    // change axis color\n    const entityArray = this.gizmoEntity.children;\n    for (let i = 0; i < entityArray.length; i++) {\n      const currEntity = entityArray[i];\n      const currComponent = currEntity.getComponent(Axis);\n      if (axisType[currEntity.name] === this._selectedAxis) {\n        currComponent.yellow && currComponent.yellow();\n      } else {\n        currComponent.gray && currComponent.gray();\n      }\n    }\n  }\n\n  onMove(ray: Ray): void {\n    // transform ray to local space\n    this._calRayIntersection(ray, this._currPoint);\n    const currScale = this._scale;\n    const { _tempMat: mat, _tempVec0: subVec, _startScale } = this;\n    // eliminate the side effect of gizmo's scaling\n    subVec.x = this._currPoint.x - (this._startPoint.x / _startScale) * currScale;\n    subVec.y = this._currPoint.y - (this._startPoint.y / _startScale) * currScale;\n    subVec.z = this._currPoint.z - (this._startPoint.z / _startScale) * currScale;\n\n    const localAxis = axisVector[this._selectedAxis];\n    mat.identity();\n    mat.elements[12] = subVec.x * localAxis.x;\n    mat.elements[13] = subVec.y * localAxis.y;\n    mat.elements[14] = subVec.z * localAxis.z;\n\n    Matrix.multiply(this._startGroupMatrix, mat, mat);\n    this._group.applyTransform(this._preMatrix, mat);\n    this._preMatrix.copyFrom(mat);\n    this.engine.dispatch(\"gizmo-move\", \"translate\");\n  }\n\n  onMoveEnd(): void {\n    // recover axis cover\n    const entityArray = this.gizmoEntity.children;\n    for (let i = 0; i < entityArray.length; i++) {\n      const currEntity = entityArray[i];\n      const currComponent = currEntity.getComponent(Axis);\n      currComponent.recover && currComponent.recover();\n    }\n  }\n\n  onUpdate(isModified: boolean = false): void {\n    this._resizeControl(isModified);\n  }\n\n  onSwitch() {\n    this._resizeControl();\n  }\n\n  onAlphaChange(axisName: string, value: number) {\n    switch (axisName) {\n      case \"x\":\n        this._changeAxisAlpha(\"x\", value);\n        this._changeAxisAlpha(\"xy\", value);\n        this._changeAxisAlpha(\"xz\", value);\n        break;\n      case \"y\":\n        this._changeAxisAlpha(\"y\", value);\n        this._changeAxisAlpha(\"xy\", value);\n        this._changeAxisAlpha(\"xz\", value);\n        break;\n      case \"z\":\n        this._changeAxisAlpha(\"z\", value);\n        this._changeAxisAlpha(\"xz\", value);\n        this._changeAxisAlpha(\"yz\", value);\n        break;\n    }\n  }\n\n  private _initAxis(): void {\n    this._translateControlMap = [\n      {\n        name: \"x\",\n        axisMesh: [Utils.lineMesh, Utils.axisArrowMesh],\n        axisMaterial: Utils.redMaterialTrans,\n        axisHelperMesh: [Utils.axisHelperLineMesh],\n        axisHelperMaterial: Utils.invisibleMaterialTrans,\n        axisRotation: [new Vector3(0, 0, -90), new Vector3(0, 0, -90)],\n        axisTranslation: [new Vector3(0.75, 0, 0), new Vector3(1.5, 0, 0)]\n      },\n      {\n        name: \"y\",\n        axisMesh: [Utils.lineMesh, Utils.axisArrowMesh],\n        axisMaterial: Utils.greenMaterialTrans,\n        axisHelperMesh: [Utils.axisHelperLineMesh],\n        axisHelperMaterial: Utils.invisibleMaterialTrans,\n        axisRotation: [new Vector3(0, 90, 0), new Vector3(0, 0, 0)],\n        axisTranslation: [new Vector3(0, 0.75, 0), new Vector3(0, 1.5, 0)]\n      },\n      {\n        name: \"z\",\n        axisMesh: [Utils.lineMesh, Utils.axisArrowMesh],\n        axisMaterial: Utils.blueMaterialTrans,\n        axisHelperMesh: [Utils.axisHelperLineMesh],\n        axisHelperMaterial: Utils.invisibleMaterialTrans,\n        axisRotation: [new Vector3(0, 90, 90), new Vector3(0, 90, 90)],\n        axisTranslation: [new Vector3(0, 0, 0.75), new Vector3(0, 0, 1.5)]\n      },\n      {\n        name: \"xy\",\n        axisMesh: [Utils.axisPlaneMesh],\n        axisMaterial: Utils.lightBlueMaterial,\n        axisHelperMesh: [Utils.axisHelperPlaneMesh],\n        axisHelperMaterial: Utils.invisibleMaterialTrans,\n        axisRotation: [new Vector3(0, 90, 90)],\n        axisTranslation: [new Vector3(0.5, 0.5, 0)]\n      },\n      {\n        name: \"yz\",\n        axisMesh: [Utils.axisPlaneMesh],\n        axisMaterial: Utils.lightRedMaterial,\n        axisHelperMesh: [Utils.axisHelperPlaneMesh],\n        axisHelperMaterial: Utils.invisibleMaterialTrans,\n\n        axisRotation: [new Vector3(90, 90, 0)],\n        axisTranslation: [new Vector3(0, 0.5, 0.5)]\n      },\n      {\n        name: \"xz\",\n        axisMesh: [Utils.axisPlaneMesh],\n        axisMaterial: Utils.lightGreenMaterial,\n        axisHelperMesh: [Utils.axisHelperPlaneMesh],\n        axisHelperMaterial: Utils.invisibleMaterialTrans,\n        axisRotation: [new Vector3(0, 0, 0)],\n        axisTranslation: [new Vector3(0.5, 0, 0.5)]\n      }\n    ];\n  }\n\n  private _createAxis(entity: Entity): void {\n    this.gizmoEntity = entity.createChild(\"visible\");\n    this.gizmoHelperEntity = entity.createChild(\"invisible\");\n\n    const axisX = this.gizmoEntity.createChild(\"x\");\n    const axisY = this.gizmoEntity.createChild(\"y\");\n    const axisZ = this.gizmoEntity.createChild(\"z\");\n    const axisXY = this.gizmoEntity.createChild(\"xy\");\n    const axisYZ = this.gizmoEntity.createChild(\"yz\");\n    const axisXZ = this.gizmoEntity.createChild(\"xz\");\n\n    this._translateAxisComponent = [\n      axisX.addComponent(Axis),\n      axisY.addComponent(Axis),\n      axisZ.addComponent(Axis),\n      axisXY.addComponent(Axis),\n      axisYZ.addComponent(Axis),\n      axisXZ.addComponent(Axis)\n    ];\n\n    for (let i = 0; i < this._translateControlMap.length; i++) {\n      const currentComponent = this._translateAxisComponent[i];\n      const currentGeometry = this._translateControlMap[i];\n\n      currentComponent.initAxis(currentGeometry);\n    }\n  }\n\n  private _getHitPlane(): void {\n    switch (this._selectedAxis) {\n      case axisType.x:\n      case axisType.y:\n      case axisType.z:\n        const { _tempVec0: centerP, _tempVec1: crossP, _tempVec2: cameraP } = this;\n        cameraP.copyFrom(this._camera.entity.transform.worldPosition);\n        cameraP.transformToVec3(this._startInvMatrix);\n        const localAxis = axisVector[this._selectedAxis];\n\n        Vector3.cross(cameraP, localAxis, crossP);\n        Plane.fromPoints(localAxis, centerP.set(0, 0, 0), crossP, this._plane);\n        break;\n      case axisType.xy:\n      case axisType.yz:\n      case axisType.xz:\n        this._plane.copyFrom(axisPlane[this._selectedAxis]);\n        break;\n    }\n  }\n\n  private _calRayIntersection(ray: Ray, out: Vector3): void {\n    const worldToLocal = this._startInvMatrix;\n    Vector3.transformCoordinate(ray.origin, worldToLocal, ray.origin);\n    Vector3.transformNormal(ray.direction, worldToLocal, ray.direction);\n    ray.getPoint(ray.intersectPlane(this._plane), out);\n  }\n\n  private _resizeControl(isModified: boolean = false): void {\n    const { _tempMat, _tempVec0 } = this;\n    const cameraPosition = this._camera.entity.transform.worldPosition;\n    this._group.getWorldMatrix(_tempMat);\n\n    if (this._camera.isOrthographic) {\n      this._tempScale = this._camera.orthographicSize * Utils.scaleFactor * 3;\n    } else {\n      _tempVec0.set(_tempMat.elements[12], _tempMat.elements[13], _tempMat.elements[14]);\n      this._tempScale = this._scale = Vector3.distance(cameraPosition, _tempVec0) * Utils.scaleFactor;\n    }\n    this.gizmoEntity.transform.worldMatrix = this.gizmoHelperEntity.transform.worldMatrix = _tempMat.scale(\n      _tempVec0.set(this._tempScale, this._tempScale, this._tempScale)\n    );\n  }\n\n  private _changeAxisAlpha(axisName: string, value: number) {\n    const entity = this.gizmoEntity.findByName(axisName);\n    if (entity) {\n      const component = entity.getComponent(Axis);\n      component.alpha(value);\n    }\n  }\n}\n","import { Camera, Entity, Matrix, MeshRenderer, Ray, Vector3, Transform, MathUtil, Pointer } from \"@galacean/engine\";\nimport { Axis } from \"./Axis\";\nimport { Utils } from \"./Utils\";\nimport { GizmoComponent, AxisProps, axisVector, axisPlane, axisType } from \"./Type\";\nimport { Group } from \"./Group\";\nimport { GizmoMesh } from \"./GizmoMesh\";\nimport { State } from \"./enums/GizmoState\";\n\n/** @internal */\nexport class RotateControl extends GizmoComponent {\n  private _group: Group;\n  private _camera: Camera;\n\n  private _rotateAxisComponent: Array<Axis> = [];\n  private _rotateControlMap: Array<AxisProps> = [];\n\n  private _gizmoRotateHelperEntity: Entity;\n\n  private _axisX: Entity;\n  private _axisY: Entity;\n  private _axisZ: Entity;\n  private _axisXYZ: Entity;\n  private _axisXHelper: Entity;\n  private _axisYHelper: Entity;\n  private _axisZHelper: Entity;\n  private _axisXYZHelper: Entity;\n\n  private _isModified: boolean = false;\n\n  private _startLineHelperEntity: Entity;\n  private _startLineMesh = GizmoMesh.createLine(this.engine, [new Vector3(0, 0, 0), new Vector3(0, 0, 0)]);\n  private _endLineHelperEntity: Entity;\n\n  private _endLineMesh = GizmoMesh.createLine(this.engine, [new Vector3(0, 0, 0), new Vector3(0, 0, 0)]);\n\n  private _rotateHelperPlaneEntity: Entity;\n  private _rotateHelperPlaneMesh = GizmoMesh.createCircle(this.engine);\n\n  private _selectedAxis: axisType;\n  private _preMatrix: Matrix = new Matrix();\n  private _startMatrix: Matrix = new Matrix();\n  private _startInvMatrix: Matrix = new Matrix();\n\n  private _startPointUnit: Vector3 = new Vector3();\n  private _currPointUnit: Vector3 = new Vector3();\n\n  private _cameraPos: Vector3 = new Vector3();\n\n  private _previousRad: number = 0;\n  private _finalRad: number = 0;\n\n  private _verticalAxis: Vector3 = new Vector3(0, 1, 0);\n  private _horizontalAxis: Vector3 = new Vector3();\n  private _speedFactor: number = 0.01;\n\n  private _tempMat: Matrix = new Matrix();\n  private _tempMat2: Matrix = new Matrix();\n  private _tempVec: Vector3 = new Vector3();\n  private _tempVec2: Vector3 = new Vector3();\n  private _tempVec30: Vector3 = new Vector3();\n  private _tempVec31: Vector3 = new Vector3();\n  private _tempVec32: Vector3 = new Vector3();\n  private _tempMat41: Matrix = new Matrix();\n\n  private _isAtBack: boolean = false;\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.type = State.rotate;\n    this._initAxis();\n    this._createAxis(entity);\n  }\n\n  /** init axis geometry */\n  private _initAxis(): void {\n    this._rotateControlMap = [\n      {\n        name: \"x\",\n        axisMesh: [Utils.axisXTorusMesh],\n        axisMaterial: Utils.redArcMaterial,\n        axisHelperMesh: [Utils.axisHelpertorusMesh],\n        axisHelperMaterial: Utils.invisibleMaterialRotate,\n        axisRotation: [new Vector3(0, 90, 90)],\n        axisTranslation: [new Vector3(0, 0, 0)]\n      },\n      {\n        name: \"y\",\n        axisMesh: [Utils.axisYTorusMesh],\n        axisMaterial: Utils.greenArcMaterial,\n        axisHelperMesh: [Utils.axisHelpertorusMesh],\n        axisHelperMaterial: Utils.invisibleMaterialRotate,\n        axisRotation: [new Vector3(90, 0, 0)],\n        axisTranslation: [new Vector3(0, 0, 0)]\n      },\n      {\n        name: \"z\",\n        axisMesh: [Utils.axisZTorusMesh],\n        axisMaterial: Utils.blueArcMaterial,\n        axisHelperMesh: [Utils.axisHelpertorusMesh],\n        axisHelperMaterial: Utils.invisibleMaterialRotate,\n        axisRotation: [new Vector3(0, 0, -90)],\n        axisTranslation: [new Vector3(0, 0, 0)]\n      },\n      {\n        name: \"xyz\",\n        axisMesh: [Utils.axisXYZTorusMesh],\n        axisMaterial: Utils.lightMaterial,\n        axisHelperMesh: [Utils.axisSphereMesh],\n        axisHelperMaterial: Utils.invisibleMaterialCircle,\n        axisRotation: [new Vector3(0, 0, 0)],\n        axisTranslation: [new Vector3(0, 0, 0)],\n        priority: 99\n      }\n    ];\n  }\n\n  private _createAxis(entity: Entity): void {\n    // visible gizmo entity\n    this.gizmoEntity = entity.createChild(\"visible\");\n    this.gizmoHelperEntity = entity.createChild(\"invisible\");\n\n    this._axisX = this.gizmoEntity.createChild(\"x\");\n    this._axisY = this.gizmoEntity.createChild(\"y\");\n    this._axisZ = this.gizmoEntity.createChild(\"z\");\n    this._axisXYZ = this.gizmoEntity.createChild(\"xyz\");\n\n    this._rotateAxisComponent = [\n      this._axisX.addComponent(Axis),\n      this._axisY.addComponent(Axis),\n      this._axisZ.addComponent(Axis),\n      this._axisXYZ.addComponent(Axis)\n    ];\n\n    for (let i = 0; i < this._rotateControlMap.length; i++) {\n      const currentComponent = this._rotateAxisComponent[i];\n      const currentGeometry = this._rotateControlMap[i];\n\n      currentComponent.initAxis(currentGeometry);\n    }\n    const axisHelpers = this.gizmoHelperEntity.children;\n    this._axisXHelper = axisHelpers[0];\n    this._axisYHelper = axisHelpers[1];\n    this._axisZHelper = axisHelpers[2];\n    this._axisXYZHelper = axisHelpers[3];\n\n    // rotate gizmo in-process debug helper entity\n    this._gizmoRotateHelperEntity = entity.createChild(\"helper\");\n\n    // rotate start line\n    this._startLineHelperEntity = this._gizmoRotateHelperEntity.createChild(\"lineHelperS\");\n    const startHelperRenderer = this._startLineHelperEntity.addComponent(MeshRenderer);\n    startHelperRenderer.receiveShadows = false;\n    startHelperRenderer.castShadows = false;\n    startHelperRenderer.mesh = this._startLineMesh;\n    startHelperRenderer.setMaterial(Utils.yellowMaterial);\n    startHelperRenderer.priority = 90;\n\n    // rotate end line\n    this._endLineHelperEntity = this._gizmoRotateHelperEntity.createChild(\"lineHelperE\");\n    const endHelperRenderer = this._endLineHelperEntity.addComponent(MeshRenderer);\n    endHelperRenderer.receiveShadows = false;\n    endHelperRenderer.castShadows = false;\n    endHelperRenderer.mesh = this._endLineMesh;\n    endHelperRenderer.setMaterial(Utils.yellowMaterial);\n    endHelperRenderer.priority = 90;\n\n    // rotate plane\n    this._rotateHelperPlaneEntity = this._gizmoRotateHelperEntity.createChild(\"rotateHelperPlane\");\n    const planeHelperRenderer = this._rotateHelperPlaneEntity.addComponent(MeshRenderer);\n    planeHelperRenderer.receiveShadows = false;\n    planeHelperRenderer.castShadows = false;\n    planeHelperRenderer.mesh = this._rotateHelperPlaneMesh;\n    // @ts-ignore\n    this._rotateHelperPlaneMesh._enableVAO = false;\n    planeHelperRenderer.setMaterial(Utils.rotatePlaneMaterial);\n    planeHelperRenderer.priority = 90;\n    this._rotateHelperPlaneEntity.isActive = false;\n  }\n\n  init(camera: Camera, group: Group): void {\n    this._camera = camera;\n    this._group = group;\n  }\n\n  onHoverStart(axisName: string): void {\n    if (this._selectedAxis === axisType[axisName]) return;\n    this.onHoverEnd();\n\n    this._selectedAxis = axisType[axisName];\n    const currEntity = this.gizmoEntity.findByName(axisName);\n    const currComponent = currEntity.getComponent(Axis);\n    currComponent.highLight && currComponent.highLight();\n  }\n\n  onHoverEnd(): void {\n    const axesEntity = this.gizmoEntity.children;\n    for (let entity of axesEntity) {\n      const component = entity.getComponent(Axis);\n      component.unLight && component.unLight();\n    }\n\n    this._selectedAxis = null;\n  }\n\n  onMoveStart(ray: Ray, axisName: string): void {\n    this._selectedAxis = axisType[axisName];\n    const {\n      _group: group,\n      _startPointUnit: startP,\n      _startMatrix: startMat,\n      _tempVec: tempVec,\n      _tempMat: tempMat\n    } = this;\n\n    group.getWorldMatrix(startMat);\n    this._preMatrix.copyFrom(startMat);\n    Matrix.invert(startMat, this._startInvMatrix);\n\n    const s = this._getGizmoScale();\n    this._tempMat.copyFrom(startMat).scale(tempVec.set(s, s, s));\n    this.gizmoEntity.transform.worldMatrix = tempMat;\n\n    switch (this._selectedAxis) {\n      case axisType.x:\n      case axisType.y:\n      case axisType.z:\n        this.gizmoHelperEntity.transform.worldMatrix = tempMat;\n        this._gizmoRotateHelperEntity.transform.worldMatrix = tempMat;\n\n        this._calRayIntersection(ray, startP);\n        this._setAxisSelected(this._selectedAxis, true);\n\n        GizmoMesh.updateLine(this._startLineMesh, [new Vector3(0, 0, 0), startP]);\n        GizmoMesh.updateLine(this._endLineMesh, [new Vector3(0, 0, 0), startP]);\n        GizmoMesh.updateCircle(this._rotateHelperPlaneMesh, startP, axisVector[axisName], 0);\n\n        this._startLineHelperEntity.isActive = true;\n        this._endLineHelperEntity.isActive = true;\n        this._rotateHelperPlaneEntity.isActive = true;\n        this._startLineHelperEntity.transform.setRotation(0, 0, 0);\n        this._endLineHelperEntity.transform.setRotation(0, 0, 0);\n        this._rotateHelperPlaneEntity.transform.setRotation(0, 0, 0);\n        break;\n      case axisType.xyz:\n        this.gizmoHelperEntity.transform.worldMatrix = tempMat;\n        this._setAxisSelected(this._selectedAxis, true);\n        this._isAtBack = this.gizmoEntity.transform.worldUp.y < 0;\n        this._isAtBack ? this._verticalAxis.set(0, -1, 0) : this._verticalAxis.set(0, 1, 0);\n        break;\n    }\n  }\n\n  onMove(ray: Ray, pointer: Pointer): void {\n    const {\n      _startPointUnit: startP,\n      _currPointUnit: currP,\n      _startMatrix: startMat,\n      _tempMat2: mat,\n      _group: group,\n      _tempVec: tempVec\n    } = this;\n\n    switch (this._selectedAxis) {\n      case axisType.x:\n      case axisType.y:\n      case axisType.z:\n        const localAxis = axisVector[this._selectedAxis];\n        this._calRayIntersection(ray, currP);\n        const rad = this._getFinalRad(startP, currP, localAxis);\n        GizmoMesh.updateCircle(this._rotateHelperPlaneMesh, startP, localAxis, rad);\n\n        Matrix.rotateAxisAngle(startMat, localAxis, rad, mat);\n        group.applyTransform(this._preMatrix, mat);\n        this._preMatrix.copyFrom(mat);\n        const d = (rad / Math.PI) * 180;\n        this._endLineHelperEntity.transform.setRotation(d * localAxis.x, d * localAxis.y, d * localAxis.z);\n        break;\n      case axisType.xyz:\n        const { x, y } = pointer.deltaPosition;\n        const { _horizontalAxis: hAxis, _verticalAxis: vAxis } = this;\n        hAxis.copyFrom(this._camera.entity.transform.worldUp);\n\n        Vector3.cross(hAxis, vAxis, hAxis);\n        this._isAtBack ? hAxis.scale(-y) : hAxis.scale(y);\n\n        tempVec.copyFrom(vAxis);\n        this._isAtBack ? tempVec.scale(-x) : tempVec.scale(x);\n\n        Vector3.add(hAxis, tempVec, tempVec);\n        Vector3.transformNormal(tempVec, this._startInvMatrix, tempVec);\n        const angle = pointer.deltaPosition.length() * this._speedFactor;\n        Matrix.rotateAxisAngle(startMat, tempVec, angle, startMat);\n        group.applyTransform(this._preMatrix, startMat);\n        this._preMatrix.copyFrom(startMat);\n\n        Matrix.invert(startMat, this._startInvMatrix);\n        break;\n    }\n    this.engine.dispatch(\"gizmo-move\", \"rotate\");\n  }\n\n  onMoveEnd(): void {\n    this._finalRad = 0;\n    this._previousRad = 0;\n    // recover axis color\n    this._setAxisSelected(this._selectedAxis, false);\n    // recover arc line\n    const axisMesh = this._rotateControlMap[this._selectedAxis].axisMesh[0];\n\n    switch (this._selectedAxis) {\n      case axisType.x:\n      case axisType.y:\n      case axisType.z:\n        GizmoMesh.updateCircleTube(axisMesh, Math.PI);\n        // hide helper entity\n        this._endLineHelperEntity.isActive = false;\n        this._startLineHelperEntity.isActive = false;\n        this._rotateHelperPlaneEntity.isActive = false;\n        break;\n      case axisType.xyz:\n        GizmoMesh.updateCircleTube(axisMesh, 2 * Math.PI, 1.8);\n        break;\n    }\n  }\n\n  onUpdate(isModified: boolean = false): void {\n    this._resizeControl(isModified);\n    this._updateAxisTransform();\n  }\n\n  onSwitch(isModified: boolean = false) {\n    this._resizeControl(isModified);\n  }\n\n  onAlphaChange(axisName: string, value: number): void {}\n\n  private _setAxisSelected(axis: axisType, isSelected: boolean): void {\n    const axisMesh = this._rotateControlMap[axis].axisMesh[0];\n    GizmoMesh.updateCircleTube(axisMesh, 2 * Math.PI);\n    const entityArray = this.gizmoEntity.children;\n    for (let i = 0; i < entityArray.length; i++) {\n      const currEntity = entityArray[i];\n      const currComponent = currEntity.getComponent(Axis);\n      if (axisType[currEntity.name] === axis) {\n        if (isSelected) {\n          currComponent.yellow && currComponent.yellow();\n        } else {\n          currComponent.recover && currComponent.recover();\n        }\n      }\n    }\n  }\n\n  private _calRayIntersection(ray: Ray, out: Vector3): void {\n    // transform ray to local space\n    const worldToLocal = this._startInvMatrix;\n    Vector3.transformCoordinate(ray.origin, worldToLocal, ray.origin);\n    Vector3.transformNormal(ray.direction, worldToLocal, ray.direction);\n    ray.getPoint(ray.intersectPlane(axisPlane[this._selectedAxis]), out);\n    out.normalize().scale(Utils.rotateCircleRadius);\n  }\n\n  private _getFinalRad(p1: Vector3, p2: Vector3, rotateAxis: Vector3): number {\n    const dot = Vector3.dot(p1, p2);\n    Vector3.cross(p1, p2, this._tempVec);\n    const direction = Vector3.dot(this._tempVec, rotateAxis);\n    const currentRad = Math.sign(direction) * Math.acos(dot / Utils.rotateCircleRadius ** 2);\n    const incrementRad = currentRad - this._previousRad;\n    if (this._previousRad * currentRad < 0) {\n      Math.abs(currentRad) < Math.PI / 2\n        ? (this._finalRad += incrementRad)\n        : (this._finalRad += -Math.sign(incrementRad) * (2 * Math.PI - Math.abs(incrementRad)));\n    } else {\n      this._finalRad += incrementRad;\n    }\n    this._previousRad = currentRad;\n    return this._finalRad;\n  }\n\n  private _getGizmoScale(): number {\n    const cameraPosition = this._camera.entity.transform.worldPosition;\n    this._group.getWorldPosition(this._tempVec);\n    if (this._camera.isOrthographic) {\n      return this._isModified\n        ? this._camera.orthographicSize * Utils.scaleFactor * 3 * 0.8\n        : this._camera.orthographicSize * Utils.scaleFactor * 3;\n    } else {\n      return this._isModified\n        ? Vector3.distance(cameraPosition, this._tempVec) * Utils.scaleFactor * 0.8\n        : Vector3.distance(cameraPosition, this._tempVec) * Utils.scaleFactor;\n    }\n  }\n\n  private _updateAxisTransform(): void {\n    const { _tempMat: _tempMat, _tempVec, _tempVec2, _cameraPos } = this;\n    // 相机位置\n    _cameraPos.copyFrom(this._camera.entity.transform.worldPosition);\n    const gizmoTrans = this.gizmoEntity.transform;\n    // 获取参照向量(Gizmo 中点 -> 相机)（世界坐标）\n    Vector3.subtract(_cameraPos, gizmoTrans.worldPosition, _tempVec);\n    // 逆矩阵（世界 -> Gizmo）\n    Matrix.invert(gizmoTrans.worldMatrix, _tempMat);\n    // 将向量(Gizmo 中点 -> 相机)映射到 Gizmo 坐标系中，此处 XYZ 局部向量是相同的\n    Vector3.transformNormal(_tempVec, _tempMat, _tempVec2);\n    const factor = MathUtil.radToDegreeFactor;\n    const { x, y, z } = _tempVec2;\n    // 用 yoz 投影计算 X 轴的局部旋转\n    this._axisX.transform.rotation.x = this._axisXHelper.transform.rotation.x = -Math.atan2(y, z) * factor;\n    // 用 xoz 投影计算 Y 轴的局部旋转\n    this._axisY.transform.rotation.y = this._axisYHelper.transform.rotation.y = Math.atan2(x, z) * factor;\n    // 用 yox 投影计算 Z 轴的局部旋转\n    this._axisZ.transform.rotation.z = this._axisZHelper.transform.rotation.z = Math.atan2(y, x) * factor;\n    // xyz 投影\n    this._localLookAt(this._axisXYZ.transform, _tempVec2);\n    this._axisXYZHelper.transform.rotationQuaternion = this._axisXYZ.transform.rotationQuaternion;\n  }\n\n  private _resizeControl(isModified: boolean = false): void {\n    this._group.getWorldMatrix(this._tempMat);\n    this._isModified = isModified;\n    const s = this._getGizmoScale();\n    this.gizmoEntity.transform.worldMatrix = this.gizmoHelperEntity.transform.worldMatrix = this._tempMat.scale(\n      this._tempVec.set(s, s, s)\n    );\n  }\n\n  private _localLookAt(transform: Transform, targetPosition: Vector3) {\n    const zAxis = this._tempVec30;\n    Vector3.subtract(transform.position, targetPosition, zAxis);\n    zAxis.normalize();\n    const xAxis = this._tempVec31.set(zAxis.z, 0, -zAxis.x).normalize();\n    const yAxis = this._tempVec32;\n    Vector3.cross(zAxis, xAxis, yAxis);\n    yAxis.normalize();\n    const rotMat = this._tempMat41;\n    const { elements: e } = rotMat;\n    (e[0] = xAxis.x), (e[1] = xAxis.y), (e[2] = xAxis.z);\n    (e[4] = yAxis.x), (e[5] = yAxis.y), (e[6] = yAxis.z);\n    (e[8] = zAxis.x), (e[9] = zAxis.y), (e[10] = zAxis.z);\n    rotMat.getRotation(transform.rotationQuaternion);\n  }\n}\n","/**\n * Gizmo Anchor State\n */\nexport enum AnchorType {\n  /**\n   * positions the Gizmo at the actual pivot point\n   */\n  Pivot,\n  /**\n   * positions the Gizmo at the center of the selected entity or entities rendered bounds\n   */\n  Center\n}\n\n/**\n * Gizmo Coordinate State\n */\nexport enum CoordinateType {\n  /**\n   * aligns to the selected entity or entities local space\n   */\n  Local,\n  /**\n   * aligns to the world space orientation\n   */\n  Global\n}\n","import { BoundingBox, Renderer, Vector3, Matrix, Entity } from \"@galacean/engine\";\nimport { AnchorType, CoordinateType } from \"./enums/GroupState\";\n\n/**\n * dirty flag for the group\n */\nexport enum GroupDirtyFlag {\n  /**\n   * none\n   */\n  None = 0,\n  /**\n   * anchor changed\n   */\n  AnchorDirty = 1,\n  /**\n   * coordinate changed\n   */\n  CoordinateDirty = 2,\n  /**\n   * anchor & coordinate changed\n   */\n  All = 3\n}\n\n/**\n * Group\n */\nexport class Group {\n  private static _tempVec30: Vector3 = new Vector3();\n  private static _tempMat0: Matrix = new Matrix();\n  private static _tempMat1: Matrix = new Matrix();\n  private static _tempBoundBox: BoundingBox = new BoundingBox();\n\n  // @internal\n  _gizmoTransformDirty: boolean = true;\n\n  private _entities: Entity[] = [];\n  private _listeners: { flagManager; fun: (entity: Entity) => void }[] = [];\n  private _worldMatrix: Matrix = new Matrix();\n  private _anchorType: AnchorType = AnchorType.Pivot;\n  private _coordinateType: CoordinateType = CoordinateType.Local;\n  private _dirtyFlag: GroupDirtyFlag = GroupDirtyFlag.All;\n\n  /**\n   * get anchor type\n   * @return anchor type, pivot or center\n   */\n  get anchorType(): AnchorType {\n    return this._anchorType;\n  }\n\n  set anchorType(value: AnchorType) {\n    if (this._anchorType !== value) {\n      this._anchorType = value;\n      this.setDirtyFlagTrue(GroupDirtyFlag.AnchorDirty);\n    }\n  }\n\n  /**\n   * get coordinate type\n   * @return coordinate type, world or local\n   */\n  get coordinateType(): CoordinateType {\n    return this._coordinateType;\n  }\n\n  set coordinateType(value: CoordinateType) {\n    if (this._coordinateType !== value) {\n      this._coordinateType = value;\n      this.setDirtyFlagTrue(GroupDirtyFlag.CoordinateDirty);\n    }\n  }\n  /**\n   * add entity to the group\n   * @param addEntity - entity to add\n   */\n  addEntity(addEntity: Entity): boolean {\n    const { _entities: entities } = this;\n    let canAdd: boolean = true;\n    for (let j = entities.length - 1; j >= 0; j--) {\n      const compareEntity = entities[j];\n      if (compareEntity === addEntity) {\n        canAdd = false;\n        break;\n      } else if (this._hasRelationship(compareEntity, addEntity)) {\n        canAdd = false;\n        break;\n      } else if (this._hasRelationship(addEntity, compareEntity)) {\n        this._applyDel(j);\n      }\n    }\n    if (canAdd) {\n      this._applyAdd(addEntity);\n    }\n\n    return canAdd;\n  }\n\n  /**\n   * add entities to the group\n   * @param addEntities - entities to add, in array\n   */\n  addEntities(addEntities: Entity[]): void {\n    for (let i = addEntities.length - 1; i >= 0; i--) {\n      this.addEntity(addEntities[i]);\n    }\n  }\n\n  /**\n   * remove entity from the group\n   * @param delEntity - entity to delete\n   */\n  deleteEntity(delEntity: Entity): void {\n    this._applyDel(delEntity);\n  }\n\n  /**\n   * remove entities from the group\n   * @param delEntities - entities to delete, in array\n   */\n  deleteEntities(delEntities: Entity[]): void {\n    for (let i = delEntities.length - 1; i >= 0; i--) {\n      this.deleteEntity(delEntities[i]);\n    }\n  }\n\n  /**\n   * get entity index in group\n   * @param entity\n   * @return number, -1 if not in group\n   */\n  getIndexOf(entity: Entity): number {\n    const { _entities: entities } = this;\n    return entities.findIndex((ele: Entity) => {\n      return entity === ele;\n    });\n  }\n\n  /**\n   * clear the group\n   */\n  reset(): void {\n    this._entities.length = 0;\n    const { _listeners: listeners } = this;\n    for (let i = listeners.length - 1; i >= 0; i--) {\n      const listener = listeners[i];\n      listener.flagManager.removeListener(listener.fun);\n    }\n    listeners.length = 0;\n    this._dirtyFlag = GroupDirtyFlag.All;\n  }\n\n  /**\n   * get group's world matrix\n   * @param out - updated world matrix for the group\n   * @return boolean, true if group's world matrix needs update\n   */\n  getWorldMatrix(out?: Matrix): Boolean {\n    if (this._entities.length <= 0) {\n      return false;\n    } else {\n      this._updateAnchor();\n      this._updateCoordinate();\n      out && out.copyFrom(this._worldMatrix);\n      return true;\n    }\n  }\n\n  /**\n   * get group's world position\n   * @param out - updated world position for the group\n   */\n  getWorldPosition(out?: Vector3): void {\n    if (this.getWorldMatrix()) {\n      const { elements: ele } = this._worldMatrix;\n      out.set(ele[12], ele[13], ele[14]);\n    }\n  }\n\n  /**\n   * 从上个状态的矩阵变换到目标矩阵\n   * from 矩阵计算所有节点的在本次变换中的 local 姿态\n   * to 矩阵计算所有节点的在本次变换后的 world 姿态\n   * @param from - 初始矩阵\n   * @param to - 目标矩阵\n   */\n  applyTransform(from: Matrix, to: Matrix): void {\n    const { _entities: entities } = this;\n    if (this._entities.length <= 0) {\n      return;\n    }\n    if (Matrix.equals(from, to)) {\n      return;\n    }\n    // old worldMatrix.\n    const { _tempMat0: groupWorldInvMat, _tempMat1: nodeMat } = Group;\n    Matrix.invert(from, groupWorldInvMat);\n    // update entities worldMatrix\n    for (let i = entities.length - 1; i >= 0; i--) {\n      const nodeTrans = entities[i].transform;\n      // get entity's localMatrix.\n      Matrix.multiply(groupWorldInvMat, nodeTrans.worldMatrix, nodeMat);\n      // update entity's worldMatrix.\n      Matrix.multiply(to, nodeMat, nodeMat);\n      nodeTrans.worldMatrix = nodeMat;\n    }\n  }\n\n  /**\n   * force update group dirty flag\n   * @param flag - group dirty flag\n   */\n  setDirtyFlagTrue(flag: GroupDirtyFlag): void {\n    this._dirtyFlag |= flag;\n    this._gizmoTransformDirty = true;\n  }\n\n  private _applyAdd(entity: Entity): void {\n    this._entities.push(entity);\n    const fun = this._onEntityWorldTransformChange(entity);\n    // @ts-ignore\n    const flagManager = entity.transform._updateFlagManager;\n    flagManager.addListener(fun);\n    this._listeners.push({ flagManager, fun });\n    fun();\n  }\n\n  private _applyDel(value: Entity | number): void {\n    const index = typeof value === \"number\" ? value : this._entities.indexOf(value);\n\n    if (index === 0) {\n      if (this._coordinateType === CoordinateType.Local) {\n        this.setDirtyFlagTrue(GroupDirtyFlag.All);\n      } else {\n        this.setDirtyFlagTrue(GroupDirtyFlag.AnchorDirty);\n      }\n      this._entities.splice(index, 1);\n      const listener = this._listeners[index];\n      listener.flagManager.removeListener(listener.fun);\n      this._listeners.splice(index, 1);\n    } else if (index > 0) {\n      if (this._anchorType === AnchorType.Center) {\n        this.setDirtyFlagTrue(GroupDirtyFlag.AnchorDirty);\n      }\n      this._entities.splice(index, 1);\n      const listener = this._listeners[index];\n      listener.flagManager.removeListener(listener.fun);\n      this._listeners.splice(index, 1);\n    }\n  }\n\n  private _onEntityWorldTransformChange(entity: Entity): () => void {\n    return () => {\n      if (this._entities.indexOf(entity) === 0) {\n        if (this._coordinateType === CoordinateType.Local) {\n          this.setDirtyFlagTrue(GroupDirtyFlag.All);\n        } else {\n          this.setDirtyFlagTrue(GroupDirtyFlag.AnchorDirty);\n        }\n      } else {\n        if (this._anchorType === AnchorType.Center) {\n          this.setDirtyFlagTrue(GroupDirtyFlag.AnchorDirty);\n        }\n      }\n    };\n  }\n\n  private _hasRelationship(parent: Entity, compareChild: Entity): boolean {\n    while (compareChild.parent) {\n      if (parent === compareChild.parent) {\n        return true;\n      } else {\n        compareChild = compareChild.parent;\n      }\n    }\n    return false;\n  }\n\n  private _updateAnchor(): void {\n    if (this._dirtyFlag & GroupDirtyFlag.AnchorDirty) {\n      const { _worldMatrix: worldMatrix } = this;\n      const { _tempVec30: tempVec3 } = Group;\n      const { elements: e } = worldMatrix;\n      switch (this._anchorType) {\n        case AnchorType.Center:\n          this._getCenter(tempVec3);\n          (e[12] = tempVec3.x), (e[13] = tempVec3.y), (e[14] = tempVec3.z);\n          break;\n        case AnchorType.Pivot:\n          // align to the first entity\n          const worldE = this._entities[0].transform.worldMatrix.elements;\n          (e[12] = worldE[12]), (e[13] = worldE[13]), (e[14] = worldE[14]);\n          break;\n      }\n      this._dirtyFlag &= ~GroupDirtyFlag.AnchorDirty;\n    }\n  }\n\n  private _updateCoordinate(): void {\n    if (this._dirtyFlag & GroupDirtyFlag.CoordinateDirty) {\n      const { elements: e } = this._worldMatrix;\n      switch (this._coordinateType) {\n        case CoordinateType.Local:\n          // align to the first entity\n          const wE = this._entities[0].transform.worldMatrix.elements;\n          const sx = 1 / Math.sqrt(wE[0] ** 2 + wE[1] ** 2 + wE[2] ** 2);\n          const sy = 1 / Math.sqrt(wE[4] ** 2 + wE[5] ** 2 + wE[6] ** 2);\n          const sz = 1 / Math.sqrt(wE[8] ** 2 + wE[9] ** 2 + wE[10] ** 2);\n          (e[0] = wE[0] * sx), (e[4] = wE[4] * sy), (e[8] = wE[8] * sz);\n          (e[1] = wE[1] * sx), (e[5] = wE[5] * sy), (e[9] = wE[9] * sz);\n          (e[2] = wE[2] * sx), (e[6] = wE[6] * sy), (e[10] = wE[10] * sz);\n          break;\n        case CoordinateType.Global:\n          (e[0] = 1), (e[4] = 0), (e[8] = 0);\n          (e[1] = 0), (e[5] = 1), (e[9] = 0);\n          (e[2] = 0), (e[6] = 0), (e[10] = 1);\n          break;\n      }\n      this._dirtyFlag &= ~GroupDirtyFlag.CoordinateDirty;\n    }\n  }\n\n  private _getCenter(out: Vector3): void {\n    const { _tempBoundBox: tempBoundBox } = Group;\n    tempBoundBox.min.set(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n    tempBoundBox.max.set(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n    const { _entities: entities } = this;\n    let isEffective = false;\n    for (let i = entities.length - 1; i >= 0; i--) {\n      const entity = entities[i];\n      const renderers = entity.getComponentsIncludeChildren(Renderer, []);\n      isEffective ||= renderers.length > 0;\n      for (let j = renderers.length - 1; j >= 0; j--) {\n        const renderer = renderers[j];\n        if (renderer.entity.isActiveInHierarchy) {\n          BoundingBox.merge(tempBoundBox, renderers[j].bounds, tempBoundBox);\n        }\n      }\n    }\n\n    const length = tempBoundBox.getExtent(out).length();\n    if (length <= 0 || length >= Number.MAX_VALUE) {\n      isEffective = false;\n    }\n    if (isEffective) {\n      tempBoundBox.getCenter(out);\n    } else {\n      out.set(0, 0, 0);\n      for (let i = entities.length - 1; i >= 0; i--) {\n        out.add(entities[i].transform.worldPosition);\n      }\n      out.scale(1 / entities.length);\n    }\n  }\n}\n","import {\n  Camera,\n  Entity,\n  Ray,\n  Layer,\n  PointerButton,\n  Vector3,\n  MathUtil,\n  Script,\n  Pointer,\n  PointerPhase,\n  Vector2,\n  Component,\n  MeshRenderer,\n  Matrix\n} from \"@galacean/engine\";\nimport { ScaleControl } from \"./Scale\";\nimport { TranslateControl } from \"./Translate\";\nimport { RotateControl } from \"./Rotate\";\nimport { GizmoComponent } from \"./Type\";\nimport { Utils } from \"./Utils\";\nimport { State } from \"./enums/GizmoState\";\nimport { Group, GroupDirtyFlag } from \"./Group\";\nimport { FramebufferPicker } from \"@galacean/engine-toolkit-framebuffer-picker\";\n/**\n * Gizmo controls, including translate, rotate, scale\n */\nexport class Gizmo extends Script {\n  epsilon = 0.05;\n\n  private _initialized = false;\n  private _isStarted = false;\n  private _lastDistance: number = -1;\n  private _lastOrthoSize: number = -1;\n  private _lastIsOrtho: boolean = false;\n\n  private _sceneCamera: Camera;\n  private _layer: Layer;\n  private _framebufferPicker: FramebufferPicker;\n\n  private _controlMap: Array<GizmoComponent> = [];\n  private _currentControl: GizmoComponent;\n\n  private _group: Group = new Group();\n\n  private _tempVec30: Vector3 = new Vector3();\n  private _tempVec31: Vector3 = new Vector3();\n  private _worldMat: Matrix = new Matrix();\n\n  private _tempRay: Ray = new Ray();\n  private _tempRay2: Ray = new Ray();\n\n  private _type: State = null;\n  private _scalar: number = 1;\n\n  /**\n   * initial scene camera & select group in gizmo\n   */\n  init(camera: Camera, group: Group) {\n    if (camera !== this._sceneCamera) {\n      if (camera) {\n        this._group = group;\n        this._sceneCamera = camera;\n        this._framebufferPicker = camera.entity.addComponent(FramebufferPicker);\n        this._framebufferPicker.frameBufferSize = new Vector2(256, 256);\n\n        this._controlMap.forEach((gizmoControl) => {\n          gizmoControl.init(camera, this._group);\n        });\n\n        this._initialized = true;\n      } else {\n        this._initialized = false;\n      }\n    }\n  }\n\n  /**\n   * gizmo layer, default Layer31\n   * @return the layer for gizmo entity and gizmo's inner framebuffer picker\n   * @remarks Layer duplicate warning, check whether this layer is taken\n   */\n  get layer(): Layer {\n    return this._layer;\n  }\n\n  set layer(layer: Layer) {\n    if (this._layer !== layer) {\n      this._layer = layer;\n      this._traverseEntity(this.entity, (entity) => {\n        entity.layer = layer;\n      });\n    }\n  }\n\n  /**\n   * change gizmo type\n   * @return current gizmo type - translate, or rotate, scale, null, all, default null\n   */\n  get state(): State {\n    return this._type;\n  }\n\n  set state(targetState: State) {\n    this._type = targetState;\n\n    this._traverseControl(\n      targetState,\n      (control) => {\n        control.entity.isActive = true;\n        targetState === State.all ? control.onUpdate(true) : control.onUpdate(false);\n      },\n      (control) => {\n        control.entity.isActive = false;\n      }\n    );\n  }\n\n  /**\n   * change gizmo size\n   * @return current gizmo size - min 0.01, default 1\n   */\n  get size(): number {\n    return this._scalar;\n  }\n\n  set size(value: number) {\n    this._scalar = MathUtil.clamp(value, 0.01, Infinity);\n    Utils.scaleFactor = this._scalar * 0.05773502691896257;\n  }\n\n  constructor(entity: Entity) {\n    super(entity);\n    if (!this.entity.engine.physicsManager) {\n      throw new Error(\"PhysicsManager is not initialized\");\n    }\n\n    Utils.init(this.engine);\n\n    // setup mesh\n    this._createGizmoControl(State.translate, TranslateControl);\n    this._createGizmoControl(State.rotate, RotateControl);\n    this._createGizmoControl(State.scale, ScaleControl);\n\n    this.layer = Layer.Layer31;\n    this.state = this._type;\n  }\n\n  override onUpdate() {\n    if (!this._initialized) {\n      return;\n    }\n    const { inputManager } = this.engine;\n    const { pointers } = inputManager;\n    const pointer = pointers.find((pointer: Pointer) => {\n      return pointer.phase !== PointerPhase.Up && pointer.phase !== PointerPhase.Leave;\n    });\n\n    if (this._lastIsOrtho !== this._sceneCamera.isOrthographic) {\n      this._lastIsOrtho = this._sceneCamera.isOrthographic;\n      this._traverseControl(this._type, (control) => {\n        this._type === State.all ? control.onSwitch(true) : control.onSwitch(false);\n      });\n    }\n    this._group.getWorldPosition(this._tempVec30);\n    if (this._isStarted) {\n      if (pointer && (pointer.pressedButtons & PointerButton.Primary) !== 0) {\n        if (pointer.deltaPosition.x !== 0 || pointer.deltaPosition.y !== 0) {\n          this._triggerGizmoMove();\n        }\n      } else {\n        this._triggerGizmoEnd();\n      }\n      if (this._group._gizmoTransformDirty) {\n        this._traverseControl(this._type, (control) => {\n          this._type === State.all ? control.onUpdate(true) : control.onUpdate(false);\n        });\n        this._group._gizmoTransformDirty = false;\n      }\n    } else {\n      this._group.getWorldPosition(this._tempVec30);\n\n      const cameraPosition = this._sceneCamera.entity.transform.worldPosition;\n      const currDistance = Vector3.distance(cameraPosition, this._tempVec30);\n      let distanceDirty = false;\n      if (Math.abs(this._lastDistance - currDistance) > MathUtil.zeroTolerance) {\n        distanceDirty = true;\n        this._lastDistance = currDistance;\n      }\n\n      let orthoSizeDirty = false;\n      if (\n        this._sceneCamera.isOrthographic &&\n        Math.abs(this._lastOrthoSize - this._sceneCamera.orthographicSize) > MathUtil.zeroTolerance\n      ) {\n        orthoSizeDirty = true;\n        this._lastOrthoSize = this._sceneCamera.orthographicSize;\n      }\n\n      if (this._group._gizmoTransformDirty || distanceDirty || orthoSizeDirty) {\n        this._traverseControl(this._type, (control) => {\n          this._type === State.all ? control.onUpdate(true) : control.onUpdate(false);\n        });\n        this._group._gizmoTransformDirty = false;\n      }\n      if (pointer) {\n        const { x, y } = pointer.position;\n        const { canvas } = this.engine;\n        if (x <= 0 || y <= 0 || x > canvas.width || y > canvas.height) {\n          return;\n        }\n        if (inputManager.isPointerDown(PointerButton.Primary)) {\n          this._framebufferPicker.pick(pointer.position.x, pointer.position.y).then((result) => {\n            if (result) {\n              this._selectHandler(result, pointer.position);\n            }\n          });\n        } else {\n          const originLayer = this._sceneCamera.cullingMask;\n          this._sceneCamera.cullingMask = this._layer;\n\n          const result = this._framebufferPicker.pick(pointer.position.x, pointer.position.y);\n          this._sceneCamera.cullingMask = originLayer;\n          result.then((result) => {\n            this._overHandler(result);\n          });\n        }\n      }\n    }\n  }\n\n  override onLateUpdate(deltaTime: number): void {\n    this._adjustAxisAlpha();\n  }\n\n  private _createGizmoControl(type: State, gizmoComponent: new (entity: Entity) => GizmoComponent): void {\n    const control = this.entity.createChild(type.toString()).addComponent(gizmoComponent);\n    this._controlMap.push(control);\n  }\n\n  private _onGizmoHoverStart(currentType: State, axisName: string): void {\n    this._traverseControl(currentType, (control) => {\n      this._currentControl = control;\n    });\n    this._currentControl.onHoverStart(axisName);\n  }\n\n  private _onGizmoHoverEnd(): void {\n    this._currentControl && this._currentControl.onHoverEnd();\n  }\n\n  private _triggerGizmoStart(currentType: State, axisName: string): void {\n    this._isStarted = true;\n    this._onGizmoHoverEnd();\n    const pointer = this.engine.inputManager.pointers.find((pointer: Pointer) => {\n      return pointer.phase !== PointerPhase.Up && pointer.phase !== PointerPhase.Leave;\n    });\n    if (pointer) {\n      this._sceneCamera.screenPointToRay(pointer.position, this._tempRay);\n      this._traverseControl(\n        currentType,\n        (control) => {\n          this._currentControl = control;\n        },\n        (control) => {\n          control.entity.isActive = false;\n        }\n      );\n\n      this._currentControl.onMoveStart(this._tempRay, axisName);\n      this.engine.dispatch(\"gizmo-move-start\", axisName);\n    }\n  }\n\n  private _triggerGizmoMove(): void {\n    const pointer = this.engine.inputManager.pointers.find((pointer: Pointer) => {\n      return pointer.phase !== PointerPhase.Up && pointer.phase !== PointerPhase.Leave;\n    });\n    this._sceneCamera.screenPointToRay(pointer.position, this._tempRay2);\n    this._currentControl.onMove(this._tempRay2, pointer);\n  }\n\n  private _triggerGizmoEnd(): void {\n    this._currentControl && this._currentControl.onMoveEnd();\n    this._group.setDirtyFlagTrue(GroupDirtyFlag.CoordinateDirty);\n    this._traverseControl(this._type, (control) => {\n      control.entity.isActive = true;\n    });\n    this._isStarted = false;\n    this.engine.dispatch(\"gizmo-move-end\");\n  }\n\n  private _selectHandler(result: Component, pointerPosition: Vector2): void {\n    const material = (<MeshRenderer>result).getMaterial();\n    const currentControl = parseInt(material.name);\n    const selectedEntity = result.entity;\n    switch (selectedEntity.layer) {\n      case this._layer:\n        this._triggerGizmoStart(currentControl, selectedEntity.name);\n        break;\n    }\n  }\n\n  private _overHandler(result: Component): void {\n    if (result) {\n      const material = (<MeshRenderer>result).getMaterial();\n      const currentControl = parseInt(material.name);\n      const hoverEntity = result.entity;\n      this._onGizmoHoverStart(currentControl, hoverEntity.name);\n    } else {\n      this._onGizmoHoverEnd();\n    }\n  }\n\n  private _traverseEntity(entity: Entity, callback: (entity: Entity) => any) {\n    callback(entity);\n    for (const child of entity.children) {\n      this._traverseEntity(child, callback);\n    }\n  }\n\n  private _traverseControl(\n    targetType: State = this._type,\n    callbackForTarget: (control: GizmoComponent) => any,\n    callbackForOther?: (control: GizmoComponent) => any\n  ) {\n    this._controlMap.forEach((control) => {\n      if ((targetType & control.type) != 0) {\n        callbackForTarget(control);\n      } else {\n        if (callbackForOther) {\n          callbackForOther(control);\n        }\n      }\n    });\n  }\n\n  private _adjustAxisAlpha() {\n    const { xAxisPositive, yAxisPositive, zAxisPositive } = Utils;\n\n    this._traverseControl(this._type, (control) => {\n      control.onAlphaChange(\"x\", this._getAlphaFactor(xAxisPositive));\n      control.onAlphaChange(\"y\", this._getAlphaFactor(yAxisPositive));\n      control.onAlphaChange(\"z\", this._getAlphaFactor(zAxisPositive));\n    });\n  }\n\n  private _getAlphaFactor(axis: Vector3): number {\n    const { _worldMat: worldMat, _tempVec30: cameraDir, _tempVec31: tempVec, epsilon } = this;\n    cameraDir.copyFrom(this._sceneCamera.entity.transform.worldForward).normalize();\n    this._group.getWorldMatrix(worldMat);\n\n    // angel between camera direction and gizmo axis direction\n    Vector3.transformNormal(axis, worldMat, tempVec);\n    const cosThetaDir = Math.abs(Vector3.dot(tempVec, cameraDir));\n\n    if (this._sceneCamera.isOrthographic) {\n      return 1 - cosThetaDir < epsilon ? MathUtil.clamp((1 - cosThetaDir) / epsilon, 0, 1) : 1;\n    } else {\n      // perspective camera needs to consider position\n      // angle between camera direction and camera-entity position\n      this._group.getWorldPosition(tempVec);\n      Vector3.subtract(this._sceneCamera.entity.transform.worldPosition, tempVec, tempVec);\n      const cosThetaPos = Math.abs(Vector3.dot(tempVec.normalize(), cameraDir));\n\n      const minFactor = Math.min(cosThetaDir, cosThetaPos);\n      const maxFactor = Math.max(cosThetaDir, cosThetaPos);\n      return 1 - maxFactor < epsilon ? MathUtil.clamp((1 - minFactor) / epsilon, 0, 1) : 1;\n    }\n  }\n}\n"],"names":["Axis","entity","_color","Color","_highLightColor","_yellowColor","_grayColor","initAxis","value","_material","axisMaterial","copyFrom","baseColor","r","g","b","a","i","axisMesh","length","axisEntity","createChild","name","transform","rotate","axisRotation","translate","axisTranslation","axisRenderer","addComponent","MeshRenderer","receiveShadows","castShadows","priority","mesh","setMaterial","gizmoHelperEntity","parent","findByName","axisHelperMesh","temp","axisHelperEntity","axisHelperRenderer","axisHelperMaterial","highLight","unLight","yellow","gray","recover","alpha","v","Component","State","GizmoMeshRestorer","resource","primitiveInfo","restoreContent","type","circleInfo","GizmoMesh","updateCircle","startPoint","normal","thetaLength","center","tubeInfo","updateCircleTube","arc","radius","tubeRadius","tubularSegments","radialSegments","lineInfo","updateLine","points","ContentRestorer","GizmoMeshType","GizmoMeshRestoreInfo","CircleRestoreInfo","CircleTubeRestoreInfo","LineRestoreInfo","createCircle","engine","Vector3","Math","PI","ModelMesh","resourceManager","addContentRestorer","segmentFactor","newSegments","abs","ceil","segments","max","indices","Uint16Array","vertices","start","push","s","segment","Quaternion","rotationAxisAngle","_tempQuat","transformByQuat","_tempVect","clone","_initialize","MeshTopology","Triangles","createCircleTube","vertexCount","rectangleCount","Array","normals","uvs","offset","j","u","cosV","cos","sinV","sin","cosU","sinU","position","centerX","centerY","x","y","z","normalize","Vector2","c","d","bounds","outerRadius","min","set","createLine","Uint8Array","Lines","meshTopology","setPositions","setIndices","setNormals","setUVs","clearSubMesh","uploadData","addSubMesh","Utils","init","redMaterialTrans","_createPlainColorMaterial","lightRedMaterial","greenMaterialTrans","lightGreenMaterial","blueMaterialTrans","lightBlueMaterial","invisibleMaterialTrans","redArcMaterial","greenArcMaterial","blueArcMaterial","yellowMaterial","rotatePlaneMaterial","renderState","rasterState","cullMode","CullMode","Off","invisibleMaterialRotate","invisibleMaterialCircle","redMaterialScale","scale","greenMaterialScale","blueMaterialScale","greyMaterial","lightMaterial","invisibleMaterialScale","lineMesh","PrimitiveMesh","createCylinder","lineMeshShort","axisArrowMesh","createCone","axisPlaneMesh","createPlane","axisCubeMesh","createCuboid","axisSphereMesh","createSphere","axisEndCubeMesh","axisXTorusMesh","axisYTorusMesh","axisZTorusMesh","axisXYZTorusMesh","axisHelperLineMesh","axisHelperPlaneMesh","axisHelpertorusMesh","xAxisPositive","yAxisPositive","zAxisPositive","material","PlainColorMaterial","isTransparent","depthState","enabled","toString","rotateCircleRadius","scaleFactor","GizmoComponent","axisType","axisVector","axisPlane","Plane","ScaleControl","_scaleFactor","_scaleAxisComponent","_scaleControlMap","_preMatrix","Matrix","_startGroupMatrix","_startInvMatrix","_startPoint","_factorVec","_currPoint","_plane","_tempVec0","_tempVec1","_tempVec2","_tempMat","_initAxis","_createAxis","camera","group","_camera","_group","onHoverStart","axisName","_selectedAxis","onHoverEnd","currEntity","gizmoEntity","currComponent","getComponent","axesEntity","children","component","onMoveStart","ray","getWorldMatrix","invert","_getHitPlane","_calRayIntersection","localAxis","entityArray","onMove","factorVec","scaleVec","mat","subtract","xyz","end","applyTransform","dispatch","onMoveEnd","onUpdate","isModified","_resizeControl","onSwitch","onAlphaChange","axisX","axisY","axisZ","axisXYZ","currentComponent","currentGeometry","centerP","crossP","cameraP","worldPosition","transformToVec3","cross","fromPoints","out","worldToLocal","transformCoordinate","origin","transformNormal","direction","getPoint","intersectPlane","cameraPosition","isOrthographic","orthographicSize","worldMatrix","ele","elements","distance","sx","sqrt","sy","sz","TranslateControl","_scale","_startScale","_tempScale","currScale","subVec","identity","multiply","_changeAxisAlpha","_translateControlMap","axisXY","axisYZ","axisXZ","_translateAxisComponent","xy","yz","xz","RotateControl","_rotateAxisComponent","_rotateControlMap","_isModified","_startLineMesh","_endLineMesh","_rotateHelperPlaneMesh","_startMatrix","_startPointUnit","_currPointUnit","_cameraPos","_previousRad","_finalRad","_verticalAxis","_horizontalAxis","_speedFactor","_tempMat2","_tempVec","_tempVec30","_tempVec31","_tempVec32","_tempMat41","_isAtBack","_axisX","_axisY","_axisZ","_axisXYZ","axisHelpers","_axisXHelper","_axisYHelper","_axisZHelper","_axisXYZHelper","_gizmoRotateHelperEntity","_startLineHelperEntity","startHelperRenderer","_endLineHelperEntity","endHelperRenderer","_rotateHelperPlaneEntity","planeHelperRenderer","_enableVAO","isActive","startMat","tempVec","tempMat","_getGizmoScale","startP","_setAxisSelected","setRotation","worldUp","pointer","currP","rad","_getFinalRad","rotateAxisAngle","deltaPosition","hAxis","vAxis","add","angle","_updateAxisTransform","axis","isSelected","p1","p2","rotateAxis","dot","currentRad","sign","acos","incrementRad","getWorldPosition","gizmoTrans","factor","MathUtil","radToDegreeFactor","rotation","atan2","_localLookAt","rotationQuaternion","targetPosition","zAxis","xAxis","yAxis","rotMat","e","getRotation","AnchorType","CoordinateType","GroupDirtyFlag","Group","_gizmoTransformDirty","_entities","_listeners","_worldMatrix","_anchorType","Pivot","_coordinateType","Local","_dirtyFlag","addEntity","entities","canAdd","compareEntity","_hasRelationship","_applyDel","_applyAdd","addEntities","deleteEntity","delEntity","deleteEntities","delEntities","getIndexOf","findIndex","reset","listeners","listener","flagManager","removeListener","fun","_updateAnchor","_updateCoordinate","from","to","equals","_tempMat0","_tempMat1","nodeMat","groupWorldInvMat","nodeTrans","setDirtyFlagTrue","flag","_onEntityWorldTransformChange","_updateFlagManager","addListener","index","indexOf","splice","Center","compareChild","tempVec3","_getCenter","worldE","wE","Global","tempBoundBox","_tempBoundBox","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","isEffective","renderers","getComponentsIncludeChildren","Renderer","renderer","isActiveInHierarchy","BoundingBox","merge","getExtent","MAX_VALUE","getCenter","anchorType","coordinateType","Gizmo","epsilon","_initialized","_isStarted","_lastDistance","_lastOrthoSize","_lastIsOrtho","_controlMap","_worldMat","_tempRay","Ray","_tempRay2","_type","_scalar","physicsManager","Error","_createGizmoControl","layer","Layer","Layer31","state","_sceneCamera","_framebufferPicker","FramebufferPicker","frameBufferSize","forEach","gizmoControl","inputManager","pointers","find","phase","PointerPhase","Up","Leave","_traverseControl","control","all","pressedButtons","PointerButton","Primary","_triggerGizmoMove","_triggerGizmoEnd","currDistance","distanceDirty","zeroTolerance","orthoSizeDirty","canvas","width","height","isPointerDown","pick","then","result","_selectHandler","originLayer","cullingMask","_layer","_overHandler","onLateUpdate","deltaTime","_adjustAxisAlpha","gizmoComponent","_onGizmoHoverStart","currentType","_currentControl","_onGizmoHoverEnd","_triggerGizmoStart","screenPointToRay","CoordinateDirty","pointerPosition","getMaterial","currentControl","parseInt","selectedEntity","hoverEntity","_traverseEntity","callback","child","targetType","callbackForTarget","callbackForOther","_getAlphaFactor","worldMat","cameraDir","worldForward","cosThetaDir","clamp","cosThetaPos","minFactor","maxFactor","targetState","size","Infinity","Script"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5]}