{"version":3,"file":"Gizmo.js","sources":["../../src/Gizmo.ts"],"sourcesContent":["import {\n  Camera,\n  Entity,\n  Ray,\n  Layer,\n  PointerButton,\n  Vector3,\n  MathUtil,\n  Script,\n  Pointer,\n  PointerPhase,\n  Vector2,\n  Component,\n  MeshRenderer,\n  Matrix\n} from \"@galacean/engine\";\nimport { ScaleControl } from \"./Scale\";\nimport { TranslateControl } from \"./Translate\";\nimport { RotateControl } from \"./Rotate\";\nimport { GizmoComponent } from \"./Type\";\nimport { Utils } from \"./Utils\";\nimport { State } from \"./enums/GizmoState\";\nimport { Group, GroupDirtyFlag } from \"./Group\";\nimport { FramebufferPicker } from \"@galacean/engine-toolkit-framebuffer-picker\";\n/**\n * Gizmo controls, including translate, rotate, scale\n */\nexport class Gizmo extends Script {\n  epsilon = 0.05;\n\n  private _initialized = false;\n  private _isStarted = false;\n  private _lastDistance: number = -1;\n  private _lastOrthoSize: number = -1;\n  private _lastIsOrtho: boolean = false;\n\n  private _sceneCamera: Camera;\n  private _layer: Layer;\n  private _framebufferPicker: FramebufferPicker;\n\n  private _controlMap: Array<GizmoComponent> = [];\n  private _currentControl: GizmoComponent;\n\n  private _group: Group = new Group();\n\n  private _tempVec30: Vector3 = new Vector3();\n  private _tempVec31: Vector3 = new Vector3();\n  private _worldMat: Matrix = new Matrix();\n\n  private _tempRay: Ray = new Ray();\n  private _tempRay2: Ray = new Ray();\n\n  private _type: State = null;\n  private _scalar: number = 1;\n\n  /**\n   * initial scene camera & select group in gizmo\n   */\n  init(camera: Camera, group: Group) {\n    if (camera !== this._sceneCamera) {\n      if (camera) {\n        this._group = group;\n        this._sceneCamera = camera;\n        this._framebufferPicker = camera.entity.addComponent(FramebufferPicker);\n        this._framebufferPicker.frameBufferSize = new Vector2(256, 256);\n\n        this._controlMap.forEach((gizmoControl) => {\n          gizmoControl.init(camera, this._group);\n        });\n\n        this._initialized = true;\n      } else {\n        this._initialized = false;\n      }\n    }\n  }\n\n  /**\n   * gizmo layer, default Layer31\n   * @return the layer for gizmo entity and gizmo's inner framebuffer picker\n   * @remarks Layer duplicate warning, check whether this layer is taken\n   */\n  get layer(): Layer {\n    return this._layer;\n  }\n\n  set layer(layer: Layer) {\n    if (this._layer !== layer) {\n      this._layer = layer;\n      this._traverseEntity(this.entity, (entity) => {\n        entity.layer = layer;\n      });\n    }\n  }\n\n  /**\n   * change gizmo type\n   * @return current gizmo type - translate, or rotate, scale, null, all, default null\n   */\n  get state(): State {\n    return this._type;\n  }\n\n  set state(targetState: State) {\n    this._type = targetState;\n\n    this._traverseControl(\n      targetState,\n      (control) => {\n        control.entity.isActive = true;\n        targetState === State.all ? control.onUpdate(true) : control.onUpdate(false);\n      },\n      (control) => {\n        control.entity.isActive = false;\n      }\n    );\n  }\n\n  /**\n   * change gizmo size\n   * @return current gizmo size - min 0.01, default 1\n   */\n  get size(): number {\n    return this._scalar;\n  }\n\n  set size(value: number) {\n    this._scalar = MathUtil.clamp(value, 0.01, Infinity);\n    Utils.scaleFactor = this._scalar * 0.05773502691896257;\n  }\n\n  constructor(entity: Entity) {\n    super(entity);\n    if (!this.entity.engine.physicsManager) {\n      throw new Error(\"PhysicsManager is not initialized\");\n    }\n\n    Utils.init(this.engine);\n\n    // setup mesh\n    this._createGizmoControl(State.translate, TranslateControl);\n    this._createGizmoControl(State.rotate, RotateControl);\n    this._createGizmoControl(State.scale, ScaleControl);\n\n    this.layer = Layer.Layer31;\n    this.state = this._type;\n  }\n\n  override onUpdate() {\n    if (!this._initialized) {\n      return;\n    }\n    const { inputManager } = this.engine;\n    const { pointers } = inputManager;\n    const pointer = pointers.find((pointer: Pointer) => {\n      return pointer.phase !== PointerPhase.Up && pointer.phase !== PointerPhase.Leave;\n    });\n\n    if (this._lastIsOrtho !== this._sceneCamera.isOrthographic) {\n      this._lastIsOrtho = this._sceneCamera.isOrthographic;\n      this._traverseControl(this._type, (control) => {\n        this._type === State.all ? control.onSwitch(true) : control.onSwitch(false);\n      });\n    }\n    this._group.getWorldPosition(this._tempVec30);\n    if (this._isStarted) {\n      if (pointer && (pointer.pressedButtons & PointerButton.Primary) !== 0) {\n        if (pointer.deltaPosition.x !== 0 || pointer.deltaPosition.y !== 0) {\n          this._triggerGizmoMove();\n        }\n      } else {\n        this._triggerGizmoEnd();\n      }\n      if (this._group._gizmoTransformDirty) {\n        this._traverseControl(this._type, (control) => {\n          this._type === State.all ? control.onUpdate(true) : control.onUpdate(false);\n        });\n        this._group._gizmoTransformDirty = false;\n      }\n    } else {\n      this._group.getWorldPosition(this._tempVec30);\n\n      const cameraPosition = this._sceneCamera.entity.transform.worldPosition;\n      const currDistance = Vector3.distance(cameraPosition, this._tempVec30);\n      let distanceDirty = false;\n      if (Math.abs(this._lastDistance - currDistance) > MathUtil.zeroTolerance) {\n        distanceDirty = true;\n        this._lastDistance = currDistance;\n      }\n\n      let orthoSizeDirty = false;\n      if (\n        this._sceneCamera.isOrthographic &&\n        Math.abs(this._lastOrthoSize - this._sceneCamera.orthographicSize) > MathUtil.zeroTolerance\n      ) {\n        orthoSizeDirty = true;\n        this._lastOrthoSize = this._sceneCamera.orthographicSize;\n      }\n\n      if (this._group._gizmoTransformDirty || distanceDirty || orthoSizeDirty) {\n        this._traverseControl(this._type, (control) => {\n          this._type === State.all ? control.onUpdate(true) : control.onUpdate(false);\n        });\n        this._group._gizmoTransformDirty = false;\n      }\n      if (pointer) {\n        const { x, y } = pointer.position;\n        const { canvas } = this.engine;\n        if (x <= 0 || y <= 0 || x > canvas.width || y > canvas.height) {\n          return;\n        }\n        if (inputManager.isPointerDown(PointerButton.Primary)) {\n          this._framebufferPicker.pick(pointer.position.x, pointer.position.y).then((result) => {\n            if (result) {\n              this._selectHandler(result, pointer.position);\n            }\n          });\n        } else {\n          const originLayer = this._sceneCamera.cullingMask;\n          this._sceneCamera.cullingMask = this._layer;\n\n          const result = this._framebufferPicker.pick(pointer.position.x, pointer.position.y);\n          this._sceneCamera.cullingMask = originLayer;\n          result.then((result) => {\n            this._overHandler(result);\n          });\n        }\n      }\n    }\n  }\n\n  override onLateUpdate(deltaTime: number): void {\n    this._adjustAxisAlpha();\n  }\n\n  private _createGizmoControl(type: State, gizmoComponent: new (entity: Entity) => GizmoComponent): void {\n    const control = this.entity.createChild(type.toString()).addComponent(gizmoComponent);\n    this._controlMap.push(control);\n  }\n\n  private _onGizmoHoverStart(currentType: State, axisName: string): void {\n    this._traverseControl(currentType, (control) => {\n      this._currentControl = control;\n    });\n    this._currentControl.onHoverStart(axisName);\n  }\n\n  private _onGizmoHoverEnd(): void {\n    this._currentControl && this._currentControl.onHoverEnd();\n  }\n\n  private _triggerGizmoStart(currentType: State, axisName: string): void {\n    this._isStarted = true;\n    this._onGizmoHoverEnd();\n    const pointer = this.engine.inputManager.pointers.find((pointer: Pointer) => {\n      return pointer.phase !== PointerPhase.Up && pointer.phase !== PointerPhase.Leave;\n    });\n    if (pointer) {\n      this._sceneCamera.screenPointToRay(pointer.position, this._tempRay);\n      this._traverseControl(\n        currentType,\n        (control) => {\n          this._currentControl = control;\n        },\n        (control) => {\n          control.entity.isActive = false;\n        }\n      );\n\n      this._currentControl.onMoveStart(this._tempRay, axisName);\n      this.engine.dispatch(\"gizmo-move-start\", axisName);\n    }\n  }\n\n  private _triggerGizmoMove(): void {\n    const pointer = this.engine.inputManager.pointers.find((pointer: Pointer) => {\n      return pointer.phase !== PointerPhase.Up && pointer.phase !== PointerPhase.Leave;\n    });\n    this._sceneCamera.screenPointToRay(pointer.position, this._tempRay2);\n    this._currentControl.onMove(this._tempRay2, pointer);\n  }\n\n  private _triggerGizmoEnd(): void {\n    this._currentControl && this._currentControl.onMoveEnd();\n    this._group.setDirtyFlagTrue(GroupDirtyFlag.CoordinateDirty);\n    this._traverseControl(this._type, (control) => {\n      control.entity.isActive = true;\n    });\n    this._isStarted = false;\n    this.engine.dispatch(\"gizmo-move-end\");\n  }\n\n  private _selectHandler(result: Component, pointerPosition: Vector2): void {\n    const material = (<MeshRenderer>result).getMaterial();\n    const currentControl = parseInt(material.name);\n    const selectedEntity = result.entity;\n    switch (selectedEntity.layer) {\n      case this._layer:\n        this._triggerGizmoStart(currentControl, selectedEntity.name);\n        break;\n    }\n  }\n\n  private _overHandler(result: Component): void {\n    if (result) {\n      const material = (<MeshRenderer>result).getMaterial();\n      const currentControl = parseInt(material.name);\n      const hoverEntity = result.entity;\n      this._onGizmoHoverStart(currentControl, hoverEntity.name);\n    } else {\n      this._onGizmoHoverEnd();\n    }\n  }\n\n  private _traverseEntity(entity: Entity, callback: (entity: Entity) => any) {\n    callback(entity);\n    for (const child of entity.children) {\n      this._traverseEntity(child, callback);\n    }\n  }\n\n  private _traverseControl(\n    targetType: State = this._type,\n    callbackForTarget: (control: GizmoComponent) => any,\n    callbackForOther?: (control: GizmoComponent) => any\n  ) {\n    this._controlMap.forEach((control) => {\n      if ((targetType & control.type) != 0) {\n        callbackForTarget(control);\n      } else {\n        if (callbackForOther) {\n          callbackForOther(control);\n        }\n      }\n    });\n  }\n\n  private _adjustAxisAlpha() {\n    const { xAxisPositive, yAxisPositive, zAxisPositive } = Utils;\n\n    this._traverseControl(this._type, (control) => {\n      control.onAlphaChange(\"x\", this._getAlphaFactor(xAxisPositive));\n      control.onAlphaChange(\"y\", this._getAlphaFactor(yAxisPositive));\n      control.onAlphaChange(\"z\", this._getAlphaFactor(zAxisPositive));\n    });\n  }\n\n  private _getAlphaFactor(axis: Vector3): number {\n    const { _worldMat: worldMat, _tempVec30: cameraDir, _tempVec31: tempVec, epsilon } = this;\n    cameraDir.copyFrom(this._sceneCamera.entity.transform.worldForward).normalize();\n    this._group.getWorldMatrix(worldMat);\n\n    // angel between camera direction and gizmo axis direction\n    Vector3.transformNormal(axis, worldMat, tempVec);\n    const cosThetaDir = Math.abs(Vector3.dot(tempVec, cameraDir));\n\n    if (this._sceneCamera.isOrthographic) {\n      return 1 - cosThetaDir < epsilon ? MathUtil.clamp((1 - cosThetaDir) / epsilon, 0, 1) : 1;\n    } else {\n      // perspective camera needs to consider position\n      // angle between camera direction and camera-entity position\n      this._group.getWorldPosition(tempVec);\n      Vector3.subtract(this._sceneCamera.entity.transform.worldPosition, tempVec, tempVec);\n      const cosThetaPos = Math.abs(Vector3.dot(tempVec.normalize(), cameraDir));\n\n      const minFactor = Math.min(cosThetaDir, cosThetaPos);\n      const maxFactor = Math.max(cosThetaDir, cosThetaPos);\n      return 1 - maxFactor < epsilon ? MathUtil.clamp((1 - minFactor) / epsilon, 0, 1) : 1;\n    }\n  }\n}\n"],"names":["Gizmo","entity","epsilon","_initialized","_isStarted","_lastDistance","_lastOrthoSize","_lastIsOrtho","_controlMap","_group","Group","_tempVec30","Vector3","_tempVec31","_worldMat","Matrix","_tempRay","Ray","_tempRay2","_type","_scalar","engine","physicsManager","Error","Utils","init","_createGizmoControl","State","translate","TranslateControl","rotate","RotateControl","scale","ScaleControl","layer","Layer","Layer31","state","camera","group","_sceneCamera","_framebufferPicker","addComponent","FramebufferPicker","frameBufferSize","Vector2","forEach","gizmoControl","onUpdate","inputManager","pointers","pointer","find","phase","PointerPhase","Up","Leave","isOrthographic","_traverseControl","control","all","onSwitch","getWorldPosition","pressedButtons","PointerButton","Primary","deltaPosition","x","y","_triggerGizmoMove","_triggerGizmoEnd","_gizmoTransformDirty","cameraPosition","transform","worldPosition","currDistance","distance","distanceDirty","Math","abs","MathUtil","zeroTolerance","orthoSizeDirty","orthographicSize","position","canvas","width","height","isPointerDown","pick","then","result","_selectHandler","originLayer","cullingMask","_layer","_overHandler","onLateUpdate","deltaTime","_adjustAxisAlpha","type","gizmoComponent","createChild","toString","push","_onGizmoHoverStart","currentType","axisName","_currentControl","onHoverStart","_onGizmoHoverEnd","onHoverEnd","_triggerGizmoStart","screenPointToRay","isActive","onMoveStart","dispatch","onMove","onMoveEnd","setDirtyFlagTrue","GroupDirtyFlag","CoordinateDirty","pointerPosition","material","getMaterial","currentControl","parseInt","name","selectedEntity","hoverEntity","_traverseEntity","callback","children","child","targetType","callbackForTarget","callbackForOther","xAxisPositive","yAxisPositive","zAxisPositive","onAlphaChange","_getAlphaFactor","axis","worldMat","cameraDir","tempVec","copyFrom","worldForward","normalize","getWorldMatrix","transformNormal","cosThetaDir","dot","clamp","subtract","cosThetaPos","minFactor","min","maxFactor","max","targetState","size","value","Infinity","scaleFactor","Script"],"mappings":"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"}