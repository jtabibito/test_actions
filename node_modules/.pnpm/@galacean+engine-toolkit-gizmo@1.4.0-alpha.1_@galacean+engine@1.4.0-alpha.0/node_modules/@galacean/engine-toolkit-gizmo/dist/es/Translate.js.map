{"version":3,"file":"Translate.js","sources":["../../src/Translate.ts"],"sourcesContent":["import { Camera, Entity, Plane, Ray, Vector3, Matrix } from \"@galacean/engine\";\n\nimport { Axis } from \"./Axis\";\nimport { Utils } from \"./Utils\";\nimport { Group } from \"./Group\";\nimport { GizmoComponent, AxisProps, axisVector, axisPlane, axisType } from \"./Type\";\nimport { State } from \"./enums/GizmoState\";\n\n/** @internal */\nexport class TranslateControl extends GizmoComponent {\n  private _scale: number = 1;\n  private _camera: Camera;\n  private _group: Group;\n  private _translateAxisComponent: Array<Axis>;\n  private _translateControlMap: Array<AxisProps>;\n\n  private _selectedAxis: axisType;\n\n  private _preMatrix: Matrix = new Matrix();\n  private _startGroupMatrix: Matrix = new Matrix();\n  private _startInvMatrix: Matrix = new Matrix();\n  private _startScale: number = 1;\n  private _startPoint: Vector3 = new Vector3();\n  private _currPoint = new Vector3();\n  private _plane: Plane = new Plane();\n\n  private _tempVec0: Vector3 = new Vector3();\n  private _tempVec1: Vector3 = new Vector3();\n  private _tempVec2: Vector3 = new Vector3();\n  private _tempMat: Matrix = new Matrix();\n  private _tempScale: number = 1;\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.type = State.translate;\n    this._initAxis();\n    this._createAxis(entity);\n  }\n\n  init(camera: Camera, group: Group): void {\n    this._camera = camera;\n    this._group = group;\n  }\n\n  onHoverStart(axisName: string): void {\n    if (this._selectedAxis === axisType[axisName]) return;\n    this.onHoverEnd();\n\n    this._selectedAxis = axisType[axisName];\n    const currEntity = this.gizmoEntity.findByName(axisName);\n    const currComponent = currEntity.getComponent(Axis);\n    currComponent.highLight && currComponent.highLight();\n  }\n\n  onHoverEnd(): void {\n    const axesEntity = this.gizmoEntity.children;\n    for (let entity of axesEntity) {\n      const component = entity.getComponent(Axis);\n      component.unLight && component.unLight();\n    }\n\n    this._selectedAxis = null;\n  }\n\n  onMoveStart(ray: Ray, axisName: string): void {\n    this._selectedAxis = axisType[axisName];\n    // get gizmo start worldPosition\n    this._group.getWorldMatrix(this._startGroupMatrix);\n    this._preMatrix.copyFrom(this._startGroupMatrix);\n    Matrix.invert(this._startGroupMatrix, this._startInvMatrix);\n\n    // get start scale\n    this._startScale = this._scale;\n\n    // get start point\n    this._getHitPlane();\n    this._calRayIntersection(ray, this._startPoint);\n\n    // change axis color\n    const entityArray = this.gizmoEntity.children;\n    for (let i = 0; i < entityArray.length; i++) {\n      const currEntity = entityArray[i];\n      const currComponent = currEntity.getComponent(Axis);\n      if (axisType[currEntity.name] === this._selectedAxis) {\n        currComponent.yellow && currComponent.yellow();\n      } else {\n        currComponent.gray && currComponent.gray();\n      }\n    }\n  }\n\n  onMove(ray: Ray): void {\n    // transform ray to local space\n    this._calRayIntersection(ray, this._currPoint);\n    const currScale = this._scale;\n    const { _tempMat: mat, _tempVec0: subVec, _startScale } = this;\n    // eliminate the side effect of gizmo's scaling\n    subVec.x = this._currPoint.x - (this._startPoint.x / _startScale) * currScale;\n    subVec.y = this._currPoint.y - (this._startPoint.y / _startScale) * currScale;\n    subVec.z = this._currPoint.z - (this._startPoint.z / _startScale) * currScale;\n\n    const localAxis = axisVector[this._selectedAxis];\n    mat.identity();\n    mat.elements[12] = subVec.x * localAxis.x;\n    mat.elements[13] = subVec.y * localAxis.y;\n    mat.elements[14] = subVec.z * localAxis.z;\n\n    Matrix.multiply(this._startGroupMatrix, mat, mat);\n    this._group.applyTransform(this._preMatrix, mat);\n    this._preMatrix.copyFrom(mat);\n    this.engine.dispatch(\"gizmo-move\", \"translate\");\n  }\n\n  onMoveEnd(): void {\n    // recover axis cover\n    const entityArray = this.gizmoEntity.children;\n    for (let i = 0; i < entityArray.length; i++) {\n      const currEntity = entityArray[i];\n      const currComponent = currEntity.getComponent(Axis);\n      currComponent.recover && currComponent.recover();\n    }\n  }\n\n  onUpdate(isModified: boolean = false): void {\n    this._resizeControl(isModified);\n  }\n\n  onSwitch() {\n    this._resizeControl();\n  }\n\n  onAlphaChange(axisName: string, value: number) {\n    switch (axisName) {\n      case \"x\":\n        this._changeAxisAlpha(\"x\", value);\n        this._changeAxisAlpha(\"xy\", value);\n        this._changeAxisAlpha(\"xz\", value);\n        break;\n      case \"y\":\n        this._changeAxisAlpha(\"y\", value);\n        this._changeAxisAlpha(\"xy\", value);\n        this._changeAxisAlpha(\"xz\", value);\n        break;\n      case \"z\":\n        this._changeAxisAlpha(\"z\", value);\n        this._changeAxisAlpha(\"xz\", value);\n        this._changeAxisAlpha(\"yz\", value);\n        break;\n    }\n  }\n\n  private _initAxis(): void {\n    this._translateControlMap = [\n      {\n        name: \"x\",\n        axisMesh: [Utils.lineMesh, Utils.axisArrowMesh],\n        axisMaterial: Utils.redMaterialTrans,\n        axisHelperMesh: [Utils.axisHelperLineMesh],\n        axisHelperMaterial: Utils.invisibleMaterialTrans,\n        axisRotation: [new Vector3(0, 0, -90), new Vector3(0, 0, -90)],\n        axisTranslation: [new Vector3(0.75, 0, 0), new Vector3(1.5, 0, 0)]\n      },\n      {\n        name: \"y\",\n        axisMesh: [Utils.lineMesh, Utils.axisArrowMesh],\n        axisMaterial: Utils.greenMaterialTrans,\n        axisHelperMesh: [Utils.axisHelperLineMesh],\n        axisHelperMaterial: Utils.invisibleMaterialTrans,\n        axisRotation: [new Vector3(0, 90, 0), new Vector3(0, 0, 0)],\n        axisTranslation: [new Vector3(0, 0.75, 0), new Vector3(0, 1.5, 0)]\n      },\n      {\n        name: \"z\",\n        axisMesh: [Utils.lineMesh, Utils.axisArrowMesh],\n        axisMaterial: Utils.blueMaterialTrans,\n        axisHelperMesh: [Utils.axisHelperLineMesh],\n        axisHelperMaterial: Utils.invisibleMaterialTrans,\n        axisRotation: [new Vector3(0, 90, 90), new Vector3(0, 90, 90)],\n        axisTranslation: [new Vector3(0, 0, 0.75), new Vector3(0, 0, 1.5)]\n      },\n      {\n        name: \"xy\",\n        axisMesh: [Utils.axisPlaneMesh],\n        axisMaterial: Utils.lightBlueMaterial,\n        axisHelperMesh: [Utils.axisHelperPlaneMesh],\n        axisHelperMaterial: Utils.invisibleMaterialTrans,\n        axisRotation: [new Vector3(0, 90, 90)],\n        axisTranslation: [new Vector3(0.5, 0.5, 0)]\n      },\n      {\n        name: \"yz\",\n        axisMesh: [Utils.axisPlaneMesh],\n        axisMaterial: Utils.lightRedMaterial,\n        axisHelperMesh: [Utils.axisHelperPlaneMesh],\n        axisHelperMaterial: Utils.invisibleMaterialTrans,\n\n        axisRotation: [new Vector3(90, 90, 0)],\n        axisTranslation: [new Vector3(0, 0.5, 0.5)]\n      },\n      {\n        name: \"xz\",\n        axisMesh: [Utils.axisPlaneMesh],\n        axisMaterial: Utils.lightGreenMaterial,\n        axisHelperMesh: [Utils.axisHelperPlaneMesh],\n        axisHelperMaterial: Utils.invisibleMaterialTrans,\n        axisRotation: [new Vector3(0, 0, 0)],\n        axisTranslation: [new Vector3(0.5, 0, 0.5)]\n      }\n    ];\n  }\n\n  private _createAxis(entity: Entity): void {\n    this.gizmoEntity = entity.createChild(\"visible\");\n    this.gizmoHelperEntity = entity.createChild(\"invisible\");\n\n    const axisX = this.gizmoEntity.createChild(\"x\");\n    const axisY = this.gizmoEntity.createChild(\"y\");\n    const axisZ = this.gizmoEntity.createChild(\"z\");\n    const axisXY = this.gizmoEntity.createChild(\"xy\");\n    const axisYZ = this.gizmoEntity.createChild(\"yz\");\n    const axisXZ = this.gizmoEntity.createChild(\"xz\");\n\n    this._translateAxisComponent = [\n      axisX.addComponent(Axis),\n      axisY.addComponent(Axis),\n      axisZ.addComponent(Axis),\n      axisXY.addComponent(Axis),\n      axisYZ.addComponent(Axis),\n      axisXZ.addComponent(Axis)\n    ];\n\n    for (let i = 0; i < this._translateControlMap.length; i++) {\n      const currentComponent = this._translateAxisComponent[i];\n      const currentGeometry = this._translateControlMap[i];\n\n      currentComponent.initAxis(currentGeometry);\n    }\n  }\n\n  private _getHitPlane(): void {\n    switch (this._selectedAxis) {\n      case axisType.x:\n      case axisType.y:\n      case axisType.z:\n        const { _tempVec0: centerP, _tempVec1: crossP, _tempVec2: cameraP } = this;\n        cameraP.copyFrom(this._camera.entity.transform.worldPosition);\n        cameraP.transformToVec3(this._startInvMatrix);\n        const localAxis = axisVector[this._selectedAxis];\n\n        Vector3.cross(cameraP, localAxis, crossP);\n        Plane.fromPoints(localAxis, centerP.set(0, 0, 0), crossP, this._plane);\n        break;\n      case axisType.xy:\n      case axisType.yz:\n      case axisType.xz:\n        this._plane.copyFrom(axisPlane[this._selectedAxis]);\n        break;\n    }\n  }\n\n  private _calRayIntersection(ray: Ray, out: Vector3): void {\n    const worldToLocal = this._startInvMatrix;\n    Vector3.transformCoordinate(ray.origin, worldToLocal, ray.origin);\n    Vector3.transformNormal(ray.direction, worldToLocal, ray.direction);\n    ray.getPoint(ray.intersectPlane(this._plane), out);\n  }\n\n  private _resizeControl(isModified: boolean = false): void {\n    const { _tempMat, _tempVec0 } = this;\n    const cameraPosition = this._camera.entity.transform.worldPosition;\n    this._group.getWorldMatrix(_tempMat);\n\n    if (this._camera.isOrthographic) {\n      this._tempScale = this._camera.orthographicSize * Utils.scaleFactor * 3;\n    } else {\n      _tempVec0.set(_tempMat.elements[12], _tempMat.elements[13], _tempMat.elements[14]);\n      this._tempScale = this._scale = Vector3.distance(cameraPosition, _tempVec0) * Utils.scaleFactor;\n    }\n    this.gizmoEntity.transform.worldMatrix = this.gizmoHelperEntity.transform.worldMatrix = _tempMat.scale(\n      _tempVec0.set(this._tempScale, this._tempScale, this._tempScale)\n    );\n  }\n\n  private _changeAxisAlpha(axisName: string, value: number) {\n    const entity = this.gizmoEntity.findByName(axisName);\n    if (entity) {\n      const component = entity.getComponent(Axis);\n      component.alpha(value);\n    }\n  }\n}\n"],"names":["TranslateControl","entity","_scale","_preMatrix","Matrix","_startGroupMatrix","_startInvMatrix","_startScale","_startPoint","Vector3","_currPoint","_plane","Plane","_tempVec0","_tempVec1","_tempVec2","_tempMat","_tempScale","type","State","translate","_initAxis","_createAxis","init","camera","group","_camera","_group","onHoverStart","axisName","_selectedAxis","axisType","onHoverEnd","currEntity","gizmoEntity","findByName","currComponent","getComponent","Axis","highLight","axesEntity","children","component","unLight","onMoveStart","ray","getWorldMatrix","copyFrom","invert","_getHitPlane","_calRayIntersection","entityArray","i","length","name","yellow","gray","onMove","currScale","mat","subVec","x","y","z","localAxis","axisVector","identity","elements","multiply","applyTransform","engine","dispatch","onMoveEnd","recover","onUpdate","isModified","_resizeControl","onSwitch","onAlphaChange","value","_changeAxisAlpha","_translateControlMap","axisMesh","Utils","lineMesh","axisArrowMesh","axisMaterial","redMaterialTrans","axisHelperMesh","axisHelperLineMesh","axisHelperMaterial","invisibleMaterialTrans","axisRotation","axisTranslation","greenMaterialTrans","blueMaterialTrans","axisPlaneMesh","lightBlueMaterial","axisHelperPlaneMesh","lightRedMaterial","lightGreenMaterial","createChild","gizmoHelperEntity","axisX","axisY","axisZ","axisXY","axisYZ","axisXZ","_translateAxisComponent","addComponent","currentComponent","currentGeometry","initAxis","centerP","crossP","cameraP","transform","worldPosition","transformToVec3","cross","fromPoints","set","xy","yz","xz","axisPlane","out","worldToLocal","transformCoordinate","origin","transformNormal","direction","getPoint","intersectPlane","cameraPosition","isOrthographic","orthographicSize","scaleFactor","distance","worldMatrix","scale","alpha","GizmoComponent"],"mappings":"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"}