{"version":3,"file":"Group-71055858.js","sources":["../../../../node_modules/.pnpm/@swc+helpers@0.5.7/node_modules/@swc/helpers/esm/_create_class.js","../../src/Group.ts"],"sourcesContent":["function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { BoundingBox, Renderer, Vector3, Matrix, Entity } from \"@galacean/engine\";\nimport { AnchorType, CoordinateType } from \"./enums/GroupState\";\n\n/**\n * dirty flag for the group\n */\nexport enum GroupDirtyFlag {\n  /**\n   * none\n   */\n  None = 0,\n  /**\n   * anchor changed\n   */\n  AnchorDirty = 1,\n  /**\n   * coordinate changed\n   */\n  CoordinateDirty = 2,\n  /**\n   * anchor & coordinate changed\n   */\n  All = 3\n}\n\n/**\n * Group\n */\nexport class Group {\n  private static _tempVec30: Vector3 = new Vector3();\n  private static _tempMat0: Matrix = new Matrix();\n  private static _tempMat1: Matrix = new Matrix();\n  private static _tempBoundBox: BoundingBox = new BoundingBox();\n\n  // @internal\n  _gizmoTransformDirty: boolean = true;\n\n  private _entities: Entity[] = [];\n  private _listeners: { flagManager; fun: (entity: Entity) => void }[] = [];\n  private _worldMatrix: Matrix = new Matrix();\n  private _anchorType: AnchorType = AnchorType.Pivot;\n  private _coordinateType: CoordinateType = CoordinateType.Local;\n  private _dirtyFlag: GroupDirtyFlag = GroupDirtyFlag.All;\n\n  /**\n   * get anchor type\n   * @return anchor type, pivot or center\n   */\n  get anchorType(): AnchorType {\n    return this._anchorType;\n  }\n\n  set anchorType(value: AnchorType) {\n    if (this._anchorType !== value) {\n      this._anchorType = value;\n      this.setDirtyFlagTrue(GroupDirtyFlag.AnchorDirty);\n    }\n  }\n\n  /**\n   * get coordinate type\n   * @return coordinate type, world or local\n   */\n  get coordinateType(): CoordinateType {\n    return this._coordinateType;\n  }\n\n  set coordinateType(value: CoordinateType) {\n    if (this._coordinateType !== value) {\n      this._coordinateType = value;\n      this.setDirtyFlagTrue(GroupDirtyFlag.CoordinateDirty);\n    }\n  }\n  /**\n   * add entity to the group\n   * @param addEntity - entity to add\n   */\n  addEntity(addEntity: Entity): boolean {\n    const { _entities: entities } = this;\n    let canAdd: boolean = true;\n    for (let j = entities.length - 1; j >= 0; j--) {\n      const compareEntity = entities[j];\n      if (compareEntity === addEntity) {\n        canAdd = false;\n        break;\n      } else if (this._hasRelationship(compareEntity, addEntity)) {\n        canAdd = false;\n        break;\n      } else if (this._hasRelationship(addEntity, compareEntity)) {\n        this._applyDel(j);\n      }\n    }\n    if (canAdd) {\n      this._applyAdd(addEntity);\n    }\n\n    return canAdd;\n  }\n\n  /**\n   * add entities to the group\n   * @param addEntities - entities to add, in array\n   */\n  addEntities(addEntities: Entity[]): void {\n    for (let i = addEntities.length - 1; i >= 0; i--) {\n      this.addEntity(addEntities[i]);\n    }\n  }\n\n  /**\n   * remove entity from the group\n   * @param delEntity - entity to delete\n   */\n  deleteEntity(delEntity: Entity): void {\n    this._applyDel(delEntity);\n  }\n\n  /**\n   * remove entities from the group\n   * @param delEntities - entities to delete, in array\n   */\n  deleteEntities(delEntities: Entity[]): void {\n    for (let i = delEntities.length - 1; i >= 0; i--) {\n      this.deleteEntity(delEntities[i]);\n    }\n  }\n\n  /**\n   * get entity index in group\n   * @param entity\n   * @return number, -1 if not in group\n   */\n  getIndexOf(entity: Entity): number {\n    const { _entities: entities } = this;\n    return entities.findIndex((ele: Entity) => {\n      return entity === ele;\n    });\n  }\n\n  /**\n   * clear the group\n   */\n  reset(): void {\n    this._entities.length = 0;\n    const { _listeners: listeners } = this;\n    for (let i = listeners.length - 1; i >= 0; i--) {\n      const listener = listeners[i];\n      listener.flagManager.removeListener(listener.fun);\n    }\n    listeners.length = 0;\n    this._dirtyFlag = GroupDirtyFlag.All;\n  }\n\n  /**\n   * get group's world matrix\n   * @param out - updated world matrix for the group\n   * @return boolean, true if group's world matrix needs update\n   */\n  getWorldMatrix(out?: Matrix): Boolean {\n    if (this._entities.length <= 0) {\n      return false;\n    } else {\n      this._updateAnchor();\n      this._updateCoordinate();\n      out && out.copyFrom(this._worldMatrix);\n      return true;\n    }\n  }\n\n  /**\n   * get group's world position\n   * @param out - updated world position for the group\n   */\n  getWorldPosition(out?: Vector3): void {\n    if (this.getWorldMatrix()) {\n      const { elements: ele } = this._worldMatrix;\n      out.set(ele[12], ele[13], ele[14]);\n    }\n  }\n\n  /**\n   * 从上个状态的矩阵变换到目标矩阵\n   * from 矩阵计算所有节点的在本次变换中的 local 姿态\n   * to 矩阵计算所有节点的在本次变换后的 world 姿态\n   * @param from - 初始矩阵\n   * @param to - 目标矩阵\n   */\n  applyTransform(from: Matrix, to: Matrix): void {\n    const { _entities: entities } = this;\n    if (this._entities.length <= 0) {\n      return;\n    }\n    if (Matrix.equals(from, to)) {\n      return;\n    }\n    // old worldMatrix.\n    const { _tempMat0: groupWorldInvMat, _tempMat1: nodeMat } = Group;\n    Matrix.invert(from, groupWorldInvMat);\n    // update entities worldMatrix\n    for (let i = entities.length - 1; i >= 0; i--) {\n      const nodeTrans = entities[i].transform;\n      // get entity's localMatrix.\n      Matrix.multiply(groupWorldInvMat, nodeTrans.worldMatrix, nodeMat);\n      // update entity's worldMatrix.\n      Matrix.multiply(to, nodeMat, nodeMat);\n      nodeTrans.worldMatrix = nodeMat;\n    }\n  }\n\n  /**\n   * force update group dirty flag\n   * @param flag - group dirty flag\n   */\n  setDirtyFlagTrue(flag: GroupDirtyFlag): void {\n    this._dirtyFlag |= flag;\n    this._gizmoTransformDirty = true;\n  }\n\n  private _applyAdd(entity: Entity): void {\n    this._entities.push(entity);\n    const fun = this._onEntityWorldTransformChange(entity);\n    // @ts-ignore\n    const flagManager = entity.transform._updateFlagManager;\n    flagManager.addListener(fun);\n    this._listeners.push({ flagManager, fun });\n    fun();\n  }\n\n  private _applyDel(value: Entity | number): void {\n    const index = typeof value === \"number\" ? value : this._entities.indexOf(value);\n\n    if (index === 0) {\n      if (this._coordinateType === CoordinateType.Local) {\n        this.setDirtyFlagTrue(GroupDirtyFlag.All);\n      } else {\n        this.setDirtyFlagTrue(GroupDirtyFlag.AnchorDirty);\n      }\n      this._entities.splice(index, 1);\n      const listener = this._listeners[index];\n      listener.flagManager.removeListener(listener.fun);\n      this._listeners.splice(index, 1);\n    } else if (index > 0) {\n      if (this._anchorType === AnchorType.Center) {\n        this.setDirtyFlagTrue(GroupDirtyFlag.AnchorDirty);\n      }\n      this._entities.splice(index, 1);\n      const listener = this._listeners[index];\n      listener.flagManager.removeListener(listener.fun);\n      this._listeners.splice(index, 1);\n    }\n  }\n\n  private _onEntityWorldTransformChange(entity: Entity): () => void {\n    return () => {\n      if (this._entities.indexOf(entity) === 0) {\n        if (this._coordinateType === CoordinateType.Local) {\n          this.setDirtyFlagTrue(GroupDirtyFlag.All);\n        } else {\n          this.setDirtyFlagTrue(GroupDirtyFlag.AnchorDirty);\n        }\n      } else {\n        if (this._anchorType === AnchorType.Center) {\n          this.setDirtyFlagTrue(GroupDirtyFlag.AnchorDirty);\n        }\n      }\n    };\n  }\n\n  private _hasRelationship(parent: Entity, compareChild: Entity): boolean {\n    while (compareChild.parent) {\n      if (parent === compareChild.parent) {\n        return true;\n      } else {\n        compareChild = compareChild.parent;\n      }\n    }\n    return false;\n  }\n\n  private _updateAnchor(): void {\n    if (this._dirtyFlag & GroupDirtyFlag.AnchorDirty) {\n      const { _worldMatrix: worldMatrix } = this;\n      const { _tempVec30: tempVec3 } = Group;\n      const { elements: e } = worldMatrix;\n      switch (this._anchorType) {\n        case AnchorType.Center:\n          this._getCenter(tempVec3);\n          (e[12] = tempVec3.x), (e[13] = tempVec3.y), (e[14] = tempVec3.z);\n          break;\n        case AnchorType.Pivot:\n          // align to the first entity\n          const worldE = this._entities[0].transform.worldMatrix.elements;\n          (e[12] = worldE[12]), (e[13] = worldE[13]), (e[14] = worldE[14]);\n          break;\n      }\n      this._dirtyFlag &= ~GroupDirtyFlag.AnchorDirty;\n    }\n  }\n\n  private _updateCoordinate(): void {\n    if (this._dirtyFlag & GroupDirtyFlag.CoordinateDirty) {\n      const { elements: e } = this._worldMatrix;\n      switch (this._coordinateType) {\n        case CoordinateType.Local:\n          // align to the first entity\n          const wE = this._entities[0].transform.worldMatrix.elements;\n          const sx = 1 / Math.sqrt(wE[0] ** 2 + wE[1] ** 2 + wE[2] ** 2);\n          const sy = 1 / Math.sqrt(wE[4] ** 2 + wE[5] ** 2 + wE[6] ** 2);\n          const sz = 1 / Math.sqrt(wE[8] ** 2 + wE[9] ** 2 + wE[10] ** 2);\n          (e[0] = wE[0] * sx), (e[4] = wE[4] * sy), (e[8] = wE[8] * sz);\n          (e[1] = wE[1] * sx), (e[5] = wE[5] * sy), (e[9] = wE[9] * sz);\n          (e[2] = wE[2] * sx), (e[6] = wE[6] * sy), (e[10] = wE[10] * sz);\n          break;\n        case CoordinateType.Global:\n          (e[0] = 1), (e[4] = 0), (e[8] = 0);\n          (e[1] = 0), (e[5] = 1), (e[9] = 0);\n          (e[2] = 0), (e[6] = 0), (e[10] = 1);\n          break;\n      }\n      this._dirtyFlag &= ~GroupDirtyFlag.CoordinateDirty;\n    }\n  }\n\n  private _getCenter(out: Vector3): void {\n    const { _tempBoundBox: tempBoundBox } = Group;\n    tempBoundBox.min.set(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n    tempBoundBox.max.set(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n    const { _entities: entities } = this;\n    let isEffective = false;\n    for (let i = entities.length - 1; i >= 0; i--) {\n      const entity = entities[i];\n      const renderers = entity.getComponentsIncludeChildren(Renderer, []);\n      isEffective ||= renderers.length > 0;\n      for (let j = renderers.length - 1; j >= 0; j--) {\n        const renderer = renderers[j];\n        if (renderer.entity.isActiveInHierarchy) {\n          BoundingBox.merge(tempBoundBox, renderers[j].bounds, tempBoundBox);\n        }\n      }\n    }\n\n    const length = tempBoundBox.getExtent(out).length();\n    if (length <= 0 || length >= Number.MAX_VALUE) {\n      isEffective = false;\n    }\n    if (isEffective) {\n      tempBoundBox.getCenter(out);\n    } else {\n      out.set(0, 0, 0);\n      for (let i = entities.length - 1; i >= 0; i--) {\n        out.add(entities[i].transform.worldPosition);\n      }\n      out.scale(1 / entities.length);\n    }\n  }\n}\n"],"names":["GroupDirtyFlag","Group","_gizmoTransformDirty","_entities","_listeners","_worldMatrix","Matrix","_anchorType","AnchorType","Pivot","_coordinateType","CoordinateType","Local","_dirtyFlag","addEntity","entities","canAdd","j","length","compareEntity","_hasRelationship","_applyDel","_applyAdd","addEntities","i","deleteEntity","delEntity","deleteEntities","delEntities","getIndexOf","entity","findIndex","ele","reset","listeners","listener","flagManager","removeListener","fun","getWorldMatrix","out","_updateAnchor","_updateCoordinate","copyFrom","getWorldPosition","elements","set","applyTransform","from","to","equals","_tempMat0","_tempMat1","nodeMat","invert","groupWorldInvMat","nodeTrans","transform","multiply","worldMatrix","setDirtyFlagTrue","flag","push","_onEntityWorldTransformChange","_updateFlagManager","addListener","value","index","indexOf","splice","Center","parent","compareChild","tempVec3","_tempVec30","e","_getCenter","x","y","z","worldE","wE","sx","Math","sqrt","sy","sz","Global","tempBoundBox","_tempBoundBox","min","Number","POSITIVE_INFINITY","max","NEGATIVE_INFINITY","isEffective","renderers","getComponentsIncludeChildren","Renderer","renderer","isActiveInHierarchy","BoundingBox","merge","bounds","getExtent","MAX_VALUE","getCenter","add","worldPosition","scale","anchorType","coordinateType","Vector3"],"mappings":"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","x_google_ignoreList":[0]}