import { G as GroupDirtyFlag, _ as _create_class, a as Group } from './Group-71055858.js';
import { _ as _inherits } from './_inherits-5a51c3d0.js';
import { _ as _create_for_of_iterator_helper_loose } from './_create_for_of_iterator_helper_loose-e17e7001.js';
import { Vector2, PointerPhase, PointerButton, Vector3, MathUtil, Matrix, Ray, Layer, Script } from '@galacean/engine';
import { ScaleControl } from './Scale.js';
import { TranslateControl } from './Translate.js';
import { RotateControl } from './Rotate.js';
import { Utils } from './Utils.js';
import { State } from './enums/GizmoState.js';
import { FramebufferPicker } from '@galacean/engine-toolkit-framebuffer-picker';
import './enums/GroupState.js';
import './Axis.js';
import './Type.js';
import './GizmoMesh-b318dff0.js';
import '@galacean/engine-toolkit-custom-material';

/**
 * Gizmo controls, including translate, rotate, scale
 */ var Gizmo = /*#__PURE__*/ function(Script) {
    _inherits(Gizmo, Script);
    function Gizmo(entity) {
        var _this;
        _this = Script.call(this, entity) || this;
        _this.epsilon = 0.05;
        _this._initialized = false;
        _this._isStarted = false;
        _this._lastDistance = -1;
        _this._lastOrthoSize = -1;
        _this._lastIsOrtho = false;
        _this._controlMap = [];
        _this._group = new Group();
        _this._tempVec30 = new Vector3();
        _this._tempVec31 = new Vector3();
        _this._worldMat = new Matrix();
        _this._tempRay = new Ray();
        _this._tempRay2 = new Ray();
        _this._type = null;
        _this._scalar = 1;
        if (!_this.entity.engine.physicsManager) {
            throw new Error("PhysicsManager is not initialized");
        }
        Utils.init(_this.engine);
        // setup mesh
        _this._createGizmoControl(State.translate, TranslateControl);
        _this._createGizmoControl(State.rotate, RotateControl);
        _this._createGizmoControl(State.scale, ScaleControl);
        _this.layer = Layer.Layer31;
        _this.state = _this._type;
        return _this;
    }
    var _proto = Gizmo.prototype;
    /**
   * initial scene camera & select group in gizmo
   */ _proto.init = function init(camera, group) {
        var _this = this;
        if (camera !== this._sceneCamera) {
            if (camera) {
                this._group = group;
                this._sceneCamera = camera;
                this._framebufferPicker = camera.entity.addComponent(FramebufferPicker);
                this._framebufferPicker.frameBufferSize = new Vector2(256, 256);
                this._controlMap.forEach(function(gizmoControl) {
                    gizmoControl.init(camera, _this._group);
                });
                this._initialized = true;
            } else {
                this._initialized = false;
            }
        }
    };
    _proto.onUpdate = function onUpdate() {
        var _this = this;
        if (!this._initialized) {
            return;
        }
        var inputManager = this.engine.inputManager;
        var pointers = inputManager.pointers;
        var pointer = pointers.find(function(pointer) {
            return pointer.phase !== PointerPhase.Up && pointer.phase !== PointerPhase.Leave;
        });
        if (this._lastIsOrtho !== this._sceneCamera.isOrthographic) {
            this._lastIsOrtho = this._sceneCamera.isOrthographic;
            this._traverseControl(this._type, function(control) {
                _this._type === State.all ? control.onSwitch(true) : control.onSwitch(false);
            });
        }
        this._group.getWorldPosition(this._tempVec30);
        if (this._isStarted) {
            if (pointer && (pointer.pressedButtons & PointerButton.Primary) !== 0) {
                if (pointer.deltaPosition.x !== 0 || pointer.deltaPosition.y !== 0) {
                    this._triggerGizmoMove();
                }
            } else {
                this._triggerGizmoEnd();
            }
            if (this._group._gizmoTransformDirty) {
                this._traverseControl(this._type, function(control) {
                    _this._type === State.all ? control.onUpdate(true) : control.onUpdate(false);
                });
                this._group._gizmoTransformDirty = false;
            }
        } else {
            this._group.getWorldPosition(this._tempVec30);
            var cameraPosition = this._sceneCamera.entity.transform.worldPosition;
            var currDistance = Vector3.distance(cameraPosition, this._tempVec30);
            var distanceDirty = false;
            if (Math.abs(this._lastDistance - currDistance) > MathUtil.zeroTolerance) {
                distanceDirty = true;
                this._lastDistance = currDistance;
            }
            var orthoSizeDirty = false;
            if (this._sceneCamera.isOrthographic && Math.abs(this._lastOrthoSize - this._sceneCamera.orthographicSize) > MathUtil.zeroTolerance) {
                orthoSizeDirty = true;
                this._lastOrthoSize = this._sceneCamera.orthographicSize;
            }
            if (this._group._gizmoTransformDirty || distanceDirty || orthoSizeDirty) {
                this._traverseControl(this._type, function(control) {
                    _this._type === State.all ? control.onUpdate(true) : control.onUpdate(false);
                });
                this._group._gizmoTransformDirty = false;
            }
            if (pointer) {
                var _pointer_position = pointer.position, x = _pointer_position.x, y = _pointer_position.y;
                var canvas = this.engine.canvas;
                if (x <= 0 || y <= 0 || x > canvas.width || y > canvas.height) {
                    return;
                }
                if (inputManager.isPointerDown(PointerButton.Primary)) {
                    this._framebufferPicker.pick(pointer.position.x, pointer.position.y).then(function(result) {
                        if (result) {
                            _this._selectHandler(result, pointer.position);
                        }
                    });
                } else {
                    var originLayer = this._sceneCamera.cullingMask;
                    this._sceneCamera.cullingMask = this._layer;
                    var result = this._framebufferPicker.pick(pointer.position.x, pointer.position.y);
                    this._sceneCamera.cullingMask = originLayer;
                    result.then(function(result) {
                        _this._overHandler(result);
                    });
                }
            }
        }
    };
    _proto.onLateUpdate = function onLateUpdate(deltaTime) {
        this._adjustAxisAlpha();
    };
    _proto._createGizmoControl = function _createGizmoControl(type, gizmoComponent) {
        var control = this.entity.createChild(type.toString()).addComponent(gizmoComponent);
        this._controlMap.push(control);
    };
    _proto._onGizmoHoverStart = function _onGizmoHoverStart(currentType, axisName) {
        var _this = this;
        this._traverseControl(currentType, function(control) {
            _this._currentControl = control;
        });
        this._currentControl.onHoverStart(axisName);
    };
    _proto._onGizmoHoverEnd = function _onGizmoHoverEnd() {
        this._currentControl && this._currentControl.onHoverEnd();
    };
    _proto._triggerGizmoStart = function _triggerGizmoStart(currentType, axisName) {
        var _this = this;
        this._isStarted = true;
        this._onGizmoHoverEnd();
        var pointer = this.engine.inputManager.pointers.find(function(pointer) {
            return pointer.phase !== PointerPhase.Up && pointer.phase !== PointerPhase.Leave;
        });
        if (pointer) {
            this._sceneCamera.screenPointToRay(pointer.position, this._tempRay);
            this._traverseControl(currentType, function(control) {
                _this._currentControl = control;
            }, function(control) {
                control.entity.isActive = false;
            });
            this._currentControl.onMoveStart(this._tempRay, axisName);
            this.engine.dispatch("gizmo-move-start", axisName);
        }
    };
    _proto._triggerGizmoMove = function _triggerGizmoMove() {
        var pointer = this.engine.inputManager.pointers.find(function(pointer) {
            return pointer.phase !== PointerPhase.Up && pointer.phase !== PointerPhase.Leave;
        });
        this._sceneCamera.screenPointToRay(pointer.position, this._tempRay2);
        this._currentControl.onMove(this._tempRay2, pointer);
    };
    _proto._triggerGizmoEnd = function _triggerGizmoEnd() {
        this._currentControl && this._currentControl.onMoveEnd();
        this._group.setDirtyFlagTrue(GroupDirtyFlag.CoordinateDirty);
        this._traverseControl(this._type, function(control) {
            control.entity.isActive = true;
        });
        this._isStarted = false;
        this.engine.dispatch("gizmo-move-end");
    };
    _proto._selectHandler = function _selectHandler(result, pointerPosition) {
        var material = result.getMaterial();
        var currentControl = parseInt(material.name);
        var selectedEntity = result.entity;
        switch(selectedEntity.layer){
            case this._layer:
                this._triggerGizmoStart(currentControl, selectedEntity.name);
                break;
        }
    };
    _proto._overHandler = function _overHandler(result) {
        if (result) {
            var material = result.getMaterial();
            var currentControl = parseInt(material.name);
            var hoverEntity = result.entity;
            this._onGizmoHoverStart(currentControl, hoverEntity.name);
        } else {
            this._onGizmoHoverEnd();
        }
    };
    _proto._traverseEntity = function _traverseEntity(entity, callback) {
        callback(entity);
        for(var _iterator = _create_for_of_iterator_helper_loose(entity.children), _step; !(_step = _iterator()).done;){
            var child = _step.value;
            this._traverseEntity(child, callback);
        }
    };
    _proto._traverseControl = function _traverseControl(targetType, callbackForTarget, callbackForOther) {
        if (targetType === void 0) targetType = this._type;
        this._controlMap.forEach(function(control) {
            if ((targetType & control.type) != 0) {
                callbackForTarget(control);
            } else {
                if (callbackForOther) {
                    callbackForOther(control);
                }
            }
        });
    };
    _proto._adjustAxisAlpha = function _adjustAxisAlpha() {
        var _this = this;
        var xAxisPositive = Utils.xAxisPositive, yAxisPositive = Utils.yAxisPositive, zAxisPositive = Utils.zAxisPositive;
        this._traverseControl(this._type, function(control) {
            control.onAlphaChange("x", _this._getAlphaFactor(xAxisPositive));
            control.onAlphaChange("y", _this._getAlphaFactor(yAxisPositive));
            control.onAlphaChange("z", _this._getAlphaFactor(zAxisPositive));
        });
    };
    _proto._getAlphaFactor = function _getAlphaFactor(axis) {
        var _this = this, worldMat = _this._worldMat, cameraDir = _this._tempVec30, tempVec = _this._tempVec31, epsilon = _this.epsilon;
        cameraDir.copyFrom(this._sceneCamera.entity.transform.worldForward).normalize();
        this._group.getWorldMatrix(worldMat);
        // angel between camera direction and gizmo axis direction
        Vector3.transformNormal(axis, worldMat, tempVec);
        var cosThetaDir = Math.abs(Vector3.dot(tempVec, cameraDir));
        if (this._sceneCamera.isOrthographic) {
            return 1 - cosThetaDir < epsilon ? MathUtil.clamp((1 - cosThetaDir) / epsilon, 0, 1) : 1;
        } else {
            // perspective camera needs to consider position
            // angle between camera direction and camera-entity position
            this._group.getWorldPosition(tempVec);
            Vector3.subtract(this._sceneCamera.entity.transform.worldPosition, tempVec, tempVec);
            var cosThetaPos = Math.abs(Vector3.dot(tempVec.normalize(), cameraDir));
            var minFactor = Math.min(cosThetaDir, cosThetaPos);
            var maxFactor = Math.max(cosThetaDir, cosThetaPos);
            return 1 - maxFactor < epsilon ? MathUtil.clamp((1 - minFactor) / epsilon, 0, 1) : 1;
        }
    };
    _create_class(Gizmo, [
        {
            key: "layer",
            get: /**
   * gizmo layer, default Layer31
   * @return the layer for gizmo entity and gizmo's inner framebuffer picker
   * @remarks Layer duplicate warning, check whether this layer is taken
   */ function get() {
                return this._layer;
            },
            set: function set(layer) {
                if (this._layer !== layer) {
                    this._layer = layer;
                    this._traverseEntity(this.entity, function(entity) {
                        entity.layer = layer;
                    });
                }
            }
        },
        {
            key: "state",
            get: /**
   * change gizmo type
   * @return current gizmo type - translate, or rotate, scale, null, all, default null
   */ function get() {
                return this._type;
            },
            set: function set(targetState) {
                this._type = targetState;
                this._traverseControl(targetState, function(control) {
                    control.entity.isActive = true;
                    targetState === State.all ? control.onUpdate(true) : control.onUpdate(false);
                }, function(control) {
                    control.entity.isActive = false;
                });
            }
        },
        {
            key: "size",
            get: /**
   * change gizmo size
   * @return current gizmo size - min 0.01, default 1
   */ function get() {
                return this._scalar;
            },
            set: function set(value) {
                this._scalar = MathUtil.clamp(value, 0.01, Infinity);
                Utils.scaleFactor = this._scalar * 0.05773502691896257;
            }
        }
    ]);
    return Gizmo;
}(Script);

export { Gizmo };
//# sourceMappingURL=Gizmo.js.map
