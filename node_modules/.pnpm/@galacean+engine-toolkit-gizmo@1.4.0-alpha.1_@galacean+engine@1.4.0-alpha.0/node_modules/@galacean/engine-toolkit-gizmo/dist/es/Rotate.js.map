{"version":3,"file":"Rotate.js","sources":["../../src/Rotate.ts"],"sourcesContent":["import { Camera, Entity, Matrix, MeshRenderer, Ray, Vector3, Transform, MathUtil, Pointer } from \"@galacean/engine\";\nimport { Axis } from \"./Axis\";\nimport { Utils } from \"./Utils\";\nimport { GizmoComponent, AxisProps, axisVector, axisPlane, axisType } from \"./Type\";\nimport { Group } from \"./Group\";\nimport { GizmoMesh } from \"./GizmoMesh\";\nimport { State } from \"./enums/GizmoState\";\n\n/** @internal */\nexport class RotateControl extends GizmoComponent {\n  private _group: Group;\n  private _camera: Camera;\n\n  private _rotateAxisComponent: Array<Axis> = [];\n  private _rotateControlMap: Array<AxisProps> = [];\n\n  private _gizmoRotateHelperEntity: Entity;\n\n  private _axisX: Entity;\n  private _axisY: Entity;\n  private _axisZ: Entity;\n  private _axisXYZ: Entity;\n  private _axisXHelper: Entity;\n  private _axisYHelper: Entity;\n  private _axisZHelper: Entity;\n  private _axisXYZHelper: Entity;\n\n  private _isModified: boolean = false;\n\n  private _startLineHelperEntity: Entity;\n  private _startLineMesh = GizmoMesh.createLine(this.engine, [new Vector3(0, 0, 0), new Vector3(0, 0, 0)]);\n  private _endLineHelperEntity: Entity;\n\n  private _endLineMesh = GizmoMesh.createLine(this.engine, [new Vector3(0, 0, 0), new Vector3(0, 0, 0)]);\n\n  private _rotateHelperPlaneEntity: Entity;\n  private _rotateHelperPlaneMesh = GizmoMesh.createCircle(this.engine);\n\n  private _selectedAxis: axisType;\n  private _preMatrix: Matrix = new Matrix();\n  private _startMatrix: Matrix = new Matrix();\n  private _startInvMatrix: Matrix = new Matrix();\n\n  private _startPointUnit: Vector3 = new Vector3();\n  private _currPointUnit: Vector3 = new Vector3();\n\n  private _cameraPos: Vector3 = new Vector3();\n\n  private _previousRad: number = 0;\n  private _finalRad: number = 0;\n\n  private _verticalAxis: Vector3 = new Vector3(0, 1, 0);\n  private _horizontalAxis: Vector3 = new Vector3();\n  private _speedFactor: number = 0.01;\n\n  private _tempMat: Matrix = new Matrix();\n  private _tempMat2: Matrix = new Matrix();\n  private _tempVec: Vector3 = new Vector3();\n  private _tempVec2: Vector3 = new Vector3();\n  private _tempVec30: Vector3 = new Vector3();\n  private _tempVec31: Vector3 = new Vector3();\n  private _tempVec32: Vector3 = new Vector3();\n  private _tempMat41: Matrix = new Matrix();\n\n  private _isAtBack: boolean = false;\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.type = State.rotate;\n    this._initAxis();\n    this._createAxis(entity);\n  }\n\n  /** init axis geometry */\n  private _initAxis(): void {\n    this._rotateControlMap = [\n      {\n        name: \"x\",\n        axisMesh: [Utils.axisXTorusMesh],\n        axisMaterial: Utils.redArcMaterial,\n        axisHelperMesh: [Utils.axisHelpertorusMesh],\n        axisHelperMaterial: Utils.invisibleMaterialRotate,\n        axisRotation: [new Vector3(0, 90, 90)],\n        axisTranslation: [new Vector3(0, 0, 0)]\n      },\n      {\n        name: \"y\",\n        axisMesh: [Utils.axisYTorusMesh],\n        axisMaterial: Utils.greenArcMaterial,\n        axisHelperMesh: [Utils.axisHelpertorusMesh],\n        axisHelperMaterial: Utils.invisibleMaterialRotate,\n        axisRotation: [new Vector3(90, 0, 0)],\n        axisTranslation: [new Vector3(0, 0, 0)]\n      },\n      {\n        name: \"z\",\n        axisMesh: [Utils.axisZTorusMesh],\n        axisMaterial: Utils.blueArcMaterial,\n        axisHelperMesh: [Utils.axisHelpertorusMesh],\n        axisHelperMaterial: Utils.invisibleMaterialRotate,\n        axisRotation: [new Vector3(0, 0, -90)],\n        axisTranslation: [new Vector3(0, 0, 0)]\n      },\n      {\n        name: \"xyz\",\n        axisMesh: [Utils.axisXYZTorusMesh],\n        axisMaterial: Utils.lightMaterial,\n        axisHelperMesh: [Utils.axisSphereMesh],\n        axisHelperMaterial: Utils.invisibleMaterialCircle,\n        axisRotation: [new Vector3(0, 0, 0)],\n        axisTranslation: [new Vector3(0, 0, 0)],\n        priority: 99\n      }\n    ];\n  }\n\n  private _createAxis(entity: Entity): void {\n    // visible gizmo entity\n    this.gizmoEntity = entity.createChild(\"visible\");\n    this.gizmoHelperEntity = entity.createChild(\"invisible\");\n\n    this._axisX = this.gizmoEntity.createChild(\"x\");\n    this._axisY = this.gizmoEntity.createChild(\"y\");\n    this._axisZ = this.gizmoEntity.createChild(\"z\");\n    this._axisXYZ = this.gizmoEntity.createChild(\"xyz\");\n\n    this._rotateAxisComponent = [\n      this._axisX.addComponent(Axis),\n      this._axisY.addComponent(Axis),\n      this._axisZ.addComponent(Axis),\n      this._axisXYZ.addComponent(Axis)\n    ];\n\n    for (let i = 0; i < this._rotateControlMap.length; i++) {\n      const currentComponent = this._rotateAxisComponent[i];\n      const currentGeometry = this._rotateControlMap[i];\n\n      currentComponent.initAxis(currentGeometry);\n    }\n    const axisHelpers = this.gizmoHelperEntity.children;\n    this._axisXHelper = axisHelpers[0];\n    this._axisYHelper = axisHelpers[1];\n    this._axisZHelper = axisHelpers[2];\n    this._axisXYZHelper = axisHelpers[3];\n\n    // rotate gizmo in-process debug helper entity\n    this._gizmoRotateHelperEntity = entity.createChild(\"helper\");\n\n    // rotate start line\n    this._startLineHelperEntity = this._gizmoRotateHelperEntity.createChild(\"lineHelperS\");\n    const startHelperRenderer = this._startLineHelperEntity.addComponent(MeshRenderer);\n    startHelperRenderer.receiveShadows = false;\n    startHelperRenderer.castShadows = false;\n    startHelperRenderer.mesh = this._startLineMesh;\n    startHelperRenderer.setMaterial(Utils.yellowMaterial);\n    startHelperRenderer.priority = 90;\n\n    // rotate end line\n    this._endLineHelperEntity = this._gizmoRotateHelperEntity.createChild(\"lineHelperE\");\n    const endHelperRenderer = this._endLineHelperEntity.addComponent(MeshRenderer);\n    endHelperRenderer.receiveShadows = false;\n    endHelperRenderer.castShadows = false;\n    endHelperRenderer.mesh = this._endLineMesh;\n    endHelperRenderer.setMaterial(Utils.yellowMaterial);\n    endHelperRenderer.priority = 90;\n\n    // rotate plane\n    this._rotateHelperPlaneEntity = this._gizmoRotateHelperEntity.createChild(\"rotateHelperPlane\");\n    const planeHelperRenderer = this._rotateHelperPlaneEntity.addComponent(MeshRenderer);\n    planeHelperRenderer.receiveShadows = false;\n    planeHelperRenderer.castShadows = false;\n    planeHelperRenderer.mesh = this._rotateHelperPlaneMesh;\n    // @ts-ignore\n    this._rotateHelperPlaneMesh._enableVAO = false;\n    planeHelperRenderer.setMaterial(Utils.rotatePlaneMaterial);\n    planeHelperRenderer.priority = 90;\n    this._rotateHelperPlaneEntity.isActive = false;\n  }\n\n  init(camera: Camera, group: Group): void {\n    this._camera = camera;\n    this._group = group;\n  }\n\n  onHoverStart(axisName: string): void {\n    if (this._selectedAxis === axisType[axisName]) return;\n    this.onHoverEnd();\n\n    this._selectedAxis = axisType[axisName];\n    const currEntity = this.gizmoEntity.findByName(axisName);\n    const currComponent = currEntity.getComponent(Axis);\n    currComponent.highLight && currComponent.highLight();\n  }\n\n  onHoverEnd(): void {\n    const axesEntity = this.gizmoEntity.children;\n    for (let entity of axesEntity) {\n      const component = entity.getComponent(Axis);\n      component.unLight && component.unLight();\n    }\n\n    this._selectedAxis = null;\n  }\n\n  onMoveStart(ray: Ray, axisName: string): void {\n    this._selectedAxis = axisType[axisName];\n    const {\n      _group: group,\n      _startPointUnit: startP,\n      _startMatrix: startMat,\n      _tempVec: tempVec,\n      _tempMat: tempMat\n    } = this;\n\n    group.getWorldMatrix(startMat);\n    this._preMatrix.copyFrom(startMat);\n    Matrix.invert(startMat, this._startInvMatrix);\n\n    const s = this._getGizmoScale();\n    this._tempMat.copyFrom(startMat).scale(tempVec.set(s, s, s));\n    this.gizmoEntity.transform.worldMatrix = tempMat;\n\n    switch (this._selectedAxis) {\n      case axisType.x:\n      case axisType.y:\n      case axisType.z:\n        this.gizmoHelperEntity.transform.worldMatrix = tempMat;\n        this._gizmoRotateHelperEntity.transform.worldMatrix = tempMat;\n\n        this._calRayIntersection(ray, startP);\n        this._setAxisSelected(this._selectedAxis, true);\n\n        GizmoMesh.updateLine(this._startLineMesh, [new Vector3(0, 0, 0), startP]);\n        GizmoMesh.updateLine(this._endLineMesh, [new Vector3(0, 0, 0), startP]);\n        GizmoMesh.updateCircle(this._rotateHelperPlaneMesh, startP, axisVector[axisName], 0);\n\n        this._startLineHelperEntity.isActive = true;\n        this._endLineHelperEntity.isActive = true;\n        this._rotateHelperPlaneEntity.isActive = true;\n        this._startLineHelperEntity.transform.setRotation(0, 0, 0);\n        this._endLineHelperEntity.transform.setRotation(0, 0, 0);\n        this._rotateHelperPlaneEntity.transform.setRotation(0, 0, 0);\n        break;\n      case axisType.xyz:\n        this.gizmoHelperEntity.transform.worldMatrix = tempMat;\n        this._setAxisSelected(this._selectedAxis, true);\n        this._isAtBack = this.gizmoEntity.transform.worldUp.y < 0;\n        this._isAtBack ? this._verticalAxis.set(0, -1, 0) : this._verticalAxis.set(0, 1, 0);\n        break;\n    }\n  }\n\n  onMove(ray: Ray, pointer: Pointer): void {\n    const {\n      _startPointUnit: startP,\n      _currPointUnit: currP,\n      _startMatrix: startMat,\n      _tempMat2: mat,\n      _group: group,\n      _tempVec: tempVec\n    } = this;\n\n    switch (this._selectedAxis) {\n      case axisType.x:\n      case axisType.y:\n      case axisType.z:\n        const localAxis = axisVector[this._selectedAxis];\n        this._calRayIntersection(ray, currP);\n        const rad = this._getFinalRad(startP, currP, localAxis);\n        GizmoMesh.updateCircle(this._rotateHelperPlaneMesh, startP, localAxis, rad);\n\n        Matrix.rotateAxisAngle(startMat, localAxis, rad, mat);\n        group.applyTransform(this._preMatrix, mat);\n        this._preMatrix.copyFrom(mat);\n        const d = (rad / Math.PI) * 180;\n        this._endLineHelperEntity.transform.setRotation(d * localAxis.x, d * localAxis.y, d * localAxis.z);\n        break;\n      case axisType.xyz:\n        const { x, y } = pointer.deltaPosition;\n        const { _horizontalAxis: hAxis, _verticalAxis: vAxis } = this;\n        hAxis.copyFrom(this._camera.entity.transform.worldUp);\n\n        Vector3.cross(hAxis, vAxis, hAxis);\n        this._isAtBack ? hAxis.scale(-y) : hAxis.scale(y);\n\n        tempVec.copyFrom(vAxis);\n        this._isAtBack ? tempVec.scale(-x) : tempVec.scale(x);\n\n        Vector3.add(hAxis, tempVec, tempVec);\n        Vector3.transformNormal(tempVec, this._startInvMatrix, tempVec);\n        const angle = pointer.deltaPosition.length() * this._speedFactor;\n        Matrix.rotateAxisAngle(startMat, tempVec, angle, startMat);\n        group.applyTransform(this._preMatrix, startMat);\n        this._preMatrix.copyFrom(startMat);\n\n        Matrix.invert(startMat, this._startInvMatrix);\n        break;\n    }\n    this.engine.dispatch(\"gizmo-move\", \"rotate\");\n  }\n\n  onMoveEnd(): void {\n    this._finalRad = 0;\n    this._previousRad = 0;\n    // recover axis color\n    this._setAxisSelected(this._selectedAxis, false);\n    // recover arc line\n    const axisMesh = this._rotateControlMap[this._selectedAxis].axisMesh[0];\n\n    switch (this._selectedAxis) {\n      case axisType.x:\n      case axisType.y:\n      case axisType.z:\n        GizmoMesh.updateCircleTube(axisMesh, Math.PI);\n        // hide helper entity\n        this._endLineHelperEntity.isActive = false;\n        this._startLineHelperEntity.isActive = false;\n        this._rotateHelperPlaneEntity.isActive = false;\n        break;\n      case axisType.xyz:\n        GizmoMesh.updateCircleTube(axisMesh, 2 * Math.PI, 1.8);\n        break;\n    }\n  }\n\n  onUpdate(isModified: boolean = false): void {\n    this._resizeControl(isModified);\n    this._updateAxisTransform();\n  }\n\n  onSwitch(isModified: boolean = false) {\n    this._resizeControl(isModified);\n  }\n\n  onAlphaChange(axisName: string, value: number): void {}\n\n  private _setAxisSelected(axis: axisType, isSelected: boolean): void {\n    const axisMesh = this._rotateControlMap[axis].axisMesh[0];\n    GizmoMesh.updateCircleTube(axisMesh, 2 * Math.PI);\n    const entityArray = this.gizmoEntity.children;\n    for (let i = 0; i < entityArray.length; i++) {\n      const currEntity = entityArray[i];\n      const currComponent = currEntity.getComponent(Axis);\n      if (axisType[currEntity.name] === axis) {\n        if (isSelected) {\n          currComponent.yellow && currComponent.yellow();\n        } else {\n          currComponent.recover && currComponent.recover();\n        }\n      }\n    }\n  }\n\n  private _calRayIntersection(ray: Ray, out: Vector3): void {\n    // transform ray to local space\n    const worldToLocal = this._startInvMatrix;\n    Vector3.transformCoordinate(ray.origin, worldToLocal, ray.origin);\n    Vector3.transformNormal(ray.direction, worldToLocal, ray.direction);\n    ray.getPoint(ray.intersectPlane(axisPlane[this._selectedAxis]), out);\n    out.normalize().scale(Utils.rotateCircleRadius);\n  }\n\n  private _getFinalRad(p1: Vector3, p2: Vector3, rotateAxis: Vector3): number {\n    const dot = Vector3.dot(p1, p2);\n    Vector3.cross(p1, p2, this._tempVec);\n    const direction = Vector3.dot(this._tempVec, rotateAxis);\n    const currentRad = Math.sign(direction) * Math.acos(dot / Utils.rotateCircleRadius ** 2);\n    const incrementRad = currentRad - this._previousRad;\n    if (this._previousRad * currentRad < 0) {\n      Math.abs(currentRad) < Math.PI / 2\n        ? (this._finalRad += incrementRad)\n        : (this._finalRad += -Math.sign(incrementRad) * (2 * Math.PI - Math.abs(incrementRad)));\n    } else {\n      this._finalRad += incrementRad;\n    }\n    this._previousRad = currentRad;\n    return this._finalRad;\n  }\n\n  private _getGizmoScale(): number {\n    const cameraPosition = this._camera.entity.transform.worldPosition;\n    this._group.getWorldPosition(this._tempVec);\n    if (this._camera.isOrthographic) {\n      return this._isModified\n        ? this._camera.orthographicSize * Utils.scaleFactor * 3 * 0.8\n        : this._camera.orthographicSize * Utils.scaleFactor * 3;\n    } else {\n      return this._isModified\n        ? Vector3.distance(cameraPosition, this._tempVec) * Utils.scaleFactor * 0.8\n        : Vector3.distance(cameraPosition, this._tempVec) * Utils.scaleFactor;\n    }\n  }\n\n  private _updateAxisTransform(): void {\n    const { _tempMat: _tempMat, _tempVec, _tempVec2, _cameraPos } = this;\n    // 相机位置\n    _cameraPos.copyFrom(this._camera.entity.transform.worldPosition);\n    const gizmoTrans = this.gizmoEntity.transform;\n    // 获取参照向量(Gizmo 中点 -> 相机)（世界坐标）\n    Vector3.subtract(_cameraPos, gizmoTrans.worldPosition, _tempVec);\n    // 逆矩阵（世界 -> Gizmo）\n    Matrix.invert(gizmoTrans.worldMatrix, _tempMat);\n    // 将向量(Gizmo 中点 -> 相机)映射到 Gizmo 坐标系中，此处 XYZ 局部向量是相同的\n    Vector3.transformNormal(_tempVec, _tempMat, _tempVec2);\n    const factor = MathUtil.radToDegreeFactor;\n    const { x, y, z } = _tempVec2;\n    // 用 yoz 投影计算 X 轴的局部旋转\n    this._axisX.transform.rotation.x = this._axisXHelper.transform.rotation.x = -Math.atan2(y, z) * factor;\n    // 用 xoz 投影计算 Y 轴的局部旋转\n    this._axisY.transform.rotation.y = this._axisYHelper.transform.rotation.y = Math.atan2(x, z) * factor;\n    // 用 yox 投影计算 Z 轴的局部旋转\n    this._axisZ.transform.rotation.z = this._axisZHelper.transform.rotation.z = Math.atan2(y, x) * factor;\n    // xyz 投影\n    this._localLookAt(this._axisXYZ.transform, _tempVec2);\n    this._axisXYZHelper.transform.rotationQuaternion = this._axisXYZ.transform.rotationQuaternion;\n  }\n\n  private _resizeControl(isModified: boolean = false): void {\n    this._group.getWorldMatrix(this._tempMat);\n    this._isModified = isModified;\n    const s = this._getGizmoScale();\n    this.gizmoEntity.transform.worldMatrix = this.gizmoHelperEntity.transform.worldMatrix = this._tempMat.scale(\n      this._tempVec.set(s, s, s)\n    );\n  }\n\n  private _localLookAt(transform: Transform, targetPosition: Vector3) {\n    const zAxis = this._tempVec30;\n    Vector3.subtract(transform.position, targetPosition, zAxis);\n    zAxis.normalize();\n    const xAxis = this._tempVec31.set(zAxis.z, 0, -zAxis.x).normalize();\n    const yAxis = this._tempVec32;\n    Vector3.cross(zAxis, xAxis, yAxis);\n    yAxis.normalize();\n    const rotMat = this._tempMat41;\n    const { elements: e } = rotMat;\n    (e[0] = xAxis.x), (e[1] = xAxis.y), (e[2] = xAxis.z);\n    (e[4] = yAxis.x), (e[5] = yAxis.y), (e[6] = yAxis.z);\n    (e[8] = zAxis.x), (e[9] = zAxis.y), (e[10] = zAxis.z);\n    rotMat.getRotation(transform.rotationQuaternion);\n  }\n}\n"],"names":["RotateControl","entity","_rotateAxisComponent","_rotateControlMap","_isModified","_startLineMesh","GizmoMesh","createLine","engine","Vector3","_endLineMesh","_rotateHelperPlaneMesh","createCircle","_preMatrix","Matrix","_startMatrix","_startInvMatrix","_startPointUnit","_currPointUnit","_cameraPos","_previousRad","_finalRad","_verticalAxis","_horizontalAxis","_speedFactor","_tempMat","_tempMat2","_tempVec","_tempVec2","_tempVec30","_tempVec31","_tempVec32","_tempMat41","_isAtBack","type","State","rotate","_initAxis","_createAxis","name","axisMesh","Utils","axisXTorusMesh","axisMaterial","redArcMaterial","axisHelperMesh","axisHelpertorusMesh","axisHelperMaterial","invisibleMaterialRotate","axisRotation","axisTranslation","axisYTorusMesh","greenArcMaterial","axisZTorusMesh","blueArcMaterial","axisXYZTorusMesh","lightMaterial","axisSphereMesh","invisibleMaterialCircle","priority","gizmoEntity","createChild","gizmoHelperEntity","_axisX","_axisY","_axisZ","_axisXYZ","addComponent","Axis","i","length","currentComponent","currentGeometry","initAxis","axisHelpers","children","_axisXHelper","_axisYHelper","_axisZHelper","_axisXYZHelper","_gizmoRotateHelperEntity","_startLineHelperEntity","startHelperRenderer","MeshRenderer","receiveShadows","castShadows","mesh","setMaterial","yellowMaterial","_endLineHelperEntity","endHelperRenderer","_rotateHelperPlaneEntity","planeHelperRenderer","_enableVAO","rotatePlaneMaterial","isActive","init","camera","group","_camera","_group","onHoverStart","axisName","_selectedAxis","axisType","onHoverEnd","currEntity","findByName","currComponent","getComponent","highLight","axesEntity","component","unLight","onMoveStart","ray","startMat","tempVec","tempMat","getWorldMatrix","copyFrom","invert","s","_getGizmoScale","scale","set","transform","worldMatrix","x","y","z","_calRayIntersection","startP","_setAxisSelected","updateLine","updateCircle","axisVector","setRotation","xyz","worldUp","onMove","pointer","currP","mat","localAxis","rad","_getFinalRad","rotateAxisAngle","applyTransform","d","Math","PI","deltaPosition","hAxis","vAxis","cross","add","transformNormal","angle","dispatch","onMoveEnd","updateCircleTube","onUpdate","isModified","_resizeControl","_updateAxisTransform","onSwitch","onAlphaChange","value","axis","isSelected","entityArray","yellow","recover","out","worldToLocal","transformCoordinate","origin","direction","getPoint","intersectPlane","axisPlane","normalize","rotateCircleRadius","p1","p2","rotateAxis","dot","currentRad","sign","acos","incrementRad","abs","cameraPosition","worldPosition","getWorldPosition","isOrthographic","orthographicSize","scaleFactor","distance","gizmoTrans","subtract","factor","MathUtil","radToDegreeFactor","rotation","atan2","_localLookAt","rotationQuaternion","targetPosition","zAxis","position","xAxis","yAxis","rotMat","e","elements","getRotation","GizmoComponent"],"mappings":"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"}