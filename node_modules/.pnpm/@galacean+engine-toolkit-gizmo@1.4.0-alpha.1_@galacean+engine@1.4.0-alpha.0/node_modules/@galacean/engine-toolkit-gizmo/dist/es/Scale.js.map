{"version":3,"file":"Scale.js","sources":["../../src/Scale.ts"],"sourcesContent":["import { Camera, Entity, Plane, Ray, Vector3, Matrix } from \"@galacean/engine\";\n\nimport { Axis } from \"./Axis\";\nimport { Utils } from \"./Utils\";\nimport { Group } from \"./Group\";\nimport { GizmoComponent, AxisProps, axisVector, axisType } from \"./Type\";\nimport { State } from \"./enums/GizmoState\";\n\n/** @internal */\nexport class ScaleControl extends GizmoComponent {\n  private _camera: Camera;\n  private _group: Group;\n  private _scaleFactor: number = 1;\n  private _scaleAxisComponent: Array<Axis> = [];\n  private _scaleControlMap: Array<AxisProps> = [];\n\n  private _selectedAxis: axisType;\n\n  private _preMatrix: Matrix = new Matrix();\n  private _startGroupMatrix: Matrix = new Matrix();\n  private _startInvMatrix: Matrix = new Matrix();\n  private _startPoint: Vector3 = new Vector3();\n  private _factorVec: Vector3 = new Vector3();\n  private _currPoint = new Vector3();\n  private _plane: Plane = new Plane();\n\n  private _tempVec0: Vector3 = new Vector3();\n  private _tempVec1: Vector3 = new Vector3();\n  private _tempVec2: Vector3 = new Vector3();\n  private _tempMat: Matrix = new Matrix();\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.type = State.scale;\n    this._initAxis();\n    this._createAxis(entity);\n  }\n\n  init(camera: Camera, group: Group): void {\n    this._camera = camera;\n    this._group = group;\n  }\n\n  onHoverStart(axisName: string): void {\n    if (this._selectedAxis === axisType[axisName]) return;\n    this.onHoverEnd();\n\n    this._selectedAxis = axisType[axisName];\n    const currEntity = this.gizmoEntity.findByName(axisName);\n    const currComponent = currEntity.getComponent(Axis);\n    currComponent.highLight && currComponent.highLight();\n  }\n\n  onHoverEnd(): void {\n    const axesEntity = this.gizmoEntity.children;\n    for (let entity of axesEntity) {\n      const component = entity.getComponent(Axis);\n      component.unLight && component.unLight();\n    }\n\n    this._selectedAxis = null;\n  }\n\n  onMoveStart(ray: Ray, axisName: string): void {\n    this._selectedAxis = axisType[axisName];\n    // get gizmo start worldPosition\n    this._group.getWorldMatrix(this._startGroupMatrix);\n    this._preMatrix.copyFrom(this._startGroupMatrix);\n    Matrix.invert(this._startGroupMatrix, this._startInvMatrix);\n    const { _startPoint, _scaleFactor } = this;\n\n    // get start point\n    this._getHitPlane();\n    this._calRayIntersection(ray, this._startPoint);\n    const localAxis = axisVector[this._selectedAxis];\n    this._factorVec.set(\n      _startPoint.x === 0 ? 0 : (_scaleFactor * localAxis.x) / _startPoint.x,\n      _startPoint.y === 0 ? 0 : (_scaleFactor * localAxis.y) / _startPoint.y,\n      _startPoint.z === 0 ? 0 : (_scaleFactor * localAxis.z) / _startPoint.z\n    );\n\n    // change axis color\n    const entityArray = this.gizmoEntity.children;\n    for (let i = 0; i < entityArray.length; i++) {\n      const currEntity = entityArray[i];\n      const currComponent = currEntity.getComponent(Axis);\n      if (axisType[currEntity.name] === this._selectedAxis) {\n        currComponent.yellow && currComponent.yellow();\n      } else {\n        currComponent.gray && currComponent.gray();\n      }\n    }\n  }\n\n  onMove(ray: Ray): void {\n    // transform ray to local space\n    this._calRayIntersection(ray, this._currPoint);\n    const { _factorVec: factorVec, _tempVec0: scaleVec, _tempMat: mat } = this;\n    Vector3.subtract(this._currPoint, this._startPoint, scaleVec);\n\n    switch (this._selectedAxis) {\n      case axisType.x:\n      case axisType.y:\n      case axisType.z:\n        scaleVec.x = scaleVec.x * factorVec.x + 1;\n        scaleVec.y = scaleVec.y * factorVec.y + 1;\n        scaleVec.z = scaleVec.z * factorVec.z + 1;\n        break;\n      case axisType.xyz:\n        const start = this._startPoint.length();\n        const end = this._currPoint.length();\n\n        scaleVec.x = end / start;\n        scaleVec.y = end / start;\n        scaleVec.z = end / start;\n        break;\n    }\n\n    Matrix.scale(this._startGroupMatrix, scaleVec, mat);\n    this._group.applyTransform(this._preMatrix, mat);\n    this._preMatrix.copyFrom(mat);\n    this.engine.dispatch(\"gizmo-move\", \"scale\");\n  }\n\n  onMoveEnd(): void {\n    const entityArray = this.gizmoEntity.children;\n    for (let i = 0; i < entityArray.length; i++) {\n      const currEntity = entityArray[i];\n      const currComponent = currEntity.getComponent(Axis);\n      currComponent.recover && currComponent.recover();\n    }\n  }\n\n  onUpdate(isModified: boolean = false): void {\n    this._resizeControl(isModified);\n  }\n\n  onSwitch(isModified: boolean = false) {\n    this._resizeControl(isModified);\n  }\n\n  onAlphaChange(axisName: string, value: number): void {\n    const entity = this.gizmoEntity.findByName(axisName);\n    if (entity) {\n      const component = entity.getComponent(Axis);\n      component.alpha(value);\n    }\n  }\n\n  private _initAxis(): void {\n    this._scaleControlMap = [\n      {\n        name: \"x\",\n        axisMesh: [Utils.lineMeshShort, Utils.axisEndCubeMesh],\n        axisMaterial: Utils.redMaterialScale,\n        axisHelperMesh: [Utils.axisHelperLineMesh],\n        axisHelperMaterial: Utils.invisibleMaterialScale,\n        axisRotation: [new Vector3(0, 0, -90), new Vector3(0, 0, -90)],\n        axisTranslation: [new Vector3(0.75, 0, 0), new Vector3(1.5, 0, 0)],\n        priority: 102\n      },\n      {\n        name: \"y\",\n        axisMesh: [Utils.lineMeshShort, Utils.axisEndCubeMesh],\n        axisMaterial: Utils.greenMaterialScale,\n        axisHelperMesh: [Utils.axisHelperLineMesh],\n        axisHelperMaterial: Utils.invisibleMaterialScale,\n        axisRotation: [new Vector3(0, 90, 0), new Vector3(0, 0, 0)],\n        axisTranslation: [new Vector3(0, 0.75, 0), new Vector3(0, 1.5, 0)],\n        priority: 102\n      },\n      {\n        name: \"z\",\n        axisMesh: [Utils.lineMeshShort, Utils.axisEndCubeMesh],\n        axisMaterial: Utils.blueMaterialScale,\n        axisHelperMesh: [Utils.axisHelperLineMesh],\n        axisHelperMaterial: Utils.invisibleMaterialScale,\n        axisRotation: [new Vector3(0, 90, 90), new Vector3(0, 90, 90)],\n        axisTranslation: [new Vector3(0, 0, 0.75), new Vector3(0, 0, 1.5)],\n        priority: 102\n      },\n      {\n        name: \"xyz\",\n        axisMesh: [Utils.axisCubeMesh],\n        axisMaterial: Utils.greyMaterial,\n        axisHelperMesh: [Utils.axisCubeMesh],\n        axisHelperMaterial: Utils.invisibleMaterialScale,\n        axisRotation: [new Vector3(0, 0, 0)],\n        axisTranslation: [new Vector3(0, 0, 0)],\n        priority: 105\n      }\n    ];\n  }\n\n  private _createAxis(entity: Entity): void {\n    this.gizmoEntity = entity.createChild(\"visible\");\n    this.gizmoHelperEntity = entity.createChild(\"invisible\");\n\n    const axisX = this.gizmoEntity.createChild(\"x\");\n    const axisY = this.gizmoEntity.createChild(\"y\");\n    const axisZ = this.gizmoEntity.createChild(\"z\");\n    const axisXYZ = this.gizmoEntity.createChild(\"xyz\");\n\n    this._scaleAxisComponent = [\n      axisX.addComponent(Axis),\n      axisY.addComponent(Axis),\n      axisZ.addComponent(Axis),\n      axisXYZ.addComponent(Axis)\n    ];\n\n    for (let i = 0; i < this._scaleControlMap.length; i++) {\n      const currentComponent = this._scaleAxisComponent[i];\n      const currentGeometry = this._scaleControlMap[i];\n\n      currentComponent.initAxis(currentGeometry);\n    }\n  }\n\n  private _getHitPlane(): void {\n    switch (this._selectedAxis) {\n      case axisType.x:\n      case axisType.y:\n      case axisType.z:\n      case axisType.xyz:\n        const { _tempVec0: centerP, _tempVec1: crossP, _tempVec2: cameraP } = this;\n        cameraP.copyFrom(this._camera.entity.transform.worldPosition);\n        cameraP.transformToVec3(this._startInvMatrix);\n        const localAxis = axisVector[this._selectedAxis];\n        Vector3.cross(cameraP, localAxis, crossP);\n        Plane.fromPoints(localAxis, centerP.set(0, 0, 0), crossP, this._plane);\n        break;\n    }\n  }\n\n  private _calRayIntersection(ray: Ray, out: Vector3): void {\n    const worldToLocal = this._startInvMatrix;\n    Vector3.transformCoordinate(ray.origin, worldToLocal, ray.origin);\n    Vector3.transformNormal(ray.direction, worldToLocal, ray.direction);\n    ray.getPoint(ray.intersectPlane(this._plane), out);\n  }\n\n  private _resizeControl(isModified: boolean = false): void {\n    const { _tempVec0, _tempMat } = this;\n    const cameraPosition = this._camera.entity.transform.worldPosition;\n    this._group.getWorldMatrix(_tempMat);\n\n    if (this._camera.isOrthographic) {\n      const s = isModified\n        ? this._camera.orthographicSize * Utils.scaleFactor * 3 * 0.75\n        : this._camera.orthographicSize * Utils.scaleFactor * 3;\n\n      this.entity.transform.worldMatrix = this._tempMat.scale(this._tempVec0.set(s, s, s));\n    } else {\n      const { elements: ele } = _tempMat;\n      _tempVec0.set(ele[12], ele[13], ele[14]);\n\n      const s = isModified\n        ? Vector3.distance(cameraPosition, _tempVec0) * Utils.scaleFactor * 0.75\n        : Vector3.distance(cameraPosition, _tempVec0) * Utils.scaleFactor;\n\n      const sx = s / Math.sqrt(ele[0] ** 2 + ele[1] ** 2 + ele[2] ** 2);\n      const sy = s / Math.sqrt(ele[4] ** 2 + ele[5] ** 2 + ele[6] ** 2);\n      const sz = s / Math.sqrt(ele[8] ** 2 + ele[9] ** 2 + ele[10] ** 2);\n      this.entity.transform.worldMatrix = this._tempMat.scale(this._tempVec0.set(sx, sy, sz));\n    }\n  }\n}\n"],"names":["ScaleControl","entity","_scaleFactor","_scaleAxisComponent","_scaleControlMap","_preMatrix","Matrix","_startGroupMatrix","_startInvMatrix","_startPoint","Vector3","_factorVec","_currPoint","_plane","Plane","_tempVec0","_tempVec1","_tempVec2","_tempMat","type","State","scale","_initAxis","_createAxis","init","camera","group","_camera","_group","onHoverStart","axisName","_selectedAxis","axisType","onHoverEnd","currEntity","gizmoEntity","findByName","currComponent","getComponent","Axis","highLight","axesEntity","children","component","unLight","onMoveStart","ray","getWorldMatrix","copyFrom","invert","_getHitPlane","_calRayIntersection","localAxis","axisVector","set","x","y","z","entityArray","i","length","name","yellow","gray","onMove","factorVec","scaleVec","mat","subtract","xyz","start","end","applyTransform","engine","dispatch","onMoveEnd","recover","onUpdate","isModified","_resizeControl","onSwitch","onAlphaChange","value","alpha","axisMesh","Utils","lineMeshShort","axisEndCubeMesh","axisMaterial","redMaterialScale","axisHelperMesh","axisHelperLineMesh","axisHelperMaterial","invisibleMaterialScale","axisRotation","axisTranslation","priority","greenMaterialScale","blueMaterialScale","axisCubeMesh","greyMaterial","createChild","gizmoHelperEntity","axisX","axisY","axisZ","axisXYZ","addComponent","currentComponent","currentGeometry","initAxis","centerP","crossP","cameraP","transform","worldPosition","transformToVec3","cross","fromPoints","out","worldToLocal","transformCoordinate","origin","transformNormal","direction","getPoint","intersectPlane","cameraPosition","isOrthographic","s","orthographicSize","scaleFactor","worldMatrix","ele","elements","distance","sx","Math","sqrt","sy","sz","GizmoComponent"],"mappings":"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"}