import { _ as _inherits } from './_inherits-5a51c3d0.js';
import { MeshRenderer, Color, Component } from '@galacean/engine';

var Axis = /*#__PURE__*/ function(Component) {
    _inherits(Axis, Component);
    function Axis(entity) {
        var _this;
        _this = Component.call(this, entity) || this;
        _this._color = new Color();
        _this._highLightColor = new Color();
        _this._yellowColor = new Color(1.0, 0.95, 0.0, 1.0);
        _this._grayColor = new Color(0.75, 0.75, 0.75, 0.6);
        return _this;
    }
    var _proto = Axis.prototype;
    /** setup axis geometry */ _proto.initAxis = function initAxis(value) {
        this._material = value.axisMaterial;
        this._color.copyFrom(value.axisMaterial.baseColor);
        this._highLightColor.copyFrom(this._color);
        this._highLightColor.r = this._highLightColor.r + 0.3;
        this._highLightColor.g = this._highLightColor.g + 0.3;
        this._highLightColor.b = this._highLightColor.b + 0.3;
        this._highLightColor.a = this._highLightColor.a + 0.1;
        // setup visible axis
        for(var i = 0; i < value.axisMesh.length; i++){
            var axisEntity = this.entity.createChild(value.name);
            axisEntity.transform.rotate(value.axisRotation[i]);
            axisEntity.transform.translate(value.axisTranslation[i], false);
            var axisRenderer = axisEntity.addComponent(MeshRenderer);
            axisRenderer.receiveShadows = false;
            axisRenderer.castShadows = false;
            axisRenderer.priority = value.priority ? value.priority : 100;
            axisRenderer.mesh = value.axisMesh[i];
            axisRenderer.setMaterial(this._material);
        }
        // setup invisible axis
        var gizmoHelperEntity = this.entity.parent.parent.findByName("invisible");
        for(var i1 = 0; i1 < value.axisHelperMesh.length; i1++){
            var temp = gizmoHelperEntity.createChild(value.name);
            var axisHelperEntity = temp.createChild(value.name);
            axisHelperEntity.transform.rotate(value.axisRotation[i1]);
            axisHelperEntity.transform.translate(value.axisTranslation[i1], false);
            var axisHelperRenderer = axisHelperEntity.addComponent(MeshRenderer);
            axisHelperRenderer.receiveShadows = false;
            axisHelperRenderer.castShadows = false;
            axisHelperRenderer.priority = value.priority ? value.priority : 100;
            axisHelperRenderer.mesh = value.axisHelperMesh[i1];
            axisHelperRenderer.setMaterial(value.axisHelperMaterial);
        }
    };
    /** highlight axis */ _proto.highLight = function highLight() {
        this._material.baseColor.copyFrom(this._highLightColor);
    };
    /** unhighligh axis */ _proto.unLight = function unLight() {
        this._material.baseColor.copyFrom(this._color);
    };
    /** change axis color into yellow */ _proto.yellow = function yellow() {
        this._material.baseColor.copyFrom(this._yellowColor);
    };
    /** change axis color into gray */ _proto.gray = function gray() {
        this._material.baseColor.copyFrom(this._grayColor);
    };
    /** recover axis color */ _proto.recover = function recover() {
        this._material.baseColor.copyFrom(this._color);
    };
    /** change axis alpha */ _proto.alpha = function alpha(v) {
        this._material.baseColor.a = v;
    };
    return Axis;
}(Component);

export { Axis };
//# sourceMappingURL=Axis.js.map
