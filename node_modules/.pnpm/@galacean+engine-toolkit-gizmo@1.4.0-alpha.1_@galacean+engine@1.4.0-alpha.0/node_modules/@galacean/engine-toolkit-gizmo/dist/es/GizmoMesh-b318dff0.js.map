{"version":3,"file":"GizmoMesh-b318dff0.js","sources":["../../src/GizmoMeshRestore.ts","../../src/GizmoMesh.ts"],"sourcesContent":["import { ContentRestorer, ModelMesh, Vector3 } from \"@galacean/engine\";\nimport { GizmoMesh } from \"./GizmoMesh\";\n\n/**\n * @internal\n */\nexport class GizmoMeshRestorer extends ContentRestorer<ModelMesh> {\n  constructor(resource: ModelMesh, public primitiveInfo: GizmoMeshRestoreInfo) {\n    super(resource);\n  }\n\n  /**\n   * @override\n   */\n  restoreContent(): void {\n    const primitiveInfo = this.primitiveInfo;\n    switch (primitiveInfo.type) {\n      case GizmoMeshType.Circle:\n        const circleInfo = <CircleRestoreInfo>primitiveInfo;\n        GizmoMesh.updateCircle(\n          this.resource,\n          circleInfo.startPoint,\n          circleInfo.normal,\n          circleInfo.thetaLength,\n          circleInfo.center\n        );\n        break;\n\n      case GizmoMeshType.CircleTube:\n        const tubeInfo = <CircleTubeRestoreInfo>primitiveInfo;\n        GizmoMesh.updateCircleTube(\n          this.resource,\n          tubeInfo.arc,\n          tubeInfo.radius,\n          tubeInfo.tubeRadius,\n          tubeInfo.tubularSegments,\n          tubeInfo.radialSegments\n        );\n        break;\n\n      case GizmoMeshType.Line:\n        const lineInfo = <LineRestoreInfo>primitiveInfo;\n        GizmoMesh.updateLine(this.resource, lineInfo.points);\n        break;\n    }\n  }\n}\n\nenum GizmoMeshType {\n  Circle,\n  Line,\n  CircleTube\n}\n\n/**\n * @internal\n */\nexport class GizmoMeshRestoreInfo {\n  constructor(public type: GizmoMeshType) {}\n}\n\n/**\n * @internal\n */\nexport class CircleRestoreInfo extends GizmoMeshRestoreInfo {\n  constructor(public startPoint: Vector3, public normal: Vector3, public thetaLength: number, public center: Vector3) {\n    super(GizmoMeshType.Circle);\n  }\n}\n\n/**\n * @internal\n */\nexport class CircleTubeRestoreInfo extends GizmoMeshRestoreInfo {\n  constructor(\n    public arc: number,\n    public radius: number,\n    public tubeRadius: number,\n    public tubularSegments: number,\n    public radialSegments: number\n  ) {\n    super(GizmoMeshType.CircleTube);\n  }\n}\n\n/**\n * @internal\n */\nexport class LineRestoreInfo extends GizmoMeshRestoreInfo {\n  constructor(public points: Array<Vector3>) {\n    super(GizmoMeshType.Line);\n  }\n}\n","import { Engine, MeshTopology, ModelMesh, Quaternion, Vector2, Vector3 } from \"@galacean/engine\";\nimport { CircleRestoreInfo, CircleTubeRestoreInfo, GizmoMeshRestorer, LineRestoreInfo } from \"./GizmoMeshRestore\";\n\nexport class GizmoMesh {\n  private static _tempQuat: Quaternion = new Quaternion();\n  private static _tempVect: Vector3 = new Vector3();\n\n  static createCircle(\n    engine: Engine,\n    center: Vector3 = new Vector3(),\n    normal: Vector3 = new Vector3(0, 0, 1),\n    startPoint: Vector3 = new Vector3(1.6, 0, 0),\n    thetaLength: number = Math.PI / 2\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    GizmoMesh.updateCircle(mesh, startPoint, normal, thetaLength, center);\n    engine.resourceManager.addContentRestorer(\n      new GizmoMeshRestorer(mesh, new CircleRestoreInfo(startPoint, normal, thetaLength, center))\n    );\n    return mesh;\n  }\n\n  static updateCircle(\n    mesh: ModelMesh,\n    startPoint: Vector3 = new Vector3(1.6, 0, 0),\n    normal: Vector3 = new Vector3(0, 0, 1),\n    thetaLength: number = Math.PI / 2,\n    center: Vector3 = new Vector3(),\n    /**\n     * segments per half Pi\n     */\n    segmentFactor: number = 16\n  ) {\n    const newSegments = Math.abs(Math.ceil((segmentFactor * thetaLength) / Math.PI));\n    const segments = Math.max(6, newSegments);\n\n    const indices: Uint16Array = new Uint16Array(segments * 3);\n    const vertices: Array<Vector3> = [];\n\n    // indices\n    for (let i = 1; i <= segments; i++) {\n      const start = (i - 1) * 3;\n      indices[start] = i;\n      indices[start + 1] = i + 1;\n      indices[start + 2] = 0;\n    }\n\n    // vertices\n    vertices.push(center);\n    for (let s = 0; s <= segments; s++) {\n      const segment = (s / segments) * thetaLength;\n      Quaternion.rotationAxisAngle(normal, segment, GizmoMesh._tempQuat);\n      Vector3.transformByQuat(startPoint, GizmoMesh._tempQuat, GizmoMesh._tempVect);\n      vertices[s + 1] = GizmoMesh._tempVect.clone();\n    }\n\n    GizmoMesh._initialize(mesh, vertices, indices, MeshTopology.Triangles);\n  }\n\n  static createCircleTube(\n    engine: Engine,\n    arc: number = Math.PI,\n    radius: number = 1.6,\n    tubeRadius: number = 0.02,\n    tubularSegments: number = 48,\n    radialSegments: number = 6\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    GizmoMesh.updateCircleTube(mesh, arc, radius, tubeRadius, tubularSegments, radialSegments);\n    engine.resourceManager.addContentRestorer(\n      new GizmoMeshRestorer(mesh, new CircleTubeRestoreInfo(arc, radius, tubeRadius, tubularSegments, radialSegments))\n    );\n    return mesh;\n  }\n\n  static updateCircleTube(\n    mesh: ModelMesh,\n    arc: number = Math.PI,\n    radius: number = 1.6,\n    tubeRadius: number = 0.02,\n    tubularSegments: number = 48,\n    radialSegments: number = 6\n  ) {\n    const vertexCount = (radialSegments + 1) * (tubularSegments + 1);\n    const rectangleCount = radialSegments * tubularSegments;\n    const indices: Uint16Array = new Uint16Array(rectangleCount * 6);\n\n    const vertices: Vector3[] = new Array(vertexCount);\n    const normals: Vector3[] = new Array(vertexCount);\n    const uvs: Vector2[] = new Array(vertexCount);\n\n    let offset = 0;\n\n    for (let i = 0; i <= radialSegments; i++) {\n      for (let j = 0; j <= tubularSegments; j++) {\n        const u = (j / tubularSegments) * arc;\n        const v = (i / radialSegments) * Math.PI * 2;\n        const cosV = Math.cos(v);\n        const sinV = Math.sin(v);\n        const cosU = Math.cos(u);\n        const sinU = Math.sin(u);\n\n        const position = new Vector3(\n          (radius + tubeRadius * cosV) * cosU,\n          (radius + tubeRadius * cosV) * sinU,\n          tubeRadius * sinV\n        );\n        vertices[offset] = position;\n\n        const centerX = radius * cosU;\n        const centerY = radius * sinU;\n        normals[offset] = new Vector3(position.x - centerX, position.y - centerY, position.z).normalize();\n\n        uvs[offset++] = new Vector2(j / tubularSegments, i / radialSegments);\n      }\n    }\n\n    offset = 0;\n    for (let i = 1; i <= radialSegments; i++) {\n      for (let j = 1; j <= tubularSegments; j++) {\n        const a = (tubularSegments + 1) * i + j - 1;\n        const b = (tubularSegments + 1) * (i - 1) + j - 1;\n        const c = (tubularSegments + 1) * (i - 1) + j;\n        const d = (tubularSegments + 1) * i + j;\n\n        indices[offset++] = a;\n        indices[offset++] = b;\n        indices[offset++] = d;\n\n        indices[offset++] = b;\n        indices[offset++] = c;\n        indices[offset++] = d;\n      }\n    }\n\n    const { bounds } = mesh;\n    const outerRadius = radius + tubeRadius;\n    bounds.min.set(-outerRadius, -outerRadius, -tubeRadius);\n    bounds.max.set(outerRadius, outerRadius, tubeRadius);\n\n    GizmoMesh._initialize(mesh, vertices, indices, MeshTopology.Triangles, normals, uvs);\n  }\n\n  static createLine(engine: Engine, points: Array<Vector3>): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    GizmoMesh.updateLine(mesh, points);\n    engine.resourceManager.addContentRestorer(new GizmoMeshRestorer(mesh, new LineRestoreInfo(points)));\n    return mesh;\n  }\n\n  static updateLine(mesh: ModelMesh, points: Array<Vector3>) {\n    const vertices: Array<Vector3> = points;\n    const indices: Uint8Array = new Uint8Array(vertices.length);\n\n    for (let i = 0; i < vertices.length; i++) {\n      indices[i] = i;\n    }\n\n    GizmoMesh._initialize(mesh, vertices, indices, MeshTopology.Lines);\n  }\n\n  private static _initialize(\n    mesh: ModelMesh,\n    vertices: Array<Vector3>,\n    indices: Uint16Array | Uint8Array,\n    meshTopology: MeshTopology,\n    normals?: Array<Vector3>,\n    uvs?: Array<Vector2>\n  ) {\n    mesh.setPositions(vertices);\n    mesh.setIndices(indices);\n\n    normals && mesh.setNormals(normals);\n    uvs && mesh.setUVs(uvs);\n\n    mesh.clearSubMesh();\n\n    mesh.uploadData(false);\n    mesh.addSubMesh(0, indices.length, meshTopology);\n  }\n}\n"],"names":["GizmoMeshRestorer","resource","primitiveInfo","restoreContent","type","circleInfo","GizmoMesh","updateCircle","startPoint","normal","thetaLength","center","tubeInfo","updateCircleTube","arc","radius","tubeRadius","tubularSegments","radialSegments","lineInfo","updateLine","points","ContentRestorer","GizmoMeshType","GizmoMeshRestoreInfo","CircleRestoreInfo","CircleTubeRestoreInfo","LineRestoreInfo","createCircle","engine","Vector3","Math","PI","mesh","ModelMesh","resourceManager","addContentRestorer","segmentFactor","newSegments","abs","ceil","segments","max","indices","Uint16Array","vertices","i","start","push","s","segment","Quaternion","rotationAxisAngle","_tempQuat","transformByQuat","_tempVect","clone","_initialize","MeshTopology","Triangles","createCircleTube","vertexCount","rectangleCount","Array","normals","uvs","offset","j","u","v","cosV","cos","sinV","sin","cosU","sinU","position","centerX","centerY","x","y","z","normalize","Vector2","a","b","c","d","bounds","outerRadius","min","set","createLine","Uint8Array","length","Lines","meshTopology","setPositions","setIndices","setNormals","setUVs","clearSubMesh","uploadData","addSubMesh"],"mappings":"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"}