import { CullMode, PrimitiveMesh, Vector3 } from '@galacean/engine';
import { State } from './enums/GizmoState.js';
import { G as GizmoMesh } from './GizmoMesh-b318dff0.js';
import { PlainColorMaterial } from '@galacean/engine-toolkit-custom-material';
import './_inherits-5a51c3d0.js';

var Utils = /*#__PURE__*/ function() {
    function Utils() {}
    Utils.init = function init(engine) {
        // translate material
        Utils.redMaterialTrans = this._createPlainColorMaterial(engine, State.translate, 1.0, 0.25, 0.25, 1.0);
        Utils.lightRedMaterial = this._createPlainColorMaterial(engine, State.translate, 1.0, 0.25, 0.25, 0.9);
        Utils.greenMaterialTrans = this._createPlainColorMaterial(engine, State.translate, 0.5, 0.8, 0.2, 1.0);
        Utils.lightGreenMaterial = this._createPlainColorMaterial(engine, State.translate, 0.5, 0.8, 0.2, 0.9);
        Utils.blueMaterialTrans = this._createPlainColorMaterial(engine, State.translate, 0.3, 0.5, 1.0, 1.0);
        Utils.lightBlueMaterial = this._createPlainColorMaterial(engine, State.translate, 0.3, 0.5, 1.0, 0.9);
        Utils.invisibleMaterialTrans = this._createPlainColorMaterial(engine, State.translate, 0, 0, 0, 0);
        // rotate material
        Utils.redArcMaterial = this._createPlainColorMaterial(engine, State.rotate, 1.0, 0.25, 0.25);
        Utils.greenArcMaterial = this._createPlainColorMaterial(engine, State.rotate, 0.5, 0.8, 0.2);
        Utils.blueArcMaterial = this._createPlainColorMaterial(engine, State.rotate, 0.3, 0.5, 1.0);
        Utils.yellowMaterial = this._createPlainColorMaterial(engine, State.rotate, 1.0, 0.95, 0.0, 1.0);
        Utils.rotatePlaneMaterial = this._createPlainColorMaterial(engine, State.rotate, 1.0, 0.95, 0.0, 0.2);
        Utils.rotatePlaneMaterial.renderState.rasterState.cullMode = CullMode.Off;
        Utils.invisibleMaterialRotate = this._createPlainColorMaterial(engine, State.rotate, 0, 0, 0, 0);
        Utils.invisibleMaterialRotate.renderState.rasterState.cullMode = CullMode.Off;
        Utils.invisibleMaterialCircle = this._createPlainColorMaterial(engine, State.rotate, 0, 0, 0, 0);
        // scale material
        Utils.redMaterialScale = this._createPlainColorMaterial(engine, State.scale, 1.0, 0.25, 0.25, 1.0);
        Utils.greenMaterialScale = this._createPlainColorMaterial(engine, State.scale, 0.5, 0.8, 0.2, 1.0);
        Utils.blueMaterialScale = this._createPlainColorMaterial(engine, State.scale, 0.3, 0.5, 1.0, 1.0);
        Utils.greyMaterial = this._createPlainColorMaterial(engine, State.scale, 0.75, 0.75, 0.75, 1.0);
        Utils.lightMaterial = this._createPlainColorMaterial(engine, State.scale, 0.7, 0.7, 0.7, 1.0);
        Utils.invisibleMaterialScale = this._createPlainColorMaterial(engine, State.scale, 0, 0, 0, 0);
        Utils.lineMesh = PrimitiveMesh.createCylinder(engine, 0.02, 0.02, 1.5);
        Utils.lineMeshShort = PrimitiveMesh.createCylinder(engine, 0.02, 0.02, 1.3);
        Utils.axisArrowMesh = PrimitiveMesh.createCone(engine, 0.08, 0.3);
        Utils.axisPlaneMesh = PrimitiveMesh.createPlane(engine, 0.35, 0.35);
        Utils.axisCubeMesh = PrimitiveMesh.createCuboid(engine, 0.32, 0.32, 0.32);
        Utils.axisSphereMesh = PrimitiveMesh.createSphere(engine, 1.8, 48);
        Utils.axisEndCubeMesh = PrimitiveMesh.createCuboid(engine, 0.25, 0.25, 0.25);
        Utils.axisXTorusMesh = GizmoMesh.createCircleTube(engine, Math.PI, 1.6, 0.02);
        Utils.axisYTorusMesh = GizmoMesh.createCircleTube(engine, Math.PI, 1.6, 0.02);
        Utils.axisZTorusMesh = GizmoMesh.createCircleTube(engine, Math.PI, 1.6, 0.02);
        Utils.axisXYZTorusMesh = GizmoMesh.createCircleTube(engine, 2 * Math.PI, 1.8, 0.02);
        Utils.axisHelperLineMesh = PrimitiveMesh.createCylinder(engine, 0.15, 0.15, 1.75);
        Utils.axisHelperPlaneMesh = PrimitiveMesh.createPlane(engine, 0.75, 0.75);
        Utils.axisHelpertorusMesh = GizmoMesh.createCircleTube(engine, Math.PI, 1.6, 0.24);
        Utils.xAxisPositive = new Vector3(-1, 0, 0);
        Utils.yAxisPositive = new Vector3(0, -1, 0);
        Utils.zAxisPositive = new Vector3(0, 0, -1);
    };
    Utils._createPlainColorMaterial = function _createPlainColorMaterial(engine, name, r, g, b, a) {
        if (r === void 0) r = 1.0;
        if (g === void 0) g = 1.0;
        if (b === void 0) b = 1.0;
        if (a === void 0) a = 1.0;
        var material = new PlainColorMaterial(engine);
        material.isTransparent = true;
        material.renderState.depthState.enabled = false;
        material.baseColor.set(r, g, b, a);
        material.name = name.toString();
        return material;
    };
    return Utils;
}();
Utils.rotateCircleRadius = 1.6;
Utils.scaleFactor = 0.05773502691896257;

export { Utils };
//# sourceMappingURL=Utils.js.map
