import { Camera, Entity, Ray, Pointer } from "@galacean/engine";
import { GizmoComponent } from "./Type";
import { Group } from "./Group";
/** @internal */
export declare class RotateControl extends GizmoComponent {
    private _group;
    private _camera;
    private _rotateAxisComponent;
    private _rotateControlMap;
    private _gizmoRotateHelperEntity;
    private _axisX;
    private _axisY;
    private _axisZ;
    private _axisXYZ;
    private _axisXHelper;
    private _axisYHelper;
    private _axisZHelper;
    private _axisXYZHelper;
    private _isModified;
    private _startLineHelperEntity;
    private _startLineMesh;
    private _endLineHelperEntity;
    private _endLineMesh;
    private _rotateHelperPlaneEntity;
    private _rotateHelperPlaneMesh;
    private _selectedAxis;
    private _preMatrix;
    private _startMatrix;
    private _startInvMatrix;
    private _startPointUnit;
    private _currPointUnit;
    private _cameraPos;
    private _previousRad;
    private _finalRad;
    private _verticalAxis;
    private _horizontalAxis;
    private _speedFactor;
    private _tempMat;
    private _tempMat2;
    private _tempVec;
    private _tempVec2;
    private _tempVec30;
    private _tempVec31;
    private _tempVec32;
    private _tempMat41;
    private _isAtBack;
    constructor(entity: Entity);
    /** init axis geometry */
    private _initAxis;
    private _createAxis;
    init(camera: Camera, group: Group): void;
    onHoverStart(axisName: string): void;
    onHoverEnd(): void;
    onMoveStart(ray: Ray, axisName: string): void;
    onMove(ray: Ray, pointer: Pointer): void;
    onMoveEnd(): void;
    onUpdate(isModified?: boolean): void;
    onSwitch(isModified?: boolean): void;
    onAlphaChange(axisName: string, value: number): void;
    private _setAxisSelected;
    private _calRayIntersection;
    private _getFinalRad;
    private _getGizmoScale;
    private _updateAxisTransform;
    private _resizeControl;
    private _localLookAt;
}
