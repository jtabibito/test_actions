{"version":3,"file":"browser.verbose.js","sources":["../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_array_like_to_array.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_create_for_of_iterator_helper_loose.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_set_prototype_of.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_inherits.js","../../../node_modules/.pnpm/tslib@2.8.1/node_modules/tslib/tslib.es6.mjs","../src/common/ShaderRange.ts","../src/common/ShaderPosition.ts","../src/common/Keywords.ts","../src/common/types.ts","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_instanceof.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_is_native_reflect_construct.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_construct.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_get_prototype_of.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_is_native_function.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_wrap_native_super.js","../src/GSError.ts","../src/ShaderLabUtils.ts","../src/common/BaseToken.ts","../src/lexer/Utils.ts","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_create_class.js","../src/common/BaseScanner.ts","../src/lexer/Lexer.ts","../src/lalr/types.ts","../src/parser/ShaderInfo.ts","../src/parser/symbolTable/SymbolDataType.ts","../src/parser/symbolTable/SymbolInfo.ts","../src/parser/symbolTable/FnSymbol.ts","../src/parser/symbolTable/StructSymbol.ts","../src/common/BaseSymbolTable.ts","../src/parser/symbolTable/SymbolTable.ts","../src/parser/symbolTable/VarSymbol.ts","../src/parser/SemanticAnalyzer.ts","../src/parser/GrammarSymbol.ts","../src/lalr/Production.ts","../src/parser/Grammar.ts","../src/common/Enums.ts","../src/parser/builtin/functions.ts","../src/parser/builtin/variables.ts","../src/lalr/StateItem.ts","../src/lalr/State.ts","../src/ParserUtils.ts","../src/parser/types.ts","../src/parser/AST.ts","../src/lalr/Utils.ts","../src/lalr/CFG.ts","../src/lalr/LALR1.ts","../src/parser/ShaderTargetParser.ts","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_type_of.js","../src/preprocessor/MacroDefine.ts","../src/preprocessor/constants.ts","../src/preprocessor/sourceMap/index.ts","../src/preprocessor/Utils.ts","../src/preprocessor/PpScanner.ts","../src/preprocessor/PpParser.ts","../src/preprocessor/Preprocessor.ts","../src/codeGen/VisitorContext.ts","../src/codeGen/CodeGenVisitor.ts","../src/codeGen/GLESVisitor.ts","../src/codeGen/GLES100.ts","../src/codeGen/GLES300.ts","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_extends.js","../src/contentParser/KeywordMap.ts","../src/contentParser/Scanner.ts","../src/contentParser/SymbolTable.ts","../src/contentParser/ShaderContentParser.ts","../src/ShaderLab.ts","../src/index.ts"],"sourcesContent":["function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n","import { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _create_for_of_iterator_helper_loose(o, allowArrayLike) {\n    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n    if (it) return (it = it.call(o)).next.bind(it);\n    // Fallback for engines without symbol support\n    if (Array.isArray(o) || (it = _unsupported_iterable_to_array(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n        if (it) o = it;\n\n        var i = 0;\n\n        return function() {\n            if (i >= o.length) return { done: true };\n\n            return { done: false, value: o[i++] };\n        };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _create_for_of_iterator_helper_loose as _ };\n","function _set_prototype_of(o, p) {\n    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {\n        o.__proto__ = p;\n\n        return o;\n    };\n\n    return _set_prototype_of(o, p);\n}\nexport { _set_prototype_of as _ };\n","import { _ as _set_prototype_of } from \"./_set_prototype_of.js\";\n\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });\n\n    if (superClass) _set_prototype_of(subClass, superClass);\n}\nexport { _inherits as _ };\n","/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nvar ownKeys = function(o) {\n  ownKeys = Object.getOwnPropertyNames || function (o) {\n    var ar = [];\n    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n    return ar;\n  };\n  return ownKeys(o);\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r, s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n        }\n        else s |= 1;\n      }\n      catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\n  if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\n      return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\n          return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\n      });\n  }\n  return path;\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __esDecorate,\n  __runInitializers,\n  __propKey,\n  __setFunctionName,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n  __rewriteRelativeImportExtension,\n};\n","import { IPoolElement } from \"@galacean/engine\";\nimport { ShaderPosition } from \"./ShaderPosition\";\n\nexport class ShaderRange implements IPoolElement {\n  public start: ShaderPosition;\n  public end: ShaderPosition;\n\n  set(start: ShaderPosition, end: ShaderPosition) {\n    this.start = start;\n    this.end = end;\n  }\n\n  dispose(): void {\n    this.start.dispose();\n    this.end.dispose();\n  }\n}\n","import { IPoolElement } from \"@galacean/engine\";\n\nexport class ShaderPosition implements IPoolElement {\n  index: number;\n  // #if _VERBOSE\n  line: number;\n  column: number;\n  // #endif\n\n  set(\n    index: number,\n    // #if _VERBOSE\n    line: number,\n    column: number\n    // #endif\n  ) {\n    this.index = index;\n    // #if _VERBOSE\n    this.line = line;\n    this.column = column;\n    // #endif\n  }\n\n  dispose(): void {\n    this.index = 0;\n    // #if _VERBOSE\n    this.line = 0;\n    this.column = 0;\n    // #endif\n  }\n}\n","export enum EKeyword {\n  ATTRIBUTE = 0,\n  CONST,\n  BOOL,\n  FLOAT,\n  DOUBLE,\n  INT,\n  UINT,\n  BREAK,\n  CONTINUE,\n  DO,\n  ELSE,\n  FOR,\n  IF,\n  WHILE,\n  DISCARD,\n  RETURN,\n  BVEC2,\n  BVEC3,\n  BVEC4,\n  IVEC2,\n  IVEC3,\n  IVEC4,\n  UVEC2,\n  UVEC3,\n  UVEC4,\n  VEC2,\n  VEC3,\n  VEC4,\n  MAT2,\n  MAT3,\n  MAT4,\n  MAT2X3,\n  MAT2X4,\n  MAT3X2,\n  MAT3X4,\n  MAT4X2,\n  MAT4X3,\n  IN,\n  OUT,\n  INOUT,\n  CENTROID,\n  SAMPLER2D,\n  SAMPLER3D,\n  SAMPLER_CUBE,\n  SAMPLER2D_SHADOW,\n  SAMPLER_CUBE_SHADOW,\n  SAMPLER2D_ARRAY,\n  SAMPLER2D_ARRAY_SHADOW,\n  I_SAMPLER2D,\n  I_SAMPLER3D,\n  I_SAMPLER_CUBE,\n  I_SAMPLER2D_ARRAY,\n  U_SAMPLER2D,\n  U_SAMPLER3D,\n  U_SAMPLER_CUBE,\n  U_SAMPLER2D_ARRAY,\n  STRUCT,\n  VOID,\n  TRUE,\n  FALSE,\n  PRECISION,\n  PRECISE,\n  HIGHP,\n  MEDIUMP,\n  LOWP,\n  INVARIANT,\n  SMOOTH,\n  FLAT,\n  NOPERSPECTIVE,\n\n  // galacean internals\n  GS_RenderQueueType,\n  GS_BlendState,\n  GS_DepthState,\n  GS_StencilState,\n  GS_RasterState,\n  GS_EditorProperties,\n  GS_EditorMacros,\n  GS_Editor,\n  GS_Tags,\n  GS_ReplacementTag,\n  GS_LightMode,\n  GS_PipelineStage,\n  GS_VertexShader,\n  GS_FragmentShader,\n  GS_SubShader,\n  GS_Pass,\n  GS_BlendFactor,\n  GS_BlendOperation,\n  GS_Bool,\n  GS_Number,\n  GS_Color,\n  GS_CompareFunction,\n  GS_StencilOperation,\n  GS_CullMode,\n  GS_UsePass\n}\n","import { EKeyword } from \"./Keywords\";\n\nexport const KeywordTable = new Map<string, EKeyword>([\n  [\"attribute\", EKeyword.ATTRIBUTE],\n  [\"const\", EKeyword.CONST],\n  [\"bool\", EKeyword.BOOL],\n  [\"float\", EKeyword.FLOAT],\n  [\"double\", EKeyword.DOUBLE],\n  [\"int\", EKeyword.INT],\n  [\"uint\", EKeyword.UINT],\n  [\"break\", EKeyword.BREAK],\n  [\"continue\", EKeyword.CONTINUE],\n  [\"do\", EKeyword.DO],\n  [\"else\", EKeyword.ELSE],\n  [\"for\", EKeyword.FOR],\n  [\"if\", EKeyword.IF],\n  [\"while\", EKeyword.WHILE],\n  [\"discard\", EKeyword.DISCARD],\n  [\"return\", EKeyword.RETURN],\n  [\"bvec2\", EKeyword.BVEC2],\n  [\"bvec3\", EKeyword.BVEC3],\n  [\"bvec4\", EKeyword.BVEC4],\n  [\"ivec2\", EKeyword.IVEC2],\n  [\"ivec3\", EKeyword.IVEC3],\n  [\"ivec4\", EKeyword.IVEC4],\n  [\"uvec2\", EKeyword.UVEC2],\n  [\"uvec3\", EKeyword.UVEC3],\n  [\"uvec4\", EKeyword.UVEC4],\n  [\"vec2\", EKeyword.VEC2],\n  [\"vec3\", EKeyword.VEC3],\n  [\"vec4\", EKeyword.VEC4],\n  [\"mat2\", EKeyword.MAT2],\n  [\"mat3\", EKeyword.MAT3],\n  [\"mat4\", EKeyword.MAT4],\n  [\"in\", EKeyword.IN],\n  [\"out\", EKeyword.OUT],\n  [\"inout\", EKeyword.INOUT],\n  [\"sampler2D\", EKeyword.SAMPLER2D],\n  [\"samplerCube\", EKeyword.SAMPLER_CUBE],\n  [\"sampler3D\", EKeyword.SAMPLER3D],\n  [\"sampler2DShadow\", EKeyword.SAMPLER2D_SHADOW],\n  [\"samplerCubeShadow\", EKeyword.SAMPLER_CUBE_SHADOW],\n  [\"sampler2DArray\", EKeyword.SAMPLER2D_ARRAY],\n  [\"sampler2DArrayShadow\", EKeyword.SAMPLER2D_ARRAY_SHADOW],\n  [\"isampler2D\", EKeyword.I_SAMPLER2D],\n  [\"isampler3D\", EKeyword.I_SAMPLER3D],\n  [\"isamplerCube\", EKeyword.I_SAMPLER_CUBE],\n  [\"isampler2DArray\", EKeyword.I_SAMPLER2D_ARRAY],\n  [\"usampler2D\", EKeyword.U_SAMPLER2D],\n  [\"usampler3D\", EKeyword.U_SAMPLER3D],\n  [\"usamplerCube\", EKeyword.U_SAMPLER_CUBE],\n  [\"usampler2DArray\", EKeyword.U_SAMPLER2D_ARRAY],\n  [\"struct\", EKeyword.STRUCT],\n  [\"void\", EKeyword.VOID],\n  [\"true\", EKeyword.TRUE],\n  [\"false\", EKeyword.FALSE],\n  [\"precision\", EKeyword.PRECISION],\n  [\"precise\", EKeyword.PRECISE],\n  [\"highp\", EKeyword.HIGHP],\n  [\"mediump\", EKeyword.MEDIUMP],\n  [\"lowp\", EKeyword.LOWP],\n  [\"invariant\", EKeyword.INVARIANT],\n  [\"flat\", EKeyword.FLAT],\n  [\"smooth\", EKeyword.SMOOTH],\n  [\"noperspective\", EKeyword.NOPERSPECTIVE],\n  [\"centroid\", EKeyword.CENTROID]\n]);\n\nexport enum ETokenType {\n  ID = 1000,\n  FLOAT_CONSTANT,\n  INT_CONSTANT,\n  STRING_CONST,\n  /** << */\n  LEFT_OP,\n  /** \\>> */\n  RIGHT_OP,\n  /** ++ */\n  INC_OP,\n  /** -- */\n  DEC_OP,\n  /** <= */\n  LE_OP,\n  /** \\>= */\n  GE_OP,\n  /** == */\n  EQ_OP,\n  /** != */\n  NE_OP,\n  /** && */\n  AND_OP,\n  /** || */\n  OR_OP,\n  /** ^^ */\n  XOR_OP,\n  /** *= */\n  MUL_ASSIGN,\n  /** /= */\n  DIV_ASSIGN,\n  /** += */\n  ADD_ASSIGN,\n  /** -= */\n  SUB_ASSIGN,\n  /** %= */\n  MOD_ASSIGN,\n  /** <<= */\n  LEFT_ASSIGN,\n  /** >>= */\n  RIGHT_ASSIGN,\n  /** &= */\n  AND_ASSIGN,\n  /** ^= */\n  XOR_ASSIGN,\n  /** |= */\n  OR_ASSIGN,\n  /** ( */\n  LEFT_PAREN,\n  /** ) */\n  RIGHT_PAREN,\n  /** [ */\n  LEFT_BRACKET,\n  /** ] */\n  RIGHT_BRACKET,\n  /** { */\n  LEFT_BRACE,\n  /** } */\n  RIGHT_BRACE,\n  /** . */\n  DOT,\n  /** , */\n  COMMA,\n  COLON,\n  /** = */\n  EQUAL,\n  SEMICOLON,\n  /** ! */\n  BANG,\n  /** \\- */\n  DASH,\n  /** ~ */\n  TILDE,\n  PLUS,\n  /** \\* */\n  STAR,\n  /** / */\n  SLASH,\n  /** % */\n  PERCENT,\n  /** < */\n  LEFT_ANGLE,\n  /** \\> */\n  RIGHT_ANGLE,\n  VERTICAL_BAR,\n  /** ^ */\n  CARET,\n  /** & */\n  AMPERSAND,\n  /** ? */\n  QUESTION,\n\n  NOT_WORD,\n\n  /** ε */\n  EPSILON = 1998,\n  EOF = 1999\n}\n\nexport const TypeAny = 3000;\n\nexport type GalaceanDataType =\n  | EKeyword.VOID\n  | EKeyword.FLOAT\n  | EKeyword.BOOL\n  | EKeyword.INT\n  | EKeyword.UINT\n  | EKeyword.VEC2\n  | EKeyword.VEC3\n  | EKeyword.VEC4\n  | EKeyword.BVEC2\n  | EKeyword.BVEC3\n  | EKeyword.BVEC4\n  | EKeyword.IVEC2\n  | EKeyword.IVEC3\n  | EKeyword.IVEC4\n  | EKeyword.UVEC2\n  | EKeyword.UVEC3\n  | EKeyword.UVEC4\n  | EKeyword.MAT2\n  | EKeyword.MAT3\n  | EKeyword.MAT4\n  | EKeyword.MAT2X3\n  | EKeyword.MAT2X4\n  | EKeyword.MAT3X2\n  | EKeyword.MAT3X4\n  | EKeyword.MAT4X2\n  | EKeyword.MAT4X3\n  | EKeyword.SAMPLER2D\n  | EKeyword.SAMPLER3D\n  | EKeyword.SAMPLER_CUBE\n  | EKeyword.SAMPLER2D_SHADOW\n  | EKeyword.SAMPLER_CUBE_SHADOW\n  | EKeyword.SAMPLER2D_ARRAY\n  | EKeyword.SAMPLER2D_ARRAY_SHADOW\n  | EKeyword.I_SAMPLER2D\n  | EKeyword.I_SAMPLER3D\n  | EKeyword.I_SAMPLER_CUBE\n  | EKeyword.I_SAMPLER2D_ARRAY\n  | EKeyword.U_SAMPLER2D\n  | EKeyword.U_SAMPLER3D\n  | EKeyword.U_SAMPLER_CUBE\n  | EKeyword.U_SAMPLER2D_ARRAY\n  | typeof TypeAny\n  | string;\n\nexport type TokenType = ETokenType | EKeyword;\n","function _instanceof(left, right) {\n    if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n        return !!right[Symbol.hasInstance](left);\n    } else return left instanceof right;\n}\nexport { _instanceof as _ };\n","function _is_native_reflect_construct() {\n    // Since Reflect.construct can't be properly polyfilled, some\n    // implementations (e.g. core-js@2) don't set the correct internal slots.\n    // Those polyfills don't allow us to subclass built-ins, so we need to\n    // use our fallback implementation.\n    try {\n        // If the internal slots aren't set, this throws an error similar to\n        //   TypeError: this is not a Boolean object.\n        var result = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n    } catch (_) {}\n    return (_is_native_reflect_construct = function() {\n        return !!result;\n    })();\n}\n\nexport { _is_native_reflect_construct as _ };\n","import { _ as _is_native_reflect_construct } from \"./_is_native_reflect_construct.js\";\nimport { _ as _set_prototype_of } from \"./_set_prototype_of.js\";\nfunction _construct(Parent, args, Class) {\n    if (_is_native_reflect_construct()) _construct = Reflect.construct;\n    else {\n        _construct = function construct(Parent, args, Class) {\n            var a = [null];\n            a.push.apply(a, args);\n            var Constructor = Function.bind.apply(Parent, a);\n            var instance = new Constructor();\n\n            if (Class) _set_prototype_of(instance, Class.prototype);\n\n            return instance;\n        };\n    }\n\n    return _construct.apply(null, arguments);\n}\nexport { _construct as _ };\n","function _get_prototype_of(o) {\n    _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n\n    return _get_prototype_of(o);\n}\nexport { _get_prototype_of as _ };\n","function _is_native_function(fn) {\n    return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\nexport { _is_native_function as _ };\n","import { _ as _construct } from \"./_construct.js\";\nimport { _ as _get_prototype_of } from \"./_get_prototype_of.js\";\nimport { _ as _is_native_function } from \"./_is_native_function.js\";\nimport { _ as _set_prototype_of } from \"./_set_prototype_of.js\";\n\nfunction _wrap_native_super(Class) {\n    var _cache = typeof Map === \"function\" ? new Map() : undefined;\n    _wrap_native_super = function(Class) {\n        if (Class === null || !_is_native_function(Class)) return Class;\n        if (typeof Class !== \"function\") throw new TypeError(\"Super expression must either be null or a function\");\n        if (typeof _cache !== \"undefined\") {\n            if (_cache.has(Class)) return _cache.get(Class);\n            _cache.set(Class, Wrapper);\n        }\n\n        function Wrapper() {\n            return _construct(Class, arguments, _get_prototype_of(this).constructor);\n        }\n        Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } });\n\n        return _set_prototype_of(Wrapper, Class);\n    };\n\n    return _wrap_native_super(Class);\n}\nexport { _wrap_native_super as _ };\n","// #if _VERBOSE\nimport { ShaderPosition } from \"./common/ShaderPosition\";\nimport { ShaderRange } from \"./common/ShaderRange\";\n\nexport class GSError extends Error {\n  static wrappingLineCount = 2;\n\n  constructor(\n    name: GSErrorName,\n    message: string,\n    public readonly location: ShaderRange | ShaderPosition,\n    public readonly source: string,\n    public readonly file?: string\n  ) {\n    super(message);\n    this.name = name;\n  }\n\n  override toString(): string {\n    let start: ShaderPosition, end: ShaderPosition;\n    const { message, location, source } = this;\n    if (!source) {\n      return message;\n    }\n\n    if (location instanceof ShaderPosition) {\n      start = end = location;\n    } else {\n      start = location.start;\n      end = location.end;\n    }\n    const lines = source.split(\"\\n\");\n\n    let diagnosticMessage = `${this.name}: ${message}\\n\\n`;\n    const lineSplit = \"|···\";\n\n    const wrappingLineCount = GSError.wrappingLineCount;\n    for (let i = start.line - wrappingLineCount, n = end.line + wrappingLineCount; i <= n; i++) {\n      const line = lines[i];\n      diagnosticMessage += lineSplit + `${line}\\n`;\n\n      if (i < start.line || i > end.line) continue;\n\n      let remarkStart = 0;\n      let remarkEnd = line.length;\n      let paddingLength = lineSplit.length;\n      if (i === start.line) {\n        remarkStart = start.column;\n        paddingLength += start.column;\n      } else if (i === end.line) {\n        remarkEnd = end.column;\n      }\n      const remarkLength = Math.max(remarkEnd - remarkStart, 1);\n\n      diagnosticMessage += \" \".repeat(paddingLength) + \"^\".repeat(remarkLength) + \"\\n\";\n    }\n\n    return diagnosticMessage;\n  }\n}\n\n// #endif\nexport enum GSErrorName {\n  PreprocessorError = \"PreprocessorError\",\n  CompilationError = \"CompilationError\",\n  ScannerError = \"ScannerError\"\n}\n","import { ClearableObjectPool, IPoolElement } from \"@galacean/engine\";\nimport { GSErrorName } from \"./GSError\";\nimport { ShaderRange } from \"./common/ShaderRange\";\nimport { ShaderPosition } from \"./common/ShaderPosition\";\n// #if _VERBOSE\nimport { GSError } from \"./GSError\";\n// #endif\n\nexport class ShaderLabUtils {\n  private static _shaderLabObjectPoolSet: ClearableObjectPool<IPoolElement>[] = [];\n\n  static createObjectPool<T extends IPoolElement>(type: new () => T) {\n    const pool = new ClearableObjectPool<T>(type);\n    ShaderLabUtils._shaderLabObjectPoolSet.push(pool);\n    return pool;\n  }\n\n  static clearAllShaderLabObjectPool() {\n    for (let i = 0, n = ShaderLabUtils._shaderLabObjectPoolSet.length; i < n; i++) {\n      ShaderLabUtils._shaderLabObjectPoolSet[i].clear();\n    }\n  }\n\n  static createGSError(\n    message: string,\n    errorName: GSErrorName,\n    source: string,\n    location: ShaderRange | ShaderPosition,\n    file?: string\n  ): Error {\n    // #if _VERBOSE\n    return new GSError(errorName, message, location, source, file);\n    // #else\n    return new Error(`[${errorName}]: ${message}`);\n    // #endif\n  }\n}\n","import { ETokenType } from \"./types\";\nimport { ShaderRange, ShaderPosition } from \".\";\nimport { ShaderLab } from \"../ShaderLab\";\nimport { IPoolElement } from \"@galacean/engine\";\nimport { ShaderLabUtils } from \"../ShaderLabUtils\";\n\nexport class BaseToken<T extends number = number> implements IPoolElement {\n  static pool = ShaderLabUtils.createObjectPool(BaseToken);\n\n  type: T;\n  lexeme: string;\n  location: ShaderRange;\n\n  set(type: T, lexeme: string, start?: ShaderPosition);\n  set(type: T, lexeme: string, location?: ShaderRange);\n  set(type: T, lexeme: string, arg?: ShaderRange | ShaderPosition) {\n    this.type = type;\n    this.lexeme = lexeme;\n    if (arg) {\n      if (arg instanceof ShaderRange) {\n        this.location = arg as ShaderRange;\n      } else {\n        const end = ShaderLab.createPosition(\n          arg.index + lexeme.length,\n          // #if _VERBOSE\n          arg.line,\n          arg.column + lexeme.length\n          // #endif\n        );\n        this.location = ShaderLab.createRange(arg, end);\n      }\n    }\n  }\n\n  dispose(): void {}\n}\n\nexport const EOF = new BaseToken();\nEOF.set(ETokenType.EOF, \"/EOF\");\n","import { ETokenType, TokenType } from \"../common/types\";\n\nexport default class LexerUtils {\n  static numRegex = /\\d/;\n  static letterRegex = /\\w/;\n  static alphaRegex = /[a-zA-Z_]/;\n  static numOrLetterRegex = /(\\d|\\w)/;\n\n  static isNum(char: string) {\n    return this.numRegex.test(char);\n  }\n\n  static isLetter(char: string) {\n    return this.letterRegex.test(char);\n  }\n\n  static isAlpha(char: string) {\n    return this.alphaRegex.test(char);\n  }\n\n  static isNumOrLetter(char: string) {\n    return this.numOrLetterRegex.test(char);\n  }\n\n  static isKeyword(tt: TokenType) {\n    return tt < ETokenType.ID;\n  }\n}\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { ETokenType, ShaderRange, ShaderPosition } from \".\";\nimport { GSErrorName } from \"../GSError\";\nimport { ShaderLab } from \"../ShaderLab\";\nimport { BaseToken } from \"./BaseToken\";\nimport { ShaderLabUtils } from \"../ShaderLabUtils\";\n\nexport type OnToken = (token: BaseToken, scanner: BaseScanner) => void;\n\n/**\n * @internal\n */\nexport default class BaseScanner {\n  private static _spaceCharsWithBreak = [\" \", \"\\t\", \"\\n\"];\n  private static _spaceChars = [\" \", \"\\t\"];\n  private static _checkIsIn(checked: string, chars: string[]): boolean {\n    for (let i = 0; i < chars.length; i++) {\n      if (checked === chars[i]) {\n        return true;\n      }\n      continue;\n    }\n    return false;\n  }\n\n  protected _currentIndex = 0;\n  protected _source: string;\n\n  // #if _VERBOSE\n  protected _column = 0;\n  protected _line = 0;\n  // #endif\n\n  get current(): number {\n    return this._currentIndex;\n  }\n\n  get source(): string {\n    return this._source;\n  }\n\n  getCurPosition(): ShaderPosition {\n    return ShaderLab.createPosition(\n      this._currentIndex,\n      // #if _VERBOSE\n      this._line,\n      this._column\n      // #endif\n    );\n  }\n\n  // #if _VERBOSE\n  get line() {\n    return this._line;\n  }\n\n  get column() {\n    return this._column;\n  }\n  // #endif\n\n  protected readonly _keywordsMap: Map<string, number>;\n\n  constructor(source: string, kws: Map<string, number> = new Map()) {\n    this._source = source;\n    this._keywordsMap = kws;\n  }\n\n  isEnd(): boolean {\n    return this._currentIndex >= this._source.length;\n  }\n\n  getCurChar(): string {\n    return this._source[this._currentIndex];\n  }\n\n  advance(count = 1): void {\n    for (let i = 0; i < count; i++) {\n      this._advance();\n    }\n  }\n\n  _advance(): void {\n    if (this.isEnd()) {\n      return;\n    }\n\n    // #if _VERBOSE\n    if (this.getCurChar() === \"\\n\") {\n      this._line += 1;\n      this._column = 0;\n    } else {\n      this._column += 1;\n    }\n    // #endif\n\n    this._currentIndex++;\n  }\n\n  skipSpace(includeLineBreak: boolean): void {\n    const spaceChars = includeLineBreak ? BaseScanner._spaceCharsWithBreak : BaseScanner._spaceChars;\n    let curChar = this.getCurChar();\n\n    while (BaseScanner._checkIsIn(curChar, spaceChars)) {\n      this._advance();\n      curChar = this.getCurChar();\n    }\n  }\n\n  skipCommentsAndSpace(): ShaderRange | undefined {\n    this.skipSpace(true);\n    if (this.peek(2) === \"//\") {\n      const start = this.getCurPosition();\n      this.advance(2);\n      // single line comments\n      while (this.getCurChar() !== \"\\n\") this._advance();\n      this.skipCommentsAndSpace();\n      return ShaderLab.createRange(start, this.getCurPosition());\n    } else if (this.peek(2) === \"/*\") {\n      const start = this.getCurPosition();\n      this.advance(2);\n      //  multi-line comments\n      while (this.peek(2) !== \"*/\" && !this.isEnd()) this._advance();\n      this.advance(2);\n      this.skipCommentsAndSpace();\n      return ShaderLab.createRange(start, this.getCurPosition());\n    }\n  }\n\n  peek(to: number): string {\n    const offset = this._currentIndex;\n    return this._source.substring(offset, offset + to);\n  }\n\n  scanText(text: string) {\n    this.skipCommentsAndSpace();\n    const peek = this.peek(text.length);\n    if (peek !== text) {\n      this.throwError(this.getCurPosition(), `Expect text \"${text}\", but got \"${peek}\"`);\n    }\n    this.advance(text.length);\n  }\n\n  throwError(pos: ShaderPosition | ShaderRange, ...msgs: any[]) {\n    const error = ShaderLabUtils.createGSError(msgs.join(\" \"), GSErrorName.ScannerError, this._source, pos);\n    throw error;\n  }\n\n  scanPairedText(left: string, right: string, balanced = false, skipLeading = false) {\n    if (!skipLeading) {\n      this.scanText(left);\n    }\n    const start = this._currentIndex;\n    let level = balanced ? 1 : 0;\n    while (this.peek(right.length) !== right || level !== 0) {\n      if (this.isEnd()) return;\n      if (balanced) {\n        if (this.peek(left.length) === left) {\n          level += 1;\n          this.advance(left.length);\n          continue;\n        } else if (this.peek(right.length) === right) {\n          level -= 1;\n          if (level === 0) break;\n          this.advance(right.length);\n          continue;\n        }\n      }\n      this.advance(right.length);\n    }\n    this.advance(right.length);\n    return this._source.substring(start, this._currentIndex - right.length);\n  }\n\n  scanToken(onToken?: OnToken, splitCharRegex = /\\w/) {\n    this.skipCommentsAndSpace();\n    const start = this.getCurPosition();\n    if (this.isEnd()) return;\n    while (splitCharRegex.test(this.getCurChar()) && !this.isEnd()) this._advance();\n    const end = this.getCurPosition();\n\n    if (start.index === end.index) {\n      this._advance();\n      const token = BaseToken.pool.get();\n      token.set(ETokenType.NOT_WORD, this._source[start.index], start);\n      onToken?.(token, this);\n      return token;\n    }\n\n    const lexeme = this._source.substring(start.index, end.index);\n    const tokenType = this._keywordsMap.get(lexeme) ?? ETokenType.ID;\n    const range = ShaderLab.createRange(start, end);\n    const token = BaseToken.pool.get();\n    token.set(tokenType, lexeme, range);\n    onToken?.(token, this);\n    return token;\n  }\n}\n","import { ShaderRange, ShaderPosition } from \"../common\";\nimport { ETokenType, KeywordTable } from \"../common\";\nimport { EOF, BaseToken } from \"../common/BaseToken\";\nimport LexerUtils from \"./Utils\";\nimport BaseScanner from \"../common/BaseScanner\";\nimport { ShaderLab } from \"../ShaderLab\";\n\n/**\n * The Lexer of ShaderLab Compiler\n */\nexport class Lexer extends BaseScanner {\n  reset(source: string) {\n    this._source = source;\n    this._currentIndex = 0;\n    // #if _VERBOSE\n    this._line = this._column = 0;\n    // #endif\n  }\n\n  *tokenize() {\n    while (!this.isEnd()) {\n      yield this.scanToken();\n    }\n    return EOF;\n  }\n\n  override skipSpace() {\n    while (/\\s/.test(this.getCurChar())) {\n      this.advance();\n    }\n  }\n\n  override scanToken(): BaseToken {\n    this.skipCommentsAndSpace();\n    if (this.isEnd()) {\n      return EOF;\n    }\n\n    if (LexerUtils.isAlpha(this.getCurChar())) {\n      return this._scanWord();\n    }\n    if (LexerUtils.isNum(this.getCurChar())) {\n      return this._scanNum();\n    }\n\n    const start = this._getPosition();\n    const token = BaseToken.pool.get();\n\n    switch (this.getCurChar()) {\n      case \"<\":\n        this.advance();\n        if (this.getCurChar() === \"<\") {\n          this.advance();\n          if (this.getCurChar() === \"=\") {\n            this.advance();\n            token.set(ETokenType.LEFT_ASSIGN, \"<<=\", start);\n            break;\n          }\n          token.set(ETokenType.LEFT_OP, \"<<\", start);\n          break;\n        } else if (this.getCurChar() === \"=\") {\n          this.advance();\n          token.set(ETokenType.LE_OP, \"<=\", start);\n          break;\n        }\n        token.set(ETokenType.LEFT_ANGLE, \"<\", start);\n        break;\n\n      case \">\":\n        this.advance();\n        if (this.getCurChar() === \">\") {\n          this.advance();\n          if (this.getCurChar() === \"=\") {\n            this.advance();\n            token.set(ETokenType.RIGHT_ASSIGN, \">>=\", start);\n            break;\n          }\n          token.set(ETokenType.RIGHT_OP, \">>\", start);\n          break;\n        } else if (this.getCurChar() === \"=\") {\n          this.advance();\n          token.set(ETokenType.GE_OP, \">=\", start);\n          break;\n        }\n        token.set(ETokenType.RIGHT_ANGLE, \">\", start);\n        break;\n\n      case \"+\":\n        this.advance();\n        if (this.getCurChar() === \"+\") {\n          this.advance();\n          token.set(ETokenType.INC_OP, \"++\", start);\n          break;\n        } else if (this.getCurChar() === \"=\") {\n          this.advance();\n          token.set(ETokenType.ADD_ASSIGN, \"+=\", start);\n          break;\n        }\n        token.set(ETokenType.PLUS, \"+\", start);\n        break;\n\n      case \"-\":\n        this.advance();\n        if (this.getCurChar() === \"-\") {\n          this.advance();\n          token.set(ETokenType.DEC_OP, \"--\", start);\n          break;\n        } else if (this.getCurChar() === \"=\") {\n          this.advance();\n          token.set(ETokenType.SUB_ASSIGN, \"-=\", start);\n          break;\n        }\n        token.set(ETokenType.DASH, \"-\", start);\n        break;\n\n      case \"=\":\n        this.advance();\n        if (this.getCurChar() === \"=\") {\n          this.advance();\n          token.set(ETokenType.EQ_OP, \"==\", start);\n          break;\n        }\n        token.set(ETokenType.EQUAL, \"=\", start);\n        break;\n\n      case \"!\":\n        this.advance();\n        if (this.getCurChar() === \"=\") {\n          this.advance();\n          token.set(ETokenType.NE_OP, \"!=\", start);\n          break;\n        }\n        token.set(ETokenType.BANG, \"!\", start);\n        break;\n\n      case \"&\":\n        this.advance();\n        if (this.getCurChar() === \"&\") {\n          this.advance();\n          token.set(ETokenType.AND_OP, \"&&\", start);\n          break;\n        } else if (this.getCurChar() === \"=\") {\n          this.advance();\n          token.set(ETokenType.ADD_ASSIGN, \"&=\", start);\n          break;\n        }\n        token.set(ETokenType.AMPERSAND, \"&\", start);\n        break;\n\n      case \"|\":\n        this.advance();\n        if (this.getCurChar() === \"|\") {\n          this.advance();\n          token.set(ETokenType.OR_OP, \"||\", start);\n          break;\n        } else if (this.getCurChar() === \"=\") {\n          this.advance();\n          token.set(ETokenType.OR_ASSIGN, \"|=\", start);\n          break;\n        }\n        token.set(ETokenType.VERTICAL_BAR, \"|\", start);\n        break;\n\n      case \"^\":\n        this.advance();\n        if (this.getCurChar() === \"^\") {\n          this.advance();\n          token.set(ETokenType.XOR_OP, \"^^\", start);\n          break;\n        } else if (this.getCurChar() === \"=\") {\n          this.advance();\n          token.set(ETokenType.XOR_ASSIGN, \"^=\", start);\n          break;\n        }\n        token.set(ETokenType.CARET, \"^\", start);\n        break;\n\n      case \"*\":\n        this.advance();\n        if (this.getCurChar() === \"=\") {\n          this.advance();\n          token.set(ETokenType.MUL_ASSIGN, \"*=\", start);\n          break;\n        }\n\n        token.set(ETokenType.STAR, \"*\", start);\n        break;\n\n      case \"/\":\n        this.advance();\n        if (this.getCurChar() === \"=\") {\n          this.advance();\n\n          token.set(ETokenType.DIV_ASSIGN, \"/=\", start);\n          break;\n        }\n\n        token.set(ETokenType.SLASH, \"/\", start);\n        break;\n\n      case \"%\":\n        this.advance();\n        if (this.getCurChar() === \"=\") {\n          this.advance();\n\n          token.set(ETokenType.MOD_ASSIGN, \"%=\", start);\n          break;\n        }\n\n        token.set(ETokenType.PERCENT, \"%\", start);\n        break;\n\n      case \"(\":\n        this.advance();\n\n        token.set(ETokenType.LEFT_PAREN, \"(\", start);\n        break;\n      case \")\":\n        this.advance();\n\n        token.set(ETokenType.RIGHT_PAREN, \")\", start);\n        break;\n      case \"{\":\n        this.advance();\n\n        token.set(ETokenType.LEFT_BRACE, \"{\", start);\n        break;\n      case \"}\":\n        this.advance();\n\n        token.set(ETokenType.RIGHT_BRACE, \"}\", start);\n        break;\n      case \"[\":\n        this.advance();\n\n        token.set(ETokenType.LEFT_BRACKET, \"[\", start);\n        break;\n      case \"]\":\n        this.advance();\n\n        token.set(ETokenType.RIGHT_BRACKET, \"]\", start);\n        break;\n      case \".\":\n        this.advance();\n        if (LexerUtils.isNum(this.getCurChar())) {\n          return this._scanNumAfterDot();\n        }\n\n        token.set(ETokenType.DOT, \".\", start);\n        break;\n      case \",\":\n        this.advance();\n\n        token.set(ETokenType.COMMA, \",\", start);\n        break;\n      case \":\":\n        this.advance();\n\n        token.set(ETokenType.COLON, \":\", start);\n        return token;\n      case \";\":\n        this.advance();\n\n        token.set(ETokenType.SEMICOLON, \";\", start);\n        break;\n      case \"~\":\n        this.advance();\n\n        token.set(ETokenType.TILDE, \"~\", start);\n        break;\n      case \"?\":\n        this.advance();\n\n        token.set(ETokenType.QUESTION, \"?\", start);\n        break;\n      case '\"':\n        this.advance();\n        return this._scanStringConst();\n\n      default:\n        this.throwError(this.getCurPosition(), `Unexpected character ${this.getCurChar()}`);\n    }\n    return token;\n  }\n\n  private _scanStringConst() {\n    const start = this._getPosition();\n    const buffer: string[] = [];\n    while (this.getCurChar() !== '\"') {\n      buffer.push(this.getCurChar());\n      this.advance();\n    }\n    this.advance();\n    const range = ShaderLab.createRange(start, this._getPosition());\n\n    const token = BaseToken.pool.get();\n    token.set(ETokenType.STRING_CONST, buffer.join(\"\"), range);\n    return token;\n  }\n\n  private _scanNumAfterDot() {\n    const buffer = [\".\"];\n    while (LexerUtils.isNum(this.getCurChar())) {\n      buffer.push(this.getCurChar());\n      this.advance();\n    }\n\n    const token = BaseToken.pool.get();\n    token.set(ETokenType.FLOAT_CONSTANT, buffer.join(\"\"), this._getPosition(1));\n    return token;\n  }\n\n  private _getPosition(offset /** offset from starting point */ = 0) {\n    return ShaderLab.createPosition(\n      this.current - offset,\n      // #if _VERBOSE\n      this._line,\n      this._column - offset\n      // #endif\n    );\n  }\n\n  private _scanWord() {\n    const buffer: string[] = [this.getCurChar()];\n    const start = this._getPosition();\n    this.advance();\n    while (LexerUtils.isLetter(this.getCurChar())) {\n      buffer.push(this.getCurChar());\n      this.advance();\n    }\n    const word = buffer.join(\"\");\n    const kt = KeywordTable.get(word);\n    if (kt) {\n      const token = BaseToken.pool.get();\n      token.set(kt, word, start);\n      return token;\n    }\n\n    const token = BaseToken.pool.get();\n    token.set(ETokenType.ID, word, start);\n    return token;\n  }\n\n  private _scanNum() {\n    const buffer: string[] = [];\n    while (LexerUtils.isNum(this.getCurChar())) {\n      buffer.push(this.getCurChar());\n      this.advance();\n    }\n    if (this.getCurChar() === \".\") {\n      buffer.push(this.getCurChar());\n      this.advance();\n      while (LexerUtils.isNum(this.getCurChar())) {\n        buffer.push(this.getCurChar());\n        this.advance();\n      }\n      this._scanFloatSuffix(buffer);\n\n      const token = BaseToken.pool.get();\n      token.set(ETokenType.FLOAT_CONSTANT, buffer.join(\"\"), this._getPosition(buffer.length));\n      return token;\n    } else {\n      if (this.getCurChar() === \"e\" || this.getCurChar() === \"E\") {\n        this._scanFloatSuffix(buffer);\n\n        const token = BaseToken.pool.get();\n        token.set(ETokenType.FLOAT_CONSTANT, buffer.join(\"\"), this._getPosition(buffer.length));\n        return token;\n      } else {\n        this._scanIntegerSuffix(buffer);\n\n        const token = BaseToken.pool.get();\n        token.set(ETokenType.INT_CONSTANT, buffer.join(\"\"), this._getPosition(buffer.length));\n        return token;\n      }\n    }\n  }\n\n  private _scanFloatSuffix(buffer: string[]) {\n    if (this.getCurChar() === \"e\" || this.getCurChar() === \"E\") {\n      buffer.push(this.getCurChar());\n      this.advance();\n      if (this.getCurChar() === \"+\" || this.getCurChar() === \"-\") {\n        buffer.push(this.getCurChar());\n        this.advance();\n      }\n      if (!LexerUtils.isNum(this.getCurChar()))\n        this.throwError(this.getCurPosition(), \"lexing error, invalid exponent suffix.\");\n      while (LexerUtils.isNum(this.getCurChar())) {\n        buffer.push(this.getCurChar());\n        this.advance();\n      }\n    }\n    if (this.getCurChar() === \"f\" || this.getCurChar() === \"F\") {\n      buffer.push(this.getCurChar());\n      this.advance();\n    }\n  }\n\n  private _scanIntegerSuffix(buffer: string[]) {\n    if (this.getCurChar() === \"u\" || this.getCurChar() === \"U\") {\n      buffer.push(this.getCurChar());\n      this.advance();\n    }\n  }\n}\n","import { ENonTerminal, Terminal } from \"../parser/GrammarSymbol\";\n\nexport type StateActionTable = Map<number /** state ID */, ActionTable>;\nexport type ActionTable = Map<Terminal, ActionInfo>;\nexport type StateGotoTable = Map<number /** state ID */, GotoTable>;\nexport type GotoTable = Map<ENonTerminal, number /** state ID */>;\n\nexport enum EAction {\n  Shift = 0,\n  Reduce,\n  Accept\n}\n\nexport interface ActionInfo {\n  action: EAction;\n  target?: number;\n}\n","import { ASTNode } from \"./AST\";\nimport { SymbolTable } from \"../parser/symbolTable\";\n\nexport class ShaderData {\n  symbolTable: SymbolTable;\n\n  vertexMain: ASTNode.FunctionDefinition;\n  fragmentMain: ASTNode.FunctionDefinition;\n\n  globalPrecisions: ASTNode.PrecisionSpecifier[] = [];\n}\n","import { GalaceanDataType } from \"../../common\";\nimport { ASTNode } from \"../AST\";\n\nexport class SymbolDataType {\n  constructor(\n    public type: GalaceanDataType,\n    public typeLexeme: string,\n    public arraySpecifier?: ASTNode.ArraySpecifier\n  ) {}\n}\n","import { IBaseSymbol } from \"../../common/BaseSymbolTable\";\nimport { ASTNode } from \"../AST\";\nimport { SymbolDataType } from \"./SymbolDataType\";\n\nexport enum ESymbolType {\n  VAR,\n  FN,\n  STRUCT\n}\n\ntype SymbolAstNode =\n  | ASTNode.Initializer\n  | ASTNode.StructSpecifier\n  | ASTNode.FunctionDefinition\n  | ASTNode.ParameterDeclarator\n  | ASTNode.InitDeclaratorList\n  | ASTNode.VariableDeclaration;\n\nexport class SymbolInfo implements IBaseSymbol {\n  constructor(\n    public readonly ident: string,\n    public readonly symbolType: ESymbolType,\n    public readonly astNode?: SymbolAstNode,\n    public readonly dataType?: SymbolDataType\n  ) {}\n}\n","import { ASTNode } from \"../AST\";\nimport { SymbolDataType } from \"./SymbolDataType\";\nimport { ESymbolType, SymbolInfo } from \"./SymbolInfo\";\n\nexport class FnSymbol extends SymbolInfo {\n  declare astNode: ASTNode.FunctionDefinition;\n\n  constructor(lexeme: string, astNode: ASTNode.FunctionDefinition) {\n    const type = new SymbolDataType(\n      astNode.protoType.returnType.type,\n      astNode.protoType.returnType.typeSpecifier.lexeme\n    );\n    super(lexeme, ESymbolType.FN, astNode, type);\n  }\n}\n","import { ASTNode } from \"../AST\";\nimport { ESymbolType, SymbolInfo } from \"./SymbolInfo\";\n\nexport class StructSymbol extends SymbolInfo {\n  declare astNode: ASTNode.StructSpecifier;\n\n  constructor(lexeme: string, astNode: ASTNode.StructSpecifier) {\n    super(lexeme, ESymbolType.STRUCT, astNode);\n  }\n}\n","import { Logger } from \"@galacean/engine\";\nimport { GalaceanDataType } from \"./types\";\n\nexport interface IBaseSymbol {\n  readonly ident: string;\n}\n\n/**\n * The base class of `SymbolTable`\n */\nexport abstract class BaseSymbolTable<T extends IBaseSymbol = IBaseSymbol> {\n  protected _table: Map<string, T[]> = new Map();\n\n  /**\n   * Check the equality of two symbol.\n   */\n  abstract symbolEqualCheck(exist: T, newSymbol: T): boolean;\n\n  insert(sm: T) {\n    const entry = this._table.get(sm.ident) ?? [];\n    for (let i = 0; i < entry.length; i++) {\n      if (this.symbolEqualCheck(entry[i], sm)) {\n        Logger.warn(\"replace symbol:\", sm.ident);\n        entry[i] = sm;\n        return;\n      }\n    }\n    entry.push(sm);\n    this._table.set(sm.ident, entry);\n  }\n\n  lookup<R = T>(sm: T & { signature?: GalaceanDataType[] }): R {\n    const entry = this._table.get(sm.ident) ?? [];\n    for (const item of entry) {\n      if (this.symbolEqualCheck(item, sm)) return item as unknown as R;\n    }\n  }\n}\n\nexport class SymbolTableStack<S extends IBaseSymbol, T extends BaseSymbolTable<S>> {\n  private _stack: T[] = [];\n\n  get _scope() {\n    return this._stack[this._stack.length - 1];\n  }\n\n  newScope(scope: T) {\n    this._stack.push(scope);\n  }\n\n  clear() {\n    this._stack.length = 0;\n  }\n\n  dropScope() {\n    this._stack.pop();\n  }\n\n  insert(sm: S) {\n    this._scope.insert(sm);\n  }\n\n  lookup(sm: S & { signature?: GalaceanDataType[] }) {\n    for (let i = this._stack.length - 1; i >= 0; i--) {\n      const scope = this._stack[i];\n      const ret = scope.lookup(sm);\n      if (ret) return ret;\n    }\n  }\n}\n","import { GalaceanDataType, TypeAny } from \"../../common\";\nimport { BaseSymbolTable } from \"../../common/BaseSymbolTable\";\nimport { ASTNode } from \"../AST\";\nimport { FnSymbol } from \"./FnSymbol\";\nimport { ESymbolType, SymbolInfo } from \"./SymbolInfo\";\n\nexport class SymbolTable extends BaseSymbolTable<SymbolInfo> {\n  override symbolEqualCheck(exist: SymbolInfo, newSymbol: SymbolInfo & { signature?: GalaceanDataType[] }): boolean {\n    if (exist.symbolType !== newSymbol.symbolType) return false;\n    if (newSymbol.symbolType === ESymbolType.FN) {\n      if (!newSymbol.astNode && !newSymbol.signature) return true;\n\n      const existParams = (exist.astNode as ASTNode.FunctionDefinition).protoType.paramSig;\n      const newSymbolParams =\n        newSymbol.signature ?? (newSymbol.astNode as ASTNode.FunctionDefinition).protoType.paramSig;\n      if (existParams.length !== newSymbolParams.length) return false;\n      for (let i = 0; i < existParams.length; i++) {\n        if (existParams[i] === TypeAny || newSymbolParams[i] === TypeAny) continue;\n        if (existParams[i] !== newSymbolParams[i]) return false;\n      }\n    }\n    return true;\n  }\n\n  getAllFnSymbols(fnIdent: string): FnSymbol[] {\n    const entries = this._table.get(fnIdent) ?? [];\n    return entries.filter((item) => item.symbolType === ESymbolType.FN) as FnSymbol[];\n  }\n}\n","import { ASTNode } from \"../AST\";\nimport { SymbolDataType } from \"./SymbolDataType\";\nimport { ESymbolType, SymbolInfo } from \"./SymbolInfo\";\n\nexport class VarSymbol extends SymbolInfo {\n  declare astNode:\n    | ASTNode.Initializer\n    | ASTNode.ParameterDeclarator\n    | ASTNode.InitDeclaratorList\n    | ASTNode.VariableDeclaration;\n\n  readonly isGlobalVariable: boolean;\n\n  constructor(\n    ident: string,\n    dataType: SymbolDataType,\n    isGlobalVariable: boolean,\n    initAst:\n      | ASTNode.Initializer\n      | ASTNode.ParameterDeclarator\n      | ASTNode.InitDeclaratorList\n      | ASTNode.VariableDeclaration\n  ) {\n    super(ident, ESymbolType.VAR, initAst, dataType);\n    this.isGlobalVariable = isGlobalVariable;\n  }\n}\n","import { ShaderRange } from \"../common\";\nimport { TreeNode } from \"./AST\";\nimport { GSErrorName } from \"../GSError\";\nimport { ShaderData } from \"./ShaderInfo\";\nimport { SymbolInfo, SymbolTable } from \"../parser/symbolTable\";\nimport { NodeChild } from \"./types\";\nimport { SymbolTableStack } from \"../common/BaseSymbolTable\";\nimport { ShaderLab } from \"../ShaderLab\";\n// #if _VERBOSE\nimport { GSError } from \"../GSError\";\n// #endif\n\nexport type TranslationRule<T = any> = (sa: SematicAnalyzer, ...tokens: NodeChild[]) => T;\n\n/**\n * The semantic analyzer of `ShaderLab` compiler.\n * - Build symbol table\n * - Static analysis\n */\nexport default class SematicAnalyzer {\n  semanticStack: TreeNode[] = [];\n  acceptRule?: TranslationRule = undefined;\n  symbolTable: SymbolTableStack<SymbolInfo, SymbolTable> = new SymbolTableStack();\n  private _shaderData = new ShaderData();\n\n  // #if _VERBOSE\n  readonly errors: GSError[] = [];\n  // #endif\n\n  get shaderData() {\n    return this._shaderData;\n  }\n\n  private _translationRuleTable: Map<number /** production id */, TranslationRule> = new Map();\n\n  constructor() {\n    this.newScope();\n  }\n\n  reset() {\n    this.semanticStack.length = 0;\n    this._shaderData = new ShaderData();\n    this.symbolTable.clear();\n    this.newScope();\n    // #if _VERBOSE\n    this.errors.length = 0;\n    // #endif\n  }\n\n  newScope() {\n    const scope = new SymbolTable();\n    this.symbolTable.newScope(scope);\n  }\n\n  dropScope() {\n    return this.symbolTable.dropScope();\n  }\n\n  addTranslationRule(pid: number, rule: TranslationRule) {\n    this._translationRuleTable.set(pid, rule);\n  }\n\n  getTranslationRule(pid: number) {\n    return this._translationRuleTable.get(pid);\n  }\n\n  error(loc: ShaderRange, ...param: any[]) {\n    // #if _VERBOSE\n    const err = new GSError(GSErrorName.CompilationError, param.join(\"\"), loc, ShaderLab._processingPassText);\n    this.errors.push(err);\n    return err;\n    // #else\n    throw new Error(param.join(\"\"));\n    // #endif\n  }\n}\n","import { TokenType } from \"../common\";\n\nexport type Terminal = TokenType;\n\nexport enum ENonTerminal {\n  START = 2000,\n  // galacean\n  gs_shader_program,\n\n  // glsl\n  global_declaration,\n  variable_declaration,\n  array_specifier_list,\n  array_specifier,\n  ext_builtin_type_specifier_nonarray,\n  precision_specifier,\n  variable_identifier,\n  variable_identifier_node,\n  primary_expression,\n  postfix_expression,\n  integer_expression,\n  function_call,\n  function_call_generic,\n  function_call_header_no_parameters,\n  function_call_header_with_parameters,\n  function_call_parameter_list,\n  function_call_header,\n  function_identifier,\n  constructor_identifier,\n  unary_expression,\n  unary_operator,\n  multiplicative_expression,\n  additive_expression,\n  shift_expression,\n  relational_expression,\n  equality_expression,\n  and_expression,\n  inclusive_or_expression,\n  exclusive_or_expression,\n  logical_and_expression,\n  logical_xor_expression,\n  logical_or_expression,\n  conditional_expression,\n  assignment_expression,\n  assignment_operator,\n  expression,\n  integer_constant_expression,\n  integer_constant_expression_operator,\n  declaration,\n  function_prototype,\n  function_declarator,\n  function_header_with_parameters,\n  function_header,\n  function_parameter_list,\n  parameter_declarator,\n  parameter_declaration,\n  parameter_qualifier,\n  parameter_type_specifier,\n  init_declarator_list,\n  single_declaration,\n  fully_specified_type,\n  type_qualifier,\n  single_type_qualifier,\n  storage_qualifier,\n  precision_qualifier,\n  interpolation_qualifier,\n  invariant_qualifier,\n  type_specifier,\n  type_specifier_nonarray,\n  type_specifier_no_prec,\n  basic_type,\n  struct_specifier,\n  struct_declaration_list,\n  struct_declaration,\n  struct_declarator_list,\n  struct_declarator,\n  identifier_list,\n  decl_identifier,\n  initializer,\n  initializer_list,\n  declaration_statement,\n  simple_statement,\n  compound_statement_no_scope,\n  statement_with_scope,\n  compound_statement,\n  statement,\n  statement_list,\n  iteration_statement_no_new_scope,\n  expression_statement,\n  selection_statement,\n  selection_rest_statement,\n  condition,\n  conditionopt,\n  iteration_statement,\n  for_init_statement,\n  for_rest_statement,\n  jump_statement,\n  external_declaration,\n  function_definition,\n  field_selection,\n  bool_constant,\n  function_identifier_node,\n  typename_identifier_node,\n  scope_brace,\n  scope_end_brace,\n\n  _ignore\n}\n\nexport type GrammarSymbol = Terminal | ENonTerminal;\n\nexport type Derivation = GrammarSymbol[];\n","import { ENonTerminal, GrammarSymbol } from \"../parser/GrammarSymbol\";\n\nexport default class Production {\n  private static _id = 0;\n  static pool: Map<number, Production> = new Map();\n\n  readonly goal: ENonTerminal;\n  readonly derivation: GrammarSymbol[];\n  readonly id: number;\n\n  constructor(goal: ENonTerminal, derivation: GrammarSymbol[]) {\n    this.goal = goal;\n    this.derivation = derivation;\n    this.id = Production._id++;\n    Production.pool.set(this.id, this);\n  }\n}\n","import { ETokenType } from \"../common\";\nimport { ENonTerminal, GrammarSymbol } from \"./GrammarSymbol\";\nimport Production from \"../lalr/Production\";\n\nexport class Grammar {\n  readonly productions: Production[];\n\n  readonly startSymbol: ENonTerminal;\n\n  static create(start: ENonTerminal, productions: GrammarSymbol[][]) {\n    const _ps = productions.map((gsl) => {\n      return new Production(<ENonTerminal>gsl[0], gsl.slice(1));\n    });\n    return new Grammar(start, _ps);\n  }\n\n  constructor(start: ENonTerminal, productions: Production[]) {\n    this.startSymbol = start;\n    productions.unshift(new Production(ENonTerminal.START, [start]));\n    this.productions = productions;\n  }\n\n  getProductionList(nonTerminal: ENonTerminal) {\n    return this.productions.filter((item) => item.goal === nonTerminal);\n  }\n\n  isNullableNT(NT: ENonTerminal) {\n    return this.productions.find((item) => item.goal === NT && item.derivation[0] === ETokenType.EPSILON);\n  }\n\n  getProductionByID(pid: number) {\n    return Production.pool.get(pid);\n  }\n}\n","export enum EShaderStage {\n  VERTEX,\n  FRAGMENT,\n  ALL\n}\n","import { EKeyword, GalaceanDataType, TypeAny } from \"../../common\";\nimport { EShaderStage } from \"../../common/Enums\";\n\nexport enum EGenType {\n  GenType = 200,\n  GenIntType,\n  GenUintType,\n  GenBoolType,\n  Mat,\n  BoolVec,\n  IntVec,\n  UintVec,\n  Vec,\n  GVec4,\n  GSampler2D,\n  GSampler3D,\n  GSamplerCube,\n  GSampler2DArray\n}\n\nexport type NonGenericGalaceanType = Exclude<GalaceanDataType, string>;\ntype BuiltinType = NonGenericGalaceanType | EGenType;\n\nfunction isGenericType(t: BuiltinType) {\n  return t >= EGenType.GenType && t <= EGenType.GSampler2DArray;\n}\n\nconst BuiltinFunctionTable: Map<string, BuiltinFunction[]> = new Map();\n\nexport class BuiltinFunction {\n  private _returnType: BuiltinType;\n  ident: string;\n  readonly args: BuiltinType[];\n  readonly scope: EShaderStage;\n\n  private constructor(ident: string, returnType: BuiltinType, scope: EShaderStage, ...args: BuiltinType[]) {\n    this.ident = ident;\n    this._returnType = returnType;\n    this.args = args;\n    this.scope = scope;\n  }\n\n  static getReturnType(fn: BuiltinFunction, genType?: NonGenericGalaceanType) {\n    if (!isGenericType(fn._returnType)) return fn._returnType as NonGenericGalaceanType;\n    return genType;\n  }\n\n  static _create(ident: string, returnType: BuiltinType, ...args: BuiltinType[]) {\n    const fn = new BuiltinFunction(ident, returnType, EShaderStage.ALL, ...args);\n    const list = BuiltinFunctionTable.get(ident) ?? [];\n    list.push(fn);\n    BuiltinFunctionTable.set(ident, list);\n  }\n\n  static _createWithScop(ident: string, returnType: BuiltinType, scope: EShaderStage, ...args: BuiltinType[]) {\n    const fn = new BuiltinFunction(ident, returnType, scope, ...args);\n    const list = BuiltinFunctionTable.get(ident) ?? [];\n    list.push(fn);\n    BuiltinFunctionTable.set(ident, list);\n  }\n\n  static getFn(\n    ident: string,\n    ...args: BuiltinType[]\n  ): { fun: BuiltinFunction; genType: Exclude<GalaceanDataType, string> } | undefined {\n    const list = BuiltinFunctionTable.get(ident);\n    let realType = TypeAny;\n    if (list?.length) {\n      const fun = list.find((item) => {\n        if (item.args.length !== args.length) return false;\n        let genType = 0;\n        for (let i = 0; i < args.length; i++) {\n          if (args[i] === TypeAny) continue;\n          realType = args[i];\n          if (isGenericType(item.args[i])) {\n            if (genType === 0) {\n              genType = args[i];\n              continue;\n            } else {\n              realType = genType;\n            }\n          }\n          if (args[i] === TypeAny) continue;\n          if (args[i] !== realType) return false;\n        }\n        return true;\n      });\n      if (fun) return { fun, genType: realType };\n    }\n  }\n}\n\nBuiltinFunction._create(\"radians\", EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"degrees\", EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"sin\", EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"cos\", EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"tan\", EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"asin\", EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"acos\", EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"atan\", EGenType.GenType, EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"atan\", EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"sinh\", EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"cosh\", EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"tanh\", EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"asinh\", EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"acosh\", EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"atanh\", EGenType.GenType, EGenType.GenType);\n\nBuiltinFunction._create(\"pow\", EGenType.GenType, EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"exp\", EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"log\", EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"exp2\", EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"log2\", EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"sqrt\", EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"inversesqrt\", EGenType.GenType, EGenType.GenType);\n\nBuiltinFunction._create(\"abs\", EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"abs\", EGenType.GenIntType, EGenType.GenIntType);\nBuiltinFunction._create(\"sign\", EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"sign\", EGenType.GenIntType, EGenType.GenIntType);\nBuiltinFunction._create(\"floor\", EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"trunc\", EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"round\", EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"roundEven\", EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"ceil\", EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"fract\", EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"mod\", EGenType.GenType, EGenType.GenType, EKeyword.FLOAT);\nBuiltinFunction._create(\"mod\", EGenType.GenType, EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"min\", EGenType.GenType, EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"min\", EGenType.GenType, EGenType.GenType, EKeyword.FLOAT);\nBuiltinFunction._create(\"min\", EGenType.GenIntType, EGenType.GenIntType, EGenType.GenIntType);\nBuiltinFunction._create(\"min\", EGenType.GenIntType, EGenType.GenIntType, EKeyword.INT);\nBuiltinFunction._create(\"min\", EGenType.GenUintType, EGenType.GenUintType, EGenType.GenUintType);\nBuiltinFunction._create(\"min\", EGenType.GenUintType, EGenType.GenUintType, EKeyword.UINT);\nBuiltinFunction._create(\"max\", EGenType.GenType, EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"max\", EGenType.GenType, EGenType.GenType, EKeyword.FLOAT);\nBuiltinFunction._create(\"max\", EGenType.GenIntType, EGenType.GenIntType, EGenType.GenIntType);\nBuiltinFunction._create(\"max\", EGenType.GenIntType, EGenType.GenIntType, EKeyword.INT);\nBuiltinFunction._create(\"clamp\", EGenType.GenType, EGenType.GenType, EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"clamp\", EGenType.GenType, EGenType.GenType, EKeyword.FLOAT, EKeyword.FLOAT);\nBuiltinFunction._create(\"clamp\", EGenType.GenIntType, EGenType.GenIntType, EGenType.GenIntType, EGenType.GenIntType);\nBuiltinFunction._create(\"clamp\", EGenType.GenIntType, EGenType.GenIntType, EKeyword.INT, EKeyword.INT);\nBuiltinFunction._create(\n  \"clamp\",\n  EGenType.GenUintType,\n  EGenType.GenUintType,\n  EGenType.GenUintType,\n  EGenType.GenUintType\n);\nBuiltinFunction._create(\"clamp\", EGenType.GenUintType, EGenType.GenUintType, EKeyword.UINT, EKeyword.UINT);\nBuiltinFunction._create(\"mix\", EGenType.GenType, EGenType.GenType, EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"mix\", EGenType.GenType, EGenType.GenType, EGenType.GenType, EKeyword.FLOAT);\nBuiltinFunction._create(\"mix\", EGenType.GenType, EGenType.GenType, EGenType.GenType, EGenType.GenBoolType);\nBuiltinFunction._create(\"step\", EGenType.GenType, EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"step\", EGenType.GenType, EKeyword.FLOAT, EGenType.GenType);\nBuiltinFunction._create(\"smoothstep\", EGenType.GenType, EGenType.GenType, EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"smoothstep\", EGenType.GenType, EKeyword.FLOAT, EKeyword.FLOAT, EGenType.GenType);\nBuiltinFunction._create(\"isnan\", EGenType.GenBoolType, EGenType.GenType);\nBuiltinFunction._create(\"isinf\", EGenType.GenBoolType, EGenType.GenType);\nBuiltinFunction._create(\"floatBitsToInt\", EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"floatBitsToUint\", EGenType.GenUintType, EGenType.GenType);\nBuiltinFunction._create(\"intBitsToFloat\", EGenType.GenType, EGenType.GenIntType);\nBuiltinFunction._create(\"uintBitsToFloat\", EGenType.GenType, EGenType.GenUintType);\n\nBuiltinFunction._create(\"packSnorm2x16\", EKeyword.UINT, EKeyword.VEC2);\nBuiltinFunction._create(\"unpackSnorm2x16\", EKeyword.VEC2, EKeyword.UINT);\nBuiltinFunction._create(\"packUnorm2x16\", EKeyword.UINT, EKeyword.VEC2);\nBuiltinFunction._create(\"unpackUnorm2x16\", EKeyword.VEC2, EKeyword.UINT);\nBuiltinFunction._create(\"packHalf2x16\", EKeyword.UINT, EKeyword.VEC2);\nBuiltinFunction._create(\"unpackHalf2x16\", EKeyword.VEC2, EKeyword.UINT);\n\nBuiltinFunction._create(\"length\", EKeyword.FLOAT, EGenType.GenType);\nBuiltinFunction._create(\"distance\", EKeyword.FLOAT, EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"dot\", EKeyword.FLOAT, EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"cross\", EKeyword.VEC3, EKeyword.VEC3, EKeyword.VEC3);\nBuiltinFunction._create(\"normalize\", EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"faceforward\", EGenType.GenType, EGenType.GenType, EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"reflect\", EGenType.GenType, EGenType.GenType, EGenType.GenType);\nBuiltinFunction._create(\"refract\", EGenType.GenType, EGenType.GenType, EGenType.GenType, EKeyword.FLOAT);\nBuiltinFunction._create(\"matrixCompMult\", EGenType.Mat, EGenType.Mat, EGenType.Mat);\nBuiltinFunction._create(\"outerProduct\", EKeyword.MAT2, EKeyword.VEC2, EKeyword.VEC2);\nBuiltinFunction._create(\"outerProduct\", EKeyword.MAT3, EKeyword.VEC3, EKeyword.VEC3);\nBuiltinFunction._create(\"outerProduct\", EKeyword.MAT4, EKeyword.VEC4, EKeyword.VEC4);\n\nBuiltinFunction._create(\"outerProduct\", EKeyword.MAT2X3, EKeyword.VEC3, EKeyword.VEC2);\nBuiltinFunction._create(\"outerProduct\", EKeyword.MAT3X2, EKeyword.VEC2, EKeyword.VEC3);\n\nBuiltinFunction._create(\"outerProduct\", EKeyword.MAT2X4, EKeyword.VEC4, EKeyword.VEC2);\nBuiltinFunction._create(\"outerProduct\", EKeyword.MAT4X2, EKeyword.VEC2, EKeyword.VEC4);\n\nBuiltinFunction._create(\"outerProduct\", EKeyword.MAT3X4, EKeyword.VEC4, EKeyword.VEC3);\nBuiltinFunction._create(\"outerProduct\", EKeyword.MAT4X3, EKeyword.VEC3, EKeyword.VEC4);\n\nBuiltinFunction._create(\"transpose\", EKeyword.MAT2, EKeyword.MAT2);\nBuiltinFunction._create(\"transpose\", EKeyword.MAT3, EKeyword.MAT3);\nBuiltinFunction._create(\"transpose\", EKeyword.MAT4, EKeyword.MAT4);\nBuiltinFunction._create(\"transpose\", EKeyword.MAT2X3, EKeyword.MAT3X2);\nBuiltinFunction._create(\"transpose\", EKeyword.MAT3X2, EKeyword.MAT2X3);\nBuiltinFunction._create(\"transpose\", EKeyword.MAT4X2, EKeyword.MAT2X4);\nBuiltinFunction._create(\"transpose\", EKeyword.MAT2X4, EKeyword.MAT4X2);\nBuiltinFunction._create(\"transpose\", EKeyword.MAT3X4, EKeyword.MAT4X3);\nBuiltinFunction._create(\"transpose\", EKeyword.MAT4X3, EKeyword.MAT3X4);\n\nBuiltinFunction._create(\"determinant\", EKeyword.FLOAT, EKeyword.MAT2);\nBuiltinFunction._create(\"determinant\", EKeyword.FLOAT, EKeyword.MAT3);\nBuiltinFunction._create(\"determinant\", EKeyword.FLOAT, EKeyword.MAT4);\n\nBuiltinFunction._create(\"inverse\", EKeyword.MAT2, EKeyword.MAT2);\nBuiltinFunction._create(\"inverse\", EKeyword.MAT3, EKeyword.MAT3);\nBuiltinFunction._create(\"inverse\", EKeyword.MAT4, EKeyword.MAT4);\n\nBuiltinFunction._create(\"lessThan\", EGenType.BoolVec, EGenType.Vec, EGenType.Vec);\nBuiltinFunction._create(\"lessThan\", EGenType.BoolVec, EGenType.IntVec, EGenType.IntVec);\nBuiltinFunction._create(\"lessThan\", EGenType.BoolVec, EGenType.UintVec, EGenType.UintVec);\n\nBuiltinFunction._create(\"lessThanEqual\", EGenType.BoolVec, EGenType.Vec, EGenType.Vec);\nBuiltinFunction._create(\"lessThanEqual\", EGenType.BoolVec, EGenType.IntVec, EGenType.IntVec);\nBuiltinFunction._create(\"lessThanEqual\", EGenType.BoolVec, EGenType.UintVec, EGenType.UintVec);\n\nBuiltinFunction._create(\"greaterThan\", EGenType.BoolVec, EGenType.Vec, EGenType.Vec);\nBuiltinFunction._create(\"greaterThan\", EGenType.BoolVec, EGenType.IntVec, EGenType.IntVec);\nBuiltinFunction._create(\"greaterThan\", EGenType.BoolVec, EGenType.UintVec, EGenType.UintVec);\n\nBuiltinFunction._create(\"greaterThanEqual\", EGenType.BoolVec, EGenType.Vec, EGenType.Vec);\nBuiltinFunction._create(\"greaterThanEqual\", EGenType.BoolVec, EGenType.IntVec, EGenType.IntVec);\nBuiltinFunction._create(\"greaterThanEqual\", EGenType.BoolVec, EGenType.UintVec, EGenType.UintVec);\n\nBuiltinFunction._create(\"equal\", EGenType.BoolVec, EGenType.Vec, EGenType.Vec);\nBuiltinFunction._create(\"equal\", EGenType.BoolVec, EGenType.IntVec, EGenType.IntVec);\nBuiltinFunction._create(\"equal\", EGenType.BoolVec, EGenType.UintVec, EGenType.UintVec);\nBuiltinFunction._create(\"equal\", EGenType.BoolVec, EGenType.BoolVec, EGenType.BoolVec);\n\nBuiltinFunction._create(\"notEqual\", EGenType.BoolVec, EGenType.Vec, EGenType.Vec);\nBuiltinFunction._create(\"notEqual\", EGenType.BoolVec, EGenType.IntVec, EGenType.IntVec);\nBuiltinFunction._create(\"notEqual\", EGenType.BoolVec, EGenType.UintVec, EGenType.UintVec);\nBuiltinFunction._create(\"notEqual\", EGenType.BoolVec, EGenType.BoolVec, EGenType.BoolVec);\n\nBuiltinFunction._create(\"any\", EKeyword.BOOL, EGenType.BoolVec);\nBuiltinFunction._create(\"all\", EKeyword.BOOL, EGenType.BoolVec);\nBuiltinFunction._create(\"not\", EGenType.BoolVec, EGenType.BoolVec);\n\nBuiltinFunction._create(\"textureSize\", EKeyword.IVEC2, EGenType.GSampler2D, EKeyword.INT);\nBuiltinFunction._create(\"textureSize\", EKeyword.IVEC3, EGenType.GSampler3D, EKeyword.INT);\nBuiltinFunction._create(\"textureSize\", EKeyword.IVEC2, EGenType.GSamplerCube, EKeyword.INT);\n\nBuiltinFunction._create(\"textureSize\", EKeyword.IVEC2, EKeyword.SAMPLER2D_SHADOW, EKeyword.INT);\nBuiltinFunction._create(\"textureSize\", EKeyword.IVEC2, EKeyword.SAMPLER_CUBE_SHADOW, EKeyword.INT);\n\nBuiltinFunction._create(\"textureSize\", EKeyword.IVEC3, EGenType.GSampler2DArray, EKeyword.INT);\nBuiltinFunction._create(\"textureSize\", EKeyword.IVEC3, EKeyword.SAMPLER2D_ARRAY_SHADOW, EKeyword.INT);\n\nBuiltinFunction._create(\"texture2D\", EKeyword.SAMPLER2D, EKeyword.VEC2);\nBuiltinFunction._create(\"texture2D\", EKeyword.SAMPLER2D, EKeyword.VEC2, EKeyword.FLOAT);\n\nBuiltinFunction._create(\"texture\", EGenType.GVec4, EGenType.GSampler2D, EKeyword.VEC2, EKeyword.FLOAT);\nBuiltinFunction._create(\"texture\", EGenType.GVec4, EGenType.GSampler2D, EKeyword.VEC2);\nBuiltinFunction._create(\"texture\", EGenType.GVec4, EGenType.GSampler3D, EKeyword.VEC3, EKeyword.FLOAT);\nBuiltinFunction._create(\"texture\", EGenType.GVec4, EGenType.GSampler3D, EKeyword.VEC3);\n\nBuiltinFunction._create(\"texture\", EGenType.GVec4, EGenType.GSamplerCube, EKeyword.VEC3, EKeyword.FLOAT);\nBuiltinFunction._create(\"texture\", EGenType.GVec4, EGenType.GSamplerCube, EKeyword.VEC3);\n\nBuiltinFunction._create(\"texture\", EKeyword.FLOAT, EKeyword.SAMPLER2D_SHADOW, EKeyword.VEC3, EKeyword.FLOAT);\nBuiltinFunction._create(\"texture\", EKeyword.FLOAT, EKeyword.SAMPLER2D_SHADOW, EKeyword.VEC3);\n\nBuiltinFunction._create(\"texture\", EKeyword.FLOAT, EKeyword.SAMPLER_CUBE_SHADOW, EKeyword.VEC4, EKeyword.FLOAT);\nBuiltinFunction._create(\"texture\", EKeyword.FLOAT, EKeyword.SAMPLER_CUBE_SHADOW, EKeyword.VEC4);\n\nBuiltinFunction._create(\"texture\", EGenType.GVec4, EKeyword.SAMPLER2D_ARRAY, EKeyword.VEC3, EKeyword.FLOAT);\nBuiltinFunction._create(\"texture\", EGenType.GVec4, EKeyword.SAMPLER2D_ARRAY, EKeyword.VEC3);\n\nBuiltinFunction._create(\"texture\", EKeyword.FLOAT, EKeyword.SAMPLER2D_ARRAY_SHADOW, EKeyword.VEC4);\n\nBuiltinFunction._create(\"textureProj\", EGenType.GVec4, EGenType.GSampler2D, EKeyword.VEC3, EKeyword.FLOAT);\nBuiltinFunction._create(\"textureProj\", EGenType.GVec4, EGenType.GSampler2D, EKeyword.VEC3);\nBuiltinFunction._create(\"textureProj\", EGenType.GVec4, EGenType.GSampler2D, EKeyword.VEC4, EKeyword.FLOAT);\nBuiltinFunction._create(\"textureProj\", EGenType.GVec4, EGenType.GSampler2D, EKeyword.VEC4);\nBuiltinFunction._create(\"textureProj\", EGenType.GVec4, EGenType.GSampler3D, EKeyword.VEC4, EKeyword.FLOAT);\nBuiltinFunction._create(\"textureProj\", EGenType.GVec4, EGenType.GSampler3D, EKeyword.VEC4);\n\nBuiltinFunction._create(\"textureProj\", EKeyword.FLOAT, EKeyword.SAMPLER2D_SHADOW, EKeyword.VEC4, EKeyword.FLOAT);\nBuiltinFunction._create(\"textureProj\", EKeyword.FLOAT, EKeyword.SAMPLER2D_SHADOW, EKeyword.VEC4);\n\nBuiltinFunction._create(\"textureLod\", EGenType.GVec4, EGenType.GSampler2D, EKeyword.VEC2, EKeyword.FLOAT);\nBuiltinFunction._create(\"textureLod\", EGenType.GVec4, EGenType.GSampler3D, EKeyword.VEC3, EKeyword.FLOAT);\nBuiltinFunction._create(\"textureLod\", EGenType.GVec4, EGenType.GSamplerCube, EKeyword.VEC3, EKeyword.FLOAT);\nBuiltinFunction._create(\"textureLod\", EKeyword.FLOAT, EKeyword.SAMPLER2D_SHADOW, EKeyword.VEC3, EKeyword.FLOAT);\nBuiltinFunction._create(\"textureLod\", EGenType.GVec4, EGenType.GSampler2DArray, EKeyword.VEC3, EKeyword.FLOAT);\n\nBuiltinFunction._create(\"textureCube\", EKeyword.SAMPLER_CUBE, EKeyword.VEC3);\nBuiltinFunction._create(\"textureCube\", EKeyword.SAMPLER_CUBE, EKeyword.VEC3, EKeyword.FLOAT);\nBuiltinFunction._create(\"textureCubeLod\", EKeyword.SAMPLER_CUBE, EKeyword.VEC3, EKeyword.FLOAT);\n\nBuiltinFunction._create(\n  \"textureOffset\",\n  EGenType.GVec4,\n  EGenType.GSampler2D,\n  EKeyword.VEC2,\n  EKeyword.IVEC2,\n  EKeyword.FLOAT\n);\nBuiltinFunction._create(\"textureOffset\", EGenType.GVec4, EGenType.GSampler2D, EKeyword.VEC2, EKeyword.IVEC2);\n\nBuiltinFunction._create(\n  \"textureOffset\",\n  EGenType.GVec4,\n  EGenType.GSampler3D,\n  EKeyword.VEC3,\n  EKeyword.IVEC3,\n  EKeyword.FLOAT\n);\nBuiltinFunction._create(\"textureOffset\", EGenType.GVec4, EGenType.GSampler3D, EKeyword.VEC3, EKeyword.IVEC3);\n\nBuiltinFunction._create(\n  \"textureOffset\",\n  EKeyword.FLOAT,\n  EKeyword.SAMPLER2D_SHADOW,\n  EKeyword.VEC3,\n  EKeyword.IVEC2,\n  EKeyword.FLOAT\n);\nBuiltinFunction._create(\"textureOffset\", EKeyword.FLOAT, EKeyword.SAMPLER2D_SHADOW, EKeyword.VEC3, EKeyword.IVEC2);\nBuiltinFunction._create(\n  \"textureOffset\",\n  EGenType.GVec4,\n  EGenType.GSampler2DArray,\n  EKeyword.VEC3,\n  EKeyword.IVEC2,\n  EKeyword.FLOAT\n);\nBuiltinFunction._create(\"textureOffset\", EGenType.GVec4, EGenType.GSampler2DArray, EKeyword.VEC3, EKeyword.IVEC2);\n\nBuiltinFunction._create(\"texelFetch\", EGenType.GVec4, EGenType.GSampler2D, EKeyword.IVEC2, EKeyword.INT);\nBuiltinFunction._create(\"texelFetch\", EGenType.GVec4, EGenType.GSampler3D, EKeyword.IVEC3, EKeyword.INT);\nBuiltinFunction._create(\"texelFetch\", EGenType.GVec4, EGenType.GSampler2DArray, EKeyword.IVEC3, EKeyword.INT);\n\nBuiltinFunction._create(\n  \"texelFetchOffset\",\n  EGenType.GVec4,\n  EGenType.GSampler2D,\n  EKeyword.IVEC2,\n  EKeyword.INT,\n  EKeyword.IVEC2\n);\nBuiltinFunction._create(\n  \"texelFetchOffset\",\n  EGenType.GVec4,\n  EGenType.GSampler3D,\n  EKeyword.IVEC3,\n  EKeyword.INT,\n  EKeyword.IVEC3\n);\nBuiltinFunction._create(\n  \"texelFetchOffset\",\n  EGenType.GVec4,\n  EGenType.GSampler2DArray,\n  EKeyword.IVEC3,\n  EKeyword.INT,\n  EKeyword.IVEC2\n);\n\nBuiltinFunction._create(\n  \"textureProjOffset\",\n  EGenType.GVec4,\n  EGenType.GSampler2D,\n  EKeyword.VEC3,\n  EKeyword.IVEC2,\n  EKeyword.FLOAT\n);\nBuiltinFunction._create(\"textureProjOffset\", EGenType.GVec4, EGenType.GSampler2D, EKeyword.VEC3, EKeyword.IVEC2);\n\nBuiltinFunction._create(\n  \"textureProjOffset\",\n  EGenType.GVec4,\n  EGenType.GSampler2D,\n  EKeyword.VEC4,\n  EKeyword.IVEC2,\n  EKeyword.FLOAT\n);\nBuiltinFunction._create(\"textureProjOffset\", EGenType.GVec4, EGenType.GSampler2D, EKeyword.VEC4, EKeyword.IVEC2);\n\nBuiltinFunction._create(\n  \"textureProjOffset\",\n  EGenType.GVec4,\n  EGenType.GSampler3D,\n  EKeyword.VEC4,\n  EKeyword.IVEC3,\n  EKeyword.FLOAT\n);\nBuiltinFunction._create(\"textureProjOffset\", EGenType.GVec4, EGenType.GSampler3D, EKeyword.VEC4, EKeyword.IVEC3);\n\nBuiltinFunction._create(\n  \"textureProjOffset\",\n  EKeyword.FLOAT,\n  EKeyword.SAMPLER2D_SHADOW,\n  EKeyword.VEC4,\n  EKeyword.IVEC2,\n  EKeyword.FLOAT\n);\nBuiltinFunction._create(\"textureProjOffset\", EKeyword.FLOAT, EKeyword.SAMPLER2D_SHADOW, EKeyword.VEC4, EKeyword.IVEC2);\n\nBuiltinFunction._create(\n  \"textureLodOffset\",\n  EGenType.GVec4,\n  EGenType.GSampler2D,\n  EKeyword.VEC2,\n  EKeyword.FLOAT,\n  EKeyword.IVEC2\n);\nBuiltinFunction._create(\n  \"textureLodOffset\",\n  EGenType.GVec4,\n  EGenType.GSampler3D,\n  EKeyword.VEC3,\n  EKeyword.FLOAT,\n  EKeyword.IVEC3\n);\n\nBuiltinFunction._create(\n  \"textureLodOffset\",\n  EKeyword.FLOAT,\n  EKeyword.SAMPLER2D_SHADOW,\n  EKeyword.VEC3,\n  EKeyword.FLOAT,\n  EKeyword.IVEC2\n);\nBuiltinFunction._create(\n  \"textureLodOffset\",\n  EGenType.GVec4,\n  EGenType.GSampler2DArray,\n  EKeyword.VEC3,\n  EKeyword.FLOAT,\n  EKeyword.IVEC2\n);\n\nBuiltinFunction._create(\"textureProjLod\", EGenType.GVec4, EGenType.GSampler2D, EKeyword.VEC3, EKeyword.FLOAT);\nBuiltinFunction._create(\"textureProjLod\", EGenType.GVec4, EGenType.GSampler2D, EKeyword.VEC4, EKeyword.FLOAT);\nBuiltinFunction._create(\"textureProjLod\", EGenType.GVec4, EGenType.GSampler3D, EKeyword.VEC4, EKeyword.FLOAT);\nBuiltinFunction._create(\"textureProjLod\", EKeyword.FLOAT, EKeyword.SAMPLER2D_SHADOW, EKeyword.VEC4, EKeyword.FLOAT);\n\nBuiltinFunction._create(\n  \"textureProjLodOffset\",\n  EGenType.GVec4,\n  EGenType.GSampler2D,\n  EKeyword.VEC3,\n  EKeyword.FLOAT,\n  EKeyword.IVEC2\n);\nBuiltinFunction._create(\n  \"textureProjLodOffset\",\n  EGenType.GVec4,\n  EGenType.GSampler2D,\n  EKeyword.VEC4,\n  EKeyword.FLOAT,\n  EKeyword.IVEC2\n);\nBuiltinFunction._create(\n  \"textureProjLodOffset\",\n  EGenType.GVec4,\n  EGenType.GSampler3D,\n  EKeyword.VEC4,\n  EKeyword.FLOAT,\n  EKeyword.IVEC3\n);\nBuiltinFunction._create(\n  \"textureProjLodOffset\",\n  EKeyword.FLOAT,\n  EKeyword.SAMPLER2D_SHADOW,\n  EKeyword.VEC4,\n  EKeyword.FLOAT,\n  EKeyword.IVEC2\n);\n\nBuiltinFunction._create(\n  \"textureGrad\",\n  EGenType.GVec4,\n  EGenType.GSampler2D,\n  EKeyword.VEC2,\n  EKeyword.VEC2,\n  EKeyword.VEC2\n);\nBuiltinFunction._create(\n  \"textureGrad\",\n  EGenType.GVec4,\n  EGenType.GSampler3D,\n  EKeyword.VEC3,\n  EKeyword.VEC3,\n  EKeyword.VEC3\n);\nBuiltinFunction._create(\n  \"textureGrad\",\n  EGenType.GVec4,\n  EGenType.GSamplerCube,\n  EKeyword.VEC3,\n  EKeyword.VEC3,\n  EKeyword.VEC3\n);\n\nBuiltinFunction._create(\n  \"textureGrad\",\n  EKeyword.FLOAT,\n  EKeyword.SAMPLER2D_SHADOW,\n  EKeyword.VEC3,\n  EKeyword.VEC2,\n  EKeyword.VEC2\n);\nBuiltinFunction._create(\n  \"textureGrad\",\n  EKeyword.FLOAT,\n  EKeyword.SAMPLER_CUBE_SHADOW,\n  EKeyword.VEC4,\n  EKeyword.VEC3,\n  EKeyword.VEC3\n);\n\nBuiltinFunction._create(\n  \"textureGrad\",\n  EGenType.GVec4,\n  EGenType.GSampler2DArray,\n  EKeyword.VEC3,\n  EKeyword.VEC2,\n  EKeyword.VEC2\n);\nBuiltinFunction._create(\n  \"textureGrad\",\n  EKeyword.FLOAT,\n  EKeyword.SAMPLER2D_ARRAY_SHADOW,\n  EKeyword.VEC4,\n  EKeyword.VEC2,\n  EKeyword.VEC2\n);\n\nBuiltinFunction._create(\n  \"textureGradOffset\",\n  EGenType.GVec4,\n  EGenType.GSampler2D,\n  EKeyword.VEC2,\n  EKeyword.VEC2,\n  EKeyword.VEC2,\n  EKeyword.IVEC2\n);\nBuiltinFunction._create(\n  \"textureGradOffset\",\n  EGenType.GVec4,\n  EGenType.GSampler3D,\n  EKeyword.VEC3,\n  EKeyword.VEC3,\n  EKeyword.VEC3,\n  EKeyword.IVEC3\n);\nBuiltinFunction._create(\n  \"textureGradOffset\",\n  EKeyword.FLOAT,\n  EKeyword.SAMPLER2D_SHADOW,\n  EKeyword.VEC3,\n  EKeyword.VEC2,\n  EKeyword.VEC2,\n  EKeyword.IVEC2\n);\nBuiltinFunction._create(\n  \"textureGradOffset\",\n  EGenType.GVec4,\n  EGenType.GSampler2DArray,\n  EKeyword.VEC3,\n  EKeyword.VEC2,\n  EKeyword.VEC2,\n  EKeyword.IVEC2\n);\nBuiltinFunction._create(\n  \"textureGradOffset\",\n  EKeyword.FLOAT,\n  EKeyword.SAMPLER2D_ARRAY_SHADOW,\n  EKeyword.VEC3,\n  EKeyword.VEC2,\n  EKeyword.VEC2,\n  EKeyword.IVEC2\n);\n\nBuiltinFunction._create(\n  \"textureProjGrad\",\n  EGenType.GVec4,\n  EGenType.GSampler2D,\n  EKeyword.VEC3,\n  EKeyword.VEC2,\n  EKeyword.VEC2\n);\nBuiltinFunction._create(\n  \"textureProjGrad\",\n  EGenType.GVec4,\n  EGenType.GSampler2D,\n  EKeyword.VEC4,\n  EKeyword.VEC2,\n  EKeyword.VEC2\n);\nBuiltinFunction._create(\n  \"textureProjGrad\",\n  EGenType.GVec4,\n  EGenType.GSampler3D,\n  EKeyword.VEC4,\n  EKeyword.VEC3,\n  EKeyword.VEC3\n);\nBuiltinFunction._create(\n  \"textureProjGrad\",\n  EKeyword.FLOAT,\n  EKeyword.SAMPLER2D_SHADOW,\n  EKeyword.VEC4,\n  EKeyword.VEC2,\n  EKeyword.VEC2\n);\n\nBuiltinFunction._create(\n  \"textureProjGradOffset\",\n  EGenType.GVec4,\n  EGenType.GSampler2D,\n  EKeyword.VEC3,\n  EKeyword.VEC2,\n  EKeyword.VEC2,\n  EKeyword.IVEC2\n);\nBuiltinFunction._create(\n  \"textureProjGradOffset\",\n  EGenType.GVec4,\n  EGenType.GSampler2D,\n  EKeyword.VEC4,\n  EKeyword.VEC2,\n  EKeyword.VEC2,\n  EKeyword.IVEC2\n);\nBuiltinFunction._create(\n  \"textureProjGradOffset\",\n  EGenType.GVec4,\n  EGenType.GSampler3D,\n  EKeyword.VEC4,\n  EKeyword.VEC3,\n  EKeyword.VEC3,\n  EKeyword.IVEC3\n);\nBuiltinFunction._create(\n  \"textureProjGradOffset\",\n  EKeyword.FLOAT,\n  EKeyword.SAMPLER2D_SHADOW,\n  EKeyword.VEC4,\n  EKeyword.VEC2,\n  EKeyword.VEC2,\n  EKeyword.IVEC2\n);\nBuiltinFunction._createWithScop(\"dFdx\", EGenType.GenType, EShaderStage.FRAGMENT, EGenType.GenType);\nBuiltinFunction._createWithScop(\"dFdy\", EGenType.GenType, EShaderStage.FRAGMENT, EGenType.GenType);\nBuiltinFunction._createWithScop(\"fwidth\", EGenType.GenType, EShaderStage.FRAGMENT, EGenType.GenType);\n","import { EKeyword, GalaceanDataType } from \"../../common\";\nimport { EShaderStage } from \"../../common/Enums\";\n\nexport const BuiltinVariableTable: Map<string, BuiltinVariable> = new Map();\n\nexport class BuiltinVariable {\n  type: GalaceanDataType;\n  lexeme: string;\n  scope: EShaderStage;\n\n  private constructor(type: GalaceanDataType, lexeme: string, scope: EShaderStage) {\n    this.type = type;\n    this.lexeme = lexeme;\n    this.scope = scope;\n  }\n\n  static createVariable(lexeme: string, type: GalaceanDataType, scope = EShaderStage.ALL) {\n    const item = new BuiltinVariable(type, lexeme, scope);\n    BuiltinVariableTable.set(lexeme, item);\n  }\n\n  static getVar(ident: string) {\n    return BuiltinVariableTable.get(ident);\n  }\n}\n\nBuiltinVariable.createVariable(\"gl_VertexID\", EKeyword.INT, EShaderStage.VERTEX);\nBuiltinVariable.createVariable(\"gl_InstanceID\", EKeyword.INT, EShaderStage.VERTEX);\nBuiltinVariable.createVariable(\"gl_Position\", EKeyword.VEC4, EShaderStage.VERTEX);\nBuiltinVariable.createVariable(\"gl_PointSize\", EKeyword.FLOAT, EShaderStage.VERTEX);\n\nBuiltinVariable.createVariable(\"gl_FragCoord\", EKeyword.VEC4, EShaderStage.FRAGMENT);\nBuiltinVariable.createVariable(\"gl_FrontFacing\", EKeyword.BOOL, EShaderStage.FRAGMENT);\nBuiltinVariable.createVariable(\"gl_FragDepth\", EKeyword.FLOAT, EShaderStage.FRAGMENT);\nBuiltinVariable.createVariable(\"gl_PointCoord\", EKeyword.VEC2, EShaderStage.FRAGMENT);\nBuiltinVariable.createVariable(\"gl_FragColor\", EKeyword.VEC4, EShaderStage.FRAGMENT);\n\nBuiltinVariable.createVariable(\"gl_MaxVertexAttribs\", EKeyword.INT);\nBuiltinVariable.createVariable(\"gl_MaxVertexUniformVectors\", EKeyword.INT);\nBuiltinVariable.createVariable(\"gl_MaxVertexOutputVectors\", EKeyword.INT);\nBuiltinVariable.createVariable(\"gl_MaxFragmentInputVectors\", EKeyword.INT);\nBuiltinVariable.createVariable(\"gl_MaxVertexTextureImageUnits\", EKeyword.INT);\nBuiltinVariable.createVariable(\"gl_MaxCombinedTextureImageUnits\", EKeyword.INT);\nBuiltinVariable.createVariable(\"gl_MaxTextureImageUnits\", EKeyword.INT);\nBuiltinVariable.createVariable(\"gl_MaxFragmentUniformVectors\", EKeyword.INT);\nBuiltinVariable.createVariable(\"gl_MaxDrawBuffers\", EKeyword.INT);\nBuiltinVariable.createVariable(\"gl_MinProgramTexelOffset\", EKeyword.INT);\nBuiltinVariable.createVariable(\"gl_MaxProgramTexelOffset\", EKeyword.INT);\n","import { ETokenType } from \"../common\";\nimport { ENonTerminal, Terminal } from \"../parser/GrammarSymbol\";\nimport Production from \"./Production\";\nimport GrammarUtils from \"./Utils\";\n\nexport default class StateItem {\n  static _id = 0;\n\n  readonly production: Production;\n  readonly position: number;\n  readonly lookaheadSet: Set<Terminal>;\n  readonly id: number;\n\n  _needReInfer = true;\n  get needReInfer() {\n    return this._needReInfer;\n  }\n  set needReInfer(v: boolean) {\n    this._needReInfer = v;\n  }\n\n  get curSymbol() {\n    return this.production.derivation[this.position];\n  }\n  get nextSymbol() {\n    return this.production.derivation[this.position + 1];\n  }\n\n  constructor(production: Production, position: number, lookahead: Iterable<Terminal>) {\n    this.production = production;\n    this.position = position;\n    this.lookaheadSet = new Set();\n    for (const la of lookahead) {\n      this.lookaheadSet.add(la);\n    }\n    this.id = StateItem._id++;\n  }\n\n  addLookahead(ts: Iterable<Terminal>) {\n    for (const t of ts) {\n      if (this.lookaheadSet.has(t)) continue;\n      this.lookaheadSet.add(t);\n      this.needReInfer = true;\n    }\n  }\n\n  symbolByOffset(offset: number) {\n    return this.production.derivation[this.position + offset];\n  }\n\n  canReduce() {\n    if (this.position > this.production.derivation.length - 1) return true;\n    else {\n      for (let i = this.position; i < this.production.derivation.length; i++) {\n        if (this.production.derivation[i] !== ETokenType.EPSILON) return false;\n      }\n      return true;\n    }\n  }\n\n  advance() {\n    // #if _VERBOSE\n    if (this.canReduce()) throw `Error: advance reduce-able parsing state item`;\n    // #endif\n    return new StateItem(this.production, this.position + 1, this.lookaheadSet);\n  }\n\n  // #if _VERBOSE\n  toString() {\n    const coreItem = this.production.derivation.map((item) => GrammarUtils.toString(item));\n    coreItem[this.position] = \".\" + (coreItem[this.position] ?? \"\");\n\n    return `${ENonTerminal[this.production.goal]} :=> ${coreItem.join(\"|\")} ;${Array.from(this.lookaheadSet)\n      .map((item) => GrammarUtils.toString(item))\n      .join(\"/\")}`;\n  }\n  // #endif\n}\n","import { Terminal } from \"../parser/GrammarSymbol\";\nimport Production from \"./Production\";\nimport StateItem from \"./StateItem\";\n\nexport default class State {\n  static closureMap: Map<string /** state mapKey */, State> = new Map();\n  static pool: Map<number, State> = new Map();\n  static _id = 0;\n\n  readonly id: number;\n  readonly cores: Set<StateItem>;\n  private _items: Set<StateItem>;\n  get items() {\n    return this._items;\n  }\n\n  closured = false;\n  get needReInfer() {\n    for (const core of this.cores) {\n      if (core.needReInfer) return true;\n    }\n    return false;\n  }\n\n  private _stateItemPool: Map<string /** Map ID */, StateItem> = new Map();\n\n  static create(cores: StateItem[]) {\n    const cacheKey = this.getMapKey(cores);\n    const state = this.closureMap.get(cacheKey);\n    if (state) {\n      for (const core of cores) {\n        // merge lookahead\n        state.createStateItem(core.production, core.position, core.lookaheadSet);\n      }\n      return state;\n    }\n\n    const newState = new State(cores);\n    this.closureMap.set(cacheKey, newState);\n    return newState;\n  }\n\n  // TODO: any optimization?\n  static getMapKey(cores: StateItem[]) {\n    return cores.map((item) => `${item.production.id},${item.position}`).join(\";\");\n  }\n\n  private constructor(cores: Iterable<StateItem>) {\n    this.id = State._id++;\n    this._items = new Set([...cores]);\n    this.cores = new Set([...cores]);\n    for (const it of cores) {\n      const itemMapKey = this.getStateItemMapKey(it.production, it.position);\n      this._stateItemPool.set(itemMapKey, it);\n    }\n    State.pool.set(this.id, this);\n  }\n\n  // TODO: any optimization?\n  getStateItemMapKey(production: Production, position: number) {\n    return `${production.id},${position}`;\n  }\n\n  createStateItem(production: Production, position: number, lookaheadSet: Iterable<Terminal> = new Set()) {\n    const mapId = this.getStateItemMapKey(production, position);\n    const item = this._stateItemPool.get(mapId);\n    if (item) {\n      for (const la of lookaheadSet) {\n        if (item.lookaheadSet.has(la)) continue;\n        item.lookaheadSet.add(la);\n        item.needReInfer = true;\n      }\n      return item;\n    }\n    const newItem = new StateItem(production, position, lookaheadSet);\n    this._stateItemPool.set(mapId, newItem);\n    return newItem;\n  }\n}\n","import { ENonTerminal, GrammarSymbol } from \"./parser/GrammarSymbol\";\nimport { BaseToken as Token } from \"./common/BaseToken\";\nimport { EKeyword, ETokenType, GalaceanDataType } from \"./common\";\nimport { TreeNode } from \"./parser/AST\";\n// #if _VERBOSE\nimport State from \"./lalr/State\";\n// #endif\n\nexport class ParserUtils {\n  static unwrapNodeByType<T = TreeNode>(node: TreeNode, type: ENonTerminal): T | undefined {\n    const child = node.children[0];\n    if (child instanceof Token) return;\n    if (child.nt === type) return child as T;\n    return ParserUtils.unwrapNodeByType(child, type);\n  }\n\n  // #if _VERBOSE\n  /**\n   * Check if type `tb` is compatible with type `ta`.\n   */\n  static typeCompatible(ta: GalaceanDataType, tb: GalaceanDataType | undefined) {\n    if (tb == undefined) return true;\n    if (ta === EKeyword.INT) {\n      return ta === tb || tb === EKeyword.UINT;\n    }\n    return ta === tb;\n  }\n\n  static toString(sm: GrammarSymbol) {\n    if (this.isTerminal(sm)) {\n      return ETokenType[sm] ?? EKeyword[sm];\n    }\n    return ENonTerminal[sm];\n  }\n  // #endif\n\n  static isTerminal(sm: GrammarSymbol) {\n    return sm < ENonTerminal.START;\n  }\n\n  /**\n   * @internal\n   */\n  // #if _VERBOSE\n  static printStatePool(logPath: string) {\n    let output = \"\";\n\n    console.log(\"========== Parser Pool ==========\");\n\n    let count = 0;\n    for (const state of State.pool.values()) {\n      count++;\n      let tmp = \"\";\n      tmp += `${state.id}: \\n`.padEnd(4);\n      for (const psItem of state.items) {\n        tmp += \"     \" + psItem.toString() + \"\\n\";\n      }\n      output += tmp;\n    }\n\n    console.log(\"state count:\", count);\n    console.log(output);\n  }\n  // #endif\n}\n","import { ENonTerminal } from \"./GrammarSymbol\";\nimport { BaseToken } from \"../common/BaseToken\";\nimport { GalaceanDataType, ShaderRange } from \"../common\";\nimport { ASTNode, TreeNode } from \"./AST\";\n\nexport type TraceStackItem = ENonTerminal | BaseToken;\n\nexport class SymbolType {\n  type: GalaceanDataType;\n  arraySpecifier?: ASTNode.ArraySpecifier;\n  typeLexeme: string;\n\n  constructor(type: GalaceanDataType, typeLexeme: string, arraySpecifier?: ASTNode.ArraySpecifier) {\n    this.type = type;\n    this.arraySpecifier = arraySpecifier;\n    this.typeLexeme = typeLexeme;\n  }\n}\n\nexport class StructProp implements IParamInfo {\n  typeInfo: SymbolType;\n  ident: BaseToken;\n  astNode: ASTNode.StructDeclarator;\n\n  constructor(type: SymbolType, ident: BaseToken) {\n    this.typeInfo = type;\n    this.ident = ident;\n  }\n}\n\nexport type NodeChild = TreeNode | BaseToken;\n\nexport type IParamInfo = { ident: BaseToken; typeInfo: SymbolType; astNode: TreeNode };\n","// #if _VERBOSE\nimport { BuiltinFunction, BuiltinVariable, NonGenericGalaceanType } from \"./builtin\";\n// #endif\nimport { CodeGenVisitor } from \"../codeGen\";\nimport { ENonTerminal } from \"./GrammarSymbol\";\nimport { BaseToken as Token } from \"../common/BaseToken\";\nimport { EKeyword, ETokenType, TokenType, ShaderRange, GalaceanDataType, TypeAny } from \"../common\";\nimport SematicAnalyzer from \"./SemanticAnalyzer\";\nimport { ShaderData } from \"./ShaderInfo\";\nimport { ESymbolType, FnSymbol, StructSymbol, VarSymbol } from \"./symbolTable\";\nimport { ParserUtils } from \"../ParserUtils\";\nimport { IParamInfo, NodeChild, StructProp, SymbolType } from \"./types\";\nimport { ClearableObjectPool, IPoolElement } from \"@galacean/engine\";\nimport { ShaderLabUtils } from \"../ShaderLabUtils\";\n\nexport abstract class TreeNode implements IPoolElement {\n  /** The non-terminal in grammar. */\n  nt: ENonTerminal;\n  private _children: NodeChild[];\n  private _location: ShaderRange;\n\n  get children() {\n    return this._children;\n  }\n\n  get location() {\n    return this._location;\n  }\n\n  set(loc: ShaderRange, children: NodeChild[], nt: ENonTerminal) {\n    this.nt = nt;\n    this._location = loc;\n    this._children = children;\n  }\n\n  dispose(): void {}\n\n  // Visitor pattern interface for code generation\n  codeGen(visitor: CodeGenVisitor) {\n    return visitor.defaultCodeGen(this.children);\n  }\n\n  semanticAnalyze(sa: SematicAnalyzer) {}\n}\n\nexport namespace ASTNode {\n  export type ASTNodePool = ClearableObjectPool<\n    { set: (loc: ShaderRange, children: NodeChild[]) => void } & IPoolElement & TreeNode\n  >;\n\n  export function _unwrapToken(node: NodeChild) {\n    if (node instanceof Token) {\n      return node;\n    }\n    throw \"not token\";\n  }\n\n  export function get(pool: ASTNodePool, sa: SematicAnalyzer, loc: ShaderRange, children: NodeChild[]) {\n    const node = pool.get();\n    node.set(loc, children);\n    node.semanticAnalyze(sa);\n    sa.semanticStack.push(node);\n  }\n\n  export class TrivialNode extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(TrivialNode);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal._ignore);\n    }\n  }\n\n  export class ScopeBrace extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(ScopeBrace);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.scope_brace);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      sa.newScope();\n    }\n  }\n\n  export class ScopeEndBrace extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(ScopeEndBrace);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.scope_end_brace);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      sa.dropScope();\n    }\n  }\n\n  export class JumpStatement extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(JumpStatement);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.jump_statement);\n    }\n\n    // #if _VERBOSE\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (ASTNode._unwrapToken(this.children![0]).type === EKeyword.RETURN) {\n        // TODO: check the equality of function return type declared and this type.\n      }\n    }\n    // #endif\n\n    override codeGen(visitor: CodeGenVisitor): string {\n      return visitor.visitJumpStatement(this);\n    }\n  }\n\n  // #if _VERBOSE\n  export class ConditionOpt extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(ConditionOpt);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.conditionopt);\n    }\n  }\n\n  export class ForRestStatement extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(ForRestStatement);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.for_rest_statement);\n    }\n  }\n\n  export class Condition extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(Condition);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.condition);\n    }\n  }\n\n  export class ForInitStatement extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(ForInitStatement);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.for_init_statement);\n    }\n  }\n\n  export class IterationStatement extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(IterationStatement);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.iteration_statement);\n    }\n  }\n\n  export class SelectionStatement extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(SelectionStatement);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.selection_statement);\n    }\n  }\n\n  export class ExpressionStatement extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(ExpressionStatement);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.expression_statement);\n    }\n  }\n  // #endif\n\n  export abstract class ExpressionAstNode extends TreeNode {\n    protected _type?: GalaceanDataType;\n    set type(t: GalaceanDataType | undefined) {\n      this._type = t;\n    }\n    get type() {\n      return this._type ?? TypeAny;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[], nt: ENonTerminal) {\n      super.set(loc, children, nt);\n      this._type = undefined;\n    }\n  }\n\n  // #if _VERBOSE\n  export class InitializerList extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(InitializerList);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.initializer_list);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      const init = this.children[0] as Initializer | InitializerList;\n      this.type = init.type;\n    }\n  }\n\n  export class Initializer extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(Initializer);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.initializer);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        this.type = (<AssignmentExpression>this.children[0]).type;\n      } else {\n        this.type = (<InitializerList>this.children[1]).type;\n      }\n    }\n  }\n  // #endif\n\n  export class SingleDeclaration extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(SingleDeclaration);\n\n    typeSpecifier: TypeSpecifier;\n    arraySpecifier?: ArraySpecifier;\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.single_declaration);\n      this.typeSpecifier = undefined;\n      this.arraySpecifier = undefined;\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      const fullyType = this.children[0] as FullySpecifiedType;\n      const id = this.children[1] as Token;\n      this.typeSpecifier = fullyType.typeSpecifier;\n\n      let sm: VarSymbol;\n      if (this.children.length === 2 || this.children.length === 4) {\n        const symbolType = new SymbolType(fullyType.type, fullyType.typeSpecifier.lexeme);\n        const initializer = this.children[3] as Initializer;\n\n        sm = new VarSymbol(id.lexeme, symbolType, false, initializer);\n      } else {\n        const arraySpecifier = this.children[2] as ArraySpecifier;\n        this.arraySpecifier = arraySpecifier;\n        const symbolType = new SymbolType(fullyType.type, fullyType.typeSpecifier.lexeme, arraySpecifier);\n        const initializer = this.children[4] as Initializer;\n\n        sm = new VarSymbol(id.lexeme, symbolType, false, initializer);\n      }\n      sa.symbolTable.insert(sm);\n    }\n\n    override codeGen(visitor: CodeGenVisitor): string {\n      return visitor.visitSingleDeclaration(this);\n    }\n  }\n\n  export class FullySpecifiedType extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(FullySpecifiedType);\n\n    get qualifierList() {\n      if (this.children.length > 1) {\n        return (<TypeQualifier>this.children[0]).qualifierList;\n      }\n    }\n\n    get typeSpecifier() {\n      return (this.children.length === 1 ? this.children[0] : this.children[1]) as TypeSpecifier;\n    }\n\n    get type() {\n      return this.typeSpecifier.type;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.fully_specified_type);\n    }\n  }\n\n  export class TypeQualifier extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(TypeQualifier);\n\n    qualifierList: EKeyword[];\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.type_qualifier);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length > 1) {\n        this.qualifierList = [\n          ...(<TypeQualifier>this.children[0]).qualifierList,\n          (<SingleTypeQualifier>this.children[1]).qualifier\n        ];\n      } else {\n        this.qualifierList = [(<SingleTypeQualifier>this.children[0]).qualifier];\n      }\n    }\n  }\n\n  export class SingleTypeQualifier extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(SingleTypeQualifier);\n\n    qualifier: EKeyword;\n    lexeme: string;\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.single_type_qualifier);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      const child = this.children[0];\n      if (child instanceof Token) {\n        this.qualifier = child.type as EKeyword;\n        this.lexeme = child.lexeme;\n      } else {\n        this.qualifier = (<BasicTypeQualifier>child).qualifier;\n        this.lexeme = (<BasicTypeQualifier>child).lexeme;\n      }\n    }\n  }\n\n  abstract class BasicTypeQualifier extends TreeNode {\n    get qualifier(): EKeyword {\n      return (<Token>this.children[0]).type as EKeyword;\n    }\n    get lexeme(): string {\n      return (<Token>this.children[0]).lexeme;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[], nt: ENonTerminal) {\n      super.set(loc, children, nt);\n    }\n  }\n\n  // #if _VERBOSE\n  export class StorageQualifier extends BasicTypeQualifier {\n    static pool = ShaderLabUtils.createObjectPool(StorageQualifier);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.storage_qualifier);\n    }\n  }\n\n  export class PrecisionQualifier extends BasicTypeQualifier {\n    static pool = ShaderLabUtils.createObjectPool(PrecisionQualifier);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.precision_qualifier);\n    }\n  }\n\n  export class InterpolationQualifier extends BasicTypeQualifier {\n    static pool = ShaderLabUtils.createObjectPool(InterpolationQualifier);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.interpolation_qualifier);\n    }\n  }\n\n  export class InvariantQualifier extends BasicTypeQualifier {\n    static pool = ShaderLabUtils.createObjectPool(InvariantQualifier);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.invariant_qualifier);\n    }\n  }\n  // #endif\n\n  export class TypeSpecifier extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(TypeSpecifier);\n\n    get type(): GalaceanDataType {\n      return (this.children![0] as TypeSpecifierNonArray).type;\n    }\n    get lexeme(): string {\n      return (this.children![0] as TypeSpecifierNonArray).lexeme;\n    }\n    get arraySize(): number {\n      return (this.children?.[1] as ArraySpecifier)?.size;\n    }\n\n    get isCustom() {\n      return typeof this.type === \"string\";\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.type_specifier);\n    }\n  }\n\n  export class ArraySpecifier extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(ArraySpecifier);\n\n    get size(): number | undefined {\n      const integerConstantExpr = this.children[1] as IntegerConstantExpression;\n      return integerConstantExpr.value;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.array_specifier);\n    }\n  }\n\n  export class IntegerConstantExpressionOperator extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(IntegerConstantExpressionOperator);\n\n    compute: (a: number, b: number) => number;\n    get lexeme(): string {\n      return (this.children[0] as Token).lexeme;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.integer_constant_expression_operator);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      const operator = this.children[0] as Token;\n      switch (operator.type) {\n        case ETokenType.PLUS:\n          this.compute = (a, b) => a + b;\n          break;\n        case ETokenType.DASH:\n          this.compute = (a, b) => a - b;\n          break;\n        case ETokenType.STAR:\n          this.compute = (a, b) => a * b;\n          break;\n        case ETokenType.SLASH:\n          this.compute = (a, b) => a / b;\n          break;\n        case ETokenType.PERCENT:\n          this.compute = (a, b) => a % b;\n          break;\n        default:\n          sa.error(operator.location, `not implemented operator ${operator.lexeme}`);\n      }\n    }\n  }\n\n  export class IntegerConstantExpression extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(IntegerConstantExpression);\n\n    value?: number;\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.integer_constant_expression);\n      this.value = undefined;\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        const child = this.children[0];\n        if (child instanceof Token) {\n          this.value = Number(child.lexeme);\n        }\n        // #if _VERBOSE\n        else {\n          const id = child as VariableIdentifier;\n          if (!id.symbolInfo) {\n            sa.error(id.location, \"Undeclared symbol:\", id.lexeme);\n          }\n          if (!ParserUtils.typeCompatible(EKeyword.INT, id.typeInfo)) {\n            sa.error(id.location, \"Invalid integer.\");\n            return;\n          }\n        }\n        // #endif\n      }\n    }\n  }\n\n  export class TypeSpecifierNonArray extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(TypeSpecifierNonArray);\n\n    type: GalaceanDataType;\n    lexeme: string;\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.type_specifier_nonarray);\n      const tt = children[0];\n      if (tt instanceof Token) {\n        this.type = tt.lexeme;\n        this.lexeme = tt.lexeme;\n      } else {\n        this.type = (tt as ExtBuiltinTypeSpecifierNonArray).type as GalaceanDataType;\n        this.lexeme = (tt as ExtBuiltinTypeSpecifierNonArray).lexeme;\n      }\n    }\n  }\n\n  export class ExtBuiltinTypeSpecifierNonArray extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(ExtBuiltinTypeSpecifierNonArray);\n\n    type: TokenType;\n    lexeme: string;\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.ext_builtin_type_specifier_nonarray);\n      const token = this.children[0] as Token;\n      this.type = token.type;\n      this.lexeme = token.lexeme;\n    }\n  }\n\n  export class InitDeclaratorList extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(InitDeclaratorList);\n\n    get typeInfo(): SymbolType {\n      if (this.children.length === 1) {\n        const singleDecl = this.children[0] as SingleDeclaration;\n        return new SymbolType(\n          singleDecl.typeSpecifier.type,\n          singleDecl.typeSpecifier.lexeme,\n          singleDecl.arraySpecifier\n        );\n      }\n\n      const initDeclList = this.children[0] as InitDeclaratorList;\n      return initDeclList.typeInfo;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.init_declarator_list);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      let sm: VarSymbol;\n      if (this.children.length === 3 || this.children.length === 5) {\n        const id = this.children[2] as Token;\n        sm = new VarSymbol(id.lexeme, this.typeInfo, false, this);\n        sa.symbolTable.insert(sm);\n      } else if (this.children.length === 4 || this.children.length === 6) {\n        const typeInfo = this.typeInfo;\n        const arraySpecifier = this.children[3] as ArraySpecifier;\n        // #if _VERBOSE\n        if (typeInfo.arraySpecifier && arraySpecifier) {\n          sa.error(arraySpecifier.location, \"Array of array is not supported.\");\n        }\n        // #endif\n        typeInfo.arraySpecifier = arraySpecifier;\n        const id = this.children[2] as Token;\n        sm = new VarSymbol(id.lexeme, typeInfo, false, this);\n        sa.symbolTable.insert(sm);\n      }\n    }\n  }\n\n  export class IdentifierList extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(IdentifierList);\n\n    get idList(): Token[] {\n      if (this.children.length === 2) {\n        return [this.children[1] as Token];\n      }\n      return [...(<IdentifierList>this.children[0]).idList, this.children[2] as Token];\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.identifier_list);\n    }\n  }\n\n  export class Declaration extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(Declaration);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.declaration);\n    }\n\n    override codeGen(visitor: CodeGenVisitor): string {\n      return visitor.visitDeclaration(this);\n    }\n  }\n\n  export class FunctionProtoType extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(FunctionProtoType);\n\n    private get declarator() {\n      return this.children[0] as FunctionDeclarator;\n    }\n\n    get ident() {\n      return this.declarator.ident;\n    }\n\n    get returnType() {\n      return this.declarator.returnType;\n    }\n\n    get parameterList() {\n      return this.declarator.parameterInfoList;\n    }\n\n    get paramSig() {\n      return this.declarator.paramSig;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.function_prototype);\n    }\n\n    override codeGen(visitor: CodeGenVisitor): string {\n      return visitor.visitFunctionProtoType(this);\n    }\n  }\n\n  export class FunctionDeclarator extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(FunctionDeclarator);\n\n    private get header() {\n      return this.children[0] as FunctionHeader;\n    }\n\n    private get parameterList() {\n      return this.children[1] as FunctionParameterList | undefined;\n    }\n\n    get ident() {\n      return this.header.ident;\n    }\n\n    get returnType() {\n      return this.header.returnType;\n    }\n\n    get parameterInfoList() {\n      return this.parameterList?.parameterInfoList;\n    }\n\n    get paramSig() {\n      return this.parameterList?.paramSig;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.function_declarator);\n    }\n  }\n\n  export class FunctionHeader extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(FunctionHeader);\n\n    get ident() {\n      return this.children[1] as Token;\n    }\n    get returnType() {\n      return this.children[0] as FullySpecifiedType;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.function_header);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      sa.newScope();\n    }\n\n    override codeGen(visitor: CodeGenVisitor): string {\n      return visitor.visitFunctionHeader(this);\n    }\n  }\n\n  export class FunctionParameterList extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(FunctionParameterList);\n\n    get parameterInfoList(): IParamInfo[] {\n      if (this.children.length === 1) {\n        const decl = this.children[0] as ParameterDeclaration;\n        return [{ ident: decl.ident, typeInfo: decl.typeInfo, astNode: decl }];\n      }\n      const list = this.children[0] as FunctionParameterList;\n      const decl = this.children[2] as ParameterDeclaration;\n      return [...list.parameterInfoList, { ident: decl.ident, typeInfo: decl.typeInfo, astNode: decl }];\n    }\n\n    get paramSig(): GalaceanDataType[] {\n      if (this.children.length === 1) {\n        const decl = this.children[0] as ParameterDeclaration;\n        return [decl.typeInfo.type];\n      } else {\n        const list = this.children[0] as FunctionParameterList;\n        const decl = this.children[2] as ParameterDeclaration;\n        return list.paramSig.concat([decl.typeInfo.type]);\n      }\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.function_parameter_list);\n    }\n\n    override codeGen(visitor: CodeGenVisitor): string {\n      return visitor.visitFunctionParameterList(this);\n    }\n  }\n\n  export class ParameterDeclaration extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(ParameterDeclaration);\n\n    get typeQualifier() {\n      if (this.children.length === 2) return this.children[0] as TypeQualifier;\n    }\n\n    private get parameterDeclarator() {\n      if (this.children.length === 1) return this.children[0] as ParameterDeclarator;\n      return this.children[1] as ParameterDeclarator;\n    }\n\n    get typeInfo() {\n      return this.parameterDeclarator.typeInfo;\n    }\n\n    get ident() {\n      return this.parameterDeclarator.ident;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.parameter_declaration);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      let declarator: ParameterDeclarator;\n      if (this.children.length === 1) {\n        declarator = this.children[0] as ParameterDeclarator;\n      } else {\n        declarator = this.children[1] as ParameterDeclarator;\n      }\n      const varSymbol = new VarSymbol(declarator.ident.lexeme, declarator.typeInfo, false, this);\n      sa.symbolTable.insert(varSymbol);\n    }\n  }\n\n  export class ParameterDeclarator extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(ParameterDeclarator);\n\n    get ident() {\n      return this.children[1] as Token;\n    }\n\n    get typeInfo(): SymbolType {\n      const typeSpecifier = this.children[0] as TypeSpecifier;\n      const arraySpecifier = this.children[2] as ArraySpecifier;\n      return new SymbolType(typeSpecifier.type, typeSpecifier.lexeme, arraySpecifier);\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.parameter_declarator);\n    }\n  }\n\n  // #if _VERBOSE\n  export class SimpleStatement extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(SimpleStatement);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.simple_statement);\n    }\n  }\n\n  export class CompoundStatement extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(CompoundStatement);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.compound_statement);\n    }\n  }\n  // #endif\n\n  export class CompoundStatementNoScope extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(CompoundStatementNoScope);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.compound_statement_no_scope);\n    }\n  }\n\n  // #if _VERBOSE\n  export class Statement extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(Statement);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.statement);\n    }\n  }\n  // #endif\n\n  export class StatementList extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(StatementList);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.statement_list);\n    }\n\n    override codeGen(visitor: CodeGenVisitor): string {\n      return visitor.visitStatementList(this);\n    }\n  }\n\n  export class FunctionDefinition extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(FunctionDefinition);\n\n    get protoType() {\n      return this.children[0] as FunctionProtoType;\n    }\n\n    get statements() {\n      return this.children[1] as CompoundStatementNoScope;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.function_definition);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      sa.dropScope();\n      const sm = new FnSymbol(this.protoType.ident.lexeme, this);\n      sa.symbolTable.insert(sm);\n    }\n\n    override codeGen(visitor: CodeGenVisitor): string {\n      return visitor.visitFunctionDefinition(this);\n    }\n  }\n\n  export class FunctionCall extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(FunctionCall);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.function_call);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      this.type = (this.children[0] as FunctionCallGeneric).type;\n    }\n\n    override codeGen(visitor: CodeGenVisitor): string {\n      return visitor.visitFunctionCall(this);\n    }\n  }\n\n  export class FunctionCallGeneric extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(FunctionCallGeneric);\n\n    fnSymbol: FnSymbol | StructSymbol | undefined;\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.function_call_generic);\n      this.fnSymbol = undefined;\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      const functionIdentifier = this.children[0] as FunctionIdentifier;\n      if (functionIdentifier.isBuiltin) {\n        this.type = functionIdentifier.ident;\n      } else {\n        const fnIdent = <string>functionIdentifier.ident;\n\n        let paramSig: NonGenericGalaceanType[] | undefined;\n        if (this.children.length === 4) {\n          const paramList = this.children[2];\n          if (paramList instanceof FunctionCallParameterList) {\n            paramSig = paramList.paramSig as any;\n          }\n        }\n        // #if _VERBOSE\n        const builtinFn = BuiltinFunction.getFn(fnIdent, ...(paramSig ?? []));\n        if (builtinFn) {\n          this.type = BuiltinFunction.getReturnType(builtinFn.fun, builtinFn.genType);\n          return;\n        }\n        // #endif\n\n        const fnSymbol = sa.symbolTable.lookup({ ident: fnIdent, symbolType: ESymbolType.FN, signature: paramSig });\n        if (!fnSymbol) {\n          // #if _VERBOSE\n          sa.error(this.location, \"No overload function type found: \", functionIdentifier.ident);\n          // #endif\n          return;\n        }\n        this.type = fnSymbol?.dataType?.type;\n        this.fnSymbol = fnSymbol as FnSymbol;\n      }\n    }\n  }\n\n  export class FunctionCallParameterList extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(FunctionCallParameterList);\n\n    get paramSig(): GalaceanDataType[] | undefined {\n      if (this.children.length === 1) {\n        const expr = this.children[0] as AssignmentExpression;\n        if (expr.type == undefined) return [TypeAny];\n        return [expr.type];\n      } else {\n        const list = this.children[0] as FunctionCallParameterList;\n        const decl = this.children[2] as AssignmentExpression;\n        if (list.paramSig == undefined || decl.type == undefined) {\n          return [TypeAny];\n        } else {\n          return list.paramSig.concat([decl.type]);\n        }\n      }\n    }\n\n    get paramNodes(): AssignmentExpression[] {\n      if (this.children.length === 1) {\n        return [this.children[0] as AssignmentExpression];\n      } else {\n        const list = this.children[0] as FunctionCallParameterList;\n        const decl = this.children[2] as AssignmentExpression;\n\n        return list.paramNodes.concat([decl]);\n      }\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.function_call_parameter_list);\n    }\n  }\n\n  export class PrecisionSpecifier extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(PrecisionSpecifier);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.precision_specifier);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      sa.shaderData.globalPrecisions.push(this);\n    }\n  }\n\n  export class FunctionIdentifier extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(FunctionIdentifier);\n\n    get ident() {\n      const ty = this.children[0] as TypeSpecifier;\n      return ty.type;\n    }\n\n    get lexeme() {\n      const ty = this.children[0] as TypeSpecifier;\n      return ty.lexeme;\n    }\n\n    get isBuiltin() {\n      return typeof this.ident !== \"string\";\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.function_identifier);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {}\n\n    override codeGen(visitor: CodeGenVisitor): string {\n      return visitor.visitFunctionIdentifier(this);\n    }\n  }\n\n  export class AssignmentExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(AssignmentExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.assignment_expression);\n    }\n\n    // #if _VERBOSE\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        const expr = this.children[0] as ConditionalExpression;\n        this.type = expr.type ?? TypeAny;\n      } else {\n        const expr = this.children[2] as AssignmentExpression;\n        this.type = expr.type ?? TypeAny;\n      }\n    }\n    // #endif\n  }\n\n  // #if _VERBOSE\n  export class AssignmentOperator extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(AssignmentOperator);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.assignment_operator);\n    }\n  }\n  // #endif\n\n  export class Expression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(Expression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.expression);\n    }\n\n    // #if _VERBOSE\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        const expr = this.children[0] as AssignmentExpression;\n        this.type = expr.type;\n      } else {\n        const expr = this.children[2] as AssignmentExpression;\n        this.type = expr.type;\n      }\n    }\n    // #endif\n  }\n\n  export class PrimaryExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(PrimaryExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.primary_expression);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        const id = this.children[0];\n        if (id instanceof VariableIdentifier) {\n          this.type = id.typeInfo ?? TypeAny;\n        } else {\n          switch ((<Token>id).type) {\n            case ETokenType.INT_CONSTANT:\n              this._type = EKeyword.INT;\n              break;\n            case ETokenType.FLOAT_CONSTANT:\n              this.type = EKeyword.FLOAT;\n              break;\n            case EKeyword.TRUE:\n            case EKeyword.FALSE:\n              this.type = EKeyword.BOOL;\n              break;\n          }\n        }\n      } else {\n        const expression = this.children[1] as Expression;\n        this.type = expression.type;\n      }\n    }\n  }\n\n  export class PostfixExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(PostfixExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.postfix_expression);\n      if (this.children.length === 1) {\n        const child = this.children[0] as PrimaryExpression | FunctionCall;\n        this.type = child.type;\n      }\n    }\n\n    override codeGen(visitor: CodeGenVisitor): string {\n      return visitor.visitPostfixExpression(this);\n    }\n  }\n\n  // #if _VERBOSE\n  export class UnaryOperator extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(UnaryOperator);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.unary_operator);\n    }\n  }\n  // #endif\n\n  // #if _VERBOSE\n  export class UnaryExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(UnaryExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.unary_expression);\n      this.type = (this.children[0] as PostfixExpression).type;\n    }\n  }\n  // #endif\n\n  // #if _VERBOSE\n  export class MultiplicativeExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(MultiplicativeExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.multiplicative_expression);\n      if (this.children.length === 1) {\n        this.type = (this.children[0] as UnaryExpression).type;\n      } else {\n        const exp1 = this.children[0] as MultiplicativeExpression;\n        const exp2 = this.children[2] as UnaryExpression;\n        if (exp1.type === exp2.type) {\n          this.type = exp1.type;\n        }\n      }\n    }\n  }\n  // #endif\n\n  // #if _VERBOSE\n  export class AdditiveExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(AdditiveExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.additive_expression);\n      if (this.children.length === 1) {\n        this.type = (this.children[0] as MultiplicativeExpression).type;\n      } else {\n        const exp1 = this.children[0] as AdditiveExpression;\n        const exp2 = this.children[2] as MultiplicativeExpression;\n        if (exp1.type === exp2.type) {\n          this.type = exp1.type;\n        }\n      }\n    }\n  }\n  // #endif\n\n  // #if _VERBOSE\n  export class ShiftExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(ShiftExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.shift_expression);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      const expr = this.children[0] as ExpressionAstNode;\n      this.type = expr.type;\n    }\n  }\n  // #endif\n\n  // #if _VERBOSE\n  export class RelationalExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(RelationalExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.relational_expression);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        this.type = (<ShiftExpression>this.children[0]).type;\n      } else {\n        this.type = EKeyword.BOOL;\n      }\n    }\n  }\n  // #endif\n\n  // #if _VERBOSE\n  export class EqualityExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(EqualityExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.equality_expression);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        this.type = (<RelationalExpression>this.children[0]).type;\n      } else {\n        this.type = EKeyword.BOOL;\n      }\n    }\n  }\n  // #endif\n\n  // #if _VERBOSE\n  export class AndExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(AndExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.and_expression);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        this.type = (<AndExpression>this.children[0]).type;\n      } else {\n        this.type = EKeyword.UINT;\n      }\n    }\n  }\n  // #endif\n\n  // #if _VERBOSE\n  export class ExclusiveOrExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(ExclusiveOrExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.exclusive_or_expression);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        this.type = (<AndExpression>this.children[0]).type;\n      } else {\n        this.type = EKeyword.UINT;\n      }\n    }\n  }\n  // #endif\n\n  // #if _VERBOSE\n  export class InclusiveOrExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(InclusiveOrExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.inclusive_or_expression);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        this.type = (<ExclusiveOrExpression>this.children[0]).type;\n      } else {\n        this.type = EKeyword.UINT;\n      }\n    }\n  }\n  // #endif\n\n  // #if _VERBOSE\n  export class LogicalAndExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(LogicalAndExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.logical_and_expression);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        this.type = (<InclusiveOrExpression>this.children[0]).type;\n      } else {\n        this.type = EKeyword.BOOL;\n      }\n    }\n  }\n  // #endif\n\n  // #if _VERBOSE\n  export class LogicalXorExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(LogicalXorExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.logical_xor_expression);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        this.type = (<LogicalAndExpression>this.children[0]).type;\n      } else {\n        this.type = EKeyword.BOOL;\n      }\n    }\n  }\n  // #endif\n\n  // #if _VERBOSE\n  export class LogicalOrExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(LogicalOrExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.logical_or_expression);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        this.type = (<LogicalXorExpression>this.children[0]).type;\n      } else {\n        this.type = EKeyword.BOOL;\n      }\n    }\n  }\n  // #endif\n\n  // #if _VERBOSE\n  export class ConditionalExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(ConditionalExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.conditional_expression);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        this.type = (<LogicalOrExpression>this.children[0]).type;\n      }\n    }\n  }\n  // #endif\n\n  export class StructSpecifier extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(StructSpecifier);\n\n    ident?: Token;\n\n    get propList(): StructProp[] {\n      const declList = (this.children.length === 6 ? this.children[3] : this.children[2]) as StructDeclarationList;\n      return declList.propList;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.struct_specifier);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 6) {\n        this.ident = this.children[1] as Token;\n        sa.symbolTable.insert(new StructSymbol(this.ident.lexeme, this));\n      }\n    }\n  }\n\n  export class StructDeclarationList extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(StructDeclarationList);\n\n    get propList(): StructProp[] {\n      if (this.children.length === 1) {\n        return (<StructDeclaration>this.children[0]).propList;\n      }\n      const list = this.children[0] as StructDeclarationList;\n      const decl = this.children[1] as StructDeclaration;\n      return [list.propList, decl.propList].flat();\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.struct_declaration_list);\n    }\n  }\n\n  export class StructDeclaration extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(StructDeclaration);\n\n    get typeSpecifier() {\n      if (this.children.length === 3) {\n        return this.children[0] as TypeSpecifier;\n      }\n      return this.children[1] as TypeSpecifier;\n    }\n\n    get declaratorList() {\n      if (this.children.length === 3) {\n        return this.children[1] as StructDeclaratorList;\n      }\n      return this.children[2] as StructDeclaratorList;\n    }\n\n    get propList(): StructProp[] {\n      const ret: StructProp[] = [];\n      for (let i = 0; i < this.declaratorList.declaratorList.length; i++) {\n        const declarator = this.declaratorList.declaratorList[i];\n        const typeInfo = new SymbolType(this.typeSpecifier.type, this.typeSpecifier.lexeme, declarator.arraySpecifier);\n        const prop = new StructProp(typeInfo, declarator.ident);\n        ret.push(prop);\n      }\n      return ret;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.struct_declaration);\n    }\n  }\n\n  export class StructDeclaratorList extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(StructDeclaratorList);\n\n    get declaratorList(): StructDeclarator[] {\n      if (this.children.length === 1) {\n        return [this.children[0] as StructDeclarator];\n      } else {\n        const list = this.children[0] as StructDeclaratorList;\n        return [...list.declaratorList, <StructDeclarator>this.children[1]];\n      }\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.struct_declarator_list);\n    }\n  }\n\n  export class StructDeclarator extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(StructDeclarator);\n\n    get ident() {\n      return this.children[0] as Token;\n    }\n\n    get arraySpecifier(): ArraySpecifier | undefined {\n      return this.children[1] as ArraySpecifier;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.struct_declarator);\n    }\n  }\n\n  export class VariableDeclaration extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(VariableDeclaration);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.variable_declaration);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      const type = this.children[0] as FullySpecifiedType;\n      const ident = this.children[1] as Token;\n      let sm: VarSymbol;\n      sm = new VarSymbol(ident.lexeme, new SymbolType(type.type, type.typeSpecifier.lexeme), true, this);\n\n      sa.symbolTable.insert(sm);\n    }\n\n    override codeGen(visitor: CodeGenVisitor): string {\n      return visitor.visitGlobalVariableDeclaration(this);\n    }\n  }\n\n  export class VariableIdentifier extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(VariableIdentifier);\n\n    symbolInfo:\n      | VarSymbol\n      // #if _VERBOSE\n      | BuiltinVariable\n      // #endif\n      | null;\n\n    get lexeme(): string {\n      return (<Token>this.children[0]).lexeme;\n    }\n\n    get typeInfo(): GalaceanDataType {\n      if (this.symbolInfo instanceof VarSymbol) return this.symbolInfo.dataType.type;\n      return this.symbolInfo?.type;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.variable_identifier);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      const token = this.children[0] as Token;\n\n      // #if _VERBOSE\n      const builtinVar = BuiltinVariable.getVar(token.lexeme);\n      if (builtinVar) {\n        this.symbolInfo = builtinVar;\n        return;\n      }\n      // #endif\n\n      this.symbolInfo = sa.symbolTable.lookup({ ident: token.lexeme, symbolType: ESymbolType.VAR }) as VarSymbol;\n      // #if _VERBOSE\n      if (!this.symbolInfo) {\n        sa.error(this.location, \"undeclared identifier:\", token.lexeme);\n      }\n      // #endif\n    }\n\n    override codeGen(visitor: CodeGenVisitor): string {\n      return visitor.visitVariableIdentifier(this);\n    }\n  }\n\n  export class GLShaderProgram extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(GLShaderProgram);\n\n    shaderData: ShaderData;\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.gs_shader_program);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      this.shaderData = sa.shaderData;\n      this.shaderData.symbolTable = sa.symbolTable._scope;\n    }\n  }\n}\n","import { EKeyword, ETokenType, ShaderRange } from \"../common\";\nimport { ASTNode, TreeNode } from \"../parser/AST\";\nimport { TranslationRule } from \"../parser/SemanticAnalyzer\";\nimport { ENonTerminal, GrammarSymbol } from \"../parser/GrammarSymbol\";\nimport Production from \"./Production\";\nimport { ActionInfo, EAction } from \"./types\";\nimport { ShaderLab } from \"../ShaderLab\";\nimport { ClearableObjectPool, IPoolElement } from \"@galacean/engine\";\nimport { NodeChild } from \"../parser/types\";\n\nexport default class GrammarUtils {\n  static isTerminal(sm: GrammarSymbol) {\n    return sm < ENonTerminal.START;\n  }\n\n  static toString(sm: GrammarSymbol) {\n    if (this.isTerminal(sm)) {\n      return ETokenType[sm] ?? EKeyword[sm];\n    }\n    return ENonTerminal[sm];\n  }\n\n  static createProductionWithOptions(\n    goal: ENonTerminal,\n    options: GrammarSymbol[][],\n    /** the ast node */\n    astTypePool?: ClearableObjectPool<\n      { set: (loc: ShaderRange, children: NodeChild[]) => void } & IPoolElement & TreeNode\n    >\n  ) {\n    const ret: [GrammarSymbol[], TranslationRule | undefined][] = [];\n    for (const opt of options) {\n      ret.push([\n        [goal, ...opt],\n        function (sa, ...children) {\n          if (!children[0]) return;\n          const start = children[0].location.start;\n          const end = children[children.length - 1].location.end;\n          const location = ShaderLab.createRange(start, end);\n          ASTNode.get(astTypePool ?? ASTNode.TrivialNode.pool, sa, location, children);\n        }\n      ]);\n    }\n    return ret;\n  }\n\n  static createProductionOptions(common: GrammarSymbol[], position: number, opts: GrammarSymbol[][]) {\n    const ret: GrammarSymbol[][] = [];\n    for (const opt of opts) {\n      const list = common.slice(0, position);\n      list.push(...opt);\n      list.push(...common.slice(position));\n      ret.push(list);\n    }\n    return ret;\n  }\n\n  static addMapSetItem<K, T>(map: Map<K, Set<T>>, k: K, v: T) {\n    const set = map.get(k) ?? new Set();\n    set.add(v);\n    map.set(k, set);\n  }\n\n  static isSubSet<T>(sa: Set<T>, sb: Set<T>) {\n    for (const item of sa) {\n      if (!sb.has(item)) return false;\n    }\n    return true;\n  }\n\n  static isActionEqual(a: ActionInfo, b: ActionInfo) {\n    return a.action === b.action && a.target === b.target;\n  }\n\n  // #if _VERBOSE\n  static printAction(actionInfo: ActionInfo) {\n    return `<Action: ${EAction[actionInfo.action]} -> ${\n      actionInfo.action === EAction.Reduce ? Production.pool.get(actionInfo.target!) : `State ${actionInfo.target!}`\n    }>`;\n  }\n\n  static printProduction(production: Production) {\n    const deriv = production.derivation.map((gs) => GrammarUtils.toString(gs)).join(\"|\");\n    return `${ENonTerminal[production.goal]} :=> ${deriv}`;\n  }\n  // #endif\n}\n","// Context Free Grammar of Galacean ShaderLab\n\nimport { Grammar } from \"../parser/Grammar\";\nimport { ENonTerminal, GrammarSymbol } from \"../parser/GrammarSymbol\";\nimport GrammarUtils from \"./Utils\";\nimport { EKeyword, ETokenType } from \"../common\";\nimport SematicAnalyzer, { TranslationRule } from \"../parser/SemanticAnalyzer\";\nimport { ASTNode } from \"../parser/AST\";\n\nconst productionAndRules: [GrammarSymbol[], TranslationRule | undefined][] = [\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.gs_shader_program,\n    [[ENonTerminal.global_declaration], [ENonTerminal.gs_shader_program, ENonTerminal.global_declaration]],\n    ASTNode.GLShaderProgram.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(ENonTerminal.global_declaration, [\n    [ENonTerminal.precision_specifier],\n    [ENonTerminal.variable_declaration],\n    [ENonTerminal.struct_specifier],\n    [ENonTerminal.function_definition]\n  ]),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.variable_declaration,\n    [\n      [EKeyword.GS_RenderQueueType, ETokenType.ID, ETokenType.SEMICOLON],\n      [ENonTerminal.fully_specified_type, ETokenType.ID, ETokenType.SEMICOLON],\n      [ENonTerminal.fully_specified_type, ETokenType.ID, ENonTerminal.array_specifier, ETokenType.SEMICOLON]\n    ],\n    ASTNode.VariableDeclaration.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.ext_builtin_type_specifier_nonarray,\n    [\n      [EKeyword.VOID],\n      [EKeyword.FLOAT],\n      [EKeyword.BOOL],\n      [EKeyword.INT],\n      [EKeyword.UINT],\n      [EKeyword.VEC2],\n      [EKeyword.VEC3],\n      [EKeyword.VEC4],\n      [EKeyword.BVEC2],\n      [EKeyword.BVEC3],\n      [EKeyword.BVEC4],\n      [EKeyword.IVEC2],\n      [EKeyword.IVEC3],\n      [EKeyword.IVEC4],\n      [EKeyword.UVEC2],\n      [EKeyword.UVEC3],\n      [EKeyword.UVEC4],\n      [EKeyword.MAT2],\n      [EKeyword.MAT3],\n      [EKeyword.MAT4],\n      [EKeyword.MAT2X3],\n      [EKeyword.MAT2X4],\n      [EKeyword.MAT3X2],\n      [EKeyword.MAT3X4],\n      [EKeyword.MAT4X2],\n      [EKeyword.MAT4X3],\n      [EKeyword.SAMPLER2D],\n      [EKeyword.SAMPLER3D],\n      [EKeyword.SAMPLER_CUBE],\n      [EKeyword.SAMPLER2D_SHADOW],\n      [EKeyword.SAMPLER_CUBE_SHADOW],\n      [EKeyword.SAMPLER2D_ARRAY],\n      [EKeyword.SAMPLER2D_ARRAY_SHADOW],\n      [EKeyword.I_SAMPLER2D],\n      [EKeyword.I_SAMPLER3D],\n      [EKeyword.I_SAMPLER_CUBE],\n      [EKeyword.I_SAMPLER2D_ARRAY],\n      [EKeyword.U_SAMPLER2D],\n      [EKeyword.U_SAMPLER3D],\n      [EKeyword.U_SAMPLER_CUBE],\n      [EKeyword.U_SAMPLER2D_ARRAY]\n    ],\n    ASTNode.ExtBuiltinTypeSpecifierNonArray.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.type_specifier_nonarray,\n    [[ETokenType.ID], [ENonTerminal.ext_builtin_type_specifier_nonarray]],\n    ASTNode.TypeSpecifierNonArray.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.fully_specified_type,\n    [[ENonTerminal.type_specifier], [ENonTerminal.type_qualifier, ENonTerminal.type_specifier]],\n    ASTNode.FullySpecifiedType.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.type_specifier,\n    [\n      [ENonTerminal.type_specifier_nonarray],\n      [ENonTerminal.ext_builtin_type_specifier_nonarray, ENonTerminal.array_specifier]\n    ],\n    ASTNode.TypeSpecifier.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.type_qualifier,\n    [[ENonTerminal.single_type_qualifier], [ENonTerminal.type_qualifier, ENonTerminal.single_type_qualifier]],\n    ASTNode.TypeQualifier.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.single_type_qualifier,\n    [\n      [ENonTerminal.storage_qualifier],\n      [ENonTerminal.precision_qualifier],\n      [ENonTerminal.interpolation_qualifier],\n      [ENonTerminal.invariant_qualifier],\n      [EKeyword.PRECISE]\n    ],\n    ASTNode.SingleTypeQualifier.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.storage_qualifier,\n    [[EKeyword.CONST], [EKeyword.IN], [EKeyword.INOUT], [EKeyword.OUT], [EKeyword.CENTROID]],\n    // #if _VERBOSE\n    ASTNode.StorageQualifier.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.interpolation_qualifier,\n    [[EKeyword.SMOOTH], [EKeyword.FLAT]],\n    // #if _VERBOSE\n    ASTNode.InterpolationQualifier.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.invariant_qualifier,\n    [[EKeyword.INVARIANT]],\n    // #if _VERBOSE\n    ASTNode.InvariantQualifier.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.precision_qualifier,\n    [[EKeyword.HIGHP], [EKeyword.MEDIUMP], [EKeyword.LOWP]],\n    // #if _VERBOSE\n    ASTNode.PrecisionQualifier.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.struct_specifier,\n    [\n      [\n        EKeyword.STRUCT,\n        ETokenType.ID,\n        ETokenType.LEFT_BRACE,\n        ENonTerminal.struct_declaration_list,\n        ETokenType.RIGHT_BRACE,\n        ETokenType.SEMICOLON\n      ],\n      [\n        EKeyword.STRUCT,\n        ETokenType.LEFT_BRACE,\n        ENonTerminal.struct_declaration_list,\n        ETokenType.RIGHT_BRACE,\n        ETokenType.SEMICOLON\n      ]\n    ],\n    ASTNode.StructSpecifier.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.struct_declaration_list,\n    [[ENonTerminal.struct_declaration], [ENonTerminal.struct_declaration_list, ENonTerminal.struct_declaration]],\n    ASTNode.StructDeclarationList.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.struct_declaration,\n    [\n      [ENonTerminal.type_specifier, ENonTerminal.struct_declarator_list, ETokenType.SEMICOLON],\n      [\n        ENonTerminal.type_qualifier,\n        ENonTerminal.type_specifier,\n        ENonTerminal.struct_declarator_list,\n        ETokenType.SEMICOLON\n      ]\n    ],\n    ASTNode.StructDeclaration.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.struct_declarator_list,\n    [\n      [ENonTerminal.struct_declarator],\n      [ENonTerminal.struct_declarator_list, ETokenType.COMMA, ENonTerminal.struct_declarator]\n    ],\n    ASTNode.StructDeclaratorList.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.struct_declarator,\n    [[ETokenType.ID], [ETokenType.ID, ENonTerminal.array_specifier]],\n    ASTNode.StructDeclarator.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.array_specifier,\n    [\n      [ETokenType.LEFT_BRACKET, ETokenType.RIGHT_BRACKET],\n      [ETokenType.LEFT_BRACKET, ENonTerminal.integer_constant_expression, ETokenType.RIGHT_BRACKET]\n    ],\n    ASTNode.ArraySpecifier.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.integer_constant_expression_operator,\n    [[ETokenType.PLUS], [ETokenType.DASH], [ETokenType.STAR], [ETokenType.SLASH], [ETokenType.PERCENT]],\n    ASTNode.IntegerConstantExpressionOperator.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.integer_constant_expression,\n    [\n      [ENonTerminal.variable_identifier],\n      [ETokenType.INT_CONSTANT],\n      [\n        ENonTerminal.integer_constant_expression,\n        ENonTerminal.integer_constant_expression_operator,\n        ETokenType.INT_CONSTANT\n      ],\n      [\n        ENonTerminal.integer_constant_expression,\n        ENonTerminal.integer_constant_expression_operator,\n        ENonTerminal.variable_identifier\n      ]\n    ],\n    ASTNode.IntegerConstantExpression.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.conditional_expression,\n    [\n      [ENonTerminal.logical_or_expression],\n      [\n        ENonTerminal.logical_or_expression,\n        ETokenType.QUESTION,\n        ENonTerminal.expression,\n        ETokenType.COLON,\n        ENonTerminal.assignment_expression\n      ]\n    ],\n    // #if _VERBOSE\n    ASTNode.ConditionalExpression.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.logical_or_expression,\n    [\n      [ENonTerminal.logical_xor_expression],\n      [ENonTerminal.logical_or_expression, ETokenType.OR_OP, ENonTerminal.logical_xor_expression]\n    ],\n    // #if _VERBOSE\n    ASTNode.LogicalOrExpression.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.logical_xor_expression,\n    [\n      [ENonTerminal.logical_and_expression],\n      [ENonTerminal.logical_xor_expression, ETokenType.XOR_OP, ENonTerminal.logical_and_expression]\n    ],\n    // #if _VERBOSE\n    ASTNode.LogicalXorExpression.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.logical_and_expression,\n    [\n      [ENonTerminal.inclusive_or_expression],\n      [ENonTerminal.logical_and_expression, ETokenType.AND_OP, ENonTerminal.inclusive_or_expression]\n    ],\n    // #if _VERBOSE\n    ASTNode.LogicalAndExpression.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.inclusive_or_expression,\n    [\n      [ENonTerminal.exclusive_or_expression],\n      [ENonTerminal.inclusive_or_expression, ETokenType.VERTICAL_BAR, ENonTerminal.exclusive_or_expression]\n    ],\n    // #if _VERBOSE\n    ASTNode.InclusiveOrExpression.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.exclusive_or_expression,\n    [\n      [ENonTerminal.and_expression],\n      [ENonTerminal.exclusive_or_expression, ETokenType.CARET, ENonTerminal.and_expression]\n    ],\n    // #if _VERBOSE\n    ASTNode.ExclusiveOrExpression.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.and_expression,\n    [\n      [ENonTerminal.equality_expression],\n      [ENonTerminal.and_expression, ETokenType.AMPERSAND, ENonTerminal.equality_expression]\n    ],\n    // #if _VERBOSE\n    ASTNode.AndExpression.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.equality_expression,\n    [\n      [ENonTerminal.relational_expression],\n      [ENonTerminal.equality_expression, ETokenType.EQ_OP, ENonTerminal.relational_expression],\n      [ENonTerminal.equality_expression, ETokenType.NE_OP, ENonTerminal.relational_expression]\n    ],\n    // #if _VERBOSE\n    ASTNode.EqualityExpression.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.relational_expression,\n    [\n      [ENonTerminal.shift_expression],\n      [ENonTerminal.relational_expression, ETokenType.LEFT_ANGLE, ENonTerminal.shift_expression],\n      [ENonTerminal.relational_expression, ETokenType.RIGHT_ANGLE, ENonTerminal.shift_expression],\n      [ENonTerminal.relational_expression, ETokenType.LE_OP, ENonTerminal.shift_expression],\n      [ENonTerminal.relational_expression, ETokenType.GE_OP, ENonTerminal.shift_expression]\n    ],\n    // #if _VERBOSE\n    ASTNode.RelationalExpression.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.shift_expression,\n    [\n      [ENonTerminal.additive_expression],\n      [ENonTerminal.shift_expression, ETokenType.LEFT_OP, ENonTerminal.additive_expression],\n      [ENonTerminal.shift_expression, ETokenType.RIGHT_OP, ENonTerminal.additive_expression]\n    ],\n    // #if _VERBOSE\n    ASTNode.ShiftExpression.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.additive_expression,\n    [\n      [ENonTerminal.multiplicative_expression],\n      [ENonTerminal.additive_expression, ETokenType.PLUS, ENonTerminal.multiplicative_expression],\n      [ENonTerminal.additive_expression, ETokenType.DASH, ENonTerminal.multiplicative_expression]\n    ],\n    // #if _VERBOSE\n    ASTNode.AdditiveExpression.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.multiplicative_expression,\n    [\n      [ENonTerminal.unary_expression],\n      [ENonTerminal.multiplicative_expression, ETokenType.STAR, ENonTerminal.unary_expression],\n      [ENonTerminal.multiplicative_expression, ETokenType.SLASH, ENonTerminal.unary_expression],\n      [ENonTerminal.multiplicative_expression, ETokenType.PERCENT, ENonTerminal.unary_expression]\n    ],\n    // #if _VERBOSE\n    ASTNode.MultiplicativeExpression.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.unary_expression,\n    [\n      [ENonTerminal.postfix_expression],\n      [ETokenType.INC_OP, ENonTerminal.unary_expression],\n      [ETokenType.DEC_OP, ENonTerminal.unary_expression],\n      [ENonTerminal.unary_operator, ENonTerminal.unary_expression]\n    ],\n    // #if _VERBOSE\n    ASTNode.UnaryExpression.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.unary_operator,\n    [[ETokenType.PLUS], [ETokenType.DASH], [ETokenType.BANG], [ETokenType.TILDE]],\n    // #if _VERBOSE\n    ASTNode.UnaryOperator.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.postfix_expression,\n    [\n      [ENonTerminal.primary_expression],\n      [ENonTerminal.postfix_expression, ETokenType.LEFT_BRACKET, ENonTerminal.expression, ETokenType.RIGHT_BRACKET],\n      [ENonTerminal.function_call],\n      [ENonTerminal.postfix_expression, ETokenType.DOT, ETokenType.ID],\n      [ENonTerminal.postfix_expression, ETokenType.DOT, ENonTerminal.function_call],\n      [ENonTerminal.postfix_expression, ETokenType.INC_OP],\n      [ENonTerminal.postfix_expression, ETokenType.DEC_OP]\n    ],\n    ASTNode.PostfixExpression.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.primary_expression,\n    [\n      [ENonTerminal.variable_identifier],\n      [ETokenType.INT_CONSTANT],\n      [ETokenType.FLOAT_CONSTANT],\n      [EKeyword.TRUE],\n      [EKeyword.FALSE],\n      [ETokenType.LEFT_PAREN, ENonTerminal.expression, ETokenType.RIGHT_PAREN]\n    ],\n    ASTNode.PrimaryExpression.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.expression,\n    [\n      [ENonTerminal.assignment_expression],\n      [ENonTerminal.expression, ETokenType.COMMA, ENonTerminal.assignment_expression]\n    ],\n    ASTNode.Expression.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.assignment_expression,\n    [\n      [ENonTerminal.conditional_expression],\n      [ENonTerminal.unary_expression, ENonTerminal.assignment_operator, ENonTerminal.assignment_expression]\n    ],\n    ASTNode.AssignmentExpression.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.assignment_operator,\n    [\n      [ETokenType.EQUAL],\n      [ETokenType.MUL_ASSIGN],\n      [ETokenType.DIV_ASSIGN],\n      [ETokenType.MOD_ASSIGN],\n      [ETokenType.ADD_ASSIGN],\n      [ETokenType.SUB_ASSIGN],\n      [ETokenType.LEFT_ASSIGN],\n      [ETokenType.RIGHT_ASSIGN],\n      [ETokenType.AND_ASSIGN],\n      [ETokenType.XOR_ASSIGN],\n      [ETokenType.OR_ASSIGN]\n    ],\n    // #if _VERBOSE\n    ASTNode.AssignmentOperator.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.function_call,\n    [[ENonTerminal.function_call_generic]],\n    ASTNode.FunctionCall.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.function_call_generic,\n    [\n      [\n        ENonTerminal.function_identifier,\n        ETokenType.LEFT_PAREN,\n        ENonTerminal.function_call_parameter_list,\n        ETokenType.RIGHT_PAREN\n      ],\n      [ENonTerminal.function_identifier, ETokenType.LEFT_PAREN, ETokenType.RIGHT_PAREN],\n      [ENonTerminal.function_identifier, EKeyword.VOID, ETokenType.RIGHT_PAREN]\n    ],\n    ASTNode.FunctionCallGeneric.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.function_call_parameter_list,\n    [\n      [ENonTerminal.assignment_expression],\n      [ENonTerminal.function_call_parameter_list, ETokenType.COMMA, ENonTerminal.assignment_expression]\n    ],\n    ASTNode.FunctionCallParameterList.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.function_identifier,\n    [[ENonTerminal.type_specifier]],\n    ASTNode.FunctionIdentifier.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.function_definition,\n    [[ENonTerminal.function_prototype, ENonTerminal.compound_statement_no_scope]],\n    ASTNode.FunctionDefinition.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.function_prototype,\n    [[ENonTerminal.function_declarator, ETokenType.RIGHT_PAREN]],\n    ASTNode.FunctionProtoType.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.function_declarator,\n    [[ENonTerminal.function_header], [ENonTerminal.function_header, ENonTerminal.function_parameter_list]],\n    ASTNode.FunctionDeclarator.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.function_header,\n    [[ENonTerminal.fully_specified_type, ETokenType.ID, ETokenType.LEFT_PAREN]],\n    ASTNode.FunctionHeader.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.function_parameter_list,\n    [\n      [ENonTerminal.parameter_declaration],\n      [ENonTerminal.function_parameter_list, ETokenType.COMMA, ENonTerminal.parameter_declaration]\n    ],\n    ASTNode.FunctionParameterList.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.parameter_declaration,\n    [[ENonTerminal.type_qualifier, ENonTerminal.parameter_declarator], [ENonTerminal.parameter_declarator]],\n    ASTNode.ParameterDeclaration.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.parameter_declarator,\n    [\n      [ENonTerminal.type_specifier, ETokenType.ID],\n      [ENonTerminal.type_specifier, ETokenType.ID, ENonTerminal.array_specifier]\n    ],\n    ASTNode.ParameterDeclarator.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.statement_list,\n    [[ENonTerminal.statement], [ENonTerminal.statement_list, ENonTerminal.statement]],\n    ASTNode.StatementList.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.statement,\n    [[ENonTerminal.compound_statement], [ENonTerminal.simple_statement]],\n    // #if _VERBOSE\n    ASTNode.Statement.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.compound_statement_no_scope,\n    [\n      [ETokenType.LEFT_BRACE, ETokenType.RIGHT_BRACE],\n      [ETokenType.LEFT_BRACE, ENonTerminal.statement_list, ETokenType.RIGHT_BRACE]\n    ],\n    ASTNode.CompoundStatementNoScope.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.compound_statement,\n    [\n      [ETokenType.LEFT_BRACE, ETokenType.RIGHT_BRACE],\n      [ENonTerminal.scope_brace, ENonTerminal.statement_list, ENonTerminal.scope_end_brace]\n    ],\n    // #if _VERBOSE\n    ASTNode.CompoundStatement.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.simple_statement,\n    [\n      [ENonTerminal.declaration],\n      [ENonTerminal.expression_statement],\n      [ENonTerminal.selection_statement],\n      [ENonTerminal.iteration_statement],\n      [ENonTerminal.jump_statement]\n    ],\n    // #if _VERBOSE\n    ASTNode.SimpleStatement.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.declaration,\n    [\n      [ENonTerminal.function_prototype, ETokenType.SEMICOLON],\n      [ENonTerminal.init_declarator_list, ETokenType.SEMICOLON],\n      [\n        EKeyword.PRECISION,\n        ENonTerminal.precision_qualifier,\n        ENonTerminal.ext_builtin_type_specifier_nonarray,\n        ETokenType.SEMICOLON\n      ],\n      [ENonTerminal.type_qualifier, ETokenType.ID, ETokenType.SEMICOLON],\n      [ENonTerminal.type_qualifier, ETokenType.ID, ENonTerminal.identifier_list, ETokenType.SEMICOLON]\n    ],\n    ASTNode.Declaration.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.identifier_list,\n    [\n      [ETokenType.COMMA, ETokenType.ID],\n      [ENonTerminal.identifier_list, ETokenType.COMMA, ETokenType.ID]\n    ],\n    ASTNode.IdentifierList.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.init_declarator_list,\n    [\n      [ENonTerminal.single_declaration],\n      [ENonTerminal.init_declarator_list, ETokenType.COMMA, ETokenType.ID],\n      [ENonTerminal.init_declarator_list, ETokenType.COMMA, ETokenType.ID, ENonTerminal.array_specifier],\n      [\n        ENonTerminal.init_declarator_list,\n        ETokenType.COMMA,\n        ETokenType.ID,\n        ENonTerminal.array_specifier,\n        ETokenType.EQUAL,\n        ENonTerminal.initializer\n      ],\n      [ENonTerminal.init_declarator_list, ETokenType.COMMA, ETokenType.ID, ETokenType.EQUAL, ENonTerminal.initializer]\n    ],\n    ASTNode.InitDeclaratorList.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.single_declaration,\n    [\n      [ENonTerminal.fully_specified_type, ETokenType.ID],\n      [ENonTerminal.fully_specified_type, ETokenType.ID, ENonTerminal.array_specifier],\n      [\n        ENonTerminal.fully_specified_type,\n        ETokenType.ID,\n        ENonTerminal.array_specifier,\n        ETokenType.EQUAL,\n        ENonTerminal.initializer\n      ],\n      [ENonTerminal.fully_specified_type, ETokenType.ID, ETokenType.EQUAL, ENonTerminal.initializer]\n    ],\n    ASTNode.SingleDeclaration.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.initializer,\n    [\n      [ENonTerminal.assignment_expression],\n      [ETokenType.LEFT_BRACE, ENonTerminal.initializer_list, ETokenType.RIGHT_BRACE]\n    ],\n    // #if _VERBOSE\n    ASTNode.Initializer.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.initializer_list,\n    [[ENonTerminal.initializer], [ENonTerminal.initializer_list, ETokenType.COMMA, ENonTerminal.initializer]],\n    // #if _VERBOSE\n    ASTNode.InitializerList.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.expression_statement,\n    [[ETokenType.SEMICOLON], [ENonTerminal.expression, ETokenType.SEMICOLON]],\n    // #if _VERBOSE\n    ASTNode.ExpressionStatement.pool\n    // #endif\n  ),\n\n  // dangling else ambiguity\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.selection_statement,\n    [\n      [EKeyword.IF, ETokenType.LEFT_PAREN, ENonTerminal.expression, ETokenType.RIGHT_PAREN, ENonTerminal.statement],\n      [\n        EKeyword.IF,\n        ETokenType.LEFT_PAREN,\n        ENonTerminal.expression,\n        ETokenType.RIGHT_PAREN,\n        ENonTerminal.statement,\n        EKeyword.ELSE,\n        ENonTerminal.statement\n      ]\n    ],\n    // #if _VERBOSE\n    ASTNode.SelectionStatement.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.iteration_statement,\n    [\n      [EKeyword.WHILE, ETokenType.LEFT_PAREN, ENonTerminal.condition, ETokenType.RIGHT_PAREN, ENonTerminal.statement],\n      [\n        EKeyword.FOR,\n        ETokenType.LEFT_PAREN,\n        ENonTerminal.for_init_statement,\n        ENonTerminal.for_rest_statement,\n        ETokenType.RIGHT_PAREN,\n        ENonTerminal.statement\n      ]\n    ],\n    // #if _VERBOSE\n    ASTNode.IterationStatement.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.precision_specifier,\n    [\n      [\n        EKeyword.PRECISION,\n        ENonTerminal.precision_qualifier,\n        ENonTerminal.ext_builtin_type_specifier_nonarray,\n        ETokenType.SEMICOLON\n      ]\n    ],\n    ASTNode.PrecisionSpecifier.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.for_init_statement,\n    [[ENonTerminal.expression_statement], [ENonTerminal.declaration]],\n    // #if _VERBOSE\n    ASTNode.ForInitStatement.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.condition,\n    [\n      [ENonTerminal.expression],\n      [ENonTerminal.fully_specified_type, ETokenType.ID, ETokenType.EQUAL, ENonTerminal.initializer]\n    ],\n    // #if _VERBOSE\n    ASTNode.Condition.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.for_rest_statement,\n    [\n      [ENonTerminal.conditionopt, ETokenType.SEMICOLON],\n      [ENonTerminal.conditionopt, ETokenType.SEMICOLON, ENonTerminal.expression]\n    ],\n    // #if _VERBOSE\n    ASTNode.ForRestStatement.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.conditionopt,\n    [[ETokenType.EPSILON], [ENonTerminal.condition]],\n    // #if _VERBOSE\n    ASTNode.ConditionOpt.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.jump_statement,\n    [\n      [EKeyword.CONTINUE, ETokenType.SEMICOLON],\n      [EKeyword.BREAK, ETokenType.SEMICOLON],\n      [EKeyword.RETURN, ETokenType.SEMICOLON],\n      [EKeyword.RETURN, ENonTerminal.expression, ETokenType.SEMICOLON],\n      [EKeyword.DISCARD, ETokenType.SEMICOLON]\n    ],\n    ASTNode.JumpStatement.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.scope_brace,\n    [[ETokenType.LEFT_BRACE]],\n    ASTNode.ScopeBrace.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.scope_end_brace,\n    [[ETokenType.RIGHT_BRACE]],\n    ASTNode.ScopeEndBrace.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.variable_identifier,\n    [[ETokenType.ID]],\n    ASTNode.VariableIdentifier.pool\n  )\n];\n\nconst createGrammar = () =>\n  Grammar.create(\n    ENonTerminal.gs_shader_program,\n    productionAndRules.map((item) => item[0])\n  );\n\nconst addTranslationRule = (sa: SematicAnalyzer) => {\n  for (let i = 0; i < productionAndRules.length; i++) {\n    const rule = productionAndRules[i][1];\n    if (rule) {\n      sa.addTranslationRule(i, rule);\n    }\n  }\n};\n\nexport { createGrammar, addTranslationRule };\n","import { Grammar } from \"../parser/Grammar\";\nimport { ENonTerminal, GrammarSymbol, Terminal } from \"../parser/GrammarSymbol\";\nimport State from \"./State\";\nimport StateItem from \"./StateItem\";\nimport GrammarUtils from \"./Utils\";\nimport { EKeyword, ETokenType } from \"../common\";\nimport Utils from \"./Utils\";\nimport { ActionInfo, ActionTable, EAction, GotoTable, StateActionTable, StateGotoTable } from \"./types\";\n\n/**\n * The [LALR1](https://web.stanford.edu/class/archive/cs/cs143/cs143.1128/handouts/140%20LALR%20Parsing.pdf) Parser generator\n */\nexport class LALR1 {\n  readonly firstSetMap: Map<ENonTerminal, Set<Terminal>> = new Map();\n  readonly followSetMap: Map<ENonTerminal, Set<Terminal>> = new Map();\n\n  readonly actionTable: StateActionTable = new Map();\n  readonly gotoTable: StateGotoTable = new Map();\n  private grammar: Grammar;\n\n  /** For circle detect */\n  private _firstSetNTStack: ENonTerminal[] = [];\n\n  constructor(grammar: Grammar) {\n    this.grammar = grammar;\n  }\n\n  generate() {\n    this.computeFirstSet();\n    this.buildStateTable();\n  }\n\n  private buildStateTable() {\n    const startStateItemCore = [new StateItem(this.grammar.productions[0], 0, [ETokenType.EOF])];\n    const startState = State.create(startStateItemCore);\n    this._extendState(startState);\n  }\n\n  private _extendState(state: State) {\n    if (!state.needReInfer) return;\n    this._closure(state);\n    const newStates = this._inferNextState(state);\n    for (const ns of newStates) {\n      this._extendState(ns);\n    }\n  }\n\n  private _closure(state: State) {\n    for (const core of state.cores) {\n      if (!core.canReduce()) {\n        this._extendStateItem(state, core);\n      }\n    }\n    state.closured = true;\n    return state;\n  }\n\n  private _extendStateItem(state: State, item: StateItem) {\n    if (GrammarUtils.isTerminal(item.curSymbol)) return;\n\n    const productionList = this.grammar.getProductionList(<ENonTerminal>item.curSymbol);\n\n    if (item.nextSymbol) {\n      let newLookaheadSet = new Set<Terminal>();\n      let lastFirstSet: Set<Terminal> | undefined;\n      let terminalExist = false;\n      // when A :=> a.BC, a;  ==》 B :=> .xy, First(Ca)\n      // newLookAhead = First(Ca)\n      for (let i = 1, nextSymbol = item.symbolByOffset(1); !!nextSymbol; nextSymbol = item.symbolByOffset(++i)) {\n        if (GrammarUtils.isTerminal(nextSymbol)) {\n          newLookaheadSet.add(<Terminal>nextSymbol);\n          terminalExist = true;\n          break;\n        }\n        lastFirstSet = this.firstSetMap.get(<ENonTerminal>nextSymbol)!;\n        for (const t of lastFirstSet) {\n          newLookaheadSet.add(t);\n        }\n        if (!lastFirstSet.has(ETokenType.EPSILON)) break;\n      }\n      if (!terminalExist && lastFirstSet?.has(ETokenType.EPSILON)) {\n        for (const t of item.lookaheadSet) {\n          newLookaheadSet.add(t);\n        }\n      }\n\n      for (const production of productionList) {\n        const newItem = state.createStateItem(production, 0);\n        if (!state.items.has(newItem) || !Utils.isSubSet(newLookaheadSet, newItem.lookaheadSet)) {\n          state.items.add(newItem);\n          newItem.addLookahead(newLookaheadSet);\n          this._extendStateItem(state, newItem);\n        }\n      }\n    } else {\n      for (const production of productionList) {\n        const newItem = state.createStateItem(production, 0);\n        if (!state.items.has(newItem) || !Utils.isSubSet(item.lookaheadSet, newItem.lookaheadSet)) {\n          state.items.add(newItem);\n          newItem.addLookahead(item.lookaheadSet);\n          this._extendStateItem(state, newItem);\n        }\n      }\n    }\n  }\n\n  private _inferNextState(state: State): Set<State> {\n    const coreMap: Map<GrammarSymbol, Set<StateItem>> = new Map();\n    const stateActionTable: ActionTable = this.actionTable.get(state.id) ?? new Map();\n    const stateGotoTable: GotoTable = this.gotoTable.get(state.id) ?? new Map();\n\n    this.actionTable.set(state.id, stateActionTable);\n    this.gotoTable.set(state.id, stateGotoTable);\n\n    for (const stateItem of state.items) {\n      if (stateItem.canReduce()) {\n        let action: ActionInfo;\n        if (stateItem.production.goal !== ENonTerminal.START) {\n          action = {\n            action: EAction.Reduce,\n            target: stateItem.production.id\n          };\n        } else {\n          action = { action: EAction.Accept };\n        }\n\n        for (const t of stateItem.lookaheadSet) {\n          this._addAction(stateActionTable, t, action);\n        }\n      } else {\n        const nextItem = stateItem.advance();\n        Utils.addMapSetItem(coreMap, stateItem.curSymbol, nextItem);\n      }\n\n      stateItem.needReInfer = false;\n    }\n\n    const newStates = new Set<State>();\n    for (const [gs, cores] of coreMap.entries()) {\n      const newState = State.create(Array.from(cores));\n      if (GrammarUtils.isTerminal(gs)) {\n        this._addAction(stateActionTable, <Terminal>gs, {\n          action: EAction.Shift,\n          target: newState.id\n        });\n      } else {\n        stateGotoTable.set(<ENonTerminal>gs, newState.id);\n      }\n\n      newStates.add(newState);\n    }\n\n    return newStates;\n  }\n\n  /** Resolve shift-reduce/reduce-reduce conflict detect */\n  private _addAction(table: ActionTable, terminal: Terminal, action: ActionInfo) {\n    const exist = table.get(terminal);\n    if (exist && !Utils.isActionEqual(exist, action)) {\n      // Resolve dangling else ambiguity\n      if (terminal === EKeyword.ELSE && exist.action === EAction.Shift && action.action === EAction.Reduce) {\n        return;\n      } else {\n        // #if _VERBOSE\n        console.warn(\n          `conflict detect: <Terminal ${GrammarUtils.toString(terminal)}>`,\n          Utils.printAction(exist),\n          \" -> \",\n          Utils.printAction(action)\n        );\n        // #endif\n      }\n    }\n    table.set(terminal, action);\n  }\n\n  // https://people.cs.pitt.edu/~jmisurda/teaching/cs1622/handouts/cs1622-first_and_follow.pdf\n  private computeFirstSet() {\n    for (const production of this.grammar.productions.slice(1)) {\n      this._computeFirstSetForNT(production.goal);\n    }\n  }\n\n  private _computeFirstSetForNT(NT: ENonTerminal) {\n    // circle detect\n    const idx = this._firstSetNTStack.findIndex((item) => item === NT);\n    if (idx !== -1) {\n      const computingFS = this.firstSetMap.get(NT)!;\n      const len = this._firstSetNTStack.length;\n      for (let i = len - 1; i > idx; i--) {\n        const curNT = this._firstSetNTStack[i];\n        this.firstSetMap.set(curNT, computingFS);\n      }\n      return computingFS;\n    }\n    this._firstSetNTStack.push(NT);\n\n    const productionList = this.grammar.getProductionList(NT);\n    const firstSet = new Set<Terminal>();\n    this.firstSetMap.set(NT, firstSet);\n    if (this.grammar.isNullableNT(NT)) firstSet.add(ETokenType.EPSILON);\n\n    for (const production of productionList) {\n      let i = 0;\n      for (; i < production.derivation.length; i++) {\n        const gs = production.derivation[i];\n        if (GrammarUtils.isTerminal(gs)) {\n          firstSet.add(<Terminal>gs);\n          break;\n        }\n\n        const succeedFirstSet = this._computeFirstSetForNT(<ENonTerminal>gs);\n\n        for (const item of succeedFirstSet) {\n          if (item !== ETokenType.EPSILON) firstSet.add(item);\n        }\n        if (!this.grammar.isNullableNT(<ENonTerminal>gs)) break;\n      }\n      if (i === production.derivation.length) firstSet.add(ETokenType.EPSILON);\n    }\n\n    this._firstSetNTStack.pop();\n    return firstSet;\n  }\n}\n","import { Grammar } from \"./Grammar\";\nimport { ENonTerminal, GrammarSymbol } from \"./GrammarSymbol\";\nimport { BaseToken } from \"../common/BaseToken\";\nimport { ETokenType } from \"../common\";\nimport { EAction, StateActionTable, StateGotoTable } from \"../lalr/types\";\nimport { ASTNode, TreeNode } from \"./AST\";\nimport SematicAnalyzer from \"./SemanticAnalyzer\";\nimport { TraceStackItem } from \"./types\";\nimport { addTranslationRule, createGrammar } from \"../lalr/CFG\";\nimport { LALR1 } from \"../lalr\";\nimport { ParserUtils } from \"../ParserUtils\";\nimport { Logger } from \"@galacean/engine\";\nimport { GSError, GSErrorName } from \"../GSError\";\nimport { ShaderLab } from \"../ShaderLab\";\nimport { ShaderLabUtils } from \"../ShaderLabUtils\";\n\n/**\n * The syntax parser and sematic analyzer of `ShaderLab` compiler\n */\nexport class ShaderTargetParser {\n  readonly actionTable: StateActionTable;\n  readonly gotoTable: StateGotoTable;\n  readonly grammar: Grammar;\n  readonly sematicAnalyzer: SematicAnalyzer;\n  private _traceBackStack: (TraceStackItem | number)[] = [];\n\n  private get curState() {\n    return this._traceBackStack[this._traceBackStack.length - 1] as number;\n  }\n  private get stateActionTable() {\n    return this.actionTable.get(this.curState)!;\n  }\n  private get stateGotoTable() {\n    return this.gotoTable.get(this.curState);\n  }\n\n  // #if _VERBOSE\n  /** @internal */\n  get errors() {\n    return this.sematicAnalyzer.errors;\n  }\n  // #endif\n\n  static _singleton: ShaderTargetParser;\n\n  static create() {\n    if (!this._singleton) {\n      const grammar = createGrammar();\n      const generator = new LALR1(grammar);\n      generator.generate();\n      this._singleton = new ShaderTargetParser(generator.actionTable, generator.gotoTable, grammar);\n      addTranslationRule(this._singleton.sematicAnalyzer);\n    }\n\n    return this._singleton;\n  }\n\n  private constructor(actionTable: StateActionTable, gotoTable: StateGotoTable, grammar: Grammar) {\n    this.actionTable = actionTable;\n    this.gotoTable = gotoTable;\n    this.grammar = grammar;\n    this.sematicAnalyzer = new SematicAnalyzer();\n  }\n\n  parse(tokens: Generator<BaseToken, BaseToken>): ASTNode.GLShaderProgram | null {\n    this.sematicAnalyzer.reset();\n    const start = performance.now();\n    const { _traceBackStack: traceBackStack, sematicAnalyzer } = this;\n    traceBackStack.push(0);\n\n    let nextToken = tokens.next();\n    let loopCount = 0;\n    while (true) {\n      loopCount += 1;\n      const token = nextToken.value;\n\n      const actionInfo = this.stateActionTable.get(token.type);\n      if (actionInfo?.action === EAction.Shift) {\n        traceBackStack.push(token, actionInfo.target!);\n        nextToken = tokens.next();\n      } else if (actionInfo?.action === EAction.Accept) {\n        Logger.info(\n          `[pass compilation - parser] Accept! State automata run ${loopCount} times! cost time ${\n            performance.now() - start\n          }ms`\n        );\n        sematicAnalyzer.acceptRule?.(sematicAnalyzer);\n        return sematicAnalyzer.semanticStack.pop() as ASTNode.GLShaderProgram;\n      } else if (actionInfo?.action === EAction.Reduce) {\n        const target = actionInfo.target!;\n        const reduceProduction = this.grammar.getProductionByID(target)!;\n        const translationRule = sematicAnalyzer.getTranslationRule(reduceProduction.id);\n\n        const values: (TreeNode | BaseToken)[] = [];\n\n        for (let i = reduceProduction.derivation.length - 1; i >= 0; i--) {\n          if (reduceProduction.derivation[i] === ETokenType.EPSILON) continue;\n          traceBackStack.pop();\n          const token = traceBackStack.pop();\n          if (token instanceof BaseToken) {\n            values.unshift(token);\n          } else {\n            const astNode = sematicAnalyzer.semanticStack.pop()!;\n            values.unshift(astNode);\n          }\n        }\n        translationRule?.(sematicAnalyzer, ...values);\n\n        const gotoTable = this.stateGotoTable;\n        traceBackStack.push(reduceProduction.goal);\n\n        const nextState = gotoTable?.get(reduceProduction.goal)!;\n        traceBackStack.push(nextState);\n        continue;\n      } else {\n        const error = ShaderLabUtils.createGSError(\n          `Unexpected token ${token.lexeme}`,\n          GSErrorName.CompilationError,\n          ShaderLab._processingPassText,\n          token.location\n        );\n        // #if _VERBOSE\n        this.sematicAnalyzer.errors.push(<GSError>error);\n        // #endif\n        return null;\n      }\n    }\n  }\n\n  // #if _VERBOSE\n  private _printStack(nextToken: BaseToken) {\n    let str = \"\";\n    for (let i = 0; i < this._traceBackStack.length - 1; i++) {\n      const state = <ENonTerminal>this._traceBackStack[i++];\n      const token = this._traceBackStack[i];\n      str += `State${state} - ${(<BaseToken>token).lexeme ?? ParserUtils.toString(token as GrammarSymbol)}; `;\n    }\n    str += `State${this._traceBackStack[this._traceBackStack.length - 1]} --- ${nextToken.lexeme}`;\n    Logger.info(str);\n  }\n  // #endif\n}\n","function _type_of(obj) {\n    \"@swc/helpers - typeof\";\n\n    return obj && typeof Symbol !== \"undefined\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n}\nexport { _type_of as _ };\n","import { BaseToken } from \"../common/BaseToken\";\nimport { ShaderRange } from \"../common\";\nimport { ShaderLabUtils } from \"../ShaderLabUtils\";\n// #if _VERBOSE\nimport { GSErrorName } from \"../GSError\";\n// #endif\n\nexport class MacroDefine {\n  private _replaceRegex?: RegExp;\n  private readonly _argsLexemes: string[];\n\n  get isFunction(): boolean {\n    return !!this.args?.length;\n  }\n\n  constructor(\n    public readonly macro: BaseToken,\n    public readonly body?: BaseToken,\n    public readonly location?: ShaderRange,\n    public readonly args?: BaseToken[]\n  ) {\n    if (args) {\n      this._argsLexemes = this.args.map((item) => item.lexeme);\n      this._replaceRegex = new RegExp(`\\\\b(${this._argsLexemes.join(\"|\")})\\\\b`, \"g\");\n    }\n  }\n\n  expandFunctionBody(args: string[]): string {\n    if (args.length !== this.args?.length) {\n      throw ShaderLabUtils.createGSError(\"mismatched function macro\", GSErrorName.PreprocessorError, \"\", this.location);\n    }\n\n    return this.body.lexeme.replace(this._replaceRegex, (m) => {\n      return args[this._argsLexemes.indexOf(m)];\n    });\n  }\n}\n","export enum EPpToken {\n  id,\n  line_remain,\n  chunk,\n  int_constant,\n  string_const,\n  /** \\>> */\n  right_op,\n  /** << */\n  left_op,\n  left_paren,\n  right_paren,\n  /** \\>= */\n  ge,\n  /** <= */\n  le,\n  /** == */\n  eq,\n  /** != */\n  neq,\n  /** && */\n  and,\n  /** || */\n  or,\n  /** < */\n  left_angle,\n  /** \\> */\n  right_angle,\n  /** \\* */\n  star,\n  /** + */\n  plus,\n  /** \\- */\n  dash,\n  /** ! */\n  bang,\n  /** \\/ */\n  slash,\n  /** % */\n  percent,\n\n  EOF = 100\n}\n\nexport enum EPpKeyword {\n  define = 101,\n  undef,\n  if,\n  ifdef,\n  ifndef,\n  else,\n  elif,\n  endif,\n  include,\n\n  defined\n}\n\nexport const PpKeyword = new Map<string, EPpKeyword>([\n  [\"#define\", EPpKeyword.define],\n  [\"#undef\", EPpKeyword.undef],\n  [\"#if\", EPpKeyword.if],\n  [\"#ifdef\", EPpKeyword.ifdef],\n  [\"#ifndef\", EPpKeyword.ifndef],\n  [\"#else\", EPpKeyword.else],\n  [\"#elif\", EPpKeyword.elif],\n  [\"#endif\", EPpKeyword.endif],\n  [\"#include\", EPpKeyword.include],\n  [\"defined\", EPpKeyword.defined]\n]);\n\nexport type PpConstant = boolean | number;\n","import { ShaderRange } from \"../../common/ShaderRange\";\n\n// #if _VERBOSE\nexport class BlockInfo {\n  readonly sourceFile: string;\n  readonly rangeInFile?: ShaderRange;\n  readonly sourceMap?: PpSourceMap;\n\n  constructor(sourceFile?: string, rangeInFile?: ShaderRange, sourceMap?: PpSourceMap) {\n    this.sourceFile = sourceFile ?? \"__main__\";\n    this.rangeInFile = rangeInFile;\n    this.sourceMap = sourceMap;\n  }\n}\n\nexport class MapRange {\n  sourceLoc: { block: BlockInfo; rangeInBlock: ShaderRange };\n  generatedLoc: { start: number; end: number };\n\n  constructor(sourceBlock: BlockInfo, rangeInBlock: ShaderRange, generatedLoc: { start: number; end: number }) {\n    this.sourceLoc = { block: sourceBlock, rangeInBlock };\n    this.generatedLoc = generatedLoc;\n  }\n\n  getSourceIndex(generatedIdx: number) {\n    const { block, rangeInBlock } = this.sourceLoc;\n    if (block.sourceMap) {\n      if (block.sourceFile !== \"__main__\") return block.sourceMap.map(generatedIdx - this.generatedLoc.start);\n      else if (rangeInBlock) {\n        return {\n          sourceFile: block.sourceFile,\n          index: (block.rangeInFile?.start.index ?? 0) + rangeInBlock.start.index\n        };\n      }\n    }\n\n    return {\n      index: generatedIdx - this.generatedLoc.start + rangeInBlock.start.index + (block.rangeInFile?.start.index ?? 0),\n      sourceFile: this.sourceLoc.block.sourceFile\n    };\n  }\n}\n\nexport default class PpSourceMap {\n  readonly mapRanges: MapRange[] = [];\n\n  static rangeContains(range: MapRange[\"generatedLoc\"], index: number) {\n    return range.start <= index && range.end > index;\n  }\n\n  addMapRange(mapRange: MapRange) {\n    this.mapRanges.push(mapRange);\n  }\n\n  /**\n   * @returns index\n   */\n  map(index: number): { sourceFile: string; index: number } {\n    let curRange: MapRange | undefined;\n    for (const range of this.mapRanges) {\n      const { generatedLoc } = range;\n      if (PpSourceMap.rangeContains(generatedLoc, index)) {\n        return range.getSourceIndex(index);\n      } else if (range.generatedLoc.start < index) {\n        curRange = range;\n        continue;\n      } else {\n        break;\n      }\n    }\n    if (!curRange) return { sourceFile: \"__main__\", index };\n    return {\n      index: index - curRange.generatedLoc.end + curRange.sourceLoc.rangeInBlock.end.index,\n      sourceFile: curRange.sourceLoc.block.sourceFile\n    };\n  }\n}\n// #endif\n","import { ShaderRange } from \"../common\";\nimport { ExpandSegment } from \"./PpParser\";\n// #if _VERBOSE\nimport PpSourceMap, { MapRange } from \"./sourceMap\";\n// #endif\n\nexport class PpUtils {\n  static expand(\n    segments: ExpandSegment[],\n    source: string,\n    // #if _VERBOSE\n    sourceMap?: PpSourceMap\n    //#endif\n  ) {\n    const ret: string[] = [];\n    let startIdx = 0;\n    let generatedIdx = 0;\n\n    for (const seg of segments) {\n      const originSlice = source.slice(startIdx, seg.rangeInBlock.start.index);\n      ret.push(originSlice, seg.replace);\n\n      const generatedIdxEnd = generatedIdx + originSlice.length + seg.replace.length;\n\n      // #if _VERBOSE\n      const mapRange = new MapRange(seg.block, seg.rangeInBlock, {\n        start: generatedIdx + originSlice.length,\n        end: generatedIdxEnd\n      });\n      sourceMap?.addMapRange(mapRange);\n      // #endif\n\n      startIdx = seg.rangeInBlock.end.index;\n      generatedIdx = generatedIdxEnd;\n    }\n    ret.push(source.slice(startIdx));\n    return ret.join(\"\");\n  }\n\n  static assembleSegments(\n    segments: {\n      range: ShaderRange;\n      replace: string;\n    }[],\n    source: string\n  ) {\n    const ret: string[] = [];\n    let startIdx = 0;\n    for (const seg of segments) {\n      const originSlice = source.slice(startIdx, seg.range.start.index);\n      ret.push(originSlice, seg.replace);\n      startIdx = seg.range.end.index;\n    }\n    ret.push(source.slice(startIdx));\n    return ret.join(\"\");\n  }\n}\n","import { ShaderRange, ShaderPosition } from \"../common\";\nimport LexerUtils from \"../lexer/Utils\";\n// #if _VERBOSE\nimport PpSourceMap from \"./sourceMap\";\n// #endif\nimport BaseScanner from \"../common/BaseScanner\";\nimport { BaseToken, EOF } from \"../common/BaseToken\";\nimport { EPpKeyword, EPpToken, PpKeyword } from \"./constants\";\nimport { PpUtils } from \"./Utils\";\nimport { ShaderLab } from \"../ShaderLab\";\n\nexport type OnToken = (token: BaseToken, scanner: PpScanner) => void;\n\nexport default class PpScanner extends BaseScanner {\n  private static _splitCharacters = /[\\w#.]/;\n\n  private macroLvl = 0;\n\n  // #if _VERBOSE\n  readonly sourceMap = new PpSourceMap();\n  readonly file: string;\n  readonly blockRange?: ShaderRange;\n  // #endif\n\n  constructor(\n    source: string,\n    // #if _VERBOSE\n    file = \"__main__\",\n    blockRange?: ShaderRange\n    // #endif\n  ) {\n    super(source);\n    // #if _VERBOSE\n    this.file = file;\n    this.blockRange = blockRange;\n    // #endif\n  }\n\n  /**\n   * Advance to directive\n   * @param expandOnToken callback on encountering token.\n   */\n  scanDirective(expandOnToken?: OnToken): BaseToken<number> {\n    const directive = this._advanceToDirective(expandOnToken);\n    if ([EPpKeyword.if, EPpKeyword.ifdef, EPpKeyword.ifndef].includes(<any>directive?.type)) {\n      this.macroLvl += 1;\n    } else if (<any>directive?.type === EPpKeyword.endif) {\n      this.macroLvl -= 1;\n    }\n    return directive;\n  }\n\n  /**\n   * @param nonLetterChar should not be space\n   */\n  scanWordsUntilChar(nonLetterChar: string): BaseToken[] {\n    const ret: BaseToken[] = [];\n    while (true) {\n      this.skipSpace(true);\n      if (LexerUtils.isLetter(this.getCurChar())) {\n        ret.push(this.scanWord());\n      } else if (this.getCurChar() === nonLetterChar) {\n        this.advance();\n        return ret;\n      } else {\n        this.advance();\n      }\n    }\n  }\n\n  scanWord(skipNonLetter = false): BaseToken {\n    if (skipNonLetter) {\n      while (!LexerUtils.isLetter(this.getCurChar()) && !this.isEnd()) {\n        this.advance();\n      }\n    } else {\n      this.skipSpace(true);\n    }\n\n    if (this.isEnd()) return EOF;\n\n    const start = this._currentIndex;\n    while (LexerUtils.isLetter(this.getCurChar()) && !this.isEnd()) {\n      this.advance();\n    }\n    const end = this._currentIndex;\n    const word = this._source.slice(start, end);\n    if (end === start) {\n      this.throwError(this.getShaderPosition(), \"no word found.\");\n    }\n    const kw = PpKeyword.get(word);\n    if (kw) {\n      const token = BaseToken.pool.get();\n      token.set(kw, word, this.getShaderPosition());\n      return token;\n    }\n\n    const token = BaseToken.pool.get();\n    token.set(EPpToken.id, word, this.getShaderPosition(word.length));\n    return token;\n  }\n\n  getShaderPosition(offset /** offset from starting point */ = 0) {\n    return ShaderLab.createPosition(\n      this._currentIndex - offset,\n      // #if _VERBOSE\n      this.line,\n      this.column - offset\n      // #endif\n    );\n  }\n\n  /**\n   * @param onToken callback when encounter a token\n   * @returns token split by space\n   */\n  override scanToken(onToken?: OnToken): BaseToken | undefined {\n    this.skipSpace(true);\n    this._skipComments();\n    if (this.isEnd()) {\n      return;\n    }\n    const start = this._currentIndex;\n    while (PpScanner._splitCharacters.test(this.getCurChar()) && !this.isEnd()) {\n      this._advance();\n    }\n\n    // Not advance\n    if (start === this._currentIndex) {\n      this._advance();\n      return this.scanToken(onToken);\n    }\n\n    const lexeme = this._source.slice(start, this._currentIndex);\n\n    const ret = BaseToken.pool.get();\n    ret.set(\n      PpKeyword.has(lexeme) ? PpKeyword.get(lexeme) : EPpToken.id,\n      lexeme,\n      this.getShaderPosition(this._currentIndex - start)\n    );\n    onToken?.(ret, this);\n    return ret;\n  }\n\n  scanQuotedString(): BaseToken<EPpToken.string_const> {\n    this.skipSpace(true);\n    if (this.getCurChar() !== '\"') {\n      this.throwError(this.getShaderPosition(), \"unexpected char, expected '\\\"'\");\n    }\n    const ShaderPosition = this.getShaderPosition();\n    this._advance();\n    const start = this._currentIndex;\n    while (this.getCurChar() !== '\"' && !this.isEnd()) this._advance();\n    if (this.isEnd()) {\n      this.throwError(this.getShaderPosition(), \"unexpected char, expected '\\\"'\");\n    }\n    const word = this._source.slice(start, this._currentIndex);\n\n    const token = BaseToken.pool.get();\n    token.set(EPpToken.string_const, word, ShaderPosition);\n    return token;\n  }\n\n  scanToChar(char: string) {\n    const source = this._source;\n    while (source[this._currentIndex] !== char && !this.isEnd()) {\n      this.advance();\n    }\n  }\n\n  scanMacroBranchChunk(): {\n    token: BaseToken<EPpToken.chunk>;\n    nextDirective: BaseToken;\n  } {\n    const start = this._currentIndex;\n    const ShaderPosition = this.getShaderPosition();\n\n    const startLvl = this.macroLvl;\n    let directive = this.scanDirective()!;\n\n    while (true) {\n      if (directive.type === EPpKeyword.endif && startLvl - 1 === this.macroLvl) break;\n      else if ([EPpKeyword.elif, EPpKeyword.else].includes(<EPpKeyword>directive.type) && startLvl === this.macroLvl)\n        break;\n      directive = this.scanDirective()!;\n    }\n\n    const chunk = this._source.slice(start, this._currentIndex - directive.lexeme.length - 1);\n    const token = BaseToken.pool.get();\n    token.set(EPpToken.chunk, chunk, ShaderPosition);\n    return { token, nextDirective: directive };\n  }\n\n  scanPairedBlock(lc: string, rc: string): void {\n    this.scanToChar(lc);\n    let level = 0;\n    const source = this._source;\n\n    do {\n      const curChar = source[this._currentIndex];\n\n      if (curChar === lc) {\n        level++;\n      } else if (curChar === rc) {\n        level--;\n      }\n      this._advance();\n    } while (level > 0);\n  }\n\n  /**\n   * @returns end ShaderPosition\n   */\n  scanRemainMacro(): ShaderPosition {\n    const startLvl = this.macroLvl;\n    let directive = this.scanDirective()!;\n    while (!this.isEnd() && (directive.type !== EPpKeyword.endif || startLvl - 1 !== this.macroLvl)) {\n      directive = this.scanDirective()!;\n    }\n    return this.getShaderPosition();\n  }\n\n  peekNonSpace() {\n    let current = this._currentIndex;\n    while (/\\s/.test(this._source[current])) {\n      current += 1;\n    }\n    return this._source[current];\n  }\n\n  scanInteger() {\n    const start = this._currentIndex;\n    while (LexerUtils.isNum(this.getCurChar())) {\n      this.advance();\n    }\n    if (this._currentIndex === start) {\n      this.throwError(this.getShaderPosition(), \"no integer found\");\n    }\n    const integer = this._source.slice(start, this._currentIndex);\n\n    const token = BaseToken.pool.get();\n    token.set(EPpToken.int_constant, integer, this.getShaderPosition());\n    return token;\n  }\n\n  /**\n   * Skip comments\n   */\n  scanLineRemain() {\n    this.skipSpace(false);\n    const start = this._currentIndex;\n\n    const comments: ShaderRange[] = [];\n\n    while (this.getCurChar() !== \"\\n\") {\n      if (this.isEnd()) {\n        const line = this._source.slice(start, this._currentIndex);\n\n        const token = BaseToken.pool.get();\n        token.set(EPpToken.line_remain, line, this.getShaderPosition(line.length));\n        return token;\n      }\n      this.advance();\n      const commentRange = this._skipComments();\n      if (commentRange) {\n        commentRange.start.index -= start;\n        commentRange.end.index -= start;\n        comments.push(commentRange);\n      }\n    }\n    let line = this._source.slice(start, this._currentIndex);\n    if (comments.length) {\n      // filter comments\n      line = PpUtils.assembleSegments(\n        comments.map((item) => ({ range: item, replace: \"\" })),\n        line\n      );\n    }\n\n    const token = BaseToken.pool.get();\n    token.set(EPpToken.line_remain, line, this.getShaderPosition(line.length));\n    return token;\n  }\n\n  private _advanceToDirective(onToken?: OnToken): BaseToken | undefined {\n    while (true) {\n      const token = this.scanToken(onToken);\n      if (token?.lexeme.startsWith(\"#\")) return token;\n      if (this.isEnd()) return;\n    }\n  }\n\n  private _skipComments(): ShaderRange | undefined {\n    if (this.peek(2) === \"//\") {\n      const start = this.getShaderPosition();\n      // single line comments\n      while (this.getCurChar() !== \"\\n\" && !this.isEnd()) {\n        this._advance();\n      }\n      return ShaderLab.createRange(start, this.getCurPosition());\n    } else if (this.peek(2) === \"/*\") {\n      const start = this.getShaderPosition();\n      //  multi-line comments\n      this.advance(2);\n      while (this.peek(2) !== \"*/\" && !this.isEnd()) {\n        this._advance();\n      }\n      this.advance(2);\n      return ShaderLab.createRange(start, this.getShaderPosition());\n    }\n  }\n}\n","import { ShaderPosition, ShaderRange } from \"../common\";\nimport LexerUtils from \"../lexer/Utils\";\nimport { MacroDefine } from \"./MacroDefine\";\nimport { BaseToken } from \"../common/BaseToken\";\nimport { EPpKeyword, EPpToken, PpConstant } from \"./constants\";\nimport PpScanner from \"./PpScanner\";\nimport { PpUtils } from \"./Utils\";\nimport { ShaderLab } from \"../ShaderLab\";\nimport { ShaderPass } from \"@galacean/engine\";\nimport { ShaderLabUtils } from \"../ShaderLabUtils\";\nimport { GSErrorName } from \"../GSError\";\n// #if _VERBOSE\nimport PpSourceMap, { BlockInfo } from \"./sourceMap\";\n// #endif\n\nexport interface ExpandSegment {\n  // #if _VERBOSE\n  block?: BlockInfo;\n  // #endif\n  rangeInBlock: ShaderRange;\n  replace: string;\n}\n\n/** @internal */\nexport class PpParser {\n  private static _definedMacros: Map<string, MacroDefine> = new Map();\n  private static _expandSegmentsStack: ExpandSegment[][] = [[]];\n\n  /** Referenced by branch macro or defined operator */\n  private static _branchMacros: Set<string> = new Set();\n\n  private static _includeMap: Record<string, string>;\n  private static _basePathForIncludeKey: string;\n\n  // #if _VERBOSE\n  static _errors: Error[] = [];\n  // #endif\n\n  static reset(includeMap: Record<string, string>, basePathForIncludeKey: string) {\n    this._definedMacros.clear();\n    this._expandSegmentsStack.length = 0;\n    this._expandSegmentsStack.push([]);\n    this._branchMacros.clear();\n    this.addPredefinedMacro(\"GL_ES\");\n    this._includeMap = includeMap;\n    this._basePathForIncludeKey = basePathForIncludeKey;\n    // #if _VERBOSE\n    this._errors.length = 0;\n    // #endif\n  }\n\n  static addPredefinedMacro(macro: string, value?: string) {\n    const tk = BaseToken.pool.get();\n    tk.set(EPpToken.id, macro);\n\n    let macroBody: BaseToken | undefined;\n    if (value) {\n      macroBody = BaseToken.pool.get();\n      macroBody.set(EPpToken.id, value);\n    }\n\n    this._definedMacros.set(macro, new MacroDefine(tk, macroBody));\n  }\n\n  static parse(scanner: PpScanner): string | null {\n    while (!scanner.isEnd()) {\n      const directive = scanner.scanDirective(this._onToken.bind(this))!;\n      if (scanner.isEnd()) break;\n      switch (directive.type) {\n        case EPpKeyword.define:\n          this._parseDefine(scanner);\n          break;\n\n        case EPpKeyword.undef:\n          this._parseUndef(scanner);\n          break;\n\n        case EPpKeyword.if:\n          this._parseIf(scanner);\n          break;\n\n        case EPpKeyword.ifndef:\n          this._parseIfNdef(scanner);\n          break;\n\n        case EPpKeyword.ifdef:\n          this._parseIfDef(scanner);\n          break;\n\n        case EPpKeyword.include:\n          this._parseInclude(scanner);\n          break;\n      }\n    }\n    // #if _VERBOSE\n    if (this._errors.length > 0) return null;\n    // #endif\n\n    return PpUtils.expand(this.expandSegments, scanner.source, scanner.sourceMap);\n  }\n\n  private static get expandSegments() {\n    return this._expandSegmentsStack[this._expandSegmentsStack.length - 1];\n  }\n\n  private static reportError(loc: ShaderRange | ShaderPosition, message: string, source: string, file: string) {\n    const error = ShaderLabUtils.createGSError(message, GSErrorName.PreprocessorError, source, loc, file);\n    // #if _VERBOSE\n    this._errors.push(error);\n    // #endif\n  }\n\n  private static _parseInclude(scanner: PpScanner) {\n    const start = scanner.getShaderPosition(8);\n\n    scanner.skipSpace(true);\n    const id = scanner.scanQuotedString();\n    let includedPath: string;\n    // builtin path\n    if (id.lexeme[0] !== \".\") {\n      includedPath = id.lexeme;\n    } else {\n      // relative path\n      // @ts-ignore\n      includedPath = new URL(id.lexeme, this._basePathForIncludeKey).href.substring(ShaderPass._shaderRootPath.length);\n    }\n\n    scanner.scanToChar(\"\\n\");\n    const end = scanner.getShaderPosition();\n    const chunk = this._includeMap[includedPath];\n    if (!chunk) {\n      this.reportError(id.location, `Shader slice \"${includedPath}\" not founded.`, scanner.source, scanner.file);\n      return;\n    }\n\n    const range = ShaderLab.createRange(start, end);\n    const expanded = this._expandMacroChunk(chunk, range, id.lexeme);\n    // #if _VERBOSE\n    const block = new BlockInfo(id.lexeme, undefined, expanded.sourceMap);\n    // #endif\n    this.expandSegments.push({\n      // #if _VERBOSE\n      block,\n      // #endif\n      rangeInBlock: range,\n      replace: expanded.content\n    });\n  }\n\n  private static _parseIfDef(scanner: PpScanner) {\n    const start = scanner.current - 6;\n\n    const id = scanner.scanWord();\n    this._addEmptyReplace(scanner, start);\n    this._branchMacros.add(id.lexeme);\n\n    const macro = this._definedMacros.get(id.lexeme);\n    scanner.skipSpace(true);\n\n    const { token: bodyChunk, nextDirective } = scanner.scanMacroBranchChunk();\n    if (!!macro) {\n      const end = nextDirective.type === EPpKeyword.endif ? scanner.getShaderPosition() : scanner.scanRemainMacro();\n\n      const expanded = this._expandMacroChunk(bodyChunk.lexeme, bodyChunk.location, scanner);\n\n      // #if _VERBOSE\n      const block = new BlockInfo(scanner.file, scanner.blockRange, expanded.sourceMap);\n      // #endif\n      const range = ShaderLab.createRange(bodyChunk.location.start, end);\n\n      this.expandSegments.push({\n        // #if _VERBOSE\n        block,\n        // #endif\n        rangeInBlock: range,\n        replace: expanded.content\n      });\n\n      return;\n    }\n\n    this.expandSegments.pop();\n    this._addEmptyReplace(scanner, start);\n\n    this._parseMacroBranch(<any>nextDirective.type, scanner);\n  }\n\n  private static _parseMacroBranch(\n    directive: EPpKeyword.elif | EPpKeyword.else | EPpKeyword.endif,\n    scanner: PpScanner\n  ) {\n    if (directive === EPpKeyword.endif) {\n      return;\n    }\n\n    const start = scanner.current;\n\n    if (directive === EPpKeyword.else) {\n      const { token: elseChunk } = scanner.scanMacroBranchChunk();\n      const expanded = this._expandMacroChunk(elseChunk.lexeme, elseChunk.location, scanner);\n      // #if _VERBOSE\n      const block = new BlockInfo(scanner.file, scanner.blockRange, expanded.sourceMap);\n      // #endif\n      const startPosition = ShaderLab.createPosition(start);\n      const range = ShaderLab.createRange(startPosition, scanner.getShaderPosition());\n      this.expandSegments.push({\n        // #if _VERBOSE\n        block,\n        // #endif\n        rangeInBlock: range,\n        replace: expanded.content\n      });\n    } else if (directive === EPpKeyword.elif) {\n      const constantExpr = this._parseConstantExpression(scanner);\n      const { token: bodyChunk, nextDirective } = scanner.scanMacroBranchChunk();\n      if (!!constantExpr) {\n        const end = nextDirective.type === EPpKeyword.endif ? scanner.current : scanner.scanRemainMacro().index;\n        const expanded = this._expandMacroChunk(bodyChunk.lexeme, bodyChunk.location, scanner);\n        // #if _VERBOSE\n        const block = new BlockInfo(scanner.file, scanner.blockRange, expanded.sourceMap);\n        // #endif\n        const startPosition = ShaderLab.createPosition(start);\n        const endPosition = ShaderLab.createPosition(end);\n        const range = ShaderLab.createRange(startPosition, endPosition);\n        this.expandSegments.push({\n          // #if _VERBOSE\n          block,\n          // #endif\n          rangeInBlock: range,\n          replace: expanded.content\n        });\n      } else {\n        // #if _VERBOSE\n        const block = new BlockInfo(scanner.file, scanner.blockRange);\n        // #endif\n        const startPosition = ShaderLab.createPosition(start);\n        const endPosition = ShaderLab.createPosition(scanner.current);\n        const range = ShaderLab.createRange(startPosition, endPosition);\n        this.expandSegments.push({\n          // #if _VERBOSE\n          block,\n          // #endif\n          rangeInBlock: range,\n          replace: \"\"\n        });\n        this._parseMacroBranch(<any>nextDirective.type, scanner);\n      }\n    }\n  }\n\n  private static _parseConstantExpression(scanner: PpScanner) {\n    scanner.skipSpace(true);\n    return this._parseLogicalOrExpression(scanner);\n  }\n\n  private static _parseLogicalOrExpression(scanner: PpScanner): PpConstant {\n    const operand1 = this._parseLogicalAndExpression(scanner);\n    const operator = scanner.peek(2);\n    if (operator && operator === \"||\") {\n      scanner.advance(2);\n      scanner.skipSpace(false);\n      const operand2 = this._parseLogicalOrExpression(scanner);\n      return operand1 || operand2;\n    }\n    return operand1;\n  }\n\n  private static _parseLogicalAndExpression(scanner: PpScanner): PpConstant {\n    const operand1 = this._parseEqualityExpression(scanner);\n    const operator = scanner.peek(2);\n    if (operator && operator === \"&&\") {\n      scanner.advance(2);\n      scanner.skipSpace(false);\n      const operand2 = this._parseLogicalAndExpression(scanner);\n      return operand1 && operand2;\n    }\n    return operand1;\n  }\n\n  private static _parseEqualityExpression(scanner: PpScanner): PpConstant {\n    const operand1 = this._parseRelationalExpression(scanner);\n    const operator = scanner.peek(2);\n    if (operator && [\"==\", \"!=\"].includes(operator)) {\n      scanner.advance(2);\n      scanner.skipSpace(false);\n      const operand2 = this._parseEqualityExpression(scanner);\n      switch (operator) {\n        case \"==\":\n          return operand1 === operand2;\n        case \"!=\":\n          return operand1 !== operand2;\n      }\n    }\n    return operand1;\n  }\n\n  private static _parseRelationalExpression(scanner: PpScanner): PpConstant {\n    const operand1 = this._parseShiftExpression(scanner) as number;\n    let operator = scanner.peek(2);\n    if (operator[1] !== \"=\") operator = operator[0];\n    if (operator && [\">\", \"<\", \">=\", \"<=\"].includes(operator)) {\n      const opPos = scanner.getShaderPosition();\n      scanner.advance(operator.length);\n      scanner.skipSpace(false);\n      const operand2 = this._parseRelationalExpression(scanner) as number;\n      if (typeof operand1 !== typeof operand2 && typeof operand1 !== \"number\") {\n        this.reportError(opPos, \"invalid operator in relation expression.\", scanner.source, scanner.file);\n        return;\n      }\n      switch (operator) {\n        case \">\":\n          return operand1 > operand2;\n        case \"<\":\n          return operand1 < operand2;\n        case \">=\":\n          return operand1 >= operand2;\n        case \"<=\":\n          return operand1 <= operand2;\n      }\n    }\n    return operand1;\n  }\n\n  private static _parseShiftExpression(scanner: PpScanner): PpConstant {\n    const operand1 = this._parseAdditiveExpression(scanner) as number;\n    const operator = scanner.peek(2);\n    if (operator && [\">>\", \"<<\"].includes(operator)) {\n      const opPos = scanner.getShaderPosition();\n      scanner.advance(2);\n      scanner.skipSpace(false);\n      const operand2 = this._parseShiftExpression(scanner) as number;\n      if (typeof operand1 !== typeof operand2 && typeof operand1 !== \"number\") {\n        this.reportError(opPos, \"invalid operator in shift expression.\", scanner.source, scanner.file);\n        return;\n      }\n      switch (operator) {\n        case \">>\":\n          return operand1 >> operand2;\n        case \"<<\":\n          return operand1 << operand2;\n      }\n    }\n\n    return operand1;\n  }\n\n  private static _parseAdditiveExpression(scanner: PpScanner): PpConstant {\n    const operand1 = this._parseMulticativeExpression(scanner) as number;\n    if ([\">\", \"<\"].includes(scanner.getCurChar())) {\n      const opPos = scanner.getShaderPosition();\n      scanner.advance();\n\n      const operator = scanner.getCurChar();\n      scanner.skipSpace(false);\n      const operand2 = this._parseAdditiveExpression(scanner) as number;\n      if (typeof operand1 !== typeof operand2 && typeof operand1 !== \"number\") {\n        this.reportError(opPos, \"invalid operator.\", scanner.source, scanner.file);\n        return false;\n      }\n      switch (operator) {\n        case \"+\":\n          return operand1 + operand2;\n        case \"-\":\n          return operand1 - operand2;\n      }\n    }\n    return operand1;\n  }\n\n  private static _parseMulticativeExpression(scanner: PpScanner): PpConstant {\n    const operand1 = this._parseUnaryExpression(scanner) as number;\n    scanner.skipSpace(false);\n    if ([\"*\", \"/\", \"%\"].includes(scanner.getCurChar())) {\n      const opPos = scanner.getShaderPosition();\n      const operator = scanner.getCurChar();\n      scanner.skipSpace(false);\n      const operand2 = this._parseMulticativeExpression(scanner) as number;\n      if (typeof operand1 !== typeof operand2 && typeof operand1 !== \"number\") {\n        this.reportError(opPos, \"invalid operator.\", scanner.source, scanner.file);\n        return;\n      }\n      switch (operator) {\n        case \"*\":\n          return operand1 * operand2;\n        case \"/\":\n          return operand1 / operand2;\n        case \"%\":\n          return operand1 % operand2;\n      }\n    }\n    return operand1;\n  }\n\n  private static _parseUnaryExpression(scanner: PpScanner) {\n    const operator = scanner.getCurChar();\n    if ([\"+\", \"-\", \"!\"].includes(operator)) {\n      scanner.advance();\n      const opPos = scanner.getShaderPosition();\n      const parenExpr = this._parseParenthesisExpression(scanner);\n      if ((operator === \"!\" && typeof parenExpr !== \"boolean\") || (operator !== \"!\" && typeof parenExpr !== \"number\")) {\n        this.reportError(opPos, \"invalid operator.\", scanner.source, scanner.file);\n      }\n\n      switch (operator) {\n        case \"+\":\n          return parenExpr;\n        case \"-\":\n          return -parenExpr;\n        case \"!\":\n          return !parenExpr;\n      }\n    }\n    return this._parseParenthesisExpression(scanner);\n  }\n\n  private static _parseParenthesisExpression(scanner: PpScanner): PpConstant {\n    if (scanner.getCurChar() === \"(\") {\n      scanner.advance();\n      scanner.skipSpace(false);\n      const ret = this._parseConstantExpression(scanner);\n      scanner.scanToChar(\")\");\n      scanner.advance();\n      return ret;\n    }\n    return this._parseConstant(scanner);\n  }\n\n  private static _parseConstant(scanner: PpScanner): PpConstant {\n    if (LexerUtils.isAlpha(scanner.getCurChar())) {\n      const id = scanner.scanWord();\n      if (id.type === EPpKeyword.defined) {\n        const withParen = scanner.peekNonSpace() === \"(\";\n        const macro = scanner.scanWord(true);\n        if (withParen) {\n          scanner.scanToChar(\")\");\n          scanner.advance();\n        }\n        this._branchMacros.add(macro.lexeme);\n        return !!this._definedMacros.get(macro.lexeme);\n      } else {\n        const macro = this._definedMacros.get(id.lexeme);\n        if (!macro) {\n          return false;\n        }\n        if (macro.isFunction) {\n          this.reportError(id.location, \"invalid function macro usage\", scanner.source, scanner.file);\n        }\n        const value = Number(macro.body.lexeme);\n        if (!Number.isInteger(value)) {\n          this.reportError(id.location, `invalid const macro: ${id.lexeme}`, scanner.source, scanner.file);\n        }\n        this._branchMacros.add(id.lexeme);\n        return value;\n      }\n    } else if (LexerUtils.isNum(scanner.getCurChar())) {\n      const integer = scanner.scanInteger();\n      return Number(integer.lexeme);\n    } else {\n      this.reportError(\n        scanner.getShaderPosition(),\n        `invalid token: ${scanner.getCurChar()}`,\n        scanner.source,\n        scanner.file\n      );\n    }\n  }\n\n  /**\n   * Recursively expand macro body and expansion.\n   */\n  private static _expandMacroChunk(\n    chunk: string,\n    loc: ShaderRange,\n    parentScanner: PpScanner\n  ): {\n    content: string;\n    // #if _VERBOSE\n    sourceMap: PpSourceMap;\n    // #endif\n  };\n  private static _expandMacroChunk(\n    chunk: string,\n    loc: ShaderRange,\n    file: string\n  ): {\n    content: string;\n    // #if _VERBOSE\n    sourceMap: PpSourceMap;\n    // #endif\n  };\n  private static _expandMacroChunk(\n    chunk: string,\n    loc: ShaderRange,\n    scannerOrFile: PpScanner | string\n  ): {\n    content: string;\n    // #if _VERBOSE\n    sourceMap: PpSourceMap;\n    // #endif\n  } {\n    this._expandSegmentsStack.push([]);\n    let scanner: PpScanner;\n    if (typeof scannerOrFile === \"string\") {\n      scanner = new PpScanner(chunk, scannerOrFile);\n    } else {\n      scanner = new PpScanner(chunk, scannerOrFile.file, loc);\n    }\n    const ret = this.parse(scanner);\n    this._expandSegmentsStack.pop();\n    return {\n      content: ret,\n      // #if _VERBOSE\n      sourceMap: scanner.sourceMap\n      // #endif\n    };\n  }\n\n  private static _parseIfNdef(scanner: PpScanner) {\n    const start = scanner.current - 7;\n\n    const id = scanner.scanWord();\n    this._addEmptyReplace(scanner, start);\n    this._branchMacros.add(id.lexeme);\n\n    const macro = this._definedMacros.get(id.lexeme);\n    const { token: bodyChunk, nextDirective } = scanner.scanMacroBranchChunk();\n    if (!macro) {\n      const end = nextDirective.type === EPpKeyword.endif ? scanner.getShaderPosition() : scanner.scanRemainMacro();\n\n      const expanded = this._expandMacroChunk(bodyChunk.lexeme, bodyChunk.location, scanner);\n      // #if _VERBOSE\n      const blockInfo = new BlockInfo(scanner.file, scanner.blockRange, expanded.sourceMap);\n      // #endif\n      const range = ShaderLab.createRange(bodyChunk.location.start, end);\n      this.expandSegments.push({\n        // #if _VERBOSE\n        block: blockInfo,\n        // #endif\n        rangeInBlock: range,\n        replace: expanded.content\n      });\n      return;\n    }\n\n    this.expandSegments.pop();\n    this._addEmptyReplace(scanner, start);\n    this._parseMacroBranch(<any>nextDirective.type, scanner);\n  }\n\n  private static _addEmptyReplace(scanner: PpScanner, start: number) {\n    // #if _VERBOSE\n    const block = new BlockInfo(scanner.file, scanner.blockRange);\n    // #endif\n    const startPosition = ShaderLab.createPosition(start);\n    const endPosition = scanner.getCurPosition();\n    const range = ShaderLab.createRange(startPosition, endPosition);\n    this.expandSegments.push({\n      // #if _VERBOSE\n      block,\n      // #endif\n      rangeInBlock: range,\n      replace: \"\"\n    });\n  }\n\n  private static _parseIf(scanner: PpScanner) {\n    const start = scanner.current - 3;\n\n    const constantExpr = this._parseConstantExpression(scanner);\n    this._addEmptyReplace(scanner, start);\n\n    const { token: bodyChunk, nextDirective } = scanner.scanMacroBranchChunk();\n    if (!!constantExpr) {\n      const end = nextDirective.type === EPpKeyword.endif ? scanner.getShaderPosition() : scanner.scanRemainMacro();\n      const expanded = this._expandMacroChunk(bodyChunk.lexeme, bodyChunk.location, scanner);\n      // #if _VERBOSE\n      const block = new BlockInfo(scanner.file, scanner.blockRange, expanded.sourceMap);\n      // #endif\n      const range = ShaderLab.createRange(bodyChunk.location.start, end);\n      this.expandSegments.push({\n        // #if _VERBOSE\n        block,\n        // #endif\n        rangeInBlock: range,\n        replace: expanded.content\n      });\n      return;\n    }\n\n    this.expandSegments.pop();\n    this._addEmptyReplace(scanner, start);\n    this._parseMacroBranch(<any>nextDirective.type, scanner);\n  }\n\n  private static _parseDefine(scanner: PpScanner) {\n    const start = scanner.getShaderPosition(7);\n    const macro = scanner.scanWord();\n\n    let end = macro.location.end;\n    if (this._definedMacros.get(macro.lexeme) && macro.lexeme.startsWith(\"GL_\")) {\n      this.reportError(macro.location, `redefined macro: ${macro.lexeme}`, scanner.source, scanner.file);\n    }\n\n    let macroArgs: BaseToken[] | undefined;\n    if (scanner.getCurChar() === \"(\") {\n      macroArgs = scanner.scanWordsUntilChar(\")\");\n      end = scanner.getShaderPosition();\n    }\n    const macroBody = scanner.scanLineRemain();\n    const range = ShaderLab.createRange(start, end);\n    const macroDefine = new MacroDefine(macro, macroBody, range, macroArgs);\n    this._definedMacros.set(macro.lexeme, macroDefine);\n\n    // #if _VERBOSE\n    const block = new BlockInfo(scanner.file, scanner.blockRange);\n    // #endif\n\n    this.expandSegments.push({\n      // #if _VERBOSE\n      block,\n      // #endif\n      rangeInBlock: ShaderLab.createRange(start, scanner.getCurPosition()),\n      replace: \"\"\n    });\n  }\n\n  private static _parseUndef(scanner: PpScanner) {\n    const start = scanner.current - 6;\n    const macro = scanner.scanWord();\n\n    // #if _VERBOSE\n    const block = new BlockInfo(scanner.file, scanner.blockRange);\n    // #endif\n    const startPosition = ShaderLab.createPosition(start);\n    const range = ShaderLab.createRange(startPosition, scanner.getCurPosition());\n    this.expandSegments.push({\n      // #if _VERBOSE\n      block,\n      // #endif\n      rangeInBlock: range,\n      replace: \"\"\n    });\n    this._definedMacros.delete(macro.lexeme);\n  }\n\n  private static _onToken(token: BaseToken, scanner: PpScanner) {\n    const macro = this._definedMacros.get(token.lexeme);\n    if (macro) {\n      let replace = macro.body.lexeme;\n      if (macro.isFunction) {\n        scanner.scanToChar(\"(\");\n        scanner.advance();\n\n        // extract parameters\n        const args: string[] = [];\n        let curLvl = 1;\n        let curIdx = scanner.current;\n        while (true) {\n          if (scanner.getCurChar() === \"(\") curLvl += 1;\n          else if (scanner.getCurChar() === \")\") {\n            curLvl -= 1;\n            if (curLvl === 0) break;\n          } else if (scanner.getCurChar() === \",\" && curLvl === 1) {\n            args.push(scanner.source.slice(curIdx, scanner.current));\n            curIdx = scanner.current + 1;\n          }\n          scanner.advance();\n        }\n        args.push(scanner.source.slice(curIdx, scanner.current));\n\n        scanner.advance();\n        const range = ShaderLab.createRange(token.location!.start, scanner.getCurPosition());\n        replace = macro.expandFunctionBody(args);\n        const expanded = this._expandMacroChunk(replace, range, scanner);\n        // #if _VERBOSE\n        const block = new BlockInfo(scanner.file, scanner.blockRange, expanded.sourceMap);\n        // #endif\n        const blockRange = ShaderLab.createRange(token.location!.start, scanner.getCurPosition());\n        this.expandSegments.push({\n          // #if _VERBOSE\n          block,\n          // #endif\n          rangeInBlock: blockRange,\n          replace: expanded.content\n        });\n      } else {\n        const expanded = this._expandMacroChunk(replace, token.location, scanner);\n        // #if _VERBOSE\n        const block = new BlockInfo(scanner.file, scanner.blockRange, expanded.sourceMap);\n        // #endif\n        const range = ShaderLab.createRange(token.location.start, token.location.end);\n        this.expandSegments.push({\n          // #if _VERBOSE\n          block,\n          // #endif\n          rangeInBlock: range,\n          replace: expanded.content\n        });\n      }\n    }\n  }\n}\n","import { PpParser } from \"./PpParser\";\nimport PpScanner from \"./PpScanner\";\n\n/** @internal */\nexport class Preprocessor {\n  static baseScanner: PpScanner;\n\n  /**\n   * Reset the parser of `Preprocessor`\n   * @param basePathForIncludeKey - the base path to resolve the relative path of `#include` directive\n   */\n  static reset(includeMap: Record<string, string>, basePathForIncludeKey: string): void {\n    PpParser.reset(includeMap, basePathForIncludeKey);\n  }\n\n  /**\n   * Should call it after reset.\n   */\n  static process(source: string): string | null {\n    this.baseScanner = new PpScanner(source);\n    return PpParser.parse(this.baseScanner);\n  }\n\n  static addPredefinedMacro(macro: string, value?: string): void {\n    PpParser.addPredefinedMacro(macro, value);\n  }\n\n  // #if _VERBOSE\n  static convertSourceIndex(index: number) {\n    return this.baseScanner.sourceMap.map(index);\n  }\n  // #endif\n}\n","import { EShaderStage } from \"../common/Enums\";\nimport { ASTNode } from \"../parser/AST\";\nimport { ESymbolType, SymbolTable, SymbolInfo } from \"../parser/symbolTable\";\nimport { IParamInfo } from \"../parser/types\";\nimport { GSErrorName } from \"../GSError\";\nimport { BaseToken } from \"../common/BaseToken\";\nimport { ShaderLab } from \"../ShaderLab\";\nimport { ShaderLabUtils } from \"../ShaderLabUtils\";\n// #if _VERBOSE\nimport { GSError } from \"../GSError\";\n// #endif\n\n/** @internal */\nexport class VisitorContext {\n  private static _singleton: VisitorContext;\n  static get context() {\n    return this._singleton;\n  }\n\n  static reset() {\n    if (!this._singleton) {\n      this._singleton = new VisitorContext();\n    }\n    this._singleton.reset();\n  }\n\n  attributeList: IParamInfo[] = [];\n  attributeStructs: ASTNode.StructSpecifier[] = [];\n  varyingStruct?: ASTNode.StructSpecifier;\n\n  stage: EShaderStage;\n\n  _referencedAttributeList: Record<string, IParamInfo & { qualifier?: string }> = Object.create(null);\n  _referencedGlobals: Record<string, SymbolInfo | ASTNode.PrecisionSpecifier> = Object.create(null);\n  _referencedVaryingList: Record<string, IParamInfo & { qualifier?: string }> = Object.create(null);\n\n  _curFn?: ASTNode.FunctionProtoType;\n\n  _passSymbolTable: SymbolTable;\n\n  private constructor() {}\n\n  get passSymbolTable() {\n    return this._passSymbolTable;\n  }\n\n  reset() {\n    this.attributeList.length = 0;\n    this.attributeStructs.length = 0;\n    this._referencedAttributeList = Object.create(null);\n    this._referencedGlobals = Object.create(null);\n    this._referencedVaryingList = Object.create(null);\n  }\n\n  isAttributeStruct(type: string) {\n    return this.attributeStructs.findIndex((item) => item.ident!.lexeme === type) !== -1;\n  }\n\n  isVaryingStruct(type: string) {\n    return this.varyingStruct?.ident?.lexeme === type;\n  }\n\n  referenceAttribute(ident: BaseToken): Error {\n    if (this._referencedAttributeList[ident.lexeme]) return;\n\n    const prop = this.attributeList.find((item) => item.ident.lexeme === ident.lexeme);\n    if (!prop) {\n      return ShaderLabUtils.createGSError(\n        `referenced attribute not found: ${ident.lexeme}`,\n        GSErrorName.CompilationError,\n        ShaderLab._processingPassText,\n        ident.location\n      );\n    }\n    this._referencedAttributeList[ident.lexeme] = prop;\n  }\n\n  referenceVarying(ident: BaseToken): Error | undefined {\n    if (this._referencedVaryingList[ident.lexeme]) return;\n\n    const prop = this.varyingStruct?.propList.find((item) => item.ident.lexeme === ident.lexeme);\n    if (!prop) {\n      return ShaderLabUtils.createGSError(\n        `referenced varying not found: ${ident.lexeme}`,\n        GSErrorName.CompilationError,\n        ShaderLab._processingPassText,\n        ident.location\n      );\n    }\n    this._referencedVaryingList[ident.lexeme] = prop;\n  }\n\n  referenceGlobal(ident: string, type: ESymbolType) {\n    if (this._referencedGlobals[ident]) return;\n\n    if (type === ESymbolType.FN) {\n      const fnEntries = this._passSymbolTable.getAllFnSymbols(ident);\n      for (let i = 0; i < fnEntries.length; i++) {\n        const key = i === 0 ? ident : ident + i;\n        this._referencedGlobals[key] = fnEntries[i];\n      }\n      return;\n    }\n    const sm = this.passSymbolTable.lookup({ ident, symbolType: type });\n    if (sm) {\n      this._referencedGlobals[ident] = sm;\n    }\n  }\n}\n","import { ENonTerminal } from \"../parser/GrammarSymbol\";\nimport { BaseToken as Token } from \"../common/BaseToken\";\nimport { EKeyword, ShaderPosition, ShaderRange } from \"../common\";\nimport { ASTNode, TreeNode } from \"../parser/AST\";\nimport { ESymbolType, FnSymbol, VarSymbol } from \"../parser/symbolTable\";\nimport { ParserUtils } from \"../ParserUtils\";\nimport { NodeChild } from \"../parser/types\";\nimport { VisitorContext } from \"./VisitorContext\";\nimport { ShaderLab } from \"../ShaderLab\";\nimport { GSErrorName } from \"../GSError\";\n// #if _VERBOSE\nimport { GSError } from \"../GSError\";\n// #endif\n\n/**\n * @internal\n * The code generator\n */\nexport class CodeGenVisitor {\n  // #if _VERBOSE\n  readonly errors: GSError[] = [];\n  // #endif\n\n  defaultCodeGen(children: NodeChild[]) {\n    let ret: string[] = [];\n    for (const child of children) {\n      if (child instanceof Token) {\n        ret.push(child.lexeme);\n      } else {\n        ret.push(child.codeGen(this));\n      }\n    }\n    return ret.join(\" \");\n  }\n\n  visitPostfixExpression(node: ASTNode.PostfixExpression) {\n    if (node.children.length === 3) {\n      const context = VisitorContext.context;\n\n      const postExpr = node.children[0] as ASTNode.PostfixExpression;\n\n      const prop = node.children[2];\n\n      if (prop instanceof Token) {\n        if (context.isAttributeStruct(<string>postExpr.type)) {\n          const error = context.referenceAttribute(prop);\n          // #if _VERBOSE\n          if (error) {\n            this.errors.push(<GSError>error);\n          }\n          // #endif\n          return prop.lexeme;\n        } else if (context.isVaryingStruct(<string>postExpr.type)) {\n          const error = context.referenceVarying(prop);\n          // #if _VERBOSE\n          if (error) {\n            this.errors.push(<GSError>error);\n          }\n          // #endif\n          return prop.lexeme;\n        }\n\n        return `${postExpr.codeGen(this)}.${prop.lexeme}`;\n      } else {\n        return `${postExpr.codeGen(this)}.${prop.codeGen(this)}`;\n      }\n    }\n    return this.defaultCodeGen(node.children);\n  }\n\n  visitVariableIdentifier(node: ASTNode.VariableIdentifier): string {\n    if (node.symbolInfo instanceof VarSymbol && node.symbolInfo.isGlobalVariable) {\n      VisitorContext.context.referenceGlobal(node.lexeme, ESymbolType.VAR);\n    }\n    return node.lexeme;\n  }\n\n  visitFunctionCall(node: ASTNode.FunctionCall): string {\n    const call = node.children[0] as ASTNode.FunctionCallGeneric;\n    if (call.fnSymbol instanceof FnSymbol) {\n      VisitorContext.context.referenceGlobal(call.fnSymbol.ident, ESymbolType.FN);\n\n      const paramList = call.children[2];\n      const paramInfoList = call.fnSymbol.astNode.protoType.parameterList;\n\n      if (paramList instanceof ASTNode.FunctionCallParameterList) {\n        const plainParams: string[] = [];\n        const params = paramList.paramNodes;\n\n        for (let i = 0; i < params.length; i++) {\n          if (\n            !VisitorContext.context.isAttributeStruct(paramInfoList[i].typeInfo.typeLexeme) &&\n            !VisitorContext.context.isVaryingStruct(paramInfoList[i].typeInfo.typeLexeme)\n          ) {\n            plainParams.push(params[i].codeGen(this));\n          }\n        }\n        return `${call.fnSymbol.ident}(${plainParams.join(\", \")})`;\n      }\n    }\n    return this.defaultCodeGen(node.children);\n  }\n\n  visitStatementList(node: ASTNode.StatementList): string {\n    const children = node.children as TreeNode[];\n    if (node.children.length === 1) {\n      return children[0].codeGen(this);\n    } else {\n      return `${children[0].codeGen(this)}\\n${children[1].codeGen(this)}`;\n    }\n  }\n\n  visitSingleDeclaration(node: ASTNode.SingleDeclaration): string {\n    const type = node.typeSpecifier.type;\n    if (typeof type === \"string\") {\n      VisitorContext.context.referenceGlobal(type, ESymbolType.STRUCT);\n    }\n    return this.defaultCodeGen(node.children);\n  }\n\n  visitGlobalVariableDeclaration(node: ASTNode.VariableDeclaration): string {\n    const fullType = node.children[0];\n    if (fullType instanceof ASTNode.FullySpecifiedType && fullType.typeSpecifier.isCustom) {\n      VisitorContext.context.referenceGlobal(<string>fullType.type, ESymbolType.STRUCT);\n    }\n    return this.defaultCodeGen(node.children);\n  }\n\n  visitDeclaration(node: ASTNode.Declaration): string {\n    const child = node.children[0];\n    if (\n      child instanceof ASTNode.InitDeclaratorList &&\n      child.typeInfo.typeLexeme === VisitorContext.context.varyingStruct?.ident?.lexeme\n    ) {\n      return \"\";\n    }\n    return this.defaultCodeGen(node.children);\n  }\n\n  visitFunctionProtoType(node: ASTNode.FunctionProtoType): string {\n    VisitorContext.context._curFn = node;\n    return this.defaultCodeGen(node.children);\n  }\n\n  visitFunctionDefinition(node: ASTNode.FunctionDefinition): string {\n    VisitorContext.context._curFn = undefined;\n    return this.defaultCodeGen(node.children);\n  }\n\n  visitFunctionParameterList(node: ASTNode.FunctionParameterList): string {\n    const params = node.parameterInfoList;\n    return params\n      .filter(\n        (item) =>\n          !VisitorContext.context.isAttributeStruct(item.typeInfo.typeLexeme) &&\n          !VisitorContext.context.isVaryingStruct(item.typeInfo.typeLexeme)\n      )\n      .map((item) => item.astNode.codeGen(this))\n      .join(\", \");\n  }\n\n  visitFunctionHeader(node: ASTNode.FunctionHeader): string {\n    const returnType = node.returnType.typeSpecifier.lexeme;\n    if (VisitorContext.context.isAttributeStruct(returnType) || VisitorContext.context.isVaryingStruct(returnType))\n      return `void ${node.ident.lexeme}(`;\n    return this.defaultCodeGen(node.children);\n  }\n\n  visitJumpStatement(node: ASTNode.JumpStatement): string {\n    const cmd = node.children[0] as Token;\n    if (cmd.type === EKeyword.RETURN) {\n      const expr = node.children[1];\n      if (expr instanceof ASTNode.Expression) {\n        const returnVar = ParserUtils.unwrapNodeByType<ASTNode.VariableIdentifier>(\n          expr,\n          ENonTerminal.variable_identifier\n        );\n        if (returnVar?.typeInfo === VisitorContext.context.varyingStruct?.ident?.lexeme) {\n          return \"\";\n        }\n        const returnFnCall = ParserUtils.unwrapNodeByType<ASTNode.FunctionCall>(expr, ENonTerminal.function_call);\n        if (returnFnCall?.type === VisitorContext.context.varyingStruct?.ident?.lexeme) {\n          return `${expr.codeGen(this)};`;\n        }\n      }\n    }\n    return this.defaultCodeGen(node.children);\n  }\n\n  visitFunctionIdentifier(node: ASTNode.FunctionIdentifier): string {\n    return this.defaultCodeGen(node.children);\n  }\n\n  protected _reportError(loc: ShaderRange | ShaderPosition, message: string): void {\n    // #if _VERBOSE\n    this.errors.push(new GSError(GSErrorName.CompilationError, message, loc, ShaderLab._processingPassText));\n    // #else\n    throw new Error(message);\n    // #endif\n  }\n}\n","import { CodeGenVisitor } from \"./CodeGenVisitor\";\nimport { ASTNode } from \"../parser/AST\";\nimport { ShaderData } from \"../parser/ShaderInfo\";\nimport { ESymbolType, FnSymbol, StructSymbol, SymbolInfo } from \"../parser/symbolTable\";\nimport { EShaderStage } from \"../common/Enums\";\nimport { IShaderInfo } from \"@galacean/engine-design\";\nimport { ICodeSegment } from \"./types\";\nimport { VisitorContext } from \"./VisitorContext\";\nimport { EKeyword } from \"../common\";\n\nconst defaultPrecision = `\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n  precision highp float;\n  precision highp int;\n#else\n  precision mediump float;\n  precision mediump int;\n#endif\n`;\n\n/**\n * @internal\n */\nexport abstract class GLESVisitor extends CodeGenVisitor {\n  protected _versionText: string = \"\";\n  protected _extensions: string = \"\";\n\n  abstract getAttributeDeclare(): ICodeSegment[];\n  abstract getVaryingDeclare(): ICodeSegment[];\n\n  visitShaderProgram(node: ASTNode.GLShaderProgram, vertexEntry: string, fragmentEntry: string): IShaderInfo {\n    // #if _VERBOSE\n    this.errors.length = 0;\n    // #endif\n    VisitorContext.reset();\n    VisitorContext.context._passSymbolTable = node.shaderData.symbolTable;\n\n    return {\n      vertex: this.vertexMain(vertexEntry, node.shaderData),\n      fragment: this._fragmentMain(fragmentEntry, node.shaderData)\n    };\n  }\n\n  vertexMain(entry: string, data: ShaderData): string {\n    const { symbolTable } = data;\n    const fnSymbol = symbolTable.lookup<FnSymbol>({ ident: entry, symbolType: ESymbolType.FN });\n    if (!fnSymbol?.astNode) throw `no entry function found: ${entry}`;\n\n    const fnNode = fnSymbol.astNode;\n    VisitorContext.context.stage = EShaderStage.VERTEX;\n\n    const returnType = fnNode.protoType.returnType;\n    if (typeof returnType.type === \"string\") {\n      const varyStruct = symbolTable.lookup<StructSymbol>({ ident: returnType.type, symbolType: ESymbolType.STRUCT });\n      if (!varyStruct) {\n        this._reportError(returnType.location, `invalid varying struct: ${returnType.type}`);\n      } else {\n        VisitorContext.context.varyingStruct = varyStruct.astNode;\n      }\n    } else if (returnType.type !== EKeyword.VOID) {\n      this._reportError(returnType.location, \"main entry can only return struct.\");\n    }\n\n    const paramList = fnNode.protoType.parameterList;\n    if (paramList?.length) {\n      for (const paramInfo of paramList) {\n        if (typeof paramInfo.typeInfo.type === \"string\") {\n          const structSymbol = symbolTable.lookup<StructSymbol>({\n            ident: paramInfo.typeInfo.type,\n            symbolType: ESymbolType.STRUCT\n          });\n          if (!structSymbol) {\n            this._reportError(paramInfo.astNode.location, `Not found attribute struct \"${paramInfo.typeInfo.type}\".`);\n            continue;\n          }\n          VisitorContext.context.attributeStructs.push(structSymbol.astNode);\n          for (const prop of structSymbol.astNode.propList) {\n            VisitorContext.context.attributeList.push(prop);\n          }\n        } else {\n          VisitorContext.context.attributeList.push(paramInfo);\n        }\n      }\n    }\n\n    const statements = fnNode.statements.codeGen(this);\n    const globalText = this._getGlobalText(data);\n\n    const attributeDeclare = this.getAttributeDeclare();\n    const varyingDeclare = this.getVaryingDeclare();\n\n    const globalCode = [...globalText, ...attributeDeclare, ...varyingDeclare]\n      .sort((a, b) => a.index - b.index)\n      .map((item) => item.text)\n      .join(\"\\n\");\n\n    VisitorContext.context.reset();\n\n    return `${this._versionText}\\n${globalCode}\\n\\nvoid main() ${statements}`;\n  }\n\n  private _fragmentMain(entry: string, data: ShaderData): string {\n    const { symbolTable } = data;\n    const fnSymbol = symbolTable.lookup<FnSymbol>({ ident: entry, symbolType: ESymbolType.FN });\n    if (!fnSymbol?.astNode) throw `no entry function found: ${entry}`;\n    const fnNode = fnSymbol.astNode;\n\n    VisitorContext.context.stage = EShaderStage.FRAGMENT;\n    const statements = fnNode.statements.codeGen(this);\n    const globalText = this._getGlobalText(data);\n    const varyingDeclare = this.getVaryingDeclare();\n\n    const globalCode = [...globalText, ...varyingDeclare]\n      .sort((a, b) => a.index - b.index)\n      .map((item) => item.text)\n      .join(\"\\n\");\n\n    VisitorContext.context.reset();\n    return `${this._versionText}\\n${this._extensions}\\n${defaultPrecision}\\n${globalCode}\\n\\nvoid main() ${statements}`;\n  }\n\n  private _getGlobalText(\n    data: ShaderData,\n    textList: ICodeSegment[] = [],\n    lastLength: number = 0,\n    _serialized: Set<string> = new Set()\n  ): ICodeSegment[] {\n    const { _referencedGlobals } = VisitorContext.context;\n\n    if (lastLength === Object.keys(_referencedGlobals).length) {\n      for (const precision of data.globalPrecisions) {\n        textList.push({ text: precision.codeGen(this), index: precision.location.start.index });\n      }\n      return textList;\n    }\n\n    lastLength = Object.keys(_referencedGlobals).length;\n    for (const ident in _referencedGlobals) {\n      const sm = _referencedGlobals[ident];\n\n      if (_serialized.has(ident)) continue;\n      _serialized.add(ident);\n\n      if (sm instanceof SymbolInfo) {\n        if (sm.symbolType === ESymbolType.VAR) {\n          textList.push({ text: `uniform ${sm.astNode.codeGen(this)}`, index: sm.astNode.location.start.index });\n        } else {\n          textList.push({ text: sm.astNode!.codeGen(this), index: sm.astNode!.location.start.index });\n        }\n      } else {\n        textList.push({ text: sm.codeGen(this), index: sm.location.start.index });\n      }\n    }\n    return this._getGlobalText(data, textList, lastLength, _serialized);\n  }\n}\n","import { GLESVisitor } from \"./GLESVisitor\";\nimport { VisitorContext } from \"./VisitorContext\";\nimport { ICodeSegment } from \"./types\";\n\nexport class GLES100Visitor extends GLESVisitor {\n  override _versionText: string = `#version 100`;\n  override _extensions: string = [\n    \"GL_EXT_shader_texture_lod\",\n    \"GL_OES_standard_derivatives\",\n    \"GL_EXT_draw_buffers\",\n    \"GL_EXT_frag_depth\"\n  ]\n    .map((e) => `#extension ${e} : enable\\n`)\n    .join(\"\");\n\n  private static _singleton: GLES100Visitor;\n  static getVisitor(): GLES100Visitor {\n    if (!this._singleton) {\n      this._singleton = new GLES100Visitor();\n    }\n    return this._singleton;\n  }\n\n  override getAttributeDeclare(): ICodeSegment[] {\n    const ret: ICodeSegment[] = [];\n    for (const item of Object.values(VisitorContext.context._referencedAttributeList)) {\n      ret.push({\n        text: `attribute ${item.typeInfo.typeLexeme} ${item.ident.lexeme};`,\n        index: item.ident.location.start.index\n      });\n    }\n    return ret;\n  }\n\n  override getVaryingDeclare(): ICodeSegment[] {\n    const ret: ICodeSegment[] = [];\n    for (const item of Object.values(VisitorContext.context._referencedVaryingList)) {\n      ret.push({\n        text: `varying ${item.typeInfo.typeLexeme} ${item.ident.lexeme};`,\n        index: item.ident.location.start.index\n      });\n    }\n    return ret;\n  }\n}\n","import { ASTNode } from \"../parser/AST\";\nimport { SymbolType } from \"../parser/types\";\nimport { BaseToken as Token } from \"../common/BaseToken\";\nimport { EKeyword, ETokenType, ShaderPosition } from \"../common\";\nimport { GLESVisitor } from \"./GLESVisitor\";\nimport { EShaderStage } from \"../common/Enums\";\nimport { ICodeSegment } from \"./types\";\nimport { VisitorContext } from \"./VisitorContext\";\nimport { ShaderLab } from \"../ShaderLab\";\n\nconst V3_GL_FragColor = \"GS_glFragColor\";\n\nexport class GLES300Visitor extends GLESVisitor {\n  override _versionText: string = \"#version 300 es\";\n\n  private static _singleton: GLES300Visitor;\n  static getVisitor(): GLES300Visitor {\n    if (!this._singleton) {\n      this._singleton = new GLES300Visitor();\n    }\n    return this._singleton;\n  }\n\n  override getAttributeDeclare(): ICodeSegment[] {\n    const ret: ICodeSegment[] = [];\n    for (const item of Object.values(VisitorContext.context._referencedAttributeList)) {\n      ret.push({\n        text: `in ${item.typeInfo.typeLexeme} ${item.ident.lexeme};`,\n        index: item.ident.location.start.index\n      });\n    }\n    return ret;\n  }\n\n  override getVaryingDeclare(): ICodeSegment[] {\n    const ret: ICodeSegment[] = [];\n    const qualifier = VisitorContext.context.stage === EShaderStage.FRAGMENT ? \"in\" : \"out\";\n    const values = Object.values(VisitorContext.context._referencedVaryingList);\n    for (let i = 0; i < values.length; i++) {\n      const item = values[i];\n      ret.push({\n        text: `${item.qualifier ?? qualifier} ${item.typeInfo.typeLexeme} ${item.ident.lexeme};`,\n        index: item.ident.location.start.index\n      });\n    }\n    return ret;\n  }\n\n  override visitFunctionIdentifier(node: ASTNode.FunctionIdentifier): string {\n    const typeSpecifier = node.children[0] as ASTNode.TypeSpecifier;\n    if (typeSpecifier.children.length !== 1) {\n      return this.defaultCodeGen(node.children);\n    }\n    let ident = node.lexeme;\n    if (node.ident === \"texture2D\" || node.ident === \"textureCube\") {\n      ident = \"texture\";\n    } else if (node.ident === \"texture2DProj\") {\n      ident = \"textureProj\";\n    } else if (VisitorContext.context.stage === EShaderStage.FRAGMENT) {\n      switch (node.ident) {\n        case \"texture2DLodEXT\":\n        case \"textureCubeLodEXT\":\n          ident = \"textureLod\";\n          break;\n        case \"texture2DGradEXT\":\n        case \"textureCubeGradEXT\":\n          ident = \"textureGrad\";\n          break;\n        case \"texture2DProjLodEXT\":\n          ident = \"textureProjLod\";\n          break;\n        case \"texture2DProjGradEXT\":\n          ident = \"textureProjGrad\";\n          break;\n        case \"gl_FragDepthEXT\":\n          ident = \"gl_FragDepth\";\n          break;\n      }\n    }\n    return ident;\n  }\n\n  override visitVariableIdentifier(node: ASTNode.VariableIdentifier): string {\n    if (VisitorContext.context.stage === EShaderStage.FRAGMENT && node.lexeme === \"gl_FragColor\") {\n      if (!VisitorContext.context._referencedVaryingList[V3_GL_FragColor]) {\n        const token = Token.pool.get();\n        token.set(ETokenType.ID, V3_GL_FragColor, ShaderLab.createPosition(0, 0, 0));\n        VisitorContext.context._referencedVaryingList[V3_GL_FragColor] = {\n          ident: token,\n          typeInfo: new SymbolType(EKeyword.VEC4, \"vec4\"),\n          qualifier: \"out\",\n          astNode: node\n        };\n      }\n      return V3_GL_FragColor;\n    }\n    return super.visitVariableIdentifier(node);\n  }\n}\n","function _extends() {\n    _extends = Object.assign || function assign(target) {\n        for (var i = 1; i < arguments.length; i++) {\n            var source = arguments[i];\n            for (var key in source) if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];\n        }\n\n        return target;\n    };\n\n    return _extends.apply(this, arguments);\n}\nexport { _extends as _ };\n","import { EKeyword } from \"../common\";\n\nexport const KeywordMap = new Map([\n  [\"RenderQueueType\", EKeyword.GS_RenderQueueType],\n  [\"BlendState\", EKeyword.GS_BlendState],\n  [\"DepthState\", EKeyword.GS_DepthState],\n  [\"StencilState\", EKeyword.GS_StencilState],\n  [\"RasterState\", EKeyword.GS_RasterState],\n  [\"EditorProperties\", EKeyword.GS_EditorProperties],\n  [\"EditorMacros\", EKeyword.GS_EditorMacros],\n  [\"Editor\", EKeyword.GS_Editor],\n  [\"Tags\", EKeyword.GS_Tags],\n  [\"VertexShader\", EKeyword.GS_VertexShader],\n  [\"FragmentShader\", EKeyword.GS_FragmentShader],\n  [\"SubShader\", EKeyword.GS_SubShader],\n  [\"Pass\", EKeyword.GS_Pass],\n  [\"BlendFactor\", EKeyword.GS_BlendFactor],\n  [\"BlendOperation\", EKeyword.GS_BlendOperation],\n  [\"Bool\", EKeyword.GS_Bool],\n  [\"Number\", EKeyword.GS_Number],\n  [\"CompareFunction\", EKeyword.GS_CompareFunction],\n  [\"StencilOperation\", EKeyword.GS_StencilOperation],\n  [\"CullMode\", EKeyword.GS_CullMode],\n  [\"true\", EKeyword.TRUE],\n  [\"false\", EKeyword.FALSE],\n  [\"UsePass\", EKeyword.GS_UsePass],\n  [\"Color\", EKeyword.GS_Color]\n]);\n","import BaseScanner from \"../common/BaseScanner\";\n\nexport default class Scanner extends BaseScanner {\n  constructor(source: string, kws: Map<string, number> = new Map()) {\n    super(source, kws);\n  }\n\n  /**\n   * split by space\n   */\n  scanWord(): string {\n    this.skipCommentsAndSpace();\n    const start = this._currentIndex;\n    while (/\\S/.test(this.getCurChar()) && !this.isEnd()) this._advance();\n    return this._source.substring(start, this._currentIndex);\n  }\n\n  scanNumber(): number {\n    this.skipCommentsAndSpace();\n    const start = this._currentIndex;\n    while (/[0-9]/.test(this.getCurChar())) this._advance();\n    if (this.getCurChar() === \".\") {\n      this._advance();\n      while (/[0-9]/.test(this.getCurChar())) this._advance();\n    }\n    return Number(this._source.substring(start, this._currentIndex));\n  }\n\n  // #if _VERBOSE\n  scanToCharacter(char: string): void {\n    while (this.getCurChar() !== char && !this.isEnd()) {\n      this._advance();\n    }\n    this._advance();\n  }\n  // #endif\n}\n","import { BaseSymbolTable, IBaseSymbol } from \"../common/BaseSymbolTable\";\n\nexport interface ISymbol extends IBaseSymbol {\n  type: number;\n  value?: any;\n}\n\nexport default class SymbolTable extends BaseSymbolTable<ISymbol> {\n  override symbolEqualCheck(s1: ISymbol, s2: ISymbol): boolean {\n    return s1.type === s2.type;\n  }\n}\n","import { SymbolTableStack } from \"../common/BaseSymbolTable\";\nimport { BaseToken } from \"../common/BaseToken\";\nimport { EKeyword, ETokenType } from \"../common\";\nimport { ShaderPosition } from \"../common\";\nimport { KeywordMap } from \"./KeywordMap\";\nimport Scanner from \"./Scanner\";\nimport SymbolTable, { ISymbol } from \"./SymbolTable\";\nimport {\n  RenderStateDataKey,\n  Color,\n  RenderQueueType,\n  CompareFunction,\n  StencilOperation,\n  BlendOperation,\n  BlendFactor,\n  CullMode,\n  Logger\n} from \"@galacean/engine\";\nimport {\n  IStatement,\n  IShaderContent,\n  ISubShaderContent,\n  IShaderPassContent,\n  IRenderStates\n} from \"@galacean/engine-design\";\nimport { GSErrorName } from \"../GSError\";\n// #if _VERBOSE\nimport { GSError } from \"../GSError\";\n// #endif\nimport { ShaderLabUtils } from \"../ShaderLabUtils\";\n\nconst EngineType = [\n  EKeyword.GS_RenderQueueType,\n  EKeyword.GS_BlendFactor,\n  EKeyword.GS_BlendOperation,\n  EKeyword.GS_Bool,\n  EKeyword.GS_Number,\n  EKeyword.GS_Color,\n  EKeyword.GS_CompareFunction,\n  EKeyword.GS_StencilOperation,\n  EKeyword.GS_CullMode\n];\n\nconst RenderStateType = [\n  EKeyword.GS_BlendState,\n  EKeyword.GS_DepthState,\n  EKeyword.GS_RasterState,\n  EKeyword.GS_StencilState\n];\n\n/**\n * @internal\n */\nexport class ShaderContentParser {\n  static _engineType = { RenderQueueType, CompareFunction, StencilOperation, BlendOperation, BlendFactor, CullMode };\n\n  static _errors: GSError[] = [];\n\n  private static _isRenderStateDeclarator(token: BaseToken) {\n    return RenderStateType.includes(token.type);\n  }\n\n  private static _isEngineType(token: BaseToken) {\n    return EngineType.includes(token.type);\n  }\n\n  private static _symbolTable: SymbolTableStack<ISymbol, SymbolTable> = new SymbolTableStack();\n\n  static reset() {\n    this._errors.length = 0;\n    this._symbolTable.clear();\n    this._newScope();\n  }\n\n  static parse(source: string): IShaderContent {\n    const start = performance.now();\n\n    const scanner = new Scanner(source, KeywordMap);\n    const ret = {\n      subShaders: [],\n      globalContents: [],\n      renderStates: { constantMap: {}, variableMap: {} }\n    } as IShaderContent;\n\n    scanner.scanText(\"Shader\");\n    ret.name = scanner.scanPairedText('\"', '\"');\n    scanner.scanText(\"{\");\n\n    scanner.skipCommentsAndSpace();\n    this._parseShaderStatements(ret, scanner);\n\n    const shaderGlobalStatements = ret.globalContents;\n    const shaderRenderStates = ret.renderStates;\n    for (let i = 0; i < ret.subShaders.length; i++) {\n      const subShader = ret.subShaders[i];\n      const curSubShaderGlobalStatements = shaderGlobalStatements.concat(subShader.globalContents);\n      const constMap = { ...shaderRenderStates.constantMap, ...subShader.renderStates.constantMap };\n      const variableMap = { ...shaderRenderStates.variableMap, ...subShader.renderStates.variableMap };\n\n      for (let i = 0; i < subShader.passes.length; i++) {\n        const pass = subShader.passes[i];\n        Object.assign(pass.renderStates.constantMap, constMap);\n        Object.assign(pass.renderStates.variableMap, variableMap);\n        if (pass.isUsePass) continue;\n        // @ts-ignore\n        const passGlobalStatements = curSubShaderGlobalStatements.concat(pass.globalContents);\n        pass.contents = passGlobalStatements.map((item) => item.content).join(\"\\n\");\n      }\n    }\n\n    Logger.info(`[content compilation] cost time ${performance.now() - start}ms`);\n\n    return ret;\n  }\n\n  private static _parseShaderStatements(ret: IShaderContent, scanner: Scanner) {\n    let braceLevel = 1;\n    let start = scanner.getCurPosition();\n\n    while (true) {\n      const word = scanner.scanToken();\n      switch (word.type) {\n        case EKeyword.GS_SubShader:\n          this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n          const subShader = this._parseSubShader(scanner);\n          ret.subShaders.push(subShader);\n          start = scanner.getCurPosition();\n          break;\n\n        case EKeyword.GS_EditorProperties:\n        case EKeyword.GS_EditorMacros:\n        case EKeyword.GS_Editor:\n          this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n          scanner.scanPairedText(\"{\", \"}\", true);\n          start = scanner.getCurPosition();\n          break;\n\n        case EKeyword.GS_RenderQueueType:\n          this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n          this._parseRenderQueueAssignment(ret, scanner);\n          start = scanner.getCurPosition();\n          break;\n\n        case ETokenType.NOT_WORD:\n          if (word.lexeme === \"{\") braceLevel += 1;\n          else if (word.lexeme === \"}\") {\n            braceLevel -= 1;\n            if (braceLevel === 0) {\n              this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n              this._symbolTable.dropScope();\n              return;\n            }\n          }\n\n        default:\n          if (ShaderContentParser._isRenderStateDeclarator(word)) {\n            this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n            this._parseRenderStateDeclarationOrAssignment(ret, word, scanner);\n            start = scanner.getCurPosition();\n            break;\n          } else if (ShaderContentParser._isEngineType(word)) {\n            this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n            this._parseVariableDeclaration(word.type, scanner);\n            start = scanner.getCurPosition();\n            break;\n          }\n      }\n    }\n  }\n\n  private static _parseRenderStateDeclarationOrAssignment(\n    ret: { renderStates: IRenderStates },\n    stateToken: BaseToken,\n    scanner: Scanner\n  ) {\n    const ident = scanner.scanToken();\n    let isDeclaration: boolean;\n    if (ident.type === ETokenType.ID) {\n      isDeclaration = true;\n      scanner.scanText(\"{\");\n    } else if (ident.lexeme === \"{\") {\n      isDeclaration = false;\n    } else if (ident.lexeme === \"=\") {\n      const variable = scanner.scanToken();\n      scanner.scanText(\";\");\n      const sm = this._symbolTable.lookup({ type: stateToken.type, ident: variable.lexeme });\n      if (!sm?.value) {\n        const error = ShaderLabUtils.createGSError(\n          `Invalid \"${stateToken.lexeme}\" variable: ${variable.lexeme}`,\n          GSErrorName.CompilationError,\n          scanner.source,\n          variable.location\n        );\n        // #if _VERBOSE\n        this._errors.push(<GSError>error);\n        return;\n        // #endif\n      }\n      const renderState = sm.value as IRenderStates;\n      Object.assign(ret.renderStates.constantMap, renderState.constantMap);\n      Object.assign(ret.renderStates.variableMap, renderState.variableMap);\n      return;\n    }\n\n    const renderState = this._parseRenderStatePropList(stateToken.lexeme, scanner);\n    if (isDeclaration) {\n      this._symbolTable.insert({ ident: ident.lexeme, type: stateToken.type, value: renderState });\n    } else {\n      Object.assign(ret.renderStates.constantMap, renderState.constantMap);\n      Object.assign(ret.renderStates.variableMap, renderState.variableMap);\n    }\n  }\n\n  private static _parseVariableDeclaration(type: number, scanner: Scanner) {\n    const token = scanner.scanToken();\n    scanner.scanText(\";\");\n    this._symbolTable.insert({ type: token.type, ident: token.lexeme });\n  }\n\n  private static _newScope() {\n    const symbolTable = new SymbolTable();\n    this._symbolTable.newScope(symbolTable);\n  }\n\n  private static _parseRenderStatePropList(state: string, scanner: Scanner): IRenderStates {\n    const ret: IRenderStates = { constantMap: {}, variableMap: {} };\n    while (scanner.getCurChar() !== \"}\") {\n      this._parseRenderStatePropItem(ret, state, scanner);\n      scanner.skipCommentsAndSpace();\n    }\n    scanner._advance();\n    return ret;\n  }\n\n  private static _parseRenderStatePropItem(ret: IRenderStates, state: string, scanner: Scanner) {\n    let renderStateProp = scanner.scanToken().lexeme;\n    const op = scanner.scanToken();\n    if (state === \"BlendState\" && renderStateProp !== \"BlendColor\" && renderStateProp !== \"AlphaToCoverage\") {\n      let idx = 0;\n      if (op.lexeme === \"[\") {\n        idx = scanner.scanNumber();\n        scanner.scanText(\"]\");\n        scanner.scanText(\"=\");\n      } else if (op.lexeme !== \"=\") {\n        const error = ShaderLabUtils.createGSError(\n          `Invalid syntax, expect character '=', but got ${op.lexeme}`,\n          GSErrorName.CompilationError,\n          scanner.source,\n          scanner.getCurPosition()\n        );\n        // #if _VERBOSE\n        this._errors.push(<GSError>error);\n        scanner.scanToCharacter(\";\");\n        return;\n        // #endif\n      }\n      renderStateProp += idx;\n    }\n\n    renderStateProp = state + renderStateProp;\n    const renderStateElementKey = RenderStateDataKey[renderStateProp];\n    if (renderStateElementKey == undefined) {\n      const error = ShaderLabUtils.createGSError(\n        `Invalid render state element ${renderStateProp}`,\n        GSErrorName.CompilationError,\n        scanner.source,\n        scanner.getCurPosition()\n      );\n      // #if _VERBOSE\n      this._errors.push(<GSError>error);\n      scanner.scanToCharacter(\";\");\n      return;\n      // #endif\n    }\n\n    scanner.skipCommentsAndSpace();\n    let value: any;\n    if (/[0-9.]/.test(scanner.getCurChar())) {\n      value = scanner.scanNumber();\n    } else {\n      const token = scanner.scanToken();\n      if (token.type === EKeyword.TRUE) value = true;\n      else if (token.type === EKeyword.FALSE) value = false;\n      else if (token.type === EKeyword.GS_Color) {\n        scanner.scanText(\"(\");\n        const args: number[] = [];\n        while (true) {\n          args.push(scanner.scanNumber());\n          scanner.skipCommentsAndSpace();\n          const peek = scanner.peek(1);\n          if (peek === \")\") {\n            scanner._advance();\n            break;\n          }\n          scanner.scanText(\",\");\n        }\n        value = new Color(...args);\n      } else if (scanner.getCurChar() === \".\") {\n        scanner._advance();\n        const engineTypeProp = scanner.scanToken();\n        value = ShaderContentParser._engineType[token.lexeme]?.[engineTypeProp.lexeme];\n        if (value == undefined) {\n          const error = ShaderLabUtils.createGSError(\n            `Invalid engine constant: ${token.lexeme}.${engineTypeProp.lexeme}`,\n            GSErrorName.CompilationError,\n            scanner.source,\n            engineTypeProp.location\n          );\n          // #if _VERBOSE\n          this._errors.push(<GSError>error);\n          scanner.scanToCharacter(\";\");\n          return;\n          // #endif\n        }\n      } else {\n        value = token.lexeme;\n      }\n    }\n    scanner.scanText(\";\");\n    if (typeof value === \"string\") {\n      ret.variableMap[renderStateElementKey] = value;\n    } else {\n      ret.constantMap[renderStateElementKey] = value;\n    }\n  }\n\n  private static _parseRenderQueueAssignment(ret: { renderStates: IRenderStates }, scanner: Scanner) {\n    scanner.scanText(\"=\");\n    const word = scanner.scanToken();\n    scanner.scanText(\";\");\n    const value = ShaderContentParser._engineType.RenderQueueType[word.lexeme];\n    const key = RenderStateDataKey.RenderQueueType;\n    if (value == undefined) {\n      ret.renderStates.variableMap[key] = word.lexeme;\n    } else {\n      ret.renderStates.constantMap[key] = value;\n    }\n  }\n\n  private static _addGlobalStatement(\n    ret: { globalContents: IStatement[] },\n    scanner: Scanner,\n    start: ShaderPosition,\n    offset: number\n  ) {\n    if (scanner.current > start.index + offset) {\n      ret.globalContents.push({\n        range: { start, end: { ...scanner.getCurPosition(), index: scanner.current - offset - 1 } },\n        content: scanner.source.substring(start.index, scanner.current - offset - 1)\n      });\n    }\n  }\n\n  private static _parseSubShader(scanner: Scanner): ISubShaderContent {\n    this._newScope();\n    const ret = {\n      passes: [],\n      globalContents: [],\n      renderStates: { constantMap: {}, variableMap: {} },\n      tags: {}\n    } as ISubShaderContent;\n    let braceLevel = 1;\n    ret.name = scanner.scanPairedText('\"', '\"');\n    scanner.scanText(\"{\");\n\n    scanner.skipCommentsAndSpace();\n    let start = scanner.getCurPosition();\n\n    while (true) {\n      const word = scanner.scanToken();\n      switch (word.type) {\n        case EKeyword.GS_Pass:\n          this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n          const pass = this._parsePass(scanner);\n          ret.passes.push(pass);\n          start = scanner.getCurPosition();\n          break;\n\n        case EKeyword.GS_RenderQueueType:\n          this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n          this._parseRenderQueueAssignment(ret, scanner);\n          start = scanner.getCurPosition();\n          break;\n\n        case EKeyword.GS_UsePass:\n          this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n          const name = scanner.scanPairedText('\"', '\"');\n          // @ts-ignore\n          ret.passes.push({ name, isUsePass: true, renderStates: { constantMap: {}, variableMap: {} }, tags: {} });\n          start = scanner.getCurPosition();\n          break;\n\n        case EKeyword.GS_Tags:\n          this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n          this._parseTags(ret, scanner);\n          start = scanner.getCurPosition();\n          break;\n\n        case ETokenType.NOT_WORD:\n          if (word.lexeme === \"{\") braceLevel += 1;\n          else if (word.lexeme === \"}\") {\n            braceLevel -= 1;\n            if (braceLevel === 0) {\n              this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n              this._symbolTable.dropScope();\n              return ret;\n            }\n          }\n\n        default:\n          if (ShaderContentParser._isRenderStateDeclarator(word)) {\n            this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n            this._parseRenderStateDeclarationOrAssignment(ret, word, scanner);\n            start = scanner.getCurPosition();\n            break;\n          } else if (ShaderContentParser._isEngineType(word)) {\n            this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n            this._parseVariableDeclaration(word.type, scanner);\n            start = scanner.getCurPosition();\n            break;\n          }\n      }\n    }\n  }\n\n  private static _parseTags(ret: { tags?: Record<string, number | string | boolean> }, scanner: Scanner) {\n    scanner.scanText(\"{\");\n    while (true) {\n      const ident = scanner.scanToken();\n      scanner.scanText(\"=\");\n      const value = scanner.scanPairedText('\"', '\"');\n      scanner.skipCommentsAndSpace();\n\n      ret.tags[ident.lexeme] = value;\n\n      if (scanner.peek(1) === \"}\") {\n        scanner._advance();\n        return;\n      }\n      scanner.scanText(\",\");\n    }\n  }\n\n  private static _parsePass(scanner: Scanner): IShaderPassContent {\n    this._newScope();\n    const ret = {\n      globalContents: [],\n      renderStates: { constantMap: {}, variableMap: {} },\n      tags: {}\n    } as IShaderPassContent & {\n      globalContents: IStatement[];\n    };\n    ret.name = scanner.scanPairedText('\"', '\"');\n    scanner.scanText(\"{\");\n    let braceLevel = 1;\n\n    scanner.skipCommentsAndSpace();\n    let start = scanner.getCurPosition();\n\n    while (true) {\n      const word = scanner.scanToken();\n      switch (word.type) {\n        case EKeyword.GS_RenderQueueType:\n          this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n          this._parseRenderQueueAssignment(ret, scanner);\n          start = scanner.getCurPosition();\n          break;\n\n        case EKeyword.GS_Tags:\n          this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n          this._parseTags(ret, scanner);\n          start = scanner.getCurPosition();\n          break;\n\n        case EKeyword.GS_VertexShader:\n        case EKeyword.GS_FragmentShader:\n          this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n          scanner.scanText(\"=\");\n          const entry = scanner.scanToken();\n          if (ret[word.lexeme]) {\n            const error = ShaderLabUtils.createGSError(\n              \"reassign main entry\",\n              GSErrorName.CompilationError,\n              scanner.source,\n              scanner.getCurPosition()\n            );\n            // #if _VERBOSE\n            Logger.error(error.toString());\n            throw error;\n            // #endif\n          }\n          const key = word.type === EKeyword.GS_VertexShader ? \"vertexEntry\" : \"fragmentEntry\";\n          ret[key] = entry.lexeme;\n          scanner.scanText(\";\");\n          start = scanner.getCurPosition();\n          break;\n\n        case ETokenType.NOT_WORD:\n          if (word.lexeme === \"{\") braceLevel += 1;\n          else if (word.lexeme === \"}\") {\n            braceLevel -= 1;\n            if (braceLevel === 0) {\n              this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n              this._symbolTable.dropScope();\n              return ret;\n            }\n          }\n\n        default:\n          if (ShaderContentParser._isRenderStateDeclarator(word)) {\n            this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n            this._parseRenderStateDeclarationOrAssignment(ret, word, scanner);\n            start = scanner.getCurPosition();\n            break;\n          } else if (ShaderContentParser._isEngineType(word)) {\n            this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n            this._parseVariableDeclaration(word.type, scanner);\n            start = scanner.getCurPosition();\n            break;\n          }\n      }\n    }\n  }\n}\n","import { Lexer } from \"./lexer\";\nimport { ShaderTargetParser } from \"./parser\";\nimport { Preprocessor } from \"./preprocessor\";\nimport { GLES100Visitor, GLES300Visitor } from \"./codeGen\";\nimport { IShaderContent, IShaderLab } from \"@galacean/engine-design\";\nimport { ShaderContentParser } from \"./contentParser\";\n// @ts-ignore\nimport { Logger, ShaderLib, ShaderMacro, ShaderPlatformTarget } from \"@galacean/engine\";\nimport { ShaderPosition, ShaderRange } from \"./common\";\n// #if _VERBOSE\nimport { GSError } from \"./GSError\";\n// #endif\nimport { PpParser } from \"./preprocessor/PpParser\";\nimport { ShaderLabUtils } from \"./ShaderLabUtils\";\nimport { IShaderProgramSource } from \"@galacean/engine-design/types/shader-lab/IShaderProgramSource\";\n\n/** @internal */\nexport class ShaderLab implements IShaderLab {\n  private static _parser = ShaderTargetParser.create();\n  private static _shaderPositionPool = ShaderLabUtils.createObjectPool(ShaderPosition);\n  private static _shaderRangePool = ShaderLabUtils.createObjectPool(ShaderRange);\n\n  // #if _VERBOSE\n  static _processingPassText?: string;\n  // #endif\n\n  static createPosition(index: number, line?: number, column?: number): ShaderPosition {\n    const position = this._shaderPositionPool.get();\n    position.set(\n      index,\n      // #if _VERBOSE\n      line,\n      column\n      // #endif\n    );\n    return position;\n  }\n\n  static createRange(start: ShaderPosition, end: ShaderPosition): ShaderRange {\n    const range = this._shaderRangePool.get();\n    range.set(start, end);\n    return range;\n  }\n\n  // #if _VERBOSE\n  /** Retrieve the compilation errors */\n  readonly errors: GSError[] = [];\n  // #endif\n\n  _parseShaderPass(\n    source: string,\n    vertexEntry: string,\n    fragmentEntry: string,\n    macros: ShaderMacro[],\n    backend: ShaderPlatformTarget,\n    platformMacros: string[],\n    basePathForIncludeKey: string\n  ): IShaderProgramSource | undefined {\n    Preprocessor.reset(ShaderLib, basePathForIncludeKey);\n    for (const macro of macros) {\n      Preprocessor.addPredefinedMacro(macro.name, macro.value);\n    }\n\n    for (let i = 0; i < platformMacros.length; i++) {\n      Preprocessor.addPredefinedMacro(platformMacros[i]);\n    }\n\n    const preprocessorStart = performance.now();\n    const ppdContent = Preprocessor.process(source);\n    // #if _VERBOSE\n    if (PpParser._errors.length > 0) {\n      for (const err of PpParser._errors) {\n        this.errors.push(<GSError>err);\n      }\n      this._logErrors();\n      return undefined;\n    }\n    // #endif\n\n    Logger.info(`[pass compilation - preprocessor]  cost time ${performance.now() - preprocessorStart}ms`);\n\n    const lexer = new Lexer(ppdContent);\n    const tokens = lexer.tokenize();\n\n    const { _parser: parser } = ShaderLab;\n\n    ShaderLab._processingPassText = ppdContent;\n    const program = parser.parse(tokens);\n\n    // #if _VERBOSE\n    for (const err of parser.errors) {\n      this.errors.push(err);\n    }\n    // #endif\n    if (!program) {\n      // #if _VERBOSE\n      this._logErrors();\n      // #endif\n      return undefined;\n    }\n\n    const codeGen =\n      backend === ShaderPlatformTarget.GLES100 ? GLES100Visitor.getVisitor() : GLES300Visitor.getVisitor();\n\n    const start = performance.now();\n    const ret = codeGen.visitShaderProgram(program, vertexEntry, fragmentEntry);\n    Logger.info(`[CodeGen] cost time: ${performance.now() - start}ms`);\n    ShaderLab._processingPassText = undefined;\n\n    // #if _VERBOSE\n    for (const err of codeGen.errors) {\n      this.errors.push(err);\n    }\n    this._logErrors();\n    // #endif\n\n    return ret;\n  }\n\n  _parseShaderContent(shaderSource: string): IShaderContent {\n    ShaderLabUtils.clearAllShaderLabObjectPool();\n    ShaderContentParser.reset();\n    const ret = ShaderContentParser.parse(shaderSource);\n\n    // #if _VERBOSE\n    this.errors.length = 0;\n    for (const error of ShaderContentParser._errors) {\n      this.errors.push(error);\n    }\n    // #endif\n\n    return ret;\n  }\n\n  // #if _VERBOSE\n  /**\n   * @internal\n   */\n  _logErrors() {\n    const errors = this.errors;\n    if (errors.length === 0 || !Logger.isEnabled) return;\n    Logger.error(`${errors.length} errors occur!`);\n    for (const err of errors) {\n      Logger.error(err.toString());\n    }\n  }\n  // #endif\n}\n","export { ShaderLab } from \"./ShaderLab\";\n\n// #if _VERBOSE\nexport { Preprocessor } from \"./preprocessor\";\nexport * from \"./GSError\";\n// #endif\n\n//@ts-ignore\nexport const version = `__buildVersion`;\n\nlet mode = \"Release\";\n// #if _VERBOSE\nmode = \"Verbose\";\n// #endif\n\nconsole.log(`Galacean ShaderLab version: ${version}. mode: ${mode}`);\n"],"names":["ShaderRange","set","start","end","dispose","ShaderPosition","index","line","column","EKeyword","KeywordTable","Map","ATTRIBUTE","CONST","BOOL","FLOAT","DOUBLE","INT","UINT","BREAK","CONTINUE","DO","ELSE","FOR","IF","WHILE","DISCARD","RETURN","BVEC2","BVEC3","BVEC4","IVEC2","IVEC3","IVEC4","UVEC2","UVEC3","UVEC4","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","IN","OUT","INOUT","SAMPLER2D","SAMPLER_CUBE","SAMPLER3D","SAMPLER2D_SHADOW","SAMPLER_CUBE_SHADOW","SAMPLER2D_ARRAY","SAMPLER2D_ARRAY_SHADOW","I_SAMPLER2D","I_SAMPLER3D","I_SAMPLER_CUBE","I_SAMPLER2D_ARRAY","U_SAMPLER2D","U_SAMPLER3D","U_SAMPLER_CUBE","U_SAMPLER2D_ARRAY","STRUCT","VOID","TRUE","FALSE","PRECISION","PRECISE","HIGHP","MEDIUMP","LOWP","INVARIANT","FLAT","SMOOTH","NOPERSPECTIVE","CENTROID","ETokenType","TypeAny","GSError","name","message","location","file","source","toString","lines","split","diagnosticMessage","lineSplit","wrappingLineCount","i","n","remarkStart","remarkEnd","length","paddingLength","remarkLength","Math","max","repeat","Error","GSErrorName","ShaderLabUtils","createObjectPool","type","pool","ClearableObjectPool","_shaderLabObjectPoolSet","push","clearAllShaderLabObjectPool","clear","createGSError","errorName","BaseToken","lexeme","arg","ShaderLab","createPosition","createRange","EOF","LexerUtils","isNum","char","numRegex","test","isLetter","letterRegex","isAlpha","alphaRegex","isNumOrLetter","numOrLetterRegex","isKeyword","tt","ID","BaseScanner","kws","_currentIndex","_column","_line","_source","_keywordsMap","getCurPosition","isEnd","getCurChar","advance","count","_advance","skipSpace","includeLineBreak","spaceChars","_spaceCharsWithBreak","_spaceChars","curChar","_checkIsIn","skipCommentsAndSpace","peek","to","offset","substring","scanText","text","throwError","pos","msgs","error","join","ScannerError","scanPairedText","left","right","balanced","skipLeading","level","scanToken","onToken","splitCharRegex","token","get","NOT_WORD","tokenType","range","checked","chars","current","Lexer","reset","tokenize","_scanWord","_scanNum","_getPosition","LEFT_ASSIGN","LEFT_OP","LE_OP","LEFT_ANGLE","RIGHT_ASSIGN","RIGHT_OP","GE_OP","RIGHT_ANGLE","INC_OP","ADD_ASSIGN","PLUS","DEC_OP","SUB_ASSIGN","DASH","EQ_OP","EQUAL","NE_OP","BANG","AND_OP","AMPERSAND","OR_OP","OR_ASSIGN","VERTICAL_BAR","XOR_OP","XOR_ASSIGN","CARET","MUL_ASSIGN","STAR","DIV_ASSIGN","SLASH","MOD_ASSIGN","PERCENT","LEFT_PAREN","RIGHT_PAREN","LEFT_BRACE","RIGHT_BRACE","LEFT_BRACKET","RIGHT_BRACKET","_scanNumAfterDot","DOT","COMMA","COLON","SEMICOLON","TILDE","QUESTION","_scanStringConst","buffer","STRING_CONST","FLOAT_CONSTANT","word","kt","_scanFloatSuffix","_scanIntegerSuffix","INT_CONSTANT","EAction","ShaderData","globalPrecisions","SymbolDataType","arraySpecifier","typeLexeme","ESymbolType","SymbolInfo","symbolType","astNode","ident","dataType","FnSymbol","protoType","returnType","typeSpecifier","FN","StructSymbol","BaseSymbolTable","_table","insert","sm","entry","symbolEqualCheck","Logger","warn","lookup","item","SymbolTableStack","_stack","newScope","scope","dropScope","pop","_scope","ret","SymbolTable","exist","newSymbol","signature","existParams","paramSig","newSymbolParams","getAllFnSymbols","fnIdent","entries","filter","VarSymbol","isGlobalVariable","initAst","VAR","SematicAnalyzer","semanticStack","acceptRule","undefined","symbolTable","_shaderData","errors","_translationRuleTable","addTranslationRule","pid","rule","getTranslationRule","loc","param","err","CompilationError","_processingPassText","shaderData","ENonTerminal","Production","goal","derivation","id","_id","Grammar","productions","startSymbol","unshift","START","getProductionList","nonTerminal","isNullableNT","NT","find","EPSILON","getProductionByID","create","_ps","map","gsl","slice","EShaderStage","isGenericType","t","BuiltinFunctionTable","BuiltinFunction","args","_returnType","getReturnType","fn","genType","_create","ALL","list","_createWithScop","getFn","realType","fun","MAT2X3","MAT3X2","MAT2X4","MAT4X2","MAT3X4","MAT4X3","FRAGMENT","BuiltinVariableTable","BuiltinVariable","createVariable","getVar","VERTEX","StateItem","production","position","lookahead","_needReInfer","lookaheadSet","Set","la","add","addLookahead","ts","has","needReInfer","symbolByOffset","canReduce","coreItem","GrammarUtils","Array","from","v","curSymbol","nextSymbol","State","cores","closured","_stateItemPool","_items","it","itemMapKey","getStateItemMapKey","createStateItem","mapId","newItem","cacheKey","getMapKey","state","closureMap","core","newState","items","ParserUtils","unwrapNodeByType","node","child","children","Token","nt","typeCompatible","ta","tb","isTerminal","printStatePool","logPath","output","console","log","values","tmp","padEnd","psItem","SymbolType","StructProp","typeInfo","TreeNode","_location","_children","codeGen","visitor","defaultCodeGen","semanticAnalyze","sa","ASTNode","_unwrapToken","TrivialNode","_ignore","ScopeBrace","scope_brace","ScopeEndBrace","scope_end_brace","JumpStatement","jump_statement","visitJumpStatement","ConditionOpt","conditionopt","ForRestStatement","for_rest_statement","Condition","condition","ForInitStatement","for_init_statement","IterationStatement","iteration_statement","SelectionStatement","selection_statement","ExpressionStatement","expression_statement","ExpressionAstNode","_type","InitializerList","initializer_list","init","Initializer","initializer","SingleDeclaration","single_declaration","fullyType","visitSingleDeclaration","FullySpecifiedType","fully_specified_type","qualifierList","TypeQualifier","type_qualifier","qualifier","SingleTypeQualifier","single_type_qualifier","BasicTypeQualifier","StorageQualifier","storage_qualifier","PrecisionQualifier","precision_qualifier","InterpolationQualifier","interpolation_qualifier","InvariantQualifier","invariant_qualifier","TypeSpecifier","type_specifier","arraySize","size","isCustom","ArraySpecifier","array_specifier","integerConstantExpr","value","IntegerConstantExpressionOperator","integer_constant_expression_operator","operator","compute","a","b","IntegerConstantExpression","integer_constant_expression","Number","symbolInfo","TypeSpecifierNonArray","type_specifier_nonarray","ExtBuiltinTypeSpecifierNonArray","ext_builtin_type_specifier_nonarray","InitDeclaratorList","init_declarator_list","singleDecl","initDeclList","IdentifierList","identifier_list","idList","Declaration","declaration","visitDeclaration","FunctionProtoType","function_prototype","visitFunctionProtoType","declarator","parameterList","parameterInfoList","FunctionDeclarator","function_declarator","header","FunctionHeader","function_header","visitFunctionHeader","FunctionParameterList","function_parameter_list","visitFunctionParameterList","decl","concat","ParameterDeclaration","parameter_declaration","varSymbol","typeQualifier","parameterDeclarator","ParameterDeclarator","parameter_declarator","SimpleStatement","simple_statement","CompoundStatement","compound_statement","CompoundStatementNoScope","compound_statement_no_scope","Statement","statement","StatementList","statement_list","visitStatementList","FunctionDefinition","function_definition","visitFunctionDefinition","statements","FunctionCall","function_call","visitFunctionCall","FunctionCallGeneric","function_call_generic","fnSymbol","functionIdentifier","isBuiltin","paramList","FunctionCallParameterList","builtinFn","function_call_parameter_list","expr","paramNodes","PrecisionSpecifier","precision_specifier","FunctionIdentifier","function_identifier","visitFunctionIdentifier","ty","AssignmentExpression","assignment_expression","AssignmentOperator","assignment_operator","Expression","expression","PrimaryExpression","primary_expression","VariableIdentifier","PostfixExpression","postfix_expression","visitPostfixExpression","UnaryOperator","unary_operator","UnaryExpression","unary_expression","MultiplicativeExpression","multiplicative_expression","exp1","exp2","AdditiveExpression","additive_expression","ShiftExpression","shift_expression","RelationalExpression","relational_expression","EqualityExpression","equality_expression","AndExpression","and_expression","ExclusiveOrExpression","exclusive_or_expression","InclusiveOrExpression","inclusive_or_expression","LogicalAndExpression","logical_and_expression","LogicalXorExpression","logical_xor_expression","LogicalOrExpression","logical_or_expression","ConditionalExpression","conditional_expression","StructSpecifier","struct_specifier","propList","declList","StructDeclarationList","struct_declaration_list","flat","StructDeclaration","struct_declaration","declaratorList","prop","StructDeclaratorList","struct_declarator_list","StructDeclarator","struct_declarator","VariableDeclaration","variable_declaration","visitGlobalVariableDeclaration","variable_identifier","builtinVar","visitVariableIdentifier","GLShaderProgram","gs_shader_program","createProductionWithOptions","options","astTypePool","opt","createProductionOptions","common","opts","addMapSetItem","k","isSubSet","sb","isActionEqual","action","target","printAction","actionInfo","Reduce","printProduction","deriv","gs","productionAndRules","global_declaration","GS_RenderQueueType","AND_ASSIGN","createGrammar","LALR1","grammar","firstSetMap","followSetMap","actionTable","gotoTable","_firstSetNTStack","generate","computeFirstSet","buildStateTable","startStateItemCore","startState","_extendState","_closure","newStates","_inferNextState","ns","_extendStateItem","productionList","newLookaheadSet","lastFirstSet","terminalExist","Utils","coreMap","stateActionTable","stateGotoTable","stateItem","Accept","_addAction","nextItem","Shift","table","terminal","_computeFirstSetForNT","idx","findIndex","computingFS","len","curNT","firstSet","succeedFirstSet","ShaderTargetParser","_traceBackStack","sematicAnalyzer","parse","tokens","performance","now","traceBackStack","nextToken","next","loopCount","info","reduceProduction","translationRule","nextState","_printStack","str","_singleton","generator","curState","MacroDefine","macro","body","_argsLexemes","_replaceRegex","RegExp","expandFunctionBody","PreprocessorError","replace","m","indexOf","isFunction","EPpToken","EPpKeyword","PpKeyword","BlockInfo","sourceFile","rangeInFile","sourceMap","MapRange","sourceBlock","rangeInBlock","generatedLoc","sourceLoc","block","getSourceIndex","generatedIdx","PpSourceMap","mapRanges","addMapRange","mapRange","curRange","rangeContains","PpUtils","expand","segments","startIdx","seg","originSlice","generatedIdxEnd","assembleSegments","PpScanner","blockRange","macroLvl","scanDirective","expandOnToken","directive","_advanceToDirective","if","ifdef","ifndef","includes","endif","scanWordsUntilChar","nonLetterChar","scanWord","skipNonLetter","getShaderPosition","kw","_skipComments","_splitCharacters","scanQuotedString","string_const","scanToChar","scanMacroBranchChunk","startLvl","elif","else","chunk","nextDirective","scanPairedBlock","lc","rc","scanRemainMacro","peekNonSpace","scanInteger","integer","int_constant","scanLineRemain","comments","line_remain","commentRange","startsWith","PpParser","includeMap","basePathForIncludeKey","_definedMacros","_expandSegmentsStack","_branchMacros","addPredefinedMacro","_includeMap","_basePathForIncludeKey","_errors","tk","macroBody","scanner","_onToken","bind","define","_parseDefine","undef","_parseUndef","_parseIf","_parseIfNdef","_parseIfDef","include","_parseInclude","expandSegments","reportError","includedPath","URL","href","ShaderPass","_shaderRootPath","expanded","_expandMacroChunk","content","_addEmptyReplace","bodyChunk","_parseMacroBranch","elseChunk","startPosition","constantExpr","_parseConstantExpression","endPosition","_parseLogicalOrExpression","operand1","_parseLogicalAndExpression","operand2","_parseEqualityExpression","_parseRelationalExpression","_parseShiftExpression","opPos","_parseAdditiveExpression","_parseMulticativeExpression","_parseUnaryExpression","parenExpr","_parseParenthesisExpression","_parseConstant","defined","withParen","isInteger","scannerOrFile","blockInfo","macroArgs","macroDefine","delete","curLvl","curIdx","Preprocessor","process","baseScanner","convertSourceIndex","VisitorContext","attributeList","attributeStructs","_referencedAttributeList","Object","_referencedGlobals","_referencedVaryingList","isAttributeStruct","isVaryingStruct","varyingStruct","referenceAttribute","referenceVarying","referenceGlobal","fnEntries","_passSymbolTable","key","passSymbolTable","context","CodeGenVisitor","postExpr","call","paramInfoList","plainParams","params","fullType","_curFn","cmd","returnVar","returnFnCall","_reportError","defaultPrecision","GLESVisitor","_versionText","_extensions","visitShaderProgram","vertexEntry","fragmentEntry","vertex","vertexMain","fragment","_fragmentMain","data","fnNode","stage","varyStruct","paramInfo","structSymbol","globalText","_getGlobalText","attributeDeclare","getAttributeDeclare","varyingDeclare","getVaryingDeclare","globalCode","sort","textList","lastLength","_serialized","keys","precision","GLES100Visitor","e","getVisitor","V3_GL_FragColor","GLES300Visitor","KeywordMap","GS_BlendState","GS_DepthState","GS_StencilState","GS_RasterState","GS_EditorProperties","GS_EditorMacros","GS_Editor","GS_Tags","GS_VertexShader","GS_FragmentShader","GS_SubShader","GS_Pass","GS_BlendFactor","GS_BlendOperation","GS_Bool","GS_Number","GS_CompareFunction","GS_StencilOperation","GS_CullMode","GS_UsePass","GS_Color","Scanner","scanNumber","scanToCharacter","s1","s2","EngineType","RenderStateType","ShaderContentParser","_isRenderStateDeclarator","_isEngineType","_symbolTable","_newScope","subShaders","globalContents","renderStates","constantMap","variableMap","_parseShaderStatements","shaderGlobalStatements","shaderRenderStates","subShader","curSubShaderGlobalStatements","constMap","passes","pass","assign","isUsePass","passGlobalStatements","contents","braceLevel","_addGlobalStatement","_parseSubShader","_parseRenderQueueAssignment","_parseRenderStateDeclarationOrAssignment","_parseVariableDeclaration","stateToken","isDeclaration","variable","renderState","_parseRenderStatePropList","_parseRenderStatePropItem","renderStateProp","op","renderStateElementKey","RenderStateDataKey","Color","engineTypeProp","_engineType","RenderQueueType","tags","_parsePass","_parseTags","CompareFunction","StencilOperation","BlendOperation","BlendFactor","CullMode","_parseShaderPass","macros","backend","platformMacros","ShaderLib","preprocessorStart","ppdContent","_logErrors","lexer","parser","_parser","program","ShaderPlatformTarget","GLES100","_parseShaderContent","shaderSource","isEnabled","_shaderPositionPool","_shaderRangePool","version","mode"],"mappings":"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"}