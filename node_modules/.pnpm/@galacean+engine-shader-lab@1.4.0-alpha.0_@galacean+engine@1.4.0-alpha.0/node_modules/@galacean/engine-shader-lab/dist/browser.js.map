{"version":3,"file":"browser.js","sources":["../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_array_like_to_array.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_create_for_of_iterator_helper_loose.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_set_prototype_of.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_inherits.js","../../../node_modules/.pnpm/tslib@2.8.1/node_modules/tslib/tslib.es6.mjs","../src/common/ShaderRange.ts","../src/common/ShaderPosition.ts","../src/common/Keywords.ts","../src/common/types.ts","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_instanceof.js","../src/ShaderLabUtils.ts","../src/common/BaseToken.ts","../src/lexer/Utils.ts","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_create_class.js","../src/GSError.ts","../src/common/BaseScanner.ts","../src/lexer/Lexer.ts","../src/lalr/types.ts","../src/parser/ShaderInfo.ts","../src/parser/symbolTable/SymbolDataType.ts","../src/parser/symbolTable/SymbolInfo.ts","../src/parser/symbolTable/FnSymbol.ts","../src/parser/symbolTable/StructSymbol.ts","../src/common/BaseSymbolTable.ts","../src/parser/symbolTable/SymbolTable.ts","../src/parser/symbolTable/VarSymbol.ts","../src/parser/SemanticAnalyzer.ts","../src/parser/GrammarSymbol.ts","../src/lalr/Production.ts","../src/parser/Grammar.ts","../src/parser/types.ts","../src/parser/AST.ts","../src/lalr/Utils.ts","../src/lalr/CFG.ts","../src/lalr/StateItem.ts","../src/lalr/State.ts","../src/lalr/LALR1.ts","../src/parser/ShaderTargetParser.ts","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_type_of.js","../src/preprocessor/MacroDefine.ts","../src/preprocessor/constants.ts","../src/preprocessor/Utils.ts","../src/preprocessor/PpScanner.ts","../src/preprocessor/PpParser.ts","../src/preprocessor/Preprocessor.ts","../src/ParserUtils.ts","../src/codeGen/VisitorContext.ts","../src/codeGen/CodeGenVisitor.ts","../src/common/Enums.ts","../src/codeGen/GLESVisitor.ts","../src/codeGen/GLES100.ts","../src/codeGen/GLES300.ts","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_is_native_reflect_construct.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_construct.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_extends.js","../src/contentParser/KeywordMap.ts","../src/contentParser/Scanner.ts","../src/contentParser/SymbolTable.ts","../src/contentParser/ShaderContentParser.ts","../src/ShaderLab.ts","../src/index.ts"],"sourcesContent":["function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n","import { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _create_for_of_iterator_helper_loose(o, allowArrayLike) {\n    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n    if (it) return (it = it.call(o)).next.bind(it);\n    // Fallback for engines without symbol support\n    if (Array.isArray(o) || (it = _unsupported_iterable_to_array(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n        if (it) o = it;\n\n        var i = 0;\n\n        return function() {\n            if (i >= o.length) return { done: true };\n\n            return { done: false, value: o[i++] };\n        };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _create_for_of_iterator_helper_loose as _ };\n","function _set_prototype_of(o, p) {\n    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {\n        o.__proto__ = p;\n\n        return o;\n    };\n\n    return _set_prototype_of(o, p);\n}\nexport { _set_prototype_of as _ };\n","import { _ as _set_prototype_of } from \"./_set_prototype_of.js\";\n\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });\n\n    if (superClass) _set_prototype_of(subClass, superClass);\n}\nexport { _inherits as _ };\n","/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nvar ownKeys = function(o) {\n  ownKeys = Object.getOwnPropertyNames || function (o) {\n    var ar = [];\n    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n    return ar;\n  };\n  return ownKeys(o);\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r, s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n        }\n        else s |= 1;\n      }\n      catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\n  if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\n      return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\n          return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\n      });\n  }\n  return path;\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __esDecorate,\n  __runInitializers,\n  __propKey,\n  __setFunctionName,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n  __rewriteRelativeImportExtension,\n};\n","import { IPoolElement } from \"@galacean/engine\";\nimport { ShaderPosition } from \"./ShaderPosition\";\n\nexport class ShaderRange implements IPoolElement {\n  public start: ShaderPosition;\n  public end: ShaderPosition;\n\n  set(start: ShaderPosition, end: ShaderPosition) {\n    this.start = start;\n    this.end = end;\n  }\n\n  dispose(): void {\n    this.start.dispose();\n    this.end.dispose();\n  }\n}\n","import { IPoolElement } from \"@galacean/engine\";\n\nexport class ShaderPosition implements IPoolElement {\n  index: number;\n  // #if _VERBOSE\n  line: number;\n  column: number;\n  // #endif\n\n  set(\n    index: number,\n    // #if _VERBOSE\n    line: number,\n    column: number\n    // #endif\n  ) {\n    this.index = index;\n    // #if _VERBOSE\n    this.line = line;\n    this.column = column;\n    // #endif\n  }\n\n  dispose(): void {\n    this.index = 0;\n    // #if _VERBOSE\n    this.line = 0;\n    this.column = 0;\n    // #endif\n  }\n}\n","export enum EKeyword {\n  ATTRIBUTE = 0,\n  CONST,\n  BOOL,\n  FLOAT,\n  DOUBLE,\n  INT,\n  UINT,\n  BREAK,\n  CONTINUE,\n  DO,\n  ELSE,\n  FOR,\n  IF,\n  WHILE,\n  DISCARD,\n  RETURN,\n  BVEC2,\n  BVEC3,\n  BVEC4,\n  IVEC2,\n  IVEC3,\n  IVEC4,\n  UVEC2,\n  UVEC3,\n  UVEC4,\n  VEC2,\n  VEC3,\n  VEC4,\n  MAT2,\n  MAT3,\n  MAT4,\n  MAT2X3,\n  MAT2X4,\n  MAT3X2,\n  MAT3X4,\n  MAT4X2,\n  MAT4X3,\n  IN,\n  OUT,\n  INOUT,\n  CENTROID,\n  SAMPLER2D,\n  SAMPLER3D,\n  SAMPLER_CUBE,\n  SAMPLER2D_SHADOW,\n  SAMPLER_CUBE_SHADOW,\n  SAMPLER2D_ARRAY,\n  SAMPLER2D_ARRAY_SHADOW,\n  I_SAMPLER2D,\n  I_SAMPLER3D,\n  I_SAMPLER_CUBE,\n  I_SAMPLER2D_ARRAY,\n  U_SAMPLER2D,\n  U_SAMPLER3D,\n  U_SAMPLER_CUBE,\n  U_SAMPLER2D_ARRAY,\n  STRUCT,\n  VOID,\n  TRUE,\n  FALSE,\n  PRECISION,\n  PRECISE,\n  HIGHP,\n  MEDIUMP,\n  LOWP,\n  INVARIANT,\n  SMOOTH,\n  FLAT,\n  NOPERSPECTIVE,\n\n  // galacean internals\n  GS_RenderQueueType,\n  GS_BlendState,\n  GS_DepthState,\n  GS_StencilState,\n  GS_RasterState,\n  GS_EditorProperties,\n  GS_EditorMacros,\n  GS_Editor,\n  GS_Tags,\n  GS_ReplacementTag,\n  GS_LightMode,\n  GS_PipelineStage,\n  GS_VertexShader,\n  GS_FragmentShader,\n  GS_SubShader,\n  GS_Pass,\n  GS_BlendFactor,\n  GS_BlendOperation,\n  GS_Bool,\n  GS_Number,\n  GS_Color,\n  GS_CompareFunction,\n  GS_StencilOperation,\n  GS_CullMode,\n  GS_UsePass\n}\n","import { EKeyword } from \"./Keywords\";\n\nexport const KeywordTable = new Map<string, EKeyword>([\n  [\"attribute\", EKeyword.ATTRIBUTE],\n  [\"const\", EKeyword.CONST],\n  [\"bool\", EKeyword.BOOL],\n  [\"float\", EKeyword.FLOAT],\n  [\"double\", EKeyword.DOUBLE],\n  [\"int\", EKeyword.INT],\n  [\"uint\", EKeyword.UINT],\n  [\"break\", EKeyword.BREAK],\n  [\"continue\", EKeyword.CONTINUE],\n  [\"do\", EKeyword.DO],\n  [\"else\", EKeyword.ELSE],\n  [\"for\", EKeyword.FOR],\n  [\"if\", EKeyword.IF],\n  [\"while\", EKeyword.WHILE],\n  [\"discard\", EKeyword.DISCARD],\n  [\"return\", EKeyword.RETURN],\n  [\"bvec2\", EKeyword.BVEC2],\n  [\"bvec3\", EKeyword.BVEC3],\n  [\"bvec4\", EKeyword.BVEC4],\n  [\"ivec2\", EKeyword.IVEC2],\n  [\"ivec3\", EKeyword.IVEC3],\n  [\"ivec4\", EKeyword.IVEC4],\n  [\"uvec2\", EKeyword.UVEC2],\n  [\"uvec3\", EKeyword.UVEC3],\n  [\"uvec4\", EKeyword.UVEC4],\n  [\"vec2\", EKeyword.VEC2],\n  [\"vec3\", EKeyword.VEC3],\n  [\"vec4\", EKeyword.VEC4],\n  [\"mat2\", EKeyword.MAT2],\n  [\"mat3\", EKeyword.MAT3],\n  [\"mat4\", EKeyword.MAT4],\n  [\"in\", EKeyword.IN],\n  [\"out\", EKeyword.OUT],\n  [\"inout\", EKeyword.INOUT],\n  [\"sampler2D\", EKeyword.SAMPLER2D],\n  [\"samplerCube\", EKeyword.SAMPLER_CUBE],\n  [\"sampler3D\", EKeyword.SAMPLER3D],\n  [\"sampler2DShadow\", EKeyword.SAMPLER2D_SHADOW],\n  [\"samplerCubeShadow\", EKeyword.SAMPLER_CUBE_SHADOW],\n  [\"sampler2DArray\", EKeyword.SAMPLER2D_ARRAY],\n  [\"sampler2DArrayShadow\", EKeyword.SAMPLER2D_ARRAY_SHADOW],\n  [\"isampler2D\", EKeyword.I_SAMPLER2D],\n  [\"isampler3D\", EKeyword.I_SAMPLER3D],\n  [\"isamplerCube\", EKeyword.I_SAMPLER_CUBE],\n  [\"isampler2DArray\", EKeyword.I_SAMPLER2D_ARRAY],\n  [\"usampler2D\", EKeyword.U_SAMPLER2D],\n  [\"usampler3D\", EKeyword.U_SAMPLER3D],\n  [\"usamplerCube\", EKeyword.U_SAMPLER_CUBE],\n  [\"usampler2DArray\", EKeyword.U_SAMPLER2D_ARRAY],\n  [\"struct\", EKeyword.STRUCT],\n  [\"void\", EKeyword.VOID],\n  [\"true\", EKeyword.TRUE],\n  [\"false\", EKeyword.FALSE],\n  [\"precision\", EKeyword.PRECISION],\n  [\"precise\", EKeyword.PRECISE],\n  [\"highp\", EKeyword.HIGHP],\n  [\"mediump\", EKeyword.MEDIUMP],\n  [\"lowp\", EKeyword.LOWP],\n  [\"invariant\", EKeyword.INVARIANT],\n  [\"flat\", EKeyword.FLAT],\n  [\"smooth\", EKeyword.SMOOTH],\n  [\"noperspective\", EKeyword.NOPERSPECTIVE],\n  [\"centroid\", EKeyword.CENTROID]\n]);\n\nexport enum ETokenType {\n  ID = 1000,\n  FLOAT_CONSTANT,\n  INT_CONSTANT,\n  STRING_CONST,\n  /** << */\n  LEFT_OP,\n  /** \\>> */\n  RIGHT_OP,\n  /** ++ */\n  INC_OP,\n  /** -- */\n  DEC_OP,\n  /** <= */\n  LE_OP,\n  /** \\>= */\n  GE_OP,\n  /** == */\n  EQ_OP,\n  /** != */\n  NE_OP,\n  /** && */\n  AND_OP,\n  /** || */\n  OR_OP,\n  /** ^^ */\n  XOR_OP,\n  /** *= */\n  MUL_ASSIGN,\n  /** /= */\n  DIV_ASSIGN,\n  /** += */\n  ADD_ASSIGN,\n  /** -= */\n  SUB_ASSIGN,\n  /** %= */\n  MOD_ASSIGN,\n  /** <<= */\n  LEFT_ASSIGN,\n  /** >>= */\n  RIGHT_ASSIGN,\n  /** &= */\n  AND_ASSIGN,\n  /** ^= */\n  XOR_ASSIGN,\n  /** |= */\n  OR_ASSIGN,\n  /** ( */\n  LEFT_PAREN,\n  /** ) */\n  RIGHT_PAREN,\n  /** [ */\n  LEFT_BRACKET,\n  /** ] */\n  RIGHT_BRACKET,\n  /** { */\n  LEFT_BRACE,\n  /** } */\n  RIGHT_BRACE,\n  /** . */\n  DOT,\n  /** , */\n  COMMA,\n  COLON,\n  /** = */\n  EQUAL,\n  SEMICOLON,\n  /** ! */\n  BANG,\n  /** \\- */\n  DASH,\n  /** ~ */\n  TILDE,\n  PLUS,\n  /** \\* */\n  STAR,\n  /** / */\n  SLASH,\n  /** % */\n  PERCENT,\n  /** < */\n  LEFT_ANGLE,\n  /** \\> */\n  RIGHT_ANGLE,\n  VERTICAL_BAR,\n  /** ^ */\n  CARET,\n  /** & */\n  AMPERSAND,\n  /** ? */\n  QUESTION,\n\n  NOT_WORD,\n\n  /** ε */\n  EPSILON = 1998,\n  EOF = 1999\n}\n\nexport const TypeAny = 3000;\n\nexport type GalaceanDataType =\n  | EKeyword.VOID\n  | EKeyword.FLOAT\n  | EKeyword.BOOL\n  | EKeyword.INT\n  | EKeyword.UINT\n  | EKeyword.VEC2\n  | EKeyword.VEC3\n  | EKeyword.VEC4\n  | EKeyword.BVEC2\n  | EKeyword.BVEC3\n  | EKeyword.BVEC4\n  | EKeyword.IVEC2\n  | EKeyword.IVEC3\n  | EKeyword.IVEC4\n  | EKeyword.UVEC2\n  | EKeyword.UVEC3\n  | EKeyword.UVEC4\n  | EKeyword.MAT2\n  | EKeyword.MAT3\n  | EKeyword.MAT4\n  | EKeyword.MAT2X3\n  | EKeyword.MAT2X4\n  | EKeyword.MAT3X2\n  | EKeyword.MAT3X4\n  | EKeyword.MAT4X2\n  | EKeyword.MAT4X3\n  | EKeyword.SAMPLER2D\n  | EKeyword.SAMPLER3D\n  | EKeyword.SAMPLER_CUBE\n  | EKeyword.SAMPLER2D_SHADOW\n  | EKeyword.SAMPLER_CUBE_SHADOW\n  | EKeyword.SAMPLER2D_ARRAY\n  | EKeyword.SAMPLER2D_ARRAY_SHADOW\n  | EKeyword.I_SAMPLER2D\n  | EKeyword.I_SAMPLER3D\n  | EKeyword.I_SAMPLER_CUBE\n  | EKeyword.I_SAMPLER2D_ARRAY\n  | EKeyword.U_SAMPLER2D\n  | EKeyword.U_SAMPLER3D\n  | EKeyword.U_SAMPLER_CUBE\n  | EKeyword.U_SAMPLER2D_ARRAY\n  | typeof TypeAny\n  | string;\n\nexport type TokenType = ETokenType | EKeyword;\n","function _instanceof(left, right) {\n    if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n        return !!right[Symbol.hasInstance](left);\n    } else return left instanceof right;\n}\nexport { _instanceof as _ };\n","import { ClearableObjectPool, IPoolElement } from \"@galacean/engine\";\nimport { GSErrorName } from \"./GSError\";\nimport { ShaderRange } from \"./common/ShaderRange\";\nimport { ShaderPosition } from \"./common/ShaderPosition\";\n// #if _VERBOSE\nimport { GSError } from \"./GSError\";\n// #endif\n\nexport class ShaderLabUtils {\n  private static _shaderLabObjectPoolSet: ClearableObjectPool<IPoolElement>[] = [];\n\n  static createObjectPool<T extends IPoolElement>(type: new () => T) {\n    const pool = new ClearableObjectPool<T>(type);\n    ShaderLabUtils._shaderLabObjectPoolSet.push(pool);\n    return pool;\n  }\n\n  static clearAllShaderLabObjectPool() {\n    for (let i = 0, n = ShaderLabUtils._shaderLabObjectPoolSet.length; i < n; i++) {\n      ShaderLabUtils._shaderLabObjectPoolSet[i].clear();\n    }\n  }\n\n  static createGSError(\n    message: string,\n    errorName: GSErrorName,\n    source: string,\n    location: ShaderRange | ShaderPosition,\n    file?: string\n  ): Error {\n    // #if _VERBOSE\n    return new GSError(errorName, message, location, source, file);\n    // #else\n    return new Error(`[${errorName}]: ${message}`);\n    // #endif\n  }\n}\n","import { ETokenType } from \"./types\";\nimport { ShaderRange, ShaderPosition } from \".\";\nimport { ShaderLab } from \"../ShaderLab\";\nimport { IPoolElement } from \"@galacean/engine\";\nimport { ShaderLabUtils } from \"../ShaderLabUtils\";\n\nexport class BaseToken<T extends number = number> implements IPoolElement {\n  static pool = ShaderLabUtils.createObjectPool(BaseToken);\n\n  type: T;\n  lexeme: string;\n  location: ShaderRange;\n\n  set(type: T, lexeme: string, start?: ShaderPosition);\n  set(type: T, lexeme: string, location?: ShaderRange);\n  set(type: T, lexeme: string, arg?: ShaderRange | ShaderPosition) {\n    this.type = type;\n    this.lexeme = lexeme;\n    if (arg) {\n      if (arg instanceof ShaderRange) {\n        this.location = arg as ShaderRange;\n      } else {\n        const end = ShaderLab.createPosition(\n          arg.index + lexeme.length,\n          // #if _VERBOSE\n          arg.line,\n          arg.column + lexeme.length\n          // #endif\n        );\n        this.location = ShaderLab.createRange(arg, end);\n      }\n    }\n  }\n\n  dispose(): void {}\n}\n\nexport const EOF = new BaseToken();\nEOF.set(ETokenType.EOF, \"/EOF\");\n","import { ETokenType, TokenType } from \"../common/types\";\n\nexport default class LexerUtils {\n  static numRegex = /\\d/;\n  static letterRegex = /\\w/;\n  static alphaRegex = /[a-zA-Z_]/;\n  static numOrLetterRegex = /(\\d|\\w)/;\n\n  static isNum(char: string) {\n    return this.numRegex.test(char);\n  }\n\n  static isLetter(char: string) {\n    return this.letterRegex.test(char);\n  }\n\n  static isAlpha(char: string) {\n    return this.alphaRegex.test(char);\n  }\n\n  static isNumOrLetter(char: string) {\n    return this.numOrLetterRegex.test(char);\n  }\n\n  static isKeyword(tt: TokenType) {\n    return tt < ETokenType.ID;\n  }\n}\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","// #if _VERBOSE\nimport { ShaderPosition } from \"./common/ShaderPosition\";\nimport { ShaderRange } from \"./common/ShaderRange\";\n\nexport class GSError extends Error {\n  static wrappingLineCount = 2;\n\n  constructor(\n    name: GSErrorName,\n    message: string,\n    public readonly location: ShaderRange | ShaderPosition,\n    public readonly source: string,\n    public readonly file?: string\n  ) {\n    super(message);\n    this.name = name;\n  }\n\n  override toString(): string {\n    let start: ShaderPosition, end: ShaderPosition;\n    const { message, location, source } = this;\n    if (!source) {\n      return message;\n    }\n\n    if (location instanceof ShaderPosition) {\n      start = end = location;\n    } else {\n      start = location.start;\n      end = location.end;\n    }\n    const lines = source.split(\"\\n\");\n\n    let diagnosticMessage = `${this.name}: ${message}\\n\\n`;\n    const lineSplit = \"|···\";\n\n    const wrappingLineCount = GSError.wrappingLineCount;\n    for (let i = start.line - wrappingLineCount, n = end.line + wrappingLineCount; i <= n; i++) {\n      const line = lines[i];\n      diagnosticMessage += lineSplit + `${line}\\n`;\n\n      if (i < start.line || i > end.line) continue;\n\n      let remarkStart = 0;\n      let remarkEnd = line.length;\n      let paddingLength = lineSplit.length;\n      if (i === start.line) {\n        remarkStart = start.column;\n        paddingLength += start.column;\n      } else if (i === end.line) {\n        remarkEnd = end.column;\n      }\n      const remarkLength = Math.max(remarkEnd - remarkStart, 1);\n\n      diagnosticMessage += \" \".repeat(paddingLength) + \"^\".repeat(remarkLength) + \"\\n\";\n    }\n\n    return diagnosticMessage;\n  }\n}\n\n// #endif\nexport enum GSErrorName {\n  PreprocessorError = \"PreprocessorError\",\n  CompilationError = \"CompilationError\",\n  ScannerError = \"ScannerError\"\n}\n","import { ETokenType, ShaderRange, ShaderPosition } from \".\";\nimport { GSErrorName } from \"../GSError\";\nimport { ShaderLab } from \"../ShaderLab\";\nimport { BaseToken } from \"./BaseToken\";\nimport { ShaderLabUtils } from \"../ShaderLabUtils\";\n\nexport type OnToken = (token: BaseToken, scanner: BaseScanner) => void;\n\n/**\n * @internal\n */\nexport default class BaseScanner {\n  private static _spaceCharsWithBreak = [\" \", \"\\t\", \"\\n\"];\n  private static _spaceChars = [\" \", \"\\t\"];\n  private static _checkIsIn(checked: string, chars: string[]): boolean {\n    for (let i = 0; i < chars.length; i++) {\n      if (checked === chars[i]) {\n        return true;\n      }\n      continue;\n    }\n    return false;\n  }\n\n  protected _currentIndex = 0;\n  protected _source: string;\n\n  // #if _VERBOSE\n  protected _column = 0;\n  protected _line = 0;\n  // #endif\n\n  get current(): number {\n    return this._currentIndex;\n  }\n\n  get source(): string {\n    return this._source;\n  }\n\n  getCurPosition(): ShaderPosition {\n    return ShaderLab.createPosition(\n      this._currentIndex,\n      // #if _VERBOSE\n      this._line,\n      this._column\n      // #endif\n    );\n  }\n\n  // #if _VERBOSE\n  get line() {\n    return this._line;\n  }\n\n  get column() {\n    return this._column;\n  }\n  // #endif\n\n  protected readonly _keywordsMap: Map<string, number>;\n\n  constructor(source: string, kws: Map<string, number> = new Map()) {\n    this._source = source;\n    this._keywordsMap = kws;\n  }\n\n  isEnd(): boolean {\n    return this._currentIndex >= this._source.length;\n  }\n\n  getCurChar(): string {\n    return this._source[this._currentIndex];\n  }\n\n  advance(count = 1): void {\n    for (let i = 0; i < count; i++) {\n      this._advance();\n    }\n  }\n\n  _advance(): void {\n    if (this.isEnd()) {\n      return;\n    }\n\n    // #if _VERBOSE\n    if (this.getCurChar() === \"\\n\") {\n      this._line += 1;\n      this._column = 0;\n    } else {\n      this._column += 1;\n    }\n    // #endif\n\n    this._currentIndex++;\n  }\n\n  skipSpace(includeLineBreak: boolean): void {\n    const spaceChars = includeLineBreak ? BaseScanner._spaceCharsWithBreak : BaseScanner._spaceChars;\n    let curChar = this.getCurChar();\n\n    while (BaseScanner._checkIsIn(curChar, spaceChars)) {\n      this._advance();\n      curChar = this.getCurChar();\n    }\n  }\n\n  skipCommentsAndSpace(): ShaderRange | undefined {\n    this.skipSpace(true);\n    if (this.peek(2) === \"//\") {\n      const start = this.getCurPosition();\n      this.advance(2);\n      // single line comments\n      while (this.getCurChar() !== \"\\n\") this._advance();\n      this.skipCommentsAndSpace();\n      return ShaderLab.createRange(start, this.getCurPosition());\n    } else if (this.peek(2) === \"/*\") {\n      const start = this.getCurPosition();\n      this.advance(2);\n      //  multi-line comments\n      while (this.peek(2) !== \"*/\" && !this.isEnd()) this._advance();\n      this.advance(2);\n      this.skipCommentsAndSpace();\n      return ShaderLab.createRange(start, this.getCurPosition());\n    }\n  }\n\n  peek(to: number): string {\n    const offset = this._currentIndex;\n    return this._source.substring(offset, offset + to);\n  }\n\n  scanText(text: string) {\n    this.skipCommentsAndSpace();\n    const peek = this.peek(text.length);\n    if (peek !== text) {\n      this.throwError(this.getCurPosition(), `Expect text \"${text}\", but got \"${peek}\"`);\n    }\n    this.advance(text.length);\n  }\n\n  throwError(pos: ShaderPosition | ShaderRange, ...msgs: any[]) {\n    const error = ShaderLabUtils.createGSError(msgs.join(\" \"), GSErrorName.ScannerError, this._source, pos);\n    throw error;\n  }\n\n  scanPairedText(left: string, right: string, balanced = false, skipLeading = false) {\n    if (!skipLeading) {\n      this.scanText(left);\n    }\n    const start = this._currentIndex;\n    let level = balanced ? 1 : 0;\n    while (this.peek(right.length) !== right || level !== 0) {\n      if (this.isEnd()) return;\n      if (balanced) {\n        if (this.peek(left.length) === left) {\n          level += 1;\n          this.advance(left.length);\n          continue;\n        } else if (this.peek(right.length) === right) {\n          level -= 1;\n          if (level === 0) break;\n          this.advance(right.length);\n          continue;\n        }\n      }\n      this.advance(right.length);\n    }\n    this.advance(right.length);\n    return this._source.substring(start, this._currentIndex - right.length);\n  }\n\n  scanToken(onToken?: OnToken, splitCharRegex = /\\w/) {\n    this.skipCommentsAndSpace();\n    const start = this.getCurPosition();\n    if (this.isEnd()) return;\n    while (splitCharRegex.test(this.getCurChar()) && !this.isEnd()) this._advance();\n    const end = this.getCurPosition();\n\n    if (start.index === end.index) {\n      this._advance();\n      const token = BaseToken.pool.get();\n      token.set(ETokenType.NOT_WORD, this._source[start.index], start);\n      onToken?.(token, this);\n      return token;\n    }\n\n    const lexeme = this._source.substring(start.index, end.index);\n    const tokenType = this._keywordsMap.get(lexeme) ?? ETokenType.ID;\n    const range = ShaderLab.createRange(start, end);\n    const token = BaseToken.pool.get();\n    token.set(tokenType, lexeme, range);\n    onToken?.(token, this);\n    return token;\n  }\n}\n","import { ShaderRange, ShaderPosition } from \"../common\";\nimport { ETokenType, KeywordTable } from \"../common\";\nimport { EOF, BaseToken } from \"../common/BaseToken\";\nimport LexerUtils from \"./Utils\";\nimport BaseScanner from \"../common/BaseScanner\";\nimport { ShaderLab } from \"../ShaderLab\";\n\n/**\n * The Lexer of ShaderLab Compiler\n */\nexport class Lexer extends BaseScanner {\n  reset(source: string) {\n    this._source = source;\n    this._currentIndex = 0;\n    // #if _VERBOSE\n    this._line = this._column = 0;\n    // #endif\n  }\n\n  *tokenize() {\n    while (!this.isEnd()) {\n      yield this.scanToken();\n    }\n    return EOF;\n  }\n\n  override skipSpace() {\n    while (/\\s/.test(this.getCurChar())) {\n      this.advance();\n    }\n  }\n\n  override scanToken(): BaseToken {\n    this.skipCommentsAndSpace();\n    if (this.isEnd()) {\n      return EOF;\n    }\n\n    if (LexerUtils.isAlpha(this.getCurChar())) {\n      return this._scanWord();\n    }\n    if (LexerUtils.isNum(this.getCurChar())) {\n      return this._scanNum();\n    }\n\n    const start = this._getPosition();\n    const token = BaseToken.pool.get();\n\n    switch (this.getCurChar()) {\n      case \"<\":\n        this.advance();\n        if (this.getCurChar() === \"<\") {\n          this.advance();\n          if (this.getCurChar() === \"=\") {\n            this.advance();\n            token.set(ETokenType.LEFT_ASSIGN, \"<<=\", start);\n            break;\n          }\n          token.set(ETokenType.LEFT_OP, \"<<\", start);\n          break;\n        } else if (this.getCurChar() === \"=\") {\n          this.advance();\n          token.set(ETokenType.LE_OP, \"<=\", start);\n          break;\n        }\n        token.set(ETokenType.LEFT_ANGLE, \"<\", start);\n        break;\n\n      case \">\":\n        this.advance();\n        if (this.getCurChar() === \">\") {\n          this.advance();\n          if (this.getCurChar() === \"=\") {\n            this.advance();\n            token.set(ETokenType.RIGHT_ASSIGN, \">>=\", start);\n            break;\n          }\n          token.set(ETokenType.RIGHT_OP, \">>\", start);\n          break;\n        } else if (this.getCurChar() === \"=\") {\n          this.advance();\n          token.set(ETokenType.GE_OP, \">=\", start);\n          break;\n        }\n        token.set(ETokenType.RIGHT_ANGLE, \">\", start);\n        break;\n\n      case \"+\":\n        this.advance();\n        if (this.getCurChar() === \"+\") {\n          this.advance();\n          token.set(ETokenType.INC_OP, \"++\", start);\n          break;\n        } else if (this.getCurChar() === \"=\") {\n          this.advance();\n          token.set(ETokenType.ADD_ASSIGN, \"+=\", start);\n          break;\n        }\n        token.set(ETokenType.PLUS, \"+\", start);\n        break;\n\n      case \"-\":\n        this.advance();\n        if (this.getCurChar() === \"-\") {\n          this.advance();\n          token.set(ETokenType.DEC_OP, \"--\", start);\n          break;\n        } else if (this.getCurChar() === \"=\") {\n          this.advance();\n          token.set(ETokenType.SUB_ASSIGN, \"-=\", start);\n          break;\n        }\n        token.set(ETokenType.DASH, \"-\", start);\n        break;\n\n      case \"=\":\n        this.advance();\n        if (this.getCurChar() === \"=\") {\n          this.advance();\n          token.set(ETokenType.EQ_OP, \"==\", start);\n          break;\n        }\n        token.set(ETokenType.EQUAL, \"=\", start);\n        break;\n\n      case \"!\":\n        this.advance();\n        if (this.getCurChar() === \"=\") {\n          this.advance();\n          token.set(ETokenType.NE_OP, \"!=\", start);\n          break;\n        }\n        token.set(ETokenType.BANG, \"!\", start);\n        break;\n\n      case \"&\":\n        this.advance();\n        if (this.getCurChar() === \"&\") {\n          this.advance();\n          token.set(ETokenType.AND_OP, \"&&\", start);\n          break;\n        } else if (this.getCurChar() === \"=\") {\n          this.advance();\n          token.set(ETokenType.ADD_ASSIGN, \"&=\", start);\n          break;\n        }\n        token.set(ETokenType.AMPERSAND, \"&\", start);\n        break;\n\n      case \"|\":\n        this.advance();\n        if (this.getCurChar() === \"|\") {\n          this.advance();\n          token.set(ETokenType.OR_OP, \"||\", start);\n          break;\n        } else if (this.getCurChar() === \"=\") {\n          this.advance();\n          token.set(ETokenType.OR_ASSIGN, \"|=\", start);\n          break;\n        }\n        token.set(ETokenType.VERTICAL_BAR, \"|\", start);\n        break;\n\n      case \"^\":\n        this.advance();\n        if (this.getCurChar() === \"^\") {\n          this.advance();\n          token.set(ETokenType.XOR_OP, \"^^\", start);\n          break;\n        } else if (this.getCurChar() === \"=\") {\n          this.advance();\n          token.set(ETokenType.XOR_ASSIGN, \"^=\", start);\n          break;\n        }\n        token.set(ETokenType.CARET, \"^\", start);\n        break;\n\n      case \"*\":\n        this.advance();\n        if (this.getCurChar() === \"=\") {\n          this.advance();\n          token.set(ETokenType.MUL_ASSIGN, \"*=\", start);\n          break;\n        }\n\n        token.set(ETokenType.STAR, \"*\", start);\n        break;\n\n      case \"/\":\n        this.advance();\n        if (this.getCurChar() === \"=\") {\n          this.advance();\n\n          token.set(ETokenType.DIV_ASSIGN, \"/=\", start);\n          break;\n        }\n\n        token.set(ETokenType.SLASH, \"/\", start);\n        break;\n\n      case \"%\":\n        this.advance();\n        if (this.getCurChar() === \"=\") {\n          this.advance();\n\n          token.set(ETokenType.MOD_ASSIGN, \"%=\", start);\n          break;\n        }\n\n        token.set(ETokenType.PERCENT, \"%\", start);\n        break;\n\n      case \"(\":\n        this.advance();\n\n        token.set(ETokenType.LEFT_PAREN, \"(\", start);\n        break;\n      case \")\":\n        this.advance();\n\n        token.set(ETokenType.RIGHT_PAREN, \")\", start);\n        break;\n      case \"{\":\n        this.advance();\n\n        token.set(ETokenType.LEFT_BRACE, \"{\", start);\n        break;\n      case \"}\":\n        this.advance();\n\n        token.set(ETokenType.RIGHT_BRACE, \"}\", start);\n        break;\n      case \"[\":\n        this.advance();\n\n        token.set(ETokenType.LEFT_BRACKET, \"[\", start);\n        break;\n      case \"]\":\n        this.advance();\n\n        token.set(ETokenType.RIGHT_BRACKET, \"]\", start);\n        break;\n      case \".\":\n        this.advance();\n        if (LexerUtils.isNum(this.getCurChar())) {\n          return this._scanNumAfterDot();\n        }\n\n        token.set(ETokenType.DOT, \".\", start);\n        break;\n      case \",\":\n        this.advance();\n\n        token.set(ETokenType.COMMA, \",\", start);\n        break;\n      case \":\":\n        this.advance();\n\n        token.set(ETokenType.COLON, \":\", start);\n        return token;\n      case \";\":\n        this.advance();\n\n        token.set(ETokenType.SEMICOLON, \";\", start);\n        break;\n      case \"~\":\n        this.advance();\n\n        token.set(ETokenType.TILDE, \"~\", start);\n        break;\n      case \"?\":\n        this.advance();\n\n        token.set(ETokenType.QUESTION, \"?\", start);\n        break;\n      case '\"':\n        this.advance();\n        return this._scanStringConst();\n\n      default:\n        this.throwError(this.getCurPosition(), `Unexpected character ${this.getCurChar()}`);\n    }\n    return token;\n  }\n\n  private _scanStringConst() {\n    const start = this._getPosition();\n    const buffer: string[] = [];\n    while (this.getCurChar() !== '\"') {\n      buffer.push(this.getCurChar());\n      this.advance();\n    }\n    this.advance();\n    const range = ShaderLab.createRange(start, this._getPosition());\n\n    const token = BaseToken.pool.get();\n    token.set(ETokenType.STRING_CONST, buffer.join(\"\"), range);\n    return token;\n  }\n\n  private _scanNumAfterDot() {\n    const buffer = [\".\"];\n    while (LexerUtils.isNum(this.getCurChar())) {\n      buffer.push(this.getCurChar());\n      this.advance();\n    }\n\n    const token = BaseToken.pool.get();\n    token.set(ETokenType.FLOAT_CONSTANT, buffer.join(\"\"), this._getPosition(1));\n    return token;\n  }\n\n  private _getPosition(offset /** offset from starting point */ = 0) {\n    return ShaderLab.createPosition(\n      this.current - offset,\n      // #if _VERBOSE\n      this._line,\n      this._column - offset\n      // #endif\n    );\n  }\n\n  private _scanWord() {\n    const buffer: string[] = [this.getCurChar()];\n    const start = this._getPosition();\n    this.advance();\n    while (LexerUtils.isLetter(this.getCurChar())) {\n      buffer.push(this.getCurChar());\n      this.advance();\n    }\n    const word = buffer.join(\"\");\n    const kt = KeywordTable.get(word);\n    if (kt) {\n      const token = BaseToken.pool.get();\n      token.set(kt, word, start);\n      return token;\n    }\n\n    const token = BaseToken.pool.get();\n    token.set(ETokenType.ID, word, start);\n    return token;\n  }\n\n  private _scanNum() {\n    const buffer: string[] = [];\n    while (LexerUtils.isNum(this.getCurChar())) {\n      buffer.push(this.getCurChar());\n      this.advance();\n    }\n    if (this.getCurChar() === \".\") {\n      buffer.push(this.getCurChar());\n      this.advance();\n      while (LexerUtils.isNum(this.getCurChar())) {\n        buffer.push(this.getCurChar());\n        this.advance();\n      }\n      this._scanFloatSuffix(buffer);\n\n      const token = BaseToken.pool.get();\n      token.set(ETokenType.FLOAT_CONSTANT, buffer.join(\"\"), this._getPosition(buffer.length));\n      return token;\n    } else {\n      if (this.getCurChar() === \"e\" || this.getCurChar() === \"E\") {\n        this._scanFloatSuffix(buffer);\n\n        const token = BaseToken.pool.get();\n        token.set(ETokenType.FLOAT_CONSTANT, buffer.join(\"\"), this._getPosition(buffer.length));\n        return token;\n      } else {\n        this._scanIntegerSuffix(buffer);\n\n        const token = BaseToken.pool.get();\n        token.set(ETokenType.INT_CONSTANT, buffer.join(\"\"), this._getPosition(buffer.length));\n        return token;\n      }\n    }\n  }\n\n  private _scanFloatSuffix(buffer: string[]) {\n    if (this.getCurChar() === \"e\" || this.getCurChar() === \"E\") {\n      buffer.push(this.getCurChar());\n      this.advance();\n      if (this.getCurChar() === \"+\" || this.getCurChar() === \"-\") {\n        buffer.push(this.getCurChar());\n        this.advance();\n      }\n      if (!LexerUtils.isNum(this.getCurChar()))\n        this.throwError(this.getCurPosition(), \"lexing error, invalid exponent suffix.\");\n      while (LexerUtils.isNum(this.getCurChar())) {\n        buffer.push(this.getCurChar());\n        this.advance();\n      }\n    }\n    if (this.getCurChar() === \"f\" || this.getCurChar() === \"F\") {\n      buffer.push(this.getCurChar());\n      this.advance();\n    }\n  }\n\n  private _scanIntegerSuffix(buffer: string[]) {\n    if (this.getCurChar() === \"u\" || this.getCurChar() === \"U\") {\n      buffer.push(this.getCurChar());\n      this.advance();\n    }\n  }\n}\n","import { ENonTerminal, Terminal } from \"../parser/GrammarSymbol\";\n\nexport type StateActionTable = Map<number /** state ID */, ActionTable>;\nexport type ActionTable = Map<Terminal, ActionInfo>;\nexport type StateGotoTable = Map<number /** state ID */, GotoTable>;\nexport type GotoTable = Map<ENonTerminal, number /** state ID */>;\n\nexport enum EAction {\n  Shift = 0,\n  Reduce,\n  Accept\n}\n\nexport interface ActionInfo {\n  action: EAction;\n  target?: number;\n}\n","import { ASTNode } from \"./AST\";\nimport { SymbolTable } from \"../parser/symbolTable\";\n\nexport class ShaderData {\n  symbolTable: SymbolTable;\n\n  vertexMain: ASTNode.FunctionDefinition;\n  fragmentMain: ASTNode.FunctionDefinition;\n\n  globalPrecisions: ASTNode.PrecisionSpecifier[] = [];\n}\n","import { GalaceanDataType } from \"../../common\";\nimport { ASTNode } from \"../AST\";\n\nexport class SymbolDataType {\n  constructor(\n    public type: GalaceanDataType,\n    public typeLexeme: string,\n    public arraySpecifier?: ASTNode.ArraySpecifier\n  ) {}\n}\n","import { IBaseSymbol } from \"../../common/BaseSymbolTable\";\nimport { ASTNode } from \"../AST\";\nimport { SymbolDataType } from \"./SymbolDataType\";\n\nexport enum ESymbolType {\n  VAR,\n  FN,\n  STRUCT\n}\n\ntype SymbolAstNode =\n  | ASTNode.Initializer\n  | ASTNode.StructSpecifier\n  | ASTNode.FunctionDefinition\n  | ASTNode.ParameterDeclarator\n  | ASTNode.InitDeclaratorList\n  | ASTNode.VariableDeclaration;\n\nexport class SymbolInfo implements IBaseSymbol {\n  constructor(\n    public readonly ident: string,\n    public readonly symbolType: ESymbolType,\n    public readonly astNode?: SymbolAstNode,\n    public readonly dataType?: SymbolDataType\n  ) {}\n}\n","import { ASTNode } from \"../AST\";\nimport { SymbolDataType } from \"./SymbolDataType\";\nimport { ESymbolType, SymbolInfo } from \"./SymbolInfo\";\n\nexport class FnSymbol extends SymbolInfo {\n  declare astNode: ASTNode.FunctionDefinition;\n\n  constructor(lexeme: string, astNode: ASTNode.FunctionDefinition) {\n    const type = new SymbolDataType(\n      astNode.protoType.returnType.type,\n      astNode.protoType.returnType.typeSpecifier.lexeme\n    );\n    super(lexeme, ESymbolType.FN, astNode, type);\n  }\n}\n","import { ASTNode } from \"../AST\";\nimport { ESymbolType, SymbolInfo } from \"./SymbolInfo\";\n\nexport class StructSymbol extends SymbolInfo {\n  declare astNode: ASTNode.StructSpecifier;\n\n  constructor(lexeme: string, astNode: ASTNode.StructSpecifier) {\n    super(lexeme, ESymbolType.STRUCT, astNode);\n  }\n}\n","import { Logger } from \"@galacean/engine\";\nimport { GalaceanDataType } from \"./types\";\n\nexport interface IBaseSymbol {\n  readonly ident: string;\n}\n\n/**\n * The base class of `SymbolTable`\n */\nexport abstract class BaseSymbolTable<T extends IBaseSymbol = IBaseSymbol> {\n  protected _table: Map<string, T[]> = new Map();\n\n  /**\n   * Check the equality of two symbol.\n   */\n  abstract symbolEqualCheck(exist: T, newSymbol: T): boolean;\n\n  insert(sm: T) {\n    const entry = this._table.get(sm.ident) ?? [];\n    for (let i = 0; i < entry.length; i++) {\n      if (this.symbolEqualCheck(entry[i], sm)) {\n        Logger.warn(\"replace symbol:\", sm.ident);\n        entry[i] = sm;\n        return;\n      }\n    }\n    entry.push(sm);\n    this._table.set(sm.ident, entry);\n  }\n\n  lookup<R = T>(sm: T & { signature?: GalaceanDataType[] }): R {\n    const entry = this._table.get(sm.ident) ?? [];\n    for (const item of entry) {\n      if (this.symbolEqualCheck(item, sm)) return item as unknown as R;\n    }\n  }\n}\n\nexport class SymbolTableStack<S extends IBaseSymbol, T extends BaseSymbolTable<S>> {\n  private _stack: T[] = [];\n\n  get _scope() {\n    return this._stack[this._stack.length - 1];\n  }\n\n  newScope(scope: T) {\n    this._stack.push(scope);\n  }\n\n  clear() {\n    this._stack.length = 0;\n  }\n\n  dropScope() {\n    this._stack.pop();\n  }\n\n  insert(sm: S) {\n    this._scope.insert(sm);\n  }\n\n  lookup(sm: S & { signature?: GalaceanDataType[] }) {\n    for (let i = this._stack.length - 1; i >= 0; i--) {\n      const scope = this._stack[i];\n      const ret = scope.lookup(sm);\n      if (ret) return ret;\n    }\n  }\n}\n","import { GalaceanDataType, TypeAny } from \"../../common\";\nimport { BaseSymbolTable } from \"../../common/BaseSymbolTable\";\nimport { ASTNode } from \"../AST\";\nimport { FnSymbol } from \"./FnSymbol\";\nimport { ESymbolType, SymbolInfo } from \"./SymbolInfo\";\n\nexport class SymbolTable extends BaseSymbolTable<SymbolInfo> {\n  override symbolEqualCheck(exist: SymbolInfo, newSymbol: SymbolInfo & { signature?: GalaceanDataType[] }): boolean {\n    if (exist.symbolType !== newSymbol.symbolType) return false;\n    if (newSymbol.symbolType === ESymbolType.FN) {\n      if (!newSymbol.astNode && !newSymbol.signature) return true;\n\n      const existParams = (exist.astNode as ASTNode.FunctionDefinition).protoType.paramSig;\n      const newSymbolParams =\n        newSymbol.signature ?? (newSymbol.astNode as ASTNode.FunctionDefinition).protoType.paramSig;\n      if (existParams.length !== newSymbolParams.length) return false;\n      for (let i = 0; i < existParams.length; i++) {\n        if (existParams[i] === TypeAny || newSymbolParams[i] === TypeAny) continue;\n        if (existParams[i] !== newSymbolParams[i]) return false;\n      }\n    }\n    return true;\n  }\n\n  getAllFnSymbols(fnIdent: string): FnSymbol[] {\n    const entries = this._table.get(fnIdent) ?? [];\n    return entries.filter((item) => item.symbolType === ESymbolType.FN) as FnSymbol[];\n  }\n}\n","import { ASTNode } from \"../AST\";\nimport { SymbolDataType } from \"./SymbolDataType\";\nimport { ESymbolType, SymbolInfo } from \"./SymbolInfo\";\n\nexport class VarSymbol extends SymbolInfo {\n  declare astNode:\n    | ASTNode.Initializer\n    | ASTNode.ParameterDeclarator\n    | ASTNode.InitDeclaratorList\n    | ASTNode.VariableDeclaration;\n\n  readonly isGlobalVariable: boolean;\n\n  constructor(\n    ident: string,\n    dataType: SymbolDataType,\n    isGlobalVariable: boolean,\n    initAst:\n      | ASTNode.Initializer\n      | ASTNode.ParameterDeclarator\n      | ASTNode.InitDeclaratorList\n      | ASTNode.VariableDeclaration\n  ) {\n    super(ident, ESymbolType.VAR, initAst, dataType);\n    this.isGlobalVariable = isGlobalVariable;\n  }\n}\n","import { ShaderRange } from \"../common\";\nimport { TreeNode } from \"./AST\";\nimport { GSErrorName } from \"../GSError\";\nimport { ShaderData } from \"./ShaderInfo\";\nimport { SymbolInfo, SymbolTable } from \"../parser/symbolTable\";\nimport { NodeChild } from \"./types\";\nimport { SymbolTableStack } from \"../common/BaseSymbolTable\";\nimport { ShaderLab } from \"../ShaderLab\";\n// #if _VERBOSE\nimport { GSError } from \"../GSError\";\n// #endif\n\nexport type TranslationRule<T = any> = (sa: SematicAnalyzer, ...tokens: NodeChild[]) => T;\n\n/**\n * The semantic analyzer of `ShaderLab` compiler.\n * - Build symbol table\n * - Static analysis\n */\nexport default class SematicAnalyzer {\n  semanticStack: TreeNode[] = [];\n  acceptRule?: TranslationRule = undefined;\n  symbolTable: SymbolTableStack<SymbolInfo, SymbolTable> = new SymbolTableStack();\n  private _shaderData = new ShaderData();\n\n  // #if _VERBOSE\n  readonly errors: GSError[] = [];\n  // #endif\n\n  get shaderData() {\n    return this._shaderData;\n  }\n\n  private _translationRuleTable: Map<number /** production id */, TranslationRule> = new Map();\n\n  constructor() {\n    this.newScope();\n  }\n\n  reset() {\n    this.semanticStack.length = 0;\n    this._shaderData = new ShaderData();\n    this.symbolTable.clear();\n    this.newScope();\n    // #if _VERBOSE\n    this.errors.length = 0;\n    // #endif\n  }\n\n  newScope() {\n    const scope = new SymbolTable();\n    this.symbolTable.newScope(scope);\n  }\n\n  dropScope() {\n    return this.symbolTable.dropScope();\n  }\n\n  addTranslationRule(pid: number, rule: TranslationRule) {\n    this._translationRuleTable.set(pid, rule);\n  }\n\n  getTranslationRule(pid: number) {\n    return this._translationRuleTable.get(pid);\n  }\n\n  error(loc: ShaderRange, ...param: any[]) {\n    // #if _VERBOSE\n    const err = new GSError(GSErrorName.CompilationError, param.join(\"\"), loc, ShaderLab._processingPassText);\n    this.errors.push(err);\n    return err;\n    // #else\n    throw new Error(param.join(\"\"));\n    // #endif\n  }\n}\n","import { TokenType } from \"../common\";\n\nexport type Terminal = TokenType;\n\nexport enum ENonTerminal {\n  START = 2000,\n  // galacean\n  gs_shader_program,\n\n  // glsl\n  global_declaration,\n  variable_declaration,\n  array_specifier_list,\n  array_specifier,\n  ext_builtin_type_specifier_nonarray,\n  precision_specifier,\n  variable_identifier,\n  variable_identifier_node,\n  primary_expression,\n  postfix_expression,\n  integer_expression,\n  function_call,\n  function_call_generic,\n  function_call_header_no_parameters,\n  function_call_header_with_parameters,\n  function_call_parameter_list,\n  function_call_header,\n  function_identifier,\n  constructor_identifier,\n  unary_expression,\n  unary_operator,\n  multiplicative_expression,\n  additive_expression,\n  shift_expression,\n  relational_expression,\n  equality_expression,\n  and_expression,\n  inclusive_or_expression,\n  exclusive_or_expression,\n  logical_and_expression,\n  logical_xor_expression,\n  logical_or_expression,\n  conditional_expression,\n  assignment_expression,\n  assignment_operator,\n  expression,\n  integer_constant_expression,\n  integer_constant_expression_operator,\n  declaration,\n  function_prototype,\n  function_declarator,\n  function_header_with_parameters,\n  function_header,\n  function_parameter_list,\n  parameter_declarator,\n  parameter_declaration,\n  parameter_qualifier,\n  parameter_type_specifier,\n  init_declarator_list,\n  single_declaration,\n  fully_specified_type,\n  type_qualifier,\n  single_type_qualifier,\n  storage_qualifier,\n  precision_qualifier,\n  interpolation_qualifier,\n  invariant_qualifier,\n  type_specifier,\n  type_specifier_nonarray,\n  type_specifier_no_prec,\n  basic_type,\n  struct_specifier,\n  struct_declaration_list,\n  struct_declaration,\n  struct_declarator_list,\n  struct_declarator,\n  identifier_list,\n  decl_identifier,\n  initializer,\n  initializer_list,\n  declaration_statement,\n  simple_statement,\n  compound_statement_no_scope,\n  statement_with_scope,\n  compound_statement,\n  statement,\n  statement_list,\n  iteration_statement_no_new_scope,\n  expression_statement,\n  selection_statement,\n  selection_rest_statement,\n  condition,\n  conditionopt,\n  iteration_statement,\n  for_init_statement,\n  for_rest_statement,\n  jump_statement,\n  external_declaration,\n  function_definition,\n  field_selection,\n  bool_constant,\n  function_identifier_node,\n  typename_identifier_node,\n  scope_brace,\n  scope_end_brace,\n\n  _ignore\n}\n\nexport type GrammarSymbol = Terminal | ENonTerminal;\n\nexport type Derivation = GrammarSymbol[];\n","import { ENonTerminal, GrammarSymbol } from \"../parser/GrammarSymbol\";\n\nexport default class Production {\n  private static _id = 0;\n  static pool: Map<number, Production> = new Map();\n\n  readonly goal: ENonTerminal;\n  readonly derivation: GrammarSymbol[];\n  readonly id: number;\n\n  constructor(goal: ENonTerminal, derivation: GrammarSymbol[]) {\n    this.goal = goal;\n    this.derivation = derivation;\n    this.id = Production._id++;\n    Production.pool.set(this.id, this);\n  }\n}\n","import { ETokenType } from \"../common\";\nimport { ENonTerminal, GrammarSymbol } from \"./GrammarSymbol\";\nimport Production from \"../lalr/Production\";\n\nexport class Grammar {\n  readonly productions: Production[];\n\n  readonly startSymbol: ENonTerminal;\n\n  static create(start: ENonTerminal, productions: GrammarSymbol[][]) {\n    const _ps = productions.map((gsl) => {\n      return new Production(<ENonTerminal>gsl[0], gsl.slice(1));\n    });\n    return new Grammar(start, _ps);\n  }\n\n  constructor(start: ENonTerminal, productions: Production[]) {\n    this.startSymbol = start;\n    productions.unshift(new Production(ENonTerminal.START, [start]));\n    this.productions = productions;\n  }\n\n  getProductionList(nonTerminal: ENonTerminal) {\n    return this.productions.filter((item) => item.goal === nonTerminal);\n  }\n\n  isNullableNT(NT: ENonTerminal) {\n    return this.productions.find((item) => item.goal === NT && item.derivation[0] === ETokenType.EPSILON);\n  }\n\n  getProductionByID(pid: number) {\n    return Production.pool.get(pid);\n  }\n}\n","import { ENonTerminal } from \"./GrammarSymbol\";\nimport { BaseToken } from \"../common/BaseToken\";\nimport { GalaceanDataType, ShaderRange } from \"../common\";\nimport { ASTNode, TreeNode } from \"./AST\";\n\nexport type TraceStackItem = ENonTerminal | BaseToken;\n\nexport class SymbolType {\n  type: GalaceanDataType;\n  arraySpecifier?: ASTNode.ArraySpecifier;\n  typeLexeme: string;\n\n  constructor(type: GalaceanDataType, typeLexeme: string, arraySpecifier?: ASTNode.ArraySpecifier) {\n    this.type = type;\n    this.arraySpecifier = arraySpecifier;\n    this.typeLexeme = typeLexeme;\n  }\n}\n\nexport class StructProp implements IParamInfo {\n  typeInfo: SymbolType;\n  ident: BaseToken;\n  astNode: ASTNode.StructDeclarator;\n\n  constructor(type: SymbolType, ident: BaseToken) {\n    this.typeInfo = type;\n    this.ident = ident;\n  }\n}\n\nexport type NodeChild = TreeNode | BaseToken;\n\nexport type IParamInfo = { ident: BaseToken; typeInfo: SymbolType; astNode: TreeNode };\n","// #if _VERBOSE\nimport { BuiltinFunction, BuiltinVariable, NonGenericGalaceanType } from \"./builtin\";\n// #endif\nimport { CodeGenVisitor } from \"../codeGen\";\nimport { ENonTerminal } from \"./GrammarSymbol\";\nimport { BaseToken as Token } from \"../common/BaseToken\";\nimport { EKeyword, ETokenType, TokenType, ShaderRange, GalaceanDataType, TypeAny } from \"../common\";\nimport SematicAnalyzer from \"./SemanticAnalyzer\";\nimport { ShaderData } from \"./ShaderInfo\";\nimport { ESymbolType, FnSymbol, StructSymbol, VarSymbol } from \"./symbolTable\";\nimport { ParserUtils } from \"../ParserUtils\";\nimport { IParamInfo, NodeChild, StructProp, SymbolType } from \"./types\";\nimport { ClearableObjectPool, IPoolElement } from \"@galacean/engine\";\nimport { ShaderLabUtils } from \"../ShaderLabUtils\";\n\nexport abstract class TreeNode implements IPoolElement {\n  /** The non-terminal in grammar. */\n  nt: ENonTerminal;\n  private _children: NodeChild[];\n  private _location: ShaderRange;\n\n  get children() {\n    return this._children;\n  }\n\n  get location() {\n    return this._location;\n  }\n\n  set(loc: ShaderRange, children: NodeChild[], nt: ENonTerminal) {\n    this.nt = nt;\n    this._location = loc;\n    this._children = children;\n  }\n\n  dispose(): void {}\n\n  // Visitor pattern interface for code generation\n  codeGen(visitor: CodeGenVisitor) {\n    return visitor.defaultCodeGen(this.children);\n  }\n\n  semanticAnalyze(sa: SematicAnalyzer) {}\n}\n\nexport namespace ASTNode {\n  export type ASTNodePool = ClearableObjectPool<\n    { set: (loc: ShaderRange, children: NodeChild[]) => void } & IPoolElement & TreeNode\n  >;\n\n  export function _unwrapToken(node: NodeChild) {\n    if (node instanceof Token) {\n      return node;\n    }\n    throw \"not token\";\n  }\n\n  export function get(pool: ASTNodePool, sa: SematicAnalyzer, loc: ShaderRange, children: NodeChild[]) {\n    const node = pool.get();\n    node.set(loc, children);\n    node.semanticAnalyze(sa);\n    sa.semanticStack.push(node);\n  }\n\n  export class TrivialNode extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(TrivialNode);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal._ignore);\n    }\n  }\n\n  export class ScopeBrace extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(ScopeBrace);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.scope_brace);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      sa.newScope();\n    }\n  }\n\n  export class ScopeEndBrace extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(ScopeEndBrace);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.scope_end_brace);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      sa.dropScope();\n    }\n  }\n\n  export class JumpStatement extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(JumpStatement);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.jump_statement);\n    }\n\n    // #if _VERBOSE\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (ASTNode._unwrapToken(this.children![0]).type === EKeyword.RETURN) {\n        // TODO: check the equality of function return type declared and this type.\n      }\n    }\n    // #endif\n\n    override codeGen(visitor: CodeGenVisitor): string {\n      return visitor.visitJumpStatement(this);\n    }\n  }\n\n  // #if _VERBOSE\n  export class ConditionOpt extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(ConditionOpt);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.conditionopt);\n    }\n  }\n\n  export class ForRestStatement extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(ForRestStatement);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.for_rest_statement);\n    }\n  }\n\n  export class Condition extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(Condition);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.condition);\n    }\n  }\n\n  export class ForInitStatement extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(ForInitStatement);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.for_init_statement);\n    }\n  }\n\n  export class IterationStatement extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(IterationStatement);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.iteration_statement);\n    }\n  }\n\n  export class SelectionStatement extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(SelectionStatement);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.selection_statement);\n    }\n  }\n\n  export class ExpressionStatement extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(ExpressionStatement);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.expression_statement);\n    }\n  }\n  // #endif\n\n  export abstract class ExpressionAstNode extends TreeNode {\n    protected _type?: GalaceanDataType;\n    set type(t: GalaceanDataType | undefined) {\n      this._type = t;\n    }\n    get type() {\n      return this._type ?? TypeAny;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[], nt: ENonTerminal) {\n      super.set(loc, children, nt);\n      this._type = undefined;\n    }\n  }\n\n  // #if _VERBOSE\n  export class InitializerList extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(InitializerList);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.initializer_list);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      const init = this.children[0] as Initializer | InitializerList;\n      this.type = init.type;\n    }\n  }\n\n  export class Initializer extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(Initializer);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.initializer);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        this.type = (<AssignmentExpression>this.children[0]).type;\n      } else {\n        this.type = (<InitializerList>this.children[1]).type;\n      }\n    }\n  }\n  // #endif\n\n  export class SingleDeclaration extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(SingleDeclaration);\n\n    typeSpecifier: TypeSpecifier;\n    arraySpecifier?: ArraySpecifier;\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.single_declaration);\n      this.typeSpecifier = undefined;\n      this.arraySpecifier = undefined;\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      const fullyType = this.children[0] as FullySpecifiedType;\n      const id = this.children[1] as Token;\n      this.typeSpecifier = fullyType.typeSpecifier;\n\n      let sm: VarSymbol;\n      if (this.children.length === 2 || this.children.length === 4) {\n        const symbolType = new SymbolType(fullyType.type, fullyType.typeSpecifier.lexeme);\n        const initializer = this.children[3] as Initializer;\n\n        sm = new VarSymbol(id.lexeme, symbolType, false, initializer);\n      } else {\n        const arraySpecifier = this.children[2] as ArraySpecifier;\n        this.arraySpecifier = arraySpecifier;\n        const symbolType = new SymbolType(fullyType.type, fullyType.typeSpecifier.lexeme, arraySpecifier);\n        const initializer = this.children[4] as Initializer;\n\n        sm = new VarSymbol(id.lexeme, symbolType, false, initializer);\n      }\n      sa.symbolTable.insert(sm);\n    }\n\n    override codeGen(visitor: CodeGenVisitor): string {\n      return visitor.visitSingleDeclaration(this);\n    }\n  }\n\n  export class FullySpecifiedType extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(FullySpecifiedType);\n\n    get qualifierList() {\n      if (this.children.length > 1) {\n        return (<TypeQualifier>this.children[0]).qualifierList;\n      }\n    }\n\n    get typeSpecifier() {\n      return (this.children.length === 1 ? this.children[0] : this.children[1]) as TypeSpecifier;\n    }\n\n    get type() {\n      return this.typeSpecifier.type;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.fully_specified_type);\n    }\n  }\n\n  export class TypeQualifier extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(TypeQualifier);\n\n    qualifierList: EKeyword[];\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.type_qualifier);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length > 1) {\n        this.qualifierList = [\n          ...(<TypeQualifier>this.children[0]).qualifierList,\n          (<SingleTypeQualifier>this.children[1]).qualifier\n        ];\n      } else {\n        this.qualifierList = [(<SingleTypeQualifier>this.children[0]).qualifier];\n      }\n    }\n  }\n\n  export class SingleTypeQualifier extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(SingleTypeQualifier);\n\n    qualifier: EKeyword;\n    lexeme: string;\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.single_type_qualifier);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      const child = this.children[0];\n      if (child instanceof Token) {\n        this.qualifier = child.type as EKeyword;\n        this.lexeme = child.lexeme;\n      } else {\n        this.qualifier = (<BasicTypeQualifier>child).qualifier;\n        this.lexeme = (<BasicTypeQualifier>child).lexeme;\n      }\n    }\n  }\n\n  abstract class BasicTypeQualifier extends TreeNode {\n    get qualifier(): EKeyword {\n      return (<Token>this.children[0]).type as EKeyword;\n    }\n    get lexeme(): string {\n      return (<Token>this.children[0]).lexeme;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[], nt: ENonTerminal) {\n      super.set(loc, children, nt);\n    }\n  }\n\n  // #if _VERBOSE\n  export class StorageQualifier extends BasicTypeQualifier {\n    static pool = ShaderLabUtils.createObjectPool(StorageQualifier);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.storage_qualifier);\n    }\n  }\n\n  export class PrecisionQualifier extends BasicTypeQualifier {\n    static pool = ShaderLabUtils.createObjectPool(PrecisionQualifier);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.precision_qualifier);\n    }\n  }\n\n  export class InterpolationQualifier extends BasicTypeQualifier {\n    static pool = ShaderLabUtils.createObjectPool(InterpolationQualifier);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.interpolation_qualifier);\n    }\n  }\n\n  export class InvariantQualifier extends BasicTypeQualifier {\n    static pool = ShaderLabUtils.createObjectPool(InvariantQualifier);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.invariant_qualifier);\n    }\n  }\n  // #endif\n\n  export class TypeSpecifier extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(TypeSpecifier);\n\n    get type(): GalaceanDataType {\n      return (this.children![0] as TypeSpecifierNonArray).type;\n    }\n    get lexeme(): string {\n      return (this.children![0] as TypeSpecifierNonArray).lexeme;\n    }\n    get arraySize(): number {\n      return (this.children?.[1] as ArraySpecifier)?.size;\n    }\n\n    get isCustom() {\n      return typeof this.type === \"string\";\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.type_specifier);\n    }\n  }\n\n  export class ArraySpecifier extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(ArraySpecifier);\n\n    get size(): number | undefined {\n      const integerConstantExpr = this.children[1] as IntegerConstantExpression;\n      return integerConstantExpr.value;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.array_specifier);\n    }\n  }\n\n  export class IntegerConstantExpressionOperator extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(IntegerConstantExpressionOperator);\n\n    compute: (a: number, b: number) => number;\n    get lexeme(): string {\n      return (this.children[0] as Token).lexeme;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.integer_constant_expression_operator);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      const operator = this.children[0] as Token;\n      switch (operator.type) {\n        case ETokenType.PLUS:\n          this.compute = (a, b) => a + b;\n          break;\n        case ETokenType.DASH:\n          this.compute = (a, b) => a - b;\n          break;\n        case ETokenType.STAR:\n          this.compute = (a, b) => a * b;\n          break;\n        case ETokenType.SLASH:\n          this.compute = (a, b) => a / b;\n          break;\n        case ETokenType.PERCENT:\n          this.compute = (a, b) => a % b;\n          break;\n        default:\n          sa.error(operator.location, `not implemented operator ${operator.lexeme}`);\n      }\n    }\n  }\n\n  export class IntegerConstantExpression extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(IntegerConstantExpression);\n\n    value?: number;\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.integer_constant_expression);\n      this.value = undefined;\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        const child = this.children[0];\n        if (child instanceof Token) {\n          this.value = Number(child.lexeme);\n        }\n        // #if _VERBOSE\n        else {\n          const id = child as VariableIdentifier;\n          if (!id.symbolInfo) {\n            sa.error(id.location, \"Undeclared symbol:\", id.lexeme);\n          }\n          if (!ParserUtils.typeCompatible(EKeyword.INT, id.typeInfo)) {\n            sa.error(id.location, \"Invalid integer.\");\n            return;\n          }\n        }\n        // #endif\n      }\n    }\n  }\n\n  export class TypeSpecifierNonArray extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(TypeSpecifierNonArray);\n\n    type: GalaceanDataType;\n    lexeme: string;\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.type_specifier_nonarray);\n      const tt = children[0];\n      if (tt instanceof Token) {\n        this.type = tt.lexeme;\n        this.lexeme = tt.lexeme;\n      } else {\n        this.type = (tt as ExtBuiltinTypeSpecifierNonArray).type as GalaceanDataType;\n        this.lexeme = (tt as ExtBuiltinTypeSpecifierNonArray).lexeme;\n      }\n    }\n  }\n\n  export class ExtBuiltinTypeSpecifierNonArray extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(ExtBuiltinTypeSpecifierNonArray);\n\n    type: TokenType;\n    lexeme: string;\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.ext_builtin_type_specifier_nonarray);\n      const token = this.children[0] as Token;\n      this.type = token.type;\n      this.lexeme = token.lexeme;\n    }\n  }\n\n  export class InitDeclaratorList extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(InitDeclaratorList);\n\n    get typeInfo(): SymbolType {\n      if (this.children.length === 1) {\n        const singleDecl = this.children[0] as SingleDeclaration;\n        return new SymbolType(\n          singleDecl.typeSpecifier.type,\n          singleDecl.typeSpecifier.lexeme,\n          singleDecl.arraySpecifier\n        );\n      }\n\n      const initDeclList = this.children[0] as InitDeclaratorList;\n      return initDeclList.typeInfo;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.init_declarator_list);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      let sm: VarSymbol;\n      if (this.children.length === 3 || this.children.length === 5) {\n        const id = this.children[2] as Token;\n        sm = new VarSymbol(id.lexeme, this.typeInfo, false, this);\n        sa.symbolTable.insert(sm);\n      } else if (this.children.length === 4 || this.children.length === 6) {\n        const typeInfo = this.typeInfo;\n        const arraySpecifier = this.children[3] as ArraySpecifier;\n        // #if _VERBOSE\n        if (typeInfo.arraySpecifier && arraySpecifier) {\n          sa.error(arraySpecifier.location, \"Array of array is not supported.\");\n        }\n        // #endif\n        typeInfo.arraySpecifier = arraySpecifier;\n        const id = this.children[2] as Token;\n        sm = new VarSymbol(id.lexeme, typeInfo, false, this);\n        sa.symbolTable.insert(sm);\n      }\n    }\n  }\n\n  export class IdentifierList extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(IdentifierList);\n\n    get idList(): Token[] {\n      if (this.children.length === 2) {\n        return [this.children[1] as Token];\n      }\n      return [...(<IdentifierList>this.children[0]).idList, this.children[2] as Token];\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.identifier_list);\n    }\n  }\n\n  export class Declaration extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(Declaration);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.declaration);\n    }\n\n    override codeGen(visitor: CodeGenVisitor): string {\n      return visitor.visitDeclaration(this);\n    }\n  }\n\n  export class FunctionProtoType extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(FunctionProtoType);\n\n    private get declarator() {\n      return this.children[0] as FunctionDeclarator;\n    }\n\n    get ident() {\n      return this.declarator.ident;\n    }\n\n    get returnType() {\n      return this.declarator.returnType;\n    }\n\n    get parameterList() {\n      return this.declarator.parameterInfoList;\n    }\n\n    get paramSig() {\n      return this.declarator.paramSig;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.function_prototype);\n    }\n\n    override codeGen(visitor: CodeGenVisitor): string {\n      return visitor.visitFunctionProtoType(this);\n    }\n  }\n\n  export class FunctionDeclarator extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(FunctionDeclarator);\n\n    private get header() {\n      return this.children[0] as FunctionHeader;\n    }\n\n    private get parameterList() {\n      return this.children[1] as FunctionParameterList | undefined;\n    }\n\n    get ident() {\n      return this.header.ident;\n    }\n\n    get returnType() {\n      return this.header.returnType;\n    }\n\n    get parameterInfoList() {\n      return this.parameterList?.parameterInfoList;\n    }\n\n    get paramSig() {\n      return this.parameterList?.paramSig;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.function_declarator);\n    }\n  }\n\n  export class FunctionHeader extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(FunctionHeader);\n\n    get ident() {\n      return this.children[1] as Token;\n    }\n    get returnType() {\n      return this.children[0] as FullySpecifiedType;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.function_header);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      sa.newScope();\n    }\n\n    override codeGen(visitor: CodeGenVisitor): string {\n      return visitor.visitFunctionHeader(this);\n    }\n  }\n\n  export class FunctionParameterList extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(FunctionParameterList);\n\n    get parameterInfoList(): IParamInfo[] {\n      if (this.children.length === 1) {\n        const decl = this.children[0] as ParameterDeclaration;\n        return [{ ident: decl.ident, typeInfo: decl.typeInfo, astNode: decl }];\n      }\n      const list = this.children[0] as FunctionParameterList;\n      const decl = this.children[2] as ParameterDeclaration;\n      return [...list.parameterInfoList, { ident: decl.ident, typeInfo: decl.typeInfo, astNode: decl }];\n    }\n\n    get paramSig(): GalaceanDataType[] {\n      if (this.children.length === 1) {\n        const decl = this.children[0] as ParameterDeclaration;\n        return [decl.typeInfo.type];\n      } else {\n        const list = this.children[0] as FunctionParameterList;\n        const decl = this.children[2] as ParameterDeclaration;\n        return list.paramSig.concat([decl.typeInfo.type]);\n      }\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.function_parameter_list);\n    }\n\n    override codeGen(visitor: CodeGenVisitor): string {\n      return visitor.visitFunctionParameterList(this);\n    }\n  }\n\n  export class ParameterDeclaration extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(ParameterDeclaration);\n\n    get typeQualifier() {\n      if (this.children.length === 2) return this.children[0] as TypeQualifier;\n    }\n\n    private get parameterDeclarator() {\n      if (this.children.length === 1) return this.children[0] as ParameterDeclarator;\n      return this.children[1] as ParameterDeclarator;\n    }\n\n    get typeInfo() {\n      return this.parameterDeclarator.typeInfo;\n    }\n\n    get ident() {\n      return this.parameterDeclarator.ident;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.parameter_declaration);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      let declarator: ParameterDeclarator;\n      if (this.children.length === 1) {\n        declarator = this.children[0] as ParameterDeclarator;\n      } else {\n        declarator = this.children[1] as ParameterDeclarator;\n      }\n      const varSymbol = new VarSymbol(declarator.ident.lexeme, declarator.typeInfo, false, this);\n      sa.symbolTable.insert(varSymbol);\n    }\n  }\n\n  export class ParameterDeclarator extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(ParameterDeclarator);\n\n    get ident() {\n      return this.children[1] as Token;\n    }\n\n    get typeInfo(): SymbolType {\n      const typeSpecifier = this.children[0] as TypeSpecifier;\n      const arraySpecifier = this.children[2] as ArraySpecifier;\n      return new SymbolType(typeSpecifier.type, typeSpecifier.lexeme, arraySpecifier);\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.parameter_declarator);\n    }\n  }\n\n  // #if _VERBOSE\n  export class SimpleStatement extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(SimpleStatement);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.simple_statement);\n    }\n  }\n\n  export class CompoundStatement extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(CompoundStatement);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.compound_statement);\n    }\n  }\n  // #endif\n\n  export class CompoundStatementNoScope extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(CompoundStatementNoScope);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.compound_statement_no_scope);\n    }\n  }\n\n  // #if _VERBOSE\n  export class Statement extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(Statement);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.statement);\n    }\n  }\n  // #endif\n\n  export class StatementList extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(StatementList);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.statement_list);\n    }\n\n    override codeGen(visitor: CodeGenVisitor): string {\n      return visitor.visitStatementList(this);\n    }\n  }\n\n  export class FunctionDefinition extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(FunctionDefinition);\n\n    get protoType() {\n      return this.children[0] as FunctionProtoType;\n    }\n\n    get statements() {\n      return this.children[1] as CompoundStatementNoScope;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.function_definition);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      sa.dropScope();\n      const sm = new FnSymbol(this.protoType.ident.lexeme, this);\n      sa.symbolTable.insert(sm);\n    }\n\n    override codeGen(visitor: CodeGenVisitor): string {\n      return visitor.visitFunctionDefinition(this);\n    }\n  }\n\n  export class FunctionCall extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(FunctionCall);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.function_call);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      this.type = (this.children[0] as FunctionCallGeneric).type;\n    }\n\n    override codeGen(visitor: CodeGenVisitor): string {\n      return visitor.visitFunctionCall(this);\n    }\n  }\n\n  export class FunctionCallGeneric extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(FunctionCallGeneric);\n\n    fnSymbol: FnSymbol | StructSymbol | undefined;\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.function_call_generic);\n      this.fnSymbol = undefined;\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      const functionIdentifier = this.children[0] as FunctionIdentifier;\n      if (functionIdentifier.isBuiltin) {\n        this.type = functionIdentifier.ident;\n      } else {\n        const fnIdent = <string>functionIdentifier.ident;\n\n        let paramSig: NonGenericGalaceanType[] | undefined;\n        if (this.children.length === 4) {\n          const paramList = this.children[2];\n          if (paramList instanceof FunctionCallParameterList) {\n            paramSig = paramList.paramSig as any;\n          }\n        }\n        // #if _VERBOSE\n        const builtinFn = BuiltinFunction.getFn(fnIdent, ...(paramSig ?? []));\n        if (builtinFn) {\n          this.type = BuiltinFunction.getReturnType(builtinFn.fun, builtinFn.genType);\n          return;\n        }\n        // #endif\n\n        const fnSymbol = sa.symbolTable.lookup({ ident: fnIdent, symbolType: ESymbolType.FN, signature: paramSig });\n        if (!fnSymbol) {\n          // #if _VERBOSE\n          sa.error(this.location, \"No overload function type found: \", functionIdentifier.ident);\n          // #endif\n          return;\n        }\n        this.type = fnSymbol?.dataType?.type;\n        this.fnSymbol = fnSymbol as FnSymbol;\n      }\n    }\n  }\n\n  export class FunctionCallParameterList extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(FunctionCallParameterList);\n\n    get paramSig(): GalaceanDataType[] | undefined {\n      if (this.children.length === 1) {\n        const expr = this.children[0] as AssignmentExpression;\n        if (expr.type == undefined) return [TypeAny];\n        return [expr.type];\n      } else {\n        const list = this.children[0] as FunctionCallParameterList;\n        const decl = this.children[2] as AssignmentExpression;\n        if (list.paramSig == undefined || decl.type == undefined) {\n          return [TypeAny];\n        } else {\n          return list.paramSig.concat([decl.type]);\n        }\n      }\n    }\n\n    get paramNodes(): AssignmentExpression[] {\n      if (this.children.length === 1) {\n        return [this.children[0] as AssignmentExpression];\n      } else {\n        const list = this.children[0] as FunctionCallParameterList;\n        const decl = this.children[2] as AssignmentExpression;\n\n        return list.paramNodes.concat([decl]);\n      }\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.function_call_parameter_list);\n    }\n  }\n\n  export class PrecisionSpecifier extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(PrecisionSpecifier);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.precision_specifier);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      sa.shaderData.globalPrecisions.push(this);\n    }\n  }\n\n  export class FunctionIdentifier extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(FunctionIdentifier);\n\n    get ident() {\n      const ty = this.children[0] as TypeSpecifier;\n      return ty.type;\n    }\n\n    get lexeme() {\n      const ty = this.children[0] as TypeSpecifier;\n      return ty.lexeme;\n    }\n\n    get isBuiltin() {\n      return typeof this.ident !== \"string\";\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.function_identifier);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {}\n\n    override codeGen(visitor: CodeGenVisitor): string {\n      return visitor.visitFunctionIdentifier(this);\n    }\n  }\n\n  export class AssignmentExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(AssignmentExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.assignment_expression);\n    }\n\n    // #if _VERBOSE\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        const expr = this.children[0] as ConditionalExpression;\n        this.type = expr.type ?? TypeAny;\n      } else {\n        const expr = this.children[2] as AssignmentExpression;\n        this.type = expr.type ?? TypeAny;\n      }\n    }\n    // #endif\n  }\n\n  // #if _VERBOSE\n  export class AssignmentOperator extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(AssignmentOperator);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.assignment_operator);\n    }\n  }\n  // #endif\n\n  export class Expression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(Expression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.expression);\n    }\n\n    // #if _VERBOSE\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        const expr = this.children[0] as AssignmentExpression;\n        this.type = expr.type;\n      } else {\n        const expr = this.children[2] as AssignmentExpression;\n        this.type = expr.type;\n      }\n    }\n    // #endif\n  }\n\n  export class PrimaryExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(PrimaryExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.primary_expression);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        const id = this.children[0];\n        if (id instanceof VariableIdentifier) {\n          this.type = id.typeInfo ?? TypeAny;\n        } else {\n          switch ((<Token>id).type) {\n            case ETokenType.INT_CONSTANT:\n              this._type = EKeyword.INT;\n              break;\n            case ETokenType.FLOAT_CONSTANT:\n              this.type = EKeyword.FLOAT;\n              break;\n            case EKeyword.TRUE:\n            case EKeyword.FALSE:\n              this.type = EKeyword.BOOL;\n              break;\n          }\n        }\n      } else {\n        const expression = this.children[1] as Expression;\n        this.type = expression.type;\n      }\n    }\n  }\n\n  export class PostfixExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(PostfixExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.postfix_expression);\n      if (this.children.length === 1) {\n        const child = this.children[0] as PrimaryExpression | FunctionCall;\n        this.type = child.type;\n      }\n    }\n\n    override codeGen(visitor: CodeGenVisitor): string {\n      return visitor.visitPostfixExpression(this);\n    }\n  }\n\n  // #if _VERBOSE\n  export class UnaryOperator extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(UnaryOperator);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.unary_operator);\n    }\n  }\n  // #endif\n\n  // #if _VERBOSE\n  export class UnaryExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(UnaryExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.unary_expression);\n      this.type = (this.children[0] as PostfixExpression).type;\n    }\n  }\n  // #endif\n\n  // #if _VERBOSE\n  export class MultiplicativeExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(MultiplicativeExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.multiplicative_expression);\n      if (this.children.length === 1) {\n        this.type = (this.children[0] as UnaryExpression).type;\n      } else {\n        const exp1 = this.children[0] as MultiplicativeExpression;\n        const exp2 = this.children[2] as UnaryExpression;\n        if (exp1.type === exp2.type) {\n          this.type = exp1.type;\n        }\n      }\n    }\n  }\n  // #endif\n\n  // #if _VERBOSE\n  export class AdditiveExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(AdditiveExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.additive_expression);\n      if (this.children.length === 1) {\n        this.type = (this.children[0] as MultiplicativeExpression).type;\n      } else {\n        const exp1 = this.children[0] as AdditiveExpression;\n        const exp2 = this.children[2] as MultiplicativeExpression;\n        if (exp1.type === exp2.type) {\n          this.type = exp1.type;\n        }\n      }\n    }\n  }\n  // #endif\n\n  // #if _VERBOSE\n  export class ShiftExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(ShiftExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.shift_expression);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      const expr = this.children[0] as ExpressionAstNode;\n      this.type = expr.type;\n    }\n  }\n  // #endif\n\n  // #if _VERBOSE\n  export class RelationalExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(RelationalExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.relational_expression);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        this.type = (<ShiftExpression>this.children[0]).type;\n      } else {\n        this.type = EKeyword.BOOL;\n      }\n    }\n  }\n  // #endif\n\n  // #if _VERBOSE\n  export class EqualityExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(EqualityExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.equality_expression);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        this.type = (<RelationalExpression>this.children[0]).type;\n      } else {\n        this.type = EKeyword.BOOL;\n      }\n    }\n  }\n  // #endif\n\n  // #if _VERBOSE\n  export class AndExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(AndExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.and_expression);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        this.type = (<AndExpression>this.children[0]).type;\n      } else {\n        this.type = EKeyword.UINT;\n      }\n    }\n  }\n  // #endif\n\n  // #if _VERBOSE\n  export class ExclusiveOrExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(ExclusiveOrExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.exclusive_or_expression);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        this.type = (<AndExpression>this.children[0]).type;\n      } else {\n        this.type = EKeyword.UINT;\n      }\n    }\n  }\n  // #endif\n\n  // #if _VERBOSE\n  export class InclusiveOrExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(InclusiveOrExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.inclusive_or_expression);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        this.type = (<ExclusiveOrExpression>this.children[0]).type;\n      } else {\n        this.type = EKeyword.UINT;\n      }\n    }\n  }\n  // #endif\n\n  // #if _VERBOSE\n  export class LogicalAndExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(LogicalAndExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.logical_and_expression);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        this.type = (<InclusiveOrExpression>this.children[0]).type;\n      } else {\n        this.type = EKeyword.BOOL;\n      }\n    }\n  }\n  // #endif\n\n  // #if _VERBOSE\n  export class LogicalXorExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(LogicalXorExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.logical_xor_expression);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        this.type = (<LogicalAndExpression>this.children[0]).type;\n      } else {\n        this.type = EKeyword.BOOL;\n      }\n    }\n  }\n  // #endif\n\n  // #if _VERBOSE\n  export class LogicalOrExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(LogicalOrExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.logical_or_expression);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        this.type = (<LogicalXorExpression>this.children[0]).type;\n      } else {\n        this.type = EKeyword.BOOL;\n      }\n    }\n  }\n  // #endif\n\n  // #if _VERBOSE\n  export class ConditionalExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(ConditionalExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.conditional_expression);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        this.type = (<LogicalOrExpression>this.children[0]).type;\n      }\n    }\n  }\n  // #endif\n\n  export class StructSpecifier extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(StructSpecifier);\n\n    ident?: Token;\n\n    get propList(): StructProp[] {\n      const declList = (this.children.length === 6 ? this.children[3] : this.children[2]) as StructDeclarationList;\n      return declList.propList;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.struct_specifier);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 6) {\n        this.ident = this.children[1] as Token;\n        sa.symbolTable.insert(new StructSymbol(this.ident.lexeme, this));\n      }\n    }\n  }\n\n  export class StructDeclarationList extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(StructDeclarationList);\n\n    get propList(): StructProp[] {\n      if (this.children.length === 1) {\n        return (<StructDeclaration>this.children[0]).propList;\n      }\n      const list = this.children[0] as StructDeclarationList;\n      const decl = this.children[1] as StructDeclaration;\n      return [list.propList, decl.propList].flat();\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.struct_declaration_list);\n    }\n  }\n\n  export class StructDeclaration extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(StructDeclaration);\n\n    get typeSpecifier() {\n      if (this.children.length === 3) {\n        return this.children[0] as TypeSpecifier;\n      }\n      return this.children[1] as TypeSpecifier;\n    }\n\n    get declaratorList() {\n      if (this.children.length === 3) {\n        return this.children[1] as StructDeclaratorList;\n      }\n      return this.children[2] as StructDeclaratorList;\n    }\n\n    get propList(): StructProp[] {\n      const ret: StructProp[] = [];\n      for (let i = 0; i < this.declaratorList.declaratorList.length; i++) {\n        const declarator = this.declaratorList.declaratorList[i];\n        const typeInfo = new SymbolType(this.typeSpecifier.type, this.typeSpecifier.lexeme, declarator.arraySpecifier);\n        const prop = new StructProp(typeInfo, declarator.ident);\n        ret.push(prop);\n      }\n      return ret;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.struct_declaration);\n    }\n  }\n\n  export class StructDeclaratorList extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(StructDeclaratorList);\n\n    get declaratorList(): StructDeclarator[] {\n      if (this.children.length === 1) {\n        return [this.children[0] as StructDeclarator];\n      } else {\n        const list = this.children[0] as StructDeclaratorList;\n        return [...list.declaratorList, <StructDeclarator>this.children[1]];\n      }\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.struct_declarator_list);\n    }\n  }\n\n  export class StructDeclarator extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(StructDeclarator);\n\n    get ident() {\n      return this.children[0] as Token;\n    }\n\n    get arraySpecifier(): ArraySpecifier | undefined {\n      return this.children[1] as ArraySpecifier;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.struct_declarator);\n    }\n  }\n\n  export class VariableDeclaration extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(VariableDeclaration);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.variable_declaration);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      const type = this.children[0] as FullySpecifiedType;\n      const ident = this.children[1] as Token;\n      let sm: VarSymbol;\n      sm = new VarSymbol(ident.lexeme, new SymbolType(type.type, type.typeSpecifier.lexeme), true, this);\n\n      sa.symbolTable.insert(sm);\n    }\n\n    override codeGen(visitor: CodeGenVisitor): string {\n      return visitor.visitGlobalVariableDeclaration(this);\n    }\n  }\n\n  export class VariableIdentifier extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(VariableIdentifier);\n\n    symbolInfo:\n      | VarSymbol\n      // #if _VERBOSE\n      | BuiltinVariable\n      // #endif\n      | null;\n\n    get lexeme(): string {\n      return (<Token>this.children[0]).lexeme;\n    }\n\n    get typeInfo(): GalaceanDataType {\n      if (this.symbolInfo instanceof VarSymbol) return this.symbolInfo.dataType.type;\n      return this.symbolInfo?.type;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.variable_identifier);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      const token = this.children[0] as Token;\n\n      // #if _VERBOSE\n      const builtinVar = BuiltinVariable.getVar(token.lexeme);\n      if (builtinVar) {\n        this.symbolInfo = builtinVar;\n        return;\n      }\n      // #endif\n\n      this.symbolInfo = sa.symbolTable.lookup({ ident: token.lexeme, symbolType: ESymbolType.VAR }) as VarSymbol;\n      // #if _VERBOSE\n      if (!this.symbolInfo) {\n        sa.error(this.location, \"undeclared identifier:\", token.lexeme);\n      }\n      // #endif\n    }\n\n    override codeGen(visitor: CodeGenVisitor): string {\n      return visitor.visitVariableIdentifier(this);\n    }\n  }\n\n  export class GLShaderProgram extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(GLShaderProgram);\n\n    shaderData: ShaderData;\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.gs_shader_program);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      this.shaderData = sa.shaderData;\n      this.shaderData.symbolTable = sa.symbolTable._scope;\n    }\n  }\n}\n","import { EKeyword, ETokenType, ShaderRange } from \"../common\";\nimport { ASTNode, TreeNode } from \"../parser/AST\";\nimport { TranslationRule } from \"../parser/SemanticAnalyzer\";\nimport { ENonTerminal, GrammarSymbol } from \"../parser/GrammarSymbol\";\nimport Production from \"./Production\";\nimport { ActionInfo, EAction } from \"./types\";\nimport { ShaderLab } from \"../ShaderLab\";\nimport { ClearableObjectPool, IPoolElement } from \"@galacean/engine\";\nimport { NodeChild } from \"../parser/types\";\n\nexport default class GrammarUtils {\n  static isTerminal(sm: GrammarSymbol) {\n    return sm < ENonTerminal.START;\n  }\n\n  static toString(sm: GrammarSymbol) {\n    if (this.isTerminal(sm)) {\n      return ETokenType[sm] ?? EKeyword[sm];\n    }\n    return ENonTerminal[sm];\n  }\n\n  static createProductionWithOptions(\n    goal: ENonTerminal,\n    options: GrammarSymbol[][],\n    /** the ast node */\n    astTypePool?: ClearableObjectPool<\n      { set: (loc: ShaderRange, children: NodeChild[]) => void } & IPoolElement & TreeNode\n    >\n  ) {\n    const ret: [GrammarSymbol[], TranslationRule | undefined][] = [];\n    for (const opt of options) {\n      ret.push([\n        [goal, ...opt],\n        function (sa, ...children) {\n          if (!children[0]) return;\n          const start = children[0].location.start;\n          const end = children[children.length - 1].location.end;\n          const location = ShaderLab.createRange(start, end);\n          ASTNode.get(astTypePool ?? ASTNode.TrivialNode.pool, sa, location, children);\n        }\n      ]);\n    }\n    return ret;\n  }\n\n  static createProductionOptions(common: GrammarSymbol[], position: number, opts: GrammarSymbol[][]) {\n    const ret: GrammarSymbol[][] = [];\n    for (const opt of opts) {\n      const list = common.slice(0, position);\n      list.push(...opt);\n      list.push(...common.slice(position));\n      ret.push(list);\n    }\n    return ret;\n  }\n\n  static addMapSetItem<K, T>(map: Map<K, Set<T>>, k: K, v: T) {\n    const set = map.get(k) ?? new Set();\n    set.add(v);\n    map.set(k, set);\n  }\n\n  static isSubSet<T>(sa: Set<T>, sb: Set<T>) {\n    for (const item of sa) {\n      if (!sb.has(item)) return false;\n    }\n    return true;\n  }\n\n  static isActionEqual(a: ActionInfo, b: ActionInfo) {\n    return a.action === b.action && a.target === b.target;\n  }\n\n  // #if _VERBOSE\n  static printAction(actionInfo: ActionInfo) {\n    return `<Action: ${EAction[actionInfo.action]} -> ${\n      actionInfo.action === EAction.Reduce ? Production.pool.get(actionInfo.target!) : `State ${actionInfo.target!}`\n    }>`;\n  }\n\n  static printProduction(production: Production) {\n    const deriv = production.derivation.map((gs) => GrammarUtils.toString(gs)).join(\"|\");\n    return `${ENonTerminal[production.goal]} :=> ${deriv}`;\n  }\n  // #endif\n}\n","// Context Free Grammar of Galacean ShaderLab\n\nimport { Grammar } from \"../parser/Grammar\";\nimport { ENonTerminal, GrammarSymbol } from \"../parser/GrammarSymbol\";\nimport GrammarUtils from \"./Utils\";\nimport { EKeyword, ETokenType } from \"../common\";\nimport SematicAnalyzer, { TranslationRule } from \"../parser/SemanticAnalyzer\";\nimport { ASTNode } from \"../parser/AST\";\n\nconst productionAndRules: [GrammarSymbol[], TranslationRule | undefined][] = [\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.gs_shader_program,\n    [[ENonTerminal.global_declaration], [ENonTerminal.gs_shader_program, ENonTerminal.global_declaration]],\n    ASTNode.GLShaderProgram.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(ENonTerminal.global_declaration, [\n    [ENonTerminal.precision_specifier],\n    [ENonTerminal.variable_declaration],\n    [ENonTerminal.struct_specifier],\n    [ENonTerminal.function_definition]\n  ]),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.variable_declaration,\n    [\n      [EKeyword.GS_RenderQueueType, ETokenType.ID, ETokenType.SEMICOLON],\n      [ENonTerminal.fully_specified_type, ETokenType.ID, ETokenType.SEMICOLON],\n      [ENonTerminal.fully_specified_type, ETokenType.ID, ENonTerminal.array_specifier, ETokenType.SEMICOLON]\n    ],\n    ASTNode.VariableDeclaration.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.ext_builtin_type_specifier_nonarray,\n    [\n      [EKeyword.VOID],\n      [EKeyword.FLOAT],\n      [EKeyword.BOOL],\n      [EKeyword.INT],\n      [EKeyword.UINT],\n      [EKeyword.VEC2],\n      [EKeyword.VEC3],\n      [EKeyword.VEC4],\n      [EKeyword.BVEC2],\n      [EKeyword.BVEC3],\n      [EKeyword.BVEC4],\n      [EKeyword.IVEC2],\n      [EKeyword.IVEC3],\n      [EKeyword.IVEC4],\n      [EKeyword.UVEC2],\n      [EKeyword.UVEC3],\n      [EKeyword.UVEC4],\n      [EKeyword.MAT2],\n      [EKeyword.MAT3],\n      [EKeyword.MAT4],\n      [EKeyword.MAT2X3],\n      [EKeyword.MAT2X4],\n      [EKeyword.MAT3X2],\n      [EKeyword.MAT3X4],\n      [EKeyword.MAT4X2],\n      [EKeyword.MAT4X3],\n      [EKeyword.SAMPLER2D],\n      [EKeyword.SAMPLER3D],\n      [EKeyword.SAMPLER_CUBE],\n      [EKeyword.SAMPLER2D_SHADOW],\n      [EKeyword.SAMPLER_CUBE_SHADOW],\n      [EKeyword.SAMPLER2D_ARRAY],\n      [EKeyword.SAMPLER2D_ARRAY_SHADOW],\n      [EKeyword.I_SAMPLER2D],\n      [EKeyword.I_SAMPLER3D],\n      [EKeyword.I_SAMPLER_CUBE],\n      [EKeyword.I_SAMPLER2D_ARRAY],\n      [EKeyword.U_SAMPLER2D],\n      [EKeyword.U_SAMPLER3D],\n      [EKeyword.U_SAMPLER_CUBE],\n      [EKeyword.U_SAMPLER2D_ARRAY]\n    ],\n    ASTNode.ExtBuiltinTypeSpecifierNonArray.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.type_specifier_nonarray,\n    [[ETokenType.ID], [ENonTerminal.ext_builtin_type_specifier_nonarray]],\n    ASTNode.TypeSpecifierNonArray.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.fully_specified_type,\n    [[ENonTerminal.type_specifier], [ENonTerminal.type_qualifier, ENonTerminal.type_specifier]],\n    ASTNode.FullySpecifiedType.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.type_specifier,\n    [\n      [ENonTerminal.type_specifier_nonarray],\n      [ENonTerminal.ext_builtin_type_specifier_nonarray, ENonTerminal.array_specifier]\n    ],\n    ASTNode.TypeSpecifier.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.type_qualifier,\n    [[ENonTerminal.single_type_qualifier], [ENonTerminal.type_qualifier, ENonTerminal.single_type_qualifier]],\n    ASTNode.TypeQualifier.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.single_type_qualifier,\n    [\n      [ENonTerminal.storage_qualifier],\n      [ENonTerminal.precision_qualifier],\n      [ENonTerminal.interpolation_qualifier],\n      [ENonTerminal.invariant_qualifier],\n      [EKeyword.PRECISE]\n    ],\n    ASTNode.SingleTypeQualifier.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.storage_qualifier,\n    [[EKeyword.CONST], [EKeyword.IN], [EKeyword.INOUT], [EKeyword.OUT], [EKeyword.CENTROID]],\n    // #if _VERBOSE\n    ASTNode.StorageQualifier.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.interpolation_qualifier,\n    [[EKeyword.SMOOTH], [EKeyword.FLAT]],\n    // #if _VERBOSE\n    ASTNode.InterpolationQualifier.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.invariant_qualifier,\n    [[EKeyword.INVARIANT]],\n    // #if _VERBOSE\n    ASTNode.InvariantQualifier.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.precision_qualifier,\n    [[EKeyword.HIGHP], [EKeyword.MEDIUMP], [EKeyword.LOWP]],\n    // #if _VERBOSE\n    ASTNode.PrecisionQualifier.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.struct_specifier,\n    [\n      [\n        EKeyword.STRUCT,\n        ETokenType.ID,\n        ETokenType.LEFT_BRACE,\n        ENonTerminal.struct_declaration_list,\n        ETokenType.RIGHT_BRACE,\n        ETokenType.SEMICOLON\n      ],\n      [\n        EKeyword.STRUCT,\n        ETokenType.LEFT_BRACE,\n        ENonTerminal.struct_declaration_list,\n        ETokenType.RIGHT_BRACE,\n        ETokenType.SEMICOLON\n      ]\n    ],\n    ASTNode.StructSpecifier.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.struct_declaration_list,\n    [[ENonTerminal.struct_declaration], [ENonTerminal.struct_declaration_list, ENonTerminal.struct_declaration]],\n    ASTNode.StructDeclarationList.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.struct_declaration,\n    [\n      [ENonTerminal.type_specifier, ENonTerminal.struct_declarator_list, ETokenType.SEMICOLON],\n      [\n        ENonTerminal.type_qualifier,\n        ENonTerminal.type_specifier,\n        ENonTerminal.struct_declarator_list,\n        ETokenType.SEMICOLON\n      ]\n    ],\n    ASTNode.StructDeclaration.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.struct_declarator_list,\n    [\n      [ENonTerminal.struct_declarator],\n      [ENonTerminal.struct_declarator_list, ETokenType.COMMA, ENonTerminal.struct_declarator]\n    ],\n    ASTNode.StructDeclaratorList.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.struct_declarator,\n    [[ETokenType.ID], [ETokenType.ID, ENonTerminal.array_specifier]],\n    ASTNode.StructDeclarator.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.array_specifier,\n    [\n      [ETokenType.LEFT_BRACKET, ETokenType.RIGHT_BRACKET],\n      [ETokenType.LEFT_BRACKET, ENonTerminal.integer_constant_expression, ETokenType.RIGHT_BRACKET]\n    ],\n    ASTNode.ArraySpecifier.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.integer_constant_expression_operator,\n    [[ETokenType.PLUS], [ETokenType.DASH], [ETokenType.STAR], [ETokenType.SLASH], [ETokenType.PERCENT]],\n    ASTNode.IntegerConstantExpressionOperator.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.integer_constant_expression,\n    [\n      [ENonTerminal.variable_identifier],\n      [ETokenType.INT_CONSTANT],\n      [\n        ENonTerminal.integer_constant_expression,\n        ENonTerminal.integer_constant_expression_operator,\n        ETokenType.INT_CONSTANT\n      ],\n      [\n        ENonTerminal.integer_constant_expression,\n        ENonTerminal.integer_constant_expression_operator,\n        ENonTerminal.variable_identifier\n      ]\n    ],\n    ASTNode.IntegerConstantExpression.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.conditional_expression,\n    [\n      [ENonTerminal.logical_or_expression],\n      [\n        ENonTerminal.logical_or_expression,\n        ETokenType.QUESTION,\n        ENonTerminal.expression,\n        ETokenType.COLON,\n        ENonTerminal.assignment_expression\n      ]\n    ],\n    // #if _VERBOSE\n    ASTNode.ConditionalExpression.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.logical_or_expression,\n    [\n      [ENonTerminal.logical_xor_expression],\n      [ENonTerminal.logical_or_expression, ETokenType.OR_OP, ENonTerminal.logical_xor_expression]\n    ],\n    // #if _VERBOSE\n    ASTNode.LogicalOrExpression.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.logical_xor_expression,\n    [\n      [ENonTerminal.logical_and_expression],\n      [ENonTerminal.logical_xor_expression, ETokenType.XOR_OP, ENonTerminal.logical_and_expression]\n    ],\n    // #if _VERBOSE\n    ASTNode.LogicalXorExpression.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.logical_and_expression,\n    [\n      [ENonTerminal.inclusive_or_expression],\n      [ENonTerminal.logical_and_expression, ETokenType.AND_OP, ENonTerminal.inclusive_or_expression]\n    ],\n    // #if _VERBOSE\n    ASTNode.LogicalAndExpression.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.inclusive_or_expression,\n    [\n      [ENonTerminal.exclusive_or_expression],\n      [ENonTerminal.inclusive_or_expression, ETokenType.VERTICAL_BAR, ENonTerminal.exclusive_or_expression]\n    ],\n    // #if _VERBOSE\n    ASTNode.InclusiveOrExpression.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.exclusive_or_expression,\n    [\n      [ENonTerminal.and_expression],\n      [ENonTerminal.exclusive_or_expression, ETokenType.CARET, ENonTerminal.and_expression]\n    ],\n    // #if _VERBOSE\n    ASTNode.ExclusiveOrExpression.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.and_expression,\n    [\n      [ENonTerminal.equality_expression],\n      [ENonTerminal.and_expression, ETokenType.AMPERSAND, ENonTerminal.equality_expression]\n    ],\n    // #if _VERBOSE\n    ASTNode.AndExpression.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.equality_expression,\n    [\n      [ENonTerminal.relational_expression],\n      [ENonTerminal.equality_expression, ETokenType.EQ_OP, ENonTerminal.relational_expression],\n      [ENonTerminal.equality_expression, ETokenType.NE_OP, ENonTerminal.relational_expression]\n    ],\n    // #if _VERBOSE\n    ASTNode.EqualityExpression.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.relational_expression,\n    [\n      [ENonTerminal.shift_expression],\n      [ENonTerminal.relational_expression, ETokenType.LEFT_ANGLE, ENonTerminal.shift_expression],\n      [ENonTerminal.relational_expression, ETokenType.RIGHT_ANGLE, ENonTerminal.shift_expression],\n      [ENonTerminal.relational_expression, ETokenType.LE_OP, ENonTerminal.shift_expression],\n      [ENonTerminal.relational_expression, ETokenType.GE_OP, ENonTerminal.shift_expression]\n    ],\n    // #if _VERBOSE\n    ASTNode.RelationalExpression.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.shift_expression,\n    [\n      [ENonTerminal.additive_expression],\n      [ENonTerminal.shift_expression, ETokenType.LEFT_OP, ENonTerminal.additive_expression],\n      [ENonTerminal.shift_expression, ETokenType.RIGHT_OP, ENonTerminal.additive_expression]\n    ],\n    // #if _VERBOSE\n    ASTNode.ShiftExpression.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.additive_expression,\n    [\n      [ENonTerminal.multiplicative_expression],\n      [ENonTerminal.additive_expression, ETokenType.PLUS, ENonTerminal.multiplicative_expression],\n      [ENonTerminal.additive_expression, ETokenType.DASH, ENonTerminal.multiplicative_expression]\n    ],\n    // #if _VERBOSE\n    ASTNode.AdditiveExpression.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.multiplicative_expression,\n    [\n      [ENonTerminal.unary_expression],\n      [ENonTerminal.multiplicative_expression, ETokenType.STAR, ENonTerminal.unary_expression],\n      [ENonTerminal.multiplicative_expression, ETokenType.SLASH, ENonTerminal.unary_expression],\n      [ENonTerminal.multiplicative_expression, ETokenType.PERCENT, ENonTerminal.unary_expression]\n    ],\n    // #if _VERBOSE\n    ASTNode.MultiplicativeExpression.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.unary_expression,\n    [\n      [ENonTerminal.postfix_expression],\n      [ETokenType.INC_OP, ENonTerminal.unary_expression],\n      [ETokenType.DEC_OP, ENonTerminal.unary_expression],\n      [ENonTerminal.unary_operator, ENonTerminal.unary_expression]\n    ],\n    // #if _VERBOSE\n    ASTNode.UnaryExpression.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.unary_operator,\n    [[ETokenType.PLUS], [ETokenType.DASH], [ETokenType.BANG], [ETokenType.TILDE]],\n    // #if _VERBOSE\n    ASTNode.UnaryOperator.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.postfix_expression,\n    [\n      [ENonTerminal.primary_expression],\n      [ENonTerminal.postfix_expression, ETokenType.LEFT_BRACKET, ENonTerminal.expression, ETokenType.RIGHT_BRACKET],\n      [ENonTerminal.function_call],\n      [ENonTerminal.postfix_expression, ETokenType.DOT, ETokenType.ID],\n      [ENonTerminal.postfix_expression, ETokenType.DOT, ENonTerminal.function_call],\n      [ENonTerminal.postfix_expression, ETokenType.INC_OP],\n      [ENonTerminal.postfix_expression, ETokenType.DEC_OP]\n    ],\n    ASTNode.PostfixExpression.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.primary_expression,\n    [\n      [ENonTerminal.variable_identifier],\n      [ETokenType.INT_CONSTANT],\n      [ETokenType.FLOAT_CONSTANT],\n      [EKeyword.TRUE],\n      [EKeyword.FALSE],\n      [ETokenType.LEFT_PAREN, ENonTerminal.expression, ETokenType.RIGHT_PAREN]\n    ],\n    ASTNode.PrimaryExpression.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.expression,\n    [\n      [ENonTerminal.assignment_expression],\n      [ENonTerminal.expression, ETokenType.COMMA, ENonTerminal.assignment_expression]\n    ],\n    ASTNode.Expression.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.assignment_expression,\n    [\n      [ENonTerminal.conditional_expression],\n      [ENonTerminal.unary_expression, ENonTerminal.assignment_operator, ENonTerminal.assignment_expression]\n    ],\n    ASTNode.AssignmentExpression.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.assignment_operator,\n    [\n      [ETokenType.EQUAL],\n      [ETokenType.MUL_ASSIGN],\n      [ETokenType.DIV_ASSIGN],\n      [ETokenType.MOD_ASSIGN],\n      [ETokenType.ADD_ASSIGN],\n      [ETokenType.SUB_ASSIGN],\n      [ETokenType.LEFT_ASSIGN],\n      [ETokenType.RIGHT_ASSIGN],\n      [ETokenType.AND_ASSIGN],\n      [ETokenType.XOR_ASSIGN],\n      [ETokenType.OR_ASSIGN]\n    ],\n    // #if _VERBOSE\n    ASTNode.AssignmentOperator.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.function_call,\n    [[ENonTerminal.function_call_generic]],\n    ASTNode.FunctionCall.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.function_call_generic,\n    [\n      [\n        ENonTerminal.function_identifier,\n        ETokenType.LEFT_PAREN,\n        ENonTerminal.function_call_parameter_list,\n        ETokenType.RIGHT_PAREN\n      ],\n      [ENonTerminal.function_identifier, ETokenType.LEFT_PAREN, ETokenType.RIGHT_PAREN],\n      [ENonTerminal.function_identifier, EKeyword.VOID, ETokenType.RIGHT_PAREN]\n    ],\n    ASTNode.FunctionCallGeneric.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.function_call_parameter_list,\n    [\n      [ENonTerminal.assignment_expression],\n      [ENonTerminal.function_call_parameter_list, ETokenType.COMMA, ENonTerminal.assignment_expression]\n    ],\n    ASTNode.FunctionCallParameterList.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.function_identifier,\n    [[ENonTerminal.type_specifier]],\n    ASTNode.FunctionIdentifier.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.function_definition,\n    [[ENonTerminal.function_prototype, ENonTerminal.compound_statement_no_scope]],\n    ASTNode.FunctionDefinition.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.function_prototype,\n    [[ENonTerminal.function_declarator, ETokenType.RIGHT_PAREN]],\n    ASTNode.FunctionProtoType.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.function_declarator,\n    [[ENonTerminal.function_header], [ENonTerminal.function_header, ENonTerminal.function_parameter_list]],\n    ASTNode.FunctionDeclarator.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.function_header,\n    [[ENonTerminal.fully_specified_type, ETokenType.ID, ETokenType.LEFT_PAREN]],\n    ASTNode.FunctionHeader.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.function_parameter_list,\n    [\n      [ENonTerminal.parameter_declaration],\n      [ENonTerminal.function_parameter_list, ETokenType.COMMA, ENonTerminal.parameter_declaration]\n    ],\n    ASTNode.FunctionParameterList.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.parameter_declaration,\n    [[ENonTerminal.type_qualifier, ENonTerminal.parameter_declarator], [ENonTerminal.parameter_declarator]],\n    ASTNode.ParameterDeclaration.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.parameter_declarator,\n    [\n      [ENonTerminal.type_specifier, ETokenType.ID],\n      [ENonTerminal.type_specifier, ETokenType.ID, ENonTerminal.array_specifier]\n    ],\n    ASTNode.ParameterDeclarator.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.statement_list,\n    [[ENonTerminal.statement], [ENonTerminal.statement_list, ENonTerminal.statement]],\n    ASTNode.StatementList.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.statement,\n    [[ENonTerminal.compound_statement], [ENonTerminal.simple_statement]],\n    // #if _VERBOSE\n    ASTNode.Statement.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.compound_statement_no_scope,\n    [\n      [ETokenType.LEFT_BRACE, ETokenType.RIGHT_BRACE],\n      [ETokenType.LEFT_BRACE, ENonTerminal.statement_list, ETokenType.RIGHT_BRACE]\n    ],\n    ASTNode.CompoundStatementNoScope.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.compound_statement,\n    [\n      [ETokenType.LEFT_BRACE, ETokenType.RIGHT_BRACE],\n      [ENonTerminal.scope_brace, ENonTerminal.statement_list, ENonTerminal.scope_end_brace]\n    ],\n    // #if _VERBOSE\n    ASTNode.CompoundStatement.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.simple_statement,\n    [\n      [ENonTerminal.declaration],\n      [ENonTerminal.expression_statement],\n      [ENonTerminal.selection_statement],\n      [ENonTerminal.iteration_statement],\n      [ENonTerminal.jump_statement]\n    ],\n    // #if _VERBOSE\n    ASTNode.SimpleStatement.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.declaration,\n    [\n      [ENonTerminal.function_prototype, ETokenType.SEMICOLON],\n      [ENonTerminal.init_declarator_list, ETokenType.SEMICOLON],\n      [\n        EKeyword.PRECISION,\n        ENonTerminal.precision_qualifier,\n        ENonTerminal.ext_builtin_type_specifier_nonarray,\n        ETokenType.SEMICOLON\n      ],\n      [ENonTerminal.type_qualifier, ETokenType.ID, ETokenType.SEMICOLON],\n      [ENonTerminal.type_qualifier, ETokenType.ID, ENonTerminal.identifier_list, ETokenType.SEMICOLON]\n    ],\n    ASTNode.Declaration.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.identifier_list,\n    [\n      [ETokenType.COMMA, ETokenType.ID],\n      [ENonTerminal.identifier_list, ETokenType.COMMA, ETokenType.ID]\n    ],\n    ASTNode.IdentifierList.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.init_declarator_list,\n    [\n      [ENonTerminal.single_declaration],\n      [ENonTerminal.init_declarator_list, ETokenType.COMMA, ETokenType.ID],\n      [ENonTerminal.init_declarator_list, ETokenType.COMMA, ETokenType.ID, ENonTerminal.array_specifier],\n      [\n        ENonTerminal.init_declarator_list,\n        ETokenType.COMMA,\n        ETokenType.ID,\n        ENonTerminal.array_specifier,\n        ETokenType.EQUAL,\n        ENonTerminal.initializer\n      ],\n      [ENonTerminal.init_declarator_list, ETokenType.COMMA, ETokenType.ID, ETokenType.EQUAL, ENonTerminal.initializer]\n    ],\n    ASTNode.InitDeclaratorList.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.single_declaration,\n    [\n      [ENonTerminal.fully_specified_type, ETokenType.ID],\n      [ENonTerminal.fully_specified_type, ETokenType.ID, ENonTerminal.array_specifier],\n      [\n        ENonTerminal.fully_specified_type,\n        ETokenType.ID,\n        ENonTerminal.array_specifier,\n        ETokenType.EQUAL,\n        ENonTerminal.initializer\n      ],\n      [ENonTerminal.fully_specified_type, ETokenType.ID, ETokenType.EQUAL, ENonTerminal.initializer]\n    ],\n    ASTNode.SingleDeclaration.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.initializer,\n    [\n      [ENonTerminal.assignment_expression],\n      [ETokenType.LEFT_BRACE, ENonTerminal.initializer_list, ETokenType.RIGHT_BRACE]\n    ],\n    // #if _VERBOSE\n    ASTNode.Initializer.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.initializer_list,\n    [[ENonTerminal.initializer], [ENonTerminal.initializer_list, ETokenType.COMMA, ENonTerminal.initializer]],\n    // #if _VERBOSE\n    ASTNode.InitializerList.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.expression_statement,\n    [[ETokenType.SEMICOLON], [ENonTerminal.expression, ETokenType.SEMICOLON]],\n    // #if _VERBOSE\n    ASTNode.ExpressionStatement.pool\n    // #endif\n  ),\n\n  // dangling else ambiguity\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.selection_statement,\n    [\n      [EKeyword.IF, ETokenType.LEFT_PAREN, ENonTerminal.expression, ETokenType.RIGHT_PAREN, ENonTerminal.statement],\n      [\n        EKeyword.IF,\n        ETokenType.LEFT_PAREN,\n        ENonTerminal.expression,\n        ETokenType.RIGHT_PAREN,\n        ENonTerminal.statement,\n        EKeyword.ELSE,\n        ENonTerminal.statement\n      ]\n    ],\n    // #if _VERBOSE\n    ASTNode.SelectionStatement.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.iteration_statement,\n    [\n      [EKeyword.WHILE, ETokenType.LEFT_PAREN, ENonTerminal.condition, ETokenType.RIGHT_PAREN, ENonTerminal.statement],\n      [\n        EKeyword.FOR,\n        ETokenType.LEFT_PAREN,\n        ENonTerminal.for_init_statement,\n        ENonTerminal.for_rest_statement,\n        ETokenType.RIGHT_PAREN,\n        ENonTerminal.statement\n      ]\n    ],\n    // #if _VERBOSE\n    ASTNode.IterationStatement.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.precision_specifier,\n    [\n      [\n        EKeyword.PRECISION,\n        ENonTerminal.precision_qualifier,\n        ENonTerminal.ext_builtin_type_specifier_nonarray,\n        ETokenType.SEMICOLON\n      ]\n    ],\n    ASTNode.PrecisionSpecifier.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.for_init_statement,\n    [[ENonTerminal.expression_statement], [ENonTerminal.declaration]],\n    // #if _VERBOSE\n    ASTNode.ForInitStatement.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.condition,\n    [\n      [ENonTerminal.expression],\n      [ENonTerminal.fully_specified_type, ETokenType.ID, ETokenType.EQUAL, ENonTerminal.initializer]\n    ],\n    // #if _VERBOSE\n    ASTNode.Condition.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.for_rest_statement,\n    [\n      [ENonTerminal.conditionopt, ETokenType.SEMICOLON],\n      [ENonTerminal.conditionopt, ETokenType.SEMICOLON, ENonTerminal.expression]\n    ],\n    // #if _VERBOSE\n    ASTNode.ForRestStatement.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.conditionopt,\n    [[ETokenType.EPSILON], [ENonTerminal.condition]],\n    // #if _VERBOSE\n    ASTNode.ConditionOpt.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.jump_statement,\n    [\n      [EKeyword.CONTINUE, ETokenType.SEMICOLON],\n      [EKeyword.BREAK, ETokenType.SEMICOLON],\n      [EKeyword.RETURN, ETokenType.SEMICOLON],\n      [EKeyword.RETURN, ENonTerminal.expression, ETokenType.SEMICOLON],\n      [EKeyword.DISCARD, ETokenType.SEMICOLON]\n    ],\n    ASTNode.JumpStatement.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.scope_brace,\n    [[ETokenType.LEFT_BRACE]],\n    ASTNode.ScopeBrace.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.scope_end_brace,\n    [[ETokenType.RIGHT_BRACE]],\n    ASTNode.ScopeEndBrace.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.variable_identifier,\n    [[ETokenType.ID]],\n    ASTNode.VariableIdentifier.pool\n  )\n];\n\nconst createGrammar = () =>\n  Grammar.create(\n    ENonTerminal.gs_shader_program,\n    productionAndRules.map((item) => item[0])\n  );\n\nconst addTranslationRule = (sa: SematicAnalyzer) => {\n  for (let i = 0; i < productionAndRules.length; i++) {\n    const rule = productionAndRules[i][1];\n    if (rule) {\n      sa.addTranslationRule(i, rule);\n    }\n  }\n};\n\nexport { createGrammar, addTranslationRule };\n","import { ETokenType } from \"../common\";\nimport { ENonTerminal, Terminal } from \"../parser/GrammarSymbol\";\nimport Production from \"./Production\";\nimport GrammarUtils from \"./Utils\";\n\nexport default class StateItem {\n  static _id = 0;\n\n  readonly production: Production;\n  readonly position: number;\n  readonly lookaheadSet: Set<Terminal>;\n  readonly id: number;\n\n  _needReInfer = true;\n  get needReInfer() {\n    return this._needReInfer;\n  }\n  set needReInfer(v: boolean) {\n    this._needReInfer = v;\n  }\n\n  get curSymbol() {\n    return this.production.derivation[this.position];\n  }\n  get nextSymbol() {\n    return this.production.derivation[this.position + 1];\n  }\n\n  constructor(production: Production, position: number, lookahead: Iterable<Terminal>) {\n    this.production = production;\n    this.position = position;\n    this.lookaheadSet = new Set();\n    for (const la of lookahead) {\n      this.lookaheadSet.add(la);\n    }\n    this.id = StateItem._id++;\n  }\n\n  addLookahead(ts: Iterable<Terminal>) {\n    for (const t of ts) {\n      if (this.lookaheadSet.has(t)) continue;\n      this.lookaheadSet.add(t);\n      this.needReInfer = true;\n    }\n  }\n\n  symbolByOffset(offset: number) {\n    return this.production.derivation[this.position + offset];\n  }\n\n  canReduce() {\n    if (this.position > this.production.derivation.length - 1) return true;\n    else {\n      for (let i = this.position; i < this.production.derivation.length; i++) {\n        if (this.production.derivation[i] !== ETokenType.EPSILON) return false;\n      }\n      return true;\n    }\n  }\n\n  advance() {\n    // #if _VERBOSE\n    if (this.canReduce()) throw `Error: advance reduce-able parsing state item`;\n    // #endif\n    return new StateItem(this.production, this.position + 1, this.lookaheadSet);\n  }\n\n  // #if _VERBOSE\n  toString() {\n    const coreItem = this.production.derivation.map((item) => GrammarUtils.toString(item));\n    coreItem[this.position] = \".\" + (coreItem[this.position] ?? \"\");\n\n    return `${ENonTerminal[this.production.goal]} :=> ${coreItem.join(\"|\")} ;${Array.from(this.lookaheadSet)\n      .map((item) => GrammarUtils.toString(item))\n      .join(\"/\")}`;\n  }\n  // #endif\n}\n","import { Terminal } from \"../parser/GrammarSymbol\";\nimport Production from \"./Production\";\nimport StateItem from \"./StateItem\";\n\nexport default class State {\n  static closureMap: Map<string /** state mapKey */, State> = new Map();\n  static pool: Map<number, State> = new Map();\n  static _id = 0;\n\n  readonly id: number;\n  readonly cores: Set<StateItem>;\n  private _items: Set<StateItem>;\n  get items() {\n    return this._items;\n  }\n\n  closured = false;\n  get needReInfer() {\n    for (const core of this.cores) {\n      if (core.needReInfer) return true;\n    }\n    return false;\n  }\n\n  private _stateItemPool: Map<string /** Map ID */, StateItem> = new Map();\n\n  static create(cores: StateItem[]) {\n    const cacheKey = this.getMapKey(cores);\n    const state = this.closureMap.get(cacheKey);\n    if (state) {\n      for (const core of cores) {\n        // merge lookahead\n        state.createStateItem(core.production, core.position, core.lookaheadSet);\n      }\n      return state;\n    }\n\n    const newState = new State(cores);\n    this.closureMap.set(cacheKey, newState);\n    return newState;\n  }\n\n  // TODO: any optimization?\n  static getMapKey(cores: StateItem[]) {\n    return cores.map((item) => `${item.production.id},${item.position}`).join(\";\");\n  }\n\n  private constructor(cores: Iterable<StateItem>) {\n    this.id = State._id++;\n    this._items = new Set([...cores]);\n    this.cores = new Set([...cores]);\n    for (const it of cores) {\n      const itemMapKey = this.getStateItemMapKey(it.production, it.position);\n      this._stateItemPool.set(itemMapKey, it);\n    }\n    State.pool.set(this.id, this);\n  }\n\n  // TODO: any optimization?\n  getStateItemMapKey(production: Production, position: number) {\n    return `${production.id},${position}`;\n  }\n\n  createStateItem(production: Production, position: number, lookaheadSet: Iterable<Terminal> = new Set()) {\n    const mapId = this.getStateItemMapKey(production, position);\n    const item = this._stateItemPool.get(mapId);\n    if (item) {\n      for (const la of lookaheadSet) {\n        if (item.lookaheadSet.has(la)) continue;\n        item.lookaheadSet.add(la);\n        item.needReInfer = true;\n      }\n      return item;\n    }\n    const newItem = new StateItem(production, position, lookaheadSet);\n    this._stateItemPool.set(mapId, newItem);\n    return newItem;\n  }\n}\n","import { Grammar } from \"../parser/Grammar\";\nimport { ENonTerminal, GrammarSymbol, Terminal } from \"../parser/GrammarSymbol\";\nimport State from \"./State\";\nimport StateItem from \"./StateItem\";\nimport GrammarUtils from \"./Utils\";\nimport { EKeyword, ETokenType } from \"../common\";\nimport Utils from \"./Utils\";\nimport { ActionInfo, ActionTable, EAction, GotoTable, StateActionTable, StateGotoTable } from \"./types\";\n\n/**\n * The [LALR1](https://web.stanford.edu/class/archive/cs/cs143/cs143.1128/handouts/140%20LALR%20Parsing.pdf) Parser generator\n */\nexport class LALR1 {\n  readonly firstSetMap: Map<ENonTerminal, Set<Terminal>> = new Map();\n  readonly followSetMap: Map<ENonTerminal, Set<Terminal>> = new Map();\n\n  readonly actionTable: StateActionTable = new Map();\n  readonly gotoTable: StateGotoTable = new Map();\n  private grammar: Grammar;\n\n  /** For circle detect */\n  private _firstSetNTStack: ENonTerminal[] = [];\n\n  constructor(grammar: Grammar) {\n    this.grammar = grammar;\n  }\n\n  generate() {\n    this.computeFirstSet();\n    this.buildStateTable();\n  }\n\n  private buildStateTable() {\n    const startStateItemCore = [new StateItem(this.grammar.productions[0], 0, [ETokenType.EOF])];\n    const startState = State.create(startStateItemCore);\n    this._extendState(startState);\n  }\n\n  private _extendState(state: State) {\n    if (!state.needReInfer) return;\n    this._closure(state);\n    const newStates = this._inferNextState(state);\n    for (const ns of newStates) {\n      this._extendState(ns);\n    }\n  }\n\n  private _closure(state: State) {\n    for (const core of state.cores) {\n      if (!core.canReduce()) {\n        this._extendStateItem(state, core);\n      }\n    }\n    state.closured = true;\n    return state;\n  }\n\n  private _extendStateItem(state: State, item: StateItem) {\n    if (GrammarUtils.isTerminal(item.curSymbol)) return;\n\n    const productionList = this.grammar.getProductionList(<ENonTerminal>item.curSymbol);\n\n    if (item.nextSymbol) {\n      let newLookaheadSet = new Set<Terminal>();\n      let lastFirstSet: Set<Terminal> | undefined;\n      let terminalExist = false;\n      // when A :=> a.BC, a;  ==》 B :=> .xy, First(Ca)\n      // newLookAhead = First(Ca)\n      for (let i = 1, nextSymbol = item.symbolByOffset(1); !!nextSymbol; nextSymbol = item.symbolByOffset(++i)) {\n        if (GrammarUtils.isTerminal(nextSymbol)) {\n          newLookaheadSet.add(<Terminal>nextSymbol);\n          terminalExist = true;\n          break;\n        }\n        lastFirstSet = this.firstSetMap.get(<ENonTerminal>nextSymbol)!;\n        for (const t of lastFirstSet) {\n          newLookaheadSet.add(t);\n        }\n        if (!lastFirstSet.has(ETokenType.EPSILON)) break;\n      }\n      if (!terminalExist && lastFirstSet?.has(ETokenType.EPSILON)) {\n        for (const t of item.lookaheadSet) {\n          newLookaheadSet.add(t);\n        }\n      }\n\n      for (const production of productionList) {\n        const newItem = state.createStateItem(production, 0);\n        if (!state.items.has(newItem) || !Utils.isSubSet(newLookaheadSet, newItem.lookaheadSet)) {\n          state.items.add(newItem);\n          newItem.addLookahead(newLookaheadSet);\n          this._extendStateItem(state, newItem);\n        }\n      }\n    } else {\n      for (const production of productionList) {\n        const newItem = state.createStateItem(production, 0);\n        if (!state.items.has(newItem) || !Utils.isSubSet(item.lookaheadSet, newItem.lookaheadSet)) {\n          state.items.add(newItem);\n          newItem.addLookahead(item.lookaheadSet);\n          this._extendStateItem(state, newItem);\n        }\n      }\n    }\n  }\n\n  private _inferNextState(state: State): Set<State> {\n    const coreMap: Map<GrammarSymbol, Set<StateItem>> = new Map();\n    const stateActionTable: ActionTable = this.actionTable.get(state.id) ?? new Map();\n    const stateGotoTable: GotoTable = this.gotoTable.get(state.id) ?? new Map();\n\n    this.actionTable.set(state.id, stateActionTable);\n    this.gotoTable.set(state.id, stateGotoTable);\n\n    for (const stateItem of state.items) {\n      if (stateItem.canReduce()) {\n        let action: ActionInfo;\n        if (stateItem.production.goal !== ENonTerminal.START) {\n          action = {\n            action: EAction.Reduce,\n            target: stateItem.production.id\n          };\n        } else {\n          action = { action: EAction.Accept };\n        }\n\n        for (const t of stateItem.lookaheadSet) {\n          this._addAction(stateActionTable, t, action);\n        }\n      } else {\n        const nextItem = stateItem.advance();\n        Utils.addMapSetItem(coreMap, stateItem.curSymbol, nextItem);\n      }\n\n      stateItem.needReInfer = false;\n    }\n\n    const newStates = new Set<State>();\n    for (const [gs, cores] of coreMap.entries()) {\n      const newState = State.create(Array.from(cores));\n      if (GrammarUtils.isTerminal(gs)) {\n        this._addAction(stateActionTable, <Terminal>gs, {\n          action: EAction.Shift,\n          target: newState.id\n        });\n      } else {\n        stateGotoTable.set(<ENonTerminal>gs, newState.id);\n      }\n\n      newStates.add(newState);\n    }\n\n    return newStates;\n  }\n\n  /** Resolve shift-reduce/reduce-reduce conflict detect */\n  private _addAction(table: ActionTable, terminal: Terminal, action: ActionInfo) {\n    const exist = table.get(terminal);\n    if (exist && !Utils.isActionEqual(exist, action)) {\n      // Resolve dangling else ambiguity\n      if (terminal === EKeyword.ELSE && exist.action === EAction.Shift && action.action === EAction.Reduce) {\n        return;\n      } else {\n        // #if _VERBOSE\n        console.warn(\n          `conflict detect: <Terminal ${GrammarUtils.toString(terminal)}>`,\n          Utils.printAction(exist),\n          \" -> \",\n          Utils.printAction(action)\n        );\n        // #endif\n      }\n    }\n    table.set(terminal, action);\n  }\n\n  // https://people.cs.pitt.edu/~jmisurda/teaching/cs1622/handouts/cs1622-first_and_follow.pdf\n  private computeFirstSet() {\n    for (const production of this.grammar.productions.slice(1)) {\n      this._computeFirstSetForNT(production.goal);\n    }\n  }\n\n  private _computeFirstSetForNT(NT: ENonTerminal) {\n    // circle detect\n    const idx = this._firstSetNTStack.findIndex((item) => item === NT);\n    if (idx !== -1) {\n      const computingFS = this.firstSetMap.get(NT)!;\n      const len = this._firstSetNTStack.length;\n      for (let i = len - 1; i > idx; i--) {\n        const curNT = this._firstSetNTStack[i];\n        this.firstSetMap.set(curNT, computingFS);\n      }\n      return computingFS;\n    }\n    this._firstSetNTStack.push(NT);\n\n    const productionList = this.grammar.getProductionList(NT);\n    const firstSet = new Set<Terminal>();\n    this.firstSetMap.set(NT, firstSet);\n    if (this.grammar.isNullableNT(NT)) firstSet.add(ETokenType.EPSILON);\n\n    for (const production of productionList) {\n      let i = 0;\n      for (; i < production.derivation.length; i++) {\n        const gs = production.derivation[i];\n        if (GrammarUtils.isTerminal(gs)) {\n          firstSet.add(<Terminal>gs);\n          break;\n        }\n\n        const succeedFirstSet = this._computeFirstSetForNT(<ENonTerminal>gs);\n\n        for (const item of succeedFirstSet) {\n          if (item !== ETokenType.EPSILON) firstSet.add(item);\n        }\n        if (!this.grammar.isNullableNT(<ENonTerminal>gs)) break;\n      }\n      if (i === production.derivation.length) firstSet.add(ETokenType.EPSILON);\n    }\n\n    this._firstSetNTStack.pop();\n    return firstSet;\n  }\n}\n","import { Grammar } from \"./Grammar\";\nimport { ENonTerminal, GrammarSymbol } from \"./GrammarSymbol\";\nimport { BaseToken } from \"../common/BaseToken\";\nimport { ETokenType } from \"../common\";\nimport { EAction, StateActionTable, StateGotoTable } from \"../lalr/types\";\nimport { ASTNode, TreeNode } from \"./AST\";\nimport SematicAnalyzer from \"./SemanticAnalyzer\";\nimport { TraceStackItem } from \"./types\";\nimport { addTranslationRule, createGrammar } from \"../lalr/CFG\";\nimport { LALR1 } from \"../lalr\";\nimport { ParserUtils } from \"../ParserUtils\";\nimport { Logger } from \"@galacean/engine\";\nimport { GSError, GSErrorName } from \"../GSError\";\nimport { ShaderLab } from \"../ShaderLab\";\nimport { ShaderLabUtils } from \"../ShaderLabUtils\";\n\n/**\n * The syntax parser and sematic analyzer of `ShaderLab` compiler\n */\nexport class ShaderTargetParser {\n  readonly actionTable: StateActionTable;\n  readonly gotoTable: StateGotoTable;\n  readonly grammar: Grammar;\n  readonly sematicAnalyzer: SematicAnalyzer;\n  private _traceBackStack: (TraceStackItem | number)[] = [];\n\n  private get curState() {\n    return this._traceBackStack[this._traceBackStack.length - 1] as number;\n  }\n  private get stateActionTable() {\n    return this.actionTable.get(this.curState)!;\n  }\n  private get stateGotoTable() {\n    return this.gotoTable.get(this.curState);\n  }\n\n  // #if _VERBOSE\n  /** @internal */\n  get errors() {\n    return this.sematicAnalyzer.errors;\n  }\n  // #endif\n\n  static _singleton: ShaderTargetParser;\n\n  static create() {\n    if (!this._singleton) {\n      const grammar = createGrammar();\n      const generator = new LALR1(grammar);\n      generator.generate();\n      this._singleton = new ShaderTargetParser(generator.actionTable, generator.gotoTable, grammar);\n      addTranslationRule(this._singleton.sematicAnalyzer);\n    }\n\n    return this._singleton;\n  }\n\n  private constructor(actionTable: StateActionTable, gotoTable: StateGotoTable, grammar: Grammar) {\n    this.actionTable = actionTable;\n    this.gotoTable = gotoTable;\n    this.grammar = grammar;\n    this.sematicAnalyzer = new SematicAnalyzer();\n  }\n\n  parse(tokens: Generator<BaseToken, BaseToken>): ASTNode.GLShaderProgram | null {\n    this.sematicAnalyzer.reset();\n    const start = performance.now();\n    const { _traceBackStack: traceBackStack, sematicAnalyzer } = this;\n    traceBackStack.push(0);\n\n    let nextToken = tokens.next();\n    let loopCount = 0;\n    while (true) {\n      loopCount += 1;\n      const token = nextToken.value;\n\n      const actionInfo = this.stateActionTable.get(token.type);\n      if (actionInfo?.action === EAction.Shift) {\n        traceBackStack.push(token, actionInfo.target!);\n        nextToken = tokens.next();\n      } else if (actionInfo?.action === EAction.Accept) {\n        Logger.info(\n          `[pass compilation - parser] Accept! State automata run ${loopCount} times! cost time ${\n            performance.now() - start\n          }ms`\n        );\n        sematicAnalyzer.acceptRule?.(sematicAnalyzer);\n        return sematicAnalyzer.semanticStack.pop() as ASTNode.GLShaderProgram;\n      } else if (actionInfo?.action === EAction.Reduce) {\n        const target = actionInfo.target!;\n        const reduceProduction = this.grammar.getProductionByID(target)!;\n        const translationRule = sematicAnalyzer.getTranslationRule(reduceProduction.id);\n\n        const values: (TreeNode | BaseToken)[] = [];\n\n        for (let i = reduceProduction.derivation.length - 1; i >= 0; i--) {\n          if (reduceProduction.derivation[i] === ETokenType.EPSILON) continue;\n          traceBackStack.pop();\n          const token = traceBackStack.pop();\n          if (token instanceof BaseToken) {\n            values.unshift(token);\n          } else {\n            const astNode = sematicAnalyzer.semanticStack.pop()!;\n            values.unshift(astNode);\n          }\n        }\n        translationRule?.(sematicAnalyzer, ...values);\n\n        const gotoTable = this.stateGotoTable;\n        traceBackStack.push(reduceProduction.goal);\n\n        const nextState = gotoTable?.get(reduceProduction.goal)!;\n        traceBackStack.push(nextState);\n        continue;\n      } else {\n        const error = ShaderLabUtils.createGSError(\n          `Unexpected token ${token.lexeme}`,\n          GSErrorName.CompilationError,\n          ShaderLab._processingPassText,\n          token.location\n        );\n        // #if _VERBOSE\n        this.sematicAnalyzer.errors.push(<GSError>error);\n        // #endif\n        return null;\n      }\n    }\n  }\n\n  // #if _VERBOSE\n  private _printStack(nextToken: BaseToken) {\n    let str = \"\";\n    for (let i = 0; i < this._traceBackStack.length - 1; i++) {\n      const state = <ENonTerminal>this._traceBackStack[i++];\n      const token = this._traceBackStack[i];\n      str += `State${state} - ${(<BaseToken>token).lexeme ?? ParserUtils.toString(token as GrammarSymbol)}; `;\n    }\n    str += `State${this._traceBackStack[this._traceBackStack.length - 1]} --- ${nextToken.lexeme}`;\n    Logger.info(str);\n  }\n  // #endif\n}\n","function _type_of(obj) {\n    \"@swc/helpers - typeof\";\n\n    return obj && typeof Symbol !== \"undefined\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n}\nexport { _type_of as _ };\n","import { BaseToken } from \"../common/BaseToken\";\nimport { ShaderRange } from \"../common\";\nimport { ShaderLabUtils } from \"../ShaderLabUtils\";\n// #if _VERBOSE\nimport { GSErrorName } from \"../GSError\";\n// #endif\n\nexport class MacroDefine {\n  private _replaceRegex?: RegExp;\n  private readonly _argsLexemes: string[];\n\n  get isFunction(): boolean {\n    return !!this.args?.length;\n  }\n\n  constructor(\n    public readonly macro: BaseToken,\n    public readonly body?: BaseToken,\n    public readonly location?: ShaderRange,\n    public readonly args?: BaseToken[]\n  ) {\n    if (args) {\n      this._argsLexemes = this.args.map((item) => item.lexeme);\n      this._replaceRegex = new RegExp(`\\\\b(${this._argsLexemes.join(\"|\")})\\\\b`, \"g\");\n    }\n  }\n\n  expandFunctionBody(args: string[]): string {\n    if (args.length !== this.args?.length) {\n      throw ShaderLabUtils.createGSError(\"mismatched function macro\", GSErrorName.PreprocessorError, \"\", this.location);\n    }\n\n    return this.body.lexeme.replace(this._replaceRegex, (m) => {\n      return args[this._argsLexemes.indexOf(m)];\n    });\n  }\n}\n","export enum EPpToken {\n  id,\n  line_remain,\n  chunk,\n  int_constant,\n  string_const,\n  /** \\>> */\n  right_op,\n  /** << */\n  left_op,\n  left_paren,\n  right_paren,\n  /** \\>= */\n  ge,\n  /** <= */\n  le,\n  /** == */\n  eq,\n  /** != */\n  neq,\n  /** && */\n  and,\n  /** || */\n  or,\n  /** < */\n  left_angle,\n  /** \\> */\n  right_angle,\n  /** \\* */\n  star,\n  /** + */\n  plus,\n  /** \\- */\n  dash,\n  /** ! */\n  bang,\n  /** \\/ */\n  slash,\n  /** % */\n  percent,\n\n  EOF = 100\n}\n\nexport enum EPpKeyword {\n  define = 101,\n  undef,\n  if,\n  ifdef,\n  ifndef,\n  else,\n  elif,\n  endif,\n  include,\n\n  defined\n}\n\nexport const PpKeyword = new Map<string, EPpKeyword>([\n  [\"#define\", EPpKeyword.define],\n  [\"#undef\", EPpKeyword.undef],\n  [\"#if\", EPpKeyword.if],\n  [\"#ifdef\", EPpKeyword.ifdef],\n  [\"#ifndef\", EPpKeyword.ifndef],\n  [\"#else\", EPpKeyword.else],\n  [\"#elif\", EPpKeyword.elif],\n  [\"#endif\", EPpKeyword.endif],\n  [\"#include\", EPpKeyword.include],\n  [\"defined\", EPpKeyword.defined]\n]);\n\nexport type PpConstant = boolean | number;\n","import { ShaderRange } from \"../common\";\nimport { ExpandSegment } from \"./PpParser\";\n// #if _VERBOSE\nimport PpSourceMap, { MapRange } from \"./sourceMap\";\n// #endif\n\nexport class PpUtils {\n  static expand(\n    segments: ExpandSegment[],\n    source: string,\n    // #if _VERBOSE\n    sourceMap?: PpSourceMap\n    //#endif\n  ) {\n    const ret: string[] = [];\n    let startIdx = 0;\n    let generatedIdx = 0;\n\n    for (const seg of segments) {\n      const originSlice = source.slice(startIdx, seg.rangeInBlock.start.index);\n      ret.push(originSlice, seg.replace);\n\n      const generatedIdxEnd = generatedIdx + originSlice.length + seg.replace.length;\n\n      // #if _VERBOSE\n      const mapRange = new MapRange(seg.block, seg.rangeInBlock, {\n        start: generatedIdx + originSlice.length,\n        end: generatedIdxEnd\n      });\n      sourceMap?.addMapRange(mapRange);\n      // #endif\n\n      startIdx = seg.rangeInBlock.end.index;\n      generatedIdx = generatedIdxEnd;\n    }\n    ret.push(source.slice(startIdx));\n    return ret.join(\"\");\n  }\n\n  static assembleSegments(\n    segments: {\n      range: ShaderRange;\n      replace: string;\n    }[],\n    source: string\n  ) {\n    const ret: string[] = [];\n    let startIdx = 0;\n    for (const seg of segments) {\n      const originSlice = source.slice(startIdx, seg.range.start.index);\n      ret.push(originSlice, seg.replace);\n      startIdx = seg.range.end.index;\n    }\n    ret.push(source.slice(startIdx));\n    return ret.join(\"\");\n  }\n}\n","import { ShaderRange, ShaderPosition } from \"../common\";\nimport LexerUtils from \"../lexer/Utils\";\n// #if _VERBOSE\nimport PpSourceMap from \"./sourceMap\";\n// #endif\nimport BaseScanner from \"../common/BaseScanner\";\nimport { BaseToken, EOF } from \"../common/BaseToken\";\nimport { EPpKeyword, EPpToken, PpKeyword } from \"./constants\";\nimport { PpUtils } from \"./Utils\";\nimport { ShaderLab } from \"../ShaderLab\";\n\nexport type OnToken = (token: BaseToken, scanner: PpScanner) => void;\n\nexport default class PpScanner extends BaseScanner {\n  private static _splitCharacters = /[\\w#.]/;\n\n  private macroLvl = 0;\n\n  // #if _VERBOSE\n  readonly sourceMap = new PpSourceMap();\n  readonly file: string;\n  readonly blockRange?: ShaderRange;\n  // #endif\n\n  constructor(\n    source: string,\n    // #if _VERBOSE\n    file = \"__main__\",\n    blockRange?: ShaderRange\n    // #endif\n  ) {\n    super(source);\n    // #if _VERBOSE\n    this.file = file;\n    this.blockRange = blockRange;\n    // #endif\n  }\n\n  /**\n   * Advance to directive\n   * @param expandOnToken callback on encountering token.\n   */\n  scanDirective(expandOnToken?: OnToken): BaseToken<number> {\n    const directive = this._advanceToDirective(expandOnToken);\n    if ([EPpKeyword.if, EPpKeyword.ifdef, EPpKeyword.ifndef].includes(<any>directive?.type)) {\n      this.macroLvl += 1;\n    } else if (<any>directive?.type === EPpKeyword.endif) {\n      this.macroLvl -= 1;\n    }\n    return directive;\n  }\n\n  /**\n   * @param nonLetterChar should not be space\n   */\n  scanWordsUntilChar(nonLetterChar: string): BaseToken[] {\n    const ret: BaseToken[] = [];\n    while (true) {\n      this.skipSpace(true);\n      if (LexerUtils.isLetter(this.getCurChar())) {\n        ret.push(this.scanWord());\n      } else if (this.getCurChar() === nonLetterChar) {\n        this.advance();\n        return ret;\n      } else {\n        this.advance();\n      }\n    }\n  }\n\n  scanWord(skipNonLetter = false): BaseToken {\n    if (skipNonLetter) {\n      while (!LexerUtils.isLetter(this.getCurChar()) && !this.isEnd()) {\n        this.advance();\n      }\n    } else {\n      this.skipSpace(true);\n    }\n\n    if (this.isEnd()) return EOF;\n\n    const start = this._currentIndex;\n    while (LexerUtils.isLetter(this.getCurChar()) && !this.isEnd()) {\n      this.advance();\n    }\n    const end = this._currentIndex;\n    const word = this._source.slice(start, end);\n    if (end === start) {\n      this.throwError(this.getShaderPosition(), \"no word found.\");\n    }\n    const kw = PpKeyword.get(word);\n    if (kw) {\n      const token = BaseToken.pool.get();\n      token.set(kw, word, this.getShaderPosition());\n      return token;\n    }\n\n    const token = BaseToken.pool.get();\n    token.set(EPpToken.id, word, this.getShaderPosition(word.length));\n    return token;\n  }\n\n  getShaderPosition(offset /** offset from starting point */ = 0) {\n    return ShaderLab.createPosition(\n      this._currentIndex - offset,\n      // #if _VERBOSE\n      this.line,\n      this.column - offset\n      // #endif\n    );\n  }\n\n  /**\n   * @param onToken callback when encounter a token\n   * @returns token split by space\n   */\n  override scanToken(onToken?: OnToken): BaseToken | undefined {\n    this.skipSpace(true);\n    this._skipComments();\n    if (this.isEnd()) {\n      return;\n    }\n    const start = this._currentIndex;\n    while (PpScanner._splitCharacters.test(this.getCurChar()) && !this.isEnd()) {\n      this._advance();\n    }\n\n    // Not advance\n    if (start === this._currentIndex) {\n      this._advance();\n      return this.scanToken(onToken);\n    }\n\n    const lexeme = this._source.slice(start, this._currentIndex);\n\n    const ret = BaseToken.pool.get();\n    ret.set(\n      PpKeyword.has(lexeme) ? PpKeyword.get(lexeme) : EPpToken.id,\n      lexeme,\n      this.getShaderPosition(this._currentIndex - start)\n    );\n    onToken?.(ret, this);\n    return ret;\n  }\n\n  scanQuotedString(): BaseToken<EPpToken.string_const> {\n    this.skipSpace(true);\n    if (this.getCurChar() !== '\"') {\n      this.throwError(this.getShaderPosition(), \"unexpected char, expected '\\\"'\");\n    }\n    const ShaderPosition = this.getShaderPosition();\n    this._advance();\n    const start = this._currentIndex;\n    while (this.getCurChar() !== '\"' && !this.isEnd()) this._advance();\n    if (this.isEnd()) {\n      this.throwError(this.getShaderPosition(), \"unexpected char, expected '\\\"'\");\n    }\n    const word = this._source.slice(start, this._currentIndex);\n\n    const token = BaseToken.pool.get();\n    token.set(EPpToken.string_const, word, ShaderPosition);\n    return token;\n  }\n\n  scanToChar(char: string) {\n    const source = this._source;\n    while (source[this._currentIndex] !== char && !this.isEnd()) {\n      this.advance();\n    }\n  }\n\n  scanMacroBranchChunk(): {\n    token: BaseToken<EPpToken.chunk>;\n    nextDirective: BaseToken;\n  } {\n    const start = this._currentIndex;\n    const ShaderPosition = this.getShaderPosition();\n\n    const startLvl = this.macroLvl;\n    let directive = this.scanDirective()!;\n\n    while (true) {\n      if (directive.type === EPpKeyword.endif && startLvl - 1 === this.macroLvl) break;\n      else if ([EPpKeyword.elif, EPpKeyword.else].includes(<EPpKeyword>directive.type) && startLvl === this.macroLvl)\n        break;\n      directive = this.scanDirective()!;\n    }\n\n    const chunk = this._source.slice(start, this._currentIndex - directive.lexeme.length - 1);\n    const token = BaseToken.pool.get();\n    token.set(EPpToken.chunk, chunk, ShaderPosition);\n    return { token, nextDirective: directive };\n  }\n\n  scanPairedBlock(lc: string, rc: string): void {\n    this.scanToChar(lc);\n    let level = 0;\n    const source = this._source;\n\n    do {\n      const curChar = source[this._currentIndex];\n\n      if (curChar === lc) {\n        level++;\n      } else if (curChar === rc) {\n        level--;\n      }\n      this._advance();\n    } while (level > 0);\n  }\n\n  /**\n   * @returns end ShaderPosition\n   */\n  scanRemainMacro(): ShaderPosition {\n    const startLvl = this.macroLvl;\n    let directive = this.scanDirective()!;\n    while (!this.isEnd() && (directive.type !== EPpKeyword.endif || startLvl - 1 !== this.macroLvl)) {\n      directive = this.scanDirective()!;\n    }\n    return this.getShaderPosition();\n  }\n\n  peekNonSpace() {\n    let current = this._currentIndex;\n    while (/\\s/.test(this._source[current])) {\n      current += 1;\n    }\n    return this._source[current];\n  }\n\n  scanInteger() {\n    const start = this._currentIndex;\n    while (LexerUtils.isNum(this.getCurChar())) {\n      this.advance();\n    }\n    if (this._currentIndex === start) {\n      this.throwError(this.getShaderPosition(), \"no integer found\");\n    }\n    const integer = this._source.slice(start, this._currentIndex);\n\n    const token = BaseToken.pool.get();\n    token.set(EPpToken.int_constant, integer, this.getShaderPosition());\n    return token;\n  }\n\n  /**\n   * Skip comments\n   */\n  scanLineRemain() {\n    this.skipSpace(false);\n    const start = this._currentIndex;\n\n    const comments: ShaderRange[] = [];\n\n    while (this.getCurChar() !== \"\\n\") {\n      if (this.isEnd()) {\n        const line = this._source.slice(start, this._currentIndex);\n\n        const token = BaseToken.pool.get();\n        token.set(EPpToken.line_remain, line, this.getShaderPosition(line.length));\n        return token;\n      }\n      this.advance();\n      const commentRange = this._skipComments();\n      if (commentRange) {\n        commentRange.start.index -= start;\n        commentRange.end.index -= start;\n        comments.push(commentRange);\n      }\n    }\n    let line = this._source.slice(start, this._currentIndex);\n    if (comments.length) {\n      // filter comments\n      line = PpUtils.assembleSegments(\n        comments.map((item) => ({ range: item, replace: \"\" })),\n        line\n      );\n    }\n\n    const token = BaseToken.pool.get();\n    token.set(EPpToken.line_remain, line, this.getShaderPosition(line.length));\n    return token;\n  }\n\n  private _advanceToDirective(onToken?: OnToken): BaseToken | undefined {\n    while (true) {\n      const token = this.scanToken(onToken);\n      if (token?.lexeme.startsWith(\"#\")) return token;\n      if (this.isEnd()) return;\n    }\n  }\n\n  private _skipComments(): ShaderRange | undefined {\n    if (this.peek(2) === \"//\") {\n      const start = this.getShaderPosition();\n      // single line comments\n      while (this.getCurChar() !== \"\\n\" && !this.isEnd()) {\n        this._advance();\n      }\n      return ShaderLab.createRange(start, this.getCurPosition());\n    } else if (this.peek(2) === \"/*\") {\n      const start = this.getShaderPosition();\n      //  multi-line comments\n      this.advance(2);\n      while (this.peek(2) !== \"*/\" && !this.isEnd()) {\n        this._advance();\n      }\n      this.advance(2);\n      return ShaderLab.createRange(start, this.getShaderPosition());\n    }\n  }\n}\n","import { ShaderPosition, ShaderRange } from \"../common\";\nimport LexerUtils from \"../lexer/Utils\";\nimport { MacroDefine } from \"./MacroDefine\";\nimport { BaseToken } from \"../common/BaseToken\";\nimport { EPpKeyword, EPpToken, PpConstant } from \"./constants\";\nimport PpScanner from \"./PpScanner\";\nimport { PpUtils } from \"./Utils\";\nimport { ShaderLab } from \"../ShaderLab\";\nimport { ShaderPass } from \"@galacean/engine\";\nimport { ShaderLabUtils } from \"../ShaderLabUtils\";\nimport { GSErrorName } from \"../GSError\";\n// #if _VERBOSE\nimport PpSourceMap, { BlockInfo } from \"./sourceMap\";\n// #endif\n\nexport interface ExpandSegment {\n  // #if _VERBOSE\n  block?: BlockInfo;\n  // #endif\n  rangeInBlock: ShaderRange;\n  replace: string;\n}\n\n/** @internal */\nexport class PpParser {\n  private static _definedMacros: Map<string, MacroDefine> = new Map();\n  private static _expandSegmentsStack: ExpandSegment[][] = [[]];\n\n  /** Referenced by branch macro or defined operator */\n  private static _branchMacros: Set<string> = new Set();\n\n  private static _includeMap: Record<string, string>;\n  private static _basePathForIncludeKey: string;\n\n  // #if _VERBOSE\n  static _errors: Error[] = [];\n  // #endif\n\n  static reset(includeMap: Record<string, string>, basePathForIncludeKey: string) {\n    this._definedMacros.clear();\n    this._expandSegmentsStack.length = 0;\n    this._expandSegmentsStack.push([]);\n    this._branchMacros.clear();\n    this.addPredefinedMacro(\"GL_ES\");\n    this._includeMap = includeMap;\n    this._basePathForIncludeKey = basePathForIncludeKey;\n    // #if _VERBOSE\n    this._errors.length = 0;\n    // #endif\n  }\n\n  static addPredefinedMacro(macro: string, value?: string) {\n    const tk = BaseToken.pool.get();\n    tk.set(EPpToken.id, macro);\n\n    let macroBody: BaseToken | undefined;\n    if (value) {\n      macroBody = BaseToken.pool.get();\n      macroBody.set(EPpToken.id, value);\n    }\n\n    this._definedMacros.set(macro, new MacroDefine(tk, macroBody));\n  }\n\n  static parse(scanner: PpScanner): string | null {\n    while (!scanner.isEnd()) {\n      const directive = scanner.scanDirective(this._onToken.bind(this))!;\n      if (scanner.isEnd()) break;\n      switch (directive.type) {\n        case EPpKeyword.define:\n          this._parseDefine(scanner);\n          break;\n\n        case EPpKeyword.undef:\n          this._parseUndef(scanner);\n          break;\n\n        case EPpKeyword.if:\n          this._parseIf(scanner);\n          break;\n\n        case EPpKeyword.ifndef:\n          this._parseIfNdef(scanner);\n          break;\n\n        case EPpKeyword.ifdef:\n          this._parseIfDef(scanner);\n          break;\n\n        case EPpKeyword.include:\n          this._parseInclude(scanner);\n          break;\n      }\n    }\n    // #if _VERBOSE\n    if (this._errors.length > 0) return null;\n    // #endif\n\n    return PpUtils.expand(this.expandSegments, scanner.source, scanner.sourceMap);\n  }\n\n  private static get expandSegments() {\n    return this._expandSegmentsStack[this._expandSegmentsStack.length - 1];\n  }\n\n  private static reportError(loc: ShaderRange | ShaderPosition, message: string, source: string, file: string) {\n    const error = ShaderLabUtils.createGSError(message, GSErrorName.PreprocessorError, source, loc, file);\n    // #if _VERBOSE\n    this._errors.push(error);\n    // #endif\n  }\n\n  private static _parseInclude(scanner: PpScanner) {\n    const start = scanner.getShaderPosition(8);\n\n    scanner.skipSpace(true);\n    const id = scanner.scanQuotedString();\n    let includedPath: string;\n    // builtin path\n    if (id.lexeme[0] !== \".\") {\n      includedPath = id.lexeme;\n    } else {\n      // relative path\n      // @ts-ignore\n      includedPath = new URL(id.lexeme, this._basePathForIncludeKey).href.substring(ShaderPass._shaderRootPath.length);\n    }\n\n    scanner.scanToChar(\"\\n\");\n    const end = scanner.getShaderPosition();\n    const chunk = this._includeMap[includedPath];\n    if (!chunk) {\n      this.reportError(id.location, `Shader slice \"${includedPath}\" not founded.`, scanner.source, scanner.file);\n      return;\n    }\n\n    const range = ShaderLab.createRange(start, end);\n    const expanded = this._expandMacroChunk(chunk, range, id.lexeme);\n    // #if _VERBOSE\n    const block = new BlockInfo(id.lexeme, undefined, expanded.sourceMap);\n    // #endif\n    this.expandSegments.push({\n      // #if _VERBOSE\n      block,\n      // #endif\n      rangeInBlock: range,\n      replace: expanded.content\n    });\n  }\n\n  private static _parseIfDef(scanner: PpScanner) {\n    const start = scanner.current - 6;\n\n    const id = scanner.scanWord();\n    this._addEmptyReplace(scanner, start);\n    this._branchMacros.add(id.lexeme);\n\n    const macro = this._definedMacros.get(id.lexeme);\n    scanner.skipSpace(true);\n\n    const { token: bodyChunk, nextDirective } = scanner.scanMacroBranchChunk();\n    if (!!macro) {\n      const end = nextDirective.type === EPpKeyword.endif ? scanner.getShaderPosition() : scanner.scanRemainMacro();\n\n      const expanded = this._expandMacroChunk(bodyChunk.lexeme, bodyChunk.location, scanner);\n\n      // #if _VERBOSE\n      const block = new BlockInfo(scanner.file, scanner.blockRange, expanded.sourceMap);\n      // #endif\n      const range = ShaderLab.createRange(bodyChunk.location.start, end);\n\n      this.expandSegments.push({\n        // #if _VERBOSE\n        block,\n        // #endif\n        rangeInBlock: range,\n        replace: expanded.content\n      });\n\n      return;\n    }\n\n    this.expandSegments.pop();\n    this._addEmptyReplace(scanner, start);\n\n    this._parseMacroBranch(<any>nextDirective.type, scanner);\n  }\n\n  private static _parseMacroBranch(\n    directive: EPpKeyword.elif | EPpKeyword.else | EPpKeyword.endif,\n    scanner: PpScanner\n  ) {\n    if (directive === EPpKeyword.endif) {\n      return;\n    }\n\n    const start = scanner.current;\n\n    if (directive === EPpKeyword.else) {\n      const { token: elseChunk } = scanner.scanMacroBranchChunk();\n      const expanded = this._expandMacroChunk(elseChunk.lexeme, elseChunk.location, scanner);\n      // #if _VERBOSE\n      const block = new BlockInfo(scanner.file, scanner.blockRange, expanded.sourceMap);\n      // #endif\n      const startPosition = ShaderLab.createPosition(start);\n      const range = ShaderLab.createRange(startPosition, scanner.getShaderPosition());\n      this.expandSegments.push({\n        // #if _VERBOSE\n        block,\n        // #endif\n        rangeInBlock: range,\n        replace: expanded.content\n      });\n    } else if (directive === EPpKeyword.elif) {\n      const constantExpr = this._parseConstantExpression(scanner);\n      const { token: bodyChunk, nextDirective } = scanner.scanMacroBranchChunk();\n      if (!!constantExpr) {\n        const end = nextDirective.type === EPpKeyword.endif ? scanner.current : scanner.scanRemainMacro().index;\n        const expanded = this._expandMacroChunk(bodyChunk.lexeme, bodyChunk.location, scanner);\n        // #if _VERBOSE\n        const block = new BlockInfo(scanner.file, scanner.blockRange, expanded.sourceMap);\n        // #endif\n        const startPosition = ShaderLab.createPosition(start);\n        const endPosition = ShaderLab.createPosition(end);\n        const range = ShaderLab.createRange(startPosition, endPosition);\n        this.expandSegments.push({\n          // #if _VERBOSE\n          block,\n          // #endif\n          rangeInBlock: range,\n          replace: expanded.content\n        });\n      } else {\n        // #if _VERBOSE\n        const block = new BlockInfo(scanner.file, scanner.blockRange);\n        // #endif\n        const startPosition = ShaderLab.createPosition(start);\n        const endPosition = ShaderLab.createPosition(scanner.current);\n        const range = ShaderLab.createRange(startPosition, endPosition);\n        this.expandSegments.push({\n          // #if _VERBOSE\n          block,\n          // #endif\n          rangeInBlock: range,\n          replace: \"\"\n        });\n        this._parseMacroBranch(<any>nextDirective.type, scanner);\n      }\n    }\n  }\n\n  private static _parseConstantExpression(scanner: PpScanner) {\n    scanner.skipSpace(true);\n    return this._parseLogicalOrExpression(scanner);\n  }\n\n  private static _parseLogicalOrExpression(scanner: PpScanner): PpConstant {\n    const operand1 = this._parseLogicalAndExpression(scanner);\n    const operator = scanner.peek(2);\n    if (operator && operator === \"||\") {\n      scanner.advance(2);\n      scanner.skipSpace(false);\n      const operand2 = this._parseLogicalOrExpression(scanner);\n      return operand1 || operand2;\n    }\n    return operand1;\n  }\n\n  private static _parseLogicalAndExpression(scanner: PpScanner): PpConstant {\n    const operand1 = this._parseEqualityExpression(scanner);\n    const operator = scanner.peek(2);\n    if (operator && operator === \"&&\") {\n      scanner.advance(2);\n      scanner.skipSpace(false);\n      const operand2 = this._parseLogicalAndExpression(scanner);\n      return operand1 && operand2;\n    }\n    return operand1;\n  }\n\n  private static _parseEqualityExpression(scanner: PpScanner): PpConstant {\n    const operand1 = this._parseRelationalExpression(scanner);\n    const operator = scanner.peek(2);\n    if (operator && [\"==\", \"!=\"].includes(operator)) {\n      scanner.advance(2);\n      scanner.skipSpace(false);\n      const operand2 = this._parseEqualityExpression(scanner);\n      switch (operator) {\n        case \"==\":\n          return operand1 === operand2;\n        case \"!=\":\n          return operand1 !== operand2;\n      }\n    }\n    return operand1;\n  }\n\n  private static _parseRelationalExpression(scanner: PpScanner): PpConstant {\n    const operand1 = this._parseShiftExpression(scanner) as number;\n    let operator = scanner.peek(2);\n    if (operator[1] !== \"=\") operator = operator[0];\n    if (operator && [\">\", \"<\", \">=\", \"<=\"].includes(operator)) {\n      const opPos = scanner.getShaderPosition();\n      scanner.advance(operator.length);\n      scanner.skipSpace(false);\n      const operand2 = this._parseRelationalExpression(scanner) as number;\n      if (typeof operand1 !== typeof operand2 && typeof operand1 !== \"number\") {\n        this.reportError(opPos, \"invalid operator in relation expression.\", scanner.source, scanner.file);\n        return;\n      }\n      switch (operator) {\n        case \">\":\n          return operand1 > operand2;\n        case \"<\":\n          return operand1 < operand2;\n        case \">=\":\n          return operand1 >= operand2;\n        case \"<=\":\n          return operand1 <= operand2;\n      }\n    }\n    return operand1;\n  }\n\n  private static _parseShiftExpression(scanner: PpScanner): PpConstant {\n    const operand1 = this._parseAdditiveExpression(scanner) as number;\n    const operator = scanner.peek(2);\n    if (operator && [\">>\", \"<<\"].includes(operator)) {\n      const opPos = scanner.getShaderPosition();\n      scanner.advance(2);\n      scanner.skipSpace(false);\n      const operand2 = this._parseShiftExpression(scanner) as number;\n      if (typeof operand1 !== typeof operand2 && typeof operand1 !== \"number\") {\n        this.reportError(opPos, \"invalid operator in shift expression.\", scanner.source, scanner.file);\n        return;\n      }\n      switch (operator) {\n        case \">>\":\n          return operand1 >> operand2;\n        case \"<<\":\n          return operand1 << operand2;\n      }\n    }\n\n    return operand1;\n  }\n\n  private static _parseAdditiveExpression(scanner: PpScanner): PpConstant {\n    const operand1 = this._parseMulticativeExpression(scanner) as number;\n    if ([\">\", \"<\"].includes(scanner.getCurChar())) {\n      const opPos = scanner.getShaderPosition();\n      scanner.advance();\n\n      const operator = scanner.getCurChar();\n      scanner.skipSpace(false);\n      const operand2 = this._parseAdditiveExpression(scanner) as number;\n      if (typeof operand1 !== typeof operand2 && typeof operand1 !== \"number\") {\n        this.reportError(opPos, \"invalid operator.\", scanner.source, scanner.file);\n        return false;\n      }\n      switch (operator) {\n        case \"+\":\n          return operand1 + operand2;\n        case \"-\":\n          return operand1 - operand2;\n      }\n    }\n    return operand1;\n  }\n\n  private static _parseMulticativeExpression(scanner: PpScanner): PpConstant {\n    const operand1 = this._parseUnaryExpression(scanner) as number;\n    scanner.skipSpace(false);\n    if ([\"*\", \"/\", \"%\"].includes(scanner.getCurChar())) {\n      const opPos = scanner.getShaderPosition();\n      const operator = scanner.getCurChar();\n      scanner.skipSpace(false);\n      const operand2 = this._parseMulticativeExpression(scanner) as number;\n      if (typeof operand1 !== typeof operand2 && typeof operand1 !== \"number\") {\n        this.reportError(opPos, \"invalid operator.\", scanner.source, scanner.file);\n        return;\n      }\n      switch (operator) {\n        case \"*\":\n          return operand1 * operand2;\n        case \"/\":\n          return operand1 / operand2;\n        case \"%\":\n          return operand1 % operand2;\n      }\n    }\n    return operand1;\n  }\n\n  private static _parseUnaryExpression(scanner: PpScanner) {\n    const operator = scanner.getCurChar();\n    if ([\"+\", \"-\", \"!\"].includes(operator)) {\n      scanner.advance();\n      const opPos = scanner.getShaderPosition();\n      const parenExpr = this._parseParenthesisExpression(scanner);\n      if ((operator === \"!\" && typeof parenExpr !== \"boolean\") || (operator !== \"!\" && typeof parenExpr !== \"number\")) {\n        this.reportError(opPos, \"invalid operator.\", scanner.source, scanner.file);\n      }\n\n      switch (operator) {\n        case \"+\":\n          return parenExpr;\n        case \"-\":\n          return -parenExpr;\n        case \"!\":\n          return !parenExpr;\n      }\n    }\n    return this._parseParenthesisExpression(scanner);\n  }\n\n  private static _parseParenthesisExpression(scanner: PpScanner): PpConstant {\n    if (scanner.getCurChar() === \"(\") {\n      scanner.advance();\n      scanner.skipSpace(false);\n      const ret = this._parseConstantExpression(scanner);\n      scanner.scanToChar(\")\");\n      scanner.advance();\n      return ret;\n    }\n    return this._parseConstant(scanner);\n  }\n\n  private static _parseConstant(scanner: PpScanner): PpConstant {\n    if (LexerUtils.isAlpha(scanner.getCurChar())) {\n      const id = scanner.scanWord();\n      if (id.type === EPpKeyword.defined) {\n        const withParen = scanner.peekNonSpace() === \"(\";\n        const macro = scanner.scanWord(true);\n        if (withParen) {\n          scanner.scanToChar(\")\");\n          scanner.advance();\n        }\n        this._branchMacros.add(macro.lexeme);\n        return !!this._definedMacros.get(macro.lexeme);\n      } else {\n        const macro = this._definedMacros.get(id.lexeme);\n        if (!macro) {\n          return false;\n        }\n        if (macro.isFunction) {\n          this.reportError(id.location, \"invalid function macro usage\", scanner.source, scanner.file);\n        }\n        const value = Number(macro.body.lexeme);\n        if (!Number.isInteger(value)) {\n          this.reportError(id.location, `invalid const macro: ${id.lexeme}`, scanner.source, scanner.file);\n        }\n        this._branchMacros.add(id.lexeme);\n        return value;\n      }\n    } else if (LexerUtils.isNum(scanner.getCurChar())) {\n      const integer = scanner.scanInteger();\n      return Number(integer.lexeme);\n    } else {\n      this.reportError(\n        scanner.getShaderPosition(),\n        `invalid token: ${scanner.getCurChar()}`,\n        scanner.source,\n        scanner.file\n      );\n    }\n  }\n\n  /**\n   * Recursively expand macro body and expansion.\n   */\n  private static _expandMacroChunk(\n    chunk: string,\n    loc: ShaderRange,\n    parentScanner: PpScanner\n  ): {\n    content: string;\n    // #if _VERBOSE\n    sourceMap: PpSourceMap;\n    // #endif\n  };\n  private static _expandMacroChunk(\n    chunk: string,\n    loc: ShaderRange,\n    file: string\n  ): {\n    content: string;\n    // #if _VERBOSE\n    sourceMap: PpSourceMap;\n    // #endif\n  };\n  private static _expandMacroChunk(\n    chunk: string,\n    loc: ShaderRange,\n    scannerOrFile: PpScanner | string\n  ): {\n    content: string;\n    // #if _VERBOSE\n    sourceMap: PpSourceMap;\n    // #endif\n  } {\n    this._expandSegmentsStack.push([]);\n    let scanner: PpScanner;\n    if (typeof scannerOrFile === \"string\") {\n      scanner = new PpScanner(chunk, scannerOrFile);\n    } else {\n      scanner = new PpScanner(chunk, scannerOrFile.file, loc);\n    }\n    const ret = this.parse(scanner);\n    this._expandSegmentsStack.pop();\n    return {\n      content: ret,\n      // #if _VERBOSE\n      sourceMap: scanner.sourceMap\n      // #endif\n    };\n  }\n\n  private static _parseIfNdef(scanner: PpScanner) {\n    const start = scanner.current - 7;\n\n    const id = scanner.scanWord();\n    this._addEmptyReplace(scanner, start);\n    this._branchMacros.add(id.lexeme);\n\n    const macro = this._definedMacros.get(id.lexeme);\n    const { token: bodyChunk, nextDirective } = scanner.scanMacroBranchChunk();\n    if (!macro) {\n      const end = nextDirective.type === EPpKeyword.endif ? scanner.getShaderPosition() : scanner.scanRemainMacro();\n\n      const expanded = this._expandMacroChunk(bodyChunk.lexeme, bodyChunk.location, scanner);\n      // #if _VERBOSE\n      const blockInfo = new BlockInfo(scanner.file, scanner.blockRange, expanded.sourceMap);\n      // #endif\n      const range = ShaderLab.createRange(bodyChunk.location.start, end);\n      this.expandSegments.push({\n        // #if _VERBOSE\n        block: blockInfo,\n        // #endif\n        rangeInBlock: range,\n        replace: expanded.content\n      });\n      return;\n    }\n\n    this.expandSegments.pop();\n    this._addEmptyReplace(scanner, start);\n    this._parseMacroBranch(<any>nextDirective.type, scanner);\n  }\n\n  private static _addEmptyReplace(scanner: PpScanner, start: number) {\n    // #if _VERBOSE\n    const block = new BlockInfo(scanner.file, scanner.blockRange);\n    // #endif\n    const startPosition = ShaderLab.createPosition(start);\n    const endPosition = scanner.getCurPosition();\n    const range = ShaderLab.createRange(startPosition, endPosition);\n    this.expandSegments.push({\n      // #if _VERBOSE\n      block,\n      // #endif\n      rangeInBlock: range,\n      replace: \"\"\n    });\n  }\n\n  private static _parseIf(scanner: PpScanner) {\n    const start = scanner.current - 3;\n\n    const constantExpr = this._parseConstantExpression(scanner);\n    this._addEmptyReplace(scanner, start);\n\n    const { token: bodyChunk, nextDirective } = scanner.scanMacroBranchChunk();\n    if (!!constantExpr) {\n      const end = nextDirective.type === EPpKeyword.endif ? scanner.getShaderPosition() : scanner.scanRemainMacro();\n      const expanded = this._expandMacroChunk(bodyChunk.lexeme, bodyChunk.location, scanner);\n      // #if _VERBOSE\n      const block = new BlockInfo(scanner.file, scanner.blockRange, expanded.sourceMap);\n      // #endif\n      const range = ShaderLab.createRange(bodyChunk.location.start, end);\n      this.expandSegments.push({\n        // #if _VERBOSE\n        block,\n        // #endif\n        rangeInBlock: range,\n        replace: expanded.content\n      });\n      return;\n    }\n\n    this.expandSegments.pop();\n    this._addEmptyReplace(scanner, start);\n    this._parseMacroBranch(<any>nextDirective.type, scanner);\n  }\n\n  private static _parseDefine(scanner: PpScanner) {\n    const start = scanner.getShaderPosition(7);\n    const macro = scanner.scanWord();\n\n    let end = macro.location.end;\n    if (this._definedMacros.get(macro.lexeme) && macro.lexeme.startsWith(\"GL_\")) {\n      this.reportError(macro.location, `redefined macro: ${macro.lexeme}`, scanner.source, scanner.file);\n    }\n\n    let macroArgs: BaseToken[] | undefined;\n    if (scanner.getCurChar() === \"(\") {\n      macroArgs = scanner.scanWordsUntilChar(\")\");\n      end = scanner.getShaderPosition();\n    }\n    const macroBody = scanner.scanLineRemain();\n    const range = ShaderLab.createRange(start, end);\n    const macroDefine = new MacroDefine(macro, macroBody, range, macroArgs);\n    this._definedMacros.set(macro.lexeme, macroDefine);\n\n    // #if _VERBOSE\n    const block = new BlockInfo(scanner.file, scanner.blockRange);\n    // #endif\n\n    this.expandSegments.push({\n      // #if _VERBOSE\n      block,\n      // #endif\n      rangeInBlock: ShaderLab.createRange(start, scanner.getCurPosition()),\n      replace: \"\"\n    });\n  }\n\n  private static _parseUndef(scanner: PpScanner) {\n    const start = scanner.current - 6;\n    const macro = scanner.scanWord();\n\n    // #if _VERBOSE\n    const block = new BlockInfo(scanner.file, scanner.blockRange);\n    // #endif\n    const startPosition = ShaderLab.createPosition(start);\n    const range = ShaderLab.createRange(startPosition, scanner.getCurPosition());\n    this.expandSegments.push({\n      // #if _VERBOSE\n      block,\n      // #endif\n      rangeInBlock: range,\n      replace: \"\"\n    });\n    this._definedMacros.delete(macro.lexeme);\n  }\n\n  private static _onToken(token: BaseToken, scanner: PpScanner) {\n    const macro = this._definedMacros.get(token.lexeme);\n    if (macro) {\n      let replace = macro.body.lexeme;\n      if (macro.isFunction) {\n        scanner.scanToChar(\"(\");\n        scanner.advance();\n\n        // extract parameters\n        const args: string[] = [];\n        let curLvl = 1;\n        let curIdx = scanner.current;\n        while (true) {\n          if (scanner.getCurChar() === \"(\") curLvl += 1;\n          else if (scanner.getCurChar() === \")\") {\n            curLvl -= 1;\n            if (curLvl === 0) break;\n          } else if (scanner.getCurChar() === \",\" && curLvl === 1) {\n            args.push(scanner.source.slice(curIdx, scanner.current));\n            curIdx = scanner.current + 1;\n          }\n          scanner.advance();\n        }\n        args.push(scanner.source.slice(curIdx, scanner.current));\n\n        scanner.advance();\n        const range = ShaderLab.createRange(token.location!.start, scanner.getCurPosition());\n        replace = macro.expandFunctionBody(args);\n        const expanded = this._expandMacroChunk(replace, range, scanner);\n        // #if _VERBOSE\n        const block = new BlockInfo(scanner.file, scanner.blockRange, expanded.sourceMap);\n        // #endif\n        const blockRange = ShaderLab.createRange(token.location!.start, scanner.getCurPosition());\n        this.expandSegments.push({\n          // #if _VERBOSE\n          block,\n          // #endif\n          rangeInBlock: blockRange,\n          replace: expanded.content\n        });\n      } else {\n        const expanded = this._expandMacroChunk(replace, token.location, scanner);\n        // #if _VERBOSE\n        const block = new BlockInfo(scanner.file, scanner.blockRange, expanded.sourceMap);\n        // #endif\n        const range = ShaderLab.createRange(token.location.start, token.location.end);\n        this.expandSegments.push({\n          // #if _VERBOSE\n          block,\n          // #endif\n          rangeInBlock: range,\n          replace: expanded.content\n        });\n      }\n    }\n  }\n}\n","import { PpParser } from \"./PpParser\";\nimport PpScanner from \"./PpScanner\";\n\n/** @internal */\nexport class Preprocessor {\n  static baseScanner: PpScanner;\n\n  /**\n   * Reset the parser of `Preprocessor`\n   * @param basePathForIncludeKey - the base path to resolve the relative path of `#include` directive\n   */\n  static reset(includeMap: Record<string, string>, basePathForIncludeKey: string): void {\n    PpParser.reset(includeMap, basePathForIncludeKey);\n  }\n\n  /**\n   * Should call it after reset.\n   */\n  static process(source: string): string | null {\n    this.baseScanner = new PpScanner(source);\n    return PpParser.parse(this.baseScanner);\n  }\n\n  static addPredefinedMacro(macro: string, value?: string): void {\n    PpParser.addPredefinedMacro(macro, value);\n  }\n\n  // #if _VERBOSE\n  static convertSourceIndex(index: number) {\n    return this.baseScanner.sourceMap.map(index);\n  }\n  // #endif\n}\n","import { ENonTerminal, GrammarSymbol } from \"./parser/GrammarSymbol\";\nimport { BaseToken as Token } from \"./common/BaseToken\";\nimport { EKeyword, ETokenType, GalaceanDataType } from \"./common\";\nimport { TreeNode } from \"./parser/AST\";\n// #if _VERBOSE\nimport State from \"./lalr/State\";\n// #endif\n\nexport class ParserUtils {\n  static unwrapNodeByType<T = TreeNode>(node: TreeNode, type: ENonTerminal): T | undefined {\n    const child = node.children[0];\n    if (child instanceof Token) return;\n    if (child.nt === type) return child as T;\n    return ParserUtils.unwrapNodeByType(child, type);\n  }\n\n  // #if _VERBOSE\n  /**\n   * Check if type `tb` is compatible with type `ta`.\n   */\n  static typeCompatible(ta: GalaceanDataType, tb: GalaceanDataType | undefined) {\n    if (tb == undefined) return true;\n    if (ta === EKeyword.INT) {\n      return ta === tb || tb === EKeyword.UINT;\n    }\n    return ta === tb;\n  }\n\n  static toString(sm: GrammarSymbol) {\n    if (this.isTerminal(sm)) {\n      return ETokenType[sm] ?? EKeyword[sm];\n    }\n    return ENonTerminal[sm];\n  }\n  // #endif\n\n  static isTerminal(sm: GrammarSymbol) {\n    return sm < ENonTerminal.START;\n  }\n\n  /**\n   * @internal\n   */\n  // #if _VERBOSE\n  static printStatePool(logPath: string) {\n    let output = \"\";\n\n    console.log(\"========== Parser Pool ==========\");\n\n    let count = 0;\n    for (const state of State.pool.values()) {\n      count++;\n      let tmp = \"\";\n      tmp += `${state.id}: \\n`.padEnd(4);\n      for (const psItem of state.items) {\n        tmp += \"     \" + psItem.toString() + \"\\n\";\n      }\n      output += tmp;\n    }\n\n    console.log(\"state count:\", count);\n    console.log(output);\n  }\n  // #endif\n}\n","import { EShaderStage } from \"../common/Enums\";\nimport { ASTNode } from \"../parser/AST\";\nimport { ESymbolType, SymbolTable, SymbolInfo } from \"../parser/symbolTable\";\nimport { IParamInfo } from \"../parser/types\";\nimport { GSErrorName } from \"../GSError\";\nimport { BaseToken } from \"../common/BaseToken\";\nimport { ShaderLab } from \"../ShaderLab\";\nimport { ShaderLabUtils } from \"../ShaderLabUtils\";\n// #if _VERBOSE\nimport { GSError } from \"../GSError\";\n// #endif\n\n/** @internal */\nexport class VisitorContext {\n  private static _singleton: VisitorContext;\n  static get context() {\n    return this._singleton;\n  }\n\n  static reset() {\n    if (!this._singleton) {\n      this._singleton = new VisitorContext();\n    }\n    this._singleton.reset();\n  }\n\n  attributeList: IParamInfo[] = [];\n  attributeStructs: ASTNode.StructSpecifier[] = [];\n  varyingStruct?: ASTNode.StructSpecifier;\n\n  stage: EShaderStage;\n\n  _referencedAttributeList: Record<string, IParamInfo & { qualifier?: string }> = Object.create(null);\n  _referencedGlobals: Record<string, SymbolInfo | ASTNode.PrecisionSpecifier> = Object.create(null);\n  _referencedVaryingList: Record<string, IParamInfo & { qualifier?: string }> = Object.create(null);\n\n  _curFn?: ASTNode.FunctionProtoType;\n\n  _passSymbolTable: SymbolTable;\n\n  private constructor() {}\n\n  get passSymbolTable() {\n    return this._passSymbolTable;\n  }\n\n  reset() {\n    this.attributeList.length = 0;\n    this.attributeStructs.length = 0;\n    this._referencedAttributeList = Object.create(null);\n    this._referencedGlobals = Object.create(null);\n    this._referencedVaryingList = Object.create(null);\n  }\n\n  isAttributeStruct(type: string) {\n    return this.attributeStructs.findIndex((item) => item.ident!.lexeme === type) !== -1;\n  }\n\n  isVaryingStruct(type: string) {\n    return this.varyingStruct?.ident?.lexeme === type;\n  }\n\n  referenceAttribute(ident: BaseToken): Error {\n    if (this._referencedAttributeList[ident.lexeme]) return;\n\n    const prop = this.attributeList.find((item) => item.ident.lexeme === ident.lexeme);\n    if (!prop) {\n      return ShaderLabUtils.createGSError(\n        `referenced attribute not found: ${ident.lexeme}`,\n        GSErrorName.CompilationError,\n        ShaderLab._processingPassText,\n        ident.location\n      );\n    }\n    this._referencedAttributeList[ident.lexeme] = prop;\n  }\n\n  referenceVarying(ident: BaseToken): Error | undefined {\n    if (this._referencedVaryingList[ident.lexeme]) return;\n\n    const prop = this.varyingStruct?.propList.find((item) => item.ident.lexeme === ident.lexeme);\n    if (!prop) {\n      return ShaderLabUtils.createGSError(\n        `referenced varying not found: ${ident.lexeme}`,\n        GSErrorName.CompilationError,\n        ShaderLab._processingPassText,\n        ident.location\n      );\n    }\n    this._referencedVaryingList[ident.lexeme] = prop;\n  }\n\n  referenceGlobal(ident: string, type: ESymbolType) {\n    if (this._referencedGlobals[ident]) return;\n\n    if (type === ESymbolType.FN) {\n      const fnEntries = this._passSymbolTable.getAllFnSymbols(ident);\n      for (let i = 0; i < fnEntries.length; i++) {\n        const key = i === 0 ? ident : ident + i;\n        this._referencedGlobals[key] = fnEntries[i];\n      }\n      return;\n    }\n    const sm = this.passSymbolTable.lookup({ ident, symbolType: type });\n    if (sm) {\n      this._referencedGlobals[ident] = sm;\n    }\n  }\n}\n","import { ENonTerminal } from \"../parser/GrammarSymbol\";\nimport { BaseToken as Token } from \"../common/BaseToken\";\nimport { EKeyword, ShaderPosition, ShaderRange } from \"../common\";\nimport { ASTNode, TreeNode } from \"../parser/AST\";\nimport { ESymbolType, FnSymbol, VarSymbol } from \"../parser/symbolTable\";\nimport { ParserUtils } from \"../ParserUtils\";\nimport { NodeChild } from \"../parser/types\";\nimport { VisitorContext } from \"./VisitorContext\";\nimport { ShaderLab } from \"../ShaderLab\";\nimport { GSErrorName } from \"../GSError\";\n// #if _VERBOSE\nimport { GSError } from \"../GSError\";\n// #endif\n\n/**\n * @internal\n * The code generator\n */\nexport class CodeGenVisitor {\n  // #if _VERBOSE\n  readonly errors: GSError[] = [];\n  // #endif\n\n  defaultCodeGen(children: NodeChild[]) {\n    let ret: string[] = [];\n    for (const child of children) {\n      if (child instanceof Token) {\n        ret.push(child.lexeme);\n      } else {\n        ret.push(child.codeGen(this));\n      }\n    }\n    return ret.join(\" \");\n  }\n\n  visitPostfixExpression(node: ASTNode.PostfixExpression) {\n    if (node.children.length === 3) {\n      const context = VisitorContext.context;\n\n      const postExpr = node.children[0] as ASTNode.PostfixExpression;\n\n      const prop = node.children[2];\n\n      if (prop instanceof Token) {\n        if (context.isAttributeStruct(<string>postExpr.type)) {\n          const error = context.referenceAttribute(prop);\n          // #if _VERBOSE\n          if (error) {\n            this.errors.push(<GSError>error);\n          }\n          // #endif\n          return prop.lexeme;\n        } else if (context.isVaryingStruct(<string>postExpr.type)) {\n          const error = context.referenceVarying(prop);\n          // #if _VERBOSE\n          if (error) {\n            this.errors.push(<GSError>error);\n          }\n          // #endif\n          return prop.lexeme;\n        }\n\n        return `${postExpr.codeGen(this)}.${prop.lexeme}`;\n      } else {\n        return `${postExpr.codeGen(this)}.${prop.codeGen(this)}`;\n      }\n    }\n    return this.defaultCodeGen(node.children);\n  }\n\n  visitVariableIdentifier(node: ASTNode.VariableIdentifier): string {\n    if (node.symbolInfo instanceof VarSymbol && node.symbolInfo.isGlobalVariable) {\n      VisitorContext.context.referenceGlobal(node.lexeme, ESymbolType.VAR);\n    }\n    return node.lexeme;\n  }\n\n  visitFunctionCall(node: ASTNode.FunctionCall): string {\n    const call = node.children[0] as ASTNode.FunctionCallGeneric;\n    if (call.fnSymbol instanceof FnSymbol) {\n      VisitorContext.context.referenceGlobal(call.fnSymbol.ident, ESymbolType.FN);\n\n      const paramList = call.children[2];\n      const paramInfoList = call.fnSymbol.astNode.protoType.parameterList;\n\n      if (paramList instanceof ASTNode.FunctionCallParameterList) {\n        const plainParams: string[] = [];\n        const params = paramList.paramNodes;\n\n        for (let i = 0; i < params.length; i++) {\n          if (\n            !VisitorContext.context.isAttributeStruct(paramInfoList[i].typeInfo.typeLexeme) &&\n            !VisitorContext.context.isVaryingStruct(paramInfoList[i].typeInfo.typeLexeme)\n          ) {\n            plainParams.push(params[i].codeGen(this));\n          }\n        }\n        return `${call.fnSymbol.ident}(${plainParams.join(\", \")})`;\n      }\n    }\n    return this.defaultCodeGen(node.children);\n  }\n\n  visitStatementList(node: ASTNode.StatementList): string {\n    const children = node.children as TreeNode[];\n    if (node.children.length === 1) {\n      return children[0].codeGen(this);\n    } else {\n      return `${children[0].codeGen(this)}\\n${children[1].codeGen(this)}`;\n    }\n  }\n\n  visitSingleDeclaration(node: ASTNode.SingleDeclaration): string {\n    const type = node.typeSpecifier.type;\n    if (typeof type === \"string\") {\n      VisitorContext.context.referenceGlobal(type, ESymbolType.STRUCT);\n    }\n    return this.defaultCodeGen(node.children);\n  }\n\n  visitGlobalVariableDeclaration(node: ASTNode.VariableDeclaration): string {\n    const fullType = node.children[0];\n    if (fullType instanceof ASTNode.FullySpecifiedType && fullType.typeSpecifier.isCustom) {\n      VisitorContext.context.referenceGlobal(<string>fullType.type, ESymbolType.STRUCT);\n    }\n    return this.defaultCodeGen(node.children);\n  }\n\n  visitDeclaration(node: ASTNode.Declaration): string {\n    const child = node.children[0];\n    if (\n      child instanceof ASTNode.InitDeclaratorList &&\n      child.typeInfo.typeLexeme === VisitorContext.context.varyingStruct?.ident?.lexeme\n    ) {\n      return \"\";\n    }\n    return this.defaultCodeGen(node.children);\n  }\n\n  visitFunctionProtoType(node: ASTNode.FunctionProtoType): string {\n    VisitorContext.context._curFn = node;\n    return this.defaultCodeGen(node.children);\n  }\n\n  visitFunctionDefinition(node: ASTNode.FunctionDefinition): string {\n    VisitorContext.context._curFn = undefined;\n    return this.defaultCodeGen(node.children);\n  }\n\n  visitFunctionParameterList(node: ASTNode.FunctionParameterList): string {\n    const params = node.parameterInfoList;\n    return params\n      .filter(\n        (item) =>\n          !VisitorContext.context.isAttributeStruct(item.typeInfo.typeLexeme) &&\n          !VisitorContext.context.isVaryingStruct(item.typeInfo.typeLexeme)\n      )\n      .map((item) => item.astNode.codeGen(this))\n      .join(\", \");\n  }\n\n  visitFunctionHeader(node: ASTNode.FunctionHeader): string {\n    const returnType = node.returnType.typeSpecifier.lexeme;\n    if (VisitorContext.context.isAttributeStruct(returnType) || VisitorContext.context.isVaryingStruct(returnType))\n      return `void ${node.ident.lexeme}(`;\n    return this.defaultCodeGen(node.children);\n  }\n\n  visitJumpStatement(node: ASTNode.JumpStatement): string {\n    const cmd = node.children[0] as Token;\n    if (cmd.type === EKeyword.RETURN) {\n      const expr = node.children[1];\n      if (expr instanceof ASTNode.Expression) {\n        const returnVar = ParserUtils.unwrapNodeByType<ASTNode.VariableIdentifier>(\n          expr,\n          ENonTerminal.variable_identifier\n        );\n        if (returnVar?.typeInfo === VisitorContext.context.varyingStruct?.ident?.lexeme) {\n          return \"\";\n        }\n        const returnFnCall = ParserUtils.unwrapNodeByType<ASTNode.FunctionCall>(expr, ENonTerminal.function_call);\n        if (returnFnCall?.type === VisitorContext.context.varyingStruct?.ident?.lexeme) {\n          return `${expr.codeGen(this)};`;\n        }\n      }\n    }\n    return this.defaultCodeGen(node.children);\n  }\n\n  visitFunctionIdentifier(node: ASTNode.FunctionIdentifier): string {\n    return this.defaultCodeGen(node.children);\n  }\n\n  protected _reportError(loc: ShaderRange | ShaderPosition, message: string): void {\n    // #if _VERBOSE\n    this.errors.push(new GSError(GSErrorName.CompilationError, message, loc, ShaderLab._processingPassText));\n    // #else\n    throw new Error(message);\n    // #endif\n  }\n}\n","export enum EShaderStage {\n  VERTEX,\n  FRAGMENT,\n  ALL\n}\n","import { CodeGenVisitor } from \"./CodeGenVisitor\";\nimport { ASTNode } from \"../parser/AST\";\nimport { ShaderData } from \"../parser/ShaderInfo\";\nimport { ESymbolType, FnSymbol, StructSymbol, SymbolInfo } from \"../parser/symbolTable\";\nimport { EShaderStage } from \"../common/Enums\";\nimport { IShaderInfo } from \"@galacean/engine-design\";\nimport { ICodeSegment } from \"./types\";\nimport { VisitorContext } from \"./VisitorContext\";\nimport { EKeyword } from \"../common\";\n\nconst defaultPrecision = `\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n  precision highp float;\n  precision highp int;\n#else\n  precision mediump float;\n  precision mediump int;\n#endif\n`;\n\n/**\n * @internal\n */\nexport abstract class GLESVisitor extends CodeGenVisitor {\n  protected _versionText: string = \"\";\n  protected _extensions: string = \"\";\n\n  abstract getAttributeDeclare(): ICodeSegment[];\n  abstract getVaryingDeclare(): ICodeSegment[];\n\n  visitShaderProgram(node: ASTNode.GLShaderProgram, vertexEntry: string, fragmentEntry: string): IShaderInfo {\n    // #if _VERBOSE\n    this.errors.length = 0;\n    // #endif\n    VisitorContext.reset();\n    VisitorContext.context._passSymbolTable = node.shaderData.symbolTable;\n\n    return {\n      vertex: this.vertexMain(vertexEntry, node.shaderData),\n      fragment: this._fragmentMain(fragmentEntry, node.shaderData)\n    };\n  }\n\n  vertexMain(entry: string, data: ShaderData): string {\n    const { symbolTable } = data;\n    const fnSymbol = symbolTable.lookup<FnSymbol>({ ident: entry, symbolType: ESymbolType.FN });\n    if (!fnSymbol?.astNode) throw `no entry function found: ${entry}`;\n\n    const fnNode = fnSymbol.astNode;\n    VisitorContext.context.stage = EShaderStage.VERTEX;\n\n    const returnType = fnNode.protoType.returnType;\n    if (typeof returnType.type === \"string\") {\n      const varyStruct = symbolTable.lookup<StructSymbol>({ ident: returnType.type, symbolType: ESymbolType.STRUCT });\n      if (!varyStruct) {\n        this._reportError(returnType.location, `invalid varying struct: ${returnType.type}`);\n      } else {\n        VisitorContext.context.varyingStruct = varyStruct.astNode;\n      }\n    } else if (returnType.type !== EKeyword.VOID) {\n      this._reportError(returnType.location, \"main entry can only return struct.\");\n    }\n\n    const paramList = fnNode.protoType.parameterList;\n    if (paramList?.length) {\n      for (const paramInfo of paramList) {\n        if (typeof paramInfo.typeInfo.type === \"string\") {\n          const structSymbol = symbolTable.lookup<StructSymbol>({\n            ident: paramInfo.typeInfo.type,\n            symbolType: ESymbolType.STRUCT\n          });\n          if (!structSymbol) {\n            this._reportError(paramInfo.astNode.location, `Not found attribute struct \"${paramInfo.typeInfo.type}\".`);\n            continue;\n          }\n          VisitorContext.context.attributeStructs.push(structSymbol.astNode);\n          for (const prop of structSymbol.astNode.propList) {\n            VisitorContext.context.attributeList.push(prop);\n          }\n        } else {\n          VisitorContext.context.attributeList.push(paramInfo);\n        }\n      }\n    }\n\n    const statements = fnNode.statements.codeGen(this);\n    const globalText = this._getGlobalText(data);\n\n    const attributeDeclare = this.getAttributeDeclare();\n    const varyingDeclare = this.getVaryingDeclare();\n\n    const globalCode = [...globalText, ...attributeDeclare, ...varyingDeclare]\n      .sort((a, b) => a.index - b.index)\n      .map((item) => item.text)\n      .join(\"\\n\");\n\n    VisitorContext.context.reset();\n\n    return `${this._versionText}\\n${globalCode}\\n\\nvoid main() ${statements}`;\n  }\n\n  private _fragmentMain(entry: string, data: ShaderData): string {\n    const { symbolTable } = data;\n    const fnSymbol = symbolTable.lookup<FnSymbol>({ ident: entry, symbolType: ESymbolType.FN });\n    if (!fnSymbol?.astNode) throw `no entry function found: ${entry}`;\n    const fnNode = fnSymbol.astNode;\n\n    VisitorContext.context.stage = EShaderStage.FRAGMENT;\n    const statements = fnNode.statements.codeGen(this);\n    const globalText = this._getGlobalText(data);\n    const varyingDeclare = this.getVaryingDeclare();\n\n    const globalCode = [...globalText, ...varyingDeclare]\n      .sort((a, b) => a.index - b.index)\n      .map((item) => item.text)\n      .join(\"\\n\");\n\n    VisitorContext.context.reset();\n    return `${this._versionText}\\n${this._extensions}\\n${defaultPrecision}\\n${globalCode}\\n\\nvoid main() ${statements}`;\n  }\n\n  private _getGlobalText(\n    data: ShaderData,\n    textList: ICodeSegment[] = [],\n    lastLength: number = 0,\n    _serialized: Set<string> = new Set()\n  ): ICodeSegment[] {\n    const { _referencedGlobals } = VisitorContext.context;\n\n    if (lastLength === Object.keys(_referencedGlobals).length) {\n      for (const precision of data.globalPrecisions) {\n        textList.push({ text: precision.codeGen(this), index: precision.location.start.index });\n      }\n      return textList;\n    }\n\n    lastLength = Object.keys(_referencedGlobals).length;\n    for (const ident in _referencedGlobals) {\n      const sm = _referencedGlobals[ident];\n\n      if (_serialized.has(ident)) continue;\n      _serialized.add(ident);\n\n      if (sm instanceof SymbolInfo) {\n        if (sm.symbolType === ESymbolType.VAR) {\n          textList.push({ text: `uniform ${sm.astNode.codeGen(this)}`, index: sm.astNode.location.start.index });\n        } else {\n          textList.push({ text: sm.astNode!.codeGen(this), index: sm.astNode!.location.start.index });\n        }\n      } else {\n        textList.push({ text: sm.codeGen(this), index: sm.location.start.index });\n      }\n    }\n    return this._getGlobalText(data, textList, lastLength, _serialized);\n  }\n}\n","import { GLESVisitor } from \"./GLESVisitor\";\nimport { VisitorContext } from \"./VisitorContext\";\nimport { ICodeSegment } from \"./types\";\n\nexport class GLES100Visitor extends GLESVisitor {\n  override _versionText: string = `#version 100`;\n  override _extensions: string = [\n    \"GL_EXT_shader_texture_lod\",\n    \"GL_OES_standard_derivatives\",\n    \"GL_EXT_draw_buffers\",\n    \"GL_EXT_frag_depth\"\n  ]\n    .map((e) => `#extension ${e} : enable\\n`)\n    .join(\"\");\n\n  private static _singleton: GLES100Visitor;\n  static getVisitor(): GLES100Visitor {\n    if (!this._singleton) {\n      this._singleton = new GLES100Visitor();\n    }\n    return this._singleton;\n  }\n\n  override getAttributeDeclare(): ICodeSegment[] {\n    const ret: ICodeSegment[] = [];\n    for (const item of Object.values(VisitorContext.context._referencedAttributeList)) {\n      ret.push({\n        text: `attribute ${item.typeInfo.typeLexeme} ${item.ident.lexeme};`,\n        index: item.ident.location.start.index\n      });\n    }\n    return ret;\n  }\n\n  override getVaryingDeclare(): ICodeSegment[] {\n    const ret: ICodeSegment[] = [];\n    for (const item of Object.values(VisitorContext.context._referencedVaryingList)) {\n      ret.push({\n        text: `varying ${item.typeInfo.typeLexeme} ${item.ident.lexeme};`,\n        index: item.ident.location.start.index\n      });\n    }\n    return ret;\n  }\n}\n","import { ASTNode } from \"../parser/AST\";\nimport { SymbolType } from \"../parser/types\";\nimport { BaseToken as Token } from \"../common/BaseToken\";\nimport { EKeyword, ETokenType, ShaderPosition } from \"../common\";\nimport { GLESVisitor } from \"./GLESVisitor\";\nimport { EShaderStage } from \"../common/Enums\";\nimport { ICodeSegment } from \"./types\";\nimport { VisitorContext } from \"./VisitorContext\";\nimport { ShaderLab } from \"../ShaderLab\";\n\nconst V3_GL_FragColor = \"GS_glFragColor\";\n\nexport class GLES300Visitor extends GLESVisitor {\n  override _versionText: string = \"#version 300 es\";\n\n  private static _singleton: GLES300Visitor;\n  static getVisitor(): GLES300Visitor {\n    if (!this._singleton) {\n      this._singleton = new GLES300Visitor();\n    }\n    return this._singleton;\n  }\n\n  override getAttributeDeclare(): ICodeSegment[] {\n    const ret: ICodeSegment[] = [];\n    for (const item of Object.values(VisitorContext.context._referencedAttributeList)) {\n      ret.push({\n        text: `in ${item.typeInfo.typeLexeme} ${item.ident.lexeme};`,\n        index: item.ident.location.start.index\n      });\n    }\n    return ret;\n  }\n\n  override getVaryingDeclare(): ICodeSegment[] {\n    const ret: ICodeSegment[] = [];\n    const qualifier = VisitorContext.context.stage === EShaderStage.FRAGMENT ? \"in\" : \"out\";\n    const values = Object.values(VisitorContext.context._referencedVaryingList);\n    for (let i = 0; i < values.length; i++) {\n      const item = values[i];\n      ret.push({\n        text: `${item.qualifier ?? qualifier} ${item.typeInfo.typeLexeme} ${item.ident.lexeme};`,\n        index: item.ident.location.start.index\n      });\n    }\n    return ret;\n  }\n\n  override visitFunctionIdentifier(node: ASTNode.FunctionIdentifier): string {\n    const typeSpecifier = node.children[0] as ASTNode.TypeSpecifier;\n    if (typeSpecifier.children.length !== 1) {\n      return this.defaultCodeGen(node.children);\n    }\n    let ident = node.lexeme;\n    if (node.ident === \"texture2D\" || node.ident === \"textureCube\") {\n      ident = \"texture\";\n    } else if (node.ident === \"texture2DProj\") {\n      ident = \"textureProj\";\n    } else if (VisitorContext.context.stage === EShaderStage.FRAGMENT) {\n      switch (node.ident) {\n        case \"texture2DLodEXT\":\n        case \"textureCubeLodEXT\":\n          ident = \"textureLod\";\n          break;\n        case \"texture2DGradEXT\":\n        case \"textureCubeGradEXT\":\n          ident = \"textureGrad\";\n          break;\n        case \"texture2DProjLodEXT\":\n          ident = \"textureProjLod\";\n          break;\n        case \"texture2DProjGradEXT\":\n          ident = \"textureProjGrad\";\n          break;\n        case \"gl_FragDepthEXT\":\n          ident = \"gl_FragDepth\";\n          break;\n      }\n    }\n    return ident;\n  }\n\n  override visitVariableIdentifier(node: ASTNode.VariableIdentifier): string {\n    if (VisitorContext.context.stage === EShaderStage.FRAGMENT && node.lexeme === \"gl_FragColor\") {\n      if (!VisitorContext.context._referencedVaryingList[V3_GL_FragColor]) {\n        const token = Token.pool.get();\n        token.set(ETokenType.ID, V3_GL_FragColor, ShaderLab.createPosition(0, 0, 0));\n        VisitorContext.context._referencedVaryingList[V3_GL_FragColor] = {\n          ident: token,\n          typeInfo: new SymbolType(EKeyword.VEC4, \"vec4\"),\n          qualifier: \"out\",\n          astNode: node\n        };\n      }\n      return V3_GL_FragColor;\n    }\n    return super.visitVariableIdentifier(node);\n  }\n}\n","function _is_native_reflect_construct() {\n    // Since Reflect.construct can't be properly polyfilled, some\n    // implementations (e.g. core-js@2) don't set the correct internal slots.\n    // Those polyfills don't allow us to subclass built-ins, so we need to\n    // use our fallback implementation.\n    try {\n        // If the internal slots aren't set, this throws an error similar to\n        //   TypeError: this is not a Boolean object.\n        var result = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n    } catch (_) {}\n    return (_is_native_reflect_construct = function() {\n        return !!result;\n    })();\n}\n\nexport { _is_native_reflect_construct as _ };\n","import { _ as _is_native_reflect_construct } from \"./_is_native_reflect_construct.js\";\nimport { _ as _set_prototype_of } from \"./_set_prototype_of.js\";\nfunction _construct(Parent, args, Class) {\n    if (_is_native_reflect_construct()) _construct = Reflect.construct;\n    else {\n        _construct = function construct(Parent, args, Class) {\n            var a = [null];\n            a.push.apply(a, args);\n            var Constructor = Function.bind.apply(Parent, a);\n            var instance = new Constructor();\n\n            if (Class) _set_prototype_of(instance, Class.prototype);\n\n            return instance;\n        };\n    }\n\n    return _construct.apply(null, arguments);\n}\nexport { _construct as _ };\n","function _extends() {\n    _extends = Object.assign || function assign(target) {\n        for (var i = 1; i < arguments.length; i++) {\n            var source = arguments[i];\n            for (var key in source) if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];\n        }\n\n        return target;\n    };\n\n    return _extends.apply(this, arguments);\n}\nexport { _extends as _ };\n","import { EKeyword } from \"../common\";\n\nexport const KeywordMap = new Map([\n  [\"RenderQueueType\", EKeyword.GS_RenderQueueType],\n  [\"BlendState\", EKeyword.GS_BlendState],\n  [\"DepthState\", EKeyword.GS_DepthState],\n  [\"StencilState\", EKeyword.GS_StencilState],\n  [\"RasterState\", EKeyword.GS_RasterState],\n  [\"EditorProperties\", EKeyword.GS_EditorProperties],\n  [\"EditorMacros\", EKeyword.GS_EditorMacros],\n  [\"Editor\", EKeyword.GS_Editor],\n  [\"Tags\", EKeyword.GS_Tags],\n  [\"VertexShader\", EKeyword.GS_VertexShader],\n  [\"FragmentShader\", EKeyword.GS_FragmentShader],\n  [\"SubShader\", EKeyword.GS_SubShader],\n  [\"Pass\", EKeyword.GS_Pass],\n  [\"BlendFactor\", EKeyword.GS_BlendFactor],\n  [\"BlendOperation\", EKeyword.GS_BlendOperation],\n  [\"Bool\", EKeyword.GS_Bool],\n  [\"Number\", EKeyword.GS_Number],\n  [\"CompareFunction\", EKeyword.GS_CompareFunction],\n  [\"StencilOperation\", EKeyword.GS_StencilOperation],\n  [\"CullMode\", EKeyword.GS_CullMode],\n  [\"true\", EKeyword.TRUE],\n  [\"false\", EKeyword.FALSE],\n  [\"UsePass\", EKeyword.GS_UsePass],\n  [\"Color\", EKeyword.GS_Color]\n]);\n","import BaseScanner from \"../common/BaseScanner\";\n\nexport default class Scanner extends BaseScanner {\n  constructor(source: string, kws: Map<string, number> = new Map()) {\n    super(source, kws);\n  }\n\n  /**\n   * split by space\n   */\n  scanWord(): string {\n    this.skipCommentsAndSpace();\n    const start = this._currentIndex;\n    while (/\\S/.test(this.getCurChar()) && !this.isEnd()) this._advance();\n    return this._source.substring(start, this._currentIndex);\n  }\n\n  scanNumber(): number {\n    this.skipCommentsAndSpace();\n    const start = this._currentIndex;\n    while (/[0-9]/.test(this.getCurChar())) this._advance();\n    if (this.getCurChar() === \".\") {\n      this._advance();\n      while (/[0-9]/.test(this.getCurChar())) this._advance();\n    }\n    return Number(this._source.substring(start, this._currentIndex));\n  }\n\n  // #if _VERBOSE\n  scanToCharacter(char: string): void {\n    while (this.getCurChar() !== char && !this.isEnd()) {\n      this._advance();\n    }\n    this._advance();\n  }\n  // #endif\n}\n","import { BaseSymbolTable, IBaseSymbol } from \"../common/BaseSymbolTable\";\n\nexport interface ISymbol extends IBaseSymbol {\n  type: number;\n  value?: any;\n}\n\nexport default class SymbolTable extends BaseSymbolTable<ISymbol> {\n  override symbolEqualCheck(s1: ISymbol, s2: ISymbol): boolean {\n    return s1.type === s2.type;\n  }\n}\n","import { SymbolTableStack } from \"../common/BaseSymbolTable\";\nimport { BaseToken } from \"../common/BaseToken\";\nimport { EKeyword, ETokenType } from \"../common\";\nimport { ShaderPosition } from \"../common\";\nimport { KeywordMap } from \"./KeywordMap\";\nimport Scanner from \"./Scanner\";\nimport SymbolTable, { ISymbol } from \"./SymbolTable\";\nimport {\n  RenderStateDataKey,\n  Color,\n  RenderQueueType,\n  CompareFunction,\n  StencilOperation,\n  BlendOperation,\n  BlendFactor,\n  CullMode,\n  Logger\n} from \"@galacean/engine\";\nimport {\n  IStatement,\n  IShaderContent,\n  ISubShaderContent,\n  IShaderPassContent,\n  IRenderStates\n} from \"@galacean/engine-design\";\nimport { GSErrorName } from \"../GSError\";\n// #if _VERBOSE\nimport { GSError } from \"../GSError\";\n// #endif\nimport { ShaderLabUtils } from \"../ShaderLabUtils\";\n\nconst EngineType = [\n  EKeyword.GS_RenderQueueType,\n  EKeyword.GS_BlendFactor,\n  EKeyword.GS_BlendOperation,\n  EKeyword.GS_Bool,\n  EKeyword.GS_Number,\n  EKeyword.GS_Color,\n  EKeyword.GS_CompareFunction,\n  EKeyword.GS_StencilOperation,\n  EKeyword.GS_CullMode\n];\n\nconst RenderStateType = [\n  EKeyword.GS_BlendState,\n  EKeyword.GS_DepthState,\n  EKeyword.GS_RasterState,\n  EKeyword.GS_StencilState\n];\n\n/**\n * @internal\n */\nexport class ShaderContentParser {\n  static _engineType = { RenderQueueType, CompareFunction, StencilOperation, BlendOperation, BlendFactor, CullMode };\n\n  static _errors: GSError[] = [];\n\n  private static _isRenderStateDeclarator(token: BaseToken) {\n    return RenderStateType.includes(token.type);\n  }\n\n  private static _isEngineType(token: BaseToken) {\n    return EngineType.includes(token.type);\n  }\n\n  private static _symbolTable: SymbolTableStack<ISymbol, SymbolTable> = new SymbolTableStack();\n\n  static reset() {\n    this._errors.length = 0;\n    this._symbolTable.clear();\n    this._newScope();\n  }\n\n  static parse(source: string): IShaderContent {\n    const start = performance.now();\n\n    const scanner = new Scanner(source, KeywordMap);\n    const ret = {\n      subShaders: [],\n      globalContents: [],\n      renderStates: { constantMap: {}, variableMap: {} }\n    } as IShaderContent;\n\n    scanner.scanText(\"Shader\");\n    ret.name = scanner.scanPairedText('\"', '\"');\n    scanner.scanText(\"{\");\n\n    scanner.skipCommentsAndSpace();\n    this._parseShaderStatements(ret, scanner);\n\n    const shaderGlobalStatements = ret.globalContents;\n    const shaderRenderStates = ret.renderStates;\n    for (let i = 0; i < ret.subShaders.length; i++) {\n      const subShader = ret.subShaders[i];\n      const curSubShaderGlobalStatements = shaderGlobalStatements.concat(subShader.globalContents);\n      const constMap = { ...shaderRenderStates.constantMap, ...subShader.renderStates.constantMap };\n      const variableMap = { ...shaderRenderStates.variableMap, ...subShader.renderStates.variableMap };\n\n      for (let i = 0; i < subShader.passes.length; i++) {\n        const pass = subShader.passes[i];\n        Object.assign(pass.renderStates.constantMap, constMap);\n        Object.assign(pass.renderStates.variableMap, variableMap);\n        if (pass.isUsePass) continue;\n        // @ts-ignore\n        const passGlobalStatements = curSubShaderGlobalStatements.concat(pass.globalContents);\n        pass.contents = passGlobalStatements.map((item) => item.content).join(\"\\n\");\n      }\n    }\n\n    Logger.info(`[content compilation] cost time ${performance.now() - start}ms`);\n\n    return ret;\n  }\n\n  private static _parseShaderStatements(ret: IShaderContent, scanner: Scanner) {\n    let braceLevel = 1;\n    let start = scanner.getCurPosition();\n\n    while (true) {\n      const word = scanner.scanToken();\n      switch (word.type) {\n        case EKeyword.GS_SubShader:\n          this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n          const subShader = this._parseSubShader(scanner);\n          ret.subShaders.push(subShader);\n          start = scanner.getCurPosition();\n          break;\n\n        case EKeyword.GS_EditorProperties:\n        case EKeyword.GS_EditorMacros:\n        case EKeyword.GS_Editor:\n          this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n          scanner.scanPairedText(\"{\", \"}\", true);\n          start = scanner.getCurPosition();\n          break;\n\n        case EKeyword.GS_RenderQueueType:\n          this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n          this._parseRenderQueueAssignment(ret, scanner);\n          start = scanner.getCurPosition();\n          break;\n\n        case ETokenType.NOT_WORD:\n          if (word.lexeme === \"{\") braceLevel += 1;\n          else if (word.lexeme === \"}\") {\n            braceLevel -= 1;\n            if (braceLevel === 0) {\n              this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n              this._symbolTable.dropScope();\n              return;\n            }\n          }\n\n        default:\n          if (ShaderContentParser._isRenderStateDeclarator(word)) {\n            this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n            this._parseRenderStateDeclarationOrAssignment(ret, word, scanner);\n            start = scanner.getCurPosition();\n            break;\n          } else if (ShaderContentParser._isEngineType(word)) {\n            this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n            this._parseVariableDeclaration(word.type, scanner);\n            start = scanner.getCurPosition();\n            break;\n          }\n      }\n    }\n  }\n\n  private static _parseRenderStateDeclarationOrAssignment(\n    ret: { renderStates: IRenderStates },\n    stateToken: BaseToken,\n    scanner: Scanner\n  ) {\n    const ident = scanner.scanToken();\n    let isDeclaration: boolean;\n    if (ident.type === ETokenType.ID) {\n      isDeclaration = true;\n      scanner.scanText(\"{\");\n    } else if (ident.lexeme === \"{\") {\n      isDeclaration = false;\n    } else if (ident.lexeme === \"=\") {\n      const variable = scanner.scanToken();\n      scanner.scanText(\";\");\n      const sm = this._symbolTable.lookup({ type: stateToken.type, ident: variable.lexeme });\n      if (!sm?.value) {\n        const error = ShaderLabUtils.createGSError(\n          `Invalid \"${stateToken.lexeme}\" variable: ${variable.lexeme}`,\n          GSErrorName.CompilationError,\n          scanner.source,\n          variable.location\n        );\n        // #if _VERBOSE\n        this._errors.push(<GSError>error);\n        return;\n        // #endif\n      }\n      const renderState = sm.value as IRenderStates;\n      Object.assign(ret.renderStates.constantMap, renderState.constantMap);\n      Object.assign(ret.renderStates.variableMap, renderState.variableMap);\n      return;\n    }\n\n    const renderState = this._parseRenderStatePropList(stateToken.lexeme, scanner);\n    if (isDeclaration) {\n      this._symbolTable.insert({ ident: ident.lexeme, type: stateToken.type, value: renderState });\n    } else {\n      Object.assign(ret.renderStates.constantMap, renderState.constantMap);\n      Object.assign(ret.renderStates.variableMap, renderState.variableMap);\n    }\n  }\n\n  private static _parseVariableDeclaration(type: number, scanner: Scanner) {\n    const token = scanner.scanToken();\n    scanner.scanText(\";\");\n    this._symbolTable.insert({ type: token.type, ident: token.lexeme });\n  }\n\n  private static _newScope() {\n    const symbolTable = new SymbolTable();\n    this._symbolTable.newScope(symbolTable);\n  }\n\n  private static _parseRenderStatePropList(state: string, scanner: Scanner): IRenderStates {\n    const ret: IRenderStates = { constantMap: {}, variableMap: {} };\n    while (scanner.getCurChar() !== \"}\") {\n      this._parseRenderStatePropItem(ret, state, scanner);\n      scanner.skipCommentsAndSpace();\n    }\n    scanner._advance();\n    return ret;\n  }\n\n  private static _parseRenderStatePropItem(ret: IRenderStates, state: string, scanner: Scanner) {\n    let renderStateProp = scanner.scanToken().lexeme;\n    const op = scanner.scanToken();\n    if (state === \"BlendState\" && renderStateProp !== \"BlendColor\" && renderStateProp !== \"AlphaToCoverage\") {\n      let idx = 0;\n      if (op.lexeme === \"[\") {\n        idx = scanner.scanNumber();\n        scanner.scanText(\"]\");\n        scanner.scanText(\"=\");\n      } else if (op.lexeme !== \"=\") {\n        const error = ShaderLabUtils.createGSError(\n          `Invalid syntax, expect character '=', but got ${op.lexeme}`,\n          GSErrorName.CompilationError,\n          scanner.source,\n          scanner.getCurPosition()\n        );\n        // #if _VERBOSE\n        this._errors.push(<GSError>error);\n        scanner.scanToCharacter(\";\");\n        return;\n        // #endif\n      }\n      renderStateProp += idx;\n    }\n\n    renderStateProp = state + renderStateProp;\n    const renderStateElementKey = RenderStateDataKey[renderStateProp];\n    if (renderStateElementKey == undefined) {\n      const error = ShaderLabUtils.createGSError(\n        `Invalid render state element ${renderStateProp}`,\n        GSErrorName.CompilationError,\n        scanner.source,\n        scanner.getCurPosition()\n      );\n      // #if _VERBOSE\n      this._errors.push(<GSError>error);\n      scanner.scanToCharacter(\";\");\n      return;\n      // #endif\n    }\n\n    scanner.skipCommentsAndSpace();\n    let value: any;\n    if (/[0-9.]/.test(scanner.getCurChar())) {\n      value = scanner.scanNumber();\n    } else {\n      const token = scanner.scanToken();\n      if (token.type === EKeyword.TRUE) value = true;\n      else if (token.type === EKeyword.FALSE) value = false;\n      else if (token.type === EKeyword.GS_Color) {\n        scanner.scanText(\"(\");\n        const args: number[] = [];\n        while (true) {\n          args.push(scanner.scanNumber());\n          scanner.skipCommentsAndSpace();\n          const peek = scanner.peek(1);\n          if (peek === \")\") {\n            scanner._advance();\n            break;\n          }\n          scanner.scanText(\",\");\n        }\n        value = new Color(...args);\n      } else if (scanner.getCurChar() === \".\") {\n        scanner._advance();\n        const engineTypeProp = scanner.scanToken();\n        value = ShaderContentParser._engineType[token.lexeme]?.[engineTypeProp.lexeme];\n        if (value == undefined) {\n          const error = ShaderLabUtils.createGSError(\n            `Invalid engine constant: ${token.lexeme}.${engineTypeProp.lexeme}`,\n            GSErrorName.CompilationError,\n            scanner.source,\n            engineTypeProp.location\n          );\n          // #if _VERBOSE\n          this._errors.push(<GSError>error);\n          scanner.scanToCharacter(\";\");\n          return;\n          // #endif\n        }\n      } else {\n        value = token.lexeme;\n      }\n    }\n    scanner.scanText(\";\");\n    if (typeof value === \"string\") {\n      ret.variableMap[renderStateElementKey] = value;\n    } else {\n      ret.constantMap[renderStateElementKey] = value;\n    }\n  }\n\n  private static _parseRenderQueueAssignment(ret: { renderStates: IRenderStates }, scanner: Scanner) {\n    scanner.scanText(\"=\");\n    const word = scanner.scanToken();\n    scanner.scanText(\";\");\n    const value = ShaderContentParser._engineType.RenderQueueType[word.lexeme];\n    const key = RenderStateDataKey.RenderQueueType;\n    if (value == undefined) {\n      ret.renderStates.variableMap[key] = word.lexeme;\n    } else {\n      ret.renderStates.constantMap[key] = value;\n    }\n  }\n\n  private static _addGlobalStatement(\n    ret: { globalContents: IStatement[] },\n    scanner: Scanner,\n    start: ShaderPosition,\n    offset: number\n  ) {\n    if (scanner.current > start.index + offset) {\n      ret.globalContents.push({\n        range: { start, end: { ...scanner.getCurPosition(), index: scanner.current - offset - 1 } },\n        content: scanner.source.substring(start.index, scanner.current - offset - 1)\n      });\n    }\n  }\n\n  private static _parseSubShader(scanner: Scanner): ISubShaderContent {\n    this._newScope();\n    const ret = {\n      passes: [],\n      globalContents: [],\n      renderStates: { constantMap: {}, variableMap: {} },\n      tags: {}\n    } as ISubShaderContent;\n    let braceLevel = 1;\n    ret.name = scanner.scanPairedText('\"', '\"');\n    scanner.scanText(\"{\");\n\n    scanner.skipCommentsAndSpace();\n    let start = scanner.getCurPosition();\n\n    while (true) {\n      const word = scanner.scanToken();\n      switch (word.type) {\n        case EKeyword.GS_Pass:\n          this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n          const pass = this._parsePass(scanner);\n          ret.passes.push(pass);\n          start = scanner.getCurPosition();\n          break;\n\n        case EKeyword.GS_RenderQueueType:\n          this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n          this._parseRenderQueueAssignment(ret, scanner);\n          start = scanner.getCurPosition();\n          break;\n\n        case EKeyword.GS_UsePass:\n          this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n          const name = scanner.scanPairedText('\"', '\"');\n          // @ts-ignore\n          ret.passes.push({ name, isUsePass: true, renderStates: { constantMap: {}, variableMap: {} }, tags: {} });\n          start = scanner.getCurPosition();\n          break;\n\n        case EKeyword.GS_Tags:\n          this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n          this._parseTags(ret, scanner);\n          start = scanner.getCurPosition();\n          break;\n\n        case ETokenType.NOT_WORD:\n          if (word.lexeme === \"{\") braceLevel += 1;\n          else if (word.lexeme === \"}\") {\n            braceLevel -= 1;\n            if (braceLevel === 0) {\n              this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n              this._symbolTable.dropScope();\n              return ret;\n            }\n          }\n\n        default:\n          if (ShaderContentParser._isRenderStateDeclarator(word)) {\n            this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n            this._parseRenderStateDeclarationOrAssignment(ret, word, scanner);\n            start = scanner.getCurPosition();\n            break;\n          } else if (ShaderContentParser._isEngineType(word)) {\n            this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n            this._parseVariableDeclaration(word.type, scanner);\n            start = scanner.getCurPosition();\n            break;\n          }\n      }\n    }\n  }\n\n  private static _parseTags(ret: { tags?: Record<string, number | string | boolean> }, scanner: Scanner) {\n    scanner.scanText(\"{\");\n    while (true) {\n      const ident = scanner.scanToken();\n      scanner.scanText(\"=\");\n      const value = scanner.scanPairedText('\"', '\"');\n      scanner.skipCommentsAndSpace();\n\n      ret.tags[ident.lexeme] = value;\n\n      if (scanner.peek(1) === \"}\") {\n        scanner._advance();\n        return;\n      }\n      scanner.scanText(\",\");\n    }\n  }\n\n  private static _parsePass(scanner: Scanner): IShaderPassContent {\n    this._newScope();\n    const ret = {\n      globalContents: [],\n      renderStates: { constantMap: {}, variableMap: {} },\n      tags: {}\n    } as IShaderPassContent & {\n      globalContents: IStatement[];\n    };\n    ret.name = scanner.scanPairedText('\"', '\"');\n    scanner.scanText(\"{\");\n    let braceLevel = 1;\n\n    scanner.skipCommentsAndSpace();\n    let start = scanner.getCurPosition();\n\n    while (true) {\n      const word = scanner.scanToken();\n      switch (word.type) {\n        case EKeyword.GS_RenderQueueType:\n          this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n          this._parseRenderQueueAssignment(ret, scanner);\n          start = scanner.getCurPosition();\n          break;\n\n        case EKeyword.GS_Tags:\n          this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n          this._parseTags(ret, scanner);\n          start = scanner.getCurPosition();\n          break;\n\n        case EKeyword.GS_VertexShader:\n        case EKeyword.GS_FragmentShader:\n          this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n          scanner.scanText(\"=\");\n          const entry = scanner.scanToken();\n          if (ret[word.lexeme]) {\n            const error = ShaderLabUtils.createGSError(\n              \"reassign main entry\",\n              GSErrorName.CompilationError,\n              scanner.source,\n              scanner.getCurPosition()\n            );\n            // #if _VERBOSE\n            Logger.error(error.toString());\n            throw error;\n            // #endif\n          }\n          const key = word.type === EKeyword.GS_VertexShader ? \"vertexEntry\" : \"fragmentEntry\";\n          ret[key] = entry.lexeme;\n          scanner.scanText(\";\");\n          start = scanner.getCurPosition();\n          break;\n\n        case ETokenType.NOT_WORD:\n          if (word.lexeme === \"{\") braceLevel += 1;\n          else if (word.lexeme === \"}\") {\n            braceLevel -= 1;\n            if (braceLevel === 0) {\n              this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n              this._symbolTable.dropScope();\n              return ret;\n            }\n          }\n\n        default:\n          if (ShaderContentParser._isRenderStateDeclarator(word)) {\n            this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n            this._parseRenderStateDeclarationOrAssignment(ret, word, scanner);\n            start = scanner.getCurPosition();\n            break;\n          } else if (ShaderContentParser._isEngineType(word)) {\n            this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n            this._parseVariableDeclaration(word.type, scanner);\n            start = scanner.getCurPosition();\n            break;\n          }\n      }\n    }\n  }\n}\n","import { Lexer } from \"./lexer\";\nimport { ShaderTargetParser } from \"./parser\";\nimport { Preprocessor } from \"./preprocessor\";\nimport { GLES100Visitor, GLES300Visitor } from \"./codeGen\";\nimport { IShaderContent, IShaderLab } from \"@galacean/engine-design\";\nimport { ShaderContentParser } from \"./contentParser\";\n// @ts-ignore\nimport { Logger, ShaderLib, ShaderMacro, ShaderPlatformTarget } from \"@galacean/engine\";\nimport { ShaderPosition, ShaderRange } from \"./common\";\n// #if _VERBOSE\nimport { GSError } from \"./GSError\";\n// #endif\nimport { PpParser } from \"./preprocessor/PpParser\";\nimport { ShaderLabUtils } from \"./ShaderLabUtils\";\nimport { IShaderProgramSource } from \"@galacean/engine-design/types/shader-lab/IShaderProgramSource\";\n\n/** @internal */\nexport class ShaderLab implements IShaderLab {\n  private static _parser = ShaderTargetParser.create();\n  private static _shaderPositionPool = ShaderLabUtils.createObjectPool(ShaderPosition);\n  private static _shaderRangePool = ShaderLabUtils.createObjectPool(ShaderRange);\n\n  // #if _VERBOSE\n  static _processingPassText?: string;\n  // #endif\n\n  static createPosition(index: number, line?: number, column?: number): ShaderPosition {\n    const position = this._shaderPositionPool.get();\n    position.set(\n      index,\n      // #if _VERBOSE\n      line,\n      column\n      // #endif\n    );\n    return position;\n  }\n\n  static createRange(start: ShaderPosition, end: ShaderPosition): ShaderRange {\n    const range = this._shaderRangePool.get();\n    range.set(start, end);\n    return range;\n  }\n\n  // #if _VERBOSE\n  /** Retrieve the compilation errors */\n  readonly errors: GSError[] = [];\n  // #endif\n\n  _parseShaderPass(\n    source: string,\n    vertexEntry: string,\n    fragmentEntry: string,\n    macros: ShaderMacro[],\n    backend: ShaderPlatformTarget,\n    platformMacros: string[],\n    basePathForIncludeKey: string\n  ): IShaderProgramSource | undefined {\n    Preprocessor.reset(ShaderLib, basePathForIncludeKey);\n    for (const macro of macros) {\n      Preprocessor.addPredefinedMacro(macro.name, macro.value);\n    }\n\n    for (let i = 0; i < platformMacros.length; i++) {\n      Preprocessor.addPredefinedMacro(platformMacros[i]);\n    }\n\n    const preprocessorStart = performance.now();\n    const ppdContent = Preprocessor.process(source);\n    // #if _VERBOSE\n    if (PpParser._errors.length > 0) {\n      for (const err of PpParser._errors) {\n        this.errors.push(<GSError>err);\n      }\n      this._logErrors();\n      return undefined;\n    }\n    // #endif\n\n    Logger.info(`[pass compilation - preprocessor]  cost time ${performance.now() - preprocessorStart}ms`);\n\n    const lexer = new Lexer(ppdContent);\n    const tokens = lexer.tokenize();\n\n    const { _parser: parser } = ShaderLab;\n\n    ShaderLab._processingPassText = ppdContent;\n    const program = parser.parse(tokens);\n\n    // #if _VERBOSE\n    for (const err of parser.errors) {\n      this.errors.push(err);\n    }\n    // #endif\n    if (!program) {\n      // #if _VERBOSE\n      this._logErrors();\n      // #endif\n      return undefined;\n    }\n\n    const codeGen =\n      backend === ShaderPlatformTarget.GLES100 ? GLES100Visitor.getVisitor() : GLES300Visitor.getVisitor();\n\n    const start = performance.now();\n    const ret = codeGen.visitShaderProgram(program, vertexEntry, fragmentEntry);\n    Logger.info(`[CodeGen] cost time: ${performance.now() - start}ms`);\n    ShaderLab._processingPassText = undefined;\n\n    // #if _VERBOSE\n    for (const err of codeGen.errors) {\n      this.errors.push(err);\n    }\n    this._logErrors();\n    // #endif\n\n    return ret;\n  }\n\n  _parseShaderContent(shaderSource: string): IShaderContent {\n    ShaderLabUtils.clearAllShaderLabObjectPool();\n    ShaderContentParser.reset();\n    const ret = ShaderContentParser.parse(shaderSource);\n\n    // #if _VERBOSE\n    this.errors.length = 0;\n    for (const error of ShaderContentParser._errors) {\n      this.errors.push(error);\n    }\n    // #endif\n\n    return ret;\n  }\n\n  // #if _VERBOSE\n  /**\n   * @internal\n   */\n  _logErrors() {\n    const errors = this.errors;\n    if (errors.length === 0 || !Logger.isEnabled) return;\n    Logger.error(`${errors.length} errors occur!`);\n    for (const err of errors) {\n      Logger.error(err.toString());\n    }\n  }\n  // #endif\n}\n","export { ShaderLab } from \"./ShaderLab\";\n\n// #if _VERBOSE\nexport { Preprocessor } from \"./preprocessor\";\nexport * from \"./GSError\";\n// #endif\n\n//@ts-ignore\nexport const version = `__buildVersion`;\n\nlet mode = \"Release\";\n// #if _VERBOSE\nmode = \"Verbose\";\n// #endif\n\nconsole.log(`Galacean ShaderLab version: ${version}. mode: ${mode}`);\n"],"names":["ShaderRange","set","start","end","dispose","ShaderPosition","index","EKeyword","KeywordTable","Map","ATTRIBUTE","CONST","BOOL","FLOAT","DOUBLE","INT","UINT","BREAK","CONTINUE","DO","ELSE","FOR","IF","WHILE","DISCARD","RETURN","BVEC2","BVEC3","BVEC4","IVEC2","IVEC3","IVEC4","UVEC2","UVEC3","UVEC4","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","IN","OUT","INOUT","SAMPLER2D","SAMPLER_CUBE","SAMPLER3D","SAMPLER2D_SHADOW","SAMPLER_CUBE_SHADOW","SAMPLER2D_ARRAY","SAMPLER2D_ARRAY_SHADOW","I_SAMPLER2D","I_SAMPLER3D","I_SAMPLER_CUBE","I_SAMPLER2D_ARRAY","U_SAMPLER2D","U_SAMPLER3D","U_SAMPLER_CUBE","U_SAMPLER2D_ARRAY","STRUCT","VOID","TRUE","FALSE","PRECISION","PRECISE","HIGHP","MEDIUMP","LOWP","INVARIANT","FLAT","SMOOTH","NOPERSPECTIVE","CENTROID","ETokenType","TypeAny","ShaderLabUtils","createObjectPool","type","pool","ClearableObjectPool","_shaderLabObjectPoolSet","push","clearAllShaderLabObjectPool","i","n","length","clear","createGSError","message","errorName","source","location","file","Error","BaseToken","lexeme","arg","ShaderLab","createPosition","createRange","EOF","LexerUtils","isNum","char","numRegex","test","isLetter","letterRegex","isAlpha","alphaRegex","isNumOrLetter","numOrLetterRegex","isKeyword","tt","ID","GSErrorName","BaseScanner","kws","_currentIndex","_source","_keywordsMap","getCurPosition","isEnd","getCurChar","advance","count","_advance","skipSpace","includeLineBreak","spaceChars","_spaceCharsWithBreak","_spaceChars","curChar","_checkIsIn","skipCommentsAndSpace","peek","to","offset","substring","scanText","text","throwError","pos","msgs","error","join","ScannerError","scanPairedText","left","right","balanced","skipLeading","level","scanToken","onToken","splitCharRegex","token","get","NOT_WORD","tokenType","range","checked","chars","current","Lexer","reset","tokenize","_scanWord","_scanNum","_getPosition","LEFT_ASSIGN","LEFT_OP","LE_OP","LEFT_ANGLE","RIGHT_ASSIGN","RIGHT_OP","GE_OP","RIGHT_ANGLE","INC_OP","ADD_ASSIGN","PLUS","DEC_OP","SUB_ASSIGN","DASH","EQ_OP","EQUAL","NE_OP","BANG","AND_OP","AMPERSAND","OR_OP","OR_ASSIGN","VERTICAL_BAR","XOR_OP","XOR_ASSIGN","CARET","MUL_ASSIGN","STAR","DIV_ASSIGN","SLASH","MOD_ASSIGN","PERCENT","LEFT_PAREN","RIGHT_PAREN","LEFT_BRACE","RIGHT_BRACE","LEFT_BRACKET","RIGHT_BRACKET","_scanNumAfterDot","DOT","COMMA","COLON","SEMICOLON","TILDE","QUESTION","_scanStringConst","buffer","STRING_CONST","FLOAT_CONSTANT","word","kt","_scanFloatSuffix","_scanIntegerSuffix","INT_CONSTANT","EAction","ShaderData","globalPrecisions","SymbolDataType","arraySpecifier","typeLexeme","ESymbolType","SymbolInfo","symbolType","astNode","ident","dataType","FnSymbol","protoType","returnType","typeSpecifier","FN","StructSymbol","BaseSymbolTable","_table","insert","sm","entry","symbolEqualCheck","Logger","warn","lookup","item","SymbolTableStack","_stack","newScope","scope","dropScope","pop","_scope","ret","SymbolTable","exist","newSymbol","signature","existParams","paramSig","newSymbolParams","getAllFnSymbols","fnIdent","entries","filter","VarSymbol","isGlobalVariable","initAst","VAR","SematicAnalyzer","semanticStack","acceptRule","undefined","symbolTable","_shaderData","_translationRuleTable","addTranslationRule","pid","rule","getTranslationRule","loc","param","shaderData","ENonTerminal","Production","goal","derivation","id","_id","Grammar","productions","startSymbol","unshift","START","getProductionList","nonTerminal","isNullableNT","NT","find","EPSILON","getProductionByID","create","_ps","map","gsl","slice","SymbolType","StructProp","typeInfo","TreeNode","children","nt","_location","_children","codeGen","visitor","defaultCodeGen","semanticAnalyze","sa","ASTNode","_unwrapToken","node","Token","TrivialNode","_ignore","ScopeBrace","scope_brace","ScopeEndBrace","scope_end_brace","JumpStatement","jump_statement","visitJumpStatement","ExpressionAstNode","_type","t","SingleDeclaration","single_declaration","fullyType","initializer","visitSingleDeclaration","FullySpecifiedType","fully_specified_type","qualifierList","TypeQualifier","type_qualifier","qualifier","SingleTypeQualifier","single_type_qualifier","child","TypeSpecifier","type_specifier","arraySize","size","isCustom","ArraySpecifier","array_specifier","integerConstantExpr","value","IntegerConstantExpressionOperator","integer_constant_expression_operator","operator","compute","a","b","IntegerConstantExpression","integer_constant_expression","Number","TypeSpecifierNonArray","type_specifier_nonarray","ExtBuiltinTypeSpecifierNonArray","ext_builtin_type_specifier_nonarray","InitDeclaratorList","init_declarator_list","singleDecl","initDeclList","IdentifierList","identifier_list","idList","Declaration","declaration","visitDeclaration","FunctionProtoType","function_prototype","visitFunctionProtoType","declarator","parameterList","parameterInfoList","FunctionDeclarator","function_declarator","header","FunctionHeader","function_header","visitFunctionHeader","FunctionParameterList","function_parameter_list","visitFunctionParameterList","decl","list","concat","ParameterDeclaration","parameter_declaration","varSymbol","typeQualifier","parameterDeclarator","ParameterDeclarator","parameter_declarator","CompoundStatementNoScope","compound_statement_no_scope","StatementList","statement_list","visitStatementList","FunctionDefinition","function_definition","visitFunctionDefinition","statements","FunctionCall","function_call","visitFunctionCall","FunctionCallGeneric","function_call_generic","fnSymbol","functionIdentifier","isBuiltin","paramList","FunctionCallParameterList","function_call_parameter_list","expr","paramNodes","PrecisionSpecifier","precision_specifier","FunctionIdentifier","function_identifier","visitFunctionIdentifier","ty","AssignmentExpression","assignment_expression","Expression","expression","PrimaryExpression","primary_expression","VariableIdentifier","PostfixExpression","postfix_expression","visitPostfixExpression","StructSpecifier","struct_specifier","propList","declList","StructDeclarationList","struct_declaration_list","flat","StructDeclaration","struct_declaration","declaratorList","prop","StructDeclaratorList","struct_declarator_list","StructDeclarator","struct_declarator","VariableDeclaration","variable_declaration","visitGlobalVariableDeclaration","variable_identifier","symbolInfo","visitVariableIdentifier","GLShaderProgram","gs_shader_program","GrammarUtils","isTerminal","toString","createProductionWithOptions","options","astTypePool","opt","createProductionOptions","common","position","opts","addMapSetItem","k","v","Set","add","isSubSet","sb","has","isActionEqual","action","target","productionAndRules","global_declaration","GS_RenderQueueType","MAT2X3","MAT2X4","MAT3X2","MAT3X4","MAT4X2","MAT4X3","storage_qualifier","precision_qualifier","interpolation_qualifier","invariant_qualifier","conditional_expression","logical_or_expression","logical_xor_expression","logical_and_expression","inclusive_or_expression","exclusive_or_expression","and_expression","equality_expression","relational_expression","shift_expression","additive_expression","multiplicative_expression","unary_expression","unary_operator","assignment_operator","AND_ASSIGN","statement","compound_statement","simple_statement","expression_statement","selection_statement","iteration_statement","initializer_list","condition","for_init_statement","for_rest_statement","conditionopt","createGrammar","StateItem","production","lookahead","_needReInfer","lookaheadSet","la","addLookahead","ts","needReInfer","symbolByOffset","canReduce","curSymbol","nextSymbol","State","cores","closured","_stateItemPool","_items","it","itemMapKey","getStateItemMapKey","createStateItem","mapId","newItem","cacheKey","getMapKey","state","closureMap","core","newState","items","LALR1","grammar","firstSetMap","followSetMap","actionTable","gotoTable","_firstSetNTStack","generate","computeFirstSet","buildStateTable","startStateItemCore","startState","_extendState","_closure","newStates","_inferNextState","ns","_extendStateItem","productionList","newLookaheadSet","lastFirstSet","terminalExist","Utils","coreMap","stateActionTable","stateGotoTable","stateItem","Reduce","Accept","_addAction","nextItem","gs","Array","from","Shift","table","terminal","_computeFirstSetForNT","idx","findIndex","computingFS","len","curNT","firstSet","succeedFirstSet","ShaderTargetParser","_traceBackStack","sematicAnalyzer","parse","tokens","performance","now","traceBackStack","nextToken","next","loopCount","actionInfo","info","reduceProduction","translationRule","values","nextState","CompilationError","_processingPassText","_singleton","generator","curState","MacroDefine","macro","args","body","_argsLexemes","_replaceRegex","RegExp","expandFunctionBody","PreprocessorError","replace","m","indexOf","isFunction","EPpToken","EPpKeyword","PpKeyword","PpUtils","expand","segments","startIdx","generatedIdx","seg","originSlice","rangeInBlock","generatedIdxEnd","assembleSegments","PpScanner","macroLvl","scanDirective","expandOnToken","directive","_advanceToDirective","if","ifdef","ifndef","includes","endif","scanWordsUntilChar","nonLetterChar","scanWord","skipNonLetter","getShaderPosition","kw","_skipComments","_splitCharacters","scanQuotedString","string_const","scanToChar","scanMacroBranchChunk","startLvl","elif","else","chunk","nextDirective","scanPairedBlock","lc","rc","scanRemainMacro","peekNonSpace","scanInteger","integer","int_constant","scanLineRemain","comments","line","line_remain","commentRange","startsWith","PpParser","includeMap","basePathForIncludeKey","_definedMacros","_expandSegmentsStack","_branchMacros","addPredefinedMacro","_includeMap","_basePathForIncludeKey","tk","macroBody","scanner","_onToken","bind","define","_parseDefine","undef","_parseUndef","_parseIf","_parseIfNdef","_parseIfDef","include","_parseInclude","expandSegments","sourceMap","reportError","includedPath","URL","href","ShaderPass","_shaderRootPath","expanded","_expandMacroChunk","content","_addEmptyReplace","bodyChunk","_parseMacroBranch","elseChunk","startPosition","constantExpr","_parseConstantExpression","endPosition","_parseLogicalOrExpression","operand1","_parseLogicalAndExpression","operand2","_parseEqualityExpression","_parseRelationalExpression","_parseShiftExpression","opPos","_parseAdditiveExpression","_parseMulticativeExpression","_parseUnaryExpression","parenExpr","_parseParenthesisExpression","_parseConstant","defined","withParen","isInteger","scannerOrFile","macroArgs","macroDefine","delete","curLvl","curIdx","blockRange","Preprocessor","process","baseScanner","ParserUtils","unwrapNodeByType","VisitorContext","attributeList","attributeStructs","_referencedAttributeList","Object","_referencedGlobals","_referencedVaryingList","isAttributeStruct","isVaryingStruct","varyingStruct","referenceAttribute","referenceVarying","referenceGlobal","fnEntries","_passSymbolTable","key","passSymbolTable","context","CodeGenVisitor","postExpr","call","paramInfoList","plainParams","params","fullType","_curFn","cmd","returnVar","returnFnCall","_reportError","EShaderStage","defaultPrecision","GLESVisitor","_versionText","_extensions","visitShaderProgram","vertexEntry","fragmentEntry","vertex","vertexMain","fragment","_fragmentMain","data","fnNode","stage","VERTEX","varyStruct","paramInfo","structSymbol","globalText","_getGlobalText","attributeDeclare","getAttributeDeclare","varyingDeclare","getVaryingDeclare","globalCode","sort","FRAGMENT","textList","lastLength","_serialized","keys","precision","GLES100Visitor","e","getVisitor","V3_GL_FragColor","GLES300Visitor","KeywordMap","GS_BlendState","GS_DepthState","GS_StencilState","GS_RasterState","GS_EditorProperties","GS_EditorMacros","GS_Editor","GS_Tags","GS_VertexShader","GS_FragmentShader","GS_SubShader","GS_Pass","GS_BlendFactor","GS_BlendOperation","GS_Bool","GS_Number","GS_CompareFunction","GS_StencilOperation","GS_CullMode","GS_UsePass","GS_Color","Scanner","scanNumber","s1","s2","EngineType","RenderStateType","ShaderContentParser","_isRenderStateDeclarator","_isEngineType","_errors","_symbolTable","_newScope","subShaders","globalContents","renderStates","constantMap","variableMap","name","_parseShaderStatements","shaderGlobalStatements","shaderRenderStates","subShader","curSubShaderGlobalStatements","constMap","passes","pass","assign","isUsePass","passGlobalStatements","contents","braceLevel","_addGlobalStatement","_parseSubShader","_parseRenderQueueAssignment","_parseRenderStateDeclarationOrAssignment","_parseVariableDeclaration","stateToken","isDeclaration","variable","renderState","_parseRenderStatePropList","_parseRenderStatePropItem","renderStateProp","op","renderStateElementKey","RenderStateDataKey","Color","engineTypeProp","_engineType","RenderQueueType","tags","_parsePass","_parseTags","CompareFunction","StencilOperation","BlendOperation","BlendFactor","CullMode","_parseShaderPass","macros","backend","platformMacros","ShaderLib","preprocessorStart","ppdContent","lexer","parser","_parser","program","ShaderPlatformTarget","GLES100","_parseShaderContent","shaderSource","column","_shaderPositionPool","_shaderRangePool","version","mode","console","log"],"mappings":"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"}