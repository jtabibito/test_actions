{"version":3,"file":"browser.min.js","sources":["../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_array_like_to_array.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_create_for_of_iterator_helper_loose.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_set_prototype_of.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_inherits.js","../../../node_modules/.pnpm/tslib@2.8.1/node_modules/tslib/tslib.es6.mjs","../src/common/ShaderRange.ts","../src/common/Keywords.ts","../src/common/types.ts","../src/GSError.ts","../src/lalr/types.ts","../src/parser/symbolTable/SymbolInfo.ts","../src/parser/GrammarSymbol.ts","../src/parser/AST.ts","../src/preprocessor/constants.ts","../src/common/Enums.ts","../src/common/ShaderPosition.ts","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_instanceof.js","../src/ShaderLabUtils.ts","../src/common/BaseToken.ts","../src/lexer/Utils.ts","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_create_class.js","../src/common/BaseScanner.ts","../src/lexer/Lexer.ts","../src/parser/ShaderInfo.ts","../src/parser/symbolTable/SymbolDataType.ts","../src/parser/symbolTable/FnSymbol.ts","../src/parser/symbolTable/StructSymbol.ts","../src/common/BaseSymbolTable.ts","../src/parser/symbolTable/SymbolTable.ts","../src/parser/symbolTable/VarSymbol.ts","../src/parser/SemanticAnalyzer.ts","../src/lalr/Production.ts","../src/parser/Grammar.ts","../src/parser/types.ts","../src/lalr/Utils.ts","../src/lalr/CFG.ts","../src/lalr/StateItem.ts","../src/lalr/State.ts","../src/lalr/LALR1.ts","../src/parser/ShaderTargetParser.ts","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_type_of.js","../src/preprocessor/MacroDefine.ts","../src/preprocessor/Utils.ts","../src/preprocessor/PpScanner.ts","../src/preprocessor/PpParser.ts","../src/preprocessor/Preprocessor.ts","../src/ParserUtils.ts","../src/codeGen/VisitorContext.ts","../src/codeGen/CodeGenVisitor.ts","../src/codeGen/GLESVisitor.ts","../src/codeGen/GLES100.ts","../src/codeGen/GLES300.ts","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_is_native_reflect_construct.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_construct.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_extends.js","../src/contentParser/KeywordMap.ts","../src/contentParser/Scanner.ts","../src/contentParser/SymbolTable.ts","../src/contentParser/ShaderContentParser.ts","../src/ShaderLab.ts","../src/index.ts"],"sourcesContent":["function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","import { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _create_for_of_iterator_helper_loose(o, allowArrayLike) {\n    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n    if (it) return (it = it.call(o)).next.bind(it);\n    // Fallback for engines without symbol support\n    if (Array.isArray(o) || (it = _unsupported_iterable_to_array(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n        if (it) o = it;\n\n        var i = 0;\n\n        return function() {\n            if (i >= o.length) return { done: true };\n\n            return { done: false, value: o[i++] };\n        };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _create_for_of_iterator_helper_loose as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n","function _set_prototype_of(o, p) {\n    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {\n        o.__proto__ = p;\n\n        return o;\n    };\n\n    return _set_prototype_of(o, p);\n}\nexport { _set_prototype_of as _ };\n","import { _ as _set_prototype_of } from \"./_set_prototype_of.js\";\n\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });\n\n    if (superClass) _set_prototype_of(subClass, superClass);\n}\nexport { _inherits as _ };\n","/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nvar ownKeys = function(o) {\n  ownKeys = Object.getOwnPropertyNames || function (o) {\n    var ar = [];\n    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n    return ar;\n  };\n  return ownKeys(o);\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r, s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n        }\n        else s |= 1;\n      }\n      catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\n  if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\n      return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\n          return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\n      });\n  }\n  return path;\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __esDecorate,\n  __runInitializers,\n  __propKey,\n  __setFunctionName,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n  __rewriteRelativeImportExtension,\n};\n","import { IPoolElement } from \"@galacean/engine\";\nimport { ShaderPosition } from \"./ShaderPosition\";\n\nexport class ShaderRange implements IPoolElement {\n  public start: ShaderPosition;\n  public end: ShaderPosition;\n\n  set(start: ShaderPosition, end: ShaderPosition) {\n    this.start = start;\n    this.end = end;\n  }\n\n  dispose(): void {\n    this.start.dispose();\n    this.end.dispose();\n  }\n}\n","export enum EKeyword {\n  ATTRIBUTE = 0,\n  CONST,\n  BOOL,\n  FLOAT,\n  DOUBLE,\n  INT,\n  UINT,\n  BREAK,\n  CONTINUE,\n  DO,\n  ELSE,\n  FOR,\n  IF,\n  WHILE,\n  DISCARD,\n  RETURN,\n  BVEC2,\n  BVEC3,\n  BVEC4,\n  IVEC2,\n  IVEC3,\n  IVEC4,\n  UVEC2,\n  UVEC3,\n  UVEC4,\n  VEC2,\n  VEC3,\n  VEC4,\n  MAT2,\n  MAT3,\n  MAT4,\n  MAT2X3,\n  MAT2X4,\n  MAT3X2,\n  MAT3X4,\n  MAT4X2,\n  MAT4X3,\n  IN,\n  OUT,\n  INOUT,\n  CENTROID,\n  SAMPLER2D,\n  SAMPLER3D,\n  SAMPLER_CUBE,\n  SAMPLER2D_SHADOW,\n  SAMPLER_CUBE_SHADOW,\n  SAMPLER2D_ARRAY,\n  SAMPLER2D_ARRAY_SHADOW,\n  I_SAMPLER2D,\n  I_SAMPLER3D,\n  I_SAMPLER_CUBE,\n  I_SAMPLER2D_ARRAY,\n  U_SAMPLER2D,\n  U_SAMPLER3D,\n  U_SAMPLER_CUBE,\n  U_SAMPLER2D_ARRAY,\n  STRUCT,\n  VOID,\n  TRUE,\n  FALSE,\n  PRECISION,\n  PRECISE,\n  HIGHP,\n  MEDIUMP,\n  LOWP,\n  INVARIANT,\n  SMOOTH,\n  FLAT,\n  NOPERSPECTIVE,\n\n  // galacean internals\n  GS_RenderQueueType,\n  GS_BlendState,\n  GS_DepthState,\n  GS_StencilState,\n  GS_RasterState,\n  GS_EditorProperties,\n  GS_EditorMacros,\n  GS_Editor,\n  GS_Tags,\n  GS_ReplacementTag,\n  GS_LightMode,\n  GS_PipelineStage,\n  GS_VertexShader,\n  GS_FragmentShader,\n  GS_SubShader,\n  GS_Pass,\n  GS_BlendFactor,\n  GS_BlendOperation,\n  GS_Bool,\n  GS_Number,\n  GS_Color,\n  GS_CompareFunction,\n  GS_StencilOperation,\n  GS_CullMode,\n  GS_UsePass\n}\n","import { EKeyword } from \"./Keywords\";\n\nexport const KeywordTable = new Map<string, EKeyword>([\n  [\"attribute\", EKeyword.ATTRIBUTE],\n  [\"const\", EKeyword.CONST],\n  [\"bool\", EKeyword.BOOL],\n  [\"float\", EKeyword.FLOAT],\n  [\"double\", EKeyword.DOUBLE],\n  [\"int\", EKeyword.INT],\n  [\"uint\", EKeyword.UINT],\n  [\"break\", EKeyword.BREAK],\n  [\"continue\", EKeyword.CONTINUE],\n  [\"do\", EKeyword.DO],\n  [\"else\", EKeyword.ELSE],\n  [\"for\", EKeyword.FOR],\n  [\"if\", EKeyword.IF],\n  [\"while\", EKeyword.WHILE],\n  [\"discard\", EKeyword.DISCARD],\n  [\"return\", EKeyword.RETURN],\n  [\"bvec2\", EKeyword.BVEC2],\n  [\"bvec3\", EKeyword.BVEC3],\n  [\"bvec4\", EKeyword.BVEC4],\n  [\"ivec2\", EKeyword.IVEC2],\n  [\"ivec3\", EKeyword.IVEC3],\n  [\"ivec4\", EKeyword.IVEC4],\n  [\"uvec2\", EKeyword.UVEC2],\n  [\"uvec3\", EKeyword.UVEC3],\n  [\"uvec4\", EKeyword.UVEC4],\n  [\"vec2\", EKeyword.VEC2],\n  [\"vec3\", EKeyword.VEC3],\n  [\"vec4\", EKeyword.VEC4],\n  [\"mat2\", EKeyword.MAT2],\n  [\"mat3\", EKeyword.MAT3],\n  [\"mat4\", EKeyword.MAT4],\n  [\"in\", EKeyword.IN],\n  [\"out\", EKeyword.OUT],\n  [\"inout\", EKeyword.INOUT],\n  [\"sampler2D\", EKeyword.SAMPLER2D],\n  [\"samplerCube\", EKeyword.SAMPLER_CUBE],\n  [\"sampler3D\", EKeyword.SAMPLER3D],\n  [\"sampler2DShadow\", EKeyword.SAMPLER2D_SHADOW],\n  [\"samplerCubeShadow\", EKeyword.SAMPLER_CUBE_SHADOW],\n  [\"sampler2DArray\", EKeyword.SAMPLER2D_ARRAY],\n  [\"sampler2DArrayShadow\", EKeyword.SAMPLER2D_ARRAY_SHADOW],\n  [\"isampler2D\", EKeyword.I_SAMPLER2D],\n  [\"isampler3D\", EKeyword.I_SAMPLER3D],\n  [\"isamplerCube\", EKeyword.I_SAMPLER_CUBE],\n  [\"isampler2DArray\", EKeyword.I_SAMPLER2D_ARRAY],\n  [\"usampler2D\", EKeyword.U_SAMPLER2D],\n  [\"usampler3D\", EKeyword.U_SAMPLER3D],\n  [\"usamplerCube\", EKeyword.U_SAMPLER_CUBE],\n  [\"usampler2DArray\", EKeyword.U_SAMPLER2D_ARRAY],\n  [\"struct\", EKeyword.STRUCT],\n  [\"void\", EKeyword.VOID],\n  [\"true\", EKeyword.TRUE],\n  [\"false\", EKeyword.FALSE],\n  [\"precision\", EKeyword.PRECISION],\n  [\"precise\", EKeyword.PRECISE],\n  [\"highp\", EKeyword.HIGHP],\n  [\"mediump\", EKeyword.MEDIUMP],\n  [\"lowp\", EKeyword.LOWP],\n  [\"invariant\", EKeyword.INVARIANT],\n  [\"flat\", EKeyword.FLAT],\n  [\"smooth\", EKeyword.SMOOTH],\n  [\"noperspective\", EKeyword.NOPERSPECTIVE],\n  [\"centroid\", EKeyword.CENTROID]\n]);\n\nexport enum ETokenType {\n  ID = 1000,\n  FLOAT_CONSTANT,\n  INT_CONSTANT,\n  STRING_CONST,\n  /** << */\n  LEFT_OP,\n  /** \\>> */\n  RIGHT_OP,\n  /** ++ */\n  INC_OP,\n  /** -- */\n  DEC_OP,\n  /** <= */\n  LE_OP,\n  /** \\>= */\n  GE_OP,\n  /** == */\n  EQ_OP,\n  /** != */\n  NE_OP,\n  /** && */\n  AND_OP,\n  /** || */\n  OR_OP,\n  /** ^^ */\n  XOR_OP,\n  /** *= */\n  MUL_ASSIGN,\n  /** /= */\n  DIV_ASSIGN,\n  /** += */\n  ADD_ASSIGN,\n  /** -= */\n  SUB_ASSIGN,\n  /** %= */\n  MOD_ASSIGN,\n  /** <<= */\n  LEFT_ASSIGN,\n  /** >>= */\n  RIGHT_ASSIGN,\n  /** &= */\n  AND_ASSIGN,\n  /** ^= */\n  XOR_ASSIGN,\n  /** |= */\n  OR_ASSIGN,\n  /** ( */\n  LEFT_PAREN,\n  /** ) */\n  RIGHT_PAREN,\n  /** [ */\n  LEFT_BRACKET,\n  /** ] */\n  RIGHT_BRACKET,\n  /** { */\n  LEFT_BRACE,\n  /** } */\n  RIGHT_BRACE,\n  /** . */\n  DOT,\n  /** , */\n  COMMA,\n  COLON,\n  /** = */\n  EQUAL,\n  SEMICOLON,\n  /** ! */\n  BANG,\n  /** \\- */\n  DASH,\n  /** ~ */\n  TILDE,\n  PLUS,\n  /** \\* */\n  STAR,\n  /** / */\n  SLASH,\n  /** % */\n  PERCENT,\n  /** < */\n  LEFT_ANGLE,\n  /** \\> */\n  RIGHT_ANGLE,\n  VERTICAL_BAR,\n  /** ^ */\n  CARET,\n  /** & */\n  AMPERSAND,\n  /** ? */\n  QUESTION,\n\n  NOT_WORD,\n\n  /** ε */\n  EPSILON = 1998,\n  EOF = 1999\n}\n\nexport const TypeAny = 3000;\n\nexport type GalaceanDataType =\n  | EKeyword.VOID\n  | EKeyword.FLOAT\n  | EKeyword.BOOL\n  | EKeyword.INT\n  | EKeyword.UINT\n  | EKeyword.VEC2\n  | EKeyword.VEC3\n  | EKeyword.VEC4\n  | EKeyword.BVEC2\n  | EKeyword.BVEC3\n  | EKeyword.BVEC4\n  | EKeyword.IVEC2\n  | EKeyword.IVEC3\n  | EKeyword.IVEC4\n  | EKeyword.UVEC2\n  | EKeyword.UVEC3\n  | EKeyword.UVEC4\n  | EKeyword.MAT2\n  | EKeyword.MAT3\n  | EKeyword.MAT4\n  | EKeyword.MAT2X3\n  | EKeyword.MAT2X4\n  | EKeyword.MAT3X2\n  | EKeyword.MAT3X4\n  | EKeyword.MAT4X2\n  | EKeyword.MAT4X3\n  | EKeyword.SAMPLER2D\n  | EKeyword.SAMPLER3D\n  | EKeyword.SAMPLER_CUBE\n  | EKeyword.SAMPLER2D_SHADOW\n  | EKeyword.SAMPLER_CUBE_SHADOW\n  | EKeyword.SAMPLER2D_ARRAY\n  | EKeyword.SAMPLER2D_ARRAY_SHADOW\n  | EKeyword.I_SAMPLER2D\n  | EKeyword.I_SAMPLER3D\n  | EKeyword.I_SAMPLER_CUBE\n  | EKeyword.I_SAMPLER2D_ARRAY\n  | EKeyword.U_SAMPLER2D\n  | EKeyword.U_SAMPLER3D\n  | EKeyword.U_SAMPLER_CUBE\n  | EKeyword.U_SAMPLER2D_ARRAY\n  | typeof TypeAny\n  | string;\n\nexport type TokenType = ETokenType | EKeyword;\n","// #if _VERBOSE\nimport { ShaderPosition } from \"./common/ShaderPosition\";\nimport { ShaderRange } from \"./common/ShaderRange\";\n\nexport class GSError extends Error {\n  static wrappingLineCount = 2;\n\n  constructor(\n    name: GSErrorName,\n    message: string,\n    public readonly location: ShaderRange | ShaderPosition,\n    public readonly source: string,\n    public readonly file?: string\n  ) {\n    super(message);\n    this.name = name;\n  }\n\n  override toString(): string {\n    let start: ShaderPosition, end: ShaderPosition;\n    const { message, location, source } = this;\n    if (!source) {\n      return message;\n    }\n\n    if (location instanceof ShaderPosition) {\n      start = end = location;\n    } else {\n      start = location.start;\n      end = location.end;\n    }\n    const lines = source.split(\"\\n\");\n\n    let diagnosticMessage = `${this.name}: ${message}\\n\\n`;\n    const lineSplit = \"|···\";\n\n    const wrappingLineCount = GSError.wrappingLineCount;\n    for (let i = start.line - wrappingLineCount, n = end.line + wrappingLineCount; i <= n; i++) {\n      const line = lines[i];\n      diagnosticMessage += lineSplit + `${line}\\n`;\n\n      if (i < start.line || i > end.line) continue;\n\n      let remarkStart = 0;\n      let remarkEnd = line.length;\n      let paddingLength = lineSplit.length;\n      if (i === start.line) {\n        remarkStart = start.column;\n        paddingLength += start.column;\n      } else if (i === end.line) {\n        remarkEnd = end.column;\n      }\n      const remarkLength = Math.max(remarkEnd - remarkStart, 1);\n\n      diagnosticMessage += \" \".repeat(paddingLength) + \"^\".repeat(remarkLength) + \"\\n\";\n    }\n\n    return diagnosticMessage;\n  }\n}\n\n// #endif\nexport enum GSErrorName {\n  PreprocessorError = \"PreprocessorError\",\n  CompilationError = \"CompilationError\",\n  ScannerError = \"ScannerError\"\n}\n","import { ENonTerminal, Terminal } from \"../parser/GrammarSymbol\";\n\nexport type StateActionTable = Map<number /** state ID */, ActionTable>;\nexport type ActionTable = Map<Terminal, ActionInfo>;\nexport type StateGotoTable = Map<number /** state ID */, GotoTable>;\nexport type GotoTable = Map<ENonTerminal, number /** state ID */>;\n\nexport enum EAction {\n  Shift = 0,\n  Reduce,\n  Accept\n}\n\nexport interface ActionInfo {\n  action: EAction;\n  target?: number;\n}\n","import { IBaseSymbol } from \"../../common/BaseSymbolTable\";\nimport { ASTNode } from \"../AST\";\nimport { SymbolDataType } from \"./SymbolDataType\";\n\nexport enum ESymbolType {\n  VAR,\n  FN,\n  STRUCT\n}\n\ntype SymbolAstNode =\n  | ASTNode.Initializer\n  | ASTNode.StructSpecifier\n  | ASTNode.FunctionDefinition\n  | ASTNode.ParameterDeclarator\n  | ASTNode.InitDeclaratorList\n  | ASTNode.VariableDeclaration;\n\nexport class SymbolInfo implements IBaseSymbol {\n  constructor(\n    public readonly ident: string,\n    public readonly symbolType: ESymbolType,\n    public readonly astNode?: SymbolAstNode,\n    public readonly dataType?: SymbolDataType\n  ) {}\n}\n","import { TokenType } from \"../common\";\n\nexport type Terminal = TokenType;\n\nexport enum ENonTerminal {\n  START = 2000,\n  // galacean\n  gs_shader_program,\n\n  // glsl\n  global_declaration,\n  variable_declaration,\n  array_specifier_list,\n  array_specifier,\n  ext_builtin_type_specifier_nonarray,\n  precision_specifier,\n  variable_identifier,\n  variable_identifier_node,\n  primary_expression,\n  postfix_expression,\n  integer_expression,\n  function_call,\n  function_call_generic,\n  function_call_header_no_parameters,\n  function_call_header_with_parameters,\n  function_call_parameter_list,\n  function_call_header,\n  function_identifier,\n  constructor_identifier,\n  unary_expression,\n  unary_operator,\n  multiplicative_expression,\n  additive_expression,\n  shift_expression,\n  relational_expression,\n  equality_expression,\n  and_expression,\n  inclusive_or_expression,\n  exclusive_or_expression,\n  logical_and_expression,\n  logical_xor_expression,\n  logical_or_expression,\n  conditional_expression,\n  assignment_expression,\n  assignment_operator,\n  expression,\n  integer_constant_expression,\n  integer_constant_expression_operator,\n  declaration,\n  function_prototype,\n  function_declarator,\n  function_header_with_parameters,\n  function_header,\n  function_parameter_list,\n  parameter_declarator,\n  parameter_declaration,\n  parameter_qualifier,\n  parameter_type_specifier,\n  init_declarator_list,\n  single_declaration,\n  fully_specified_type,\n  type_qualifier,\n  single_type_qualifier,\n  storage_qualifier,\n  precision_qualifier,\n  interpolation_qualifier,\n  invariant_qualifier,\n  type_specifier,\n  type_specifier_nonarray,\n  type_specifier_no_prec,\n  basic_type,\n  struct_specifier,\n  struct_declaration_list,\n  struct_declaration,\n  struct_declarator_list,\n  struct_declarator,\n  identifier_list,\n  decl_identifier,\n  initializer,\n  initializer_list,\n  declaration_statement,\n  simple_statement,\n  compound_statement_no_scope,\n  statement_with_scope,\n  compound_statement,\n  statement,\n  statement_list,\n  iteration_statement_no_new_scope,\n  expression_statement,\n  selection_statement,\n  selection_rest_statement,\n  condition,\n  conditionopt,\n  iteration_statement,\n  for_init_statement,\n  for_rest_statement,\n  jump_statement,\n  external_declaration,\n  function_definition,\n  field_selection,\n  bool_constant,\n  function_identifier_node,\n  typename_identifier_node,\n  scope_brace,\n  scope_end_brace,\n\n  _ignore\n}\n\nexport type GrammarSymbol = Terminal | ENonTerminal;\n\nexport type Derivation = GrammarSymbol[];\n","// #if _VERBOSE\nimport { BuiltinFunction, BuiltinVariable, NonGenericGalaceanType } from \"./builtin\";\n// #endif\nimport { CodeGenVisitor } from \"../codeGen\";\nimport { ENonTerminal } from \"./GrammarSymbol\";\nimport { BaseToken as Token } from \"../common/BaseToken\";\nimport { EKeyword, ETokenType, TokenType, ShaderRange, GalaceanDataType, TypeAny } from \"../common\";\nimport SematicAnalyzer from \"./SemanticAnalyzer\";\nimport { ShaderData } from \"./ShaderInfo\";\nimport { ESymbolType, FnSymbol, StructSymbol, VarSymbol } from \"./symbolTable\";\nimport { ParserUtils } from \"../ParserUtils\";\nimport { IParamInfo, NodeChild, StructProp, SymbolType } from \"./types\";\nimport { ClearableObjectPool, IPoolElement } from \"@galacean/engine\";\nimport { ShaderLabUtils } from \"../ShaderLabUtils\";\n\nexport abstract class TreeNode implements IPoolElement {\n  /** The non-terminal in grammar. */\n  nt: ENonTerminal;\n  private _children: NodeChild[];\n  private _location: ShaderRange;\n\n  get children() {\n    return this._children;\n  }\n\n  get location() {\n    return this._location;\n  }\n\n  set(loc: ShaderRange, children: NodeChild[], nt: ENonTerminal) {\n    this.nt = nt;\n    this._location = loc;\n    this._children = children;\n  }\n\n  dispose(): void {}\n\n  // Visitor pattern interface for code generation\n  codeGen(visitor: CodeGenVisitor) {\n    return visitor.defaultCodeGen(this.children);\n  }\n\n  semanticAnalyze(sa: SematicAnalyzer) {}\n}\n\nexport namespace ASTNode {\n  export type ASTNodePool = ClearableObjectPool<\n    { set: (loc: ShaderRange, children: NodeChild[]) => void } & IPoolElement & TreeNode\n  >;\n\n  export function _unwrapToken(node: NodeChild) {\n    if (node instanceof Token) {\n      return node;\n    }\n    throw \"not token\";\n  }\n\n  export function get(pool: ASTNodePool, sa: SematicAnalyzer, loc: ShaderRange, children: NodeChild[]) {\n    const node = pool.get();\n    node.set(loc, children);\n    node.semanticAnalyze(sa);\n    sa.semanticStack.push(node);\n  }\n\n  export class TrivialNode extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(TrivialNode);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal._ignore);\n    }\n  }\n\n  export class ScopeBrace extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(ScopeBrace);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.scope_brace);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      sa.newScope();\n    }\n  }\n\n  export class ScopeEndBrace extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(ScopeEndBrace);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.scope_end_brace);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      sa.dropScope();\n    }\n  }\n\n  export class JumpStatement extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(JumpStatement);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.jump_statement);\n    }\n\n    // #if _VERBOSE\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (ASTNode._unwrapToken(this.children![0]).type === EKeyword.RETURN) {\n        // TODO: check the equality of function return type declared and this type.\n      }\n    }\n    // #endif\n\n    override codeGen(visitor: CodeGenVisitor): string {\n      return visitor.visitJumpStatement(this);\n    }\n  }\n\n  // #if _VERBOSE\n  export class ConditionOpt extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(ConditionOpt);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.conditionopt);\n    }\n  }\n\n  export class ForRestStatement extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(ForRestStatement);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.for_rest_statement);\n    }\n  }\n\n  export class Condition extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(Condition);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.condition);\n    }\n  }\n\n  export class ForInitStatement extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(ForInitStatement);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.for_init_statement);\n    }\n  }\n\n  export class IterationStatement extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(IterationStatement);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.iteration_statement);\n    }\n  }\n\n  export class SelectionStatement extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(SelectionStatement);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.selection_statement);\n    }\n  }\n\n  export class ExpressionStatement extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(ExpressionStatement);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.expression_statement);\n    }\n  }\n  // #endif\n\n  export abstract class ExpressionAstNode extends TreeNode {\n    protected _type?: GalaceanDataType;\n    set type(t: GalaceanDataType | undefined) {\n      this._type = t;\n    }\n    get type() {\n      return this._type ?? TypeAny;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[], nt: ENonTerminal) {\n      super.set(loc, children, nt);\n      this._type = undefined;\n    }\n  }\n\n  // #if _VERBOSE\n  export class InitializerList extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(InitializerList);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.initializer_list);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      const init = this.children[0] as Initializer | InitializerList;\n      this.type = init.type;\n    }\n  }\n\n  export class Initializer extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(Initializer);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.initializer);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        this.type = (<AssignmentExpression>this.children[0]).type;\n      } else {\n        this.type = (<InitializerList>this.children[1]).type;\n      }\n    }\n  }\n  // #endif\n\n  export class SingleDeclaration extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(SingleDeclaration);\n\n    typeSpecifier: TypeSpecifier;\n    arraySpecifier?: ArraySpecifier;\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.single_declaration);\n      this.typeSpecifier = undefined;\n      this.arraySpecifier = undefined;\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      const fullyType = this.children[0] as FullySpecifiedType;\n      const id = this.children[1] as Token;\n      this.typeSpecifier = fullyType.typeSpecifier;\n\n      let sm: VarSymbol;\n      if (this.children.length === 2 || this.children.length === 4) {\n        const symbolType = new SymbolType(fullyType.type, fullyType.typeSpecifier.lexeme);\n        const initializer = this.children[3] as Initializer;\n\n        sm = new VarSymbol(id.lexeme, symbolType, false, initializer);\n      } else {\n        const arraySpecifier = this.children[2] as ArraySpecifier;\n        this.arraySpecifier = arraySpecifier;\n        const symbolType = new SymbolType(fullyType.type, fullyType.typeSpecifier.lexeme, arraySpecifier);\n        const initializer = this.children[4] as Initializer;\n\n        sm = new VarSymbol(id.lexeme, symbolType, false, initializer);\n      }\n      sa.symbolTable.insert(sm);\n    }\n\n    override codeGen(visitor: CodeGenVisitor): string {\n      return visitor.visitSingleDeclaration(this);\n    }\n  }\n\n  export class FullySpecifiedType extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(FullySpecifiedType);\n\n    get qualifierList() {\n      if (this.children.length > 1) {\n        return (<TypeQualifier>this.children[0]).qualifierList;\n      }\n    }\n\n    get typeSpecifier() {\n      return (this.children.length === 1 ? this.children[0] : this.children[1]) as TypeSpecifier;\n    }\n\n    get type() {\n      return this.typeSpecifier.type;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.fully_specified_type);\n    }\n  }\n\n  export class TypeQualifier extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(TypeQualifier);\n\n    qualifierList: EKeyword[];\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.type_qualifier);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length > 1) {\n        this.qualifierList = [\n          ...(<TypeQualifier>this.children[0]).qualifierList,\n          (<SingleTypeQualifier>this.children[1]).qualifier\n        ];\n      } else {\n        this.qualifierList = [(<SingleTypeQualifier>this.children[0]).qualifier];\n      }\n    }\n  }\n\n  export class SingleTypeQualifier extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(SingleTypeQualifier);\n\n    qualifier: EKeyword;\n    lexeme: string;\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.single_type_qualifier);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      const child = this.children[0];\n      if (child instanceof Token) {\n        this.qualifier = child.type as EKeyword;\n        this.lexeme = child.lexeme;\n      } else {\n        this.qualifier = (<BasicTypeQualifier>child).qualifier;\n        this.lexeme = (<BasicTypeQualifier>child).lexeme;\n      }\n    }\n  }\n\n  abstract class BasicTypeQualifier extends TreeNode {\n    get qualifier(): EKeyword {\n      return (<Token>this.children[0]).type as EKeyword;\n    }\n    get lexeme(): string {\n      return (<Token>this.children[0]).lexeme;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[], nt: ENonTerminal) {\n      super.set(loc, children, nt);\n    }\n  }\n\n  // #if _VERBOSE\n  export class StorageQualifier extends BasicTypeQualifier {\n    static pool = ShaderLabUtils.createObjectPool(StorageQualifier);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.storage_qualifier);\n    }\n  }\n\n  export class PrecisionQualifier extends BasicTypeQualifier {\n    static pool = ShaderLabUtils.createObjectPool(PrecisionQualifier);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.precision_qualifier);\n    }\n  }\n\n  export class InterpolationQualifier extends BasicTypeQualifier {\n    static pool = ShaderLabUtils.createObjectPool(InterpolationQualifier);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.interpolation_qualifier);\n    }\n  }\n\n  export class InvariantQualifier extends BasicTypeQualifier {\n    static pool = ShaderLabUtils.createObjectPool(InvariantQualifier);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.invariant_qualifier);\n    }\n  }\n  // #endif\n\n  export class TypeSpecifier extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(TypeSpecifier);\n\n    get type(): GalaceanDataType {\n      return (this.children![0] as TypeSpecifierNonArray).type;\n    }\n    get lexeme(): string {\n      return (this.children![0] as TypeSpecifierNonArray).lexeme;\n    }\n    get arraySize(): number {\n      return (this.children?.[1] as ArraySpecifier)?.size;\n    }\n\n    get isCustom() {\n      return typeof this.type === \"string\";\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.type_specifier);\n    }\n  }\n\n  export class ArraySpecifier extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(ArraySpecifier);\n\n    get size(): number | undefined {\n      const integerConstantExpr = this.children[1] as IntegerConstantExpression;\n      return integerConstantExpr.value;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.array_specifier);\n    }\n  }\n\n  export class IntegerConstantExpressionOperator extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(IntegerConstantExpressionOperator);\n\n    compute: (a: number, b: number) => number;\n    get lexeme(): string {\n      return (this.children[0] as Token).lexeme;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.integer_constant_expression_operator);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      const operator = this.children[0] as Token;\n      switch (operator.type) {\n        case ETokenType.PLUS:\n          this.compute = (a, b) => a + b;\n          break;\n        case ETokenType.DASH:\n          this.compute = (a, b) => a - b;\n          break;\n        case ETokenType.STAR:\n          this.compute = (a, b) => a * b;\n          break;\n        case ETokenType.SLASH:\n          this.compute = (a, b) => a / b;\n          break;\n        case ETokenType.PERCENT:\n          this.compute = (a, b) => a % b;\n          break;\n        default:\n          sa.error(operator.location, `not implemented operator ${operator.lexeme}`);\n      }\n    }\n  }\n\n  export class IntegerConstantExpression extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(IntegerConstantExpression);\n\n    value?: number;\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.integer_constant_expression);\n      this.value = undefined;\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        const child = this.children[0];\n        if (child instanceof Token) {\n          this.value = Number(child.lexeme);\n        }\n        // #if _VERBOSE\n        else {\n          const id = child as VariableIdentifier;\n          if (!id.symbolInfo) {\n            sa.error(id.location, \"Undeclared symbol:\", id.lexeme);\n          }\n          if (!ParserUtils.typeCompatible(EKeyword.INT, id.typeInfo)) {\n            sa.error(id.location, \"Invalid integer.\");\n            return;\n          }\n        }\n        // #endif\n      }\n    }\n  }\n\n  export class TypeSpecifierNonArray extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(TypeSpecifierNonArray);\n\n    type: GalaceanDataType;\n    lexeme: string;\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.type_specifier_nonarray);\n      const tt = children[0];\n      if (tt instanceof Token) {\n        this.type = tt.lexeme;\n        this.lexeme = tt.lexeme;\n      } else {\n        this.type = (tt as ExtBuiltinTypeSpecifierNonArray).type as GalaceanDataType;\n        this.lexeme = (tt as ExtBuiltinTypeSpecifierNonArray).lexeme;\n      }\n    }\n  }\n\n  export class ExtBuiltinTypeSpecifierNonArray extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(ExtBuiltinTypeSpecifierNonArray);\n\n    type: TokenType;\n    lexeme: string;\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.ext_builtin_type_specifier_nonarray);\n      const token = this.children[0] as Token;\n      this.type = token.type;\n      this.lexeme = token.lexeme;\n    }\n  }\n\n  export class InitDeclaratorList extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(InitDeclaratorList);\n\n    get typeInfo(): SymbolType {\n      if (this.children.length === 1) {\n        const singleDecl = this.children[0] as SingleDeclaration;\n        return new SymbolType(\n          singleDecl.typeSpecifier.type,\n          singleDecl.typeSpecifier.lexeme,\n          singleDecl.arraySpecifier\n        );\n      }\n\n      const initDeclList = this.children[0] as InitDeclaratorList;\n      return initDeclList.typeInfo;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.init_declarator_list);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      let sm: VarSymbol;\n      if (this.children.length === 3 || this.children.length === 5) {\n        const id = this.children[2] as Token;\n        sm = new VarSymbol(id.lexeme, this.typeInfo, false, this);\n        sa.symbolTable.insert(sm);\n      } else if (this.children.length === 4 || this.children.length === 6) {\n        const typeInfo = this.typeInfo;\n        const arraySpecifier = this.children[3] as ArraySpecifier;\n        // #if _VERBOSE\n        if (typeInfo.arraySpecifier && arraySpecifier) {\n          sa.error(arraySpecifier.location, \"Array of array is not supported.\");\n        }\n        // #endif\n        typeInfo.arraySpecifier = arraySpecifier;\n        const id = this.children[2] as Token;\n        sm = new VarSymbol(id.lexeme, typeInfo, false, this);\n        sa.symbolTable.insert(sm);\n      }\n    }\n  }\n\n  export class IdentifierList extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(IdentifierList);\n\n    get idList(): Token[] {\n      if (this.children.length === 2) {\n        return [this.children[1] as Token];\n      }\n      return [...(<IdentifierList>this.children[0]).idList, this.children[2] as Token];\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.identifier_list);\n    }\n  }\n\n  export class Declaration extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(Declaration);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.declaration);\n    }\n\n    override codeGen(visitor: CodeGenVisitor): string {\n      return visitor.visitDeclaration(this);\n    }\n  }\n\n  export class FunctionProtoType extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(FunctionProtoType);\n\n    private get declarator() {\n      return this.children[0] as FunctionDeclarator;\n    }\n\n    get ident() {\n      return this.declarator.ident;\n    }\n\n    get returnType() {\n      return this.declarator.returnType;\n    }\n\n    get parameterList() {\n      return this.declarator.parameterInfoList;\n    }\n\n    get paramSig() {\n      return this.declarator.paramSig;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.function_prototype);\n    }\n\n    override codeGen(visitor: CodeGenVisitor): string {\n      return visitor.visitFunctionProtoType(this);\n    }\n  }\n\n  export class FunctionDeclarator extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(FunctionDeclarator);\n\n    private get header() {\n      return this.children[0] as FunctionHeader;\n    }\n\n    private get parameterList() {\n      return this.children[1] as FunctionParameterList | undefined;\n    }\n\n    get ident() {\n      return this.header.ident;\n    }\n\n    get returnType() {\n      return this.header.returnType;\n    }\n\n    get parameterInfoList() {\n      return this.parameterList?.parameterInfoList;\n    }\n\n    get paramSig() {\n      return this.parameterList?.paramSig;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.function_declarator);\n    }\n  }\n\n  export class FunctionHeader extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(FunctionHeader);\n\n    get ident() {\n      return this.children[1] as Token;\n    }\n    get returnType() {\n      return this.children[0] as FullySpecifiedType;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.function_header);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      sa.newScope();\n    }\n\n    override codeGen(visitor: CodeGenVisitor): string {\n      return visitor.visitFunctionHeader(this);\n    }\n  }\n\n  export class FunctionParameterList extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(FunctionParameterList);\n\n    get parameterInfoList(): IParamInfo[] {\n      if (this.children.length === 1) {\n        const decl = this.children[0] as ParameterDeclaration;\n        return [{ ident: decl.ident, typeInfo: decl.typeInfo, astNode: decl }];\n      }\n      const list = this.children[0] as FunctionParameterList;\n      const decl = this.children[2] as ParameterDeclaration;\n      return [...list.parameterInfoList, { ident: decl.ident, typeInfo: decl.typeInfo, astNode: decl }];\n    }\n\n    get paramSig(): GalaceanDataType[] {\n      if (this.children.length === 1) {\n        const decl = this.children[0] as ParameterDeclaration;\n        return [decl.typeInfo.type];\n      } else {\n        const list = this.children[0] as FunctionParameterList;\n        const decl = this.children[2] as ParameterDeclaration;\n        return list.paramSig.concat([decl.typeInfo.type]);\n      }\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.function_parameter_list);\n    }\n\n    override codeGen(visitor: CodeGenVisitor): string {\n      return visitor.visitFunctionParameterList(this);\n    }\n  }\n\n  export class ParameterDeclaration extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(ParameterDeclaration);\n\n    get typeQualifier() {\n      if (this.children.length === 2) return this.children[0] as TypeQualifier;\n    }\n\n    private get parameterDeclarator() {\n      if (this.children.length === 1) return this.children[0] as ParameterDeclarator;\n      return this.children[1] as ParameterDeclarator;\n    }\n\n    get typeInfo() {\n      return this.parameterDeclarator.typeInfo;\n    }\n\n    get ident() {\n      return this.parameterDeclarator.ident;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.parameter_declaration);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      let declarator: ParameterDeclarator;\n      if (this.children.length === 1) {\n        declarator = this.children[0] as ParameterDeclarator;\n      } else {\n        declarator = this.children[1] as ParameterDeclarator;\n      }\n      const varSymbol = new VarSymbol(declarator.ident.lexeme, declarator.typeInfo, false, this);\n      sa.symbolTable.insert(varSymbol);\n    }\n  }\n\n  export class ParameterDeclarator extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(ParameterDeclarator);\n\n    get ident() {\n      return this.children[1] as Token;\n    }\n\n    get typeInfo(): SymbolType {\n      const typeSpecifier = this.children[0] as TypeSpecifier;\n      const arraySpecifier = this.children[2] as ArraySpecifier;\n      return new SymbolType(typeSpecifier.type, typeSpecifier.lexeme, arraySpecifier);\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.parameter_declarator);\n    }\n  }\n\n  // #if _VERBOSE\n  export class SimpleStatement extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(SimpleStatement);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.simple_statement);\n    }\n  }\n\n  export class CompoundStatement extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(CompoundStatement);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.compound_statement);\n    }\n  }\n  // #endif\n\n  export class CompoundStatementNoScope extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(CompoundStatementNoScope);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.compound_statement_no_scope);\n    }\n  }\n\n  // #if _VERBOSE\n  export class Statement extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(Statement);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.statement);\n    }\n  }\n  // #endif\n\n  export class StatementList extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(StatementList);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.statement_list);\n    }\n\n    override codeGen(visitor: CodeGenVisitor): string {\n      return visitor.visitStatementList(this);\n    }\n  }\n\n  export class FunctionDefinition extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(FunctionDefinition);\n\n    get protoType() {\n      return this.children[0] as FunctionProtoType;\n    }\n\n    get statements() {\n      return this.children[1] as CompoundStatementNoScope;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.function_definition);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      sa.dropScope();\n      const sm = new FnSymbol(this.protoType.ident.lexeme, this);\n      sa.symbolTable.insert(sm);\n    }\n\n    override codeGen(visitor: CodeGenVisitor): string {\n      return visitor.visitFunctionDefinition(this);\n    }\n  }\n\n  export class FunctionCall extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(FunctionCall);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.function_call);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      this.type = (this.children[0] as FunctionCallGeneric).type;\n    }\n\n    override codeGen(visitor: CodeGenVisitor): string {\n      return visitor.visitFunctionCall(this);\n    }\n  }\n\n  export class FunctionCallGeneric extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(FunctionCallGeneric);\n\n    fnSymbol: FnSymbol | StructSymbol | undefined;\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.function_call_generic);\n      this.fnSymbol = undefined;\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      const functionIdentifier = this.children[0] as FunctionIdentifier;\n      if (functionIdentifier.isBuiltin) {\n        this.type = functionIdentifier.ident;\n      } else {\n        const fnIdent = <string>functionIdentifier.ident;\n\n        let paramSig: NonGenericGalaceanType[] | undefined;\n        if (this.children.length === 4) {\n          const paramList = this.children[2];\n          if (paramList instanceof FunctionCallParameterList) {\n            paramSig = paramList.paramSig as any;\n          }\n        }\n        // #if _VERBOSE\n        const builtinFn = BuiltinFunction.getFn(fnIdent, ...(paramSig ?? []));\n        if (builtinFn) {\n          this.type = BuiltinFunction.getReturnType(builtinFn.fun, builtinFn.genType);\n          return;\n        }\n        // #endif\n\n        const fnSymbol = sa.symbolTable.lookup({ ident: fnIdent, symbolType: ESymbolType.FN, signature: paramSig });\n        if (!fnSymbol) {\n          // #if _VERBOSE\n          sa.error(this.location, \"No overload function type found: \", functionIdentifier.ident);\n          // #endif\n          return;\n        }\n        this.type = fnSymbol?.dataType?.type;\n        this.fnSymbol = fnSymbol as FnSymbol;\n      }\n    }\n  }\n\n  export class FunctionCallParameterList extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(FunctionCallParameterList);\n\n    get paramSig(): GalaceanDataType[] | undefined {\n      if (this.children.length === 1) {\n        const expr = this.children[0] as AssignmentExpression;\n        if (expr.type == undefined) return [TypeAny];\n        return [expr.type];\n      } else {\n        const list = this.children[0] as FunctionCallParameterList;\n        const decl = this.children[2] as AssignmentExpression;\n        if (list.paramSig == undefined || decl.type == undefined) {\n          return [TypeAny];\n        } else {\n          return list.paramSig.concat([decl.type]);\n        }\n      }\n    }\n\n    get paramNodes(): AssignmentExpression[] {\n      if (this.children.length === 1) {\n        return [this.children[0] as AssignmentExpression];\n      } else {\n        const list = this.children[0] as FunctionCallParameterList;\n        const decl = this.children[2] as AssignmentExpression;\n\n        return list.paramNodes.concat([decl]);\n      }\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.function_call_parameter_list);\n    }\n  }\n\n  export class PrecisionSpecifier extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(PrecisionSpecifier);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.precision_specifier);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      sa.shaderData.globalPrecisions.push(this);\n    }\n  }\n\n  export class FunctionIdentifier extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(FunctionIdentifier);\n\n    get ident() {\n      const ty = this.children[0] as TypeSpecifier;\n      return ty.type;\n    }\n\n    get lexeme() {\n      const ty = this.children[0] as TypeSpecifier;\n      return ty.lexeme;\n    }\n\n    get isBuiltin() {\n      return typeof this.ident !== \"string\";\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.function_identifier);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {}\n\n    override codeGen(visitor: CodeGenVisitor): string {\n      return visitor.visitFunctionIdentifier(this);\n    }\n  }\n\n  export class AssignmentExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(AssignmentExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.assignment_expression);\n    }\n\n    // #if _VERBOSE\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        const expr = this.children[0] as ConditionalExpression;\n        this.type = expr.type ?? TypeAny;\n      } else {\n        const expr = this.children[2] as AssignmentExpression;\n        this.type = expr.type ?? TypeAny;\n      }\n    }\n    // #endif\n  }\n\n  // #if _VERBOSE\n  export class AssignmentOperator extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(AssignmentOperator);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.assignment_operator);\n    }\n  }\n  // #endif\n\n  export class Expression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(Expression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.expression);\n    }\n\n    // #if _VERBOSE\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        const expr = this.children[0] as AssignmentExpression;\n        this.type = expr.type;\n      } else {\n        const expr = this.children[2] as AssignmentExpression;\n        this.type = expr.type;\n      }\n    }\n    // #endif\n  }\n\n  export class PrimaryExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(PrimaryExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.primary_expression);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        const id = this.children[0];\n        if (id instanceof VariableIdentifier) {\n          this.type = id.typeInfo ?? TypeAny;\n        } else {\n          switch ((<Token>id).type) {\n            case ETokenType.INT_CONSTANT:\n              this._type = EKeyword.INT;\n              break;\n            case ETokenType.FLOAT_CONSTANT:\n              this.type = EKeyword.FLOAT;\n              break;\n            case EKeyword.TRUE:\n            case EKeyword.FALSE:\n              this.type = EKeyword.BOOL;\n              break;\n          }\n        }\n      } else {\n        const expression = this.children[1] as Expression;\n        this.type = expression.type;\n      }\n    }\n  }\n\n  export class PostfixExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(PostfixExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.postfix_expression);\n      if (this.children.length === 1) {\n        const child = this.children[0] as PrimaryExpression | FunctionCall;\n        this.type = child.type;\n      }\n    }\n\n    override codeGen(visitor: CodeGenVisitor): string {\n      return visitor.visitPostfixExpression(this);\n    }\n  }\n\n  // #if _VERBOSE\n  export class UnaryOperator extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(UnaryOperator);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.unary_operator);\n    }\n  }\n  // #endif\n\n  // #if _VERBOSE\n  export class UnaryExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(UnaryExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.unary_expression);\n      this.type = (this.children[0] as PostfixExpression).type;\n    }\n  }\n  // #endif\n\n  // #if _VERBOSE\n  export class MultiplicativeExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(MultiplicativeExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.multiplicative_expression);\n      if (this.children.length === 1) {\n        this.type = (this.children[0] as UnaryExpression).type;\n      } else {\n        const exp1 = this.children[0] as MultiplicativeExpression;\n        const exp2 = this.children[2] as UnaryExpression;\n        if (exp1.type === exp2.type) {\n          this.type = exp1.type;\n        }\n      }\n    }\n  }\n  // #endif\n\n  // #if _VERBOSE\n  export class AdditiveExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(AdditiveExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.additive_expression);\n      if (this.children.length === 1) {\n        this.type = (this.children[0] as MultiplicativeExpression).type;\n      } else {\n        const exp1 = this.children[0] as AdditiveExpression;\n        const exp2 = this.children[2] as MultiplicativeExpression;\n        if (exp1.type === exp2.type) {\n          this.type = exp1.type;\n        }\n      }\n    }\n  }\n  // #endif\n\n  // #if _VERBOSE\n  export class ShiftExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(ShiftExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.shift_expression);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      const expr = this.children[0] as ExpressionAstNode;\n      this.type = expr.type;\n    }\n  }\n  // #endif\n\n  // #if _VERBOSE\n  export class RelationalExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(RelationalExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.relational_expression);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        this.type = (<ShiftExpression>this.children[0]).type;\n      } else {\n        this.type = EKeyword.BOOL;\n      }\n    }\n  }\n  // #endif\n\n  // #if _VERBOSE\n  export class EqualityExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(EqualityExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.equality_expression);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        this.type = (<RelationalExpression>this.children[0]).type;\n      } else {\n        this.type = EKeyword.BOOL;\n      }\n    }\n  }\n  // #endif\n\n  // #if _VERBOSE\n  export class AndExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(AndExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.and_expression);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        this.type = (<AndExpression>this.children[0]).type;\n      } else {\n        this.type = EKeyword.UINT;\n      }\n    }\n  }\n  // #endif\n\n  // #if _VERBOSE\n  export class ExclusiveOrExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(ExclusiveOrExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.exclusive_or_expression);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        this.type = (<AndExpression>this.children[0]).type;\n      } else {\n        this.type = EKeyword.UINT;\n      }\n    }\n  }\n  // #endif\n\n  // #if _VERBOSE\n  export class InclusiveOrExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(InclusiveOrExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.inclusive_or_expression);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        this.type = (<ExclusiveOrExpression>this.children[0]).type;\n      } else {\n        this.type = EKeyword.UINT;\n      }\n    }\n  }\n  // #endif\n\n  // #if _VERBOSE\n  export class LogicalAndExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(LogicalAndExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.logical_and_expression);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        this.type = (<InclusiveOrExpression>this.children[0]).type;\n      } else {\n        this.type = EKeyword.BOOL;\n      }\n    }\n  }\n  // #endif\n\n  // #if _VERBOSE\n  export class LogicalXorExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(LogicalXorExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.logical_xor_expression);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        this.type = (<LogicalAndExpression>this.children[0]).type;\n      } else {\n        this.type = EKeyword.BOOL;\n      }\n    }\n  }\n  // #endif\n\n  // #if _VERBOSE\n  export class LogicalOrExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(LogicalOrExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.logical_or_expression);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        this.type = (<LogicalXorExpression>this.children[0]).type;\n      } else {\n        this.type = EKeyword.BOOL;\n      }\n    }\n  }\n  // #endif\n\n  // #if _VERBOSE\n  export class ConditionalExpression extends ExpressionAstNode {\n    static pool = ShaderLabUtils.createObjectPool(ConditionalExpression);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.conditional_expression);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 1) {\n        this.type = (<LogicalOrExpression>this.children[0]).type;\n      }\n    }\n  }\n  // #endif\n\n  export class StructSpecifier extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(StructSpecifier);\n\n    ident?: Token;\n\n    get propList(): StructProp[] {\n      const declList = (this.children.length === 6 ? this.children[3] : this.children[2]) as StructDeclarationList;\n      return declList.propList;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.struct_specifier);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      if (this.children.length === 6) {\n        this.ident = this.children[1] as Token;\n        sa.symbolTable.insert(new StructSymbol(this.ident.lexeme, this));\n      }\n    }\n  }\n\n  export class StructDeclarationList extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(StructDeclarationList);\n\n    get propList(): StructProp[] {\n      if (this.children.length === 1) {\n        return (<StructDeclaration>this.children[0]).propList;\n      }\n      const list = this.children[0] as StructDeclarationList;\n      const decl = this.children[1] as StructDeclaration;\n      return [list.propList, decl.propList].flat();\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.struct_declaration_list);\n    }\n  }\n\n  export class StructDeclaration extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(StructDeclaration);\n\n    get typeSpecifier() {\n      if (this.children.length === 3) {\n        return this.children[0] as TypeSpecifier;\n      }\n      return this.children[1] as TypeSpecifier;\n    }\n\n    get declaratorList() {\n      if (this.children.length === 3) {\n        return this.children[1] as StructDeclaratorList;\n      }\n      return this.children[2] as StructDeclaratorList;\n    }\n\n    get propList(): StructProp[] {\n      const ret: StructProp[] = [];\n      for (let i = 0; i < this.declaratorList.declaratorList.length; i++) {\n        const declarator = this.declaratorList.declaratorList[i];\n        const typeInfo = new SymbolType(this.typeSpecifier.type, this.typeSpecifier.lexeme, declarator.arraySpecifier);\n        const prop = new StructProp(typeInfo, declarator.ident);\n        ret.push(prop);\n      }\n      return ret;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.struct_declaration);\n    }\n  }\n\n  export class StructDeclaratorList extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(StructDeclaratorList);\n\n    get declaratorList(): StructDeclarator[] {\n      if (this.children.length === 1) {\n        return [this.children[0] as StructDeclarator];\n      } else {\n        const list = this.children[0] as StructDeclaratorList;\n        return [...list.declaratorList, <StructDeclarator>this.children[1]];\n      }\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.struct_declarator_list);\n    }\n  }\n\n  export class StructDeclarator extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(StructDeclarator);\n\n    get ident() {\n      return this.children[0] as Token;\n    }\n\n    get arraySpecifier(): ArraySpecifier | undefined {\n      return this.children[1] as ArraySpecifier;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.struct_declarator);\n    }\n  }\n\n  export class VariableDeclaration extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(VariableDeclaration);\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.variable_declaration);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      const type = this.children[0] as FullySpecifiedType;\n      const ident = this.children[1] as Token;\n      let sm: VarSymbol;\n      sm = new VarSymbol(ident.lexeme, new SymbolType(type.type, type.typeSpecifier.lexeme), true, this);\n\n      sa.symbolTable.insert(sm);\n    }\n\n    override codeGen(visitor: CodeGenVisitor): string {\n      return visitor.visitGlobalVariableDeclaration(this);\n    }\n  }\n\n  export class VariableIdentifier extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(VariableIdentifier);\n\n    symbolInfo:\n      | VarSymbol\n      // #if _VERBOSE\n      | BuiltinVariable\n      // #endif\n      | null;\n\n    get lexeme(): string {\n      return (<Token>this.children[0]).lexeme;\n    }\n\n    get typeInfo(): GalaceanDataType {\n      if (this.symbolInfo instanceof VarSymbol) return this.symbolInfo.dataType.type;\n      return this.symbolInfo?.type;\n    }\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.variable_identifier);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      const token = this.children[0] as Token;\n\n      // #if _VERBOSE\n      const builtinVar = BuiltinVariable.getVar(token.lexeme);\n      if (builtinVar) {\n        this.symbolInfo = builtinVar;\n        return;\n      }\n      // #endif\n\n      this.symbolInfo = sa.symbolTable.lookup({ ident: token.lexeme, symbolType: ESymbolType.VAR }) as VarSymbol;\n      // #if _VERBOSE\n      if (!this.symbolInfo) {\n        sa.error(this.location, \"undeclared identifier:\", token.lexeme);\n      }\n      // #endif\n    }\n\n    override codeGen(visitor: CodeGenVisitor): string {\n      return visitor.visitVariableIdentifier(this);\n    }\n  }\n\n  export class GLShaderProgram extends TreeNode {\n    static pool = ShaderLabUtils.createObjectPool(GLShaderProgram);\n\n    shaderData: ShaderData;\n\n    override set(loc: ShaderRange, children: NodeChild[]) {\n      super.set(loc, children, ENonTerminal.gs_shader_program);\n    }\n\n    override semanticAnalyze(sa: SematicAnalyzer): void {\n      this.shaderData = sa.shaderData;\n      this.shaderData.symbolTable = sa.symbolTable._scope;\n    }\n  }\n}\n","export enum EPpToken {\n  id,\n  line_remain,\n  chunk,\n  int_constant,\n  string_const,\n  /** \\>> */\n  right_op,\n  /** << */\n  left_op,\n  left_paren,\n  right_paren,\n  /** \\>= */\n  ge,\n  /** <= */\n  le,\n  /** == */\n  eq,\n  /** != */\n  neq,\n  /** && */\n  and,\n  /** || */\n  or,\n  /** < */\n  left_angle,\n  /** \\> */\n  right_angle,\n  /** \\* */\n  star,\n  /** + */\n  plus,\n  /** \\- */\n  dash,\n  /** ! */\n  bang,\n  /** \\/ */\n  slash,\n  /** % */\n  percent,\n\n  EOF = 100\n}\n\nexport enum EPpKeyword {\n  define = 101,\n  undef,\n  if,\n  ifdef,\n  ifndef,\n  else,\n  elif,\n  endif,\n  include,\n\n  defined\n}\n\nexport const PpKeyword = new Map<string, EPpKeyword>([\n  [\"#define\", EPpKeyword.define],\n  [\"#undef\", EPpKeyword.undef],\n  [\"#if\", EPpKeyword.if],\n  [\"#ifdef\", EPpKeyword.ifdef],\n  [\"#ifndef\", EPpKeyword.ifndef],\n  [\"#else\", EPpKeyword.else],\n  [\"#elif\", EPpKeyword.elif],\n  [\"#endif\", EPpKeyword.endif],\n  [\"#include\", EPpKeyword.include],\n  [\"defined\", EPpKeyword.defined]\n]);\n\nexport type PpConstant = boolean | number;\n","export enum EShaderStage {\n  VERTEX,\n  FRAGMENT,\n  ALL\n}\n","import { IPoolElement } from \"@galacean/engine\";\n\nexport class ShaderPosition implements IPoolElement {\n  index: number;\n  // #if _VERBOSE\n  line: number;\n  column: number;\n  // #endif\n\n  set(\n    index: number,\n    // #if _VERBOSE\n    line: number,\n    column: number\n    // #endif\n  ) {\n    this.index = index;\n    // #if _VERBOSE\n    this.line = line;\n    this.column = column;\n    // #endif\n  }\n\n  dispose(): void {\n    this.index = 0;\n    // #if _VERBOSE\n    this.line = 0;\n    this.column = 0;\n    // #endif\n  }\n}\n","function _instanceof(left, right) {\n    if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n        return !!right[Symbol.hasInstance](left);\n    } else return left instanceof right;\n}\nexport { _instanceof as _ };\n","import { ClearableObjectPool, IPoolElement } from \"@galacean/engine\";\nimport { GSErrorName } from \"./GSError\";\nimport { ShaderRange } from \"./common/ShaderRange\";\nimport { ShaderPosition } from \"./common/ShaderPosition\";\n// #if _VERBOSE\nimport { GSError } from \"./GSError\";\n// #endif\n\nexport class ShaderLabUtils {\n  private static _shaderLabObjectPoolSet: ClearableObjectPool<IPoolElement>[] = [];\n\n  static createObjectPool<T extends IPoolElement>(type: new () => T) {\n    const pool = new ClearableObjectPool<T>(type);\n    ShaderLabUtils._shaderLabObjectPoolSet.push(pool);\n    return pool;\n  }\n\n  static clearAllShaderLabObjectPool() {\n    for (let i = 0, n = ShaderLabUtils._shaderLabObjectPoolSet.length; i < n; i++) {\n      ShaderLabUtils._shaderLabObjectPoolSet[i].clear();\n    }\n  }\n\n  static createGSError(\n    message: string,\n    errorName: GSErrorName,\n    source: string,\n    location: ShaderRange | ShaderPosition,\n    file?: string\n  ): Error {\n    // #if _VERBOSE\n    return new GSError(errorName, message, location, source, file);\n    // #else\n    return new Error(`[${errorName}]: ${message}`);\n    // #endif\n  }\n}\n","import { ETokenType } from \"./types\";\nimport { ShaderRange, ShaderPosition } from \".\";\nimport { ShaderLab } from \"../ShaderLab\";\nimport { IPoolElement } from \"@galacean/engine\";\nimport { ShaderLabUtils } from \"../ShaderLabUtils\";\n\nexport class BaseToken<T extends number = number> implements IPoolElement {\n  static pool = ShaderLabUtils.createObjectPool(BaseToken);\n\n  type: T;\n  lexeme: string;\n  location: ShaderRange;\n\n  set(type: T, lexeme: string, start?: ShaderPosition);\n  set(type: T, lexeme: string, location?: ShaderRange);\n  set(type: T, lexeme: string, arg?: ShaderRange | ShaderPosition) {\n    this.type = type;\n    this.lexeme = lexeme;\n    if (arg) {\n      if (arg instanceof ShaderRange) {\n        this.location = arg as ShaderRange;\n      } else {\n        const end = ShaderLab.createPosition(\n          arg.index + lexeme.length,\n          // #if _VERBOSE\n          arg.line,\n          arg.column + lexeme.length\n          // #endif\n        );\n        this.location = ShaderLab.createRange(arg, end);\n      }\n    }\n  }\n\n  dispose(): void {}\n}\n\nexport const EOF = new BaseToken();\nEOF.set(ETokenType.EOF, \"/EOF\");\n","import { ETokenType, TokenType } from \"../common/types\";\n\nexport default class LexerUtils {\n  static numRegex = /\\d/;\n  static letterRegex = /\\w/;\n  static alphaRegex = /[a-zA-Z_]/;\n  static numOrLetterRegex = /(\\d|\\w)/;\n\n  static isNum(char: string) {\n    return this.numRegex.test(char);\n  }\n\n  static isLetter(char: string) {\n    return this.letterRegex.test(char);\n  }\n\n  static isAlpha(char: string) {\n    return this.alphaRegex.test(char);\n  }\n\n  static isNumOrLetter(char: string) {\n    return this.numOrLetterRegex.test(char);\n  }\n\n  static isKeyword(tt: TokenType) {\n    return tt < ETokenType.ID;\n  }\n}\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { ETokenType, ShaderRange, ShaderPosition } from \".\";\nimport { GSErrorName } from \"../GSError\";\nimport { ShaderLab } from \"../ShaderLab\";\nimport { BaseToken } from \"./BaseToken\";\nimport { ShaderLabUtils } from \"../ShaderLabUtils\";\n\nexport type OnToken = (token: BaseToken, scanner: BaseScanner) => void;\n\n/**\n * @internal\n */\nexport default class BaseScanner {\n  private static _spaceCharsWithBreak = [\" \", \"\\t\", \"\\n\"];\n  private static _spaceChars = [\" \", \"\\t\"];\n  private static _checkIsIn(checked: string, chars: string[]): boolean {\n    for (let i = 0; i < chars.length; i++) {\n      if (checked === chars[i]) {\n        return true;\n      }\n      continue;\n    }\n    return false;\n  }\n\n  protected _currentIndex = 0;\n  protected _source: string;\n\n  // #if _VERBOSE\n  protected _column = 0;\n  protected _line = 0;\n  // #endif\n\n  get current(): number {\n    return this._currentIndex;\n  }\n\n  get source(): string {\n    return this._source;\n  }\n\n  getCurPosition(): ShaderPosition {\n    return ShaderLab.createPosition(\n      this._currentIndex,\n      // #if _VERBOSE\n      this._line,\n      this._column\n      // #endif\n    );\n  }\n\n  // #if _VERBOSE\n  get line() {\n    return this._line;\n  }\n\n  get column() {\n    return this._column;\n  }\n  // #endif\n\n  protected readonly _keywordsMap: Map<string, number>;\n\n  constructor(source: string, kws: Map<string, number> = new Map()) {\n    this._source = source;\n    this._keywordsMap = kws;\n  }\n\n  isEnd(): boolean {\n    return this._currentIndex >= this._source.length;\n  }\n\n  getCurChar(): string {\n    return this._source[this._currentIndex];\n  }\n\n  advance(count = 1): void {\n    for (let i = 0; i < count; i++) {\n      this._advance();\n    }\n  }\n\n  _advance(): void {\n    if (this.isEnd()) {\n      return;\n    }\n\n    // #if _VERBOSE\n    if (this.getCurChar() === \"\\n\") {\n      this._line += 1;\n      this._column = 0;\n    } else {\n      this._column += 1;\n    }\n    // #endif\n\n    this._currentIndex++;\n  }\n\n  skipSpace(includeLineBreak: boolean): void {\n    const spaceChars = includeLineBreak ? BaseScanner._spaceCharsWithBreak : BaseScanner._spaceChars;\n    let curChar = this.getCurChar();\n\n    while (BaseScanner._checkIsIn(curChar, spaceChars)) {\n      this._advance();\n      curChar = this.getCurChar();\n    }\n  }\n\n  skipCommentsAndSpace(): ShaderRange | undefined {\n    this.skipSpace(true);\n    if (this.peek(2) === \"//\") {\n      const start = this.getCurPosition();\n      this.advance(2);\n      // single line comments\n      while (this.getCurChar() !== \"\\n\") this._advance();\n      this.skipCommentsAndSpace();\n      return ShaderLab.createRange(start, this.getCurPosition());\n    } else if (this.peek(2) === \"/*\") {\n      const start = this.getCurPosition();\n      this.advance(2);\n      //  multi-line comments\n      while (this.peek(2) !== \"*/\" && !this.isEnd()) this._advance();\n      this.advance(2);\n      this.skipCommentsAndSpace();\n      return ShaderLab.createRange(start, this.getCurPosition());\n    }\n  }\n\n  peek(to: number): string {\n    const offset = this._currentIndex;\n    return this._source.substring(offset, offset + to);\n  }\n\n  scanText(text: string) {\n    this.skipCommentsAndSpace();\n    const peek = this.peek(text.length);\n    if (peek !== text) {\n      this.throwError(this.getCurPosition(), `Expect text \"${text}\", but got \"${peek}\"`);\n    }\n    this.advance(text.length);\n  }\n\n  throwError(pos: ShaderPosition | ShaderRange, ...msgs: any[]) {\n    const error = ShaderLabUtils.createGSError(msgs.join(\" \"), GSErrorName.ScannerError, this._source, pos);\n    throw error;\n  }\n\n  scanPairedText(left: string, right: string, balanced = false, skipLeading = false) {\n    if (!skipLeading) {\n      this.scanText(left);\n    }\n    const start = this._currentIndex;\n    let level = balanced ? 1 : 0;\n    while (this.peek(right.length) !== right || level !== 0) {\n      if (this.isEnd()) return;\n      if (balanced) {\n        if (this.peek(left.length) === left) {\n          level += 1;\n          this.advance(left.length);\n          continue;\n        } else if (this.peek(right.length) === right) {\n          level -= 1;\n          if (level === 0) break;\n          this.advance(right.length);\n          continue;\n        }\n      }\n      this.advance(right.length);\n    }\n    this.advance(right.length);\n    return this._source.substring(start, this._currentIndex - right.length);\n  }\n\n  scanToken(onToken?: OnToken, splitCharRegex = /\\w/) {\n    this.skipCommentsAndSpace();\n    const start = this.getCurPosition();\n    if (this.isEnd()) return;\n    while (splitCharRegex.test(this.getCurChar()) && !this.isEnd()) this._advance();\n    const end = this.getCurPosition();\n\n    if (start.index === end.index) {\n      this._advance();\n      const token = BaseToken.pool.get();\n      token.set(ETokenType.NOT_WORD, this._source[start.index], start);\n      onToken?.(token, this);\n      return token;\n    }\n\n    const lexeme = this._source.substring(start.index, end.index);\n    const tokenType = this._keywordsMap.get(lexeme) ?? ETokenType.ID;\n    const range = ShaderLab.createRange(start, end);\n    const token = BaseToken.pool.get();\n    token.set(tokenType, lexeme, range);\n    onToken?.(token, this);\n    return token;\n  }\n}\n","import { ShaderRange, ShaderPosition } from \"../common\";\nimport { ETokenType, KeywordTable } from \"../common\";\nimport { EOF, BaseToken } from \"../common/BaseToken\";\nimport LexerUtils from \"./Utils\";\nimport BaseScanner from \"../common/BaseScanner\";\nimport { ShaderLab } from \"../ShaderLab\";\n\n/**\n * The Lexer of ShaderLab Compiler\n */\nexport class Lexer extends BaseScanner {\n  reset(source: string) {\n    this._source = source;\n    this._currentIndex = 0;\n    // #if _VERBOSE\n    this._line = this._column = 0;\n    // #endif\n  }\n\n  *tokenize() {\n    while (!this.isEnd()) {\n      yield this.scanToken();\n    }\n    return EOF;\n  }\n\n  override skipSpace() {\n    while (/\\s/.test(this.getCurChar())) {\n      this.advance();\n    }\n  }\n\n  override scanToken(): BaseToken {\n    this.skipCommentsAndSpace();\n    if (this.isEnd()) {\n      return EOF;\n    }\n\n    if (LexerUtils.isAlpha(this.getCurChar())) {\n      return this._scanWord();\n    }\n    if (LexerUtils.isNum(this.getCurChar())) {\n      return this._scanNum();\n    }\n\n    const start = this._getPosition();\n    const token = BaseToken.pool.get();\n\n    switch (this.getCurChar()) {\n      case \"<\":\n        this.advance();\n        if (this.getCurChar() === \"<\") {\n          this.advance();\n          if (this.getCurChar() === \"=\") {\n            this.advance();\n            token.set(ETokenType.LEFT_ASSIGN, \"<<=\", start);\n            break;\n          }\n          token.set(ETokenType.LEFT_OP, \"<<\", start);\n          break;\n        } else if (this.getCurChar() === \"=\") {\n          this.advance();\n          token.set(ETokenType.LE_OP, \"<=\", start);\n          break;\n        }\n        token.set(ETokenType.LEFT_ANGLE, \"<\", start);\n        break;\n\n      case \">\":\n        this.advance();\n        if (this.getCurChar() === \">\") {\n          this.advance();\n          if (this.getCurChar() === \"=\") {\n            this.advance();\n            token.set(ETokenType.RIGHT_ASSIGN, \">>=\", start);\n            break;\n          }\n          token.set(ETokenType.RIGHT_OP, \">>\", start);\n          break;\n        } else if (this.getCurChar() === \"=\") {\n          this.advance();\n          token.set(ETokenType.GE_OP, \">=\", start);\n          break;\n        }\n        token.set(ETokenType.RIGHT_ANGLE, \">\", start);\n        break;\n\n      case \"+\":\n        this.advance();\n        if (this.getCurChar() === \"+\") {\n          this.advance();\n          token.set(ETokenType.INC_OP, \"++\", start);\n          break;\n        } else if (this.getCurChar() === \"=\") {\n          this.advance();\n          token.set(ETokenType.ADD_ASSIGN, \"+=\", start);\n          break;\n        }\n        token.set(ETokenType.PLUS, \"+\", start);\n        break;\n\n      case \"-\":\n        this.advance();\n        if (this.getCurChar() === \"-\") {\n          this.advance();\n          token.set(ETokenType.DEC_OP, \"--\", start);\n          break;\n        } else if (this.getCurChar() === \"=\") {\n          this.advance();\n          token.set(ETokenType.SUB_ASSIGN, \"-=\", start);\n          break;\n        }\n        token.set(ETokenType.DASH, \"-\", start);\n        break;\n\n      case \"=\":\n        this.advance();\n        if (this.getCurChar() === \"=\") {\n          this.advance();\n          token.set(ETokenType.EQ_OP, \"==\", start);\n          break;\n        }\n        token.set(ETokenType.EQUAL, \"=\", start);\n        break;\n\n      case \"!\":\n        this.advance();\n        if (this.getCurChar() === \"=\") {\n          this.advance();\n          token.set(ETokenType.NE_OP, \"!=\", start);\n          break;\n        }\n        token.set(ETokenType.BANG, \"!\", start);\n        break;\n\n      case \"&\":\n        this.advance();\n        if (this.getCurChar() === \"&\") {\n          this.advance();\n          token.set(ETokenType.AND_OP, \"&&\", start);\n          break;\n        } else if (this.getCurChar() === \"=\") {\n          this.advance();\n          token.set(ETokenType.ADD_ASSIGN, \"&=\", start);\n          break;\n        }\n        token.set(ETokenType.AMPERSAND, \"&\", start);\n        break;\n\n      case \"|\":\n        this.advance();\n        if (this.getCurChar() === \"|\") {\n          this.advance();\n          token.set(ETokenType.OR_OP, \"||\", start);\n          break;\n        } else if (this.getCurChar() === \"=\") {\n          this.advance();\n          token.set(ETokenType.OR_ASSIGN, \"|=\", start);\n          break;\n        }\n        token.set(ETokenType.VERTICAL_BAR, \"|\", start);\n        break;\n\n      case \"^\":\n        this.advance();\n        if (this.getCurChar() === \"^\") {\n          this.advance();\n          token.set(ETokenType.XOR_OP, \"^^\", start);\n          break;\n        } else if (this.getCurChar() === \"=\") {\n          this.advance();\n          token.set(ETokenType.XOR_ASSIGN, \"^=\", start);\n          break;\n        }\n        token.set(ETokenType.CARET, \"^\", start);\n        break;\n\n      case \"*\":\n        this.advance();\n        if (this.getCurChar() === \"=\") {\n          this.advance();\n          token.set(ETokenType.MUL_ASSIGN, \"*=\", start);\n          break;\n        }\n\n        token.set(ETokenType.STAR, \"*\", start);\n        break;\n\n      case \"/\":\n        this.advance();\n        if (this.getCurChar() === \"=\") {\n          this.advance();\n\n          token.set(ETokenType.DIV_ASSIGN, \"/=\", start);\n          break;\n        }\n\n        token.set(ETokenType.SLASH, \"/\", start);\n        break;\n\n      case \"%\":\n        this.advance();\n        if (this.getCurChar() === \"=\") {\n          this.advance();\n\n          token.set(ETokenType.MOD_ASSIGN, \"%=\", start);\n          break;\n        }\n\n        token.set(ETokenType.PERCENT, \"%\", start);\n        break;\n\n      case \"(\":\n        this.advance();\n\n        token.set(ETokenType.LEFT_PAREN, \"(\", start);\n        break;\n      case \")\":\n        this.advance();\n\n        token.set(ETokenType.RIGHT_PAREN, \")\", start);\n        break;\n      case \"{\":\n        this.advance();\n\n        token.set(ETokenType.LEFT_BRACE, \"{\", start);\n        break;\n      case \"}\":\n        this.advance();\n\n        token.set(ETokenType.RIGHT_BRACE, \"}\", start);\n        break;\n      case \"[\":\n        this.advance();\n\n        token.set(ETokenType.LEFT_BRACKET, \"[\", start);\n        break;\n      case \"]\":\n        this.advance();\n\n        token.set(ETokenType.RIGHT_BRACKET, \"]\", start);\n        break;\n      case \".\":\n        this.advance();\n        if (LexerUtils.isNum(this.getCurChar())) {\n          return this._scanNumAfterDot();\n        }\n\n        token.set(ETokenType.DOT, \".\", start);\n        break;\n      case \",\":\n        this.advance();\n\n        token.set(ETokenType.COMMA, \",\", start);\n        break;\n      case \":\":\n        this.advance();\n\n        token.set(ETokenType.COLON, \":\", start);\n        return token;\n      case \";\":\n        this.advance();\n\n        token.set(ETokenType.SEMICOLON, \";\", start);\n        break;\n      case \"~\":\n        this.advance();\n\n        token.set(ETokenType.TILDE, \"~\", start);\n        break;\n      case \"?\":\n        this.advance();\n\n        token.set(ETokenType.QUESTION, \"?\", start);\n        break;\n      case '\"':\n        this.advance();\n        return this._scanStringConst();\n\n      default:\n        this.throwError(this.getCurPosition(), `Unexpected character ${this.getCurChar()}`);\n    }\n    return token;\n  }\n\n  private _scanStringConst() {\n    const start = this._getPosition();\n    const buffer: string[] = [];\n    while (this.getCurChar() !== '\"') {\n      buffer.push(this.getCurChar());\n      this.advance();\n    }\n    this.advance();\n    const range = ShaderLab.createRange(start, this._getPosition());\n\n    const token = BaseToken.pool.get();\n    token.set(ETokenType.STRING_CONST, buffer.join(\"\"), range);\n    return token;\n  }\n\n  private _scanNumAfterDot() {\n    const buffer = [\".\"];\n    while (LexerUtils.isNum(this.getCurChar())) {\n      buffer.push(this.getCurChar());\n      this.advance();\n    }\n\n    const token = BaseToken.pool.get();\n    token.set(ETokenType.FLOAT_CONSTANT, buffer.join(\"\"), this._getPosition(1));\n    return token;\n  }\n\n  private _getPosition(offset /** offset from starting point */ = 0) {\n    return ShaderLab.createPosition(\n      this.current - offset,\n      // #if _VERBOSE\n      this._line,\n      this._column - offset\n      // #endif\n    );\n  }\n\n  private _scanWord() {\n    const buffer: string[] = [this.getCurChar()];\n    const start = this._getPosition();\n    this.advance();\n    while (LexerUtils.isLetter(this.getCurChar())) {\n      buffer.push(this.getCurChar());\n      this.advance();\n    }\n    const word = buffer.join(\"\");\n    const kt = KeywordTable.get(word);\n    if (kt) {\n      const token = BaseToken.pool.get();\n      token.set(kt, word, start);\n      return token;\n    }\n\n    const token = BaseToken.pool.get();\n    token.set(ETokenType.ID, word, start);\n    return token;\n  }\n\n  private _scanNum() {\n    const buffer: string[] = [];\n    while (LexerUtils.isNum(this.getCurChar())) {\n      buffer.push(this.getCurChar());\n      this.advance();\n    }\n    if (this.getCurChar() === \".\") {\n      buffer.push(this.getCurChar());\n      this.advance();\n      while (LexerUtils.isNum(this.getCurChar())) {\n        buffer.push(this.getCurChar());\n        this.advance();\n      }\n      this._scanFloatSuffix(buffer);\n\n      const token = BaseToken.pool.get();\n      token.set(ETokenType.FLOAT_CONSTANT, buffer.join(\"\"), this._getPosition(buffer.length));\n      return token;\n    } else {\n      if (this.getCurChar() === \"e\" || this.getCurChar() === \"E\") {\n        this._scanFloatSuffix(buffer);\n\n        const token = BaseToken.pool.get();\n        token.set(ETokenType.FLOAT_CONSTANT, buffer.join(\"\"), this._getPosition(buffer.length));\n        return token;\n      } else {\n        this._scanIntegerSuffix(buffer);\n\n        const token = BaseToken.pool.get();\n        token.set(ETokenType.INT_CONSTANT, buffer.join(\"\"), this._getPosition(buffer.length));\n        return token;\n      }\n    }\n  }\n\n  private _scanFloatSuffix(buffer: string[]) {\n    if (this.getCurChar() === \"e\" || this.getCurChar() === \"E\") {\n      buffer.push(this.getCurChar());\n      this.advance();\n      if (this.getCurChar() === \"+\" || this.getCurChar() === \"-\") {\n        buffer.push(this.getCurChar());\n        this.advance();\n      }\n      if (!LexerUtils.isNum(this.getCurChar()))\n        this.throwError(this.getCurPosition(), \"lexing error, invalid exponent suffix.\");\n      while (LexerUtils.isNum(this.getCurChar())) {\n        buffer.push(this.getCurChar());\n        this.advance();\n      }\n    }\n    if (this.getCurChar() === \"f\" || this.getCurChar() === \"F\") {\n      buffer.push(this.getCurChar());\n      this.advance();\n    }\n  }\n\n  private _scanIntegerSuffix(buffer: string[]) {\n    if (this.getCurChar() === \"u\" || this.getCurChar() === \"U\") {\n      buffer.push(this.getCurChar());\n      this.advance();\n    }\n  }\n}\n","import { ASTNode } from \"./AST\";\nimport { SymbolTable } from \"../parser/symbolTable\";\n\nexport class ShaderData {\n  symbolTable: SymbolTable;\n\n  vertexMain: ASTNode.FunctionDefinition;\n  fragmentMain: ASTNode.FunctionDefinition;\n\n  globalPrecisions: ASTNode.PrecisionSpecifier[] = [];\n}\n","import { GalaceanDataType } from \"../../common\";\nimport { ASTNode } from \"../AST\";\n\nexport class SymbolDataType {\n  constructor(\n    public type: GalaceanDataType,\n    public typeLexeme: string,\n    public arraySpecifier?: ASTNode.ArraySpecifier\n  ) {}\n}\n","import { ASTNode } from \"../AST\";\nimport { SymbolDataType } from \"./SymbolDataType\";\nimport { ESymbolType, SymbolInfo } from \"./SymbolInfo\";\n\nexport class FnSymbol extends SymbolInfo {\n  declare astNode: ASTNode.FunctionDefinition;\n\n  constructor(lexeme: string, astNode: ASTNode.FunctionDefinition) {\n    const type = new SymbolDataType(\n      astNode.protoType.returnType.type,\n      astNode.protoType.returnType.typeSpecifier.lexeme\n    );\n    super(lexeme, ESymbolType.FN, astNode, type);\n  }\n}\n","import { ASTNode } from \"../AST\";\nimport { ESymbolType, SymbolInfo } from \"./SymbolInfo\";\n\nexport class StructSymbol extends SymbolInfo {\n  declare astNode: ASTNode.StructSpecifier;\n\n  constructor(lexeme: string, astNode: ASTNode.StructSpecifier) {\n    super(lexeme, ESymbolType.STRUCT, astNode);\n  }\n}\n","import { Logger } from \"@galacean/engine\";\nimport { GalaceanDataType } from \"./types\";\n\nexport interface IBaseSymbol {\n  readonly ident: string;\n}\n\n/**\n * The base class of `SymbolTable`\n */\nexport abstract class BaseSymbolTable<T extends IBaseSymbol = IBaseSymbol> {\n  protected _table: Map<string, T[]> = new Map();\n\n  /**\n   * Check the equality of two symbol.\n   */\n  abstract symbolEqualCheck(exist: T, newSymbol: T): boolean;\n\n  insert(sm: T) {\n    const entry = this._table.get(sm.ident) ?? [];\n    for (let i = 0; i < entry.length; i++) {\n      if (this.symbolEqualCheck(entry[i], sm)) {\n        Logger.warn(\"replace symbol:\", sm.ident);\n        entry[i] = sm;\n        return;\n      }\n    }\n    entry.push(sm);\n    this._table.set(sm.ident, entry);\n  }\n\n  lookup<R = T>(sm: T & { signature?: GalaceanDataType[] }): R {\n    const entry = this._table.get(sm.ident) ?? [];\n    for (const item of entry) {\n      if (this.symbolEqualCheck(item, sm)) return item as unknown as R;\n    }\n  }\n}\n\nexport class SymbolTableStack<S extends IBaseSymbol, T extends BaseSymbolTable<S>> {\n  private _stack: T[] = [];\n\n  get _scope() {\n    return this._stack[this._stack.length - 1];\n  }\n\n  newScope(scope: T) {\n    this._stack.push(scope);\n  }\n\n  clear() {\n    this._stack.length = 0;\n  }\n\n  dropScope() {\n    this._stack.pop();\n  }\n\n  insert(sm: S) {\n    this._scope.insert(sm);\n  }\n\n  lookup(sm: S & { signature?: GalaceanDataType[] }) {\n    for (let i = this._stack.length - 1; i >= 0; i--) {\n      const scope = this._stack[i];\n      const ret = scope.lookup(sm);\n      if (ret) return ret;\n    }\n  }\n}\n","import { GalaceanDataType, TypeAny } from \"../../common\";\nimport { BaseSymbolTable } from \"../../common/BaseSymbolTable\";\nimport { ASTNode } from \"../AST\";\nimport { FnSymbol } from \"./FnSymbol\";\nimport { ESymbolType, SymbolInfo } from \"./SymbolInfo\";\n\nexport class SymbolTable extends BaseSymbolTable<SymbolInfo> {\n  override symbolEqualCheck(exist: SymbolInfo, newSymbol: SymbolInfo & { signature?: GalaceanDataType[] }): boolean {\n    if (exist.symbolType !== newSymbol.symbolType) return false;\n    if (newSymbol.symbolType === ESymbolType.FN) {\n      if (!newSymbol.astNode && !newSymbol.signature) return true;\n\n      const existParams = (exist.astNode as ASTNode.FunctionDefinition).protoType.paramSig;\n      const newSymbolParams =\n        newSymbol.signature ?? (newSymbol.astNode as ASTNode.FunctionDefinition).protoType.paramSig;\n      if (existParams.length !== newSymbolParams.length) return false;\n      for (let i = 0; i < existParams.length; i++) {\n        if (existParams[i] === TypeAny || newSymbolParams[i] === TypeAny) continue;\n        if (existParams[i] !== newSymbolParams[i]) return false;\n      }\n    }\n    return true;\n  }\n\n  getAllFnSymbols(fnIdent: string): FnSymbol[] {\n    const entries = this._table.get(fnIdent) ?? [];\n    return entries.filter((item) => item.symbolType === ESymbolType.FN) as FnSymbol[];\n  }\n}\n","import { ASTNode } from \"../AST\";\nimport { SymbolDataType } from \"./SymbolDataType\";\nimport { ESymbolType, SymbolInfo } from \"./SymbolInfo\";\n\nexport class VarSymbol extends SymbolInfo {\n  declare astNode:\n    | ASTNode.Initializer\n    | ASTNode.ParameterDeclarator\n    | ASTNode.InitDeclaratorList\n    | ASTNode.VariableDeclaration;\n\n  readonly isGlobalVariable: boolean;\n\n  constructor(\n    ident: string,\n    dataType: SymbolDataType,\n    isGlobalVariable: boolean,\n    initAst:\n      | ASTNode.Initializer\n      | ASTNode.ParameterDeclarator\n      | ASTNode.InitDeclaratorList\n      | ASTNode.VariableDeclaration\n  ) {\n    super(ident, ESymbolType.VAR, initAst, dataType);\n    this.isGlobalVariable = isGlobalVariable;\n  }\n}\n","import { ShaderRange } from \"../common\";\nimport { TreeNode } from \"./AST\";\nimport { GSErrorName } from \"../GSError\";\nimport { ShaderData } from \"./ShaderInfo\";\nimport { SymbolInfo, SymbolTable } from \"../parser/symbolTable\";\nimport { NodeChild } from \"./types\";\nimport { SymbolTableStack } from \"../common/BaseSymbolTable\";\nimport { ShaderLab } from \"../ShaderLab\";\n// #if _VERBOSE\nimport { GSError } from \"../GSError\";\n// #endif\n\nexport type TranslationRule<T = any> = (sa: SematicAnalyzer, ...tokens: NodeChild[]) => T;\n\n/**\n * The semantic analyzer of `ShaderLab` compiler.\n * - Build symbol table\n * - Static analysis\n */\nexport default class SematicAnalyzer {\n  semanticStack: TreeNode[] = [];\n  acceptRule?: TranslationRule = undefined;\n  symbolTable: SymbolTableStack<SymbolInfo, SymbolTable> = new SymbolTableStack();\n  private _shaderData = new ShaderData();\n\n  // #if _VERBOSE\n  readonly errors: GSError[] = [];\n  // #endif\n\n  get shaderData() {\n    return this._shaderData;\n  }\n\n  private _translationRuleTable: Map<number /** production id */, TranslationRule> = new Map();\n\n  constructor() {\n    this.newScope();\n  }\n\n  reset() {\n    this.semanticStack.length = 0;\n    this._shaderData = new ShaderData();\n    this.symbolTable.clear();\n    this.newScope();\n    // #if _VERBOSE\n    this.errors.length = 0;\n    // #endif\n  }\n\n  newScope() {\n    const scope = new SymbolTable();\n    this.symbolTable.newScope(scope);\n  }\n\n  dropScope() {\n    return this.symbolTable.dropScope();\n  }\n\n  addTranslationRule(pid: number, rule: TranslationRule) {\n    this._translationRuleTable.set(pid, rule);\n  }\n\n  getTranslationRule(pid: number) {\n    return this._translationRuleTable.get(pid);\n  }\n\n  error(loc: ShaderRange, ...param: any[]) {\n    // #if _VERBOSE\n    const err = new GSError(GSErrorName.CompilationError, param.join(\"\"), loc, ShaderLab._processingPassText);\n    this.errors.push(err);\n    return err;\n    // #else\n    throw new Error(param.join(\"\"));\n    // #endif\n  }\n}\n","import { ENonTerminal, GrammarSymbol } from \"../parser/GrammarSymbol\";\n\nexport default class Production {\n  private static _id = 0;\n  static pool: Map<number, Production> = new Map();\n\n  readonly goal: ENonTerminal;\n  readonly derivation: GrammarSymbol[];\n  readonly id: number;\n\n  constructor(goal: ENonTerminal, derivation: GrammarSymbol[]) {\n    this.goal = goal;\n    this.derivation = derivation;\n    this.id = Production._id++;\n    Production.pool.set(this.id, this);\n  }\n}\n","import { ETokenType } from \"../common\";\nimport { ENonTerminal, GrammarSymbol } from \"./GrammarSymbol\";\nimport Production from \"../lalr/Production\";\n\nexport class Grammar {\n  readonly productions: Production[];\n\n  readonly startSymbol: ENonTerminal;\n\n  static create(start: ENonTerminal, productions: GrammarSymbol[][]) {\n    const _ps = productions.map((gsl) => {\n      return new Production(<ENonTerminal>gsl[0], gsl.slice(1));\n    });\n    return new Grammar(start, _ps);\n  }\n\n  constructor(start: ENonTerminal, productions: Production[]) {\n    this.startSymbol = start;\n    productions.unshift(new Production(ENonTerminal.START, [start]));\n    this.productions = productions;\n  }\n\n  getProductionList(nonTerminal: ENonTerminal) {\n    return this.productions.filter((item) => item.goal === nonTerminal);\n  }\n\n  isNullableNT(NT: ENonTerminal) {\n    return this.productions.find((item) => item.goal === NT && item.derivation[0] === ETokenType.EPSILON);\n  }\n\n  getProductionByID(pid: number) {\n    return Production.pool.get(pid);\n  }\n}\n","import { ENonTerminal } from \"./GrammarSymbol\";\nimport { BaseToken } from \"../common/BaseToken\";\nimport { GalaceanDataType, ShaderRange } from \"../common\";\nimport { ASTNode, TreeNode } from \"./AST\";\n\nexport type TraceStackItem = ENonTerminal | BaseToken;\n\nexport class SymbolType {\n  type: GalaceanDataType;\n  arraySpecifier?: ASTNode.ArraySpecifier;\n  typeLexeme: string;\n\n  constructor(type: GalaceanDataType, typeLexeme: string, arraySpecifier?: ASTNode.ArraySpecifier) {\n    this.type = type;\n    this.arraySpecifier = arraySpecifier;\n    this.typeLexeme = typeLexeme;\n  }\n}\n\nexport class StructProp implements IParamInfo {\n  typeInfo: SymbolType;\n  ident: BaseToken;\n  astNode: ASTNode.StructDeclarator;\n\n  constructor(type: SymbolType, ident: BaseToken) {\n    this.typeInfo = type;\n    this.ident = ident;\n  }\n}\n\nexport type NodeChild = TreeNode | BaseToken;\n\nexport type IParamInfo = { ident: BaseToken; typeInfo: SymbolType; astNode: TreeNode };\n","import { EKeyword, ETokenType, ShaderRange } from \"../common\";\nimport { ASTNode, TreeNode } from \"../parser/AST\";\nimport { TranslationRule } from \"../parser/SemanticAnalyzer\";\nimport { ENonTerminal, GrammarSymbol } from \"../parser/GrammarSymbol\";\nimport Production from \"./Production\";\nimport { ActionInfo, EAction } from \"./types\";\nimport { ShaderLab } from \"../ShaderLab\";\nimport { ClearableObjectPool, IPoolElement } from \"@galacean/engine\";\nimport { NodeChild } from \"../parser/types\";\n\nexport default class GrammarUtils {\n  static isTerminal(sm: GrammarSymbol) {\n    return sm < ENonTerminal.START;\n  }\n\n  static toString(sm: GrammarSymbol) {\n    if (this.isTerminal(sm)) {\n      return ETokenType[sm] ?? EKeyword[sm];\n    }\n    return ENonTerminal[sm];\n  }\n\n  static createProductionWithOptions(\n    goal: ENonTerminal,\n    options: GrammarSymbol[][],\n    /** the ast node */\n    astTypePool?: ClearableObjectPool<\n      { set: (loc: ShaderRange, children: NodeChild[]) => void } & IPoolElement & TreeNode\n    >\n  ) {\n    const ret: [GrammarSymbol[], TranslationRule | undefined][] = [];\n    for (const opt of options) {\n      ret.push([\n        [goal, ...opt],\n        function (sa, ...children) {\n          if (!children[0]) return;\n          const start = children[0].location.start;\n          const end = children[children.length - 1].location.end;\n          const location = ShaderLab.createRange(start, end);\n          ASTNode.get(astTypePool ?? ASTNode.TrivialNode.pool, sa, location, children);\n        }\n      ]);\n    }\n    return ret;\n  }\n\n  static createProductionOptions(common: GrammarSymbol[], position: number, opts: GrammarSymbol[][]) {\n    const ret: GrammarSymbol[][] = [];\n    for (const opt of opts) {\n      const list = common.slice(0, position);\n      list.push(...opt);\n      list.push(...common.slice(position));\n      ret.push(list);\n    }\n    return ret;\n  }\n\n  static addMapSetItem<K, T>(map: Map<K, Set<T>>, k: K, v: T) {\n    const set = map.get(k) ?? new Set();\n    set.add(v);\n    map.set(k, set);\n  }\n\n  static isSubSet<T>(sa: Set<T>, sb: Set<T>) {\n    for (const item of sa) {\n      if (!sb.has(item)) return false;\n    }\n    return true;\n  }\n\n  static isActionEqual(a: ActionInfo, b: ActionInfo) {\n    return a.action === b.action && a.target === b.target;\n  }\n\n  // #if _VERBOSE\n  static printAction(actionInfo: ActionInfo) {\n    return `<Action: ${EAction[actionInfo.action]} -> ${\n      actionInfo.action === EAction.Reduce ? Production.pool.get(actionInfo.target!) : `State ${actionInfo.target!}`\n    }>`;\n  }\n\n  static printProduction(production: Production) {\n    const deriv = production.derivation.map((gs) => GrammarUtils.toString(gs)).join(\"|\");\n    return `${ENonTerminal[production.goal]} :=> ${deriv}`;\n  }\n  // #endif\n}\n","// Context Free Grammar of Galacean ShaderLab\n\nimport { Grammar } from \"../parser/Grammar\";\nimport { ENonTerminal, GrammarSymbol } from \"../parser/GrammarSymbol\";\nimport GrammarUtils from \"./Utils\";\nimport { EKeyword, ETokenType } from \"../common\";\nimport SematicAnalyzer, { TranslationRule } from \"../parser/SemanticAnalyzer\";\nimport { ASTNode } from \"../parser/AST\";\n\nconst productionAndRules: [GrammarSymbol[], TranslationRule | undefined][] = [\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.gs_shader_program,\n    [[ENonTerminal.global_declaration], [ENonTerminal.gs_shader_program, ENonTerminal.global_declaration]],\n    ASTNode.GLShaderProgram.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(ENonTerminal.global_declaration, [\n    [ENonTerminal.precision_specifier],\n    [ENonTerminal.variable_declaration],\n    [ENonTerminal.struct_specifier],\n    [ENonTerminal.function_definition]\n  ]),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.variable_declaration,\n    [\n      [EKeyword.GS_RenderQueueType, ETokenType.ID, ETokenType.SEMICOLON],\n      [ENonTerminal.fully_specified_type, ETokenType.ID, ETokenType.SEMICOLON],\n      [ENonTerminal.fully_specified_type, ETokenType.ID, ENonTerminal.array_specifier, ETokenType.SEMICOLON]\n    ],\n    ASTNode.VariableDeclaration.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.ext_builtin_type_specifier_nonarray,\n    [\n      [EKeyword.VOID],\n      [EKeyword.FLOAT],\n      [EKeyword.BOOL],\n      [EKeyword.INT],\n      [EKeyword.UINT],\n      [EKeyword.VEC2],\n      [EKeyword.VEC3],\n      [EKeyword.VEC4],\n      [EKeyword.BVEC2],\n      [EKeyword.BVEC3],\n      [EKeyword.BVEC4],\n      [EKeyword.IVEC2],\n      [EKeyword.IVEC3],\n      [EKeyword.IVEC4],\n      [EKeyword.UVEC2],\n      [EKeyword.UVEC3],\n      [EKeyword.UVEC4],\n      [EKeyword.MAT2],\n      [EKeyword.MAT3],\n      [EKeyword.MAT4],\n      [EKeyword.MAT2X3],\n      [EKeyword.MAT2X4],\n      [EKeyword.MAT3X2],\n      [EKeyword.MAT3X4],\n      [EKeyword.MAT4X2],\n      [EKeyword.MAT4X3],\n      [EKeyword.SAMPLER2D],\n      [EKeyword.SAMPLER3D],\n      [EKeyword.SAMPLER_CUBE],\n      [EKeyword.SAMPLER2D_SHADOW],\n      [EKeyword.SAMPLER_CUBE_SHADOW],\n      [EKeyword.SAMPLER2D_ARRAY],\n      [EKeyword.SAMPLER2D_ARRAY_SHADOW],\n      [EKeyword.I_SAMPLER2D],\n      [EKeyword.I_SAMPLER3D],\n      [EKeyword.I_SAMPLER_CUBE],\n      [EKeyword.I_SAMPLER2D_ARRAY],\n      [EKeyword.U_SAMPLER2D],\n      [EKeyword.U_SAMPLER3D],\n      [EKeyword.U_SAMPLER_CUBE],\n      [EKeyword.U_SAMPLER2D_ARRAY]\n    ],\n    ASTNode.ExtBuiltinTypeSpecifierNonArray.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.type_specifier_nonarray,\n    [[ETokenType.ID], [ENonTerminal.ext_builtin_type_specifier_nonarray]],\n    ASTNode.TypeSpecifierNonArray.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.fully_specified_type,\n    [[ENonTerminal.type_specifier], [ENonTerminal.type_qualifier, ENonTerminal.type_specifier]],\n    ASTNode.FullySpecifiedType.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.type_specifier,\n    [\n      [ENonTerminal.type_specifier_nonarray],\n      [ENonTerminal.ext_builtin_type_specifier_nonarray, ENonTerminal.array_specifier]\n    ],\n    ASTNode.TypeSpecifier.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.type_qualifier,\n    [[ENonTerminal.single_type_qualifier], [ENonTerminal.type_qualifier, ENonTerminal.single_type_qualifier]],\n    ASTNode.TypeQualifier.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.single_type_qualifier,\n    [\n      [ENonTerminal.storage_qualifier],\n      [ENonTerminal.precision_qualifier],\n      [ENonTerminal.interpolation_qualifier],\n      [ENonTerminal.invariant_qualifier],\n      [EKeyword.PRECISE]\n    ],\n    ASTNode.SingleTypeQualifier.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.storage_qualifier,\n    [[EKeyword.CONST], [EKeyword.IN], [EKeyword.INOUT], [EKeyword.OUT], [EKeyword.CENTROID]],\n    // #if _VERBOSE\n    ASTNode.StorageQualifier.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.interpolation_qualifier,\n    [[EKeyword.SMOOTH], [EKeyword.FLAT]],\n    // #if _VERBOSE\n    ASTNode.InterpolationQualifier.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.invariant_qualifier,\n    [[EKeyword.INVARIANT]],\n    // #if _VERBOSE\n    ASTNode.InvariantQualifier.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.precision_qualifier,\n    [[EKeyword.HIGHP], [EKeyword.MEDIUMP], [EKeyword.LOWP]],\n    // #if _VERBOSE\n    ASTNode.PrecisionQualifier.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.struct_specifier,\n    [\n      [\n        EKeyword.STRUCT,\n        ETokenType.ID,\n        ETokenType.LEFT_BRACE,\n        ENonTerminal.struct_declaration_list,\n        ETokenType.RIGHT_BRACE,\n        ETokenType.SEMICOLON\n      ],\n      [\n        EKeyword.STRUCT,\n        ETokenType.LEFT_BRACE,\n        ENonTerminal.struct_declaration_list,\n        ETokenType.RIGHT_BRACE,\n        ETokenType.SEMICOLON\n      ]\n    ],\n    ASTNode.StructSpecifier.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.struct_declaration_list,\n    [[ENonTerminal.struct_declaration], [ENonTerminal.struct_declaration_list, ENonTerminal.struct_declaration]],\n    ASTNode.StructDeclarationList.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.struct_declaration,\n    [\n      [ENonTerminal.type_specifier, ENonTerminal.struct_declarator_list, ETokenType.SEMICOLON],\n      [\n        ENonTerminal.type_qualifier,\n        ENonTerminal.type_specifier,\n        ENonTerminal.struct_declarator_list,\n        ETokenType.SEMICOLON\n      ]\n    ],\n    ASTNode.StructDeclaration.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.struct_declarator_list,\n    [\n      [ENonTerminal.struct_declarator],\n      [ENonTerminal.struct_declarator_list, ETokenType.COMMA, ENonTerminal.struct_declarator]\n    ],\n    ASTNode.StructDeclaratorList.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.struct_declarator,\n    [[ETokenType.ID], [ETokenType.ID, ENonTerminal.array_specifier]],\n    ASTNode.StructDeclarator.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.array_specifier,\n    [\n      [ETokenType.LEFT_BRACKET, ETokenType.RIGHT_BRACKET],\n      [ETokenType.LEFT_BRACKET, ENonTerminal.integer_constant_expression, ETokenType.RIGHT_BRACKET]\n    ],\n    ASTNode.ArraySpecifier.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.integer_constant_expression_operator,\n    [[ETokenType.PLUS], [ETokenType.DASH], [ETokenType.STAR], [ETokenType.SLASH], [ETokenType.PERCENT]],\n    ASTNode.IntegerConstantExpressionOperator.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.integer_constant_expression,\n    [\n      [ENonTerminal.variable_identifier],\n      [ETokenType.INT_CONSTANT],\n      [\n        ENonTerminal.integer_constant_expression,\n        ENonTerminal.integer_constant_expression_operator,\n        ETokenType.INT_CONSTANT\n      ],\n      [\n        ENonTerminal.integer_constant_expression,\n        ENonTerminal.integer_constant_expression_operator,\n        ENonTerminal.variable_identifier\n      ]\n    ],\n    ASTNode.IntegerConstantExpression.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.conditional_expression,\n    [\n      [ENonTerminal.logical_or_expression],\n      [\n        ENonTerminal.logical_or_expression,\n        ETokenType.QUESTION,\n        ENonTerminal.expression,\n        ETokenType.COLON,\n        ENonTerminal.assignment_expression\n      ]\n    ],\n    // #if _VERBOSE\n    ASTNode.ConditionalExpression.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.logical_or_expression,\n    [\n      [ENonTerminal.logical_xor_expression],\n      [ENonTerminal.logical_or_expression, ETokenType.OR_OP, ENonTerminal.logical_xor_expression]\n    ],\n    // #if _VERBOSE\n    ASTNode.LogicalOrExpression.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.logical_xor_expression,\n    [\n      [ENonTerminal.logical_and_expression],\n      [ENonTerminal.logical_xor_expression, ETokenType.XOR_OP, ENonTerminal.logical_and_expression]\n    ],\n    // #if _VERBOSE\n    ASTNode.LogicalXorExpression.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.logical_and_expression,\n    [\n      [ENonTerminal.inclusive_or_expression],\n      [ENonTerminal.logical_and_expression, ETokenType.AND_OP, ENonTerminal.inclusive_or_expression]\n    ],\n    // #if _VERBOSE\n    ASTNode.LogicalAndExpression.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.inclusive_or_expression,\n    [\n      [ENonTerminal.exclusive_or_expression],\n      [ENonTerminal.inclusive_or_expression, ETokenType.VERTICAL_BAR, ENonTerminal.exclusive_or_expression]\n    ],\n    // #if _VERBOSE\n    ASTNode.InclusiveOrExpression.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.exclusive_or_expression,\n    [\n      [ENonTerminal.and_expression],\n      [ENonTerminal.exclusive_or_expression, ETokenType.CARET, ENonTerminal.and_expression]\n    ],\n    // #if _VERBOSE\n    ASTNode.ExclusiveOrExpression.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.and_expression,\n    [\n      [ENonTerminal.equality_expression],\n      [ENonTerminal.and_expression, ETokenType.AMPERSAND, ENonTerminal.equality_expression]\n    ],\n    // #if _VERBOSE\n    ASTNode.AndExpression.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.equality_expression,\n    [\n      [ENonTerminal.relational_expression],\n      [ENonTerminal.equality_expression, ETokenType.EQ_OP, ENonTerminal.relational_expression],\n      [ENonTerminal.equality_expression, ETokenType.NE_OP, ENonTerminal.relational_expression]\n    ],\n    // #if _VERBOSE\n    ASTNode.EqualityExpression.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.relational_expression,\n    [\n      [ENonTerminal.shift_expression],\n      [ENonTerminal.relational_expression, ETokenType.LEFT_ANGLE, ENonTerminal.shift_expression],\n      [ENonTerminal.relational_expression, ETokenType.RIGHT_ANGLE, ENonTerminal.shift_expression],\n      [ENonTerminal.relational_expression, ETokenType.LE_OP, ENonTerminal.shift_expression],\n      [ENonTerminal.relational_expression, ETokenType.GE_OP, ENonTerminal.shift_expression]\n    ],\n    // #if _VERBOSE\n    ASTNode.RelationalExpression.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.shift_expression,\n    [\n      [ENonTerminal.additive_expression],\n      [ENonTerminal.shift_expression, ETokenType.LEFT_OP, ENonTerminal.additive_expression],\n      [ENonTerminal.shift_expression, ETokenType.RIGHT_OP, ENonTerminal.additive_expression]\n    ],\n    // #if _VERBOSE\n    ASTNode.ShiftExpression.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.additive_expression,\n    [\n      [ENonTerminal.multiplicative_expression],\n      [ENonTerminal.additive_expression, ETokenType.PLUS, ENonTerminal.multiplicative_expression],\n      [ENonTerminal.additive_expression, ETokenType.DASH, ENonTerminal.multiplicative_expression]\n    ],\n    // #if _VERBOSE\n    ASTNode.AdditiveExpression.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.multiplicative_expression,\n    [\n      [ENonTerminal.unary_expression],\n      [ENonTerminal.multiplicative_expression, ETokenType.STAR, ENonTerminal.unary_expression],\n      [ENonTerminal.multiplicative_expression, ETokenType.SLASH, ENonTerminal.unary_expression],\n      [ENonTerminal.multiplicative_expression, ETokenType.PERCENT, ENonTerminal.unary_expression]\n    ],\n    // #if _VERBOSE\n    ASTNode.MultiplicativeExpression.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.unary_expression,\n    [\n      [ENonTerminal.postfix_expression],\n      [ETokenType.INC_OP, ENonTerminal.unary_expression],\n      [ETokenType.DEC_OP, ENonTerminal.unary_expression],\n      [ENonTerminal.unary_operator, ENonTerminal.unary_expression]\n    ],\n    // #if _VERBOSE\n    ASTNode.UnaryExpression.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.unary_operator,\n    [[ETokenType.PLUS], [ETokenType.DASH], [ETokenType.BANG], [ETokenType.TILDE]],\n    // #if _VERBOSE\n    ASTNode.UnaryOperator.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.postfix_expression,\n    [\n      [ENonTerminal.primary_expression],\n      [ENonTerminal.postfix_expression, ETokenType.LEFT_BRACKET, ENonTerminal.expression, ETokenType.RIGHT_BRACKET],\n      [ENonTerminal.function_call],\n      [ENonTerminal.postfix_expression, ETokenType.DOT, ETokenType.ID],\n      [ENonTerminal.postfix_expression, ETokenType.DOT, ENonTerminal.function_call],\n      [ENonTerminal.postfix_expression, ETokenType.INC_OP],\n      [ENonTerminal.postfix_expression, ETokenType.DEC_OP]\n    ],\n    ASTNode.PostfixExpression.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.primary_expression,\n    [\n      [ENonTerminal.variable_identifier],\n      [ETokenType.INT_CONSTANT],\n      [ETokenType.FLOAT_CONSTANT],\n      [EKeyword.TRUE],\n      [EKeyword.FALSE],\n      [ETokenType.LEFT_PAREN, ENonTerminal.expression, ETokenType.RIGHT_PAREN]\n    ],\n    ASTNode.PrimaryExpression.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.expression,\n    [\n      [ENonTerminal.assignment_expression],\n      [ENonTerminal.expression, ETokenType.COMMA, ENonTerminal.assignment_expression]\n    ],\n    ASTNode.Expression.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.assignment_expression,\n    [\n      [ENonTerminal.conditional_expression],\n      [ENonTerminal.unary_expression, ENonTerminal.assignment_operator, ENonTerminal.assignment_expression]\n    ],\n    ASTNode.AssignmentExpression.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.assignment_operator,\n    [\n      [ETokenType.EQUAL],\n      [ETokenType.MUL_ASSIGN],\n      [ETokenType.DIV_ASSIGN],\n      [ETokenType.MOD_ASSIGN],\n      [ETokenType.ADD_ASSIGN],\n      [ETokenType.SUB_ASSIGN],\n      [ETokenType.LEFT_ASSIGN],\n      [ETokenType.RIGHT_ASSIGN],\n      [ETokenType.AND_ASSIGN],\n      [ETokenType.XOR_ASSIGN],\n      [ETokenType.OR_ASSIGN]\n    ],\n    // #if _VERBOSE\n    ASTNode.AssignmentOperator.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.function_call,\n    [[ENonTerminal.function_call_generic]],\n    ASTNode.FunctionCall.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.function_call_generic,\n    [\n      [\n        ENonTerminal.function_identifier,\n        ETokenType.LEFT_PAREN,\n        ENonTerminal.function_call_parameter_list,\n        ETokenType.RIGHT_PAREN\n      ],\n      [ENonTerminal.function_identifier, ETokenType.LEFT_PAREN, ETokenType.RIGHT_PAREN],\n      [ENonTerminal.function_identifier, EKeyword.VOID, ETokenType.RIGHT_PAREN]\n    ],\n    ASTNode.FunctionCallGeneric.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.function_call_parameter_list,\n    [\n      [ENonTerminal.assignment_expression],\n      [ENonTerminal.function_call_parameter_list, ETokenType.COMMA, ENonTerminal.assignment_expression]\n    ],\n    ASTNode.FunctionCallParameterList.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.function_identifier,\n    [[ENonTerminal.type_specifier]],\n    ASTNode.FunctionIdentifier.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.function_definition,\n    [[ENonTerminal.function_prototype, ENonTerminal.compound_statement_no_scope]],\n    ASTNode.FunctionDefinition.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.function_prototype,\n    [[ENonTerminal.function_declarator, ETokenType.RIGHT_PAREN]],\n    ASTNode.FunctionProtoType.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.function_declarator,\n    [[ENonTerminal.function_header], [ENonTerminal.function_header, ENonTerminal.function_parameter_list]],\n    ASTNode.FunctionDeclarator.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.function_header,\n    [[ENonTerminal.fully_specified_type, ETokenType.ID, ETokenType.LEFT_PAREN]],\n    ASTNode.FunctionHeader.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.function_parameter_list,\n    [\n      [ENonTerminal.parameter_declaration],\n      [ENonTerminal.function_parameter_list, ETokenType.COMMA, ENonTerminal.parameter_declaration]\n    ],\n    ASTNode.FunctionParameterList.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.parameter_declaration,\n    [[ENonTerminal.type_qualifier, ENonTerminal.parameter_declarator], [ENonTerminal.parameter_declarator]],\n    ASTNode.ParameterDeclaration.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.parameter_declarator,\n    [\n      [ENonTerminal.type_specifier, ETokenType.ID],\n      [ENonTerminal.type_specifier, ETokenType.ID, ENonTerminal.array_specifier]\n    ],\n    ASTNode.ParameterDeclarator.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.statement_list,\n    [[ENonTerminal.statement], [ENonTerminal.statement_list, ENonTerminal.statement]],\n    ASTNode.StatementList.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.statement,\n    [[ENonTerminal.compound_statement], [ENonTerminal.simple_statement]],\n    // #if _VERBOSE\n    ASTNode.Statement.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.compound_statement_no_scope,\n    [\n      [ETokenType.LEFT_BRACE, ETokenType.RIGHT_BRACE],\n      [ETokenType.LEFT_BRACE, ENonTerminal.statement_list, ETokenType.RIGHT_BRACE]\n    ],\n    ASTNode.CompoundStatementNoScope.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.compound_statement,\n    [\n      [ETokenType.LEFT_BRACE, ETokenType.RIGHT_BRACE],\n      [ENonTerminal.scope_brace, ENonTerminal.statement_list, ENonTerminal.scope_end_brace]\n    ],\n    // #if _VERBOSE\n    ASTNode.CompoundStatement.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.simple_statement,\n    [\n      [ENonTerminal.declaration],\n      [ENonTerminal.expression_statement],\n      [ENonTerminal.selection_statement],\n      [ENonTerminal.iteration_statement],\n      [ENonTerminal.jump_statement]\n    ],\n    // #if _VERBOSE\n    ASTNode.SimpleStatement.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.declaration,\n    [\n      [ENonTerminal.function_prototype, ETokenType.SEMICOLON],\n      [ENonTerminal.init_declarator_list, ETokenType.SEMICOLON],\n      [\n        EKeyword.PRECISION,\n        ENonTerminal.precision_qualifier,\n        ENonTerminal.ext_builtin_type_specifier_nonarray,\n        ETokenType.SEMICOLON\n      ],\n      [ENonTerminal.type_qualifier, ETokenType.ID, ETokenType.SEMICOLON],\n      [ENonTerminal.type_qualifier, ETokenType.ID, ENonTerminal.identifier_list, ETokenType.SEMICOLON]\n    ],\n    ASTNode.Declaration.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.identifier_list,\n    [\n      [ETokenType.COMMA, ETokenType.ID],\n      [ENonTerminal.identifier_list, ETokenType.COMMA, ETokenType.ID]\n    ],\n    ASTNode.IdentifierList.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.init_declarator_list,\n    [\n      [ENonTerminal.single_declaration],\n      [ENonTerminal.init_declarator_list, ETokenType.COMMA, ETokenType.ID],\n      [ENonTerminal.init_declarator_list, ETokenType.COMMA, ETokenType.ID, ENonTerminal.array_specifier],\n      [\n        ENonTerminal.init_declarator_list,\n        ETokenType.COMMA,\n        ETokenType.ID,\n        ENonTerminal.array_specifier,\n        ETokenType.EQUAL,\n        ENonTerminal.initializer\n      ],\n      [ENonTerminal.init_declarator_list, ETokenType.COMMA, ETokenType.ID, ETokenType.EQUAL, ENonTerminal.initializer]\n    ],\n    ASTNode.InitDeclaratorList.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.single_declaration,\n    [\n      [ENonTerminal.fully_specified_type, ETokenType.ID],\n      [ENonTerminal.fully_specified_type, ETokenType.ID, ENonTerminal.array_specifier],\n      [\n        ENonTerminal.fully_specified_type,\n        ETokenType.ID,\n        ENonTerminal.array_specifier,\n        ETokenType.EQUAL,\n        ENonTerminal.initializer\n      ],\n      [ENonTerminal.fully_specified_type, ETokenType.ID, ETokenType.EQUAL, ENonTerminal.initializer]\n    ],\n    ASTNode.SingleDeclaration.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.initializer,\n    [\n      [ENonTerminal.assignment_expression],\n      [ETokenType.LEFT_BRACE, ENonTerminal.initializer_list, ETokenType.RIGHT_BRACE]\n    ],\n    // #if _VERBOSE\n    ASTNode.Initializer.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.initializer_list,\n    [[ENonTerminal.initializer], [ENonTerminal.initializer_list, ETokenType.COMMA, ENonTerminal.initializer]],\n    // #if _VERBOSE\n    ASTNode.InitializerList.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.expression_statement,\n    [[ETokenType.SEMICOLON], [ENonTerminal.expression, ETokenType.SEMICOLON]],\n    // #if _VERBOSE\n    ASTNode.ExpressionStatement.pool\n    // #endif\n  ),\n\n  // dangling else ambiguity\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.selection_statement,\n    [\n      [EKeyword.IF, ETokenType.LEFT_PAREN, ENonTerminal.expression, ETokenType.RIGHT_PAREN, ENonTerminal.statement],\n      [\n        EKeyword.IF,\n        ETokenType.LEFT_PAREN,\n        ENonTerminal.expression,\n        ETokenType.RIGHT_PAREN,\n        ENonTerminal.statement,\n        EKeyword.ELSE,\n        ENonTerminal.statement\n      ]\n    ],\n    // #if _VERBOSE\n    ASTNode.SelectionStatement.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.iteration_statement,\n    [\n      [EKeyword.WHILE, ETokenType.LEFT_PAREN, ENonTerminal.condition, ETokenType.RIGHT_PAREN, ENonTerminal.statement],\n      [\n        EKeyword.FOR,\n        ETokenType.LEFT_PAREN,\n        ENonTerminal.for_init_statement,\n        ENonTerminal.for_rest_statement,\n        ETokenType.RIGHT_PAREN,\n        ENonTerminal.statement\n      ]\n    ],\n    // #if _VERBOSE\n    ASTNode.IterationStatement.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.precision_specifier,\n    [\n      [\n        EKeyword.PRECISION,\n        ENonTerminal.precision_qualifier,\n        ENonTerminal.ext_builtin_type_specifier_nonarray,\n        ETokenType.SEMICOLON\n      ]\n    ],\n    ASTNode.PrecisionSpecifier.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.for_init_statement,\n    [[ENonTerminal.expression_statement], [ENonTerminal.declaration]],\n    // #if _VERBOSE\n    ASTNode.ForInitStatement.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.condition,\n    [\n      [ENonTerminal.expression],\n      [ENonTerminal.fully_specified_type, ETokenType.ID, ETokenType.EQUAL, ENonTerminal.initializer]\n    ],\n    // #if _VERBOSE\n    ASTNode.Condition.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.for_rest_statement,\n    [\n      [ENonTerminal.conditionopt, ETokenType.SEMICOLON],\n      [ENonTerminal.conditionopt, ETokenType.SEMICOLON, ENonTerminal.expression]\n    ],\n    // #if _VERBOSE\n    ASTNode.ForRestStatement.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.conditionopt,\n    [[ETokenType.EPSILON], [ENonTerminal.condition]],\n    // #if _VERBOSE\n    ASTNode.ConditionOpt.pool\n    // #endif\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.jump_statement,\n    [\n      [EKeyword.CONTINUE, ETokenType.SEMICOLON],\n      [EKeyword.BREAK, ETokenType.SEMICOLON],\n      [EKeyword.RETURN, ETokenType.SEMICOLON],\n      [EKeyword.RETURN, ENonTerminal.expression, ETokenType.SEMICOLON],\n      [EKeyword.DISCARD, ETokenType.SEMICOLON]\n    ],\n    ASTNode.JumpStatement.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.scope_brace,\n    [[ETokenType.LEFT_BRACE]],\n    ASTNode.ScopeBrace.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.scope_end_brace,\n    [[ETokenType.RIGHT_BRACE]],\n    ASTNode.ScopeEndBrace.pool\n  ),\n\n  ...GrammarUtils.createProductionWithOptions(\n    ENonTerminal.variable_identifier,\n    [[ETokenType.ID]],\n    ASTNode.VariableIdentifier.pool\n  )\n];\n\nconst createGrammar = () =>\n  Grammar.create(\n    ENonTerminal.gs_shader_program,\n    productionAndRules.map((item) => item[0])\n  );\n\nconst addTranslationRule = (sa: SematicAnalyzer) => {\n  for (let i = 0; i < productionAndRules.length; i++) {\n    const rule = productionAndRules[i][1];\n    if (rule) {\n      sa.addTranslationRule(i, rule);\n    }\n  }\n};\n\nexport { createGrammar, addTranslationRule };\n","import { ETokenType } from \"../common\";\nimport { ENonTerminal, Terminal } from \"../parser/GrammarSymbol\";\nimport Production from \"./Production\";\nimport GrammarUtils from \"./Utils\";\n\nexport default class StateItem {\n  static _id = 0;\n\n  readonly production: Production;\n  readonly position: number;\n  readonly lookaheadSet: Set<Terminal>;\n  readonly id: number;\n\n  _needReInfer = true;\n  get needReInfer() {\n    return this._needReInfer;\n  }\n  set needReInfer(v: boolean) {\n    this._needReInfer = v;\n  }\n\n  get curSymbol() {\n    return this.production.derivation[this.position];\n  }\n  get nextSymbol() {\n    return this.production.derivation[this.position + 1];\n  }\n\n  constructor(production: Production, position: number, lookahead: Iterable<Terminal>) {\n    this.production = production;\n    this.position = position;\n    this.lookaheadSet = new Set();\n    for (const la of lookahead) {\n      this.lookaheadSet.add(la);\n    }\n    this.id = StateItem._id++;\n  }\n\n  addLookahead(ts: Iterable<Terminal>) {\n    for (const t of ts) {\n      if (this.lookaheadSet.has(t)) continue;\n      this.lookaheadSet.add(t);\n      this.needReInfer = true;\n    }\n  }\n\n  symbolByOffset(offset: number) {\n    return this.production.derivation[this.position + offset];\n  }\n\n  canReduce() {\n    if (this.position > this.production.derivation.length - 1) return true;\n    else {\n      for (let i = this.position; i < this.production.derivation.length; i++) {\n        if (this.production.derivation[i] !== ETokenType.EPSILON) return false;\n      }\n      return true;\n    }\n  }\n\n  advance() {\n    // #if _VERBOSE\n    if (this.canReduce()) throw `Error: advance reduce-able parsing state item`;\n    // #endif\n    return new StateItem(this.production, this.position + 1, this.lookaheadSet);\n  }\n\n  // #if _VERBOSE\n  toString() {\n    const coreItem = this.production.derivation.map((item) => GrammarUtils.toString(item));\n    coreItem[this.position] = \".\" + (coreItem[this.position] ?? \"\");\n\n    return `${ENonTerminal[this.production.goal]} :=> ${coreItem.join(\"|\")} ;${Array.from(this.lookaheadSet)\n      .map((item) => GrammarUtils.toString(item))\n      .join(\"/\")}`;\n  }\n  // #endif\n}\n","import { Terminal } from \"../parser/GrammarSymbol\";\nimport Production from \"./Production\";\nimport StateItem from \"./StateItem\";\n\nexport default class State {\n  static closureMap: Map<string /** state mapKey */, State> = new Map();\n  static pool: Map<number, State> = new Map();\n  static _id = 0;\n\n  readonly id: number;\n  readonly cores: Set<StateItem>;\n  private _items: Set<StateItem>;\n  get items() {\n    return this._items;\n  }\n\n  closured = false;\n  get needReInfer() {\n    for (const core of this.cores) {\n      if (core.needReInfer) return true;\n    }\n    return false;\n  }\n\n  private _stateItemPool: Map<string /** Map ID */, StateItem> = new Map();\n\n  static create(cores: StateItem[]) {\n    const cacheKey = this.getMapKey(cores);\n    const state = this.closureMap.get(cacheKey);\n    if (state) {\n      for (const core of cores) {\n        // merge lookahead\n        state.createStateItem(core.production, core.position, core.lookaheadSet);\n      }\n      return state;\n    }\n\n    const newState = new State(cores);\n    this.closureMap.set(cacheKey, newState);\n    return newState;\n  }\n\n  // TODO: any optimization?\n  static getMapKey(cores: StateItem[]) {\n    return cores.map((item) => `${item.production.id},${item.position}`).join(\";\");\n  }\n\n  private constructor(cores: Iterable<StateItem>) {\n    this.id = State._id++;\n    this._items = new Set([...cores]);\n    this.cores = new Set([...cores]);\n    for (const it of cores) {\n      const itemMapKey = this.getStateItemMapKey(it.production, it.position);\n      this._stateItemPool.set(itemMapKey, it);\n    }\n    State.pool.set(this.id, this);\n  }\n\n  // TODO: any optimization?\n  getStateItemMapKey(production: Production, position: number) {\n    return `${production.id},${position}`;\n  }\n\n  createStateItem(production: Production, position: number, lookaheadSet: Iterable<Terminal> = new Set()) {\n    const mapId = this.getStateItemMapKey(production, position);\n    const item = this._stateItemPool.get(mapId);\n    if (item) {\n      for (const la of lookaheadSet) {\n        if (item.lookaheadSet.has(la)) continue;\n        item.lookaheadSet.add(la);\n        item.needReInfer = true;\n      }\n      return item;\n    }\n    const newItem = new StateItem(production, position, lookaheadSet);\n    this._stateItemPool.set(mapId, newItem);\n    return newItem;\n  }\n}\n","import { Grammar } from \"../parser/Grammar\";\nimport { ENonTerminal, GrammarSymbol, Terminal } from \"../parser/GrammarSymbol\";\nimport State from \"./State\";\nimport StateItem from \"./StateItem\";\nimport GrammarUtils from \"./Utils\";\nimport { EKeyword, ETokenType } from \"../common\";\nimport Utils from \"./Utils\";\nimport { ActionInfo, ActionTable, EAction, GotoTable, StateActionTable, StateGotoTable } from \"./types\";\n\n/**\n * The [LALR1](https://web.stanford.edu/class/archive/cs/cs143/cs143.1128/handouts/140%20LALR%20Parsing.pdf) Parser generator\n */\nexport class LALR1 {\n  readonly firstSetMap: Map<ENonTerminal, Set<Terminal>> = new Map();\n  readonly followSetMap: Map<ENonTerminal, Set<Terminal>> = new Map();\n\n  readonly actionTable: StateActionTable = new Map();\n  readonly gotoTable: StateGotoTable = new Map();\n  private grammar: Grammar;\n\n  /** For circle detect */\n  private _firstSetNTStack: ENonTerminal[] = [];\n\n  constructor(grammar: Grammar) {\n    this.grammar = grammar;\n  }\n\n  generate() {\n    this.computeFirstSet();\n    this.buildStateTable();\n  }\n\n  private buildStateTable() {\n    const startStateItemCore = [new StateItem(this.grammar.productions[0], 0, [ETokenType.EOF])];\n    const startState = State.create(startStateItemCore);\n    this._extendState(startState);\n  }\n\n  private _extendState(state: State) {\n    if (!state.needReInfer) return;\n    this._closure(state);\n    const newStates = this._inferNextState(state);\n    for (const ns of newStates) {\n      this._extendState(ns);\n    }\n  }\n\n  private _closure(state: State) {\n    for (const core of state.cores) {\n      if (!core.canReduce()) {\n        this._extendStateItem(state, core);\n      }\n    }\n    state.closured = true;\n    return state;\n  }\n\n  private _extendStateItem(state: State, item: StateItem) {\n    if (GrammarUtils.isTerminal(item.curSymbol)) return;\n\n    const productionList = this.grammar.getProductionList(<ENonTerminal>item.curSymbol);\n\n    if (item.nextSymbol) {\n      let newLookaheadSet = new Set<Terminal>();\n      let lastFirstSet: Set<Terminal> | undefined;\n      let terminalExist = false;\n      // when A :=> a.BC, a;  ==》 B :=> .xy, First(Ca)\n      // newLookAhead = First(Ca)\n      for (let i = 1, nextSymbol = item.symbolByOffset(1); !!nextSymbol; nextSymbol = item.symbolByOffset(++i)) {\n        if (GrammarUtils.isTerminal(nextSymbol)) {\n          newLookaheadSet.add(<Terminal>nextSymbol);\n          terminalExist = true;\n          break;\n        }\n        lastFirstSet = this.firstSetMap.get(<ENonTerminal>nextSymbol)!;\n        for (const t of lastFirstSet) {\n          newLookaheadSet.add(t);\n        }\n        if (!lastFirstSet.has(ETokenType.EPSILON)) break;\n      }\n      if (!terminalExist && lastFirstSet?.has(ETokenType.EPSILON)) {\n        for (const t of item.lookaheadSet) {\n          newLookaheadSet.add(t);\n        }\n      }\n\n      for (const production of productionList) {\n        const newItem = state.createStateItem(production, 0);\n        if (!state.items.has(newItem) || !Utils.isSubSet(newLookaheadSet, newItem.lookaheadSet)) {\n          state.items.add(newItem);\n          newItem.addLookahead(newLookaheadSet);\n          this._extendStateItem(state, newItem);\n        }\n      }\n    } else {\n      for (const production of productionList) {\n        const newItem = state.createStateItem(production, 0);\n        if (!state.items.has(newItem) || !Utils.isSubSet(item.lookaheadSet, newItem.lookaheadSet)) {\n          state.items.add(newItem);\n          newItem.addLookahead(item.lookaheadSet);\n          this._extendStateItem(state, newItem);\n        }\n      }\n    }\n  }\n\n  private _inferNextState(state: State): Set<State> {\n    const coreMap: Map<GrammarSymbol, Set<StateItem>> = new Map();\n    const stateActionTable: ActionTable = this.actionTable.get(state.id) ?? new Map();\n    const stateGotoTable: GotoTable = this.gotoTable.get(state.id) ?? new Map();\n\n    this.actionTable.set(state.id, stateActionTable);\n    this.gotoTable.set(state.id, stateGotoTable);\n\n    for (const stateItem of state.items) {\n      if (stateItem.canReduce()) {\n        let action: ActionInfo;\n        if (stateItem.production.goal !== ENonTerminal.START) {\n          action = {\n            action: EAction.Reduce,\n            target: stateItem.production.id\n          };\n        } else {\n          action = { action: EAction.Accept };\n        }\n\n        for (const t of stateItem.lookaheadSet) {\n          this._addAction(stateActionTable, t, action);\n        }\n      } else {\n        const nextItem = stateItem.advance();\n        Utils.addMapSetItem(coreMap, stateItem.curSymbol, nextItem);\n      }\n\n      stateItem.needReInfer = false;\n    }\n\n    const newStates = new Set<State>();\n    for (const [gs, cores] of coreMap.entries()) {\n      const newState = State.create(Array.from(cores));\n      if (GrammarUtils.isTerminal(gs)) {\n        this._addAction(stateActionTable, <Terminal>gs, {\n          action: EAction.Shift,\n          target: newState.id\n        });\n      } else {\n        stateGotoTable.set(<ENonTerminal>gs, newState.id);\n      }\n\n      newStates.add(newState);\n    }\n\n    return newStates;\n  }\n\n  /** Resolve shift-reduce/reduce-reduce conflict detect */\n  private _addAction(table: ActionTable, terminal: Terminal, action: ActionInfo) {\n    const exist = table.get(terminal);\n    if (exist && !Utils.isActionEqual(exist, action)) {\n      // Resolve dangling else ambiguity\n      if (terminal === EKeyword.ELSE && exist.action === EAction.Shift && action.action === EAction.Reduce) {\n        return;\n      } else {\n        // #if _VERBOSE\n        console.warn(\n          `conflict detect: <Terminal ${GrammarUtils.toString(terminal)}>`,\n          Utils.printAction(exist),\n          \" -> \",\n          Utils.printAction(action)\n        );\n        // #endif\n      }\n    }\n    table.set(terminal, action);\n  }\n\n  // https://people.cs.pitt.edu/~jmisurda/teaching/cs1622/handouts/cs1622-first_and_follow.pdf\n  private computeFirstSet() {\n    for (const production of this.grammar.productions.slice(1)) {\n      this._computeFirstSetForNT(production.goal);\n    }\n  }\n\n  private _computeFirstSetForNT(NT: ENonTerminal) {\n    // circle detect\n    const idx = this._firstSetNTStack.findIndex((item) => item === NT);\n    if (idx !== -1) {\n      const computingFS = this.firstSetMap.get(NT)!;\n      const len = this._firstSetNTStack.length;\n      for (let i = len - 1; i > idx; i--) {\n        const curNT = this._firstSetNTStack[i];\n        this.firstSetMap.set(curNT, computingFS);\n      }\n      return computingFS;\n    }\n    this._firstSetNTStack.push(NT);\n\n    const productionList = this.grammar.getProductionList(NT);\n    const firstSet = new Set<Terminal>();\n    this.firstSetMap.set(NT, firstSet);\n    if (this.grammar.isNullableNT(NT)) firstSet.add(ETokenType.EPSILON);\n\n    for (const production of productionList) {\n      let i = 0;\n      for (; i < production.derivation.length; i++) {\n        const gs = production.derivation[i];\n        if (GrammarUtils.isTerminal(gs)) {\n          firstSet.add(<Terminal>gs);\n          break;\n        }\n\n        const succeedFirstSet = this._computeFirstSetForNT(<ENonTerminal>gs);\n\n        for (const item of succeedFirstSet) {\n          if (item !== ETokenType.EPSILON) firstSet.add(item);\n        }\n        if (!this.grammar.isNullableNT(<ENonTerminal>gs)) break;\n      }\n      if (i === production.derivation.length) firstSet.add(ETokenType.EPSILON);\n    }\n\n    this._firstSetNTStack.pop();\n    return firstSet;\n  }\n}\n","import { Grammar } from \"./Grammar\";\nimport { ENonTerminal, GrammarSymbol } from \"./GrammarSymbol\";\nimport { BaseToken } from \"../common/BaseToken\";\nimport { ETokenType } from \"../common\";\nimport { EAction, StateActionTable, StateGotoTable } from \"../lalr/types\";\nimport { ASTNode, TreeNode } from \"./AST\";\nimport SematicAnalyzer from \"./SemanticAnalyzer\";\nimport { TraceStackItem } from \"./types\";\nimport { addTranslationRule, createGrammar } from \"../lalr/CFG\";\nimport { LALR1 } from \"../lalr\";\nimport { ParserUtils } from \"../ParserUtils\";\nimport { Logger } from \"@galacean/engine\";\nimport { GSError, GSErrorName } from \"../GSError\";\nimport { ShaderLab } from \"../ShaderLab\";\nimport { ShaderLabUtils } from \"../ShaderLabUtils\";\n\n/**\n * The syntax parser and sematic analyzer of `ShaderLab` compiler\n */\nexport class ShaderTargetParser {\n  readonly actionTable: StateActionTable;\n  readonly gotoTable: StateGotoTable;\n  readonly grammar: Grammar;\n  readonly sematicAnalyzer: SematicAnalyzer;\n  private _traceBackStack: (TraceStackItem | number)[] = [];\n\n  private get curState() {\n    return this._traceBackStack[this._traceBackStack.length - 1] as number;\n  }\n  private get stateActionTable() {\n    return this.actionTable.get(this.curState)!;\n  }\n  private get stateGotoTable() {\n    return this.gotoTable.get(this.curState);\n  }\n\n  // #if _VERBOSE\n  /** @internal */\n  get errors() {\n    return this.sematicAnalyzer.errors;\n  }\n  // #endif\n\n  static _singleton: ShaderTargetParser;\n\n  static create() {\n    if (!this._singleton) {\n      const grammar = createGrammar();\n      const generator = new LALR1(grammar);\n      generator.generate();\n      this._singleton = new ShaderTargetParser(generator.actionTable, generator.gotoTable, grammar);\n      addTranslationRule(this._singleton.sematicAnalyzer);\n    }\n\n    return this._singleton;\n  }\n\n  private constructor(actionTable: StateActionTable, gotoTable: StateGotoTable, grammar: Grammar) {\n    this.actionTable = actionTable;\n    this.gotoTable = gotoTable;\n    this.grammar = grammar;\n    this.sematicAnalyzer = new SematicAnalyzer();\n  }\n\n  parse(tokens: Generator<BaseToken, BaseToken>): ASTNode.GLShaderProgram | null {\n    this.sematicAnalyzer.reset();\n    const start = performance.now();\n    const { _traceBackStack: traceBackStack, sematicAnalyzer } = this;\n    traceBackStack.push(0);\n\n    let nextToken = tokens.next();\n    let loopCount = 0;\n    while (true) {\n      loopCount += 1;\n      const token = nextToken.value;\n\n      const actionInfo = this.stateActionTable.get(token.type);\n      if (actionInfo?.action === EAction.Shift) {\n        traceBackStack.push(token, actionInfo.target!);\n        nextToken = tokens.next();\n      } else if (actionInfo?.action === EAction.Accept) {\n        Logger.info(\n          `[pass compilation - parser] Accept! State automata run ${loopCount} times! cost time ${\n            performance.now() - start\n          }ms`\n        );\n        sematicAnalyzer.acceptRule?.(sematicAnalyzer);\n        return sematicAnalyzer.semanticStack.pop() as ASTNode.GLShaderProgram;\n      } else if (actionInfo?.action === EAction.Reduce) {\n        const target = actionInfo.target!;\n        const reduceProduction = this.grammar.getProductionByID(target)!;\n        const translationRule = sematicAnalyzer.getTranslationRule(reduceProduction.id);\n\n        const values: (TreeNode | BaseToken)[] = [];\n\n        for (let i = reduceProduction.derivation.length - 1; i >= 0; i--) {\n          if (reduceProduction.derivation[i] === ETokenType.EPSILON) continue;\n          traceBackStack.pop();\n          const token = traceBackStack.pop();\n          if (token instanceof BaseToken) {\n            values.unshift(token);\n          } else {\n            const astNode = sematicAnalyzer.semanticStack.pop()!;\n            values.unshift(astNode);\n          }\n        }\n        translationRule?.(sematicAnalyzer, ...values);\n\n        const gotoTable = this.stateGotoTable;\n        traceBackStack.push(reduceProduction.goal);\n\n        const nextState = gotoTable?.get(reduceProduction.goal)!;\n        traceBackStack.push(nextState);\n        continue;\n      } else {\n        const error = ShaderLabUtils.createGSError(\n          `Unexpected token ${token.lexeme}`,\n          GSErrorName.CompilationError,\n          ShaderLab._processingPassText,\n          token.location\n        );\n        // #if _VERBOSE\n        this.sematicAnalyzer.errors.push(<GSError>error);\n        // #endif\n        return null;\n      }\n    }\n  }\n\n  // #if _VERBOSE\n  private _printStack(nextToken: BaseToken) {\n    let str = \"\";\n    for (let i = 0; i < this._traceBackStack.length - 1; i++) {\n      const state = <ENonTerminal>this._traceBackStack[i++];\n      const token = this._traceBackStack[i];\n      str += `State${state} - ${(<BaseToken>token).lexeme ?? ParserUtils.toString(token as GrammarSymbol)}; `;\n    }\n    str += `State${this._traceBackStack[this._traceBackStack.length - 1]} --- ${nextToken.lexeme}`;\n    Logger.info(str);\n  }\n  // #endif\n}\n","function _type_of(obj) {\n    \"@swc/helpers - typeof\";\n\n    return obj && typeof Symbol !== \"undefined\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n}\nexport { _type_of as _ };\n","import { BaseToken } from \"../common/BaseToken\";\nimport { ShaderRange } from \"../common\";\nimport { ShaderLabUtils } from \"../ShaderLabUtils\";\n// #if _VERBOSE\nimport { GSErrorName } from \"../GSError\";\n// #endif\n\nexport class MacroDefine {\n  private _replaceRegex?: RegExp;\n  private readonly _argsLexemes: string[];\n\n  get isFunction(): boolean {\n    return !!this.args?.length;\n  }\n\n  constructor(\n    public readonly macro: BaseToken,\n    public readonly body?: BaseToken,\n    public readonly location?: ShaderRange,\n    public readonly args?: BaseToken[]\n  ) {\n    if (args) {\n      this._argsLexemes = this.args.map((item) => item.lexeme);\n      this._replaceRegex = new RegExp(`\\\\b(${this._argsLexemes.join(\"|\")})\\\\b`, \"g\");\n    }\n  }\n\n  expandFunctionBody(args: string[]): string {\n    if (args.length !== this.args?.length) {\n      throw ShaderLabUtils.createGSError(\"mismatched function macro\", GSErrorName.PreprocessorError, \"\", this.location);\n    }\n\n    return this.body.lexeme.replace(this._replaceRegex, (m) => {\n      return args[this._argsLexemes.indexOf(m)];\n    });\n  }\n}\n","import { ShaderRange } from \"../common\";\nimport { ExpandSegment } from \"./PpParser\";\n// #if _VERBOSE\nimport PpSourceMap, { MapRange } from \"./sourceMap\";\n// #endif\n\nexport class PpUtils {\n  static expand(\n    segments: ExpandSegment[],\n    source: string,\n    // #if _VERBOSE\n    sourceMap?: PpSourceMap\n    //#endif\n  ) {\n    const ret: string[] = [];\n    let startIdx = 0;\n    let generatedIdx = 0;\n\n    for (const seg of segments) {\n      const originSlice = source.slice(startIdx, seg.rangeInBlock.start.index);\n      ret.push(originSlice, seg.replace);\n\n      const generatedIdxEnd = generatedIdx + originSlice.length + seg.replace.length;\n\n      // #if _VERBOSE\n      const mapRange = new MapRange(seg.block, seg.rangeInBlock, {\n        start: generatedIdx + originSlice.length,\n        end: generatedIdxEnd\n      });\n      sourceMap?.addMapRange(mapRange);\n      // #endif\n\n      startIdx = seg.rangeInBlock.end.index;\n      generatedIdx = generatedIdxEnd;\n    }\n    ret.push(source.slice(startIdx));\n    return ret.join(\"\");\n  }\n\n  static assembleSegments(\n    segments: {\n      range: ShaderRange;\n      replace: string;\n    }[],\n    source: string\n  ) {\n    const ret: string[] = [];\n    let startIdx = 0;\n    for (const seg of segments) {\n      const originSlice = source.slice(startIdx, seg.range.start.index);\n      ret.push(originSlice, seg.replace);\n      startIdx = seg.range.end.index;\n    }\n    ret.push(source.slice(startIdx));\n    return ret.join(\"\");\n  }\n}\n","import { ShaderRange, ShaderPosition } from \"../common\";\nimport LexerUtils from \"../lexer/Utils\";\n// #if _VERBOSE\nimport PpSourceMap from \"./sourceMap\";\n// #endif\nimport BaseScanner from \"../common/BaseScanner\";\nimport { BaseToken, EOF } from \"../common/BaseToken\";\nimport { EPpKeyword, EPpToken, PpKeyword } from \"./constants\";\nimport { PpUtils } from \"./Utils\";\nimport { ShaderLab } from \"../ShaderLab\";\n\nexport type OnToken = (token: BaseToken, scanner: PpScanner) => void;\n\nexport default class PpScanner extends BaseScanner {\n  private static _splitCharacters = /[\\w#.]/;\n\n  private macroLvl = 0;\n\n  // #if _VERBOSE\n  readonly sourceMap = new PpSourceMap();\n  readonly file: string;\n  readonly blockRange?: ShaderRange;\n  // #endif\n\n  constructor(\n    source: string,\n    // #if _VERBOSE\n    file = \"__main__\",\n    blockRange?: ShaderRange\n    // #endif\n  ) {\n    super(source);\n    // #if _VERBOSE\n    this.file = file;\n    this.blockRange = blockRange;\n    // #endif\n  }\n\n  /**\n   * Advance to directive\n   * @param expandOnToken callback on encountering token.\n   */\n  scanDirective(expandOnToken?: OnToken): BaseToken<number> {\n    const directive = this._advanceToDirective(expandOnToken);\n    if ([EPpKeyword.if, EPpKeyword.ifdef, EPpKeyword.ifndef].includes(<any>directive?.type)) {\n      this.macroLvl += 1;\n    } else if (<any>directive?.type === EPpKeyword.endif) {\n      this.macroLvl -= 1;\n    }\n    return directive;\n  }\n\n  /**\n   * @param nonLetterChar should not be space\n   */\n  scanWordsUntilChar(nonLetterChar: string): BaseToken[] {\n    const ret: BaseToken[] = [];\n    while (true) {\n      this.skipSpace(true);\n      if (LexerUtils.isLetter(this.getCurChar())) {\n        ret.push(this.scanWord());\n      } else if (this.getCurChar() === nonLetterChar) {\n        this.advance();\n        return ret;\n      } else {\n        this.advance();\n      }\n    }\n  }\n\n  scanWord(skipNonLetter = false): BaseToken {\n    if (skipNonLetter) {\n      while (!LexerUtils.isLetter(this.getCurChar()) && !this.isEnd()) {\n        this.advance();\n      }\n    } else {\n      this.skipSpace(true);\n    }\n\n    if (this.isEnd()) return EOF;\n\n    const start = this._currentIndex;\n    while (LexerUtils.isLetter(this.getCurChar()) && !this.isEnd()) {\n      this.advance();\n    }\n    const end = this._currentIndex;\n    const word = this._source.slice(start, end);\n    if (end === start) {\n      this.throwError(this.getShaderPosition(), \"no word found.\");\n    }\n    const kw = PpKeyword.get(word);\n    if (kw) {\n      const token = BaseToken.pool.get();\n      token.set(kw, word, this.getShaderPosition());\n      return token;\n    }\n\n    const token = BaseToken.pool.get();\n    token.set(EPpToken.id, word, this.getShaderPosition(word.length));\n    return token;\n  }\n\n  getShaderPosition(offset /** offset from starting point */ = 0) {\n    return ShaderLab.createPosition(\n      this._currentIndex - offset,\n      // #if _VERBOSE\n      this.line,\n      this.column - offset\n      // #endif\n    );\n  }\n\n  /**\n   * @param onToken callback when encounter a token\n   * @returns token split by space\n   */\n  override scanToken(onToken?: OnToken): BaseToken | undefined {\n    this.skipSpace(true);\n    this._skipComments();\n    if (this.isEnd()) {\n      return;\n    }\n    const start = this._currentIndex;\n    while (PpScanner._splitCharacters.test(this.getCurChar()) && !this.isEnd()) {\n      this._advance();\n    }\n\n    // Not advance\n    if (start === this._currentIndex) {\n      this._advance();\n      return this.scanToken(onToken);\n    }\n\n    const lexeme = this._source.slice(start, this._currentIndex);\n\n    const ret = BaseToken.pool.get();\n    ret.set(\n      PpKeyword.has(lexeme) ? PpKeyword.get(lexeme) : EPpToken.id,\n      lexeme,\n      this.getShaderPosition(this._currentIndex - start)\n    );\n    onToken?.(ret, this);\n    return ret;\n  }\n\n  scanQuotedString(): BaseToken<EPpToken.string_const> {\n    this.skipSpace(true);\n    if (this.getCurChar() !== '\"') {\n      this.throwError(this.getShaderPosition(), \"unexpected char, expected '\\\"'\");\n    }\n    const ShaderPosition = this.getShaderPosition();\n    this._advance();\n    const start = this._currentIndex;\n    while (this.getCurChar() !== '\"' && !this.isEnd()) this._advance();\n    if (this.isEnd()) {\n      this.throwError(this.getShaderPosition(), \"unexpected char, expected '\\\"'\");\n    }\n    const word = this._source.slice(start, this._currentIndex);\n\n    const token = BaseToken.pool.get();\n    token.set(EPpToken.string_const, word, ShaderPosition);\n    return token;\n  }\n\n  scanToChar(char: string) {\n    const source = this._source;\n    while (source[this._currentIndex] !== char && !this.isEnd()) {\n      this.advance();\n    }\n  }\n\n  scanMacroBranchChunk(): {\n    token: BaseToken<EPpToken.chunk>;\n    nextDirective: BaseToken;\n  } {\n    const start = this._currentIndex;\n    const ShaderPosition = this.getShaderPosition();\n\n    const startLvl = this.macroLvl;\n    let directive = this.scanDirective()!;\n\n    while (true) {\n      if (directive.type === EPpKeyword.endif && startLvl - 1 === this.macroLvl) break;\n      else if ([EPpKeyword.elif, EPpKeyword.else].includes(<EPpKeyword>directive.type) && startLvl === this.macroLvl)\n        break;\n      directive = this.scanDirective()!;\n    }\n\n    const chunk = this._source.slice(start, this._currentIndex - directive.lexeme.length - 1);\n    const token = BaseToken.pool.get();\n    token.set(EPpToken.chunk, chunk, ShaderPosition);\n    return { token, nextDirective: directive };\n  }\n\n  scanPairedBlock(lc: string, rc: string): void {\n    this.scanToChar(lc);\n    let level = 0;\n    const source = this._source;\n\n    do {\n      const curChar = source[this._currentIndex];\n\n      if (curChar === lc) {\n        level++;\n      } else if (curChar === rc) {\n        level--;\n      }\n      this._advance();\n    } while (level > 0);\n  }\n\n  /**\n   * @returns end ShaderPosition\n   */\n  scanRemainMacro(): ShaderPosition {\n    const startLvl = this.macroLvl;\n    let directive = this.scanDirective()!;\n    while (!this.isEnd() && (directive.type !== EPpKeyword.endif || startLvl - 1 !== this.macroLvl)) {\n      directive = this.scanDirective()!;\n    }\n    return this.getShaderPosition();\n  }\n\n  peekNonSpace() {\n    let current = this._currentIndex;\n    while (/\\s/.test(this._source[current])) {\n      current += 1;\n    }\n    return this._source[current];\n  }\n\n  scanInteger() {\n    const start = this._currentIndex;\n    while (LexerUtils.isNum(this.getCurChar())) {\n      this.advance();\n    }\n    if (this._currentIndex === start) {\n      this.throwError(this.getShaderPosition(), \"no integer found\");\n    }\n    const integer = this._source.slice(start, this._currentIndex);\n\n    const token = BaseToken.pool.get();\n    token.set(EPpToken.int_constant, integer, this.getShaderPosition());\n    return token;\n  }\n\n  /**\n   * Skip comments\n   */\n  scanLineRemain() {\n    this.skipSpace(false);\n    const start = this._currentIndex;\n\n    const comments: ShaderRange[] = [];\n\n    while (this.getCurChar() !== \"\\n\") {\n      if (this.isEnd()) {\n        const line = this._source.slice(start, this._currentIndex);\n\n        const token = BaseToken.pool.get();\n        token.set(EPpToken.line_remain, line, this.getShaderPosition(line.length));\n        return token;\n      }\n      this.advance();\n      const commentRange = this._skipComments();\n      if (commentRange) {\n        commentRange.start.index -= start;\n        commentRange.end.index -= start;\n        comments.push(commentRange);\n      }\n    }\n    let line = this._source.slice(start, this._currentIndex);\n    if (comments.length) {\n      // filter comments\n      line = PpUtils.assembleSegments(\n        comments.map((item) => ({ range: item, replace: \"\" })),\n        line\n      );\n    }\n\n    const token = BaseToken.pool.get();\n    token.set(EPpToken.line_remain, line, this.getShaderPosition(line.length));\n    return token;\n  }\n\n  private _advanceToDirective(onToken?: OnToken): BaseToken | undefined {\n    while (true) {\n      const token = this.scanToken(onToken);\n      if (token?.lexeme.startsWith(\"#\")) return token;\n      if (this.isEnd()) return;\n    }\n  }\n\n  private _skipComments(): ShaderRange | undefined {\n    if (this.peek(2) === \"//\") {\n      const start = this.getShaderPosition();\n      // single line comments\n      while (this.getCurChar() !== \"\\n\" && !this.isEnd()) {\n        this._advance();\n      }\n      return ShaderLab.createRange(start, this.getCurPosition());\n    } else if (this.peek(2) === \"/*\") {\n      const start = this.getShaderPosition();\n      //  multi-line comments\n      this.advance(2);\n      while (this.peek(2) !== \"*/\" && !this.isEnd()) {\n        this._advance();\n      }\n      this.advance(2);\n      return ShaderLab.createRange(start, this.getShaderPosition());\n    }\n  }\n}\n","import { ShaderPosition, ShaderRange } from \"../common\";\nimport LexerUtils from \"../lexer/Utils\";\nimport { MacroDefine } from \"./MacroDefine\";\nimport { BaseToken } from \"../common/BaseToken\";\nimport { EPpKeyword, EPpToken, PpConstant } from \"./constants\";\nimport PpScanner from \"./PpScanner\";\nimport { PpUtils } from \"./Utils\";\nimport { ShaderLab } from \"../ShaderLab\";\nimport { ShaderPass } from \"@galacean/engine\";\nimport { ShaderLabUtils } from \"../ShaderLabUtils\";\nimport { GSErrorName } from \"../GSError\";\n// #if _VERBOSE\nimport PpSourceMap, { BlockInfo } from \"./sourceMap\";\n// #endif\n\nexport interface ExpandSegment {\n  // #if _VERBOSE\n  block?: BlockInfo;\n  // #endif\n  rangeInBlock: ShaderRange;\n  replace: string;\n}\n\n/** @internal */\nexport class PpParser {\n  private static _definedMacros: Map<string, MacroDefine> = new Map();\n  private static _expandSegmentsStack: ExpandSegment[][] = [[]];\n\n  /** Referenced by branch macro or defined operator */\n  private static _branchMacros: Set<string> = new Set();\n\n  private static _includeMap: Record<string, string>;\n  private static _basePathForIncludeKey: string;\n\n  // #if _VERBOSE\n  static _errors: Error[] = [];\n  // #endif\n\n  static reset(includeMap: Record<string, string>, basePathForIncludeKey: string) {\n    this._definedMacros.clear();\n    this._expandSegmentsStack.length = 0;\n    this._expandSegmentsStack.push([]);\n    this._branchMacros.clear();\n    this.addPredefinedMacro(\"GL_ES\");\n    this._includeMap = includeMap;\n    this._basePathForIncludeKey = basePathForIncludeKey;\n    // #if _VERBOSE\n    this._errors.length = 0;\n    // #endif\n  }\n\n  static addPredefinedMacro(macro: string, value?: string) {\n    const tk = BaseToken.pool.get();\n    tk.set(EPpToken.id, macro);\n\n    let macroBody: BaseToken | undefined;\n    if (value) {\n      macroBody = BaseToken.pool.get();\n      macroBody.set(EPpToken.id, value);\n    }\n\n    this._definedMacros.set(macro, new MacroDefine(tk, macroBody));\n  }\n\n  static parse(scanner: PpScanner): string | null {\n    while (!scanner.isEnd()) {\n      const directive = scanner.scanDirective(this._onToken.bind(this))!;\n      if (scanner.isEnd()) break;\n      switch (directive.type) {\n        case EPpKeyword.define:\n          this._parseDefine(scanner);\n          break;\n\n        case EPpKeyword.undef:\n          this._parseUndef(scanner);\n          break;\n\n        case EPpKeyword.if:\n          this._parseIf(scanner);\n          break;\n\n        case EPpKeyword.ifndef:\n          this._parseIfNdef(scanner);\n          break;\n\n        case EPpKeyword.ifdef:\n          this._parseIfDef(scanner);\n          break;\n\n        case EPpKeyword.include:\n          this._parseInclude(scanner);\n          break;\n      }\n    }\n    // #if _VERBOSE\n    if (this._errors.length > 0) return null;\n    // #endif\n\n    return PpUtils.expand(this.expandSegments, scanner.source, scanner.sourceMap);\n  }\n\n  private static get expandSegments() {\n    return this._expandSegmentsStack[this._expandSegmentsStack.length - 1];\n  }\n\n  private static reportError(loc: ShaderRange | ShaderPosition, message: string, source: string, file: string) {\n    const error = ShaderLabUtils.createGSError(message, GSErrorName.PreprocessorError, source, loc, file);\n    // #if _VERBOSE\n    this._errors.push(error);\n    // #endif\n  }\n\n  private static _parseInclude(scanner: PpScanner) {\n    const start = scanner.getShaderPosition(8);\n\n    scanner.skipSpace(true);\n    const id = scanner.scanQuotedString();\n    let includedPath: string;\n    // builtin path\n    if (id.lexeme[0] !== \".\") {\n      includedPath = id.lexeme;\n    } else {\n      // relative path\n      // @ts-ignore\n      includedPath = new URL(id.lexeme, this._basePathForIncludeKey).href.substring(ShaderPass._shaderRootPath.length);\n    }\n\n    scanner.scanToChar(\"\\n\");\n    const end = scanner.getShaderPosition();\n    const chunk = this._includeMap[includedPath];\n    if (!chunk) {\n      this.reportError(id.location, `Shader slice \"${includedPath}\" not founded.`, scanner.source, scanner.file);\n      return;\n    }\n\n    const range = ShaderLab.createRange(start, end);\n    const expanded = this._expandMacroChunk(chunk, range, id.lexeme);\n    // #if _VERBOSE\n    const block = new BlockInfo(id.lexeme, undefined, expanded.sourceMap);\n    // #endif\n    this.expandSegments.push({\n      // #if _VERBOSE\n      block,\n      // #endif\n      rangeInBlock: range,\n      replace: expanded.content\n    });\n  }\n\n  private static _parseIfDef(scanner: PpScanner) {\n    const start = scanner.current - 6;\n\n    const id = scanner.scanWord();\n    this._addEmptyReplace(scanner, start);\n    this._branchMacros.add(id.lexeme);\n\n    const macro = this._definedMacros.get(id.lexeme);\n    scanner.skipSpace(true);\n\n    const { token: bodyChunk, nextDirective } = scanner.scanMacroBranchChunk();\n    if (!!macro) {\n      const end = nextDirective.type === EPpKeyword.endif ? scanner.getShaderPosition() : scanner.scanRemainMacro();\n\n      const expanded = this._expandMacroChunk(bodyChunk.lexeme, bodyChunk.location, scanner);\n\n      // #if _VERBOSE\n      const block = new BlockInfo(scanner.file, scanner.blockRange, expanded.sourceMap);\n      // #endif\n      const range = ShaderLab.createRange(bodyChunk.location.start, end);\n\n      this.expandSegments.push({\n        // #if _VERBOSE\n        block,\n        // #endif\n        rangeInBlock: range,\n        replace: expanded.content\n      });\n\n      return;\n    }\n\n    this.expandSegments.pop();\n    this._addEmptyReplace(scanner, start);\n\n    this._parseMacroBranch(<any>nextDirective.type, scanner);\n  }\n\n  private static _parseMacroBranch(\n    directive: EPpKeyword.elif | EPpKeyword.else | EPpKeyword.endif,\n    scanner: PpScanner\n  ) {\n    if (directive === EPpKeyword.endif) {\n      return;\n    }\n\n    const start = scanner.current;\n\n    if (directive === EPpKeyword.else) {\n      const { token: elseChunk } = scanner.scanMacroBranchChunk();\n      const expanded = this._expandMacroChunk(elseChunk.lexeme, elseChunk.location, scanner);\n      // #if _VERBOSE\n      const block = new BlockInfo(scanner.file, scanner.blockRange, expanded.sourceMap);\n      // #endif\n      const startPosition = ShaderLab.createPosition(start);\n      const range = ShaderLab.createRange(startPosition, scanner.getShaderPosition());\n      this.expandSegments.push({\n        // #if _VERBOSE\n        block,\n        // #endif\n        rangeInBlock: range,\n        replace: expanded.content\n      });\n    } else if (directive === EPpKeyword.elif) {\n      const constantExpr = this._parseConstantExpression(scanner);\n      const { token: bodyChunk, nextDirective } = scanner.scanMacroBranchChunk();\n      if (!!constantExpr) {\n        const end = nextDirective.type === EPpKeyword.endif ? scanner.current : scanner.scanRemainMacro().index;\n        const expanded = this._expandMacroChunk(bodyChunk.lexeme, bodyChunk.location, scanner);\n        // #if _VERBOSE\n        const block = new BlockInfo(scanner.file, scanner.blockRange, expanded.sourceMap);\n        // #endif\n        const startPosition = ShaderLab.createPosition(start);\n        const endPosition = ShaderLab.createPosition(end);\n        const range = ShaderLab.createRange(startPosition, endPosition);\n        this.expandSegments.push({\n          // #if _VERBOSE\n          block,\n          // #endif\n          rangeInBlock: range,\n          replace: expanded.content\n        });\n      } else {\n        // #if _VERBOSE\n        const block = new BlockInfo(scanner.file, scanner.blockRange);\n        // #endif\n        const startPosition = ShaderLab.createPosition(start);\n        const endPosition = ShaderLab.createPosition(scanner.current);\n        const range = ShaderLab.createRange(startPosition, endPosition);\n        this.expandSegments.push({\n          // #if _VERBOSE\n          block,\n          // #endif\n          rangeInBlock: range,\n          replace: \"\"\n        });\n        this._parseMacroBranch(<any>nextDirective.type, scanner);\n      }\n    }\n  }\n\n  private static _parseConstantExpression(scanner: PpScanner) {\n    scanner.skipSpace(true);\n    return this._parseLogicalOrExpression(scanner);\n  }\n\n  private static _parseLogicalOrExpression(scanner: PpScanner): PpConstant {\n    const operand1 = this._parseLogicalAndExpression(scanner);\n    const operator = scanner.peek(2);\n    if (operator && operator === \"||\") {\n      scanner.advance(2);\n      scanner.skipSpace(false);\n      const operand2 = this._parseLogicalOrExpression(scanner);\n      return operand1 || operand2;\n    }\n    return operand1;\n  }\n\n  private static _parseLogicalAndExpression(scanner: PpScanner): PpConstant {\n    const operand1 = this._parseEqualityExpression(scanner);\n    const operator = scanner.peek(2);\n    if (operator && operator === \"&&\") {\n      scanner.advance(2);\n      scanner.skipSpace(false);\n      const operand2 = this._parseLogicalAndExpression(scanner);\n      return operand1 && operand2;\n    }\n    return operand1;\n  }\n\n  private static _parseEqualityExpression(scanner: PpScanner): PpConstant {\n    const operand1 = this._parseRelationalExpression(scanner);\n    const operator = scanner.peek(2);\n    if (operator && [\"==\", \"!=\"].includes(operator)) {\n      scanner.advance(2);\n      scanner.skipSpace(false);\n      const operand2 = this._parseEqualityExpression(scanner);\n      switch (operator) {\n        case \"==\":\n          return operand1 === operand2;\n        case \"!=\":\n          return operand1 !== operand2;\n      }\n    }\n    return operand1;\n  }\n\n  private static _parseRelationalExpression(scanner: PpScanner): PpConstant {\n    const operand1 = this._parseShiftExpression(scanner) as number;\n    let operator = scanner.peek(2);\n    if (operator[1] !== \"=\") operator = operator[0];\n    if (operator && [\">\", \"<\", \">=\", \"<=\"].includes(operator)) {\n      const opPos = scanner.getShaderPosition();\n      scanner.advance(operator.length);\n      scanner.skipSpace(false);\n      const operand2 = this._parseRelationalExpression(scanner) as number;\n      if (typeof operand1 !== typeof operand2 && typeof operand1 !== \"number\") {\n        this.reportError(opPos, \"invalid operator in relation expression.\", scanner.source, scanner.file);\n        return;\n      }\n      switch (operator) {\n        case \">\":\n          return operand1 > operand2;\n        case \"<\":\n          return operand1 < operand2;\n        case \">=\":\n          return operand1 >= operand2;\n        case \"<=\":\n          return operand1 <= operand2;\n      }\n    }\n    return operand1;\n  }\n\n  private static _parseShiftExpression(scanner: PpScanner): PpConstant {\n    const operand1 = this._parseAdditiveExpression(scanner) as number;\n    const operator = scanner.peek(2);\n    if (operator && [\">>\", \"<<\"].includes(operator)) {\n      const opPos = scanner.getShaderPosition();\n      scanner.advance(2);\n      scanner.skipSpace(false);\n      const operand2 = this._parseShiftExpression(scanner) as number;\n      if (typeof operand1 !== typeof operand2 && typeof operand1 !== \"number\") {\n        this.reportError(opPos, \"invalid operator in shift expression.\", scanner.source, scanner.file);\n        return;\n      }\n      switch (operator) {\n        case \">>\":\n          return operand1 >> operand2;\n        case \"<<\":\n          return operand1 << operand2;\n      }\n    }\n\n    return operand1;\n  }\n\n  private static _parseAdditiveExpression(scanner: PpScanner): PpConstant {\n    const operand1 = this._parseMulticativeExpression(scanner) as number;\n    if ([\">\", \"<\"].includes(scanner.getCurChar())) {\n      const opPos = scanner.getShaderPosition();\n      scanner.advance();\n\n      const operator = scanner.getCurChar();\n      scanner.skipSpace(false);\n      const operand2 = this._parseAdditiveExpression(scanner) as number;\n      if (typeof operand1 !== typeof operand2 && typeof operand1 !== \"number\") {\n        this.reportError(opPos, \"invalid operator.\", scanner.source, scanner.file);\n        return false;\n      }\n      switch (operator) {\n        case \"+\":\n          return operand1 + operand2;\n        case \"-\":\n          return operand1 - operand2;\n      }\n    }\n    return operand1;\n  }\n\n  private static _parseMulticativeExpression(scanner: PpScanner): PpConstant {\n    const operand1 = this._parseUnaryExpression(scanner) as number;\n    scanner.skipSpace(false);\n    if ([\"*\", \"/\", \"%\"].includes(scanner.getCurChar())) {\n      const opPos = scanner.getShaderPosition();\n      const operator = scanner.getCurChar();\n      scanner.skipSpace(false);\n      const operand2 = this._parseMulticativeExpression(scanner) as number;\n      if (typeof operand1 !== typeof operand2 && typeof operand1 !== \"number\") {\n        this.reportError(opPos, \"invalid operator.\", scanner.source, scanner.file);\n        return;\n      }\n      switch (operator) {\n        case \"*\":\n          return operand1 * operand2;\n        case \"/\":\n          return operand1 / operand2;\n        case \"%\":\n          return operand1 % operand2;\n      }\n    }\n    return operand1;\n  }\n\n  private static _parseUnaryExpression(scanner: PpScanner) {\n    const operator = scanner.getCurChar();\n    if ([\"+\", \"-\", \"!\"].includes(operator)) {\n      scanner.advance();\n      const opPos = scanner.getShaderPosition();\n      const parenExpr = this._parseParenthesisExpression(scanner);\n      if ((operator === \"!\" && typeof parenExpr !== \"boolean\") || (operator !== \"!\" && typeof parenExpr !== \"number\")) {\n        this.reportError(opPos, \"invalid operator.\", scanner.source, scanner.file);\n      }\n\n      switch (operator) {\n        case \"+\":\n          return parenExpr;\n        case \"-\":\n          return -parenExpr;\n        case \"!\":\n          return !parenExpr;\n      }\n    }\n    return this._parseParenthesisExpression(scanner);\n  }\n\n  private static _parseParenthesisExpression(scanner: PpScanner): PpConstant {\n    if (scanner.getCurChar() === \"(\") {\n      scanner.advance();\n      scanner.skipSpace(false);\n      const ret = this._parseConstantExpression(scanner);\n      scanner.scanToChar(\")\");\n      scanner.advance();\n      return ret;\n    }\n    return this._parseConstant(scanner);\n  }\n\n  private static _parseConstant(scanner: PpScanner): PpConstant {\n    if (LexerUtils.isAlpha(scanner.getCurChar())) {\n      const id = scanner.scanWord();\n      if (id.type === EPpKeyword.defined) {\n        const withParen = scanner.peekNonSpace() === \"(\";\n        const macro = scanner.scanWord(true);\n        if (withParen) {\n          scanner.scanToChar(\")\");\n          scanner.advance();\n        }\n        this._branchMacros.add(macro.lexeme);\n        return !!this._definedMacros.get(macro.lexeme);\n      } else {\n        const macro = this._definedMacros.get(id.lexeme);\n        if (!macro) {\n          return false;\n        }\n        if (macro.isFunction) {\n          this.reportError(id.location, \"invalid function macro usage\", scanner.source, scanner.file);\n        }\n        const value = Number(macro.body.lexeme);\n        if (!Number.isInteger(value)) {\n          this.reportError(id.location, `invalid const macro: ${id.lexeme}`, scanner.source, scanner.file);\n        }\n        this._branchMacros.add(id.lexeme);\n        return value;\n      }\n    } else if (LexerUtils.isNum(scanner.getCurChar())) {\n      const integer = scanner.scanInteger();\n      return Number(integer.lexeme);\n    } else {\n      this.reportError(\n        scanner.getShaderPosition(),\n        `invalid token: ${scanner.getCurChar()}`,\n        scanner.source,\n        scanner.file\n      );\n    }\n  }\n\n  /**\n   * Recursively expand macro body and expansion.\n   */\n  private static _expandMacroChunk(\n    chunk: string,\n    loc: ShaderRange,\n    parentScanner: PpScanner\n  ): {\n    content: string;\n    // #if _VERBOSE\n    sourceMap: PpSourceMap;\n    // #endif\n  };\n  private static _expandMacroChunk(\n    chunk: string,\n    loc: ShaderRange,\n    file: string\n  ): {\n    content: string;\n    // #if _VERBOSE\n    sourceMap: PpSourceMap;\n    // #endif\n  };\n  private static _expandMacroChunk(\n    chunk: string,\n    loc: ShaderRange,\n    scannerOrFile: PpScanner | string\n  ): {\n    content: string;\n    // #if _VERBOSE\n    sourceMap: PpSourceMap;\n    // #endif\n  } {\n    this._expandSegmentsStack.push([]);\n    let scanner: PpScanner;\n    if (typeof scannerOrFile === \"string\") {\n      scanner = new PpScanner(chunk, scannerOrFile);\n    } else {\n      scanner = new PpScanner(chunk, scannerOrFile.file, loc);\n    }\n    const ret = this.parse(scanner);\n    this._expandSegmentsStack.pop();\n    return {\n      content: ret,\n      // #if _VERBOSE\n      sourceMap: scanner.sourceMap\n      // #endif\n    };\n  }\n\n  private static _parseIfNdef(scanner: PpScanner) {\n    const start = scanner.current - 7;\n\n    const id = scanner.scanWord();\n    this._addEmptyReplace(scanner, start);\n    this._branchMacros.add(id.lexeme);\n\n    const macro = this._definedMacros.get(id.lexeme);\n    const { token: bodyChunk, nextDirective } = scanner.scanMacroBranchChunk();\n    if (!macro) {\n      const end = nextDirective.type === EPpKeyword.endif ? scanner.getShaderPosition() : scanner.scanRemainMacro();\n\n      const expanded = this._expandMacroChunk(bodyChunk.lexeme, bodyChunk.location, scanner);\n      // #if _VERBOSE\n      const blockInfo = new BlockInfo(scanner.file, scanner.blockRange, expanded.sourceMap);\n      // #endif\n      const range = ShaderLab.createRange(bodyChunk.location.start, end);\n      this.expandSegments.push({\n        // #if _VERBOSE\n        block: blockInfo,\n        // #endif\n        rangeInBlock: range,\n        replace: expanded.content\n      });\n      return;\n    }\n\n    this.expandSegments.pop();\n    this._addEmptyReplace(scanner, start);\n    this._parseMacroBranch(<any>nextDirective.type, scanner);\n  }\n\n  private static _addEmptyReplace(scanner: PpScanner, start: number) {\n    // #if _VERBOSE\n    const block = new BlockInfo(scanner.file, scanner.blockRange);\n    // #endif\n    const startPosition = ShaderLab.createPosition(start);\n    const endPosition = scanner.getCurPosition();\n    const range = ShaderLab.createRange(startPosition, endPosition);\n    this.expandSegments.push({\n      // #if _VERBOSE\n      block,\n      // #endif\n      rangeInBlock: range,\n      replace: \"\"\n    });\n  }\n\n  private static _parseIf(scanner: PpScanner) {\n    const start = scanner.current - 3;\n\n    const constantExpr = this._parseConstantExpression(scanner);\n    this._addEmptyReplace(scanner, start);\n\n    const { token: bodyChunk, nextDirective } = scanner.scanMacroBranchChunk();\n    if (!!constantExpr) {\n      const end = nextDirective.type === EPpKeyword.endif ? scanner.getShaderPosition() : scanner.scanRemainMacro();\n      const expanded = this._expandMacroChunk(bodyChunk.lexeme, bodyChunk.location, scanner);\n      // #if _VERBOSE\n      const block = new BlockInfo(scanner.file, scanner.blockRange, expanded.sourceMap);\n      // #endif\n      const range = ShaderLab.createRange(bodyChunk.location.start, end);\n      this.expandSegments.push({\n        // #if _VERBOSE\n        block,\n        // #endif\n        rangeInBlock: range,\n        replace: expanded.content\n      });\n      return;\n    }\n\n    this.expandSegments.pop();\n    this._addEmptyReplace(scanner, start);\n    this._parseMacroBranch(<any>nextDirective.type, scanner);\n  }\n\n  private static _parseDefine(scanner: PpScanner) {\n    const start = scanner.getShaderPosition(7);\n    const macro = scanner.scanWord();\n\n    let end = macro.location.end;\n    if (this._definedMacros.get(macro.lexeme) && macro.lexeme.startsWith(\"GL_\")) {\n      this.reportError(macro.location, `redefined macro: ${macro.lexeme}`, scanner.source, scanner.file);\n    }\n\n    let macroArgs: BaseToken[] | undefined;\n    if (scanner.getCurChar() === \"(\") {\n      macroArgs = scanner.scanWordsUntilChar(\")\");\n      end = scanner.getShaderPosition();\n    }\n    const macroBody = scanner.scanLineRemain();\n    const range = ShaderLab.createRange(start, end);\n    const macroDefine = new MacroDefine(macro, macroBody, range, macroArgs);\n    this._definedMacros.set(macro.lexeme, macroDefine);\n\n    // #if _VERBOSE\n    const block = new BlockInfo(scanner.file, scanner.blockRange);\n    // #endif\n\n    this.expandSegments.push({\n      // #if _VERBOSE\n      block,\n      // #endif\n      rangeInBlock: ShaderLab.createRange(start, scanner.getCurPosition()),\n      replace: \"\"\n    });\n  }\n\n  private static _parseUndef(scanner: PpScanner) {\n    const start = scanner.current - 6;\n    const macro = scanner.scanWord();\n\n    // #if _VERBOSE\n    const block = new BlockInfo(scanner.file, scanner.blockRange);\n    // #endif\n    const startPosition = ShaderLab.createPosition(start);\n    const range = ShaderLab.createRange(startPosition, scanner.getCurPosition());\n    this.expandSegments.push({\n      // #if _VERBOSE\n      block,\n      // #endif\n      rangeInBlock: range,\n      replace: \"\"\n    });\n    this._definedMacros.delete(macro.lexeme);\n  }\n\n  private static _onToken(token: BaseToken, scanner: PpScanner) {\n    const macro = this._definedMacros.get(token.lexeme);\n    if (macro) {\n      let replace = macro.body.lexeme;\n      if (macro.isFunction) {\n        scanner.scanToChar(\"(\");\n        scanner.advance();\n\n        // extract parameters\n        const args: string[] = [];\n        let curLvl = 1;\n        let curIdx = scanner.current;\n        while (true) {\n          if (scanner.getCurChar() === \"(\") curLvl += 1;\n          else if (scanner.getCurChar() === \")\") {\n            curLvl -= 1;\n            if (curLvl === 0) break;\n          } else if (scanner.getCurChar() === \",\" && curLvl === 1) {\n            args.push(scanner.source.slice(curIdx, scanner.current));\n            curIdx = scanner.current + 1;\n          }\n          scanner.advance();\n        }\n        args.push(scanner.source.slice(curIdx, scanner.current));\n\n        scanner.advance();\n        const range = ShaderLab.createRange(token.location!.start, scanner.getCurPosition());\n        replace = macro.expandFunctionBody(args);\n        const expanded = this._expandMacroChunk(replace, range, scanner);\n        // #if _VERBOSE\n        const block = new BlockInfo(scanner.file, scanner.blockRange, expanded.sourceMap);\n        // #endif\n        const blockRange = ShaderLab.createRange(token.location!.start, scanner.getCurPosition());\n        this.expandSegments.push({\n          // #if _VERBOSE\n          block,\n          // #endif\n          rangeInBlock: blockRange,\n          replace: expanded.content\n        });\n      } else {\n        const expanded = this._expandMacroChunk(replace, token.location, scanner);\n        // #if _VERBOSE\n        const block = new BlockInfo(scanner.file, scanner.blockRange, expanded.sourceMap);\n        // #endif\n        const range = ShaderLab.createRange(token.location.start, token.location.end);\n        this.expandSegments.push({\n          // #if _VERBOSE\n          block,\n          // #endif\n          rangeInBlock: range,\n          replace: expanded.content\n        });\n      }\n    }\n  }\n}\n","import { PpParser } from \"./PpParser\";\nimport PpScanner from \"./PpScanner\";\n\n/** @internal */\nexport class Preprocessor {\n  static baseScanner: PpScanner;\n\n  /**\n   * Reset the parser of `Preprocessor`\n   * @param basePathForIncludeKey - the base path to resolve the relative path of `#include` directive\n   */\n  static reset(includeMap: Record<string, string>, basePathForIncludeKey: string): void {\n    PpParser.reset(includeMap, basePathForIncludeKey);\n  }\n\n  /**\n   * Should call it after reset.\n   */\n  static process(source: string): string | null {\n    this.baseScanner = new PpScanner(source);\n    return PpParser.parse(this.baseScanner);\n  }\n\n  static addPredefinedMacro(macro: string, value?: string): void {\n    PpParser.addPredefinedMacro(macro, value);\n  }\n\n  // #if _VERBOSE\n  static convertSourceIndex(index: number) {\n    return this.baseScanner.sourceMap.map(index);\n  }\n  // #endif\n}\n","import { ENonTerminal, GrammarSymbol } from \"./parser/GrammarSymbol\";\nimport { BaseToken as Token } from \"./common/BaseToken\";\nimport { EKeyword, ETokenType, GalaceanDataType } from \"./common\";\nimport { TreeNode } from \"./parser/AST\";\n// #if _VERBOSE\nimport State from \"./lalr/State\";\n// #endif\n\nexport class ParserUtils {\n  static unwrapNodeByType<T = TreeNode>(node: TreeNode, type: ENonTerminal): T | undefined {\n    const child = node.children[0];\n    if (child instanceof Token) return;\n    if (child.nt === type) return child as T;\n    return ParserUtils.unwrapNodeByType(child, type);\n  }\n\n  // #if _VERBOSE\n  /**\n   * Check if type `tb` is compatible with type `ta`.\n   */\n  static typeCompatible(ta: GalaceanDataType, tb: GalaceanDataType | undefined) {\n    if (tb == undefined) return true;\n    if (ta === EKeyword.INT) {\n      return ta === tb || tb === EKeyword.UINT;\n    }\n    return ta === tb;\n  }\n\n  static toString(sm: GrammarSymbol) {\n    if (this.isTerminal(sm)) {\n      return ETokenType[sm] ?? EKeyword[sm];\n    }\n    return ENonTerminal[sm];\n  }\n  // #endif\n\n  static isTerminal(sm: GrammarSymbol) {\n    return sm < ENonTerminal.START;\n  }\n\n  /**\n   * @internal\n   */\n  // #if _VERBOSE\n  static printStatePool(logPath: string) {\n    let output = \"\";\n\n    console.log(\"========== Parser Pool ==========\");\n\n    let count = 0;\n    for (const state of State.pool.values()) {\n      count++;\n      let tmp = \"\";\n      tmp += `${state.id}: \\n`.padEnd(4);\n      for (const psItem of state.items) {\n        tmp += \"     \" + psItem.toString() + \"\\n\";\n      }\n      output += tmp;\n    }\n\n    console.log(\"state count:\", count);\n    console.log(output);\n  }\n  // #endif\n}\n","import { EShaderStage } from \"../common/Enums\";\nimport { ASTNode } from \"../parser/AST\";\nimport { ESymbolType, SymbolTable, SymbolInfo } from \"../parser/symbolTable\";\nimport { IParamInfo } from \"../parser/types\";\nimport { GSErrorName } from \"../GSError\";\nimport { BaseToken } from \"../common/BaseToken\";\nimport { ShaderLab } from \"../ShaderLab\";\nimport { ShaderLabUtils } from \"../ShaderLabUtils\";\n// #if _VERBOSE\nimport { GSError } from \"../GSError\";\n// #endif\n\n/** @internal */\nexport class VisitorContext {\n  private static _singleton: VisitorContext;\n  static get context() {\n    return this._singleton;\n  }\n\n  static reset() {\n    if (!this._singleton) {\n      this._singleton = new VisitorContext();\n    }\n    this._singleton.reset();\n  }\n\n  attributeList: IParamInfo[] = [];\n  attributeStructs: ASTNode.StructSpecifier[] = [];\n  varyingStruct?: ASTNode.StructSpecifier;\n\n  stage: EShaderStage;\n\n  _referencedAttributeList: Record<string, IParamInfo & { qualifier?: string }> = Object.create(null);\n  _referencedGlobals: Record<string, SymbolInfo | ASTNode.PrecisionSpecifier> = Object.create(null);\n  _referencedVaryingList: Record<string, IParamInfo & { qualifier?: string }> = Object.create(null);\n\n  _curFn?: ASTNode.FunctionProtoType;\n\n  _passSymbolTable: SymbolTable;\n\n  private constructor() {}\n\n  get passSymbolTable() {\n    return this._passSymbolTable;\n  }\n\n  reset() {\n    this.attributeList.length = 0;\n    this.attributeStructs.length = 0;\n    this._referencedAttributeList = Object.create(null);\n    this._referencedGlobals = Object.create(null);\n    this._referencedVaryingList = Object.create(null);\n  }\n\n  isAttributeStruct(type: string) {\n    return this.attributeStructs.findIndex((item) => item.ident!.lexeme === type) !== -1;\n  }\n\n  isVaryingStruct(type: string) {\n    return this.varyingStruct?.ident?.lexeme === type;\n  }\n\n  referenceAttribute(ident: BaseToken): Error {\n    if (this._referencedAttributeList[ident.lexeme]) return;\n\n    const prop = this.attributeList.find((item) => item.ident.lexeme === ident.lexeme);\n    if (!prop) {\n      return ShaderLabUtils.createGSError(\n        `referenced attribute not found: ${ident.lexeme}`,\n        GSErrorName.CompilationError,\n        ShaderLab._processingPassText,\n        ident.location\n      );\n    }\n    this._referencedAttributeList[ident.lexeme] = prop;\n  }\n\n  referenceVarying(ident: BaseToken): Error | undefined {\n    if (this._referencedVaryingList[ident.lexeme]) return;\n\n    const prop = this.varyingStruct?.propList.find((item) => item.ident.lexeme === ident.lexeme);\n    if (!prop) {\n      return ShaderLabUtils.createGSError(\n        `referenced varying not found: ${ident.lexeme}`,\n        GSErrorName.CompilationError,\n        ShaderLab._processingPassText,\n        ident.location\n      );\n    }\n    this._referencedVaryingList[ident.lexeme] = prop;\n  }\n\n  referenceGlobal(ident: string, type: ESymbolType) {\n    if (this._referencedGlobals[ident]) return;\n\n    if (type === ESymbolType.FN) {\n      const fnEntries = this._passSymbolTable.getAllFnSymbols(ident);\n      for (let i = 0; i < fnEntries.length; i++) {\n        const key = i === 0 ? ident : ident + i;\n        this._referencedGlobals[key] = fnEntries[i];\n      }\n      return;\n    }\n    const sm = this.passSymbolTable.lookup({ ident, symbolType: type });\n    if (sm) {\n      this._referencedGlobals[ident] = sm;\n    }\n  }\n}\n","import { ENonTerminal } from \"../parser/GrammarSymbol\";\nimport { BaseToken as Token } from \"../common/BaseToken\";\nimport { EKeyword, ShaderPosition, ShaderRange } from \"../common\";\nimport { ASTNode, TreeNode } from \"../parser/AST\";\nimport { ESymbolType, FnSymbol, VarSymbol } from \"../parser/symbolTable\";\nimport { ParserUtils } from \"../ParserUtils\";\nimport { NodeChild } from \"../parser/types\";\nimport { VisitorContext } from \"./VisitorContext\";\nimport { ShaderLab } from \"../ShaderLab\";\nimport { GSErrorName } from \"../GSError\";\n// #if _VERBOSE\nimport { GSError } from \"../GSError\";\n// #endif\n\n/**\n * @internal\n * The code generator\n */\nexport class CodeGenVisitor {\n  // #if _VERBOSE\n  readonly errors: GSError[] = [];\n  // #endif\n\n  defaultCodeGen(children: NodeChild[]) {\n    let ret: string[] = [];\n    for (const child of children) {\n      if (child instanceof Token) {\n        ret.push(child.lexeme);\n      } else {\n        ret.push(child.codeGen(this));\n      }\n    }\n    return ret.join(\" \");\n  }\n\n  visitPostfixExpression(node: ASTNode.PostfixExpression) {\n    if (node.children.length === 3) {\n      const context = VisitorContext.context;\n\n      const postExpr = node.children[0] as ASTNode.PostfixExpression;\n\n      const prop = node.children[2];\n\n      if (prop instanceof Token) {\n        if (context.isAttributeStruct(<string>postExpr.type)) {\n          const error = context.referenceAttribute(prop);\n          // #if _VERBOSE\n          if (error) {\n            this.errors.push(<GSError>error);\n          }\n          // #endif\n          return prop.lexeme;\n        } else if (context.isVaryingStruct(<string>postExpr.type)) {\n          const error = context.referenceVarying(prop);\n          // #if _VERBOSE\n          if (error) {\n            this.errors.push(<GSError>error);\n          }\n          // #endif\n          return prop.lexeme;\n        }\n\n        return `${postExpr.codeGen(this)}.${prop.lexeme}`;\n      } else {\n        return `${postExpr.codeGen(this)}.${prop.codeGen(this)}`;\n      }\n    }\n    return this.defaultCodeGen(node.children);\n  }\n\n  visitVariableIdentifier(node: ASTNode.VariableIdentifier): string {\n    if (node.symbolInfo instanceof VarSymbol && node.symbolInfo.isGlobalVariable) {\n      VisitorContext.context.referenceGlobal(node.lexeme, ESymbolType.VAR);\n    }\n    return node.lexeme;\n  }\n\n  visitFunctionCall(node: ASTNode.FunctionCall): string {\n    const call = node.children[0] as ASTNode.FunctionCallGeneric;\n    if (call.fnSymbol instanceof FnSymbol) {\n      VisitorContext.context.referenceGlobal(call.fnSymbol.ident, ESymbolType.FN);\n\n      const paramList = call.children[2];\n      const paramInfoList = call.fnSymbol.astNode.protoType.parameterList;\n\n      if (paramList instanceof ASTNode.FunctionCallParameterList) {\n        const plainParams: string[] = [];\n        const params = paramList.paramNodes;\n\n        for (let i = 0; i < params.length; i++) {\n          if (\n            !VisitorContext.context.isAttributeStruct(paramInfoList[i].typeInfo.typeLexeme) &&\n            !VisitorContext.context.isVaryingStruct(paramInfoList[i].typeInfo.typeLexeme)\n          ) {\n            plainParams.push(params[i].codeGen(this));\n          }\n        }\n        return `${call.fnSymbol.ident}(${plainParams.join(\", \")})`;\n      }\n    }\n    return this.defaultCodeGen(node.children);\n  }\n\n  visitStatementList(node: ASTNode.StatementList): string {\n    const children = node.children as TreeNode[];\n    if (node.children.length === 1) {\n      return children[0].codeGen(this);\n    } else {\n      return `${children[0].codeGen(this)}\\n${children[1].codeGen(this)}`;\n    }\n  }\n\n  visitSingleDeclaration(node: ASTNode.SingleDeclaration): string {\n    const type = node.typeSpecifier.type;\n    if (typeof type === \"string\") {\n      VisitorContext.context.referenceGlobal(type, ESymbolType.STRUCT);\n    }\n    return this.defaultCodeGen(node.children);\n  }\n\n  visitGlobalVariableDeclaration(node: ASTNode.VariableDeclaration): string {\n    const fullType = node.children[0];\n    if (fullType instanceof ASTNode.FullySpecifiedType && fullType.typeSpecifier.isCustom) {\n      VisitorContext.context.referenceGlobal(<string>fullType.type, ESymbolType.STRUCT);\n    }\n    return this.defaultCodeGen(node.children);\n  }\n\n  visitDeclaration(node: ASTNode.Declaration): string {\n    const child = node.children[0];\n    if (\n      child instanceof ASTNode.InitDeclaratorList &&\n      child.typeInfo.typeLexeme === VisitorContext.context.varyingStruct?.ident?.lexeme\n    ) {\n      return \"\";\n    }\n    return this.defaultCodeGen(node.children);\n  }\n\n  visitFunctionProtoType(node: ASTNode.FunctionProtoType): string {\n    VisitorContext.context._curFn = node;\n    return this.defaultCodeGen(node.children);\n  }\n\n  visitFunctionDefinition(node: ASTNode.FunctionDefinition): string {\n    VisitorContext.context._curFn = undefined;\n    return this.defaultCodeGen(node.children);\n  }\n\n  visitFunctionParameterList(node: ASTNode.FunctionParameterList): string {\n    const params = node.parameterInfoList;\n    return params\n      .filter(\n        (item) =>\n          !VisitorContext.context.isAttributeStruct(item.typeInfo.typeLexeme) &&\n          !VisitorContext.context.isVaryingStruct(item.typeInfo.typeLexeme)\n      )\n      .map((item) => item.astNode.codeGen(this))\n      .join(\", \");\n  }\n\n  visitFunctionHeader(node: ASTNode.FunctionHeader): string {\n    const returnType = node.returnType.typeSpecifier.lexeme;\n    if (VisitorContext.context.isAttributeStruct(returnType) || VisitorContext.context.isVaryingStruct(returnType))\n      return `void ${node.ident.lexeme}(`;\n    return this.defaultCodeGen(node.children);\n  }\n\n  visitJumpStatement(node: ASTNode.JumpStatement): string {\n    const cmd = node.children[0] as Token;\n    if (cmd.type === EKeyword.RETURN) {\n      const expr = node.children[1];\n      if (expr instanceof ASTNode.Expression) {\n        const returnVar = ParserUtils.unwrapNodeByType<ASTNode.VariableIdentifier>(\n          expr,\n          ENonTerminal.variable_identifier\n        );\n        if (returnVar?.typeInfo === VisitorContext.context.varyingStruct?.ident?.lexeme) {\n          return \"\";\n        }\n        const returnFnCall = ParserUtils.unwrapNodeByType<ASTNode.FunctionCall>(expr, ENonTerminal.function_call);\n        if (returnFnCall?.type === VisitorContext.context.varyingStruct?.ident?.lexeme) {\n          return `${expr.codeGen(this)};`;\n        }\n      }\n    }\n    return this.defaultCodeGen(node.children);\n  }\n\n  visitFunctionIdentifier(node: ASTNode.FunctionIdentifier): string {\n    return this.defaultCodeGen(node.children);\n  }\n\n  protected _reportError(loc: ShaderRange | ShaderPosition, message: string): void {\n    // #if _VERBOSE\n    this.errors.push(new GSError(GSErrorName.CompilationError, message, loc, ShaderLab._processingPassText));\n    // #else\n    throw new Error(message);\n    // #endif\n  }\n}\n","import { CodeGenVisitor } from \"./CodeGenVisitor\";\nimport { ASTNode } from \"../parser/AST\";\nimport { ShaderData } from \"../parser/ShaderInfo\";\nimport { ESymbolType, FnSymbol, StructSymbol, SymbolInfo } from \"../parser/symbolTable\";\nimport { EShaderStage } from \"../common/Enums\";\nimport { IShaderInfo } from \"@galacean/engine-design\";\nimport { ICodeSegment } from \"./types\";\nimport { VisitorContext } from \"./VisitorContext\";\nimport { EKeyword } from \"../common\";\n\nconst defaultPrecision = `\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n  precision highp float;\n  precision highp int;\n#else\n  precision mediump float;\n  precision mediump int;\n#endif\n`;\n\n/**\n * @internal\n */\nexport abstract class GLESVisitor extends CodeGenVisitor {\n  protected _versionText: string = \"\";\n  protected _extensions: string = \"\";\n\n  abstract getAttributeDeclare(): ICodeSegment[];\n  abstract getVaryingDeclare(): ICodeSegment[];\n\n  visitShaderProgram(node: ASTNode.GLShaderProgram, vertexEntry: string, fragmentEntry: string): IShaderInfo {\n    // #if _VERBOSE\n    this.errors.length = 0;\n    // #endif\n    VisitorContext.reset();\n    VisitorContext.context._passSymbolTable = node.shaderData.symbolTable;\n\n    return {\n      vertex: this.vertexMain(vertexEntry, node.shaderData),\n      fragment: this._fragmentMain(fragmentEntry, node.shaderData)\n    };\n  }\n\n  vertexMain(entry: string, data: ShaderData): string {\n    const { symbolTable } = data;\n    const fnSymbol = symbolTable.lookup<FnSymbol>({ ident: entry, symbolType: ESymbolType.FN });\n    if (!fnSymbol?.astNode) throw `no entry function found: ${entry}`;\n\n    const fnNode = fnSymbol.astNode;\n    VisitorContext.context.stage = EShaderStage.VERTEX;\n\n    const returnType = fnNode.protoType.returnType;\n    if (typeof returnType.type === \"string\") {\n      const varyStruct = symbolTable.lookup<StructSymbol>({ ident: returnType.type, symbolType: ESymbolType.STRUCT });\n      if (!varyStruct) {\n        this._reportError(returnType.location, `invalid varying struct: ${returnType.type}`);\n      } else {\n        VisitorContext.context.varyingStruct = varyStruct.astNode;\n      }\n    } else if (returnType.type !== EKeyword.VOID) {\n      this._reportError(returnType.location, \"main entry can only return struct.\");\n    }\n\n    const paramList = fnNode.protoType.parameterList;\n    if (paramList?.length) {\n      for (const paramInfo of paramList) {\n        if (typeof paramInfo.typeInfo.type === \"string\") {\n          const structSymbol = symbolTable.lookup<StructSymbol>({\n            ident: paramInfo.typeInfo.type,\n            symbolType: ESymbolType.STRUCT\n          });\n          if (!structSymbol) {\n            this._reportError(paramInfo.astNode.location, `Not found attribute struct \"${paramInfo.typeInfo.type}\".`);\n            continue;\n          }\n          VisitorContext.context.attributeStructs.push(structSymbol.astNode);\n          for (const prop of structSymbol.astNode.propList) {\n            VisitorContext.context.attributeList.push(prop);\n          }\n        } else {\n          VisitorContext.context.attributeList.push(paramInfo);\n        }\n      }\n    }\n\n    const statements = fnNode.statements.codeGen(this);\n    const globalText = this._getGlobalText(data);\n\n    const attributeDeclare = this.getAttributeDeclare();\n    const varyingDeclare = this.getVaryingDeclare();\n\n    const globalCode = [...globalText, ...attributeDeclare, ...varyingDeclare]\n      .sort((a, b) => a.index - b.index)\n      .map((item) => item.text)\n      .join(\"\\n\");\n\n    VisitorContext.context.reset();\n\n    return `${this._versionText}\\n${globalCode}\\n\\nvoid main() ${statements}`;\n  }\n\n  private _fragmentMain(entry: string, data: ShaderData): string {\n    const { symbolTable } = data;\n    const fnSymbol = symbolTable.lookup<FnSymbol>({ ident: entry, symbolType: ESymbolType.FN });\n    if (!fnSymbol?.astNode) throw `no entry function found: ${entry}`;\n    const fnNode = fnSymbol.astNode;\n\n    VisitorContext.context.stage = EShaderStage.FRAGMENT;\n    const statements = fnNode.statements.codeGen(this);\n    const globalText = this._getGlobalText(data);\n    const varyingDeclare = this.getVaryingDeclare();\n\n    const globalCode = [...globalText, ...varyingDeclare]\n      .sort((a, b) => a.index - b.index)\n      .map((item) => item.text)\n      .join(\"\\n\");\n\n    VisitorContext.context.reset();\n    return `${this._versionText}\\n${this._extensions}\\n${defaultPrecision}\\n${globalCode}\\n\\nvoid main() ${statements}`;\n  }\n\n  private _getGlobalText(\n    data: ShaderData,\n    textList: ICodeSegment[] = [],\n    lastLength: number = 0,\n    _serialized: Set<string> = new Set()\n  ): ICodeSegment[] {\n    const { _referencedGlobals } = VisitorContext.context;\n\n    if (lastLength === Object.keys(_referencedGlobals).length) {\n      for (const precision of data.globalPrecisions) {\n        textList.push({ text: precision.codeGen(this), index: precision.location.start.index });\n      }\n      return textList;\n    }\n\n    lastLength = Object.keys(_referencedGlobals).length;\n    for (const ident in _referencedGlobals) {\n      const sm = _referencedGlobals[ident];\n\n      if (_serialized.has(ident)) continue;\n      _serialized.add(ident);\n\n      if (sm instanceof SymbolInfo) {\n        if (sm.symbolType === ESymbolType.VAR) {\n          textList.push({ text: `uniform ${sm.astNode.codeGen(this)}`, index: sm.astNode.location.start.index });\n        } else {\n          textList.push({ text: sm.astNode!.codeGen(this), index: sm.astNode!.location.start.index });\n        }\n      } else {\n        textList.push({ text: sm.codeGen(this), index: sm.location.start.index });\n      }\n    }\n    return this._getGlobalText(data, textList, lastLength, _serialized);\n  }\n}\n","import { GLESVisitor } from \"./GLESVisitor\";\nimport { VisitorContext } from \"./VisitorContext\";\nimport { ICodeSegment } from \"./types\";\n\nexport class GLES100Visitor extends GLESVisitor {\n  override _versionText: string = `#version 100`;\n  override _extensions: string = [\n    \"GL_EXT_shader_texture_lod\",\n    \"GL_OES_standard_derivatives\",\n    \"GL_EXT_draw_buffers\",\n    \"GL_EXT_frag_depth\"\n  ]\n    .map((e) => `#extension ${e} : enable\\n`)\n    .join(\"\");\n\n  private static _singleton: GLES100Visitor;\n  static getVisitor(): GLES100Visitor {\n    if (!this._singleton) {\n      this._singleton = new GLES100Visitor();\n    }\n    return this._singleton;\n  }\n\n  override getAttributeDeclare(): ICodeSegment[] {\n    const ret: ICodeSegment[] = [];\n    for (const item of Object.values(VisitorContext.context._referencedAttributeList)) {\n      ret.push({\n        text: `attribute ${item.typeInfo.typeLexeme} ${item.ident.lexeme};`,\n        index: item.ident.location.start.index\n      });\n    }\n    return ret;\n  }\n\n  override getVaryingDeclare(): ICodeSegment[] {\n    const ret: ICodeSegment[] = [];\n    for (const item of Object.values(VisitorContext.context._referencedVaryingList)) {\n      ret.push({\n        text: `varying ${item.typeInfo.typeLexeme} ${item.ident.lexeme};`,\n        index: item.ident.location.start.index\n      });\n    }\n    return ret;\n  }\n}\n","import { ASTNode } from \"../parser/AST\";\nimport { SymbolType } from \"../parser/types\";\nimport { BaseToken as Token } from \"../common/BaseToken\";\nimport { EKeyword, ETokenType, ShaderPosition } from \"../common\";\nimport { GLESVisitor } from \"./GLESVisitor\";\nimport { EShaderStage } from \"../common/Enums\";\nimport { ICodeSegment } from \"./types\";\nimport { VisitorContext } from \"./VisitorContext\";\nimport { ShaderLab } from \"../ShaderLab\";\n\nconst V3_GL_FragColor = \"GS_glFragColor\";\n\nexport class GLES300Visitor extends GLESVisitor {\n  override _versionText: string = \"#version 300 es\";\n\n  private static _singleton: GLES300Visitor;\n  static getVisitor(): GLES300Visitor {\n    if (!this._singleton) {\n      this._singleton = new GLES300Visitor();\n    }\n    return this._singleton;\n  }\n\n  override getAttributeDeclare(): ICodeSegment[] {\n    const ret: ICodeSegment[] = [];\n    for (const item of Object.values(VisitorContext.context._referencedAttributeList)) {\n      ret.push({\n        text: `in ${item.typeInfo.typeLexeme} ${item.ident.lexeme};`,\n        index: item.ident.location.start.index\n      });\n    }\n    return ret;\n  }\n\n  override getVaryingDeclare(): ICodeSegment[] {\n    const ret: ICodeSegment[] = [];\n    const qualifier = VisitorContext.context.stage === EShaderStage.FRAGMENT ? \"in\" : \"out\";\n    const values = Object.values(VisitorContext.context._referencedVaryingList);\n    for (let i = 0; i < values.length; i++) {\n      const item = values[i];\n      ret.push({\n        text: `${item.qualifier ?? qualifier} ${item.typeInfo.typeLexeme} ${item.ident.lexeme};`,\n        index: item.ident.location.start.index\n      });\n    }\n    return ret;\n  }\n\n  override visitFunctionIdentifier(node: ASTNode.FunctionIdentifier): string {\n    const typeSpecifier = node.children[0] as ASTNode.TypeSpecifier;\n    if (typeSpecifier.children.length !== 1) {\n      return this.defaultCodeGen(node.children);\n    }\n    let ident = node.lexeme;\n    if (node.ident === \"texture2D\" || node.ident === \"textureCube\") {\n      ident = \"texture\";\n    } else if (node.ident === \"texture2DProj\") {\n      ident = \"textureProj\";\n    } else if (VisitorContext.context.stage === EShaderStage.FRAGMENT) {\n      switch (node.ident) {\n        case \"texture2DLodEXT\":\n        case \"textureCubeLodEXT\":\n          ident = \"textureLod\";\n          break;\n        case \"texture2DGradEXT\":\n        case \"textureCubeGradEXT\":\n          ident = \"textureGrad\";\n          break;\n        case \"texture2DProjLodEXT\":\n          ident = \"textureProjLod\";\n          break;\n        case \"texture2DProjGradEXT\":\n          ident = \"textureProjGrad\";\n          break;\n        case \"gl_FragDepthEXT\":\n          ident = \"gl_FragDepth\";\n          break;\n      }\n    }\n    return ident;\n  }\n\n  override visitVariableIdentifier(node: ASTNode.VariableIdentifier): string {\n    if (VisitorContext.context.stage === EShaderStage.FRAGMENT && node.lexeme === \"gl_FragColor\") {\n      if (!VisitorContext.context._referencedVaryingList[V3_GL_FragColor]) {\n        const token = Token.pool.get();\n        token.set(ETokenType.ID, V3_GL_FragColor, ShaderLab.createPosition(0, 0, 0));\n        VisitorContext.context._referencedVaryingList[V3_GL_FragColor] = {\n          ident: token,\n          typeInfo: new SymbolType(EKeyword.VEC4, \"vec4\"),\n          qualifier: \"out\",\n          astNode: node\n        };\n      }\n      return V3_GL_FragColor;\n    }\n    return super.visitVariableIdentifier(node);\n  }\n}\n","function _is_native_reflect_construct() {\n    // Since Reflect.construct can't be properly polyfilled, some\n    // implementations (e.g. core-js@2) don't set the correct internal slots.\n    // Those polyfills don't allow us to subclass built-ins, so we need to\n    // use our fallback implementation.\n    try {\n        // If the internal slots aren't set, this throws an error similar to\n        //   TypeError: this is not a Boolean object.\n        var result = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n    } catch (_) {}\n    return (_is_native_reflect_construct = function() {\n        return !!result;\n    })();\n}\n\nexport { _is_native_reflect_construct as _ };\n","import { _ as _is_native_reflect_construct } from \"./_is_native_reflect_construct.js\";\nimport { _ as _set_prototype_of } from \"./_set_prototype_of.js\";\nfunction _construct(Parent, args, Class) {\n    if (_is_native_reflect_construct()) _construct = Reflect.construct;\n    else {\n        _construct = function construct(Parent, args, Class) {\n            var a = [null];\n            a.push.apply(a, args);\n            var Constructor = Function.bind.apply(Parent, a);\n            var instance = new Constructor();\n\n            if (Class) _set_prototype_of(instance, Class.prototype);\n\n            return instance;\n        };\n    }\n\n    return _construct.apply(null, arguments);\n}\nexport { _construct as _ };\n","function _extends() {\n    _extends = Object.assign || function assign(target) {\n        for (var i = 1; i < arguments.length; i++) {\n            var source = arguments[i];\n            for (var key in source) if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];\n        }\n\n        return target;\n    };\n\n    return _extends.apply(this, arguments);\n}\nexport { _extends as _ };\n","import { EKeyword } from \"../common\";\n\nexport const KeywordMap = new Map([\n  [\"RenderQueueType\", EKeyword.GS_RenderQueueType],\n  [\"BlendState\", EKeyword.GS_BlendState],\n  [\"DepthState\", EKeyword.GS_DepthState],\n  [\"StencilState\", EKeyword.GS_StencilState],\n  [\"RasterState\", EKeyword.GS_RasterState],\n  [\"EditorProperties\", EKeyword.GS_EditorProperties],\n  [\"EditorMacros\", EKeyword.GS_EditorMacros],\n  [\"Editor\", EKeyword.GS_Editor],\n  [\"Tags\", EKeyword.GS_Tags],\n  [\"VertexShader\", EKeyword.GS_VertexShader],\n  [\"FragmentShader\", EKeyword.GS_FragmentShader],\n  [\"SubShader\", EKeyword.GS_SubShader],\n  [\"Pass\", EKeyword.GS_Pass],\n  [\"BlendFactor\", EKeyword.GS_BlendFactor],\n  [\"BlendOperation\", EKeyword.GS_BlendOperation],\n  [\"Bool\", EKeyword.GS_Bool],\n  [\"Number\", EKeyword.GS_Number],\n  [\"CompareFunction\", EKeyword.GS_CompareFunction],\n  [\"StencilOperation\", EKeyword.GS_StencilOperation],\n  [\"CullMode\", EKeyword.GS_CullMode],\n  [\"true\", EKeyword.TRUE],\n  [\"false\", EKeyword.FALSE],\n  [\"UsePass\", EKeyword.GS_UsePass],\n  [\"Color\", EKeyword.GS_Color]\n]);\n","import BaseScanner from \"../common/BaseScanner\";\n\nexport default class Scanner extends BaseScanner {\n  constructor(source: string, kws: Map<string, number> = new Map()) {\n    super(source, kws);\n  }\n\n  /**\n   * split by space\n   */\n  scanWord(): string {\n    this.skipCommentsAndSpace();\n    const start = this._currentIndex;\n    while (/\\S/.test(this.getCurChar()) && !this.isEnd()) this._advance();\n    return this._source.substring(start, this._currentIndex);\n  }\n\n  scanNumber(): number {\n    this.skipCommentsAndSpace();\n    const start = this._currentIndex;\n    while (/[0-9]/.test(this.getCurChar())) this._advance();\n    if (this.getCurChar() === \".\") {\n      this._advance();\n      while (/[0-9]/.test(this.getCurChar())) this._advance();\n    }\n    return Number(this._source.substring(start, this._currentIndex));\n  }\n\n  // #if _VERBOSE\n  scanToCharacter(char: string): void {\n    while (this.getCurChar() !== char && !this.isEnd()) {\n      this._advance();\n    }\n    this._advance();\n  }\n  // #endif\n}\n","import { BaseSymbolTable, IBaseSymbol } from \"../common/BaseSymbolTable\";\n\nexport interface ISymbol extends IBaseSymbol {\n  type: number;\n  value?: any;\n}\n\nexport default class SymbolTable extends BaseSymbolTable<ISymbol> {\n  override symbolEqualCheck(s1: ISymbol, s2: ISymbol): boolean {\n    return s1.type === s2.type;\n  }\n}\n","import { SymbolTableStack } from \"../common/BaseSymbolTable\";\nimport { BaseToken } from \"../common/BaseToken\";\nimport { EKeyword, ETokenType } from \"../common\";\nimport { ShaderPosition } from \"../common\";\nimport { KeywordMap } from \"./KeywordMap\";\nimport Scanner from \"./Scanner\";\nimport SymbolTable, { ISymbol } from \"./SymbolTable\";\nimport {\n  RenderStateDataKey,\n  Color,\n  RenderQueueType,\n  CompareFunction,\n  StencilOperation,\n  BlendOperation,\n  BlendFactor,\n  CullMode,\n  Logger\n} from \"@galacean/engine\";\nimport {\n  IStatement,\n  IShaderContent,\n  ISubShaderContent,\n  IShaderPassContent,\n  IRenderStates\n} from \"@galacean/engine-design\";\nimport { GSErrorName } from \"../GSError\";\n// #if _VERBOSE\nimport { GSError } from \"../GSError\";\n// #endif\nimport { ShaderLabUtils } from \"../ShaderLabUtils\";\n\nconst EngineType = [\n  EKeyword.GS_RenderQueueType,\n  EKeyword.GS_BlendFactor,\n  EKeyword.GS_BlendOperation,\n  EKeyword.GS_Bool,\n  EKeyword.GS_Number,\n  EKeyword.GS_Color,\n  EKeyword.GS_CompareFunction,\n  EKeyword.GS_StencilOperation,\n  EKeyword.GS_CullMode\n];\n\nconst RenderStateType = [\n  EKeyword.GS_BlendState,\n  EKeyword.GS_DepthState,\n  EKeyword.GS_RasterState,\n  EKeyword.GS_StencilState\n];\n\n/**\n * @internal\n */\nexport class ShaderContentParser {\n  static _engineType = { RenderQueueType, CompareFunction, StencilOperation, BlendOperation, BlendFactor, CullMode };\n\n  static _errors: GSError[] = [];\n\n  private static _isRenderStateDeclarator(token: BaseToken) {\n    return RenderStateType.includes(token.type);\n  }\n\n  private static _isEngineType(token: BaseToken) {\n    return EngineType.includes(token.type);\n  }\n\n  private static _symbolTable: SymbolTableStack<ISymbol, SymbolTable> = new SymbolTableStack();\n\n  static reset() {\n    this._errors.length = 0;\n    this._symbolTable.clear();\n    this._newScope();\n  }\n\n  static parse(source: string): IShaderContent {\n    const start = performance.now();\n\n    const scanner = new Scanner(source, KeywordMap);\n    const ret = {\n      subShaders: [],\n      globalContents: [],\n      renderStates: { constantMap: {}, variableMap: {} }\n    } as IShaderContent;\n\n    scanner.scanText(\"Shader\");\n    ret.name = scanner.scanPairedText('\"', '\"');\n    scanner.scanText(\"{\");\n\n    scanner.skipCommentsAndSpace();\n    this._parseShaderStatements(ret, scanner);\n\n    const shaderGlobalStatements = ret.globalContents;\n    const shaderRenderStates = ret.renderStates;\n    for (let i = 0; i < ret.subShaders.length; i++) {\n      const subShader = ret.subShaders[i];\n      const curSubShaderGlobalStatements = shaderGlobalStatements.concat(subShader.globalContents);\n      const constMap = { ...shaderRenderStates.constantMap, ...subShader.renderStates.constantMap };\n      const variableMap = { ...shaderRenderStates.variableMap, ...subShader.renderStates.variableMap };\n\n      for (let i = 0; i < subShader.passes.length; i++) {\n        const pass = subShader.passes[i];\n        Object.assign(pass.renderStates.constantMap, constMap);\n        Object.assign(pass.renderStates.variableMap, variableMap);\n        if (pass.isUsePass) continue;\n        // @ts-ignore\n        const passGlobalStatements = curSubShaderGlobalStatements.concat(pass.globalContents);\n        pass.contents = passGlobalStatements.map((item) => item.content).join(\"\\n\");\n      }\n    }\n\n    Logger.info(`[content compilation] cost time ${performance.now() - start}ms`);\n\n    return ret;\n  }\n\n  private static _parseShaderStatements(ret: IShaderContent, scanner: Scanner) {\n    let braceLevel = 1;\n    let start = scanner.getCurPosition();\n\n    while (true) {\n      const word = scanner.scanToken();\n      switch (word.type) {\n        case EKeyword.GS_SubShader:\n          this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n          const subShader = this._parseSubShader(scanner);\n          ret.subShaders.push(subShader);\n          start = scanner.getCurPosition();\n          break;\n\n        case EKeyword.GS_EditorProperties:\n        case EKeyword.GS_EditorMacros:\n        case EKeyword.GS_Editor:\n          this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n          scanner.scanPairedText(\"{\", \"}\", true);\n          start = scanner.getCurPosition();\n          break;\n\n        case EKeyword.GS_RenderQueueType:\n          this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n          this._parseRenderQueueAssignment(ret, scanner);\n          start = scanner.getCurPosition();\n          break;\n\n        case ETokenType.NOT_WORD:\n          if (word.lexeme === \"{\") braceLevel += 1;\n          else if (word.lexeme === \"}\") {\n            braceLevel -= 1;\n            if (braceLevel === 0) {\n              this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n              this._symbolTable.dropScope();\n              return;\n            }\n          }\n\n        default:\n          if (ShaderContentParser._isRenderStateDeclarator(word)) {\n            this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n            this._parseRenderStateDeclarationOrAssignment(ret, word, scanner);\n            start = scanner.getCurPosition();\n            break;\n          } else if (ShaderContentParser._isEngineType(word)) {\n            this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n            this._parseVariableDeclaration(word.type, scanner);\n            start = scanner.getCurPosition();\n            break;\n          }\n      }\n    }\n  }\n\n  private static _parseRenderStateDeclarationOrAssignment(\n    ret: { renderStates: IRenderStates },\n    stateToken: BaseToken,\n    scanner: Scanner\n  ) {\n    const ident = scanner.scanToken();\n    let isDeclaration: boolean;\n    if (ident.type === ETokenType.ID) {\n      isDeclaration = true;\n      scanner.scanText(\"{\");\n    } else if (ident.lexeme === \"{\") {\n      isDeclaration = false;\n    } else if (ident.lexeme === \"=\") {\n      const variable = scanner.scanToken();\n      scanner.scanText(\";\");\n      const sm = this._symbolTable.lookup({ type: stateToken.type, ident: variable.lexeme });\n      if (!sm?.value) {\n        const error = ShaderLabUtils.createGSError(\n          `Invalid \"${stateToken.lexeme}\" variable: ${variable.lexeme}`,\n          GSErrorName.CompilationError,\n          scanner.source,\n          variable.location\n        );\n        // #if _VERBOSE\n        this._errors.push(<GSError>error);\n        return;\n        // #endif\n      }\n      const renderState = sm.value as IRenderStates;\n      Object.assign(ret.renderStates.constantMap, renderState.constantMap);\n      Object.assign(ret.renderStates.variableMap, renderState.variableMap);\n      return;\n    }\n\n    const renderState = this._parseRenderStatePropList(stateToken.lexeme, scanner);\n    if (isDeclaration) {\n      this._symbolTable.insert({ ident: ident.lexeme, type: stateToken.type, value: renderState });\n    } else {\n      Object.assign(ret.renderStates.constantMap, renderState.constantMap);\n      Object.assign(ret.renderStates.variableMap, renderState.variableMap);\n    }\n  }\n\n  private static _parseVariableDeclaration(type: number, scanner: Scanner) {\n    const token = scanner.scanToken();\n    scanner.scanText(\";\");\n    this._symbolTable.insert({ type: token.type, ident: token.lexeme });\n  }\n\n  private static _newScope() {\n    const symbolTable = new SymbolTable();\n    this._symbolTable.newScope(symbolTable);\n  }\n\n  private static _parseRenderStatePropList(state: string, scanner: Scanner): IRenderStates {\n    const ret: IRenderStates = { constantMap: {}, variableMap: {} };\n    while (scanner.getCurChar() !== \"}\") {\n      this._parseRenderStatePropItem(ret, state, scanner);\n      scanner.skipCommentsAndSpace();\n    }\n    scanner._advance();\n    return ret;\n  }\n\n  private static _parseRenderStatePropItem(ret: IRenderStates, state: string, scanner: Scanner) {\n    let renderStateProp = scanner.scanToken().lexeme;\n    const op = scanner.scanToken();\n    if (state === \"BlendState\" && renderStateProp !== \"BlendColor\" && renderStateProp !== \"AlphaToCoverage\") {\n      let idx = 0;\n      if (op.lexeme === \"[\") {\n        idx = scanner.scanNumber();\n        scanner.scanText(\"]\");\n        scanner.scanText(\"=\");\n      } else if (op.lexeme !== \"=\") {\n        const error = ShaderLabUtils.createGSError(\n          `Invalid syntax, expect character '=', but got ${op.lexeme}`,\n          GSErrorName.CompilationError,\n          scanner.source,\n          scanner.getCurPosition()\n        );\n        // #if _VERBOSE\n        this._errors.push(<GSError>error);\n        scanner.scanToCharacter(\";\");\n        return;\n        // #endif\n      }\n      renderStateProp += idx;\n    }\n\n    renderStateProp = state + renderStateProp;\n    const renderStateElementKey = RenderStateDataKey[renderStateProp];\n    if (renderStateElementKey == undefined) {\n      const error = ShaderLabUtils.createGSError(\n        `Invalid render state element ${renderStateProp}`,\n        GSErrorName.CompilationError,\n        scanner.source,\n        scanner.getCurPosition()\n      );\n      // #if _VERBOSE\n      this._errors.push(<GSError>error);\n      scanner.scanToCharacter(\";\");\n      return;\n      // #endif\n    }\n\n    scanner.skipCommentsAndSpace();\n    let value: any;\n    if (/[0-9.]/.test(scanner.getCurChar())) {\n      value = scanner.scanNumber();\n    } else {\n      const token = scanner.scanToken();\n      if (token.type === EKeyword.TRUE) value = true;\n      else if (token.type === EKeyword.FALSE) value = false;\n      else if (token.type === EKeyword.GS_Color) {\n        scanner.scanText(\"(\");\n        const args: number[] = [];\n        while (true) {\n          args.push(scanner.scanNumber());\n          scanner.skipCommentsAndSpace();\n          const peek = scanner.peek(1);\n          if (peek === \")\") {\n            scanner._advance();\n            break;\n          }\n          scanner.scanText(\",\");\n        }\n        value = new Color(...args);\n      } else if (scanner.getCurChar() === \".\") {\n        scanner._advance();\n        const engineTypeProp = scanner.scanToken();\n        value = ShaderContentParser._engineType[token.lexeme]?.[engineTypeProp.lexeme];\n        if (value == undefined) {\n          const error = ShaderLabUtils.createGSError(\n            `Invalid engine constant: ${token.lexeme}.${engineTypeProp.lexeme}`,\n            GSErrorName.CompilationError,\n            scanner.source,\n            engineTypeProp.location\n          );\n          // #if _VERBOSE\n          this._errors.push(<GSError>error);\n          scanner.scanToCharacter(\";\");\n          return;\n          // #endif\n        }\n      } else {\n        value = token.lexeme;\n      }\n    }\n    scanner.scanText(\";\");\n    if (typeof value === \"string\") {\n      ret.variableMap[renderStateElementKey] = value;\n    } else {\n      ret.constantMap[renderStateElementKey] = value;\n    }\n  }\n\n  private static _parseRenderQueueAssignment(ret: { renderStates: IRenderStates }, scanner: Scanner) {\n    scanner.scanText(\"=\");\n    const word = scanner.scanToken();\n    scanner.scanText(\";\");\n    const value = ShaderContentParser._engineType.RenderQueueType[word.lexeme];\n    const key = RenderStateDataKey.RenderQueueType;\n    if (value == undefined) {\n      ret.renderStates.variableMap[key] = word.lexeme;\n    } else {\n      ret.renderStates.constantMap[key] = value;\n    }\n  }\n\n  private static _addGlobalStatement(\n    ret: { globalContents: IStatement[] },\n    scanner: Scanner,\n    start: ShaderPosition,\n    offset: number\n  ) {\n    if (scanner.current > start.index + offset) {\n      ret.globalContents.push({\n        range: { start, end: { ...scanner.getCurPosition(), index: scanner.current - offset - 1 } },\n        content: scanner.source.substring(start.index, scanner.current - offset - 1)\n      });\n    }\n  }\n\n  private static _parseSubShader(scanner: Scanner): ISubShaderContent {\n    this._newScope();\n    const ret = {\n      passes: [],\n      globalContents: [],\n      renderStates: { constantMap: {}, variableMap: {} },\n      tags: {}\n    } as ISubShaderContent;\n    let braceLevel = 1;\n    ret.name = scanner.scanPairedText('\"', '\"');\n    scanner.scanText(\"{\");\n\n    scanner.skipCommentsAndSpace();\n    let start = scanner.getCurPosition();\n\n    while (true) {\n      const word = scanner.scanToken();\n      switch (word.type) {\n        case EKeyword.GS_Pass:\n          this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n          const pass = this._parsePass(scanner);\n          ret.passes.push(pass);\n          start = scanner.getCurPosition();\n          break;\n\n        case EKeyword.GS_RenderQueueType:\n          this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n          this._parseRenderQueueAssignment(ret, scanner);\n          start = scanner.getCurPosition();\n          break;\n\n        case EKeyword.GS_UsePass:\n          this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n          const name = scanner.scanPairedText('\"', '\"');\n          // @ts-ignore\n          ret.passes.push({ name, isUsePass: true, renderStates: { constantMap: {}, variableMap: {} }, tags: {} });\n          start = scanner.getCurPosition();\n          break;\n\n        case EKeyword.GS_Tags:\n          this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n          this._parseTags(ret, scanner);\n          start = scanner.getCurPosition();\n          break;\n\n        case ETokenType.NOT_WORD:\n          if (word.lexeme === \"{\") braceLevel += 1;\n          else if (word.lexeme === \"}\") {\n            braceLevel -= 1;\n            if (braceLevel === 0) {\n              this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n              this._symbolTable.dropScope();\n              return ret;\n            }\n          }\n\n        default:\n          if (ShaderContentParser._isRenderStateDeclarator(word)) {\n            this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n            this._parseRenderStateDeclarationOrAssignment(ret, word, scanner);\n            start = scanner.getCurPosition();\n            break;\n          } else if (ShaderContentParser._isEngineType(word)) {\n            this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n            this._parseVariableDeclaration(word.type, scanner);\n            start = scanner.getCurPosition();\n            break;\n          }\n      }\n    }\n  }\n\n  private static _parseTags(ret: { tags?: Record<string, number | string | boolean> }, scanner: Scanner) {\n    scanner.scanText(\"{\");\n    while (true) {\n      const ident = scanner.scanToken();\n      scanner.scanText(\"=\");\n      const value = scanner.scanPairedText('\"', '\"');\n      scanner.skipCommentsAndSpace();\n\n      ret.tags[ident.lexeme] = value;\n\n      if (scanner.peek(1) === \"}\") {\n        scanner._advance();\n        return;\n      }\n      scanner.scanText(\",\");\n    }\n  }\n\n  private static _parsePass(scanner: Scanner): IShaderPassContent {\n    this._newScope();\n    const ret = {\n      globalContents: [],\n      renderStates: { constantMap: {}, variableMap: {} },\n      tags: {}\n    } as IShaderPassContent & {\n      globalContents: IStatement[];\n    };\n    ret.name = scanner.scanPairedText('\"', '\"');\n    scanner.scanText(\"{\");\n    let braceLevel = 1;\n\n    scanner.skipCommentsAndSpace();\n    let start = scanner.getCurPosition();\n\n    while (true) {\n      const word = scanner.scanToken();\n      switch (word.type) {\n        case EKeyword.GS_RenderQueueType:\n          this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n          this._parseRenderQueueAssignment(ret, scanner);\n          start = scanner.getCurPosition();\n          break;\n\n        case EKeyword.GS_Tags:\n          this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n          this._parseTags(ret, scanner);\n          start = scanner.getCurPosition();\n          break;\n\n        case EKeyword.GS_VertexShader:\n        case EKeyword.GS_FragmentShader:\n          this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n          scanner.scanText(\"=\");\n          const entry = scanner.scanToken();\n          if (ret[word.lexeme]) {\n            const error = ShaderLabUtils.createGSError(\n              \"reassign main entry\",\n              GSErrorName.CompilationError,\n              scanner.source,\n              scanner.getCurPosition()\n            );\n            // #if _VERBOSE\n            Logger.error(error.toString());\n            throw error;\n            // #endif\n          }\n          const key = word.type === EKeyword.GS_VertexShader ? \"vertexEntry\" : \"fragmentEntry\";\n          ret[key] = entry.lexeme;\n          scanner.scanText(\";\");\n          start = scanner.getCurPosition();\n          break;\n\n        case ETokenType.NOT_WORD:\n          if (word.lexeme === \"{\") braceLevel += 1;\n          else if (word.lexeme === \"}\") {\n            braceLevel -= 1;\n            if (braceLevel === 0) {\n              this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n              this._symbolTable.dropScope();\n              return ret;\n            }\n          }\n\n        default:\n          if (ShaderContentParser._isRenderStateDeclarator(word)) {\n            this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n            this._parseRenderStateDeclarationOrAssignment(ret, word, scanner);\n            start = scanner.getCurPosition();\n            break;\n          } else if (ShaderContentParser._isEngineType(word)) {\n            this._addGlobalStatement(ret, scanner, start, word.lexeme.length);\n            this._parseVariableDeclaration(word.type, scanner);\n            start = scanner.getCurPosition();\n            break;\n          }\n      }\n    }\n  }\n}\n","import { Lexer } from \"./lexer\";\nimport { ShaderTargetParser } from \"./parser\";\nimport { Preprocessor } from \"./preprocessor\";\nimport { GLES100Visitor, GLES300Visitor } from \"./codeGen\";\nimport { IShaderContent, IShaderLab } from \"@galacean/engine-design\";\nimport { ShaderContentParser } from \"./contentParser\";\n// @ts-ignore\nimport { Logger, ShaderLib, ShaderMacro, ShaderPlatformTarget } from \"@galacean/engine\";\nimport { ShaderPosition, ShaderRange } from \"./common\";\n// #if _VERBOSE\nimport { GSError } from \"./GSError\";\n// #endif\nimport { PpParser } from \"./preprocessor/PpParser\";\nimport { ShaderLabUtils } from \"./ShaderLabUtils\";\nimport { IShaderProgramSource } from \"@galacean/engine-design/types/shader-lab/IShaderProgramSource\";\n\n/** @internal */\nexport class ShaderLab implements IShaderLab {\n  private static _parser = ShaderTargetParser.create();\n  private static _shaderPositionPool = ShaderLabUtils.createObjectPool(ShaderPosition);\n  private static _shaderRangePool = ShaderLabUtils.createObjectPool(ShaderRange);\n\n  // #if _VERBOSE\n  static _processingPassText?: string;\n  // #endif\n\n  static createPosition(index: number, line?: number, column?: number): ShaderPosition {\n    const position = this._shaderPositionPool.get();\n    position.set(\n      index,\n      // #if _VERBOSE\n      line,\n      column\n      // #endif\n    );\n    return position;\n  }\n\n  static createRange(start: ShaderPosition, end: ShaderPosition): ShaderRange {\n    const range = this._shaderRangePool.get();\n    range.set(start, end);\n    return range;\n  }\n\n  // #if _VERBOSE\n  /** Retrieve the compilation errors */\n  readonly errors: GSError[] = [];\n  // #endif\n\n  _parseShaderPass(\n    source: string,\n    vertexEntry: string,\n    fragmentEntry: string,\n    macros: ShaderMacro[],\n    backend: ShaderPlatformTarget,\n    platformMacros: string[],\n    basePathForIncludeKey: string\n  ): IShaderProgramSource | undefined {\n    Preprocessor.reset(ShaderLib, basePathForIncludeKey);\n    for (const macro of macros) {\n      Preprocessor.addPredefinedMacro(macro.name, macro.value);\n    }\n\n    for (let i = 0; i < platformMacros.length; i++) {\n      Preprocessor.addPredefinedMacro(platformMacros[i]);\n    }\n\n    const preprocessorStart = performance.now();\n    const ppdContent = Preprocessor.process(source);\n    // #if _VERBOSE\n    if (PpParser._errors.length > 0) {\n      for (const err of PpParser._errors) {\n        this.errors.push(<GSError>err);\n      }\n      this._logErrors();\n      return undefined;\n    }\n    // #endif\n\n    Logger.info(`[pass compilation - preprocessor]  cost time ${performance.now() - preprocessorStart}ms`);\n\n    const lexer = new Lexer(ppdContent);\n    const tokens = lexer.tokenize();\n\n    const { _parser: parser } = ShaderLab;\n\n    ShaderLab._processingPassText = ppdContent;\n    const program = parser.parse(tokens);\n\n    // #if _VERBOSE\n    for (const err of parser.errors) {\n      this.errors.push(err);\n    }\n    // #endif\n    if (!program) {\n      // #if _VERBOSE\n      this._logErrors();\n      // #endif\n      return undefined;\n    }\n\n    const codeGen =\n      backend === ShaderPlatformTarget.GLES100 ? GLES100Visitor.getVisitor() : GLES300Visitor.getVisitor();\n\n    const start = performance.now();\n    const ret = codeGen.visitShaderProgram(program, vertexEntry, fragmentEntry);\n    Logger.info(`[CodeGen] cost time: ${performance.now() - start}ms`);\n    ShaderLab._processingPassText = undefined;\n\n    // #if _VERBOSE\n    for (const err of codeGen.errors) {\n      this.errors.push(err);\n    }\n    this._logErrors();\n    // #endif\n\n    return ret;\n  }\n\n  _parseShaderContent(shaderSource: string): IShaderContent {\n    ShaderLabUtils.clearAllShaderLabObjectPool();\n    ShaderContentParser.reset();\n    const ret = ShaderContentParser.parse(shaderSource);\n\n    // #if _VERBOSE\n    this.errors.length = 0;\n    for (const error of ShaderContentParser._errors) {\n      this.errors.push(error);\n    }\n    // #endif\n\n    return ret;\n  }\n\n  // #if _VERBOSE\n  /**\n   * @internal\n   */\n  _logErrors() {\n    const errors = this.errors;\n    if (errors.length === 0 || !Logger.isEnabled) return;\n    Logger.error(`${errors.length} errors occur!`);\n    for (const err of errors) {\n      Logger.error(err.toString());\n    }\n  }\n  // #endif\n}\n","export { ShaderLab } from \"./ShaderLab\";\n\n// #if _VERBOSE\nexport { Preprocessor } from \"./preprocessor\";\nexport * from \"./GSError\";\n// #endif\n\n//@ts-ignore\nexport const version = `__buildVersion`;\n\nlet mode = \"Release\";\n// #if _VERBOSE\nmode = \"Verbose\";\n// #endif\n\nconsole.log(`Galacean ShaderLab version: ${version}. mode: ${mode}`);\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_create_for_of_iterator_helper_loose","o","allowArrayLike","it","Symbol","iterator","call","next","bind","isArray","_unsupported_iterable_to_array","minLen","n","Object","prototype","toString","slice","constructor","name","from","test","done","value","TypeError","_set_prototype_of","p","setPrototypeOf","__proto__","_inherits","subClass","superClass","create","writable","configurable","SuppressedError","EKeyword","ETokenType","GSErrorName","EAction","ESymbolType","ENonTerminal","ASTNode","TrivialNode","ScopeBrace","ScopeEndBrace","JumpStatement","ExpressionAstNode","SingleDeclaration","FullySpecifiedType","TypeQualifier","SingleTypeQualifier","TypeSpecifier","ArraySpecifier","IntegerConstantExpressionOperator","IntegerConstantExpression","TypeSpecifierNonArray","ExtBuiltinTypeSpecifierNonArray","InitDeclaratorList","IdentifierList","Declaration","FunctionProtoType","FunctionDeclarator","FunctionHeader","FunctionParameterList","ParameterDeclaration","ParameterDeclarator","CompoundStatementNoScope","StatementList","FunctionDefinition","FunctionCall","FunctionCallGeneric","FunctionCallParameterList","PrecisionSpecifier","FunctionIdentifier","AssignmentExpression","Expression","PrimaryExpression","PostfixExpression","StructSpecifier","StructDeclarationList","StructDeclaration","StructDeclaratorList","StructDeclarator","VariableDeclaration","VariableIdentifier","GLShaderProgram","EPpToken","EPpKeyword","EShaderStage","ShaderRange","set","start","end","dispose","ShaderPosition","index","KeywordTable","Map","ATTRIBUTE","CONST","BOOL","FLOAT","DOUBLE","INT","UINT","BREAK","CONTINUE","DO","ELSE","FOR","IF","WHILE","DISCARD","RETURN","BVEC2","BVEC3","BVEC4","IVEC2","IVEC3","IVEC4","UVEC2","UVEC3","UVEC4","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","IN","OUT","INOUT","SAMPLER2D","SAMPLER_CUBE","SAMPLER3D","SAMPLER2D_SHADOW","SAMPLER_CUBE_SHADOW","SAMPLER2D_ARRAY","SAMPLER2D_ARRAY_SHADOW","I_SAMPLER2D","I_SAMPLER3D","I_SAMPLER_CUBE","I_SAMPLER2D_ARRAY","U_SAMPLER2D","U_SAMPLER3D","U_SAMPLER_CUBE","U_SAMPLER2D_ARRAY","STRUCT","VOID","TRUE","FALSE","PRECISION","PRECISE","HIGHP","MEDIUMP","LOWP","INVARIANT","FLAT","SMOOTH","NOPERSPECTIVE","CENTROID","_instanceof","left","right","hasInstance","ShaderLabUtils","createObjectPool","type","pool","ClearableObjectPool","_shaderLabObjectPoolSet","push","clearAllShaderLabObjectPool","clear","createGSError","message","errorName","source","location","file","Error","BaseToken","lexeme","arg","ShaderLab","createPosition","createRange","EOF","LexerUtils","isNum","char","numRegex","isLetter","letterRegex","isAlpha","alphaRegex","isNumOrLetter","numOrLetterRegex","isKeyword","tt","ID","_defineProperties","target","props","descriptor","enumerable","defineProperty","key","_create_class","Constructor","protoProps","staticProps","BaseScanner","kws","_currentIndex","_source","_keywordsMap","getCurPosition","isEnd","getCurChar","advance","count","_advance","skipSpace","includeLineBreak","spaceChars","_spaceCharsWithBreak","_spaceChars","curChar","_checkIsIn","skipCommentsAndSpace","peek","to","offset","substring","scanText","text","throwError","pos","_len","arguments","msgs","_key","join","ScannerError","scanPairedText","balanced","skipLeading","level","scanToken","onToken","splitCharRegex","_this__keywordsMap_get","token","get","NOT_WORD","tokenType","range","checked","chars","current","Lexer","reset","_proto","tokenize","thisArg","body","f","y","t","_","label","sent","trys","ops","g","Iterator","verb","v","step","op","pop","e","_state","_scanWord","_scanNum","_getPosition","LEFT_ASSIGN","LEFT_OP","LE_OP","LEFT_ANGLE","RIGHT_ASSIGN","RIGHT_OP","GE_OP","RIGHT_ANGLE","INC_OP","ADD_ASSIGN","PLUS","DEC_OP","SUB_ASSIGN","DASH","EQ_OP","EQUAL","NE_OP","BANG","AND_OP","AMPERSAND","OR_OP","OR_ASSIGN","VERTICAL_BAR","XOR_OP","XOR_ASSIGN","CARET","MUL_ASSIGN","STAR","DIV_ASSIGN","SLASH","MOD_ASSIGN","PERCENT","LEFT_PAREN","RIGHT_PAREN","LEFT_BRACE","RIGHT_BRACE","LEFT_BRACKET","RIGHT_BRACKET","_scanNumAfterDot","DOT","COMMA","COLON","SEMICOLON","TILDE","QUESTION","_scanStringConst","buffer","STRING_CONST","FLOAT_CONSTANT","word","kt","_scanFloatSuffix","_scanIntegerSuffix","INT_CONSTANT","ShaderData","globalPrecisions","SymbolDataType","typeLexeme","arraySpecifier","SymbolInfo","ident","symbolType","astNode","dataType","FnSymbol","protoType","returnType","typeSpecifier","FN","StructSymbol","BaseSymbolTable","_table","insert","sm","_this__table_get","entry","symbolEqualCheck","Logger","warn","lookup","_step","_iterator","item","SymbolTableStack","_stack","newScope","scope","dropScope","_scope","ret","SymbolTable","exist","newSymbol","signature","existParams","paramSig","newSymbolParams","getAllFnSymbols","fnIdent","entries","filter","VarSymbol","isGlobalVariable","initAst","_this","VAR","SematicAnalyzer","semanticStack","acceptRule","undefined","symbolTable","_shaderData","_translationRuleTable","addTranslationRule","pid","rule","getTranslationRule","error","loc","param","shaderData","Production","goal","derivation","id","_id","Grammar","productions","startSymbol","unshift","START","getProductionList","nonTerminal","isNullableNT","NT","find","EPSILON","getProductionByID","map","gsl","SymbolType","StructProp","typeInfo","TreeNode","children","nt","_location","_children","codeGen","visitor","defaultCodeGen","semanticAnalyze","sa","_unwrapToken","node","Token","_ignore","scope_brace","scope_end_brace","jump_statement","visitJumpStatement","_type","_this__type","single_declaration","fullyType","initializer","visitSingleDeclaration","fully_specified_type","qualifierList","type_qualifier","concat","qualifier","single_type_qualifier","child","type_specifier","arraySize","_this_children_","_this_children","size","isCustom","array_specifier","integerConstantExpr","integer_constant_expression_operator","operator","compute","a","b","integer_constant_expression","Number","type_specifier_nonarray","ext_builtin_type_specifier_nonarray","init_declarator_list","singleDecl","initDeclList","identifier_list","idList","declaration","visitDeclaration","function_prototype","visitFunctionProtoType","declarator","parameterList","parameterInfoList","function_declarator","header","_this_parameterList","function_header","visitFunctionHeader","function_parameter_list","visitFunctionParameterList","decl","list","parameter_declaration","varSymbol","typeQualifier","parameterDeclarator","parameter_declarator","compound_statement_no_scope","statement_list","visitStatementList","function_definition","visitFunctionDefinition","statements","function_call","visitFunctionCall","function_call_generic","fnSymbol","functionIdentifier","isBuiltin","paramList","function_call_parameter_list","expr","paramNodes","precision_specifier","function_identifier","visitFunctionIdentifier","ty","assignment_expression","expression","primary_expression","postfix_expression","visitPostfixExpression","struct_specifier","propList","declList","struct_declaration_list","flat","struct_declaration","declaratorList","prop","struct_declarator_list","struct_declarator","variable_declaration","visitGlobalVariableDeclaration","variable_identifier","symbolInfo","visitVariableIdentifier","_this_symbolInfo","gs_shader_program","GrammarUtils","isTerminal","createProductionWithOptions","options","astTypePool","opt","createProductionOptions","common","position","opts","apply","addMapSetItem","k","Set","add","isSubSet","sb","has","isActionEqual","action","productionAndRules","global_declaration","GS_RenderQueueType","MAT2X3","MAT2X4","MAT3X2","MAT3X4","MAT4X2","MAT4X3","storage_qualifier","precision_qualifier","interpolation_qualifier","invariant_qualifier","conditional_expression","logical_or_expression","logical_xor_expression","logical_and_expression","inclusive_or_expression","exclusive_or_expression","and_expression","equality_expression","relational_expression","shift_expression","additive_expression","multiplicative_expression","unary_expression","unary_operator","assignment_operator","AND_ASSIGN","statement","compound_statement","simple_statement","expression_statement","selection_statement","iteration_statement","initializer_list","condition","for_init_statement","for_rest_statement","conditionopt","StateItem","production","lookahead","_needReInfer","lookaheadSet","la","addLookahead","ts","needReInfer","symbolByOffset","canReduce","curSymbol","nextSymbol","State","cores","closured","_stateItemPool","_items","itemMapKey","getStateItemMapKey","createStateItem","mapId","newItem","cacheKey","getMapKey","state","closureMap","core","newState","items","LALR1","grammar","firstSetMap","followSetMap","actionTable","gotoTable","_firstSetNTStack","generate","computeFirstSet","buildStateTable","startStateItemCore","startState","_extendState","_closure","newStates","_inferNextState","ns","_extendStateItem","productionList","newLookaheadSet","terminalExist","lastFirstSet","_step1","_iterator1","_step2","_iterator2","Utils","_step3","_iterator3","coreMap","stateActionTable","_this_actionTable_get","stateGotoTable","_this_gotoTable_get","stateItem","Reduce","Accept","_addAction","nextItem","gs","Shift","table","terminal","_computeFirstSetForNT","idx","findIndex","computingFS","curNT","firstSet","succeedFirstSet","ShaderTargetParser","_traceBackStack","sematicAnalyzer","parse","tokens","performance","now","traceBackStack","nextToken","loopCount","actionInfo","info","CompilationError","_processingPassText","reduceProduction","translationRule","values","nextState","_singleton","generator","curState","_type_of","obj","MacroDefine","macro","args","_argsLexemes","_replaceRegex","RegExp","expandFunctionBody","_this_args","PreprocessorError","replace","m","indexOf","isFunction","PpKeyword","PpUtils","expand","segments","startIdx","generatedIdx","seg","originSlice","rangeInBlock","generatedIdxEnd","assembleSegments","PpScanner","macroLvl","scanDirective","expandOnToken","directive","_advanceToDirective","if","ifdef","ifndef","includes","endif","scanWordsUntilChar","nonLetterChar","scanWord","skipNonLetter","getShaderPosition","kw","_skipComments","_splitCharacters","scanQuotedString","string_const","scanToChar","scanMacroBranchChunk","startLvl","elif","else","chunk","nextDirective","scanPairedBlock","lc","rc","scanRemainMacro","peekNonSpace","scanInteger","integer","int_constant","scanLineRemain","comments","line","line_remain","commentRange","startsWith","PpParser","includeMap","basePathForIncludeKey","_definedMacros","_expandSegmentsStack","_branchMacros","addPredefinedMacro","_includeMap","_basePathForIncludeKey","macroBody","tk","scanner","_onToken","define","_parseDefine","undef","_parseUndef","_parseIf","_parseIfNdef","_parseIfDef","include","_parseInclude","expandSegments","sourceMap","reportError","includedPath","URL","href","ShaderPass","_shaderRootPath","expanded","_expandMacroChunk","content","_addEmptyReplace","bodyChunk","_parseMacroBranch","elseChunk","startPosition","constantExpr","_parseConstantExpression","endPosition","_parseLogicalOrExpression","operand1","_parseLogicalAndExpression","operand2","_parseEqualityExpression","_parseRelationalExpression","_parseShiftExpression","opPos","_parseAdditiveExpression","_parseMulticativeExpression","_parseUnaryExpression","parenExpr","_parseParenthesisExpression","_parseConstant","defined","withParen","isInteger","scannerOrFile","macroArgs","macroDefine","delete","curLvl","curIdx","blockRange","Preprocessor","process","baseScanner","ParserUtils","unwrapNodeByType","VisitorContext","attributeList","attributeStructs","_referencedAttributeList","_referencedGlobals","_referencedVaryingList","isAttributeStruct","isVaryingStruct","_this_varyingStruct_ident","_this_varyingStruct","varyingStruct","referenceAttribute","referenceVarying","referenceGlobal","fnEntries","_passSymbolTable","passSymbolTable","context","CodeGenVisitor","postExpr","paramInfoList","plainParams","params","fullType","_curFn","cmd","returnVar","returnFnCall","_reportError","GLESVisitor","_versionText","_extensions","visitShaderProgram","vertexEntry","fragmentEntry","vertex","vertexMain","fragment","_fragmentMain","data","fnNode","stage","VERTEX","varyStruct","paramInfo","structSymbol","globalCode","_getGlobalText","getAttributeDeclare","getVaryingDeclare","sort","FRAGMENT","globalText","textList","lastLength","_serialized","keys","precision","GLES100Visitor","getVisitor","V3_GL_FragColor","GLES300Visitor","_is_native_reflect_construct","result","Boolean","valueOf","Reflect","construct","_construct","Parent","Class","instance","Function","_extends","assign","hasOwnProperty","KeywordMap","GS_BlendState","GS_DepthState","GS_StencilState","GS_RasterState","GS_EditorProperties","GS_EditorMacros","GS_Editor","GS_Tags","GS_VertexShader","GS_FragmentShader","GS_SubShader","GS_Pass","GS_BlendFactor","GS_BlendOperation","GS_Bool","GS_Number","GS_CompareFunction","GS_StencilOperation","GS_CullMode","GS_UsePass","GS_Color","Scanner","scanNumber","s1","s2","EngineType","RenderStateType","ShaderContentParser","_isRenderStateDeclarator","_isEngineType","_errors","_symbolTable","_newScope","subShaders","globalContents","renderStates","constantMap","variableMap","_parseShaderStatements","shaderGlobalStatements","shaderRenderStates","subShader","curSubShaderGlobalStatements","constMap","passes","pass","isUsePass","passGlobalStatements","contents","braceLevel","_addGlobalStatement","_parseSubShader","_parseRenderQueueAssignment","_parseRenderStateDeclarationOrAssignment","_parseVariableDeclaration","stateToken","isDeclaration","variable","renderState","_parseRenderStatePropList","_parseRenderStatePropItem","renderStateProp","renderStateElementKey","RenderStateDataKey","Color","engineTypeProp","_engineType","RenderQueueType","tags","_parsePass","_parseTags","CompareFunction","StencilOperation","BlendOperation","BlendFactor","CullMode","_parseShaderPass","macros","backend","platformMacros","ShaderLib","preprocessorStart","ppdContent","lexer","parser","_parser","program","ShaderPlatformTarget","GLES100","_parseShaderContent","shaderSource","column","_shaderPositionPool","_shaderRangePool","version","console","log"],"mappings":"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"}