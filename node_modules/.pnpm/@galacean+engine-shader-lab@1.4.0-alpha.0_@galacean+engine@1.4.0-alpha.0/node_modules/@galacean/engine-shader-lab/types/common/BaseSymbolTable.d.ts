import { GalaceanDataType } from "./types";
export interface IBaseSymbol {
    readonly ident: string;
}
/**
 * The base class of `SymbolTable`
 */
export declare abstract class BaseSymbolTable<T extends IBaseSymbol = IBaseSymbol> {
    protected _table: Map<string, T[]>;
    /**
     * Check the equality of two symbol.
     */
    abstract symbolEqualCheck(exist: T, newSymbol: T): boolean;
    insert(sm: T): void;
    lookup<R = T>(sm: T & {
        signature?: GalaceanDataType[];
    }): R;
}
export declare class SymbolTableStack<S extends IBaseSymbol, T extends BaseSymbolTable<S>> {
    private _stack;
    get _scope(): T;
    newScope(scope: T): void;
    clear(): void;
    dropScope(): void;
    insert(sm: S): void;
    lookup(sm: S & {
        signature?: GalaceanDataType[];
    }): S;
}
