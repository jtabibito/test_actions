import { IBaseSymbol } from "../../common/BaseSymbolTable";
import { ASTNode } from "../AST";
import { SymbolDataType } from "./SymbolDataType";
export declare enum ESymbolType {
    VAR = 0,
    FN = 1,
    STRUCT = 2
}
type SymbolAstNode = ASTNode.Initializer | ASTNode.StructSpecifier | ASTNode.FunctionDefinition | ASTNode.ParameterDeclarator | ASTNode.InitDeclaratorList | ASTNode.VariableDeclaration;
export declare class SymbolInfo implements IBaseSymbol {
    readonly ident: string;
    readonly symbolType: ESymbolType;
    readonly astNode?: SymbolAstNode;
    readonly dataType?: SymbolDataType;
    constructor(ident: string, symbolType: ESymbolType, astNode?: SymbolAstNode, dataType?: SymbolDataType);
}
export {};
