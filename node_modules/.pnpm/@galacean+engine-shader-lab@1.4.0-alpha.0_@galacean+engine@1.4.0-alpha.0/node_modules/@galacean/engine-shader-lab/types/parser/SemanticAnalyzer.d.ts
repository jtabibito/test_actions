import { ShaderRange } from "../common";
import { TreeNode } from "./AST";
import { ShaderData } from "./ShaderInfo";
import { SymbolInfo, SymbolTable } from "../parser/symbolTable";
import { NodeChild } from "./types";
import { SymbolTableStack } from "../common/BaseSymbolTable";
import { GSError } from "../GSError";
export type TranslationRule<T = any> = (sa: SematicAnalyzer, ...tokens: NodeChild[]) => T;
/**
 * The semantic analyzer of `ShaderLab` compiler.
 * - Build symbol table
 * - Static analysis
 */
export default class SematicAnalyzer {
    semanticStack: TreeNode[];
    acceptRule?: TranslationRule;
    symbolTable: SymbolTableStack<SymbolInfo, SymbolTable>;
    private _shaderData;
    readonly errors: GSError[];
    get shaderData(): ShaderData;
    private _translationRuleTable;
    constructor();
    reset(): void;
    newScope(): void;
    dropScope(): void;
    addTranslationRule(pid: number, rule: TranslationRule): void;
    getTranslationRule(pid: number): TranslationRule<any>;
    error(loc: ShaderRange, ...param: any[]): GSError;
}
