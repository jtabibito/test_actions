import { ShaderRange } from "../common";
import { TreeNode } from "../parser/AST";
import { TranslationRule } from "../parser/SemanticAnalyzer";
import { ENonTerminal, GrammarSymbol } from "../parser/GrammarSymbol";
import Production from "./Production";
import { ActionInfo } from "./types";
import { ClearableObjectPool, IPoolElement } from "@galacean/engine";
import { NodeChild } from "../parser/types";
export default class GrammarUtils {
    static isTerminal(sm: GrammarSymbol): boolean;
    static toString(sm: GrammarSymbol): string;
    static createProductionWithOptions(goal: ENonTerminal, options: GrammarSymbol[][], 
    /** the ast node */
    astTypePool?: ClearableObjectPool<{
        set: (loc: ShaderRange, children: NodeChild[]) => void;
    } & IPoolElement & TreeNode>): [GrammarSymbol[], TranslationRule][];
    static createProductionOptions(common: GrammarSymbol[], position: number, opts: GrammarSymbol[][]): GrammarSymbol[][];
    static addMapSetItem<K, T>(map: Map<K, Set<T>>, k: K, v: T): void;
    static isSubSet<T>(sa: Set<T>, sb: Set<T>): boolean;
    static isActionEqual(a: ActionInfo, b: ActionInfo): boolean;
    static printAction(actionInfo: ActionInfo): string;
    static printProduction(production: Production): string;
}
