import { Vector3, ModelMesh, Quaternion, MeshTopology } from '@galacean/engine';

/**
 * create a circle mesh
 * @param engine - Engine
 * @param radius - Circle radius
 * @param segments - Number of segments
 * @param center - Circle center
 * @param normal - Circle direction
 * @returns Circle model mesh
 */ function createCircleMesh(engine, radius, segments, center, normal) {
    if (radius === void 0) radius = 1;
    if (segments === void 0) segments = 48;
    if (center === void 0) center = new Vector3(0, 0, 0);
    if (normal === void 0) normal = new Vector3(0, 0, 1);
    var mesh = new ModelMesh(engine);
    var indices = new Uint16Array(segments * 3);
    var vertices = [];
    var startPoint = new Vector3(1, 0, 0).scale(radius);
    var tempQuat = new Quaternion();
    var tempVect = new Vector3();
    for(var i = 1; i <= segments; i++){
        var start = (i - 1) * 3;
        indices[start] = i;
        indices[start + 1] = i + 1;
        indices[start + 2] = 0;
    }
    vertices.push(center);
    for(var s = 0; s <= segments; s++){
        var segment = s / segments * Math.PI * 2;
        Quaternion.rotationAxisAngle(normal, segment, tempQuat);
        Vector3.transformByQuat(startPoint, tempQuat, tempVect);
        vertices[s + 1] = tempVect.clone();
    }
    mesh.setPositions(vertices);
    mesh.setIndices(indices);
    mesh.addSubMesh(0, indices.length, MeshTopology.Triangles);
    mesh.uploadData(false);
    return mesh;
}

export { createCircleMesh };
//# sourceMappingURL=CircleMesh.js.map
