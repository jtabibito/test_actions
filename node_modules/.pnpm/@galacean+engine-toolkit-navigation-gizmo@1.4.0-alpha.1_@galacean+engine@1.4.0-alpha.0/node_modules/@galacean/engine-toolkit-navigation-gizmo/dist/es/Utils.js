import { Vector3, PrimitiveMesh } from '@galacean/engine';
import { createCircleMesh } from './CircleMesh.js';
import { PlainColorMaterial } from '@galacean/engine-toolkit-custom-material';

/** @internal */ var Utils = function Utils(engine) {
    this.radius = 9.2;
    this.endRadius = 1.6;
    this.axisLength = this.radius - 2 * this.endRadius;
    this.endDist = this.radius - this.endRadius;
    this.xRotateVector = new Vector3();
    this.yRotateVector = new Vector3();
    this.zRotateVector = new Vector3();
    this.xTranslateVector = new Vector3();
    this.yTranslateVector = new Vector3();
    this.zTranslateVector = new Vector3();
    this.xEndTranslateVector = new Vector3();
    this.yEndTranslateVector = new Vector3();
    this.zEndTranslateVector = new Vector3();
    var redMaterial = new PlainColorMaterial(engine);
    redMaterial.isTransparent = true;
    redMaterial.baseColor.set(1.0, 0.25, 0.25, 1.0);
    this.redMaterial = redMaterial;
    var greenMaterial = new PlainColorMaterial(engine);
    greenMaterial.isTransparent = true;
    greenMaterial.baseColor.set(0.5, 0.8, 0.2, 1.0);
    this.greenMaterial = greenMaterial;
    var blueMaterial = new PlainColorMaterial(engine);
    blueMaterial.isTransparent = true;
    blueMaterial.baseColor.set(0.3, 0.5, 1.0, 1.0);
    this.blueMaterial = blueMaterial;
    var bgMaterial = new PlainColorMaterial(engine);
    bgMaterial.isTransparent = true;
    bgMaterial.baseColor.set(1, 1, 1, 0.1);
    this.bgMaterial = bgMaterial;
    var greyMaterial = new PlainColorMaterial(engine);
    greyMaterial.isTransparent = true;
    greyMaterial.baseColor.set(0.5, 0.5, 0.5, 1);
    this.greyMaterial = greyMaterial;
    this.axisMesh = PrimitiveMesh.createCylinder(engine, 0.12, 0.12, this.axisLength);
    this.bgMesh = createCircleMesh(engine, this.radius, 144);
    this.endMesh = createCircleMesh(engine, this.endRadius - 0.2);
    this.xRotateVector = new Vector3(0, 0, 90);
    this.yRotateVector = new Vector3(0, 90, 0);
    this.zRotateVector = new Vector3(90, 0, 0);
    this.xTranslateVector = new Vector3(this.axisLength * 0.5, 0, 0);
    this.yTranslateVector = new Vector3(0, this.axisLength * 0.5, 0);
    this.zTranslateVector = new Vector3(0, 0, this.axisLength * 0.5);
    this.xEndTranslateVector = new Vector3(this.endDist, 0, 0);
    this.yEndTranslateVector = new Vector3(0, this.endDist, 0);
    this.zEndTranslateVector = new Vector3(0, 0, this.endDist);
};

export { Utils };
//# sourceMappingURL=Utils.js.map
