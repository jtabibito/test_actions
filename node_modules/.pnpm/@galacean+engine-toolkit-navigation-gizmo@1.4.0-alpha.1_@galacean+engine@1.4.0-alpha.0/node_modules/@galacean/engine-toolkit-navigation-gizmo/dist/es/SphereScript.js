import { _ as _inherits, a as _create_class } from './_inherits-ae42bcd9.js';
import { Quaternion, Vector2, Vector3, Matrix, Camera, MathUtil, Layer, TextRenderer, Script, Ray } from '@galacean/engine';

/** @internal */ var SphereScript = /*#__PURE__*/ function(Script1) {
    _inherits(SphereScript, Script1);
    function SphereScript() {
        var _this;
        _this = Script1.apply(this, arguments) || this;
        _this._isTriggered = false;
        _this._speedXFactor = 0.02;
        _this._speedYFactor = 0.004;
        _this._textColor = [];
        _this._tempQuat = new Quaternion();
        _this._tempQuat2 = new Quaternion();
        _this._deltaPointer = new Vector2();
        _this._tempMat = new Matrix();
        _this._upVec = new Vector3(0, 1, 0);
        _this._topVec = new Vector3(0, 1, 0);
        _this._bottomVec = new Vector3(0, -1, 0);
        _this._target = SphereScript._vector;
        _this._currentPos = new Vector3();
        _this._rotateVec = new Vector3();
        _this._tempUpVec = new Vector3();
        _this._startRadian = 0;
        _this._ray = new Ray();
        _this._isBack = false;
        _this._disabledCompArray = [];
        return _this;
    }
    var _proto = SphereScript.prototype;
    _proto.onAwake = function onAwake() {
        var gizmoEntity = this.entity.parent;
        this._directionEntity = gizmoEntity.findByName("direction");
        this._roundEntity = this.entity.findByName("round");
        this._endEntity = this._directionEntity.findByName("end");
        this._gizmoCameraEntity = gizmoEntity.findByName("gizmo-camera");
        this._gizmoCamera = this._gizmoCameraEntity.getComponent(Camera);
        this._xEntity = this._endEntity.findByName("-x").findByName("back");
        this._yEntity = this._endEntity.findByName("-y").findByName("back");
        this._zEntity = this._endEntity.findByName("-z").findByName("back");
        // original text color
        this._getTextColor();
    };
    _proto.onPointerEnter = function onPointerEnter() {
        this._roundEntity.isActive = true;
        this._xEntity.isActive = true;
        this._yEntity.isActive = true;
        this._zEntity.isActive = true;
    };
    _proto.onPointerExit = function onPointerExit() {
        if (!this._isTriggered) {
            this._roundEntity.isActive = false;
            this._xEntity.isActive = false;
            this._yEntity.isActive = false;
            this._zEntity.isActive = false;
        }
    };
    _proto.onPointerDown = function onPointerDown(pointer) {
        this._disableComponent();
        this._recoverTextColor();
        // get targetPoint
        SphereScript._startPos.copyFrom(this._sceneCameraEntity.transform.worldPosition);
        SphereScript._startQuat.copyFrom(this._directionEntity.transform.worldRotationQuaternion);
        SphereScript._startPointer.copyFrom(pointer.position);
        this._tempUpVec.copyFrom(this._sceneCameraEntity.transform.worldUp);
        this._isBack = this._tempUpVec.y <= 0;
        this._upVec.copyFrom(this._isBack ? this._bottomVec : this._topVec);
        SphereScript._startAxis.copyFrom(this._sceneCameraEntity.transform.worldForward);
        Vector3.cross(SphereScript._startAxis, this._upVec, SphereScript._startAxis);
        Vector3.subtract(SphereScript._startPos, this._target, this._tempUpVec);
        var radius = this._tempUpVec.length();
        var dot = Vector3.dot(this._tempUpVec, this._upVec);
        if (this._isBack) {
            this._startRadian = Math.PI + Math.acos(MathUtil.clamp(dot / radius, -1, 1));
        } else {
            this._startRadian = Math.acos(MathUtil.clamp(dot / radius, -1, 1));
        }
        this._isTriggered = true;
        this._navigateCamera(pointer);
    };
    _proto.onPointerDrag = function onPointerDrag(pointer) {
        this._navigateCamera(pointer);
    };
    _proto.onPointerUp = function onPointerUp(pointer) {
        if (this._isTriggered) {
            this._gizmoCamera.screenPointToRay(pointer.position, this._ray);
            var result = this.engine.physicsManager.raycast(this._ray, Number.MAX_VALUE, Layer.Everything);
            if (!result) {
                this._roundEntity.isActive = false;
                this._xEntity.isActive = false;
                this._yEntity.isActive = false;
                this._zEntity.isActive = false;
            }
            this._isTriggered = false;
            this._enableComponent();
        }
    };
    _proto.onUpdate = function onUpdate() {
        if (this._isTriggered) {
            this._upVec.copyFrom(this._isBack ? this._bottomVec : this._topVec);
            Matrix.lookAt(this._currentPos, this._target, this._upVec, this._tempMat);
            this._tempMat.invert();
            this._sceneCameraEntity.transform.worldMatrix = this._tempMat;
        }
        SphereScript._tempMat.copyFrom(this._sceneCamera.viewMatrix);
        var _SphereScript__tempMat = SphereScript._tempMat, ele = _SphereScript__tempMat.elements;
        // ignore translate
        ele[12] = ele[13] = ele[14] = 0;
        this._directionEntity.transform.worldMatrix = SphereScript._tempMat;
    };
    // delta x translate to rotation around axis y
    // delta y translate to rotation around axis vertical to scene camera
    _proto._navigateCamera = function _navigateCamera(pointer) {
        var movePointer = pointer.position;
        Vector2.subtract(SphereScript._startPointer, movePointer, this._deltaPointer);
        var x = -this._deltaPointer.x * this._speedXFactor;
        var y = -this._deltaPointer.y * this._speedYFactor;
        var isBetween = this._startRadian - y > Math.PI && this._startRadian - y < 2 * Math.PI;
        this._isBack = this._startRadian - y <= 0 || isBetween;
        var _this = this, tempQuat = _this._tempQuat, tempQuat2 = _this._tempQuat2;
        Quaternion.rotationAxisAngle(SphereScript._startAxis, y, tempQuat);
        Quaternion.rotationYawPitchRoll(x, 0, 0, tempQuat2);
        Quaternion.multiply(tempQuat, tempQuat2, tempQuat);
        Vector3.subtract(SphereScript._startPos, this._target, this._rotateVec);
        Vector3.transformByQuat(this._rotateVec, tempQuat.invert(), this._currentPos);
        Vector3.add(this._target, this._currentPos, this._currentPos);
    };
    _proto._getTextColor = function _getTextColor() {
        var entities = this._endEntity.children;
        for(var i = 0; i < entities.length; i++){
            var textEntity = entities[i].findByName("text");
            var textRenderer = textEntity.getComponent(TextRenderer);
            var textColor = textRenderer.color.clone();
            this._textColor.push(textColor);
        }
    };
    _proto._recoverTextColor = function _recoverTextColor() {
        var entities = this._endEntity.children;
        for(var i = 0; i < entities.length; i++){
            var textEntity = entities[i].findByName("text");
            var textRenderer = textEntity.getComponent(TextRenderer);
            textRenderer.color.copyFrom(this._textColor[i]);
        }
    };
    _proto._disableComponent = function _disableComponent() {
        var components = [];
        this._sceneCameraEntity.getComponents(Script, components);
        for(var i = 0; i < components.length; i++){
            var currentComponent = components[i];
            var proto = Object.getPrototypeOf(currentComponent);
            if (proto.onUpdate || proto.onLateUpdate || proto.onPhysicsUpdate) {
                if (currentComponent.enabled) {
                    currentComponent.enabled = false;
                    this._disabledCompArray.push(currentComponent);
                }
            }
        }
    };
    _proto._enableComponent = function _enableComponent() {
        for(var i = 0; i < this._disabledCompArray.length; i++){
            var currentComponent = this._disabledCompArray[i];
            currentComponent.enabled = true;
        }
    };
    _create_class(SphereScript, [
        {
            key: "camera",
            get: /**
   * @return scene camera
   */ function get() {
                return this._sceneCamera;
            },
            set: function set(camera) {
                this._sceneCamera = camera;
                this._sceneCameraEntity = this._sceneCamera.entity;
            }
        },
        {
            key: "target",
            get: /**
   * @return target point
   */ function get() {
                return this._target;
            },
            set: function set(value) {
                this._target.copyFrom(value);
            }
        }
    ]);
    return SphereScript;
}(Script);
SphereScript._startQuat = new Quaternion();
SphereScript._startPointer = new Vector2();
SphereScript._startPos = new Vector3();
SphereScript._startAxis = new Vector3();
SphereScript._tempMat = new Matrix();
SphereScript._vector = new Vector3();

export { SphereScript };
//# sourceMappingURL=SphereScript.js.map
