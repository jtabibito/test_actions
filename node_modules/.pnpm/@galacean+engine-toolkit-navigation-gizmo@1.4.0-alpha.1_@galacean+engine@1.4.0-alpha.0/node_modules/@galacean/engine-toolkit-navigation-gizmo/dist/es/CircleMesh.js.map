{"version":3,"file":"CircleMesh.js","sources":["../../src/CircleMesh.ts"],"sourcesContent":["import { Vector3, Quaternion, Engine, ModelMesh, MeshTopology } from \"@galacean/engine\";\n\n/**\n * create a circle mesh\n * @param engine - Engine\n * @param radius - Circle radius\n * @param segments - Number of segments\n * @param center - Circle center\n * @param normal - Circle direction\n * @returns Circle model mesh\n */\nexport function createCircleMesh(\n  engine: Engine,\n  radius: number = 1,\n  segments: number = 48,\n  center: Vector3 = new Vector3(0, 0, 0),\n  normal: Vector3 = new Vector3(0, 0, 1)\n): ModelMesh {\n  const mesh = new ModelMesh(engine);\n\n  const indices = new Uint16Array(segments * 3);\n  const vertices: Array<Vector3> = [];\n  const startPoint = new Vector3(1, 0, 0).scale(radius);\n\n  const tempQuat = new Quaternion();\n  const tempVect = new Vector3();\n\n  for (let i = 1; i <= segments; i++) {\n    const start = (i - 1) * 3;\n    indices[start] = i;\n    indices[start + 1] = i + 1;\n    indices[start + 2] = 0;\n  }\n\n  vertices.push(center);\n\n  for (let s = 0; s <= segments; s++) {\n    const segment = (s / segments) * Math.PI * 2;\n    Quaternion.rotationAxisAngle(normal, segment, tempQuat);\n    Vector3.transformByQuat(startPoint, tempQuat, tempVect);\n    vertices[s + 1] = tempVect.clone();\n  }\n\n  mesh.setPositions(vertices);\n  mesh.setIndices(indices);\n\n  mesh.addSubMesh(0, indices.length, MeshTopology.Triangles);\n  mesh.uploadData(false);\n  return mesh;\n}\n"],"names":["createCircleMesh","engine","radius","segments","center","normal","Vector3","mesh","ModelMesh","indices","Uint16Array","vertices","startPoint","scale","tempQuat","Quaternion","tempVect","i","start","push","s","segment","Math","PI","rotationAxisAngle","transformByQuat","clone","setPositions","setIndices","addSubMesh","length","MeshTopology","Triangles","uploadData"],"mappings":";;AAEA;;;;;;;;IASO,SAASA,gBAAAA,CACdC,MAAc,EACdC,MAAkB,EAClBC,QAAqB,EACrBC,MAAsC,EACtCC,MAAsC,EAAA;AAHtCH,IAAAA,IAAAA,mBAAAA,MAAiB,GAAA,CAAA,CAAA;AACjBC,IAAAA,IAAAA,qBAAAA,QAAmB,GAAA,EAAA,CAAA;AACnBC,IAAAA,IAAAA,MAAAA,KAAAA,KAAAA,CAAAA,EAAAA,MAAAA,GAAkB,IAAIE,OAAAA,CAAQ,GAAG,CAAG,EAAA,CAAA,CAAA,CAAA;AACpCD,IAAAA,IAAAA,MAAAA,KAAAA,KAAAA,CAAAA,EAAAA,MAAAA,GAAkB,IAAIC,OAAAA,CAAQ,GAAG,CAAG,EAAA,CAAA,CAAA,CAAA;IAEpC,IAAMC,IAAAA,GAAO,IAAIC,SAAUP,CAAAA,MAAAA,CAAAA,CAAAA;IAE3B,IAAMQ,OAAAA,GAAU,IAAIC,WAAAA,CAAYP,QAAW,GAAA,CAAA,CAAA,CAAA;AAC3C,IAAA,IAAMQ,WAA2B,EAAE,CAAA;AACnC,IAAA,IAAMC,aAAa,IAAIN,OAAAA,CAAQ,GAAG,CAAG,EAAA,CAAA,CAAA,CAAGO,KAAK,CAACX,MAAAA,CAAAA,CAAAA;AAE9C,IAAA,IAAMY,WAAW,IAAIC,UAAAA,EAAAA,CAAAA;AACrB,IAAA,IAAMC,WAAW,IAAIV,OAAAA,EAAAA,CAAAA;AAErB,IAAA,IAAK,IAAIW,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,IAAKd,UAAUc,CAAK,EAAA,CAAA;AAClC,QAAA,IAAMC,KAAQ,GAACD,CAAAA,CAAAA,GAAI,CAAA,IAAK,CAAA,CAAA;QACxBR,OAAO,CAACS,MAAM,GAAGD,CAAAA,CAAAA;AACjBR,QAAAA,OAAO,CAACS,KAAAA,GAAQ,CAAE,CAAA,GAAGD,CAAI,GAAA,CAAA,CAAA;QACzBR,OAAO,CAACS,KAAQ,GAAA,CAAA,CAAE,GAAG,CAAA,CAAA;AACvB,KAAA;AAEAP,IAAAA,QAAAA,CAASQ,IAAI,CAACf,MAAAA,CAAAA,CAAAA;AAEd,IAAA,IAAK,IAAIgB,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,IAAKjB,UAAUiB,CAAK,EAAA,CAAA;AAClC,QAAA,IAAMC,UAAU,CAACD,GAAIjB,QAAYmB,GAAAA,IAAAA,CAAKC,EAAE,GAAG,CAAA,CAAA;QAC3CR,UAAWS,CAAAA,iBAAiB,CAACnB,MAAAA,EAAQgB,OAASP,EAAAA,QAAAA,CAAAA,CAAAA;QAC9CR,OAAQmB,CAAAA,eAAe,CAACb,UAAAA,EAAYE,QAAUE,EAAAA,QAAAA,CAAAA,CAAAA;AAC9CL,QAAAA,QAAQ,CAACS,CAAAA,GAAI,CAAE,CAAA,GAAGJ,SAASU,KAAK,EAAA,CAAA;AAClC,KAAA;AAEAnB,IAAAA,IAAAA,CAAKoB,YAAY,CAAChB,QAAAA,CAAAA,CAAAA;AAClBJ,IAAAA,IAAAA,CAAKqB,UAAU,CAACnB,OAAAA,CAAAA,CAAAA;AAEhBF,IAAAA,IAAAA,CAAKsB,UAAU,CAAC,CAAA,EAAGpB,QAAQqB,MAAM,EAAEC,aAAaC,SAAS,CAAA,CAAA;AACzDzB,IAAAA,IAAAA,CAAK0B,UAAU,CAAC,KAAA,CAAA,CAAA;IAChB,OAAO1B,IAAAA,CAAAA;AACT;;;;"}