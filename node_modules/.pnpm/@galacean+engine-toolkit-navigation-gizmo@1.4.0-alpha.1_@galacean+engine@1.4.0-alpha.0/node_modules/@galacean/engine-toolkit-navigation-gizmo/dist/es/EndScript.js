import { _ as _inherits, a as _create_class } from './_inherits-ae42bcd9.js';
import { Vector3, TextRenderer, MathUtil, Matrix, Script, Color, Quaternion } from '@galacean/engine';

/** @internal */ var EndScript = /*#__PURE__*/ function(Script1) {
    _inherits(EndScript, Script1);
    function EndScript() {
        var _this;
        _this = Script1.apply(this, arguments) || this;
        _this._flipView = false;
        _this._flipSpeed = 3.0;
        _this._progress = 0;
        _this._textColor = new Color();
        _this._target = EndScript._vector;
        _this._normalQuat = new Quaternion();
        _this._tempMat = new Matrix();
        _this._targetMat = new Matrix();
        _this._currentMat = new Matrix();
        _this._startMat = new Matrix();
        _this._tempVect = new Vector3();
        _this._tempEyeVect = new Vector3();
        _this._upVector = new Vector3(0, 1, 0);
        _this._disabledCompArray = [];
        _this.AxisFactor = {
            x: {
                upVector: _this._upVector,
                axis: "x",
                factor: 1,
                unit: new Vector3(0, 0.001, 0)
            },
            y: {
                upVector: _this._upVector,
                axis: "y",
                factor: 1,
                unit: new Vector3(0, 0, 0.001)
            },
            z: {
                upVector: _this._upVector,
                axis: "z",
                factor: 1,
                unit: new Vector3(0, 0.001, 0)
            },
            "-x": {
                upVector: _this._upVector,
                axis: "x",
                factor: -1,
                unit: new Vector3(0, 0.001, 0)
            },
            "-y": {
                upVector: new Vector3(0, -1, 0),
                axis: "y",
                factor: -1,
                unit: new Vector3(0, 0, -0.001)
            },
            "-z": {
                upVector: _this._upVector,
                axis: "z",
                factor: -1,
                unit: new Vector3(0, 0.001, 0)
            }
        };
        return _this;
    }
    var _proto = EndScript.prototype;
    _proto.onAwake = function onAwake() {
        var textEntity = this.entity.findByName("text");
        this._textRenderer = textEntity.getComponent(TextRenderer);
        this._textColor.copyFrom(this._textRenderer.color);
        this._backEntity = this.entity.findByName("back");
    };
    _proto.onPointerEnter = function onPointerEnter() {
        this._textRenderer.color.set(1, 1, 1, 1);
        this._backEntity.isActive = true;
    };
    _proto.onPointerExit = function onPointerExit() {
        this._textRenderer.color.copyFrom(this._textColor);
        this._backEntity.isActive = false;
    };
    _proto.onPointerClick = function onPointerClick() {
        this._disableComponent();
        var currentAxisName = this.entity.name;
        this._startMat = this._sceneCameraEntity.transform.worldMatrix.clone();
        this._currentMat = this._sceneCameraEntity.transform.worldMatrix;
        this._targetMat = this._getTargetMatrix(this._sceneCameraEntity, currentAxisName);
        this._flipView = true;
    };
    _proto.onUpdate = function onUpdate(deltaTime) {
        this.entity.transform.worldRotationQuaternion = this._normalQuat;
        if (this._flipView) {
            this._progress += deltaTime;
            var t = MathUtil.clamp(this._progress * this._flipSpeed, 0, 1);
            if (t >= 1) {
                this._flipView = false;
                this._progress = 0;
                this._enableComponent();
            }
            Matrix.lerp(this._startMat, this._targetMat, t, this._currentMat);
            this._sceneCameraEntity.transform.worldMatrix = this._currentMat;
        }
    };
    _proto._getTargetMatrix = function _getTargetMatrix(entity, axisName) {
        var _this = this, tempTargetVect = _this._target, tempEyeVect = _this._tempEyeVect, tempVect = _this._tempVect, tempMat = _this._tempMat;
        var _this_AxisFactor_axisName = this.AxisFactor[axisName], upVector = _this_AxisFactor_axisName.upVector, factor = _this_AxisFactor_axisName.factor, axis = _this_AxisFactor_axisName.axis, unit = _this_AxisFactor_axisName.unit;
        Vector3.subtract(entity.transform.worldPosition, tempTargetVect, tempVect);
        var radius = tempVect.length();
        unit[axis] = factor * radius;
        // get eye position
        Vector3.add(unit, tempTargetVect, tempEyeVect);
        // get worldMatrix for scene camera
        Matrix.lookAt(tempEyeVect, tempTargetVect, upVector, tempMat);
        tempMat.invert();
        return tempMat;
    };
    _proto._disableComponent = function _disableComponent() {
        var components = [];
        this._sceneCameraEntity.getComponents(Script, components);
        for(var i = 0; i < components.length; i++){
            var currentComponent = components[i];
            var proto = Object.getPrototypeOf(currentComponent);
            if (proto.onUpdate || proto.onLateUpdate || proto.onPhysicsUpdate) {
                if (currentComponent.enabled) {
                    currentComponent.enabled = false;
                    this._disabledCompArray.push(currentComponent);
                }
            }
        }
    };
    _proto._enableComponent = function _enableComponent() {
        for(var i = 0; i < this._disabledCompArray.length; i++){
            var currentComponent = this._disabledCompArray[i];
            currentComponent.enabled = true;
        }
    };
    _create_class(EndScript, [
        {
            key: "camera",
            get: /**
   * @return scene camera
   */ function get() {
                return this._sceneCamera;
            },
            set: function set(camera) {
                this._sceneCamera = camera;
                this._sceneCameraEntity = this._sceneCamera.entity;
            }
        },
        {
            key: "target",
            get: /**
   * target point for gizmo, default (0,0,0)
   * @return target point
   */ function get() {
                return this._target;
            },
            set: function set(value) {
                this._target.copyFrom(value);
            }
        }
    ]);
    return EndScript;
}(Script);
EndScript._vector = new Vector3();

export { EndScript };
//# sourceMappingURL=EndScript.js.map
