export type TypeValueProperty = {
    k: number;
    x?: Function;
    ix?: number;
    a: boolean;
};
type TypePoint = {
    partialLength: number;
    point: number[];
};
export type TypeKeyframe = {
    e: number[];
    s: number[];
    t: number;
    i?: {
        x: number;
        y: number;
    };
    o?: {
        x: number;
        y: number;
    };
    h?: number;
    ti?: number[];
    to?: number[];
    beziers?: BezierEasing.EasingFunction[];
    timeBezier?: BezierEasing.EasingFunction;
    bezierData?: {
        segmentLength: number;
        points: TypePoint[];
    };
    n?: string;
};
export type TypeValueKeyframedProperty = {
    k: TypeKeyframe[];
    x?: Function;
    ix?: number;
    a: boolean;
};
export type TypeMultiDimensionalProperty = {
    k: number[];
    x?: Function;
    ix?: number;
    a: boolean;
};
export type TypeMultiDimensionalKeyframedProperty = {
    k: TypeKeyframe[];
    x?: Function;
    ix?: number;
    a: boolean;
};
/**
 * basic property for animate property unit
 * @internal
 */
export default class BaseProperty {
    mult: number;
    v: any;
    value: any;
    newValue: any;
    expression: any;
    animated: boolean;
    constructor(data: TypeValueProperty | TypeValueKeyframedProperty | TypeMultiDimensionalProperty | TypeMultiDimensionalKeyframedProperty, mult?: number);
    getValue(frameNum: number, i: number, keyData: TypeKeyframe, nextKeyData: TypeKeyframe): number;
    protected reset(): void;
}
export {};
