import { Skeleton, SkeletonData, AnimationState, AnimationStateData } from "@esotericsoftware/spine-core";
import { Buffer, Renderer, Entity, Material, Engine, BoundingBox, Primitive, SubPrimitive } from "@galacean/engine";
import { SkeletonDataResource } from "./loader/SkeletonDataResource";
/**
 * Spine animation renderer, capable of rendering spine animations and providing functions for animation and skeleton manipulation.
 */
export declare class SpineAnimationRenderer extends Renderer {
    private static _defaultMaterial;
    private static _spineGenerator;
    private static _positionVertexElement;
    private static _colorVertexElement;
    private static _uvVertexElement;
    /** @internal */
    static _materialCache: Map<string, Material>;
    /** @internal */
    static _animationDataCache: Map<SkeletonData, AnimationStateData>;
    /** @internal */
    static _getDefaultMaterial(engine: Engine): Material;
    /** Render setting for spine rendering. */
    setting: SpineRenderSetting;
    /**
     * Default state for spine animation.
     * Contains the default animation name to be played, whether this animation should loop,
     * the default skin name, and the default scale of the skeleton.
     */
    defaultState: DefaultState;
    /** @internal */
    _primitive: Primitive;
    /** @internal */
    _subPrimitives: SubPrimitive[];
    /** @internal */
    _indexBuffer: Buffer;
    /** @internal */
    _vertexBuffer: Buffer;
    /** @internal */
    _vertices: Float32Array;
    /** @internal */
    _indices: Uint16Array;
    /** @internal */
    _needResizeBuffer: boolean;
    /** @internal */
    _vertexCount: number;
    /** @internal */
    _resource: SkeletonDataResource;
    private _skeleton;
    private _state;
    /**
     * Spine resource of current spine animation.This property allows you to switch between different animations at runtime.
     */
    get resource(): SkeletonDataResource;
    set resource(value: SkeletonDataResource);
    /**
     * Provides access to `AnimationState` which controls animation playback on a skeleton.
     * You can use its API to manage, blend, and transition between multiple simultaneous animations effectively.
     */
    get state(): AnimationState;
    /**
     * Provides access to `Skeleton`, which defines the structure of a Spine model.
     * Through its API, users can manipulate bone positions, rotations, scaling
     * and change spine attachment to customize character appearances dynamically during runtime.
     */
    get skeleton(): Skeleton;
    /**
     * @internal
     */
    constructor(entity: Entity);
    /**
     * Separate slot by slot name. This will add a new sub primitive, and new materials.
     */
    addSeparateSlot(slotName: string): void;
    /**
     * @internal
     */
    _onEnable(): void;
    /**
     * @internal
     */
    update(delta: number): void;
    /**
     * @internal
     */
    _render(context: any): void;
    /**
     * @internal
     */
    _updateBounds(worldBounds: BoundingBox): void;
    /**
     * @internal
     */
    _calculateGeneratorBounds(worldBounds: BoundingBox): void;
    /**
     * @internal
     */
    _cloneTo(target: SpineAnimationRenderer): void;
    /**
     * @internal
     */
    _onDestroy(): void;
    /**
     * @internal
     */
    _createBuffer(vertexCount: number): void;
    /**
     * @internal
     */
    _addSubPrimitive(subPrimitive: SubPrimitive): void;
    /**
     * @internal
     */
    _clearSubPrimitives(): void;
    /**
     * @internal
     */
    _isContainDirtyFlag(type: number): boolean;
    /**
     * @internal
     */
    _setDirtyFlagFalse(type: number): void;
    /**
     * @internal
     */
    _onWorldVolumeChanged(): void;
    private _onAnimationStart;
    private _onAnimationComplete;
    private _clearMaterialCache;
    private _initializeDefaultState;
}
/**
 * @internal
 */
export declare enum SpineAnimationUpdateFlags {
    /** On World Transform Changed */
    TransformVolume = 1,
    /** On Animation start play */
    AnimationVolume = 2,
    /** On skeleton data asset changed */
    InitialVolume = 4
}
/**
 * @internal
 */
export declare enum RendererUpdateFlags {
    /** Include world position and world bounds. */
    WorldVolume = 1
}
/**
 * Render setting for spine rendering.
 */
export declare class SpineRenderSetting {
    /**
     * The spacing between z layers @defaultValue `0.01`
     */
    zSpacing: number;
    /**
     * Whether to use clipping @defaultValue `true`
     */
    useClipping: boolean;
    /**
     * Creates an instance of SpineRenderSetting.
     */
    constructor(
    /**
     * The spacing between z layers @defaultValue `0.01`
     */
    zSpacing?: number, 
    /**
     * Whether to use clipping @defaultValue `true`
     */
    useClipping?: boolean);
}
/**
 * Default state for spine animation.
 * Contains the default animation name to be played, whether this animation should loop,
 * the default skin name, and the default scale of the skeleton.
 */
export declare class DefaultState {
    /**
     * The default scale of the animation @defaultValue `1`
     */
    scale: number;
    /**
     * Whether the default animation should loop @defaultValue `true. The default animation should loop`
     */
    loop: boolean;
    /**
     * The name of the default animation @defaultValue `null. Do not play any animation by default`
     */
    animationName: string | null;
    /**
     * The name of the default skin @defaultValue `default`
     */
    skinName: string;
    /**
     * Creates an instance of DefaultState
     */
    constructor(
    /**
     * The default scale of the animation @defaultValue `1`
     */
    scale?: number, 
    /**
     * Whether the default animation should loop @defaultValue `true. The default animation should loop`
     */
    loop?: boolean, 
    /**
     * The name of the default animation @defaultValue `null. Do not play any animation by default`
     */
    animationName?: string | null, 
    /**
     * The name of the default skin @defaultValue `default`
     */
    skinName?: string);
}
