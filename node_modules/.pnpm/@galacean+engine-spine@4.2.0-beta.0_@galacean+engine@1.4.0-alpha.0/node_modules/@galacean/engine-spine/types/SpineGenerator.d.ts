import { Texture2D, SubPrimitive, BoundingBox } from "@galacean/engine";
import { Skeleton, Color, BlendMode, SkeletonData } from "@esotericsoftware/spine-core";
import { SpineAnimationRenderer } from "./SpineAnimationRenderer";
import { AdaptiveTexture } from "./loader/LoaderUtils";
import { ReturnablePool } from "./util/ReturnablePool";
import { ClearablePool } from "./util/ClearablePool";
declare class SubRenderItem {
    subPrimitive: SubPrimitive;
    blendMode: BlendMode;
    texture: any;
    slotName?: string;
}
export declare class SpineGenerator {
    static QUAD_TRIANGLES: number[];
    static VERTEX_SIZE: number;
    static VERTEX_STRIDE: number;
    static tempDark: Color;
    static tempColor: Color;
    static tempVerts: any[];
    static tempBlendMode: BlendMode | null;
    static tempTexture: AdaptiveTexture | null;
    static subPrimitivePool: ReturnablePool<SubPrimitive>;
    static subRenderItemPool: ClearablePool<SubRenderItem>;
    static bounds: BoundingBox;
    private _clipper;
    private _subRenderItems;
    private _separateSlots;
    private _separateSlotTextureMap;
    getMaxVertexCount(skeletonData: SkeletonData): number;
    buildPrimitive(skeleton: Skeleton, renderer: SpineAnimationRenderer): void;
    addSeparateSlot(slotName: string): void;
    addSeparateSlotTexture(slotName: string, texture: Texture2D): void;
    private _createMaterialForTexture;
    private _expandByPoint;
    private _getSkinVertexCount;
}
export {};
