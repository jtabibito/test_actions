import { AssetPromise, Loader, LoadItem, ResourceManager } from "@galacean/engine";
import { SkeletonDataResource } from "./SkeletonDataResource";
export type SpineAssetBundle = {
    skeletonPath: string;
    skeletonExtension: string;
    skeletonTextData?: string | ArrayBuffer;
    atlasPath: string;
    imagePaths: string[];
    imageExtensions: string[];
};
type SpineLoaderParams = {
    fileExtensions?: string | string[];
};
type SpineLoadItem = LoadItem & {
    params?: SpineLoaderParams;
};
export declare class SpineLoader extends Loader<SkeletonDataResource> {
    static imageExtensions: string[];
    static skeletonExtensions: string[];
    static parseAndAssignSpineAsset(url: string, fileExtension: string | null, bundle: SpineAssetBundle): void;
    static deriveAndAssignSpineAsset(url: string, fileExtension: string | null, bundle: SpineAssetBundle): void;
    static verifyFileExtensions(fileExtensions: string | string[], expectArray: boolean): string | string[] | null;
    static getUrlExtension(url: string, fileExtension: string): string | null;
    load(item: SpineLoadItem, resourceManager: ResourceManager): AssetPromise<SkeletonDataResource>;
    private _handleEditorAsset;
    private _handleOriginAsset;
    private _determineSkeletonDataType;
}
export {};
