import { Color, Matrix, Script, Vector3 } from "@galacean/engine";
/**
 * Line Drawer.
 * @decorator `@dependentComponents(MeshRenderer)`
 */
export declare class LineDrawer extends Script {
    private static _positions;
    private static _positionCount;
    private static _indices;
    private static _indicesCount;
    private static _supportUint32Array;
    private _renderer;
    private _material;
    private _mesh;
    /**
     * The LineDrawer.matrix stores the position, rotation and scale of the LineDrawer.
     * By default, LineDrawer always uses world coordinates.
     * The default LineDrawer.matrix transforms the world coordinates using a default identity matrix.
     */
    static matrix: Matrix;
    /**
     * Color of the material.
     * By default, color is (1,1,1,1).
     */
    set color(value: Color);
    /**
     * Draws a line starting at from towards to.
     * @param from - from position
     * @param to - to position
     */
    static drawLine(from: Vector3, to: Vector3): void;
    /**
     * Draws a rectangle at four vertex
     * @param leftTop - left top position
     * @param rightTop - right top position
     * @param rightBottom - right bottom position
     * @param leftBottom - left bottom position
     */
    static drawRect(leftTop: Vector3, rightTop: Vector3, rightBottom: Vector3, leftBottom: Vector3): void;
    /**
     * Draws a wireframe sphere with center and radius.
     * @param radius - sphere radius
     * @param center - sphere center
     */
    static drawSphere(radius: number, center: Vector3): void;
    /**
     * Draw a wireframe box with center and size.
     * @param width - width
     * @param height - height
     * @param depth - depth
     * @param center - center
     */
    static drawCuboid(width: number, height: number, depth: number, center: Vector3): void;
    /**
     * Draw a wireframe capsule with radius, height and center.
     * @param radius - The radius of the two hemispherical ends
     * @param height - The height of the cylindrical part, measured between the centers of the hemispherical ends
     * @param center - The center
     */
    static drawCapsule(radius: number, height: number, center: Vector3): void;
    /**
     * Draw a wireframe circle with radius, axis and center.
     * @param radius - The radius
     * @param axis - The axis
     * @param center - The center
     */
    static drawCircle(radius: number, axis: AxisType, center: Vector3): void;
    static flush(): void;
    onAwake(): void;
    onLateUpdate(deltaTime: number): void;
    private static _growthIndexMemory;
    private static _growthPosition;
}
/**
 * Circle Axis.
 */
export declare enum AxisType {
    X = 0,
    Y = 1,
    Z = 2
}
