import { BoxColliderShape, Camera, CapsuleColliderShape, Collider, Color, DirectLight, Entity, PointLight, Renderer, Script, SphereColliderShape, SpotLight, Transform, ParticleRenderer, BoxShape, CircleShape, ConeShape, HemisphereShape, SphereShape } from "@galacean/engine";
/**
 * Wireframe Auxiliary Manager.
 * @decorator `@dependentComponents(MeshRenderer)`
 */
export declare class WireframeManager extends Script {
    private static _positionPool;
    private static _ndcPosition;
    private static _tempMatrix;
    private static _tempVector;
    private static _tempRotation;
    private static _tempAxis;
    private static readonly _halfSqrt;
    private _cameraPositions;
    private _localPositions;
    private _globalPositions;
    private _indices;
    private _indicesCount;
    private _boundsIndicesCount;
    private _supportUint32Array;
    private _wireframeRenderers;
    private _wireframeElements;
    private _renderer;
    private _material;
    private _mesh;
    private static _getPositionFromPool;
    /**
     * Base color.
     */
    get baseColor(): Color;
    set baseColor(value: Color);
    /**
     * Clear all wireframe.
     */
    clear(): void;
    /**
     * Create auxiliary mesh for entity.
     * @param entity - The entity
     * @param includeChildren - whether include child entity(default is true)
     */
    addEntityWireframe(entity: Entity, includeChildren?: boolean): void;
    /**
     * Create auxiliary mesh for camera.
     * @param camera - The Camera
     */
    addCameraWireframe(camera: Camera): void;
    /**
     * Create auxiliary mesh for spot light.
     * @param light - The SpotLight
     */
    addSpotLightWireframe(light: SpotLight): void;
    /**
     * Create auxiliary mesh for point light.
     * @param light - The PointLight
     */
    addPointLightWireframe(light: PointLight): void;
    /**
     * Create auxiliary mesh for directional light.
     * @param light - The DirectLight
     */
    addDirectLightWireframe(light: DirectLight): void;
    /**
     * Create auxiliary mesh for renderer axis-aligned boundingbox.
     * @param renderer - The Renderer
     */
    addRendererWireframe(renderer: Renderer): void;
    /**
     * Create auxiliary mesh for collider.
     * @param collider - The Collider
     */
    addCollideWireframe(collider: Collider): void;
    /**
     * Create auxiliary mesh for box collider shape.
     * @param shape - The BoxColliderShape
     */
    addBoxColliderShapeWireframe(shape: BoxColliderShape): void;
    /**
     * Create auxiliary mesh for sphere collider shape.
     * @param shape - The SphereColliderShape
     */
    addSphereColliderShapeWireframe(shape: SphereColliderShape): void;
    /**
     * Create auxiliary mesh for capsule collider shape.
     * @param shape - The CapsuleColliderShape
     */
    addCapsuleColliderShapeWireframe(shape: CapsuleColliderShape): void;
    addParticleRendererEmissionShapeWireframe(particleRenderer: ParticleRenderer): void;
    addBoxParticleShapeWireframe(shape: BoxShape, transform: Transform): void;
    addCircleParticleShapeWireframe(shape: CircleShape, transform: Transform): void;
    addConeParticleShapeWireframe(shape: ConeShape, transform: Transform): void;
    addHemisphereParticleShapeWireframe(shape: HemisphereShape, transform: Transform): void;
    addSphereParticleShapeWireframe(shape: SphereShape, transform: Transform): void;
    onAwake(): void;
    onEnable(): void;
    onDisable(): void;
    onLateUpdate(deltaTime: number): void;
    private _growthIndexMemory;
    private _growthPosition;
    private _localTranslate;
    private _localRotation;
    private _rotateAroundX;
}
