{"version":3,"file":"LineDrawer.js","sources":["../../src/LineDrawer.ts"],"sourcesContent":["import {\n  Color,\n  dependentComponents,\n  DependentMode,\n  GLCapabilityType,\n  Matrix,\n  MeshRenderer,\n  MeshTopology,\n  ModelMesh,\n  Script,\n  Vector3\n} from \"@galacean/engine\";\nimport { WireframePrimitive } from \"./WireframePrimitive\";\nimport { PlainColorMaterial } from \"@galacean/engine-toolkit-custom-material\";\n\n/**\n * Line Drawer.\n * @decorator `@dependentComponents(MeshRenderer)`\n */\n@dependentComponents(MeshRenderer, DependentMode.CheckOnly)\nexport class LineDrawer extends Script {\n  private static _positions: Vector3[] = [];\n  private static _positionCount: number = 0;\n  private static _indices: Uint16Array | Uint32Array;\n  private static _indicesCount: number = 0;\n  private static _supportUint32Array: boolean;\n  private _renderer: MeshRenderer;\n  private _material: PlainColorMaterial;\n  private _mesh: ModelMesh;\n\n  /**\n   * The LineDrawer.matrix stores the position, rotation and scale of the LineDrawer.\n   * By default, LineDrawer always uses world coordinates.\n   * The default LineDrawer.matrix transforms the world coordinates using a default identity matrix.\n   */\n  static matrix: Matrix = null;\n\n  /**\n   * Color of the material.\n   * By default, color is (1,1,1,1).\n   */\n  set color(value: Color) {\n    this._material.baseColor.copyFrom(value);\n  }\n\n  /**\n   * Draws a line starting at from towards to.\n   * @param from - from position\n   * @param to - to position\n   */\n  static drawLine(from: Vector3, to: Vector3) {\n    LineDrawer._growthPosition(2);\n    LineDrawer._growthIndexMemory(2);\n    LineDrawer._indices[LineDrawer._indicesCount++] = LineDrawer._positionCount;\n    LineDrawer._indices[LineDrawer._indicesCount++] = LineDrawer._positionCount + 1;\n    if (LineDrawer.matrix == null) {\n      LineDrawer._positions[LineDrawer._positionCount++].copyFrom(from);\n      LineDrawer._positions[LineDrawer._positionCount++].copyFrom(to);\n    } else {\n      Vector3.transformCoordinate(from, LineDrawer.matrix, LineDrawer._positions[LineDrawer._positionCount++]);\n      Vector3.transformCoordinate(to, LineDrawer.matrix, LineDrawer._positions[LineDrawer._positionCount++]);\n    }\n  }\n\n  /**\n   * Draws a rectangle at four vertex\n   * @param leftTop - left top position\n   * @param rightTop - right top position\n   * @param rightBottom - right bottom position\n   * @param leftBottom - left bottom position\n   */\n  static drawRect(leftTop: Vector3, rightTop: Vector3, rightBottom: Vector3, leftBottom: Vector3) {\n    LineDrawer._growthPosition(4);\n    LineDrawer._growthIndexMemory(8);\n    LineDrawer._indices[LineDrawer._indicesCount++] = LineDrawer._positionCount;\n    LineDrawer._indices[LineDrawer._indicesCount++] = LineDrawer._positionCount + 1;\n    LineDrawer._indices[LineDrawer._indicesCount++] = LineDrawer._positionCount + 2;\n    LineDrawer._indices[LineDrawer._indicesCount++] = LineDrawer._positionCount + 1;\n    LineDrawer._indices[LineDrawer._indicesCount++] = LineDrawer._positionCount + 2;\n    LineDrawer._indices[LineDrawer._indicesCount++] = LineDrawer._positionCount + 3;\n    LineDrawer._indices[LineDrawer._indicesCount++] = LineDrawer._positionCount;\n    LineDrawer._indices[LineDrawer._indicesCount++] = LineDrawer._positionCount + 3;\n\n    if (LineDrawer.matrix == null) {\n      LineDrawer._positions[LineDrawer._positionCount++].copyFrom(leftTop);\n      LineDrawer._positions[LineDrawer._positionCount++].copyFrom(rightTop);\n      LineDrawer._positions[LineDrawer._positionCount++].copyFrom(rightBottom);\n      LineDrawer._positions[LineDrawer._positionCount++].copyFrom(leftBottom);\n    } else {\n      Vector3.transformCoordinate(leftTop, LineDrawer.matrix, LineDrawer._positions[LineDrawer._positionCount++]);\n      Vector3.transformCoordinate(rightTop, LineDrawer.matrix, LineDrawer._positions[LineDrawer._positionCount++]);\n      Vector3.transformCoordinate(rightBottom, LineDrawer.matrix, LineDrawer._positions[LineDrawer._positionCount++]);\n      Vector3.transformCoordinate(leftBottom, LineDrawer.matrix, LineDrawer._positions[LineDrawer._positionCount++]);\n    }\n  }\n\n  /**\n   * Draws a wireframe sphere with center and radius.\n   * @param radius - sphere radius\n   * @param center - sphere center\n   */\n  static drawSphere(radius: number, center: Vector3) {\n    const positionCount = WireframePrimitive.spherePositionCount;\n    const indexCount = WireframePrimitive.sphereIndexCount;\n    const globalPosition = LineDrawer._positions;\n\n    LineDrawer._growthPosition(positionCount);\n    LineDrawer._growthIndexMemory(indexCount);\n    WireframePrimitive.createSphereWireframe(\n      radius,\n      globalPosition,\n      LineDrawer._positionCount,\n      LineDrawer._indices,\n      LineDrawer._indicesCount\n    );\n    for (let i = 0; i < positionCount; i++) {\n      const pos = globalPosition[LineDrawer._positionCount + i];\n      pos.add(center);\n      if (LineDrawer.matrix != null) {\n        Vector3.transformCoordinate(pos, LineDrawer.matrix, pos);\n      }\n    }\n\n    LineDrawer._positionCount += positionCount;\n    LineDrawer._indicesCount += indexCount;\n  }\n\n  /**\n   * Draw a wireframe box with center and size.\n   * @param width - width\n   * @param height - height\n   * @param depth - depth\n   * @param center - center\n   */\n  static drawCuboid(width: number, height: number, depth: number, center: Vector3) {\n    const positionCount = WireframePrimitive.cuboidPositionCount;\n    const indexCount = WireframePrimitive.cuboidIndexCount;\n    const globalPosition = LineDrawer._positions;\n\n    LineDrawer._growthPosition(positionCount);\n    LineDrawer._growthIndexMemory(indexCount);\n    WireframePrimitive.createCuboidWireframe(\n      width,\n      height,\n      depth,\n      globalPosition,\n      LineDrawer._positionCount,\n      LineDrawer._indices,\n      LineDrawer._indicesCount\n    );\n    for (let i = 0; i < positionCount; i++) {\n      const pos = globalPosition[LineDrawer._positionCount + i];\n      pos.add(center);\n      if (LineDrawer.matrix != null) {\n        Vector3.transformCoordinate(pos, LineDrawer.matrix, pos);\n      }\n    }\n\n    LineDrawer._positionCount += positionCount;\n    LineDrawer._indicesCount += indexCount;\n  }\n\n  /**\n   * Draw a wireframe capsule with radius, height and center.\n   * @param radius - The radius of the two hemispherical ends\n   * @param height - The height of the cylindrical part, measured between the centers of the hemispherical ends\n   * @param center - The center\n   */\n  static drawCapsule(radius: number, height: number, center: Vector3) {\n    const positionCount = WireframePrimitive.capsulePositionCount;\n    const indexCount = WireframePrimitive.capsuleIndexCount;\n    const globalPosition = LineDrawer._positions;\n\n    LineDrawer._growthPosition(positionCount);\n    LineDrawer._growthIndexMemory(indexCount);\n    WireframePrimitive.createCapsuleWireframe(\n      radius,\n      height,\n      globalPosition,\n      LineDrawer._positionCount,\n      LineDrawer._indices,\n      LineDrawer._indicesCount\n    );\n    for (let i = 0; i < positionCount; i++) {\n      const pos = globalPosition[LineDrawer._positionCount + i];\n      pos.add(center);\n      if (LineDrawer.matrix != null) {\n        Vector3.transformCoordinate(pos, LineDrawer.matrix, pos);\n      }\n    }\n\n    LineDrawer._positionCount += positionCount;\n    LineDrawer._indicesCount += indexCount;\n  }\n\n  /**\n   * Draw a wireframe circle with radius, axis and center.\n   * @param radius - The radius\n   * @param axis - The axis\n   * @param center - The center\n   */\n  static drawCircle(radius: number, axis: AxisType, center: Vector3) {\n    WireframePrimitive._shift.set(0, 0, 0);\n    const positionCount = WireframePrimitive.circlePositionCount;\n    const indexCount = WireframePrimitive.circleIndexCount;\n    const globalPosition = LineDrawer._positions;\n\n    LineDrawer._growthPosition(positionCount);\n    LineDrawer._growthIndexMemory(indexCount);\n    WireframePrimitive.createCircleWireframe(\n      radius,\n      axis,\n      WireframePrimitive._shift,\n      globalPosition,\n      LineDrawer._positionCount,\n      LineDrawer._indices,\n      LineDrawer._indicesCount\n    );\n    for (let i = 0; i < positionCount; i++) {\n      const pos = globalPosition[LineDrawer._positionCount + i];\n      pos.add(center);\n      if (LineDrawer.matrix != null) {\n        Vector3.transformCoordinate(pos, LineDrawer.matrix, pos);\n      }\n    }\n\n    LineDrawer._positionCount += positionCount;\n    LineDrawer._indicesCount += indexCount;\n  }\n\n  static flush() {\n    LineDrawer._positionCount = 0;\n    LineDrawer._indicesCount = 0;\n  }\n\n  override onAwake(): void {\n    const engine = this.engine;\n    const mesh = new ModelMesh(engine);\n    const material = new PlainColorMaterial(engine);\n    const renderer = this.entity.getComponent(MeshRenderer);\n    renderer.castShadows = false;\n    renderer.receiveShadows = false;\n    // @ts-ignore\n    const supportUint32Array = engine._hardwareRenderer.canIUse(GLCapabilityType.elementIndexUint);\n\n    // @ts-ignore\n    mesh._enableVAO = false;\n    mesh.addSubMesh(0, LineDrawer._indicesCount, MeshTopology.Lines);\n    renderer.mesh = mesh;\n    renderer.setMaterial(material);\n\n    const { bounds } = mesh;\n    bounds.min.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n    bounds.max.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n    this._mesh = mesh;\n    this._material = material;\n    this._renderer = renderer;\n    LineDrawer._indices = supportUint32Array ? new Uint32Array(128) : new Uint16Array(128);\n    LineDrawer._supportUint32Array = supportUint32Array;\n  }\n\n  override onLateUpdate(deltaTime: number) {\n    const { _mesh: mesh } = this;\n\n    if (LineDrawer._positionCount > 0) {\n      mesh.setPositions(LineDrawer._positions);\n      mesh.setIndices(LineDrawer._indices);\n      mesh.uploadData(false);\n      mesh.subMesh.count = LineDrawer._indicesCount;\n      this._renderer.setMaterial(this._material);\n    } else {\n      this._renderer.setMaterial(null);\n    }\n\n    LineDrawer.flush();\n  }\n\n  private static _growthIndexMemory(length: number): void {\n    const indices = LineDrawer._indices;\n    const neededLength = LineDrawer._indicesCount + length;\n    if (neededLength > indices.length) {\n      const maxLength = LineDrawer._supportUint32Array ? 4294967295 : 65535;\n      if (neededLength > maxLength) {\n        throw Error(\"The vertex count is over limit.\");\n      }\n\n      const newIndices = LineDrawer._supportUint32Array ? new Uint32Array(neededLength) : new Uint16Array(neededLength);\n      newIndices.set(indices);\n      LineDrawer._indices = newIndices;\n    }\n  }\n\n  private static _growthPosition(length: number): void {\n    const position = LineDrawer._positions;\n    const neededLength = LineDrawer._positionCount + length;\n    if (neededLength > position.length) {\n      for (let i = 0, n = neededLength - position.length; i < n; i++) {\n        position.push(new Vector3());\n      }\n    }\n  }\n}\n\n/**\n * Circle Axis.\n */\nexport enum AxisType {\n  X,\n  Y,\n  Z\n}\n"],"names":["LineDrawer","onAwake","engine","mesh","ModelMesh","material","PlainColorMaterial","renderer","entity","getComponent","MeshRenderer","castShadows","receiveShadows","supportUint32Array","_hardwareRenderer","canIUse","GLCapabilityType","elementIndexUint","_enableVAO","addSubMesh","_indicesCount","MeshTopology","Lines","setMaterial","bounds","min","set","Number","MAX_VALUE","max","_mesh","_material","_renderer","_indices","Uint32Array","Uint16Array","_supportUint32Array","onLateUpdate","deltaTime","_positionCount","setPositions","_positions","setIndices","uploadData","subMesh","count","flush","drawLine","from","to","_growthPosition","_growthIndexMemory","matrix","copyFrom","Vector3","transformCoordinate","drawRect","leftTop","rightTop","rightBottom","leftBottom","drawSphere","radius","center","positionCount","WireframePrimitive","spherePositionCount","indexCount","sphereIndexCount","globalPosition","createSphereWireframe","i","pos","add","drawCuboid","width","height","depth","cuboidPositionCount","cuboidIndexCount","createCuboidWireframe","drawCapsule","capsulePositionCount","capsuleIndexCount","createCapsuleWireframe","drawCircle","axis","_shift","circlePositionCount","circleIndexCount","createCircleWireframe","length","indices","neededLength","maxLength","Error","newIndices","position","n","push","color","value","baseColor","Script","dependentComponents","DependentMode","CheckOnly","AxisType"],"mappings":"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"}