{"version":3,"file":"WireframeManager.js","sources":["../../../../node_modules/.pnpm/@swc+helpers@0.5.7/node_modules/@swc/helpers/esm/_instanceof.js","../../src/WireframeManager.ts"],"sourcesContent":["export function _instanceof(left, right) {\n    if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n        return !!right[Symbol.hasInstance](left);\n    } else return left instanceof right;\n}\nexport { _instanceof as _ };\n","import {\n  BoolUpdateFlag,\n  BoxColliderShape,\n  Camera,\n  CapsuleColliderShape,\n  Collider,\n  ColliderShapeUpAxis,\n  Color,\n  dependentComponents,\n  DirectLight,\n  Entity,\n  GLCapabilityType,\n  Matrix,\n  MeshRenderer,\n  MeshTopology,\n  ModelMesh,\n  PointLight,\n  Quaternion,\n  Renderer,\n  Script,\n  SphereColliderShape,\n  SpotLight,\n  Transform,\n  Vector3,\n  DependentMode,\n  ParticleRenderer,\n  BoxShape,\n  CircleShape,\n  ConeShape,\n  HemisphereShape,\n  SphereShape\n} from \"@galacean/engine\";\nimport { PlainColorMaterial } from \"@galacean/engine-toolkit-custom-material\";\nimport { WireframePrimitive } from \"./WireframePrimitive\";\n\n/**\n * Wireframe Auxiliary Manager.\n * @decorator `@dependentComponents(MeshRenderer)`\n */\n@dependentComponents(MeshRenderer, DependentMode.CheckOnly)\nexport class WireframeManager extends Script {\n  private static _positionPool: Vector3[] = [];\n  private static _ndcPosition: Vector3[] = [\n    new Vector3(-1, 1, -1),\n    new Vector3(1, 1, -1),\n    new Vector3(1, -1, -1),\n    new Vector3(-1, -1, -1)\n  ];\n  private static _tempMatrix: Matrix = new Matrix();\n  private static _tempVector: Vector3 = new Vector3();\n  private static _tempRotation: Quaternion = new Quaternion();\n  private static _tempAxis: Quaternion = new Quaternion();\n  private static readonly _halfSqrt: number = 0.70710678118655;\n\n  private _cameraPositions = [\n    new Vector3(),\n    new Vector3(),\n    new Vector3(),\n    new Vector3(),\n    new Vector3(),\n    new Vector3(),\n    new Vector3(),\n    new Vector3()\n  ];\n  private _localPositions: Vector3[] = [];\n  private _globalPositions: Vector3[] = [];\n  private _indices: Uint16Array | Uint32Array = null;\n  private _indicesCount = 0;\n  private _boundsIndicesCount = 0;\n  private _supportUint32Array: boolean;\n\n  private _wireframeRenderers: Renderer[] = [];\n  private _wireframeElements: WireframeElement[] = [];\n  private _renderer: MeshRenderer;\n  private _material: PlainColorMaterial;\n  private _mesh: ModelMesh;\n\n  private static _getPositionFromPool(positionIndex: number): Vector3 {\n    let position: Vector3;\n    const positionPool = WireframeManager._positionPool;\n    if (positionIndex < positionPool.length) {\n      position = positionPool[positionIndex];\n    } else {\n      position = new Vector3();\n      WireframeManager._positionPool.push(position);\n    }\n    return position;\n  }\n\n  /**\n   * Base color.\n   */\n  get baseColor(): Color {\n    return this._material.baseColor;\n  }\n\n  set baseColor(value: Color) {\n    this._material.baseColor = value;\n  }\n\n  /**\n   * Clear all wireframe.\n   */\n  clear(): void {\n    this._wireframeRenderers.length = 0;\n    this._wireframeElements.length = 0;\n    this._localPositions.length = 0;\n    this._globalPositions.length = 0;\n    this._indicesCount = 0;\n    this._mesh.subMesh.count = 0;\n  }\n\n  /**\n   * Create auxiliary mesh for entity.\n   * @param entity - The entity\n   * @param includeChildren - whether include child entity(default is true)\n   */\n  addEntityWireframe(entity: Entity, includeChildren = true): void {\n    if (includeChildren) {\n      const components = new Array<Camera | SpotLight | DirectLight | PointLight | Collider | ParticleRenderer>();\n      entity.getComponentsIncludeChildren(Camera, components);\n      for (let i = 0, n = components.length; i < n; i++) {\n        this.addCameraWireframe(<Camera>components[i]);\n      }\n      let componentsOffset = components.length;\n\n      entity.getComponentsIncludeChildren(SpotLight, components);\n      for (let i = componentsOffset, n = components.length; i < n; i++) {\n        this.addSpotLightWireframe(<SpotLight>components[i]);\n      }\n      componentsOffset = components.length;\n\n      entity.getComponentsIncludeChildren(DirectLight, components);\n      for (let i = componentsOffset, n = components.length; i < n; i++) {\n        this.addDirectLightWireframe(<DirectLight>components[i]);\n      }\n      componentsOffset = components.length;\n\n      entity.getComponentsIncludeChildren(PointLight, components);\n      for (let i = componentsOffset, n = components.length; i < n; i++) {\n        this.addPointLightWireframe(<PointLight>components[i]);\n      }\n      componentsOffset = components.length;\n\n      entity.getComponentsIncludeChildren(Collider, components);\n      for (let i = componentsOffset, n = components.length; i < n; i++) {\n        this.addCollideWireframe(<Collider>components[i]);\n      }\n      componentsOffset = components.length;\n\n      entity.getComponentsIncludeChildren(ParticleRenderer, components);\n      for (let i = componentsOffset, n = components.length; i < n; i++) {\n        this.addParticleRendererEmissionShapeWireframe(<ParticleRenderer>components[i]);\n      }\n    } else {\n      const camera = entity.getComponent(Camera);\n      camera && this.addCameraWireframe(camera);\n      const spotLight = entity.getComponent(SpotLight);\n      spotLight && this.addSpotLightWireframe(spotLight);\n      const directLight = entity.getComponent(DirectLight);\n      directLight && this.addDirectLightWireframe(directLight);\n      const pointLight = entity.getComponent(PointLight);\n      pointLight && this.addPointLightWireframe(pointLight);\n      const collider = entity.getComponent(Collider);\n      collider && this.addCollideWireframe(collider);\n      const particle = entity.getComponent(ParticleRenderer);\n      particle && this.addParticleRendererEmissionShapeWireframe(particle);\n    }\n  }\n\n  /**\n   * Create auxiliary mesh for camera.\n   * @param camera - The Camera\n   */\n  addCameraWireframe(camera: Camera): void {\n    const transform = camera.entity.transform;\n    const inverseProj = camera.projectionMatrix.clone();\n    inverseProj.invert();\n\n    const localPositions = this._localPositions;\n    const positionsOffset = localPositions.length;\n    this._wireframeElements.push(new WireframeElement(transform, positionsOffset));\n\n    const ndcPosition = WireframeManager._ndcPosition;\n    // front\n    for (let i = 0; i < 4; i++) {\n      const newPosition = this._cameraPositions[i];\n      newPosition.copyFrom(ndcPosition[i]);\n      newPosition.transformCoordinate(inverseProj);\n      localPositions.push(newPosition);\n    }\n\n    // back\n    for (let i = 0; i < 4; i++) {\n      const newPosition = this._cameraPositions[i + 4];\n      newPosition.copyFrom(ndcPosition[i]);\n      newPosition.z = 1;\n      newPosition.transformCoordinate(inverseProj);\n      localPositions.push(newPosition);\n    }\n\n    this._growthIndexMemory(24);\n    const indices = this._indices;\n    indices[this._indicesCount++] = positionsOffset;\n    indices[this._indicesCount++] = positionsOffset + 1;\n    indices[this._indicesCount++] = positionsOffset + 1;\n    indices[this._indicesCount++] = positionsOffset + 2;\n    indices[this._indicesCount++] = positionsOffset + 2;\n    indices[this._indicesCount++] = positionsOffset + 3;\n    indices[this._indicesCount++] = positionsOffset + 3;\n    indices[this._indicesCount++] = positionsOffset; // front\n    indices[this._indicesCount++] = positionsOffset;\n    indices[this._indicesCount++] = positionsOffset + 4;\n    indices[this._indicesCount++] = positionsOffset + 1;\n    indices[this._indicesCount++] = positionsOffset + 5;\n    indices[this._indicesCount++] = positionsOffset + 2;\n    indices[this._indicesCount++] = positionsOffset + 6;\n    indices[this._indicesCount++] = positionsOffset + 3;\n    indices[this._indicesCount++] = positionsOffset + 7; // link\n    indices[this._indicesCount++] = positionsOffset + 4;\n    indices[this._indicesCount++] = positionsOffset + 5;\n    indices[this._indicesCount++] = positionsOffset + 5;\n    indices[this._indicesCount++] = positionsOffset + 6;\n    indices[this._indicesCount++] = positionsOffset + 6;\n    indices[this._indicesCount++] = positionsOffset + 7;\n    indices[this._indicesCount++] = positionsOffset + 7;\n    indices[this._indicesCount++] = positionsOffset + 4; // back\n  }\n\n  /**\n   * Create auxiliary mesh for spot light.\n   * @param light - The SpotLight\n   */\n  addSpotLightWireframe(light: SpotLight): void {\n    const height = light.distance;\n    const radius = Math.tan(light.angle / 2) * height;\n\n    const positionsOffset = this._localPositions.length;\n    const coneIndicesCount = WireframePrimitive.coneIndexCount;\n\n    this._growthIndexMemory(coneIndicesCount);\n    this._growthPosition(WireframePrimitive.conePositionCount);\n    const { _indices: indices, _localPositions: localPositions } = this;\n    WireframePrimitive.createConeWireframe(\n      radius,\n      height,\n      localPositions,\n      positionsOffset,\n      indices,\n      this._indicesCount\n    );\n    this._indicesCount += coneIndicesCount;\n    // rotation to default transform forward direction(-Z)\n    this._rotateAroundX(positionsOffset);\n\n    this._wireframeElements.push(new WireframeElement(light.entity.transform, positionsOffset));\n  }\n\n  /**\n   * Create auxiliary mesh for point light.\n   * @param light - The PointLight\n   */\n  addPointLightWireframe(light: PointLight): void {\n    const positionsOffset = this._localPositions.length;\n    const sphereIndicesCount = WireframePrimitive.sphereIndexCount;\n\n    this._growthIndexMemory(sphereIndicesCount);\n    this._growthPosition(WireframePrimitive.spherePositionCount);\n    const { _indices: indices, _localPositions: localPositions } = this;\n    WireframePrimitive.createSphereWireframe(\n      light.distance,\n      localPositions,\n      positionsOffset,\n      indices,\n      this._indicesCount\n    );\n    this._indicesCount += sphereIndicesCount;\n\n    this._wireframeElements.push(new WireframeElement(light.entity.transform, positionsOffset));\n  }\n\n  /**\n   * Create auxiliary mesh for directional light.\n   * @param light - The DirectLight\n   */\n  addDirectLightWireframe(light: DirectLight): void {\n    const positionsOffset = this._localPositions.length;\n    const unboundCylinderIndicesCount = WireframePrimitive.unboundCylinderIndexCount;\n\n    this._growthIndexMemory(unboundCylinderIndicesCount);\n    this._growthPosition(WireframePrimitive.unboundCylinderPositionCount);\n    const { _indices: indices, _localPositions: localPositions } = this;\n    WireframePrimitive.createUnboundCylinderWireframe(1, localPositions, positionsOffset, indices, this._indicesCount);\n    this._indicesCount += unboundCylinderIndicesCount;\n    // rotation to default transform forward direction(-Z)\n    this._rotateAroundX(positionsOffset);\n\n    this._wireframeElements.push(new WireframeElement(light.entity.transform, positionsOffset));\n  }\n\n  /**\n   * Create auxiliary mesh for renderer axis-aligned boundingbox.\n   * @param renderer - The Renderer\n   */\n  addRendererWireframe(renderer: Renderer): void {\n    this._boundsIndicesCount += WireframePrimitive.cuboidIndexCount;\n    this._wireframeRenderers.push(renderer);\n  }\n\n  /**\n   * Create auxiliary mesh for collider.\n   * @param collider - The Collider\n   */\n  addCollideWireframe(collider: Collider): void {\n    const shapes = collider.shapes;\n    for (let i = 0, n = shapes.length; i < n; i++) {\n      const shape = shapes[i];\n      if (shape instanceof BoxColliderShape) {\n        this.addBoxColliderShapeWireframe(shape);\n      } else if (shape instanceof SphereColliderShape) {\n        this.addSphereColliderShapeWireframe(shape);\n      } else if (shape instanceof CapsuleColliderShape) {\n        this.addCapsuleColliderShapeWireframe(shape);\n      }\n    }\n  }\n\n  /**\n   * Create auxiliary mesh for box collider shape.\n   * @param shape - The BoxColliderShape\n   */\n  addBoxColliderShapeWireframe(shape: BoxColliderShape): void {\n    const transform = shape.collider.entity.transform;\n    const worldScale = transform.lossyWorldScale;\n    const { position, rotation, size } = shape;\n    const { _tempVector: tempVector, _tempRotation: tempRotation } = WireframeManager;\n\n    const positionsOffset = this._localPositions.length;\n\n    const cuboidIndicesCount = WireframePrimitive.cuboidIndexCount;\n    this._growthIndexMemory(cuboidIndicesCount);\n    this._growthPosition(WireframePrimitive.cuboidPositionCount);\n    const { _indices: indices, _localPositions: localPositions } = this;\n    WireframePrimitive.createCuboidWireframe(\n      worldScale.x * size.x,\n      worldScale.y * size.y,\n      worldScale.z * size.z,\n      localPositions,\n      positionsOffset,\n      indices,\n      this._indicesCount\n    );\n    Quaternion.rotationYawPitchRoll(rotation.x, rotation.y, rotation.z, tempRotation);\n    this._localRotation(positionsOffset, tempRotation);\n    Vector3.multiply(position, worldScale, tempVector);\n    this._localTranslate(positionsOffset, tempVector);\n\n    this._indicesCount += cuboidIndicesCount;\n    this._wireframeElements.push(new WireframeElement(transform, positionsOffset));\n  }\n\n  /**\n   * Create auxiliary mesh for sphere collider shape.\n   * @param shape - The SphereColliderShape\n   */\n  addSphereColliderShapeWireframe(shape: SphereColliderShape): void {\n    const transform = shape.collider.entity.transform;\n    const worldScale = transform.lossyWorldScale;\n    const { position, rotation, radius } = shape;\n    const { _tempVector: tempVector, _tempRotation: tempRotation } = WireframeManager;\n\n    const positionsOffset = this._localPositions.length;\n\n    const sphereIndicesCount = WireframePrimitive.sphereIndexCount;\n    this._growthIndexMemory(sphereIndicesCount);\n    this._growthPosition(WireframePrimitive.spherePositionCount);\n    const { _indices: indices, _localPositions: localPositions } = this;\n    WireframePrimitive.createSphereWireframe(\n      Math.max(worldScale.x, worldScale.y, worldScale.z) * radius,\n      localPositions,\n      positionsOffset,\n      indices,\n      this._indicesCount\n    );\n    Quaternion.rotationYawPitchRoll(rotation.x, rotation.y, rotation.z, tempRotation);\n    this._localRotation(positionsOffset, tempRotation);\n    Vector3.multiply(position, worldScale, tempVector);\n    this._localTranslate(positionsOffset, tempVector);\n\n    this._indicesCount += sphereIndicesCount;\n    this._wireframeElements.push(new WireframeElement(transform, positionsOffset));\n  }\n\n  /**\n   * Create auxiliary mesh for capsule collider shape.\n   * @param shape - The CapsuleColliderShape\n   */\n  addCapsuleColliderShapeWireframe(shape: CapsuleColliderShape): void {\n    const transform = shape.collider.entity.transform;\n    const worldScale = transform.lossyWorldScale;\n    const maxScale = Math.max(worldScale.x, worldScale.y, worldScale.z);\n    const { radius, height, upAxis, position, rotation } = shape;\n    const {\n      _tempVector: tempVector,\n      _tempRotation: tempRotation,\n      _tempAxis: tempAxis,\n      _halfSqrt: halfSqrt\n    } = WireframeManager;\n\n    const positionsOffset = this._localPositions.length;\n\n    const capsuleIndicesCount = WireframePrimitive.capsuleIndexCount;\n    this._growthIndexMemory(capsuleIndicesCount);\n    this._growthPosition(WireframePrimitive.capsulePositionCount);\n    const { _indices: indices, _localPositions: localPositions } = this;\n    WireframePrimitive.createCapsuleWireframe(\n      maxScale * radius,\n      maxScale * height,\n      localPositions,\n      positionsOffset,\n      indices,\n      this._indicesCount\n    );\n    switch (upAxis) {\n      case ColliderShapeUpAxis.X:\n        tempAxis.set(0, 0, halfSqrt, halfSqrt);\n        break;\n      case ColliderShapeUpAxis.Y:\n        tempAxis.set(0, 0, 0, 1);\n        break;\n      case ColliderShapeUpAxis.Z:\n        tempAxis.set(halfSqrt, 0, 0, halfSqrt);\n    }\n    Quaternion.rotationYawPitchRoll(rotation.x, rotation.y, rotation.z, tempRotation);\n    Quaternion.multiply(tempRotation, tempAxis, tempRotation);\n    this._localRotation(positionsOffset, tempRotation);\n    Vector3.multiply(position, worldScale, tempVector);\n    this._localTranslate(positionsOffset, tempVector);\n\n    this._indicesCount += capsuleIndicesCount;\n    this._wireframeElements.push(new WireframeElement(transform, positionsOffset));\n  }\n\n  addParticleRendererEmissionShapeWireframe(particleRenderer: ParticleRenderer): void {\n    if (particleRenderer.generator.emission.enabled) {\n      const shape = particleRenderer.generator.emission.shape;\n      const transform = particleRenderer.entity.transform;\n      switch (shape?.shapeType) {\n        case 0:\n          this.addBoxParticleShapeWireframe(shape as BoxShape, transform);\n          break;\n        case 1:\n          this.addCircleParticleShapeWireframe(shape as CircleShape, transform);\n          break;\n        case 2:\n          this.addConeParticleShapeWireframe(shape as ConeShape, transform);\n          break;\n        case 3:\n          this.addHemisphereParticleShapeWireframe(shape as HemisphereShape, transform);\n          break;\n        case 4:\n          this.addSphereParticleShapeWireframe(shape as SphereShape, transform);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  addBoxParticleShapeWireframe(shape: BoxShape, transform: Transform): void {\n    const { size } = shape;\n\n    const positionsOffset = this._localPositions.length;\n\n    const cuboidIndicesCount = WireframePrimitive.cuboidIndexCount;\n    this._growthIndexMemory(cuboidIndicesCount);\n    this._growthPosition(WireframePrimitive.cuboidPositionCount);\n    const { _indices: indices, _localPositions: localPositions } = this;\n    WireframePrimitive.createCuboidWireframe(\n      size.x,\n      size.y,\n      size.z,\n      localPositions,\n      positionsOffset,\n      indices,\n      this._indicesCount\n    );\n\n    this._indicesCount += cuboidIndicesCount;\n    this._wireframeElements.push(new WireframeElement(transform, positionsOffset, false));\n  }\n\n  addCircleParticleShapeWireframe(shape: CircleShape, transform: Transform): void {\n    const { radius } = shape;\n\n    const positionsOffset = this._localPositions.length;\n\n    const circleIndicesCount = WireframePrimitive.circleIndexCount;\n    this._growthIndexMemory(circleIndicesCount);\n    this._growthPosition(WireframePrimitive.circlePositionCount);\n    const { _indices: indices, _localPositions: localPositions } = this;\n    WireframePrimitive.createCircleWireframe(\n      radius,\n      0,\n      new Vector3(),\n      localPositions,\n      positionsOffset,\n      indices,\n      this._indicesCount\n    );\n    this._indicesCount += circleIndicesCount;\n    this._wireframeElements.push(new WireframeElement(transform, positionsOffset, false));\n  }\n\n  addConeParticleShapeWireframe(shape: ConeShape, transform: Transform): void {\n    const { radius, length, angle } = shape;\n\n    const positionsOffset = this._localPositions.length;\n\n    const frustumIndicesCount = WireframePrimitive.frustumIndexCount;\n    this._growthIndexMemory(frustumIndicesCount);\n    this._growthPosition(WireframePrimitive.frustumPositionCount);\n    const { _indices: indices, _localPositions: localPositions } = this;\n    WireframePrimitive.createFrustumWireframe(\n      radius,\n      length,\n      angle,\n      localPositions,\n      positionsOffset,\n      indices,\n      this._indicesCount\n    );\n    this._indicesCount += frustumIndicesCount;\n    this._wireframeElements.push(new WireframeElement(transform, positionsOffset, false));\n  }\n\n  addHemisphereParticleShapeWireframe(shape: HemisphereShape, transform: Transform): void {\n    const { radius } = shape;\n\n    const positionsOffset = this._localPositions.length;\n\n    const hemisphereIndicesCount = WireframePrimitive.hemisphereIndexCount;\n    this._growthIndexMemory(hemisphereIndicesCount);\n    this._growthPosition(WireframePrimitive.hemispherePositionCount);\n    const { _indices: indices, _localPositions: localPositions } = this;\n    WireframePrimitive.createHemisphereWireframe(\n      radius,\n      2,\n      localPositions,\n      positionsOffset,\n      indices,\n      this._indicesCount\n    );\n    this._indicesCount += hemisphereIndicesCount;\n    this._wireframeElements.push(new WireframeElement(transform, positionsOffset, false));\n  }\n\n  addSphereParticleShapeWireframe(shape: SphereShape, transform: Transform): void {\n    const { radius } = shape;\n\n    const positionsOffset = this._localPositions.length;\n\n    const sphereIndicesCount = WireframePrimitive.sphereIndexCount;\n    this._growthIndexMemory(sphereIndicesCount);\n    this._growthPosition(WireframePrimitive.spherePositionCount);\n    const { _indices: indices, _localPositions: localPositions } = this;\n    WireframePrimitive.createSphereWireframe(radius, localPositions, positionsOffset, indices, this._indicesCount);\n    this._indicesCount += sphereIndicesCount;\n    this._wireframeElements.push(new WireframeElement(transform, positionsOffset, false));\n  }\n\n  override onAwake(): void {\n    const engine = this.engine;\n    const mesh = new ModelMesh(engine);\n    const material = new PlainColorMaterial(engine);\n    const renderer = this.entity.getComponent(MeshRenderer);\n    renderer.castShadows = false;\n    renderer.receiveShadows = false;\n    // @ts-ignore\n    const supportUint32Array = engine._hardwareRenderer.canIUse(GLCapabilityType.elementIndexUint);\n\n    mesh.addSubMesh(0, this._indicesCount, MeshTopology.Lines);\n    renderer.mesh = mesh;\n    renderer.setMaterial(material);\n\n    const { bounds } = mesh;\n    bounds.min.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n    bounds.max.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n    this._mesh = mesh;\n    this._material = material;\n    this._renderer = renderer;\n    this._indices = supportUint32Array ? new Uint32Array(128) : new Uint16Array(128);\n    this._supportUint32Array = supportUint32Array;\n  }\n\n  override onEnable(): void {\n    this._renderer.enabled = true;\n  }\n\n  override onDisable(): void {\n    this._renderer.enabled = false;\n  }\n\n  override onLateUpdate(deltaTime: number): void {\n    const {\n      _mesh: mesh,\n      _localPositions: localPositions,\n      _globalPositions: globalPositions,\n      _wireframeElements: wireframeElements,\n      _wireframeRenderers: wireframeRenderers,\n      _indices: indices\n    } = this;\n\n    // update local to world geometry\n    const localPositionLength = localPositions.length;\n    globalPositions.length = localPositionLength;\n    let positionIndex = 0;\n    let needUpdate = false;\n    for (let i = 0, n = wireframeElements.length; i < n; i++) {\n      const wireframeElement = wireframeElements[i];\n      const beginIndex = wireframeElement.transformRanges;\n      const endIndex = i < n - 1 ? wireframeElements[i + 1].transformRanges : localPositionLength;\n      if (wireframeElement.updateFlag.flag) {\n        const transform = wireframeElement.transform;\n        const worldMatrix = WireframeManager._tempMatrix;\n        if (wireframeElement.isScaleIgnored) {\n          Matrix.rotationTranslation(transform.worldRotationQuaternion, transform.worldPosition, worldMatrix);\n        } else {\n          worldMatrix.copyFrom(transform.worldMatrix);\n        }\n\n        for (let j = beginIndex; j < endIndex; j++) {\n          const localPosition = localPositions[positionIndex];\n          const globalPosition = WireframeManager._getPositionFromPool(positionIndex);\n          Vector3.transformCoordinate(localPosition, worldMatrix, globalPosition);\n          globalPositions[positionIndex] = globalPosition;\n          positionIndex++;\n        }\n        wireframeElement.updateFlag.flag = false;\n        needUpdate = true;\n      } else {\n        positionIndex += endIndex - beginIndex;\n      }\n    }\n\n    // update world-space geometry\n    this._growthIndexMemory(this._boundsIndicesCount);\n    let indicesCount = this._indicesCount;\n    for (let i = 0; i < wireframeRenderers.length; i++) {\n      const renderer = wireframeRenderers[i];\n      const bounds = renderer.bounds;\n      const tempVector = WireframeManager._tempVector;\n      bounds.getExtent(tempVector);\n\n      const positionsOffset = globalPositions.length;\n      WireframePrimitive.createCuboidWireframe(\n        tempVector.x * 2,\n        tempVector.y * 2,\n        tempVector.z * 2,\n        globalPositions,\n        positionsOffset,\n        indices,\n        indicesCount\n      );\n      bounds.getCenter(tempVector);\n      for (let i = positionsOffset; i < globalPositions.length; i++) {\n        const position = globalPositions[i];\n        position.add(tempVector);\n      }\n      indicesCount += WireframePrimitive.cuboidIndexCount;\n    }\n\n    if (wireframeRenderers.length > 0 || needUpdate) {\n      mesh.setPositions(globalPositions);\n      mesh.setIndices(this._indices);\n      mesh.uploadData(false);\n      mesh.subMesh.count = indicesCount;\n    }\n\n    if (indicesCount === 0) {\n      this._renderer.setMaterial(null);\n    } else {\n      this._renderer.setMaterial(this._material);\n    }\n  }\n\n  private _growthIndexMemory(length: number): void {\n    const indices = this._indices;\n    const neededLength = this._indicesCount + length;\n    if (neededLength > indices.length) {\n      const maxLength = this._supportUint32Array ? 4294967295 : 65535;\n      if (neededLength > maxLength) {\n        throw Error(\"The vertex count is over limit.\");\n      }\n\n      const newIndices = this._supportUint32Array ? new Uint32Array(neededLength) : new Uint16Array(neededLength);\n      newIndices.set(indices);\n      this._indices = newIndices;\n    }\n  }\n\n  private _growthPosition(length: number): void {\n    const position = this._localPositions;\n    for (let i = 0; i < length; i++) {\n      position.push(new Vector3());\n    }\n  }\n\n  private _localTranslate(positionsOffset: number, offset: Vector3) {\n    const localPositions = this._localPositions;\n    for (let i = positionsOffset; i < localPositions.length; i++) {\n      const position = localPositions[i];\n      position.add(offset);\n    }\n  }\n\n  private _localRotation(positionsOffset: number, rotation: Quaternion) {\n    const localPositions = this._localPositions;\n    for (let i = positionsOffset; i < localPositions.length; i++) {\n      const position = localPositions[i];\n      Vector3.transformByQuat(position, rotation, position);\n    }\n  }\n\n  private _rotateAroundX(positionsOffset: number) {\n    const localPositions = this._localPositions;\n    for (let i = positionsOffset; i < localPositions.length; i++) {\n      const position = localPositions[i];\n      const py = position.y;\n      const pz = position.z;\n      position.z = py;\n      position.y = -pz;\n    }\n  }\n}\n\n/**\n * @internal\n * Store Wireframe element info.\n */\nclass WireframeElement {\n  updateFlag: BoolUpdateFlag;\n\n  constructor(public transform: Transform, public transformRanges: number, public isScaleIgnored: boolean = true) {\n    this.updateFlag = transform.registerWorldChangeFlag();\n  }\n}\n"],"names":["WireframeManager","_cameraPositions","Vector3","_localPositions","_globalPositions","_indices","_indicesCount","_boundsIndicesCount","_wireframeRenderers","_wireframeElements","clear","length","_mesh","subMesh","count","addEntityWireframe","entity","includeChildren","components","Array","getComponentsIncludeChildren","Camera","i","n","addCameraWireframe","componentsOffset","SpotLight","addSpotLightWireframe","DirectLight","addDirectLightWireframe","PointLight","addPointLightWireframe","Collider","addCollideWireframe","ParticleRenderer","addParticleRendererEmissionShapeWireframe","camera","getComponent","spotLight","directLight","pointLight","collider","particle","transform","inverseProj","projectionMatrix","clone","invert","localPositions","positionsOffset","push","WireframeElement","ndcPosition","_ndcPosition","newPosition","copyFrom","transformCoordinate","z","_growthIndexMemory","indices","light","height","distance","radius","Math","tan","angle","coneIndicesCount","WireframePrimitive","coneIndexCount","_growthPosition","conePositionCount","createConeWireframe","_rotateAroundX","sphereIndicesCount","sphereIndexCount","spherePositionCount","createSphereWireframe","unboundCylinderIndicesCount","unboundCylinderIndexCount","unboundCylinderPositionCount","createUnboundCylinderWireframe","addRendererWireframe","renderer","cuboidIndexCount","shapes","shape","BoxColliderShape","addBoxColliderShapeWireframe","SphereColliderShape","addSphereColliderShapeWireframe","CapsuleColliderShape","addCapsuleColliderShapeWireframe","worldScale","lossyWorldScale","position","rotation","size","_tempVector","_tempRotation","tempRotation","cuboidIndicesCount","cuboidPositionCount","createCuboidWireframe","x","y","Quaternion","rotationYawPitchRoll","_localRotation","multiply","tempVector","_localTranslate","max","maxScale","upAxis","_tempAxis","tempAxis","_halfSqrt","halfSqrt","capsuleIndicesCount","capsuleIndexCount","capsulePositionCount","createCapsuleWireframe","ColliderShapeUpAxis","X","set","Y","Z","particleRenderer","generator","emission","enabled","shapeType","addBoxParticleShapeWireframe","addCircleParticleShapeWireframe","addConeParticleShapeWireframe","addHemisphereParticleShapeWireframe","addSphereParticleShapeWireframe","circleIndicesCount","circleIndexCount","circlePositionCount","createCircleWireframe","frustumIndicesCount","frustumIndexCount","frustumPositionCount","createFrustumWireframe","hemisphereIndicesCount","hemisphereIndexCount","hemispherePositionCount","createHemisphereWireframe","onAwake","engine","mesh","ModelMesh","material","PlainColorMaterial","MeshRenderer","castShadows","receiveShadows","supportUint32Array","_hardwareRenderer","canIUse","GLCapabilityType","elementIndexUint","addSubMesh","MeshTopology","Lines","setMaterial","bounds","min","Number","MAX_VALUE","_material","_renderer","Uint32Array","Uint16Array","_supportUint32Array","onEnable","onDisable","onLateUpdate","deltaTime","globalPositions","wireframeElements","wireframeRenderers","localPositionLength","positionIndex","needUpdate","wireframeElement","beginIndex","transformRanges","endIndex","updateFlag","flag","worldMatrix","_tempMatrix","isScaleIgnored","Matrix","rotationTranslation","worldRotationQuaternion","worldPosition","j","localPosition","globalPosition","_getPositionFromPool","indicesCount","getExtent","getCenter","add","setPositions","setIndices","uploadData","neededLength","maxLength","Error","newIndices","offset","transformByQuat","py","pz","positionPool","_positionPool","baseColor","value","Script","dependentComponents","DependentMode","CheckOnly","registerWorldChangeFlag"],"mappings":";;;;;AAAO,SAAS,WAAW,CAAC,IAAI,EAAE,KAAK,EAAE;AACzC,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,OAAO,MAAM,KAAK,WAAW,IAAI,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE;AACrF,QAAQ,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC;AACjD,KAAK,MAAM,OAAO,IAAI,YAAY,KAAK,CAAC;AACxC;;ACoCO,IAAA,gBAAMA,iBAAD,SAAL,MAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,gBAAAA,EAAAA,MAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,gBAAAA,GAAAA;;;cAcHC,gBAAmB,GAAA;YACzB,IAAIC,OAAAA,EAAAA;YACJ,IAAIA,OAAAA,EAAAA;YACJ,IAAIA,OAAAA,EAAAA;YACJ,IAAIA,OAAAA,EAAAA;YACJ,IAAIA,OAAAA,EAAAA;YACJ,IAAIA,OAAAA,EAAAA;YACJ,IAAIA,OAAAA,EAAAA;YACJ,IAAIA,OAAAA,EAAAA;AACL,SAAA,CAAA;AACOC,QAAAA,KAAAA,CAAAA,eAAAA,GAA6B,EAAE,CAAA;AAC/BC,QAAAA,KAAAA,CAAAA,gBAAAA,GAA8B,EAAE,CAAA;cAChCC,QAAsC,GAAA,IAAA,CAAA;cACtCC,aAAgB,GAAA,CAAA,CAAA;cAChBC,mBAAsB,GAAA,CAAA,CAAA;AAGtBC,QAAAA,KAAAA,CAAAA,mBAAAA,GAAkC,EAAE,CAAA;AACpCC,QAAAA,KAAAA,CAAAA,kBAAAA,GAAyC,EAAE,CAAA;;;AAhCxCT,IAAAA,IAAAA,MAAAA,GAAAA,gBAAAA,CAAAA,SAAAA,CAAAA;AA4DX;;MAGAU,MAAAA,CAAAA,KAOC,GAPDA,SAAAA,KAAAA,GAAAA;AACE,QAAA,IAAI,CAACF,mBAAmB,CAACG,MAAM,GAAG,CAAA,CAAA;AAClC,QAAA,IAAI,CAACF,kBAAkB,CAACE,MAAM,GAAG,CAAA,CAAA;AACjC,QAAA,IAAI,CAACR,eAAe,CAACQ,MAAM,GAAG,CAAA,CAAA;AAC9B,QAAA,IAAI,CAACP,gBAAgB,CAACO,MAAM,GAAG,CAAA,CAAA;QAC/B,IAAI,CAACL,aAAa,GAAG,CAAA,CAAA;AACrB,QAAA,IAAI,CAACM,KAAK,CAACC,OAAO,CAACC,KAAK,GAAG,CAAA,CAAA;AAC7B,KAAA,CAAA;AAEA;;;;AAIC,MACDC,OAAAA,kBAmDC,GAnDDA,SAAAA,kBAAmBC,CAAAA,MAAc,EAAEC,eAAsB,EAAA;AAAtBA,QAAAA,IAAAA,4BAAAA,eAAkB,GAAA,IAAA,CAAA;AACnD,QAAA,IAAIA,eAAiB,EAAA;AACnB,YAAA,IAAMC,aAAa,IAAIC,KAAAA,EAAAA,CAAAA;YACvBH,MAAOI,CAAAA,4BAA4B,CAACC,MAAQH,EAAAA,UAAAA,CAAAA,CAAAA;YAC5C,IAAK,IAAII,IAAI,CAAGC,EAAAA,CAAAA,GAAIL,WAAWP,MAAM,EAAEW,CAAIC,GAAAA,CAAAA,EAAGD,CAAK,EAAA,CAAA;AACjD,gBAAA,IAAI,CAACE,kBAAkB,CAASN,UAAU,CAACI,CAAE,CAAA,CAAA,CAAA;AAC/C,aAAA;YACA,IAAIG,gBAAAA,GAAmBP,WAAWP,MAAM,CAAA;YAExCK,MAAOI,CAAAA,4BAA4B,CAACM,SAAWR,EAAAA,UAAAA,CAAAA,CAAAA;YAC/C,IAAK,IAAII,KAAIG,gBAAkBF,EAAAA,EAAAA,GAAIL,WAAWP,MAAM,EAAEW,EAAIC,GAAAA,EAAAA,EAAGD,EAAK,EAAA,CAAA;AAChE,gBAAA,IAAI,CAACK,qBAAqB,CAAYT,UAAU,CAACI,EAAE,CAAA,CAAA,CAAA;AACrD,aAAA;AACAG,YAAAA,gBAAAA,GAAmBP,WAAWP,MAAM,CAAA;YAEpCK,MAAOI,CAAAA,4BAA4B,CAACQ,WAAaV,EAAAA,UAAAA,CAAAA,CAAAA;YACjD,IAAK,IAAII,KAAIG,gBAAkBF,EAAAA,EAAAA,GAAIL,WAAWP,MAAM,EAAEW,EAAIC,GAAAA,EAAAA,EAAGD,EAAK,EAAA,CAAA;AAChE,gBAAA,IAAI,CAACO,uBAAuB,CAAcX,UAAU,CAACI,EAAE,CAAA,CAAA,CAAA;AACzD,aAAA;AACAG,YAAAA,gBAAAA,GAAmBP,WAAWP,MAAM,CAAA;YAEpCK,MAAOI,CAAAA,4BAA4B,CAACU,UAAYZ,EAAAA,UAAAA,CAAAA,CAAAA;YAChD,IAAK,IAAII,KAAIG,gBAAkBF,EAAAA,EAAAA,GAAIL,WAAWP,MAAM,EAAEW,EAAIC,GAAAA,EAAAA,EAAGD,EAAK,EAAA,CAAA;AAChE,gBAAA,IAAI,CAACS,sBAAsB,CAAab,UAAU,CAACI,EAAE,CAAA,CAAA,CAAA;AACvD,aAAA;AACAG,YAAAA,gBAAAA,GAAmBP,WAAWP,MAAM,CAAA;YAEpCK,MAAOI,CAAAA,4BAA4B,CAACY,QAAUd,EAAAA,UAAAA,CAAAA,CAAAA;YAC9C,IAAK,IAAII,KAAIG,gBAAkBF,EAAAA,EAAAA,GAAIL,WAAWP,MAAM,EAAEW,EAAIC,GAAAA,EAAAA,EAAGD,EAAK,EAAA,CAAA;AAChE,gBAAA,IAAI,CAACW,mBAAmB,CAAWf,UAAU,CAACI,EAAE,CAAA,CAAA,CAAA;AAClD,aAAA;AACAG,YAAAA,gBAAAA,GAAmBP,WAAWP,MAAM,CAAA;YAEpCK,MAAOI,CAAAA,4BAA4B,CAACc,gBAAkBhB,EAAAA,UAAAA,CAAAA,CAAAA;YACtD,IAAK,IAAII,KAAIG,gBAAkBF,EAAAA,EAAAA,GAAIL,WAAWP,MAAM,EAAEW,EAAIC,GAAAA,EAAAA,EAAGD,EAAK,EAAA,CAAA;AAChE,gBAAA,IAAI,CAACa,yCAAyC,CAAmBjB,UAAU,CAACI,EAAE,CAAA,CAAA,CAAA;AAChF,aAAA;SACK,MAAA;YACL,IAAMc,MAAAA,GAASpB,MAAOqB,CAAAA,YAAY,CAAChB,MAAAA,CAAAA,CAAAA;YACnCe,MAAU,IAAA,IAAI,CAACZ,kBAAkB,CAACY,MAAAA,CAAAA,CAAAA;YAClC,IAAME,SAAAA,GAAYtB,MAAOqB,CAAAA,YAAY,CAACX,SAAAA,CAAAA,CAAAA;YACtCY,SAAa,IAAA,IAAI,CAACX,qBAAqB,CAACW,SAAAA,CAAAA,CAAAA;YACxC,IAAMC,WAAAA,GAAcvB,MAAOqB,CAAAA,YAAY,CAACT,WAAAA,CAAAA,CAAAA;YACxCW,WAAe,IAAA,IAAI,CAACV,uBAAuB,CAACU,WAAAA,CAAAA,CAAAA;YAC5C,IAAMC,UAAAA,GAAaxB,MAAOqB,CAAAA,YAAY,CAACP,UAAAA,CAAAA,CAAAA;YACvCU,UAAc,IAAA,IAAI,CAACT,sBAAsB,CAACS,UAAAA,CAAAA,CAAAA;YAC1C,IAAMC,QAAAA,GAAWzB,MAAOqB,CAAAA,YAAY,CAACL,QAAAA,CAAAA,CAAAA;YACrCS,QAAY,IAAA,IAAI,CAACR,mBAAmB,CAACQ,QAAAA,CAAAA,CAAAA;YACrC,IAAMC,QAAAA,GAAW1B,MAAOqB,CAAAA,YAAY,CAACH,gBAAAA,CAAAA,CAAAA;YACrCQ,QAAY,IAAA,IAAI,CAACP,yCAAyC,CAACO,QAAAA,CAAAA,CAAAA;AAC7D,SAAA;AACF,KAAA,CAAA;AAEA;;;AAGC,MACDlB,MAAAA,CAAAA,kBAqDC,GArDDA,SAAAA,mBAAmBY,MAAc,EAAA;AAC/B,QAAA,IAAMO,SAAYP,GAAAA,MAAAA,CAAOpB,MAAM,CAAC2B,SAAS,CAAA;AACzC,QAAA,IAAMC,WAAcR,GAAAA,MAAAA,CAAOS,gBAAgB,CAACC,KAAK,EAAA,CAAA;AACjDF,QAAAA,WAAAA,CAAYG,MAAM,EAAA,CAAA;QAElB,IAAMC,cAAAA,GAAiB,IAAI,CAAC7C,eAAe,CAAA;QAC3C,IAAM8C,eAAAA,GAAkBD,eAAerC,MAAM,CAAA;AAC7C,QAAA,IAAI,CAACF,kBAAkB,CAACyC,IAAI,CAAC,IAAIC,iBAAiBR,SAAWM,EAAAA,eAAAA,CAAAA,CAAAA,CAAAA;QAE7D,IAAMG,WAAAA,GAAcpD,gBA/IXA,CA+I4BqD,YAAY,CAAA;;AAEjD,QAAA,IAAK,IAAI/B,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAI,GAAGA,CAAK,EAAA,CAAA;AAC1B,YAAA,IAAMgC,WAAc,GAAA,IAAI,CAACrD,gBAAgB,CAACqB,CAAE,CAAA,CAAA;AAC5CgC,YAAAA,WAAAA,CAAYC,QAAQ,CAACH,WAAW,CAAC9B,CAAE,CAAA,CAAA,CAAA;AACnCgC,YAAAA,WAAAA,CAAYE,mBAAmB,CAACZ,WAAAA,CAAAA,CAAAA;AAChCI,YAAAA,cAAAA,CAAeE,IAAI,CAACI,WAAAA,CAAAA,CAAAA;AACtB,SAAA;;AAGA,QAAA,IAAK,IAAIhC,EAAAA,GAAI,CAAGA,EAAAA,EAAAA,GAAI,GAAGA,EAAK,EAAA,CAAA;AAC1B,YAAA,IAAMgC,eAAc,IAAI,CAACrD,gBAAgB,CAACqB,KAAI,CAAE,CAAA,CAAA;AAChDgC,YAAAA,YAAAA,CAAYC,QAAQ,CAACH,WAAW,CAAC9B,EAAE,CAAA,CAAA,CAAA;AACnCgC,YAAAA,YAAAA,CAAYG,CAAC,GAAG,CAAA,CAAA;AAChBH,YAAAA,YAAAA,CAAYE,mBAAmB,CAACZ,WAAAA,CAAAA,CAAAA;AAChCI,YAAAA,cAAAA,CAAeE,IAAI,CAACI,YAAAA,CAAAA,CAAAA;AACtB,SAAA;QAEA,IAAI,CAACI,kBAAkB,CAAC,EAAA,CAAA,CAAA;QACxB,IAAMC,OAAAA,GAAU,IAAI,CAACtD,QAAQ,CAAA;AAC7BsD,QAAAA,OAAO,CAAC,IAAI,CAACrD,aAAa,GAAG,GAAG2C,eAAAA,CAAAA;AAChCU,QAAAA,OAAO,CAAC,IAAI,CAACrD,aAAa,EAAA,CAAG,GAAG2C,eAAkB,GAAA,CAAA,CAAA;AAClDU,QAAAA,OAAO,CAAC,IAAI,CAACrD,aAAa,EAAA,CAAG,GAAG2C,eAAkB,GAAA,CAAA,CAAA;AAClDU,QAAAA,OAAO,CAAC,IAAI,CAACrD,aAAa,EAAA,CAAG,GAAG2C,eAAkB,GAAA,CAAA,CAAA;AAClDU,QAAAA,OAAO,CAAC,IAAI,CAACrD,aAAa,EAAA,CAAG,GAAG2C,eAAkB,GAAA,CAAA,CAAA;AAClDU,QAAAA,OAAO,CAAC,IAAI,CAACrD,aAAa,EAAA,CAAG,GAAG2C,eAAkB,GAAA,CAAA,CAAA;AAClDU,QAAAA,OAAO,CAAC,IAAI,CAACrD,aAAa,EAAA,CAAG,GAAG2C,eAAkB,GAAA,CAAA,CAAA;AAClDU,QAAAA,OAAO,CAAC,IAAI,CAACrD,aAAa,EAAG,CAAA,GAAG2C;AAChCU,QAAAA,OAAO,CAAC,IAAI,CAACrD,aAAa,GAAG,GAAG2C,eAAAA,CAAAA;AAChCU,QAAAA,OAAO,CAAC,IAAI,CAACrD,aAAa,EAAA,CAAG,GAAG2C,eAAkB,GAAA,CAAA,CAAA;AAClDU,QAAAA,OAAO,CAAC,IAAI,CAACrD,aAAa,EAAA,CAAG,GAAG2C,eAAkB,GAAA,CAAA,CAAA;AAClDU,QAAAA,OAAO,CAAC,IAAI,CAACrD,aAAa,EAAA,CAAG,GAAG2C,eAAkB,GAAA,CAAA,CAAA;AAClDU,QAAAA,OAAO,CAAC,IAAI,CAACrD,aAAa,EAAA,CAAG,GAAG2C,eAAkB,GAAA,CAAA,CAAA;AAClDU,QAAAA,OAAO,CAAC,IAAI,CAACrD,aAAa,EAAA,CAAG,GAAG2C,eAAkB,GAAA,CAAA,CAAA;AAClDU,QAAAA,OAAO,CAAC,IAAI,CAACrD,aAAa,EAAA,CAAG,GAAG2C,eAAkB,GAAA,CAAA,CAAA;QAClDU,OAAO,CAAC,IAAI,CAACrD,aAAa,GAAG,GAAG2C,eAAAA,GAAkB;AAClDU,QAAAA,OAAO,CAAC,IAAI,CAACrD,aAAa,EAAA,CAAG,GAAG2C,eAAkB,GAAA,CAAA,CAAA;AAClDU,QAAAA,OAAO,CAAC,IAAI,CAACrD,aAAa,EAAA,CAAG,GAAG2C,eAAkB,GAAA,CAAA,CAAA;AAClDU,QAAAA,OAAO,CAAC,IAAI,CAACrD,aAAa,EAAA,CAAG,GAAG2C,eAAkB,GAAA,CAAA,CAAA;AAClDU,QAAAA,OAAO,CAAC,IAAI,CAACrD,aAAa,EAAA,CAAG,GAAG2C,eAAkB,GAAA,CAAA,CAAA;AAClDU,QAAAA,OAAO,CAAC,IAAI,CAACrD,aAAa,EAAA,CAAG,GAAG2C,eAAkB,GAAA,CAAA,CAAA;AAClDU,QAAAA,OAAO,CAAC,IAAI,CAACrD,aAAa,EAAA,CAAG,GAAG2C,eAAkB,GAAA,CAAA,CAAA;AAClDU,QAAAA,OAAO,CAAC,IAAI,CAACrD,aAAa,EAAA,CAAG,GAAG2C,eAAkB,GAAA,CAAA,CAAA;QAClDU,OAAO,CAAC,IAAI,CAACrD,aAAa,GAAG,GAAG2C,eAAAA,GAAkB;AACpD,KAAA,CAAA;AAEA;;;AAGC,MACDtB,MAAAA,CAAAA,qBAuBC,GAvBDA,SAAAA,sBAAsBiC,KAAgB,EAAA;QACpC,IAAMC,MAAAA,GAASD,MAAME,QAAQ,CAAA;AAC7B,QAAA,IAAMC,SAASC,IAAKC,CAAAA,GAAG,CAACL,KAAMM,CAAAA,KAAK,GAAG,CAAKL,CAAAA,GAAAA,MAAAA,CAAAA;AAE3C,QAAA,IAAMZ,eAAkB,GAAA,IAAI,CAAC9C,eAAe,CAACQ,MAAM,CAAA;QACnD,IAAMwD,gBAAAA,GAAmBC,mBAAmBC,cAAc,CAAA;QAE1D,IAAI,CAACX,kBAAkB,CAACS,gBAAAA,CAAAA,CAAAA;AACxB,QAAA,IAAI,CAACG,eAAe,CAACF,kBAAAA,CAAmBG,iBAAiB,CAAA,CAAA;QACzD,IAA+D,KAAA,GAAA,IAAI,EAAjDZ,UAA6C,KAAvDtD,CAAAA,QAAAA,EAAmBF,cAAiB6C,GAAmB,KAApC7C,CAAAA,eAAAA,CAAAA;QAC3BiE,kBAAmBI,CAAAA,mBAAmB,CACpCT,MACAF,EAAAA,MAAAA,EACAb,gBACAC,eACAU,EAAAA,OAAAA,EACA,IAAI,CAACrD,aAAa,CAAA,CAAA;QAEpB,IAAI,CAACA,aAAa,IAAI6D,gBAAAA,CAAAA;;QAEtB,IAAI,CAACM,cAAc,CAACxB,eAAAA,CAAAA,CAAAA;QAEpB,IAAI,CAACxC,kBAAkB,CAACyC,IAAI,CAAC,IAAIC,gBAAAA,CAAiBS,KAAM5C,CAAAA,MAAM,CAAC2B,SAAS,EAAEM,eAAAA,CAAAA,CAAAA,CAAAA;AAC5E,KAAA,CAAA;AAEA;;;AAGC,MACDlB,MAAAA,CAAAA,sBAiBC,GAjBDA,SAAAA,uBAAuB6B,KAAiB,EAAA;AACtC,QAAA,IAAMX,eAAkB,GAAA,IAAI,CAAC9C,eAAe,CAACQ,MAAM,CAAA;QACnD,IAAM+D,kBAAAA,GAAqBN,mBAAmBO,gBAAgB,CAAA;QAE9D,IAAI,CAACjB,kBAAkB,CAACgB,kBAAAA,CAAAA,CAAAA;AACxB,QAAA,IAAI,CAACJ,eAAe,CAACF,kBAAAA,CAAmBQ,mBAAmB,CAAA,CAAA;QAC3D,IAA+D,KAAA,GAAA,IAAI,EAAjDjB,UAA6C,KAAvDtD,CAAAA,QAAAA,EAAmBF,cAAiB6C,GAAmB,KAApC7C,CAAAA,eAAAA,CAAAA;QAC3BiE,kBAAmBS,CAAAA,qBAAqB,CACtCjB,KAAAA,CAAME,QAAQ,EACdd,gBACAC,eACAU,EAAAA,OAAAA,EACA,IAAI,CAACrD,aAAa,CAAA,CAAA;QAEpB,IAAI,CAACA,aAAa,IAAIoE,kBAAAA,CAAAA;QAEtB,IAAI,CAACjE,kBAAkB,CAACyC,IAAI,CAAC,IAAIC,gBAAAA,CAAiBS,KAAM5C,CAAAA,MAAM,CAAC2B,SAAS,EAAEM,eAAAA,CAAAA,CAAAA,CAAAA;AAC5E,KAAA,CAAA;AAEA;;;AAGC,MACDpB,MAAAA,CAAAA,uBAaC,GAbDA,SAAAA,wBAAwB+B,KAAkB,EAAA;AACxC,QAAA,IAAMX,eAAkB,GAAA,IAAI,CAAC9C,eAAe,CAACQ,MAAM,CAAA;QACnD,IAAMmE,2BAAAA,GAA8BV,mBAAmBW,yBAAyB,CAAA;QAEhF,IAAI,CAACrB,kBAAkB,CAACoB,2BAAAA,CAAAA,CAAAA;AACxB,QAAA,IAAI,CAACR,eAAe,CAACF,kBAAAA,CAAmBY,4BAA4B,CAAA,CAAA;QACpE,IAA+D,KAAA,GAAA,IAAI,EAAjDrB,UAA6C,KAAvDtD,CAAAA,QAAAA,EAAmBF,cAAiB6C,GAAmB,KAApC7C,CAAAA,eAAAA,CAAAA;QAC3BiE,kBAAmBa,CAAAA,8BAA8B,CAAC,CAAGjC,EAAAA,cAAAA,EAAgBC,iBAAiBU,OAAS,EAAA,IAAI,CAACrD,aAAa,CAAA,CAAA;QACjH,IAAI,CAACA,aAAa,IAAIwE,2BAAAA,CAAAA;;QAEtB,IAAI,CAACL,cAAc,CAACxB,eAAAA,CAAAA,CAAAA;QAEpB,IAAI,CAACxC,kBAAkB,CAACyC,IAAI,CAAC,IAAIC,gBAAAA,CAAiBS,KAAM5C,CAAAA,MAAM,CAAC2B,SAAS,EAAEM,eAAAA,CAAAA,CAAAA,CAAAA;AAC5E,KAAA,CAAA;AAEA;;;AAGC,MACDiC,MAAAA,CAAAA,oBAGC,GAHDA,SAAAA,qBAAqBC,QAAkB,EAAA;AACrC,QAAA,IAAI,CAAC5E,mBAAmB,IAAI6D,kBAAAA,CAAmBgB,gBAAgB,CAAA;AAC/D,QAAA,IAAI,CAAC5E,mBAAmB,CAAC0C,IAAI,CAACiC,QAAAA,CAAAA,CAAAA;AAChC,KAAA,CAAA;AAEA;;;AAGC,MACDlD,MAAAA,CAAAA,mBAYC,GAZDA,SAAAA,oBAAoBQ,QAAkB,EAAA;QACpC,IAAM4C,MAAAA,GAAS5C,SAAS4C,MAAM,CAAA;QAC9B,IAAK,IAAI/D,IAAI,CAAGC,EAAAA,CAAAA,GAAI8D,OAAO1E,MAAM,EAAEW,CAAIC,GAAAA,CAAAA,EAAGD,CAAK,EAAA,CAAA;YAC7C,IAAMgE,KAAAA,GAAQD,MAAM,CAAC/D,CAAE,CAAA,CAAA;YACvB,IAAS,WAALgE,CAAAA,KAAAA,EAAiBC,gBAAkB,CAAA,EAAA;gBACrC,IAAI,CAACC,4BAA4B,CAACF,KAAAA,CAAAA,CAAAA;AACpC,aAAA,MAAO,IAAS,WAALA,CAAAA,KAAAA,EAAiBG,mBAAqB,CAAA,EAAA;gBAC/C,IAAI,CAACC,+BAA+B,CAACJ,KAAAA,CAAAA,CAAAA;AACvC,aAAA,MAAO,IAAS,WAALA,CAAAA,KAAAA,EAAiBK,oBAAsB,CAAA,EAAA;gBAChD,IAAI,CAACC,gCAAgC,CAACN,KAAAA,CAAAA,CAAAA;AACxC,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AAEA;;;AAGC,MACDE,MAAAA,CAAAA,4BA4BC,GA5BDA,SAAAA,6BAA6BF,KAAuB,EAAA;AAClD,QAAA,IAAM3C,YAAY2C,KAAM7C,CAAAA,QAAQ,CAACzB,MAAM,CAAC2B,SAAS,CAAA;QACjD,IAAMkD,UAAAA,GAAalD,UAAUmD,eAAe,CAAA;AAC5C,QAAA,IAAQC,WAA6BT,KAA7BS,CAAAA,QAAAA,EAAUC,WAAmBV,KAAnBU,CAAAA,QAAAA,EAAUC,OAASX,KAATW,CAAAA,IAAAA,CAAAA;AAC5B,QAAA,IAAQC,UAvSClG,GAAAA,gBAAAA,CAuSDkG,WAAyBC,EAAeC,eAvSvCpG,gBAuSwBmG,CAAAA,aAAAA,CAAAA;AAEjC,QAAA,IAAMlD,eAAkB,GAAA,IAAI,CAAC9C,eAAe,CAACQ,MAAM,CAAA;QAEnD,IAAM0F,kBAAAA,GAAqBjC,mBAAmBgB,gBAAgB,CAAA;QAC9D,IAAI,CAAC1B,kBAAkB,CAAC2C,kBAAAA,CAAAA,CAAAA;AACxB,QAAA,IAAI,CAAC/B,eAAe,CAACF,kBAAAA,CAAmBkC,mBAAmB,CAAA,CAAA;QAC3D,IAA+D,KAAA,GAAA,IAAI,EAAjD3C,UAA6C,KAAvDtD,CAAAA,QAAAA,EAAmBF,cAAiB6C,GAAmB,KAApC7C,CAAAA,eAAAA,CAAAA;QAC3BiE,kBAAmBmC,CAAAA,qBAAqB,CACtCV,UAAAA,CAAWW,CAAC,GAAGP,KAAKO,CAAC,EACrBX,UAAWY,CAAAA,CAAC,GAAGR,IAAAA,CAAKQ,CAAC,EACrBZ,UAAAA,CAAWpC,CAAC,GAAGwC,IAAKxC,CAAAA,CAAC,EACrBT,cAAAA,EACAC,eACAU,EAAAA,OAAAA,EACA,IAAI,CAACrD,aAAa,CAAA,CAAA;QAEpBoG,UAAWC,CAAAA,oBAAoB,CAACX,QAAAA,CAASQ,CAAC,EAAER,SAASS,CAAC,EAAET,QAASvC,CAAAA,CAAC,EAAE2C,YAAAA,CAAAA,CAAAA;QACpE,IAAI,CAACQ,cAAc,CAAC3D,eAAiBmD,EAAAA,YAAAA,CAAAA,CAAAA;QACrClG,OAAQ2G,CAAAA,QAAQ,CAACd,QAAAA,EAAUF,UAAYiB,EAAAA,UAAAA,CAAAA,CAAAA;QACvC,IAAI,CAACC,eAAe,CAAC9D,eAAiB6D,EAAAA,UAAAA,CAAAA,CAAAA;QAEtC,IAAI,CAACxG,aAAa,IAAI+F,kBAAAA,CAAAA;AACtB,QAAA,IAAI,CAAC5F,kBAAkB,CAACyC,IAAI,CAAC,IAAIC,iBAAiBR,SAAWM,EAAAA,eAAAA,CAAAA,CAAAA,CAAAA;AAC/D,KAAA,CAAA;AAEA;;;AAGC,MACDyC,MAAAA,CAAAA,+BA0BC,GA1BDA,SAAAA,gCAAgCJ,KAA0B,EAAA;AACxD,QAAA,IAAM3C,YAAY2C,KAAM7C,CAAAA,QAAQ,CAACzB,MAAM,CAAC2B,SAAS,CAAA;QACjD,IAAMkD,UAAAA,GAAalD,UAAUmD,eAAe,CAAA;AAC5C,QAAA,IAAQC,WAA+BT,KAA/BS,CAAAA,QAAAA,EAAUC,WAAqBV,KAArBU,CAAAA,QAAAA,EAAUjC,SAAWuB,KAAXvB,CAAAA,MAAAA,CAAAA;AAC5B,QAAA,IAAQmC,UAzUClG,GAAAA,gBAAAA,CAyUDkG,WAAyBC,EAAeC,eAzUvCpG,gBAyUwBmG,CAAAA,aAAAA,CAAAA;AAEjC,QAAA,IAAMlD,eAAkB,GAAA,IAAI,CAAC9C,eAAe,CAACQ,MAAM,CAAA;QAEnD,IAAM+D,kBAAAA,GAAqBN,mBAAmBO,gBAAgB,CAAA;QAC9D,IAAI,CAACjB,kBAAkB,CAACgB,kBAAAA,CAAAA,CAAAA;AACxB,QAAA,IAAI,CAACJ,eAAe,CAACF,kBAAAA,CAAmBQ,mBAAmB,CAAA,CAAA;QAC3D,IAA+D,KAAA,GAAA,IAAI,EAAjDjB,UAA6C,KAAvDtD,CAAAA,QAAAA,EAAmBF,cAAiB6C,GAAmB,KAApC7C,CAAAA,eAAAA,CAAAA;QAC3BiE,kBAAmBS,CAAAA,qBAAqB,CACtCb,IAAKgD,CAAAA,GAAG,CAACnB,UAAWW,CAAAA,CAAC,EAAEX,UAAWY,CAAAA,CAAC,EAAEZ,UAAWpC,CAAAA,CAAC,IAAIM,MACrDf,EAAAA,cAAAA,EACAC,iBACAU,OACA,EAAA,IAAI,CAACrD,aAAa,CAAA,CAAA;QAEpBoG,UAAWC,CAAAA,oBAAoB,CAACX,QAAAA,CAASQ,CAAC,EAAER,SAASS,CAAC,EAAET,QAASvC,CAAAA,CAAC,EAAE2C,YAAAA,CAAAA,CAAAA;QACpE,IAAI,CAACQ,cAAc,CAAC3D,eAAiBmD,EAAAA,YAAAA,CAAAA,CAAAA;QACrClG,OAAQ2G,CAAAA,QAAQ,CAACd,QAAAA,EAAUF,UAAYiB,EAAAA,UAAAA,CAAAA,CAAAA;QACvC,IAAI,CAACC,eAAe,CAAC9D,eAAiB6D,EAAAA,UAAAA,CAAAA,CAAAA;QAEtC,IAAI,CAACxG,aAAa,IAAIoE,kBAAAA,CAAAA;AACtB,QAAA,IAAI,CAACjE,kBAAkB,CAACyC,IAAI,CAAC,IAAIC,iBAAiBR,SAAWM,EAAAA,eAAAA,CAAAA,CAAAA,CAAAA;AAC/D,KAAA,CAAA;AAEA;;;AAGC,MACD2C,MAAAA,CAAAA,gCA4CC,GA5CDA,SAAAA,iCAAiCN,KAA2B,EAAA;AAC1D,QAAA,IAAM3C,YAAY2C,KAAM7C,CAAAA,QAAQ,CAACzB,MAAM,CAAC2B,SAAS,CAAA;QACjD,IAAMkD,UAAAA,GAAalD,UAAUmD,eAAe,CAAA;QAC5C,IAAMmB,QAAAA,GAAWjD,IAAKgD,CAAAA,GAAG,CAACnB,UAAAA,CAAWW,CAAC,EAAEX,UAAWY,CAAAA,CAAC,EAAEZ,UAAAA,CAAWpC,CAAC,CAAA,CAAA;AAClE,QAAA,IAAQM,MAA+CuB,GAAAA,KAAAA,CAA/CvB,MAAQF,EAAAA,MAAAA,GAAuCyB,KAAvCzB,CAAAA,MAAAA,EAAQqD,MAA+B5B,GAAAA,KAAAA,CAA/B4B,MAAQnB,EAAAA,QAAAA,GAAuBT,KAAvBS,CAAAA,QAAAA,EAAUC,WAAaV,KAAbU,CAAAA,QAAAA,CAAAA;AAC1C,QAAA,IACEE,UAAaY,GA3WN9G,gBA2WPkG,CAAAA,WAAAA,EACAC,YA5WOnG,GAAAA,gBAAAA,CA4WPmG,aACAgB,EAAWC,QA7WJpH,GAAAA,gBAAAA,CA6WPmH,SACAE,EAAWC,WA9WJtH,gBA8WPqH,CAAAA,SAAAA,CAAAA;AAGF,QAAA,IAAMpE,eAAkB,GAAA,IAAI,CAAC9C,eAAe,CAACQ,MAAM,CAAA;QAEnD,IAAM4G,mBAAAA,GAAsBnD,mBAAmBoD,iBAAiB,CAAA;QAChE,IAAI,CAAC9D,kBAAkB,CAAC6D,mBAAAA,CAAAA,CAAAA;AACxB,QAAA,IAAI,CAACjD,eAAe,CAACF,kBAAAA,CAAmBqD,oBAAoB,CAAA,CAAA;QAC5D,IAA+D,KAAA,GAAA,IAAI,EAAjD9D,UAA6C,KAAvDtD,CAAAA,QAAAA,EAAmBF,cAAiB6C,GAAmB,KAApC7C,CAAAA,eAAAA,CAAAA;QAC3BiE,kBAAmBsD,CAAAA,sBAAsB,CACvCT,QAAAA,GAAWlD,MACXkD,EAAAA,QAAAA,GAAWpD,MACXb,EAAAA,cAAAA,EACAC,eACAU,EAAAA,OAAAA,EACA,IAAI,CAACrD,aAAa,CAAA,CAAA;QAEpB,OAAQ4G,MAAAA;AACN,YAAA,KAAKS,oBAAoBC,CAAC;AACxBR,gBAAAA,QAAAA,CAASS,GAAG,CAAC,CAAG,EAAA,CAAA,EAAGP,QAAUA,EAAAA,QAAAA,CAAAA,CAAAA;AAC7B,gBAAA,MAAA;AACF,YAAA,KAAKK,oBAAoBG,CAAC;AACxBV,gBAAAA,QAAAA,CAASS,GAAG,CAAC,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,CAAA,CAAA;AACtB,gBAAA,MAAA;AACF,YAAA,KAAKF,oBAAoBI,CAAC;AACxBX,gBAAAA,QAAAA,CAASS,GAAG,CAACP,QAAU,EAAA,CAAA,EAAG,CAAGA,EAAAA,QAAAA,CAAAA,CAAAA;AACjC,SAAA;QACAZ,UAAWC,CAAAA,oBAAoB,CAACX,QAAAA,CAASQ,CAAC,EAAER,SAASS,CAAC,EAAET,QAASvC,CAAAA,CAAC,EAAE2C,YAAAA,CAAAA,CAAAA;QACpEM,UAAWG,CAAAA,QAAQ,CAACT,YAAAA,EAAcgB,QAAUhB,EAAAA,YAAAA,CAAAA,CAAAA;QAC5C,IAAI,CAACQ,cAAc,CAAC3D,eAAiBmD,EAAAA,YAAAA,CAAAA,CAAAA;QACrClG,OAAQ2G,CAAAA,QAAQ,CAACd,QAAAA,EAAUF,UAAYiB,EAAAA,UAAAA,CAAAA,CAAAA;QACvC,IAAI,CAACC,eAAe,CAAC9D,eAAiB6D,EAAAA,UAAAA,CAAAA,CAAAA;QAEtC,IAAI,CAACxG,aAAa,IAAIiH,mBAAAA,CAAAA;AACtB,QAAA,IAAI,CAAC9G,kBAAkB,CAACyC,IAAI,CAAC,IAAIC,iBAAiBR,SAAWM,EAAAA,eAAAA,CAAAA,CAAAA,CAAAA;AAC/D,KAAA,CAAA;AAEAd,IAAAA,MAAAA,CAAAA,yCAwBC,GAxBDA,SAAAA,yCAAAA,CAA0C6F,gBAAkC,EAAA;AAC1E,QAAA,IAAIA,iBAAiBC,SAAS,CAACC,QAAQ,CAACC,OAAO,EAAE;AAC/C,YAAA,IAAM7C,QAAQ0C,gBAAiBC,CAAAA,SAAS,CAACC,QAAQ,CAAC5C,KAAK,CAAA;AACvD,YAAA,IAAM3C,SAAYqF,GAAAA,gBAAAA,CAAiBhH,MAAM,CAAC2B,SAAS,CAAA;YACnD,OAAQ2C,KAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,MAAO8C,SAAS;gBACtB,KAAK,CAAA;oBACH,IAAI,CAACC,4BAA4B,CAAC/C,KAAmB3C,EAAAA,SAAAA,CAAAA,CAAAA;AACrD,oBAAA,MAAA;gBACF,KAAK,CAAA;oBACH,IAAI,CAAC2F,+BAA+B,CAAChD,KAAsB3C,EAAAA,SAAAA,CAAAA,CAAAA;AAC3D,oBAAA,MAAA;gBACF,KAAK,CAAA;oBACH,IAAI,CAAC4F,6BAA6B,CAACjD,KAAoB3C,EAAAA,SAAAA,CAAAA,CAAAA;AACvD,oBAAA,MAAA;gBACF,KAAK,CAAA;oBACH,IAAI,CAAC6F,mCAAmC,CAAClD,KAA0B3C,EAAAA,SAAAA,CAAAA,CAAAA;AACnE,oBAAA,MAAA;gBACF,KAAK,CAAA;oBACH,IAAI,CAAC8F,+BAA+B,CAACnD,KAAsB3C,EAAAA,SAAAA,CAAAA,CAAAA;AAC3D,oBAAA,MAAA;AAGJ,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AAEA0F,IAAAA,MAAAA,CAAAA,4BAqBC,GArBDA,SAAAA,4BAA6B/C,CAAAA,KAAe,EAAE3C,SAAoB,EAAA;QAChE,IAAQsD,OAASX,KAATW,CAAAA,IAAAA,CAAAA;AAER,QAAA,IAAMhD,eAAkB,GAAA,IAAI,CAAC9C,eAAe,CAACQ,MAAM,CAAA;QAEnD,IAAM0F,kBAAAA,GAAqBjC,mBAAmBgB,gBAAgB,CAAA;QAC9D,IAAI,CAAC1B,kBAAkB,CAAC2C,kBAAAA,CAAAA,CAAAA;AACxB,QAAA,IAAI,CAAC/B,eAAe,CAACF,kBAAAA,CAAmBkC,mBAAmB,CAAA,CAAA;QAC3D,IAA+D,KAAA,GAAA,IAAI,EAAjD3C,UAA6C,KAAvDtD,CAAAA,QAAAA,EAAmBF,cAAiB6C,GAAmB,KAApC7C,CAAAA,eAAAA,CAAAA;AAC3BiE,QAAAA,kBAAAA,CAAmBmC,qBAAqB,CACtCN,IAAAA,CAAKO,CAAC,EACNP,KAAKQ,CAAC,EACNR,IAAKxC,CAAAA,CAAC,EACNT,cACAC,EAAAA,eAAAA,EACAU,OACA,EAAA,IAAI,CAACrD,aAAa,CAAA,CAAA;QAGpB,IAAI,CAACA,aAAa,IAAI+F,kBAAAA,CAAAA;QACtB,IAAI,CAAC5F,kBAAkB,CAACyC,IAAI,CAAC,IAAIC,gBAAAA,CAAiBR,WAAWM,eAAiB,EAAA,KAAA,CAAA,CAAA,CAAA;AAChF,KAAA,CAAA;AAEAqF,IAAAA,MAAAA,CAAAA,+BAoBC,GApBDA,SAAAA,+BAAgChD,CAAAA,KAAkB,EAAE3C,SAAoB,EAAA;QACtE,IAAQoB,SAAWuB,KAAXvB,CAAAA,MAAAA,CAAAA;AAER,QAAA,IAAMd,eAAkB,GAAA,IAAI,CAAC9C,eAAe,CAACQ,MAAM,CAAA;QAEnD,IAAM+H,kBAAAA,GAAqBtE,mBAAmBuE,gBAAgB,CAAA;QAC9D,IAAI,CAACjF,kBAAkB,CAACgF,kBAAAA,CAAAA,CAAAA;AACxB,QAAA,IAAI,CAACpE,eAAe,CAACF,kBAAAA,CAAmBwE,mBAAmB,CAAA,CAAA;QAC3D,IAA+D,KAAA,GAAA,IAAI,EAAjDjF,UAA6C,KAAvDtD,CAAAA,QAAAA,EAAmBF,cAAiB6C,GAAmB,KAApC7C,CAAAA,eAAAA,CAAAA;QAC3BiE,kBAAmByE,CAAAA,qBAAqB,CACtC9E,MAAAA,EACA,CACA,EAAA,IAAI7D,OACJ8C,EAAAA,EAAAA,cAAAA,EACAC,eACAU,EAAAA,OAAAA,EACA,IAAI,CAACrD,aAAa,CAAA,CAAA;QAEpB,IAAI,CAACA,aAAa,IAAIoI,kBAAAA,CAAAA;QACtB,IAAI,CAACjI,kBAAkB,CAACyC,IAAI,CAAC,IAAIC,gBAAAA,CAAiBR,WAAWM,eAAiB,EAAA,KAAA,CAAA,CAAA,CAAA;AAChF,KAAA,CAAA;AAEAsF,IAAAA,MAAAA,CAAAA,6BAoBC,GApBDA,SAAAA,6BAA8BjD,CAAAA,KAAgB,EAAE3C,SAAoB,EAAA;AAClE,QAAA,IAAQoB,SAA0BuB,KAA1BvB,CAAAA,MAAAA,EAAQpD,SAAkB2E,KAAlB3E,CAAAA,MAAAA,EAAQuD,QAAUoB,KAAVpB,CAAAA,KAAAA,CAAAA;AAExB,QAAA,IAAMjB,eAAkB,GAAA,IAAI,CAAC9C,eAAe,CAACQ,MAAM,CAAA;QAEnD,IAAMmI,mBAAAA,GAAsB1E,mBAAmB2E,iBAAiB,CAAA;QAChE,IAAI,CAACrF,kBAAkB,CAACoF,mBAAAA,CAAAA,CAAAA;AACxB,QAAA,IAAI,CAACxE,eAAe,CAACF,kBAAAA,CAAmB4E,oBAAoB,CAAA,CAAA;QAC5D,IAA+D,KAAA,GAAA,IAAI,EAAjDrF,UAA6C,KAAvDtD,CAAAA,QAAAA,EAAmBF,cAAiB6C,GAAmB,KAApC7C,CAAAA,eAAAA,CAAAA;QAC3BiE,kBAAmB6E,CAAAA,sBAAsB,CACvClF,MAAAA,EACApD,MACAuD,EAAAA,KAAAA,EACAlB,gBACAC,eACAU,EAAAA,OAAAA,EACA,IAAI,CAACrD,aAAa,CAAA,CAAA;QAEpB,IAAI,CAACA,aAAa,IAAIwI,mBAAAA,CAAAA;QACtB,IAAI,CAACrI,kBAAkB,CAACyC,IAAI,CAAC,IAAIC,gBAAAA,CAAiBR,WAAWM,eAAiB,EAAA,KAAA,CAAA,CAAA,CAAA;AAChF,KAAA,CAAA;AAEAuF,IAAAA,MAAAA,CAAAA,mCAmBC,GAnBDA,SAAAA,mCAAoClD,CAAAA,KAAsB,EAAE3C,SAAoB,EAAA;QAC9E,IAAQoB,SAAWuB,KAAXvB,CAAAA,MAAAA,CAAAA;AAER,QAAA,IAAMd,eAAkB,GAAA,IAAI,CAAC9C,eAAe,CAACQ,MAAM,CAAA;QAEnD,IAAMuI,sBAAAA,GAAyB9E,mBAAmB+E,oBAAoB,CAAA;QACtE,IAAI,CAACzF,kBAAkB,CAACwF,sBAAAA,CAAAA,CAAAA;AACxB,QAAA,IAAI,CAAC5E,eAAe,CAACF,kBAAAA,CAAmBgF,uBAAuB,CAAA,CAAA;QAC/D,IAA+D,KAAA,GAAA,IAAI,EAAjDzF,UAA6C,KAAvDtD,CAAAA,QAAAA,EAAmBF,cAAiB6C,GAAmB,KAApC7C,CAAAA,eAAAA,CAAAA;QAC3BiE,kBAAmBiF,CAAAA,yBAAyB,CAC1CtF,MACA,EAAA,CAAA,EACAf,gBACAC,eACAU,EAAAA,OAAAA,EACA,IAAI,CAACrD,aAAa,CAAA,CAAA;QAEpB,IAAI,CAACA,aAAa,IAAI4I,sBAAAA,CAAAA;QACtB,IAAI,CAACzI,kBAAkB,CAACyC,IAAI,CAAC,IAAIC,gBAAAA,CAAiBR,WAAWM,eAAiB,EAAA,KAAA,CAAA,CAAA,CAAA;AAChF,KAAA,CAAA;AAEAwF,IAAAA,MAAAA,CAAAA,+BAYC,GAZDA,SAAAA,+BAAgCnD,CAAAA,KAAkB,EAAE3C,SAAoB,EAAA;QACtE,IAAQoB,SAAWuB,KAAXvB,CAAAA,MAAAA,CAAAA;AAER,QAAA,IAAMd,eAAkB,GAAA,IAAI,CAAC9C,eAAe,CAACQ,MAAM,CAAA;QAEnD,IAAM+D,kBAAAA,GAAqBN,mBAAmBO,gBAAgB,CAAA;QAC9D,IAAI,CAACjB,kBAAkB,CAACgB,kBAAAA,CAAAA,CAAAA;AACxB,QAAA,IAAI,CAACJ,eAAe,CAACF,kBAAAA,CAAmBQ,mBAAmB,CAAA,CAAA;QAC3D,IAA+D,KAAA,GAAA,IAAI,EAAjDjB,UAA6C,KAAvDtD,CAAAA,QAAAA,EAAmBF,cAAiB6C,GAAmB,KAApC7C,CAAAA,eAAAA,CAAAA;QAC3BiE,kBAAmBS,CAAAA,qBAAqB,CAACd,MAAQf,EAAAA,cAAAA,EAAgBC,iBAAiBU,OAAS,EAAA,IAAI,CAACrD,aAAa,CAAA,CAAA;QAC7G,IAAI,CAACA,aAAa,IAAIoE,kBAAAA,CAAAA;QACtB,IAAI,CAACjE,kBAAkB,CAACyC,IAAI,CAAC,IAAIC,gBAAAA,CAAiBR,WAAWM,eAAiB,EAAA,KAAA,CAAA,CAAA,CAAA;AAChF,KAAA,CAAA;IAEA,MAASqG,CAAAA,OAsBR,GAtBD,SAASA,OAAAA,GAAAA;QACP,IAAMC,MAAAA,GAAS,IAAI,CAACA,MAAM,CAAA;QAC1B,IAAMC,IAAAA,GAAO,IAAIC,SAAUF,CAAAA,MAAAA,CAAAA,CAAAA;QAC3B,IAAMG,QAAAA,GAAW,IAAIC,kBAAmBJ,CAAAA,MAAAA,CAAAA,CAAAA;AACxC,QAAA,IAAMpE,WAAW,IAAI,CAACnE,MAAM,CAACqB,YAAY,CAACuH,YAAAA,CAAAA,CAAAA;AAC1CzE,QAAAA,QAAAA,CAAS0E,WAAW,GAAG,KAAA,CAAA;AACvB1E,QAAAA,QAAAA,CAAS2E,cAAc,GAAG,KAAA,CAAA;;AAE1B,QAAA,IAAMC,qBAAqBR,MAAOS,CAAAA,iBAAiB,CAACC,OAAO,CAACC,iBAAiBC,gBAAgB,CAAA,CAAA;QAE7FX,IAAKY,CAAAA,UAAU,CAAC,CAAG,EAAA,IAAI,CAAC9J,aAAa,EAAE+J,aAAaC,KAAK,CAAA,CAAA;AACzDnF,QAAAA,QAAAA,CAASqE,IAAI,GAAGA,IAAAA,CAAAA;AAChBrE,QAAAA,QAAAA,CAASoF,WAAW,CAACb,QAAAA,CAAAA,CAAAA;QAErB,IAAQc,SAAWhB,IAAXgB,CAAAA,MAAAA,CAAAA;AACRA,QAAAA,MAAAA,CAAOC,GAAG,CAAC5C,GAAG,CAAC,CAAC6C,MAAOC,CAAAA,SAAS,EAAE,CAACD,MAAOC,CAAAA,SAAS,EAAE,CAACD,OAAOC,SAAS,CAAA,CAAA;QACtEH,MAAOxD,CAAAA,GAAG,CAACa,GAAG,CAAC6C,MAAAA,CAAOC,SAAS,EAAED,MAAOC,CAAAA,SAAS,EAAED,MAAAA,CAAOC,SAAS,CAAA,CAAA;QACnE,IAAI,CAAC/J,KAAK,GAAG4I,IAAAA,CAAAA;QACb,IAAI,CAACoB,SAAS,GAAGlB,QAAAA,CAAAA;QACjB,IAAI,CAACmB,SAAS,GAAG1F,QAAAA,CAAAA;QACjB,IAAI,CAAC9E,QAAQ,GAAG0J,kBAAAA,GAAqB,IAAIe,WAAY,CAAA,GAAA,CAAA,GAAO,IAAIC,WAAY,CAAA,GAAA,CAAA,CAAA;QAC5E,IAAI,CAACC,mBAAmB,GAAGjB,kBAAAA,CAAAA;AAC7B,KAAA,CAAA;IAEA,MAASkB,CAAAA,QAER,GAFD,SAASA,QAAAA,GAAAA;AACP,QAAA,IAAI,CAACJ,SAAS,CAAC1C,OAAO,GAAG,IAAA,CAAA;AAC3B,KAAA,CAAA;IAEA,MAAS+C,CAAAA,SAER,GAFD,SAASA,SAAAA,GAAAA;AACP,QAAA,IAAI,CAACL,SAAS,CAAC1C,OAAO,GAAG,KAAA,CAAA;AAC3B,KAAA,CAAA;AAEA,IAAA,MAAA,CAASgD,YAiFR,GAjFD,SAASA,YAAAA,CAAaC,SAAiB,EAAA;QACrC,IAOI,KAAA,GAAA,IAAI,EANNxK,IAAO4I,GAML,MANF5I,KACAT,EAAiB6C,cAKf,GAAA,KAAA,CALF7C,eACAC,EAAkBiL,kBAIhB,KAJFjL,CAAAA,gBAAAA,EACAK,iBAAoB6K,GAGlB,KAHF7K,CAAAA,kBAAAA,EACAD,kBAAqB+K,GAEnB,KAFF/K,CAAAA,mBAAAA,EACAH,OAAUsD,GACR,KADFtD,CAAAA,QAAAA,CAAAA;;QAIF,IAAMmL,mBAAAA,GAAsBxI,eAAerC,MAAM,CAAA;AACjD0K,QAAAA,eAAAA,CAAgB1K,MAAM,GAAG6K,mBAAAA,CAAAA;AACzB,QAAA,IAAIC,aAAgB,GAAA,CAAA,CAAA;AACpB,QAAA,IAAIC,UAAa,GAAA,KAAA,CAAA;QACjB,IAAK,IAAIpK,IAAI,CAAGC,EAAAA,CAAAA,GAAI+J,kBAAkB3K,MAAM,EAAEW,CAAIC,GAAAA,CAAAA,EAAGD,CAAK,EAAA,CAAA;YACxD,IAAMqK,gBAAAA,GAAmBL,iBAAiB,CAAChK,CAAE,CAAA,CAAA;YAC7C,IAAMsK,UAAAA,GAAaD,iBAAiBE,eAAe,CAAA;YACnD,IAAMC,QAAAA,GAAWxK,CAAIC,GAAAA,CAAAA,GAAI,CAAI+J,GAAAA,iBAAiB,CAAChK,CAAI,GAAA,CAAA,CAAE,CAACuK,eAAe,GAAGL,mBAAAA,CAAAA;AACxE,YAAA,IAAIG,gBAAiBI,CAAAA,UAAU,CAACC,IAAI,EAAE;gBACpC,IAAMrJ,SAAAA,GAAYgJ,iBAAiBhJ,SAAS,CAAA;gBAC5C,IAAMsJ,WAAAA,GAAcjM,gBAxkBfA,CAwkBgCkM,WAAW,CAAA;gBAChD,IAAIP,gBAAAA,CAAiBQ,cAAc,EAAE;AACnCC,oBAAAA,MAAAA,CAAOC,mBAAmB,CAAC1J,SAAAA,CAAU2J,uBAAuB,EAAE3J,SAAAA,CAAU4J,aAAa,EAAEN,WAAAA,CAAAA,CAAAA;iBAClF,MAAA;oBACLA,WAAY1I,CAAAA,QAAQ,CAACZ,SAAAA,CAAUsJ,WAAW,CAAA,CAAA;AAC5C,iBAAA;AAEA,gBAAA,IAAK,IAAIO,CAAAA,GAAIZ,UAAYY,EAAAA,CAAAA,GAAIV,UAAUU,CAAK,EAAA,CAAA;oBAC1C,IAAMC,aAAAA,GAAgBzJ,cAAc,CAACyI,aAAc,CAAA,CAAA;AACnD,oBAAA,IAAMiB,cAAiB1M,GAjlBpBA,gBAilBqC2M,CAAAA,oBAAoB,CAAClB,aAAAA,CAAAA,CAAAA;oBAC7DvL,OAAQsD,CAAAA,mBAAmB,CAACiJ,aAAAA,EAAeR,WAAaS,EAAAA,cAAAA,CAAAA,CAAAA;oBACxDrB,eAAe,CAACI,cAAc,GAAGiB,cAAAA,CAAAA;AACjCjB,oBAAAA,aAAAA,EAAAA,CAAAA;AACF,iBAAA;gBACAE,gBAAiBI,CAAAA,UAAU,CAACC,IAAI,GAAG,KAAA,CAAA;gBACnCN,UAAa,GAAA,IAAA,CAAA;aACR,MAAA;AACLD,gBAAAA,aAAAA,IAAiBK,QAAWF,GAAAA,UAAAA,CAAAA;AAC9B,aAAA;AACF,SAAA;;AAGA,QAAA,IAAI,CAAClI,kBAAkB,CAAC,IAAI,CAACnD,mBAAmB,CAAA,CAAA;QAChD,IAAIqM,YAAAA,GAAe,IAAI,CAACtM,aAAa,CAAA;AACrC,QAAA,IAAK,IAAIgB,EAAI,GAAA,CAAA,EAAGA,KAAIiK,kBAAmB5K,CAAAA,MAAM,EAAEW,EAAK,EAAA,CAAA;YAClD,IAAM6D,QAAAA,GAAWoG,kBAAkB,CAACjK,EAAE,CAAA,CAAA;YACtC,IAAMkJ,MAAAA,GAASrF,SAASqF,MAAM,CAAA;YAC9B,IAAM1D,UAAAA,GAAa9G,gBAnmBZA,CAmmB6BkG,WAAW,CAAA;AAC/CsE,YAAAA,MAAAA,CAAOqC,SAAS,CAAC/F,UAAAA,CAAAA,CAAAA;YAEjB,IAAM7D,eAAAA,GAAkBoI,gBAAgB1K,MAAM,CAAA;AAC9CyD,YAAAA,kBAAAA,CAAmBmC,qBAAqB,CACtCO,UAAAA,CAAWN,CAAC,GAAG,GACfM,UAAWL,CAAAA,CAAC,GAAG,CAAA,EACfK,WAAWrD,CAAC,GAAG,CACf4H,EAAAA,eAAAA,EACApI,iBACAU,OACAiJ,EAAAA,YAAAA,CAAAA,CAAAA;AAEFpC,YAAAA,MAAAA,CAAOsC,SAAS,CAAChG,UAAAA,CAAAA,CAAAA;AACjB,YAAA,IAAK,IAAIxF,EAAI2B,GAAAA,eAAAA,EAAiB3B,KAAI+J,eAAgB1K,CAAAA,MAAM,EAAEW,EAAK,EAAA,CAAA;gBAC7D,IAAMyE,QAAAA,GAAWsF,eAAe,CAAC/J,EAAE,CAAA,CAAA;AACnCyE,gBAAAA,QAAAA,CAASgH,GAAG,CAACjG,UAAAA,CAAAA,CAAAA;AACf,aAAA;AACA8F,YAAAA,YAAAA,IAAgBxI,mBAAmBgB,gBAAgB,CAAA;AACrD,SAAA;AAEA,QAAA,IAAImG,kBAAmB5K,CAAAA,MAAM,GAAG,CAAA,IAAK+K,UAAY,EAAA;AAC/ClC,YAAAA,IAAAA,CAAKwD,YAAY,CAAC3B,eAAAA,CAAAA,CAAAA;AAClB7B,YAAAA,IAAAA,CAAKyD,UAAU,CAAC,IAAI,CAAC5M,QAAQ,CAAA,CAAA;AAC7BmJ,YAAAA,IAAAA,CAAK0D,UAAU,CAAC,KAAA,CAAA,CAAA;YAChB1D,IAAK3I,CAAAA,OAAO,CAACC,KAAK,GAAG8L,YAAAA,CAAAA;AACvB,SAAA;AAEA,QAAA,IAAIA,iBAAiB,CAAG,EAAA;AACtB,YAAA,IAAI,CAAC/B,SAAS,CAACN,WAAW,CAAC,IAAA,CAAA,CAAA;SACtB,MAAA;AACL,YAAA,IAAI,CAACM,SAAS,CAACN,WAAW,CAAC,IAAI,CAACK,SAAS,CAAA,CAAA;AAC3C,SAAA;AACF,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQlH,kBAaP,GAbD,SAAQA,kBAAAA,CAAmB/C,MAAc,EAAA;QACvC,IAAMgD,OAAAA,GAAU,IAAI,CAACtD,QAAQ,CAAA;AAC7B,QAAA,IAAM8M,YAAe,GAAA,IAAI,CAAC7M,aAAa,GAAGK,MAAAA,CAAAA;QAC1C,IAAIwM,YAAAA,GAAexJ,OAAQhD,CAAAA,MAAM,EAAE;AACjC,YAAA,IAAMyM,SAAY,GAAA,IAAI,CAACpC,mBAAmB,GAAG,UAAa,GAAA,KAAA,CAAA;AAC1D,YAAA,IAAImC,eAAeC,SAAW,EAAA;AAC5B,gBAAA,MAAMC,KAAM,CAAA,iCAAA,CAAA,CAAA;AACd,aAAA;YAEA,IAAMC,UAAAA,GAAa,IAAI,CAACtC,mBAAmB,GAAG,IAAIF,WAAAA,CAAYqC,YAAgB,CAAA,GAAA,IAAIpC,WAAYoC,CAAAA,YAAAA,CAAAA,CAAAA;AAC9FG,YAAAA,UAAAA,CAAWzF,GAAG,CAAClE,OAAAA,CAAAA,CAAAA;YACf,IAAI,CAACtD,QAAQ,GAAGiN,UAAAA,CAAAA;AAClB,SAAA;AACF,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQhJ,eAKP,GALD,SAAQA,eAAAA,CAAgB3D,MAAc,EAAA;QACpC,IAAMoF,QAAAA,GAAW,IAAI,CAAC5F,eAAe,CAAA;AACrC,QAAA,IAAK,IAAImB,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAIX,QAAQW,CAAK,EAAA,CAAA;YAC/ByE,QAAS7C,CAAAA,IAAI,CAAC,IAAIhD,OAAAA,EAAAA,CAAAA,CAAAA;AACpB,SAAA;AACF,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQ6G,eAMP,GAND,SAAQA,eAAgB9D,CAAAA,eAAuB,EAAEsK,MAAe,EAAA;QAC9D,IAAMvK,cAAAA,GAAiB,IAAI,CAAC7C,eAAe,CAAA;AAC3C,QAAA,IAAK,IAAImB,CAAI2B,GAAAA,eAAAA,EAAiB3B,IAAI0B,cAAerC,CAAAA,MAAM,EAAEW,CAAK,EAAA,CAAA;YAC5D,IAAMyE,QAAAA,GAAW/C,cAAc,CAAC1B,CAAE,CAAA,CAAA;AAClCyE,YAAAA,QAAAA,CAASgH,GAAG,CAACQ,MAAAA,CAAAA,CAAAA;AACf,SAAA;AACF,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQ3G,cAMP,GAND,SAAQA,cAAe3D,CAAAA,eAAuB,EAAE+C,QAAoB,EAAA;QAClE,IAAMhD,cAAAA,GAAiB,IAAI,CAAC7C,eAAe,CAAA;AAC3C,QAAA,IAAK,IAAImB,CAAI2B,GAAAA,eAAAA,EAAiB3B,IAAI0B,cAAerC,CAAAA,MAAM,EAAEW,CAAK,EAAA,CAAA;YAC5D,IAAMyE,QAAAA,GAAW/C,cAAc,CAAC1B,CAAE,CAAA,CAAA;YAClCpB,OAAQsN,CAAAA,eAAe,CAACzH,QAAAA,EAAUC,QAAUD,EAAAA,QAAAA,CAAAA,CAAAA;AAC9C,SAAA;AACF,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQtB,cASP,GATD,SAAQA,cAAAA,CAAexB,eAAuB,EAAA;QAC5C,IAAMD,cAAAA,GAAiB,IAAI,CAAC7C,eAAe,CAAA;AAC3C,QAAA,IAAK,IAAImB,CAAI2B,GAAAA,eAAAA,EAAiB3B,IAAI0B,cAAerC,CAAAA,MAAM,EAAEW,CAAK,EAAA,CAAA;YAC5D,IAAMyE,QAAAA,GAAW/C,cAAc,CAAC1B,CAAE,CAAA,CAAA;YAClC,IAAMmM,EAAAA,GAAK1H,SAASU,CAAC,CAAA;YACrB,IAAMiH,EAAAA,GAAK3H,SAAStC,CAAC,CAAA;AACrBsC,YAAAA,QAAAA,CAAStC,CAAC,GAAGgK,EAAAA,CAAAA;YACb1H,QAASU,CAAAA,CAAC,GAAG,CAACiH,EAAAA,CAAAA;AAChB,SAAA;AACF,KAAA,CAAA;AArrBW1N,IAAAA,gBAAAA,CAqCI2M,oBAUd,GAVD,SAAeA,oBAAAA,CAAqBlB,aAAqB,EAAA;QACvD,IAAI1F,QAAAA,CAAAA;QACJ,IAAM4H,YAAAA,GAAe3N,gBAvCZA,CAuC6B4N,aAAa,CAAA;QACnD,IAAInC,aAAAA,GAAgBkC,YAAahN,CAAAA,MAAM,EAAE;YACvCoF,QAAW4H,GAAAA,YAAY,CAAClC,aAAc,CAAA,CAAA;SACjC,MAAA;AACL1F,YAAAA,QAAAA,GAAW,IAAI7F,OAAAA,EAAAA,CAAAA;YA3CRF,gBA4CU4N,CAAAA,aAAa,CAAC1K,IAAI,CAAC6C,QAAAA,CAAAA,CAAAA;AACtC,SAAA;QACA,OAAOA,QAAAA,CAAAA;AACT,KAAA,CAAA;AA/CW/F,IAAAA,aAAAA,CAAAA,gBAAAA,EAAAA;;YAoDP6N,GAAAA,EAAAA,WAAAA;;;MAAJ,SAAA,GAAA,GAAA;AACE,gBAAA,OAAO,IAAI,CAACjD,SAAS,CAACiD,SAAS,CAAA;AACjC,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAcC,KAAY,EAAA;AACxB,gBAAA,IAAI,CAAClD,SAAS,CAACiD,SAAS,GAAGC,KAAAA,CAAAA;AAC7B,aAAA;;;AA1DW9N,IAAAA,OAAAA,gBAAAA,CAAAA;EAAyB+N,MAsrBrC,EAAA;AAtrBY/N,gBAAAA,CACI4N,gBAA2B,EAAE,CAAA;AADjC5N,gBAAAA,CAEIqD,YAA0B,GAAA;AACvC,IAAA,IAAInD,OAAQ,CAAA,CAAC,CAAG,EAAA,CAAA,EAAG,CAAC,CAAA,CAAA;IACpB,IAAIA,OAAAA,CAAQ,CAAG,EAAA,CAAA,EAAG,CAAC,CAAA,CAAA;AACnB,IAAA,IAAIA,OAAQ,CAAA,CAAA,EAAG,CAAC,CAAA,EAAG,CAAC,CAAA,CAAA;AACpB,IAAA,IAAIA,OAAQ,CAAA,CAAC,CAAG,EAAA,CAAC,GAAG,CAAC,CAAA,CAAA;AACtB,CAAA,CAAA;AAPUF,gBAAAA,CAQIkM,cAAsB,IAAIE,MAAAA,EAAAA,CAAAA;AAR9BpM,gBAAAA,CASIkG,cAAuB,IAAIhG,OAAAA,EAAAA,CAAAA;AAT/BF,gBAAAA,CAUImG,gBAA4B,IAAIO,UAAAA,EAAAA,CAAAA;AAVpC1G,gBAAAA,CAWImH,YAAwB,IAAIT,UAAAA,EAAAA,CAAAA;AAXhC1G,gBAAAA,CAYaqH,SAAoB,GAAA,gBAAA,CAAA;AAZjCrH,gBAAAA,GAAAA,UAAAA,CAAAA;IADZgO,mBAAoBpE,CAAAA,YAAAA,EAAcqE,cAAcC,SAAS,CAAA;AAC7ClO,CAAAA,EAAAA,gBAAAA,CAAAA,CAAAA;AAwrBb;;;AAGC,IACD,IAAMmD,gBAAN,GAAA,SAAMA,gBAGQ,CAAOR,SAAoB,EAAE,eAA8B,EAASwJ,cAA8B,EAAA;AAArC,IAAA,IAAOA,2BAAAA,cAA0B,GAAA,IAAA,CAAA;SAAvFxJ,SAAAA,GAAAA,SAAAA,CAAAA;SAA6BkJ,eAAAA,GAAAA,eAAAA,CAAAA;SAAgCM,cAAAA,GAAAA,cAAAA,CAAAA;AAC9E,IAAA,IAAI,CAACJ,UAAU,GAAGpJ,SAAAA,CAAUwL,uBAAuB,EAAA,CAAA;;;;;","x_google_ignoreList":[0]}