{"version":3,"file":"WireframePrimitive-80c67e9d.js","sources":["../../../../node_modules/.pnpm/@swc+helpers@0.5.7/node_modules/@swc/helpers/esm/_create_class.js","../../src/WireframePrimitive.ts"],"sourcesContent":["function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { MathUtil, Vector3 } from \"@galacean/engine\";\n\n/**\n * Wireframe primitive.\n */\nexport class WireframePrimitive {\n  static _shift = new Vector3();\n\n  /** global settings for vertex count */\n  static circleVertexCount = 40;\n\n  /**\n   * Get cuboid wire frame index count.\n   */\n  static get cuboidIndexCount(): number {\n    return 48;\n  }\n\n  /**\n   * Get cuboid wire frame position count.\n   */\n  static get cuboidPositionCount(): number {\n    return 24;\n  }\n\n  /**\n   * Get sphere wire frame index count.\n   */\n  static get sphereIndexCount(): number {\n    return WireframePrimitive.circleIndexCount * 3;\n  }\n\n  /**\n   * Get sphere wire frame position count.\n   */\n  static get spherePositionCount(): number {\n    return WireframePrimitive.circlePositionCount * 3;\n  }\n\n  /**\n   * Get cone wire frame index count.\n   */\n  static get coneIndexCount(): number {\n    return WireframePrimitive.circleIndexCount + 8;\n  }\n\n  /**\n   * Get cone wire frame position count.\n   */\n  static get conePositionCount(): number {\n    return WireframePrimitive.circlePositionCount + 5;\n  }\n\n  /**\n   * Get unbound cylinder wire frame index count.\n   */\n  static get unboundCylinderIndexCount(): number {\n    return WireframePrimitive.circleIndexCount + 16;\n  }\n\n  /**\n   * Get unbound cylinder wire frame position count.\n   */\n  static get unboundCylinderPositionCount(): number {\n    return WireframePrimitive.circlePositionCount + 16;\n  }\n\n  /**\n   * Get capsule wire frame index count.\n   */\n  static get capsuleIndexCount(): number {\n    return (WireframePrimitive.circleIndexCount + WireframePrimitive.ellipticIndexCount) * 2;\n  }\n\n  /**\n   * Get capsule wire frame position count.\n   */\n  static get capsulePositionCount(): number {\n    return (WireframePrimitive.circlePositionCount + WireframePrimitive.ellipticPositionCount) * 2;\n  }\n\n  /**\n   * Get circle wire frame index count.\n   */\n  static get circleIndexCount(): number {\n    return WireframePrimitive.circleVertexCount * 2;\n  }\n\n  /**\n   * Get circle wire frame position count.\n   */\n  static get circlePositionCount(): number {\n    return WireframePrimitive.circleVertexCount;\n  }\n\n  /**\n   * Get elliptic wire frame index count.\n   */\n  static get ellipticIndexCount(): number {\n    return WireframePrimitive.circleVertexCount * 2;\n  }\n\n  /**\n   * Get elliptic wire frame position count.\n   */\n  static get ellipticPositionCount(): number {\n    return WireframePrimitive.circleVertexCount;\n  }\n\n  /**\n   * Get frustum wire frame index count.\n   */\n  static get frustumIndexCount(): number {\n    return WireframePrimitive.circleIndexCount * 2 + 10;\n  }\n\n  /**\n   * Get frustum wire frame position count.\n   */\n  static get frustumPositionCount(): number {\n    return WireframePrimitive.circleVertexCount * 2 + 10;\n  }\n\n  /**\n   * Get hemisphere wire frame index count.\n   */\n  static get hemisphereIndexCount(): number {\n    return WireframePrimitive.circleVertexCount * 2 + WireframePrimitive.circleIndexCount;\n  }\n\n  /**\n   * Get hemisphere wire frame position count.\n   */\n  static get hemispherePositionCount(): number {\n    return WireframePrimitive.circleVertexCount + 2 + WireframePrimitive.circlePositionCount;\n  }\n\n  /**\n   * Store cuboid wireframe mesh data.\n   * The origin located in center of cuboid.\n   * @param width - Cuboid width\n   * @param height - Cuboid height\n   * @param depth - Cuboid depth\n   * @param positions - position array\n   * @param positionOffset - The min of index list\n   * @param indices - index array\n   * @param indicesOffset - index array offset\n   */\n  static createCuboidWireframe(\n    width: number,\n    height: number,\n    depth: number,\n    positions: Vector3[],\n    positionOffset: number,\n    indices: Uint16Array | Uint32Array,\n    indicesOffset: number\n  ): void {\n    const halfWidth: number = width / 2;\n    const halfHeight: number = height / 2;\n    const halfDepth: number = depth / 2;\n    let offset = positionOffset;\n    // Up\n    positions[offset++].set(-halfWidth, halfHeight, -halfDepth);\n    positions[offset++].set(halfWidth, halfHeight, -halfDepth);\n    positions[offset++].set(halfWidth, halfHeight, halfDepth);\n    positions[offset++].set(-halfWidth, halfHeight, halfDepth);\n\n    // Down\n    positions[offset++].set(-halfWidth, -halfHeight, -halfDepth);\n    positions[offset++].set(halfWidth, -halfHeight, -halfDepth);\n    positions[offset++].set(halfWidth, -halfHeight, halfDepth);\n    positions[offset++].set(-halfWidth, -halfHeight, halfDepth);\n\n    // Left\n    positions[offset++].set(-halfWidth, halfHeight, -halfDepth);\n    positions[offset++].set(-halfWidth, halfHeight, halfDepth);\n    positions[offset++].set(-halfWidth, -halfHeight, halfDepth);\n    positions[offset++].set(-halfWidth, -halfHeight, -halfDepth);\n\n    // Right\n    positions[offset++].set(halfWidth, halfHeight, -halfDepth);\n    positions[offset++].set(halfWidth, halfHeight, halfDepth);\n    positions[offset++].set(halfWidth, -halfHeight, halfDepth);\n    positions[offset++].set(halfWidth, -halfHeight, -halfDepth);\n\n    // Front\n    positions[offset++].set(-halfWidth, halfHeight, halfDepth);\n    positions[offset++].set(halfWidth, halfHeight, halfDepth);\n    positions[offset++].set(halfWidth, -halfHeight, halfDepth);\n    positions[offset++].set(-halfWidth, -halfHeight, halfDepth);\n\n    // Back\n    positions[offset++].set(-halfWidth, halfHeight, -halfDepth);\n    positions[offset++].set(halfWidth, halfHeight, -halfDepth);\n    positions[offset++].set(halfWidth, -halfHeight, -halfDepth);\n    positions[offset++].set(-halfWidth, -halfHeight, -halfDepth);\n\n    // Up\n    indices[indicesOffset++] = positionOffset;\n    indices[indicesOffset++] = positionOffset + 1;\n    indices[indicesOffset++] = positionOffset + 1;\n    indices[indicesOffset++] = positionOffset + 2;\n    indices[indicesOffset++] = positionOffset + 2;\n    indices[indicesOffset++] = positionOffset + 3;\n    indices[indicesOffset++] = positionOffset + 3;\n    indices[indicesOffset++] = positionOffset;\n\n    // Down\n    indices[indicesOffset++] = positionOffset + 4;\n    indices[indicesOffset++] = positionOffset + 5;\n    indices[indicesOffset++] = positionOffset + 5;\n    indices[indicesOffset++] = positionOffset + 6;\n    indices[indicesOffset++] = positionOffset + 6;\n    indices[indicesOffset++] = positionOffset + 7;\n    indices[indicesOffset++] = positionOffset + 7;\n    indices[indicesOffset++] = positionOffset + 4;\n\n    // Left\n    indices[indicesOffset++] = positionOffset + 8;\n    indices[indicesOffset++] = positionOffset + 9;\n    indices[indicesOffset++] = positionOffset + 9;\n    indices[indicesOffset++] = positionOffset + 10;\n    indices[indicesOffset++] = positionOffset + 10;\n    indices[indicesOffset++] = positionOffset + 11;\n    indices[indicesOffset++] = positionOffset + 11;\n    indices[indicesOffset++] = positionOffset + 8;\n\n    // Right\n    indices[indicesOffset++] = positionOffset + 12;\n    indices[indicesOffset++] = positionOffset + 13;\n    indices[indicesOffset++] = positionOffset + 13;\n    indices[indicesOffset++] = positionOffset + 14;\n    indices[indicesOffset++] = positionOffset + 14;\n    indices[indicesOffset++] = positionOffset + 15;\n    indices[indicesOffset++] = positionOffset + 15;\n    indices[indicesOffset++] = positionOffset + 12;\n\n    // Front\n    indices[indicesOffset++] = positionOffset + 16;\n    indices[indicesOffset++] = positionOffset + 17;\n    indices[indicesOffset++] = positionOffset + 17;\n    indices[indicesOffset++] = positionOffset + 18;\n    indices[indicesOffset++] = positionOffset + 18;\n    indices[indicesOffset++] = positionOffset + 19;\n    indices[indicesOffset++] = positionOffset + 19;\n    indices[indicesOffset++] = positionOffset + 16;\n\n    // Back\n    indices[indicesOffset++] = positionOffset + 20;\n    indices[indicesOffset++] = positionOffset + 21;\n    indices[indicesOffset++] = positionOffset + 21;\n    indices[indicesOffset++] = positionOffset + 22;\n    indices[indicesOffset++] = positionOffset + 22;\n    indices[indicesOffset++] = positionOffset + 23;\n    indices[indicesOffset++] = positionOffset + 23;\n    indices[indicesOffset++] = positionOffset + 20;\n  }\n\n  /**\n   * Store sphere wireframe mesh data.\n   * The origin located in center of sphere.\n   * @param radius - Sphere radius\n   * @param positions - position array\n   * @param positionOffset - The min of index list\n   * @param indices - index array\n   * @param indicesOffset - index array offset\n   */\n  static createSphereWireframe(\n    radius: number,\n    positions: Vector3[],\n    positionOffset: number,\n    indices: Uint16Array | Uint32Array,\n    indicesOffset: number\n  ): void {\n    WireframePrimitive._shift.set(0, 0, 0);\n    // X\n    WireframePrimitive.createCircleWireframe(\n      radius,\n      0,\n      WireframePrimitive._shift,\n      positions,\n      positionOffset,\n      indices,\n      indicesOffset\n    );\n\n    // Y\n    WireframePrimitive.createCircleWireframe(\n      radius,\n      1,\n      WireframePrimitive._shift,\n      positions,\n      positionOffset + WireframePrimitive.circleVertexCount,\n      indices,\n      indicesOffset + WireframePrimitive.circleIndexCount\n    );\n\n    // Z\n    WireframePrimitive.createCircleWireframe(\n      radius,\n      2,\n      WireframePrimitive._shift,\n      positions,\n      positionOffset + WireframePrimitive.circleVertexCount * 2,\n      indices,\n      indicesOffset + WireframePrimitive.circleIndexCount * 2\n    );\n  }\n\n  /**\n   * Store cone wireframe mesh data.\n   * The origin located in top of cone.\n   * @param radius - The radius of cap\n   * @param height - The height of cone\n   * @param positions - position array\n   * @param positionOffset - The min of index list\n   * @param indices - index array\n   * @param indicesOffset - index array offset\n   */\n  static createConeWireframe(\n    radius: number,\n    height: number,\n    positions: Vector3[],\n    positionOffset: number,\n    indices: Uint16Array | Uint32Array,\n    indicesOffset: number\n  ): void {\n    WireframePrimitive._shift.set(0, -height, 0);\n\n    // Y\n    WireframePrimitive.createCircleWireframe(\n      radius,\n      1,\n      WireframePrimitive._shift,\n      positions,\n      positionOffset,\n      indices,\n      indicesOffset\n    );\n    const indexBegin = positionOffset + WireframePrimitive.circleVertexCount;\n    let offset = indexBegin;\n    positions[offset++].set(0, 0, 0);\n    positions[offset++].set(-radius, -height, 0);\n    positions[offset++].set(radius, -height, 0);\n    positions[offset++].set(0, -height, radius);\n    positions[offset++].set(0, -height, -radius);\n    indicesOffset += WireframePrimitive.circleIndexCount;\n    indices[indicesOffset++] = indexBegin;\n    indices[indicesOffset++] = indexBegin + 1;\n    indices[indicesOffset++] = indexBegin;\n    indices[indicesOffset++] = indexBegin + 2;\n    indices[indicesOffset++] = indexBegin;\n    indices[indicesOffset++] = indexBegin + 3;\n    indices[indicesOffset++] = indexBegin;\n    indices[indicesOffset++] = indexBegin + 4;\n  }\n\n  /**\n   * Store unbound cylinder wireframe mesh data.\n   * The origin located in center of sphere.\n   * @param radius - The radius\n   * @param positions - position array\n   * @param positionOffset - The min of index list\n   * @param indices - index array\n   * @param indicesOffset - index array offset\n   */\n  static createUnboundCylinderWireframe(\n    radius: number,\n    positions: Vector3[],\n    positionOffset: number,\n    indices: Uint16Array | Uint32Array,\n    indicesOffset: number\n  ): void {\n    const height = 5;\n    WireframePrimitive._shift.set(0, 0, 0);\n\n    // Y\n    WireframePrimitive.createCircleWireframe(\n      radius,\n      1,\n      WireframePrimitive._shift,\n      positions,\n      positionOffset,\n      indices,\n      indicesOffset\n    );\n\n    const indexBegin = positionOffset + WireframePrimitive.circleVertexCount;\n    let offset = indexBegin;\n    indicesOffset += WireframePrimitive.circleIndexCount;\n    for (let i = 0; i < 8; i++) {\n      const radian = MathUtil.degreeToRadian(45 * i);\n      positions[offset++].set(radius * Math.cos(radian), 0, radius * Math.sin(radian));\n      positions[offset++].set(radius * Math.cos(radian), -height, radius * Math.sin(radian));\n\n      indices[indicesOffset + i * 2] = indexBegin + 2 * i;\n      indices[indicesOffset + i * 2 + 1] = indexBegin + 2 * i + 1;\n    }\n  }\n\n  /**\n   * Store capsule wireframe mesh data.\n   * The origin located in center of capsule.\n   * @param radius - The radius of the two hemispherical ends\n   * @param height - The height of the cylindrical part, measured between the centers of the hemispherical ends\n   * @param positions - position array\n   * @param positionOffset - The min of index list\n   * @param indices - index array\n   * @param indicesOffset - index array offset\n   */\n  static createCapsuleWireframe(\n    radius: number,\n    height: number,\n    positions: Vector3[],\n    positionOffset: number,\n    indices: Uint16Array | Uint32Array,\n    indicesOffset: number\n  ): void {\n    const circleIndicesCount = WireframePrimitive.circleIndexCount;\n    const vertexCount = WireframePrimitive.circleVertexCount;\n    const halfHeight = height / 2;\n\n    // Y-Top\n    WireframePrimitive._shift.set(0, halfHeight, 0);\n    WireframePrimitive.createCircleWireframe(\n      radius,\n      1,\n      WireframePrimitive._shift,\n      positions,\n      positionOffset,\n      indices,\n      indicesOffset\n    );\n\n    // Y-Bottom\n    WireframePrimitive._shift.set(0, -halfHeight, 0);\n    WireframePrimitive.createCircleWireframe(\n      radius,\n      1,\n      WireframePrimitive._shift,\n      positions,\n      positionOffset + vertexCount,\n      indices,\n      indicesOffset + circleIndicesCount\n    );\n\n    // X-Elliptic\n    WireframePrimitive.createEllipticWireframe(\n      radius,\n      halfHeight,\n      2,\n      positions,\n      positionOffset + vertexCount * 2,\n      indices,\n      indicesOffset + circleIndicesCount * 2\n    );\n\n    // Z-Elliptic\n    WireframePrimitive.createEllipticWireframe(\n      radius,\n      halfHeight,\n      0,\n      positions,\n      positionOffset + vertexCount * 3,\n      indices,\n      indicesOffset + circleIndicesCount * 2 + WireframePrimitive.ellipticIndexCount\n    );\n  }\n\n  /**\n   * Store circle wireframe mesh data.\n   * @param radius - The radius\n   * @param axis - The default direction\n   * @param shift - The default shift\n   * @param positions - position array\n   * @param positionOffset - The min of index list\n   * @param indices - index array\n   * @param indicesOffset - index array offset\n   */\n  static createCircleWireframe(\n    radius: number,\n    axis: number,\n    shift: Vector3,\n    positions: Vector3[],\n    positionOffset: number,\n    indices: Uint16Array | Uint32Array,\n    indicesOffset: number\n  ): void {\n    const vertexCount = WireframePrimitive.circleVertexCount;\n\n    const twoPi = Math.PI * 2;\n    const countReciprocal = 1.0 / vertexCount;\n    let offset = positionOffset;\n    for (let i = 0; i < vertexCount; ++i) {\n      const v = i * countReciprocal;\n      const thetaDelta = v * twoPi;\n\n      switch (axis) {\n        case 0:\n          positions[offset++].set(\n            shift.x,\n            radius * Math.cos(thetaDelta) + shift.y,\n            radius * Math.sin(thetaDelta) + shift.z\n          );\n          break;\n        case 1:\n          positions[offset++].set(\n            radius * Math.cos(thetaDelta) + shift.x,\n            shift.y,\n            radius * Math.sin(thetaDelta) + shift.z\n          );\n          break;\n        case 2:\n          positions[offset++].set(\n            radius * Math.cos(thetaDelta) + shift.x,\n            radius * Math.sin(thetaDelta) + shift.y,\n            shift.z\n          );\n          break;\n      }\n\n      const globalIndex = i + positionOffset;\n      if (i < vertexCount - 1) {\n        indices[indicesOffset + 2 * i] = globalIndex;\n        indices[indicesOffset + 2 * i + 1] = globalIndex + 1;\n      } else {\n        indices[indicesOffset + 2 * i] = globalIndex;\n        indices[indicesOffset + 2 * i + 1] = positionOffset;\n      }\n    }\n  }\n\n  /**\n   * Store elliptic wireframe mesh data.\n   * @param radius - The radius of the two hemispherical ends\n   * @param height - The height of the cylindrical part, measured between the centers of the hemispherical ends\n   * @param axis - The default direction\n   * @param positions - position array\n   * @param positionOffset - The min of index list\n   * @param indices - index array\n   * @param indicesOffset - index array offset\n   */\n  static createEllipticWireframe(\n    radius: number,\n    height: number,\n    axis: number,\n    positions: Vector3[],\n    positionOffset: number,\n    indices: Uint16Array | Uint32Array,\n    indicesOffset: number\n  ): void {\n    const vertexCount = WireframePrimitive.circleVertexCount;\n    const twoPi = Math.PI * 2;\n    const countReciprocal = 1.0 / vertexCount;\n    let offset = positionOffset;\n    for (let i = 0; i < vertexCount; ++i) {\n      const v = i * countReciprocal;\n      const thetaDelta = v * twoPi;\n\n      switch (axis) {\n        case 0:\n          positions[offset++].set(0, radius * Math.sin(thetaDelta) + height, radius * Math.cos(thetaDelta));\n          break;\n        case 1:\n          positions[offset++].set(radius * Math.cos(thetaDelta), height, radius * Math.sin(thetaDelta));\n          break;\n        case 2:\n          positions[offset++].set(radius * Math.cos(thetaDelta), radius * Math.sin(thetaDelta) + height, 0);\n          break;\n      }\n\n      if (i == vertexCount / 2) {\n        height = -height;\n      }\n\n      const globalIndex = i + positionOffset;\n      if (i < vertexCount - 1) {\n        indices[indicesOffset + 2 * i] = globalIndex;\n        indices[indicesOffset + 2 * i + 1] = globalIndex + 1;\n      } else {\n        indices[indicesOffset + 2 * i] = globalIndex;\n        indices[indicesOffset + 2 * i + 1] = positionOffset;\n      }\n    }\n  }\n\n  /**\n   * Store frustum wireframe mesh data.\n   * The origin located in the center of cap.\n   * @param radius - The radius of cap\n   * @param height - The height of cone\n   * @param angle - The angle of cone\n   * @param positions - position array\n   * @param positionOffset - The min of index list\n   * @param indices - index array\n   * @param indicesOffset - index array offset\n   */\n  static createFrustumWireframe(\n    radius: number,\n    height: number,\n    angle: number,\n    positions: Vector3[],\n    positionOffset: number,\n    indices: Uint16Array | Uint32Array,\n    indicesOffset: number\n  ): void {\n    WireframePrimitive._shift.set(0, 0, 0);\n\n    // Z\n    WireframePrimitive.createCircleWireframe(\n      radius,\n      2,\n      WireframePrimitive._shift,\n      positions,\n      positionOffset,\n      indices,\n      indicesOffset\n    );\n\n    WireframePrimitive._shift.set(0, 0, -height);\n    const radian = MathUtil.degreeToRadian(angle);\n    const dirTanA = Math.tan(radian);\n    const bottomRadius = radius + dirTanA * height;\n\n    WireframePrimitive.createCircleWireframe(\n      bottomRadius,\n      2,\n      WireframePrimitive._shift,\n      positions,\n      positionOffset + WireframePrimitive.circleVertexCount,\n      indices,\n      indicesOffset + WireframePrimitive.circleIndexCount\n    );\n\n    const indexBegin = positionOffset + 2 * WireframePrimitive.circleVertexCount;\n    let offset = indexBegin;\n\n    positions[offset++].set(0, 0, 0);\n    positions[offset++].set(0, 0, -height);\n    positions[offset++].set(radius, 0, 0);\n    positions[offset++].set(bottomRadius, 0, -height);\n    positions[offset++].set(-radius, 0, 0);\n    positions[offset++].set(-bottomRadius, 0, -height);\n    positions[offset++].set(0, radius, 0);\n    positions[offset++].set(0, bottomRadius, -height);\n    positions[offset++].set(0, -radius, 0);\n    positions[offset++].set(0, -bottomRadius, -height);\n\n    indicesOffset += 2 * WireframePrimitive.circleIndexCount;\n    indices[indicesOffset++] = indexBegin;\n    indices[indicesOffset++] = indexBegin + 1;\n    indices[indicesOffset++] = indexBegin + 2;\n    indices[indicesOffset++] = indexBegin + 3;\n    indices[indicesOffset++] = indexBegin + 4;\n    indices[indicesOffset++] = indexBegin + 5;\n    indices[indicesOffset++] = indexBegin + 6;\n    indices[indicesOffset++] = indexBegin + 7;\n    indices[indicesOffset++] = indexBegin + 8;\n    indices[indicesOffset++] = indexBegin + 9;\n  }\n\n  /**\n   * Store hemisphere wireframe mesh data.\n   * @param radius - The radius of hemisphere\n   * @param axis - The default direction\n   * @param positions - position array\n   * @param positionOffset - The min of index list\n   * @param indices - index array\n   * @param indicesOffset - index array offset\n   */\n  static createHemisphereWireframe(\n    radius: number,\n    axis: number,\n    positions: Vector3[],\n    positionOffset: number,\n    indices: Uint16Array | Uint32Array,\n    indicesOffset: number\n  ): void {\n    const vertexCount = WireframePrimitive.circleVertexCount / 2;\n    const twoPi = Math.PI;\n    const countReciprocal = 1.0 / vertexCount;\n\n    let offset = positionOffset;\n    for (let i = 0; i < vertexCount + 1; i++) {\n      const v = i * countReciprocal;\n      const thetaDelta = v * twoPi;\n\n      switch (axis) {\n        case 0:\n          positions[offset++].set(radius * Math.sin(thetaDelta), 0, radius * Math.cos(thetaDelta));\n          break;\n        case 1:\n          positions[offset++].set(0, radius * Math.sin(thetaDelta), radius * Math.cos(thetaDelta));\n          break;\n        case 2:\n          positions[offset++].set(-radius * Math.cos(thetaDelta), 0, -radius * Math.sin(thetaDelta));\n          break;\n      }\n\n      const globalIndex = i + positionOffset;\n\n      if (i < vertexCount) {\n        indices[indicesOffset + 2 * i] = globalIndex;\n        indices[indicesOffset + 2 * i + 1] = globalIndex + 1;\n      }\n    }\n\n    indicesOffset += WireframePrimitive.circleVertexCount;\n    for (let i = 0; i < vertexCount + 1; i++) {\n      const v = i * countReciprocal;\n      const thetaDelta = v * twoPi;\n\n      switch (axis) {\n        case 0:\n          positions[offset++].set(radius * Math.sin(thetaDelta), radius * Math.cos(thetaDelta), 0);\n          break;\n        case 1:\n          positions[offset++].set(radius * Math.cos(thetaDelta), radius * Math.sin(thetaDelta), 0);\n          break;\n        case 2:\n          positions[offset++].set(0, -radius * Math.cos(thetaDelta), -radius * Math.sin(thetaDelta));\n          break;\n      }\n\n      const globalIndex = i + positionOffset + vertexCount + 1;\n\n      if (i < vertexCount) {\n        indices[indicesOffset + 2 * i] = globalIndex;\n        indices[indicesOffset + 2 * i + 1] = globalIndex + 1;\n      }\n    }\n\n    WireframePrimitive._shift.set(0, 0, 0);\n    WireframePrimitive.createCircleWireframe(\n      radius,\n      axis,\n      WireframePrimitive._shift,\n      positions,\n      positionOffset + WireframePrimitive.circleVertexCount + 2,\n      indices,\n      indicesOffset + WireframePrimitive.circleVertexCount\n    );\n  }\n}\n"],"names":["WireframePrimitive","createCuboidWireframe","width","height","depth","positions","positionOffset","indices","indicesOffset","halfWidth","halfHeight","halfDepth","offset","set","createSphereWireframe","radius","_shift","createCircleWireframe","circleVertexCount","circleIndexCount","createConeWireframe","indexBegin","createUnboundCylinderWireframe","i","radian","MathUtil","degreeToRadian","Math","cos","sin","createCapsuleWireframe","circleIndicesCount","vertexCount","createEllipticWireframe","ellipticIndexCount","axis","shift","twoPi","PI","countReciprocal","v","thetaDelta","x","y","z","globalIndex","createFrustumWireframe","angle","dirTanA","tan","bottomRadius","createHemisphereWireframe","cuboidIndexCount","cuboidPositionCount","sphereIndexCount","spherePositionCount","circlePositionCount","coneIndexCount","conePositionCount","unboundCylinderIndexCount","unboundCylinderPositionCount","capsuleIndexCount","capsulePositionCount","ellipticPositionCount","frustumIndexCount","frustumPositionCount","hemisphereIndexCount","hemispherePositionCount","Vector3"],"mappings":";;AAAA,SAAS,iBAAiB,CAAC,MAAM,EAAE,KAAK,EAAE;AAC1C,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC3C,QAAQ,IAAI,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AAClC,QAAQ,UAAU,CAAC,UAAU,GAAG,UAAU,CAAC,UAAU,IAAI,KAAK,CAAC;AAC/D,QAAQ,UAAU,CAAC,YAAY,GAAG,IAAI,CAAC;AACvC;AACA,QAAQ,IAAI,OAAO,IAAI,UAAU,EAAE,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC;AAC9D;AACA,QAAQ,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,UAAU,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;AAClE,KAAK;AACL,CAAC;AACM,SAAS,aAAa,CAAC,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE;AACpE,IAAI,IAAI,UAAU,EAAE,iBAAiB,CAAC,WAAW,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;AACzE,IAAI,IAAI,WAAW,EAAE,iBAAiB,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;AACjE;AACA,IAAI,OAAO,WAAW,CAAC;AACvB;;ACdA;;AAEC,IACM,IAAA,kBAAMA,iBAAD,WAAL;AAAMA,IAAAA,SAAAA,kBAAAA,GAAAA,EAAAA;AAoIX;;;;;;;;;;AAUC,MACD,kBAAOC,CAAAA,qBA4GN,GA5GD,SAAOA,qBAAAA,CACLC,KAAa,EACbC,MAAc,EACdC,KAAa,EACbC,SAAoB,EACpBC,cAAsB,EACtBC,OAAkC,EAClCC,aAAqB,EAAA;AAErB,QAAA,IAAMC,YAAoBP,KAAQ,GAAA,CAAA,CAAA;AAClC,QAAA,IAAMQ,aAAqBP,MAAS,GAAA,CAAA,CAAA;AACpC,QAAA,IAAMQ,YAAoBP,KAAQ,GAAA,CAAA,CAAA;AAClC,QAAA,IAAIQ,MAASN,GAAAA,cAAAA,CAAAA;;QAEbD,SAAS,CAACO,SAAS,CAACC,GAAG,CAAC,CAACJ,SAAAA,EAAWC,YAAY,CAACC,SAAAA,CAAAA,CAAAA;AACjDN,QAAAA,SAAS,CAACO,MAAS,EAAA,CAAA,CAACC,GAAG,CAACJ,SAAAA,EAAWC,YAAY,CAACC,SAAAA,CAAAA,CAAAA;AAChDN,QAAAA,SAAS,CAACO,MAAS,EAAA,CAAA,CAACC,GAAG,CAACJ,WAAWC,UAAYC,EAAAA,SAAAA,CAAAA,CAAAA;AAC/CN,QAAAA,SAAS,CAACO,MAAS,EAAA,CAAA,CAACC,GAAG,CAAC,CAACJ,WAAWC,UAAYC,EAAAA,SAAAA,CAAAA,CAAAA;;QAGhDN,SAAS,CAACO,SAAS,CAACC,GAAG,CAAC,CAACJ,SAAAA,EAAW,CAACC,UAAAA,EAAY,CAACC,SAAAA,CAAAA,CAAAA;QAClDN,SAAS,CAACO,SAAS,CAACC,GAAG,CAACJ,SAAW,EAAA,CAACC,YAAY,CAACC,SAAAA,CAAAA,CAAAA;AACjDN,QAAAA,SAAS,CAACO,MAAS,EAAA,CAAA,CAACC,GAAG,CAACJ,SAAAA,EAAW,CAACC,UAAYC,EAAAA,SAAAA,CAAAA,CAAAA;QAChDN,SAAS,CAACO,SAAS,CAACC,GAAG,CAAC,CAACJ,SAAAA,EAAW,CAACC,UAAYC,EAAAA,SAAAA,CAAAA,CAAAA;;QAGjDN,SAAS,CAACO,SAAS,CAACC,GAAG,CAAC,CAACJ,SAAAA,EAAWC,YAAY,CAACC,SAAAA,CAAAA,CAAAA;AACjDN,QAAAA,SAAS,CAACO,MAAS,EAAA,CAAA,CAACC,GAAG,CAAC,CAACJ,WAAWC,UAAYC,EAAAA,SAAAA,CAAAA,CAAAA;QAChDN,SAAS,CAACO,SAAS,CAACC,GAAG,CAAC,CAACJ,SAAAA,EAAW,CAACC,UAAYC,EAAAA,SAAAA,CAAAA,CAAAA;QACjDN,SAAS,CAACO,SAAS,CAACC,GAAG,CAAC,CAACJ,SAAAA,EAAW,CAACC,UAAAA,EAAY,CAACC,SAAAA,CAAAA,CAAAA;;AAGlDN,QAAAA,SAAS,CAACO,MAAS,EAAA,CAAA,CAACC,GAAG,CAACJ,SAAAA,EAAWC,YAAY,CAACC,SAAAA,CAAAA,CAAAA;AAChDN,QAAAA,SAAS,CAACO,MAAS,EAAA,CAAA,CAACC,GAAG,CAACJ,WAAWC,UAAYC,EAAAA,SAAAA,CAAAA,CAAAA;AAC/CN,QAAAA,SAAS,CAACO,MAAS,EAAA,CAAA,CAACC,GAAG,CAACJ,SAAAA,EAAW,CAACC,UAAYC,EAAAA,SAAAA,CAAAA,CAAAA;QAChDN,SAAS,CAACO,SAAS,CAACC,GAAG,CAACJ,SAAW,EAAA,CAACC,YAAY,CAACC,SAAAA,CAAAA,CAAAA;;AAGjDN,QAAAA,SAAS,CAACO,MAAS,EAAA,CAAA,CAACC,GAAG,CAAC,CAACJ,WAAWC,UAAYC,EAAAA,SAAAA,CAAAA,CAAAA;AAChDN,QAAAA,SAAS,CAACO,MAAS,EAAA,CAAA,CAACC,GAAG,CAACJ,WAAWC,UAAYC,EAAAA,SAAAA,CAAAA,CAAAA;AAC/CN,QAAAA,SAAS,CAACO,MAAS,EAAA,CAAA,CAACC,GAAG,CAACJ,SAAAA,EAAW,CAACC,UAAYC,EAAAA,SAAAA,CAAAA,CAAAA;QAChDN,SAAS,CAACO,SAAS,CAACC,GAAG,CAAC,CAACJ,SAAAA,EAAW,CAACC,UAAYC,EAAAA,SAAAA,CAAAA,CAAAA;;QAGjDN,SAAS,CAACO,SAAS,CAACC,GAAG,CAAC,CAACJ,SAAAA,EAAWC,YAAY,CAACC,SAAAA,CAAAA,CAAAA;AACjDN,QAAAA,SAAS,CAACO,MAAS,EAAA,CAAA,CAACC,GAAG,CAACJ,SAAAA,EAAWC,YAAY,CAACC,SAAAA,CAAAA,CAAAA;QAChDN,SAAS,CAACO,SAAS,CAACC,GAAG,CAACJ,SAAW,EAAA,CAACC,YAAY,CAACC,SAAAA,CAAAA,CAAAA;QACjDN,SAAS,CAACO,SAAS,CAACC,GAAG,CAAC,CAACJ,SAAAA,EAAW,CAACC,UAAAA,EAAY,CAACC,SAAAA,CAAAA,CAAAA;;QAGlDJ,OAAO,CAACC,gBAAgB,GAAGF,cAAAA,CAAAA;QAC3BC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,CAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,CAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,CAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,CAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,CAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,CAAA,CAAA;QAC5CC,OAAO,CAACC,gBAAgB,GAAGF,cAAAA,CAAAA;;QAG3BC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,CAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,CAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,CAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,CAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,CAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,CAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,CAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,CAAA,CAAA;;QAG5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,CAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,CAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,CAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,EAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,EAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,EAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,EAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,CAAA,CAAA;;QAG5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,EAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,EAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,EAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,EAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,EAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,EAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,EAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,EAAA,CAAA;;QAG5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,EAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,EAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,EAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,EAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,EAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,EAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,EAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,EAAA,CAAA;;QAG5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,EAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,EAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,EAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,EAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,EAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,EAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,EAAA,CAAA;QAC5CC,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGF,cAAiB,GAAA,EAAA,CAAA;AAC9C,KAAA,CAAA;AAEA;;;;;;;;AAQC,MACD,kBAtQWN,CAsQJc,qBAwCN,GAxCD,SAAOA,qBACLC,CAAAA,MAAc,EACdV,SAAoB,EACpBC,cAAsB,EACtBC,OAAkC,EAClCC,aAAqB,EAAA;AA3QZR,QAAAA,kBAAAA,CA6QUgB,MAAM,CAACH,GAAG,CAAC,GAAG,CAAG,EAAA,CAAA,CAAA,CAAA;;QA7Q3Bb,kBA+QUiB,CAAAA,qBAAqB,CACtCF,MAAAA,EACA,CACAf,EAlROA,mBAkRYgB,MAAM,EACzBX,SACAC,EAAAA,cAAAA,EACAC,OACAC,EAAAA,aAAAA,CAAAA,CAAAA;;AAtROR,QAAAA,kBAAAA,CA0RUiB,qBAAqB,CACtCF,MAAAA,EACA,GACAf,kBA7ROA,CA6RYgB,MAAM,EACzBX,SAAAA,EACAC,cAAiBN,GA/RVA,mBA+R6BkB,iBAAiB,EACrDX,SACAC,aAAgBR,GAjSTA,mBAiS4BmB,gBAAgB,CAAA,CAAA;;QAjS5CnB,kBAqSUiB,CAAAA,qBAAqB,CACtCF,MACA,EAAA,CAAA,EACAf,kBAAmBgB,CAAAA,MAAM,EACzBX,SACAC,EAAAA,cAAAA,GAAiBN,kBAAmBkB,CAAAA,iBAAiB,GAAG,CACxDX,EAAAA,OAAAA,EACAC,gBAAgBR,kBA5STA,CA4S4BmB,gBAAgB,GAAG,CAAA,CAAA,CAAA;AAE1D,KAAA,CAAA;AAEA;;;;;;;;;AASC,MACD,kBAAOC,CAAAA,mBAoCN,GApCD,SAAOA,oBACLL,MAAc,EACdZ,MAAc,EACdE,SAAoB,EACpBC,cAAsB,EACtBC,OAAkC,EAClCC,aAAqB,EAAA;AAhUZR,QAAAA,kBAAAA,CAkUUgB,MAAM,CAACH,GAAG,CAAC,CAAA,EAAG,CAACV,MAAQ,EAAA,CAAA,CAAA,CAAA;;QAlUjCH,kBAqUUiB,CAAAA,qBAAqB,CACtCF,MAAAA,EACA,CACAf,EAxUOA,mBAwUYgB,MAAM,EACzBX,SACAC,EAAAA,cAAAA,EACAC,OACAC,EAAAA,aAAAA,CAAAA,CAAAA;AAEF,QAAA,IAAMa,UAAaf,GAAAA,cAAAA,GAAiBN,kBA9U3BA,CA8U8CkB,iBAAiB,CAAA;AACxE,QAAA,IAAIN,MAASS,GAAAA,UAAAA,CAAAA;AACbhB,QAAAA,SAAS,CAACO,MAAS,EAAA,CAAA,CAACC,GAAG,CAAC,GAAG,CAAG,EAAA,CAAA,CAAA,CAAA;QAC9BR,SAAS,CAACO,SAAS,CAACC,GAAG,CAAC,CAACE,MAAAA,EAAQ,CAACZ,MAAQ,EAAA,CAAA,CAAA,CAAA;AAC1CE,QAAAA,SAAS,CAACO,MAAS,EAAA,CAAA,CAACC,GAAG,CAACE,MAAAA,EAAQ,CAACZ,MAAQ,EAAA,CAAA,CAAA,CAAA;AACzCE,QAAAA,SAAS,CAACO,MAAS,EAAA,CAAA,CAACC,GAAG,CAAC,CAAA,EAAG,CAACV,MAAQY,EAAAA,MAAAA,CAAAA,CAAAA;QACpCV,SAAS,CAACO,SAAS,CAACC,GAAG,CAAC,CAAG,EAAA,CAACV,QAAQ,CAACY,MAAAA,CAAAA,CAAAA;QACrCP,aAAiBR,IArVRA,mBAqV2BmB,gBAAgB,CAAA;QACpDZ,OAAO,CAACC,gBAAgB,GAAGa,UAAAA,CAAAA;QAC3Bd,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGa,UAAa,GAAA,CAAA,CAAA;QACxCd,OAAO,CAACC,gBAAgB,GAAGa,UAAAA,CAAAA;QAC3Bd,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGa,UAAa,GAAA,CAAA,CAAA;QACxCd,OAAO,CAACC,gBAAgB,GAAGa,UAAAA,CAAAA;QAC3Bd,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGa,UAAa,GAAA,CAAA,CAAA;QACxCd,OAAO,CAACC,gBAAgB,GAAGa,UAAAA,CAAAA;QAC3Bd,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGa,UAAa,GAAA,CAAA,CAAA;AAC1C,KAAA,CAAA;AAEA;;;;;;;;AAQC,MACD,kBAzWWrB,CAyWJsB,8BAgCN,GAhCD,SAAOA,8BACLP,CAAAA,MAAc,EACdV,SAAoB,EACpBC,cAAsB,EACtBC,OAAkC,EAClCC,aAAqB,EAAA;AAErB,QAAA,IAAML,MAAS,GAAA,CAAA,CAAA;AAhXNH,QAAAA,kBAAAA,CAiXUgB,MAAM,CAACH,GAAG,CAAC,GAAG,CAAG,EAAA,CAAA,CAAA,CAAA;;QAjX3Bb,kBAoXUiB,CAAAA,qBAAqB,CACtCF,MAAAA,EACA,CACAf,EAvXOA,mBAuXYgB,MAAM,EACzBX,SACAC,EAAAA,cAAAA,EACAC,OACAC,EAAAA,aAAAA,CAAAA,CAAAA;AAGF,QAAA,IAAMa,UAAaf,GAAAA,cAAAA,GAAiBN,kBA9X3BA,CA8X8CkB,iBAAiB,CAAA;AACxE,QAAA,IAAIN,MAASS,GAAAA,UAAAA,CAAAA;QACbb,aAAiBR,IAhYRA,mBAgY2BmB,gBAAgB,CAAA;AACpD,QAAA,IAAK,IAAII,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAI,GAAGA,CAAK,EAAA,CAAA;AAC1B,YAAA,IAAMC,MAASC,GAAAA,QAAAA,CAASC,cAAc,CAAC,EAAKH,GAAAA,CAAAA,CAAAA,CAAAA;AAC5ClB,YAAAA,SAAS,CAACO,MAAAA,EAAAA,CAAS,CAACC,GAAG,CAACE,MAASY,GAAAA,IAAAA,CAAKC,GAAG,CAACJ,MAAS,CAAA,EAAA,CAAA,EAAGT,MAASY,GAAAA,IAAAA,CAAKE,GAAG,CAACL,MAAAA,CAAAA,CAAAA,CAAAA;AACxEnB,YAAAA,SAAS,CAACO,MAAAA,EAAAA,CAAS,CAACC,GAAG,CAACE,MAASY,GAAAA,IAAAA,CAAKC,GAAG,CAACJ,SAAS,CAACrB,MAAAA,EAAQY,MAASY,GAAAA,IAAAA,CAAKE,GAAG,CAACL,MAAAA,CAAAA,CAAAA,CAAAA;AAE9EjB,YAAAA,OAAO,CAACC,aAAgBe,GAAAA,CAAAA,GAAI,CAAE,CAAA,GAAGF,aAAa,CAAIE,GAAAA,CAAAA,CAAAA;YAClDhB,OAAO,CAACC,gBAAgBe,CAAI,GAAA,CAAA,GAAI,EAAE,GAAGF,UAAAA,GAAa,IAAIE,CAAI,GAAA,CAAA,CAAA;AAC5D,SAAA;AACF,KAAA,CAAA;AAEA;;;;;;;;;AASC,MACD,kBAAOO,CAAAA,sBAyDN,GAzDD,SAAOA,uBACLf,MAAc,EACdZ,MAAc,EACdE,SAAoB,EACpBC,cAAsB,EACtBC,OAAkC,EAClCC,aAAqB,EAAA;QAErB,IAAMuB,kBAAAA,GAAqB/B,kBA7ZlBA,CA6ZqCmB,gBAAgB,CAAA;QAC9D,IAAMa,WAAAA,GAAchC,kBA9ZXA,CA8Z8BkB,iBAAiB,CAAA;AACxD,QAAA,IAAMR,aAAaP,MAAS,GAAA,CAAA,CAAA;;AA/ZnBH,QAAAA,kBAAAA,CAkaUgB,MAAM,CAACH,GAAG,CAAC,GAAGH,UAAY,EAAA,CAAA,CAAA,CAAA;QAlapCV,kBAmaUiB,CAAAA,qBAAqB,CACtCF,MAAAA,EACA,CACAf,EAtaOA,mBAsaYgB,MAAM,EACzBX,SACAC,EAAAA,cAAAA,EACAC,OACAC,EAAAA,aAAAA,CAAAA,CAAAA;;AA1aOR,QAAAA,kBAAAA,CA8aUgB,MAAM,CAACH,GAAG,CAAC,CAAA,EAAG,CAACH,UAAY,EAAA,CAAA,CAAA,CAAA;AA9arCV,QAAAA,kBAAAA,CA+aUiB,qBAAqB,CACtCF,MACA,EAAA,CAAA,EACAf,kBAlbOA,CAkbYgB,MAAM,EACzBX,SACAC,EAAAA,cAAAA,GAAiB0B,WACjBzB,EAAAA,OAAAA,EACAC,aAAgBuB,GAAAA,kBAAAA,CAAAA,CAAAA;;QAtbT/B,kBA0bUiC,CAAAA,uBAAuB,CACxClB,MAAAA,EACAL,UACA,EAAA,CAAA,EACAL,SACAC,EAAAA,cAAAA,GAAiB0B,WAAc,GAAA,CAAA,EAC/BzB,OACAC,EAAAA,aAAAA,GAAgBuB,kBAAqB,GAAA,CAAA,CAAA,CAAA;;AAjc9B/B,QAAAA,kBAAAA,CAqcUiC,uBAAuB,CACxClB,MACAL,EAAAA,UAAAA,EACA,GACAL,SACAC,EAAAA,cAAAA,GAAiB0B,WAAc,GAAA,CAAA,EAC/BzB,SACAC,aAAgBuB,GAAAA,kBAAAA,GAAqB,CAAI/B,GA5clCA,mBA4cqDkC,kBAAkB,CAAA,CAAA;AAElF,KAAA,CAAA;AAEA;;;;;;;;;AASC,MACD,kBAAOjB,CAAAA,qBAmDN,GAnDD,SAAOA,qBAAAA,CACLF,MAAc,EACdoB,IAAY,EACZC,KAAc,EACd/B,SAAoB,EACpBC,cAAsB,EACtBC,OAAkC,EAClCC,aAAqB,EAAA;QAErB,IAAMwB,WAAAA,GAAchC,kBAneXA,CAme8BkB,iBAAiB,CAAA;QAExD,IAAMmB,KAAAA,GAAQV,IAAKW,CAAAA,EAAE,GAAG,CAAA,CAAA;AACxB,QAAA,IAAMC,kBAAkB,GAAMP,GAAAA,WAAAA,CAAAA;AAC9B,QAAA,IAAIpB,MAASN,GAAAA,cAAAA,CAAAA;AACb,QAAA,IAAK,IAAIiB,CAAI,GAAA,CAAA,EAAGA,CAAIS,GAAAA,WAAAA,EAAa,EAAET,CAAG,CAAA;AACpC,YAAA,IAAMiB,IAAIjB,CAAIgB,GAAAA,eAAAA,CAAAA;AACd,YAAA,IAAME,aAAaD,CAAIH,GAAAA,KAAAA,CAAAA;YAEvB,OAAQF,IAAAA;gBACN,KAAK,CAAA;oBACH9B,SAAS,CAACO,SAAS,CAACC,GAAG,CACrBuB,KAAMM,CAAAA,CAAC,EACP3B,MAAAA,GAASY,IAAKC,CAAAA,GAAG,CAACa,UAAcL,CAAAA,GAAAA,KAAAA,CAAMO,CAAC,EACvC5B,MAAAA,GAASY,KAAKE,GAAG,CAACY,UAAcL,CAAAA,GAAAA,KAAAA,CAAMQ,CAAC,CAAA,CAAA;AAEzC,oBAAA,MAAA;gBACF,KAAK,CAAA;oBACHvC,SAAS,CAACO,SAAS,CAACC,GAAG,CACrBE,MAASY,GAAAA,IAAAA,CAAKC,GAAG,CAACa,UAAcL,CAAAA,GAAAA,KAAAA,CAAMM,CAAC,EACvCN,KAAAA,CAAMO,CAAC,EACP5B,MAAAA,GAASY,KAAKE,GAAG,CAACY,UAAcL,CAAAA,GAAAA,KAAAA,CAAMQ,CAAC,CAAA,CAAA;AAEzC,oBAAA,MAAA;gBACF,KAAK,CAAA;oBACHvC,SAAS,CAACO,SAAS,CAACC,GAAG,CACrBE,MAASY,GAAAA,IAAAA,CAAKC,GAAG,CAACa,UAAcL,CAAAA,GAAAA,KAAAA,CAAMM,CAAC,EACvC3B,MAAAA,GAASY,KAAKE,GAAG,CAACY,cAAcL,KAAMO,CAAAA,CAAC,EACvCP,KAAAA,CAAMQ,CAAC,CAAA,CAAA;AAET,oBAAA,MAAA;AACJ,aAAA;AAEA,YAAA,IAAMC,cAActB,CAAIjB,GAAAA,cAAAA,CAAAA;YACxB,IAAIiB,CAAAA,GAAIS,cAAc,CAAG,EAAA;AACvBzB,gBAAAA,OAAO,CAACC,aAAAA,GAAgB,CAAIe,GAAAA,CAAAA,CAAE,GAAGsB,WAAAA,CAAAA;AACjCtC,gBAAAA,OAAO,CAACC,aAAgB,GAAA,CAAA,GAAIe,CAAI,GAAA,CAAA,CAAE,GAAGsB,WAAc,GAAA,CAAA,CAAA;aAC9C,MAAA;AACLtC,gBAAAA,OAAO,CAACC,aAAAA,GAAgB,CAAIe,GAAAA,CAAAA,CAAE,GAAGsB,WAAAA,CAAAA;AACjCtC,gBAAAA,OAAO,CAACC,aAAAA,GAAgB,CAAIe,GAAAA,CAAAA,GAAI,EAAE,GAAGjB,cAAAA,CAAAA;AACvC,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AAEA;;;;;;;;;AASC,MACD,kBAAO2B,CAAAA,uBA0CN,GA1CD,SAAOA,uBAAAA,CACLlB,MAAc,EACdZ,MAAc,EACdgC,IAAY,EACZ9B,SAAoB,EACpBC,cAAsB,EACtBC,OAAkC,EAClCC,aAAqB,EAAA;QAErB,IAAMwB,WAAAA,GAAchC,kBAliBXA,CAkiB8BkB,iBAAiB,CAAA;QACxD,IAAMmB,KAAAA,GAAQV,IAAKW,CAAAA,EAAE,GAAG,CAAA,CAAA;AACxB,QAAA,IAAMC,kBAAkB,GAAMP,GAAAA,WAAAA,CAAAA;AAC9B,QAAA,IAAIpB,MAASN,GAAAA,cAAAA,CAAAA;AACb,QAAA,IAAK,IAAIiB,CAAI,GAAA,CAAA,EAAGA,CAAIS,GAAAA,WAAAA,EAAa,EAAET,CAAG,CAAA;AACpC,YAAA,IAAMiB,IAAIjB,CAAIgB,GAAAA,eAAAA,CAAAA;AACd,YAAA,IAAME,aAAaD,CAAIH,GAAAA,KAAAA,CAAAA;YAEvB,OAAQF,IAAAA;gBACN,KAAK,CAAA;AACH9B,oBAAAA,SAAS,CAACO,MAAAA,EAAAA,CAAS,CAACC,GAAG,CAAC,CAAGE,EAAAA,MAAAA,GAASY,IAAKE,CAAAA,GAAG,CAACY,UAActC,CAAAA,GAAAA,MAAAA,EAAQY,MAASY,GAAAA,IAAAA,CAAKC,GAAG,CAACa,UAAAA,CAAAA,CAAAA,CAAAA;AACrF,oBAAA,MAAA;gBACF,KAAK,CAAA;AACHpC,oBAAAA,SAAS,CAACO,MAAAA,EAAAA,CAAS,CAACC,GAAG,CAACE,MAASY,GAAAA,IAAAA,CAAKC,GAAG,CAACa,UAAatC,CAAAA,EAAAA,MAAAA,EAAQY,MAASY,GAAAA,IAAAA,CAAKE,GAAG,CAACY,UAAAA,CAAAA,CAAAA,CAAAA;AACjF,oBAAA,MAAA;gBACF,KAAK,CAAA;AACHpC,oBAAAA,SAAS,CAACO,MAAAA,EAAAA,CAAS,CAACC,GAAG,CAACE,MAASY,GAAAA,IAAAA,CAAKC,GAAG,CAACa,aAAa1B,MAASY,GAAAA,IAAAA,CAAKE,GAAG,CAACY,cAActC,MAAQ,EAAA,CAAA,CAAA,CAAA;AAC/F,oBAAA,MAAA;AACJ,aAAA;YAEA,IAAIoB,CAAAA,IAAKS,cAAc,CAAG,EAAA;AACxB7B,gBAAAA,MAAAA,GAAS,CAACA,MAAAA,CAAAA;AACZ,aAAA;AAEA,YAAA,IAAM0C,cAActB,CAAIjB,GAAAA,cAAAA,CAAAA;YACxB,IAAIiB,CAAAA,GAAIS,cAAc,CAAG,EAAA;AACvBzB,gBAAAA,OAAO,CAACC,aAAAA,GAAgB,CAAIe,GAAAA,CAAAA,CAAE,GAAGsB,WAAAA,CAAAA;AACjCtC,gBAAAA,OAAO,CAACC,aAAgB,GAAA,CAAA,GAAIe,CAAI,GAAA,CAAA,CAAE,GAAGsB,WAAc,GAAA,CAAA,CAAA;aAC9C,MAAA;AACLtC,gBAAAA,OAAO,CAACC,aAAAA,GAAgB,CAAIe,GAAAA,CAAAA,CAAE,GAAGsB,WAAAA,CAAAA;AACjCtC,gBAAAA,OAAO,CAACC,aAAAA,GAAgB,CAAIe,GAAAA,CAAAA,GAAI,EAAE,GAAGjB,cAAAA,CAAAA;AACvC,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AAEA;;;;;;;;;;AAUC,MACD,kBAAOwC,CAAAA,sBA8DN,GA9DD,SAAOA,sBAAAA,CACL/B,MAAc,EACdZ,MAAc,EACd4C,KAAa,EACb1C,SAAoB,EACpBC,cAAsB,EACtBC,OAAkC,EAClCC,aAAqB,EAAA;AAvlBZR,QAAAA,kBAAAA,CAylBUgB,MAAM,CAACH,GAAG,CAAC,GAAG,CAAG,EAAA,CAAA,CAAA,CAAA;;QAzlB3Bb,kBA4lBUiB,CAAAA,qBAAqB,CACtCF,MAAAA,EACA,CACAf,EA/lBOA,mBA+lBYgB,MAAM,EACzBX,SACAC,EAAAA,cAAAA,EACAC,OACAC,EAAAA,aAAAA,CAAAA,CAAAA;AAnmBOR,QAAAA,kBAAAA,CAsmBUgB,MAAM,CAACH,GAAG,CAAC,CAAA,EAAG,GAAG,CAACV,MAAAA,CAAAA,CAAAA;QACrC,IAAMqB,MAAAA,GAASC,QAASC,CAAAA,cAAc,CAACqB,KAAAA,CAAAA,CAAAA;QACvC,IAAMC,OAAAA,GAAUrB,IAAKsB,CAAAA,GAAG,CAACzB,MAAAA,CAAAA,CAAAA;QACzB,IAAM0B,YAAAA,GAAenC,SAASiC,OAAU7C,GAAAA,MAAAA,CAAAA;AAzmB/BH,QAAAA,kBAAAA,CA2mBUiB,qBAAqB,CACtCiC,YAAAA,EACA,GACAlD,kBA9mBOA,CA8mBYgB,MAAM,EACzBX,SAAAA,EACAC,cAAiBN,GAhnBVA,mBAgnB6BkB,iBAAiB,EACrDX,SACAC,aAAgBR,GAlnBTA,mBAknB4BmB,gBAAgB,CAAA,CAAA;AAGrD,QAAA,IAAME,UAAaf,GAAAA,cAAAA,GAAiB,CAAIN,GArnB/BA,mBAqnBkDkB,iBAAiB,CAAA;AAC5E,QAAA,IAAIN,MAASS,GAAAA,UAAAA,CAAAA;AAEbhB,QAAAA,SAAS,CAACO,MAAS,EAAA,CAAA,CAACC,GAAG,CAAC,GAAG,CAAG,EAAA,CAAA,CAAA,CAAA;AAC9BR,QAAAA,SAAS,CAACO,MAAS,EAAA,CAAA,CAACC,GAAG,CAAC,CAAA,EAAG,GAAG,CAACV,MAAAA,CAAAA,CAAAA;AAC/BE,QAAAA,SAAS,CAACO,MAAS,EAAA,CAAA,CAACC,GAAG,CAACE,QAAQ,CAAG,EAAA,CAAA,CAAA,CAAA;AACnCV,QAAAA,SAAS,CAACO,MAAS,EAAA,CAAA,CAACC,GAAG,CAACqC,YAAAA,EAAc,GAAG,CAAC/C,MAAAA,CAAAA,CAAAA;AAC1CE,QAAAA,SAAS,CAACO,MAAS,EAAA,CAAA,CAACC,GAAG,CAAC,CAACE,QAAQ,CAAG,EAAA,CAAA,CAAA,CAAA;QACpCV,SAAS,CAACO,SAAS,CAACC,GAAG,CAAC,CAACqC,YAAAA,EAAc,GAAG,CAAC/C,MAAAA,CAAAA,CAAAA;AAC3CE,QAAAA,SAAS,CAACO,MAAS,EAAA,CAAA,CAACC,GAAG,CAAC,GAAGE,MAAQ,EAAA,CAAA,CAAA,CAAA;AACnCV,QAAAA,SAAS,CAACO,MAAS,EAAA,CAAA,CAACC,GAAG,CAAC,CAAA,EAAGqC,cAAc,CAAC/C,MAAAA,CAAAA,CAAAA;AAC1CE,QAAAA,SAAS,CAACO,MAAS,EAAA,CAAA,CAACC,GAAG,CAAC,CAAA,EAAG,CAACE,MAAQ,EAAA,CAAA,CAAA,CAAA;QACpCV,SAAS,CAACO,SAAS,CAACC,GAAG,CAAC,CAAG,EAAA,CAACqC,cAAc,CAAC/C,MAAAA,CAAAA,CAAAA;QAE3CK,aAAiB,IAAA,CAAA,GAAIR,kBAnoBZA,CAmoB+BmB,gBAAgB,CAAA;QACxDZ,OAAO,CAACC,gBAAgB,GAAGa,UAAAA,CAAAA;QAC3Bd,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGa,UAAa,GAAA,CAAA,CAAA;QACxCd,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGa,UAAa,GAAA,CAAA,CAAA;QACxCd,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGa,UAAa,GAAA,CAAA,CAAA;QACxCd,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGa,UAAa,GAAA,CAAA,CAAA;QACxCd,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGa,UAAa,GAAA,CAAA,CAAA;QACxCd,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGa,UAAa,GAAA,CAAA,CAAA;QACxCd,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGa,UAAa,GAAA,CAAA,CAAA;QACxCd,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGa,UAAa,GAAA,CAAA,CAAA;QACxCd,OAAO,CAACC,aAAgB,EAAA,CAAA,GAAGa,UAAa,GAAA,CAAA,CAAA;AAC1C,KAAA,CAAA;AAEA;;;;;;;;AAQC,MACD,kBAAO8B,CAAAA,yBAwEN,GAxED,SAAOA,0BACLpC,MAAc,EACdoB,IAAY,EACZ9B,SAAoB,EACpBC,cAAsB,EACtBC,OAAkC,EAClCC,aAAqB,EAAA;AAErB,QAAA,IAAMwB,WAAchC,GAjqBXA,kBAiqB8BkB,CAAAA,iBAAiB,GAAG,CAAA,CAAA;QAC3D,IAAMmB,KAAAA,GAAQV,KAAKW,EAAE,CAAA;AACrB,QAAA,IAAMC,kBAAkB,GAAMP,GAAAA,WAAAA,CAAAA;AAE9B,QAAA,IAAIpB,MAASN,GAAAA,cAAAA,CAAAA;AACb,QAAA,IAAK,IAAIiB,CAAI,GAAA,CAAA,EAAGA,CAAIS,GAAAA,WAAAA,GAAc,GAAGT,CAAK,EAAA,CAAA;AACxC,YAAA,IAAMiB,IAAIjB,CAAIgB,GAAAA,eAAAA,CAAAA;AACd,YAAA,IAAME,aAAaD,CAAIH,GAAAA,KAAAA,CAAAA;YAEvB,OAAQF,IAAAA;gBACN,KAAK,CAAA;AACH9B,oBAAAA,SAAS,CAACO,MAAAA,EAAAA,CAAS,CAACC,GAAG,CAACE,MAASY,GAAAA,IAAAA,CAAKE,GAAG,CAACY,UAAa,CAAA,EAAA,CAAA,EAAG1B,MAASY,GAAAA,IAAAA,CAAKC,GAAG,CAACa,UAAAA,CAAAA,CAAAA,CAAAA;AAC5E,oBAAA,MAAA;gBACF,KAAK,CAAA;AACHpC,oBAAAA,SAAS,CAACO,MAAAA,EAAAA,CAAS,CAACC,GAAG,CAAC,CAAGE,EAAAA,MAAAA,GAASY,IAAKE,CAAAA,GAAG,CAACY,UAAAA,CAAAA,EAAa1B,MAASY,GAAAA,IAAAA,CAAKC,GAAG,CAACa,UAAAA,CAAAA,CAAAA,CAAAA;AAC5E,oBAAA,MAAA;gBACF,KAAK,CAAA;AACHpC,oBAAAA,SAAS,CAACO,MAAS,EAAA,CAAA,CAACC,GAAG,CAAC,CAACE,MAASY,GAAAA,IAAAA,CAAKC,GAAG,CAACa,aAAa,CAAG,EAAA,CAAC1B,MAASY,GAAAA,IAAAA,CAAKE,GAAG,CAACY,UAAAA,CAAAA,CAAAA,CAAAA;AAC9E,oBAAA,MAAA;AACJ,aAAA;AAEA,YAAA,IAAMI,cAActB,CAAIjB,GAAAA,cAAAA,CAAAA;AAExB,YAAA,IAAIiB,IAAIS,WAAa,EAAA;AACnBzB,gBAAAA,OAAO,CAACC,aAAAA,GAAgB,CAAIe,GAAAA,CAAAA,CAAE,GAAGsB,WAAAA,CAAAA;AACjCtC,gBAAAA,OAAO,CAACC,aAAgB,GAAA,CAAA,GAAIe,CAAI,GAAA,CAAA,CAAE,GAAGsB,WAAc,GAAA,CAAA,CAAA;AACrD,aAAA;AACF,SAAA;QAEArC,aAAiBR,IA9rBRA,mBA8rB2BkB,iBAAiB,CAAA;AACrD,QAAA,IAAK,IAAIK,EAAI,GAAA,CAAA,EAAGA,EAAIS,GAAAA,WAAAA,GAAc,GAAGT,EAAK,EAAA,CAAA;AACxC,YAAA,IAAMiB,KAAIjB,EAAIgB,GAAAA,eAAAA,CAAAA;AACd,YAAA,IAAME,cAAaD,EAAIH,GAAAA,KAAAA,CAAAA;YAEvB,OAAQF,IAAAA;gBACN,KAAK,CAAA;AACH9B,oBAAAA,SAAS,CAACO,MAAAA,EAAAA,CAAS,CAACC,GAAG,CAACE,MAASY,GAAAA,IAAAA,CAAKE,GAAG,CAACY,WAAa1B,CAAAA,EAAAA,MAAAA,GAASY,IAAKC,CAAAA,GAAG,CAACa,WAAa,CAAA,EAAA,CAAA,CAAA,CAAA;AACtF,oBAAA,MAAA;gBACF,KAAK,CAAA;AACHpC,oBAAAA,SAAS,CAACO,MAAAA,EAAAA,CAAS,CAACC,GAAG,CAACE,MAASY,GAAAA,IAAAA,CAAKC,GAAG,CAACa,WAAa1B,CAAAA,EAAAA,MAAAA,GAASY,IAAKE,CAAAA,GAAG,CAACY,WAAa,CAAA,EAAA,CAAA,CAAA,CAAA;AACtF,oBAAA,MAAA;gBACF,KAAK,CAAA;AACHpC,oBAAAA,SAAS,CAACO,MAAS,EAAA,CAAA,CAACC,GAAG,CAAC,GAAG,CAACE,MAAAA,GAASY,IAAKC,CAAAA,GAAG,CAACa,WAAa,CAAA,EAAA,CAAC1B,MAASY,GAAAA,IAAAA,CAAKE,GAAG,CAACY,WAAAA,CAAAA,CAAAA,CAAAA;AAC9E,oBAAA,MAAA;AACJ,aAAA;YAEA,IAAMI,YAAAA,GAActB,EAAIjB,GAAAA,cAAAA,GAAiB0B,WAAc,GAAA,CAAA,CAAA;AAEvD,YAAA,IAAIT,KAAIS,WAAa,EAAA;AACnBzB,gBAAAA,OAAO,CAACC,aAAAA,GAAgB,CAAIe,GAAAA,EAAAA,CAAE,GAAGsB,YAAAA,CAAAA;AACjCtC,gBAAAA,OAAO,CAACC,aAAgB,GAAA,CAAA,GAAIe,EAAI,GAAA,CAAA,CAAE,GAAGsB,YAAc,GAAA,CAAA,CAAA;AACrD,aAAA;AACF,SAAA;AArtBS7C,QAAAA,kBAAAA,CAutBUgB,MAAM,CAACH,GAAG,CAAC,GAAG,CAAG,EAAA,CAAA,CAAA,CAAA;AAvtB3Bb,QAAAA,kBAAAA,CAwtBUiB,qBAAqB,CACtCF,MAAAA,EACAoB,MACAnC,kBA3tBOA,CA2tBYgB,MAAM,EACzBX,SAAAA,EACAC,iBAAiBN,kBA7tBVA,CA6tB6BkB,iBAAiB,GAAG,CAAA,EACxDX,SACAC,aAAgBR,GA/tBTA,mBA+tB4BkB,iBAAiB,CAAA,CAAA;AAExD,KAAA,CAAA;AAjuBWlB,IAAAA,aAAAA,CAAAA,kBAAAA,EAAAA,IAAAA,EAAAA;;YASAoD,GAAAA,EAAAA,kBAAAA;;;MAAX,SAAA,GAAA,GAAA;gBACE,OAAO,EAAA,CAAA;AACT,aAAA;;;YAKWC,GAAAA,EAAAA,qBAAAA;;;MAAX,SAAA,GAAA,GAAA;gBACE,OAAO,EAAA,CAAA;AACT,aAAA;;;YAKWC,GAAAA,EAAAA,kBAAAA;;;MAAX,SAAA,GAAA,GAAA;gBACE,OAxBStD,kBAwBiBmB,CAAAA,gBAAgB,GAAG,CAAA,CAAA;AAC/C,aAAA;;;YAKWoC,GAAAA,EAAAA,qBAAAA;;;MAAX,SAAA,GAAA,GAAA;gBACE,OA/BSvD,kBA+BiBwD,CAAAA,mBAAmB,GAAG,CAAA,CAAA;AAClD,aAAA;;;YAKWC,GAAAA,EAAAA,gBAAAA;;;MAAX,SAAA,GAAA,GAAA;gBACE,OAtCSzD,kBAsCiBmB,CAAAA,gBAAgB,GAAG,CAAA,CAAA;AAC/C,aAAA;;;YAKWuC,GAAAA,EAAAA,mBAAAA;;;MAAX,SAAA,GAAA,GAAA;gBACE,OA7CS1D,kBA6CiBwD,CAAAA,mBAAmB,GAAG,CAAA,CAAA;AAClD,aAAA;;;YAKWG,GAAAA,EAAAA,2BAAAA;;;MAAX,SAAA,GAAA,GAAA;gBACE,OApDS3D,kBAoDiBmB,CAAAA,gBAAgB,GAAG,EAAA,CAAA;AAC/C,aAAA;;;YAKWyC,GAAAA,EAAAA,8BAAAA;;;MAAX,SAAA,GAAA,GAAA;gBACE,OA3DS5D,kBA2DiBwD,CAAAA,mBAAmB,GAAG,EAAA,CAAA;AAClD,aAAA;;;YAKWK,GAAAA,EAAAA,mBAAAA;;;MAAX,SAAA,GAAA,GAAA;gBACE,OAAQ7D,CAlECA,kBAkEkBmB,CAAAA,gBAAgB,GAAGnB,kBAlErCA,CAkEwDkC,kBAAiB,IAAK,CAAA,CAAA;AACzF,aAAA;;;YAKW4B,GAAAA,EAAAA,sBAAAA;;;MAAX,SAAA,GAAA,GAAA;gBACE,OAAQ9D,CAzECA,kBAyEkBwD,CAAAA,mBAAmB,GAAGxD,kBAzExCA,CAyE2D+D,qBAAoB,IAAK,CAAA,CAAA;AAC/F,aAAA;;;YAKW5C,GAAAA,EAAAA,kBAAAA;;;MAAX,SAAA,GAAA,GAAA;gBACE,OAhFSnB,kBAgFiBkB,CAAAA,iBAAiB,GAAG,CAAA,CAAA;AAChD,aAAA;;;YAKWsC,GAAAA,EAAAA,qBAAAA;;;MAAX,SAAA,GAAA,GAAA;gBACE,OAvFSxD,mBAuFiBkB,iBAAiB,CAAA;AAC7C,aAAA;;;YAKWgB,GAAAA,EAAAA,oBAAAA;;;MAAX,SAAA,GAAA,GAAA;gBACE,OA9FSlC,kBA8FiBkB,CAAAA,iBAAiB,GAAG,CAAA,CAAA;AAChD,aAAA;;;YAKW6C,GAAAA,EAAAA,uBAAAA;;;MAAX,SAAA,GAAA,GAAA;gBACE,OArGS/D,mBAqGiBkB,iBAAiB,CAAA;AAC7C,aAAA;;;YAKW8C,GAAAA,EAAAA,mBAAAA;;;MAAX,SAAA,GAAA,GAAA;AACE,gBAAA,OAAOhE,kBA5GEA,CA4GiBmB,gBAAgB,GAAG,CAAI,GAAA,EAAA,CAAA;AACnD,aAAA;;;YAKW8C,GAAAA,EAAAA,sBAAAA;;;MAAX,SAAA,GAAA,GAAA;AACE,gBAAA,OAAOjE,kBAnHEA,CAmHiBkB,iBAAiB,GAAG,CAAI,GAAA,EAAA,CAAA;AACpD,aAAA;;;YAKWgD,GAAAA,EAAAA,sBAAAA;;;MAAX,SAAA,GAAA,GAAA;AACE,gBAAA,OAAOlE,kBAAmBkB,CAAAA,iBAAiB,GAAG,CAAIlB,GA1HzCA,mBA0H4DmB,gBAAgB,CAAA;AACvF,aAAA;;;YAKWgD,GAAAA,EAAAA,yBAAAA;;;MAAX,SAAA,GAAA,GAAA;AACE,gBAAA,OAAOnE,kBAAmBkB,CAAAA,iBAAiB,GAAG,CAAIlB,GAjIzCA,mBAiI4DwD,mBAAmB,CAAA;AAC1F,aAAA;;;AAlIWxD,IAAAA,OAAAA,kBAAAA,CAAAA;AAkuBZ,CAAA,GAAA;AAluBYA,kBAAAA,CACJgB,SAAS,IAAIoD,OAAAA,EAAAA,CAAAA;AAEpB,wCAHWpE,mBAIJkB,iBAAoB,GAAA,EAAA;;;;","x_google_ignoreList":[0]}