{"version":3,"file":"browser.js","sources":["../../../../node_modules/.pnpm/@swc+helpers@0.5.7/node_modules/@swc/helpers/esm/_create_class.js","../../../../node_modules/.pnpm/@swc+helpers@0.5.7/node_modules/@swc/helpers/esm/_set_prototype_of.js","../../../../node_modules/.pnpm/@swc+helpers@0.5.7/node_modules/@swc/helpers/esm/_inherits.js","../../../../node_modules/.pnpm/@swc+helpers@0.5.7/node_modules/@swc/helpers/esm/_instanceof.js","../../../../node_modules/.pnpm/tslib@2.6.2/node_modules/tslib/tslib.es6.mjs","../../src/WireframePrimitive.ts","../../src/WireframeManager.ts","../../src/LineDrawer.ts"],"sourcesContent":["function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","export function _set_prototype_of(o, p) {\n    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {\n        o.__proto__ = p;\n\n        return o;\n    };\n\n    return _set_prototype_of(o, p);\n}\nexport { _set_prototype_of as _ };\n","import { _set_prototype_of } from \"./_set_prototype_of.js\";\n\nexport function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });\n\n    if (superClass) _set_prototype_of(subClass, superClass);\n}\nexport { _inherits as _ };\n","export function _instanceof(left, right) {\n    if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n        return !!right[Symbol.hasInstance](left);\n    } else return left instanceof right;\n}\nexport { _instanceof as _ };\n","/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n  return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose;\n    if (async) {\n        if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n        dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n        if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n        dispose = value[Symbol.dispose];\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  function next() {\n    while (env.stack.length) {\n      var rec = env.stack.pop();\n      try {\n        var result = rec.dispose && rec.dispose.call(rec.value);\n        if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n      }\n      catch (e) {\n          fail(e);\n      }\n    }\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n};\n","import { MathUtil, Vector3 } from \"@galacean/engine\";\n\n/**\n * Wireframe primitive.\n */\nexport class WireframePrimitive {\n  static _shift = new Vector3();\n\n  /** global settings for vertex count */\n  static circleVertexCount = 40;\n\n  /**\n   * Get cuboid wire frame index count.\n   */\n  static get cuboidIndexCount(): number {\n    return 48;\n  }\n\n  /**\n   * Get cuboid wire frame position count.\n   */\n  static get cuboidPositionCount(): number {\n    return 24;\n  }\n\n  /**\n   * Get sphere wire frame index count.\n   */\n  static get sphereIndexCount(): number {\n    return WireframePrimitive.circleIndexCount * 3;\n  }\n\n  /**\n   * Get sphere wire frame position count.\n   */\n  static get spherePositionCount(): number {\n    return WireframePrimitive.circlePositionCount * 3;\n  }\n\n  /**\n   * Get cone wire frame index count.\n   */\n  static get coneIndexCount(): number {\n    return WireframePrimitive.circleIndexCount + 8;\n  }\n\n  /**\n   * Get cone wire frame position count.\n   */\n  static get conePositionCount(): number {\n    return WireframePrimitive.circlePositionCount + 5;\n  }\n\n  /**\n   * Get unbound cylinder wire frame index count.\n   */\n  static get unboundCylinderIndexCount(): number {\n    return WireframePrimitive.circleIndexCount + 16;\n  }\n\n  /**\n   * Get unbound cylinder wire frame position count.\n   */\n  static get unboundCylinderPositionCount(): number {\n    return WireframePrimitive.circlePositionCount + 16;\n  }\n\n  /**\n   * Get capsule wire frame index count.\n   */\n  static get capsuleIndexCount(): number {\n    return (WireframePrimitive.circleIndexCount + WireframePrimitive.ellipticIndexCount) * 2;\n  }\n\n  /**\n   * Get capsule wire frame position count.\n   */\n  static get capsulePositionCount(): number {\n    return (WireframePrimitive.circlePositionCount + WireframePrimitive.ellipticPositionCount) * 2;\n  }\n\n  /**\n   * Get circle wire frame index count.\n   */\n  static get circleIndexCount(): number {\n    return WireframePrimitive.circleVertexCount * 2;\n  }\n\n  /**\n   * Get circle wire frame position count.\n   */\n  static get circlePositionCount(): number {\n    return WireframePrimitive.circleVertexCount;\n  }\n\n  /**\n   * Get elliptic wire frame index count.\n   */\n  static get ellipticIndexCount(): number {\n    return WireframePrimitive.circleVertexCount * 2;\n  }\n\n  /**\n   * Get elliptic wire frame position count.\n   */\n  static get ellipticPositionCount(): number {\n    return WireframePrimitive.circleVertexCount;\n  }\n\n  /**\n   * Get frustum wire frame index count.\n   */\n  static get frustumIndexCount(): number {\n    return WireframePrimitive.circleIndexCount * 2 + 10;\n  }\n\n  /**\n   * Get frustum wire frame position count.\n   */\n  static get frustumPositionCount(): number {\n    return WireframePrimitive.circleVertexCount * 2 + 10;\n  }\n\n  /**\n   * Get hemisphere wire frame index count.\n   */\n  static get hemisphereIndexCount(): number {\n    return WireframePrimitive.circleVertexCount * 2 + WireframePrimitive.circleIndexCount;\n  }\n\n  /**\n   * Get hemisphere wire frame position count.\n   */\n  static get hemispherePositionCount(): number {\n    return WireframePrimitive.circleVertexCount + 2 + WireframePrimitive.circlePositionCount;\n  }\n\n  /**\n   * Store cuboid wireframe mesh data.\n   * The origin located in center of cuboid.\n   * @param width - Cuboid width\n   * @param height - Cuboid height\n   * @param depth - Cuboid depth\n   * @param positions - position array\n   * @param positionOffset - The min of index list\n   * @param indices - index array\n   * @param indicesOffset - index array offset\n   */\n  static createCuboidWireframe(\n    width: number,\n    height: number,\n    depth: number,\n    positions: Vector3[],\n    positionOffset: number,\n    indices: Uint16Array | Uint32Array,\n    indicesOffset: number\n  ): void {\n    const halfWidth: number = width / 2;\n    const halfHeight: number = height / 2;\n    const halfDepth: number = depth / 2;\n    let offset = positionOffset;\n    // Up\n    positions[offset++].set(-halfWidth, halfHeight, -halfDepth);\n    positions[offset++].set(halfWidth, halfHeight, -halfDepth);\n    positions[offset++].set(halfWidth, halfHeight, halfDepth);\n    positions[offset++].set(-halfWidth, halfHeight, halfDepth);\n\n    // Down\n    positions[offset++].set(-halfWidth, -halfHeight, -halfDepth);\n    positions[offset++].set(halfWidth, -halfHeight, -halfDepth);\n    positions[offset++].set(halfWidth, -halfHeight, halfDepth);\n    positions[offset++].set(-halfWidth, -halfHeight, halfDepth);\n\n    // Left\n    positions[offset++].set(-halfWidth, halfHeight, -halfDepth);\n    positions[offset++].set(-halfWidth, halfHeight, halfDepth);\n    positions[offset++].set(-halfWidth, -halfHeight, halfDepth);\n    positions[offset++].set(-halfWidth, -halfHeight, -halfDepth);\n\n    // Right\n    positions[offset++].set(halfWidth, halfHeight, -halfDepth);\n    positions[offset++].set(halfWidth, halfHeight, halfDepth);\n    positions[offset++].set(halfWidth, -halfHeight, halfDepth);\n    positions[offset++].set(halfWidth, -halfHeight, -halfDepth);\n\n    // Front\n    positions[offset++].set(-halfWidth, halfHeight, halfDepth);\n    positions[offset++].set(halfWidth, halfHeight, halfDepth);\n    positions[offset++].set(halfWidth, -halfHeight, halfDepth);\n    positions[offset++].set(-halfWidth, -halfHeight, halfDepth);\n\n    // Back\n    positions[offset++].set(-halfWidth, halfHeight, -halfDepth);\n    positions[offset++].set(halfWidth, halfHeight, -halfDepth);\n    positions[offset++].set(halfWidth, -halfHeight, -halfDepth);\n    positions[offset++].set(-halfWidth, -halfHeight, -halfDepth);\n\n    // Up\n    indices[indicesOffset++] = positionOffset;\n    indices[indicesOffset++] = positionOffset + 1;\n    indices[indicesOffset++] = positionOffset + 1;\n    indices[indicesOffset++] = positionOffset + 2;\n    indices[indicesOffset++] = positionOffset + 2;\n    indices[indicesOffset++] = positionOffset + 3;\n    indices[indicesOffset++] = positionOffset + 3;\n    indices[indicesOffset++] = positionOffset;\n\n    // Down\n    indices[indicesOffset++] = positionOffset + 4;\n    indices[indicesOffset++] = positionOffset + 5;\n    indices[indicesOffset++] = positionOffset + 5;\n    indices[indicesOffset++] = positionOffset + 6;\n    indices[indicesOffset++] = positionOffset + 6;\n    indices[indicesOffset++] = positionOffset + 7;\n    indices[indicesOffset++] = positionOffset + 7;\n    indices[indicesOffset++] = positionOffset + 4;\n\n    // Left\n    indices[indicesOffset++] = positionOffset + 8;\n    indices[indicesOffset++] = positionOffset + 9;\n    indices[indicesOffset++] = positionOffset + 9;\n    indices[indicesOffset++] = positionOffset + 10;\n    indices[indicesOffset++] = positionOffset + 10;\n    indices[indicesOffset++] = positionOffset + 11;\n    indices[indicesOffset++] = positionOffset + 11;\n    indices[indicesOffset++] = positionOffset + 8;\n\n    // Right\n    indices[indicesOffset++] = positionOffset + 12;\n    indices[indicesOffset++] = positionOffset + 13;\n    indices[indicesOffset++] = positionOffset + 13;\n    indices[indicesOffset++] = positionOffset + 14;\n    indices[indicesOffset++] = positionOffset + 14;\n    indices[indicesOffset++] = positionOffset + 15;\n    indices[indicesOffset++] = positionOffset + 15;\n    indices[indicesOffset++] = positionOffset + 12;\n\n    // Front\n    indices[indicesOffset++] = positionOffset + 16;\n    indices[indicesOffset++] = positionOffset + 17;\n    indices[indicesOffset++] = positionOffset + 17;\n    indices[indicesOffset++] = positionOffset + 18;\n    indices[indicesOffset++] = positionOffset + 18;\n    indices[indicesOffset++] = positionOffset + 19;\n    indices[indicesOffset++] = positionOffset + 19;\n    indices[indicesOffset++] = positionOffset + 16;\n\n    // Back\n    indices[indicesOffset++] = positionOffset + 20;\n    indices[indicesOffset++] = positionOffset + 21;\n    indices[indicesOffset++] = positionOffset + 21;\n    indices[indicesOffset++] = positionOffset + 22;\n    indices[indicesOffset++] = positionOffset + 22;\n    indices[indicesOffset++] = positionOffset + 23;\n    indices[indicesOffset++] = positionOffset + 23;\n    indices[indicesOffset++] = positionOffset + 20;\n  }\n\n  /**\n   * Store sphere wireframe mesh data.\n   * The origin located in center of sphere.\n   * @param radius - Sphere radius\n   * @param positions - position array\n   * @param positionOffset - The min of index list\n   * @param indices - index array\n   * @param indicesOffset - index array offset\n   */\n  static createSphereWireframe(\n    radius: number,\n    positions: Vector3[],\n    positionOffset: number,\n    indices: Uint16Array | Uint32Array,\n    indicesOffset: number\n  ): void {\n    WireframePrimitive._shift.set(0, 0, 0);\n    // X\n    WireframePrimitive.createCircleWireframe(\n      radius,\n      0,\n      WireframePrimitive._shift,\n      positions,\n      positionOffset,\n      indices,\n      indicesOffset\n    );\n\n    // Y\n    WireframePrimitive.createCircleWireframe(\n      radius,\n      1,\n      WireframePrimitive._shift,\n      positions,\n      positionOffset + WireframePrimitive.circleVertexCount,\n      indices,\n      indicesOffset + WireframePrimitive.circleIndexCount\n    );\n\n    // Z\n    WireframePrimitive.createCircleWireframe(\n      radius,\n      2,\n      WireframePrimitive._shift,\n      positions,\n      positionOffset + WireframePrimitive.circleVertexCount * 2,\n      indices,\n      indicesOffset + WireframePrimitive.circleIndexCount * 2\n    );\n  }\n\n  /**\n   * Store cone wireframe mesh data.\n   * The origin located in top of cone.\n   * @param radius - The radius of cap\n   * @param height - The height of cone\n   * @param positions - position array\n   * @param positionOffset - The min of index list\n   * @param indices - index array\n   * @param indicesOffset - index array offset\n   */\n  static createConeWireframe(\n    radius: number,\n    height: number,\n    positions: Vector3[],\n    positionOffset: number,\n    indices: Uint16Array | Uint32Array,\n    indicesOffset: number\n  ): void {\n    WireframePrimitive._shift.set(0, -height, 0);\n\n    // Y\n    WireframePrimitive.createCircleWireframe(\n      radius,\n      1,\n      WireframePrimitive._shift,\n      positions,\n      positionOffset,\n      indices,\n      indicesOffset\n    );\n    const indexBegin = positionOffset + WireframePrimitive.circleVertexCount;\n    let offset = indexBegin;\n    positions[offset++].set(0, 0, 0);\n    positions[offset++].set(-radius, -height, 0);\n    positions[offset++].set(radius, -height, 0);\n    positions[offset++].set(0, -height, radius);\n    positions[offset++].set(0, -height, -radius);\n    indicesOffset += WireframePrimitive.circleIndexCount;\n    indices[indicesOffset++] = indexBegin;\n    indices[indicesOffset++] = indexBegin + 1;\n    indices[indicesOffset++] = indexBegin;\n    indices[indicesOffset++] = indexBegin + 2;\n    indices[indicesOffset++] = indexBegin;\n    indices[indicesOffset++] = indexBegin + 3;\n    indices[indicesOffset++] = indexBegin;\n    indices[indicesOffset++] = indexBegin + 4;\n  }\n\n  /**\n   * Store unbound cylinder wireframe mesh data.\n   * The origin located in center of sphere.\n   * @param radius - The radius\n   * @param positions - position array\n   * @param positionOffset - The min of index list\n   * @param indices - index array\n   * @param indicesOffset - index array offset\n   */\n  static createUnboundCylinderWireframe(\n    radius: number,\n    positions: Vector3[],\n    positionOffset: number,\n    indices: Uint16Array | Uint32Array,\n    indicesOffset: number\n  ): void {\n    const height = 5;\n    WireframePrimitive._shift.set(0, 0, 0);\n\n    // Y\n    WireframePrimitive.createCircleWireframe(\n      radius,\n      1,\n      WireframePrimitive._shift,\n      positions,\n      positionOffset,\n      indices,\n      indicesOffset\n    );\n\n    const indexBegin = positionOffset + WireframePrimitive.circleVertexCount;\n    let offset = indexBegin;\n    indicesOffset += WireframePrimitive.circleIndexCount;\n    for (let i = 0; i < 8; i++) {\n      const radian = MathUtil.degreeToRadian(45 * i);\n      positions[offset++].set(radius * Math.cos(radian), 0, radius * Math.sin(radian));\n      positions[offset++].set(radius * Math.cos(radian), -height, radius * Math.sin(radian));\n\n      indices[indicesOffset + i * 2] = indexBegin + 2 * i;\n      indices[indicesOffset + i * 2 + 1] = indexBegin + 2 * i + 1;\n    }\n  }\n\n  /**\n   * Store capsule wireframe mesh data.\n   * The origin located in center of capsule.\n   * @param radius - The radius of the two hemispherical ends\n   * @param height - The height of the cylindrical part, measured between the centers of the hemispherical ends\n   * @param positions - position array\n   * @param positionOffset - The min of index list\n   * @param indices - index array\n   * @param indicesOffset - index array offset\n   */\n  static createCapsuleWireframe(\n    radius: number,\n    height: number,\n    positions: Vector3[],\n    positionOffset: number,\n    indices: Uint16Array | Uint32Array,\n    indicesOffset: number\n  ): void {\n    const circleIndicesCount = WireframePrimitive.circleIndexCount;\n    const vertexCount = WireframePrimitive.circleVertexCount;\n    const halfHeight = height / 2;\n\n    // Y-Top\n    WireframePrimitive._shift.set(0, halfHeight, 0);\n    WireframePrimitive.createCircleWireframe(\n      radius,\n      1,\n      WireframePrimitive._shift,\n      positions,\n      positionOffset,\n      indices,\n      indicesOffset\n    );\n\n    // Y-Bottom\n    WireframePrimitive._shift.set(0, -halfHeight, 0);\n    WireframePrimitive.createCircleWireframe(\n      radius,\n      1,\n      WireframePrimitive._shift,\n      positions,\n      positionOffset + vertexCount,\n      indices,\n      indicesOffset + circleIndicesCount\n    );\n\n    // X-Elliptic\n    WireframePrimitive.createEllipticWireframe(\n      radius,\n      halfHeight,\n      2,\n      positions,\n      positionOffset + vertexCount * 2,\n      indices,\n      indicesOffset + circleIndicesCount * 2\n    );\n\n    // Z-Elliptic\n    WireframePrimitive.createEllipticWireframe(\n      radius,\n      halfHeight,\n      0,\n      positions,\n      positionOffset + vertexCount * 3,\n      indices,\n      indicesOffset + circleIndicesCount * 2 + WireframePrimitive.ellipticIndexCount\n    );\n  }\n\n  /**\n   * Store circle wireframe mesh data.\n   * @param radius - The radius\n   * @param axis - The default direction\n   * @param shift - The default shift\n   * @param positions - position array\n   * @param positionOffset - The min of index list\n   * @param indices - index array\n   * @param indicesOffset - index array offset\n   */\n  static createCircleWireframe(\n    radius: number,\n    axis: number,\n    shift: Vector3,\n    positions: Vector3[],\n    positionOffset: number,\n    indices: Uint16Array | Uint32Array,\n    indicesOffset: number\n  ): void {\n    const vertexCount = WireframePrimitive.circleVertexCount;\n\n    const twoPi = Math.PI * 2;\n    const countReciprocal = 1.0 / vertexCount;\n    let offset = positionOffset;\n    for (let i = 0; i < vertexCount; ++i) {\n      const v = i * countReciprocal;\n      const thetaDelta = v * twoPi;\n\n      switch (axis) {\n        case 0:\n          positions[offset++].set(\n            shift.x,\n            radius * Math.cos(thetaDelta) + shift.y,\n            radius * Math.sin(thetaDelta) + shift.z\n          );\n          break;\n        case 1:\n          positions[offset++].set(\n            radius * Math.cos(thetaDelta) + shift.x,\n            shift.y,\n            radius * Math.sin(thetaDelta) + shift.z\n          );\n          break;\n        case 2:\n          positions[offset++].set(\n            radius * Math.cos(thetaDelta) + shift.x,\n            radius * Math.sin(thetaDelta) + shift.y,\n            shift.z\n          );\n          break;\n      }\n\n      const globalIndex = i + positionOffset;\n      if (i < vertexCount - 1) {\n        indices[indicesOffset + 2 * i] = globalIndex;\n        indices[indicesOffset + 2 * i + 1] = globalIndex + 1;\n      } else {\n        indices[indicesOffset + 2 * i] = globalIndex;\n        indices[indicesOffset + 2 * i + 1] = positionOffset;\n      }\n    }\n  }\n\n  /**\n   * Store elliptic wireframe mesh data.\n   * @param radius - The radius of the two hemispherical ends\n   * @param height - The height of the cylindrical part, measured between the centers of the hemispherical ends\n   * @param axis - The default direction\n   * @param positions - position array\n   * @param positionOffset - The min of index list\n   * @param indices - index array\n   * @param indicesOffset - index array offset\n   */\n  static createEllipticWireframe(\n    radius: number,\n    height: number,\n    axis: number,\n    positions: Vector3[],\n    positionOffset: number,\n    indices: Uint16Array | Uint32Array,\n    indicesOffset: number\n  ): void {\n    const vertexCount = WireframePrimitive.circleVertexCount;\n    const twoPi = Math.PI * 2;\n    const countReciprocal = 1.0 / vertexCount;\n    let offset = positionOffset;\n    for (let i = 0; i < vertexCount; ++i) {\n      const v = i * countReciprocal;\n      const thetaDelta = v * twoPi;\n\n      switch (axis) {\n        case 0:\n          positions[offset++].set(0, radius * Math.sin(thetaDelta) + height, radius * Math.cos(thetaDelta));\n          break;\n        case 1:\n          positions[offset++].set(radius * Math.cos(thetaDelta), height, radius * Math.sin(thetaDelta));\n          break;\n        case 2:\n          positions[offset++].set(radius * Math.cos(thetaDelta), radius * Math.sin(thetaDelta) + height, 0);\n          break;\n      }\n\n      if (i == vertexCount / 2) {\n        height = -height;\n      }\n\n      const globalIndex = i + positionOffset;\n      if (i < vertexCount - 1) {\n        indices[indicesOffset + 2 * i] = globalIndex;\n        indices[indicesOffset + 2 * i + 1] = globalIndex + 1;\n      } else {\n        indices[indicesOffset + 2 * i] = globalIndex;\n        indices[indicesOffset + 2 * i + 1] = positionOffset;\n      }\n    }\n  }\n\n  /**\n   * Store frustum wireframe mesh data.\n   * The origin located in the center of cap.\n   * @param radius - The radius of cap\n   * @param height - The height of cone\n   * @param angle - The angle of cone\n   * @param positions - position array\n   * @param positionOffset - The min of index list\n   * @param indices - index array\n   * @param indicesOffset - index array offset\n   */\n  static createFrustumWireframe(\n    radius: number,\n    height: number,\n    angle: number,\n    positions: Vector3[],\n    positionOffset: number,\n    indices: Uint16Array | Uint32Array,\n    indicesOffset: number\n  ): void {\n    WireframePrimitive._shift.set(0, 0, 0);\n\n    // Z\n    WireframePrimitive.createCircleWireframe(\n      radius,\n      2,\n      WireframePrimitive._shift,\n      positions,\n      positionOffset,\n      indices,\n      indicesOffset\n    );\n\n    WireframePrimitive._shift.set(0, 0, -height);\n    const radian = MathUtil.degreeToRadian(angle);\n    const dirTanA = Math.tan(radian);\n    const bottomRadius = radius + dirTanA * height;\n\n    WireframePrimitive.createCircleWireframe(\n      bottomRadius,\n      2,\n      WireframePrimitive._shift,\n      positions,\n      positionOffset + WireframePrimitive.circleVertexCount,\n      indices,\n      indicesOffset + WireframePrimitive.circleIndexCount\n    );\n\n    const indexBegin = positionOffset + 2 * WireframePrimitive.circleVertexCount;\n    let offset = indexBegin;\n\n    positions[offset++].set(0, 0, 0);\n    positions[offset++].set(0, 0, -height);\n    positions[offset++].set(radius, 0, 0);\n    positions[offset++].set(bottomRadius, 0, -height);\n    positions[offset++].set(-radius, 0, 0);\n    positions[offset++].set(-bottomRadius, 0, -height);\n    positions[offset++].set(0, radius, 0);\n    positions[offset++].set(0, bottomRadius, -height);\n    positions[offset++].set(0, -radius, 0);\n    positions[offset++].set(0, -bottomRadius, -height);\n\n    indicesOffset += 2 * WireframePrimitive.circleIndexCount;\n    indices[indicesOffset++] = indexBegin;\n    indices[indicesOffset++] = indexBegin + 1;\n    indices[indicesOffset++] = indexBegin + 2;\n    indices[indicesOffset++] = indexBegin + 3;\n    indices[indicesOffset++] = indexBegin + 4;\n    indices[indicesOffset++] = indexBegin + 5;\n    indices[indicesOffset++] = indexBegin + 6;\n    indices[indicesOffset++] = indexBegin + 7;\n    indices[indicesOffset++] = indexBegin + 8;\n    indices[indicesOffset++] = indexBegin + 9;\n  }\n\n  /**\n   * Store hemisphere wireframe mesh data.\n   * @param radius - The radius of hemisphere\n   * @param axis - The default direction\n   * @param positions - position array\n   * @param positionOffset - The min of index list\n   * @param indices - index array\n   * @param indicesOffset - index array offset\n   */\n  static createHemisphereWireframe(\n    radius: number,\n    axis: number,\n    positions: Vector3[],\n    positionOffset: number,\n    indices: Uint16Array | Uint32Array,\n    indicesOffset: number\n  ): void {\n    const vertexCount = WireframePrimitive.circleVertexCount / 2;\n    const twoPi = Math.PI;\n    const countReciprocal = 1.0 / vertexCount;\n\n    let offset = positionOffset;\n    for (let i = 0; i < vertexCount + 1; i++) {\n      const v = i * countReciprocal;\n      const thetaDelta = v * twoPi;\n\n      switch (axis) {\n        case 0:\n          positions[offset++].set(radius * Math.sin(thetaDelta), 0, radius * Math.cos(thetaDelta));\n          break;\n        case 1:\n          positions[offset++].set(0, radius * Math.sin(thetaDelta), radius * Math.cos(thetaDelta));\n          break;\n        case 2:\n          positions[offset++].set(-radius * Math.cos(thetaDelta), 0, -radius * Math.sin(thetaDelta));\n          break;\n      }\n\n      const globalIndex = i + positionOffset;\n\n      if (i < vertexCount) {\n        indices[indicesOffset + 2 * i] = globalIndex;\n        indices[indicesOffset + 2 * i + 1] = globalIndex + 1;\n      }\n    }\n\n    indicesOffset += WireframePrimitive.circleVertexCount;\n    for (let i = 0; i < vertexCount + 1; i++) {\n      const v = i * countReciprocal;\n      const thetaDelta = v * twoPi;\n\n      switch (axis) {\n        case 0:\n          positions[offset++].set(radius * Math.sin(thetaDelta), radius * Math.cos(thetaDelta), 0);\n          break;\n        case 1:\n          positions[offset++].set(radius * Math.cos(thetaDelta), radius * Math.sin(thetaDelta), 0);\n          break;\n        case 2:\n          positions[offset++].set(0, -radius * Math.cos(thetaDelta), -radius * Math.sin(thetaDelta));\n          break;\n      }\n\n      const globalIndex = i + positionOffset + vertexCount + 1;\n\n      if (i < vertexCount) {\n        indices[indicesOffset + 2 * i] = globalIndex;\n        indices[indicesOffset + 2 * i + 1] = globalIndex + 1;\n      }\n    }\n\n    WireframePrimitive._shift.set(0, 0, 0);\n    WireframePrimitive.createCircleWireframe(\n      radius,\n      axis,\n      WireframePrimitive._shift,\n      positions,\n      positionOffset + WireframePrimitive.circleVertexCount + 2,\n      indices,\n      indicesOffset + WireframePrimitive.circleVertexCount\n    );\n  }\n}\n","import {\n  BoolUpdateFlag,\n  BoxColliderShape,\n  Camera,\n  CapsuleColliderShape,\n  Collider,\n  ColliderShapeUpAxis,\n  Color,\n  dependentComponents,\n  DirectLight,\n  Entity,\n  GLCapabilityType,\n  Matrix,\n  MeshRenderer,\n  MeshTopology,\n  ModelMesh,\n  PointLight,\n  Quaternion,\n  Renderer,\n  Script,\n  SphereColliderShape,\n  SpotLight,\n  Transform,\n  Vector3,\n  DependentMode,\n  ParticleRenderer,\n  BoxShape,\n  CircleShape,\n  ConeShape,\n  HemisphereShape,\n  SphereShape\n} from \"@galacean/engine\";\nimport { PlainColorMaterial } from \"@galacean/engine-toolkit-custom-material\";\nimport { WireframePrimitive } from \"./WireframePrimitive\";\n\n/**\n * Wireframe Auxiliary Manager.\n * @decorator `@dependentComponents(MeshRenderer)`\n */\n@dependentComponents(MeshRenderer, DependentMode.CheckOnly)\nexport class WireframeManager extends Script {\n  private static _positionPool: Vector3[] = [];\n  private static _ndcPosition: Vector3[] = [\n    new Vector3(-1, 1, -1),\n    new Vector3(1, 1, -1),\n    new Vector3(1, -1, -1),\n    new Vector3(-1, -1, -1)\n  ];\n  private static _tempMatrix: Matrix = new Matrix();\n  private static _tempVector: Vector3 = new Vector3();\n  private static _tempRotation: Quaternion = new Quaternion();\n  private static _tempAxis: Quaternion = new Quaternion();\n  private static readonly _halfSqrt: number = 0.70710678118655;\n\n  private _cameraPositions = [\n    new Vector3(),\n    new Vector3(),\n    new Vector3(),\n    new Vector3(),\n    new Vector3(),\n    new Vector3(),\n    new Vector3(),\n    new Vector3()\n  ];\n  private _localPositions: Vector3[] = [];\n  private _globalPositions: Vector3[] = [];\n  private _indices: Uint16Array | Uint32Array = null;\n  private _indicesCount = 0;\n  private _boundsIndicesCount = 0;\n  private _supportUint32Array: boolean;\n\n  private _wireframeRenderers: Renderer[] = [];\n  private _wireframeElements: WireframeElement[] = [];\n  private _renderer: MeshRenderer;\n  private _material: PlainColorMaterial;\n  private _mesh: ModelMesh;\n\n  private static _getPositionFromPool(positionIndex: number): Vector3 {\n    let position: Vector3;\n    const positionPool = WireframeManager._positionPool;\n    if (positionIndex < positionPool.length) {\n      position = positionPool[positionIndex];\n    } else {\n      position = new Vector3();\n      WireframeManager._positionPool.push(position);\n    }\n    return position;\n  }\n\n  /**\n   * Base color.\n   */\n  get baseColor(): Color {\n    return this._material.baseColor;\n  }\n\n  set baseColor(value: Color) {\n    this._material.baseColor = value;\n  }\n\n  /**\n   * Clear all wireframe.\n   */\n  clear(): void {\n    this._wireframeRenderers.length = 0;\n    this._wireframeElements.length = 0;\n    this._localPositions.length = 0;\n    this._globalPositions.length = 0;\n    this._indicesCount = 0;\n    this._mesh.subMesh.count = 0;\n  }\n\n  /**\n   * Create auxiliary mesh for entity.\n   * @param entity - The entity\n   * @param includeChildren - whether include child entity(default is true)\n   */\n  addEntityWireframe(entity: Entity, includeChildren = true): void {\n    if (includeChildren) {\n      const components = new Array<Camera | SpotLight | DirectLight | PointLight | Collider | ParticleRenderer>();\n      entity.getComponentsIncludeChildren(Camera, components);\n      for (let i = 0, n = components.length; i < n; i++) {\n        this.addCameraWireframe(<Camera>components[i]);\n      }\n      let componentsOffset = components.length;\n\n      entity.getComponentsIncludeChildren(SpotLight, components);\n      for (let i = componentsOffset, n = components.length; i < n; i++) {\n        this.addSpotLightWireframe(<SpotLight>components[i]);\n      }\n      componentsOffset = components.length;\n\n      entity.getComponentsIncludeChildren(DirectLight, components);\n      for (let i = componentsOffset, n = components.length; i < n; i++) {\n        this.addDirectLightWireframe(<DirectLight>components[i]);\n      }\n      componentsOffset = components.length;\n\n      entity.getComponentsIncludeChildren(PointLight, components);\n      for (let i = componentsOffset, n = components.length; i < n; i++) {\n        this.addPointLightWireframe(<PointLight>components[i]);\n      }\n      componentsOffset = components.length;\n\n      entity.getComponentsIncludeChildren(Collider, components);\n      for (let i = componentsOffset, n = components.length; i < n; i++) {\n        this.addCollideWireframe(<Collider>components[i]);\n      }\n      componentsOffset = components.length;\n\n      entity.getComponentsIncludeChildren(ParticleRenderer, components);\n      for (let i = componentsOffset, n = components.length; i < n; i++) {\n        this.addParticleRendererEmissionShapeWireframe(<ParticleRenderer>components[i]);\n      }\n    } else {\n      const camera = entity.getComponent(Camera);\n      camera && this.addCameraWireframe(camera);\n      const spotLight = entity.getComponent(SpotLight);\n      spotLight && this.addSpotLightWireframe(spotLight);\n      const directLight = entity.getComponent(DirectLight);\n      directLight && this.addDirectLightWireframe(directLight);\n      const pointLight = entity.getComponent(PointLight);\n      pointLight && this.addPointLightWireframe(pointLight);\n      const collider = entity.getComponent(Collider);\n      collider && this.addCollideWireframe(collider);\n      const particle = entity.getComponent(ParticleRenderer);\n      particle && this.addParticleRendererEmissionShapeWireframe(particle);\n    }\n  }\n\n  /**\n   * Create auxiliary mesh for camera.\n   * @param camera - The Camera\n   */\n  addCameraWireframe(camera: Camera): void {\n    const transform = camera.entity.transform;\n    const inverseProj = camera.projectionMatrix.clone();\n    inverseProj.invert();\n\n    const localPositions = this._localPositions;\n    const positionsOffset = localPositions.length;\n    this._wireframeElements.push(new WireframeElement(transform, positionsOffset));\n\n    const ndcPosition = WireframeManager._ndcPosition;\n    // front\n    for (let i = 0; i < 4; i++) {\n      const newPosition = this._cameraPositions[i];\n      newPosition.copyFrom(ndcPosition[i]);\n      newPosition.transformCoordinate(inverseProj);\n      localPositions.push(newPosition);\n    }\n\n    // back\n    for (let i = 0; i < 4; i++) {\n      const newPosition = this._cameraPositions[i + 4];\n      newPosition.copyFrom(ndcPosition[i]);\n      newPosition.z = 1;\n      newPosition.transformCoordinate(inverseProj);\n      localPositions.push(newPosition);\n    }\n\n    this._growthIndexMemory(24);\n    const indices = this._indices;\n    indices[this._indicesCount++] = positionsOffset;\n    indices[this._indicesCount++] = positionsOffset + 1;\n    indices[this._indicesCount++] = positionsOffset + 1;\n    indices[this._indicesCount++] = positionsOffset + 2;\n    indices[this._indicesCount++] = positionsOffset + 2;\n    indices[this._indicesCount++] = positionsOffset + 3;\n    indices[this._indicesCount++] = positionsOffset + 3;\n    indices[this._indicesCount++] = positionsOffset; // front\n    indices[this._indicesCount++] = positionsOffset;\n    indices[this._indicesCount++] = positionsOffset + 4;\n    indices[this._indicesCount++] = positionsOffset + 1;\n    indices[this._indicesCount++] = positionsOffset + 5;\n    indices[this._indicesCount++] = positionsOffset + 2;\n    indices[this._indicesCount++] = positionsOffset + 6;\n    indices[this._indicesCount++] = positionsOffset + 3;\n    indices[this._indicesCount++] = positionsOffset + 7; // link\n    indices[this._indicesCount++] = positionsOffset + 4;\n    indices[this._indicesCount++] = positionsOffset + 5;\n    indices[this._indicesCount++] = positionsOffset + 5;\n    indices[this._indicesCount++] = positionsOffset + 6;\n    indices[this._indicesCount++] = positionsOffset + 6;\n    indices[this._indicesCount++] = positionsOffset + 7;\n    indices[this._indicesCount++] = positionsOffset + 7;\n    indices[this._indicesCount++] = positionsOffset + 4; // back\n  }\n\n  /**\n   * Create auxiliary mesh for spot light.\n   * @param light - The SpotLight\n   */\n  addSpotLightWireframe(light: SpotLight): void {\n    const height = light.distance;\n    const radius = Math.tan(light.angle / 2) * height;\n\n    const positionsOffset = this._localPositions.length;\n    const coneIndicesCount = WireframePrimitive.coneIndexCount;\n\n    this._growthIndexMemory(coneIndicesCount);\n    this._growthPosition(WireframePrimitive.conePositionCount);\n    const { _indices: indices, _localPositions: localPositions } = this;\n    WireframePrimitive.createConeWireframe(\n      radius,\n      height,\n      localPositions,\n      positionsOffset,\n      indices,\n      this._indicesCount\n    );\n    this._indicesCount += coneIndicesCount;\n    // rotation to default transform forward direction(-Z)\n    this._rotateAroundX(positionsOffset);\n\n    this._wireframeElements.push(new WireframeElement(light.entity.transform, positionsOffset));\n  }\n\n  /**\n   * Create auxiliary mesh for point light.\n   * @param light - The PointLight\n   */\n  addPointLightWireframe(light: PointLight): void {\n    const positionsOffset = this._localPositions.length;\n    const sphereIndicesCount = WireframePrimitive.sphereIndexCount;\n\n    this._growthIndexMemory(sphereIndicesCount);\n    this._growthPosition(WireframePrimitive.spherePositionCount);\n    const { _indices: indices, _localPositions: localPositions } = this;\n    WireframePrimitive.createSphereWireframe(\n      light.distance,\n      localPositions,\n      positionsOffset,\n      indices,\n      this._indicesCount\n    );\n    this._indicesCount += sphereIndicesCount;\n\n    this._wireframeElements.push(new WireframeElement(light.entity.transform, positionsOffset));\n  }\n\n  /**\n   * Create auxiliary mesh for directional light.\n   * @param light - The DirectLight\n   */\n  addDirectLightWireframe(light: DirectLight): void {\n    const positionsOffset = this._localPositions.length;\n    const unboundCylinderIndicesCount = WireframePrimitive.unboundCylinderIndexCount;\n\n    this._growthIndexMemory(unboundCylinderIndicesCount);\n    this._growthPosition(WireframePrimitive.unboundCylinderPositionCount);\n    const { _indices: indices, _localPositions: localPositions } = this;\n    WireframePrimitive.createUnboundCylinderWireframe(1, localPositions, positionsOffset, indices, this._indicesCount);\n    this._indicesCount += unboundCylinderIndicesCount;\n    // rotation to default transform forward direction(-Z)\n    this._rotateAroundX(positionsOffset);\n\n    this._wireframeElements.push(new WireframeElement(light.entity.transform, positionsOffset));\n  }\n\n  /**\n   * Create auxiliary mesh for renderer axis-aligned boundingbox.\n   * @param renderer - The Renderer\n   */\n  addRendererWireframe(renderer: Renderer): void {\n    this._boundsIndicesCount += WireframePrimitive.cuboidIndexCount;\n    this._wireframeRenderers.push(renderer);\n  }\n\n  /**\n   * Create auxiliary mesh for collider.\n   * @param collider - The Collider\n   */\n  addCollideWireframe(collider: Collider): void {\n    const shapes = collider.shapes;\n    for (let i = 0, n = shapes.length; i < n; i++) {\n      const shape = shapes[i];\n      if (shape instanceof BoxColliderShape) {\n        this.addBoxColliderShapeWireframe(shape);\n      } else if (shape instanceof SphereColliderShape) {\n        this.addSphereColliderShapeWireframe(shape);\n      } else if (shape instanceof CapsuleColliderShape) {\n        this.addCapsuleColliderShapeWireframe(shape);\n      }\n    }\n  }\n\n  /**\n   * Create auxiliary mesh for box collider shape.\n   * @param shape - The BoxColliderShape\n   */\n  addBoxColliderShapeWireframe(shape: BoxColliderShape): void {\n    const transform = shape.collider.entity.transform;\n    const worldScale = transform.lossyWorldScale;\n    const { position, rotation, size } = shape;\n    const { _tempVector: tempVector, _tempRotation: tempRotation } = WireframeManager;\n\n    const positionsOffset = this._localPositions.length;\n\n    const cuboidIndicesCount = WireframePrimitive.cuboidIndexCount;\n    this._growthIndexMemory(cuboidIndicesCount);\n    this._growthPosition(WireframePrimitive.cuboidPositionCount);\n    const { _indices: indices, _localPositions: localPositions } = this;\n    WireframePrimitive.createCuboidWireframe(\n      worldScale.x * size.x,\n      worldScale.y * size.y,\n      worldScale.z * size.z,\n      localPositions,\n      positionsOffset,\n      indices,\n      this._indicesCount\n    );\n    Quaternion.rotationYawPitchRoll(rotation.x, rotation.y, rotation.z, tempRotation);\n    this._localRotation(positionsOffset, tempRotation);\n    Vector3.multiply(position, worldScale, tempVector);\n    this._localTranslate(positionsOffset, tempVector);\n\n    this._indicesCount += cuboidIndicesCount;\n    this._wireframeElements.push(new WireframeElement(transform, positionsOffset));\n  }\n\n  /**\n   * Create auxiliary mesh for sphere collider shape.\n   * @param shape - The SphereColliderShape\n   */\n  addSphereColliderShapeWireframe(shape: SphereColliderShape): void {\n    const transform = shape.collider.entity.transform;\n    const worldScale = transform.lossyWorldScale;\n    const { position, rotation, radius } = shape;\n    const { _tempVector: tempVector, _tempRotation: tempRotation } = WireframeManager;\n\n    const positionsOffset = this._localPositions.length;\n\n    const sphereIndicesCount = WireframePrimitive.sphereIndexCount;\n    this._growthIndexMemory(sphereIndicesCount);\n    this._growthPosition(WireframePrimitive.spherePositionCount);\n    const { _indices: indices, _localPositions: localPositions } = this;\n    WireframePrimitive.createSphereWireframe(\n      Math.max(worldScale.x, worldScale.y, worldScale.z) * radius,\n      localPositions,\n      positionsOffset,\n      indices,\n      this._indicesCount\n    );\n    Quaternion.rotationYawPitchRoll(rotation.x, rotation.y, rotation.z, tempRotation);\n    this._localRotation(positionsOffset, tempRotation);\n    Vector3.multiply(position, worldScale, tempVector);\n    this._localTranslate(positionsOffset, tempVector);\n\n    this._indicesCount += sphereIndicesCount;\n    this._wireframeElements.push(new WireframeElement(transform, positionsOffset));\n  }\n\n  /**\n   * Create auxiliary mesh for capsule collider shape.\n   * @param shape - The CapsuleColliderShape\n   */\n  addCapsuleColliderShapeWireframe(shape: CapsuleColliderShape): void {\n    const transform = shape.collider.entity.transform;\n    const worldScale = transform.lossyWorldScale;\n    const maxScale = Math.max(worldScale.x, worldScale.y, worldScale.z);\n    const { radius, height, upAxis, position, rotation } = shape;\n    const {\n      _tempVector: tempVector,\n      _tempRotation: tempRotation,\n      _tempAxis: tempAxis,\n      _halfSqrt: halfSqrt\n    } = WireframeManager;\n\n    const positionsOffset = this._localPositions.length;\n\n    const capsuleIndicesCount = WireframePrimitive.capsuleIndexCount;\n    this._growthIndexMemory(capsuleIndicesCount);\n    this._growthPosition(WireframePrimitive.capsulePositionCount);\n    const { _indices: indices, _localPositions: localPositions } = this;\n    WireframePrimitive.createCapsuleWireframe(\n      maxScale * radius,\n      maxScale * height,\n      localPositions,\n      positionsOffset,\n      indices,\n      this._indicesCount\n    );\n    switch (upAxis) {\n      case ColliderShapeUpAxis.X:\n        tempAxis.set(0, 0, halfSqrt, halfSqrt);\n        break;\n      case ColliderShapeUpAxis.Y:\n        tempAxis.set(0, 0, 0, 1);\n        break;\n      case ColliderShapeUpAxis.Z:\n        tempAxis.set(halfSqrt, 0, 0, halfSqrt);\n    }\n    Quaternion.rotationYawPitchRoll(rotation.x, rotation.y, rotation.z, tempRotation);\n    Quaternion.multiply(tempRotation, tempAxis, tempRotation);\n    this._localRotation(positionsOffset, tempRotation);\n    Vector3.multiply(position, worldScale, tempVector);\n    this._localTranslate(positionsOffset, tempVector);\n\n    this._indicesCount += capsuleIndicesCount;\n    this._wireframeElements.push(new WireframeElement(transform, positionsOffset));\n  }\n\n  addParticleRendererEmissionShapeWireframe(particleRenderer: ParticleRenderer): void {\n    if (particleRenderer.generator.emission.enabled) {\n      const shape = particleRenderer.generator.emission.shape;\n      const transform = particleRenderer.entity.transform;\n      switch (shape?.shapeType) {\n        case 0:\n          this.addBoxParticleShapeWireframe(shape as BoxShape, transform);\n          break;\n        case 1:\n          this.addCircleParticleShapeWireframe(shape as CircleShape, transform);\n          break;\n        case 2:\n          this.addConeParticleShapeWireframe(shape as ConeShape, transform);\n          break;\n        case 3:\n          this.addHemisphereParticleShapeWireframe(shape as HemisphereShape, transform);\n          break;\n        case 4:\n          this.addSphereParticleShapeWireframe(shape as SphereShape, transform);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  addBoxParticleShapeWireframe(shape: BoxShape, transform: Transform): void {\n    const { size } = shape;\n\n    const positionsOffset = this._localPositions.length;\n\n    const cuboidIndicesCount = WireframePrimitive.cuboidIndexCount;\n    this._growthIndexMemory(cuboidIndicesCount);\n    this._growthPosition(WireframePrimitive.cuboidPositionCount);\n    const { _indices: indices, _localPositions: localPositions } = this;\n    WireframePrimitive.createCuboidWireframe(\n      size.x,\n      size.y,\n      size.z,\n      localPositions,\n      positionsOffset,\n      indices,\n      this._indicesCount\n    );\n\n    this._indicesCount += cuboidIndicesCount;\n    this._wireframeElements.push(new WireframeElement(transform, positionsOffset, false));\n  }\n\n  addCircleParticleShapeWireframe(shape: CircleShape, transform: Transform): void {\n    const { radius } = shape;\n\n    const positionsOffset = this._localPositions.length;\n\n    const circleIndicesCount = WireframePrimitive.circleIndexCount;\n    this._growthIndexMemory(circleIndicesCount);\n    this._growthPosition(WireframePrimitive.circlePositionCount);\n    const { _indices: indices, _localPositions: localPositions } = this;\n    WireframePrimitive.createCircleWireframe(\n      radius,\n      0,\n      new Vector3(),\n      localPositions,\n      positionsOffset,\n      indices,\n      this._indicesCount\n    );\n    this._indicesCount += circleIndicesCount;\n    this._wireframeElements.push(new WireframeElement(transform, positionsOffset, false));\n  }\n\n  addConeParticleShapeWireframe(shape: ConeShape, transform: Transform): void {\n    const { radius, length, angle } = shape;\n\n    const positionsOffset = this._localPositions.length;\n\n    const frustumIndicesCount = WireframePrimitive.frustumIndexCount;\n    this._growthIndexMemory(frustumIndicesCount);\n    this._growthPosition(WireframePrimitive.frustumPositionCount);\n    const { _indices: indices, _localPositions: localPositions } = this;\n    WireframePrimitive.createFrustumWireframe(\n      radius,\n      length,\n      angle,\n      localPositions,\n      positionsOffset,\n      indices,\n      this._indicesCount\n    );\n    this._indicesCount += frustumIndicesCount;\n    this._wireframeElements.push(new WireframeElement(transform, positionsOffset, false));\n  }\n\n  addHemisphereParticleShapeWireframe(shape: HemisphereShape, transform: Transform): void {\n    const { radius } = shape;\n\n    const positionsOffset = this._localPositions.length;\n\n    const hemisphereIndicesCount = WireframePrimitive.hemisphereIndexCount;\n    this._growthIndexMemory(hemisphereIndicesCount);\n    this._growthPosition(WireframePrimitive.hemispherePositionCount);\n    const { _indices: indices, _localPositions: localPositions } = this;\n    WireframePrimitive.createHemisphereWireframe(\n      radius,\n      2,\n      localPositions,\n      positionsOffset,\n      indices,\n      this._indicesCount\n    );\n    this._indicesCount += hemisphereIndicesCount;\n    this._wireframeElements.push(new WireframeElement(transform, positionsOffset, false));\n  }\n\n  addSphereParticleShapeWireframe(shape: SphereShape, transform: Transform): void {\n    const { radius } = shape;\n\n    const positionsOffset = this._localPositions.length;\n\n    const sphereIndicesCount = WireframePrimitive.sphereIndexCount;\n    this._growthIndexMemory(sphereIndicesCount);\n    this._growthPosition(WireframePrimitive.spherePositionCount);\n    const { _indices: indices, _localPositions: localPositions } = this;\n    WireframePrimitive.createSphereWireframe(radius, localPositions, positionsOffset, indices, this._indicesCount);\n    this._indicesCount += sphereIndicesCount;\n    this._wireframeElements.push(new WireframeElement(transform, positionsOffset, false));\n  }\n\n  override onAwake(): void {\n    const engine = this.engine;\n    const mesh = new ModelMesh(engine);\n    const material = new PlainColorMaterial(engine);\n    const renderer = this.entity.getComponent(MeshRenderer);\n    renderer.castShadows = false;\n    renderer.receiveShadows = false;\n    // @ts-ignore\n    const supportUint32Array = engine._hardwareRenderer.canIUse(GLCapabilityType.elementIndexUint);\n\n    mesh.addSubMesh(0, this._indicesCount, MeshTopology.Lines);\n    renderer.mesh = mesh;\n    renderer.setMaterial(material);\n\n    const { bounds } = mesh;\n    bounds.min.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n    bounds.max.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n    this._mesh = mesh;\n    this._material = material;\n    this._renderer = renderer;\n    this._indices = supportUint32Array ? new Uint32Array(128) : new Uint16Array(128);\n    this._supportUint32Array = supportUint32Array;\n  }\n\n  override onEnable(): void {\n    this._renderer.enabled = true;\n  }\n\n  override onDisable(): void {\n    this._renderer.enabled = false;\n  }\n\n  override onLateUpdate(deltaTime: number): void {\n    const {\n      _mesh: mesh,\n      _localPositions: localPositions,\n      _globalPositions: globalPositions,\n      _wireframeElements: wireframeElements,\n      _wireframeRenderers: wireframeRenderers,\n      _indices: indices\n    } = this;\n\n    // update local to world geometry\n    const localPositionLength = localPositions.length;\n    globalPositions.length = localPositionLength;\n    let positionIndex = 0;\n    let needUpdate = false;\n    for (let i = 0, n = wireframeElements.length; i < n; i++) {\n      const wireframeElement = wireframeElements[i];\n      const beginIndex = wireframeElement.transformRanges;\n      const endIndex = i < n - 1 ? wireframeElements[i + 1].transformRanges : localPositionLength;\n      if (wireframeElement.updateFlag.flag) {\n        const transform = wireframeElement.transform;\n        const worldMatrix = WireframeManager._tempMatrix;\n        if (wireframeElement.isScaleIgnored) {\n          Matrix.rotationTranslation(transform.worldRotationQuaternion, transform.worldPosition, worldMatrix);\n        } else {\n          worldMatrix.copyFrom(transform.worldMatrix);\n        }\n\n        for (let j = beginIndex; j < endIndex; j++) {\n          const localPosition = localPositions[positionIndex];\n          const globalPosition = WireframeManager._getPositionFromPool(positionIndex);\n          Vector3.transformCoordinate(localPosition, worldMatrix, globalPosition);\n          globalPositions[positionIndex] = globalPosition;\n          positionIndex++;\n        }\n        wireframeElement.updateFlag.flag = false;\n        needUpdate = true;\n      } else {\n        positionIndex += endIndex - beginIndex;\n      }\n    }\n\n    // update world-space geometry\n    this._growthIndexMemory(this._boundsIndicesCount);\n    let indicesCount = this._indicesCount;\n    for (let i = 0; i < wireframeRenderers.length; i++) {\n      const renderer = wireframeRenderers[i];\n      const bounds = renderer.bounds;\n      const tempVector = WireframeManager._tempVector;\n      bounds.getExtent(tempVector);\n\n      const positionsOffset = globalPositions.length;\n      WireframePrimitive.createCuboidWireframe(\n        tempVector.x * 2,\n        tempVector.y * 2,\n        tempVector.z * 2,\n        globalPositions,\n        positionsOffset,\n        indices,\n        indicesCount\n      );\n      bounds.getCenter(tempVector);\n      for (let i = positionsOffset; i < globalPositions.length; i++) {\n        const position = globalPositions[i];\n        position.add(tempVector);\n      }\n      indicesCount += WireframePrimitive.cuboidIndexCount;\n    }\n\n    if (wireframeRenderers.length > 0 || needUpdate) {\n      mesh.setPositions(globalPositions);\n      mesh.setIndices(this._indices);\n      mesh.uploadData(false);\n      mesh.subMesh.count = indicesCount;\n    }\n\n    if (indicesCount === 0) {\n      this._renderer.setMaterial(null);\n    } else {\n      this._renderer.setMaterial(this._material);\n    }\n  }\n\n  private _growthIndexMemory(length: number): void {\n    const indices = this._indices;\n    const neededLength = this._indicesCount + length;\n    if (neededLength > indices.length) {\n      const maxLength = this._supportUint32Array ? 4294967295 : 65535;\n      if (neededLength > maxLength) {\n        throw Error(\"The vertex count is over limit.\");\n      }\n\n      const newIndices = this._supportUint32Array ? new Uint32Array(neededLength) : new Uint16Array(neededLength);\n      newIndices.set(indices);\n      this._indices = newIndices;\n    }\n  }\n\n  private _growthPosition(length: number): void {\n    const position = this._localPositions;\n    for (let i = 0; i < length; i++) {\n      position.push(new Vector3());\n    }\n  }\n\n  private _localTranslate(positionsOffset: number, offset: Vector3) {\n    const localPositions = this._localPositions;\n    for (let i = positionsOffset; i < localPositions.length; i++) {\n      const position = localPositions[i];\n      position.add(offset);\n    }\n  }\n\n  private _localRotation(positionsOffset: number, rotation: Quaternion) {\n    const localPositions = this._localPositions;\n    for (let i = positionsOffset; i < localPositions.length; i++) {\n      const position = localPositions[i];\n      Vector3.transformByQuat(position, rotation, position);\n    }\n  }\n\n  private _rotateAroundX(positionsOffset: number) {\n    const localPositions = this._localPositions;\n    for (let i = positionsOffset; i < localPositions.length; i++) {\n      const position = localPositions[i];\n      const py = position.y;\n      const pz = position.z;\n      position.z = py;\n      position.y = -pz;\n    }\n  }\n}\n\n/**\n * @internal\n * Store Wireframe element info.\n */\nclass WireframeElement {\n  updateFlag: BoolUpdateFlag;\n\n  constructor(public transform: Transform, public transformRanges: number, public isScaleIgnored: boolean = true) {\n    this.updateFlag = transform.registerWorldChangeFlag();\n  }\n}\n","import {\n  Color,\n  dependentComponents,\n  DependentMode,\n  GLCapabilityType,\n  Matrix,\n  MeshRenderer,\n  MeshTopology,\n  ModelMesh,\n  Script,\n  Vector3\n} from \"@galacean/engine\";\nimport { WireframePrimitive } from \"./WireframePrimitive\";\nimport { PlainColorMaterial } from \"@galacean/engine-toolkit-custom-material\";\n\n/**\n * Line Drawer.\n * @decorator `@dependentComponents(MeshRenderer)`\n */\n@dependentComponents(MeshRenderer, DependentMode.CheckOnly)\nexport class LineDrawer extends Script {\n  private static _positions: Vector3[] = [];\n  private static _positionCount: number = 0;\n  private static _indices: Uint16Array | Uint32Array;\n  private static _indicesCount: number = 0;\n  private static _supportUint32Array: boolean;\n  private _renderer: MeshRenderer;\n  private _material: PlainColorMaterial;\n  private _mesh: ModelMesh;\n\n  /**\n   * The LineDrawer.matrix stores the position, rotation and scale of the LineDrawer.\n   * By default, LineDrawer always uses world coordinates.\n   * The default LineDrawer.matrix transforms the world coordinates using a default identity matrix.\n   */\n  static matrix: Matrix = null;\n\n  /**\n   * Color of the material.\n   * By default, color is (1,1,1,1).\n   */\n  set color(value: Color) {\n    this._material.baseColor.copyFrom(value);\n  }\n\n  /**\n   * Draws a line starting at from towards to.\n   * @param from - from position\n   * @param to - to position\n   */\n  static drawLine(from: Vector3, to: Vector3) {\n    LineDrawer._growthPosition(2);\n    LineDrawer._growthIndexMemory(2);\n    LineDrawer._indices[LineDrawer._indicesCount++] = LineDrawer._positionCount;\n    LineDrawer._indices[LineDrawer._indicesCount++] = LineDrawer._positionCount + 1;\n    if (LineDrawer.matrix == null) {\n      LineDrawer._positions[LineDrawer._positionCount++].copyFrom(from);\n      LineDrawer._positions[LineDrawer._positionCount++].copyFrom(to);\n    } else {\n      Vector3.transformCoordinate(from, LineDrawer.matrix, LineDrawer._positions[LineDrawer._positionCount++]);\n      Vector3.transformCoordinate(to, LineDrawer.matrix, LineDrawer._positions[LineDrawer._positionCount++]);\n    }\n  }\n\n  /**\n   * Draws a rectangle at four vertex\n   * @param leftTop - left top position\n   * @param rightTop - right top position\n   * @param rightBottom - right bottom position\n   * @param leftBottom - left bottom position\n   */\n  static drawRect(leftTop: Vector3, rightTop: Vector3, rightBottom: Vector3, leftBottom: Vector3) {\n    LineDrawer._growthPosition(4);\n    LineDrawer._growthIndexMemory(8);\n    LineDrawer._indices[LineDrawer._indicesCount++] = LineDrawer._positionCount;\n    LineDrawer._indices[LineDrawer._indicesCount++] = LineDrawer._positionCount + 1;\n    LineDrawer._indices[LineDrawer._indicesCount++] = LineDrawer._positionCount + 2;\n    LineDrawer._indices[LineDrawer._indicesCount++] = LineDrawer._positionCount + 1;\n    LineDrawer._indices[LineDrawer._indicesCount++] = LineDrawer._positionCount + 2;\n    LineDrawer._indices[LineDrawer._indicesCount++] = LineDrawer._positionCount + 3;\n    LineDrawer._indices[LineDrawer._indicesCount++] = LineDrawer._positionCount;\n    LineDrawer._indices[LineDrawer._indicesCount++] = LineDrawer._positionCount + 3;\n\n    if (LineDrawer.matrix == null) {\n      LineDrawer._positions[LineDrawer._positionCount++].copyFrom(leftTop);\n      LineDrawer._positions[LineDrawer._positionCount++].copyFrom(rightTop);\n      LineDrawer._positions[LineDrawer._positionCount++].copyFrom(rightBottom);\n      LineDrawer._positions[LineDrawer._positionCount++].copyFrom(leftBottom);\n    } else {\n      Vector3.transformCoordinate(leftTop, LineDrawer.matrix, LineDrawer._positions[LineDrawer._positionCount++]);\n      Vector3.transformCoordinate(rightTop, LineDrawer.matrix, LineDrawer._positions[LineDrawer._positionCount++]);\n      Vector3.transformCoordinate(rightBottom, LineDrawer.matrix, LineDrawer._positions[LineDrawer._positionCount++]);\n      Vector3.transformCoordinate(leftBottom, LineDrawer.matrix, LineDrawer._positions[LineDrawer._positionCount++]);\n    }\n  }\n\n  /**\n   * Draws a wireframe sphere with center and radius.\n   * @param radius - sphere radius\n   * @param center - sphere center\n   */\n  static drawSphere(radius: number, center: Vector3) {\n    const positionCount = WireframePrimitive.spherePositionCount;\n    const indexCount = WireframePrimitive.sphereIndexCount;\n    const globalPosition = LineDrawer._positions;\n\n    LineDrawer._growthPosition(positionCount);\n    LineDrawer._growthIndexMemory(indexCount);\n    WireframePrimitive.createSphereWireframe(\n      radius,\n      globalPosition,\n      LineDrawer._positionCount,\n      LineDrawer._indices,\n      LineDrawer._indicesCount\n    );\n    for (let i = 0; i < positionCount; i++) {\n      const pos = globalPosition[LineDrawer._positionCount + i];\n      pos.add(center);\n      if (LineDrawer.matrix != null) {\n        Vector3.transformCoordinate(pos, LineDrawer.matrix, pos);\n      }\n    }\n\n    LineDrawer._positionCount += positionCount;\n    LineDrawer._indicesCount += indexCount;\n  }\n\n  /**\n   * Draw a wireframe box with center and size.\n   * @param width - width\n   * @param height - height\n   * @param depth - depth\n   * @param center - center\n   */\n  static drawCuboid(width: number, height: number, depth: number, center: Vector3) {\n    const positionCount = WireframePrimitive.cuboidPositionCount;\n    const indexCount = WireframePrimitive.cuboidIndexCount;\n    const globalPosition = LineDrawer._positions;\n\n    LineDrawer._growthPosition(positionCount);\n    LineDrawer._growthIndexMemory(indexCount);\n    WireframePrimitive.createCuboidWireframe(\n      width,\n      height,\n      depth,\n      globalPosition,\n      LineDrawer._positionCount,\n      LineDrawer._indices,\n      LineDrawer._indicesCount\n    );\n    for (let i = 0; i < positionCount; i++) {\n      const pos = globalPosition[LineDrawer._positionCount + i];\n      pos.add(center);\n      if (LineDrawer.matrix != null) {\n        Vector3.transformCoordinate(pos, LineDrawer.matrix, pos);\n      }\n    }\n\n    LineDrawer._positionCount += positionCount;\n    LineDrawer._indicesCount += indexCount;\n  }\n\n  /**\n   * Draw a wireframe capsule with radius, height and center.\n   * @param radius - The radius of the two hemispherical ends\n   * @param height - The height of the cylindrical part, measured between the centers of the hemispherical ends\n   * @param center - The center\n   */\n  static drawCapsule(radius: number, height: number, center: Vector3) {\n    const positionCount = WireframePrimitive.capsulePositionCount;\n    const indexCount = WireframePrimitive.capsuleIndexCount;\n    const globalPosition = LineDrawer._positions;\n\n    LineDrawer._growthPosition(positionCount);\n    LineDrawer._growthIndexMemory(indexCount);\n    WireframePrimitive.createCapsuleWireframe(\n      radius,\n      height,\n      globalPosition,\n      LineDrawer._positionCount,\n      LineDrawer._indices,\n      LineDrawer._indicesCount\n    );\n    for (let i = 0; i < positionCount; i++) {\n      const pos = globalPosition[LineDrawer._positionCount + i];\n      pos.add(center);\n      if (LineDrawer.matrix != null) {\n        Vector3.transformCoordinate(pos, LineDrawer.matrix, pos);\n      }\n    }\n\n    LineDrawer._positionCount += positionCount;\n    LineDrawer._indicesCount += indexCount;\n  }\n\n  /**\n   * Draw a wireframe circle with radius, axis and center.\n   * @param radius - The radius\n   * @param axis - The axis\n   * @param center - The center\n   */\n  static drawCircle(radius: number, axis: AxisType, center: Vector3) {\n    WireframePrimitive._shift.set(0, 0, 0);\n    const positionCount = WireframePrimitive.circlePositionCount;\n    const indexCount = WireframePrimitive.circleIndexCount;\n    const globalPosition = LineDrawer._positions;\n\n    LineDrawer._growthPosition(positionCount);\n    LineDrawer._growthIndexMemory(indexCount);\n    WireframePrimitive.createCircleWireframe(\n      radius,\n      axis,\n      WireframePrimitive._shift,\n      globalPosition,\n      LineDrawer._positionCount,\n      LineDrawer._indices,\n      LineDrawer._indicesCount\n    );\n    for (let i = 0; i < positionCount; i++) {\n      const pos = globalPosition[LineDrawer._positionCount + i];\n      pos.add(center);\n      if (LineDrawer.matrix != null) {\n        Vector3.transformCoordinate(pos, LineDrawer.matrix, pos);\n      }\n    }\n\n    LineDrawer._positionCount += positionCount;\n    LineDrawer._indicesCount += indexCount;\n  }\n\n  static flush() {\n    LineDrawer._positionCount = 0;\n    LineDrawer._indicesCount = 0;\n  }\n\n  override onAwake(): void {\n    const engine = this.engine;\n    const mesh = new ModelMesh(engine);\n    const material = new PlainColorMaterial(engine);\n    const renderer = this.entity.getComponent(MeshRenderer);\n    renderer.castShadows = false;\n    renderer.receiveShadows = false;\n    // @ts-ignore\n    const supportUint32Array = engine._hardwareRenderer.canIUse(GLCapabilityType.elementIndexUint);\n\n    // @ts-ignore\n    mesh._enableVAO = false;\n    mesh.addSubMesh(0, LineDrawer._indicesCount, MeshTopology.Lines);\n    renderer.mesh = mesh;\n    renderer.setMaterial(material);\n\n    const { bounds } = mesh;\n    bounds.min.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n    bounds.max.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n    this._mesh = mesh;\n    this._material = material;\n    this._renderer = renderer;\n    LineDrawer._indices = supportUint32Array ? new Uint32Array(128) : new Uint16Array(128);\n    LineDrawer._supportUint32Array = supportUint32Array;\n  }\n\n  override onLateUpdate(deltaTime: number) {\n    const { _mesh: mesh } = this;\n\n    if (LineDrawer._positionCount > 0) {\n      mesh.setPositions(LineDrawer._positions);\n      mesh.setIndices(LineDrawer._indices);\n      mesh.uploadData(false);\n      mesh.subMesh.count = LineDrawer._indicesCount;\n      this._renderer.setMaterial(this._material);\n    } else {\n      this._renderer.setMaterial(null);\n    }\n\n    LineDrawer.flush();\n  }\n\n  private static _growthIndexMemory(length: number): void {\n    const indices = LineDrawer._indices;\n    const neededLength = LineDrawer._indicesCount + length;\n    if (neededLength > indices.length) {\n      const maxLength = LineDrawer._supportUint32Array ? 4294967295 : 65535;\n      if (neededLength > maxLength) {\n        throw Error(\"The vertex count is over limit.\");\n      }\n\n      const newIndices = LineDrawer._supportUint32Array ? new Uint32Array(neededLength) : new Uint16Array(neededLength);\n      newIndices.set(indices);\n      LineDrawer._indices = newIndices;\n    }\n  }\n\n  private static _growthPosition(length: number): void {\n    const position = LineDrawer._positions;\n    const neededLength = LineDrawer._positionCount + length;\n    if (neededLength > position.length) {\n      for (let i = 0, n = neededLength - position.length; i < n; i++) {\n        position.push(new Vector3());\n      }\n    }\n  }\n}\n\n/**\n * Circle Axis.\n */\nexport enum AxisType {\n  X,\n  Y,\n  Z\n}\n"],"names":["WireframePrimitive","createCuboidWireframe","width","height","depth","positions","positionOffset","indices","indicesOffset","halfWidth","halfHeight","halfDepth","offset","set","createSphereWireframe","radius","_shift","createCircleWireframe","circleVertexCount","circleIndexCount","createConeWireframe","indexBegin","createUnboundCylinderWireframe","i","radian","MathUtil","degreeToRadian","Math","cos","sin","createCapsuleWireframe","circleIndicesCount","vertexCount","createEllipticWireframe","ellipticIndexCount","axis","shift","twoPi","PI","countReciprocal","v","thetaDelta","x","y","z","globalIndex","createFrustumWireframe","angle","dirTanA","tan","bottomRadius","createHemisphereWireframe","cuboidIndexCount","cuboidPositionCount","sphereIndexCount","spherePositionCount","circlePositionCount","coneIndexCount","conePositionCount","unboundCylinderIndexCount","unboundCylinderPositionCount","capsuleIndexCount","capsulePositionCount","ellipticPositionCount","frustumIndexCount","frustumPositionCount","hemisphereIndexCount","hemispherePositionCount","Vector3","WireframeManager","_cameraPositions","_localPositions","_globalPositions","_indices","_indicesCount","_boundsIndicesCount","_wireframeRenderers","_wireframeElements","clear","length","_mesh","subMesh","count","addEntityWireframe","entity","includeChildren","components","Array","getComponentsIncludeChildren","Camera","n","addCameraWireframe","componentsOffset","SpotLight","addSpotLightWireframe","DirectLight","addDirectLightWireframe","PointLight","addPointLightWireframe","Collider","addCollideWireframe","ParticleRenderer","addParticleRendererEmissionShapeWireframe","camera","getComponent","spotLight","directLight","pointLight","collider","particle","transform","inverseProj","projectionMatrix","clone","invert","localPositions","positionsOffset","push","WireframeElement","ndcPosition","_ndcPosition","newPosition","copyFrom","transformCoordinate","_growthIndexMemory","light","distance","coneIndicesCount","_growthPosition","_rotateAroundX","sphereIndicesCount","unboundCylinderIndicesCount","addRendererWireframe","renderer","shapes","shape","BoxColliderShape","addBoxColliderShapeWireframe","SphereColliderShape","addSphereColliderShapeWireframe","CapsuleColliderShape","addCapsuleColliderShapeWireframe","worldScale","lossyWorldScale","position","rotation","size","_tempVector","_tempRotation","tempRotation","cuboidIndicesCount","Quaternion","rotationYawPitchRoll","_localRotation","multiply","tempVector","_localTranslate","max","maxScale","upAxis","_tempAxis","tempAxis","_halfSqrt","halfSqrt","capsuleIndicesCount","ColliderShapeUpAxis","X","Y","Z","particleRenderer","generator","emission","enabled","shapeType","addBoxParticleShapeWireframe","addCircleParticleShapeWireframe","addConeParticleShapeWireframe","addHemisphereParticleShapeWireframe","addSphereParticleShapeWireframe","frustumIndicesCount","hemisphereIndicesCount","onAwake","engine","mesh","ModelMesh","material","PlainColorMaterial","MeshRenderer","castShadows","receiveShadows","supportUint32Array","_hardwareRenderer","canIUse","GLCapabilityType","elementIndexUint","addSubMesh","MeshTopology","Lines","setMaterial","bounds","min","Number","MAX_VALUE","_material","_renderer","Uint32Array","Uint16Array","_supportUint32Array","onEnable","onDisable","onLateUpdate","deltaTime","globalPositions","wireframeElements","wireframeRenderers","localPositionLength","positionIndex","needUpdate","wireframeElement","beginIndex","transformRanges","endIndex","updateFlag","flag","worldMatrix","_tempMatrix","isScaleIgnored","Matrix","rotationTranslation","worldRotationQuaternion","worldPosition","j","localPosition","globalPosition","_getPositionFromPool","indicesCount","getExtent","getCenter","add","setPositions","setIndices","uploadData","neededLength","maxLength","Error","newIndices","transformByQuat","py","pz","positionPool","_positionPool","baseColor","value","Script","dependentComponents","DependentMode","CheckOnly","registerWorldChangeFlag","LineDrawer","_enableVAO","_positionCount","_positions","flush","drawLine","from","to","matrix","drawRect","leftTop","rightTop","rightBottom","leftBottom","drawSphere","center","positionCount","indexCount","pos","drawCuboid","drawCapsule","drawCircle","color","AxisType"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4]}