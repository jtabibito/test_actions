{"version":3,"file":"browser.js","sources":["../../../../node_modules/.pnpm/@swc+helpers@0.5.7/node_modules/@swc/helpers/esm/_set_prototype_of.js","../../../../node_modules/.pnpm/@swc+helpers@0.5.7/node_modules/@swc/helpers/esm/_inherits.js","../../src/SkeletonViewer.ts"],"sourcesContent":["export function _set_prototype_of(o, p) {\n    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {\n        o.__proto__ = p;\n\n        return o;\n    };\n\n    return _set_prototype_of(o, p);\n}\nexport { _set_prototype_of as _ };\n","import { _set_prototype_of } from \"./_set_prototype_of.js\";\n\nexport function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });\n\n    if (superClass) _set_prototype_of(subClass, superClass);\n}\nexport { _inherits as _ };\n","import {\n  Color,\n  Engine,\n  Entity,\n  Material,\n  Matrix,\n  MeshRenderer,\n  ModelMesh,\n  PrimitiveMesh,\n  Quaternion,\n  RenderQueueType,\n  Script,\n  Shader,\n  SkinnedMeshRenderer,\n  Vector3\n} from \"@galacean/engine\";\n\n/**\n * Skeleton visualization.\n * @example\n * rootEntity.addComponent(SkeletonViewer);\n */\nexport class SkeletonViewer extends Script {\n  /** Distance from connector to bone, [0~1]. */\n  midStep: number = 0.2;\n  /** The scale of the linker. */\n  midWidthScale: number = 0.1;\n  /** Ball size. */\n  ballSize: number = 0.25;\n  /** Skeleton Decrease Factor. */\n  scaleFactor: number = 0.85;\n  /** The min color.  */\n  colorMin: Color = new Color(0.35, 0.35, 0.35, 1);\n  /** The max color. */\n  colorMax: Color = new Color(0.7, 0.7, 0.7, 1);\n\n  private _debugMesh: MeshRenderer[] = [];\n  private _material: Material;\n\n  constructor(entity: Entity) {\n    super(entity);\n\n    const engine = entity.engine;\n    if (!materialMap.get(engine)) {\n      const material = new Material(entity.engine, Shader.find(\"skeleton-viewer\"));\n      material.renderState.rasterState.depthBias = -100000000;\n      material.renderState.renderQueueType = RenderQueueType.Transparent;\n      materialMap.set(engine, material);\n    }\n\n    this._material = materialMap.get(engine);\n    this._material.shaderData.setColor(\"u_colorMin\", this.colorMin);\n    this._material.shaderData.setColor(\"u_colorMax\", this.colorMax);\n\n    const skinnedMeshRenderers = [];\n    this.entity.getComponentsIncludeChildren(SkinnedMeshRenderer, skinnedMeshRenderers);\n    for (let i = 0; i < skinnedMeshRenderers.length; i++) {\n      const renderer = skinnedMeshRenderers[i];\n      if (renderer.skin) {\n        this._showSkeleton(renderer);\n      }\n    }\n  }\n\n  override onDestroy(): void {\n    for (let i = 0, length = this._debugMesh.length; i < length; i++) {\n      this._debugMesh[i].destroy();\n    }\n    this._debugMesh.length = 0;\n  }\n\n  override onEnable() {\n    for (let i = 0, length = this._debugMesh.length; i < length; i++) {\n      this._debugMesh[i].enabled = true;\n    }\n  }\n\n  override onDisable() {\n    for (let i = 0, length = this._debugMesh.length; i < length; i++) {\n      this._debugMesh[i].enabled = false;\n    }\n  }\n\n  private _createSpur(direction: Vector3): ModelMesh {\n    const mesh = new ModelMesh(this.engine);\n    const length = direction.length();\n    const midLength = this.midStep * length;\n    const midHalfWidth = length * this.midWidthScale;\n\n    const positions: Vector3[] = new Array(24);\n    const normals: Vector3[] = new Array(24);\n\n    const matrix = new Matrix();\n    const quaternion = new Quaternion();\n    Matrix.lookAt(new Vector3(0, 0, 0), direction, new Vector3(0, 1, 0), matrix);\n    matrix.getRotation(quaternion).invert();\n\n    const vertex = [\n      new Vector3(midHalfWidth, -midHalfWidth, -midLength).transformByQuat(quaternion),\n      new Vector3(midHalfWidth, midHalfWidth, -midLength).transformByQuat(quaternion),\n      new Vector3(-midHalfWidth, midHalfWidth, -midLength).transformByQuat(quaternion),\n      new Vector3(-midHalfWidth, -midHalfWidth, -midLength).transformByQuat(quaternion),\n      new Vector3(0, 0, -length).transformByQuat(quaternion),\n      new Vector3(0, 0, 0)\n    ];\n\n    positions[0] = new Vector3(0, 0, 0);\n    positions[1] = vertex[0].clone();\n    positions[2] = vertex[1].clone();\n    positions[3] = new Vector3(0, 0, 0);\n    positions[4] = vertex[1].clone();\n    positions[5] = vertex[2].clone();\n    positions[6] = new Vector3(0, 0, 0);\n    positions[7] = vertex[2].clone();\n    positions[8] = vertex[3].clone();\n    positions[9] = new Vector3(0, 0, 0);\n    positions[10] = vertex[3].clone();\n    positions[11] = vertex[0].clone();\n\n    positions[12] = vertex[0].clone();\n    positions[13] = vertex[4].clone();\n    positions[14] = vertex[1].clone();\n    positions[15] = vertex[1].clone();\n    positions[16] = vertex[4].clone();\n    positions[17] = vertex[2].clone();\n    positions[18] = vertex[2].clone();\n    positions[19] = vertex[4].clone();\n    positions[20] = vertex[3].clone();\n    positions[21] = vertex[3].clone();\n    positions[22] = vertex[4].clone();\n    positions[23] = vertex[0].clone();\n\n    normals[0] = normals[1] = normals[2] = new Vector3(1, 0, 1).transformByQuat(quaternion);\n    normals[3] = normals[4] = normals[5] = new Vector3(0, 1, 1).transformByQuat(quaternion);\n    normals[6] = normals[7] = normals[8] = new Vector3(-1, 0, 1).transformByQuat(quaternion);\n    normals[9] = normals[10] = normals[11] = new Vector3(0, -1, 1).transformByQuat(quaternion);\n    normals[12] = normals[13] = normals[14] = new Vector3(1, 0, -1).transformByQuat(quaternion);\n    normals[15] = normals[16] = normals[17] = new Vector3(0, 1, -1).transformByQuat(quaternion);\n    normals[18] = normals[19] = normals[20] = new Vector3(-1, 0, -1).transformByQuat(quaternion);\n    normals[21] = normals[22] = normals[23] = new Vector3(0, -1, -1).transformByQuat(quaternion);\n\n    const { bounds } = mesh;\n    const { min, max } = bounds;\n    min.set(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n    max.set(-Number.NEGATIVE_INFINITY, -Number.NEGATIVE_INFINITY, -Number.NEGATIVE_INFINITY);\n\n    for (let i = 0; i < 6; i++) {\n      const position = vertex[i];\n      Vector3.min(min, position, min);\n      Vector3.max(max, position, max);\n    }\n\n    mesh.setPositions(positions);\n    mesh.setNormals(normals);\n\n    mesh.uploadData(true);\n    mesh.addSubMesh(0, 24);\n    return mesh;\n  }\n\n  private _showSkeleton(renderer: SkinnedMeshRenderer): void {\n    const bones = renderer.bones;\n    const spheres: Entity[][] = [];\n\n    let maxLength = 0;\n\n    for (let i = 0; i < bones.length; i++) {\n      const bone = bones[i];\n      const anchorPoint = bone.transform.worldPosition;\n\n      // 球\n      const entity = bone.createChild();\n      const renderer = entity.addComponent(MeshRenderer);\n      renderer.receiveShadows = false;\n      renderer.castShadows = false;\n      renderer.mesh = PrimitiveMesh.createSphere(this.engine, this.ballSize, 16);\n      renderer.setMaterial(this._material);\n      renderer.priority = 1;\n\n      spheres.push([entity, bone]);\n\n      this._debugMesh.push(renderer);\n\n      // 连接体\n      for (let j = 0; j < bone.children.length; j++) {\n        const child = bone.children[j];\n        const childPoint = child.transform.worldPosition;\n        const absoluteDirection = childPoint.clone().subtract(anchorPoint);\n        const direction = child.transform.position;\n        const distance = absoluteDirection.length();\n\n        if (distance > maxLength) {\n          maxLength = distance;\n        }\n\n        const entity = bone;\n        const renderer = entity.addComponent(MeshRenderer);\n        renderer.receiveShadows = false;\n        renderer.castShadows = false;\n        renderer.setMaterial(this._material);\n        renderer.mesh = this._createSpur(direction);\n        renderer.priority = 1;\n\n        this._debugMesh.push(renderer);\n      }\n    }\n\n    // change size of ball\n    for (let i = 0; i < spheres.length; i++) {\n      const sphere = spheres[i][0];\n      const joint = spheres[i][1];\n\n      let base = joint;\n      let count = 0;\n\n      while (base.parent) {\n        count++;\n        base = base.parent;\n      }\n\n      const scale = 0.5 * maxLength * Math.pow(this.scaleFactor, count);\n      const worldScale = sphere.transform.lossyWorldScale;\n      sphere.transform.setScale(scale / worldScale.x, scale / worldScale.y, scale / worldScale.z);\n    }\n  }\n}\n\nShader.create(\n  \"skeleton-viewer\",\n  `\n  attribute vec3 POSITION;\n  attribute vec3 NORMAL;\n\n  uniform mat4 renderer_MVPMat;\n  uniform mat4 renderer_NormalMat;\n\n  varying vec3 v_normal;\n\n  void main(){\n      gl_Position = renderer_MVPMat * vec4( POSITION , 1.0 );;\n      v_normal = normalize( mat3(renderer_NormalMat) * NORMAL );\n  }`,\n  `\n      uniform vec3 u_colorMin;\n      uniform vec3 u_colorMax;\n      varying vec3 v_normal;\n\n      void main(){\n        float ndl = dot(v_normal, vec3(0, 1, 0)) * 0.5 + 0.5;\n        vec3 diffuse = mix(u_colorMin, u_colorMax, ndl);\n        gl_FragColor = vec4(diffuse, 1.0);\n      }\n      `\n);\n\nconst materialMap = new Map<Engine, Material>();\n"],"names":["SkeletonViewer","entity","midStep","midWidthScale","ballSize","scaleFactor","colorMin","Color","colorMax","_debugMesh","engine","materialMap","get","material","Material","Shader","find","renderState","rasterState","depthBias","renderQueueType","RenderQueueType","Transparent","set","_material","shaderData","setColor","skinnedMeshRenderers","getComponentsIncludeChildren","SkinnedMeshRenderer","i","length","renderer","skin","_showSkeleton","onDestroy","destroy","onEnable","enabled","onDisable","_createSpur","direction","mesh","ModelMesh","midLength","midHalfWidth","positions","Array","normals","matrix","Matrix","quaternion","Quaternion","lookAt","Vector3","getRotation","invert","vertex","transformByQuat","clone","bounds","min","max","Number","NEGATIVE_INFINITY","position","setPositions","setNormals","uploadData","addSubMesh","bones","spheres","maxLength","bone","anchorPoint","transform","worldPosition","createChild","addComponent","MeshRenderer","receiveShadows","castShadows","PrimitiveMesh","createSphere","setMaterial","priority","push","j","children","child","childPoint","absoluteDirection","subtract","distance","sphere","joint","base","count","parent","scale","Math","pow","worldScale","lossyWorldScale","setScale","x","y","z","Script","create","Map"],"mappings":"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","x_google_ignoreList":[0,1]}