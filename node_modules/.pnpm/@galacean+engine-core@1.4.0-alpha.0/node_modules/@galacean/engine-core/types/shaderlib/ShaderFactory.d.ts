import { ShaderMacro } from "../shader/ShaderMacro";
export declare class ShaderFactory {
    private static readonly _has300OutInFragReg;
    static parseCustomMacros(macros: ShaderMacro[]): string;
    static registerInclude(includeName: string, includeSource: string): void;
    static unRegisterInclude(includeName: string): void;
    /**
     * @param regex The default regex is for engine's builtin glsl `#include` syntax,
     * since `ShaderLab` use the same parsing function but different syntax for `#include` --- `/^[ \t]*#include +"([\w\d.]+)"/gm`
     */
    static parseIncludes(src: string, regex?: RegExp): string;
    /**
     * Convert lower GLSL version to GLSL 300 es.
     * @param shader - code
     * @param isFrag - Whether it is a fragment shader.
     * */
    static convertTo300(shader: string, isFrag?: boolean): string;
    private static _has300Output;
    private static _replaceMRTShader;
}
