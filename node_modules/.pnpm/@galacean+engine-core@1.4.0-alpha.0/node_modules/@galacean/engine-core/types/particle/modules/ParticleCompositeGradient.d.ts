import { Color } from "@galacean/engine-math";
import { ParticleGradientMode } from "../enums/ParticleGradientMode";
import { ParticleGradient } from "./ParticleGradient";
/**
 * Particle composite gradient.
 */
export declare class ParticleCompositeGradient {
    /** The gradient mode. */
    mode: ParticleGradientMode;
    constantMin: Color;
    constantMax: Color;
    /** The min gradient used by the gradient if mode is set to `Gradient`. */
    gradientMin: ParticleGradient;
    /** The max gradient used by the gradient if mode is set to `Gradient`. */
    gradientMax: ParticleGradient;
    /**
     *  The constant color used by the gradient if mode is set to `Constant`.
     */
    get constant(): Color;
    set constant(value: Color);
    /**
     * The gradient used by the gradient if mode is set to `Gradient`.
     */
    get gradient(): ParticleGradient;
    set gradient(value: ParticleGradient);
    /**
     * Create a particle gradient that generates a constant color.
     * @param constant - The constant color
     */
    constructor(constant: Color);
    /**
     * Create a particle gradient that can generate color between a minimum constant and a maximum constant.
     * @param constantMin - The min constant color
     * @param constantMax - The max constant color
     */
    constructor(constantMin: Color, constantMax: Color);
    /**
     * Create a particle gradient that generates a color from a gradient.
     * @param gradient - The gradient
     */
    constructor(gradient: ParticleGradient);
    /**
     * Create a particle gradient that can generate color from a minimum gradient and a maximum gradient.
     * @param gradientMin - The min gradient
     *
     */
    constructor(gradientMin: ParticleGradient, gradientMax: ParticleGradient);
    /**
     * Query the color at the specified time.
     * @param time - Normalized time at which to evaluate the gradient, Valid when `mode` is set to `Gradient` or `TwoGradients`
     * @param lerpFactor - Lerp factor between two constants or gradients, Valid when `mode` is set to `TwoConstants` or `TwoGradients`
     * @param out - The result color
     */
    evaluate(time: number, lerpFactor: number, out: Color): void;
}
