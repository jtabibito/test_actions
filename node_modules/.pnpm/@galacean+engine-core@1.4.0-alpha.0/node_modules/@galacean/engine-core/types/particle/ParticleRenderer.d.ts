import { BoundingBox, Vector3 } from "@galacean/engine-math";
import { RenderContext } from "../RenderPipeline/RenderContext";
import { Renderer } from "../Renderer";
import { ModelMesh } from "../mesh/ModelMesh";
import { ParticleGenerator } from "./ParticleGenerator";
import { ParticleRenderMode } from "./enums/ParticleRenderMode";
/**
 * Particle Renderer Component.
 */
export declare class ParticleRenderer extends Renderer {
    private static readonly _billboardModeMacro;
    private static readonly _stretchedBillboardModeMacro;
    private static readonly _horizontalBillboardModeMacro;
    private static readonly _verticalBillboardModeMacro;
    private static readonly _renderModeMeshMacro;
    private static readonly _pivotOffsetProperty;
    private static readonly _lengthScale;
    private static readonly _speedScale;
    private static readonly _currentTime;
    /** Particle generator. */
    readonly generator: ParticleGenerator;
    /** Specifies how much particles stretch depending on their velocity. */
    velocityScale: number;
    /** How much are the particles stretched in their direction of motion, defined as the length of the particle compared to its width. */
    lengthScale: number;
    /** The pivot of particle. */
    pivot: Vector3;
    private _renderMode;
    private _currentRenderModeMacro;
    private _mesh;
    private _supportInstancedArrays;
    /**
     * Specifies how particles are rendered.
     */
    get renderMode(): ParticleRenderMode;
    set renderMode(value: ParticleRenderMode);
    /**
     * The mesh of particle.
     * @remarks Valid when `renderMode` is `Mesh`.
     */
    get mesh(): ModelMesh;
    set mesh(value: ModelMesh);
    protected _updateBounds(worldBounds: BoundingBox): void;
    protected _update(context: RenderContext): void;
    protected _render(context: RenderContext): void;
    protected _onDestroy(): void;
}
