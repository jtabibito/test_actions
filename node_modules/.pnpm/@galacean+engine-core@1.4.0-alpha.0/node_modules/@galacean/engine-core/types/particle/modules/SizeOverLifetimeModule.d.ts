import { ShaderMacro } from "../../shader/ShaderMacro";
import { ShaderProperty } from "../../shader/ShaderProperty";
import { ParticleGenerator } from "../ParticleGenerator";
import { ParticleCompositeCurve } from "./ParticleCompositeCurve";
import { ParticleGeneratorModule } from "./ParticleGeneratorModule";
/**
 * Size over lifetime module.
 */
export declare class SizeOverLifetimeModule extends ParticleGeneratorModule {
    static readonly _curveModeMacro: ShaderMacro;
    static readonly _isSeparateMacro: ShaderMacro;
    static readonly _isRandomTwoMacro: ShaderMacro;
    static readonly _minCurveXProperty: ShaderProperty;
    static readonly _minCurveYProperty: ShaderProperty;
    static readonly _minCurveZProperty: ShaderProperty;
    static readonly _maxCurveXProperty: ShaderProperty;
    static readonly _maxCurveYProperty: ShaderProperty;
    static readonly _maxCurveZProperty: ShaderProperty;
    private _separateAxes;
    private _sizeX;
    private _sizeY;
    private _sizeZ;
    private _enableSeparateMacro;
    private _isCurveMacro;
    private _isRandomTwoMacro;
    /**
     * Specifies whether the Size is separate on each axis.
     */
    set separateAxes(value: boolean);
    get separateAxes(): boolean;
    /**
     * Size curve over lifetime for x axis.
     */
    get sizeX(): ParticleCompositeCurve;
    set sizeX(value: ParticleCompositeCurve);
    /**
     * Size curve over lifetime for y axis.
     */
    get sizeY(): ParticleCompositeCurve;
    set sizeY(value: ParticleCompositeCurve);
    /**
     * Size curve over lifetime for z axis.
     */
    get sizeZ(): ParticleCompositeCurve;
    set sizeZ(value: ParticleCompositeCurve);
    /**
     * Size curve over lifetime.
     */
    get size(): ParticleCompositeCurve;
    set size(value: ParticleCompositeCurve);
    constructor(generator: ParticleGenerator);
    private _onCompositeCurveChange;
}
