import { ParticleCurveMode } from "../enums/ParticleCurveMode";
import { ParticleCurve } from "./ParticleCurve";
/**
 * Particle composite curve.
 */
export declare class ParticleCompositeCurve {
    private _updateManager;
    private _mode;
    private _constantMin;
    private _constantMax;
    private _curveMin;
    private _curveMax;
    private _updateDispatch;
    /**
     * The curve mode.
     */
    get mode(): ParticleCurveMode;
    set mode(value: ParticleCurveMode);
    /**
     * The min constant value used by the curve if mode is set to `TwoConstants`.
     */
    get constantMin(): number;
    set constantMin(value: number);
    /**
     * The max constant value used by the curve if mode is set to `TwoConstants`.
     */
    get constantMax(): number;
    set constantMax(value: number);
    /**
     * The min curve used by the curve if mode is set to `TwoCurves`.
     */
    get curveMin(): ParticleCurve;
    set curveMin(value: ParticleCurve);
    /**
     * The max curve used by the curve if mode is set to `TwoCurves`.
     */
    get curveMax(): ParticleCurve;
    set curveMax(value: ParticleCurve);
    /**
     * The constant value used by the curve if mode is set to `Constant`.
     */
    get constant(): number;
    set constant(value: number);
    /**
     * The curve used by the curve if mode is set to `Curve`.
     */
    get curve(): ParticleCurve;
    set curve(value: ParticleCurve);
    /**
     * Create a particle curve that generates a constant value.
     * @param constant - The constant value
     */
    constructor(constant: number);
    /**
     * Create a particle curve that can generate values between a minimum constant and a maximum constant.
     * @param constantMin - The min constant value
     * @param constantMax - The max constant value
     */
    constructor(constantMin: number, constantMax: number);
    /**
     * Create a particle composite curve by a curve.
     * @param curve - The curve
     */
    constructor(curve: ParticleCurve);
    /**
     * Create a particle composite curve by min and max curves.
     * @param curveMin - The min curve
     * @param curveMax - The max curve
     */
    constructor(curveMin: ParticleCurve, curveMax: ParticleCurve);
    /**
     * Query the value at the specified time.
     * @param time - Normalized time at which to evaluate the curve, Valid when `mode` is set to `Curve` or `TwoCurves`
     * @param lerpFactor - Lerp factor between two constants or curves, Valid when `mode` is set to `TwoConstants` or `TwoCurves`
     * @returns - The result curve value
     */
    evaluate(time: number, lerpFactor: number): number;
    private _getMaxKeyValue;
    private _getMinKeyValue;
    private _onCurveChange;
}
