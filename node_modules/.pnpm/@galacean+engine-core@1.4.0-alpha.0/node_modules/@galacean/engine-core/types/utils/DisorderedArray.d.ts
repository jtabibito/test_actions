/**
 * High-performance unordered array, delete uses exchange method to improve performance, internal capacity only increases.
 */
export declare class DisorderedArray<T> {
    /** The length of the array. */
    length: number;
    private _loopCounter;
    private _blankCount;
    /**
     * Get whether the array is in the loop.
     */
    get isLopping(): boolean;
    /**
     * Create a DisorderedArray.
     * @param count - The initial length of the array
     */
    constructor(count?: number);
    /**
     * Add an element to disordered array.
     * @param element - The element to be added
     */
    add(element: T): void;
    /**
     * Delete the specified element.
     * @param element - The element to be deleted
     */
    delete(element: T): void;
    /**
     * Set the element at the specified index.
     * @param index - The index of the element to be set
     * @param element - The element to be set
     */
    set(index: number, element: T): void;
    /**
     * Get the element at the specified index.
     * @param index - The index of the element to be get
     * @returns The element at the specified index
     */
    get(index: number): T;
    /**
     * Delete the element at the specified index.
     * @param index - The index of the element to be deleted
     * @returns The replaced item is used to reset its index
     */
    deleteByIndex(index: number): T;
    /**
     * Loop through all elements.
     * @param callbackFn - The callback function
     * @param swapFn - The swap function can process the element after the callback function, it will be called after end looping(`isLopping` = true)
     */
    forEach(callbackFn: (element: T, index: number) => void, swapFn?: (element: T, index: number) => void): void;
    /**
     * Loop through all elements and clean up the blank elements.
     * @param callbackFn - The callback function
     * @param swapFn - The swap function can process the element after the callback function,  it will be called after end looping(`isLopping` = true)
     */
    forEachAndClean(callbackFn: (element: T, index: number) => void, swapFn?: (element: T, index: number) => void): void;
    /**
     * Sort the array.
     * @param compareFn - The comparison function
     */
    sort(compareFn: (a: T, b: T) => number): void;
    /**
     * Garbage collection, clean up all cached elements.
     */
    garbageCollection(): void;
    private _startLoop;
    private _endLoop;
    private _endLoopAndClean;
}
