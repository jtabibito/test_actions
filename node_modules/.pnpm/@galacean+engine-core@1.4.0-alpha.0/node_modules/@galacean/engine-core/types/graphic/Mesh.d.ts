import { BoundingBox } from "@galacean/engine-math";
import { Engine } from "../Engine";
import { ReferResource } from "../asset/ReferResource";
import { SubMesh } from "../graphic/SubMesh";
import { MeshTopology } from "../graphic/enums/MeshTopology";
/**
 * Mesh.
 */
export declare abstract class Mesh extends ReferResource {
    /** Name. */
    name: string;
    private _bounds;
    private _subMeshes;
    /**
     * The bounding volume of the mesh.
     */
    get bounds(): BoundingBox;
    set bounds(value: BoundingBox);
    /**
     * First sub-mesh. Rendered using the first material.
     */
    get subMesh(): SubMesh | null;
    /**
     * A collection of sub-mesh, each sub-mesh can be rendered with an independent material.
     */
    get subMeshes(): Readonly<SubMesh[]>;
    /**
     * Create mesh.
     * @param engine - Engine
     * @param name - Mesh name
     */
    constructor(engine: Engine, name?: string);
    /**
     * Add sub-mesh, each sub-mesh can correspond to an independent material.
     * @param subMesh - Start drawing offset, if the index buffer is set, it means the offset in the index buffer, if not set, it means the offset in the vertex buffer
     * @returns Sub-mesh
     */
    addSubMesh(subMesh: SubMesh): SubMesh;
    /**
     * Add sub-mesh, each sub-mesh can correspond to an independent material.
     * @param start - Start drawing offset, if the index buffer is set, it means the offset in the index buffer, if not set, it means the offset in the vertex buffer
     * @param count - Drawing count, if the index buffer is set, it means the count in the index buffer, if not set, it means the count in the vertex buffer
     * @param topology - Drawing topology, default is MeshTopology.Triangles
     * @returns Sub-mesh
     */
    addSubMesh(start: number, count: number, topology?: MeshTopology): SubMesh;
    /**
     * Remove sub-mesh.
     * @param subMesh - Sub-mesh needs to be removed
     */
    removeSubMesh(subMesh: SubMesh): void;
    /**
     * Clear all sub-mesh.
     */
    clearSubMesh(): void;
    _addReferCount(value: number): void;
    private _onBoundsChanged;
}
