import { Color, Vector2, Vector3, Vector4 } from "@galacean/engine-math";
import { Engine } from "../Engine";
import { Buffer } from "../graphic/Buffer";
import { Mesh } from "../graphic/Mesh";
import { VertexBufferBinding } from "../graphic/VertexBufferBinding";
import { VertexElement } from "../graphic/VertexElement";
import { BlendShape } from "./BlendShape";
import { VertexAttribute } from "./enums/VertexAttribute";
/**
 * Mesh containing common vertex elements of the model.
 */
export declare class ModelMesh extends Mesh {
    private static _tempVec0;
    private static _tempVec1;
    private static _tempVec2;
    private static _tempVec3;
    private static _tempVec4;
    private _vertexCount;
    private _vertexCountDirty;
    private _dataVersionCounter;
    private _positions;
    private _normals;
    private _colors;
    private _tangents;
    private _uv;
    private _uv1;
    private _uv2;
    private _uv3;
    private _uv4;
    private _uv5;
    private _uv6;
    private _uv7;
    private _boneWeights;
    private _boneIndices;
    private _advancedElementUpdateFlag;
    private _advancedDataUpdateFlag;
    private _advancedVertexDataVersions;
    private _advancedDataSyncToBuffer;
    private _internalVertexBufferStride;
    private _internalVertexBufferCreatedInfo;
    private _internalVertexElementsOffset;
    private _internalVertexElementsFlags;
    private _vertexBufferInfos;
    private _indices;
    private _indicesFormat;
    private _indicesChangeFlag;
    /**
     * Vertex count of mesh.
     */
    get vertexCount(): number;
    /**
     * Vertex element collection.
     */
    get vertexElements(): Readonly<VertexElement[]>;
    /**
     * Vertex buffer binding collection.
     */
    get vertexBufferBindings(): ReadonlyArray<VertexBufferBinding>;
    /**
     * BlendShapes of this ModelMesh.
     */
    get blendShapes(): Readonly<BlendShape[]>;
    /**
     * BlendShape count of this ModelMesh.
     */
    get blendShapeCount(): number;
    /**
     * Create a model mesh.
     * @param engine - Engine to which the mesh belongs
     * @param name - Mesh name
     */
    constructor(engine: Engine, name?: string);
    /**
     * Set positions for the mesh.
     * @param positions - The positions for the mesh
     */
    setPositions(positions: Vector3[] | null): void;
    /**
     * Get positions for the mesh.
     * @remarks Please call the setPositions() method after modification to ensure that the modification takes effect.
     */
    getPositions(): Vector3[] | null;
    /**
     * Set per-vertex normals for the mesh.
     * @param normals - The normals for the mesh
     */
    setNormals(normals: Vector3[] | null): void;
    /**
     * Get normals for the mesh.
     * @remarks Please call the setNormals() method after modification to ensure that the modification takes effect.
     */
    getNormals(): Vector3[] | null;
    /**
     * Set per-vertex colors for the mesh.
     * @param colors - The colors for the mesh
     */
    setColors(colors: Color[] | null): void;
    /**
     * Get colors for the mesh.
     * @remarks Please call the setColors() method after modification to ensure that the modification takes effect.
     */
    getColors(): Color[] | null;
    /**
     * Set per-vertex bone weights for the mesh.
     * @param boneWeights - The bone weights for the mesh
     */
    setBoneWeights(boneWeights: Vector4[] | null): void;
    /**
     * Get bone weights for the mesh.
     * @remarks Please call the setWeights() method after modification to ensure that the modification takes effect.
     */
    getBoneWeights(): Vector4[] | null;
    /**
     * Set per-vertex bone indices for the mesh.
     * @param boneIndices - The bone indices for the mesh
     */
    setBoneIndices(boneIndices: Vector4[] | null): void;
    /**
     * Get bone indices for the mesh.
     * @remarks Please call the setBoneIndices() method after modification to ensure that the modification takes effect.
     */
    getBoneIndices(): Vector4[] | null;
    /**
     * Set per-vertex tangents for the mesh.
     * @param tangents - The tangents for the mesh
     */
    setTangents(tangents: Vector4[] | null): void;
    /**
     * Get tangents for the mesh.
     * @remarks Please call the setTangents() method after modification to ensure that the modification takes effect.
     */
    getTangents(): Vector4[] | null;
    /**
     * Set per-vertex uv for the mesh.
     * @param uv - The uv for the mesh
     */
    setUVs(uv: Vector2[] | null): void;
    /**
     * Set per-vertex uv for the mesh by channelIndex.
     * @param uv - The uv for the mesh
     * @param channelIndex - The index of uv channels, in [0 ~ 7] range
     */
    setUVs(uv: Vector2[] | null, channelIndex: number): void;
    /**
     * Get uv for the mesh.
     * @remarks Please call the setUV() method after modification to ensure that the modification takes effect.
     */
    getUVs(): Vector2[] | null;
    /**
     * Get uv for the mesh by channelIndex.
     * @param channelIndex - The index of uv channels, in [0 ~ 7] range.
     * @remarks Please call the setUV() method after modification to ensure that the modification takes effect.
     */
    getUVs(channelIndex: number): Vector2[] | null;
    /**
     * Set indices for the mesh.
     * @param indices - The indices for the mesh
     */
    setIndices(indices: Uint8Array | Uint16Array | Uint32Array): void;
    /**
     * Get indices for the mesh.
     */
    getIndices(): Uint8Array | Uint16Array | Uint32Array;
    /**
     * Set vertex elements.
     * @param elements - Vertex element collection
     *
     * @remarks
     * Call this method will clear the vertex data set by the setPositions(), setNormals(), setColors(), setBoneWeights(), setBoneIndices(), setTangents(), setUVs() methods.
     */
    setVertexElements(elements: VertexElement[]): void;
    /**
     * Set vertex buffer binding.
     * @param vertexBufferBinding - Vertex buffer binding
     * @param index - Vertex buffer index, the default value is 0
     */
    setVertexBufferBinding(vertexBufferBinding: VertexBufferBinding, index?: number): void;
    /**
     * Set vertex buffer binding.
     * @param vertexBuffer - Vertex buffer
     * @param stride - Vertex buffer data stride
     * @param index - Vertex buffer index, the default value is 0
     */
    setVertexBufferBinding(vertexBuffer: Buffer, stride: number, index?: number): void;
    /**
     * Set vertex buffer binding.
     * @param vertexBufferBindings - Vertex buffer binding
     * @param firstIndex - First vertex buffer index, the default value is 0
     */
    setVertexBufferBindings(vertexBufferBindings: VertexBufferBinding[], firstIndex?: number): void;
    /**
     * Get `VertexElement` by attribute.
     * @param attribute - Vertex attribute
     * @returns Vertex element
     */
    getVertexElement(attribute: VertexAttribute): VertexElement | null;
    /**
     * Add a BlendShape for this ModelMesh.
     * @param blendShape - The BlendShape
     */
    addBlendShape(blendShape: BlendShape): void;
    /**
     * Clear all BlendShapes.
     */
    clearBlendShapes(): void;
    /**
     * Get name of BlendShape by given index.
     * @param index - The index of BlendShape
     * @returns The name of BlendShape
     */
    getBlendShapeName(index: number): string;
    /**
     * Upload data to GPU set by `setPositions()`, `setNormals()`, `setColors()`, `setBoneWeights()`, `setBoneIndices()`, `setTangents()`, `setUVs()`, `setIndices()` methods.
     * This method will be auto generate vertex element and vertex buffer binding if needed.
     *
     * @param releaseData - Whether to release the data cache, release data can reduce memory usage.
     */
    uploadData(releaseData: boolean): void;
    /**
     * Calculate mesh tangent.
     * @remark need to set positions(with or not with indices), normals, uv before calculation.
     * @remark based on http://foundationsofgameenginedev.com/FGED2-sample.pdf
     */
    calculateTangents(): void;
    private _getVertexElementData;
    private _beforeSetAdvancedVertexData;
    private _updateAdvancedVertexDataMarks;
    private _updateInternalVertexBuffer;
    private _readVector2VertexData;
    private _readVector3VertexData;
    private _readVector4VertexData;
    private _readColorVertexData;
    private _readVertexData;
    private _updateAdvancedVertexElement;
    private _updateAdvancedVertexElements;
    private _updateVertexElements;
    private _writeVector2AdvancedVertexData;
    private _writeVector3AdvancedVertexData;
    private _writeVector4AdvancedVertexData;
    private _writeColorAdvancedVertexData;
    private _writeAdvancedVertexData;
    private _updateAdvancedVertices;
    private _getInternalVertexBufferIndex;
    private _getAttributeFormat;
    private _getAttributeByteLength;
    private _releaseCache;
    /** @deprecated */
    private _accessible;
    /**
     * @deprecated
     * Whether to access data of the mesh.
     */
    get accessible(): boolean;
}
