import { Engine } from "../Engine";
import { Buffer } from "../graphic/Buffer";
import { ModelMesh } from "./ModelMesh";
/**
 * Used to generate common primitive meshes.
 */
export declare class PrimitiveMesh {
    private static _tempVec30;
    private static readonly _sphereSeedPositions;
    private static readonly _sphereSeedCells;
    private static _sphereEdgeIdx;
    private static _spherePoleIdx;
    /**
     * Create a sphere mesh.
     * @param engine - Engine
     * @param radius - Sphere radius
     * @param segments - Number of segments
     * @param noLongerAccessible - No longer access the vertices of the mesh after creation
     * @returns Sphere model mesh
     */
    static createSphere(engine: Engine, radius?: number, segments?: number, noLongerAccessible?: boolean): ModelMesh;
    /**
     * Create a sphere mesh by implementing Catmull-Clark Surface Subdivision Algorithm.
     * Max step is limited to 6.
     * @param engine - Engine
     * @param radius - Sphere radius
     * @param step - Number of subdiv steps
     * @param noLongerAccessible - No longer access the vertices of the mesh after creation
     * @returns Sphere model mesh
     */
    static createSubdivisionSurfaceSphere(engine: Engine, radius?: number, step?: number, noLongerAccessible?: boolean): ModelMesh;
    /**
     * Create a cuboid mesh.
     * @param engine - Engine
     * @param width - Cuboid width
     * @param height - Cuboid height
     * @param depth - Cuboid depth
     * @param noLongerAccessible - No longer access the vertices of the mesh after creation
     * @returns Cuboid model mesh
     */
    static createCuboid(engine: Engine, width?: number, height?: number, depth?: number, noLongerAccessible?: boolean): ModelMesh;
    /**
     * Create a plane mesh.
     * @param engine - Engine
     * @param width - Plane width
     * @param height - Plane height
     * @param horizontalSegments - Plane horizontal segments
     * @param verticalSegments - Plane vertical segments
     * @param noLongerAccessible - No longer access the vertices of the mesh after creation
     * @returns Plane model mesh
     */
    static createPlane(engine: Engine, width?: number, height?: number, horizontalSegments?: number, verticalSegments?: number, noLongerAccessible?: boolean): ModelMesh;
    /**
     * Create a cylinder mesh.
     * @param engine - Engine
     * @param radiusTop - The radius of top cap
     * @param radiusBottom - The radius of bottom cap
     * @param height - The height of torso
     * @param radialSegments - Cylinder radial segments
     * @param heightSegments - Cylinder height segments
     * @param noLongerAccessible - No longer access the vertices of the mesh after creation
     * @returns Cylinder model mesh
     */
    static createCylinder(engine: Engine, radiusTop?: number, radiusBottom?: number, height?: number, radialSegments?: number, heightSegments?: number, noLongerAccessible?: boolean): ModelMesh;
    /**
     * Create a torus mesh.
     * @param engine - Engine
     * @param radius - Torus radius
     * @param tubeRadius - Torus tube
     * @param radialSegments - Torus radial segments
     * @param tubularSegments - Torus tubular segments
     * @param arc - Central angle
     * @param noLongerAccessible - No longer access the vertices of the mesh after creation
     * @returns Torus model mesh
     */
    static createTorus(engine: Engine, radius?: number, tubeRadius?: number, radialSegments?: number, tubularSegments?: number, arc?: number, noLongerAccessible?: boolean): ModelMesh;
    /**
     * Create a cone mesh.
     * @param engine - Engine
     * @param radius - The radius of cap
     * @param height - The height of torso
     * @param radialSegments - Cone radial segments
     * @param heightSegments - Cone height segments
     * @param noLongerAccessible - No longer access the vertices of the mesh after creation
     * @returns Cone model mesh
     */
    static createCone(engine: Engine, radius?: number, height?: number, radialSegments?: number, heightSegments?: number, noLongerAccessible?: boolean): ModelMesh;
    /**
     * Create a capsule mesh.
     * @param engine - Engine
     * @param radius - The radius of the two hemispherical ends
     * @param height - The height of the cylindrical part, measured between the centers of the hemispherical ends
     * @param radialSegments - Hemispherical end radial segments
     * @param heightSegments - Cylindrical part height segments
     * @param noLongerAccessible - No longer access the vertices of the mesh after creation
     * @returns Capsule model mesh
     */
    static createCapsule(engine: Engine, radius?: number, height?: number, radialSegments?: number, heightSegments?: number, noLongerAccessible?: boolean): ModelMesh;
    /**
     * Duplicate vertices at the poles and adjust their UV coordinates.
     */
    private static _generateAndReplacePoleUV;
    /**
     * Get edge point index for subdivision surface sphere.
     */
    private static _calculateEdgeIndex;
    static _setCylinderData(cylinderMesh: ModelMesh, radiusTop: number, radiusBottom: number, height: number, radialSegments: number, heightSegments: number, noLongerAccessible: boolean, isRestoreMode: boolean, restoreVertexBuffer?: Buffer): void;
    static _setCapsuleData(capsuleMesh: ModelMesh, radius: number, height: number, radialSegments: number, heightSegments: number, noLongerAccessible: boolean, isRestoreMode: boolean, restoreVertexBuffer?: Buffer): void;
    private static _initialize;
    private static _generateIndices;
    private static _createCapsuleCap;
}
