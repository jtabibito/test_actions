import { Entity } from "../Entity";
import { LayerPathMask } from "./LayerPathMask";
/**
 * AnimatorLayerMask is used to mask out certain entities from being animated by an AnimatorLayer.
 */
export declare class AnimatorLayerMask {
    /**
     * Creates an AnimatorLayerMask instance by specifying an entity.
     * This will automatically add path masks for the entity and all its children.
     * @param entity - The root entity to create path masks for
     */
    static createByEntity(entity: Entity): AnimatorLayerMask;
    private static _addPathMaskWithChildren;
    private _pathMasks;
    private _pathMaskMap;
    /**
     * The list of path masks.
     */
    get pathMasks(): Readonly<LayerPathMask[]>;
    /**
     * Adds a path mask to the AnimatorLayerMask, the root path is "".
     * @param path - The path to add a mask for
     * @returns The created or existing LayerPathMask
     */
    addPathMask(path: string): LayerPathMask;
    /**
     * Removes a path mask from the AnimatorLayerMask.
     * @param path - The path of the mask to remove
     */
    removePathMask(path: string): void;
    /**
     * Get a path mask based on the given path.
     * @param path - The path of the mask to get
     * @returns The LayerPathMask for the given path
     */
    getPathMask(path: string): LayerPathMask;
    /**
     * Sets the active state of a path mask.
     * If recursive is true, it also sets the active state of all child path masks.
     * @param path - The path of the mask to modify
     * @param active - The active state to set
     * @param withChildren - Whether to apply the active state recursively to child paths
     */
    setPathMaskActive(path: string, active: boolean, withChildren?: boolean): void;
}
