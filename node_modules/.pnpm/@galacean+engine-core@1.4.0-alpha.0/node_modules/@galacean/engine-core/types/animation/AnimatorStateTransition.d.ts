import { AnimatorCondition } from "./AnimatorCondition";
import { AnimatorControllerParameterValue } from "./AnimatorControllerParameter";
import { AnimatorState } from "./AnimatorState";
import { AnimatorConditionMode } from "./enums/AnimatorConditionMode";
/**
 * Transitions define when and how the state machine switch from on state to another. AnimatorTransition always originate from a StateMachine or a StateMachine entry.
 */
export declare class AnimatorStateTransition {
    /** The duration of the transition. The duration is in normalized time by default. To set it to be in seconds, set isFixedDuration to true. */
    duration: number;
    /** The time at which the destination state will start. This is represented in normalized time. */
    offset: number;
    /** ExitTime represents the exact time at which the transition can take effect. This is represented in normalized time. */
    exitTime: number;
    /** The destination state of the transition. */
    destinationState: AnimatorState;
    /** Mutes the transition. The transition will never occur. */
    mute: boolean;
    /** Determines whether the duration of the transition is reported in a fixed duration in seconds or as a normalized time. */
    isFixedDuration: boolean;
    private _conditions;
    private _solo;
    private _hasExitTime;
    /**
     * Is the transition destination the exit of the current state machine.
     */
    get isExit(): Readonly<boolean>;
    /**
     * Mutes all other transitions in the source state.
     */
    get solo(): boolean;
    set solo(value: boolean);
    /**
     * The conditions in the transition.
     */
    get conditions(): Readonly<AnimatorCondition[]>;
    /**
     * When active the transition will have an exit time condition.
     */
    get hasExitTime(): boolean;
    set hasExitTime(value: boolean);
    /**
     * Add a condition to a transition.
     * @param parameterName - The name of the parameter
     * @param mode - The AnimatorCondition mode of the condition
     * @param threshold - The threshold value of the condition
     */
    addCondition(parameterName: string, mode?: AnimatorConditionMode, threshold?: AnimatorControllerParameterValue): AnimatorCondition;
    /**
     * Add a condition to a transition.
     * @param animatorCondition - The condition to add
     */
    addCondition(animatorCondition: AnimatorCondition): AnimatorCondition;
    /**
     * Remove a condition from the transition.
     * @param condition - The condition to remove
     */
    removeCondition(condition: AnimatorCondition): void;
}
