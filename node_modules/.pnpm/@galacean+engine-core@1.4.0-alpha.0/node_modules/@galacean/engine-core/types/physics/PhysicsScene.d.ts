import { Ray, Vector3 } from "@galacean/engine-math";
import { Layer } from "../Layer";
import { Scene } from "../Scene";
import { HitResult } from "./HitResult";
/**
 * A physics scene is a collection of colliders and constraints which can interact.
 */
export declare class PhysicsScene {
    private static _collision;
    private _scene;
    private _restTime;
    private _fixedTimeStep;
    private _colliders;
    private _gravity;
    private _nativePhysicsScene;
    private _onContactEnter;
    private _onContactExit;
    private _onContactStay;
    private _onTriggerEnter;
    private _onTriggerExit;
    private _onTriggerStay;
    /**
     * The gravity of physics scene.
     */
    get gravity(): Vector3;
    set gravity(value: Vector3);
    /**
     * The fixed time step in seconds at which physics are performed.
     */
    get fixedTimeStep(): number;
    set fixedTimeStep(value: number);
    constructor(scene: Scene);
    /**
     * Casts a ray through the Scene and returns the first hit.
     * @param ray - The ray
     * @returns Returns True if the ray intersects with a collider, otherwise false
     */
    raycast(ray: Ray): boolean;
    /**
     * Casts a ray through the Scene and returns the first hit.
     * @param ray - The ray
     * @param outHitResult - If true is returned, outHitResult will contain more detailed collision information
     * @returns Returns True if the ray intersects with a collider, otherwise false
     */
    raycast(ray: Ray, outHitResult: HitResult): boolean;
    /**
     * Casts a ray through the Scene and returns the first hit.
     * @param ray - The ray
     * @param distance - The max distance the ray should check
     * @returns Returns True if the ray intersects with a collider, otherwise false
     */
    raycast(ray: Ray, distance: number): boolean;
    /**
     * Casts a ray through the Scene and returns the first hit.
     * @param ray - The ray
     * @param distance - The max distance the ray should check
     * @param outHitResult - If true is returned, outHitResult will contain more detailed collision information
     * @returns Returns True if the ray intersects with a collider, otherwise false
     */
    raycast(ray: Ray, distance: number, outHitResult: HitResult): boolean;
    /**
     * Casts a ray through the Scene and returns the first hit.
     * @param ray - The ray
     * @param distance - The max distance the ray should check
     * @param layerMask - Layer mask that is used to selectively ignore Colliders when casting
     * @returns Returns True if the ray intersects with a collider, otherwise false
     */
    raycast(ray: Ray, distance: number, layerMask: Layer): boolean;
    /**
     * Casts a ray through the Scene and returns the first hit.
     * @param ray - The ray
     * @param distance - The max distance the ray should check
     * @param layerMask - Layer mask that is used to selectively ignore Colliders when casting
     * @param outHitResult - If true is returned, outHitResult will contain more detailed collision information
     * @returns Returns True if the ray intersects with a collider, otherwise false.
     */
    raycast(ray: Ray, distance: number, layerMask: Layer, outHitResult: HitResult): boolean;
    private _setGravity;
}
