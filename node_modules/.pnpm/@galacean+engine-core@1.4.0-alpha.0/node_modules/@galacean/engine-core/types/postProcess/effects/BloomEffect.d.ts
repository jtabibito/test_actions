import { Color } from "@galacean/engine-math";
import { RenderContext } from "../../RenderPipeline/RenderContext";
import { Material } from "../../material";
import { Texture2D } from "../../texture";
/**
 * This controls the size of the bloom texture.
 */
export declare enum BloomDownScaleMode {
    /**
     *  Use this to select half size as the starting resolution.
     */
    Half = 0,
    /**
     *  Use this to select quarter size as the starting resolution.
     */
    Quarter = 1
}
export declare class BloomEffect {
    private _uberMaterial;
    static readonly SHADER_NAME = "PostProcessEffect Bloom";
    private static _hqMacro;
    private static _dirtMacro;
    private static _bloomParams;
    private static _lowMipTextureProp;
    private static _lowMipTexelSizeProp;
    private static _enableMacro;
    private static _bloomTextureProp;
    private static _dirtTextureProp;
    private static _tintProp;
    private static _bloomIntensityParams;
    private static _dirtTilingOffsetProp;
    private _bloomMaterial;
    private _threshold;
    private _scatter;
    private _highQualityFiltering;
    private _mipDownRT;
    private _mipUpRT;
    private _maxIterations;
    private _enabled;
    /**
     * Controls the starting resolution that this effect begins processing.
     */
    downScale: BloomDownScaleMode;
    /**
     * Indicates whether the post process effect is enabled.
     */
    get enabled(): boolean;
    set enabled(value: boolean);
    /**
     * Set the level of brightness to filter out pixels under this level.
     * @remarks This value is expressed in gamma-space.
     */
    get threshold(): number;
    set threshold(value: number);
    /**
     * Controls the radius of the bloom effect.
     */
    get scatter(): number;
    set scatter(value: number);
    /**
     * Controls the strength of the bloom effect.
     */
    get intensity(): number;
    set intensity(value: number);
    /**
     * Specifies the tint of the bloom effect.
     */
    get tint(): Color;
    set tint(value: Color);
    /**
     * Controls whether to use bicubic sampling instead of bilinear sampling for the upSampling passes.
     * @remarks This is slightly more expensive but helps getting smoother visuals.
     */
    get highQualityFiltering(): boolean;
    set highQualityFiltering(value: boolean);
    /**
     * Specifies a Texture to add smudges or dust to the bloom effect.
     */
    get dirtTexture(): Texture2D;
    set dirtTexture(value: Texture2D);
    /**
     * Controls the strength of the lens dirt.
     */
    get dirtIntensity(): number;
    set dirtIntensity(value: number);
    constructor(_uberMaterial: Material);
    onRender(context: RenderContext, srcTexture: Texture2D): void;
    private _calculateMipCount;
    private _prefilter;
    private _downsample;
    private _upsample;
    private _setupUber;
    private _releaseRenderTargets;
}
