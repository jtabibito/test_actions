import { Vector2 } from "@galacean/engine-math";
import { Engine } from "../Engine";
import { Texture2D } from "../texture/Texture2D";
import { PBRBaseMaterial } from "./PBRBaseMaterial";
/**
 * PBR (Metallic-Roughness Workflow) Material.
 */
export declare class PBRMaterial extends PBRBaseMaterial {
    private static _metallicProp;
    private static _roughnessProp;
    private static _roughnessMetallicTextureProp;
    private static _iorProp;
    private static _anisotropyInfoProp;
    private static _anisotropyTextureProp;
    private _anisotropyRotation;
    private static _iridescenceInfoProp;
    private static _iridescenceThicknessTextureProp;
    private static _iridescenceTextureProp;
    private _iridescenceRange;
    /**
     * Index Of Refraction.
     * @defaultValue `1.5`
     */
    get ior(): number;
    set ior(v: number);
    /**
     * Metallic.
     * @defaultValue `1.0`
     */
    get metallic(): number;
    set metallic(value: number);
    /**
     * Roughness. default 1.0.
     * @defaultValue `1.0`
     */
    get roughness(): number;
    set roughness(value: number);
    /**
     * Roughness metallic texture.
     * @remarks G channel is roughness, B channel is metallic
     */
    get roughnessMetallicTexture(): Texture2D;
    set roughnessMetallicTexture(value: Texture2D);
    /**
     * The strength of anisotropy, when anisotropyTexture is present, this value is multiplied by the blue channel.
     * @defaultValue `0`
     */
    get anisotropy(): number;
    set anisotropy(value: number);
    /**
     * The rotation of the anisotropy in tangent, bitangent space, value in degrees.
     * @defaultValue `0`
     */
    get anisotropyRotation(): number;
    set anisotropyRotation(value: number);
    /**
     * The anisotropy texture.
     * @remarks
     * Red and green channels represent the anisotropy direction in [-1, 1] tangent, bitangent space, to be rotated by anisotropyRotation.
     * The blue channel contains strength as [0, 1] to be multiplied by anisotropy.
     */
    get anisotropyTexture(): Texture2D;
    set anisotropyTexture(value: Texture2D);
    /**
     * The iridescence intensity factor, from 0.0 to 1.0.
     * @defaultValue `0.0`
     */
    get iridescence(): number;
    set iridescence(value: number);
    /**
     * The iridescence intensity texture, sampling red channel, and multiply 'iridescence'.
     */
    get iridescenceTexture(): Texture2D;
    set iridescenceTexture(value: Texture2D);
    /**
     * The index of refraction of the dielectric thin-film layer, greater than or equal to 1.0.
     * @defaultValue `1.3`
     */
    get iridescenceIOR(): number;
    set iridescenceIOR(value: number);
    /**
     * The range of iridescence thickness, x is minimum, y is maximum.
     *  @defaultValue `[100, 400]`.
     */
    get iridescenceThicknessRange(): Vector2;
    set iridescenceThicknessRange(value: Vector2);
    /**
     * The thickness texture of the thin-film layer, sampling green channel.
     * @remarks
     * If iridescenceThicknessTexture is defined, iridescence thickness between the 'iridescenceThicknessRange'.
     * If iridescenceThicknessTexture is not defined, iridescence thickness will use only 'iridescenceThicknessRange.y'.
     */
    get iridescenceThicknessTexture(): Texture2D;
    set iridescenceThicknessTexture(value: Texture2D);
    /**
     * Create a pbr metallic-roughness workflow material instance.
     * @param engine - Engine to which the material belongs
     */
    constructor(engine: Engine);
    private _onIridescenceRangeChanged;
    /**
     * @inheritdoc
     */
    clone(): PBRMaterial;
}
