{"version":3,"file":"main.js","sources":["../src/Platform.ts","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_create_class.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_set_prototype_of.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_inherits.js","../src/2d/text/CharRenderInfo.ts","../../../node_modules/.pnpm/tslib@2.8.1/node_modules/tslib/tslib.es6.mjs","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_instanceof.js","../src/clone/enums/CloneMode.ts","../src/clone/CloneManager.ts","../src/base/EngineObject.ts","../src/asset/ReferResource.ts","../src/asset/ContentRestorer.ts","../src/texture/enums/RenderBufferDepthFormat.ts","../src/texture/enums/TextureCubeFace.ts","../src/texture/enums/TextureDepthCompareFunction.ts","../src/texture/enums/TextureFilterMode.ts","../src/texture/enums/TextureFormat.ts","../src/texture/enums/TextureUsage.ts","../src/texture/enums/TextureWrapMode.ts","../src/asset/GraphicsResource.ts","../src/base/Logger.ts","../src/texture/Texture.ts","../src/texture/RenderTarget.ts","../src/texture/Texture2D.ts","../src/texture/Texture2DArray.ts","../src/texture/TextureCube.ts","../src/2d/atlas/FontAtlas.ts","../src/2d/enums/FontStyle.ts","../src/2d/enums/TextOverflow.ts","../src/2d/text/TextUtils.ts","../src/2d/text/SubFont.ts","../src/2d/text/Font.ts","../src/2d/enums/SpriteMaskInteraction.ts","../src/2d/enums/TextAlignment.ts","../src/2d/atlas/SpriteAtlas.ts","../src/2d/enums/SpriteDrawMode.ts","../src/2d/enums/SpriteTileMode.ts","../src/Utils.ts","../src/UpdateFlagManager.ts","../src/2d/enums/SpriteModifyFlags.ts","../src/2d/sprite/Sprite.ts","../src/shader/enums/BlendFactor.ts","../src/shader/enums/BlendOperation.ts","../src/shader/enums/ColorWriteMask.ts","../src/shader/enums/CompareFunction.ts","../src/shader/enums/CullMode.ts","../src/shader/enums/RenderStateElementKey.ts","../src/shader/enums/RenderQueueType.ts","../src/shader/enums/ShaderPropertyType.ts","../src/shader/enums/StencilOperation.ts","../src/shader/enums/ShaderPlatformTarget.ts","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_array_like_to_array.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_create_for_of_iterator_helper_loose.js","../src/shader/ShaderMacro.ts","../src/shader/ShaderMacroCollection.ts","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_extends.js","../src/RenderPipeline/enums/PipelineStage.ts","../src/base/EventDispatcher.ts","../src/shader/ShaderProperty.ts","../src/base/Time.ts","../src/base/Constant.ts","../src/shaderlib/pbr/index.ts","../src/shaderlib/shadow/index.ts","../src/shaderlib/particle/index.ts","../src/shaderlib/ShaderLib.ts","../src/shaderlib/ShaderFactory.ts","../src/shader/ShaderTagKey.ts","../src/shader/ShaderPart.ts","../src/enums/ColorSpace.ts","../src/shader/ShaderUniform.ts","../src/shader/ShaderUniformBlock.ts","../src/shader/enums/ShaderDataGroup.ts","../src/shader/ShaderProgram.ts","../src/shader/enums/ShaderType.ts","../src/shader/ShaderPass.ts","../src/shader/SubShader.ts","../src/shader/state/RenderTargetBlendState.ts","../src/shader/state/BlendState.ts","../src/shader/state/DepthState.ts","../src/shader/state/RasterState.ts","../src/shader/state/StencilState.ts","../src/shader/state/RenderState.ts","../src/shader/Shader.ts","../src/shader/ShaderData.ts","../src/RenderPipeline/BatchUtils.ts","../src/enums/ActiveChangeFlag.ts","../src/Component.ts","../src/ComponentsDependencies.ts","../src/UpdateFlag.ts","../src/BoolUpdateFlag.ts","../src/Transform.ts","../src/enums/SpriteMaskLayer.ts","../src/Renderer.ts","../src/base/StaticInterfaceImplement.ts","../src/2d/assembler/SimpleSpriteAssembler.ts","../src/2d/assembler/SlicedSpriteAssembler.ts","../src/utils/DisorderedArray.ts","../src/2d/assembler/TiledSpriteAssembler.ts","../src/2d/sprite/SpriteRenderer.ts","../src/Layer.ts","../src/RenderPipeline/PipelineUtils.ts","../src/VirtualCamera.ts","../src/enums/CameraClearFlags.ts","../src/enums/CameraType.ts","../src/enums/DepthTextureMode.ts","../src/enums/Downsampling.ts","../src/enums/MSAASamples.ts","../src/enums/ReplacementFailureStrategy.ts","../src/Camera.ts","../src/enums/BackgroundMode.ts","../src/enums/BackgroundTextureFillMode.ts","../src/RenderPipeline/PipelinePass.ts","../src/RenderPipeline/RenderContext.ts","../src/RenderPipeline/enums/RenderQueueMaskType.ts","../src/RenderPipeline/RenderQueue.ts","../src/shadow/ShadowSliceData.ts","../src/shadow/enum/ShadowResolution.ts","../src/shadow/enum/ShadowType.ts","../src/shadow/ShadowUtils.ts","../src/shadow/enum/ShadowCascadesMode.ts","../src/shadow/CascadedShadowCasterPass.ts","../src/RenderPipeline/CullingResults.ts","../src/RenderPipeline/DepthOnlyPass.ts","../src/RenderPipeline/OpaqueTexturePass.ts","../src/RenderPipeline/BasicRenderPipeline.ts","../src/RenderPipeline/RenderElement.ts","../src/RenderPipeline/SubRenderElement.ts","../src/2d/sprite/SpriteMask.ts","../src/2d/text/TextRenderer.ts","../src/graphic/enums/BufferUsage.ts","../src/graphic/enums/SetDataOptions.ts","../src/graphic/Buffer.ts","../src/graphic/enums/IndexFormat.ts","../src/graphic/enums/VertexElementFormat.ts","../src/graphic/BufferUtil.ts","../src/graphic/VertexElement.ts","../src/graphic/enums/BufferBindFlag.ts","../src/graphic/enums/MeshTopology.ts","../src/material/enums/BlendMode.ts","../src/material/enums/RenderFace.ts","../src/material/Material.ts","../src/material/BaseMaterial.ts","../src/material/BlinnPhongMaterial.ts","../src/material/enums/TextureCoordinate.ts","../src/material/PBRBaseMaterial.ts","../src/material/PBRMaterial.ts","../src/material/PBRSpecularMaterial.ts","../src/material/UnlitMaterial.ts","../src/mesh/BlendShapeFrame.ts","../src/mesh/BlendShape.ts","../src/graphic/IndexBufferBinding.ts","../src/graphic/SubPrimitive.ts","../src/graphic/SubMesh.ts","../src/graphic/Primitive.ts","../src/graphic/Mesh.ts","../src/graphic/VertexBufferBinding.ts","../src/mesh/BufferMesh.ts","../src/mesh/MeshRenderer.ts","../src/mesh/BlendShapeManager.ts","../src/mesh/enums/VertexAttribute.ts","../src/mesh/ModelMesh.ts","../src/mesh/PrimitiveMeshRestorer.ts","../src/mesh/PrimitiveMesh.ts","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_is_native_reflect_construct.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_construct.js","../src/clone/ComponentCloner.ts","../src/Entity.ts","../src/mesh/Skin.ts","../src/mesh/SkinnedMeshRenderer.ts","../src/BasicResources.ts","../src/utils/ObjectPool.ts","../src/utils/ReturnableObjectPool.ts","../src/RenderPipeline/SubPrimitiveChunk.ts","../src/RenderPipeline/VertexArea.ts","../src/RenderPipeline/PrimitiveChunk.ts","../src/RenderPipeline/PrimitiveChunkManager.ts","../src/RenderPipeline/BatcherManager.ts","../src/asset/AssetType.ts","../src/utils/SafeLoopArray.ts","../src/SceneManager.ts","../src/asset/AssetPromise.ts","../src/asset/request.ts","../src/asset/ResourceManager.ts","../src/input/enums/PointerPhase.ts","../src/input/pointer/Pointer.ts","../src/input/enums/PointerButton.ts","../src/SystemInfo.ts","../src/input/enums/Keys.ts","../src/input/keyboard/KeyboardManager.ts","../src/physics/Collider.ts","../src/physics/Collision.ts","../src/physics/PhysicsScene.ts","../src/physics/enums/ControllerNonWalkableMode.ts","../src/physics/CharacterController.ts","../src/physics/DynamicCollider.ts","../src/physics/HitResult.ts","../src/physics/enums/PhysicsMaterialCombineMode.ts","../src/physics/PhysicsMaterial.ts","../src/physics/StaticCollider.ts","../src/physics/enums/ColliderShapeUpAxis.ts","../src/physics/enums/ControllerCollisionFlag.ts","../src/physics/joint/Joint.ts","../src/physics/joint/FixedJoint.ts","../src/physics/enums/HingeJointFlag.ts","../src/physics/joint/HingeJoint.ts","../src/physics/joint/SpringJoint.ts","../src/physics/joint/JointLimits.ts","../src/physics/joint/JointMotor.ts","../src/physics/shape/ColliderShape.ts","../src/physics/shape/BoxColliderShape.ts","../src/physics/shape/SphereColliderShape.ts","../src/physics/shape/PlaneColliderShape.ts","../src/physics/shape/CapsuleColliderShape.ts","../src/input/pointer/PointerManager.ts","../src/input/wheel/WheelManager.ts","../src/input/InputManager.ts","../src/particle/enums/attributes/BillboardParticleVertexAttribute.ts","../src/particle/enums/attributes/ParticleInstanceVertexAttribute.ts","../src/particle/ParticleBufferUtils.ts","../src/shader/ShaderPool.ts","../src/shader/ShaderProgramPool.ts","../src/utils/ClearableObjectPool.ts","../src/xr/XRManager.ts","../src/Engine.ts","../src/Canvas.ts","../src/sky/Sky.ts","../src/Background.ts","../src/ComponentsManager.ts","../src/RenderPipeline/MaskManager.ts","../src/enums/FogMode.ts","../src/lighting/enums/DiffuseMode.ts","../src/lighting/AmbientLight.ts","../src/lighting/Light.ts","../src/lighting/DirectLight.ts","../src/lighting/PointLight.ts","../src/lighting/SpotLight.ts","../src/lighting/LightManager.ts","../src/postProcess/effects/BloomEffect.ts","../src/postProcess/effects/TonemappingEffect.ts","../src/postProcess/PostProcessManager.ts","../src/postProcess/index.ts","../src/Scene.ts","../src/Script.ts","../src/asset/Loader.ts","../src/animation/internal/animationCurveOwner/assembler/UniversalAnimationCurveOwnerAssembler.ts","../src/animation/internal/animationCurveOwner/AnimationCurveOwner.ts","../src/animation/internal/animationCurveOwner/assembler/PositionAnimationCurveOwnerAssembler.ts","../src/animation/internal/animationCurveOwner/assembler/RotationAnimationCurveOwnerAssembler.ts","../src/animation/internal/animationCurveOwner/assembler/ScaleAnimationCurveOwnerAssembler.ts","../src/animation/internal/animationCurveOwner/assembler/BlendShapeWeightsAnimationCurveOwnerAssembler.ts","../src/animation/internal/AnimationCurveLayerOwner.ts","../src/animation/AnimationClipCurveBinding.ts","../src/animation/AnimationEvent.ts","../src/animation/AnimationClip.ts","../src/animation/enums/InterpolationType.ts","../src/animation/animationCurve/AnimationCurve.ts","../src/animation/animationCurve/AnimationArrayCurve.ts","../src/animation/animationCurve/AnimationBoolCurve.ts","../src/animation/animationCurve/AnimationColorCurve.ts","../src/animation/animationCurve/AnimationFloatArrayCurve.ts","../src/animation/animationCurve/AnimationFloatCurve.ts","../src/animation/animationCurve/AnimationQuaternionCurve.ts","../src/animation/animationCurve/AnimationVector2Curve.ts","../src/animation/animationCurve/AnimationVector3Curve.ts","../src/animation/animationCurve/AnimationVector4Curve.ts","../src/animation/animationCurve/AnimationRefCurve.ts","../src/animation/animationCurve/AnimationRectCurve.ts","../src/animation/animationCurve/AnimationStringCurve.ts","../src/animation/enums/AnimatorConditionMode.ts","../src/animation/enums/AnimatorCullingMode.ts","../src/animation/enums/AnimatorLayerBlendingMode.ts","../src/animation/enums/AnimatorStatePlayState.ts","../src/animation/enums/LayerState.ts","../src/animation/internal/AnimationEventHandler.ts","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_type_of.js","../src/animation/AnimatorCondition.ts","../src/animation/AnimatorStateTransition.ts","../src/animation/enums/WrapMode.ts","../src/animation/internal/AnimatorStatePlayData.ts","../src/animation/internal/AnimatorLayerData.ts","../src/animation/internal/AnimatorStateData.ts","../src/animation/Animator.ts","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_assert_this_initialized.js","../src/animation/AnimatorControllerParameter.ts","../src/animation/AnimatorController.ts","../src/animation/AnimatorStateTransitionCollection.ts","../src/animation/StateMachineScript.ts","../src/animation/AnimatorState.ts","../src/animation/AnimatorStateMachine.ts","../src/animation/AnimatorControllerLayer.ts","../src/animation/Keyframe.ts","../src/animation/LayerPathMask.ts","../src/animation/AnimatorLayerMask.ts","../src/sky/SkyBoxMaterial.ts","../src/sky/SkyProceduralMaterial.ts","../src/particle/enums/ParticleRenderMode.ts","../src/particle/enums/ParticleSimulationSpace.ts","../src/particle/enums/ParticleStopMode.ts","../src/particle/ParticleRenderer.ts","../src/particle/enums/ParticleCurveMode.ts","../src/particle/enums/ParticleGradientMode.ts","../src/particle/enums/ParticleRandomSubSeeds.ts","../src/particle/modules/ParticleGradient.ts","../src/particle/modules/ParticleCompositeGradient.ts","../src/particle/modules/ParticleGeneratorModule.ts","../src/particle/modules/ColorOverLifetimeModule.ts","../src/particle/modules/ParticleCompositeCurve.ts","../src/particle/modules/EmissionModule.ts","../src/particle/enums/ParticleScaleMode.ts","../src/particle/modules/MainModule.ts","../src/particle/modules/RotationOverLifetimeModule.ts","../src/particle/modules/ParticleCurve.ts","../src/particle/modules/SizeOverLifetimeModule.ts","../src/particle/modules/TextureSheetAnimationModule.ts","../src/particle/modules/VelocityOverLifetimeModule.ts","../src/particle/ParticleGenerator.ts","../src/particle/ParticleMaterial.ts","../src/particle/modules/Burst.ts","../src/particle/modules/shape/BaseShape.ts","../src/particle/modules/shape/ShapeUtils.ts","../src/particle/modules/shape/enums/ParticleShapeType.ts","../src/particle/modules/shape/BoxShape.ts","../src/particle/modules/shape/enums/ParticleShapeArcMode.ts","../src/particle/modules/shape/CircleShape.ts","../src/particle/modules/shape/ConeShape.ts","../src/particle/modules/shape/HemisphereShape.ts","../src/particle/modules/shape/SphereShape.ts","../src/trail/TrailMaterial.ts","../src/trail/TrailRenderer.ts","../src/env-probe/Probe.ts","../src/env-probe/CubeProbe.ts"],"sourcesContent":["/**\n * The platform (including operating system and hardware) is running on.\n */\nexport enum Platform {\n  /** Android platform. */\n  Android,\n  /** IPhone platform. */\n  IPhone,\n  /** IPad platform. */\n  IPad,\n  /** Mac platform. */\n  Mac,\n  /** Unknown platform. */\n  Unknown\n}\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","function _set_prototype_of(o, p) {\n    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {\n        o.__proto__ = p;\n\n        return o;\n    };\n\n    return _set_prototype_of(o, p);\n}\nexport { _set_prototype_of as _ };\n","import { _ as _set_prototype_of } from \"./_set_prototype_of.js\";\n\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });\n\n    if (superClass) _set_prototype_of(subClass, superClass);\n}\nexport { _inherits as _ };\n","import { Vector2, Vector4 } from \"@galacean/engine-math\";\nimport { Texture2D } from \"../../texture\";\nimport { IPoolElement } from \"../../utils/ObjectPool\";\n\n/**\n * @internal\n */\nexport class CharRenderInfo implements IPoolElement {\n  static triangles = [0, 2, 1, 2, 0, 3];\n\n  texture: Texture2D;\n  /** x:Top y:Left z:Bottom w:Right */\n  localPositions = new Vector4();\n  uvs: Vector2[];\n  indexInChunk: number;\n\n  dispose(): void {\n    this.texture = null;\n    this.localPositions = null;\n    this.uvs = null;\n  }\n}\n","/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nvar ownKeys = function(o) {\n  ownKeys = Object.getOwnPropertyNames || function (o) {\n    var ar = [];\n    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n    return ar;\n  };\n  return ownKeys(o);\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r, s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n        }\n        else s |= 1;\n      }\n      catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\n  if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\n      return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\n          return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\n      });\n  }\n  return path;\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __esDecorate,\n  __runInitializers,\n  __propKey,\n  __setFunctionName,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n  __rewriteRelativeImportExtension,\n};\n","function _instanceof(left, right) {\n    if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n        return !!right[Symbol.hasInstance](left);\n    } else return left instanceof right;\n}\nexport { _instanceof as _ };\n","/**\n * Clone mode.\n */\nexport enum CloneMode {\n  /** Ignore clone. */\n  Ignore,\n  /** Assignment clone. */\n  Assignment,\n  /** Shallow clone. */\n  Shallow,\n  /** Deep clone. */\n  Deep\n}\n","import { Entity } from \"../Entity\";\nimport { TypedArray } from \"../base/Constant\";\nimport { IComponentCustomClone, ICustomClone } from \"./ComponentCloner\";\nimport { CloneMode } from \"./enums/CloneMode\";\n\n/**\n * Property decorator, ignore the property when cloning.\n */\nexport function ignoreClone(target: Object, propertyKey: string): void {\n  CloneManager.registerCloneMode(target, propertyKey, CloneMode.Ignore);\n}\n\n/**\n * Property decorator, assign value to the property when cloning.\n *\n * @remarks\n * If it's a primitive type, the value will be copied.\n * If it's a class type, the reference will be copied.\n */\nexport function assignmentClone(target: Object, propertyKey: string): void {\n  CloneManager.registerCloneMode(target, propertyKey, CloneMode.Assignment);\n}\n\n/**\n * Property decorator, shallow clone the property when cloning.\n * After cloning, it will keep its own reference independent, and use the method of assignment to clone all its internal properties.\n * if the internal property is a primitive type, the value will be copied, if the internal property is a reference type, its reference address will be copied.。\n *\n * @remarks\n * Applicable to Object, Array, TypedArray and Class types.\n */\nexport function shallowClone(target: Object, propertyKey: string): void {\n  CloneManager.registerCloneMode(target, propertyKey, CloneMode.Shallow);\n}\n\n/**\n * Property decorator, deep clone the property when cloning.\n * After cloning, it will maintain its own reference independence, and all its internal deep properties will remain completely independent.\n *\n * @remarks\n * Applicable to Object, Array, TypedArray and Class types.\n * If Class is encountered during the deep cloning process, the custom cloning function of the object will be called first.\n * Custom cloning requires the object to implement the IClone interface.\n */\nexport function deepClone(target: Object, propertyKey: string): void {\n  CloneManager.registerCloneMode(target, propertyKey, CloneMode.Deep);\n}\n\n/**\n * @internal\n * Clone manager.\n */\nexport class CloneManager {\n  /** @internal */\n  static _subCloneModeMap = new Map<Object, Object>();\n  /** @internal */\n  static _cloneModeMap = new Map<Object, Object>();\n\n  private static _objectType = Object.getPrototypeOf(Object);\n\n  /**\n   * Register clone mode.\n   * @param target - Clone target\n   * @param propertyKey - Clone property name\n   * @param mode - Clone mode\n   */\n  static registerCloneMode(target: Object, propertyKey: string, mode: CloneMode): void {\n    let targetMap = CloneManager._subCloneModeMap.get(target.constructor);\n    if (!targetMap) {\n      targetMap = Object.create(null);\n      CloneManager._subCloneModeMap.set(target.constructor, targetMap);\n    }\n    targetMap[propertyKey] = mode;\n  }\n\n  /**\n   * Get the clone mode according to the prototype chain.\n   */\n  static getCloneMode(type: Function): Object {\n    let cloneModes = CloneManager._cloneModeMap.get(type);\n    if (!cloneModes) {\n      cloneModes = Object.create(null);\n      CloneManager._cloneModeMap.set(type, cloneModes);\n      const objectType = CloneManager._objectType;\n      const cloneModeMap = CloneManager._subCloneModeMap;\n      while (type !== objectType) {\n        const subCloneModes = cloneModeMap.get(type);\n        if (subCloneModes) {\n          Object.assign(cloneModes, subCloneModes);\n        }\n        type = Object.getPrototypeOf(type);\n      }\n    }\n    return cloneModes;\n  }\n\n  static cloneProperty(\n    source: Object,\n    target: Object,\n    k: string | number,\n    cloneMode: CloneMode,\n    srcRoot: Entity,\n    targetRoot: Entity,\n    deepInstanceMap: Map<Object, Object>\n  ): void {\n    if (cloneMode === CloneMode.Ignore) {\n      return;\n    }\n\n    const sourceProperty = source[k];\n    if (sourceProperty instanceof Object) {\n      if (cloneMode === undefined || cloneMode === CloneMode.Assignment) {\n        target[k] = sourceProperty;\n        return;\n      }\n\n      const type = sourceProperty.constructor;\n      switch (type) {\n        case Uint8Array:\n        case Uint16Array:\n        case Uint32Array:\n        case Int8Array:\n        case Int16Array:\n        case Int32Array:\n        case Float32Array:\n        case Float64Array:\n          let targetPropertyT = <TypedArray>target[k];\n          if (targetPropertyT == null || targetPropertyT.length !== (<TypedArray>sourceProperty).length) {\n            target[k] = (<TypedArray>sourceProperty).slice();\n          } else {\n            targetPropertyT.set(<TypedArray>sourceProperty);\n          }\n          break;\n        case Array:\n          let targetPropertyA = <Array<any>>target[k];\n          const length = (<Array<any>>sourceProperty).length;\n          if (targetPropertyA == null) {\n            target[k] = targetPropertyA = new Array<any>(length);\n          } else {\n            targetPropertyA.length = length;\n          }\n          for (let i = 0; i < length; i++) {\n            CloneManager.cloneProperty(\n              <Array<any>>sourceProperty,\n              targetPropertyA,\n              i,\n              cloneMode,\n              srcRoot,\n              targetRoot,\n              deepInstanceMap\n            );\n          }\n          break;\n        default:\n          let targetProperty = <Object>target[k];\n          // If the target property is undefined, create new instance and keep reference sharing like the source\n          if (!targetProperty) {\n            targetProperty = deepInstanceMap.get(sourceProperty);\n            if (!targetProperty) {\n              targetProperty = new sourceProperty.constructor();\n              deepInstanceMap.set(sourceProperty, targetProperty);\n            }\n            target[k] = targetProperty;\n          }\n\n          if ((<ICustomClone>sourceProperty).copyFrom) {\n            // Custom clone\n            (<ICustomClone>targetProperty).copyFrom(<ICustomClone>sourceProperty);\n          } else {\n            // Universal clone\n            const cloneModes = CloneManager.getCloneMode(sourceProperty.constructor);\n            for (let k in sourceProperty) {\n              CloneManager.cloneProperty(\n                <Object>sourceProperty,\n                targetProperty,\n                k,\n                cloneModes[k],\n                srcRoot,\n                targetRoot,\n                deepInstanceMap\n              );\n            }\n\n            // Custom incremental clone\n            if ((<IComponentCustomClone>sourceProperty)._cloneTo) {\n              (<IComponentCustomClone>sourceProperty)._cloneTo(\n                <IComponentCustomClone>targetProperty,\n                srcRoot,\n                targetRoot\n              );\n            }\n          }\n          break;\n      }\n    } else {\n      // null, undefined, primitive type, function\n      target[k] = sourceProperty;\n    }\n  }\n\n  static deepCloneObject(source: Object, target: Object, deepInstanceMap: Map<Object, Object>): void {\n    for (let k in source) {\n      CloneManager.cloneProperty(source, target, k, CloneMode.Deep, null, null, deepInstanceMap);\n    }\n  }\n}\n","import { ignoreClone } from \"../clone/CloneManager\";\nimport { Engine } from \"../Engine\";\n\n/**\n * EngineObject.\n */\nexport abstract class EngineObject {\n  private static _instanceIdCounter: number = 0;\n\n  /** Engine unique id. */\n  @ignoreClone\n  readonly instanceId: number = ++EngineObject._instanceIdCounter;\n\n  @ignoreClone\n  protected _engine: Engine;\n  protected _destroyed: boolean = false;\n\n  /**\n   * Get the engine which the object belongs.\n   */\n  get engine(): Engine {\n    return this._engine;\n  }\n\n  /**\n   * Whether it has been destroyed.\n   */\n  get destroyed(): boolean {\n    return this._destroyed;\n  }\n\n  constructor(engine: Engine) {\n    this._engine = engine;\n  }\n\n  /**\n   * Destroy self.\n   */\n  destroy(): void {\n    if (this._destroyed) return;\n    this._onDestroy();\n    this._destroyed = true;\n  }\n\n  protected _onDestroy(): void {\n    const { resourceManager } = this._engine;\n    resourceManager._deleteAsset(this);\n    resourceManager._deleteContentRestorer(this);\n  }\n}\n","import { EngineObject } from \"../base/EngineObject\";\nimport { Engine } from \"../Engine\";\nimport { IReferable } from \"./IReferable\";\n\n/**\n * The base class of assets, with reference counting capability.\n */\nexport abstract class ReferResource extends EngineObject implements IReferable {\n  /** Whether to ignore the garbage collection check, if it is true, it will not be affected by ResourceManager.gc(). */\n  isGCIgnored: boolean = false;\n\n  private _refCount: number = 0;\n  private _superResources: ReferResource[] = null;\n\n  /**\n   * Counted by valid references.\n   */\n  get refCount(): number {\n    return this._refCount;\n  }\n\n  protected constructor(engine: Engine) {\n    super(engine);\n    engine.resourceManager._addReferResource(this);\n  }\n\n  /**\n   * Destroy self.\n   * @param force - Whether to force the destruction, if it is false, refCount = 0 can be released successfully\n   * @returns Whether the release was successful\n   */\n  override destroy(force?: boolean): boolean;\n\n  /**\n   * @internal\n   */\n  override destroy(force: boolean, isGC: boolean): boolean;\n\n  override destroy(force: boolean = false, isGC?: boolean): boolean {\n    if (!force) {\n      if (this._refCount !== 0) {\n        return false;\n      }\n\n      const superResources = this._superResources;\n      if (superResources?.length) {\n        if (isGC) {\n          for (let i = 0, n = superResources.length; i < n; i++) {\n            if (superResources[i].refCount > 0) {\n              return false;\n            }\n          }\n        } else {\n          return false;\n        }\n      }\n    }\n\n    super.destroy();\n    return true;\n  }\n\n  /**\n   * @internal\n   */\n  _associationSuperResource(superResource: ReferResource): void {\n    (this._superResources ||= []).push(superResource);\n  }\n\n  /**\n   * @internal\n   */\n  _disassociationSuperResource(superResource: ReferResource): void {\n    const superResources = this._superResources;\n    const index = superResources.indexOf(superResource);\n    superResources.splice(index, 1);\n  }\n\n  /**\n   * @internal\n   */\n  _getReferCount(): number {\n    return this._refCount;\n  }\n\n  /**\n   * @internal\n   */\n  _addReferCount(value: number): void {\n    this._refCount += value;\n  }\n\n  /**\n   * @internal\n   */\n  _addToResourceManager(path: string): void {\n    this._engine.resourceManager._addAsset(path, this);\n  }\n\n  /**\n   * @internal\n   */\n  protected override _onDestroy(): void {\n    super._onDestroy();\n    this._engine.resourceManager._deleteReferResource(this);\n    const refCount = this._getReferCount();\n    if (refCount > 0) {\n      this._addReferCount(-refCount);\n    }\n  }\n}\n","import { EngineObject } from \"../base\";\nimport { AssetPromise } from \"./AssetPromise\";\n\n/**\n * ContentRestorer is a base class for all content restore info classes.\n */\nexport abstract class ContentRestorer<T extends EngineObject> {\n  /**\n   * @param resource - The resource object of the content restorer\n   */\n  constructor(public resource: T) {}\n\n  /**\n   * Restore the content of the resource.\n   * @returns The promise of the restored content if the content is restored asynchronously, otherwise returns undefined\n   */\n  abstract restoreContent(): AssetPromise<T> | void;\n}\n","/**\n * @deprecated Please use `TextureFormat` instead.\n *\n * Render buffer depth format enumeration.\n */\nexport enum RenderBufferDepthFormat {\n  /** Render to depth buffer,engine will automatically select the supported precision. */\n  Depth = 27,\n  /** Render to stencil buffer. */\n  Stencil = 28,\n  /** Render to depth stencil buffer, engine will automatically select the supported precision. */\n  DepthStencil = 29,\n\n  /** Force 16-bit depth buffer. */\n  Depth16 = 30,\n  /** Force 24-bit depth buffer. */\n  Depth24 = 31,\n  /** Force 32-bit depth buffer. */\n  Depth32 = 32,\n  /** Force 16-bit depth + 8-bit stencil buffer. */\n  Depth24Stencil8 = 33,\n  /** Force 32-bit depth + 8-bit stencil buffer. */\n  Depth32Stencil8 = 34\n}\n","/**\n * Define the face of the cube texture.\n */\nexport enum TextureCubeFace {\n  /** Positive X face for a cube-mapped texture. */\n  PositiveX = 0,\n  /** Negative X face for a cube-mapped texture. */\n  NegativeX = 1,\n  /** Positive Y face for a cube-mapped texture. */\n  PositiveY = 2,\n  /** Negative Y face for a cube-mapped texture. */\n  NegativeY = 3,\n  /** Positive Z face for a cube-mapped texture. */\n  PositiveZ = 4,\n  /** Negative Z face for a cube-mapped texture. */\n  NegativeZ = 5\n}\n","/**\n * Define the compare mode of depth texture.\n */\nexport enum TextureDepthCompareFunction {\n  /** never pass. */\n  Never,\n  /** pass if the compare value is less than the sample value. */\n  Less,\n  /** pass if the compare value equals the sample value. */\n  Equal,\n  /** pass if the compare value is less than or equal to the sample value. */\n  LessEqual,\n  /** pass if the compare value is greater than the sample value. */\n  Greater,\n  /** pass if the compare value is not equal to the sample value. */\n  NotEqual,\n  /** pass if the compare value is greater than or equal to the sample value. */\n  GreaterEqual,\n  /** always pass. */\n  Always\n}\n","/**\n * The filter mode of the texture.\n */\nexport enum TextureFilterMode {\n  /** Point filtering. */\n  Point = 0,\n  /** Bilinear filtering. */\n  Bilinear = 1,\n  /** Trilinear filtering. */\n  Trilinear = 2\n}\n","/**\n * Texture format enumeration.\n */\nexport enum TextureFormat {\n  /** RGB format, 8 bits per channel. */\n  R8G8B8 = 0,\n  /** RGBA format, 8 bits per channel. */\n  R8G8B8A8 = 1,\n  /** RGBA format, 4 bits per channel. */\n  R4G4B4A4 = 2,\n  /** RGBA format, 5 bits in R channel, 5 bits in G channel, 5 bits in B channel, 1 bit in A channel. */\n  R5G5B5A1 = 3,\n  /** RGB format, 5 bits in R channel, 6 bits in G channel, 5 bits in B channel. */\n  R5G6B5 = 4,\n  /** Transparent format, 8 bits. */\n  Alpha8 = 5,\n  /** Luminance/alpha in RGB channel, alpha in A channel. */\n  LuminanceAlpha = 6,\n  /** RGBA format, 16 bits per channel. */\n  R16G16B16A16 = 7,\n  /** RGBA format, 32 bits per channel. */\n  R32G32B32A32 = 8,\n  /** RGBA unsigned integer format, 32 bits per channel. */\n  R32G32B32A32_UInt = 9,\n  /** RGB unsigned float format, 11 bits in R channel, 11 bits in G channel, 10 bits in B channel. */\n  R11G11B10_UFloat = 35,\n\n  /** RGB compressed format, 4 bits per pixel. */\n  BC1 = 10,\n  /** RGBA compressed format, 8 bits per pixel. */\n  BC3 = 11,\n  /** RGB(A) compressed format, 128 bits per 4x4 pixel block. */\n  BC7 = 12,\n  /** RGB compressed format, 4 bits per pixel. */\n  ETC1_RGB = 13,\n  /** RGB compressed format, 4 bits per pixel. */\n  ETC2_RGB = 14,\n  /** RGBA compressed format, 5 bits per pixel, 4 bit in RGB, 1 bit in A. */\n  ETC2_RGBA5 = 15,\n  /** RGB compressed format, 8 bits per pixel. */\n  ETC2_RGBA8 = 16,\n  /** RGB compressed format, 2 bits per pixel. */\n  PVRTC_RGB2 = 17,\n  /** RGBA compressed format, 2 bits per pixel. */\n  PVRTC_RGBA2 = 18,\n  /** RGB compressed format, 4 bits per pixel. */\n  PVRTC_RGB4 = 19,\n  /** RGBA compressed format, 4 bits per pixel. */\n  PVRTC_RGBA4 = 20,\n  /** RGB(A) compressed format, 128 bits per 4x4 pixel block. */\n  ASTC_4x4 = 21,\n  /** RGB(A) compressed format, 128 bits per 5x5 pixel block. */\n  ASTC_5x5 = 22,\n  /** RGB(A) compressed format, 128 bits per 6x6 pixel block. */\n  ASTC_6x6 = 23,\n  /** RGB(A) compressed format, 128 bits per 8x8 pixel block. */\n  ASTC_8x8 = 24,\n  /** RGB(A) compressed format, 128 bits per 10x10 pixel block. */\n  ASTC_10x10 = 25,\n  /** RGB(A) compressed format, 128 bits per 12x12 pixel block. */\n  ASTC_12x12 = 26,\n\n  /** Automatic depth format, engine will automatically select the supported precision. */\n  Depth = 27,\n  /** Render to stencil buffer. */\n  Stencil = 28,\n  /** Automatic depth stencil format, engine will automatically select the supported precision. */\n  DepthStencil = 29,\n  /** 16-bit depth format. */\n  Depth16 = 30,\n  /** 24-bit depth format. */\n  Depth24 = 31,\n  /** 32-bit depth format. */\n  Depth32 = 32,\n  /** 16-bit depth + 8-bit stencil format. */\n  Depth24Stencil8 = 33,\n  /** 32-bit depth + 8-bit stencil format. */\n  Depth32Stencil8 = 34,\n\n  /** @deprecated Use `TextureFormat.BC1` instead. */\n  DXT1 = 10,\n  /** @deprecated Use `TextureFormat.BC3` instead. */\n  DXT5 = 11\n}\n","/**\n * Texture usage.\n */\nexport enum TextureUsage {\n  /** The content of the texture is intended to be specified once.  */\n  Static,\n  /** The content of the texture is intended to be updated frequently, with better performance. */\n  Dynamic\n}\n","/**\n * Wrapping mode of the texture.\n */\nexport enum TextureWrapMode {\n  /** Clamping mode. use the color of edge pixels beyond the texture boundary. */\n  Clamp = 0,\n  /** Repeating mode. tiling will be repeated if it exceeds the texture boundary. */\n  Repeat = 1,\n  /** Mirror repeat mode. tiling will be mirrored and repeated if it exceeds the texture boundary. */\n  Mirror = 2\n}\n","import { Engine } from \"../Engine\";\nimport { ReferResource } from \"./ReferResource\";\n\nexport abstract class GraphicsResource extends ReferResource {\n  /** @internal */\n  _isContentLost: boolean = false;\n\n  /**\n   * Whether the content of the resource is lost.\n   */\n  get isContentLost(): boolean {\n    return this._isContentLost;\n  }\n\n  protected constructor(engine: Engine) {\n    super(engine);\n    engine.resourceManager._addGraphicResource(this);\n  }\n\n  /**\n   * @internal\n   */\n  abstract _rebuild(): void;\n\n  /**\n   * @internal\n   */\n  protected override _onDestroy(): void {\n    super._onDestroy();\n    this.engine.resourceManager._deleteGraphicResource(this);\n  }\n}\n","/**\n * @class\n * @private\n */\n/* tslint:disable */\nconst noop = (message?: any, ...optionalParams: any[]) => {};\nconst debug = console.log.bind(console);\nconst info = console.info.bind(console);\nconst warn = console.warn.bind(console);\nconst error = console.error.bind(console);\n\nexport const Logger = {\n  debug: noop,\n  info: noop,\n  warn: noop,\n  error: noop,\n  isEnabled: false,\n\n  /** Turn on log */\n  enable() {\n    this.debug = debug;\n    this.info = info;\n    this.warn = warn;\n    this.error = error;\n    this.isEnabled = true;\n  },\n\n  /** Turn off log */\n  disable() {\n    this.debug = noop;\n    this.info = noop;\n    this.warn = noop;\n    this.error = noop;\n    this.isEnabled = false;\n  }\n};\n","import { GraphicsResource } from \"../asset/GraphicsResource\";\nimport { Logger } from \"../base/Logger\";\nimport { IPlatformTexture } from \"../renderingHardwareInterface\";\nimport { TextureDepthCompareFunction } from \"./enums/TextureDepthCompareFunction\";\nimport { TextureFilterMode } from \"./enums/TextureFilterMode\";\nimport { TextureFormat } from \"./enums/TextureFormat\";\nimport { TextureUsage } from \"./enums/TextureUsage\";\nimport { TextureWrapMode } from \"./enums/TextureWrapMode\";\n\n/**\n * The base class of texture, contains some common functions of texture-related classes.\n */\nexport abstract class Texture extends GraphicsResource {\n  name: string;\n\n  /** @internal */\n  _platformTexture: IPlatformTexture;\n  /** @internal */\n  _mipmap: boolean;\n  /** @internal */\n  _isDepthTexture: boolean = false;\n\n  protected _format: TextureFormat;\n  protected _width: number;\n  protected _height: number;\n  protected _usage: TextureUsage;\n  protected _mipmapCount: number;\n\n  private _wrapModeU: TextureWrapMode;\n  private _wrapModeV: TextureWrapMode;\n  private _filterMode: TextureFilterMode;\n  private _anisoLevel: number = 1;\n  private _depthCompareFunction: TextureDepthCompareFunction;\n  private _useDepthCompareMode: boolean = false;\n\n  /**\n   * Texture format.\n   */\n  get format(): TextureFormat {\n    return this._format;\n  }\n\n  /**\n   * The width of the texture.\n   */\n  get width(): number {\n    return this._width;\n  }\n\n  /**\n   * The height of the texture.\n   */\n  get height(): number {\n    return this._height;\n  }\n\n  /**\n   * The usage of the texture.\n   */\n  get usage(): TextureUsage {\n    return this._usage;\n  }\n\n  /**\n   * Wrapping mode for texture coordinate S.\n   */\n  get wrapModeU(): TextureWrapMode {\n    return this._wrapModeU;\n  }\n\n  set wrapModeU(value: TextureWrapMode) {\n    if (value === this._wrapModeU) return;\n    this._wrapModeU = value;\n\n    this._platformTexture.wrapModeU = value;\n  }\n\n  /**\n   * Wrapping mode for texture coordinate T.\n   */\n  get wrapModeV(): TextureWrapMode {\n    return this._wrapModeV;\n  }\n\n  set wrapModeV(value: TextureWrapMode) {\n    if (value === this._wrapModeV) return;\n    this._wrapModeV = value;\n\n    this._platformTexture.wrapModeV = value;\n  }\n\n  /**\n   * Texture mipmapping count.\n   */\n  get mipmapCount(): number {\n    return this._mipmapCount;\n  }\n\n  /**\n   * Filter mode for texture.\n   */\n  get filterMode(): TextureFilterMode {\n    return this._filterMode;\n  }\n\n  set filterMode(value: TextureFilterMode) {\n    if (value === this._filterMode) return;\n\n    if (value !== TextureFilterMode.Point && this._isIntFormat()) {\n      value = TextureFilterMode.Point;\n      Logger.warn(`Int or UInt format texture only support TextureFilterMode.Point`);\n      return;\n    }\n\n    this._filterMode = value;\n\n    this._platformTexture.filterMode = value;\n  }\n\n  /**\n   * Anisotropic level for texture.\n   */\n  get anisoLevel(): number {\n    return this._anisoLevel;\n  }\n\n  set anisoLevel(value: number) {\n    const max = this._engine._hardwareRenderer.capability.maxAnisoLevel;\n\n    if (value > max) {\n      Logger.warn(`anisoLevel:${value}, exceeds the limit and is automatically downgraded to:${max}`);\n      value = max;\n    }\n\n    if (value < 1) {\n      Logger.warn(`anisoLevel:${value}, must be greater than 0, and is automatically downgraded to 1`);\n      value = 1;\n    }\n\n    if (value === this._anisoLevel) return;\n\n    this._anisoLevel = value;\n\n    this._platformTexture.anisoLevel = value;\n  }\n\n  /**\n   * Filter mode when texture as depth Texture.\n   * @remarks Only depth-related formats take effect.\n   */\n  get depthCompareFunction(): TextureDepthCompareFunction {\n    return this._depthCompareFunction;\n  }\n\n  set depthCompareFunction(value: TextureDepthCompareFunction) {\n    if (!this._engine._hardwareRenderer._isWebGL2) {\n      console.warn(\"depthCompareFunction only support WebGL2\");\n      return;\n    }\n\n    if (value !== this._depthCompareFunction) {\n      this._depthCompareFunction = value;\n      this._platformTexture.depthCompareFunction = value;\n    }\n  }\n\n  /**\n   * Generate multi-level textures based on the 0th level data.\n   */\n  generateMipmaps(): void {\n    if (!this._mipmap) return;\n\n    this._platformTexture.generateMipmaps();\n  }\n\n  /**\n   * @internal\n   */\n  _setUseDepthCompareMode(value: boolean): void {\n    if (this._useDepthCompareMode !== value) {\n      this._platformTexture.setUseDepthCompareMode(value);\n      this._useDepthCompareMode = value;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  override _rebuild(): void {\n    const platformTexture = this._platformTexture;\n    platformTexture.wrapModeU = this._wrapModeU;\n    platformTexture.wrapModeV = this._wrapModeV;\n    platformTexture.filterMode = this._filterMode;\n    platformTexture.anisoLevel = this._anisoLevel;\n    if (this._engine._hardwareRenderer._isWebGL2) {\n      platformTexture.depthCompareFunction = this._depthCompareFunction;\n      platformTexture.setUseDepthCompareMode(this._useDepthCompareMode);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  protected override _onDestroy() {\n    super._onDestroy();\n    this._platformTexture.destroy();\n    this._platformTexture = null;\n  }\n\n  /**\n   * Get the maximum mip level of the corresponding size:rounding down.\n   * @remarks http://download.nvidia.com/developer/Papers/2005/NP2_Mipmapping/NP2_Mipmap_Creation.pdf\n   */\n  protected _getMaxMiplevel(size: number): number {\n    return Math.floor(Math.log2(size));\n  }\n\n  protected _getMipmapCount(): number {\n    return this._mipmap ? Math.floor(Math.log2(Math.max(this._width, this._height))) + 1 : 1;\n  }\n\n  protected _isIntFormat(): boolean {\n    if (TextureFormat.R32G32B32A32_UInt === this._format) {\n      return true;\n    }\n    return false;\n  }\n}\n","import { GraphicsResource } from \"../asset/GraphicsResource\";\nimport { Engine } from \"../Engine\";\nimport { IPlatformRenderTarget } from \"../renderingHardwareInterface\";\nimport { RenderBufferDepthFormat } from \"./enums/RenderBufferDepthFormat\";\nimport { TextureFormat } from \"./enums/TextureFormat\";\nimport { Texture } from \"./Texture\";\n\n/**\n * The render target used for off-screen rendering.\n */\nexport class RenderTarget extends GraphicsResource {\n  /** @internal */\n  _platformRenderTarget: IPlatformRenderTarget;\n\n  /** @internal */\n  _depth: Texture | TextureFormat | null;\n  /** @internal */\n  _antiAliasing: number;\n  /** @internal */\n  _depthFormat: TextureFormat | null = null;\n\n  private _autoGenerateMipmaps: boolean = true;\n  private _width: number;\n  private _height: number;\n  private _colorTextures: Texture[];\n  private _depthTexture: Texture | null = null;\n\n  /**\n   * Whether to automatically generate multi-level textures.\n   */\n  get autoGenerateMipmaps(): boolean {\n    return this._autoGenerateMipmaps;\n  }\n\n  set autoGenerateMipmaps(value: boolean) {\n    this._autoGenerateMipmaps = value;\n  }\n\n  /**\n   * Render target width.\n   */\n  get width(): number {\n    return this._width;\n  }\n\n  /**\n   * Render target height.\n   */\n  get height(): number {\n    return this._height;\n  }\n\n  /**\n   * Render color texture count.\n   */\n  get colorTextureCount(): number {\n    return this._colorTextures.length;\n  }\n\n  /**\n   * Depth texture.\n   */\n  get depthTexture(): Texture | null {\n    return this._depthTexture;\n  }\n\n  /**\n   * Anti-aliasing level.\n   * @remarks If the anti-aliasing level set is greater than the maximum level supported by the hardware, the maximum level of the hardware will be used.\n   */\n  get antiAliasing(): number {\n    return this._antiAliasing;\n  }\n\n  /**\n   * Create a render target through color texture and depth format.\n   * @param engine - Define the engine to use for this off-screen rendering\n   * @param width - Render target width\n   * @param height - Render target height\n   * @param colorTexture - Render color texture\n   * @param depthFormat - Depth format. default TextureFormat.Depth, engine will automatically select the supported precision\n   * @param antiAliasing - Anti-aliasing level, default is 1\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    colorTexture: Texture,\n    depthFormat?: TextureFormat | null | RenderBufferDepthFormat,\n    antiAliasing?: number\n  );\n\n  /**\n   * Create a render target through color texture and depth format.\n   * @remarks If the color texture is not transmitted, only the depth texture is generated.\n   * @param engine - Define the engine to use for this off-screen rendering\n   * @param width - Render target width\n   * @param height - Render target height\n   * @param colorTexture - Render color texture\n   * @param depthTexture - Render depth texture\n   * @param antiAliasing - Anti-aliasing level, default is 1\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    colorTexture: Texture | null,\n    depthTexture: Texture,\n    antiAliasing?: number\n  );\n\n  /**\n   * Create a render target with color texture array and depth format.\n   * @param engine - Define the engine to use for this off-screen rendering\n   * @param width - Render target width\n   * @param height - Render target height\n   * @param colorTextures - Render color texture array\n   * @param depthFormat - Depth format. default TextureFormat.Depth,engine will automatically select the supported precision\n   * @param antiAliasing - Anti-aliasing level, default is 1\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    colorTextures: Texture[],\n    depthFormat?: TextureFormat | null | RenderBufferDepthFormat,\n    antiAliasing?: number\n  );\n\n  /**\n   * Create a render target with color texture array and depth texture.\n   * @param engine - Define the engine to use for this off-screen rendering\n   * @param width - Render target width\n   * @param height - Render target height\n   * @param colorTextures - Render color texture array\n   * @param depthTexture - Depth texture\n   * @param antiAliasing - Anti-aliasing level, default is 1\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    colorTextures: Texture[],\n    depthTexture: Texture,\n    antiAliasing?: number\n  );\n\n  /**\n   * @internal\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    renderTexture: Texture | Texture[] | null,\n    depth: Texture | null | TextureFormat | RenderBufferDepthFormat = TextureFormat.Depth,\n    antiAliasing: number = 1\n  ) {\n    super(engine);\n\n    this._width = width;\n    this._height = height;\n    this._antiAliasing = antiAliasing;\n    this._depth = <Texture | null | TextureFormat>depth;\n\n    if (renderTexture) {\n      const colorTextures = renderTexture instanceof Array ? renderTexture.slice() : [renderTexture];\n      for (let i = 0, n = colorTextures.length; i < n; i++) {\n        const colorTexture = colorTextures[i];\n        if (colorTexture._isDepthTexture) {\n          throw \"Render texture can't use depth format.\";\n        }\n        colorTexture._addReferCount(1);\n      }\n      this._colorTextures = colorTextures;\n    } else {\n      this._colorTextures = [];\n    }\n\n    if (depth instanceof Texture) {\n      if (!depth._isDepthTexture) {\n        throw \"Depth texture must use depth format.\";\n      }\n      this._depthTexture = depth;\n      this._depthTexture._addReferCount(1);\n      this._depthFormat = depth.format;\n    } else if (typeof depth === \"number\") {\n      this._depthFormat = <TextureFormat>depth;\n    }\n\n    this._platformRenderTarget = engine._hardwareRenderer.createPlatformRenderTarget(this);\n  }\n\n  /**\n   * Get the render color texture by index.\n   * @param index - Render color texture index\n   */\n  getColorTexture(index: number = 0): Texture | null {\n    return this._colorTextures[index] ?? null;\n  }\n\n  /**\n   * Generate the mipmap of each attachment texture of the renderTarget according to the configuration.\n   */\n  generateMipmaps(): void {\n    if (this._autoGenerateMipmaps) {\n      const colorTextures = this._colorTextures;\n      for (let i = 0, n = colorTextures.length; i < n; i++) {\n        const colorTexture = colorTextures[i];\n        colorTexture.generateMipmaps();\n      }\n      this._depthTexture && this._depthTexture.generateMipmaps();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  protected override _onDestroy(): void {\n    super._onDestroy();\n    this._platformRenderTarget.destroy();\n    const { _colorTextures: colorTextures } = this;\n    for (let i = 0, n = colorTextures.length; i < n; i++) {\n      colorTextures[i]._addReferCount(-1);\n    }\n    colorTextures.length = 0;\n    this._depthTexture?._addReferCount(-1);\n    this._depthTexture = null;\n    this._depth = null;\n  }\n\n  /**\n   * @internal\n   */\n  _blitRenderTarget(): void {\n    this._platformRenderTarget.blitRenderTarget();\n  }\n\n  /**\n   * @internal\n   */\n  override _rebuild(): void {\n    this._platformRenderTarget = this._engine._hardwareRenderer.createPlatformRenderTarget(this);\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { IPlatformTexture2D } from \"../renderingHardwareInterface\";\nimport { TextureFilterMode } from \"./enums/TextureFilterMode\";\nimport { TextureFormat } from \"./enums/TextureFormat\";\nimport { TextureUsage } from \"./enums/TextureUsage\";\nimport { TextureWrapMode } from \"./enums/TextureWrapMode\";\nimport { Texture } from \"./Texture\";\n\n/**\n * Two-dimensional texture.\n */\nexport class Texture2D extends Texture {\n  /**\n   * Create Texture2D.\n   * @param engine - Define the engine to use to render this texture\n   * @param width - Texture width\n   * @param height - Texture height\n   * @param format - Texture format. default  `TextureFormat.R8G8B8A8`\n   * @param mipmap - Whether to use multi-level texture\n   * @param usage - Texture usage\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    format: TextureFormat = TextureFormat.R8G8B8A8,\n    mipmap: boolean = true,\n    usage: TextureUsage = TextureUsage.Static\n  ) {\n    super(engine);\n    this._mipmap = mipmap;\n    this._width = width;\n    this._height = height;\n    this._usage = usage;\n    this._format = format;\n    this._mipmapCount = this._getMipmapCount();\n\n    this._isDepthTexture =\n      format == TextureFormat.Depth ||\n      format == TextureFormat.DepthStencil ||\n      format == TextureFormat.Depth16 ||\n      format == TextureFormat.Depth24 ||\n      format == TextureFormat.Depth32 ||\n      format == TextureFormat.Depth24Stencil8 ||\n      format == TextureFormat.Depth32Stencil8;\n\n    this._platformTexture = engine._hardwareRenderer.createPlatformTexture2D(this);\n\n    this.filterMode = this._isIntFormat() ? TextureFilterMode.Point : TextureFilterMode.Bilinear;\n    this.wrapModeU = this.wrapModeV = TextureWrapMode.Repeat;\n  }\n\n  /**\n   * Setting pixels data through color buffer data, designated area and texture mipmapping level,it's also applicable to compressed formats.\n   * @remarks If it is the WebGL1.0 platform and the texture format is compressed, the first upload must be filled with textures.\n   * @param colorBuffer - Color buffer data\n   * @param mipLevel - Texture mipmapping level\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Data width. if it's empty, width is the width corresponding to mipLevel minus x , width corresponding to mipLevel is Math.max(1, this.width >> mipLevel)\n   * @param height - Data height. if it's empty, height is the height corresponding to mipLevel minus y , height corresponding to mipLevel is Math.max(1, this.height >> mipLevel)\n   */\n  setPixelBuffer(\n    colorBuffer: ArrayBufferView,\n    mipLevel: number = 0,\n    x: number = 0,\n    y: number = 0,\n    width?: number,\n    height?: number\n  ): void {\n    (this._platformTexture as IPlatformTexture2D).setPixelBuffer(colorBuffer, mipLevel, x, y, width, height);\n    this._isContentLost = false;\n  }\n\n  /**\n   * Setting pixels data through TexImageSource, designated area and texture mipmapping level.\n   * @param imageSource - The source of texture\n   * @param mipLevel - Texture mipmapping level\n   * @param flipY - Whether to flip the Y axis\n   * @param premultiplyAlpha - Whether to premultiply the transparent channel\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   */\n  setImageSource(\n    imageSource: TexImageSource,\n    mipLevel: number = 0,\n    flipY: boolean = false,\n    premultiplyAlpha: boolean = false,\n    x: number = 0,\n    y: number = 0\n  ): void {\n    (this._platformTexture as IPlatformTexture2D).setImageSource(imageSource, mipLevel, flipY, premultiplyAlpha, x, y);\n    this._isContentLost = false;\n  }\n\n  /**\n   * Get pixel color buffer.\n   * @param out - Color buffer\n   */\n  getPixelBuffer(out: ArrayBufferView): void;\n\n  /**\n   * Get the pixel color buffer according to the specified mip level.\n   * @param mipLevel - Tet mip level want to get\n   * @param out - Color buffer\n   */\n  getPixelBuffer(mipLevel: number, out: ArrayBufferView): void;\n\n  /**\n   * Get the pixel color buffer according to the specified area.\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param out - Color buffer\n   */\n  getPixelBuffer(x: number, y: number, width: number, height: number, out: ArrayBufferView): void;\n\n  /**\n   * Get the pixel color buffer according to the specified area and mip level.\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param mipLevel - Tet mip level want to get\n   * @param out - Color buffer\n   */\n  getPixelBuffer(x: number, y: number, width: number, height: number, mipLevel: number, out: ArrayBufferView): void;\n\n  getPixelBuffer(\n    xOrMipLevelOrOut: number | ArrayBufferView,\n    yOrMipLevel?: number | ArrayBufferView,\n    width?: number,\n    height?: number,\n    mipLevelOrOut?: number | ArrayBufferView,\n    out?: ArrayBufferView\n  ): void {\n    const argsLength = arguments.length;\n    if (argsLength === 1) {\n      (this._platformTexture as IPlatformTexture2D).getPixelBuffer(\n        0,\n        0,\n        this._width,\n        this._height,\n        0,\n        <ArrayBufferView>xOrMipLevelOrOut\n      );\n    } else if (argsLength === 2) {\n      (this._platformTexture as IPlatformTexture2D).getPixelBuffer(\n        0,\n        0,\n        this._width >> (<number>xOrMipLevelOrOut),\n        this._height >> (<number>xOrMipLevelOrOut),\n        <number>xOrMipLevelOrOut,\n        <ArrayBufferView>yOrMipLevel\n      );\n    } else if (argsLength === 5) {\n      (this._platformTexture as IPlatformTexture2D).getPixelBuffer(\n        <number>xOrMipLevelOrOut,\n        <number>yOrMipLevel,\n        width,\n        height,\n        0,\n        <ArrayBufferView>mipLevelOrOut\n      );\n    } else if (argsLength === 6) {\n      (this._platformTexture as IPlatformTexture2D).getPixelBuffer(\n        <number>xOrMipLevelOrOut,\n        <number>yOrMipLevel,\n        width,\n        height,\n        <number>mipLevelOrOut,\n        out\n      );\n    }\n  }\n\n  /**\n   * @internal\n   */\n  override _rebuild(): void {\n    this._platformTexture = this._engine._hardwareRenderer.createPlatformTexture2D(this);\n    super._rebuild();\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { IPlatformTexture2DArray } from \"../renderingHardwareInterface\";\nimport { TextureFilterMode } from \"./enums/TextureFilterMode\";\nimport { TextureFormat } from \"./enums/TextureFormat\";\nimport { TextureWrapMode } from \"./enums/TextureWrapMode\";\nimport { Texture } from \"./Texture\";\n\n/**\n * Two-dimensional texture array.\n */\nexport class Texture2DArray extends Texture {\n  private readonly _length: number;\n\n  /**\n   * The length of the texture.\n   */\n  get length(): number {\n    return this._length;\n  }\n\n  /**\n   * Create Texture2D Array.\n   * @param engine - Define the engine to use to render this texture\n   * @param width - Texture width\n   * @param height - Texture height\n   * @param length - Texture length\n   * @param format - Texture format. default `TextureFormat.R8G8B8A8`\n   * @param mipmap - Whether to use multi-level texture\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    length: number,\n    format: TextureFormat = TextureFormat.R8G8B8A8,\n    mipmap: boolean = true\n  ) {\n    super(engine);\n    this._mipmap = mipmap;\n    this._width = width;\n    this._height = height;\n    this._length = length;\n    this._format = format;\n    this._mipmapCount = this._getMipmapCount();\n\n    this._platformTexture = engine._hardwareRenderer.createPlatformTexture2DArray(this);\n\n    this.filterMode = TextureFilterMode.Bilinear;\n    this.wrapModeU = this.wrapModeV = TextureWrapMode.Repeat;\n  }\n\n  /**\n   * Setting pixels data through color buffer data, designated area and texture mipmapping level,it's also applicable to compressed formats.\n   * @remarks If it is the WebGL1.0 platform and the texture format is compressed, the first upload must be filled with textures.\n   * @param offsetIndex - The texture array element offset index\n   * @param colorBuffer - Color buffer data\n   * @param mipLevel - Texture mipmapping level\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Data width. if it's empty, width is the width corresponding to mipLevel minus x , width corresponding to mipLevel is Math.max(1, this.width >> mipLevel)\n   * @param height - Data height. if it's empty, height is the height corresponding to mipLevel minus y , height corresponding to mipLevel is Math.max(1, this.height >> mipLevel)\n   * @param length - Data length. if it's empty, length is the length of Texture2DArray.length\n   */\n  setPixelBuffer(\n    offsetIndex: number,\n    colorBuffer: ArrayBufferView,\n    mipLevel: number = 0,\n    x: number = 0,\n    y: number = 0,\n    width?: number,\n    height?: number,\n    length?: number\n  ): void {\n    (this._platformTexture as IPlatformTexture2DArray).setPixelBuffer(\n      offsetIndex,\n      colorBuffer,\n      mipLevel,\n      x,\n      y,\n      width,\n      height,\n      length\n    );\n    this._isContentLost = false;\n  }\n\n  /**\n   * Setting pixels data through TexImageSource, designated area and texture mipmapping level.\n   * @param elementIndex - The texture array element index\n   * @param imageSource - The source of texture\n   * @param mipLevel - Texture mipmapping level\n   * @param flipY - Whether to flip the Y axis\n   * @param premultiplyAlpha - Whether to premultiply the transparent channel\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   */\n  setImageSource(\n    elementIndex: number,\n    imageSource: TexImageSource,\n    mipLevel: number = 0,\n    flipY: boolean = false,\n    premultiplyAlpha: boolean = false,\n    x: number = 0,\n    y: number = 0\n  ): void {\n    (this._platformTexture as IPlatformTexture2DArray).setImageSource(\n      elementIndex,\n      imageSource,\n      mipLevel,\n      flipY,\n      premultiplyAlpha,\n      x,\n      y\n    );\n    this._isContentLost = false;\n  }\n\n  /**\n   * Get pixel color buffer.\n   * @param elementIndex - The texture array element index\n   * @param out - Color buffer\n   */\n  getPixelBuffer(elementIndex: number, out: ArrayBufferView): void;\n\n  /**\n   * Get the pixel color buffer according to the specified mip level.\n   * @param elementIndex - The texture array element index\n   * @param mipLevel - Tet mip level want to get\n   * @param out - Color buffer\n   */\n  getPixelBuffer(elementIndex: number, mipLevel: number, out: ArrayBufferView): void;\n\n  /**\n   * Get the pixel color buffer according to the specified area.\n   * @param elementIndex - The texture array element index\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param out - Color buffer\n   */\n  getPixelBuffer(elementIndex: number, x: number, y: number, width: number, height: number, out: ArrayBufferView): void;\n\n  /**\n   * Get the pixel color buffer according to the specified area and mip level.\n   * @param elementIndex - The texture array element index\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param mipLevel - Tet mip level want to get\n   * @param out - Color buffer\n   */\n  getPixelBuffer(\n    elementIndex: number,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    mipLevel: number,\n    out: ArrayBufferView\n  ): void;\n\n  getPixelBuffer(\n    elementIndex: number,\n    xOrMipLevelOrOut: number | ArrayBufferView,\n    yOrMipLevel?: number | ArrayBufferView,\n    width?: number,\n    height?: number,\n    mipLevelOrOut?: number | ArrayBufferView,\n    out?: ArrayBufferView\n  ): void {\n    const argsLength = arguments.length;\n    if (argsLength === 1) {\n      (this._platformTexture as IPlatformTexture2DArray).getPixelBuffer(\n        elementIndex,\n        0,\n        0,\n        this._width,\n        this._height,\n        0,\n        <ArrayBufferView>xOrMipLevelOrOut\n      );\n    } else if (argsLength === 2) {\n      (this._platformTexture as IPlatformTexture2DArray).getPixelBuffer(\n        elementIndex,\n        0,\n        0,\n        this._width >> (<number>xOrMipLevelOrOut),\n        this._height >> (<number>xOrMipLevelOrOut),\n        <number>xOrMipLevelOrOut,\n        <ArrayBufferView>yOrMipLevel\n      );\n    } else if (argsLength === 5) {\n      (this._platformTexture as IPlatformTexture2DArray).getPixelBuffer(\n        elementIndex,\n        <number>xOrMipLevelOrOut,\n        <number>yOrMipLevel,\n        width,\n        height,\n        0,\n        <ArrayBufferView>mipLevelOrOut\n      );\n    } else if (argsLength === 6) {\n      (this._platformTexture as IPlatformTexture2DArray).getPixelBuffer(\n        elementIndex,\n        <number>xOrMipLevelOrOut,\n        <number>yOrMipLevel,\n        width,\n        height,\n        <number>mipLevelOrOut,\n        out\n      );\n    }\n  }\n\n  /**\n   * @internal\n   */\n  override _rebuild(): void {\n    this._platformTexture = this._engine._hardwareRenderer.createPlatformTexture2DArray(this);\n    super._rebuild();\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { IPlatformTextureCube } from \"../renderingHardwareInterface\";\nimport { TextureCubeFace } from \"./enums/TextureCubeFace\";\nimport { TextureFilterMode } from \"./enums/TextureFilterMode\";\nimport { TextureFormat } from \"./enums/TextureFormat\";\nimport { TextureWrapMode } from \"./enums/TextureWrapMode\";\nimport { Texture } from \"./Texture\";\n\n/**\n * Cube texture.\n */\nexport class TextureCube extends Texture {\n  /**\n   * Create TextureCube.\n   * @param engine - Define the engine to use to render this texture\n   * @param size - Texture size. texture width must be equal to height in cube texture\n   * @param format - Texture format,default TextureFormat.R8G8B8A8\n   * @param mipmap - Whether to use multi-level texture\n   */\n  constructor(engine: Engine, size: number, format: TextureFormat = TextureFormat.R8G8B8A8, mipmap: boolean = true) {\n    super(engine);\n\n    this._mipmap = mipmap;\n    this._width = size;\n    this._height = size;\n    this._format = format;\n    this._mipmapCount = this._getMipmapCount();\n\n    this._platformTexture = engine._hardwareRenderer.createPlatformTextureCube(this);\n\n    this.filterMode = TextureFilterMode.Bilinear;\n    this.wrapModeU = this.wrapModeV = TextureWrapMode.Clamp;\n  }\n\n  /**\n   * Setting pixels data through cube face,color buffer data, designated area and texture mipmapping level,it's also applicable to compressed formats.\n   * @remarks When compressed texture is in WebGL1, the texture must be filled first before writing the sub-region\n   * @param face - Cube face\n   * @param colorBuffer - Color buffer data\n   * @param mipLevel - Texture mipmapping level\n   * @param x - X coordinate of area start\n   * @param y -  Y coordinate of area start\n   * @param width - Data width.if it's empty, width is the width corresponding to mipLevel minus x , width corresponding to mipLevel is Math.max(1, this.width >> mipLevel)\n   * @param height - Data height.if it's empty, height is the height corresponding to mipLevel minus y , height corresponding to mipLevel is Math.max(1, this.height >> mipLevel)\n   */\n  setPixelBuffer(\n    face: TextureCubeFace,\n    colorBuffer: ArrayBufferView,\n    mipLevel: number = 0,\n    x: number = 0,\n    y: number = 0,\n    width?: number,\n    height?: number\n  ): void {\n    (this._platformTexture as IPlatformTextureCube).setPixelBuffer(face, colorBuffer, mipLevel, x, y, width, height);\n    this._isContentLost = false;\n  }\n\n  /**\n   * Setting pixels data through cube face, TexImageSource, designated area and texture mipmapping level.\n   * @param face - Cube face\n   * @param imageSource - The source of texture\n   * @param mipLevel - Texture mipmapping level\n   * @param flipY - Whether to flip the Y axis\n   * @param premultiplyAlpha - Whether to premultiply the transparent channel\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   */\n  setImageSource(\n    face: TextureCubeFace,\n    imageSource: TexImageSource,\n    mipLevel: number = 0,\n    flipY: boolean = false,\n    premultiplyAlpha: boolean = false,\n    x: number = 0,\n    y: number = 0\n  ): void {\n    (this._platformTexture as IPlatformTextureCube).setImageSource(\n      face,\n      imageSource,\n      mipLevel,\n      flipY,\n      premultiplyAlpha,\n      x,\n      y\n    );\n    this._isContentLost = false;\n  }\n\n  /**\n   * Get pixel color buffer.\n   * @param out - Color buffer\n   */\n  getPixelBuffer(face: TextureCubeFace, out: ArrayBufferView): void;\n\n  /**\n   * Get the pixel color buffer according to the specified mip level.\n   * @param mipLevel - Tet mip level want to get\n   * @param out - Color buffer\n   */\n  getPixelBuffer(face: TextureCubeFace, mipLevel: number, out: ArrayBufferView): void;\n\n  /**\n   * Get the pixel color buffer according to the specified area.\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param out - Color buffer\n   */\n  getPixelBuffer(\n    face: TextureCubeFace,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    out: ArrayBufferView\n  ): void;\n\n  /**\n   * Get the pixel color buffer according to the specified area and mip level.\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param mipLevel - Tet mip level want to get\n   * @param out - Color buffer\n   */\n  getPixelBuffer(\n    face: TextureCubeFace,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    mipLevel: number,\n    out: ArrayBufferView\n  ): void;\n\n  getPixelBuffer(\n    face: TextureCubeFace,\n    xOrMipLevelOrOut: number | ArrayBufferView,\n    yOrMipLevel?: number | ArrayBufferView,\n    width?: number,\n    height?: number,\n    mipLevelOrOut?: number | ArrayBufferView,\n    out?: ArrayBufferView\n  ): void {\n    const argsLength = arguments.length;\n    if (argsLength === 2) {\n      (this._platformTexture as IPlatformTextureCube).getPixelBuffer(\n        face,\n        0,\n        0,\n        this._width,\n        this._height,\n        0,\n        <ArrayBufferView>xOrMipLevelOrOut\n      );\n    } else if (argsLength === 3) {\n      (this._platformTexture as IPlatformTextureCube).getPixelBuffer(\n        face,\n        0,\n        0,\n        this._width >> (<number>xOrMipLevelOrOut),\n        this._height >> (<number>xOrMipLevelOrOut),\n        <number>xOrMipLevelOrOut,\n        <ArrayBufferView>yOrMipLevel\n      );\n    } else if (argsLength === 6) {\n      (this._platformTexture as IPlatformTextureCube).getPixelBuffer(\n        face,\n        <number>xOrMipLevelOrOut,\n        <number>yOrMipLevel,\n        width,\n        height,\n        0,\n        <ArrayBufferView>mipLevelOrOut\n      );\n    } else if (argsLength === 7) {\n      (this._platformTexture as IPlatformTextureCube).getPixelBuffer(\n        face,\n        <number>xOrMipLevelOrOut,\n        <number>yOrMipLevel,\n        width,\n        height,\n        <number>mipLevelOrOut,\n        out\n      );\n    }\n  }\n\n  /**\n   * @internal\n   */\n  override _rebuild(): void {\n    this._platformTexture = this._engine._hardwareRenderer.createPlatformTextureCube(this);\n    super._rebuild();\n  }\n}\n","import { Vector2 } from \"@galacean/engine-math\";\nimport { Engine } from \"../../Engine\";\nimport { ReferResource } from \"../../asset/ReferResource\";\nimport { Texture2D } from \"../../texture/Texture2D\";\nimport { CharInfo } from \"../text/CharInfo\";\n\n/**\n * @internal\n */\nexport class FontAtlas extends ReferResource {\n  texture: Texture2D;\n\n  _charInfoMap: Record<number, CharInfo> = {};\n  private _space: number = 1;\n  private _curX: number = 1;\n  private _curY: number = 1;\n  private _nextY: number = 1;\n\n  constructor(engine: Engine) {\n    super(engine);\n  }\n\n  uploadCharTexture(charInfo: CharInfo): boolean {\n    const { w: width, h: height, data } = charInfo;\n    const { _space: space, texture } = this;\n    const textureSize = texture.width;\n    const offsetWidth = width + space;\n    const offsetHeight = height + space;\n    if (1 + offsetWidth >= textureSize || 1 + offsetHeight >= textureSize) {\n      throw Error(\"The char fontSize is too large.\");\n    }\n\n    const endX = this._curX + offsetWidth;\n    if (endX >= textureSize) {\n      this._curX = space;\n      this._curY = this._nextY + space;\n    }\n    const endY = this._curY + offsetHeight;\n    if (endY > this._nextY) {\n      this._nextY = endY;\n    }\n    if (endY >= textureSize) {\n      return false;\n    }\n\n    if (width > 0 && height > 0 && data) {\n      charInfo.bufferOffset = new Vector2(this._curX, this._curY);\n      texture.setPixelBuffer(data, 0, this._curX, this._curY, width, height);\n      texture.generateMipmaps();\n    }\n\n    const textureSizeReciprocal = 1.0 / textureSize;\n    const x = this._curX;\n    const y = this._curY;\n    const w = width;\n    const h = height;\n    const u0 = x * textureSizeReciprocal;\n    const u1 = (x + w) * textureSizeReciprocal;\n    const v0 = y * textureSizeReciprocal;\n    const v1 = (y + h) * textureSizeReciprocal;\n\n    charInfo.x = x;\n    charInfo.y = y;\n    const uvs = charInfo.uvs;\n    uvs[0].set(u0, v0);\n    uvs[1].set(u1, v0);\n    uvs[2].set(u1, v1);\n    uvs[3].set(u0, v1);\n\n    this._curX += offsetWidth + space;\n    return true;\n  }\n\n  addCharInfo(char: string, charInfo: CharInfo) {\n    this._charInfoMap[char.charCodeAt(0)] = charInfo;\n  }\n\n  getCharInfo(char: string): CharInfo {\n    return this._charInfoMap[char.charCodeAt(0)];\n  }\n\n  /**\n   * @internal\n   */\n  protected override _onDestroy(): void {\n    super._onDestroy();\n    this.texture.destroy();\n    this.texture = null;\n    this._charInfoMap = {};\n  }\n}\n","/**\n * The style of the font.\n */\nexport enum FontStyle {\n  /** Set font without style */\n  None = 0x0,\n  /** Set font bold */\n  Bold = 0x1,\n  /** Set font italic */\n  Italic = 0x2\n}\n","/**\n * The way to handle the situation where wrapped text is too tall to fit in the height.\n */\nexport enum OverflowMode {\n  /** Overflow when the text is too tall */\n  Overflow = 0,\n  /** Truncate with height when the text is too tall */\n  Truncate = 1\n}\n","import { Vector2 } from \"@galacean/engine-math\";\nimport { Engine } from \"../../Engine\";\nimport { FontStyle } from \"../enums/FontStyle\";\nimport { OverflowMode } from \"../enums/TextOverflow\";\nimport { CharInfo } from \"./CharInfo\";\nimport { SubFont } from \"./SubFont\";\nimport { TextRenderer } from \"./TextRenderer\";\n\n/**\n * @internal\n * TextUtils includes some helper function for text.\n */\nexport class TextUtils {\n  /** @internal */\n  static _genericFontFamilies: string[] = [\n    \"serif\",\n    \"sans-serif\",\n    \"monospace\",\n    \"cursive\",\n    \"fantasy\",\n    \"system-ui\",\n    \"math\",\n    \"emoji\",\n    \"fangsong\"\n  ];\n\n  // _extendHeight used to extend the height of canvas, because in miniprogram performance is different from h5.\n  /** @internal */\n  static _extendHeight: number = 0;\n  /** These characters are all tall to help calculate the height required for text. */\n  private static _measureString: string = \"|ÉqÅ\";\n  private static _measureBaseline: string = \"M\";\n  private static _heightMultiplier: number = 2;\n  private static _baselineMultiplier: number = 1.4;\n  private static _fontSizeInfoCache: Record<string, FontSizeInfo> = {};\n  private static _textContext: TextContext = null;\n\n  /**\n   * The instance function to get an object includes 2d context and canvas.\n   * @returns the TextContext object\n   */\n  static textContext(): TextContext {\n    let { _textContext: textContext } = TextUtils;\n    if (!textContext) {\n      let canvas: HTMLCanvasElement | OffscreenCanvas;\n      try {\n        canvas = new OffscreenCanvas(0, 0);\n      } catch {\n        canvas = document.createElement(\"canvas\");\n      }\n      const context = <CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D>(\n        canvas.getContext(\"2d\", { willReadFrequently: true })\n      );\n      textContext = { canvas, context };\n      TextUtils._textContext = textContext;\n    }\n    return textContext;\n  }\n\n  /**\n   * Measure the font.\n   * @param fontString - the string of the font\n   * @returns the font size info\n   */\n  static measureFont(fontString: string): FontSizeInfo {\n    const { _fontSizeInfoCache: fontSizeInfoCache } = TextUtils;\n    let info = fontSizeInfoCache[fontString];\n    if (info) {\n      return info;\n    }\n\n    info = <FontSizeInfo>TextUtils._measureFontOrChar(fontString, TextUtils._measureString, false);\n    fontSizeInfoCache[fontString] = info;\n    return info;\n  }\n\n  /**\n   * Get native font string.\n   * @param fontName - The font name\n   * @param fontSize - The font size\n   * @param style - The font style\n   * @returns The native font string\n   */\n  static getNativeFontString(fontName: string, fontSize: number, style: FontStyle): string {\n    let str = style & FontStyle.Bold ? \"bold \" : \"\";\n    style & FontStyle.Italic && (str += \"italic \");\n    // Check if font already contains strings\n    if (!/([\\\"\\'])[^\\'\\\"]+\\1/.test(fontName) && TextUtils._genericFontFamilies.indexOf(fontName) == -1) {\n      fontName = `\"${fontName}\"`;\n    }\n    str += `${fontSize}px ${fontName}`;\n    return str;\n  }\n\n  static measureChar(char: string, fontString: string): CharInfo {\n    return <CharInfo>TextUtils._measureFontOrChar(fontString, char, true);\n  }\n\n  static measureTextWithWrap(renderer: TextRenderer): TextMetrics {\n    const subFont = renderer._getSubFont();\n    const fontString = subFont.nativeFontString;\n    const fontSizeInfo = TextUtils.measureFont(fontString);\n    const subTexts = renderer.text.split(/(?:\\r\\n|\\r|\\n)/);\n\n    const lines = new Array<string>();\n    const lineWidths = new Array<number>();\n    const lineMaxSizes = new Array<FontSizeInfo>();\n\n    const pixelsPerUnit = Engine._pixelsPerUnit;\n    const lineHeight = fontSizeInfo.size + renderer.lineSpacing * pixelsPerUnit;\n    const wrapWidth = renderer.width * pixelsPerUnit;\n    let textWidth = 0;\n\n    subFont.nativeFontString = fontString;\n    for (let i = 0, n = subTexts.length; i < n; i++) {\n      const subText = subTexts[i];\n      // If subText is empty, push an empty line directly\n      if (subText.length === 0) {\n        this._pushLine(lines, lineWidths, lineMaxSizes, \"\", 0, 0, 0);\n        continue;\n      }\n\n      let word = \"\";\n      let wordWidth = 0;\n      let wordMaxAscent = 0;\n      let wordMaxDescent = 0;\n\n      let line = \"\";\n      let lineWidth = 0;\n      let lineMaxAscent = 0;\n      let lineMaxDescent = 0;\n\n      let notFirstLine = false;\n\n      for (let j = 0, m = subText.length; j < m; ++j) {\n        const char = subText[j];\n        const charInfo = TextUtils._getCharInfo(char, fontString, subFont);\n        const charCode = char.charCodeAt(0);\n        const isSpace = charCode === 32;\n\n        if (isSpace && notFirstLine && line.length === 0 && word.length === 0) {\n          continue;\n        }\n\n        // The char code scope of Chinese is [\\u4e00-\\u9fff]\n        const unableFromWord = isSpace || (charCode >= 0x4e00 && charCode <= 0x9fff);\n        const { w, offsetY } = charInfo;\n        const halfH = charInfo.h * 0.5;\n        const ascent = halfH + offsetY;\n        const descent = halfH - offsetY;\n\n        if (unableFromWord) {\n          // If it is a word before, need to handle the previous word and line\n          if (word.length > 0) {\n            if (lineWidth + wordWidth > wrapWidth) {\n              // Push if before line is not empty\n              if (lineWidth > 0) {\n                this._pushLine(lines, lineWidths, lineMaxSizes, line, lineWidth, lineMaxAscent, lineMaxDescent);\n              }\n\n              textWidth = Math.max(textWidth, lineWidth);\n              notFirstLine = true;\n              line = word;\n              lineWidth = wordWidth;\n              lineMaxAscent = wordMaxAscent;\n              lineMaxDescent = wordMaxDescent;\n            } else {\n              line += word;\n              lineWidth += wordWidth;\n              lineMaxAscent = Math.max(lineMaxAscent, wordMaxAscent);\n              lineMaxDescent = Math.max(lineMaxDescent, wordMaxDescent);\n            }\n\n            word = \"\";\n            wordWidth = wordMaxAscent = wordMaxDescent = 0;\n          }\n\n          // Handle char\n          // At least one char in a line\n          if (lineWidth + w > wrapWidth && lineWidth > 0) {\n            this._pushLine(lines, lineWidths, lineMaxSizes, line, lineWidth, lineMaxAscent, lineMaxDescent);\n            textWidth = Math.max(textWidth, lineWidth);\n            notFirstLine = true;\n            if (isSpace) {\n              line = \"\";\n              lineWidth = lineMaxAscent = lineMaxDescent = 0;\n            } else {\n              line = char;\n              lineWidth = charInfo.xAdvance;\n              lineMaxAscent = ascent;\n              lineMaxDescent = descent;\n            }\n          } else {\n            line += char;\n            lineWidth += charInfo.xAdvance;\n            lineMaxAscent = Math.max(lineMaxAscent, ascent);\n            lineMaxDescent = Math.max(lineMaxDescent, descent);\n          }\n        } else {\n          if (wordWidth + charInfo.w > wrapWidth) {\n            if (lineWidth > 0) {\n              this._pushLine(lines, lineWidths, lineMaxSizes, line, lineWidth, lineMaxAscent, lineMaxDescent);\n              textWidth = Math.max(textWidth, lineWidth);\n              line = \"\";\n              lineWidth = lineMaxAscent = lineMaxDescent = 0;\n            }\n\n            // Push if before word is not empty\n            if (wordWidth > 0) {\n              this._pushLine(lines, lineWidths, lineMaxSizes, word, wordWidth, wordMaxAscent, wordMaxDescent);\n            }\n\n            textWidth = Math.max(textWidth, wordWidth);\n            notFirstLine = true;\n            word = char;\n            wordWidth = charInfo.xAdvance;\n            wordMaxAscent = ascent;\n            wordMaxDescent = descent;\n          } else {\n            word += char;\n            wordWidth += charInfo.xAdvance;\n            wordMaxAscent = Math.max(wordMaxAscent, ascent);\n            wordMaxDescent = Math.max(wordMaxDescent, descent);\n          }\n        }\n      }\n\n      if (wordWidth > 0) {\n        // If the total width from line and word exceed wrap width\n        if (lineWidth + wordWidth > wrapWidth) {\n          // Push chars to a single line\n          if (lineWidth > 0) {\n            this._pushLine(lines, lineWidths, lineMaxSizes, line, lineWidth, lineMaxAscent, lineMaxDescent);\n          }\n          textWidth = Math.max(textWidth, lineWidth);\n\n          lineWidth = 0;\n          // Push word to a single line\n          if (wordWidth > 0) {\n            this._pushLine(lines, lineWidths, lineMaxSizes, word, wordWidth, wordMaxAscent, wordMaxDescent);\n          }\n          textWidth = Math.max(textWidth, wordWidth);\n        } else {\n          // Merge to chars\n          line += word;\n          lineWidth += wordWidth;\n          lineMaxAscent = Math.max(lineMaxAscent, wordMaxAscent);\n          lineMaxDescent = Math.max(lineMaxDescent, wordMaxDescent);\n        }\n      }\n\n      if (lineWidth > 0) {\n        this._pushLine(lines, lineWidths, lineMaxSizes, line, lineWidth, lineMaxAscent, lineMaxDescent);\n        textWidth = Math.max(textWidth, lineWidth);\n      }\n    }\n\n    let height = renderer.height * pixelsPerUnit;\n    if (renderer.overflowMode === OverflowMode.Overflow) {\n      height = lineHeight * lines.length;\n    }\n\n    return {\n      width: textWidth,\n      height,\n      lines,\n      lineWidths,\n      lineHeight,\n      lineMaxSizes\n    };\n  }\n\n  static measureTextWithoutWrap(renderer: TextRenderer): TextMetrics {\n    const subFont = renderer._getSubFont();\n    const fontString = subFont.nativeFontString;\n    const fontSizeInfo = TextUtils.measureFont(fontString);\n    const subTexts = renderer.text.split(/(?:\\r\\n|\\r|\\n)/);\n    const textCount = subTexts.length;\n    const lines = new Array<string>();\n    const lineWidths = new Array<number>();\n    const lineMaxSizes = new Array<FontSizeInfo>();\n    const { _pixelsPerUnit } = Engine;\n    const lineHeight = fontSizeInfo.size + renderer.lineSpacing * _pixelsPerUnit;\n\n    let width = 0;\n    subFont.nativeFontString = fontString;\n    for (let i = 0; i < textCount; ++i) {\n      const line = subTexts[i];\n      let curWidth = 0;\n      let maxAscent = 0;\n      let maxDescent = 0;\n\n      for (let j = 0, m = line.length; j < m; ++j) {\n        const charInfo = TextUtils._getCharInfo(line[j], fontString, subFont);\n        curWidth += charInfo.xAdvance;\n        const { offsetY } = charInfo;\n        const halfH = charInfo.h * 0.5;\n        const ascent = halfH + offsetY;\n        const descent = halfH - offsetY;\n        maxAscent < ascent && (maxAscent = ascent);\n        maxDescent < descent && (maxDescent = descent);\n      }\n\n      if (curWidth > 0) {\n        this._pushLine(lines, lineWidths, lineMaxSizes, line, curWidth, maxAscent, maxDescent);\n        width = Math.max(width, curWidth);\n      }\n    }\n\n    let height = renderer.height * _pixelsPerUnit;\n    if (renderer.overflowMode === OverflowMode.Overflow) {\n      height = lineHeight * lines.length;\n    }\n\n    return {\n      width,\n      height,\n      lines,\n      lineWidths,\n      lineHeight,\n      lineMaxSizes\n    };\n  }\n\n  /**\n   * Get native font hash.\n   * @param fontName - The font name\n   * @param fontSize - The font size\n   * @param style - The font style\n   * @returns The native font hash\n   */\n  static getNativeFontHash(fontName: string, fontSize: number, style: FontStyle): string {\n    let str = style & FontStyle.Bold ? \"bold\" : \"\";\n    style & FontStyle.Italic && (str += \"italic\");\n    // Check if font already contains strings\n    if (!/([\\\"\\'])[^\\'\\\"]+\\1/.test(fontName) && TextUtils._genericFontFamilies.indexOf(fontName) == -1) {\n      fontName = `${fontName}`;\n    }\n    str += `${fontSize}px${fontName}`;\n    return str;\n  }\n\n  /**\n   * @internal\n   */\n  static _measureFontOrChar(fontString: string, measureString: string, isChar: boolean): FontSizeInfo | CharInfo {\n    const { canvas, context } = TextUtils.textContext();\n    context.font = fontString;\n    // Safari gets data confusion through getImageData when the canvas width is not an integer.\n    // The measure text width of some special invisible characters may be 0, so make sure the width is at least 1.\n    // @todo: Text layout may vary from standard and not support emoji.\n    const { actualBoundingBoxLeft, actualBoundingBoxRight, width: actualWidth } = context.measureText(measureString);\n    // In some case (ex: \" \"), actualBoundingBoxRight and actualBoundingBoxLeft will be 0, so use width.\n    // TODO: With testing, actualBoundingBoxLeft + actualBoundingBoxRight is the actual rendering width\n    // but the space rules between characters are unclear. Using actualBoundingBoxRight + Math.abs(actualBoundingBoxLeft) is the closest to the native effect.\n    const width = Math.max(\n      1,\n      Math.round(Math.max(actualBoundingBoxRight + Math.abs(actualBoundingBoxLeft), actualWidth))\n    );\n    // Make sure enough width.\n    let baseline = Math.ceil(context.measureText(TextUtils._measureBaseline).width);\n    let height = baseline * TextUtils._heightMultiplier;\n    baseline = (TextUtils._baselineMultiplier * baseline) | 0;\n    const { _extendHeight } = TextUtils;\n    height += _extendHeight;\n    baseline += _extendHeight * 0.5;\n\n    canvas.width = width;\n    canvas.height = height;\n\n    context.font = fontString;\n    context.fillStyle = \"#000\";\n    context.clearRect(0, 0, width, height);\n    context.textBaseline = \"middle\";\n    context.fillStyle = \"#fff\";\n    if (actualBoundingBoxLeft > 0) {\n      context.fillText(measureString, actualBoundingBoxLeft, baseline);\n    } else {\n      context.fillText(measureString, 0, baseline);\n    }\n\n    const colorData = context.getImageData(0, 0, width, height).data;\n    const len = colorData.length;\n\n    let top = -1;\n    let bottom = -1;\n    let y;\n    let ascent = 0;\n    let descent = 0;\n    let size = 0;\n\n    const integerW = canvas.width;\n    const integerWReciprocal = 1.0 / integerW;\n    for (let i = 0; i < len; i += 4) {\n      if (colorData[i + 3] !== 0) {\n        const idx = i * 0.25;\n        y = ~~(idx * integerWReciprocal);\n\n        if (top === -1) {\n          top = y;\n        }\n\n        if (y > bottom) {\n          bottom = y;\n        }\n      } else {\n        colorData[i] = colorData[i + 1] = colorData[i + 2] = 255;\n      }\n    }\n\n    if (top !== -1 && bottom !== -1) {\n      ascent = baseline - top;\n      // Baseline belong to descent\n      descent = bottom - baseline + 1;\n      size = ascent + descent;\n    }\n\n    if (isChar) {\n      let data = null;\n      if (size > 0) {\n        const lineIntegerW = integerW * 4;\n        // gl.texSubImage2D uploading data of type Uint8ClampedArray is not supported in some devices(eg: IphoneX IOS 13.6.1).\n        data = new Uint8Array(colorData.buffer, top * lineIntegerW, size * lineIntegerW);\n      }\n      return {\n        char: measureString,\n        x: 0,\n        y: 0,\n        w: width,\n        h: size,\n        offsetX: actualBoundingBoxLeft > 0 ? actualBoundingBoxLeft : 0,\n        offsetY: (ascent - descent) * 0.5,\n        xAdvance: Math.round(actualWidth),\n        uvs: [new Vector2(), new Vector2(), new Vector2(), new Vector2()],\n        ascent,\n        descent,\n        index: 0,\n        data\n      };\n    } else {\n      return { ascent, descent, size };\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _getCharInfo(char: string, fontString: string, font: SubFont): CharInfo {\n    let charInfo = font._getCharInfo(char);\n    if (!charInfo) {\n      charInfo = TextUtils.measureChar(char, fontString);\n      font._uploadCharTexture(charInfo);\n      font._addCharInfo(char, charInfo);\n    }\n\n    return charInfo;\n  }\n\n  private static _pushLine(\n    lines: string[],\n    lineWidths: number[],\n    lineMaxSizes: FontSizeInfo[],\n    line: string,\n    lineWidth: number,\n    ascent: number,\n    descent: number\n  ): void {\n    lines.push(line);\n    lineWidths.push(lineWidth);\n    lineMaxSizes.push({\n      ascent,\n      descent,\n      size: ascent + descent\n    });\n  }\n}\n\n/**\n * @internal\n * TextContext.\n */\nexport interface TextContext {\n  canvas: HTMLCanvasElement | OffscreenCanvas;\n  context: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D;\n}\n\n/**\n * @internal\n * FontSizeInfo.\n */\nexport interface FontSizeInfo {\n  ascent: number;\n  descent: number;\n  size: number;\n}\n\n/**\n * @internal\n * TextMetrics.\n */\nexport interface TextMetrics {\n  width: number;\n  height: number;\n  lines: Array<string>;\n  lineWidths: Array<number>;\n  lineHeight: number;\n  lineMaxSizes?: Array<FontSizeInfo>;\n}\n","import { AssetPromise } from \"../../asset/AssetPromise\";\nimport { ContentRestorer } from \"../../asset/ContentRestorer\";\nimport { Engine } from \"../../Engine\";\nimport { Texture2D, TextureFilterMode, TextureFormat } from \"../../texture\";\nimport { FontAtlas } from \"../atlas/FontAtlas\";\nimport { CharInfo } from \"./CharInfo\";\nimport { TextUtils } from \"./TextUtils\";\n\n/**\n * @internal\n */\nexport class SubFont {\n  nativeFontString: string;\n\n  private _engine: Engine;\n  private _fontAtlases: FontAtlas[] = [];\n  private _lastIndex: number = -1;\n\n  constructor(engine: Engine) {\n    this._engine = engine;\n  }\n\n  destroy(): void {\n    const fontAtlases = this._fontAtlases;\n    for (let i = 0, n = fontAtlases.length; i < n; ++i) {\n      fontAtlases[i].destroy(true);\n    }\n    fontAtlases.length = 0;\n  }\n\n  /**\n   * @internal\n   */\n  _uploadCharTexture(charInfo: CharInfo): void {\n    const fontAtlases = this._fontAtlases;\n    let lastIndex = this._lastIndex;\n    if (lastIndex === -1) {\n      this._createFontAtlas();\n      lastIndex++;\n    }\n    let fontAtlas = fontAtlases[lastIndex];\n    if (!fontAtlas.uploadCharTexture(charInfo)) {\n      fontAtlas = this._createFontAtlas();\n      fontAtlas.uploadCharTexture(charInfo);\n      lastIndex++;\n    }\n    this._lastIndex = lastIndex;\n    charInfo.data = null;\n  }\n\n  /**\n   * @internal\n   */\n  _addCharInfo(char: string, charInfo: CharInfo): void {\n    const lastIndex = this._lastIndex;\n    charInfo.index = lastIndex;\n    this._fontAtlases[lastIndex].addCharInfo(char, charInfo);\n  }\n\n  /**\n   * @internal\n   */\n  _getCharInfo(char: string): CharInfo {\n    const fontAtlases = this._fontAtlases;\n    for (let i = 0, n = fontAtlases.length; i < n; ++i) {\n      const fontAtlas = fontAtlases[i];\n      const charInfo = fontAtlas.getCharInfo(char);\n      if (charInfo) {\n        return charInfo;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @internal\n   */\n  _getTextureByIndex(index: number): Texture2D {\n    const fontAtlas = this._fontAtlases[index];\n    if (fontAtlas) {\n      return fontAtlas.texture;\n    }\n    return null;\n  }\n\n  /**\n   * @internal\n   */\n  _getLastIndex(): number {\n    return this._lastIndex;\n  }\n\n  private _createFontAtlas(): FontAtlas {\n    const { _engine: engine } = this;\n    const fontAtlas = new FontAtlas(engine);\n    const texture = new Texture2D(engine, 256, 256, TextureFormat.R8G8B8A8, false);\n    texture.filterMode = TextureFilterMode.Bilinear;\n    fontAtlas.texture = texture;\n    fontAtlas.isGCIgnored = texture.isGCIgnored = true;\n    this._fontAtlases.push(fontAtlas);\n\n    const nativeFontString = this.nativeFontString;\n\n    engine.resourceManager.addContentRestorer(\n      new (class extends ContentRestorer<FontAtlas> {\n        constructor() {\n          super(fontAtlas);\n        }\n        restoreContent(): void | AssetPromise<FontAtlas> {\n          const { resource } = this;\n          const charInfoMap = resource._charInfoMap;\n          const texture = resource.texture;\n          for (let k in charInfoMap) {\n            const charInfo = charInfoMap[k];\n            const data = TextUtils.measureChar(charInfo.char, nativeFontString).data;\n\n            if (charInfo.w > 0 && charInfo.h > 0 && data) {\n              const { bufferOffset } = charInfo;\n              texture.setPixelBuffer(data, 0, bufferOffset.x, bufferOffset.y, charInfo.w, charInfo.h);\n            }\n          }\n          texture.generateMipmaps();\n        }\n      })()\n    );\n\n    return fontAtlas;\n  }\n}\n","import { ReferResource } from \"../../asset/ReferResource\";\nimport { Engine } from \"../../Engine\";\nimport { FontStyle } from \"../enums/FontStyle\";\nimport { SubFont } from \"./SubFont\";\n\n/**\n * Font.\n */\nexport class Font extends ReferResource {\n  /**\n   * Create a system font.\n   * @param engine - Engine to which the font belongs\n   * @param name - The name of font want to create\n   * @returns The font object has been create\n   */\n  static createFromOS(engine: Engine, name: string): Font {\n    if (name) {\n      const fontMap = engine._fontMap;\n      let font = fontMap[name];\n      if (font) {\n        return font;\n      }\n      font = new Font(engine, name);\n      fontMap[name] = font;\n      return font;\n    }\n    return null;\n  }\n\n  private _name: string = \"\";\n  private _subFontMap: Record<string, SubFont> = {};\n\n  /**\n   * The name of the font object.\n   */\n  get name(): string {\n    return this._name;\n  }\n\n  constructor(engine: Engine, name: string = \"\") {\n    super(engine);\n    this._name = name;\n  }\n\n  /**\n   * @internal\n   */\n  _getSubFont(fontSize: number, fontStyle: FontStyle): SubFont {\n    const key = `${fontSize}-${fontStyle}`;\n    const subFontMap = this._subFontMap;\n    let subFont = subFontMap[key];\n    if (subFont) {\n      return subFont;\n    }\n    subFont = new SubFont(this.engine);\n    subFontMap[key] = subFont;\n    return subFont;\n  }\n\n  /**\n   * @internal\n   */\n  protected override _onDestroy(): void {\n    super._onDestroy();\n    const subFontMap = this._subFontMap;\n    for (let k in subFontMap) {\n      subFontMap[k].destroy();\n    }\n    this._subFontMap = null;\n    delete this.engine._fontMap[this._name];\n  }\n}\n","/**\n * Sprite mask interaction.\n */\nexport enum SpriteMaskInteraction {\n  /** The sprite will not interact with the masking system. */\n  None,\n  /** The sprite will be visible only in areas where a mask is present. */\n  VisibleInsideMask,\n  /** The sprite will be visible only in areas where no mask is present. */\n  VisibleOutsideMask\n}\n","/**\n * The horizontal alignment of the text.\n */\nexport enum TextHorizontalAlignment {\n  /** Align left horizontally */\n  Left = 0,\n  /** Align center horizontally */\n  Center = 1,\n  /** Align right horizontally */\n  Right = 2\n}\n\n/**\n * The vertical alignment of the text.\n */\nexport enum TextVerticalAlignment {\n  /** Align top vertically */\n  Top = 0,\n  /** Align center vertically */\n  Center = 1,\n  /** Align bottom vertically */\n  Bottom = 2\n}\n","import { ReferResource } from \"../../asset/ReferResource\";\nimport { Engine } from \"../../Engine\";\nimport { Sprite } from \"../sprite/Sprite\";\n\n/**\n * Sprite Atlas.\n */\nexport class SpriteAtlas extends ReferResource {\n  private _sprites: Sprite[] = new Array<Sprite>();\n  private _spriteNamesToIndex: Record<string, number> = {};\n\n  /**\n   * All the sprites in the atlas.\n   */\n  get sprites(): Readonly<Sprite[]> {\n    return this._sprites;\n  }\n\n  /**\n   * Get the last sprite named 'name' from the atlas.\n   * @param name - The name of the sprite you want to find\n   * @returns The sprite you want to find\n   */\n  getSprite(name: string): Sprite {\n    const sprite = this._sprites[this._spriteNamesToIndex[name]];\n    if (!sprite) {\n      console.warn(\"There is no sprite named \" + name + \" in the atlas.\");\n    }\n    return sprite;\n  }\n\n  /**\n   * Get all the sprite named 'name' from the atlas.\n   * @param name - The name of the sprites you want to find\n   * @param outSprites - This array holds the sprites found\n   * @returns The sprites you want to find\n   */\n  getSprites(name: string, outSprites: Sprite[]): Sprite[] {\n    outSprites.length = 0;\n    let i = this._spriteNamesToIndex[name];\n    if (i !== undefined) {\n      const { _sprites } = this;\n      for (; i >= 0; i--) {\n        const sprite = _sprites[i];\n        sprite.name === name && outSprites.push(sprite);\n      }\n    } else {\n      console.warn(\"The name of the sprite you want to find is not exit in SpriteAtlas.\");\n    }\n    return outSprites;\n  }\n\n  /**\n   * Constructor a SpriteAtlas.\n   * @param engine - Engine to which the SpriteAtlas belongs\n   */\n  constructor(engine: Engine) {\n    super(engine);\n  }\n\n  /**\n   * @internal\n   */\n  _addSprite(sprite: Sprite): void {\n    this._spriteNamesToIndex[sprite.name] = this._sprites.push(sprite) - 1;\n    sprite._atlas = this;\n    sprite.isGCIgnored = true;\n  }\n\n  /**\n   * @internal\n   */\n  protected override _onDestroy(): void {\n    super._onDestroy();\n    const { _sprites: sprites } = this;\n    for (let i = 0, n = sprites.length; i < n; i++) {\n      sprites[i].destroy();\n    }\n    sprites.length = 0;\n    this._sprites = null;\n    this._spriteNamesToIndex = null;\n  }\n}\n","/**\n * Sprite's drawing mode enumeration.\n */\nexport enum SpriteDrawMode {\n  /** Overall scaling when modifying size. */\n  Simple,\n  /** When modifying the size of the renderer, it scales to fill the range according to the sprite border settings. */\n  Sliced,\n  /** When modifying the size of the renderer, it will tile to fill the range according to the sprite border settings. */\n  Tiled\n}\n","/**\n * Sprite's tiling mode enumeration.\n * Only works in `SpriteDrawMode.tiled` mode.\n */\nexport enum SpriteTileMode {\n  /** SpriteRenderer will tile continuously. */\n  Continuous,\n  /** When the fractional part of the tiling multiple is greater than or equal to `SpriteRenderer.tileStretchValue`,\n   * a tile will be added，and the number of tiles can only be an integer. */\n  Adaptive\n}\n","import { Matrix } from \"@galacean/engine-math\";\n\nexport class Utils {\n  /**\n   * Fast remove an element from array.\n   * @param array - Array\n   * @param item - Element\n   */\n  static removeFromArray(array: any[], item: any): boolean {\n    const index = array.indexOf(item);\n    if (index < 0) {\n      return false;\n    }\n    const last = array.length - 1;\n    if (index !== last) {\n      const end = array[last];\n      array[index] = end;\n    }\n    array.length--;\n    return true;\n  }\n\n  /**\n   * Decodes a given Uint8Array into a string.\n   */\n  static decodeText(array: Uint8Array): string {\n    if (typeof TextDecoder !== \"undefined\") {\n      return new TextDecoder().decode(array);\n    }\n\n    // TextDecoder polyfill\n    let s = \"\";\n\n    for (let i = 0, il = array.length; i < il; i++) {\n      s += String.fromCharCode(array[i]);\n    }\n\n    return decodeURIComponent(encodeURIComponent(s));\n  }\n\n  /**\n   * Judge whether the url is absolute url.\n   * @param url - The url to be judged.\n   * @returns Whether the url is absolute url.\n   */\n  static isAbsoluteUrl(url: string): boolean {\n    return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n  }\n\n  /**\n   * Judge whether the url is base64 url.\n   * @param url - The url to be judged.\n   * @returns Whether the url is base64 url.\n   */\n  static isBase64Url(url: string): boolean {\n    return /^data:.*,.*$/i.test(url);\n  }\n\n  /**\n   * Get the values of an object.\n   */\n  static objectValues(obj: any) {\n    return Object.keys(obj).map((key: any) => obj[key]);\n  }\n\n  /**\n   * Convert a relative URL to an absolute URL based on a given base URL.\n   * @param baseUrl - The base url.\n   * @param relativeUrl - The relative url.\n   * @returns The resolved url.\n   */\n  static resolveAbsoluteUrl(baseUrl: string, relativeUrl: string): string {\n    if (Utils.isAbsoluteUrl(relativeUrl)) {\n      return relativeUrl;\n    }\n\n    if (Utils.isBase64Url(relativeUrl)) {\n      return relativeUrl;\n    }\n\n    if (!/^https?:/.test(baseUrl)) {\n      const fileSchema = \"files://\";\n      baseUrl = fileSchema + baseUrl;\n      return new URL(relativeUrl, baseUrl).href.substring(fileSchema.length);\n    }\n\n    return relativeUrl ? new URL(relativeUrl, baseUrl).href : baseUrl;\n  }\n\n  /**\n   * @internal\n   */\n  static _floatMatrixMultiply(left: Matrix, re: Float32Array, rOffset: number, oe: Float32Array, offset: number): void {\n    const le = left.elements;\n\n    // prettier-ignore\n    const l11 = le[0], l12 = le[1], l13 = le[2], l14 = le[3],\n    l21 = le[4], l22 = le[5], l23 = le[6], l24 = le[7],\n    l31 = le[8], l32 = le[9], l33 = le[10], l34 = le[11],\n    l41 = le[12], l42 = le[13], l43 = le[14], l44 = le[15];\n\n    // prettier-ignore\n    const r11 = re[rOffset], r12 = re[rOffset + 1], r13 = re[rOffset + 2], r14 = re[rOffset + 3],\n    r21 = re[rOffset + 4], r22 = re[rOffset + 5], r23 = re[rOffset + 6], r24 = re[rOffset + 7],\n    r31 = re[rOffset + 8], r32 = re[rOffset + 9], r33 = re[rOffset + 10], r34 = re[rOffset + 11],\n    r41 = re[rOffset + 12], r42 = re[rOffset + 13], r43 = re[rOffset + 14], r44 = re[rOffset + 15];\n\n    oe[offset] = l11 * r11 + l21 * r12 + l31 * r13 + l41 * r14;\n    oe[offset + 1] = l12 * r11 + l22 * r12 + l32 * r13 + l42 * r14;\n    oe[offset + 2] = l13 * r11 + l23 * r12 + l33 * r13 + l43 * r14;\n    oe[offset + 3] = l14 * r11 + l24 * r12 + l34 * r13 + l44 * r14;\n\n    oe[offset + 4] = l11 * r21 + l21 * r22 + l31 * r23 + l41 * r24;\n    oe[offset + 5] = l12 * r21 + l22 * r22 + l32 * r23 + l42 * r24;\n    oe[offset + 6] = l13 * r21 + l23 * r22 + l33 * r23 + l43 * r24;\n    oe[offset + 7] = l14 * r21 + l24 * r22 + l34 * r23 + l44 * r24;\n\n    oe[offset + 8] = l11 * r31 + l21 * r32 + l31 * r33 + l41 * r34;\n    oe[offset + 9] = l12 * r31 + l22 * r32 + l32 * r33 + l42 * r34;\n    oe[offset + 10] = l13 * r31 + l23 * r32 + l33 * r33 + l43 * r34;\n    oe[offset + 11] = l14 * r31 + l24 * r32 + l34 * r33 + l44 * r34;\n\n    oe[offset + 12] = l11 * r41 + l21 * r42 + l31 * r43 + l41 * r44;\n    oe[offset + 13] = l12 * r41 + l22 * r42 + l32 * r43 + l42 * r44;\n    oe[offset + 14] = l13 * r41 + l23 * r42 + l33 * r43 + l43 * r44;\n    oe[offset + 15] = l14 * r41 + l24 * r42 + l34 * r43 + l44 * r44;\n  }\n\n  /**\n   * @internal\n   * Simplify lodash get: https://github.com/lodash/lodash/blob/master/get.js.\n   * @param target - The object to query.\n   * @param path - The path of the property to get.\n   * @returns Returns the resolved value.\n   */\n  static _reflectGet(target: Object, path: string) {\n    const pathArr = this._stringToPath(path);\n\n    let object = target;\n    let index = 0;\n    const length = pathArr.length;\n\n    while (object != null && index < length) {\n      object = object[pathArr[index++]];\n    }\n    return index && index == length ? object : undefined;\n  }\n\n  /**\n   * @internal\n   * @remarks\n   * Modified based on v8.\n   * https://github.com/v8/v8/blob/7.2-lkgr/src/js/array.js\n   */\n  static _quickSort<T>(a: T[], from: number, to: number, compareFunc: Function): void {\n    while (true) {\n      // Insertion sort is faster for short arrays.\n      if (to - from <= 10) {\n        this._insertionSort(a, from, to, compareFunc);\n        return;\n      }\n      const third_index = (from + to) >> 1;\n      // Find a pivot as the median of first, last and middle element.\n      let v0 = a[from];\n      let v1 = a[to - 1];\n      let v2 = a[third_index];\n      const c01 = compareFunc(v0, v1);\n      if (c01 > 0) {\n        // v1 < v0, so swap them.\n        const tmp = v0;\n        v0 = v1;\n        v1 = tmp;\n      } // v0 <= v1.\n      const c02 = compareFunc(v0, v2);\n      if (c02 >= 0) {\n        // v2 <= v0 <= v1.\n        const tmp = v0;\n        v0 = v2;\n        v2 = v1;\n        v1 = tmp;\n      } else {\n        // v0 <= v1 && v0 < v2\n        const c12 = compareFunc(v1, v2);\n        if (c12 > 0) {\n          // v0 <= v2 < v1\n          const tmp = v1;\n          v1 = v2;\n          v2 = tmp;\n        }\n      }\n      // v0 <= v1 <= v2\n      a[from] = v0;\n      a[to - 1] = v2;\n      const pivot = v1;\n      let low_end = from + 1; // Upper bound of elements lower than pivot.\n      let high_start = to - 1; // Lower bound of elements greater than pivot.\n      a[third_index] = a[low_end];\n      a[low_end] = pivot;\n\n      // From low_end to i are elements equal to pivot.\n      // From i to high_start are elements that haven't been compared yet.\n      partition: for (let i = low_end + 1; i < high_start; i++) {\n        let element = a[i];\n        let order = compareFunc(element, pivot);\n        if (order < 0) {\n          a[i] = a[low_end];\n          a[low_end] = element;\n          low_end++;\n        } else if (order > 0) {\n          do {\n            high_start--;\n            if (high_start == i) break partition;\n            const top_elem = a[high_start];\n            order = compareFunc(top_elem, pivot);\n          } while (order > 0);\n          a[i] = a[high_start];\n          a[high_start] = element;\n          if (order < 0) {\n            element = a[i];\n            a[i] = a[low_end];\n            a[low_end] = element;\n            low_end++;\n          }\n        }\n      }\n      if (to - high_start < low_end - from) {\n        this._quickSort(a, high_start, to, compareFunc);\n        to = low_end;\n      } else {\n        this._quickSort(a, from, low_end, compareFunc);\n        from = high_start;\n      }\n    }\n  }\n\n  private static _stringToPath(string): string[] {\n    const result = [];\n    if (string.charCodeAt(0) === charCodeOfDot) {\n      result.push(\"\");\n    }\n    string.replace(rePropName, (match, expression, quote, subString) => {\n      let key = match;\n      if (quote) {\n        key = subString.replace(reEscapeChar, \"$1\");\n      } else if (expression) {\n        key = expression.trim();\n      }\n      result.push(key);\n    });\n    return result;\n  }\n\n  private static _insertionSort<T>(a: T[], from: number, to: number, compareFunc: Function): void {\n    for (let i = from + 1; i < to; i++) {\n      let j;\n      const element = a[i];\n      for (j = i - 1; j >= from; j--) {\n        const tmp = a[j];\n        const order = compareFunc(tmp, element);\n        if (order > 0) {\n          a[j + 1] = tmp;\n        } else {\n          break;\n        }\n      }\n      a[j + 1] = element;\n    }\n  }\n}\n\nconst charCodeOfDot = \".\".charCodeAt(0);\nconst reEscapeChar = /\\\\(\\\\)?/g;\nconst rePropName = RegExp(\n  // Match anything that isn't a dot or bracket.\n  \"[^.[\\\\]]+\" +\n    \"|\" +\n    // Or match property names within brackets.\n    \"\\\\[(?:\" +\n    // Match a non-string expression.\n    \"([^\\\"'][^[]*)\" +\n    \"|\" +\n    // Or match strings (supports escaping characters).\n    \"([\\\"'])((?:(?!\\\\2)[^\\\\\\\\]|\\\\\\\\.)*?)\\\\2\" +\n    \")\\\\]\" +\n    \"|\" +\n    // Or match \"\" as the space between consecutive dots or empty brackets.\n    \"(?=(?:\\\\.|\\\\[\\\\])(?:\\\\.|\\\\[\\\\]|$))\",\n  \"g\"\n);\n","import { UpdateFlag } from \"./UpdateFlag\";\nimport { Utils } from \"./Utils\";\n\n/**\n * @internal\n */\nexport class UpdateFlagManager {\n  /** @internal */\n  _updateFlags: UpdateFlag[] = [];\n\n  private _listeners: ((type?: number, param?: Object) => void)[] = [];\n\n  /**\n   * Create a UpdateFlag.\n   * @returns - The UpdateFlag.\n   */\n  createFlag<T extends UpdateFlag>(type: new () => T): T {\n    const flag = new type();\n    this.addFlag(flag);\n    return flag;\n  }\n\n  /**\n   * Add a UpdateFlag.\n   * @param flag - The UpdateFlag.\n   */\n  addFlag(flag: UpdateFlag): void {\n    this._updateFlags.push(flag);\n    flag._flagManagers.push(this);\n  }\n\n  /**\n   * Remove a UpdateFlag.\n   * @param flag - The UpdateFlag.\n   */\n  removeFlag(flag: UpdateFlag): void {\n    const success = Utils.removeFromArray(this._updateFlags, flag);\n    if (success) {\n      Utils.removeFromArray(flag._flagManagers, this);\n    }\n  }\n\n  /**\n   * Add a listener.\n   * @param listener - The listener\n   */\n  addListener(listener: (type?: number, param?: Object) => void): void {\n    this._listeners.push(listener);\n  }\n\n  /**\n   * Remove a listener.\n   * @param listener - The listener\n   */\n  removeListener(listener: (type?: number, param?: Object) => void): void {\n    Utils.removeFromArray(this._listeners, listener);\n  }\n\n  /**\n   * Dispatch a event.\n   * @param type - Event type, usually in the form of enumeration\n   * @param param - Event param\n   */\n  dispatch(type?: number, param?: Object): void {\n    const updateFlags = this._updateFlags;\n    for (let i = updateFlags.length - 1; i >= 0; i--) {\n      updateFlags[i].dispatch(type, param);\n    }\n\n    const listeners = this._listeners;\n    for (let i = listeners.length - 1; i >= 0; i--) {\n      listeners[i](type, param);\n    }\n  }\n}\n","/**\n * Sprite Property Dirty Flag.\n */\nexport enum SpriteModifyFlags {\n  texture = 0x1,\n  size = 0x2,\n  atlasRotate = 0x4,\n  atlasRegion = 0x8,\n  atlasRegionOffset = 0x10,\n  region = 0x20,\n  pivot = 0x40,\n  border = 0x80,\n  destroy = 0x100\n}\n","import { BoundingBox, MathUtil, Rect, Vector2, Vector4 } from \"@galacean/engine-math\";\nimport { Engine } from \"../../Engine\";\nimport { UpdateFlagManager } from \"../../UpdateFlagManager\";\nimport { ReferResource } from \"../../asset/ReferResource\";\nimport { Texture2D } from \"../../texture/Texture2D\";\nimport { SpriteModifyFlags } from \"../enums/SpriteModifyFlags\";\nimport { SpriteAtlas } from \"../atlas/SpriteAtlas\";\n\n/**\n * 2D sprite.\n */\nexport class Sprite extends ReferResource {\n  /** The name of sprite. */\n  name: string;\n\n  private _automaticWidth: number = 0;\n  private _automaticHeight: number = 0;\n  private _customWidth: number = undefined;\n  private _customHeight: number = undefined;\n\n  private _positions: Vector2[] = [new Vector2(), new Vector2(), new Vector2(), new Vector2()];\n  private _uvs: Vector2[] = [new Vector2(), new Vector2(), new Vector2(), new Vector2()];\n  private _bounds: BoundingBox = new BoundingBox();\n\n  private _texture: Texture2D = null;\n  private _atlasRotated: boolean = false;\n  private _atlasRegion: Rect = new Rect(0, 0, 1, 1);\n  private _atlasRegionOffset: Vector4 = new Vector4(0, 0, 0, 0);\n\n  private _region: Rect = new Rect(0, 0, 1, 1);\n  private _pivot: Vector2 = new Vector2(0.5, 0.5);\n  private _border: Vector4 = new Vector4(0, 0, 0, 0);\n\n  private _dirtyUpdateFlag: SpriteUpdateFlags = SpriteUpdateFlags.all;\n\n  /** @internal */\n  _atlas: SpriteAtlas;\n  /** @internal */\n  _updateFlagManager: UpdateFlagManager = new UpdateFlagManager();\n\n  /**\n   * The reference to the used texture.\n   */\n  get texture(): Texture2D {\n    return this._texture;\n  }\n\n  set texture(value: Texture2D) {\n    if (this._texture !== value) {\n      this._texture = value;\n      this._dispatchSpriteChange(SpriteModifyFlags.texture);\n      if (this._customWidth === undefined || this._customHeight === undefined) {\n        this._dispatchSpriteChange(SpriteModifyFlags.size);\n      }\n    }\n  }\n\n  /**\n   * The width of the sprite (in world coordinates).\n   *\n   * @remarks\n   * If width is set, return the set value,\n   * otherwise return the width calculated according to `Texture.width`, `Sprite.region`, `Sprite.atlasRegion`, `Sprite.atlasRegionOffset` and `Engine._pixelsPerUnit`.\n   */\n  get width(): number {\n    if (this._customWidth !== undefined) {\n      return this._customWidth;\n    } else {\n      this._dirtyUpdateFlag & SpriteUpdateFlags.automaticSize && this._calDefaultSize();\n      return this._automaticWidth;\n    }\n  }\n\n  set width(value: number) {\n    if (this._customWidth !== value) {\n      this._customWidth = value;\n      this._dispatchSpriteChange(SpriteModifyFlags.size);\n    }\n  }\n\n  /**\n   * The height of the sprite (in world coordinates).\n   *\n   * @remarks\n   * If height is set, return the set value,\n   * otherwise return the height calculated according to `Texture.height`, `Sprite.region`, `Sprite.atlasRegion`, `Sprite.atlasRegionOffset` and `Engine._pixelsPerUnit`.\n   */\n  get height(): number {\n    if (this._customHeight !== undefined) {\n      return this._customHeight;\n    } else {\n      this._dirtyUpdateFlag & SpriteUpdateFlags.automaticSize && this._calDefaultSize();\n      return this._automaticHeight;\n    }\n  }\n\n  set height(value: number) {\n    if (this._customHeight !== value) {\n      this._customHeight = value;\n      this._dispatchSpriteChange(SpriteModifyFlags.size);\n    }\n  }\n\n  /**\n   * Is it rotated 90 degrees clockwise when packing.\n   */\n  get atlasRotated(): boolean {\n    return this._atlasRotated;\n  }\n\n  set atlasRotated(value: boolean) {\n    if (this._atlasRotated != value) {\n      this._atlasRotated = value;\n    }\n  }\n\n  /**\n   * The rectangle region of the original texture on its atlas texture, specified in normalized.\n   */\n  get atlasRegion(): Rect {\n    return this._atlasRegion;\n  }\n\n  set atlasRegion(value: Rect) {\n    const x = MathUtil.clamp(value.x, 0, 1);\n    const y = MathUtil.clamp(value.y, 0, 1);\n    this._atlasRegion.set(x, y, MathUtil.clamp(value.width, 0, 1 - x), MathUtil.clamp(value.height, 0, 1 - y));\n    this._dispatchSpriteChange(SpriteModifyFlags.atlasRegion);\n    if (this._customWidth === undefined || this._customHeight === undefined) {\n      this._dispatchSpriteChange(SpriteModifyFlags.size);\n    }\n  }\n\n  /**\n   * The rectangle region offset of the original texture on its atlas texture, specified in normalized.\n   */\n  get atlasRegionOffset(): Vector4 {\n    return this._atlasRegionOffset;\n  }\n\n  set atlasRegionOffset(value: Vector4) {\n    const x = MathUtil.clamp(value.x, 0, 1);\n    const y = MathUtil.clamp(value.y, 0, 1);\n    this._atlasRegionOffset.set(x, y, MathUtil.clamp(value.z, 0, 1 - x), MathUtil.clamp(value.w, 0, 1 - y));\n    this._dispatchSpriteChange(SpriteModifyFlags.atlasRegionOffset);\n    if (this._customWidth === undefined || this._customHeight === undefined) {\n      this._dispatchSpriteChange(SpriteModifyFlags.size);\n    }\n  }\n\n  /**\n   * The rectangle region of the sprite, specified in normalized.\n   */\n  get region(): Rect {\n    return this._region;\n  }\n\n  set region(value: Rect) {\n    this._region !== value && this._region.copyFrom(value);\n  }\n\n  /**\n   * Location of the sprite's center point in the rectangle region, specified in normalized.\n   * The origin is at the bottom left and the default value is (0.5, 0.5).\n   */\n  get pivot(): Vector2 {\n    return this._pivot;\n  }\n\n  set pivot(value: Vector2) {\n    this._pivot !== value && this._pivot.copyFrom(value);\n  }\n\n  /**\n   * Get the border of the sprite.\n   *  x      y       z     w\n   *  |      |       |     |\n   * Left, bottom, right, top.\n   * @remarks only use in sliced mode.\n   */\n  get border(): Vector4 {\n    return this._border;\n  }\n\n  set border(value: Vector4) {\n    this._border !== value && this._border.copyFrom(value);\n  }\n\n  /**\n   * Constructor a Sprite.\n   * @param engine - Engine to which the sprite belongs\n   * @param texture - Texture from which to obtain the Sprite\n   * @param region - Rectangle region of the texture to use for the Sprite, specified in normalized\n   * @param pivot - Sprite's pivot point relative to its graphic rectangle, specified in normalized\n   * @param border - Boundaries when using Slice DrawMode, specified in normalized\n   * @param name - The name of Sprite\n   */\n  constructor(\n    engine: Engine,\n    texture: Texture2D = null,\n    region: Rect = null,\n    pivot: Vector2 = null,\n    border: Vector4 = null,\n    name: string = null\n  ) {\n    super(engine);\n    this._texture = texture;\n    this._onRegionChange = this._onRegionChange.bind(this);\n    this._onPivotChange = this._onPivotChange.bind(this);\n    this._onBorderChange = this._onBorderChange.bind(this);\n    // @ts-ignore\n    this._region._onValueChanged = this._onRegionChange;\n    // @ts-ignore\n    this._pivot._onValueChanged = this._onPivotChange;\n    // @ts-ignore\n    this._border._onValueChanged = this._onBorderChange;\n    region && this._region.copyFrom(region);\n    pivot && this._pivot.copyFrom(pivot);\n    border && this._border.copyFrom(border);\n    this.name = name;\n  }\n\n  /**\n   * Clone.\n   * @returns Cloned sprite\n   */\n  clone(): Sprite {\n    const cloneSprite = new Sprite(this._engine, this._texture, this._region, this._pivot, this._border, this.name);\n    cloneSprite._atlasRotated = this._atlasRotated;\n    cloneSprite._atlasRegion.copyFrom(this._atlasRegion);\n    cloneSprite._atlasRegionOffset.copyFrom(this._atlasRegionOffset);\n    return cloneSprite;\n  }\n\n  /**\n   * @internal\n   */\n  _getPositions(): Vector2[] {\n    this._dirtyUpdateFlag & SpriteUpdateFlags.positions && this._updatePositions();\n    return this._positions;\n  }\n\n  /**\n   * @internal\n   */\n  _getUVs(): Vector2[] {\n    this._dirtyUpdateFlag & SpriteUpdateFlags.uvs && this._updateUVs();\n    return this._uvs;\n  }\n\n  /**\n   * @internal\n   */\n  _getBounds(): BoundingBox {\n    this._dirtyUpdateFlag & SpriteUpdateFlags.positions && this._updatePositions();\n    return this._bounds;\n  }\n\n  /**\n   * @internal\n   */\n  override _addReferCount(value: number): void {\n    super._addReferCount(value);\n    this._atlas?._addReferCount(value);\n  }\n\n  /**\n   * @internal\n   */\n  protected override _onDestroy(): void {\n    this._dispatchSpriteChange(SpriteModifyFlags.destroy);\n    super._onDestroy();\n    this._positions.length = 0;\n    this._positions = null;\n    this._uvs.length = 0;\n    this._uvs = null;\n    this._atlasRegion = null;\n    this._atlasRegionOffset = null;\n    this._region = null;\n    this._pivot = null;\n    this._border = null;\n    this._bounds = null;\n    this._atlas = null;\n    this._texture = null;\n    this._updateFlagManager = null;\n  }\n\n  private _calDefaultSize(): void {\n    if (this._texture) {\n      const { _texture, _atlasRegion, _atlasRegionOffset, _region } = this;\n      const pixelsPerUnitReciprocal = 1.0 / Engine._pixelsPerUnit;\n      this._automaticWidth =\n        ((_texture.width * _atlasRegion.width) / (1 - _atlasRegionOffset.x - _atlasRegionOffset.z)) *\n        _region.width *\n        pixelsPerUnitReciprocal;\n      this._automaticHeight =\n        ((_texture.height * _atlasRegion.height) / (1 - _atlasRegionOffset.y - _atlasRegionOffset.w)) *\n        _region.height *\n        pixelsPerUnitReciprocal;\n    } else {\n      this._automaticWidth = this._automaticHeight = 0;\n    }\n    this._dirtyUpdateFlag &= ~SpriteUpdateFlags.automaticSize;\n  }\n\n  private _updatePositions(): void {\n    const blank = this._atlasRegionOffset;\n    const { x: regionX, y: regionY, width: regionW, height: regionH } = this._region;\n    const regionRight = 1 - regionX - regionW;\n    const regionBottom = 1 - regionY - regionH;\n    const left = Math.max(blank.x - regionX, 0) / regionW;\n    const bottom = Math.max(blank.w - regionY, 0) / regionH;\n    const right = 1 - Math.max(blank.z - regionRight, 0) / regionW;\n    const top = 1 - Math.max(blank.y - regionBottom, 0) / regionH;\n\n    // Update positions.\n    // ---------------\n    //  2 - 3\n    //  |   |\n    //  0 - 1\n    // ---------------\n    const positions = this._positions;\n    positions[0].set(left, bottom);\n    positions[1].set(right, bottom);\n    positions[2].set(left, top);\n    positions[3].set(right, top);\n\n    const { min, max } = this._bounds;\n    min.set(left, bottom, 0);\n    max.set(right, top, 0);\n    this._dirtyUpdateFlag &= ~SpriteUpdateFlags.positions;\n  }\n\n  private _updateUVs(): void {\n    const { _uvs: uv, _atlasRegionOffset: atlasRegionOffset } = this;\n    const { x: regionX, y: regionY, width: regionW, height: regionH } = this._region;\n    const regionRight = 1 - regionX - regionW;\n    const regionBottom = 1 - regionY - regionH;\n    const { x: atlasRegionX, y: atlasRegionY, width: atlasRegionW, height: atlasRegionH } = this._atlasRegion;\n    const { x: offsetLeft, y: offsetTop, z: offsetRight, w: offsetBottom } = atlasRegionOffset;\n    const realWidth = atlasRegionW / (1 - offsetLeft - offsetRight);\n    const realHeight = atlasRegionH / (1 - offsetTop - offsetBottom);\n    // Coordinates of the four boundaries.\n    const left = Math.max(regionX - offsetLeft, 0) * realWidth + atlasRegionX;\n    const top = Math.max(regionBottom - offsetTop, 0) * realHeight + atlasRegionY;\n    const right = atlasRegionW + atlasRegionX - Math.max(regionRight - offsetRight, 0) * realWidth;\n    const bottom = atlasRegionH + atlasRegionY - Math.max(regionY - offsetBottom, 0) * realHeight;\n    const { x: borderLeft, y: borderBottom, z: borderRight, w: borderTop } = this._border;\n    // Left-Bottom\n    uv[0].set(left, bottom);\n    // Border ( Left-Bottom )\n    uv[1].set(\n      (regionX - offsetLeft + borderLeft * regionW) * realWidth + atlasRegionX,\n      atlasRegionH + atlasRegionY - (regionY - offsetBottom + borderBottom * regionH) * realHeight\n    );\n    // Border ( Right-Top )\n    uv[2].set(\n      atlasRegionW + atlasRegionX - (regionRight - offsetRight + borderRight * regionW) * realWidth,\n      (regionBottom - offsetTop + borderTop * regionH) * realHeight + atlasRegionY\n    );\n    // Right-Top\n    uv[3].set(right, top);\n    this._dirtyUpdateFlag &= ~SpriteUpdateFlags.uvs;\n  }\n\n  private _dispatchSpriteChange(type: SpriteModifyFlags): void {\n    switch (type) {\n      case SpriteModifyFlags.texture:\n        this._dirtyUpdateFlag |= SpriteUpdateFlags.automaticSize;\n        break;\n      case SpriteModifyFlags.atlasRegionOffset:\n      case SpriteModifyFlags.region:\n        this._dirtyUpdateFlag |= SpriteUpdateFlags.all;\n        break;\n      case SpriteModifyFlags.atlasRegion:\n        this._dirtyUpdateFlag |= SpriteUpdateFlags.automaticSize | SpriteUpdateFlags.uvs;\n        break;\n      case SpriteModifyFlags.border:\n        this._dirtyUpdateFlag |= SpriteUpdateFlags.uvs;\n        break;\n    }\n    this._updateFlagManager.dispatch(type);\n  }\n\n  private _onRegionChange(): void {\n    const { _region: region } = this;\n    // @ts-ignore\n    region._onValueChanged = null;\n    const x = MathUtil.clamp(region.x, 0, 1);\n    const y = MathUtil.clamp(region.y, 0, 1);\n    region.set(x, y, MathUtil.clamp(region.width, 0, 1 - x), MathUtil.clamp(region.height, 0, 1 - y));\n    this._dispatchSpriteChange(SpriteModifyFlags.region);\n    if (this._customWidth === undefined || this._customHeight === undefined) {\n      this._dispatchSpriteChange(SpriteModifyFlags.size);\n    }\n    // @ts-ignore\n    region._onValueChanged = this._onRegionChange;\n  }\n\n  private _onPivotChange(): void {\n    this._dispatchSpriteChange(SpriteModifyFlags.pivot);\n  }\n\n  private _onBorderChange(): void {\n    const { _border: border } = this;\n    // @ts-ignore\n    border._onValueChanged = null;\n    const x = MathUtil.clamp(border.x, 0, 1);\n    const y = MathUtil.clamp(border.y, 0, 1);\n    border.set(x, y, MathUtil.clamp(border.z, 0, 1 - x), MathUtil.clamp(border.w, 0, 1 - y));\n    this._dispatchSpriteChange(SpriteModifyFlags.border);\n    // @ts-ignore\n    border._onValueChanged = this._onBorderChange;\n  }\n}\n\nenum SpriteUpdateFlags {\n  positions = 0x1,\n  uvs = 0x2,\n  automaticSize = 0x4,\n  all = 0x7\n}\n","/**\n * Blend factor.\n * @remarks defines which function is used for blending pixel arithmetic\n */\nexport enum BlendFactor {\n  /** (0, 0, 0, 0)*/\n  Zero,\n  /** (1, 1, 1, 1)*/\n  One,\n  /** (Rs, Gs, Bs, As) */\n  SourceColor,\n  /** (1 - Rs, 1 - Gs, 1 - Bs, 1 - As)*/\n  OneMinusSourceColor,\n  /** (Rd, Gd, Bd, Ad)*/\n  DestinationColor,\n  /** (1 - Rd, 1 - Gd, 1 - Bd, 1 - Ad)*/\n  OneMinusDestinationColor,\n  /** (As, As, As, As)*/\n  SourceAlpha,\n  /** (1 - As, 1 - As, 1 - As, 1 - As)*/\n  OneMinusSourceAlpha,\n  /** (Ad, Ad, Ad, Ad)*/\n  DestinationAlpha,\n  /** (1 - Ad, 1 - Ad, 1 - Ad, 1 - Ad)*/\n  OneMinusDestinationAlpha,\n  /** (min(As, 1 - Ad), min(As, 1 - Ad), min(As, 1 - Ad), 10)*/\n  SourceAlphaSaturate,\n  /** (Rc, Gc, Bc, Ac)*/\n  BlendColor,\n  /** (1 - Rc, 1 - Gc, 1 - Bc, 1 - Ac)*/\n  OneMinusBlendColor\n}\n","/**\n * Blend operation function.\n * @remarks defines how a new pixel is combined with a pixel.\n */\nexport enum BlendOperation {\n  /** src + dst. */\n  Add,\n  /** src - dst. */\n  Subtract,\n  /** dst - src. */\n  ReverseSubtract,\n  /** Minimum of source and destination. */\n  Min,\n  /** Maximum of source and destination. */\n  Max\n}\n","/**\n * Set which color channels can be rendered to frame buffer.\n * @remarks enumeration can be combined using bit operations.\n */\nexport enum ColorWriteMask {\n  /** Do not write to any channel. */\n  None = 0,\n  /** Write to the red channel. */\n  Red = 0x1,\n  /** Write to the green channel. */\n  Green = 0x2,\n  /** Write to the blue channel. */\n  Blue = 0x4,\n  /** Write to the alpha channel. */\n  Alpha = 0x8,\n  /** Write to all channel. */\n  All = 0xf\n}\n","/**\n * Depth/Stencil comparison function.\n * @remarks Specifies a function that compares incoming pixel depth/stencil to the current depth/stencil buffer value.\n */\nexport enum CompareFunction {\n  /** never pass. */\n  Never,\n  /** pass if the incoming value is less than the depth/stencil buffer value. */\n  Less,\n  /** pass if the incoming value equals the depth/stencil buffer value. */\n  Equal,\n  /** pass if the incoming value is less than or equal to the depth/stencil buffer value. */\n  LessEqual,\n  /** pass if the incoming value is greater than the depth/stencil buffer value. */\n  Greater,\n  /** pass if the incoming value is not equal to the depth/stencil buffer value. */\n  NotEqual,\n  /** pass if the incoming value is greater than or equal to the depth/stencil buffer value. */\n  GreaterEqual,\n  /** always pass. */\n  Always\n}\n","/**\n * Culling mode.\n * @remarks specifies whether or not front- and/or back-facing polygons can be culled.\n */\nexport enum CullMode {\n  /** Disable culling. */\n  Off,\n  /** cut the front-face of the polygons. */\n  Front,\n  /** cut the back-face of the polygons. */\n  Back\n}\n","export enum RenderStateElementKey {\n  /** Blend state enabled for target 0 key. */\n  BlendStateEnabled0 = 0,\n  /** Blend state color blend operation for target 0 key. */\n  BlendStateColorBlendOperation0 = 1,\n  /** Blend state alpha blend operation for target 0 key. */\n  BlendStateAlphaBlendOperation0 = 2,\n  /** Blend state source color blend factor for target 0 key. */\n  BlendStateSourceColorBlendFactor0 = 3,\n  /** Blend state source alpha blend factor for target 0 key. */\n  BlendStateSourceAlphaBlendFactor0 = 4,\n  /** Blend state destination color blend factor for target 0 key. */\n  BlendStateDestinationColorBlendFactor0 = 5,\n  /** Blend state destination alpha blend factor for target 0 key. */\n  BlendStateDestinationAlphaBlendFactor0 = 6,\n  /** Blend state color write mask for target 0 key. */\n  BlendStateColorWriteMask0 = 7,\n  /** Blend state blend color key. */\n  BlendStateBlendColor = 8,\n  /** Blend state alpha to coverage key. */\n  BlendStateAlphaToCoverage = 9,\n\n  /** Depth state enabled key. */\n  DepthStateEnabled = 10,\n  /** Depth state write enabled key. */\n  DepthStateWriteEnabled = 11,\n  /** Depth state compare function key. */\n  DepthStateCompareFunction = 12,\n\n  /** Stencil state enabled key. */\n  StencilStateEnabled = 13,\n  /** Stencil state reference value key. */\n  StencilStateReferenceValue = 14,\n  /** Stencil state read mask key. */\n  StencilStateMask = 15,\n  /** Stencil state write mask key. */\n  StencilStateWriteMask = 16,\n  /** Stencil state compare function front key. */\n  StencilStateCompareFunctionFront = 17,\n  /** Stencil state compare function back key. */\n  StencilStateCompareFunctionBack = 18,\n  /** Stencil state pass operation front key. */\n  StencilStatePassOperationFront = 19,\n  /** Stencil state pass operation back key. */\n  StencilStatePassOperationBack = 20,\n  /** Stencil state fail operation front key. */\n  StencilStateFailOperationFront = 21,\n  /** Stencil state fail operation back key. */\n  StencilStateFailOperationBack = 22,\n  /** Stencil state z fail operation front key. */\n  StencilStateZFailOperationFront = 23,\n  /** Stencil state z fail operation back key. */\n  StencilStateZFailOperationBack = 24,\n\n  /** Raster state fill mode key. */\n  RasterStateCullMode = 25,\n  /** Raster state cull mode key. */\n  RasterStateDepthBias = 26,\n  /** Raster state depth bias key. */\n  RasterStateSlopeScaledDepthBias = 27,\n\n  /** Render queue type key. */\n  RenderQueueType = 28\n}\n","/**\n * Render queue type.\n */\nexport enum RenderQueueType {\n  /** Opaque queue. */\n  Opaque,\n  /** Opaque queue, alpha cutoff. */\n  AlphaTest,\n  /** Transparent queue, rendering from back to front to ensure correct rendering of transparent objects. */\n  Transparent\n}\n","/**\n * Shader Property type.\n */\nexport enum ShaderPropertyType {\n  /** Float type. */\n  Float,\n  /** Int type. */\n  Int,\n  /** Vector2 type. */\n  Vector2,\n  /** Vector3 type. */\n  Vector3,\n  /** Vector4 type. */\n  Vector4,\n  /** Matrix type. */\n  Matrix,\n  /** Color type. */\n  Color,\n  /** Texture type. */\n  Texture,\n  /** Float array type. */\n  FloatArray,\n  /** Int array type. */\n  IntArray,\n  /** Texture array type. */\n  TextureArray\n}\n","/**\n * Stencil operation mode.\n * @remarks sets the front and/or back-facing stencil test actions.\n */\nexport enum StencilOperation {\n  /** Keeps the current value. */\n  Keep,\n  /** Sets the stencil buffer value to 0. */\n  Zero,\n  /** Sets the stencil buffer value to the reference value. */\n  Replace,\n  /** Increments the current stencil buffer value. Clamps to the maximum representable unsigned value. */\n  IncrementSaturate,\n  /** Decrements the current stencil buffer value. Clamps to 0. */\n  DecrementSaturate,\n  /** Inverts the current stencil buffer value bitwise. */\n  Invert,\n  /** Increments the current stencil buffer value. Wraps stencil buffer value to zero when incrementing the maximum representable unsigned value. */\n  IncrementWrap,\n  /** Decrements the current stencil buffer value. Wraps stencil buffer value to the maximum representable unsigned value when decrementing a stencil buffer value of 0. */\n  DecrementWrap\n}\n","export enum ShaderPlatformTarget {\n  GLES100,\n  GLES300\n}\n","function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n","import { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _create_for_of_iterator_helper_loose(o, allowArrayLike) {\n    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n    if (it) return (it = it.call(o)).next.bind(it);\n    // Fallback for engines without symbol support\n    if (Array.isArray(o) || (it = _unsupported_iterable_to_array(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n        if (it) o = it;\n\n        var i = 0;\n\n        return function() {\n            if (i >= o.length) return { done: true };\n\n            return { done: false, value: o[i++] };\n        };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _create_for_of_iterator_helper_loose as _ };\n","import { ShaderMacroCollection } from \"./ShaderMacroCollection\";\n\n/**\n * Shader macro。\n */\nexport class ShaderMacro {\n  /** @internal */\n  static _macroMaskMap: ShaderMacro[][] = [];\n  /** @internal */\n  static _macroNameIdMap: Record<string, number> = Object.create(null);\n\n  private static _macroNameCounter: number = 0;\n  private static _macroCounter: number = 0;\n  private static _macroMap: Record<string, ShaderMacro> = Object.create(null);\n\n  /**\n   * Get shader macro by name.\n   * @param name - Name of the shader macro\n   * @returns Shader macro\n   */\n  static getByName(name: string): ShaderMacro;\n\n  /**\n   * Get shader macro by name.\n   * @param name - Name of the shader macro\n   * @param value - Value of the shader macro\n   * @returns Shader macro\n   */\n  static getByName(name: string, value: string): ShaderMacro;\n\n  static getByName(name: string, value?: string): ShaderMacro {\n    const key = value ? name + ` ` + value : name;\n    let macro = ShaderMacro._macroMap[key];\n    if (!macro) {\n      const maskMap = ShaderMacro._macroMaskMap;\n      const counter = ShaderMacro._macroCounter;\n      const index = Math.floor(counter / 32);\n      const bit = counter % 32;\n\n      macro = new ShaderMacro(name, value, index, 1 << bit);\n      ShaderMacro._macroMap[key] = macro;\n      if (index == maskMap.length) {\n        maskMap.length++;\n        maskMap[index] = new Array<ShaderMacro>(32);\n      }\n      maskMap[index][bit] = macro;\n      ShaderMacro._macroCounter++;\n    }\n    return macro;\n  }\n\n  /**\n   * @internal\n   */\n  static _getMacrosElements(macros: ShaderMacroCollection, out: ShaderMacro[]): void {\n    const maskMap = ShaderMacro._macroMaskMap;\n    const mask = macros._mask;\n    out.length = 0;\n    for (let i = 0, n = macros._length; i < n; i++) {\n      const subMaskMap = maskMap[i];\n      const subMask = mask[i];\n      const m = subMask < 0 ? 32 : Math.floor(Math.log2(subMask)) + 1; // if is negative must contain 1 << 31.\n      for (let j = 0; j < m; j++) {\n        if (subMask & (1 << j)) {\n          out.push(subMaskMap[j]);\n        }\n      }\n    }\n  }\n\n  /** Name. */\n  readonly name: string;\n  /** Value. */\n  readonly value: string;\n\n  /** @internal */\n  _nameId: number;\n  /** @internal */\n  _maskIndex: number;\n  /** @internal */\n  _maskValue: number;\n\n  private constructor(name: string, value: string, maskIndex: number, maskValue: number) {\n    this.name = name;\n    this._maskIndex = maskIndex;\n    this._maskValue = maskValue;\n    this.value = value;\n\n    const macroNameIDMap = ShaderMacro._macroNameIdMap;\n    let nameID = macroNameIDMap[name];\n    if (macroNameIDMap[name] === undefined) {\n      macroNameIDMap[name] = nameID = ShaderMacro._macroNameCounter++;\n    }\n    this._nameId = nameID;\n  }\n}\n","import { ShaderMacro } from \"./ShaderMacro\";\n\n/**\n * Shader macro collection.\n * @internal\n */\nexport class ShaderMacroCollection {\n  /**\n   * Union of two macro collection.\n   * @param left - input macro collection\n   * @param right - input macro collection\n   * @param out - union output macro collection\n   */\n  static unionCollection(left: ShaderMacroCollection, right: ShaderMacroCollection, out: ShaderMacroCollection): void {\n    const outMask = out._mask;\n    let minSize: number, maxSize: number;\n    let minMask: number[], maxMask: number[];\n    if (left._length < right._length) {\n      minSize = left._length;\n      maxSize = right._length;\n      minMask = left._mask;\n      maxMask = right._mask;\n    } else {\n      minSize = right._length;\n      maxSize = left._length;\n      minMask = right._mask;\n      maxMask = left._mask;\n    }\n\n    let i = 0;\n    outMask.length < maxSize && (outMask.length = maxSize);\n    for (; i < minSize; i++) {\n      outMask[i] = minMask[i] | maxMask[i];\n    }\n    for (; i < maxSize; i++) {\n      outMask[i] = maxMask[i];\n    }\n    out._length = maxSize;\n  }\n\n  /** @internal */\n  _mask: number[] = [];\n  /** @internal */\n  _length: number = 0;\n\n  /**\n   * Enable one macro in this macro collection.\n   * @param macro - ShaderMacro\n   */\n  enable(macro: ShaderMacro): void {\n    const index = macro._maskIndex;\n    const size = index + 1;\n    const mask = this._mask;\n    let maskStart = this._length; // must from this._length because this._length maybe less than mask.length and have dirty data should clear.\n    if (maskStart < size) {\n      mask.length < size && (mask.length = size); // mask.length maybe small than size,maybe not.\n      for (; maskStart < index; maskStart++) {\n        mask[maskStart] = 0;\n      }\n      mask[index] = macro._maskValue;\n      this._length = size;\n    } else {\n      mask[index] |= macro._maskValue;\n    }\n  }\n\n  /**\n   * Disable one macro in this macro collection.\n   * @param macro - ShaderMacro\n   */\n  disable(macro: ShaderMacro): void {\n    const index = macro._maskIndex;\n    const mask = this._mask;\n    const endIndex = this._length - 1;\n    if (index > endIndex) {\n      return;\n    }\n    const newValue = mask[index] & ~macro._maskValue;\n    if (index == endIndex && newValue === 0) {\n      this._length--;\n    } else {\n      mask[index] = newValue;\n    }\n  }\n\n  /**\n   * Union of this and other macro collection.\n   * @param macroCollection - macro collection\n   */\n  unionCollection(macroCollection: ShaderMacroCollection): void {\n    const addMask = macroCollection._mask;\n    const addSize = macroCollection._length;\n    const mask = this._mask;\n    const maskSize = this._length;\n    if (maskSize < addSize) {\n      mask.length < addSize && (mask.length = addSize);\n      let i = 0;\n      for (; i < maskSize; i++) {\n        mask[i] |= addMask[i];\n      }\n      for (; i < addSize; i++) {\n        mask[i] = addMask[i];\n      }\n      this._length = addSize;\n    } else {\n      for (let i = 0; i < addSize; i++) {\n        mask[i] |= addMask[i];\n      }\n    }\n  }\n\n  /**\n   * Complementarity of this and other macro collection.\n   * @param macroCollection - macro collection\n   */\n  complementaryCollection(macroCollection: ShaderMacroCollection): void {\n    const removeMask = macroCollection._mask;\n    const mask = this._mask;\n    let endIndex = this._length - 1;\n    let i = Math.min(macroCollection._length - 1, endIndex);\n    for (; i >= 0; i--) {\n      const newValue = mask[i] & ~removeMask[i];\n      if (i == endIndex && newValue === 0) {\n        endIndex--;\n        this._length--;\n      } else {\n        mask[i] = newValue;\n      }\n    }\n  }\n\n  /**\n   * Intersection of this and other macro collection.\n   * @param macroCollection - macro collection\n   */\n  intersectionCollection(macroCollection: ShaderMacroCollection): void {\n    const unionMask = macroCollection._mask;\n    const mask = this._mask;\n    for (let i = this._length - 1; i >= 0; i--) {\n      const value = mask[i] & unionMask[i];\n      if (value == 0 && i == this._length - 1) {\n        this._length--;\n      } else {\n        mask[i] = value;\n      }\n    }\n  }\n\n  /**\n   * Whether macro is enabled in this macro collection.\n   * @param macro - ShaderMacro\n   */\n  isEnable(macro: ShaderMacro): boolean {\n    const index = macro._maskIndex;\n    if (index >= this._length) {\n      return false;\n    }\n    return (this._mask[index] & macro._maskValue) !== 0;\n  }\n\n  /**\n   * Clear this macro collection.\n   */\n  clear(): void {\n    this._length = 0;\n  }\n}\n","function _extends() {\n    _extends = Object.assign || function assign(target) {\n        for (var i = 1; i < arguments.length; i++) {\n            var source = arguments[i];\n            for (var key in source) if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];\n        }\n\n        return target;\n    };\n\n    return _extends.apply(this, arguments);\n}\nexport { _extends as _ };\n","/**\n * Pipeline stage.\n */\nexport enum PipelineStage {\n  /** DepthOnly stage. */\n  DepthOnly = \"DepthOnly\",\n  /** Shadow caster stage. */\n  ShadowCaster = \"ShadowCaster\",\n  /** Forward shading stage. */\n  Forward = \"Forward\"\n}\n","/**\n * EventDispatcher, which can be inherited as a base class.\n */\nexport class EventDispatcher {\n  private static _dispatchingListenersPool: EventData[][] = [];\n\n  private _events: Record<string, EventData | EventData[]> = Object.create(null);\n  private _eventCount: number = 0;\n\n  /**\n   * Determine whether there is event listening.\n   * @param event - Event name\n   * @returns Returns whether there is a corresponding event\n   */\n  hasEvent(event: string): boolean {\n    return this._events[event] != null;\n  }\n\n  /**\n   * Returns the names of all registered events.\n   * @returns All event names\n   */\n  eventNames(): string[] {\n    if (this._eventCount === 0) return [];\n    return Object.keys(this._events);\n  }\n\n  /**\n   * Returns the number of listeners with the specified event name.\n   * @param event - Event name\n   * @returns The count of listeners\n   */\n  listenerCount(event: string): number {\n    const listeners = this._events[event];\n\n    if (!listeners) return 0;\n    if (Array.isArray(listeners)) return listeners.length;\n    return 1;\n  }\n\n  /**\n   * Dispatch the event with the specified event name.\n   * @param event - Event name\n   * @param data - Data\n   * @returns - Whether the dispatching is successful\n   */\n  dispatch(event: string, data?: any): boolean {\n    if (!this._events[event]) {\n      return false;\n    }\n\n    const listeners = this._events[event];\n\n    if (Array.isArray(listeners)) {\n      const count = listeners.length;\n\n      // cloning list to avoid structure breaking\n      const { _dispatchingListenersPool: pool } = EventDispatcher;\n      const dispatchingListeners = pool.length > 0 ? pool.pop() : [];\n      dispatchingListeners.length = count;\n      for (let i = 0; i < count; i++) {\n        dispatchingListeners[i] = listeners[i];\n      }\n\n      for (let i = 0; i < count; i++) {\n        const listener = dispatchingListeners[i];\n        if (!listener.destroyed) {\n          if (listener.once) this.off(event, listener.fn);\n          listener.fn(data);\n        }\n      }\n\n      // remove hooked function to avoid gc problem\n      dispatchingListeners.length = 0;\n      pool.push(dispatchingListeners);\n    } else {\n      if (listeners.once) this.off(event, listeners.fn);\n      listeners.fn(data);\n    }\n    return true;\n  }\n\n  /**\n   * Add a listener/\n   * @param event - Event name\n   * @param fn - Function\n   * @returns This\n   */\n  on(event: string, fn: Function): EventDispatcher {\n    return this._addEventListener(event, fn);\n  }\n\n  /**\n   * Add a one-time listener.\n   * @param event - Event name\n   * @param fn - Function\n   * @returns This\n   */\n  once(event: string, fn: Function): EventDispatcher {\n    return this._addEventListener(event, fn, true);\n  }\n\n  /**\n   * Remove the event listener(s) of the specified event name.\n   * @param event - Event name\n   * @param fn - Function, If is undefined, delete all corresponding event listeners.\n   */\n  off(event: string, fn?: Function): EventDispatcher {\n    if (!this._events[event]) return this;\n    if (!fn) {\n      this._clearEvent(event);\n      return this;\n    }\n\n    const listeners = this._events[event];\n    const isArray = Array.isArray(listeners);\n    if (!isArray && listeners.fn === fn) {\n      this._clearEvent(event);\n    } else if (isArray) {\n      for (let i = listeners.length - 1; i >= 0; i--) {\n        if (listeners[i].fn === fn) {\n          // mark as destroyed\n          listeners[i].destroyed = true;\n          listeners.splice(i, 1);\n        }\n      }\n      if (listeners.length === 0) {\n        this._clearEvent(event);\n      } else if (listeners.length === 1) {\n        this._events[event] = listeners[0];\n      }\n    }\n    return this;\n  }\n\n  /**\n   * @deprecated Use `off` instead.\n   * Remove the event listener(s) of the specified event name.\n   * @param event - Event name\n   * @param fn - Function, If is undefined, delete all corresponding event listeners.\n   */\n  removeEventListener(event: string, fn?: Function): EventDispatcher {\n    return this.off(event, fn);\n  }\n\n  /**\n   * Remove all event listeners.\n   * @param event - Event name, delete all events if not passed\n   */\n  removeAllEventListeners(event?: string): void {\n    if (event) {\n      if (this._events[event]) this._clearEvent(event);\n    } else {\n      this._events = Object.create(null);\n      this._eventCount = 0;\n    }\n  }\n\n  private _addEventListener(event: string, fn: Function, once?: boolean): EventDispatcher {\n    const listener = { fn, once };\n    const events = this._events;\n    const element = events[event];\n\n    if (!element) {\n      events[event] = listener;\n      this._eventCount++;\n    } else if (Array.isArray(element)) {\n      element.push(listener);\n    } else {\n      events[event] = [element, listener];\n    }\n    return this;\n  }\n\n  private _clearEvent(event: string) {\n    if (--this._eventCount === 0) {\n      this._events = Object.create(null);\n    } else {\n      delete this._events[event];\n    }\n  }\n}\n\ninterface EventData {\n  fn: Function;\n  once?: boolean;\n  destroyed?: boolean;\n}\n","import { ShaderDataGroup } from \"./enums/ShaderDataGroup\";\nimport { ShaderPropertyType } from \"./enums/ShaderPropertyType\";\n\n/**\n * Shader property.\n */\nexport class ShaderProperty {\n  /** @internal */\n  static _propertyIdMap: Record<number, ShaderProperty> = Object.create(null);\n\n  private static _propertyNameCounter: number = 0;\n  private static _propertyNameMap: Record<string, ShaderProperty> = Object.create(null);\n\n  /**\n   * Get shader property by name.\n   * @param name - Name of the shader property\n   * @returns Shader property\n   */\n  static getByName(name: string): ShaderProperty {\n    const propertyNameMap = ShaderProperty._propertyNameMap;\n    if (propertyNameMap[name] != null) {\n      return propertyNameMap[name];\n    } else {\n      const property = new ShaderProperty(name);\n      propertyNameMap[name] = property;\n      ShaderProperty._propertyIdMap[property._uniqueId] = property;\n      return property;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _getShaderPropertyGroup(propertyName: string): ShaderDataGroup | null {\n    const shaderProperty = ShaderProperty._propertyNameMap[propertyName];\n    return shaderProperty?._group;\n  }\n\n  /** @internal */\n  _uniqueId: number;\n  /** @internal */\n  _group: ShaderDataGroup;\n  /** @internal */\n  _type: ShaderPropertyType;\n\n  /** Shader property name. */\n  readonly name: string;\n\n  /**\n   * Shader property type.\n   */\n  get type(): ShaderPropertyType {\n    return this._type;\n  }\n\n  /**\n   * @internal\n   */\n  constructor(name: string) {\n    this.name = name;\n    this._uniqueId = ShaderProperty._propertyNameCounter++;\n  }\n}\n","import { Vector4 } from \"@galacean/engine-math\";\nimport { ShaderData } from \"../shader/ShaderData\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\n\n/**\n * Provide time related information.\n */\nexport class Time {\n  private static _elapsedTimeProperty = ShaderProperty.getByName(\"scene_ElapsedTime\");\n  private static _deltaTimeProperty = ShaderProperty.getByName(\"scene_DeltaTime\");\n\n  private _frameCount: number = 0;\n  private _deltaTime: number = 0;\n  private _actualDeltaTime: number = 0;\n  private _elapsedTime: number = 0;\n  private _actualElapsedTime: number = 0;\n  private _lastSystemTime: number;\n\n  private _elapsedTimeValue: Vector4 = new Vector4();\n  private _deltaTimeValue: Vector4 = new Vector4();\n\n  /** Maximum delta time allowed per frame in seconds. */\n  maximumDeltaTime: number = 0.333333;\n\n  /** The scale of time. */\n  timeScale: number = 1.0;\n\n  /*\n   * The total number of frames since the start of the engine.\n   */\n  get frameCount(): number {\n    return this._frameCount;\n  }\n\n  /**\n   * The delta time in seconds from the last frame to the current frame.\n   *\n   * @remarks When the frame rate is low or stutter occurs, `deltaTime` will not exceed the value of `maximumDeltaTime` * `timeScale`.\n   */\n  get deltaTime(): number {\n    return this._deltaTime;\n  }\n\n  /**\n   * The amount of elapsed time in seconds since the start of the engine.\n   */\n  get elapsedTime(): number {\n    return this._elapsedTime;\n  }\n\n  /**\n   * The actual delta time in seconds from the last frame to the current frame.\n   *\n   * @remarks The actual delta time is not affected by `maximumDeltaTime` and `timeScale`.\n   */\n  get actualDeltaTime(): number {\n    return this._actualDeltaTime;\n  }\n\n  /**\n   * The amount of actual elapsed time in seconds since the start of the engine.\n   */\n  get actualElapsedTime(): number {\n    return this._actualElapsedTime;\n  }\n\n  /**\n   * Constructor of the Time.\n   */\n  constructor() {\n    this._lastSystemTime = performance.now() / 1000;\n  }\n\n  /**\n   * @internal\n   */\n  _reset() {\n    this._lastSystemTime = performance.now() / 1000;\n  }\n\n  /**\n   * @internal\n   */\n  _update(): void {\n    const currentSystemTime = performance.now() / 1000;\n\n    const actualDeltaTime = currentSystemTime - this._lastSystemTime;\n    this._actualDeltaTime = actualDeltaTime;\n    this._actualElapsedTime += actualDeltaTime;\n\n    const deltaTime = Math.min(actualDeltaTime, this.maximumDeltaTime) * this.timeScale;\n    this._deltaTime = deltaTime;\n    this._elapsedTime += deltaTime;\n    this._frameCount++;\n\n    this._lastSystemTime = currentSystemTime;\n  }\n\n  /**\n   * @internal\n   */\n  _updateSceneShaderData(shaderData: ShaderData): void {\n    const { _elapsedTimeValue: elapsedTimeValue, _deltaTimeValue: deltaTimeValue } = this;\n\n    const time = this._elapsedTime;\n    elapsedTimeValue.set(time, Math.sin(time), Math.cos(time), 0);\n    shaderData.setVector4(Time._elapsedTimeProperty, elapsedTimeValue);\n\n    deltaTimeValue.set(this._deltaTime, 0, 0, 0);\n    shaderData.setVector4(Time._deltaTimeProperty, deltaTimeValue);\n  }\n}\n","/**\n * Data type enumeration\n */\nexport enum DataType {\n  /** Float */\n  FLOAT = 5126, // gl.FLOAT\n  /** Floating-point two-dimensional vector */\n  FLOAT_VEC2 = 35664, // gl.FLOAT_VEC2\n  /** Floating-point three-dimensional vector */\n  FLOAT_VEC3 = 35665, // gl.FLOAT_VEC3\n  /** Floating-point four-dimensional vector */\n  FLOAT_VEC4 = 35666, // gl.FLOAT_VEC4\n\n  /** Integer */\n  INT = 5124, // gl.INT\n  /** Integer two-dimensional vector */\n  INT_VEC2 = 35667, // gl.INT_VEC2\n  /** Integer three-dimensional vector */\n  INT_VEC3 = 35668, // gl.INT_VEC3\n  /** Integer four-dimensional vector */\n  INT_VEC4 = 35669, // gl.INT_VEC4\n\n  /** Boolean */\n  BOOL = 35670, // gl.BOOL\n  /** Boolean two-dimensional vector */\n  BOOL_VEC2 = 35671, // gl.BOOL_VEC2\n  /** Boolean three-dimensional vector */\n  BOOL_VEC3 = 35672, // gl.BOOL_VEC3\n  /** Boolean four-dimensional vector */\n  BOOL_VEC4 = 35673, // gl.BOOL_VEC4\n\n  /** Second-order matrix */\n  FLOAT_MAT2 = 35674, // gl.FLOAT_MAT2\n  /** Third-order matrix */\n  FLOAT_MAT3 = 35675, // gl.FLOAT_MAT3\n  /** Fourth-order matrix */\n  FLOAT_MAT4 = 35676, // gl.FLOAT_MAT4\n\n  /** Float array */\n  FLOAT_ARRAY = 35677, // gl.FLOAT_ARRAY\n  /** Floating-point two-dimensional vector array */\n  FLOAT_VEC2_ARRAY = 100000,\n  /** Floating-point three-dimensional vector array */\n  FLOAT_VEC3_ARRAY,\n  /** Floating-point four-dimensional vector array */\n  FLOAT_VEC4_ARRAY,\n\n  /** Integer array */\n  INT_ARRAY,\n  /** Integer two-dimensional vector array */\n  INT_VEC2_ARRAY,\n  /** Integer three-dimensional vector array */\n  INT_VEC3_ARRAY,\n  /** Integer four-dimensional vector array */\n  INT_VEC4_ARRAY,\n\n  /** Second-order matrix array */\n  FLOAT_MAT2_ARRAY,\n  /** Third-order matrix array */\n  FLOAT_MAT3_ARRAY,\n  /** Fourth-order matrix array */\n  FLOAT_MAT4_ARRAY,\n\n  /** 2D texture sampler array */\n  SAMPLER_2D_ARRAY,\n  /** Cube map texture sampler array */\n  SAMPLER_CUBE_ARRAY,\n\n  /** 2D sampler */\n  SAMPLER_2D = 35678, // gl.SAMPLER_2D\n  /** Cube map Texture sampler */\n  SAMPLER_CUBE = 35680, // gl.SAMPLER_CUBE\n\n  /** Byte */\n  BYTE = 5120, // gl.BYTE\n  /** Unsigned byte */\n  UNSIGNED_BYTE = 5121, // gl.UNSIGNED_BYTE\n  /** Short */\n  SHORT = 5122, // gl.SHORT\n  /** Unsigned short */\n  UNSIGNED_SHORT = 5123, // gl.UNSIGNED_SHORT\n  /** Unsigned int */\n  UNSIGNED_INT = 5125 // gl.UNSIGNED_INT\n}\n\n/**\n * GL Capabilities\n * Some capabilities can be smoothed out by extension, and some capabilities must use WebGL 2.0.\n * */\nexport enum GLCapabilityType {\n  shaderVertexID = \"shaderVertexID\",\n  standardDerivatives = \"OES_standard_derivatives\",\n  shaderTextureLod = \"EXT_shader_texture_lod\",\n  elementIndexUint = \"OES_element_index_uint\",\n  depthTexture = \"WEBGL_depth_texture\",\n  drawBuffers = \"WEBGL_draw_buffers\",\n  vertexArrayObject = \"OES_vertex_array_object\",\n  instancedArrays = \"ANGLE_instanced_arrays\",\n  multipleSample = \"multipleSampleOnlySupportedInWebGL2\",\n  textureFloat = \"OES_texture_float\",\n  textureFloatLinear = \"OES_texture_float_linear\",\n  textureHalfFloat = \"OES_texture_half_float\",\n  textureHalfFloatLinear = \"OES_texture_half_float_linear\",\n  WEBGL_colorBufferFloat = \"WEBGL_color_buffer_float\",\n  colorBufferFloat = \"EXT_color_buffer_float\",\n  colorBufferHalfFloat = \"EXT_color_buffer_half_float\",\n  textureFilterAnisotropic = \"EXT_texture_filter_anisotropic\",\n  blendMinMax = \"EXT_blend_minmax\",\n  fragDepth = \"EXT_frag_depth\",\n\n  astc = \"WEBGL_compressed_texture_astc\",\n  astc_webkit = \"WEBKIT_WEBGL_compressed_texture_astc\",\n  etc = \"WEBGL_compressed_texture_etc\",\n  etc_webkit = \"WEBKIT_WEBGL_compressed_texture_etc\",\n  etc1 = \"WEBGL_compressed_texture_etc1\",\n  etc1_webkit = \"WEBKIT_WEBGL_compressed_texture_etc1\",\n  pvrtc = \"WEBGL_compressed_texture_pvrtc\",\n  pvrtc_webkit = \"WEBKIT_WEBGL_compressed_texture_pvrtc\",\n  s3tc = \"WEBGL_compressed_texture_s3tc\",\n  s3tc_webkit = \"WEBKIT_WEBGL_compressed_texture_s3tc\",\n  // atc = \"WEBGL_compressed_texture_atc\",\n  // s3tc_srgb = \"WEBGL_compressed_texture_s3tc_srgb\"\n\n  bptc = \"EXT_texture_compression_bptc\",\n\n  WEBGL_lose_context = \"WEBGL_lose_context\"\n}\n\nexport type TypedArray =\n  | Int8Array\n  | Uint8Array\n  | Int16Array\n  | Uint16Array\n  | Int32Array\n  | Uint32Array\n  | Uint8ClampedArray\n  | Float32Array\n  | Float64Array;\n","import pbr_frag_define from \"./pbr_frag_define.glsl\";\n\n/** direct + IBL */\nimport pbr_helper from \"./pbr_helper.glsl\";\nimport brdf from \"./brdf.glsl\";\nimport direct_irradiance_frag_define from \"./direct_irradiance_frag_define.glsl\";\nimport ibl_frag_define from \"./ibl_frag_define.glsl\";\n\nimport pbr_frag from \"./pbr_frag.glsl\";\n\nexport default {\n  pbr_frag_define,\n\n  pbr_helper,\n  brdf,\n  direct_irradiance_frag_define,\n  ibl_frag_define,\n\n  pbr_frag\n};\n","import ShadowCoord from \"./ShadowCoord.glsl\";\nimport ShadowFragmentDeclaration from \"./ShadowFragmentDeclaration.glsl\";\nimport shadow_sample_tent from \"./shadow_sample_tent.glsl\";\nimport ShadowVertexDeclaration from \"./ShadowVertexDeclaration.glsl\";\nimport ShadowVertex from \"./ShadowVertex.glsl\";\n\nexport default {\n  ShadowCoord,\n  ShadowFragmentDeclaration,\n  shadow_sample_tent,\n  ShadowVertexDeclaration,\n  ShadowVertex\n};\n","import particle_common from \"./particle_common.glsl\";\nimport velocity_over_lifetime_module from \"./velocity_over_lifetime_module.glsl\";\nimport rotation_over_lifetime_module from \"./rotation_over_lifetime_module.glsl\";\nimport size_over_lifetime_module from \"./size_over_lifetime_module.glsl\";\nimport color_over_lifetime_module from \"./color_over_lifetime_module.glsl\";\nimport texture_sheet_animation_module from \"./texture_sheet_animation_module.glsl\";\n\nimport sphere_billboard from \"./sphere_billboard.glsl\";\nimport stretched_billboard from \"./stretched_billboard.glsl\";\nimport vertical_billboard from \"./vertical_billboard.glsl\";\nimport horizontal_billboard from \"./horizontal_billboard.glsl\";\nimport particle_mesh from \"./particle_mesh.glsl\";\n\nexport default {\n  particle_common,\n  velocity_over_lifetime_module,\n  rotation_over_lifetime_module,\n  size_over_lifetime_module,\n  color_over_lifetime_module,\n  texture_sheet_animation_module,\n\n  sphere_billboard,\n  stretched_billboard,\n  vertical_billboard,\n  horizontal_billboard,\n  particle_mesh\n};\n","import camera_declare from \"./camera_declare.glsl\";\nimport common from \"./common.glsl\";\nimport common_vert from \"./common_vert.glsl\";\nimport transform_declare from \"./transform_declare.glsl\";\n\nimport color_share from \"./color_share.glsl\";\nimport FogFragmentDeclaration from \"./FogFragmentDeclaration.glsl\";\nimport FogVertexDeclaration from \"./FogVertexDeclaration.glsl\";\nimport normal_share from \"./normal_share.glsl\";\nimport uv_share from \"./uv_share.glsl\";\nimport worldpos_share from \"./worldpos_share.glsl\";\n\nimport begin_normal_vert from \"./begin_normal_vert.glsl\";\nimport begin_position_vert from \"./begin_position_vert.glsl\";\n\nimport blendShape_input from \"./blendShape_input.glsl\";\nimport blendShape_vert from \"./blendShape_vert.glsl\";\nimport color_vert from \"./color_vert.glsl\";\nimport FogVertex from \"./FogVertex.glsl\";\nimport normal_vert from \"./normal_vert.glsl\";\nimport position_vert from \"./position_vert.glsl\";\nimport skinning_vert from \"./skinning_vert.glsl\";\nimport uv_vert from \"./uv_vert.glsl\";\nimport worldpos_vert from \"./worldpos_vert.glsl\";\n\nimport FogFragment from \"./FogFragment.glsl\";\nimport light_frag_define from \"./light_frag_define.glsl\";\nimport mobile_material_frag from \"./mobile_material_frag.glsl\";\n\nimport begin_mobile_frag from \"./begin_mobile_frag.glsl\";\nimport begin_viewdir_frag from \"./begin_viewdir_frag.glsl\";\n\nimport mobile_blinnphong_frag from \"./mobile_blinnphong_frag.glsl\";\n\nimport noise_cellular from \"./noise_cellular.glsl\";\nimport noise_cellular_2D from \"./noise_cellular_2D.glsl\";\nimport noise_cellular_2x2 from \"./noise_cellular_2x2.glsl\";\nimport noise_cellular_2x2x2 from \"./noise_cellular_2x2x2.glsl\";\nimport noise_cellular_3D from \"./noise_cellular_3D.glsl\";\nimport noise_common from \"./noise_common.glsl\";\nimport noise_perlin from \"./noise_perlin.glsl\";\nimport noise_perlin_2D from \"./noise_perlin_2D.glsl\";\nimport noise_perlin_3D from \"./noise_perlin_3D.glsl\";\nimport noise_perlin_4D from \"./noise_perlin_4D.glsl\";\nimport noise_psrd_2D from \"./noise_psrd_2D.glsl\";\nimport noise_simplex from \"./noise_simplex.glsl\";\nimport noise_simplex_2D from \"./noise_simplex_2D.glsl\";\nimport noise_simplex_3D from \"./noise_simplex_3D.glsl\";\nimport noise_simplex_3D_grad from \"./noise_simplex_3D_grad.glsl\";\nimport noise_simplex_4D from \"./noise_simplex_4D.glsl\";\n\nimport PBRShaderLib from \"./pbr\";\nimport ShadowLib from \"./shadow\";\nimport ParticleShaderLib from \"./particle\";\n\nimport normal_get from \"./normal_get.glsl\";\n\nexport const ShaderLib = {\n  common,\n  common_vert,\n  transform_declare,\n  camera_declare,\n\n  color_share,\n  normal_share,\n  uv_share,\n  worldpos_share,\n  FogVertexDeclaration,\n  FogFragmentDeclaration,\n\n  begin_normal_vert,\n  begin_position_vert,\n\n  position_vert,\n  color_vert,\n  normal_vert,\n  skinning_vert,\n  blendShape_input,\n  blendShape_vert,\n  uv_vert,\n  worldpos_vert,\n  FogVertex,\n\n  light_frag_define,\n  mobile_material_frag,\n  FogFragment,\n\n  begin_mobile_frag,\n  begin_viewdir_frag,\n\n  mobile_blinnphong_frag,\n\n  noise_common,\n  noise_cellular_2D,\n  noise_cellular_2x2,\n  noise_cellular_2x2x2,\n  noise_cellular_3D,\n  noise_cellular,\n  noise_perlin_2D,\n  noise_perlin_3D,\n  noise_perlin_4D,\n  noise_perlin,\n  noise_psrd_2D,\n  noise_simplex_2D,\n  noise_simplex_3D_grad,\n  noise_simplex_3D,\n  noise_simplex_4D,\n  noise_simplex,\n\n  ...ShadowLib,\n  ...PBRShaderLib,\n  normal_get,\n  ...ParticleShaderLib\n};\n","import { Logger } from \"../base/Logger\";\nimport { ShaderMacro } from \"../shader/ShaderMacro\";\nimport { ShaderLib } from \"./ShaderLib\";\n\nexport class ShaderFactory {\n  /** @internal */\n  static readonly _shaderExtension = [\n    \"GL_EXT_shader_texture_lod\",\n    \"GL_OES_standard_derivatives\",\n    \"GL_EXT_draw_buffers\",\n    \"GL_EXT_frag_depth\"\n  ]\n    .map((e) => `#extension ${e} : enable\\n`)\n    .join(\"\");\n\n  private static readonly _has300OutInFragReg = /\\bout\\s+(?:\\w+\\s+)?(?:vec4)\\s+(?:\\w+)\\s*;/; // [layout(location = 0)] out [highp] vec4 [color];\n\n  static parseCustomMacros(macros: ShaderMacro[]) {\n    return macros.map((m) => `#define ${m.value ? m.name + ` ` + m.value : m.name}\\n`).join(\"\");\n  }\n\n  static registerInclude(includeName: string, includeSource: string) {\n    if (ShaderLib[includeName]) {\n      throw `The \"${includeName}\" shader include already exist`;\n    }\n    ShaderLib[includeName] = includeSource;\n  }\n\n  static unRegisterInclude(includeName: string) {\n    delete ShaderLib[includeName];\n  }\n\n  /**\n   * @param regex The default regex is for engine's builtin glsl `#include` syntax,\n   * since `ShaderLab` use the same parsing function but different syntax for `#include` --- `/^[ \\t]*#include +\"([\\w\\d.]+)\"/gm`\n   */\n  static parseIncludes(src: string, regex = /^[ \\t]*#include +<([\\w\\d.]+)>/gm) {\n    function replace(match, slice) {\n      var replace = ShaderLib[slice];\n\n      if (replace === undefined) {\n        Logger.error(`Shader slice \"${match.trim()}\" not founded.`);\n        return \"\";\n      }\n\n      return ShaderFactory.parseIncludes(replace, regex);\n    }\n\n    return src.replace(regex, replace);\n  }\n\n  /**\n   * Convert lower GLSL version to GLSL 300 es.\n   * @param shader - code\n   * @param isFrag - Whether it is a fragment shader.\n   * */\n  static convertTo300(shader: string, isFrag?: boolean) {\n    shader = shader.replace(/\\bvarying\\b/g, isFrag ? \"in\" : \"out\");\n    shader = shader.replace(/\\btexture(2D|Cube)\\b/g, \"texture\");\n    shader = shader.replace(/\\btexture2DProj\\b/g, \"textureProj\");\n\n    if (isFrag) {\n      shader = shader.replace(/\\btexture(2D|Cube)LodEXT\\b/g, \"textureLod\");\n      shader = shader.replace(/\\btexture(2D|Cube)GradEXT\\b/g, \"textureGrad\");\n      shader = shader.replace(/\\btexture2DProjLodEXT\\b/g, \"textureProjLod\");\n      shader = shader.replace(/\\btexture2DProjGradEXT\\b/g, \"textureProjGrad\");\n      shader = shader.replace(/\\bgl_FragDepthEXT\\b/g, \"gl_FragDepth\");\n\n      if (!ShaderFactory._has300Output(shader)) {\n        const isMRT = /\\bgl_FragData\\[.+?\\]/g.test(shader);\n        if (isMRT) {\n          shader = shader.replace(/\\bgl_FragColor\\b/g, \"gl_FragData[0]\");\n          const result = shader.match(/\\bgl_FragData\\[.+?\\]/g);\n          shader = this._replaceMRTShader(shader, result);\n        } else {\n          shader = shader.replace(/void\\s+?main\\s*\\(/g, `out vec4 glFragColor;\\nvoid main(`);\n          shader = shader.replace(/\\bgl_FragColor\\b/g, \"glFragColor\");\n        }\n      }\n    } else {\n      shader = shader.replace(/\\battribute\\b/g, \"in\");\n    }\n\n    return shader;\n  }\n\n  private static _has300Output(fragmentShader: string): boolean {\n    return ShaderFactory._has300OutInFragReg.test(fragmentShader);\n  }\n\n  private static _replaceMRTShader(shader: string, result: string[]): string {\n    let declaration = \"\";\n    const mrtIndexSet = new Set();\n\n    for (let i = 0; i < result.length; i++) {\n      const res = result[i].match(/\\bgl_FragData\\[(.+?)\\]/);\n      mrtIndexSet.add(res[1]);\n    }\n\n    mrtIndexSet.forEach((index) => {\n      declaration += `layout(location=${index}) out vec4 fragOutColor${index};\\n`;\n    });\n    declaration += `void main(`;\n\n    shader = shader.replace(/\\bgl_FragData\\[(.+?)\\]/g, \"fragOutColor$1\");\n\n    shader = shader.replace(/void\\s+?main\\s*\\(/g, declaration);\n    return shader;\n  }\n}\n","/**\n * Shader tag key.\n */\nexport class ShaderTagKey {\n  private static _nameCounter: number = 0;\n  private static _nameMap: Record<string, ShaderTagKey> = Object.create(null);\n\n  /**\n   * Get shader property by name.\n   * @param name - Name of the shader property\n   * @returns Shader property\n   */\n  static getByName(name: string): ShaderTagKey {\n    const nameMap = ShaderTagKey._nameMap;\n    return (nameMap[name] ||= new ShaderTagKey(name));\n  }\n\n  /** Shader tag property name. */\n  readonly name: string;\n\n  /** @internal */\n  _uniqueId: number;\n\n  private constructor(name: string) {\n    this.name = name;\n    this._uniqueId = ShaderTagKey._nameCounter++;\n  }\n}\n","import { Logger } from \"../base\";\nimport { ShaderTagKey } from \"./ShaderTagKey\";\n\n/**\n * Base class for shader structure.\n */\nexport abstract class ShaderPart {\n  protected _name: string;\n\n  private _tagsMap: Record<number, number | string | boolean> = Object.create(null);\n\n  /**\n   * Name.\n   */\n  get name(): string {\n    return this._name;\n  }\n\n  /**\n   * Set tag by key name.\n   * @param keyName - Key name of the tag\n   * @param value - Tag value\n   */\n  setTag<T extends number | string | boolean>(keyName: string, value: T): void;\n\n  /**\n   * Set tag.\n   * @param key - Key of the tag\n   * @param value - Tag value\n   */\n  setTag<T extends number | string | boolean>(key: ShaderTagKey, value: T): void;\n\n  setTag<T extends number | string | boolean>(keyOrKeyName: ShaderTagKey | string, value: T): void {\n    const key = typeof keyOrKeyName === \"string\" ? ShaderTagKey.getByName(keyOrKeyName) : keyOrKeyName;\n    const tags = this._tagsMap;\n\n    if (tags[key._uniqueId] !== undefined) {\n      Logger.warn(`The value of tag named \"${key.name}\" is being replaced.`);\n    }\n    tags[key._uniqueId] = value;\n  }\n\n  /**\n   * Delete a tag by key name.\n   * @param KeyName - Key name of the tag\n   */\n  deleteTag(KeyName: string): void;\n\n  /**\n   * Delete a tag by key.\n   * @param key - Key of the tag\n   */\n  deleteTag(key: ShaderTagKey): void;\n\n  deleteTag(keyOrKeyName: ShaderTagKey | string): void {\n    delete this._tagsMap[\n      (typeof keyOrKeyName == \"string\" ? ShaderTagKey.getByName(keyOrKeyName) : keyOrKeyName)._uniqueId\n    ];\n  }\n\n  /**\n   * Get tag by key name.\n   * @param keyName - Key name of the tag\n   * @returns Tag value\n   */\n  getTagValue<T extends number | string | boolean>(keyName: string): T;\n\n  /**\n   * Get tag value by key.\n   * @param key - Key of the tag\n   * @returns Tag value\n   */\n  getTagValue<T extends number | string | boolean>(key: ShaderTagKey): T;\n\n  getTagValue<T extends number | string | boolean>(keyOrKeyName: ShaderTagKey | string): T {\n    return this._tagsMap[\n      typeof keyOrKeyName == \"string\" ? ShaderTagKey.getByName(keyOrKeyName)._uniqueId : keyOrKeyName._uniqueId\n    ] as T;\n  }\n}\n","/**\n * Color Space.\n */\nexport enum ColorSpace {\n  /** Linear color space. */\n  Linear,\n  /** Gamma color space. */\n  Gamma\n}\n","import { IHardwareRenderer } from \"@galacean/engine-design\";\nimport { Color, Matrix, Vector2, Vector3, Vector4 } from \"@galacean/engine-math\";\nimport { Engine } from \"../Engine\";\nimport { ColorSpace } from \"../enums/ColorSpace\";\nimport { Texture } from \"../texture/Texture\";\nimport { ShaderPropertyValueType } from \"./ShaderData\";\n\n/**\n * Shader uniform。\n * @internal\n */\nexport class ShaderUniform {\n  name: string;\n  propertyId: number;\n  location: WebGLUniformLocation;\n  applyFunc: (shaderUniform: ShaderUniform, value: ShaderPropertyValueType) => void;\n  cacheValue: number | Vector2 | Vector3 | Vector4;\n  textureIndex: GLenum | GLenum[];\n  textureDefault: Texture | Texture[];\n  textureUseCompareMode: boolean = false;\n\n  private _rhi: IHardwareRenderer;\n  private _gl: WebGLRenderingContext;\n  private _colorSpace: ColorSpace;\n\n  constructor(engine: Engine) {\n    const rhi = engine._hardwareRenderer;\n    this._rhi = rhi;\n    this._gl = rhi.gl;\n    this._colorSpace = engine.settings.colorSpace;\n  }\n\n  upload1f(shaderUniform: ShaderUniform, value: number): void {\n    if (this.cacheValue !== value) {\n      this._gl.uniform1f(shaderUniform.location, value);\n      this.cacheValue = value;\n    }\n  }\n\n  upload1fv(shaderUniform: ShaderUniform, value: Float32Array): void {\n    this._gl.uniform1fv(shaderUniform.location, value);\n  }\n\n  upload2f(shaderUniform: ShaderUniform, value: Vector2 | Vector3 | Vector4 | Color): void {\n    const cacheValue = <Vector2>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (cacheValue.x !== (<Color>value).r || cacheValue.y !== (<Color>value).g) {\n        if (this._colorSpace === ColorSpace.Linear) {\n          this._gl.uniform2f(\n            shaderUniform.location,\n            Color.gammaToLinearSpace((<Color>value).r),\n            Color.gammaToLinearSpace((<Color>value).g)\n          );\n        } else {\n          this._gl.uniform2f(shaderUniform.location, (<Color>value).r, (<Color>value).g);\n        }\n        cacheValue.x = (<Color>value).r;\n        cacheValue.y = (<Color>value).g;\n      }\n    } else {\n      if (cacheValue.x !== (<Vector2>value).x || cacheValue.y !== (<Vector2>value).y) {\n        this._gl.uniform2f(shaderUniform.location, (<Vector2>value).x, (<Vector2>value).y);\n        cacheValue.x = (<Vector2>value).x;\n        cacheValue.y = (<Vector2>value).y;\n      }\n    }\n  }\n\n  upload2fv(shaderUniform: ShaderUniform, value: Float32Array): void {\n    this._gl.uniform2fv(shaderUniform.location, value);\n  }\n\n  upload3f(shaderUniform: ShaderUniform, value: Vector3 | Vector4 | Color): void {\n    const cacheValue = <Vector3>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (cacheValue.x !== (<Color>value).r || cacheValue.y !== (<Color>value).g || cacheValue.z !== (<Color>value).b) {\n        if (this._colorSpace === ColorSpace.Linear) {\n          this._gl.uniform3f(\n            shaderUniform.location,\n            Color.gammaToLinearSpace((<Color>value).r),\n            Color.gammaToLinearSpace((<Color>value).g),\n            Color.gammaToLinearSpace((<Color>value).b)\n          );\n        } else {\n          this._gl.uniform3f(shaderUniform.location, (<Color>value).r, (<Color>value).g, (<Color>value).b);\n        }\n        cacheValue.x = (<Color>value).r;\n        cacheValue.y = (<Color>value).g;\n        cacheValue.z = (<Color>value).b;\n      }\n    } else {\n      if (\n        cacheValue.x !== (<Vector3>value).x ||\n        cacheValue.y !== (<Vector3>value).y ||\n        cacheValue.z !== (<Vector3>value).z\n      ) {\n        this._gl.uniform3f(shaderUniform.location, (<Vector3>value).x, (<Vector3>value).y, (<Vector3>value).z);\n        cacheValue.x = (<Vector3>value).x;\n        cacheValue.y = (<Vector3>value).y;\n        cacheValue.z = (<Vector3>value).z;\n      }\n    }\n  }\n\n  upload3fv(shaderUniform: ShaderUniform, value: Float32Array): void {\n    this._gl.uniform3fv(shaderUniform.location, value);\n  }\n\n  upload4f(shaderUniform: ShaderUniform, value: Vector4 | Color): void {\n    const cacheValue = <Vector4>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (\n        cacheValue.x !== (<Color>value).r ||\n        cacheValue.y !== (<Color>value).g ||\n        cacheValue.z !== (<Color>value).b ||\n        cacheValue.w !== (<Color>value).a\n      ) {\n        if (this._colorSpace === ColorSpace.Linear) {\n          this._gl.uniform4f(\n            shaderUniform.location,\n            Color.gammaToLinearSpace((<Color>value).r),\n            Color.gammaToLinearSpace((<Color>value).g),\n            Color.gammaToLinearSpace((<Color>value).b),\n            (<Color>value).a\n          );\n        } else {\n          this._gl.uniform4f(\n            shaderUniform.location,\n            (<Color>value).r,\n            (<Color>value).g,\n            (<Color>value).b,\n            (<Color>value).a\n          );\n        }\n        cacheValue.x = (<Color>value).r;\n        cacheValue.y = (<Color>value).g;\n        cacheValue.z = (<Color>value).b;\n        cacheValue.w = (<Color>value).a;\n      }\n    } else {\n      if (\n        cacheValue.x !== (<Vector4>value).x ||\n        cacheValue.y !== (<Vector4>value).y ||\n        cacheValue.z !== (<Vector4>value).z ||\n        cacheValue.w !== (<Vector4>value).w\n      ) {\n        this._gl.uniform4f(\n          shaderUniform.location,\n          (<Vector4>value).x,\n          (<Vector4>value).y,\n          (<Vector4>value).z,\n          (<Vector4>value).w\n        );\n        cacheValue.x = (<Vector4>value).x;\n        cacheValue.y = (<Vector4>value).y;\n        cacheValue.z = (<Vector4>value).z;\n        cacheValue.w = (<Vector4>value).w;\n      }\n    }\n  }\n\n  upload4fv(shaderUniform: ShaderUniform, value: Float32Array): void {\n    this._gl.uniform4fv(shaderUniform.location, value);\n  }\n\n  upload1i(shaderUniform: ShaderUniform, value: number): void {\n    if (this.cacheValue !== value) {\n      this._gl.uniform1i(shaderUniform.location, value);\n      this.cacheValue = value;\n    }\n  }\n\n  upload1iv(shaderUniform: ShaderUniform, value: Int32Array): void {\n    this._gl.uniform1iv(shaderUniform.location, value);\n  }\n\n  upload2i(shaderUniform: ShaderUniform, value: Vector2 | Vector3 | Vector4 | Color): void {\n    const cacheValue = <Vector2>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (cacheValue.x !== (<Color>value).r || cacheValue.y !== (<Color>value).g) {\n        this._gl.uniform2i(shaderUniform.location, (<Color>value).r, (<Color>value).g);\n        cacheValue.x = (<Color>value).r;\n        cacheValue.y = (<Color>value).g;\n      }\n    } else {\n      if (cacheValue.x !== (<Vector2>value).x || cacheValue.y !== (<Vector2>value).y) {\n        this._gl.uniform2i(shaderUniform.location, (<Vector2>value).x, (<Vector2>value).y);\n        cacheValue.x = (<Vector2>value).x;\n        cacheValue.y = (<Vector2>value).y;\n      }\n    }\n  }\n\n  upload2iv(shaderUniform: ShaderUniform, value: Int32Array): void {\n    this._gl.uniform2iv(shaderUniform.location, value);\n  }\n\n  upload3i(shaderUniform: ShaderUniform, value: Vector3 | Vector4 | Color): void {\n    const cacheValue = <Vector3>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (cacheValue.x !== (<Color>value).r || cacheValue.y !== (<Color>value).g || cacheValue.z !== (<Color>value).b) {\n        this._gl.uniform3i(shaderUniform.location, (<Color>value).r, (<Color>value).g, (<Color>value).b);\n        cacheValue.x = (<Color>value).r;\n        cacheValue.y = (<Color>value).g;\n        cacheValue.z = (<Color>value).b;\n      }\n    } else {\n      if (\n        cacheValue.x !== (<Vector3>value).x ||\n        cacheValue.y !== (<Vector3>value).y ||\n        cacheValue.z !== (<Vector3>value).z\n      ) {\n        this._gl.uniform3i(shaderUniform.location, (<Vector3>value).x, (<Vector3>value).y, (<Vector3>value).z);\n        cacheValue.x = (<Vector3>value).x;\n        cacheValue.y = (<Vector3>value).y;\n        cacheValue.z = (<Vector3>value).z;\n      }\n    }\n  }\n  upload3iv(shaderUniform: ShaderUniform, value: Int32Array): void {\n    this._gl.uniform3iv(shaderUniform.location, value);\n  }\n  upload4i(shaderUniform: ShaderUniform, value: Vector4 | Color): void {\n    const cacheValue = <Vector4>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (\n        cacheValue.x !== (<Color>value).r ||\n        cacheValue.y !== (<Color>value).g ||\n        cacheValue.z !== (<Color>value).b ||\n        cacheValue.w !== (<Color>value).a\n      ) {\n        this._gl.uniform4i(\n          shaderUniform.location,\n          (<Color>value).r,\n          (<Color>value).g,\n          (<Color>value).b,\n          (<Color>value).a\n        );\n        cacheValue.x = (<Color>value).r;\n        cacheValue.y = (<Color>value).g;\n        cacheValue.z = (<Color>value).b;\n        cacheValue.w = (<Color>value).a;\n      }\n    } else {\n      if (\n        cacheValue.x !== (<Vector4>value).x ||\n        cacheValue.y !== (<Vector4>value).y ||\n        cacheValue.z !== (<Vector4>value).z ||\n        cacheValue.w !== (<Vector4>value).w\n      ) {\n        this._gl.uniform4i(\n          shaderUniform.location,\n          (<Vector4>value).x,\n          (<Vector4>value).y,\n          (<Vector4>value).z,\n          (<Vector4>value).w\n        );\n        cacheValue.x = (<Vector4>value).x;\n        cacheValue.y = (<Vector4>value).y;\n        cacheValue.z = (<Vector4>value).z;\n        cacheValue.w = (<Vector4>value).w;\n      }\n    }\n  }\n\n  upload4iv(shaderUniform: ShaderUniform, value: Int32Array): void {\n    this._gl.uniform4iv(shaderUniform.location, value);\n  }\n\n  uploadMat4(shaderUniform: ShaderUniform, value: Matrix): void {\n    this._gl.uniformMatrix4fv(shaderUniform.location, false, value.elements);\n  }\n\n  uploadMat4v(shaderUniform: ShaderUniform, value: Float32Array): void {\n    this._gl.uniformMatrix4fv(shaderUniform.location, false, value);\n  }\n\n  uploadTexture(shaderUniform: ShaderUniform, value: Texture): void {\n    const rhi = this._rhi;\n    rhi.activeTexture(shaderUniform.textureIndex as GLenum);\n    rhi.bindTexture(value._platformTexture);\n\n    value._setUseDepthCompareMode(shaderUniform.textureUseCompareMode);\n  }\n\n  uploadTextureArray(shaderUniform: ShaderUniform, value: Texture[]): void {\n    const rhi = this._rhi;\n    const textureIndices = shaderUniform.textureIndex as GLenum[];\n    for (let i = 0; i < value.length; i++) {\n      const texture = value[i];\n      rhi.activeTexture(textureIndices[i]);\n      rhi.bindTexture(texture._platformTexture);\n      texture._setUseDepthCompareMode(shaderUniform.textureUseCompareMode);\n    }\n  }\n}\n","import { ShaderUniform } from \"./ShaderUniform\";\n\n/**\n * Shader uniform block.\n * @internal\n */\nexport class ShaderUniformBlock {\n  readonly constUniforms: ShaderUniform[] = [];\n  readonly textureUniforms: ShaderUniform[] = [];\n}\n","/**\n * Shader data grouping.\n */\nexport enum ShaderDataGroup {\n  /** Scene group. */\n  Scene,\n  /** Camera group. */\n  Camera,\n  /** Renderer group. */\n  Renderer,\n  /** Material group. */\n  Material,\n  /** Render element group. */\n  RenderElement\n}\n","import { IHardwareRenderer } from \"@galacean/engine-design\";\nimport { Vector2, Vector3, Vector4 } from \"@galacean/engine-math\";\nimport { Engine } from \"../Engine\";\nimport { Logger } from \"../base/Logger\";\nimport { Texture } from \"../texture\";\nimport { ShaderData } from \"./ShaderData\";\nimport { ShaderProperty } from \"./ShaderProperty\";\nimport { ShaderUniform } from \"./ShaderUniform\";\nimport { ShaderUniformBlock } from \"./ShaderUniformBlock\";\nimport { ShaderDataGroup } from \"./enums/ShaderDataGroup\";\n\n/**\n * Shader program, corresponding to the GPU shader program.\n * @internal\n */\nexport class ShaderProgram {\n  private static _counter: number = 0;\n\n  private static _addLineNum(str: string) {\n    const lines = str.split(\"\\n\");\n    const limitLength = (lines.length + 1).toString().length + 6;\n    let prefix;\n    return lines\n      .map((line, index) => {\n        prefix = `0:${index + 1}`;\n        if (prefix.length >= limitLength) return prefix.substring(0, limitLength) + line;\n\n        for (let i = 0; i < limitLength - prefix.length; i++) prefix += \" \";\n\n        return prefix + line;\n      })\n      .join(\"\\n\");\n  }\n\n  id: number;\n\n  readonly sceneUniformBlock: ShaderUniformBlock = new ShaderUniformBlock();\n  readonly cameraUniformBlock: ShaderUniformBlock = new ShaderUniformBlock();\n  readonly rendererUniformBlock: ShaderUniformBlock = new ShaderUniformBlock();\n  readonly materialUniformBlock: ShaderUniformBlock = new ShaderUniformBlock();\n  readonly renderElementUniformBlock: ShaderUniformBlock = new ShaderUniformBlock();\n  readonly otherUniformBlock: ShaderUniformBlock = new ShaderUniformBlock();\n\n  /** @internal */\n  _uploadRenderCount: number = -1;\n  /** @internal */\n  _uploadSceneId: number = -1;\n  /** @internal */\n  _uploadCameraId: number = -1;\n  /** @internal */\n  _uploadRendererId: number = -1;\n  /** @internal */\n  _uploadMaterialId: number = -1;\n\n  attributeLocation: Record<string, GLint> = Object.create(null);\n\n  // @todo: move to RHI.\n  private _isValid: boolean;\n  private _engine: Engine;\n  private _gl: WebGLRenderingContext;\n  private _glProgram: WebGLProgram;\n  private _activeTextureUint: number = 0;\n\n  /**\n   * Whether this shader program is valid.\n   */\n  get isValid(): boolean {\n    return this._isValid;\n  }\n\n  constructor(engine: Engine, vertexSource: string, fragmentSource: string) {\n    this._engine = engine;\n    this._gl = engine._hardwareRenderer.gl;\n    this._glProgram = this._createProgram(vertexSource, fragmentSource);\n\n    if (this._glProgram) {\n      this._isValid = true;\n      this._recordLocation();\n    } else {\n      this._isValid = false;\n    }\n\n    this.id = ShaderProgram._counter++;\n  }\n\n  /**\n   * Upload all shader data in shader uniform block.\n   * @param uniformBlock - shader Uniform block\n   * @param shaderData - shader data\n   */\n  uploadAll(uniformBlock: ShaderUniformBlock, shaderData: ShaderData): void {\n    this.uploadUniforms(uniformBlock, shaderData);\n    this.uploadTextures(uniformBlock, shaderData);\n  }\n\n  /**\n   * Upload constant shader data in shader uniform block.\n   * @param uniformBlock - shader Uniform block\n   * @param shaderData - shader data\n   */\n  uploadUniforms(uniformBlock: ShaderUniformBlock, shaderData: ShaderData): void {\n    const propertyValueMap = shaderData._propertyValueMap;\n    const constUniforms = uniformBlock.constUniforms;\n\n    for (let i = 0, n = constUniforms.length; i < n; i++) {\n      const uniform = constUniforms[i];\n      const data = propertyValueMap[uniform.propertyId];\n      data != null && uniform.applyFunc(uniform, data);\n    }\n  }\n\n  /**\n   * Upload texture shader data in shader uniform block.\n   * @param uniformBlock - shader Uniform block\n   * @param shaderData - shader data\n   */\n  uploadTextures(uniformBlock: ShaderUniformBlock, shaderData: ShaderData): void {\n    const propertyValueMap = shaderData._propertyValueMap;\n    const textureUniforms = uniformBlock.textureUniforms;\n    // textureUniforms property maybe null if ShaderUniformBlock not contain any texture.\n    if (textureUniforms) {\n      for (let i = 0, n = textureUniforms.length; i < n; i++) {\n        const uniform = textureUniforms[i];\n        const texture = <Texture>propertyValueMap[uniform.propertyId];\n        if (texture && !texture.destroyed) {\n          uniform.applyFunc(uniform, texture);\n        } else {\n          uniform.applyFunc(uniform, uniform.textureDefault);\n        }\n      }\n    }\n  }\n\n  /**\n   * Upload ungroup texture shader data in shader uniform block.\n   */\n  uploadUnGroupTextures(): void {\n    const textureUniforms = this.otherUniformBlock.textureUniforms;\n    // textureUniforms property maybe null if ShaderUniformBlock not contain any texture.\n    if (textureUniforms) {\n      for (let i = 0, n = textureUniforms.length; i < n; i++) {\n        const uniform = textureUniforms[i];\n        uniform.applyFunc(uniform, uniform.textureDefault);\n      }\n    }\n  }\n\n  /**\n   * Grouping other data.\n   */\n  groupingOtherUniformBlock(): void {\n    const { constUniforms, textureUniforms } = this.otherUniformBlock;\n    constUniforms.length > 0 && this._groupingSubOtherUniforms(constUniforms, false);\n    textureUniforms.length > 0 && this._groupingSubOtherUniforms(textureUniforms, true);\n  }\n\n  /**\n   * Bind this shader program.\n   * @returns Whether the shader program is switched.\n   */\n  bind(): boolean {\n    const rhi: IHardwareRenderer = this._engine._hardwareRenderer;\n    if (rhi._currentBindShaderProgram !== this) {\n      this._gl.useProgram(this._glProgram);\n      rhi._currentBindShaderProgram = this;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Destroy this shader program.\n   */\n  destroy(): void {\n    const gl = this._gl;\n    this._glProgram && gl.deleteProgram(this._glProgram);\n  }\n\n  private _groupingSubOtherUniforms(uniforms: ShaderUniform[], isTexture: boolean): void {\n    for (let i = uniforms.length - 1; i >= 0; i--) {\n      const uniform = uniforms[i];\n      const group = ShaderProperty._getShaderPropertyGroup(uniform.name);\n      if (group !== undefined) {\n        uniforms.splice(uniforms.indexOf(uniform), 1);\n        this._groupingUniform(uniform, group, isTexture);\n      }\n    }\n  }\n\n  private _groupingUniform(uniform: ShaderUniform, group: ShaderDataGroup, isTexture: boolean): void {\n    switch (group) {\n      case ShaderDataGroup.Scene:\n        if (isTexture) {\n          this.sceneUniformBlock.textureUniforms.push(uniform);\n        } else {\n          this.sceneUniformBlock.constUniforms.push(uniform);\n        }\n        break;\n      case ShaderDataGroup.Camera:\n        if (isTexture) {\n          this.cameraUniformBlock.textureUniforms.push(uniform);\n        } else {\n          this.cameraUniformBlock.constUniforms.push(uniform);\n        }\n        break;\n      case ShaderDataGroup.Renderer:\n        if (isTexture) {\n          this.rendererUniformBlock.textureUniforms.push(uniform);\n        } else {\n          this.rendererUniformBlock.constUniforms.push(uniform);\n        }\n        break;\n      case ShaderDataGroup.Material:\n        if (isTexture) {\n          this.materialUniformBlock.textureUniforms.push(uniform);\n        } else {\n          this.materialUniformBlock.constUniforms.push(uniform);\n        }\n        break;\n      case ShaderDataGroup.RenderElement:\n        if (isTexture) {\n          this.renderElementUniformBlock.textureUniforms.push(uniform);\n        } else {\n          this.renderElementUniformBlock.constUniforms.push(uniform);\n        }\n        break;\n      default:\n        if (isTexture) {\n          this.otherUniformBlock.textureUniforms.push(uniform);\n        } else {\n          this.otherUniformBlock.constUniforms.push(uniform);\n        }\n    }\n  }\n\n  /**\n   * Init and link program with shader.\n   */\n  private _createProgram(vertexSource: string, fragmentSource: string): WebGLProgram | null {\n    const gl = this._gl;\n\n    // Create and compile shader\n    const vertexShader = this._createShader(gl.VERTEX_SHADER, vertexSource);\n    if (!vertexShader) {\n      return null;\n    }\n\n    const fragmentShader = this._createShader(gl.FRAGMENT_SHADER, fragmentSource);\n    if (!fragmentShader) {\n      return null;\n    }\n\n    // Create program and link shader\n    const program = gl.createProgram();\n    if (!program) {\n      console.warn(\"Context lost while create program.\");\n      return null;\n    }\n\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    gl.validateProgram(program);\n\n    gl.deleteShader(vertexShader);\n    gl.deleteShader(fragmentShader);\n\n    if (Logger.isEnabled && !gl.getProgramParameter(program, gl.LINK_STATUS) && !gl.isContextLost()) {\n      Logger.error(\n        `Could not link WebGL program\\n\\n` +\n          `Shader error: ${gl.getError()}\\n\\n` +\n          `Validate status: ${gl.getProgramParameter(program, gl.VALIDATE_STATUS)}\\n\\n` +\n          `Program information log: ${gl.getProgramInfoLog(program)}`\n      );\n      gl.deleteProgram(program);\n      return null;\n    }\n\n    return program;\n  }\n\n  private _createShader(shaderType: number, shaderSource: string): WebGLShader | null {\n    const gl = this._gl;\n    const shader = gl.createShader(shaderType);\n\n    if (!shader) {\n      console.warn(\"Context lost while create shader.\");\n      return null;\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n\n    if (Logger.isEnabled && !gl.getShaderParameter(shader, gl.COMPILE_STATUS) && !gl.isContextLost()) {\n      console.warn(\n        `Could not compile WebGL shader\\n\\n` +\n          `Shader type: ${shaderType == gl.VERTEX_SHADER ? \"vertex\" : \"fragment\"}\\n\\n` +\n          `Shader information log:\\n${gl.getShaderInfoLog(shader)}\\n` +\n          `Shader source:\\n${ShaderProgram._addLineNum(shaderSource)}`\n      );\n      gl.deleteShader(shader);\n      return null;\n    }\n\n    return shader;\n  }\n\n  /**\n   * record the location of uniform/attribute.\n   */\n  private _recordLocation(): void {\n    const gl = this._gl;\n    const program = this._glProgram;\n    const uniformInfos = this._getUniformInfos();\n    const attributeInfos = this._getAttributeInfos();\n    const basicResources = this._engine._basicResources;\n\n    uniformInfos.forEach(({ name, size, type }) => {\n      const shaderUniform = new ShaderUniform(this._engine);\n      let isArray = false;\n      let isTexture = false;\n\n      if (name.indexOf(\"[0]\") > 0) {\n        name = name.substr(0, name.length - 3);\n        isArray = true;\n      }\n\n      const location = gl.getUniformLocation(program, name);\n      shaderUniform.name = name;\n      shaderUniform.propertyId = ShaderProperty.getByName(name)._uniqueId;\n      shaderUniform.location = location;\n\n      switch (type) {\n        case gl.FLOAT:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload1fv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload1f;\n            shaderUniform.cacheValue = 0;\n          }\n          break;\n        case gl.FLOAT_VEC2:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload2fv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload2f;\n            shaderUniform.cacheValue = new Vector2(0, 0);\n          }\n          break;\n        case gl.FLOAT_VEC3:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload3fv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload3f;\n            shaderUniform.cacheValue = new Vector3(0, 0, 0);\n          }\n          break;\n        case gl.FLOAT_VEC4:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload4fv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload4f;\n            shaderUniform.cacheValue = new Vector4(0, 0, 0, 0);\n          }\n          break;\n        case gl.BOOL:\n        case gl.INT:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload1iv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload1i;\n            shaderUniform.cacheValue = 0;\n          }\n          break;\n        case gl.BOOL_VEC2:\n        case gl.INT_VEC2:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload2iv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload2i;\n            shaderUniform.cacheValue = new Vector2(0, 0);\n          }\n          break;\n        case gl.BOOL_VEC3:\n        case gl.INT_VEC3:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload3iv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload3i;\n            shaderUniform.cacheValue = new Vector3(0, 0, 0);\n          }\n          break;\n        case gl.BOOL_VEC4:\n        case gl.INT_VEC4:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload4iv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload4i;\n            shaderUniform.cacheValue = new Vector4(0, 0, 0);\n          }\n          break;\n        case gl.FLOAT_MAT4:\n          shaderUniform.applyFunc = isArray ? shaderUniform.uploadMat4v : shaderUniform.uploadMat4;\n          break;\n        case gl.SAMPLER_2D:\n        case gl.SAMPLER_CUBE:\n        case (<WebGL2RenderingContext>gl).UNSIGNED_INT_SAMPLER_2D:\n        case (<WebGL2RenderingContext>gl).SAMPLER_2D_ARRAY:\n        case (<WebGL2RenderingContext>gl).SAMPLER_2D_SHADOW:\n          let defaultTexture: Texture;\n          switch (type) {\n            case gl.SAMPLER_2D:\n              defaultTexture = basicResources.whiteTexture2D;\n              break;\n            case gl.SAMPLER_CUBE:\n              defaultTexture = basicResources.whiteTextureCube;\n              break;\n            case (<WebGL2RenderingContext>gl).UNSIGNED_INT_SAMPLER_2D:\n              defaultTexture = basicResources.uintWhiteTexture2D;\n              break;\n            case (<WebGL2RenderingContext>gl).SAMPLER_2D_ARRAY:\n              defaultTexture = basicResources.whiteTexture2DArray;\n              break;\n            case (<WebGL2RenderingContext>gl).SAMPLER_2D_SHADOW:\n              defaultTexture = this._engine._depthTexture2D;\n              shaderUniform.textureUseCompareMode = true;\n              break;\n          }\n\n          isTexture = true;\n          if (isArray) {\n            const defaultTextures = new Array<Texture>(size);\n            const textureIndices = new Int32Array(size);\n            const glTextureIndices = new Array<number>(size);\n\n            for (let i = 0; i < size; i++) {\n              defaultTextures[i] = defaultTexture;\n              textureIndices[i] = this._activeTextureUint;\n              glTextureIndices[i] = gl.TEXTURE0 + this._activeTextureUint++;\n            }\n            shaderUniform.textureDefault = defaultTextures;\n            shaderUniform.textureIndex = glTextureIndices;\n            shaderUniform.applyFunc = shaderUniform.uploadTextureArray;\n            this.bind();\n            gl.uniform1iv(location, textureIndices);\n          } else {\n            const glTextureIndex = gl.TEXTURE0 + this._activeTextureUint;\n            shaderUniform.textureDefault = defaultTexture;\n            shaderUniform.textureIndex = glTextureIndex;\n            shaderUniform.applyFunc = shaderUniform.uploadTexture;\n            this.bind();\n            gl.uniform1i(location, this._activeTextureUint++);\n          }\n          break;\n        default:\n          throw new Error(\"Unsupported uniform type\");\n      }\n\n      const group = ShaderProperty._getShaderPropertyGroup(name);\n      this._groupingUniform(shaderUniform, group, isTexture);\n    });\n\n    attributeInfos.forEach(({ name }) => {\n      this.attributeLocation[name] = gl.getAttribLocation(program, name);\n    });\n  }\n\n  private _getUniformInfos(): WebGLActiveInfo[] {\n    const gl = this._gl;\n    const program = this._glProgram;\n    const uniformCount = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n    const uniformInfos = new Array<WebGLActiveInfo>(uniformCount);\n    for (let i = 0; i < uniformCount; ++i) {\n      const info = gl.getActiveUniform(program, i);\n      uniformInfos[i] = info;\n    }\n\n    return uniformInfos;\n  }\n\n  private _getAttributeInfos(): WebGLActiveInfo[] {\n    const gl = this._gl;\n    const program = this._glProgram;\n    const attributeInfos = new Array<WebGLActiveInfo>();\n\n    const attributeCount = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    for (let i = 0; i < attributeCount; ++i) {\n      const info = gl.getActiveAttrib(program, i);\n      attributeInfos[i] = info;\n    }\n\n    return attributeInfos;\n  }\n}\n","/**\n * @internal\n * Shader pass type\n */\nexport enum ShaderType {\n  /** init by glsl */\n  Canonical,\n  /** init by shader-lab */\n  ShaderLab\n}\n","import { Shader, ShaderPlatformTarget } from \".\";\nimport { Engine } from \"../Engine\";\nimport { PipelineStage } from \"../RenderPipeline/enums/PipelineStage\";\nimport { Logger } from \"../base\";\nimport { GLCapabilityType } from \"../base/Constant\";\nimport { ShaderFactory } from \"../shaderlib\";\nimport { ShaderMacro } from \"./ShaderMacro\";\nimport { ShaderMacroCollection } from \"./ShaderMacroCollection\";\nimport { ShaderPart } from \"./ShaderPart\";\nimport { ShaderProgram } from \"./ShaderProgram\";\nimport { ShaderProgramPool } from \"./ShaderProgramPool\";\nimport { ShaderProperty } from \"./ShaderProperty\";\nimport { ShaderType } from \"./enums/ShaderType\";\nimport { RenderState } from \"./state/RenderState\";\n\n/**\n * Shader pass containing vertex and fragment source.\n */\nexport class ShaderPass extends ShaderPart {\n  private static _shaderPassCounter: number = 0;\n  /** @internal */\n  static _shaderRootPath = \"shaders://root/\";\n\n  /** @internal */\n  _shaderPassId: number = 0;\n\n  /**\n   * @internal\n   * @remarks If undefined, the blend state of the material will be used ( deprecate mode ).\n   */\n  _renderState: RenderState;\n  /** @internal */\n  _renderStateDataMap: Record<number, ShaderProperty> = {};\n  /** @internal */\n  _shaderProgramPools: ShaderProgramPool[] = [];\n\n  private _vertexSource: string;\n  private _fragmentSource: string;\n\n  private readonly _type: ShaderType;\n  private readonly _shaderLabSource: string;\n  private readonly _vertexEntry: string;\n  private readonly _fragmentEntry: string;\n  /** @internal */\n  _path = \"\";\n\n  private _platformMacros: string[] = [];\n\n  /**\n   * @internal\n   */\n  constructor(\n    name: string,\n    shaderLabSource: string,\n    vertexEntry: string,\n    fragmentEntry: string,\n    tags?: Record<string, number | string | boolean>\n  );\n\n  /**\n   * Create a shader pass.\n   * @param name - Shader pass name\n   * @param vertexSource - Vertex shader source\n   * @param fragmentSource - Fragment shader source\n   * @param tags - Tags\n   */\n  constructor(\n    name: string,\n    vertexSource: string,\n    fragmentSource: string,\n    tags?: Record<string, number | string | boolean>\n  );\n\n  /**\n   * Create a shader pass.\n   * @param vertexSource - Vertex shader source\n   * @param fragmentSource - Fragment shader source\n   * @param tags - Tags\n   */\n  constructor(vertexSource: string, fragmentSource: string, tags?: Record<string, number | string | boolean>);\n\n  constructor(\n    nameOrVertexSource: string,\n    vertexSourceOrFragmentSourceOrCode?: string | Record<string, number | string | boolean>,\n    fragmentSourceOrTagsOrVertexEntry?: string | Record<string, number | string | boolean>,\n    fragmentEntryOrTags?: string | Record<string, number | string | boolean>,\n    tags?: Record<string, number | string | boolean>\n  ) {\n    super();\n    this._shaderPassId = ShaderPass._shaderPassCounter++;\n    this._type = ShaderType.Canonical;\n\n    if (typeof fragmentEntryOrTags === \"string\") {\n      this._name = nameOrVertexSource;\n      this._shaderLabSource = vertexSourceOrFragmentSourceOrCode as string;\n      this._vertexEntry = fragmentSourceOrTagsOrVertexEntry as string;\n      this._fragmentEntry = fragmentEntryOrTags;\n      tags = {\n        pipelineStage: PipelineStage.Forward,\n        ...tags\n      };\n      this._type = ShaderType.ShaderLab;\n    } else if (typeof fragmentSourceOrTagsOrVertexEntry === \"string\") {\n      this._name = nameOrVertexSource;\n      this._vertexSource = vertexSourceOrFragmentSourceOrCode as string;\n      this._fragmentSource = fragmentSourceOrTagsOrVertexEntry;\n      tags = fragmentEntryOrTags ?? {\n        pipelineStage: PipelineStage.Forward\n      };\n    } else {\n      this._name = \"Default\";\n      this._vertexSource = nameOrVertexSource;\n      this._fragmentSource = vertexSourceOrFragmentSourceOrCode as string;\n      tags = fragmentSourceOrTagsOrVertexEntry ?? {\n        pipelineStage: PipelineStage.Forward\n      };\n    }\n    for (const key in tags) {\n      this.setTag(key, tags[key]);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _getShaderProgram(engine: Engine, macroCollection: ShaderMacroCollection): ShaderProgram {\n    const shaderProgramPool = engine._getShaderProgramPool(this);\n    let shaderProgram = shaderProgramPool.get(macroCollection);\n    if (shaderProgram) {\n      return shaderProgram;\n    }\n\n    if (this._type === ShaderType.Canonical) {\n      shaderProgram = this._getCanonicalShaderProgram(engine, macroCollection);\n    } else {\n      shaderProgram = this._compileShaderProgram(engine, macroCollection, this._vertexEntry, this._fragmentEntry);\n    }\n\n    shaderProgramPool.cache(shaderProgram);\n    return shaderProgram;\n  }\n\n  /**\n   * @internal\n   */\n  _destroy(): void {\n    const shaderProgramPools = this._shaderProgramPools;\n    for (let i = 0, n = shaderProgramPools.length; i < n; i++) {\n      const shaderProgramPool = shaderProgramPools[i];\n      shaderProgramPool._destroy();\n      delete shaderProgramPool.engine._shaderProgramPools[this._shaderPassId];\n    }\n    // Clear array storing multiple engine shader program pools\n    shaderProgramPools.length = 0;\n  }\n\n  /**\n   * Shader Lab compilation\n   */\n  private _compileShaderProgram(\n    engine: Engine,\n    macroCollection: ShaderMacroCollection,\n    vertexEntry: string,\n    fragmentEntry: string\n  ) {\n    const { _path: path, _platformMacros: platformMacros } = this;\n\n    const isWebGL2 = engine._hardwareRenderer.isWebGL2;\n    const macros = new Array<ShaderMacro>();\n    ShaderMacro._getMacrosElements(macroCollection, macros);\n\n    platformMacros.length = 0;\n    if (engine._hardwareRenderer.canIUse(GLCapabilityType.shaderTextureLod)) {\n      platformMacros.push(\"HAS_TEX_LOD\");\n    }\n    if (engine._hardwareRenderer.canIUse(GLCapabilityType.standardDerivatives)) {\n      platformMacros.push(\"HAS_DERIVATIVES\");\n    }\n    if (isWebGL2) {\n      platformMacros.push(\"GRAPHICS_API_WEBGL2\");\n    } else {\n      platformMacros.push(\"GRAPHICS_API_WEBGL1\");\n    }\n\n    const start = performance.now();\n    const shaderProgramSource = Shader._shaderLab._parseShaderPass(\n      this._shaderLabSource,\n      vertexEntry,\n      fragmentEntry,\n      macros,\n      isWebGL2 ? ShaderPlatformTarget.GLES300 : ShaderPlatformTarget.GLES100,\n      platformMacros,\n      new URL(path, ShaderPass._shaderRootPath).href\n    );\n    Logger.info(`[ShaderLab compilation] cost time: ${performance.now() - start}ms`);\n\n    if (shaderProgramSource) {\n      return new ShaderProgram(engine, shaderProgramSource.vertex, shaderProgramSource.fragment);\n    } else {\n      return new ShaderProgram(engine, \"\", \"\");\n    }\n  }\n\n  // TODO: remove it after migrate all shader to `ShaderLab`.\n  private _getCanonicalShaderProgram(engine: Engine, macroCollection: ShaderMacroCollection): ShaderProgram {\n    const isWebGL2: boolean = engine._hardwareRenderer.isWebGL2;\n    const macroNameList = new Array<ShaderMacro>();\n    ShaderMacro._getMacrosElements(macroCollection, macroNameList);\n    const macroNameStr = ShaderFactory.parseCustomMacros(macroNameList);\n    const versionStr = isWebGL2 ? \"#version 300 es\" : \"#version 100\";\n    const graphicAPI = isWebGL2 ? \"#define GRAPHICS_API_WEBGL2\" : \"#define GRAPHICS_API_WEBGL1\";\n    let precisionStr = `\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n      precision highp int;\n    #else\n      precision mediump float;\n      precision mediump int;\n    #endif\n    `;\n\n    if (engine._hardwareRenderer.canIUse(GLCapabilityType.shaderTextureLod)) {\n      precisionStr += \"#define HAS_TEX_LOD\\n\";\n    }\n    if (engine._hardwareRenderer.canIUse(GLCapabilityType.standardDerivatives)) {\n      precisionStr += \"#define HAS_DERIVATIVES\\n\";\n    }\n\n    let vertexSource =\n      ` ${versionStr}\n        ${graphicAPI}\n        ${macroNameStr}\n      ` + ShaderFactory.parseIncludes(this._vertexSource);\n    let fragmentSource =\n      ` ${versionStr}\n        ${graphicAPI}\n        ${isWebGL2 ? \"\" : ShaderFactory._shaderExtension}\n        ${precisionStr}\n        ${macroNameStr}\n      ` + ShaderFactory.parseIncludes(this._fragmentSource);\n\n    if (isWebGL2) {\n      vertexSource = ShaderFactory.convertTo300(vertexSource);\n      fragmentSource = ShaderFactory.convertTo300(fragmentSource, true);\n    }\n\n    const shaderProgram = new ShaderProgram(engine, vertexSource, fragmentSource);\n\n    return shaderProgram;\n  }\n}\n","import { ShaderPart } from \"./ShaderPart\";\nimport { ShaderPass } from \"./ShaderPass\";\n\n/**\n * Sub shader.\n */\nexport class SubShader extends ShaderPart {\n  private _passes: ShaderPass[];\n\n  /**\n   * Sub shader passes.\n   */\n  get passes(): ReadonlyArray<ShaderPass> {\n    return this._passes;\n  }\n\n  /**\n   * Create a sub shader.\n   * @param name - Name of the sub shader\n   * @param passes - Sub shader passes\n   */\n  constructor(name: string, passes: ShaderPass[], tags?: Record<string, number | string | boolean>) {\n    super();\n    this._name = name;\n    const passCount = passes.length;\n    if (passCount < 1) {\n      throw \" count must large than 0.\";\n    }\n    this._passes = passes.slice();\n\n    for (const key in tags) {\n      this.setTag(key, tags[key]);\n    }\n  }\n}\n","import { BlendOperation } from \"../enums/BlendOperation\";\nimport { BlendFactor } from \"../enums/BlendFactor\";\nimport { ColorWriteMask } from \"../enums/ColorWriteMask\";\n\n/**\n * The blend state of the render target.\n */\nexport class RenderTargetBlendState {\n  /** Whether to enable blend. */\n  enabled: boolean = false;\n  /** color (RGB) blend operation. */\n  colorBlendOperation: BlendOperation = BlendOperation.Add;\n  /** alpha (A) blend operation. */\n  alphaBlendOperation: BlendOperation = BlendOperation.Add;\n  /** color blend factor (RGB) for source. */\n  sourceColorBlendFactor: BlendFactor = BlendFactor.One;\n  /** alpha blend factor (A) for source. */\n  sourceAlphaBlendFactor: BlendFactor = BlendFactor.One;\n  /** color blend factor (RGB) for destination. */\n  destinationColorBlendFactor: BlendFactor = BlendFactor.Zero;\n  /** alpha blend factor (A) for destination. */\n  destinationAlphaBlendFactor: BlendFactor = BlendFactor.Zero;\n  /** color mask. */\n  colorWriteMask: ColorWriteMask = ColorWriteMask.All;\n}\n","import { IHardwareRenderer } from \"@galacean/engine-design\";\nimport { Color } from \"@galacean/engine-math\";\nimport { RenderStateElementMap } from \"../../BasicResources\";\nimport { GLCapabilityType } from \"../../base/Constant\";\nimport { deepClone } from \"../../clone/CloneManager\";\nimport { ShaderData } from \"../ShaderData\";\nimport { ShaderProperty } from \"../ShaderProperty\";\nimport { BlendFactor } from \"../enums/BlendFactor\";\nimport { BlendOperation } from \"../enums/BlendOperation\";\nimport { ColorWriteMask } from \"../enums/ColorWriteMask\";\nimport { RenderStateElementKey } from \"../enums/RenderStateElementKey\";\nimport { RenderState } from \"./RenderState\";\nimport { RenderTargetBlendState } from \"./RenderTargetBlendState\";\n\n/**\n * Blend state.\n */\nexport class BlendState {\n  private static _getGLBlendFactor(rhi: IHardwareRenderer, blendFactor: BlendFactor): number {\n    const gl = rhi.gl;\n\n    switch (blendFactor) {\n      case BlendFactor.Zero:\n        return gl.ZERO;\n      case BlendFactor.One:\n        return gl.ONE;\n      case BlendFactor.SourceColor:\n        return gl.SRC_COLOR;\n      case BlendFactor.OneMinusSourceColor:\n        return gl.ONE_MINUS_SRC_COLOR;\n      case BlendFactor.DestinationColor:\n        return gl.DST_COLOR;\n      case BlendFactor.OneMinusDestinationColor:\n        return gl.ONE_MINUS_DST_COLOR;\n      case BlendFactor.SourceAlpha:\n        return gl.SRC_ALPHA;\n      case BlendFactor.OneMinusSourceAlpha:\n        return gl.ONE_MINUS_SRC_ALPHA;\n      case BlendFactor.DestinationAlpha:\n        return gl.DST_ALPHA;\n      case BlendFactor.OneMinusDestinationAlpha:\n        return gl.ONE_MINUS_DST_ALPHA;\n      case BlendFactor.SourceAlphaSaturate:\n        return gl.SRC_ALPHA_SATURATE;\n      case BlendFactor.BlendColor:\n        return gl.CONSTANT_COLOR;\n      case BlendFactor.OneMinusBlendColor:\n        return gl.ONE_MINUS_CONSTANT_COLOR;\n    }\n  }\n\n  private static _getGLBlendOperation(rhi: IHardwareRenderer, blendOperation: BlendOperation): number {\n    const gl = rhi.gl;\n\n    switch (blendOperation) {\n      case BlendOperation.Add:\n        return gl.FUNC_ADD;\n      case BlendOperation.Subtract:\n        return gl.FUNC_SUBTRACT;\n      case BlendOperation.ReverseSubtract:\n        return gl.FUNC_REVERSE_SUBTRACT;\n      case BlendOperation.Min:\n        if (!rhi.canIUse(GLCapabilityType.blendMinMax)) {\n          throw new Error(\"BlendOperation.Min is not supported in this context\");\n        }\n        return gl.MIN; // in webgl1.0 is an extension\n      case BlendOperation.Max:\n        if (!rhi.canIUse(GLCapabilityType.blendMinMax)) {\n          throw new Error(\"BlendOperation.Max is not supported in this context\");\n        }\n        return gl.MAX; // in webgl1.0 is an extension\n    }\n  }\n\n  /** The blend state of the render target. */\n  @deepClone\n  readonly targetBlendState: RenderTargetBlendState = new RenderTargetBlendState();\n  /** Constant blend color. */\n  @deepClone\n  readonly blendColor: Color = new Color(0, 0, 0, 0);\n  /** Whether to use (Alpha-to-Coverage) technology. */\n  alphaToCoverage: boolean = false;\n\n  /**\n   * @internal\n   */\n  _applyShaderDataValue(renderStateDataMap: Record<number, ShaderProperty>, shaderData: ShaderData): void {\n    const blendState = this.targetBlendState;\n\n    const enable0Property = renderStateDataMap[RenderStateElementKey.BlendStateEnabled0];\n    if (enable0Property !== undefined) {\n      const enabled = shaderData.getFloat(enable0Property);\n      blendState.enabled = enabled !== undefined ? !!enabled : false;\n    }\n\n    const colorBlendOperation0Property = renderStateDataMap[RenderStateElementKey.BlendStateColorBlendOperation0];\n    if (colorBlendOperation0Property !== undefined) {\n      blendState.colorBlendOperation = shaderData.getFloat(colorBlendOperation0Property) ?? BlendOperation.Add;\n    }\n\n    const alphaBlendOperation0Property = renderStateDataMap[RenderStateElementKey.BlendStateAlphaBlendOperation0];\n    if (alphaBlendOperation0Property !== undefined) {\n      blendState.alphaBlendOperation = shaderData.getFloat(alphaBlendOperation0Property) ?? BlendOperation.Add;\n    }\n\n    const sourceColorBlendFactor0Property = renderStateDataMap[RenderStateElementKey.BlendStateSourceColorBlendFactor0];\n    if (sourceColorBlendFactor0Property !== undefined) {\n      blendState.sourceColorBlendFactor = shaderData.getFloat(sourceColorBlendFactor0Property) ?? BlendFactor.One;\n    }\n\n    const sourceAlphaBlendFactor0Property = renderStateDataMap[RenderStateElementKey.BlendStateSourceAlphaBlendFactor0];\n    if (sourceAlphaBlendFactor0Property !== undefined) {\n      blendState.sourceAlphaBlendFactor = shaderData.getFloat(sourceAlphaBlendFactor0Property) ?? BlendFactor.One;\n    }\n\n    const destinationColorBlendFactor0Property =\n      renderStateDataMap[RenderStateElementKey.BlendStateDestinationColorBlendFactor0];\n    if (destinationColorBlendFactor0Property !== undefined) {\n      blendState.destinationColorBlendFactor =\n        shaderData.getFloat(destinationColorBlendFactor0Property) ?? BlendFactor.Zero;\n    }\n\n    const destinationAlphaBlendFactor0Property =\n      renderStateDataMap[RenderStateElementKey.BlendStateDestinationAlphaBlendFactor0];\n    if (destinationAlphaBlendFactor0Property !== undefined) {\n      blendState.destinationAlphaBlendFactor =\n        shaderData.getFloat(destinationAlphaBlendFactor0Property) ?? BlendFactor.Zero;\n    }\n\n    const colorWriteMask0Property = renderStateDataMap[RenderStateElementKey.BlendStateColorWriteMask0];\n    if (colorWriteMask0Property !== undefined) {\n      blendState.colorWriteMask = shaderData.getFloat(colorWriteMask0Property) ?? ColorWriteMask.All;\n    }\n\n    const blendColorProperty = renderStateDataMap[RenderStateElementKey.BlendStateBlendColor];\n    if (blendColorProperty !== undefined) {\n      const blendColor = shaderData.getColor(blendColorProperty);\n      blendColor !== undefined && this.blendColor.copyFrom(blendColor);\n    }\n\n    const alphaToCoverageProperty = renderStateDataMap[RenderStateElementKey.BlendStateAlphaToCoverage];\n    if (alphaToCoverageProperty !== undefined) {\n      const alphaToCoverage = shaderData.getFloat(alphaToCoverageProperty);\n      this.alphaToCoverage = alphaToCoverage !== undefined ? !!alphaToCoverage : false;\n    }\n  }\n\n  /**\n   * @internal\n   * Apply the current blend state by comparing with the last blend state.\n   */\n  _apply(\n    hardwareRenderer: IHardwareRenderer,\n    lastRenderState: RenderState,\n    customStates?: RenderStateElementMap\n  ): void {\n    this._platformApply(hardwareRenderer, lastRenderState.blendState, customStates);\n  }\n\n  private _platformApply(rhi: IHardwareRenderer, lastState: BlendState, customStates?: RenderStateElementMap): void {\n    const gl = <WebGLRenderingContext>rhi.gl;\n    const lastTargetBlendState = lastState.targetBlendState;\n\n    let {\n      enabled,\n      colorBlendOperation,\n      alphaBlendOperation,\n      sourceColorBlendFactor,\n      destinationColorBlendFactor,\n      sourceAlphaBlendFactor,\n      destinationAlphaBlendFactor,\n      colorWriteMask\n    } = this.targetBlendState;\n\n    if (customStates) {\n      const colorWriteMaskState = customStates[RenderStateElementKey.BlendStateColorWriteMask0];\n      colorWriteMaskState !== undefined && (colorWriteMask = <ColorWriteMask>colorWriteMaskState);\n    }\n\n    if (enabled !== lastTargetBlendState.enabled) {\n      if (enabled) {\n        gl.enable(gl.BLEND);\n      } else {\n        gl.disable(gl.BLEND);\n      }\n      lastTargetBlendState.enabled = enabled;\n    }\n\n    if (enabled) {\n      // apply blend factor.\n      if (\n        sourceColorBlendFactor !== lastTargetBlendState.sourceColorBlendFactor ||\n        destinationColorBlendFactor !== lastTargetBlendState.destinationColorBlendFactor ||\n        sourceAlphaBlendFactor !== lastTargetBlendState.sourceAlphaBlendFactor ||\n        destinationAlphaBlendFactor !== lastTargetBlendState.destinationAlphaBlendFactor\n      ) {\n        gl.blendFuncSeparate(\n          BlendState._getGLBlendFactor(rhi, sourceColorBlendFactor),\n          BlendState._getGLBlendFactor(rhi, destinationColorBlendFactor),\n          BlendState._getGLBlendFactor(rhi, sourceAlphaBlendFactor),\n          BlendState._getGLBlendFactor(rhi, destinationAlphaBlendFactor)\n        );\n        lastTargetBlendState.sourceColorBlendFactor = sourceColorBlendFactor;\n        lastTargetBlendState.destinationColorBlendFactor = destinationColorBlendFactor;\n        lastTargetBlendState.sourceAlphaBlendFactor = sourceAlphaBlendFactor;\n        lastTargetBlendState.destinationAlphaBlendFactor = destinationAlphaBlendFactor;\n      }\n\n      // apply blend operation.\n      if (\n        colorBlendOperation !== lastTargetBlendState.colorBlendOperation ||\n        alphaBlendOperation !== lastTargetBlendState.alphaBlendOperation\n      ) {\n        gl.blendEquationSeparate(\n          BlendState._getGLBlendOperation(rhi, colorBlendOperation),\n          BlendState._getGLBlendOperation(rhi, alphaBlendOperation)\n        );\n        lastTargetBlendState.colorBlendOperation = colorBlendOperation;\n        lastTargetBlendState.alphaBlendOperation = alphaBlendOperation;\n      }\n\n      // apply blend color.\n      const blendColor = this.blendColor;\n      if (!Color.equals(lastState.blendColor, blendColor)) {\n        gl.blendColor(blendColor.r, blendColor.g, blendColor.b, blendColor.a);\n        lastState.blendColor.copyFrom(blendColor);\n      }\n    }\n\n    // apply color mask.\n    if (colorWriteMask !== lastTargetBlendState.colorWriteMask) {\n      gl.colorMask(\n        (colorWriteMask & ColorWriteMask.Red) !== 0,\n        (colorWriteMask & ColorWriteMask.Green) !== 0,\n        (colorWriteMask & ColorWriteMask.Blue) !== 0,\n        (colorWriteMask & ColorWriteMask.Alpha) !== 0\n      );\n      lastTargetBlendState.colorWriteMask = colorWriteMask;\n    }\n\n    // apply alpha to coverage.\n    const alphaToCoverage = this.alphaToCoverage;\n    if (alphaToCoverage !== lastState.alphaToCoverage) {\n      if (alphaToCoverage) {\n        gl.enable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n      } else {\n        gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n      }\n      lastState.alphaToCoverage = alphaToCoverage;\n    }\n  }\n}\n","import { IHardwareRenderer } from \"@galacean/engine-design\";\nimport { RenderStateElementMap } from \"../../BasicResources\";\nimport { ShaderData } from \"../ShaderData\";\nimport { ShaderProperty } from \"../ShaderProperty\";\nimport { CompareFunction } from \"../enums/CompareFunction\";\nimport { RenderStateElementKey } from \"../enums/RenderStateElementKey\";\nimport { RenderState } from \"./RenderState\";\n\n/**\n * Depth state.\n */\nexport class DepthState {\n  private static _getGLCompareFunction(rhi: IHardwareRenderer, compareFunction: CompareFunction): number {\n    const gl = rhi.gl;\n\n    switch (compareFunction) {\n      case CompareFunction.Never:\n        return gl.NEVER;\n      case CompareFunction.Less:\n        return gl.LESS;\n      case CompareFunction.Equal:\n        return gl.EQUAL;\n      case CompareFunction.LessEqual:\n        return gl.LEQUAL;\n      case CompareFunction.Greater:\n        return gl.GREATER;\n      case CompareFunction.NotEqual:\n        return gl.NOTEQUAL;\n      case CompareFunction.GreaterEqual:\n        return gl.GEQUAL;\n      case CompareFunction.Always:\n        return gl.ALWAYS;\n    }\n  }\n\n  /** Whether to enable the depth test. */\n  enabled: boolean = true;\n  /** Depth comparison function. */\n  compareFunction: CompareFunction = CompareFunction.Less;\n  /** Whether the depth value can be written.*/\n  writeEnabled: boolean = true;\n\n  /**\n   * @internal\n   */\n  _applyShaderDataValue(renderStateDataMap: Record<number, ShaderProperty>, shaderData: ShaderData): void {\n    const enableProperty = renderStateDataMap[RenderStateElementKey.DepthStateEnabled];\n    if (enableProperty !== undefined) {\n      const enabled = shaderData.getFloat(enableProperty);\n      this.enabled = enabled !== undefined ? !!enabled : false;\n    }\n\n    const writeEnabledProperty = renderStateDataMap[RenderStateElementKey.DepthStateWriteEnabled];\n    if (writeEnabledProperty !== undefined) {\n      const writeEnabled = shaderData.getFloat(writeEnabledProperty);\n      this.writeEnabled = writeEnabled !== undefined ? !!writeEnabled : false;\n    }\n\n    const compareFunctionProperty = renderStateDataMap[RenderStateElementKey.DepthStateCompareFunction];\n    if (compareFunctionProperty !== undefined) {\n      this.compareFunction = shaderData.getFloat(compareFunctionProperty) ?? CompareFunction.Less;\n    }\n  }\n\n  /**\n   * @internal\n   * Apply the current depth state by comparing with the last depth state.\n   */\n  _apply(\n    hardwareRenderer: IHardwareRenderer,\n    lastRenderState: RenderState,\n    customStates?: RenderStateElementMap\n  ): void {\n    this._platformApply(hardwareRenderer, lastRenderState.depthState, customStates);\n  }\n\n  private _platformApply(rhi: IHardwareRenderer, lastState: DepthState, customStates?: RenderStateElementMap): void {\n    const gl = <WebGLRenderingContext>rhi.gl;\n    let { enabled, compareFunction, writeEnabled } = this;\n\n    if (customStates) {\n      const enabledState = customStates[RenderStateElementKey.DepthStateEnabled];\n      enabledState !== undefined && (enabled = <boolean>enabledState);\n    }\n\n    if (enabled != lastState.enabled) {\n      if (enabled) {\n        gl.enable(gl.DEPTH_TEST);\n      } else {\n        gl.disable(gl.DEPTH_TEST);\n      }\n      lastState.enabled = enabled;\n    }\n\n    if (enabled) {\n      // Apply compare func\n      if (compareFunction != lastState.compareFunction) {\n        gl.depthFunc(DepthState._getGLCompareFunction(rhi, compareFunction));\n        lastState.compareFunction = compareFunction;\n      }\n    }\n\n    // Apply write enabled\n    if (writeEnabled != lastState.writeEnabled) {\n      gl.depthMask(writeEnabled);\n      lastState.writeEnabled = writeEnabled;\n    }\n  }\n}\n","import { IHardwareRenderer } from \"@galacean/engine-design\";\nimport { RenderStateElementMap } from \"../../BasicResources\";\nimport { ShaderData } from \"../ShaderData\";\nimport { ShaderProperty } from \"../ShaderProperty\";\nimport { CullMode } from \"../enums/CullMode\";\nimport { RenderStateElementKey } from \"../enums/RenderStateElementKey\";\nimport { RenderState } from \"./RenderState\";\n\n/**\n * Raster state.\n */\nexport class RasterState {\n  /** Specifies whether or not front- and/or back-facing polygons can be culled. */\n  cullMode: CullMode = CullMode.Back;\n  /** The multiplier by which an implementation-specific value is multiplied with to create a constant depth offset. */\n  depthBias: number = 0;\n  /** The scale factor for the variable depth offset for each polygon. */\n  slopeScaledDepthBias: number = 0;\n\n  /** @internal */\n  _cullFaceEnable: boolean = true;\n  /** @internal */\n  _frontFaceInvert: boolean = false;\n\n  /**\n   * @internal\n   */\n  _applyShaderDataValue(renderStateDataMap: Record<number, ShaderProperty>, shaderData: ShaderData): void {\n    const cullModeProperty = renderStateDataMap[RenderStateElementKey.RasterStateCullMode];\n    if (cullModeProperty !== undefined) {\n      this.cullMode = shaderData.getFloat(cullModeProperty) ?? CullMode.Back;\n    }\n\n    const depthBiasProperty = renderStateDataMap[RenderStateElementKey.RasterStateDepthBias];\n    if (depthBiasProperty !== undefined) {\n      this.depthBias = shaderData.getFloat(depthBiasProperty) ?? 0;\n    }\n\n    const slopeScaledDepthBiasProperty = renderStateDataMap[RenderStateElementKey.RasterStateSlopeScaledDepthBias];\n    if (slopeScaledDepthBiasProperty !== undefined) {\n      this.slopeScaledDepthBias = shaderData.getFloat(slopeScaledDepthBiasProperty) ?? 0;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _apply(\n    hardwareRenderer: IHardwareRenderer,\n    lastRenderState: RenderState,\n    frontFaceInvert: boolean,\n    customStates?: RenderStateElementMap\n  ): void {\n    this._platformApply(hardwareRenderer, lastRenderState.rasterState, frontFaceInvert, customStates);\n  }\n\n  private _platformApply(\n    rhi: IHardwareRenderer,\n    lastState: RasterState,\n    frontFaceInvert: boolean,\n    customStates?: RenderStateElementMap\n  ): void {\n    const gl = <WebGLRenderingContext>rhi.gl;\n    let { cullMode, depthBias, slopeScaledDepthBias } = this;\n\n    if (customStates) {\n      const cullModeState = customStates[RenderStateElementKey.RasterStateCullMode];\n      cullModeState !== undefined && (cullMode = <CullMode>cullModeState);\n    }\n\n    const cullFaceEnable = cullMode !== CullMode.Off;\n    if (cullFaceEnable !== lastState._cullFaceEnable) {\n      if (cullFaceEnable) {\n        gl.enable(gl.CULL_FACE);\n      } else {\n        gl.disable(gl.CULL_FACE);\n      }\n      lastState._cullFaceEnable = cullFaceEnable;\n    }\n\n    // apply front face.\n    if (cullFaceEnable) {\n      if (cullMode !== lastState.cullMode) {\n        if (cullMode == CullMode.Back) {\n          gl.cullFace(gl.BACK);\n        } else {\n          gl.cullFace(gl.FRONT);\n        }\n        lastState.cullMode = cullMode;\n      }\n    }\n\n    if (frontFaceInvert !== lastState._frontFaceInvert) {\n      if (frontFaceInvert) {\n        gl.frontFace(gl.CW);\n      } else {\n        gl.frontFace(gl.CCW);\n      }\n      lastState._frontFaceInvert = frontFaceInvert;\n    }\n\n    // apply polygonOffset.\n    if (!rhi._enableGlobalDepthBias) {\n      if (depthBias !== lastState.depthBias || slopeScaledDepthBias !== lastState.slopeScaledDepthBias) {\n        if (depthBias !== 0 || slopeScaledDepthBias !== 0) {\n          gl.enable(gl.POLYGON_OFFSET_FILL);\n          gl.polygonOffset(slopeScaledDepthBias, depthBias);\n        } else {\n          gl.disable(gl.POLYGON_OFFSET_FILL);\n        }\n        lastState.depthBias = depthBias;\n        lastState.slopeScaledDepthBias = slopeScaledDepthBias;\n      }\n    }\n  }\n}\n","import { IHardwareRenderer } from \"@galacean/engine-design\";\nimport { RenderStateElementMap } from \"../../BasicResources\";\nimport { ShaderData } from \"../ShaderData\";\nimport { ShaderProperty } from \"../ShaderProperty\";\nimport { CompareFunction } from \"../enums/CompareFunction\";\nimport { RenderStateElementKey } from \"../enums/RenderStateElementKey\";\nimport { StencilOperation } from \"../enums/StencilOperation\";\nimport { RenderState } from \"./RenderState\";\n\n/**\n * Stencil state.\n */\nexport class StencilState {\n  private static _getGLCompareFunction(rhi: IHardwareRenderer, compareFunction: CompareFunction): number {\n    const gl = rhi.gl;\n\n    switch (compareFunction) {\n      case CompareFunction.Never:\n        return gl.NEVER;\n      case CompareFunction.Less:\n        return gl.LESS;\n      case CompareFunction.Equal:\n        return gl.EQUAL;\n      case CompareFunction.LessEqual:\n        return gl.LEQUAL;\n      case CompareFunction.Greater:\n        return gl.GREATER;\n      case CompareFunction.NotEqual:\n        return gl.NOTEQUAL;\n      case CompareFunction.GreaterEqual:\n        return gl.GEQUAL;\n      case CompareFunction.Always:\n        return gl.ALWAYS;\n    }\n  }\n\n  private static _getGLStencilOperation(rhi: IHardwareRenderer, compareFunction: StencilOperation): number {\n    const gl = rhi.gl;\n\n    switch (compareFunction) {\n      case StencilOperation.Keep:\n        return gl.KEEP;\n      case StencilOperation.Zero:\n        return gl.ZERO;\n      case StencilOperation.Replace:\n        return gl.REPLACE;\n      case StencilOperation.IncrementSaturate:\n        return gl.INCR;\n      case StencilOperation.DecrementSaturate:\n        return gl.DECR;\n      case StencilOperation.Invert:\n        return gl.INVERT;\n      case StencilOperation.IncrementWrap:\n        return gl.INCR_WRAP;\n      case StencilOperation.DecrementWrap:\n        return gl.DECR_WRAP;\n    }\n  }\n\n  /** Whether to enable stencil test. */\n  enabled: boolean = false;\n  /** Write the reference value of the stencil buffer. */\n  referenceValue: number = 0;\n  /** Specifying a bit-wise mask that is used to AND the reference value and the stored stencil value when the test is done. */\n  mask: number = 0xff;\n  /** Specifying a bit mask to enable or disable writing of individual bits in the stencil planes. */\n  writeMask: number = 0xff;\n  /** The comparison function of the reference value of the front face of the geometry and the current buffer storage value. */\n  compareFunctionFront: CompareFunction = CompareFunction.Always;\n  /** The comparison function of the reference value of the back of the geometry and the current buffer storage value. */\n  compareFunctionBack: CompareFunction = CompareFunction.Always;\n  /** specifying the function to use for front face when both the stencil test and the depth test pass. */\n  passOperationFront: StencilOperation = StencilOperation.Keep;\n  /** specifying the function to use for back face when both the stencil test and the depth test pass. */\n  passOperationBack: StencilOperation = StencilOperation.Keep;\n  /** specifying the function to use for front face when the stencil test fails. */\n  failOperationFront: StencilOperation = StencilOperation.Keep;\n  /** specifying the function to use for back face when the stencil test fails. */\n  failOperationBack: StencilOperation = StencilOperation.Keep;\n  /** specifying the function to use for front face when the stencil test passes, but the depth test fails. */\n  zFailOperationFront: StencilOperation = StencilOperation.Keep;\n  /** specifying the function to use for back face when the stencil test passes, but the depth test fails. */\n  zFailOperationBack: StencilOperation = StencilOperation.Keep;\n\n  /**\n   * @internal\n   */\n  _applyShaderDataValue(renderStateDataMap: Record<number, ShaderProperty>, shaderData: ShaderData): void {\n    const enableProperty = renderStateDataMap[RenderStateElementKey.StencilStateEnabled];\n    if (enableProperty !== undefined) {\n      const enabled = shaderData.getFloat(enableProperty);\n      this.enabled = enabled !== undefined ? !!enabled : false;\n    }\n\n    const referenceValueProperty = renderStateDataMap[RenderStateElementKey.StencilStateReferenceValue];\n    if (referenceValueProperty !== undefined) {\n      this.referenceValue = shaderData.getFloat(referenceValueProperty) ?? 0;\n    }\n\n    const maskProperty = renderStateDataMap[RenderStateElementKey.StencilStateMask];\n    if (maskProperty !== undefined) {\n      this.mask = shaderData.getFloat(maskProperty) ?? 0xff;\n    }\n\n    const writeMaskProperty = renderStateDataMap[RenderStateElementKey.StencilStateWriteMask];\n    if (writeMaskProperty !== undefined) {\n      this.writeMask = shaderData.getFloat(writeMaskProperty) ?? 0xff;\n    }\n\n    const compareFunctionFrontProperty = renderStateDataMap[RenderStateElementKey.StencilStateCompareFunctionFront];\n    if (compareFunctionFrontProperty !== undefined) {\n      this.compareFunctionFront = shaderData.getFloat(compareFunctionFrontProperty) ?? CompareFunction.Always;\n    }\n\n    const compareFunctionBackProperty = renderStateDataMap[RenderStateElementKey.StencilStateCompareFunctionBack];\n    if (compareFunctionBackProperty !== undefined) {\n      this.compareFunctionBack = shaderData.getFloat(compareFunctionBackProperty) ?? CompareFunction.Always;\n    }\n\n    const passOperationFrontProperty = renderStateDataMap[RenderStateElementKey.StencilStatePassOperationFront];\n    if (passOperationFrontProperty !== undefined) {\n      this.passOperationFront = shaderData.getFloat(passOperationFrontProperty) ?? StencilOperation.Keep;\n    }\n\n    const passOperationBackProperty = renderStateDataMap[RenderStateElementKey.StencilStatePassOperationBack];\n    if (passOperationBackProperty !== undefined) {\n      this.passOperationBack = shaderData.getFloat(passOperationBackProperty) ?? StencilOperation.Keep;\n    }\n\n    const failOperationFrontProperty = renderStateDataMap[RenderStateElementKey.StencilStateFailOperationFront];\n    if (failOperationFrontProperty !== undefined) {\n      this.failOperationFront = shaderData.getFloat(failOperationFrontProperty) ?? StencilOperation.Keep;\n    }\n\n    const failOperationBackProperty = renderStateDataMap[RenderStateElementKey.StencilStateFailOperationBack];\n    if (failOperationBackProperty !== undefined) {\n      this.failOperationBack = shaderData.getFloat(failOperationBackProperty) ?? StencilOperation.Keep;\n    }\n\n    const zFailOperationFrontProperty = renderStateDataMap[RenderStateElementKey.StencilStateZFailOperationFront];\n    if (zFailOperationFrontProperty !== undefined) {\n      this.zFailOperationFront = shaderData.getFloat(zFailOperationFrontProperty) ?? StencilOperation.Keep;\n    }\n\n    const zFailOperationBackProperty = renderStateDataMap[RenderStateElementKey.StencilStateZFailOperationBack];\n    if (zFailOperationBackProperty !== undefined) {\n      this.zFailOperationBack = shaderData.getFloat(zFailOperationBackProperty) ?? StencilOperation.Keep;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _apply(\n    hardwareRenderer: IHardwareRenderer,\n    lastRenderState: RenderState,\n    customStates?: RenderStateElementMap\n  ): void {\n    this._platformApply(hardwareRenderer, lastRenderState.stencilState, customStates);\n  }\n\n  private _platformApply(rhi: IHardwareRenderer, lastState: StencilState, customStates?: RenderStateElementMap): void {\n    const gl = <WebGLRenderingContext>rhi.gl;\n    let {\n      enabled,\n      referenceValue,\n      mask,\n      compareFunctionFront,\n      compareFunctionBack,\n      failOperationFront,\n      zFailOperationFront,\n      passOperationFront,\n      failOperationBack,\n      zFailOperationBack,\n      passOperationBack,\n      writeMask\n    } = this;\n\n    if (customStates) {\n      const enabledState = customStates[RenderStateElementKey.StencilStateEnabled];\n      enabledState !== undefined && (enabled = <boolean>enabledState);\n      const writeMaskState = customStates[RenderStateElementKey.StencilStateWriteMask];\n      writeMaskState !== undefined && (writeMask = <number>writeMaskState);\n      const referenceValueState = customStates[RenderStateElementKey.StencilStateReferenceValue];\n      referenceValueState !== undefined && (referenceValue = <number>referenceValueState);\n      const compareFunctionFrontState = customStates[RenderStateElementKey.StencilStateCompareFunctionFront];\n      compareFunctionFrontState !== undefined && (compareFunctionFront = <CompareFunction>compareFunctionFrontState);\n      const compareFunctionBackState = customStates[RenderStateElementKey.StencilStateCompareFunctionBack];\n      compareFunctionBackState !== undefined && (compareFunctionBack = <CompareFunction>compareFunctionBackState);\n      const passOperationFrontState = customStates[RenderStateElementKey.StencilStatePassOperationFront];\n      passOperationFrontState !== undefined && (passOperationFront = <StencilOperation>passOperationFrontState);\n      const passOperationBackState = customStates[RenderStateElementKey.StencilStatePassOperationBack];\n      passOperationBackState !== undefined && (passOperationBack = <StencilOperation>passOperationBackState);\n      const failOperationFrontState = customStates[RenderStateElementKey.StencilStateFailOperationFront];\n      failOperationFrontState !== undefined && (failOperationFront = <StencilOperation>failOperationFrontState);\n      const failOperationBackState = customStates[RenderStateElementKey.StencilStateFailOperationBack];\n      failOperationBackState !== undefined && (failOperationBack = <StencilOperation>failOperationBackState);\n      const zFailOperationFrontState = customStates[RenderStateElementKey.StencilStateZFailOperationFront];\n      zFailOperationFrontState !== undefined && (zFailOperationFront = <StencilOperation>zFailOperationFrontState);\n      const zFailOperationBackState = customStates[RenderStateElementKey.StencilStateZFailOperationBack];\n      zFailOperationBackState !== undefined && (zFailOperationBack = <StencilOperation>zFailOperationBackState);\n    }\n\n    if (enabled != lastState.enabled) {\n      if (enabled) {\n        gl.enable(gl.STENCIL_TEST);\n      } else {\n        gl.disable(gl.STENCIL_TEST);\n      }\n      lastState.enabled = enabled;\n    }\n\n    if (enabled) {\n      // apply stencil func.\n      const referenceOrMaskChange = referenceValue !== lastState.referenceValue || mask !== lastState.mask;\n      if (referenceOrMaskChange || compareFunctionFront !== lastState.compareFunctionFront) {\n        gl.stencilFuncSeparate(\n          gl.FRONT,\n          StencilState._getGLCompareFunction(rhi, compareFunctionFront),\n          referenceValue,\n          mask\n        );\n        lastState.compareFunctionFront = compareFunctionFront;\n      }\n\n      if (referenceOrMaskChange || compareFunctionBack !== lastState.compareFunctionBack) {\n        gl.stencilFuncSeparate(\n          gl.BACK,\n          StencilState._getGLCompareFunction(rhi, compareFunctionBack),\n          referenceValue,\n          mask\n        );\n        lastState.compareFunctionBack = compareFunctionBack;\n      }\n      if (referenceOrMaskChange) {\n        lastState.referenceValue = referenceValue;\n        lastState.mask = mask;\n      }\n\n      // apply stencil operation.\n      if (\n        failOperationFront !== lastState.failOperationFront ||\n        zFailOperationFront !== lastState.zFailOperationFront ||\n        passOperationFront !== lastState.passOperationFront\n      ) {\n        gl.stencilOpSeparate(\n          gl.FRONT,\n          StencilState._getGLStencilOperation(rhi, failOperationFront),\n          StencilState._getGLStencilOperation(rhi, zFailOperationFront),\n          StencilState._getGLStencilOperation(rhi, passOperationFront)\n        );\n        lastState.failOperationFront = failOperationFront;\n        lastState.zFailOperationFront = zFailOperationFront;\n        lastState.passOperationFront = passOperationFront;\n      }\n\n      if (\n        failOperationBack !== lastState.failOperationBack ||\n        zFailOperationBack !== lastState.zFailOperationBack ||\n        passOperationBack !== lastState.passOperationBack\n      ) {\n        gl.stencilOpSeparate(\n          gl.BACK,\n          StencilState._getGLStencilOperation(rhi, failOperationBack),\n          StencilState._getGLStencilOperation(rhi, zFailOperationBack),\n          StencilState._getGLStencilOperation(rhi, passOperationBack)\n        );\n        lastState.failOperationBack = failOperationBack;\n        lastState.zFailOperationBack = zFailOperationBack;\n        lastState.passOperationBack = passOperationBack;\n      }\n\n      // apply write mask.\n      if (writeMask !== lastState.writeMask) {\n        gl.stencilMask(writeMask);\n        lastState.writeMask = writeMask;\n      }\n    }\n  }\n}\n","import { ShaderData, ShaderProperty } from \"..\";\nimport { RenderStateElementMap } from \"../../BasicResources\";\nimport { Engine } from \"../../Engine\";\nimport { deepClone } from \"../../clone/CloneManager\";\nimport { RenderQueueType } from \"../enums/RenderQueueType\";\nimport { RenderStateElementKey } from \"../enums/RenderStateElementKey\";\nimport { BlendState } from \"./BlendState\";\nimport { DepthState } from \"./DepthState\";\nimport { RasterState } from \"./RasterState\";\nimport { StencilState } from \"./StencilState\";\n\n/**\n * Render state.\n */\nexport class RenderState {\n  /** Blend state. */\n  @deepClone\n  readonly blendState: BlendState = new BlendState();\n  /** Depth state. */\n  @deepClone\n  readonly depthState: DepthState = new DepthState();\n  /** Stencil state. */\n  @deepClone\n  readonly stencilState: StencilState = new StencilState();\n  /** Raster state. */\n  @deepClone\n  readonly rasterState: RasterState = new RasterState();\n\n  /** Render queue type. */\n  renderQueueType: RenderQueueType = RenderQueueType.Opaque;\n\n  /**\n   * @internal\n   */\n  _applyStates(\n    engine: Engine,\n    frontFaceInvert: boolean,\n    renderStateDataMap: Record<number, ShaderProperty>,\n    shaderData: ShaderData,\n    customRenderStates?: RenderStateElementMap\n  ): void {\n    // @todo: Should merge when we can delete material render state\n    renderStateDataMap && this._applyStatesByShaderData(renderStateDataMap, shaderData);\n    const hardwareRenderer = engine._hardwareRenderer;\n    const lastRenderState = engine._lastRenderState;\n    const context = engine._renderContext;\n    this.blendState._apply(hardwareRenderer, lastRenderState, customRenderStates);\n    this.depthState._apply(hardwareRenderer, lastRenderState, customRenderStates);\n    this.stencilState._apply(hardwareRenderer, lastRenderState, customRenderStates);\n    this.rasterState._apply(\n      hardwareRenderer,\n      lastRenderState,\n      context.flipProjection ? !frontFaceInvert : frontFaceInvert,\n      customRenderStates\n    );\n  }\n\n  /**\n   * @internal\n   * @todo Should merge when we can delete material render state\n   */\n  _applyRenderQueueByShaderData(renderStateDataMap: Record<number, ShaderProperty>, shaderData: ShaderData): void {\n    const renderQueueType = renderStateDataMap[RenderStateElementKey.RenderQueueType];\n    if (renderQueueType !== undefined) {\n      this.renderQueueType = shaderData.getFloat(renderQueueType) ?? RenderQueueType.Opaque;\n    }\n  }\n\n  private _applyStatesByShaderData(renderStateDataMap: Record<number, ShaderProperty>, shaderData: ShaderData): void {\n    this.blendState._applyShaderDataValue(renderStateDataMap, shaderData);\n    this.depthState._applyShaderDataValue(renderStateDataMap, shaderData);\n    this.stencilState._applyShaderDataValue(renderStateDataMap, shaderData);\n    this.rasterState._applyShaderDataValue(renderStateDataMap, shaderData);\n  }\n}\n","import { IShaderLab } from \"@galacean/engine-design\";\nimport { Color } from \"@galacean/engine-math\";\nimport { Engine } from \"../Engine\";\nimport { IReferable } from \"../asset/IReferable\";\nimport { ShaderMacro } from \"./ShaderMacro\";\nimport { ShaderMacroCollection } from \"./ShaderMacroCollection\";\nimport { ShaderPass } from \"./ShaderPass\";\nimport { ShaderProperty } from \"./ShaderProperty\";\nimport { SubShader } from \"./SubShader\";\nimport { BlendFactor } from \"./enums/BlendFactor\";\nimport { BlendOperation } from \"./enums/BlendOperation\";\nimport { ColorWriteMask } from \"./enums/ColorWriteMask\";\nimport { CompareFunction } from \"./enums/CompareFunction\";\nimport { CullMode } from \"./enums/CullMode\";\nimport { RenderQueueType } from \"./enums/RenderQueueType\";\nimport { RenderStateElementKey } from \"./enums/RenderStateElementKey\";\nimport { StencilOperation } from \"./enums/StencilOperation\";\nimport { RenderState } from \"./state/RenderState\";\n\n/**\n * Shader for rendering.\n */\nexport class Shader implements IReferable {\n  /** @internal */\n  static readonly _compileMacros: ShaderMacroCollection = new ShaderMacroCollection();\n\n  /** @internal */\n  static _shaderLab?: IShaderLab;\n\n  private static _shaderMap: Record<string, Shader> = Object.create(null);\n\n  /**\n   * Create a shader by source code.\n   *\n   * @remarks\n   *\n   * ShaderLab must be enabled first as follows:\n   * ```ts\n   * // Import shaderLab\n   * import { ShaderLab } from \"@galacean/engine-shader-lab\";\n   * // Create engine with shaderLab\n   * const engine = await WebGLEngine.create({ canvas: \"canvas\", shader: new ShaderLab() });\n   * ...\n   * ```\n   *\n   * @param shaderSource - shader code\n   * @returns Shader\n   *\n   * @throws\n   * Throw string exception if shaderLab has not been enabled properly.\n   */\n  static create(shaderSource: string): Shader;\n\n  /**\n   * Create a shader.\n   * @param name - Name of the shader\n   * @param vertexSource - Vertex source code\n   * @param fragmentSource - Fragment source code\n   * @returns Shader\n   */\n  static create(name: string, vertexSource: string, fragmentSource: string): Shader;\n\n  /**\n   * Create a shader.\n   * @param name - Name of the shader\n   * @param shaderPasses - Shader passes\n   * @returns Shader\n   */\n  static create(name: string, shaderPasses: ShaderPass[]): Shader;\n\n  /**\n   * Create a shader.\n   * @param name - Name of the shader\n   * @param subShaders - Sub shaders\n   * @returns Shader\n   */\n  static create(name: string, subShaders: SubShader[]): Shader;\n\n  static create(\n    nameOrShaderSource: string,\n    vertexSourceOrShaderPassesOrSubShaders?: SubShader[] | ShaderPass[] | string,\n    fragmentSource?: string\n  ): Shader {\n    let shader: Shader;\n    const shaderMap = Shader._shaderMap;\n\n    if (!vertexSourceOrShaderPassesOrSubShaders) {\n      if (!Shader._shaderLab) {\n        throw \"ShaderLab has not been set up yet.\";\n      }\n\n      const shaderContent = Shader._shaderLab._parseShaderContent(nameOrShaderSource);\n      if (shaderMap[shaderContent.name]) {\n        console.error(`Shader named \"${shaderContent.name}\" already exists.`);\n        return;\n      }\n      const subShaderList = shaderContent.subShaders.map((subShaderContent) => {\n        const passList = subShaderContent.passes.map((passInfo) => {\n          if (passInfo.isUsePass) {\n            // Use pass reference\n            const paths = passInfo.name.split(\"/\");\n            return Shader.find(paths[0])\n              ?.subShaders.find((subShader) => subShader.name === paths[1])\n              ?.passes.find((pass) => pass.name === paths[2]);\n          }\n\n          const shaderPassContent = new ShaderPass(\n            passInfo.name,\n            passInfo.contents,\n            passInfo.vertexEntry,\n            passInfo.fragmentEntry,\n            passInfo.tags\n          );\n\n          const { constantMap, variableMap } = passInfo.renderStates;\n          // Compatible shader lab no render state use material `renderState` to modify render state\n          if (Object.keys(constantMap).length > 0 || Object.keys(variableMap).length > 0) {\n            // Parse const render state\n            const renderState = new RenderState();\n            shaderPassContent._renderState = renderState;\n            for (let k in constantMap) {\n              Shader._applyConstRenderStates(renderState, <RenderStateElementKey>parseInt(k), constantMap[k]);\n            }\n\n            // Parse variable render state\n            const renderStateDataMap = {} as Record<number, ShaderProperty>;\n            for (let k in variableMap) {\n              renderStateDataMap[k] = ShaderProperty.getByName(variableMap[k]);\n            }\n            shaderPassContent._renderStateDataMap = renderStateDataMap;\n          }\n\n          return shaderPassContent;\n        });\n\n        return new SubShader(subShaderContent.name, passList, subShaderContent.tags);\n      });\n\n      shader = new Shader(shaderContent.name, subShaderList);\n      shaderMap[shaderContent.name] = shader;\n      return shader;\n    } else {\n      if (shaderMap[nameOrShaderSource]) {\n        console.error(`Shader named \"${nameOrShaderSource}\" already exists.`);\n        return;\n      }\n      if (typeof vertexSourceOrShaderPassesOrSubShaders === \"string\") {\n        const shaderPass = new ShaderPass(vertexSourceOrShaderPassesOrSubShaders, fragmentSource);\n        shader = new Shader(nameOrShaderSource, [new SubShader(\"Default\", [shaderPass])]);\n      } else {\n        if (vertexSourceOrShaderPassesOrSubShaders.length > 0) {\n          if (vertexSourceOrShaderPassesOrSubShaders[0].constructor === ShaderPass) {\n            shader = new Shader(nameOrShaderSource, [\n              new SubShader(\"Default\", <ShaderPass[]>vertexSourceOrShaderPassesOrSubShaders)\n            ]);\n          } else {\n            shader = new Shader(nameOrShaderSource, <SubShader[]>vertexSourceOrShaderPassesOrSubShaders.slice());\n          }\n        } else {\n          throw \"SubShader or ShaderPass count must large than 0.\";\n        }\n      }\n    }\n\n    shaderMap[nameOrShaderSource] = shader;\n    return shader;\n  }\n\n  /**\n   * Find a shader by name.\n   * @param name - Name of the shader\n   */\n  static find(name: string): Shader {\n    return Shader._shaderMap[name];\n  }\n\n  private static _applyConstRenderStates(\n    renderState: RenderState,\n    key: RenderStateElementKey,\n    value: boolean | string | number | Color\n  ): void {\n    switch (key) {\n      case RenderStateElementKey.BlendStateEnabled0:\n        renderState.blendState.targetBlendState.enabled = <boolean>value;\n        break;\n      case RenderStateElementKey.BlendStateColorBlendOperation0:\n        renderState.blendState.targetBlendState.colorBlendOperation = <BlendOperation>value;\n        break;\n      case RenderStateElementKey.BlendStateAlphaBlendOperation0:\n        renderState.blendState.targetBlendState.alphaBlendOperation = <BlendOperation>value;\n        break;\n      case RenderStateElementKey.BlendStateSourceColorBlendFactor0:\n        renderState.blendState.targetBlendState.sourceColorBlendFactor = <BlendFactor>value;\n        break;\n      case RenderStateElementKey.BlendStateDestinationColorBlendFactor0:\n        renderState.blendState.targetBlendState.destinationColorBlendFactor = <BlendFactor>value;\n        break;\n      case RenderStateElementKey.BlendStateSourceAlphaBlendFactor0:\n        renderState.blendState.targetBlendState.sourceAlphaBlendFactor = <BlendFactor>value;\n        break;\n      case RenderStateElementKey.BlendStateDestinationAlphaBlendFactor0:\n        renderState.blendState.targetBlendState.destinationAlphaBlendFactor = <BlendFactor>value;\n        break;\n      case RenderStateElementKey.BlendStateColorWriteMask0:\n        renderState.blendState.targetBlendState.colorWriteMask = <ColorWriteMask>value;\n        break;\n      case RenderStateElementKey.DepthStateEnabled:\n        renderState.depthState.enabled = <boolean>value;\n        break;\n      case RenderStateElementKey.DepthStateWriteEnabled:\n        renderState.depthState.writeEnabled = <boolean>value;\n        break;\n      case RenderStateElementKey.DepthStateCompareFunction:\n        renderState.depthState.compareFunction = <CompareFunction>value;\n        break;\n      case RenderStateElementKey.StencilStateEnabled:\n        renderState.stencilState.enabled = <boolean>value;\n        break;\n      case RenderStateElementKey.StencilStateReferenceValue:\n        renderState.stencilState.referenceValue = <number>value;\n        break;\n      case RenderStateElementKey.StencilStateMask:\n        renderState.stencilState.mask = <number>value;\n        break;\n      case RenderStateElementKey.StencilStateWriteMask:\n        renderState.stencilState.writeMask = <number>value;\n        break;\n      case RenderStateElementKey.StencilStateCompareFunctionFront:\n        renderState.stencilState.compareFunctionFront = <CompareFunction>value;\n        break;\n      case RenderStateElementKey.StencilStateCompareFunctionBack:\n        renderState.stencilState.compareFunctionBack = <CompareFunction>value;\n        break;\n      case RenderStateElementKey.StencilStatePassOperationFront:\n        renderState.stencilState.passOperationFront = <StencilOperation>value;\n        break;\n      case RenderStateElementKey.StencilStatePassOperationBack:\n        renderState.stencilState.passOperationBack = <StencilOperation>value;\n        break;\n      case RenderStateElementKey.StencilStateFailOperationFront:\n        renderState.stencilState.failOperationFront = <StencilOperation>value;\n        break;\n      case RenderStateElementKey.StencilStateFailOperationBack:\n        renderState.stencilState.failOperationBack = <StencilOperation>value;\n        break;\n      case RenderStateElementKey.StencilStateZFailOperationFront:\n        renderState.stencilState.zFailOperationFront = <StencilOperation>value;\n        break;\n      case RenderStateElementKey.StencilStateZFailOperationBack:\n        renderState.stencilState.zFailOperationBack = <StencilOperation>value;\n        break;\n      case RenderStateElementKey.RasterStateCullMode:\n        renderState.rasterState.cullMode = <CullMode>value;\n        break;\n      case RenderStateElementKey.RasterStateDepthBias:\n        renderState.rasterState.depthBias = <number>value;\n        break;\n      case RenderStateElementKey.RasterStateSlopeScaledDepthBias:\n        renderState.rasterState.slopeScaledDepthBias = <number>value;\n        break;\n      case RenderStateElementKey.RenderQueueType:\n        renderState.renderQueueType = <RenderQueueType>value;\n        break;\n    }\n  }\n\n  private _refCount: number = 0;\n  private _destroyed: boolean = false;\n  private _subShaders: SubShader[];\n\n  /**\n   * Sub shaders of the shader.\n   */\n  get subShaders(): ReadonlyArray<SubShader> {\n    return this._subShaders;\n  }\n\n  /**\n   * Whether it has been destroyed.\n   */\n  get destroyed(): boolean {\n    return this._destroyed;\n  }\n\n  /**\n   * @internal\n   * path should follow the specifications of [URL.origin](https://developer.mozilla.org/en-US/docs/Web/API/URL/origin), like: `shaders://root/`\n   */\n  _registerPath(path: string) {\n    for (const subShader of this._subShaders) {\n      for (const shaderPass of subShader.passes) {\n        shaderPass._path = path;\n      }\n    }\n  }\n\n  private constructor(\n    public readonly name: string,\n    subShaders: SubShader[]\n  ) {\n    this.name = name;\n    this._subShaders = subShaders;\n  }\n\n  /**\n   * Compile shader variant by macro name list.\n   *\n   * @remarks\n   * Usually a shader contains some macros,any combination of macros is called shader variant.\n   *\n   * @param engine - Engine to which the shader variant belongs\n   * @param macros - Macro name list\n   * @returns Is the compiled shader variant valid\n   */\n  compileVariant(engine: Engine, macros: string[]): boolean {\n    const compileMacros = Shader._compileMacros;\n    compileMacros.clear();\n    for (let i = 0, n = macros.length; i < n; i++) {\n      compileMacros.enable(ShaderMacro.getByName(macros[i]));\n    }\n\n    let isValid = false;\n    const subShaders = this._subShaders;\n    for (let i = 0, n = subShaders.length; i < n; i++) {\n      const { passes } = subShaders[i];\n      for (let j = 0, m = passes.length; j < m; j++) {\n        const shaderProgram = passes[j]._getShaderProgram(engine, compileMacros);\n        isValid = j === 0 ? shaderProgram.isValid : isValid && shaderProgram.isValid;\n      }\n    }\n    return isValid;\n  }\n\n  /**\n   * Destroy the shader.\n   * @param force - Whether to force the destruction, if it is false, refCount = 0 can be released successfully.\n   * @returns Whether the release was successful.\n   */\n  destroy(force: boolean = false): boolean {\n    if (!force && this._refCount !== 0) {\n      return false;\n    }\n\n    const subShaders = this._subShaders;\n    for (let i = 0, n = subShaders.length; i < n; i++) {\n      const passes = subShaders[i].passes;\n      for (let j = 0, m = passes.length; j < m; j++) {\n        passes[j]._destroy();\n      }\n    }\n\n    delete Shader._shaderMap[this.name];\n    this._destroyed = true;\n    return true;\n  }\n\n  /**\n   * @internal\n   */\n  _getReferCount(): number {\n    return this._refCount;\n  }\n\n  /**\n   * @internal\n   */\n  _addReferCount(value: number): void {\n    this._refCount += value;\n  }\n\n  /**\n   * @deprecated Please use `ShaderMacro.getByName` instead\n   *\n   * Get shader macro by name.\n   * @param name - Name of the shader macro\n   * @returns Shader macro\n   */\n  static getMacroByName(name: string): ShaderMacro;\n\n  /**\n   * @deprecated Please use `ShaderMacro.getByName` instead\n   *\n   * Get shader macro by name.\n   * @param name - Name of the shader macro\n   * @param value - Value of the shader macro\n   * @returns Shader macro\n   */\n  static getMacroByName(name: string, value: string): ShaderMacro;\n\n  static getMacroByName(name: string, value?: string): ShaderMacro {\n    return ShaderMacro.getByName(name, value);\n  }\n\n  /**\n   * @deprecated Please use `ShaderProperty.getByName` instead\n   *\n   * Get shader property by name.\n   * @param name - Name of the shader property\n   * @returns Shader property\n   */\n  static getPropertyByName(name: string): ShaderProperty {\n    return ShaderProperty.getByName(name);\n  }\n}\n","import { IClone } from \"@galacean/engine-design\";\nimport { Color, Matrix, Vector2, Vector3, Vector4 } from \"@galacean/engine-math\";\nimport { IReferable } from \"../asset/IReferable\";\nimport { CloneManager, ignoreClone } from \"../clone/CloneManager\";\nimport { Texture } from \"../texture/Texture\";\nimport { ShaderMacro } from \"./ShaderMacro\";\nimport { ShaderMacroCollection } from \"./ShaderMacroCollection\";\nimport { ShaderProperty } from \"./ShaderProperty\";\nimport { ShaderDataGroup } from \"./enums/ShaderDataGroup\";\nimport { ShaderPropertyType } from \"./enums/ShaderPropertyType\";\n\n/**\n * Shader data collection,Correspondence includes shader properties data and macros data.\n */\nexport class ShaderData implements IReferable, IClone {\n  /** @internal */\n  @ignoreClone\n  _group: ShaderDataGroup;\n  /** @internal */\n  @ignoreClone\n  _propertyValueMap: Record<number, ShaderPropertyValueType> = Object.create(null);\n  /** @internal */\n  @ignoreClone\n  _macroCollection: ShaderMacroCollection = new ShaderMacroCollection();\n\n  @ignoreClone\n  private _macroMap: Record<number, ShaderMacro> = Object.create(null);\n  @ignoreClone\n  private _refCount: number = 0;\n\n  /**\n   * @internal\n   */\n  constructor(group: ShaderDataGroup) {\n    this._group = group;\n  }\n\n  /**\n   * Get float by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Float\n   */\n  getFloat(propertyName: string): number;\n\n  /**\n   * Get float by shader property.\n   * @param property - Shader property, use `ShaderProperty.getByName` to get\n   * @returns Float\n   */\n  getFloat(property: ShaderProperty): number;\n\n  getFloat(property: string | ShaderProperty): number {\n    return this.getPropertyValue(property);\n  }\n\n  /**\n   * Set float by shader property name.\n   * @remarks Corresponding float shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Float\n   */\n  setFloat(propertyName: string, value: number): void;\n\n  /**\n   * Set float by shader property.\n   * @remarks Corresponding float shader property type.\n   * @param property - Shader property, use `ShaderProperty.getByName` to get\n   * @param value - Float\n   */\n  setFloat(property: ShaderProperty, value: number): void;\n\n  setFloat(property: string | ShaderProperty, value: number): void {\n    this._setPropertyValue(property, ShaderPropertyType.Float, value);\n  }\n\n  /**\n   * Get int by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Int\n   */\n  getInt(propertyName: string): number;\n\n  /**\n   * Get int by shader property.\n   * @param property - Shader property, use `ShaderProperty.getByName` to get\n   * @returns Int\n   */\n  getInt(property: ShaderProperty): number;\n\n  getInt(property: string | ShaderProperty): number {\n    return this.getPropertyValue(property);\n  }\n\n  /**\n   * Set int by shader property name.\n   * @remarks Correspondence includes int and bool shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Int\n   */\n  setInt(propertyName: string, value: number): void;\n\n  /**\n   * Set int by shader property.\n   * @remarks Correspondence includes int and bool shader property type.\n   * @param property - Shader property, use `ShaderProperty.getByName` to get\n   * @param value - Int\n   */\n  setInt(property: ShaderProperty, value: number): void;\n\n  setInt(property: string | ShaderProperty, value: number): void {\n    this._setPropertyValue(property, ShaderPropertyType.Int, value);\n  }\n\n  /**\n   * Get float array by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Float array\n   */\n  getFloatArray(propertyName: string): Float32Array;\n\n  /**\n   * Get float array by shader property.\n   * @param property - Shader property, use `ShaderProperty.getByName` to get\n   * @returns Float array\n   */\n  getFloatArray(property: ShaderProperty): Float32Array;\n\n  getFloatArray(property: string | ShaderProperty): Float32Array {\n    return this.getPropertyValue(property);\n  }\n\n  /**\n   * Set float array by shader property name.\n   * @remarks Correspondence includes float array、vec2 array、vec3 array、vec4 array and matrix array shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Float array\n   */\n  setFloatArray(propertyName: string, value: Float32Array): void;\n\n  /**\n   * Set float array by shader property.\n   * @remarks Correspondence includes float array、vec2 array、vec3 array、vec4 array and matrix array shader property type.\n   * @param property - Shader property, use `ShaderProperty.getByName` to get\n   * @param value - Float array\n   */\n  setFloatArray(property: ShaderProperty, value: Float32Array): void;\n\n  setFloatArray(property: string | ShaderProperty, value: Float32Array): void {\n    this._setPropertyValue(property, ShaderPropertyType.FloatArray, value);\n  }\n\n  /**\n   * Get int array by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Int Array\n   */\n  getIntArray(propertyName: string): Int32Array;\n\n  /**\n   * Get int array by shader property.\n   * @param property - Shader property, use `ShaderProperty.getByName` to get\n   * @returns Int Array\n   */\n  getIntArray(property: ShaderProperty): Int32Array;\n\n  getIntArray(property: string | ShaderProperty): Int32Array {\n    return this.getPropertyValue(property);\n  }\n\n  /**\n   * Set int array by shader property name.\n   * @remarks Correspondence includes bool array、int array、bvec2 array、bvec3 array、bvec4 array、ivec2 array、ivec3 array and ivec4 array shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Int Array\n   */\n  setIntArray(propertyName: string, value: Int32Array): void;\n\n  /**\n   * Set int array by shader property.\n   * @remarks Correspondence includes bool array、int array、bvec2 array、bvec3 array、bvec4 array、ivec2 array、ivec3 array and ivec4 array shader property type.\n   * @param property - Shader property, use `ShaderProperty.getByName` to get\n   * @param value - Int Array\n   */\n  setIntArray(property: ShaderProperty, value: Int32Array): void;\n\n  setIntArray(property: string | ShaderProperty, value: Int32Array): void {\n    this._setPropertyValue(property, ShaderPropertyType.IntArray, value);\n  }\n\n  /**\n   * Get two-dimensional from shader property name.\n   * @param propertyName - Shader property name\n   * @returns Two-dimensional vector\n   */\n  getVector2(propertyName: string): Vector2;\n\n  /**\n   * Get two-dimensional from shader property.\n   * @param property - Shader property, use `ShaderProperty.getByName` to get\n   * @returns Two-dimensional vector\n   */\n  getVector2(property: ShaderProperty): Vector2;\n\n  getVector2(property: string | ShaderProperty): Vector2 {\n    return this.getPropertyValue(property);\n  }\n\n  /**\n   * Set two-dimensional vector from shader property name.\n   * @remarks Correspondence includes vec2、ivec2 and bvec2 shader property type.\n   * @param property - Shader property name\n   * @param value - Two-dimensional vector\n   */\n  setVector2(property: string, value: Vector2): void;\n\n  /**\n   * Set two-dimensional vector from shader property.\n   * @remarks Correspondence includes vec2、ivec2 and bvec2 shader property type.\n   * @param property - Shader property, use `ShaderProperty.getByName` to get\n   * @param value - Two-dimensional vector\n   */\n  setVector2(property: ShaderProperty, value: Vector2): void;\n\n  setVector2(property: string | ShaderProperty, value: Vector2): void {\n    this._setPropertyValue(property, ShaderPropertyType.Vector2, value);\n  }\n\n  /**\n   * Get vector3 by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Three-dimensional vector\n   */\n  getVector3(propertyName: string): Vector3;\n\n  /**\n   * Get vector3 by shader property.\n   * @param property - Shader property, use `ShaderProperty.getByName` to get\n   * @returns Three-dimensional vector\n   */\n  getVector3(property: ShaderProperty): Vector3;\n\n  getVector3(property: string | ShaderProperty): Vector3 {\n    return this.getPropertyValue(property);\n  }\n\n  /**\n   * Set three dimensional vector by shader property name.\n   * @remarks Correspondence includes vec3、ivec3 and bvec3 shader property type.\n   * @param property - Shader property name\n   * @param value - Three-dimensional vector\n   */\n  setVector3(property: string, value: Vector3): void;\n\n  /**\n   * Set three dimensional vector by shader property.\n   * @remarks Correspondence includes vec3、ivec3 and bvec3 shader property type.\n   * @param property - Shader property, use `ShaderProperty.getByName` to get\n   * @param value - Three-dimensional vector\n   */\n  setVector3(property: ShaderProperty, value: Vector3): void;\n\n  setVector3(property: string | ShaderProperty, value: Vector3): void {\n    this._setPropertyValue(property, ShaderPropertyType.Vector3, value);\n  }\n\n  /**\n   * Get vector4 by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Four-dimensional vector\n   */\n  getVector4(propertyName: string): Vector4;\n\n  /**\n   * Get vector4 by shader property.\n   * @param property - Shader property, use `ShaderProperty.getByName` to get\n   * @returns Four-dimensional vector\n   */\n  getVector4(property: ShaderProperty): Vector4;\n\n  getVector4(property: string | ShaderProperty): Vector4 {\n    return this.getPropertyValue(property);\n  }\n\n  /**\n   * Set four-dimensional vector by shader property name.\n   * @remarks Correspondence includes vec4、ivec4 and bvec4 shader property type.\n   * @param property - Shader property name\n   * @param value - Four-dimensional vector\n   */\n  setVector4(property: string, value: Vector4): void;\n\n  /**\n   * Set four-dimensional vector by shader property.\n   * @remarks Correspondence includes vec4、ivec4 and bvec4 shader property type.\n   * @param property - Shader property, use `ShaderProperty.getByName` to get\n   * @param value - Four-dimensional vector\n   */\n  setVector4(property: ShaderProperty, value: Vector4): void;\n\n  setVector4(property: string | ShaderProperty, value: Vector4): void {\n    this._setPropertyValue(property, ShaderPropertyType.Vector4, value);\n  }\n\n  /**\n   * Get matrix by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Matrix\n   */\n  getMatrix(propertyName: string): Matrix;\n\n  /**\n   * Get matrix by shader property.\n   * @param property - Shader property, use `ShaderProperty.getByName` to get\n   * @returns Matrix\n   */\n  getMatrix(property: ShaderProperty): Matrix;\n\n  getMatrix(property: string | ShaderProperty): Matrix {\n    return this.getPropertyValue(property);\n  }\n\n  /**\n   * Set matrix by shader property name.\n   * @remarks Correspondence includes matrix shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Matrix\n   */\n  setMatrix(propertyName: string, value: Matrix);\n\n  /**\n   * Set matrix by shader property.\n   * @remarks Correspondence includes matrix shader property type.\n   * @param property - Shader property, use `ShaderProperty.getByName` to get\n   * @param value - Matrix\n   */\n  setMatrix(property: ShaderProperty, value: Matrix);\n\n  setMatrix(property: string | ShaderProperty, value: Matrix): void {\n    this._setPropertyValue(property, ShaderPropertyType.Matrix, value);\n  }\n\n  /**\n   * Get color by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Color\n   */\n  getColor(propertyName: string): Color;\n\n  /**\n   * Get color by shader property.\n   * @param property - Shader property, use `ShaderProperty.getByName` to get\n   * @returns Color\n   */\n  getColor(property: ShaderProperty): Color;\n\n  getColor(property: string | ShaderProperty): Color {\n    return this.getPropertyValue(property);\n  }\n\n  /**\n   * Set color by shader property name.\n   * @remarks Correspondence includes vec4 shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Color\n   */\n  setColor(propertyName: string, value: Color): void;\n\n  /**\n   * Set color by shader property.\n   * @remarks Correspondence includes vec4 shader property type.\n   * @param property - Shader property, use `ShaderProperty.getByName` to get\n   * @param value - Color\n   */\n  setColor(property: ShaderProperty, value: Color): void;\n\n  setColor(property: string | ShaderProperty, value: Color): void {\n    this._setPropertyValue(property, ShaderPropertyType.Color, value);\n  }\n\n  /**\n   * Get texture by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Texture\n   */\n  getTexture(propertyName: string): Texture;\n\n  /**\n   * Get texture by shader property.\n   * @param property - Shader property, use `ShaderProperty.getByName` to get\n   * @returns Texture\n   */\n  getTexture(property: ShaderProperty): Texture;\n\n  getTexture(property: string | ShaderProperty): Texture {\n    return this.getPropertyValue(property);\n  }\n\n  /**\n   * Set texture by shader property name.\n   * @param propertyName - Shader property name\n   * @param value - Texture\n   */\n  setTexture(propertyName: string, value: Texture): void;\n\n  /**\n   * Set texture by shader property.\n   * @param property - Shader property, use `ShaderProperty.getByName` to get\n   * @param value - Texture\n   */\n  setTexture(property: ShaderProperty, value: Texture): void;\n\n  setTexture(property: string | ShaderProperty, value: Texture): void {\n    const refCount = this._refCount;\n    if (refCount > 0) {\n      const lastValue = this.getPropertyValue<Texture>(property);\n      lastValue && lastValue._addReferCount(-refCount);\n      value && value._addReferCount(refCount);\n    }\n    this._setPropertyValue(property, ShaderPropertyType.Texture, value);\n  }\n\n  /**\n   * Get texture array by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Texture array\n   */\n  getTextureArray(propertyName: string): Texture[];\n\n  /**\n   * Get texture array by shader property.\n   * @param property - Shader property, use `ShaderProperty.getByName` to get\n   * @returns Texture array\n   */\n  getTextureArray(property: ShaderProperty): Texture[];\n\n  getTextureArray(property: string | ShaderProperty): Texture[] {\n    return this.getPropertyValue(property);\n  }\n\n  /**\n   * Set texture array by shader property name.\n   * @param propertyName - Shader property name\n   * @param value - Texture array\n   */\n  setTextureArray(propertyName: string, value: Texture[]): void;\n\n  /**\n   * Set texture array by shader property.\n   * @param property - Shader property, use `ShaderProperty.getByName` to get\n   * @param value - Texture array\n   */\n  setTextureArray(property: ShaderProperty, value: Texture[]): void;\n\n  setTextureArray(property: string | ShaderProperty, value: Texture[]): void {\n    const refCount = this._refCount;\n    if (refCount > 0) {\n      const lastValue = this.getPropertyValue<Texture[]>(property);\n      if (lastValue) {\n        for (let i = 0, n = lastValue.length; i < n; i++) {\n          lastValue[i]._addReferCount(-refCount);\n        }\n      }\n      if (value) {\n        for (let i = 0, n = value.length; i < n; i++) {\n          value[i]._addReferCount(refCount);\n        }\n      }\n    }\n    this._setPropertyValue(property, ShaderPropertyType.TextureArray, value);\n  }\n\n  /**\n   * Get shader property value set on this shaderData.\n   * @param property - Shader property\n   * @returns Property value\n   */\n  getPropertyValue<T extends ShaderPropertyValueType>(property: string | ShaderProperty): T {\n    if (typeof property === \"string\") {\n      property = ShaderProperty.getByName(property);\n    }\n    return this._propertyValueMap[property._uniqueId] as T;\n  }\n\n  /**\n   * Enable macro with name.\n   * @param macroName - Macro name\n   */\n  enableMacro(macroName: string): void;\n\n  /**\n   * Enable macro with name and value.\n   * @remarks Name and value will combine, it's equal the macro of \"name value\".\n   * @param name - Macro name\n   * @param value - Macro value\n   */\n  enableMacro(name: string, value: string): void;\n\n  /**\n   * Enable macro with shaderMacro.\n   * @param macro - Shader macro\n   */\n  enableMacro(macro: ShaderMacro): void;\n\n  enableMacro(macro: string | ShaderMacro, value?: string): void {\n    if (typeof macro === \"string\") {\n      macro = ShaderMacro.getByName(macro, value);\n    }\n    const nameID = macro._nameId;\n    const lastMacro = this._macroMap[nameID];\n    if (lastMacro !== macro) {\n      const macroCollection = this._macroCollection;\n      lastMacro && macroCollection.disable(lastMacro);\n      macroCollection.enable(macro);\n      this._macroMap[nameID] = macro;\n    }\n  }\n\n  /**\n   * Disable macro.\n   * @param macroName - Macro name\n   */\n  disableMacro(macroName: string): void;\n\n  /**\n   * Disable macro.\n   * @param macro - Shader macro\n   */\n  disableMacro(macro: ShaderMacro): void;\n\n  disableMacro(macro: string | ShaderMacro): void {\n    let nameID: number;\n    if (typeof macro === \"string\") {\n      nameID = ShaderMacro._macroNameIdMap[macro];\n      if (nameID === undefined) {\n        return;\n      }\n    } else {\n      nameID = macro._nameId;\n    }\n\n    const currentMacro = this._macroMap[nameID];\n    if (currentMacro) {\n      this._macroCollection.disable(currentMacro);\n      delete this._macroMap[nameID];\n    }\n  }\n\n  /**\n   * Get shader macro array that are currently enabled for ShaderData.\n   */\n  getMacros(): ShaderMacro[];\n  /**\n   * Get shader macro array that are currently enabled for ShaderData.\n   * @param out - Shader macro array\n   */\n  getMacros(out: ShaderMacro[]): void;\n\n  getMacros(out?: ShaderMacro[]): ShaderMacro[] | void {\n    if (out) {\n      const macroMap = this._macroMap;\n      out.length = 0;\n      for (var key in macroMap) {\n        out.push(macroMap[key]);\n      }\n    } else {\n      return Object.values(this._macroMap);\n    }\n  }\n\n  /**\n   * Get all shader properties that have been set on this shaderData\n   * @returns  All shader properties\n   */\n  getProperties(): ShaderProperty[];\n\n  /**\n   * Get all shader properties that have been set on this shaderData\n   * @param out - All shader properties\n   */\n  getProperties(out: ShaderProperty[]): void;\n\n  getProperties(out?: ShaderProperty[]): void | ShaderProperty[] {\n    let properties: ShaderProperty[];\n    if (out) {\n      out.length = 0;\n      properties = out;\n    } else {\n      properties = [];\n    }\n\n    const propertyValueMap = this._propertyValueMap;\n    const propertyIdMap = ShaderProperty._propertyIdMap;\n    for (let key in propertyValueMap) {\n      properties.push(propertyIdMap[key]);\n    }\n\n    if (!out) {\n      return properties;\n    }\n  }\n\n  clone(): ShaderData {\n    const shaderData = new ShaderData(this._group);\n    this.cloneTo(shaderData);\n    return shaderData;\n  }\n\n  cloneTo(target: ShaderData): void {\n    CloneManager.deepCloneObject(this._macroCollection, target._macroCollection, new Map<Object, Object>());\n    Object.assign(target._macroMap, this._macroMap);\n    const referCount = target._getReferCount();\n    const propertyValueMap = this._propertyValueMap;\n    const targetPropertyValueMap = target._propertyValueMap;\n    const keys = Object.keys(propertyValueMap);\n    for (let i = 0, n = keys.length; i < n; i++) {\n      const k = keys[i];\n      const property = <ShaderPropertyValueType>propertyValueMap[k];\n      if (property != null) {\n        if (typeof property === \"number\") {\n          targetPropertyValueMap[k] = property;\n        } else if (property instanceof Texture) {\n          targetPropertyValueMap[k] = property;\n          referCount > 0 && property._addReferCount(referCount);\n        } else if (property instanceof Array || property instanceof Float32Array || property instanceof Int32Array) {\n          targetPropertyValueMap[k] = property.slice();\n        } else {\n          const targetProperty = targetPropertyValueMap[k];\n          if (targetProperty) {\n            targetProperty.copyFrom(property);\n          } else {\n            targetPropertyValueMap[k] = property.clone();\n          }\n        }\n      } else {\n        targetPropertyValueMap[k] = property;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _setPropertyValue<T extends ShaderPropertyValueType>(\n    property: string | ShaderProperty,\n    type: ShaderPropertyType,\n    value: T\n  ): void {\n    if (typeof property === \"string\") {\n      property = ShaderProperty.getByName(property);\n    }\n\n    if (property._group !== this._group) {\n      if (property._group === undefined) {\n        property._group = this._group;\n      } else {\n        throw `Shader property ${property.name} has been used as ${ShaderDataGroup[property._group]} group.`;\n      }\n    }\n\n    if (property._type !== type) {\n      if (property._type === undefined) {\n        property._type = type;\n      } else {\n        throw `Shader property ${property.name} has been used as ${ShaderPropertyType[property._type]} type.`;\n      }\n    }\n\n    this._propertyValueMap[property._uniqueId] = value;\n  }\n\n  /**\n   * @internal\n   */\n  _getReferCount(): number {\n    return this._refCount;\n  }\n\n  /**\n   * @internal\n   */\n  _addReferCount(value: number): void {\n    this._refCount += value;\n    const properties = this._propertyValueMap;\n    for (const k in properties) {\n      const property = properties[k];\n      // @todo: Separate array to speed performance.\n      if (property && property instanceof Texture) {\n        property._addReferCount(value);\n      }\n    }\n  }\n}\n\nexport type ShaderPropertyValueType =\n  | number\n  | Vector2\n  | Vector3\n  | Vector4\n  | Color\n  | Matrix\n  | Texture\n  | Texture[]\n  | Int32Array\n  | Float32Array;\n","import { SpriteMask, SpriteMaskInteraction, SpriteRenderer } from \"../2d\";\nimport { ShaderTagKey } from \"../shader\";\nimport { SubRenderElement } from \"./SubRenderElement\";\n\n/**\n * @internal\n */\nexport class BatchUtils {\n  protected static _disableBatchTag: ShaderTagKey = ShaderTagKey.getByName(\"spriteDisableBatching\");\n\n  static canBatchSprite(elementA: SubRenderElement, elementB: SubRenderElement): boolean {\n    if (elementB.shaderPasses[0].getTagValue(BatchUtils._disableBatchTag) === true) {\n      return false;\n    }\n    if (elementA.subChunk.chunk !== elementB.subChunk.chunk) {\n      return false;\n    }\n\n    const rendererA = <SpriteRenderer>elementA.component;\n    const rendererB = <SpriteRenderer>elementB.component;\n    const maskInteractionA = rendererA.maskInteraction;\n\n    // Compare mask, texture and material\n    return (\n      maskInteractionA === rendererB.maskInteraction &&\n      (maskInteractionA === SpriteMaskInteraction.None || rendererA.maskLayer === rendererB.maskLayer) &&\n      elementA.texture === elementB.texture &&\n      elementA.material === elementB.material\n    );\n  }\n\n  static canBatchSpriteMask(elementA: SubRenderElement, elementB: SubRenderElement): boolean {\n    if (elementA.subChunk.chunk !== elementB.subChunk.chunk) {\n      return false;\n    }\n\n    const alphaCutoffProperty = SpriteMask._alphaCutoffProperty;\n\n    // Compare renderer property\n    return (\n      elementA.texture === elementB.texture &&\n      (<SpriteMask>elementA.component).shaderData.getFloat(alphaCutoffProperty) ===\n        (<SpriteMask>elementB.component).shaderData.getFloat(alphaCutoffProperty)\n    );\n  }\n\n  static batchFor2D(elementA: SubRenderElement, elementB?: SubRenderElement): void {\n    const subChunk = elementB ? elementB.subChunk : elementA.subChunk;\n    const { chunk, indices: subChunkIndices } = subChunk;\n\n    const length = subChunkIndices.length;\n    let startIndex = chunk.updateIndexLength;\n    if (elementB) {\n      elementA.subChunk.subMesh.count += length;\n    } else {\n      // Reset subMesh\n      const subMesh = subChunk.subMesh;\n      subMesh.start = startIndex;\n      subMesh.count = length;\n    }\n\n    const { start, size } = subChunk.vertexArea;\n    const vertexOffset = start / 9;\n    const indices = chunk.indices;\n    for (let i = 0; i < length; ++i) {\n      indices[startIndex++] = vertexOffset + subChunkIndices[i];\n    }\n    chunk.updateIndexLength += length;\n    chunk.updateVertexStart = Math.min(chunk.updateVertexStart, start);\n    chunk.updateVertexEnd = Math.max(chunk.updateVertexEnd, start + size);\n  }\n}\n","export enum ActiveChangeFlag {\n  None = 0x0,\n  Scene = 0x1,\n  Hierarchy = 0x2,\n  All = 0x3\n}\n","import { IReferable } from \"./asset/IReferable\";\nimport { EngineObject } from \"./base\";\nimport { assignmentClone, ignoreClone } from \"./clone/CloneManager\";\nimport { Entity } from \"./Entity\";\nimport { ActiveChangeFlag } from \"./enums/ActiveChangeFlag\";\nimport { Scene } from \"./Scene\";\n\n/**\n * The base class of the components.\n */\nexport class Component extends EngineObject {\n  /** @internal */\n  @ignoreClone\n  _entity: Entity;\n  /** @internal */\n  @ignoreClone\n  _awoken: boolean = false;\n\n  @ignoreClone\n  protected _phasedActiveInScene: boolean = false;\n\n  @ignoreClone\n  private _phasedActive: boolean = false;\n  @assignmentClone\n  private _enabled: boolean = true;\n\n  /**\n   * Indicates whether the component is enabled.\n   */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n\n  set enabled(value: boolean) {\n    if (value !== this._enabled) {\n      this._enabled = value;\n      if (this._entity._isActiveInScene) {\n        if (value) {\n          if (!this._phasedActiveInScene) {\n            this._phasedActiveInScene = true;\n            this._onEnableInScene();\n          }\n        } else {\n          if (this._phasedActiveInScene) {\n            this._phasedActiveInScene = false;\n            this._onDisableInScene();\n          }\n        }\n      }\n      if (this._entity.isActiveInHierarchy) {\n        if (value) {\n          if (!this._phasedActive) {\n            this._phasedActive = true;\n            this._onEnable();\n          }\n        } else {\n          if (this._phasedActive) {\n            this._phasedActive = false;\n            this._onDisable();\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * The entity which the component belongs to.\n   */\n  get entity(): Entity {\n    return this._entity;\n  }\n\n  /**\n   * The scene which the component's entity belongs to.\n   */\n  get scene(): Scene {\n    return this._entity.scene;\n  }\n\n  constructor(entity: Entity) {\n    super(entity.engine);\n    this._entity = entity;\n  }\n\n  /**\n   * @internal\n   */\n  _onAwake(): void {}\n\n  /**\n   * @internal\n   */\n  _onEnable(): void {}\n\n  /**\n   * @internal\n   */\n  _onDisable(): void {}\n\n  /**\n   * @internal\n   */\n  _onEnableInScene(): void {}\n\n  /**\n   * @internal\n   */\n  _onDisableInScene(): void {}\n\n  /**\n   * @internal\n   */\n  _setActive(value: boolean, activeChangeFlag: ActiveChangeFlag): void {\n    const entity = this._entity;\n\n    // Process active in scene, precautions are the same as below\n    if (activeChangeFlag & ActiveChangeFlag.Scene) {\n      if (value) {\n        if (!this._phasedActiveInScene && entity._isActiveInScene && this._enabled) {\n          this._phasedActiveInScene = true;\n          this._onEnableInScene();\n        }\n      } else {\n        if (this._phasedActiveInScene && !(entity._isActiveInScene && this._enabled)) {\n          this._phasedActiveInScene = false;\n          this._onDisableInScene();\n        }\n      }\n    }\n\n    // Process active in hierarchy\n    if (activeChangeFlag & ActiveChangeFlag.Hierarchy) {\n      if (value) {\n        // Awake condition is un awake && current entity is active in hierarchy\n        if (!this._awoken && entity._isActiveInHierarchy) {\n          this._awoken = true;\n          this._onAwake();\n        }\n        // Developer maybe do `isActive = false` in `onAwake` method\n        // Enable condition is phased active state is false && current component is active in hierarchy\n        if (!this._phasedActive && entity._isActiveInHierarchy && this._enabled) {\n          this._phasedActive = true;\n          this._onEnable();\n        }\n      } else {\n        // Disable condition is phased active state is true && current component is inActive in hierarchy\n        if (this._phasedActive && !(entity._isActiveInHierarchy && this._enabled)) {\n          this._phasedActive = false;\n          this._onDisable();\n        }\n      }\n    }\n  }\n\n  protected _addResourceReferCount(resource: IReferable, count: number): void {\n    this._entity._isTemplate || resource._addReferCount(count);\n  }\n\n  /**\n   * @internal\n   */\n  protected override _onDestroy(): void {\n    super._onDestroy();\n    const entity = this._entity;\n    entity._removeComponent(this);\n    if (this._enabled) {\n      entity._isActiveInScene && this._onDisableInScene();\n      entity._isActiveInHierarchy && this._onDisable();\n    }\n  }\n}\n","import { Component } from \"./Component\";\nimport { Entity } from \"./Entity\";\n\ntype ComponentConstructor = new (entity: Entity) => Component;\n\n/**\n * @internal\n * Used for component dependency registration.\n */\nexport class ComponentsDependencies {\n  private static _invDependenciesMap = new Map<ComponentConstructor, ComponentConstructor[]>();\n\n  static _dependenciesMap = new Map<ComponentConstructor, DependentInfo>();\n\n  /**\n   * @internal\n   */\n  static _addCheck(entity: Entity, type: ComponentConstructor): void {\n    while (type !== Component) {\n      const dependentInfo = ComponentsDependencies._dependenciesMap.get(type);\n      if (dependentInfo) {\n        const { components, mode } = dependentInfo;\n        for (let i = 0, n = components.length; i < n; i++) {\n          const dependentComponent = components[i];\n          if (!entity.getComponent(dependentComponent)) {\n            if (mode === DependentMode.AutoAdd) {\n              entity.addComponent(dependentComponent);\n            } else {\n              throw `Should add ${dependentComponent.name} before adding ${type.name}`;\n            }\n          }\n        }\n      }\n      type = Object.getPrototypeOf(type);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _removeCheck(entity: Entity, type: ComponentConstructor): void {\n    while (type !== Component) {\n      const invDependencies = ComponentsDependencies._invDependenciesMap.get(type);\n      if (invDependencies) {\n        for (let i = 0, len = invDependencies.length; i < len; i++) {\n          if (entity.getComponent(invDependencies[i])) {\n            throw `Should remove ${invDependencies[i].name} before adding ${type.name}`;\n          }\n        }\n      }\n      type = Object.getPrototypeOf(type);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _addDependency(\n    targetInfo: DependentInfo,\n    dependentComponent: ComponentConstructor,\n    map: Map<DependentInfo, ComponentConstructor[]>\n  ): void {\n    let components = map.get(targetInfo);\n    if (!components) {\n      map.set(targetInfo, [dependentComponent]);\n    } else {\n      components.includes(dependentComponent) || components.push(dependentComponent);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _addInvDependency(currentComponent: ComponentConstructor, dependentComponent: ComponentConstructor): void {\n    const map = this._invDependenciesMap;\n    let components = map.get(currentComponent);\n    if (!components) {\n      map.set(currentComponent, [dependentComponent]);\n    } else {\n      components.includes(dependentComponent) || components.push(dependentComponent);\n    }\n  }\n\n  private constructor() {}\n}\n\n/**\n * Declare dependent component.\n * @param component - Dependent component\n * @param dependentMode - Dependent mode\n */\nexport function dependentComponents(component: ComponentConstructor, dependentMode?: DependentMode);\n\n/**\n * Declare dependent components.\n * @param components - Dependent components\n * @param dependentMode - Dependent mode\n */\nexport function dependentComponents(components: ComponentConstructor[], dependentMode?: DependentMode);\n\nexport function dependentComponents(\n  componentOrComponents: ComponentConstructor | ComponentConstructor[],\n  dependentMode: DependentMode = DependentMode.CheckOnly\n) {\n  const components = Array.isArray(componentOrComponents) ? componentOrComponents : [componentOrComponents];\n\n  return function <T extends ComponentConstructor>(target: T): void {\n    ComponentsDependencies._dependenciesMap.set(target, { mode: dependentMode, components });\n    components.forEach((component) => ComponentsDependencies._addInvDependency(component, target));\n  };\n}\n\n/**\n * Dependent mode.\n */\nexport enum DependentMode {\n  /** Check only, throw error if dependent components do not exist. */\n  CheckOnly,\n  /** Auto add if dependent components do not exist. */\n  AutoAdd\n}\n\n/**\n * @internal\n */\ninterface DependentInfo {\n  mode: DependentMode;\n  components: ComponentConstructor[];\n}\n","import { UpdateFlagManager } from \"./UpdateFlagManager\";\nimport { Utils } from \"./Utils\";\n\n/**\n * Used to update tags.\n */\nexport abstract class UpdateFlag {\n  /** @internal */\n  _flagManagers: UpdateFlagManager[] = [];\n\n  /**\n   * Dispatch.\n   * @param bit - Bit\n   * @param param - Parameter\n   */\n  abstract dispatch(bit?: number, param?: Object): void;\n\n  /**\n   * Clear.\n   */\n  clearFromManagers(): void {\n    this._removeFromManagers();\n    this._flagManagers.length = 0;\n  }\n\n  /**\n   * Destroy.\n   */\n  destroy(): void {\n    this._removeFromManagers();\n    this._flagManagers = null;\n  }\n\n  private _removeFromManagers(): void {\n    const flagManagers = this._flagManagers;\n    for (let i = 0, n = flagManagers.length; i < n; i++) {\n      Utils.removeFromArray(flagManagers[i]._updateFlags, this);\n    }\n  }\n}\n","import { UpdateFlag } from \"./UpdateFlag\";\n\n/**\n * Bool update flag.\n */\nexport class BoolUpdateFlag extends UpdateFlag {\n  /** Bool flag. */\n  flag: boolean = true;\n\n  /**\n   * @inheritdoc\n   */\n  dispatch(): void {\n    this.flag = true;\n  }\n}\n","import { MathUtil, Matrix, Matrix3x3, Quaternion, Vector3 } from \"@galacean/engine-math\";\nimport { BoolUpdateFlag } from \"./BoolUpdateFlag\";\nimport { deepClone, ignoreClone } from \"./clone/CloneManager\";\nimport { Component } from \"./Component\";\nimport { Entity } from \"./Entity\";\nimport { UpdateFlagManager } from \"./UpdateFlagManager\";\n\n/**\n * Used to implement transformation related functions.\n */\nexport class Transform extends Component {\n  private static _tempQuat0: Quaternion = new Quaternion();\n  private static _tempVec30: Vector3 = new Vector3();\n  private static _tempVec31: Vector3 = new Vector3();\n  private static _tempVec32: Vector3 = new Vector3();\n  private static _tempMat30: Matrix3x3 = new Matrix3x3();\n  private static _tempMat31: Matrix3x3 = new Matrix3x3();\n  private static _tempMat32: Matrix3x3 = new Matrix3x3();\n  private static _tempMat41: Matrix = new Matrix();\n  private static _tempMat42: Matrix = new Matrix();\n\n  @deepClone\n  private _position: Vector3 = new Vector3();\n  @deepClone\n  private _rotation: Vector3 = new Vector3();\n  @deepClone\n  private _rotationQuaternion: Quaternion = new Quaternion();\n  @deepClone\n  private _scale: Vector3 = new Vector3(1, 1, 1);\n  @deepClone\n  private _worldPosition: Vector3 = new Vector3();\n  @deepClone\n  private _worldRotation: Vector3 = new Vector3();\n  @deepClone\n  private _worldRotationQuaternion: Quaternion = new Quaternion();\n  @deepClone\n  private _lossyWorldScale: Vector3 = new Vector3(1, 1, 1);\n  @deepClone\n  private _localMatrix: Matrix = new Matrix();\n  @deepClone\n  private _worldMatrix: Matrix = new Matrix();\n  @ignoreClone\n  private _worldForward: Vector3 = null;\n  @ignoreClone\n  private _worldRight: Vector3 = null;\n  @ignoreClone\n  private _worldUp: Vector3 = null;\n\n  @ignoreClone\n  private _isParentDirty: boolean = true;\n  @ignoreClone\n  private _parentTransformCache: Transform = null;\n  private _dirtyFlag: number = TransformModifyFlags.WmWpWeWqWs;\n\n  /** @internal */\n  @ignoreClone\n  _updateFlagManager: UpdateFlagManager = new UpdateFlagManager();\n\n  /**\n   * Local position.\n   */\n  get position(): Vector3 {\n    return this._position;\n  }\n\n  set position(value: Vector3) {\n    if (this._position !== value) {\n      this._position.copyFrom(value);\n    }\n  }\n\n  /**\n   * World position.\n   */\n  get worldPosition(): Vector3 {\n    const worldPosition = this._worldPosition;\n    if (this._isContainDirtyFlag(TransformModifyFlags.WorldPosition)) {\n      //@ts-ignore\n      worldPosition._onValueChanged = null;\n      if (this._getParentTransform()) {\n        this.worldMatrix.getTranslation(worldPosition);\n      } else {\n        worldPosition.copyFrom(this._position);\n      }\n      //@ts-ignore\n      worldPosition._onValueChanged = this._onWorldPositionChanged;\n      this._setDirtyFlagFalse(TransformModifyFlags.WorldPosition);\n    }\n\n    return worldPosition;\n  }\n\n  set worldPosition(value: Vector3) {\n    if (this._worldPosition !== value) {\n      this._worldPosition.copyFrom(value);\n    }\n  }\n\n  /**\n   * Local rotation, defining the rotation value in degrees.\n   * Rotations are performed around the Y axis, the X axis, and the Z axis, in that order.\n   */\n  get rotation(): Vector3 {\n    const rotation = this._rotation;\n    if (this._isContainDirtyFlag(TransformModifyFlags.LocalEuler)) {\n      //@ts-ignore\n      rotation._onValueChanged = null;\n      this._rotationQuaternion.toEuler(rotation);\n      rotation.scale(MathUtil.radToDegreeFactor); // radians to degrees\n      //@ts-ignore\n      rotation._onValueChanged = this._onRotationChanged;\n      this._setDirtyFlagFalse(TransformModifyFlags.LocalEuler);\n    }\n\n    return rotation;\n  }\n\n  set rotation(value: Vector3) {\n    if (this._rotation !== value) {\n      this._rotation.copyFrom(value);\n    }\n  }\n\n  /**\n   * World rotation, defining the rotation value in degrees.\n   * Rotations are performed around the Y axis, the X axis, and the Z axis, in that order.\n   */\n  get worldRotation(): Vector3 {\n    const worldRotation = this._worldRotation;\n    if (this._isContainDirtyFlag(TransformModifyFlags.WorldEuler)) {\n      //@ts-ignore\n      worldRotation._onValueChanged = null;\n      this.worldRotationQuaternion.toEuler(worldRotation);\n      worldRotation.scale(MathUtil.radToDegreeFactor); // Radian to angle\n      //@ts-ignore\n      worldRotation._onValueChanged = this._onWorldRotationChanged;\n      this._setDirtyFlagFalse(TransformModifyFlags.WorldEuler);\n    }\n    return worldRotation;\n  }\n\n  set worldRotation(value: Vector3) {\n    if (this._worldRotation !== value) {\n      this._worldRotation.copyFrom(value);\n    }\n  }\n\n  /**\n   * Local rotation, defining the rotation by using a unit quaternion.\n   */\n  get rotationQuaternion(): Quaternion {\n    const rotationQuaternion = this._rotationQuaternion;\n    if (this._isContainDirtyFlag(TransformModifyFlags.LocalQuat)) {\n      //@ts-ignore\n      rotationQuaternion._onValueChanged = null;\n      Quaternion.rotationEuler(\n        MathUtil.degreeToRadian(this._rotation.x),\n        MathUtil.degreeToRadian(this._rotation.y),\n        MathUtil.degreeToRadian(this._rotation.z),\n        rotationQuaternion\n      );\n      //@ts-ignore\n      rotationQuaternion._onValueChanged = this._onRotationQuaternionChanged;\n      this._setDirtyFlagFalse(TransformModifyFlags.LocalQuat);\n    }\n    return rotationQuaternion;\n  }\n\n  set rotationQuaternion(value: Quaternion) {\n    if (this._rotationQuaternion !== value) {\n      if (value.normalized) {\n        this._rotationQuaternion.copyFrom(value);\n      } else {\n        Quaternion.normalize(value, this._rotationQuaternion);\n      }\n    } else {\n      value.normalized || value.normalize();\n    }\n  }\n\n  /**\n   * World rotation, defining the rotation by using a unit quaternion.\n   */\n  get worldRotationQuaternion(): Quaternion {\n    const worldRotationQuaternion = this._worldRotationQuaternion;\n    if (this._isContainDirtyFlag(TransformModifyFlags.WorldQuat)) {\n      //@ts-ignore\n      worldRotationQuaternion._onValueChanged = null;\n      const parent = this._getParentTransform();\n      if (parent != null) {\n        Quaternion.multiply(parent.worldRotationQuaternion, this.rotationQuaternion, worldRotationQuaternion);\n      } else {\n        worldRotationQuaternion.copyFrom(this.rotationQuaternion);\n      }\n      //@ts-ignore\n      worldRotationQuaternion._onValueChanged = this._onWorldRotationQuaternionChanged;\n      this._setDirtyFlagFalse(TransformModifyFlags.WorldQuat);\n    }\n    return worldRotationQuaternion;\n  }\n\n  set worldRotationQuaternion(value: Quaternion) {\n    if (this._worldRotationQuaternion !== value) {\n      if (value.normalized) {\n        this._worldRotationQuaternion.copyFrom(value);\n      } else {\n        Quaternion.normalize(value, this._worldRotationQuaternion);\n      }\n    }\n    value.normalized || value.normalize();\n  }\n\n  /**\n   * Local scaling.\n   */\n  get scale(): Vector3 {\n    return this._scale;\n  }\n\n  set scale(value: Vector3) {\n    if (this._scale !== value) {\n      this._scale.copyFrom(value);\n    }\n  }\n\n  /**\n   * Local lossy scaling.\n   * @remarks The value obtained may not be correct under certain conditions(for example, the parent node has scaling,\n   * and the child node has a rotation), the scaling will be tilted. Vector3 cannot be used to correctly represent the scaling. Must use Matrix3x3.\n   */\n  get lossyWorldScale(): Vector3 {\n    if (this._isContainDirtyFlag(TransformModifyFlags.WorldScale)) {\n      if (this._getParentTransform()) {\n        const scaleMat = this._getScaleMatrix();\n        const e = scaleMat.elements;\n        this._lossyWorldScale.set(e[0], e[4], e[8]);\n      } else {\n        this._lossyWorldScale.copyFrom(this._scale);\n      }\n      this._setDirtyFlagFalse(TransformModifyFlags.WorldScale);\n    }\n    return this._lossyWorldScale;\n  }\n\n  /**\n   * Local matrix.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get localMatrix(): Matrix {\n    if (this._isContainDirtyFlag(TransformModifyFlags.LocalMatrix)) {\n      Matrix.affineTransformation(this._scale, this.rotationQuaternion, this._position, this._localMatrix);\n      this._setDirtyFlagFalse(TransformModifyFlags.LocalMatrix);\n    }\n    return this._localMatrix;\n  }\n\n  set localMatrix(value: Matrix) {\n    if (this._localMatrix !== value) {\n      this._localMatrix.copyFrom(value);\n    }\n\n    // @ts-ignore\n    this._position._onValueChanged = this._rotationQuaternion._onValueChanged = this._scale._onValueChanged = null;\n    this._localMatrix.decompose(this._position, this._rotationQuaternion, this._scale);\n    // @ts-ignore\n    this._position._onValueChanged = this._onPositionChanged;\n    // @ts-ignore\n    this._rotationQuaternion._onValueChanged = this._onRotationQuaternionChanged;\n    // @ts-ignore\n    this._scale._onValueChanged = this._onScaleChanged;\n\n    this._setDirtyFlagTrue(TransformModifyFlags.LocalEuler);\n    this._setDirtyFlagFalse(TransformModifyFlags.LocalMatrix | TransformModifyFlags.LocalQuat);\n    this._updateAllWorldFlag();\n  }\n\n  /**\n   * World matrix.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get worldMatrix(): Matrix {\n    if (this._isContainDirtyFlag(TransformModifyFlags.WorldMatrix)) {\n      const parent = this._getParentTransform();\n      if (parent) {\n        Matrix.multiply(parent.worldMatrix, this.localMatrix, this._worldMatrix);\n      } else {\n        this._worldMatrix.copyFrom(this.localMatrix);\n      }\n      this._setDirtyFlagFalse(TransformModifyFlags.WorldMatrix);\n    }\n    return this._worldMatrix;\n  }\n\n  set worldMatrix(value: Matrix) {\n    if (this._worldMatrix !== value) {\n      this._worldMatrix.copyFrom(value);\n    }\n    const parent = this._getParentTransform();\n    if (parent) {\n      Matrix.invert(parent.worldMatrix, Transform._tempMat42);\n      Matrix.multiply(Transform._tempMat42, value, this._localMatrix);\n    } else {\n      this._localMatrix.copyFrom(value);\n    }\n    this.localMatrix = this._localMatrix;\n    this._setDirtyFlagFalse(TransformModifyFlags.WorldMatrix);\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n\n    this._onPositionChanged = this._onPositionChanged.bind(this);\n    this._onWorldPositionChanged = this._onWorldPositionChanged.bind(this);\n    this._onRotationChanged = this._onRotationChanged.bind(this);\n    this._onWorldRotationChanged = this._onWorldRotationChanged.bind(this);\n    this._onRotationQuaternionChanged = this._onRotationQuaternionChanged.bind(this);\n    this._onWorldRotationQuaternionChanged = this._onWorldRotationQuaternionChanged.bind(this);\n    this._onScaleChanged = this._onScaleChanged.bind(this);\n\n    //@ts-ignore\n    this._position._onValueChanged = this._onPositionChanged;\n    //@ts-ignore\n    this._worldPosition._onValueChanged = this._onWorldPositionChanged;\n    //@ts-ignore\n    this._rotation._onValueChanged = this._onRotationChanged;\n    //@ts-ignore\n    this._worldRotation._onValueChanged = this._onWorldRotationChanged;\n    //@ts-ignore\n    this._rotationQuaternion._onValueChanged = this._onRotationQuaternionChanged;\n    //@ts-ignore\n    this._worldRotationQuaternion._onValueChanged = this._onWorldRotationQuaternionChanged;\n    //@ts-ignore\n    this._scale._onValueChanged = this._onScaleChanged;\n  }\n\n  /**\n   * Set local position by X, Y, Z value.\n   * @param x - X coordinate\n   * @param y - Y coordinate\n   * @param z - Z coordinate\n   */\n  setPosition(x: number, y: number, z: number): void {\n    this._position.set(x, y, z);\n  }\n\n  /**\n   * Set local rotation by the X, Y, Z components of the euler angle, unit in degrees.\n   * Rotations are performed around the Y axis, the X axis, and the Z axis, in that order.\n   * @param x - The angle of rotation around the X axis\n   * @param y - The angle of rotation around the Y axis\n   * @param z - The angle of rotation around the Z axis\n   */\n  setRotation(x: number, y: number, z: number): void {\n    this._rotation.set(x, y, z);\n  }\n\n  /**\n   * Set local rotation by the X, Y, Z, and W components of the quaternion.\n   * @param x - X component of quaternion\n   * @param y - Y component of quaternion\n   * @param z - Z component of quaternion\n   * @param w - W component of quaternion\n   */\n  setRotationQuaternion(x: number, y: number, z: number, w: number): void {\n    this._rotationQuaternion.set(x, y, z, w);\n  }\n\n  /**\n   * Set local scaling by scaling values along X, Y, Z axis.\n   * @param x - Scaling along X axis\n   * @param y - Scaling along Y axis\n   * @param z - Scaling along Z axis\n   */\n  setScale(x: number, y: number, z: number): void {\n    this._scale.set(x, y, z);\n  }\n\n  /**\n   * Set world position by X, Y, Z value.\n   * @param x - X coordinate\n   * @param y - Y coordinate\n   * @param z - Z coordinate\n   */\n  setWorldPosition(x: number, y: number, z: number): void {\n    this._worldPosition.set(x, y, z);\n  }\n\n  /**\n   * Set world rotation by the X, Y, Z components of the euler angle, unit in degrees, Yaw/Pitch/Roll sequence.\n   * @param x - The angle of rotation around the X axis\n   * @param y - The angle of rotation around the Y axis\n   * @param z - The angle of rotation around the Z axis\n   */\n  setWorldRotation(x: number, y: number, z: number): void {\n    this._worldRotation.set(x, y, z);\n  }\n\n  /**\n   * Set local rotation by the X, Y, Z, and W components of the quaternion.\n   * @param x - X component of quaternion\n   * @param y - Y component of quaternion\n   * @param z - Z component of quaternion\n   * @param w - W component of quaternion\n   */\n  setWorldRotationQuaternion(x: number, y: number, z: number, w: number): void {\n    this._worldRotationQuaternion.set(x, y, z, w);\n  }\n\n  /**\n   * The forward direction in world space.\n   */\n  get worldForward(): Vector3 {\n    const worldForward = (this._worldForward ||= new Vector3());\n    const e = this.worldMatrix.elements;\n    worldForward.set(-e[8], -e[9], -e[10]);\n    return worldForward.normalize();\n  }\n\n  /**\n   * The right direction in world space.\n   */\n  get worldRight(): Vector3 {\n    const worldRight = (this._worldRight ||= new Vector3());\n    const e = this.worldMatrix.elements;\n    worldRight.set(e[0], e[1], e[2]);\n    return worldRight.normalize();\n  }\n\n  /**\n   * The up direction in world space.\n   */\n  get worldUp(): Vector3 {\n    const worldUp = (this._worldUp ||= new Vector3());\n    const e = this.worldMatrix.elements;\n    worldUp.set(e[4], e[5], e[6]);\n    return worldUp.normalize();\n  }\n\n  /**\n   * Translate in the direction and distance of the translation.\n   * @param translation - Direction and distance of translation\n   * @param relativeToLocal = `true` - Is relative to the local coordinate system\n   */\n  translate(translation: Vector3, relativeToLocal?: boolean): void;\n\n  /**\n   * Translate some distance by x along the x axis, y along the y axis, and z along the z axis.\n   * @param x - Distance along the x axis\n   * @param y - Distance along the y axis\n   * @param z - Distance along the z axis\n   * @param relativeToLocal = `true` - Is relative to the local coordinate system\n   */\n  translate(x: number, y: number, z: number, relativeToLocal?: boolean): void;\n\n  translate(\n    translationOrX: Vector3 | number,\n    relativeToLocalOrY?: boolean | number,\n    z?: number,\n    relativeToLocal?: boolean\n  ): void {\n    if (typeof translationOrX === \"number\") {\n      const translate = Transform._tempVec30;\n      translate.set(translationOrX, <number>relativeToLocalOrY, z);\n      this._translate(translate, relativeToLocal);\n    } else {\n      this._translate(translationOrX, <boolean>relativeToLocalOrY);\n    }\n  }\n\n  /**\n   * Rotate around the passed Vector3.\n   * @param rotation - Euler angle in degrees\n   * @param relativeToLocal = `true` - Is relative to the local coordinate system\n   */\n  rotate(rotation: Vector3, relativeToLocal?: boolean): void;\n\n  /**\n   * Rotate around the passed Vector3.\n   * @param x - Rotation along x axis, in degrees\n   * @param y - Rotation along y axis, in degrees\n   * @param z - Rotation along z axis, in degrees\n   * @param relativeToLocal = `true` - Is relative to the local coordinate system\n   */\n  rotate(x: number, y: number, z: number, relativeToLocal?: boolean): void;\n\n  rotate(\n    rotationOrX: Vector3 | number,\n    relativeToLocalOrY?: boolean | number,\n    z?: number,\n    relativeToLocal?: boolean\n  ): void {\n    if (typeof rotationOrX === \"number\") {\n      this._rotateXYZ(rotationOrX, <number>relativeToLocalOrY, z, relativeToLocal);\n    } else {\n      this._rotateXYZ(rotationOrX.x, rotationOrX.y, rotationOrX.z, <boolean>relativeToLocalOrY);\n    }\n  }\n\n  /**\n   * Rotate around the specified axis according to the specified angle.\n   * @param axis - Rotate axis\n   * @param angle - Rotate angle in degrees\n   * @param relativeToLocal = `true` - Relative to local space\n   */\n  rotateByAxis(axis: Vector3, angle: number, relativeToLocal: boolean = true): void {\n    const rad = angle * MathUtil.degreeToRadFactor;\n    Quaternion.rotationAxisAngle(axis, rad, Transform._tempQuat0);\n    this._rotateByQuat(Transform._tempQuat0, relativeToLocal);\n  }\n\n  /**\n   * Rotate and ensure that the world front vector points to the target world position.\n   * @param targetPosition - Target world position\n   * @param worldUp - Up direction in world space, default is Vector3(0, 1, 0)\n   */\n  lookAt(targetPosition: Vector3, worldUp?: Vector3): void {\n    const zAxis = Transform._tempVec30;\n    Vector3.subtract(this.worldPosition, targetPosition, zAxis);\n    let axisLen = zAxis.length();\n    if (axisLen <= MathUtil.zeroTolerance) {\n      // The current position and the target position are almost the same.\n      return;\n    }\n    zAxis.scale(1 / axisLen);\n    const xAxis = Transform._tempVec31;\n    if (worldUp) {\n      Vector3.cross(worldUp, zAxis, xAxis);\n    } else {\n      xAxis.set(zAxis.z, 0, -zAxis.x);\n    }\n    axisLen = xAxis.length();\n    if (axisLen <= MathUtil.zeroTolerance) {\n      // @todo:\n      // 1.worldUp is（0,0,0）\n      // 2.worldUp is parallel to zAxis\n      return;\n    }\n    xAxis.scale(1 / axisLen);\n    const yAxis = Transform._tempVec32;\n    Vector3.cross(zAxis, xAxis, yAxis);\n\n    const rotMat = Transform._tempMat41;\n    const { elements: e } = rotMat;\n    (e[0] = xAxis.x), (e[1] = xAxis.y), (e[2] = xAxis.z);\n    (e[4] = yAxis.x), (e[5] = yAxis.y), (e[6] = yAxis.z);\n    (e[8] = zAxis.x), (e[9] = zAxis.y), (e[10] = zAxis.z);\n    rotMat.getRotation(this._worldRotationQuaternion);\n  }\n\n  /**\n   * Register world transform change flag.\n   * @returns Change flag\n   */\n  registerWorldChangeFlag(): BoolUpdateFlag {\n    return this._updateFlagManager.createFlag(BoolUpdateFlag);\n  }\n\n  /**\n   * @internal\n   */\n  _parentChange(): void {\n    this._isParentDirty = true;\n    this._updateAllWorldFlag();\n  }\n\n  /**\n   * @internal\n   */\n  _isFrontFaceInvert(): boolean {\n    const scale = this.lossyWorldScale;\n    let isInvert = scale.x < 0;\n    scale.y < 0 && (isInvert = !isInvert);\n    scale.z < 0 && (isInvert = !isInvert);\n    return isInvert;\n  }\n\n  protected override _onDestroy(): void {\n    super._onDestroy();\n    //@ts-ignore\n    this._worldPosition._onValueChanged = null;\n    //@ts-ignore\n    this._rotation._onValueChanged = null;\n    //@ts-ignore\n    this._worldRotation._onValueChanged = null;\n    //@ts-ignore\n    this._rotationQuaternion._onValueChanged = null;\n    //@ts-ignore\n    this._worldRotationQuaternion._onValueChanged = null;\n    //@ts-ignore\n    this._position._onValueChanged = null;\n    //@ts-ignore\n    this._scale._onValueChanged = null;\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix or worldRotationQuaternion) to be false.\n   */\n  private _updateWorldPositionFlag(): void {\n    if (!this._isContainDirtyFlags(TransformModifyFlags.WmWp)) {\n      this._worldAssociatedChange(TransformModifyFlags.WmWp);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionFlag();\n      }\n    }\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * Get worldRotationQuaternion: Will trigger the world rotation (in quaternion) update of itself and all parent entities.\n   * Get worldRotation: Will trigger the world rotation(in euler and quaternion) update of itself and world rotation(in quaternion) update of all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix or worldRotationQuaternion) to be false.\n   */\n  private _updateWorldRotationFlag() {\n    if (!this._isContainDirtyFlags(TransformModifyFlags.WmWeWq)) {\n      this._worldAssociatedChange(TransformModifyFlags.WmWeWq);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionAndRotationFlag(); // Rotation update of parent entity will trigger world position and rotation update of all child entity.\n      }\n    }\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * Get worldRotationQuaternion: Will trigger the world rotation (in quaternion) update of itself and all parent entities.\n   * Get worldRotation: Will trigger the world rotation(in euler and quaternion) update of itself and world rotation(in quaternion) update of all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix or worldRotationQuaternion) to be false.\n   */\n  private _updateWorldPositionAndRotationFlag() {\n    if (!this._isContainDirtyFlags(TransformModifyFlags.WmWpWeWq)) {\n      this._worldAssociatedChange(TransformModifyFlags.WmWpWeWq);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionAndRotationFlag();\n      }\n    }\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * Get worldScale: Will trigger the scaling update of itself and all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix) to be false.\n   */\n  private _updateWorldScaleFlag() {\n    if (!this._isContainDirtyFlags(TransformModifyFlags.WmWs)) {\n      this._worldAssociatedChange(TransformModifyFlags.WmWs);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionAndScaleFlag();\n      }\n    }\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * Get worldScale: Will trigger the scaling update of itself and all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix) to be false.\n   */\n  private _updateWorldPositionAndScaleFlag(): void {\n    if (!this._isContainDirtyFlags(TransformModifyFlags.WmWpWs)) {\n      this._worldAssociatedChange(TransformModifyFlags.WmWpWs);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionAndScaleFlag();\n      }\n    }\n  }\n\n  /**\n   * Update all world transform property dirty flag, the principle is the same as above.\n   */\n  private _updateAllWorldFlag(): void {\n    if (!this._isContainDirtyFlags(TransformModifyFlags.WmWpWeWqWs)) {\n      this._worldAssociatedChange(TransformModifyFlags.WmWpWeWqWs);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateAllWorldFlag();\n      }\n    }\n  }\n\n  private _getParentTransform(): Transform | null {\n    if (!this._isParentDirty) {\n      return this._parentTransformCache;\n    }\n    let parentCache: Transform = null;\n    let parent = this._entity.parent;\n    while (parent) {\n      const transform = parent.transform;\n      if (transform) {\n        parentCache = transform;\n        break;\n      } else {\n        parent = parent.parent;\n      }\n    }\n    this._parentTransformCache = parentCache;\n    this._isParentDirty = false;\n    return parentCache;\n  }\n\n  private _getScaleMatrix(): Matrix3x3 {\n    const invRotation = Transform._tempQuat0;\n    const invRotationMat = Transform._tempMat30;\n    const worldRotScaMat = Transform._tempMat31;\n    const scaMat = Transform._tempMat32;\n    worldRotScaMat.copyFromMatrix(this.worldMatrix);\n    Quaternion.invert(this.worldRotationQuaternion, invRotation);\n    Matrix3x3.rotationQuaternion(invRotation, invRotationMat);\n    Matrix3x3.multiply(invRotationMat, worldRotScaMat, scaMat);\n    return scaMat;\n  }\n\n  private _isContainDirtyFlags(targetDirtyFlags: number): boolean {\n    return (this._dirtyFlag & targetDirtyFlags) === targetDirtyFlags;\n  }\n\n  private _isContainDirtyFlag(type: number): boolean {\n    return (this._dirtyFlag & type) != 0;\n  }\n\n  private _setDirtyFlagTrue(type: number) {\n    this._dirtyFlag |= type;\n  }\n\n  private _setDirtyFlagFalse(type: number) {\n    this._dirtyFlag &= ~type;\n  }\n\n  private _worldAssociatedChange(type: number): void {\n    this._dirtyFlag |= type;\n    this._updateFlagManager.dispatch(TransformModifyFlags.WorldMatrix);\n  }\n\n  private _rotateByQuat(rotateQuat: Quaternion, relativeToLocal: boolean): void {\n    if (relativeToLocal) {\n      Quaternion.multiply(this.rotationQuaternion, rotateQuat, this._rotationQuaternion);\n    } else {\n      Quaternion.multiply(rotateQuat, this.worldRotationQuaternion, this._worldRotationQuaternion);\n    }\n  }\n\n  private _translate(translation: Vector3, relativeToLocal: boolean = true): void {\n    if (relativeToLocal) {\n      const { _tempVec30 } = Transform;\n      Vector3.transformByQuat(translation, this.worldRotationQuaternion, _tempVec30);\n      this.worldPosition.add(_tempVec30);\n    } else {\n      this.worldPosition.add(translation);\n    }\n  }\n\n  private _rotateXYZ(x: number, y: number, z: number, relativeToLocal: boolean = true): void {\n    const radFactor = MathUtil.degreeToRadFactor;\n    const rotQuat = Transform._tempQuat0;\n    Quaternion.rotationEuler(x * radFactor, y * radFactor, z * radFactor, rotQuat);\n    this._rotateByQuat(rotQuat, relativeToLocal);\n  }\n\n  @ignoreClone\n  private _onPositionChanged(): void {\n    this._setDirtyFlagTrue(TransformModifyFlags.LocalMatrix);\n    this._updateWorldPositionFlag();\n  }\n\n  @ignoreClone\n  private _onWorldPositionChanged(): void {\n    const worldPosition = this._worldPosition;\n    const parent = this._getParentTransform();\n    if (parent) {\n      Matrix.invert(parent.worldMatrix, Transform._tempMat41);\n      Vector3.transformCoordinate(worldPosition, Transform._tempMat41, this._position);\n    } else {\n      this._position.copyFrom(worldPosition);\n    }\n    this._setDirtyFlagFalse(TransformModifyFlags.WorldPosition);\n  }\n\n  @ignoreClone\n  private _onRotationChanged(): void {\n    this._setDirtyFlagTrue(TransformModifyFlags.LocalMatrix | TransformModifyFlags.LocalQuat);\n    this._setDirtyFlagFalse(TransformModifyFlags.LocalEuler);\n    this._updateWorldRotationFlag();\n  }\n\n  @ignoreClone\n  private _onWorldRotationChanged(): void {\n    const worldRotation = this._worldRotation;\n    Quaternion.rotationEuler(\n      MathUtil.degreeToRadian(worldRotation.x),\n      MathUtil.degreeToRadian(worldRotation.y),\n      MathUtil.degreeToRadian(worldRotation.z),\n      this._worldRotationQuaternion\n    );\n    this._setDirtyFlagFalse(TransformModifyFlags.WorldEuler);\n  }\n\n  @ignoreClone\n  private _onRotationQuaternionChanged(): void {\n    this._setDirtyFlagTrue(TransformModifyFlags.LocalMatrix | TransformModifyFlags.LocalEuler);\n    this._setDirtyFlagFalse(TransformModifyFlags.LocalQuat);\n    this._updateWorldRotationFlag();\n  }\n\n  @ignoreClone\n  private _onWorldRotationQuaternionChanged(): void {\n    const worldRotationQuaternion = this._worldRotationQuaternion;\n    const parent = this._getParentTransform();\n    if (parent) {\n      const invParentQuaternion = Transform._tempQuat0;\n      Quaternion.invert(parent.worldRotationQuaternion, invParentQuaternion);\n      Quaternion.multiply(invParentQuaternion, worldRotationQuaternion, this._rotationQuaternion);\n    } else {\n      this._rotationQuaternion.copyFrom(worldRotationQuaternion);\n    }\n    this._setDirtyFlagFalse(TransformModifyFlags.WorldQuat);\n  }\n\n  @ignoreClone\n  private _onScaleChanged(): void {\n    this._setDirtyFlagTrue(TransformModifyFlags.LocalMatrix);\n    this._updateWorldScaleFlag();\n  }\n}\n\n/**\n * @internal\n */\nexport enum TransformModifyFlags {\n  LocalEuler = 0x1,\n  LocalQuat = 0x2,\n  WorldPosition = 0x4,\n  WorldEuler = 0x8,\n  WorldQuat = 0x10,\n  WorldScale = 0x20,\n  LocalMatrix = 0x40,\n  WorldMatrix = 0x80,\n\n  /** WorldMatrix | WorldPosition */\n  WmWp = 0x84,\n  /** WorldMatrix | WorldEuler | WorldQuat */\n  WmWeWq = 0x98,\n  /** WorldMatrix | WorldPosition | WorldEuler | WorldQuat */\n  WmWpWeWq = 0x9c,\n  /** WorldMatrix | WorldScale */\n  WmWs = 0xa0,\n  /** WorldMatrix | WorldPosition | WorldScale */\n  WmWpWs = 0xa4,\n  /** WorldMatrix | WorldPosition | WorldEuler | WorldQuat | WorldScale */\n  WmWpWeWqWs = 0xbc\n}\n","/**\n * Sprite mask layer.\n */\nexport enum SpriteMaskLayer {\n  /** Mask layer 0. */\n  Layer0 = 0x1,\n  /** Mask layer 1. */\n  Layer1 = 0x2,\n  /** Mask layer 2. */\n  Layer2 = 0x4,\n  /** Mask layer 3. */\n  Layer3 = 0x8,\n  /** Mask layer 4. */\n  Layer4 = 0x10,\n  /** Mask layer 5. */\n  Layer5 = 0x20,\n  /** Mask layer 6. */\n  Layer6 = 0x40,\n  /** Mask layer 7. */\n  Layer7 = 0x80,\n  /** Mask layer 8. */\n  Layer8 = 0x100,\n  /** Mask layer 9. */\n  Layer9 = 0x200,\n  /** Mask layer 10. */\n  Layer10 = 0x400,\n  /** Mask layer 11. */\n  Layer11 = 0x800,\n  /** Mask layer 12. */\n  Layer12 = 0x1000,\n  /** Mask layer 13. */\n  Layer13 = 0x2000,\n  /** Mask layer 14. */\n  Layer14 = 0x4000,\n  /** Mask layer 15. */\n  Layer15 = 0x8000,\n  /** Mask layer 16. */\n  Layer16 = 0x10000,\n  /** Mask layer 17. */\n  Layer17 = 0x20000,\n  /** Mask layer 18. */\n  Layer18 = 0x40000,\n  /** Mask layer 19. */\n  Layer19 = 0x80000,\n  /** Mask layer 20. */\n  Layer20 = 0x100000,\n  /** Mask layer 21. */\n  Layer21 = 0x200000,\n  /** Mask layer 22. */\n  Layer22 = 0x400000,\n  /** Mask layer 23. */\n  Layer23 = 0x800000,\n  /** Mask layer 24. */\n  Layer24 = 0x1000000,\n  /** Mask layer 25. */\n  Layer25 = 0x2000000,\n  /** Mask layer 26. */\n  Layer26 = 0x4000000,\n  /** Mask layer 27. */\n  Layer27 = 0x8000000,\n  /** Mask layer 28. */\n  Layer28 = 0x10000000,\n  /** Mask layer 29. */\n  Layer29 = 0x20000000,\n  /** Mask layer 30. */\n  Layer30 = 0x40000000,\n  /** Mask layer 31. */\n  Layer31 = 0x80000000,\n  /** All mask layers. */\n  Everything = 0xffffffff,\n  /** None mask layer. */\n  Nothing = 0x0\n}\n","// @ts-ignore\nimport { BoundingBox, Matrix, Vector3, Vector4 } from \"@galacean/engine-math\";\nimport { SpriteMaskInteraction } from \"./2d/enums/SpriteMaskInteraction\";\nimport { Component } from \"./Component\";\nimport { DependentMode, dependentComponents } from \"./ComponentsDependencies\";\nimport { Entity } from \"./Entity\";\nimport { RenderContext } from \"./RenderPipeline/RenderContext\";\nimport { SubRenderElement } from \"./RenderPipeline/SubRenderElement\";\nimport { Transform, TransformModifyFlags } from \"./Transform\";\nimport { assignmentClone, deepClone, ignoreClone } from \"./clone/CloneManager\";\nimport { IComponentCustomClone } from \"./clone/ComponentCloner\";\nimport { SpriteMaskLayer } from \"./enums/SpriteMaskLayer\";\nimport { Material } from \"./material\";\nimport { ShaderMacro, ShaderProperty } from \"./shader\";\nimport { ShaderData } from \"./shader/ShaderData\";\nimport { ShaderMacroCollection } from \"./shader/ShaderMacroCollection\";\nimport { ShaderDataGroup } from \"./shader/enums/ShaderDataGroup\";\n\n/**\n * Basis for all renderers.\n * @decorator `@dependentComponents(Transform, DependentMode.CheckOnly)`\n */\n@dependentComponents(Transform, DependentMode.CheckOnly)\nexport class Renderer extends Component implements IComponentCustomClone {\n  private static _tempVector0 = new Vector3();\n\n  private static _receiveShadowMacro = ShaderMacro.getByName(\"RENDERER_IS_RECEIVE_SHADOWS\");\n  private static _localMatrixProperty = ShaderProperty.getByName(\"renderer_LocalMat\");\n  private static _worldMatrixProperty = ShaderProperty.getByName(\"renderer_ModelMat\");\n  private static _mvMatrixProperty = ShaderProperty.getByName(\"renderer_MVMat\");\n  private static _mvpMatrixProperty = ShaderProperty.getByName(\"renderer_MVPMat\");\n  private static _mvInvMatrixProperty = ShaderProperty.getByName(\"renderer_MVInvMat\");\n  private static _normalMatrixProperty = ShaderProperty.getByName(\"renderer_NormalMat\");\n  private static _rendererLayerProperty = ShaderProperty.getByName(\"renderer_Layer\");\n\n  /** @internal */\n  @ignoreClone\n  _distanceForSort: number;\n  /** @internal */\n  @ignoreClone\n  _onUpdateIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _rendererIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _globalShaderMacro: ShaderMacroCollection = new ShaderMacroCollection();\n  /** @internal */\n  @ignoreClone\n  _bounds: BoundingBox = new BoundingBox();\n  @ignoreClone\n  _renderFrameCount: number;\n  /** @internal */\n  @assignmentClone\n  _maskInteraction: SpriteMaskInteraction = SpriteMaskInteraction.None;\n  /** @internal */\n  @assignmentClone\n  _maskLayer: SpriteMaskLayer = SpriteMaskLayer.Layer0;\n  /** @internal */\n  @ignoreClone\n  _batchedTransformShaderData: boolean = false;\n\n  @ignoreClone\n  protected _overrideUpdate: boolean = false;\n  @ignoreClone\n  protected _materials: Material[] = [];\n  @ignoreClone\n  protected _dirtyUpdateFlag: number = 0;\n  @ignoreClone\n  protected _rendererLayer: Vector4 = new Vector4();\n  @ignoreClone\n  protected _transform: Transform;\n\n  @deepClone\n  private _shaderData: ShaderData = new ShaderData(ShaderDataGroup.Renderer);\n  @ignoreClone\n  private _mvMatrix: Matrix = new Matrix();\n  @ignoreClone\n  private _mvpMatrix: Matrix = new Matrix();\n  @ignoreClone\n  private _mvInvMatrix: Matrix = new Matrix();\n  @ignoreClone\n  private _normalMatrix: Matrix = new Matrix();\n  @ignoreClone\n  private _materialsInstanced: boolean[] = [];\n  @assignmentClone\n  private _priority: number = 0;\n  @assignmentClone\n  private _receiveShadows: boolean = true;\n\n  /**\n   * ShaderData related to renderer.\n   */\n  get shaderData(): ShaderData {\n    return this._shaderData;\n  }\n\n  /**\n   * Whether it is culled in the current frame and does not participate in rendering.\n   */\n  get isCulled(): boolean {\n    return !(this._renderFrameCount === undefined || this._renderFrameCount === this._engine.time.frameCount - 1);\n  }\n\n  /**\n   * Whether receive shadow.\n   */\n  get receiveShadows(): boolean {\n    return this._receiveShadows;\n  }\n\n  set receiveShadows(value: boolean) {\n    if (this._receiveShadows !== value) {\n      if (value) {\n        this.shaderData.enableMacro(Renderer._receiveShadowMacro);\n      } else {\n        this.shaderData.disableMacro(Renderer._receiveShadowMacro);\n      }\n      this._receiveShadows = value;\n    }\n  }\n\n  /** Whether cast shadow. */\n  castShadows: boolean = true;\n\n  /**\n   * Material count.\n   */\n  get materialCount(): number {\n    return this._materials.length;\n  }\n\n  set materialCount(value: number) {\n    const materials = this._materials;\n    const materialsInstanced = this._materialsInstanced;\n\n    materials.length !== value && (materials.length = value);\n    materialsInstanced.length > value && (materialsInstanced.length = value);\n  }\n\n  /**\n   * The bounding volume of the renderer.\n   */\n  get bounds(): BoundingBox {\n    if (this._dirtyUpdateFlag & RendererUpdateFlags.WorldVolume) {\n      this._updateBounds(this._bounds);\n      this._dirtyUpdateFlag &= ~RendererUpdateFlags.WorldVolume;\n    }\n    return this._bounds;\n  }\n\n  /**\n   * The render priority of the renderer, lower values are rendered first and higher values are rendered last.\n   */\n  get priority(): number {\n    return this._priority;\n  }\n\n  set priority(value: number) {\n    this._priority = value;\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    const prototype = Renderer.prototype;\n    const shaderData = this.shaderData;\n    this._overrideUpdate = this.update !== prototype.update;\n\n    this._addResourceReferCount(this.shaderData, 1);\n\n    this._onTransformChanged = this._onTransformChanged.bind(this);\n    this._setTransform(entity.transform);\n\n    shaderData.enableMacro(Renderer._receiveShadowMacro);\n    shaderData.setVector4(Renderer._rendererLayerProperty, this._rendererLayer);\n  }\n\n  /**\n   * Get the first instance material.\n   * @returns The first instance material\n   */\n  getInstanceMaterial(): Material | null;\n\n  /**\n   * Get the first instance material by index.\n   * @remarks Calling this function for the first time after the material is set will create an instance material to ensure that it is unique to the renderer.\n   * @param index - Material index\n   * @returns Instance material\n   */\n  getInstanceMaterial(index: number): Material | null;\n\n  getInstanceMaterial(index: number = 0): Material | null {\n    const materials = this._materials;\n    if (materials.length > index) {\n      const material = materials[index];\n      if (material) {\n        if (this._materialsInstanced[index]) {\n          return material;\n        } else {\n          return this._createInstanceMaterial(material, index);\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the first material.\n   * @returns The first material\n   */\n  getMaterial(): Material | null;\n\n  /**\n   * Get the first material by index.\n   * @param index - Material index\n   * @returns Material\n   */\n  getMaterial(index: number): Material | null;\n\n  getMaterial(index: number = 0): Material | null {\n    return this._materials[index] || null;\n  }\n\n  /**\n   * Set the first material.\n   * @param material - The first material\n   */\n  setMaterial(material: Material): void;\n\n  /**\n   * Set material by index.\n   * @param index - Material index\n   * @param material - The material\n   */\n  setMaterial(index: number, material: Material): void;\n\n  setMaterial(indexOrMaterial: number | Material, material: Material = null): void {\n    if (typeof indexOrMaterial === \"number\") {\n      this._setMaterial(indexOrMaterial, material);\n    } else {\n      this._setMaterial(0, indexOrMaterial);\n    }\n  }\n\n  /**\n   * Get all instance materials.\n   * @remarks Calling this function for the first time after the material is set will create an instance material to ensure that it is unique to the renderer.\n   * @returns All instance materials\n   */\n  getInstanceMaterials(): Readonly<Material[]> {\n    const materials = this._materials;\n    const materialsInstance = this._materialsInstanced;\n    for (let i = 0, n = materials.length; i < n; i++) {\n      if (!materialsInstance[i]) {\n        this._createInstanceMaterial(this._materials[i], i);\n      }\n    }\n    return materials;\n  }\n\n  /**\n   * Get all materials.\n   * @returns All materials\n   */\n  getMaterials(): Readonly<Material[]> {\n    return this._materials;\n  }\n\n  /**\n   * Set all materials.\n   * @param materials - All materials\n   */\n  setMaterials(materials: Material[]): void {\n    const count = materials.length;\n    const internalMaterials = this._materials;\n    const materialsInstanced = this._materialsInstanced;\n\n    for (let i = count, n = internalMaterials.length; i < n; i++) {\n      const internalMaterial = internalMaterials[i];\n      internalMaterial && this._addResourceReferCount(internalMaterial, -1);\n    }\n\n    internalMaterials.length !== count && (internalMaterials.length = count);\n    materialsInstanced.length !== 0 && (materialsInstanced.length = 0);\n\n    for (let i = 0; i < count; i++) {\n      const internalMaterial = internalMaterials[i];\n      const material = materials[i];\n      if (internalMaterial !== material) {\n        internalMaterials[i] = material;\n        internalMaterial && this._addResourceReferCount(internalMaterial, -1);\n        material && this._addResourceReferCount(material, 1);\n      }\n    }\n  }\n\n  update(deltaTime: number): void {}\n\n  /**\n   * @internal\n   */\n  override _onEnableInScene(): void {\n    const componentsManager = this.scene._componentsManager;\n    if (this._overrideUpdate) {\n      componentsManager.addOnUpdateRenderers(this);\n    }\n    componentsManager.addRenderer(this);\n  }\n\n  /**\n   * @internal\n   */\n  override _onDisableInScene(): void {\n    const componentsManager = this.scene._componentsManager;\n    if (this._overrideUpdate) {\n      componentsManager.removeOnUpdateRenderers(this);\n    }\n    componentsManager.removeRenderer(this);\n  }\n\n  /**\n   * @internal\n   */\n  _prepareRender(context: RenderContext): void {\n    if (this._renderFrameCount !== this.engine.time.frameCount) {\n      this._update(context);\n    }\n\n    const virtualCamera = context.virtualCamera;\n    const cameraPosition = virtualCamera.position;\n    const boundsCenter = this.bounds.getCenter(Renderer._tempVector0);\n\n    if (virtualCamera.isOrthographic) {\n      Vector3.subtract(boundsCenter, cameraPosition, boundsCenter);\n      this._distanceForSort = Vector3.dot(boundsCenter, virtualCamera.forward);\n    } else {\n      this._distanceForSort = Vector3.distanceSquared(boundsCenter, cameraPosition);\n    }\n\n    this._render(context);\n\n    // union camera global macro and renderer macro.\n    ShaderMacroCollection.unionCollection(\n      context.camera._globalShaderMacro,\n      this.shaderData._macroCollection,\n      this._globalShaderMacro\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _cloneTo(target: Renderer, srcRoot: Entity, targetRoot: Entity): void {\n    const materials = this._materials;\n    for (let i = 0, n = materials.length; i < n; i++) {\n      target._setMaterial(i, materials[i]);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  protected override _onDestroy(): void {\n    super._onDestroy();\n\n    this._setTransform(null);\n    this._addResourceReferCount(this.shaderData, -1);\n\n    const materials = this._materials;\n    for (let i = 0, n = materials.length; i < n; i++) {\n      const material = materials[i];\n      material && this._addResourceReferCount(material, -1);\n    }\n\n    this._entity = null;\n    this._globalShaderMacro = null;\n    this._bounds = null;\n    this._materials = null;\n    this._shaderData = null;\n    this._mvMatrix = null;\n    this._mvpMatrix = null;\n    this._mvInvMatrix = null;\n    this._normalMatrix = null;\n    this._materialsInstanced = null;\n    this._rendererLayer = null;\n  }\n\n  /**\n   * @internal\n   */\n  _updateTransformShaderData(context: RenderContext, onlyMVP: boolean, batched: boolean): void {\n    const worldMatrix = this._transform.worldMatrix;\n    if (onlyMVP) {\n      this._updateProjectionRelatedShaderData(context, worldMatrix, batched);\n    } else {\n      this._updateWorldViewRelatedShaderData(context, worldMatrix, batched);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _canBatch(elementA: SubRenderElement, elementB: SubRenderElement): boolean {\n    return false;\n  }\n\n  /**\n   * @internal\n   */\n  _batch(elementA: SubRenderElement, elementB?: SubRenderElement): void {}\n\n  /**\n   * Update once per frame per renderer, not influenced by batched.\n   */\n  protected _update(context: RenderContext): void {\n    const { layer } = this.entity;\n    this._rendererLayer.set(layer & 65535, (layer >>> 16) & 65535, 0, 0);\n  }\n\n  protected _updateWorldViewRelatedShaderData(context: RenderContext, worldMatrix: Matrix, batched: boolean): void {\n    const { shaderData, _mvInvMatrix: mvInvMatrix } = this;\n    if (batched) {\n      // @ts-ignore\n      const identityMatrix = Matrix._identity;\n\n      Matrix.invert(context.viewMatrix, mvInvMatrix);\n\n      shaderData.setMatrix(Renderer._localMatrixProperty, identityMatrix);\n      shaderData.setMatrix(Renderer._worldMatrixProperty, identityMatrix);\n      shaderData.setMatrix(Renderer._mvMatrixProperty, context.viewMatrix);\n      shaderData.setMatrix(Renderer._mvInvMatrixProperty, mvInvMatrix);\n      shaderData.setMatrix(Renderer._normalMatrixProperty, identityMatrix);\n    } else {\n      const mvMatrix = this._mvMatrix;\n      const normalMatrix = this._normalMatrix;\n\n      Matrix.multiply(context.viewMatrix, worldMatrix, mvMatrix);\n      Matrix.invert(mvMatrix, mvInvMatrix);\n      Matrix.invert(worldMatrix, normalMatrix);\n      normalMatrix.transpose();\n\n      shaderData.setMatrix(Renderer._localMatrixProperty, this._transform.localMatrix);\n      shaderData.setMatrix(Renderer._worldMatrixProperty, worldMatrix);\n      shaderData.setMatrix(Renderer._mvMatrixProperty, mvMatrix);\n      shaderData.setMatrix(Renderer._mvInvMatrixProperty, mvInvMatrix);\n      shaderData.setMatrix(Renderer._normalMatrixProperty, normalMatrix);\n    }\n\n    this._updateProjectionRelatedShaderData(context, worldMatrix, batched);\n  }\n\n  protected _updateProjectionRelatedShaderData(context: RenderContext, worldMatrix: Matrix, batched: boolean): void {\n    if (batched) {\n      this.shaderData.setMatrix(Renderer._mvpMatrixProperty, context.viewProjectionMatrix);\n    } else {\n      const mvpMatrix = this._mvpMatrix;\n      Matrix.multiply(context.viewProjectionMatrix, worldMatrix, mvpMatrix);\n      this.shaderData.setMatrix(Renderer._mvpMatrixProperty, mvpMatrix);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  protected _setTransform(transform: Transform): void {\n    this._transform?._updateFlagManager.removeListener(this._onTransformChanged);\n    transform?._updateFlagManager.addListener(this._onTransformChanged);\n    this._transform = transform;\n  }\n\n  /**\n   * @internal\n   */\n  protected _updateBounds(worldBounds: BoundingBox): void {}\n\n  /**\n   * @internal\n   */\n  protected _render(context: RenderContext): void {\n    throw \"not implement\";\n  }\n\n  /**\n   * @internal\n   */\n  private _createInstanceMaterial(material: Material, index: number): Material {\n    const insMaterial: Material = material.clone();\n    insMaterial.name = insMaterial.name + \"(Instance)\";\n    this._addResourceReferCount(material, -1);\n    this._addResourceReferCount(insMaterial, 1);\n    this._materialsInstanced[index] = true;\n    this._materials[index] = insMaterial;\n    return insMaterial;\n  }\n\n  private _setMaterial(index: number, material: Material): void {\n    const materials = this._materials;\n    if (index >= materials.length) {\n      materials.length = index + 1;\n    }\n\n    const internalMaterial = materials[index];\n    if (internalMaterial !== material) {\n      const materialsInstance = this._materialsInstanced;\n      index < materialsInstance.length && (materialsInstance[index] = false);\n\n      internalMaterial && this._addResourceReferCount(internalMaterial, -1);\n      material && this._addResourceReferCount(material, 1);\n      materials[index] = material;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  @ignoreClone\n  protected _onTransformChanged(type: TransformModifyFlags): void {\n    this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;\n  }\n}\n\n/**\n * @internal\n */\nexport enum RendererUpdateFlags {\n  /** Include world position and world bounds. */\n  WorldVolume = 0x1\n}\n","/**\n *  Static interface implement decorator.\n *  https://stackoverflow.com/questions/13955157/how-to-define-static-property-in-typescript-interface\n */\nexport function StaticInterfaceImplement<T>() {\n  return <U extends T>(constructor: U) => {\n    constructor;\n  };\n}\n","import { BoundingBox, Matrix } from \"@galacean/engine-math\";\nimport { StaticInterfaceImplement } from \"../../base/StaticInterfaceImplement\";\nimport { SpriteMask } from \"../sprite\";\nimport { SpriteRenderer } from \"../sprite/SpriteRenderer\";\nimport { ISpriteAssembler } from \"./ISpriteAssembler\";\n\n/**\n * @internal\n */\n@StaticInterfaceImplement<ISpriteAssembler>()\nexport class SimpleSpriteAssembler {\n  static _rectangleTriangles = [0, 1, 2, 2, 1, 3];\n  static _worldMatrix = new Matrix();\n\n  static resetData(renderer: SpriteRenderer | SpriteMask): void {\n    const manager = renderer._getChunkManager();\n    const lastSubChunk = renderer._subChunk;\n    lastSubChunk && manager.freeSubChunk(lastSubChunk);\n    const subChunk = manager.allocateSubChunk(4);\n    subChunk.indices = SimpleSpriteAssembler._rectangleTriangles;\n    renderer._subChunk = subChunk;\n  }\n\n  static updatePositions(renderer: SpriteRenderer | SpriteMask): void {\n    const { width, height, sprite } = renderer;\n    const { x: pivotX, y: pivotY } = sprite.pivot;\n    // Renderer's worldMatrix\n    const worldMatrix = SimpleSpriteAssembler._worldMatrix;\n    const { elements: wE } = worldMatrix;\n    // Parent's worldMatrix\n    const { elements: pWE } = renderer.entity.transform.worldMatrix;\n    const sx = renderer.flipX ? -width : width;\n    const sy = renderer.flipY ? -height : height;\n    (wE[0] = pWE[0] * sx), (wE[1] = pWE[1] * sx), (wE[2] = pWE[2] * sx);\n    (wE[4] = pWE[4] * sy), (wE[5] = pWE[5] * sy), (wE[6] = pWE[6] * sy);\n    (wE[8] = pWE[8]), (wE[9] = pWE[9]), (wE[10] = pWE[10]);\n    wE[12] = pWE[12] - pivotX * wE[0] - pivotY * wE[4];\n    wE[13] = pWE[13] - pivotX * wE[1] - pivotY * wE[5];\n    wE[14] = pWE[14] - pivotX * wE[2] - pivotY * wE[6];\n\n    // ---------------\n    //  2 - 3\n    //  |   |\n    //  0 - 1\n    // ---------------\n    // Update positions\n    const spritePositions = sprite._getPositions();\n    const subChunk = renderer._subChunk;\n    const vertices = subChunk.chunk.vertices;\n    for (let i = 0, o = subChunk.vertexArea.start; i < 4; ++i, o += 9) {\n      const { x, y } = spritePositions[i];\n      vertices[o] = wE[0] * x + wE[4] * y + wE[12];\n      vertices[o + 1] = wE[1] * x + wE[5] * y + wE[13];\n      vertices[o + 2] = wE[2] * x + wE[6] * y + wE[14];\n    }\n\n    BoundingBox.transform(sprite._getBounds(), worldMatrix, renderer._bounds);\n  }\n\n  static updateUVs(renderer: SpriteRenderer | SpriteMask): void {\n    const spriteUVs = renderer.sprite._getUVs();\n    const { x: left, y: bottom } = spriteUVs[0];\n    const { x: right, y: top } = spriteUVs[3];\n    const subChunk = renderer._subChunk;\n    const vertices = subChunk.chunk.vertices;\n    const offset = subChunk.vertexArea.start + 3;\n    vertices[offset] = left;\n    vertices[offset + 1] = bottom;\n    vertices[offset + 9] = right;\n    vertices[offset + 10] = bottom;\n    vertices[offset + 18] = left;\n    vertices[offset + 19] = top;\n    vertices[offset + 27] = right;\n    vertices[offset + 28] = top;\n  }\n\n  static updateColor(renderer: SpriteRenderer): void {\n    const subChunk = renderer._subChunk;\n    const { r, g, b, a } = renderer.color;\n    const vertices = subChunk.chunk.vertices;\n    for (let i = 0, o = subChunk.vertexArea.start + 5; i < 4; ++i, o += 9) {\n      vertices[o] = r;\n      vertices[o + 1] = g;\n      vertices[o + 2] = b;\n      vertices[o + 3] = a;\n    }\n  }\n}\n","import { Matrix } from \"@galacean/engine-math\";\nimport { StaticInterfaceImplement } from \"../../base/StaticInterfaceImplement\";\nimport { SpriteRenderer } from \"../sprite/SpriteRenderer\";\nimport { ISpriteAssembler } from \"./ISpriteAssembler\";\n\n/**\n * @internal\n */\n@StaticInterfaceImplement<ISpriteAssembler>()\nexport class SlicedSpriteAssembler {\n  static _rectangleTriangles = [\n    0, 1, 4, 1, 5, 4, 1, 2, 5, 2, 6, 5, 2, 3, 6, 3, 7, 6, 4, 5, 8, 5, 9, 8, 5, 6, 9, 6, 10, 9, 6, 7, 10, 7, 11, 10, 8,\n    9, 12, 9, 13, 12, 9, 10, 13, 10, 14, 13, 10, 11, 14, 11, 15, 14\n  ];\n  static _worldMatrix = new Matrix();\n\n  static resetData(renderer: SpriteRenderer): void {\n    const manager = renderer._getChunkManager();\n    const lastSubChunk = renderer._subChunk;\n    lastSubChunk && manager.freeSubChunk(lastSubChunk);\n    const subChunk = manager.allocateSubChunk(16);\n    subChunk.indices = SlicedSpriteAssembler._rectangleTriangles;\n    renderer._subChunk = subChunk;\n  }\n\n  static updatePositions(renderer: SpriteRenderer): void {\n    const { width, height, sprite } = renderer;\n    const { border } = sprite;\n    // Update local positions.\n    const spritePositions = sprite._getPositions();\n    const { x: left, y: bottom } = spritePositions[0];\n    const { x: right, y: top } = spritePositions[3];\n    const { width: expectWidth, height: expectHeight } = sprite;\n    const fixedLeft = expectWidth * border.x;\n    const fixedBottom = expectHeight * border.y;\n    const fixedRight = expectWidth * border.z;\n    const fixedTop = expectHeight * border.w;\n\n    // ------------------------\n    //     [3]\n    //      |\n    //     [2]\n    //      |\n    //     [1]\n    //      |\n    // row [0] - [1] - [2] - [3]\n    //    column\n    // ------------------------\n    // Calculate row and column.\n    let row: number[], column: number[];\n    if (fixedLeft + fixedRight > width) {\n      const widthScale = width / (fixedLeft + fixedRight);\n      row = [\n        expectWidth * left * widthScale,\n        fixedLeft * widthScale,\n        fixedLeft * widthScale,\n        width - expectWidth * (1 - right) * widthScale\n      ];\n    } else {\n      row = [expectWidth * left, fixedLeft, width - fixedRight, width - expectWidth * (1 - right)];\n    }\n\n    if (fixedTop + fixedBottom > height) {\n      const heightScale = height / (fixedTop + fixedBottom);\n      column = [\n        expectHeight * bottom * heightScale,\n        fixedBottom * heightScale,\n        fixedBottom * heightScale,\n        height - expectHeight * (1 - top) * heightScale\n      ];\n    } else {\n      column = [expectHeight * bottom, fixedBottom, height - fixedTop, height - expectHeight * (1 - top)];\n    }\n\n    // Update renderer's worldMatrix.\n    const { x: pivotX, y: pivotY } = renderer.sprite.pivot;\n    const localTransX = renderer.width * pivotX;\n    const localTransY = renderer.height * pivotY;\n    // Renderer's worldMatrix.\n    const worldMatrix = SlicedSpriteAssembler._worldMatrix;\n    const { elements: wE } = worldMatrix;\n    // Parent's worldMatrix.\n    const { elements: pWE } = renderer.entity.transform.worldMatrix;\n    const sx = renderer.flipX ? -1 : 1;\n    const sy = renderer.flipY ? -1 : 1;\n    (wE[0] = pWE[0] * sx), (wE[1] = pWE[1] * sx), (wE[2] = pWE[2] * sx);\n    (wE[4] = pWE[4] * sy), (wE[5] = pWE[5] * sy), (wE[6] = pWE[6] * sy);\n    (wE[8] = pWE[8]), (wE[9] = pWE[9]), (wE[10] = pWE[10]);\n    wE[12] = pWE[12] - localTransX * wE[0] - localTransY * wE[4];\n    wE[13] = pWE[13] - localTransX * wE[1] - localTransY * wE[5];\n    wE[14] = pWE[14] - localTransX * wE[2] - localTransY * wE[6];\n\n    // ------------------------\n    //  3 - 7 - 11 - 15\n    //  |   |   |    |\n    //  2 - 6 - 10 - 14\n    //  |   |   |    |\n    //  1 - 5 - 9  - 13\n    //  |   |   |    |\n    //  0 - 4 - 8  - 12\n    // ------------------------\n    // Assemble position and uv.\n    const subChunk = renderer._subChunk;\n    const vertices = subChunk.chunk.vertices;\n    for (let i = 0, o = subChunk.vertexArea.start; i < 4; i++) {\n      const rowValue = row[i];\n      for (let j = 0; j < 4; j++, o += 9) {\n        const columnValue = column[j];\n        vertices[o] = wE[0] * rowValue + wE[4] * columnValue + wE[12];\n        vertices[o + 1] = wE[1] * rowValue + wE[5] * columnValue + wE[13];\n        vertices[o + 2] = wE[2] * rowValue + wE[6] * columnValue + wE[14];\n      }\n    }\n\n    const { min, max } = renderer._bounds;\n    min.set(row[0], column[0], 0);\n    max.set(row[3], column[3], 0);\n    renderer._bounds.transform(worldMatrix);\n  }\n\n  static updateUVs(renderer: SpriteRenderer): void {\n    const subChunk = renderer._subChunk;\n    const vertices = subChunk.chunk.vertices;\n    const spriteUVs = renderer.sprite._getUVs();\n    for (let i = 0, o = subChunk.vertexArea.start + 3; i < 4; i++) {\n      const rowU = spriteUVs[i].x;\n      for (let j = 0; j < 4; j++, o += 9) {\n        vertices[o] = rowU;\n        vertices[o + 1] = spriteUVs[j].y;\n      }\n    }\n  }\n\n  static updateColor(renderer: SpriteRenderer): void {\n    const subChunk = renderer._subChunk;\n    const { r, g, b, a } = renderer.color;\n    const vertices = subChunk.chunk.vertices;\n    for (let i = 0, o = subChunk.vertexArea.start + 5; i < 16; ++i, o += 9) {\n      vertices[o] = r;\n      vertices[o + 1] = g;\n      vertices[o + 2] = b;\n      vertices[o + 3] = a;\n    }\n  }\n}\n","import { Utils } from \"../Utils\";\n\n/**\n * High-performance unordered array, delete uses exchange method to improve performance, internal capacity only increases.\n */\nexport class DisorderedArray<T> {\n  /** The length of the array. */\n  length = 0;\n\n  /** @internal */\n  _elements: T[];\n\n  private _loopCounter = 0; // Ignore nested loops, use counter to solve the problem\n  private _blankCount = 0;\n\n  /**\n   * Get whether the array is in the loop.\n   */\n  get isLopping(): boolean {\n    return this._loopCounter > 0;\n  }\n\n  /**\n   * Create a DisorderedArray.\n   * @param count - The initial length of the array\n   */\n  constructor(count: number = 0) {\n    this._elements = new Array<T>(count);\n  }\n\n  /**\n   * Add an element to disordered array.\n   * @param element - The element to be added\n   */\n  add(element: T): void {\n    if (this.length === this._elements.length) {\n      this._elements.push(element);\n    } else {\n      this._elements[this.length] = element;\n    }\n    this.length++;\n  }\n\n  /**\n   * Delete the specified element.\n   * @param element - The element to be deleted\n   */\n  delete(element: T): void {\n    // @todo: It can be optimized for custom binary search and other algorithms, currently this._elements>=this.length wastes performance.\n    const index = this._elements.indexOf(element);\n    this.deleteByIndex(index);\n  }\n\n  /**\n   * Set the element at the specified index.\n   * @param index - The index of the element to be set\n   * @param element - The element to be set\n   */\n  set(index: number, element: T): void {\n    if (index >= this.length) {\n      throw \"Index is out of range.\";\n    }\n    this._elements[index] = element;\n  }\n\n  /**\n   * Get the element at the specified index.\n   * @param index - The index of the element to be get\n   * @returns The element at the specified index\n   */\n  get(index: number): T {\n    if (index >= this.length) {\n      throw \"Index is out of range.\";\n    }\n    return this._elements[index];\n  }\n\n  /**\n   * Delete the element at the specified index.\n   * @param index - The index of the element to be deleted\n   * @returns The replaced item is used to reset its index\n   */\n  deleteByIndex(index: number): T {\n    const elements = this._elements;\n    let end: T;\n    if (this._loopCounter > 0) {\n      this._elements[index] = null;\n      this._blankCount++;\n    } else {\n      const endIndex = this.length - 1;\n      if (index !== endIndex) {\n        end = elements[endIndex];\n        elements[index] = end;\n      }\n      elements[endIndex] = null;\n      this.length--;\n    }\n\n    return end;\n  }\n\n  /**\n   * Loop through all elements.\n   * @param callbackFn - The callback function\n   * @param swapFn - The swap function can process the element after the callback function, it will be called after end looping(`isLopping` = true)\n   */\n  forEach(callbackFn: (element: T, index: number) => void, swapFn?: (element: T, index: number) => void): void {\n    this._startLoop();\n    const elements = this._elements;\n    for (let i = 0, n = this.length; i < n; i++) {\n      const element = elements[i];\n      element && callbackFn(element, i);\n    }\n    this._endLoop(swapFn);\n  }\n\n  /**\n   * Loop through all elements and clean up the blank elements.\n   * @param callbackFn - The callback function\n   * @param swapFn - The swap function can process the element after the callback function,  it will be called after end looping(`isLopping` = true)\n   */\n  forEachAndClean(callbackFn: (element: T, index: number) => void, swapFn?: (element: T, index: number) => void): void {\n    this._startLoop();\n    const preEnd = this.length;\n    const elements = this._elements;\n    for (let i = 0, n = preEnd; i < n; i++) {\n      const element = elements[i];\n      element && callbackFn(element, i);\n    }\n    this._endLoopAndClean(preEnd, elements, swapFn);\n  }\n\n  /**\n   * Sort the array.\n   * @param compareFn - The comparison function\n   */\n  sort(compareFn: (a: T, b: T) => number): void {\n    Utils._quickSort(this._elements, 0, this.length, compareFn);\n  }\n\n  /**\n   * Garbage collection, clean up all cached elements.\n   */\n  garbageCollection(): void {\n    this._elements.length = this.length;\n  }\n\n  private _startLoop(): void {\n    ++this._loopCounter;\n  }\n\n  private _endLoop(swapFn: (e: T, idx: number) => void): void {\n    if (--this._loopCounter !== 0) {\n      return;\n    }\n\n    if (this._blankCount) {\n      let from = 0;\n      let to = this.length - 1;\n      const elements = this._elements;\n      partition: do {\n        while (elements[from])\n          if (++from >= to) {\n            break partition;\n          }\n\n        while (!elements[to])\n          if (from >= --to) {\n            break partition;\n          }\n\n        const swapElement = elements[to];\n        swapFn?.(swapElement, from);\n        elements[from++] = swapElement;\n        elements[to--] = null;\n      } while (from < to);\n\n      this.length -= this._blankCount;\n      this._blankCount = 0;\n    }\n  }\n\n  private _endLoopAndClean(preEnd: number, elements: T[], swapFn: (element: T, index: number) => void): void {\n    if (--this._loopCounter !== 0) {\n      return;\n    }\n\n    let index = 0;\n    for (let i = preEnd, n = this.length; i < n; i++) {\n      const element = elements[i];\n      if (!element) continue;\n      elements[index] = element;\n      swapFn?.(element, index);\n      index++;\n    }\n    this.length = index;\n    this._blankCount = 0;\n  }\n}\n","import { MathUtil, Matrix } from \"@galacean/engine-math\";\nimport { Logger } from \"../../base\";\nimport { StaticInterfaceImplement } from \"../../base/StaticInterfaceImplement\";\nimport { SpriteTileMode } from \"../enums/SpriteTileMode\";\nimport { Sprite } from \"../sprite\";\nimport { SpriteRenderer } from \"../sprite/SpriteRenderer\";\nimport { ISpriteAssembler } from \"./ISpriteAssembler\";\nimport { DisorderedArray } from \"../../utils/DisorderedArray\";\n\n/**\n * @internal\n */\n@StaticInterfaceImplement<ISpriteAssembler>()\nexport class TiledSpriteAssembler {\n  static _worldMatrix = new Matrix();\n  static _posRow = new DisorderedArray<number>();\n  static _posColumn = new DisorderedArray<number>();\n  static _uvRow = new DisorderedArray<number>();\n  static _uvColumn = new DisorderedArray<number>();\n\n  static resetData(renderer: SpriteRenderer, vertexCount: number): void {\n    if (vertexCount) {\n      const manager = renderer._getChunkManager();\n      const lastSubChunk = renderer._subChunk;\n      const sizeChanged = lastSubChunk && lastSubChunk.vertexArea.size !== vertexCount * 9;\n      sizeChanged && manager.freeSubChunk(lastSubChunk);\n\n      if (!lastSubChunk || sizeChanged) {\n        const newSubChunk = manager.allocateSubChunk(vertexCount);\n        newSubChunk.indices = [];\n        renderer._subChunk = newSubChunk;\n      }\n    }\n  }\n\n  static updatePositions(renderer: SpriteRenderer): void {\n    const { width, height, sprite, tileMode, tiledAdaptiveThreshold: threshold } = renderer;\n    // Calculate row and column\n    const { _posRow: posRow, _posColumn: posColumn, _uvRow: uvRow, _uvColumn: uvColumn } = TiledSpriteAssembler;\n    const maxVertexCount = renderer._getChunkManager().maxVertexCount;\n    posRow.length = posColumn.length = uvRow.length = uvColumn.length = 0;\n    const vertexCount =\n      tileMode === SpriteTileMode.Adaptive\n        ? TiledSpriteAssembler._calculateAdaptiveDividing(\n            sprite,\n            width,\n            height,\n            threshold,\n            posRow,\n            posColumn,\n            uvRow,\n            uvColumn,\n            maxVertexCount\n          )\n        : TiledSpriteAssembler._calculateContinuousDividing(\n            sprite,\n            width,\n            height,\n            posRow,\n            posColumn,\n            uvRow,\n            uvColumn,\n            maxVertexCount\n          );\n    TiledSpriteAssembler.resetData(renderer, vertexCount);\n    // Update renderer's worldMatrix\n    const { x: pivotX, y: pivotY } = renderer.sprite.pivot;\n    const localTransX = renderer.width * pivotX;\n    const localTransY = renderer.height * pivotY;\n    // Renderer's worldMatrix\n    const { _worldMatrix: worldMatrix } = TiledSpriteAssembler;\n    const { elements: wE } = worldMatrix;\n    // Parent's worldMatrix\n    const { elements: pWE } = renderer.entity.transform.worldMatrix;\n    const sx = renderer.flipX ? -1 : 1;\n    const sy = renderer.flipY ? -1 : 1;\n    let wE0: number, wE1: number, wE2: number;\n    let wE4: number, wE5: number, wE6: number;\n    (wE0 = wE[0] = pWE[0] * sx), (wE1 = wE[1] = pWE[1] * sx), (wE2 = wE[2] = pWE[2] * sx);\n    (wE4 = wE[4] = pWE[4] * sy), (wE5 = wE[5] = pWE[5] * sy), (wE6 = wE[6] = pWE[6] * sy);\n    (wE[8] = pWE[8]), (wE[9] = pWE[9]), (wE[10] = pWE[10]);\n    const wE12 = (wE[12] = pWE[12] - localTransX * wE[0] - localTransY * wE[4]);\n    const wE13 = (wE[13] = pWE[13] - localTransX * wE[1] - localTransY * wE[5]);\n    const wE14 = (wE[14] = pWE[14] - localTransX * wE[2] - localTransY * wE[6]);\n    // Assemble position and uv\n    const rowLength = posRow.length - 1;\n    const columnLength = posColumn.length - 1;\n\n    const subChunk = renderer._subChunk;\n    const vertices = subChunk.chunk.vertices;\n    const indices = subChunk.indices;\n    let count = 0;\n    let trianglesOffset = 0;\n    for (let j = 0, o = subChunk.vertexArea.start; j < columnLength; j++) {\n      const doubleJ = 2 * j;\n      for (let i = 0; i < rowLength; i++) {\n        const uvL = uvRow.get(2 * i);\n        const uvR = uvRow.get(2 * i + 1);\n        const uvT = uvColumn.get(doubleJ + 1);\n        if (isNaN(uvL) || isNaN(uvR) || isNaN(uvT)) {\n          continue;\n        }\n\n        indices[trianglesOffset++] = count;\n        indices[trianglesOffset++] = count + 1;\n        indices[trianglesOffset++] = count + 2;\n        indices[trianglesOffset++] = count + 2;\n        indices[trianglesOffset++] = count + 1;\n        indices[trianglesOffset++] = count + 3;\n        count += 4;\n        const l = posRow.get(i);\n        const b = posColumn.get(j);\n        const r = posRow.get(i + 1);\n        const t = posColumn.get(j + 1);\n\n        // left and bottom\n        vertices[o] = wE0 * l + wE4 * b + wE12;\n        vertices[o + 1] = wE1 * l + wE5 * b + wE13;\n        vertices[o + 2] = wE2 * l + wE6 * b + wE14;\n        // right and bottom\n        vertices[o + 9] = wE0 * r + wE4 * b + wE12;\n        vertices[o + 10] = wE1 * r + wE5 * b + wE13;\n        vertices[o + 11] = wE2 * r + wE6 * b + wE14;\n        // left and top\n        vertices[o + 18] = wE0 * l + wE4 * t + wE12;\n        vertices[o + 19] = wE1 * l + wE5 * t + wE13;\n        vertices[o + 20] = wE2 * l + wE6 * t + wE14;\n        // right and top\n        vertices[o + 27] = wE0 * r + wE4 * t + wE12;\n        vertices[o + 28] = wE1 * r + wE5 * t + wE13;\n        vertices[o + 29] = wE2 * r + wE6 * t + wE14;\n        o += 36;\n      }\n    }\n\n    const { min, max } = renderer._bounds;\n    min.set(posRow.get(0), posColumn.get(0), 0);\n    max.set(posRow.get(rowLength), posColumn.get(columnLength), 0);\n    renderer._bounds.transform(worldMatrix);\n  }\n\n  static updateUVs(renderer: SpriteRenderer): void {\n    const { _posRow: posRow, _posColumn: posColumn, _uvRow: uvRow, _uvColumn: uvColumn } = TiledSpriteAssembler;\n    const rowLength = posRow.length - 1;\n    const columnLength = posColumn.length - 1;\n    const subChunk = renderer._subChunk;\n    const vertices = subChunk.chunk.vertices;\n    for (let j = 0, o = subChunk.vertexArea.start + 3; j < columnLength; j++) {\n      const doubleJ = 2 * j;\n      for (let i = 0; i < rowLength; i++) {\n        const uvL = uvRow.get(2 * i);\n        const uvB = uvColumn.get(doubleJ);\n        const uvR = uvRow.get(2 * i + 1);\n        const uvT = uvColumn.get(doubleJ + 1);\n        if (isNaN(uvL) || isNaN(uvB) || isNaN(uvR) || isNaN(uvT)) {\n          continue;\n        }\n\n        // left and bottom\n        vertices[o] = uvL;\n        vertices[o + 1] = uvB;\n        // right and bottom\n        vertices[o + 9] = uvR;\n        vertices[o + 10] = uvB;\n        // left and top\n        vertices[o + 18] = uvL;\n        vertices[o + 19] = uvT;\n        // right and top\n        vertices[o + 27] = uvR;\n        vertices[o + 28] = uvT;\n        o += 36;\n      }\n    }\n  }\n\n  static updateColor(renderer: SpriteRenderer): void {\n    const subChunk = renderer._subChunk;\n    const { r, g, b, a } = renderer.color;\n    const vertices = subChunk.chunk.vertices;\n    const vertexArea = subChunk.vertexArea;\n    for (let i = 0, o = vertexArea.start + 5, n = vertexArea.size / 9; i < n; ++i, o += 9) {\n      vertices[o] = r;\n      vertices[o + 1] = g;\n      vertices[o + 2] = b;\n      vertices[o + 3] = a;\n    }\n  }\n\n  private static _calculateAdaptiveDividing(\n    sprite: Sprite,\n    width: number,\n    height: number,\n    threshold: number,\n    posRow: DisorderedArray<number>,\n    posColumn: DisorderedArray<number>,\n    uvRow: DisorderedArray<number>,\n    uvColumn: DisorderedArray<number>,\n    maxVertexCount: number\n  ): number {\n    const { border } = sprite;\n    const spritePositions = sprite._getPositions();\n    const { x: left, y: bottom } = spritePositions[0];\n    const { x: right, y: top } = spritePositions[3];\n    const [spriteUV0, spriteUV1, spriteUV2, spriteUV3] = sprite._getUVs();\n    const { width: expectWidth, height: expectHeight } = sprite;\n    const fixedL = expectWidth * border.x;\n    const fixedR = expectWidth * border.z;\n    const fixedLR = fixedL + fixedR;\n    const fixedCW = expectWidth - fixedLR;\n    const fixedT = expectHeight * border.w;\n    const fixedB = expectHeight * border.y;\n    const fixedTB = fixedT + fixedB;\n    const fixedCH = expectHeight - fixedTB;\n    let scale: number;\n    let rType: TiledType, cType: TiledType;\n    let rVertCount: number, cVertCount: number;\n    let rRepeatCount: number, cRepeatCount: number;\n    if (fixedLR >= width) {\n      rVertCount = 3;\n      rType = TiledType.Compressed;\n    } else {\n      if (fixedCW > MathUtil.zeroTolerance) {\n        rRepeatCount = (width - fixedLR) / fixedCW;\n        rRepeatCount = rRepeatCount % 1 >= threshold ? Math.ceil(rRepeatCount) : Math.floor(rRepeatCount);\n        rVertCount = 4 + rRepeatCount - 1;\n        rType = TiledType.WithTiled;\n      } else {\n        rVertCount = 4;\n        rType = TiledType.WithoutTiled;\n      }\n    }\n\n    if (fixedTB >= height) {\n      cVertCount = 3;\n      cType = TiledType.Compressed;\n    } else {\n      if (fixedCH > MathUtil.zeroTolerance) {\n        cRepeatCount = (height - fixedTB) / fixedCH;\n        cRepeatCount = cRepeatCount % 1 >= threshold ? Math.ceil(cRepeatCount) : Math.floor(cRepeatCount);\n        cVertCount = 4 + cRepeatCount - 1;\n        cType = TiledType.WithTiled;\n      } else {\n        cVertCount = 4;\n        cType = TiledType.WithoutTiled;\n      }\n    }\n\n    let rowCount = 0;\n    let columnCount = 0;\n\n    if ((rVertCount - 1) * (cVertCount - 1) * 4 > maxVertexCount) {\n      posRow.add(width * left), posRow.add(width * right);\n      posColumn.add(height * bottom), posColumn.add(height * top);\n      uvRow.add(spriteUV0.x), uvRow.add(spriteUV3.x);\n      uvColumn.add(spriteUV0.y), uvColumn.add(spriteUV3.y);\n      rowCount += 2;\n      columnCount += 2;\n      Logger.warn(`The number of vertices exceeds the upper limit(${maxVertexCount}).`);\n      return rowCount * columnCount;\n    }\n\n    switch (rType) {\n      case TiledType.Compressed:\n        scale = width / fixedLR;\n        posRow.add(expectWidth * left * scale), posRow.add(fixedL * scale);\n        posRow.add(width - expectWidth * (1 - right) * scale);\n        uvRow.add(spriteUV0.x), uvRow.add(spriteUV1.x), uvRow.add(spriteUV2.x), uvRow.add(spriteUV3.x);\n        rowCount += 4;\n        break;\n      case TiledType.WithoutTiled:\n        posRow.add(expectWidth * left), posRow.add(fixedL), posRow.add(width - fixedR);\n        posRow.add(width - expectWidth * (1 - right));\n        uvRow.add(spriteUV0.x), uvRow.add(spriteUV1.x), uvRow.add(NaN), uvRow.add(NaN);\n        uvRow.add(spriteUV2.x), uvRow.add(spriteUV3.x);\n        rowCount += 4;\n        break;\n      case TiledType.WithTiled:\n        scale = width / (fixedLR + rRepeatCount * fixedCW);\n        posRow.add(expectWidth * left * scale), posRow.add(fixedL * scale);\n        uvRow.add(spriteUV0.x), uvRow.add(spriteUV1.x), uvRow.add(spriteUV1.x);\n        rowCount += 3;\n        for (let i = 0, l = rRepeatCount - 1; i < l; i++) {\n          posRow.add(fixedL + (i + 1) * fixedCW * scale);\n          uvRow.add(spriteUV2.x), uvRow.add(spriteUV1.x);\n          rowCount += 2;\n        }\n        posRow.add(width - fixedR * scale), posRow.add(width - expectWidth * (1 - right) * scale);\n        uvRow.add(spriteUV2.x), uvRow.add(spriteUV2.x), uvRow.add(spriteUV3.x);\n        rowCount += 3;\n        break;\n      default:\n        break;\n    }\n\n    switch (cType) {\n      case TiledType.Compressed:\n        scale = height / fixedTB;\n        posColumn.add(expectHeight * bottom * scale), posColumn.add(fixedB * scale);\n        posColumn.add(height - expectHeight * (1 - top) * scale);\n        uvColumn.add(spriteUV0.y), uvColumn.add(spriteUV1.y), uvColumn.add(spriteUV2.y), uvColumn.add(spriteUV3.y);\n        columnCount += 4;\n        break;\n      case TiledType.WithoutTiled:\n        posColumn.add(expectHeight * bottom), posColumn.add(fixedB), posColumn.add(height - fixedT);\n        posColumn.add(height - expectHeight * (1 - top));\n        uvColumn.add(spriteUV0.y), uvColumn.add(spriteUV1.y), uvColumn.add(NaN), uvColumn.add(NaN);\n        uvColumn.add(spriteUV2.y), uvColumn.add(spriteUV3.y);\n        columnCount += 4;\n        break;\n      case TiledType.WithTiled:\n        scale = height / (fixedTB + cRepeatCount * fixedCH);\n        posColumn.add(expectHeight * bottom * scale), posColumn.add(fixedB * scale);\n        uvColumn.add(spriteUV0.y), uvColumn.add(spriteUV1.y), uvColumn.add(spriteUV1.y);\n        columnCount += 3;\n        for (let i = 0, l = cRepeatCount - 1; i < l; i++) {\n          posColumn.add(fixedB + (i + 1) * fixedCH * scale);\n          uvColumn.add(spriteUV2.y), uvColumn.add(spriteUV1.y);\n          columnCount += 2;\n        }\n        posColumn.add(height - fixedT * scale), posColumn.add(height - expectHeight * (1 - top) * scale);\n        uvColumn.add(spriteUV2.y), uvColumn.add(spriteUV2.y), uvColumn.add(spriteUV3.y);\n        columnCount += 3;\n        break;\n      default:\n        break;\n    }\n\n    return rowCount * columnCount;\n  }\n\n  private static _calculateContinuousDividing(\n    sprite: Sprite,\n    width: number,\n    height: number,\n    posRow: DisorderedArray<number>,\n    posColumn: DisorderedArray<number>,\n    uvRow: DisorderedArray<number>,\n    uvColumn: DisorderedArray<number>,\n    maxVertexCount: number\n  ): number {\n    const { border } = sprite;\n    const spritePositions = sprite._getPositions();\n    const { x: left, y: bottom } = spritePositions[0];\n    const { x: right, y: top } = spritePositions[3];\n    const [spriteUV0, spriteUV1, spriteUV2, spriteUV3] = sprite._getUVs();\n    const { width: expectWidth, height: expectHeight } = sprite;\n    const fixedL = expectWidth * border.x;\n    const fixedR = expectWidth * border.z;\n    const fixedLR = fixedL + fixedR;\n    const fixedCW = expectWidth - fixedLR;\n    const fixedT = expectHeight * border.w;\n    const fixedB = expectHeight * border.y;\n    const fixedTB = fixedT + fixedB;\n    const fixedCH = expectHeight - fixedTB;\n    let rType: TiledType, cType: TiledType;\n    let rVertCount: number, cVertCount: number;\n    let rRepeatCount: number, cRepeatCount: number;\n    if (fixedLR >= width) {\n      rVertCount = 3;\n      rType = TiledType.Compressed;\n    } else {\n      if (fixedCW > MathUtil.zeroTolerance) {\n        rRepeatCount = (width - fixedLR) / fixedCW;\n        rVertCount = 4 + (rRepeatCount | 0);\n        rType = TiledType.WithTiled;\n      } else {\n        rVertCount = 4;\n        rType = TiledType.WithoutTiled;\n      }\n    }\n\n    if (fixedTB >= height) {\n      cVertCount = 3;\n      cType = TiledType.Compressed;\n    } else {\n      if (fixedCH > MathUtil.zeroTolerance) {\n        cRepeatCount = (height - fixedTB) / fixedCH;\n        cVertCount = 4 + (cRepeatCount | 0);\n        cType = TiledType.WithTiled;\n      } else {\n        cVertCount = 4;\n        cType = TiledType.WithoutTiled;\n      }\n    }\n\n    let rowCount = 0;\n    let columnCount = 0;\n\n    if ((rVertCount - 1) * (cVertCount - 1) * 4 > maxVertexCount) {\n      posRow.add(width * left), posRow.add(width * right);\n      posColumn.add(height * bottom), posColumn.add(height * top);\n      uvRow.add(spriteUV0.x), uvRow.add(spriteUV3.x);\n      uvColumn.add(spriteUV0.y), uvColumn.add(spriteUV3.y);\n      rowCount += 2;\n      columnCount += 2;\n      Logger.warn(`The number of vertices exceeds the upper limit(${maxVertexCount}).`);\n      return rowCount * columnCount;\n    }\n\n    switch (rType) {\n      case TiledType.Compressed:\n        const scale = width / fixedLR;\n        posRow.add(expectWidth * left * scale), posRow.add(fixedL * scale);\n        posRow.add(width - expectWidth * (1 - right) * scale);\n        uvRow.add(spriteUV0.x), uvRow.add(spriteUV1.x), uvRow.add(spriteUV2.x), uvRow.add(spriteUV3.x);\n        rowCount += 4;\n        break;\n      case TiledType.WithoutTiled:\n        posRow.add(expectWidth * left), posRow.add(fixedL), posRow.add(width - fixedR);\n        posRow.add(width - expectWidth * (1 - right));\n        uvRow.add(spriteUV0.x), uvRow.add(spriteUV1.x), uvRow.add(NaN), uvRow.add(NaN);\n        uvRow.add(spriteUV2.x), uvRow.add(spriteUV3.x);\n        rowCount += 4;\n        break;\n      case TiledType.WithTiled:\n        posRow.add(expectWidth * left), posRow.add(fixedL);\n        uvRow.add(spriteUV0.x), uvRow.add(spriteUV1.x), uvRow.add(spriteUV1.x);\n        rowCount += 3;\n        const countInteger = rRepeatCount | 0;\n        for (let i = 0; i < countInteger; i++) {\n          posRow.add(fixedL + (i + 1) * fixedCW);\n          uvRow.add(spriteUV2.x), uvRow.add(spriteUV1.x);\n          rowCount += 2;\n        }\n        posRow.add(width - fixedR), posRow.add(width - expectWidth * (1 - right));\n        uvRow.add((spriteUV2.x - spriteUV1.x) * (rRepeatCount - countInteger) + spriteUV1.x);\n        uvRow.add(spriteUV2.x), uvRow.add(spriteUV3.x);\n        rowCount += 3;\n        break;\n      default:\n        break;\n    }\n\n    switch (cType) {\n      case TiledType.Compressed:\n        const scale = height / fixedTB;\n        posColumn.add(expectHeight * bottom * scale), posColumn.add(fixedB * scale);\n        posColumn.add(height - expectHeight * (1 - top) * scale);\n        uvColumn.add(spriteUV0.y), uvColumn.add(spriteUV1.y), uvColumn.add(spriteUV2.y), uvColumn.add(spriteUV3.y);\n        columnCount += 4;\n        break;\n      case TiledType.WithoutTiled:\n        posColumn.add(expectHeight * bottom), posColumn.add(fixedB), posColumn.add(height - fixedT);\n        posColumn.add(height - expectHeight * (1 - top));\n        uvColumn.add(spriteUV0.y), uvColumn.add(spriteUV1.y), uvColumn.add(NaN), uvColumn.add(NaN);\n        uvColumn.add(spriteUV2.y), uvColumn.add(spriteUV3.y);\n        columnCount += 4;\n        break;\n      case TiledType.WithTiled:\n        posColumn.add(expectHeight * bottom), posColumn.add(fixedB);\n        uvColumn.add(spriteUV0.y), uvColumn.add(spriteUV1.y), uvColumn.add(spriteUV1.y);\n        columnCount += 3;\n        const countInteger = cRepeatCount | 0;\n        for (let i = 0; i < countInteger; i++) {\n          posColumn.add(fixedB + (i + 1) * fixedCH);\n          uvColumn.add(spriteUV2.y), uvColumn.add(spriteUV1.y);\n          columnCount += 2;\n        }\n        posColumn.add(height - fixedT), posColumn.add(height - expectHeight * (1 - top));\n        uvColumn.add((spriteUV2.y - spriteUV1.y) * (cRepeatCount - countInteger) + spriteUV1.y);\n        uvColumn.add(spriteUV2.y), uvColumn.add(spriteUV3.y);\n        columnCount += 3;\n        break;\n      default:\n        break;\n    }\n    return rowCount * columnCount;\n  }\n}\n\nenum TiledType {\n  Compressed,\n  WithoutTiled,\n  WithTiled\n}\n","import { BoundingBox, Color, MathUtil } from \"@galacean/engine-math\";\nimport { Entity } from \"../../Entity\";\nimport { BatchUtils } from \"../../RenderPipeline/BatchUtils\";\nimport { PrimitiveChunkManager } from \"../../RenderPipeline/PrimitiveChunkManager\";\nimport { RenderContext } from \"../../RenderPipeline/RenderContext\";\nimport { SubPrimitiveChunk } from \"../../RenderPipeline/SubPrimitiveChunk\";\nimport { SubRenderElement } from \"../../RenderPipeline/SubRenderElement\";\nimport { Renderer, RendererUpdateFlags } from \"../../Renderer\";\nimport { assignmentClone, deepClone, ignoreClone } from \"../../clone/CloneManager\";\nimport { ShaderProperty } from \"../../shader/ShaderProperty\";\nimport { ISpriteAssembler } from \"../assembler/ISpriteAssembler\";\nimport { SimpleSpriteAssembler } from \"../assembler/SimpleSpriteAssembler\";\nimport { SlicedSpriteAssembler } from \"../assembler/SlicedSpriteAssembler\";\nimport { TiledSpriteAssembler } from \"../assembler/TiledSpriteAssembler\";\nimport { SpriteDrawMode } from \"../enums/SpriteDrawMode\";\nimport { SpriteMaskInteraction } from \"../enums/SpriteMaskInteraction\";\nimport { SpriteModifyFlags } from \"../enums/SpriteModifyFlags\";\nimport { SpriteTileMode } from \"../enums/SpriteTileMode\";\nimport { Sprite } from \"./Sprite\";\n\n/**\n * Renders a Sprite for 2D graphics.\n */\nexport class SpriteRenderer extends Renderer {\n  /** @internal */\n  static _textureProperty: ShaderProperty = ShaderProperty.getByName(\"renderer_SpriteTexture\");\n\n  /** @internal */\n  @ignoreClone\n  _subChunk: SubPrimitiveChunk;\n\n  @ignoreClone\n  private _drawMode: SpriteDrawMode;\n  @assignmentClone\n  private _assembler: ISpriteAssembler;\n  @assignmentClone\n  private _tileMode: SpriteTileMode = SpriteTileMode.Continuous;\n  @assignmentClone\n  private _tiledAdaptiveThreshold: number = 0.5;\n\n  @deepClone\n  private _color: Color = new Color(1, 1, 1, 1);\n  @ignoreClone\n  private _sprite: Sprite = null;\n\n  @ignoreClone\n  private _automaticWidth: number = 0;\n  @ignoreClone\n  private _automaticHeight: number = 0;\n  @assignmentClone\n  private _customWidth: number = undefined;\n  @assignmentClone\n  private _customHeight: number = undefined;\n  @assignmentClone\n  private _flipX: boolean = false;\n  @assignmentClone\n  private _flipY: boolean = false;\n\n  /**\n   * The draw mode of the sprite renderer.\n   */\n  get drawMode(): SpriteDrawMode {\n    return this._drawMode;\n  }\n\n  set drawMode(value: SpriteDrawMode) {\n    if (this._drawMode !== value) {\n      this._drawMode = value;\n      switch (value) {\n        case SpriteDrawMode.Simple:\n          this._assembler = SimpleSpriteAssembler;\n          break;\n        case SpriteDrawMode.Sliced:\n          this._assembler = SlicedSpriteAssembler;\n          break;\n        case SpriteDrawMode.Tiled:\n          this._assembler = TiledSpriteAssembler;\n          break;\n        default:\n          break;\n      }\n      this._assembler.resetData(this);\n      this._dirtyUpdateFlag |= SpriteRendererUpdateFlags.VertexData;\n    }\n  }\n\n  /**\n   * The tiling mode of the sprite renderer. (Only works in tiled mode.)\n   */\n  get tileMode(): SpriteTileMode {\n    return this._tileMode;\n  }\n\n  set tileMode(value: SpriteTileMode) {\n    if (this._tileMode !== value) {\n      this._tileMode = value;\n      if (this.drawMode === SpriteDrawMode.Tiled) {\n        this._dirtyUpdateFlag |= SpriteRendererUpdateFlags.VertexData;\n      }\n    }\n  }\n\n  /**\n   * Stretch Threshold in Tile Adaptive Mode, specified in normalized. (Only works in tiled adaptive mode.)\n   */\n  get tiledAdaptiveThreshold(): number {\n    return this._tiledAdaptiveThreshold;\n  }\n\n  set tiledAdaptiveThreshold(value: number) {\n    if (value !== this._tiledAdaptiveThreshold) {\n      value = MathUtil.clamp(value, 0, 1);\n      this._tiledAdaptiveThreshold = value;\n      if (this.drawMode === SpriteDrawMode.Tiled) {\n        this._dirtyUpdateFlag |= SpriteRendererUpdateFlags.VertexData;\n      }\n    }\n  }\n\n  /**\n   * The Sprite to render.\n   */\n  get sprite(): Sprite {\n    return this._sprite;\n  }\n\n  set sprite(value: Sprite | null) {\n    const lastSprite = this._sprite;\n    if (lastSprite !== value) {\n      if (lastSprite) {\n        this._addResourceReferCount(lastSprite, -1);\n        lastSprite._updateFlagManager.removeListener(this._onSpriteChange);\n      }\n      this._dirtyUpdateFlag |= SpriteRendererUpdateFlags.All;\n      if (value) {\n        this._addResourceReferCount(value, 1);\n        value._updateFlagManager.addListener(this._onSpriteChange);\n        this.shaderData.setTexture(SpriteRenderer._textureProperty, value.texture);\n      } else {\n        this.shaderData.setTexture(SpriteRenderer._textureProperty, null);\n      }\n      this._sprite = value;\n    }\n  }\n\n  /**\n   * Rendering color for the Sprite graphic.\n   */\n  get color(): Color {\n    return this._color;\n  }\n\n  set color(value: Color) {\n    if (this._color !== value) {\n      this._color.copyFrom(value);\n    }\n  }\n\n  /**\n   * Render width (in world coordinates).\n   *\n   * @remarks\n   * If width is set, return the set value,\n   * otherwise return `SpriteRenderer.sprite.width`.\n   */\n  get width(): number {\n    if (this._customWidth !== undefined) {\n      return this._customWidth;\n    } else {\n      this._dirtyUpdateFlag & SpriteRendererUpdateFlags.AutomaticSize && this._calDefaultSize();\n      return this._automaticWidth;\n    }\n  }\n\n  set width(value: number) {\n    if (this._customWidth !== value) {\n      this._customWidth = value;\n      this._dirtyUpdateFlag |=\n        this._drawMode === SpriteDrawMode.Tiled\n          ? SpriteRendererUpdateFlags.VertexData\n          : RendererUpdateFlags.WorldVolume;\n    }\n  }\n\n  /**\n   * Render height (in world coordinates).\n   *\n   * @remarks\n   * If height is set, return the set value,\n   * otherwise return `SpriteRenderer.sprite.height`.\n   */\n  get height(): number {\n    if (this._customHeight !== undefined) {\n      return this._customHeight;\n    } else {\n      this._dirtyUpdateFlag & SpriteRendererUpdateFlags.AutomaticSize && this._calDefaultSize();\n      return this._automaticHeight;\n    }\n  }\n\n  set height(value: number) {\n    if (this._customHeight !== value) {\n      this._customHeight = value;\n      this._dirtyUpdateFlag |=\n        this._drawMode === SpriteDrawMode.Tiled\n          ? SpriteRendererUpdateFlags.VertexData\n          : RendererUpdateFlags.WorldVolume;\n    }\n  }\n\n  /**\n   * Flips the sprite on the X axis.\n   */\n  get flipX(): boolean {\n    return this._flipX;\n  }\n\n  set flipX(value: boolean) {\n    if (this._flipX !== value) {\n      this._flipX = value;\n      this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;\n    }\n  }\n\n  /**\n   * Flips the sprite on the Y axis.\n   */\n  get flipY(): boolean {\n    return this._flipY;\n  }\n\n  set flipY(value: boolean) {\n    if (this._flipY !== value) {\n      this._flipY = value;\n      this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;\n    }\n  }\n\n  /**\n   * The mask layer the sprite renderer belongs to.\n   */\n  get maskLayer(): number {\n    return this._maskLayer;\n  }\n\n  set maskLayer(value: number) {\n    this._maskLayer = value;\n  }\n\n  /**\n   * Interacts with the masks.\n   */\n  get maskInteraction(): SpriteMaskInteraction {\n    return this._maskInteraction;\n  }\n\n  set maskInteraction(value: SpriteMaskInteraction) {\n    if (this._maskInteraction !== value) {\n      this._maskInteraction = value;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    this.drawMode = SpriteDrawMode.Simple;\n    this._dirtyUpdateFlag |= SpriteRendererUpdateFlags.Color;\n    this.setMaterial(this._engine._basicResources.spriteDefaultMaterial);\n    this._onSpriteChange = this._onSpriteChange.bind(this);\n    //@ts-ignore\n    this._color._onValueChanged = this._onColorChanged.bind(this);\n  }\n\n  /**\n   * @internal\n   */\n  override _updateTransformShaderData(context: RenderContext, onlyMVP: boolean, batched: boolean): void {\n    //@todo: Always update world positions to buffer, should opt\n    super._updateTransformShaderData(context, onlyMVP, true);\n  }\n\n  /**\n   * @internal\n   */\n  override _cloneTo(target: SpriteRenderer, srcRoot: Entity, targetRoot: Entity): void {\n    super._cloneTo(target, srcRoot, targetRoot);\n    target._assembler.resetData(target);\n    target.sprite = this._sprite;\n    target.drawMode = this._drawMode;\n  }\n\n  /**\n   * @internal\n   */\n  override _canBatch(elementA: SubRenderElement, elementB: SubRenderElement): boolean {\n    return BatchUtils.canBatchSprite(elementA, elementB);\n  }\n\n  /**\n   * @internal\n   */\n  override _batch(elementA: SubRenderElement, elementB?: SubRenderElement): void {\n    BatchUtils.batchFor2D(elementA, elementB);\n  }\n\n  /**\n   * @internal\n   */\n  _getChunkManager(): PrimitiveChunkManager {\n    return this.engine._batcherManager.primitiveChunkManager2D;\n  }\n\n  protected override _updateBounds(worldBounds: BoundingBox): void {\n    if (this.sprite) {\n      this._assembler.updatePositions(this);\n    } else {\n      worldBounds.min.set(0, 0, 0);\n      worldBounds.max.set(0, 0, 0);\n    }\n  }\n\n  protected override _render(context: RenderContext): void {\n    if (!this.sprite?.texture || !this.width || !this.height) {\n      return;\n    }\n\n    let material = this.getMaterial();\n    if (!material) {\n      return;\n    }\n    // @todo: This question needs to be raised rather than hidden.\n    if (material.destroyed) {\n      material = this._engine._basicResources.spriteDefaultMaterial;\n    }\n\n    // Update position\n    if (this._dirtyUpdateFlag & RendererUpdateFlags.WorldVolume) {\n      this._assembler.updatePositions(this);\n      this._dirtyUpdateFlag &= ~RendererUpdateFlags.WorldVolume;\n    }\n\n    // Update uv\n    if (this._dirtyUpdateFlag & SpriteRendererUpdateFlags.UV) {\n      this._assembler.updateUVs(this);\n      this._dirtyUpdateFlag &= ~SpriteRendererUpdateFlags.UV;\n    }\n\n    // Update color\n    if (this._dirtyUpdateFlag & SpriteRendererUpdateFlags.Color) {\n      this._assembler.updateColor(this);\n      this._dirtyUpdateFlag &= ~SpriteRendererUpdateFlags.Color;\n    }\n\n    // Push primitive\n    const camera = context.camera;\n    const engine = camera.engine;\n    const renderElement = engine._renderElementPool.get();\n    renderElement.set(this.priority, this._distanceForSort);\n    const subRenderElement = engine._subRenderElementPool.get();\n    const subChunk = this._subChunk;\n    subRenderElement.set(this, material, subChunk.chunk.primitive, subChunk.subMesh, this.sprite.texture, subChunk);\n    renderElement.addSubRenderElement(subRenderElement);\n    camera._renderPipeline.pushRenderElement(context, renderElement);\n  }\n\n  protected override _onDestroy(): void {\n    const sprite = this._sprite;\n    if (sprite) {\n      this._addResourceReferCount(sprite, -1);\n      sprite._updateFlagManager.removeListener(this._onSpriteChange);\n    }\n\n    super._onDestroy();\n\n    this._sprite = null;\n    this._assembler = null;\n    if (this._subChunk) {\n      this._getChunkManager().freeSubChunk(this._subChunk);\n      this._subChunk = null;\n    }\n  }\n\n  private _calDefaultSize(): void {\n    const sprite = this._sprite;\n    if (sprite) {\n      this._automaticWidth = sprite.width;\n      this._automaticHeight = sprite.height;\n    } else {\n      this._automaticWidth = this._automaticHeight = 0;\n    }\n    this._dirtyUpdateFlag &= ~SpriteRendererUpdateFlags.AutomaticSize;\n  }\n\n  @ignoreClone\n  private _onSpriteChange(type: SpriteModifyFlags): void {\n    switch (type) {\n      case SpriteModifyFlags.texture:\n        this.shaderData.setTexture(SpriteRenderer._textureProperty, this.sprite.texture);\n        break;\n      case SpriteModifyFlags.size:\n        const { _drawMode: drawMode } = this;\n        this._dirtyUpdateFlag |= SpriteRendererUpdateFlags.AutomaticSize;\n        if (this._drawMode === SpriteDrawMode.Sliced) {\n          this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;\n        } else if (drawMode === SpriteDrawMode.Tiled) {\n          this._dirtyUpdateFlag |= SpriteRendererUpdateFlags.WorldVolumeAndUV;\n        } else {\n          // When the width and height of `SpriteRenderer` are `undefined`,\n          // the `size` of `Sprite` will affect the position of `SpriteRenderer`.\n          if (this._customWidth === undefined || this._customHeight === undefined) {\n            this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;\n          }\n        }\n        break;\n      case SpriteModifyFlags.border:\n        this._drawMode === SpriteDrawMode.Sliced &&\n          (this._dirtyUpdateFlag |= SpriteRendererUpdateFlags.WorldVolumeAndUV);\n        break;\n      case SpriteModifyFlags.region:\n      case SpriteModifyFlags.atlasRegionOffset:\n        this._dirtyUpdateFlag |= SpriteRendererUpdateFlags.WorldVolumeAndUV;\n        break;\n      case SpriteModifyFlags.atlasRegion:\n        this._dirtyUpdateFlag |= SpriteRendererUpdateFlags.UV;\n        break;\n      case SpriteModifyFlags.pivot:\n        this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;\n        break;\n      case SpriteModifyFlags.destroy:\n        this.sprite = null;\n        break;\n    }\n  }\n\n  @ignoreClone\n  private _onColorChanged(): void {\n    this._dirtyUpdateFlag |= SpriteRendererUpdateFlags.Color;\n  }\n}\n\n/**\n * @remarks Extends `RendererUpdateFlag`.\n */\nenum SpriteRendererUpdateFlags {\n  /** UV. */\n  UV = 0x2,\n  /** Color. */\n  Color = 0x4,\n  /** Automatic Size. */\n  AutomaticSize = 0x8,\n  /** WorldVolume and UV. */\n  WorldVolumeAndUV = RendererUpdateFlags.WorldVolume | SpriteRendererUpdateFlags.UV,\n  /** Vertex data.*/\n  VertexData = SpriteRendererUpdateFlags.WorldVolumeAndUV | SpriteRendererUpdateFlags.Color,\n  /** All. */\n  All = 0xf\n}\n","/**\n * Layer, used for bit operations.\n */\nexport enum Layer {\n  /** Layer 0. */\n  Layer0 = 0x1,\n  /** Layer 1. */\n  Layer1 = 0x2,\n  /** Layer 2. */\n  Layer2 = 0x4,\n  /** Layer 3. */\n  Layer3 = 0x8,\n  /** Layer 4. */\n  Layer4 = 0x10,\n  /** Layer 5. */\n  Layer5 = 0x20,\n  /** Layer 6. */\n  Layer6 = 0x40,\n  /** Layer 7. */\n  Layer7 = 0x80,\n  /** Layer 8. */\n  Layer8 = 0x100,\n  /** Layer 9. */\n  Layer9 = 0x200,\n  /** Layer 10. */\n  Layer10 = 0x400,\n  /** Layer 11. */\n  Layer11 = 0x800,\n  /** Layer 12. */\n  Layer12 = 0x1000,\n  /** Layer 13. */\n  Layer13 = 0x2000,\n  /** Layer 14. */\n  Layer14 = 0x4000,\n  /** Layer 15. */\n  Layer15 = 0x8000,\n  /** Layer 16. */\n  Layer16 = 0x10000,\n  /** Layer 17. */\n  Layer17 = 0x20000,\n  /** Layer 18. */\n  Layer18 = 0x40000,\n  /** Layer 19. */\n  Layer19 = 0x80000,\n  /** Layer 20. */\n  Layer20 = 0x100000,\n  /** Layer 21. */\n  Layer21 = 0x200000,\n  /** Layer 22. */\n  Layer22 = 0x400000,\n  /** Layer 23. */\n  Layer23 = 0x800000,\n  /** Layer 24. */\n  Layer24 = 0x1000000,\n  /** Layer 25. */\n  Layer25 = 0x2000000,\n  /** Layer 26. */\n  Layer26 = 0x4000000,\n  /** Layer 27. */\n  Layer27 = 0x8000000,\n  /** Layer 28. */\n  Layer28 = 0x10000000,\n  /** Layer 29. */\n  Layer29 = 0x20000000,\n  /** Layer 30. */\n  Layer30 = 0x40000000,\n  /** Layer 31. */\n  Layer31 = 0x80000000,\n  /** All layers. */\n  Everything = 0xffffffff,\n  /** None layer. */\n  Nothing = 0x0\n}\n","import { Vector4 } from \"@galacean/engine-math\";\nimport { Engine } from \"../Engine\";\nimport { Material } from \"../material\";\nimport { ShaderProperty } from \"../shader\";\nimport { Shader } from \"../shader/Shader\";\nimport { ShaderData } from \"../shader/ShaderData\";\nimport { ShaderMacroCollection } from \"../shader/ShaderMacroCollection\";\nimport { ShaderDataGroup } from \"../shader/enums/ShaderDataGroup\";\nimport { RenderTarget, Texture2D, TextureFilterMode, TextureFormat, TextureWrapMode } from \"../texture\";\n\n/**\n * @internal\n */\nexport class PipelineUtils {\n  private static _blitTextureProperty = ShaderProperty.getByName(\"renderer_BlitTexture\");\n  private static _blitMipLevelProperty = ShaderProperty.getByName(\"renderer_BlitMipLevel\");\n  private static _blitTexelSizeProperty = ShaderProperty.getByName(\"renderer_texelSize\"); // x: 1/width, y: 1/height, z: width, w: height\n\n  private static _rendererShaderData = new ShaderData(ShaderDataGroup.Renderer);\n  private static _texelSize = new Vector4();\n\n  static readonly defaultViewport = new Vector4(0, 0, 1, 1);\n\n  /**\n   * Recreate texture if needed.\n   * @param engine - Engine\n   * @param currentTexture - Current texture\n   * @param width - Need texture width\n   * @param height - Need texture height\n   * @param format - Need texture format\n   * @param mipmap - Need texture mipmap\n   * @param textureWrapMode - Texture wrap mode\n   * @param textureFilterMode - Texture filter mode\n   * @returns Texture\n   */\n  static recreateTextureIfNeeded(\n    engine: Engine,\n    currentTexture: Texture2D | null,\n    width: number,\n    height: number,\n    format: TextureFormat,\n    mipmap: boolean,\n    textureWrapMode: TextureWrapMode,\n    textureFilterMode: TextureFilterMode\n  ): Texture2D {\n    if (currentTexture) {\n      if (\n        currentTexture.width !== width ||\n        currentTexture.height !== height ||\n        currentTexture.format !== format ||\n        currentTexture.mipmapCount > 1 !== mipmap\n      ) {\n        currentTexture.destroy(true);\n        currentTexture = new Texture2D(engine, width, height, format, mipmap);\n        currentTexture.isGCIgnored = true;\n      }\n    } else {\n      currentTexture = new Texture2D(engine, width, height, format, mipmap);\n      currentTexture.isGCIgnored = true;\n    }\n\n    currentTexture.wrapModeU = currentTexture.wrapModeV = textureWrapMode;\n    currentTexture.filterMode = textureFilterMode;\n\n    return currentTexture;\n  }\n\n  /**\n   * Recreate render target if needed.\n   * @param engine - Engine\n   * @param currentRenderTarget - Current render target\n   * @param width - Need render target width\n   * @param height - Need render target height\n   * @param colorFormat - Need render target color format\n   * @param depthFormat - Need render target depth format\n   * @param mipmap - Need render target mipmap\n   * @param antiAliasing - Need render target anti aliasing\n   * @param textureWrapMode - Texture wrap mode\n   * @param textureFilterMode - Texture filter mode\n   * @returns Render target\n   */\n  static recreateRenderTargetIfNeeded(\n    engine: Engine,\n    currentRenderTarget: RenderTarget | null,\n    width: number,\n    height: number,\n    colorFormat: TextureFormat | null,\n    depthFormat: TextureFormat | null,\n    needDepthTexture: boolean,\n    mipmap: boolean,\n    antiAliasing: number,\n    textureWrapMode: TextureWrapMode,\n    textureFilterMode: TextureFilterMode\n  ): RenderTarget {\n    const currentColorTexture = <Texture2D>currentRenderTarget?.getColorTexture(0);\n    const colorTexture = colorFormat\n      ? PipelineUtils.recreateTextureIfNeeded(\n          engine,\n          currentColorTexture,\n          width,\n          height,\n          colorFormat,\n          mipmap,\n          textureWrapMode,\n          textureFilterMode\n        )\n      : null;\n\n    if (needDepthTexture) {\n      const currentDepthTexture = <Texture2D>currentRenderTarget?.depthTexture;\n      const needDepthTexture = depthFormat\n        ? PipelineUtils.recreateTextureIfNeeded(\n            engine,\n            currentDepthTexture,\n            width,\n            height,\n            depthFormat,\n            mipmap,\n            textureWrapMode,\n            textureFilterMode\n          )\n        : null;\n\n      if (currentColorTexture !== colorTexture || currentDepthTexture !== needDepthTexture) {\n        currentRenderTarget?.destroy(true);\n        currentRenderTarget = new RenderTarget(engine, width, height, colorTexture, needDepthTexture, antiAliasing);\n        currentRenderTarget.isGCIgnored = true;\n      }\n    } else {\n      if (\n        currentColorTexture !== colorTexture ||\n        currentRenderTarget?._depthFormat !== depthFormat ||\n        currentRenderTarget.antiAliasing !== antiAliasing\n      ) {\n        currentRenderTarget?.destroy(true);\n        currentRenderTarget = new RenderTarget(engine, width, height, colorTexture, depthFormat, antiAliasing);\n        currentRenderTarget.isGCIgnored = true;\n      }\n    }\n\n    return currentRenderTarget;\n  }\n\n  /**\n   * Blit texture to destination render target using a triangle.\n   * @param engine - Engine\n   * @param source - Source texture\n   * @param destination - Destination render target\n   * @param mipLevel - Mip level to blit\n   * @param viewport - Viewport\n   * @param material - The material to use when blitting\n   * @param passIndex - Pass index to use of the provided material\n   */\n  static blitTexture(\n    engine: Engine,\n    source: Texture2D,\n    destination: RenderTarget | null,\n    mipLevel: number = 0,\n    viewport: Vector4 = PipelineUtils.defaultViewport,\n    material: Material = null,\n    passIndex = 0\n  ): void {\n    const basicResources = engine._basicResources;\n    const blitMesh = destination ? basicResources.flipYBlitMesh : basicResources.blitMesh;\n    const blitMaterial = material || basicResources.blitMaterial;\n    const rhi = engine._hardwareRenderer;\n    const context = engine._renderContext;\n\n    // We not use projection matrix when blit, but we must modify flipProjection to make front face correct\n    context.flipProjection = !!destination;\n\n    rhi.activeRenderTarget(destination, viewport, context.flipProjection, 0);\n\n    const rendererShaderData = PipelineUtils._rendererShaderData;\n\n    rendererShaderData.setTexture(PipelineUtils._blitTextureProperty, source);\n    rendererShaderData.setFloat(PipelineUtils._blitMipLevelProperty, mipLevel);\n    PipelineUtils._texelSize.set(1 / source.width, 1 / source.height, source.width, source.height);\n    rendererShaderData.setVector4(PipelineUtils._blitTexelSizeProperty, PipelineUtils._texelSize);\n\n    const pass = blitMaterial.shader.subShaders[0].passes[passIndex];\n    const compileMacros = Shader._compileMacros;\n\n    ShaderMacroCollection.unionCollection(\n      context.camera._globalShaderMacro,\n      blitMaterial.shaderData._macroCollection,\n      compileMacros\n    );\n    const program = pass._getShaderProgram(engine, compileMacros);\n\n    program.bind();\n    program.groupingOtherUniformBlock();\n    program.uploadAll(program.rendererUniformBlock, rendererShaderData);\n    program.uploadAll(program.materialUniformBlock, blitMaterial.shaderData);\n    program.uploadUnGroupTextures();\n\n    (pass._renderState || blitMaterial.renderState)._applyStates(\n      engine,\n      false,\n      pass._renderStateDataMap,\n      blitMaterial.shaderData\n    );\n\n    rhi.drawPrimitive(blitMesh._primitive, blitMesh.subMesh, program);\n  }\n}\n","import { Matrix, Vector3 } from \"@galacean/engine-math\";\n\n/**\n * @internal\n */\nexport class VirtualCamera {\n  position: Vector3 = new Vector3();\n  isOrthographic: boolean = false;\n  viewMatrix: Matrix = new Matrix();\n  projectionMatrix: Matrix = new Matrix();\n  viewProjectionMatrix: Matrix = new Matrix();\n  nearClipPlane: number = 0.1;\n  farClipPlane: number = 100;\n  /** Only orth mode use. */\n  forward: Vector3 = new Vector3();\n}\n","/**\n * Camera clear flags enumeration.\n */\nexport enum CameraClearFlags {\n  /* Do nothing. */\n  None = 0x0,\n  /* Clear color with scene background. */\n  Color = 0x1,\n  /* Clear depth only. */\n  Depth = 0x2,\n  /* Clear depth only. */\n  Stencil = 0x4,\n\n  /* Clear color with scene background and depth. */\n  ColorDepth = 0x3,\n  /* Clear color with scene background and stencil. */\n  ColorStencil = 0x5,\n  /* Clear depth and stencil. */\n  DepthStencil = 0x6,\n\n  /* Clear color with scene background, depth, and stencil. */\n  All = 0x7\n}\n","/**\n * @internal\n */\nexport enum CameraType {\n  Normal = 0x0,\n  XRCenterCamera = 0x1,\n  XRLeftCamera = 0x2,\n  XRRightCamera = 0x4\n}\n","/**\n * Depth texture mode.\n */\nexport enum DepthTextureMode {\n  /* No depth texture. */\n  None,\n  /* Generate depth texture by pre-pass rendering. */\n  PrePass\n  // /* Generate depth texture by copy depth buffer after opaque pass. */\n  // CopyAfterOpaque\n}\n","/**\n * Down sampling.\n */\nexport enum Downsampling {\n  /** No down sampling. */\n  None = 1,\n  /** Half resolution down sampling. */\n  TwoX = 2,\n  /** Quarter resolution down sampling. */\n  FourX = 4\n}\n","/**\n * Multi-sample anti-aliasing samples.\n */\nexport enum MSAASamples {\n  /** No multi-sample anti-aliasing. */\n  None = 1,\n  /** Multi-sample anti-aliasing with 2 samples. */\n  TwoX = 2,\n  /** Multi-sample anti-aliasing with 4 samples. */\n  FourX = 4,\n  /** Multi-sample anti-aliasing with 8 samples. */\n  EightX = 8\n}\n","/**\n * The strategy to use when a shader replacement fails.\n */\nexport enum ReplacementFailureStrategy {\n  /** Keep the original shader. */\n  KeepOriginalShader,\n  /** Do not render. */\n  DoNotRender\n}\n","import { BoundingFrustum, MathUtil, Matrix, Ray, Rect, Vector2, Vector3, Vector4 } from \"@galacean/engine-math\";\nimport { BoolUpdateFlag } from \"./BoolUpdateFlag\";\nimport { Component } from \"./Component\";\nimport { DependentMode, dependentComponents } from \"./ComponentsDependencies\";\nimport { Entity } from \"./Entity\";\nimport { Layer } from \"./Layer\";\nimport { BasicRenderPipeline } from \"./RenderPipeline/BasicRenderPipeline\";\nimport { PipelineUtils } from \"./RenderPipeline/PipelineUtils\";\nimport { Transform } from \"./Transform\";\nimport { VirtualCamera } from \"./VirtualCamera\";\nimport { GLCapabilityType, Logger } from \"./base\";\nimport { deepClone, ignoreClone } from \"./clone/CloneManager\";\nimport { CameraClearFlags } from \"./enums/CameraClearFlags\";\nimport { CameraType } from \"./enums/CameraType\";\nimport { DepthTextureMode } from \"./enums/DepthTextureMode\";\nimport { Downsampling } from \"./enums/Downsampling\";\nimport { MSAASamples } from \"./enums/MSAASamples\";\nimport { ReplacementFailureStrategy } from \"./enums/ReplacementFailureStrategy\";\nimport { Shader } from \"./shader/Shader\";\nimport { ShaderData } from \"./shader/ShaderData\";\nimport { ShaderMacroCollection } from \"./shader/ShaderMacroCollection\";\nimport { ShaderProperty } from \"./shader/ShaderProperty\";\nimport { ShaderTagKey } from \"./shader/ShaderTagKey\";\nimport { ShaderDataGroup } from \"./shader/enums/ShaderDataGroup\";\nimport { TextureFormat } from \"./texture\";\nimport { RenderTarget } from \"./texture/RenderTarget\";\nimport { TextureCubeFace } from \"./texture/enums/TextureCubeFace\";\n\nclass MathTemp {\n  static tempVec4 = new Vector4();\n  static tempVec3 = new Vector3();\n  static tempVec2 = new Vector2();\n}\n\n/**\n * Camera component, as the entrance to the three-dimensional world.\n * @decorator `@dependentComponents(Transform, DependentMode.CheckOnly)`\n */\n@dependentComponents(Transform, DependentMode.CheckOnly)\nexport class Camera extends Component {\n  /** @internal */\n  static _cameraDepthTextureProperty = ShaderProperty.getByName(\"camera_DepthTexture\");\n  /** @internal */\n  static _cameraOpaqueTextureProperty = ShaderProperty.getByName(\"camera_OpaqueTexture\");\n\n  private static _inverseViewMatrixProperty = ShaderProperty.getByName(\"camera_ViewInvMat\");\n  private static _cameraPositionProperty = ShaderProperty.getByName(\"camera_Position\");\n  private static _cameraForwardProperty = ShaderProperty.getByName(\"camera_Forward\");\n  private static _cameraUpProperty = ShaderProperty.getByName(\"camera_Up\");\n  private static _cameraDepthBufferParamsProperty = ShaderProperty.getByName(\"camera_DepthBufferParams\");\n\n  /** Whether to enable frustum culling, it is enabled by default. */\n  enableFrustumCulling: boolean = true;\n\n  /**\n   * Determining what to clear when rendering by a Camera.\n   *\n   * @defaultValue `CameraClearFlags.All`\n   */\n  clearFlags: CameraClearFlags = CameraClearFlags.All;\n\n  /**\n   * Culling mask - which layers the camera renders.\n   * @remarks Support bit manipulation, corresponding to `Layer`.\n   */\n  cullingMask: Layer = Layer.Everything;\n\n  /**\n   * Depth texture mode.\n   * If `DepthTextureMode.PrePass` is used, the depth texture can be accessed in the shader using `camera_DepthTexture`.\n   *\n   * @defaultValue `DepthTextureMode.None`\n   */\n  depthTextureMode: DepthTextureMode = DepthTextureMode.None;\n\n  /**\n   * Opacity texture down sampling.\n   *\n   * @defaultValue `Downsampling.TwoX`\n   */\n  opaqueTextureDownsampling: Downsampling = Downsampling.TwoX;\n\n  /**\n   * Multi-sample anti-aliasing samples when use independent canvas mode.\n   *\n   * @remarks The `independentCanvasEnabled` property should be `true` to take effect, otherwise it will be invalid.\n   */\n  msaaSamples: MSAASamples = MSAASamples.None;\n\n  /** @internal */\n  _cameraType: CameraType = CameraType.Normal;\n  /** @internal */\n  _globalShaderMacro: ShaderMacroCollection = new ShaderMacroCollection();\n  /** @internal */\n  @deepClone\n  _frustum: BoundingFrustum = new BoundingFrustum();\n  /** @internal */\n  @ignoreClone\n  _renderPipeline: BasicRenderPipeline;\n  /** @internal */\n  @ignoreClone\n  _virtualCamera: VirtualCamera = new VirtualCamera();\n  /** @internal */\n  _replacementShader: Shader = null;\n  /** @internal */\n  _replacementSubShaderTag: ShaderTagKey = null;\n  /** @internal */\n  _replacementFailureStrategy: ReplacementFailureStrategy = null;\n  /** @internal */\n  @ignoreClone\n  _cameraIndex: number = -1;\n\n  private _priority: number = 0;\n  private _shaderData: ShaderData = new ShaderData(ShaderDataGroup.Camera);\n  private _isCustomViewMatrix = false;\n  private _isCustomProjectionMatrix = false;\n  private _fieldOfView: number = 45;\n  private _orthographicSize: number = 10;\n  private _isProjectionDirty = true;\n  private _isInvProjMatDirty: boolean = true;\n  private _customAspectRatio: number | undefined = undefined;\n  private _renderTarget: RenderTarget = null;\n  private _depthBufferParams: Vector4 = new Vector4();\n  private _opaqueTextureEnabled: boolean = false;\n  private _enableHDR = false;\n  private _enablePostProcess = false;\n\n  @ignoreClone\n  private _frustumChangeFlag: BoolUpdateFlag;\n  @ignoreClone\n  private _transform: Transform;\n  @ignoreClone\n  private _isViewMatrixDirty: BoolUpdateFlag;\n  @ignoreClone\n  private _isInvViewProjDirty: BoolUpdateFlag;\n  @deepClone\n  private _viewport: Vector4 = new Vector4(0, 0, 1, 1);\n  @deepClone\n  private _pixelViewport: Rect = new Rect(0, 0, 0, 0);\n  @deepClone\n  private _inverseProjectionMatrix: Matrix = new Matrix();\n  @deepClone\n  private _invViewProjMat: Matrix = new Matrix();\n\n  /**\n   * Whether to enable opaque texture.\n   * If enabled, the opaque texture can be accessed in the shader using `camera_OpaqueTexture`.\n   *\n   * @defaultValue `false`\n   * @remarks If enabled, the `independentCanvasEnabled` property will be forced to be true.\n   */\n  get opaqueTextureEnabled(): boolean {\n    return this._opaqueTextureEnabled;\n  }\n\n  set opaqueTextureEnabled(value: boolean) {\n    if (this._opaqueTextureEnabled !== value) {\n      this._opaqueTextureEnabled = value;\n      this._checkMainCanvasAntialiasWaste();\n    }\n  }\n\n  /**\n   * Whether independent canvas is enabled.\n   *\n   * @remarks If true, the msaa in viewport can turn or off independently by `msaaSamples` property.\n   */\n  get independentCanvasEnabled(): boolean {\n    if (this.enableHDR || (this.enablePostProcess && this.scene._postProcessManager.hasActiveEffect)) {\n      return true;\n    }\n\n    return this.opaqueTextureEnabled && !this._renderTarget;\n  }\n\n  /**\n   * Shader data.\n   */\n  get shaderData(): ShaderData {\n    return this._shaderData;\n  }\n\n  /**\n   * Near clip plane - the closest point to the camera when rendering occurs.\n   */\n  get nearClipPlane(): number {\n    return this._virtualCamera.nearClipPlane;\n  }\n\n  set nearClipPlane(value: number) {\n    this._virtualCamera.nearClipPlane = value;\n    this._projectionMatrixChange();\n  }\n\n  /**\n   * Far clip plane - the furthest point to the camera when rendering occurs.\n   */\n  get farClipPlane(): number {\n    return this._virtualCamera.farClipPlane;\n  }\n\n  set farClipPlane(value: number) {\n    this._virtualCamera.farClipPlane = value;\n    this._projectionMatrixChange();\n  }\n\n  /**\n   * The camera's view angle. activating when camera use perspective projection.\n   */\n  get fieldOfView(): number {\n    return this._fieldOfView;\n  }\n\n  set fieldOfView(value: number) {\n    this._fieldOfView = value;\n    this._projectionMatrixChange();\n  }\n\n  /**\n   * Aspect ratio. The default is automatically calculated by the viewport's aspect ratio. If it is manually set,\n   * the manual value will be kept. Call resetAspectRatio() to restore it.\n   */\n  get aspectRatio(): number {\n    const pixelViewport = this.pixelViewport;\n    return this._customAspectRatio ?? pixelViewport.width / pixelViewport.height;\n  }\n\n  set aspectRatio(value: number) {\n    this._customAspectRatio = value;\n    this._projectionMatrixChange();\n  }\n\n  /**\n   * The viewport of the camera in normalized coordinates on the screen.\n   * In normalized screen coordinates, the upper-left corner is (0, 0), and the lower-right corner is (1.0, 1.0).\n   * @remarks Re-assignment is required after modification to ensure that the modification takes effect.\n   */\n  get viewport(): Vector4 {\n    return this._viewport;\n  }\n\n  set viewport(value: Vector4) {\n    if (value !== this._viewport) {\n      this._viewport.copyFrom(value);\n    }\n  }\n\n  /**\n   * The viewport of the camera in pixel coordinates on the screen.\n   * In pixel screen coordinates, the upper-left corner is (0, 0), and the lower-right corner is (1.0, 1.0).\n   */\n  get pixelViewport(): Rect {\n    return this._pixelViewport;\n  }\n\n  /**\n   * Rendering priority, higher priority will be rendered on top of a camera with lower priority.\n   */\n  get priority(): number {\n    return this._priority;\n  }\n\n  set priority(value: number) {\n    if (this._priority !== value) {\n      if (this._phasedActiveInScene) {\n        this.scene._componentsManager._cameraNeedSorting = true;\n      }\n      this._priority = value;\n    }\n  }\n\n  /**\n   * Whether it is orthogonal, the default is false. True will use orthographic projection, false will use perspective projection.\n   */\n  get isOrthographic(): boolean {\n    return this._virtualCamera.isOrthographic;\n  }\n\n  set isOrthographic(value: boolean) {\n    this._virtualCamera.isOrthographic = value;\n    this._projectionMatrixChange();\n\n    if (value) {\n      this.shaderData.enableMacro(\"CAMERA_ORTHOGRAPHIC\");\n    } else {\n      this.shaderData.disableMacro(\"CAMERA_ORTHOGRAPHIC\");\n    }\n  }\n\n  /**\n   * Half the size of the camera in orthographic mode.\n   */\n  get orthographicSize(): number {\n    return this._orthographicSize;\n  }\n\n  set orthographicSize(value: number) {\n    this._orthographicSize = value;\n    this._projectionMatrixChange();\n  }\n\n  /**\n   * View matrix.\n   */\n  get viewMatrix(): Readonly<Matrix> {\n    const viewMatrix = this._virtualCamera.viewMatrix;\n\n    if (!this._isViewMatrixDirty.flag || this._isCustomViewMatrix) {\n      return viewMatrix;\n    }\n    this._isViewMatrixDirty.flag = false;\n\n    // Ignore scale\n    const transform = this._transform;\n    Matrix.rotationTranslation(transform.worldRotationQuaternion, transform.worldPosition, viewMatrix);\n    viewMatrix.invert();\n    return viewMatrix;\n  }\n\n  set viewMatrix(value: Matrix) {\n    this._virtualCamera.viewMatrix.copyFrom(value);\n    this._isCustomViewMatrix = true;\n    this._viewMatrixChange();\n  }\n\n  /**\n   * The projection matrix is ​​calculated by the relevant parameters of the camera by default.\n   * If it is manually set, the manual value will be maintained. Call resetProjectionMatrix() to restore it.\n   */\n  get projectionMatrix(): Readonly<Matrix> {\n    const virtualCamera = this._virtualCamera;\n    const projectionMatrix = virtualCamera.projectionMatrix;\n\n    if (!this._isProjectionDirty || this._isCustomProjectionMatrix) {\n      return projectionMatrix;\n    }\n    this._isProjectionDirty = false;\n\n    const aspectRatio = this.aspectRatio;\n    if (!virtualCamera.isOrthographic) {\n      Matrix.perspective(\n        MathUtil.degreeToRadian(this._fieldOfView),\n        aspectRatio,\n        this.nearClipPlane,\n        this.farClipPlane,\n        projectionMatrix\n      );\n    } else {\n      const width = this._orthographicSize * aspectRatio;\n      const height = this._orthographicSize;\n      Matrix.ortho(-width, width, -height, height, this.nearClipPlane, this.farClipPlane, projectionMatrix);\n    }\n    return projectionMatrix;\n  }\n\n  set projectionMatrix(value: Matrix) {\n    this._virtualCamera.projectionMatrix.copyFrom(value);\n    this._isCustomProjectionMatrix = true;\n    this._projectionMatrixChange();\n  }\n\n  /**\n   * Whether to enable HDR.\n   * @defaultValue `false`\n   * @remarks If enabled, the `independentCanvasEnabled` property will be forced to be true.\n   */\n  get enableHDR(): boolean {\n    return this._enableHDR;\n  }\n\n  set enableHDR(value: boolean) {\n    if (this.enableHDR !== value) {\n      const rhi = this.engine._hardwareRenderer;\n      const supportHDR = rhi.isWebGL2 || rhi.canIUse(GLCapabilityType.textureHalfFloat);\n      if (value && !supportHDR) {\n        Logger.warn(\"Can't enable HDR in this device.\");\n        return;\n      }\n      this._enableHDR = value;\n      this._checkMainCanvasAntialiasWaste();\n    }\n  }\n\n  /**\n   * Whether to enable post process.\n   * @defaultValue `false`\n   * @remarks If enabled, the `independentCanvasEnabled` property will be forced to be true.\n   */\n  get enablePostProcess(): boolean {\n    return this._enablePostProcess;\n  }\n\n  set enablePostProcess(value: boolean) {\n    if (this._enablePostProcess !== value) {\n      this._enablePostProcess = value;\n      this._checkMainCanvasAntialiasWaste();\n    }\n  }\n\n  /**\n   * RenderTarget. After setting, it will be rendered to the renderTarget. If it is empty, it will be rendered to the main canvas.\n   */\n  get renderTarget(): RenderTarget | null {\n    return this._renderTarget;\n  }\n\n  set renderTarget(value: RenderTarget | null) {\n    if (this._renderTarget !== value) {\n      this._renderTarget && this._addResourceReferCount(this._renderTarget, -1);\n      value && this._addResourceReferCount(value, 1);\n      this._renderTarget = value;\n      this._onPixelViewportChanged();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n\n    const transform = this.entity.transform;\n    this._transform = transform;\n    this._isViewMatrixDirty = transform.registerWorldChangeFlag();\n    this._isInvViewProjDirty = transform.registerWorldChangeFlag();\n    this._frustumChangeFlag = transform.registerWorldChangeFlag();\n    this._renderPipeline = new BasicRenderPipeline(this);\n    this._addResourceReferCount(this.shaderData, 1);\n    this._updatePixelViewport();\n\n    this._onPixelViewportChanged = this._onPixelViewportChanged.bind(this);\n    //@ts-ignore\n    this._viewport._onValueChanged = this._onPixelViewportChanged;\n    this.engine.canvas._sizeUpdateFlagManager.addListener(this._onPixelViewportChanged);\n  }\n\n  /**\n   * Restore the view matrix to the world matrix of the entity.\n   */\n  resetViewMatrix(): void {\n    this._isCustomViewMatrix = false;\n    this._viewMatrixChange();\n  }\n\n  /**\n   * Restore the automatic calculation of projection matrix through fieldOfView, nearClipPlane and farClipPlane.\n   */\n  resetProjectionMatrix(): void {\n    this._isCustomProjectionMatrix = false;\n    this._projectionMatrixChange();\n  }\n\n  /**\n   * Restore the automatic calculation of the aspect ratio through the viewport aspect ratio.\n   */\n  resetAspectRatio(): void {\n    this._customAspectRatio = undefined;\n    this._projectionMatrixChange();\n  }\n\n  /**\n   * Transform a point from world space to viewport space.\n   * @param point - Point in world space\n   * @param out - Point in viewport space, X and Y are the camera viewport space coordinates, Z is in world space units from the plane that camera forward is normal to\n   * @returns Point in viewport space\n   */\n  worldToViewportPoint(point: Vector3, out: Vector3): Vector3 {\n    const cameraPoint = MathTemp.tempVec3;\n    const viewportPoint = MathTemp.tempVec4;\n\n    Vector3.transformCoordinate(point, this.viewMatrix, cameraPoint);\n    Vector3.transformToVec4(cameraPoint, this.projectionMatrix, viewportPoint);\n\n    const w = viewportPoint.w;\n    out.set((viewportPoint.x / w + 1.0) * 0.5, (1.0 - viewportPoint.y / w) * 0.5, -cameraPoint.z);\n    return out;\n  }\n\n  /**\n   * Transform a point from viewport space to world space.\n   * @param point - Point in viewport space, X and Y are the camera viewport space coordinates, Z is in world space units from the plane that camera forward is normal to\n   * @param out - Point in world space\n   * @returns Point in world space\n   */\n  viewportToWorldPoint(point: Vector3, out: Vector3): Vector3 {\n    const { nearClipPlane, farClipPlane } = this;\n    const nf = 1 / (nearClipPlane - farClipPlane);\n\n    let z: number;\n    if (this.isOrthographic) {\n      z = -point.z * 2 * nf;\n      z += (farClipPlane + nearClipPlane) * nf;\n    } else {\n      const pointZ = point.z;\n      z = -pointZ * (nearClipPlane + farClipPlane) * nf;\n      z += 2 * nearClipPlane * farClipPlane * nf;\n      z = z / pointZ;\n    }\n\n    this._innerViewportToWorldPoint(point.x, point.y, (z + 1.0) / 2.0, this._getInvViewProjMat(), out);\n    return out;\n  }\n\n  /**\n   * Generate a ray by a point in viewport.\n   * @param point - Point in viewport space, X and Y are the camera viewport space coordinates\n   * @param out - Ray\n   * @returns Ray\n   */\n  viewportPointToRay(point: Vector2, out: Ray): Ray {\n    const invViewProjMat = this._getInvViewProjMat();\n    // Use the intersection of the near clipping plane as the origin point.\n    const origin = this._innerViewportToWorldPoint(point.x, point.y, 0.0, invViewProjMat, out.origin);\n    // Use the intersection of the far clipping plane as the origin point.\n    const direction = this._innerViewportToWorldPoint(\n      point.x,\n      point.y,\n      1 - MathUtil.zeroTolerance,\n      invViewProjMat,\n      out.direction\n    );\n    Vector3.subtract(direction, origin, direction);\n    direction.normalize();\n    return out;\n  }\n\n  /**\n   * Transform the X and Y coordinates of a point from screen space to viewport space\n   * @param point - Point in screen space\n   * @param out - Point in viewport space\n   * @returns Point in viewport space\n   */\n  screenToViewportPoint<T extends Vector2 | Vector3>(point: Vector3 | Vector2, out: T): T {\n    const canvas = this.engine.canvas;\n    const viewport = this.viewport;\n    out.x = (point.x / canvas.width - viewport.x) / viewport.z;\n    out.y = (point.y / canvas.height - viewport.y) / viewport.w;\n    (<Vector3>point).z !== undefined && ((<Vector3>out).z = (<Vector3>point).z);\n    return out;\n  }\n\n  /**\n   * Transform the X and Y coordinates of a point from viewport space to screen space.\n   * @param point - Point in viewport space\n   * @param out - Point in screen space\n   * @returns Point in screen space\n   */\n  viewportToScreenPoint<T extends Vector2 | Vector3 | Vector4>(point: T, out: T): T {\n    const canvas = this.engine.canvas;\n    const viewport = this.viewport;\n    out.x = (viewport.x + point.x * viewport.z) * canvas.width;\n    out.y = (viewport.y + point.y * viewport.w) * canvas.height;\n    (<Vector3>point).z !== undefined && ((<Vector3>out).z = (<Vector3>point).z);\n    return out;\n  }\n\n  /**\n   * Transform a point from world space to screen space.\n   *\n   * @remarks\n   * Screen space is defined in pixels, the left-top of the screen is (0,0), the right-top is (canvasPixelWidth,canvasPixelHeight).\n   *\n   * @param point - Point in world space\n   * @param out - The result will be stored\n   * @returns X and Y are the coordinates of the point in screen space, Z is the distance from the camera in world space\n   */\n  worldToScreenPoint(point: Vector3, out: Vector3): Vector3 {\n    this.worldToViewportPoint(point, out);\n    return this.viewportToScreenPoint(out, out);\n  }\n\n  /**\n   * Transform a point from screen space to world space.\n   *\n   * @param point - Screen space point, the top-left of the screen is (0,0), the right-bottom is (pixelWidth,pixelHeight), The z position is in world units from the camera\n   * @param out - Point in world space\n   * @returns Point in world space\n   */\n  screenToWorldPoint(point: Vector3, out: Vector3): Vector3 {\n    this.screenToViewportPoint(point, out);\n    return this.viewportToWorldPoint(out, out);\n  }\n\n  /**\n   * Generate a ray by a point in screen.\n   * @param point - Point in screen space, the top-left of the screen is (0,0), the right-bottom is (pixelWidth,pixelHeight)\n   * @param out - Ray\n   * @returns Ray\n   */\n  screenPointToRay(point: Vector2, out: Ray): Ray {\n    const viewportPoint = MathTemp.tempVec2;\n    this.screenToViewportPoint(point, viewportPoint);\n    return this.viewportPointToRay(viewportPoint, out);\n  }\n\n  /**\n   * Manually call the rendering of the camera.\n   * @param cubeFace - Cube rendering surface collection\n   * @param mipLevel - Set mip level the data want to write, only take effect in webgl2.0\n   */\n  render(cubeFace?: TextureCubeFace, mipLevel: number = 0): void {\n    const engine = this._engine;\n    const context = engine._renderContext;\n    const virtualCamera = this._virtualCamera;\n\n    const transform = this.entity.transform;\n    Matrix.multiply(this.projectionMatrix, this.viewMatrix, virtualCamera.viewProjectionMatrix);\n    virtualCamera.position.copyFrom(transform.worldPosition);\n    if (virtualCamera.isOrthographic) {\n      virtualCamera.forward.copyFrom(transform.worldForward);\n    }\n\n    context.camera = this;\n    context.virtualCamera = virtualCamera;\n    context.replacementShader = this._replacementShader;\n    context.replacementTag = this._replacementSubShaderTag;\n    context.replacementFailureStrategy = this._replacementFailureStrategy;\n\n    // compute cull frustum.\n    if (this.enableFrustumCulling && this._frustumChangeFlag.flag) {\n      this._frustum.calculateFromMatrix(virtualCamera.viewProjectionMatrix);\n      this._frustumChangeFlag.flag = false;\n    }\n\n    this._updateShaderData();\n\n    // union scene and camera macro.\n    ShaderMacroCollection.unionCollection(\n      this.scene._globalShaderMacro,\n      this.shaderData._macroCollection,\n      this._globalShaderMacro\n    );\n\n    if (mipLevel > 0 && !engine._hardwareRenderer.isWebGL2) {\n      mipLevel = 0;\n      Logger.error(\"mipLevel only take effect in WebGL2.0\");\n    }\n    let ignoreClearFlags: CameraClearFlags;\n    if (this._cameraType !== CameraType.Normal && !this._renderTarget && !this.independentCanvasEnabled) {\n      ignoreClearFlags = engine.xrManager._getCameraIgnoreClearFlags(this._cameraType);\n    }\n    this._renderPipeline.render(context, cubeFace, mipLevel, ignoreClearFlags);\n    engine._renderCount++;\n  }\n\n  /**\n   * Set the replacement shader.\n   * @param shader - Replacement shader\n   * @param replacementTagName - Sub shader tag name\n   * @param failureStrategy - Replacement failure strategy, @defaultValue `ReplacementFailureStrategy.KeepOriginalShader`\n   *\n   * @remarks\n   * If replacementTagName is not specified, the first sub shader will be replaced.\n   * If replacementTagName is specified, the replacement shader will find the first sub shader which has the same tag value get by replacementTagKey. If failed to find the sub shader, the strategy will be determined by failureStrategy.\n   */\n  setReplacementShader(shader: Shader, replacementTagName?: string, failureStrategy?: ReplacementFailureStrategy);\n\n  /**\n   * Set the replacement shader.\n   * @param shader - Replacement shader\n   * @param replacementTag - Sub shader tag\n   * @param failureStrategy - Replacement failure strategy, @defaultValue `ReplacementFailureStrategy.KeepOriginalShader`\n   *\n   * @remarks\n   * If replacementTag is not specified, the first sub shader will be replaced.\n   * If replacementTag is specified, the replacement shader will find the first sub shader which has the same tag value get by replacementTagKey. If failed to find the sub shader, the strategy will be determined by failureStrategy.\n   */\n  setReplacementShader(shader: Shader, replacementTag?: ShaderTagKey, failureStrategy?: ReplacementFailureStrategy);\n\n  setReplacementShader(\n    shader: Shader,\n    replacementTag?: string | ShaderTagKey,\n    failureStrategy: ReplacementFailureStrategy = ReplacementFailureStrategy.KeepOriginalShader\n  ): void {\n    this._replacementShader = shader;\n    this._replacementSubShaderTag =\n      typeof replacementTag === \"string\" ? ShaderTagKey.getByName(replacementTag) : replacementTag;\n    this._replacementFailureStrategy = failureStrategy;\n  }\n\n  /**\n   * Reset and clear the replacement shader.\n   */\n  resetReplacementShader(): void {\n    this._replacementShader = null;\n    this._replacementSubShaderTag = null;\n    this._replacementFailureStrategy = null;\n  }\n\n  /**\n   * @inheritdoc\n   */\n  override _onEnableInScene(): void {\n    this.scene._componentsManager.addCamera(this);\n  }\n\n  /**\n   * @inheritdoc\n   */\n  override _onDisableInScene(): void {\n    this.scene._componentsManager.removeCamera(this);\n  }\n\n  /**\n   * @internal\n   */\n  _getInternalColorTextureFormat(): TextureFormat {\n    return this._enableHDR\n      ? this.engine._hardwareRenderer.isWebGL2\n        ? TextureFormat.R11G11B10_UFloat\n        : TextureFormat.R16G16B16A16\n      : TextureFormat.R8G8B8A8;\n  }\n\n  /**\n   * @internal\n   * @inheritdoc\n   */\n  protected override _onDestroy(): void {\n    super._onDestroy();\n    this._renderPipeline?.destroy();\n    this._isInvViewProjDirty.destroy();\n    this._isViewMatrixDirty.destroy();\n    this._addResourceReferCount(this.shaderData, -1);\n\n    //@ts-ignore\n    this._viewport._onValueChanged = null;\n    this.engine.canvas._sizeUpdateFlagManager.removeListener(this._onPixelViewportChanged);\n\n    this._entity = null;\n    this._globalShaderMacro = null;\n    this._frustum = null;\n    this._renderPipeline = null;\n    this._virtualCamera = null;\n    this._shaderData = null;\n    this._frustumChangeFlag = null;\n    this._transform = null;\n    this._isViewMatrixDirty = null;\n    this._isInvViewProjDirty = null;\n    this._viewport = null;\n    this._inverseProjectionMatrix = null;\n    this._invViewProjMat = null;\n  }\n\n  private _updatePixelViewport(): void {\n    let width: number, height: number;\n\n    const renderTarget = this._renderTarget;\n    if (renderTarget) {\n      width = renderTarget.width;\n      height = renderTarget.height;\n    } else {\n      const canvas = this.engine.canvas;\n      width = canvas.width;\n      height = canvas.height;\n    }\n\n    const viewport = this._viewport;\n    this._pixelViewport.set(viewport.x * width, viewport.y * height, viewport.z * width, viewport.w * height);\n  }\n\n  private _viewMatrixChange(): void {\n    this._isViewMatrixDirty.flag = true;\n    this._isInvViewProjDirty.flag = true;\n    this._frustumChangeFlag.flag = true;\n  }\n\n  private _projectionMatrixChange(): void {\n    this._isProjectionDirty = true;\n    this._isInvProjMatDirty = true;\n    this._isInvViewProjDirty.flag = true;\n    this._frustumChangeFlag.flag = true;\n  }\n\n  private _innerViewportToWorldPoint(x: number, y: number, z: number, invViewProjMat: Matrix, out: Vector3): Vector3 {\n    // Depth is a normalized value, 0 is nearPlane, 1 is farClipPlane.\n    // Transform to clipping space matrix\n    const clipPoint = MathTemp.tempVec3;\n    clipPoint.set(x * 2 - 1, 1 - y * 2, z * 2 - 1);\n    Vector3.transformCoordinate(clipPoint, invViewProjMat, out);\n    return out;\n  }\n\n  private _updateShaderData(): void {\n    const shaderData = this.shaderData;\n\n    const transform = this._transform;\n    shaderData.setMatrix(Camera._inverseViewMatrixProperty, transform.worldMatrix);\n    shaderData.setVector3(Camera._cameraPositionProperty, transform.worldPosition);\n    shaderData.setVector3(Camera._cameraForwardProperty, transform.worldForward);\n    shaderData.setVector3(Camera._cameraUpProperty, transform.worldUp);\n\n    const depthBufferParams = this._depthBufferParams;\n    const farDivideNear = this.farClipPlane / this.nearClipPlane;\n    depthBufferParams.set(1.0 - farDivideNear, farDivideNear, 0, 0);\n    shaderData.setVector4(Camera._cameraDepthBufferParamsProperty, depthBufferParams);\n  }\n\n  /**\n   * The inverse matrix of view projection matrix.\n   */\n  private _getInvViewProjMat(): Matrix {\n    if (this._isInvViewProjDirty.flag) {\n      this._isInvViewProjDirty.flag = false;\n      Matrix.multiply(this._transform.worldMatrix, this._getInverseProjectionMatrix(), this._invViewProjMat);\n    }\n    return this._invViewProjMat;\n  }\n\n  /**\n   * The inverse of the projection matrix.\n   */\n  private _getInverseProjectionMatrix(): Readonly<Matrix> {\n    if (this._isInvProjMatDirty) {\n      this._isInvProjMatDirty = false;\n      Matrix.invert(this.projectionMatrix, this._inverseProjectionMatrix);\n    }\n    return this._inverseProjectionMatrix;\n  }\n\n  @ignoreClone\n  private _onPixelViewportChanged(): void {\n    this._updatePixelViewport();\n    this._customAspectRatio ?? this._projectionMatrixChange();\n    this._checkMainCanvasAntialiasWaste();\n  }\n\n  private _checkMainCanvasAntialiasWaste(): void {\n    if (\n      this._phasedActiveInScene &&\n      this.independentCanvasEnabled &&\n      Vector4.equals(this._viewport, PipelineUtils.defaultViewport)\n    ) {\n      Logger.warn(\n        \"Camera use independent canvas and viewport cover the whole screen, it is recommended to disable antialias, depth and stencil to save memory when create engine.\"\n      );\n    }\n  }\n}\n","/**\n * The Background mode enumeration.\n */\nexport enum BackgroundMode {\n  /* Solid color. */\n  SolidColor,\n  /* Sky. */\n  Sky,\n  /** Texture */\n  Texture\n}\n","/**\n * Filling mode of background texture.\n */\nexport enum BackgroundTextureFillMode {\n  /* Maintain the aspect ratio and scale the texture to fit the width of the canvas. */\n  AspectFitWidth,\n  /* Maintain the aspect ratio and scale the texture to fit the height of the canvas. */\n  AspectFitHeight,\n  /* Scale the texture fully fills the canvas. */\n  Fill\n}\n","import { Engine } from \"../Engine\";\nimport { CullingResults } from \"../RenderPipeline/CullingResults\";\nimport { RenderContext } from \"../RenderPipeline/RenderContext\";\n\n/**\n * PipelinePass is a base class for all pipeline passes.\n */\nexport abstract class PipelinePass {\n  constructor(public readonly engine: Engine) {}\n\n  /**\n   * Called before rendering a camera, override this method to configure the camera If you need to configure the camera clear flag or render target.\n   * @param context - Rendering context\n   * @param cullingResults - Culling results\n   */\n  abstract onRender(context: RenderContext, cullingResults: CullingResults): void;\n}\n","import { Matrix, Vector4 } from \"@galacean/engine-math\";\nimport { Camera } from \"../Camera\";\nimport { VirtualCamera } from \"../VirtualCamera\";\nimport { ReplacementFailureStrategy } from \"../enums/ReplacementFailureStrategy\";\nimport { Shader, ShaderProperty } from \"../shader\";\nimport { ShaderTagKey } from \"../shader/ShaderTagKey\";\n\n/**\n * @internal\n */\nexport class RenderContext {\n  static vpMatrixProperty = ShaderProperty.getByName(\"camera_VPMat\");\n  static pipelineStageKey: ShaderTagKey = ShaderTagKey.getByName(\"pipelineStage\");\n\n  /** @internal */\n  static _flipYMatrix = new Matrix(1, 0, 0, 0, 0, -1);\n\n  private static _cameraProjectionProperty = ShaderProperty.getByName(\"camera_ProjectionParams\");\n  private static _viewMatrixProperty = ShaderProperty.getByName(\"camera_ViewMat\");\n  private static _projectionMatrixProperty = ShaderProperty.getByName(\"camera_ProjMat\");\n  private static _flipYProjectionMatrix = new Matrix();\n  private static _flipYViewProjectionMatrix = new Matrix();\n\n  private _projectionParams: Vector4 = new Vector4();\n\n  camera: Camera;\n  virtualCamera: VirtualCamera;\n\n  replacementShader: Shader;\n  replacementTag: ShaderTagKey;\n  replacementFailureStrategy: ReplacementFailureStrategy;\n\n  flipProjection = false;\n  viewMatrix: Matrix;\n  projectionMatrix: Matrix;\n  viewProjectionMatrix: Matrix;\n  rendererUpdateFlag = ContextRendererUpdateFlag.None;\n\n  applyVirtualCamera(virtualCamera: VirtualCamera, flipProjection: boolean): void {\n    this.virtualCamera = virtualCamera;\n    this.flipProjection = flipProjection;\n\n    const shaderData = this.camera.shaderData;\n    let { viewMatrix, projectionMatrix, viewProjectionMatrix } = virtualCamera;\n\n    if (flipProjection) {\n      Matrix.multiply(RenderContext._flipYMatrix, projectionMatrix, RenderContext._flipYProjectionMatrix);\n      Matrix.multiply(RenderContext._flipYProjectionMatrix, viewMatrix, RenderContext._flipYViewProjectionMatrix);\n\n      projectionMatrix = RenderContext._flipYProjectionMatrix;\n      viewProjectionMatrix = RenderContext._flipYViewProjectionMatrix;\n    }\n\n    this.viewMatrix = viewMatrix;\n    this.projectionMatrix = projectionMatrix;\n    this.viewProjectionMatrix = viewProjectionMatrix;\n\n    shaderData.setMatrix(RenderContext._viewMatrixProperty, viewMatrix);\n    shaderData.setMatrix(RenderContext._projectionMatrixProperty, projectionMatrix);\n    shaderData.setMatrix(RenderContext.vpMatrixProperty, viewProjectionMatrix);\n\n    const projectionParams = this._projectionParams;\n    projectionParams.set(flipProjection ? -1 : 1, virtualCamera.nearClipPlane, virtualCamera.farClipPlane, 0);\n    shaderData.setVector4(RenderContext._cameraProjectionProperty, projectionParams);\n  }\n\n  garbageCollection(): void {\n    this.camera = null;\n  }\n}\n\n/**\n * @internal\n */\nexport enum ContextRendererUpdateFlag {\n  None = 0,\n  WorldMatrix = 0x1,\n  viewMatrix = 0x2,\n  ProjectionMatrix = 0x4,\n  WorldViewMatrix = 0x3,\n  viewProjectionMatrix = 0x6,\n  All = 0x7\n}\n","/**\n * @internal\n * Render queue mask type.\n */\nexport enum RenderQueueMaskType {\n  No,\n  Increment,\n  Decrement\n}\n","import { SpriteMaskInteraction } from \"../2d/enums/SpriteMaskInteraction\";\nimport { BasicResources, RenderStateElementMap } from \"../BasicResources\";\nimport { Utils } from \"../Utils\";\nimport { RenderQueueType, Shader } from \"../shader\";\nimport { ShaderMacroCollection } from \"../shader/ShaderMacroCollection\";\nimport { BatcherManager } from \"./BatcherManager\";\nimport { ContextRendererUpdateFlag, RenderContext } from \"./RenderContext\";\nimport { RenderElement } from \"./RenderElement\";\nimport { SubRenderElement } from \"./SubRenderElement\";\nimport { RenderQueueMaskType } from \"./enums/RenderQueueMaskType\";\n\n/**\n * @internal\n */\nexport class RenderQueue {\n  static compareForOpaque(a: RenderElement, b: RenderElement): number {\n    return a.priority - b.priority || a.distanceForSort - b.distanceForSort;\n  }\n\n  static compareForTransparent(a: RenderElement, b: RenderElement): number {\n    return a.priority - b.priority || b.distanceForSort - a.distanceForSort;\n  }\n\n  readonly elements = new Array<RenderElement>();\n  readonly batchedSubElements = new Array<SubRenderElement>();\n\n  constructor(public renderQueueType: RenderQueueType) {}\n\n  pushRenderElement(element: RenderElement): void {\n    this.elements.push(element);\n  }\n\n  sortBatch(compareFunc: Function, batcherManager: BatcherManager): void {\n    Utils._quickSort(this.elements, 0, this.elements.length, compareFunc);\n    this.batch(batcherManager);\n  }\n\n  batch(batcherManager: BatcherManager): void {\n    batcherManager.batch(this);\n  }\n\n  render(\n    context: RenderContext,\n    pipelineStageTagValue: string,\n    maskType: RenderQueueMaskType = RenderQueueMaskType.No\n  ): void {\n    const batchedSubElements = this.batchedSubElements;\n    const length = batchedSubElements.length;\n    if (length === 0) {\n      return;\n    }\n\n    const { rendererUpdateFlag, camera } = context;\n    const { engine, scene, instanceId: cameraId, shaderData: cameraData } = camera;\n    const { instanceId: sceneId, shaderData: sceneData, _maskManager: maskManager } = scene;\n    const renderCount = engine._renderCount;\n    const rhi = engine._hardwareRenderer;\n    const pipelineStageKey = RenderContext.pipelineStageKey;\n    const renderQueueType = this.renderQueueType;\n\n    for (let i = 0; i < length; i++) {\n      const subElement = batchedSubElements[i];\n      const { component: renderer, batched, material } = subElement;\n\n      // @todo: Can optimize update view projection matrix updated\n      if (\n        rendererUpdateFlag & ContextRendererUpdateFlag.WorldViewMatrix ||\n        renderer._batchedTransformShaderData != batched\n      ) {\n        // Update world matrix and view matrix and model matrix\n        renderer._updateTransformShaderData(context, false, batched);\n        renderer._batchedTransformShaderData = batched;\n      } else if (rendererUpdateFlag & ContextRendererUpdateFlag.ProjectionMatrix) {\n        // Only projection matrix need updated\n        renderer._updateTransformShaderData(context, true, batched);\n      }\n\n      const maskInteraction = renderer._maskInteraction;\n      const needMaskInteraction = maskInteraction !== SpriteMaskInteraction.None;\n      const needMaskType = maskType !== RenderQueueMaskType.No;\n      let customStates: RenderStateElementMap = null;\n\n      if (needMaskType) {\n        customStates = BasicResources.getMaskTypeRenderStates(maskType);\n      } else {\n        if (needMaskInteraction) {\n          maskManager.drawMask(context, pipelineStageTagValue, subElement.component._maskLayer);\n          customStates = BasicResources.getMaskInteractionRenderStates(maskInteraction);\n        } else {\n          maskManager.isReadStencil(material) && maskManager.clearMask(context, pipelineStageTagValue);\n        }\n        maskManager.isStencilWritten(material) && (maskManager.hasStencilWritten = true);\n      }\n\n      const compileMacros = Shader._compileMacros;\n      const { primitive, shaderPasses, shaderData: renderElementShaderData } = subElement;\n      const { shaderData: rendererData, instanceId: rendererId } = renderer;\n      const { shaderData: materialData, instanceId: materialId, renderStates } = material;\n\n      // Union render global macro and material self macro\n      ShaderMacroCollection.unionCollection(renderer._globalShaderMacro, materialData._macroCollection, compileMacros);\n\n      for (let j = 0, m = shaderPasses.length; j < m; j++) {\n        const shaderPass = shaderPasses[j];\n        if (shaderPass.getTagValue(pipelineStageKey) !== pipelineStageTagValue) {\n          continue;\n        }\n\n        if (!needMaskType) {\n          if ((shaderPass._renderState ?? renderStates[j]).renderQueueType !== renderQueueType) {\n            continue;\n          }\n        }\n\n        const program = shaderPass._getShaderProgram(engine, compileMacros);\n        if (!program.isValid) {\n          continue;\n        }\n\n        const switchProgram = program.bind();\n        const switchRenderCount = renderCount !== program._uploadRenderCount;\n\n        if (switchRenderCount) {\n          program.groupingOtherUniformBlock();\n          program.uploadAll(program.sceneUniformBlock, sceneData);\n          program.uploadAll(program.cameraUniformBlock, cameraData);\n          program.uploadAll(program.rendererUniformBlock, rendererData);\n          program.uploadAll(program.materialUniformBlock, materialData);\n          renderElementShaderData && program.uploadAll(program.renderElementUniformBlock, renderElementShaderData);\n          // UnGroup textures should upload default value, texture uint maybe change by logic of texture bind.\n          program.uploadUnGroupTextures();\n          program._uploadSceneId = sceneId;\n          program._uploadCameraId = cameraId;\n          program._uploadRendererId = rendererId;\n          program._uploadMaterialId = materialId;\n          program._uploadRenderCount = renderCount;\n        } else {\n          if (program._uploadSceneId !== sceneId) {\n            program.uploadAll(program.sceneUniformBlock, sceneData);\n            program._uploadSceneId = sceneId;\n          } else if (switchProgram) {\n            program.uploadTextures(program.sceneUniformBlock, sceneData);\n          }\n\n          if (program._uploadCameraId !== cameraId) {\n            program.uploadAll(program.cameraUniformBlock, cameraData);\n            program._uploadCameraId = cameraId;\n          } else if (switchProgram) {\n            program.uploadTextures(program.cameraUniformBlock, cameraData);\n          }\n\n          if (program._uploadRendererId !== rendererId) {\n            program.uploadAll(program.rendererUniformBlock, rendererData);\n            program._uploadRendererId = rendererId;\n          } else if (switchProgram) {\n            program.uploadTextures(program.rendererUniformBlock, rendererData);\n          }\n\n          if (program._uploadMaterialId !== materialId) {\n            program.uploadAll(program.materialUniformBlock, materialData);\n            program._uploadMaterialId = materialId;\n          } else if (switchProgram) {\n            program.uploadTextures(program.materialUniformBlock, materialData);\n          }\n\n          renderElementShaderData && program.uploadAll(program.renderElementUniformBlock, renderElementShaderData);\n\n          // We only consider switchProgram case, because UnGroup texture's value is always default.\n          if (switchProgram) {\n            program.uploadUnGroupTextures();\n          }\n        }\n\n        const renderState = shaderPass._renderState ?? renderStates[j];\n        renderState._applyStates(\n          engine,\n          renderer.entity.transform._isFrontFaceInvert(),\n          shaderPass._renderStateDataMap,\n          material.shaderData,\n          customStates\n        );\n        rhi.drawPrimitive(primitive, subElement.subPrimitive, program);\n      }\n    }\n  }\n\n  clear(): void {\n    this.elements.length = 0;\n    this.batchedSubElements.length = 0;\n  }\n\n  destroy(): void {}\n}\n","import { BoundingSphere, Matrix, Plane, Vector3 } from \"@galacean/engine-math\";\nimport { VirtualCamera } from \"../VirtualCamera\";\n\n/**\n * @internal\n */\nexport class ShadowSliceData {\n  resolution: number;\n  virtualCamera: VirtualCamera = new VirtualCamera();\n  cullPlanes: Plane[] = [\n    new Plane(new Vector3()),\n    new Plane(new Vector3()),\n    new Plane(new Vector3()),\n    new Plane(new Vector3()),\n    new Plane(new Vector3()),\n    new Plane(new Vector3()),\n    new Plane(new Vector3()),\n    new Plane(new Vector3()),\n    new Plane(new Vector3()),\n    new Plane(new Vector3())\n  ];\n  cullPlaneCount: number;\n\n  // bounding sphere\n  splitBoundSphere: BoundingSphere = new BoundingSphere(new Vector3(), 0.0);\n  sphereCenterZ: number;\n}\n","/**\n * Default shadow resolution.\n */\nexport enum ShadowResolution {\n  /** Low shadow map resolution. */\n  Low,\n  /** Medium shadow map resolution. */\n  Medium,\n  /**  High shadow map resolution. */\n  High,\n  /** Very high shadow map resolution. */\n  VeryHigh\n}\n","/**\n * Determines which type of shadows should be used.\n */\nexport enum ShadowType {\n  /** Disable Shadows. */\n  None,\n  /** Hard Shadows Only. */\n  Hard,\n  /** Cast \"soft\" shadows with low range. */\n  SoftLow,\n  /** Cast \"soft\" shadows with large range. */\n  SoftHigh\n}\n","import {\n  BoundingBox,\n  BoundingFrustum,\n  CollisionUtil,\n  FrustumFace,\n  MathUtil,\n  Matrix,\n  Plane,\n  Vector2,\n  Vector3,\n  Vector4\n} from \"@galacean/engine-math\";\nimport { Camera } from \"../Camera\";\nimport { RenderContext } from \"../RenderPipeline/RenderContext\";\nimport { Renderer } from \"../Renderer\";\nimport { Utils } from \"../Utils\";\nimport { DirectLight, Light } from \"../lighting\";\nimport { TextureFormat } from \"../texture\";\nimport { ShadowSliceData } from \"./ShadowSliceData\";\nimport { ShadowResolution } from \"./enum/ShadowResolution\";\nimport { ShadowType } from \"./enum/ShadowType\";\n\n/**\n * @internal\n */\nenum FrustumCorner {\n  FarBottomLeft = 0,\n  FarTopLeft = 1,\n  FarTopRight = 2,\n  FarBottomRight = 3,\n  nearBottomLeft = 4,\n  nearTopLeft = 5,\n  nearTopRight = 6,\n  nearBottomRight = 7,\n  unknown = 8\n}\n\n/**\n * @internal\n */\nexport class ShadowUtils {\n  private static _tempMatrix0: Matrix = new Matrix();\n\n  // prettier-ignore\n  /** @internal */\n  private static _shadowMapCoordMatrix: Matrix = new Matrix(\n    0.5, 0.0, 0.0, 0.0,\n    0.0, -0.5, 0.0, 0.0,\n    0.0, 0.0, 0.5, 0.0,\n    0.5, 0.5, 0.5, 1.0\n  );\n\n  private static _frustumCorners: Vector3[] = [\n    new Vector3(),\n    new Vector3(),\n    new Vector3(),\n    new Vector3(),\n    new Vector3(),\n    new Vector3(),\n    new Vector3(),\n    new Vector3()\n  ];\n  private static _adjustNearPlane: Plane = new Plane(new Vector3());\n  private static _adjustFarPlane: Plane = new Plane(new Vector3());\n  private static _backPlaneFaces: FrustumFace[] = new Array(5);\n  private static _edgePlanePoint2: Vector3 = new Vector3();\n\n  /** near, far, left, right, bottom, top  */\n  private static _frustumPlaneNeighbors: FrustumFace[][] = [\n    [FrustumFace.Left, FrustumFace.Right, FrustumFace.Top, FrustumFace.Bottom],\n    [FrustumFace.Left, FrustumFace.Right, FrustumFace.Top, FrustumFace.Bottom],\n    [FrustumFace.Near, FrustumFace.Far, FrustumFace.Top, FrustumFace.Bottom],\n    [FrustumFace.Near, FrustumFace.Far, FrustumFace.Top, FrustumFace.Bottom],\n    [FrustumFace.Near, FrustumFace.Far, FrustumFace.Left, FrustumFace.Right],\n    [FrustumFace.Near, FrustumFace.Far, FrustumFace.Left, FrustumFace.Right]\n  ];\n\n  /** near, far, left, right, bottom, top  */\n  private static _frustumTwoPlaneCorners: FrustumCorner[][][] = [\n    [\n      // near, far, left, right, bottom, top\n      [FrustumCorner.unknown, FrustumCorner.unknown],\n      [FrustumCorner.unknown, FrustumCorner.unknown],\n      [FrustumCorner.nearBottomLeft, FrustumCorner.nearTopLeft],\n      [FrustumCorner.nearTopRight, FrustumCorner.nearBottomRight],\n      [FrustumCorner.nearBottomRight, FrustumCorner.nearBottomLeft],\n      [FrustumCorner.nearTopLeft, FrustumCorner.nearTopRight]\n    ],\n    [\n      // near, far, left, right, bottom, top\n      [FrustumCorner.unknown, FrustumCorner.unknown],\n      [FrustumCorner.unknown, FrustumCorner.unknown],\n      [FrustumCorner.FarTopLeft, FrustumCorner.FarBottomLeft],\n      [FrustumCorner.FarBottomRight, FrustumCorner.FarTopRight],\n      [FrustumCorner.FarBottomLeft, FrustumCorner.FarBottomRight],\n      [FrustumCorner.FarTopRight, FrustumCorner.FarTopLeft]\n    ],\n    [\n      // near, far, left, right, bottom, top\n      [FrustumCorner.nearTopLeft, FrustumCorner.nearBottomLeft],\n      [FrustumCorner.FarBottomLeft, FrustumCorner.FarTopLeft],\n      [FrustumCorner.unknown, FrustumCorner.unknown],\n      [FrustumCorner.unknown, FrustumCorner.unknown],\n      [FrustumCorner.nearBottomLeft, FrustumCorner.FarBottomLeft],\n      [FrustumCorner.FarTopLeft, FrustumCorner.nearTopLeft]\n    ],\n    [\n      // near, far, left, right, bottom, top\n      [FrustumCorner.nearBottomRight, FrustumCorner.nearTopRight],\n      [FrustumCorner.FarTopRight, FrustumCorner.FarBottomRight],\n      [FrustumCorner.unknown, FrustumCorner.unknown],\n      [FrustumCorner.unknown, FrustumCorner.unknown],\n      [FrustumCorner.FarBottomRight, FrustumCorner.nearBottomRight],\n      [FrustumCorner.nearTopRight, FrustumCorner.FarTopRight]\n    ],\n    [\n      // near, far, left, right, bottom, top\n      [FrustumCorner.nearBottomLeft, FrustumCorner.nearBottomRight],\n      [FrustumCorner.FarBottomRight, FrustumCorner.FarBottomLeft],\n      [FrustumCorner.FarBottomLeft, FrustumCorner.nearBottomLeft],\n      [FrustumCorner.nearBottomRight, FrustumCorner.FarBottomRight],\n      [FrustumCorner.unknown, FrustumCorner.unknown],\n      [FrustumCorner.unknown, FrustumCorner.unknown]\n    ],\n    [\n      // near, far, left, right, bottom, top\n      [FrustumCorner.nearTopRight, FrustumCorner.nearTopLeft],\n      [FrustumCorner.FarTopLeft, FrustumCorner.FarTopRight],\n      [FrustumCorner.nearTopLeft, FrustumCorner.FarTopLeft],\n      [FrustumCorner.FarTopRight, FrustumCorner.nearTopRight],\n      [FrustumCorner.unknown, FrustumCorner.unknown],\n      [FrustumCorner.unknown, FrustumCorner.unknown]\n    ]\n  ];\n  //now max shadow sample tent is 5x5, atlas borderSize at least 3=ceil(2.5),and +1 pixel is for global border for no cascade mode.\n  static readonly atlasBorderSize: number = 4.0;\n\n  static shadowResolution(value: ShadowResolution): number {\n    switch (value) {\n      case ShadowResolution.Low:\n        return 512;\n      case ShadowResolution.Medium:\n        return 1024;\n      case ShadowResolution.High:\n        return 2048;\n      case ShadowResolution.VeryHigh:\n        return 4096;\n    }\n  }\n\n  static shadowDepthFormat(value: ShadowResolution, supportDepthTexture: boolean): TextureFormat {\n    if (supportDepthTexture) {\n      return TextureFormat.Depth16;\n    } else {\n      return TextureFormat.R8G8B8A8;\n    }\n  }\n\n  static cullingRenderBounds(bounds: BoundingBox, cullPlaneCount: number, cullPlanes: Plane[]): boolean {\n    const { min, max } = bounds;\n\n    for (let i = 0; i < cullPlaneCount; i++) {\n      const plane = cullPlanes[i];\n      const normal = plane.normal;\n      if (\n        normal.x * (normal.x >= 0.0 ? max.x : min.x) +\n          normal.y * (normal.y >= 0.0 ? max.y : min.y) +\n          normal.z * (normal.z >= 0.0 ? max.z : min.z) <\n        -plane.distance\n      ) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  static shadowCullFrustum(\n    context: RenderContext,\n    light: Light,\n    renderer: Renderer,\n    shadowSliceData: ShadowSliceData\n  ): void {\n    const layer = renderer._entity.layer;\n    // filter by camera culling mask\n    if (context.camera.cullingMask & layer && light.cullingMask & layer) {\n      if (\n        renderer.castShadows &&\n        ShadowUtils.cullingRenderBounds(renderer.bounds, shadowSliceData.cullPlaneCount, shadowSliceData.cullPlanes)\n      ) {\n        renderer._prepareRender(context);\n        renderer._renderFrameCount = renderer.engine.time.frameCount;\n      }\n    }\n  }\n\n  static getBoundSphereByFrustum(\n    near: number,\n    far: number,\n    camera: Camera,\n    forward: Vector3,\n    shadowSliceData: ShadowSliceData\n  ): void {\n    const { aspectRatio, fieldOfView } = camera;\n\n    // https://lxjk.github.io/2017/04/15/Calculate-Minimal-Bounding-Sphere-of-Frustum.html\n    let centerZ: number;\n    let radius: number;\n    const k = Math.sqrt(1.0 + aspectRatio * aspectRatio) * Math.tan(MathUtil.degreeToRadian(fieldOfView) / 2.0);\n    const k2 = k * k;\n    const farSNear = far - near;\n    const farANear = far + near;\n    if (k2 > farSNear / farANear) {\n      centerZ = far;\n      radius = far * k;\n    } else {\n      centerZ = 0.5 * farANear * (1 + k2);\n      radius =\n        0.5 * Math.sqrt(farSNear * farSNear + 2.0 * (far * far + near * near) * k2 + farANear * farANear * k2 * k2);\n    }\n\n    const center = shadowSliceData.splitBoundSphere.center;\n    shadowSliceData.splitBoundSphere.radius = radius;\n    Vector3.scale(forward, centerZ, center);\n    Vector3.add(camera.entity.transform.worldPosition, center, center);\n    shadowSliceData.sphereCenterZ = centerZ;\n  }\n\n  static getDirectionLightShadowCullPlanes(\n    cameraFrustum: BoundingFrustum,\n    splitDistance: number,\n    cameraNear: number,\n    direction: Vector3,\n    shadowSliceData: ShadowSliceData\n  ): void {\n    // http://lspiroengine.com/?p=187\n    const frustumCorners = ShadowUtils._frustumCorners;\n    const backPlaneFaces = ShadowUtils._backPlaneFaces;\n    const planeNeighbors = ShadowUtils._frustumPlaneNeighbors;\n    const twoPlaneCorners = ShadowUtils._frustumTwoPlaneCorners;\n    const edgePlanePoint2 = ShadowUtils._edgePlanePoint2;\n    const out = shadowSliceData.cullPlanes;\n\n    // cameraFrustumPlanes is share\n    const near = cameraFrustum.getPlane(FrustumFace.Near);\n    const far = cameraFrustum.getPlane(FrustumFace.Far);\n    const left = cameraFrustum.getPlane(FrustumFace.Left);\n    const right = cameraFrustum.getPlane(FrustumFace.Right);\n    const bottom = cameraFrustum.getPlane(FrustumFace.Bottom);\n    const top = cameraFrustum.getPlane(FrustumFace.Top);\n\n    // adjustment the near/far plane\n    const splitNearDistance = splitDistance - cameraNear;\n    const splitNear = ShadowUtils._adjustNearPlane;\n    const splitFar = ShadowUtils._adjustFarPlane;\n    splitNear.normal.copyFrom(near.normal);\n    splitFar.normal.copyFrom(far.normal);\n    splitNear.distance = near.distance - splitNearDistance;\n    // do a clamp if the sphere is out of range the far plane\n    splitFar.distance = Math.min(\n      -near.distance + shadowSliceData.sphereCenterZ + shadowSliceData.splitBoundSphere.radius,\n      far.distance\n    );\n\n    CollisionUtil.intersectionPointThreePlanes(splitNear, bottom, right, frustumCorners[FrustumCorner.nearBottomRight]);\n    CollisionUtil.intersectionPointThreePlanes(splitNear, top, right, frustumCorners[FrustumCorner.nearTopRight]);\n    CollisionUtil.intersectionPointThreePlanes(splitNear, top, left, frustumCorners[FrustumCorner.nearTopLeft]);\n    CollisionUtil.intersectionPointThreePlanes(splitNear, bottom, left, frustumCorners[FrustumCorner.nearBottomLeft]);\n    CollisionUtil.intersectionPointThreePlanes(splitFar, bottom, right, frustumCorners[FrustumCorner.FarBottomRight]);\n    CollisionUtil.intersectionPointThreePlanes(splitFar, top, right, frustumCorners[FrustumCorner.FarTopRight]);\n    CollisionUtil.intersectionPointThreePlanes(splitFar, top, left, frustumCorners[FrustumCorner.FarTopLeft]);\n    CollisionUtil.intersectionPointThreePlanes(splitFar, bottom, left, frustumCorners[FrustumCorner.FarBottomLeft]);\n\n    let backIndex = 0;\n    for (let i = 0; i < 6; i++) {\n      // maybe 3、4、5(light eye is at far, forward is near, or orthographic camera is any axis)\n      let plane: Plane;\n      switch (i) {\n        case FrustumFace.Near:\n          plane = splitNear;\n          break;\n        case FrustumFace.Far:\n          plane = splitFar;\n          break;\n        default:\n          plane = cameraFrustum.getPlane(i);\n          break;\n      }\n      if (Vector3.dot(plane.normal, direction) < 0.0) {\n        out[backIndex].copyFrom(plane);\n        backPlaneFaces[backIndex] = i;\n        backIndex++;\n      }\n    }\n\n    let edgeIndex = backIndex;\n    for (let i = 0; i < backIndex; i++) {\n      const backFace = backPlaneFaces[i];\n      const neighborFaces = planeNeighbors[backFace];\n      for (let j = 0; j < 4; j++) {\n        const neighborFace = neighborFaces[j];\n        let notBackFace = true;\n        for (let k = 0; k < backIndex; k++)\n          if (neighborFace == backPlaneFaces[k]) {\n            notBackFace = false;\n            break;\n          }\n        if (notBackFace) {\n          const corners = twoPlaneCorners[backFace][neighborFace];\n          const point0 = frustumCorners[corners[0]];\n          const point1 = frustumCorners[corners[1]];\n          Vector3.add(point0, direction, edgePlanePoint2);\n          Plane.fromPoints(point0, point1, edgePlanePoint2, out[edgeIndex++]);\n        }\n      }\n    }\n    shadowSliceData.cullPlaneCount = edgeIndex;\n  }\n\n  static getDirectionalLightMatrices(\n    lightUp: Vector3,\n    lightSide: Vector3,\n    lightForward: Vector3,\n    cascadeIndex: number,\n    nearPlane: number,\n    shadowResolution: number,\n    shadowSliceData: ShadowSliceData,\n    outShadowMatrices: Float32Array\n  ): void {\n    const boundSphere = shadowSliceData.splitBoundSphere;\n    shadowSliceData.resolution = shadowResolution;\n\n    // To solve shadow swimming problem.\n    const center = boundSphere.center;\n    const radius = boundSphere.radius;\n    const halfShadowResolution = shadowResolution / 2;\n    // Add border to project edge pixel PCF.\n    // Improve:the clip planes not consider the border,but I think is OK,because the object can clip is not continuous.\n    const borderRadius = (radius * halfShadowResolution) / (halfShadowResolution - ShadowUtils.atlasBorderSize);\n    const borderDiam = borderRadius * 2.0;\n    const sizeUnit = shadowResolution / borderDiam;\n    const radiusUnit = borderDiam / shadowResolution;\n    const upLen = Math.ceil(Vector3.dot(center, lightUp) * sizeUnit) * radiusUnit;\n    const sideLen = Math.ceil(Vector3.dot(center, lightSide) * sizeUnit) * radiusUnit;\n    const forwardLen = Vector3.dot(center, lightForward);\n    center.x = lightUp.x * upLen + lightSide.x * sideLen + lightForward.x * forwardLen;\n    center.y = lightUp.y * upLen + lightSide.y * sideLen + lightForward.y * forwardLen;\n    center.z = lightUp.z * upLen + lightSide.z * sideLen + lightForward.z * forwardLen;\n\n    // Direction light use shadow pancaking tech,do special dispose with nearPlane.\n    const virtualCamera = shadowSliceData.virtualCamera;\n    const position = virtualCamera.position;\n    const viewMatrix = virtualCamera.viewMatrix;\n    const projectMatrix = virtualCamera.projectionMatrix;\n\n    Vector3.scale(lightForward, radius + nearPlane, position);\n    Vector3.subtract(center, position, position);\n    Matrix.lookAt(position, center, lightUp, viewMatrix);\n    Matrix.ortho(\n      -borderRadius,\n      borderRadius,\n      -borderRadius,\n      borderRadius,\n      0.0,\n      radius * 2.0 + nearPlane,\n      projectMatrix\n    );\n\n    const viewProjectionMatrix = virtualCamera.viewProjectionMatrix;\n    Matrix.multiply(projectMatrix, viewMatrix, viewProjectionMatrix);\n    Utils._floatMatrixMultiply(\n      ShadowUtils._shadowMapCoordMatrix,\n      viewProjectionMatrix.elements,\n      0,\n      outShadowMatrices,\n      cascadeIndex * 16\n    );\n  }\n\n  static getMaxTileResolutionInAtlas(atlasWidth: number, atlasHeight: number, tileCount: number): number {\n    let resolution = Math.min(atlasWidth, atlasHeight);\n\n    let currentTileCount = Math.floor(atlasWidth / resolution) * Math.floor(atlasHeight / resolution);\n\n    while (currentTileCount < tileCount) {\n      resolution = Math.floor(resolution >> 1);\n      currentTileCount = Math.floor(atlasWidth / resolution) * Math.floor(atlasHeight / resolution);\n    }\n    return resolution;\n  }\n\n  static getShadowBias(light: DirectLight, projectionMatrix: Matrix, shadowResolution: number, out: Vector2): void {\n    // Frustum size is guaranteed to be a cube as we wrap shadow frustum around a sphere\n    // elements[0] = 2.0 / (right - left)\n    const frustumSize = 2.0 / projectionMatrix.elements[0];\n\n    // depth and normal bias scale is in shadowmap texel size in world space\n    const texelSize = frustumSize / shadowResolution;\n    let depthBias = -light.shadowBias * texelSize;\n    let normalBias = -light.shadowNormalBias * texelSize;\n\n    if (light.shadowType == ShadowType.SoftHigh) {\n      // TODO: depth and normal bias assume sample is no more than 1 texel away from shadowmap\n      // This is not true with PCF. Ideally we need to do either\n      // cone base bias (based on distance to center sample)\n      // or receiver place bias based on derivatives.\n      // For now we scale it by the PCF kernel size (5x5)\n      const kernelRadius = 2.5;\n      depthBias *= kernelRadius;\n      normalBias *= kernelRadius;\n    }\n    out.set(depthBias, normalBias);\n  }\n\n  /**\n   * Apply shadow slice scale and offset\n   */\n  static applySliceTransform(\n    tileSize: number,\n    atlasWidth: number,\n    atlasHeight: number,\n    cascadeIndex: number,\n    atlasOffset: Vector2,\n    outShadowMatrices: Float32Array\n  ): void {\n    const sliceMatrix = ShadowUtils._tempMatrix0;\n    const slice = sliceMatrix.elements;\n\n    const oneOverAtlasWidth = 1.0 / atlasWidth;\n    const oneOverAtlasHeight = 1.0 / atlasHeight;\n    const scaleX = tileSize * oneOverAtlasWidth;\n    const scaleY = tileSize * oneOverAtlasHeight;\n    const offsetX = atlasOffset.x * oneOverAtlasWidth;\n    const offsetY = atlasOffset.y * oneOverAtlasHeight;\n\n    (slice[0] = scaleX), (slice[1] = 0), (slice[2] = 0), (slice[3] = 0);\n    (slice[4] = 0), (slice[5] = scaleY), (slice[6] = 0), (slice[7] = 0);\n    (slice[8] = 0), (slice[9] = 0), (slice[10] = 1), (slice[11] = 0);\n    (slice[12] = offsetX), (slice[13] = offsetY), (slice[14] = 0), (slice[15] = 1);\n\n    const offset = cascadeIndex * 16;\n    Utils._floatMatrixMultiply(sliceMatrix, outShadowMatrices, offset, outShadowMatrices, offset);\n  }\n\n  /**\n   * Extract scale and bias from a fade distance to achieve a linear fading of the fade distance.\n   */\n  static getScaleAndBiasForLinearDistanceFade(fadeDistance: number, border: number, outInfo: Vector4): void {\n    // (P^2-N^2)/(F^2-N^2)\n\n    // To avoid division from zero\n    // This values ensure that fade within cascade will be 0 and outside 1\n    if (border < 0.0001) {\n      const multiplier = 1000; // To avoid blending if difference is in fractions\n      outInfo.z = multiplier;\n      outInfo.w = -fadeDistance * multiplier;\n      return;\n    }\n\n    border = 1 - border;\n    border *= border;\n\n    // Fade with distance calculation is just a linear fade from 90% of fade distance to fade distance. 90% arbitrarily chosen but should work well enough.\n    const distanceFadeNear = border * fadeDistance;\n    const fadeRange = fadeDistance - distanceFadeNear;\n    outInfo.z = 1.0 / fadeRange;\n    outInfo.w = -distanceFadeNear / fadeRange;\n  }\n}\n","/**\n * Number of cascades to use for directional light shadows.\n */\nexport enum ShadowCascadesMode {\n  /** No cascades */\n  NoCascades = 1,\n  /** Two cascades */\n  TwoCascades = 2,\n  /** Four cascades */\n  FourCascades = 4\n}\n","import { Color, MathUtil, Matrix, Vector2, Vector3, Vector4 } from \"@galacean/engine-math\";\nimport { Camera } from \"../Camera\";\nimport { PipelinePass } from \"../RenderPipeline/PipelinePass\";\nimport { PipelineUtils } from \"../RenderPipeline/PipelineUtils\";\nimport { ContextRendererUpdateFlag, RenderContext } from \"../RenderPipeline/RenderContext\";\nimport { RenderQueue } from \"../RenderPipeline/RenderQueue\";\nimport { PipelineStage } from \"../RenderPipeline/index\";\nimport { GLCapabilityType } from \"../base/Constant\";\nimport { CameraClearFlags } from \"../enums/CameraClearFlags\";\nimport { DirectLight } from \"../lighting\";\nimport { ShaderProperty } from \"../shader\";\nimport { TextureFilterMode } from \"../texture\";\nimport { RenderTarget } from \"../texture/RenderTarget\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { TextureDepthCompareFunction } from \"../texture/enums/TextureDepthCompareFunction\";\nimport { TextureFormat } from \"../texture/enums/TextureFormat\";\nimport { TextureWrapMode } from \"../texture/enums/TextureWrapMode\";\nimport { ShadowSliceData } from \"./ShadowSliceData\";\nimport { ShadowUtils } from \"./ShadowUtils\";\nimport { ShadowCascadesMode } from \"./enum/ShadowCascadesMode\";\n\n/**\n * Cascade shadow caster pass.\n */\nexport class CascadedShadowCasterPass extends PipelinePass {\n  private static _lightShadowBiasProperty = ShaderProperty.getByName(\"scene_ShadowBias\");\n  private static _lightDirectionProperty = ShaderProperty.getByName(\"scene_LightDirection\");\n\n  private static _shadowMatricesProperty = ShaderProperty.getByName(\"scene_ShadowMatrices\");\n  private static _shadowMapSize = ShaderProperty.getByName(\"scene_ShadowMapSize\");\n  private static _shadowInfosProperty = ShaderProperty.getByName(\"scene_ShadowInfo\");\n  private static _shadowMapsProperty = ShaderProperty.getByName(\"scene_ShadowMap\");\n  private static _shadowSplitSpheresProperty = ShaderProperty.getByName(\"scene_ShadowSplitSpheres\");\n\n  private static _maxCascades: number = 4;\n  private static _cascadesSplitDistance: number[] = new Array(CascadedShadowCasterPass._maxCascades + 1);\n\n  private static _viewport = new Vector4(0, 0, 1, 1);\n  private static _clearColor = new Color(1, 1, 1, 1);\n  private static _tempVector = new Vector3();\n  private static _tempMatrix0 = new Matrix();\n\n  private readonly _camera: Camera;\n  private readonly _supportDepthTexture: boolean;\n\n  private _shadowMapResolution: number;\n  private _shadowMapSize: Vector4 = new Vector4();\n  private _shadowTileResolution: number;\n  private _shadowBias: Vector2 = new Vector2();\n  private _shadowMapFormat: TextureFormat;\n  private _shadowCascadeMode: ShadowCascadesMode;\n  private _shadowSliceData: ShadowSliceData = new ShadowSliceData();\n  private _lightUp: Vector3 = new Vector3();\n  private _lightSide: Vector3 = new Vector3();\n\n  private _splitBoundSpheres = new Float32Array(CascadedShadowCasterPass._maxCascades * 4);\n  /** The end is project precision problem in shader. */\n  private _shadowMatrices = new Float32Array((CascadedShadowCasterPass._maxCascades + 1) * 16);\n  // intensity, null, fadeScale, fadeBias\n  private _shadowInfos = new Vector4();\n  private _depthTexture: Texture2D;\n  private _renderTarget: RenderTarget;\n  private _viewportOffsets: Vector2[] = [new Vector2(), new Vector2(), new Vector2(), new Vector2()];\n\n  constructor(camera: Camera) {\n    super(camera.engine);\n    this._camera = camera;\n\n    this._supportDepthTexture = camera.engine._hardwareRenderer.canIUse(GLCapabilityType.depthTexture);\n    this._shadowSliceData.virtualCamera.isOrthographic = true;\n  }\n\n  /**\n   * @internal\n   */\n  override onRender(context: RenderContext): void {\n    const light = this._camera.scene._lightManager._sunlight;\n    this._updateShadowSettings();\n    this._renderDirectShadowMap(context, light);\n    this._updateReceiversShaderData(light);\n  }\n\n  private _renderDirectShadowMap(context: RenderContext, light: DirectLight): void {\n    const {\n      engine,\n      _camera: camera,\n      _viewportOffsets: viewports,\n      _shadowSliceData: shadowSliceData,\n      _splitBoundSpheres: splitBoundSpheres,\n      _shadowMatrices: shadowMatrices\n    } = this;\n\n    const { opaqueQueue, alphaTestQueue } = camera._renderPipeline._cullingResults;\n\n    const scene = camera.scene;\n    const componentsManager = scene._componentsManager;\n    const rhi = engine._hardwareRenderer;\n    const shadowCascades = scene.shadowCascades;\n    const splitDistance = CascadedShadowCasterPass._cascadesSplitDistance;\n    const boundSphere = shadowSliceData.splitBoundSphere;\n    const lightWorld = CascadedShadowCasterPass._tempMatrix0;\n    const lightWorldE = lightWorld.elements;\n    const lightUp = this._lightUp;\n    const lightSide = this._lightSide;\n    const lightForward = shadowSliceData.virtualCamera.forward;\n\n    // Prepare render target\n    const { z: width, w: height } = this._shadowMapSize;\n    const format = this._shadowMapFormat;\n    let renderTarget: RenderTarget;\n    let shadowTexture: Texture2D;\n    if (this._supportDepthTexture) {\n      renderTarget = PipelineUtils.recreateRenderTargetIfNeeded(\n        engine,\n        this._renderTarget,\n        width,\n        height,\n        null,\n        format,\n        true,\n        false,\n        1,\n        TextureWrapMode.Clamp,\n        TextureFilterMode.Bilinear\n      );\n      shadowTexture = <Texture2D>renderTarget.depthTexture;\n    } else {\n      renderTarget = PipelineUtils.recreateRenderTargetIfNeeded(\n        engine,\n        this._renderTarget,\n        width,\n        height,\n        format,\n        null,\n        false,\n        false,\n        1,\n        TextureWrapMode.Clamp,\n        TextureFilterMode.Bilinear\n      );\n      shadowTexture = <Texture2D>renderTarget.getColorTexture(0);\n    }\n\n    if (engine._hardwareRenderer._isWebGL2) {\n      shadowTexture.depthCompareFunction = TextureDepthCompareFunction.Less;\n    }\n\n    this._renderTarget = renderTarget;\n    this._depthTexture = shadowTexture;\n\n    // @todo: shouldn't set viewport and scissor in activeRenderTarget\n    rhi.activeRenderTarget(renderTarget, CascadedShadowCasterPass._viewport, context.flipProjection, 0);\n    if (this._supportDepthTexture) {\n      rhi.clearRenderTarget(engine, CameraClearFlags.Depth, null);\n    } else {\n      rhi.clearRenderTarget(engine, CameraClearFlags.All, CascadedShadowCasterPass._clearColor);\n    }\n\n    // prepare light and camera direction\n    Matrix.rotationQuaternion(light.entity.transform.worldRotationQuaternion, lightWorld);\n    lightSide.set(lightWorldE[0], lightWorldE[1], lightWorldE[2]);\n    lightUp.set(lightWorldE[4], lightWorldE[5], lightWorldE[6]);\n    lightForward.set(-lightWorldE[8], -lightWorldE[9], -lightWorldE[10]);\n    const cameraForward = CascadedShadowCasterPass._tempVector;\n    cameraForward.copyFrom(camera.entity.transform.worldForward);\n\n    const shadowTileResolution = this._shadowTileResolution;\n\n    for (let j = 0; j < shadowCascades; j++) {\n      ShadowUtils.getBoundSphereByFrustum(\n        splitDistance[j],\n        splitDistance[j + 1],\n        camera,\n        cameraForward,\n        shadowSliceData\n      );\n      ShadowUtils.getDirectionLightShadowCullPlanes(\n        camera._frustum,\n        splitDistance[j],\n        camera.nearClipPlane,\n        lightForward,\n        shadowSliceData\n      );\n\n      ShadowUtils.getDirectionalLightMatrices(\n        lightUp,\n        lightSide,\n        lightForward,\n        j,\n        light.shadowNearPlaneOffset,\n        shadowTileResolution,\n        shadowSliceData,\n        shadowMatrices\n      );\n      if (shadowCascades > 1) {\n        ShadowUtils.applySliceTransform(\n          shadowTileResolution,\n          width,\n          height,\n          j,\n          this._viewportOffsets[j],\n          shadowMatrices\n        );\n      }\n      this._updateSingleShadowCasterShaderData(light, shadowSliceData, context);\n\n      // upload pre-cascade infos.\n      const center = boundSphere.center;\n      const radius = boundSphere.radius;\n      const offset = j * 4;\n      splitBoundSpheres[offset] = center.x;\n      splitBoundSpheres[offset + 1] = center.y;\n      splitBoundSpheres[offset + 2] = center.z;\n      splitBoundSpheres[offset + 3] = radius * radius;\n      opaqueQueue.clear();\n      alphaTestQueue.clear();\n      const renderers = componentsManager._renderers;\n      const elements = renderers._elements;\n      for (let k = renderers.length - 1; k >= 0; --k) {\n        ShadowUtils.shadowCullFrustum(context, light, elements[k], shadowSliceData);\n      }\n\n      if (opaqueQueue.elements.length || alphaTestQueue.elements.length) {\n        // @todo: It is more appropriate to prevent duplication based on `virtualCamera` at `RenderQueue#render`.\n        engine._renderCount++;\n\n        const batcherManager = engine._batcherManager;\n        opaqueQueue.sortBatch(RenderQueue.compareForOpaque, batcherManager);\n        alphaTestQueue.sortBatch(RenderQueue.compareForOpaque, batcherManager);\n\n        const { x, y } = viewports[j];\n\n        rhi.setGlobalDepthBias(1.0, 1.0);\n\n        rhi.viewport(x, y, shadowTileResolution, shadowTileResolution);\n        // for no cascade is for the edge,for cascade is for the beyond maxCascade pixel can use (0,0,0) trick sample the shadowMap\n        rhi.scissor(x + 1, y + 1, shadowTileResolution - 2, shadowTileResolution - 2);\n\n        opaqueQueue.render(context, PipelineStage.ShadowCaster);\n        alphaTestQueue.render(context, PipelineStage.ShadowCaster);\n        rhi.setGlobalDepthBias(0, 0);\n      }\n    }\n  }\n\n  private _updateReceiversShaderData(light: DirectLight): void {\n    const camera = this._camera;\n    const scene = camera.scene;\n    const splitBoundSpheres = this._splitBoundSpheres;\n    const shadowMatrices = this._shadowMatrices;\n    const shadowCascades = scene.shadowCascades;\n\n    const shadowFar = Math.min(scene.shadowDistance, camera.farClipPlane);\n    ShadowUtils.getScaleAndBiasForLinearDistanceFade(Math.pow(shadowFar, 2), scene.shadowFadeBorder, this._shadowInfos);\n    this._shadowInfos.x = light.shadowStrength;\n\n    // set zero matrix to project the index out of max cascade\n    if (shadowCascades > 1) {\n      for (let i = shadowCascades * 4, n = splitBoundSpheres.length; i < n; i++) {\n        splitBoundSpheres[i] = 0.0;\n      }\n    }\n\n    // set zero matrix to project the index out of max cascade\n    for (var i = shadowCascades * 16, n = shadowMatrices.length; i < n; i++) {\n      shadowMatrices[i] = 0.0;\n    }\n\n    const shaderData = scene.shaderData;\n    shaderData.setFloatArray(CascadedShadowCasterPass._shadowMatricesProperty, this._shadowMatrices);\n    shaderData.setVector4(CascadedShadowCasterPass._shadowInfosProperty, this._shadowInfos);\n    shaderData.setTexture(CascadedShadowCasterPass._shadowMapsProperty, this._depthTexture);\n    shaderData.setFloatArray(CascadedShadowCasterPass._shadowSplitSpheresProperty, this._splitBoundSpheres);\n    shaderData.setVector4(CascadedShadowCasterPass._shadowMapSize, this._shadowMapSize);\n  }\n\n  private _getCascadesSplitDistance(shadowFar: number): void {\n    const cascadesSplitDistance = CascadedShadowCasterPass._cascadesSplitDistance;\n    const { shadowTwoCascadeSplits, shadowFourCascadeSplits, shadowCascades } = this._camera.scene;\n    const { nearClipPlane, aspectRatio, fieldOfView } = this._camera;\n\n    cascadesSplitDistance[0] = nearClipPlane;\n    const range = shadowFar - nearClipPlane;\n    const tFov = Math.tan(MathUtil.degreeToRadian(fieldOfView) * 0.5);\n    const denominator = 1.0 + tFov * tFov * (aspectRatio * aspectRatio + 1.0);\n    switch (shadowCascades) {\n      case ShadowCascadesMode.NoCascades:\n        cascadesSplitDistance[1] = this._getFarWithRadius(shadowFar, denominator);\n        break;\n      case ShadowCascadesMode.TwoCascades:\n        cascadesSplitDistance[1] = this._getFarWithRadius(nearClipPlane + range * shadowTwoCascadeSplits, denominator);\n        cascadesSplitDistance[2] = this._getFarWithRadius(shadowFar, denominator);\n        break;\n      case ShadowCascadesMode.FourCascades:\n        cascadesSplitDistance[1] = this._getFarWithRadius(\n          nearClipPlane + range * shadowFourCascadeSplits.x,\n          denominator\n        );\n        cascadesSplitDistance[2] = this._getFarWithRadius(\n          nearClipPlane + range * shadowFourCascadeSplits.y,\n          denominator\n        );\n        cascadesSplitDistance[3] = this._getFarWithRadius(\n          nearClipPlane + range * shadowFourCascadeSplits.z,\n          denominator\n        );\n        cascadesSplitDistance[4] = this._getFarWithRadius(shadowFar, denominator);\n        break;\n    }\n  }\n\n  private _getFarWithRadius(radius: number, denominator: number): number {\n    // use the frustum side as the radius and get the far distance form camera.\n    // var tFov: number = Math.tan(fov * 0.5);// get this the equation using Pythagorean\n    // return Math.sqrt(radius * radius / (1.0 + tFov * tFov * (aspectRatio * aspectRatio + 1.0)));\n    return Math.sqrt((radius * radius) / denominator);\n  }\n\n  private _updateShadowSettings(): void {\n    const camera = this._camera;\n    const scene = camera.scene;\n    const shadowFormat = ShadowUtils.shadowDepthFormat(scene.shadowResolution, this._supportDepthTexture);\n    const shadowResolution = ShadowUtils.shadowResolution(scene.shadowResolution);\n    const shadowCascades = scene.shadowCascades;\n    const shadowFar = Math.min(scene.shadowDistance, camera.farClipPlane);\n\n    this._getCascadesSplitDistance(shadowFar);\n\n    if (\n      shadowFormat !== this._shadowMapFormat ||\n      shadowResolution !== this._shadowMapResolution ||\n      shadowCascades !== this._shadowCascadeMode\n    ) {\n      this._shadowMapFormat = shadowFormat;\n      this._shadowMapResolution = shadowResolution;\n      this._shadowCascadeMode = shadowCascades;\n\n      if (shadowCascades == ShadowCascadesMode.NoCascades) {\n        this._shadowTileResolution = shadowResolution;\n        this._shadowMapSize.set(1 / shadowResolution, 1 / shadowResolution, shadowResolution, shadowResolution);\n      } else {\n        const shadowTileResolution = ShadowUtils.getMaxTileResolutionInAtlas(\n          shadowResolution,\n          shadowResolution,\n          shadowCascades\n        );\n        this._shadowTileResolution = shadowTileResolution;\n        const width = shadowTileResolution * 2;\n        const height =\n          shadowCascades == ShadowCascadesMode.TwoCascades ? shadowTileResolution : shadowTileResolution * 2;\n        this._shadowMapSize.set(1.0 / width, 1.0 / height, width, height);\n      }\n\n      this._renderTarget = null;\n\n      const viewportOffset = this._viewportOffsets;\n      const shadowTileResolution = this._shadowTileResolution;\n      switch (shadowCascades) {\n        case ShadowCascadesMode.NoCascades:\n          viewportOffset[0].set(0, 0);\n          break;\n        case ShadowCascadesMode.TwoCascades:\n          viewportOffset[0].set(0, 0);\n          viewportOffset[1].set(shadowTileResolution, 0);\n          break;\n        case ShadowCascadesMode.FourCascades:\n          viewportOffset[0].set(0, 0);\n          viewportOffset[1].set(shadowTileResolution, 0);\n          viewportOffset[2].set(0, shadowTileResolution);\n          viewportOffset[3].set(shadowTileResolution, shadowTileResolution);\n      }\n    }\n  }\n\n  private _updateSingleShadowCasterShaderData(\n    light: DirectLight,\n    shadowSliceData: ShadowSliceData,\n    context: RenderContext\n  ): void {\n    const virtualCamera = shadowSliceData.virtualCamera;\n    ShadowUtils.getShadowBias(light, virtualCamera.projectionMatrix, this._shadowTileResolution, this._shadowBias);\n\n    const sceneShaderData = this._camera.scene.shaderData;\n    sceneShaderData.setVector2(CascadedShadowCasterPass._lightShadowBiasProperty, this._shadowBias);\n    sceneShaderData.setVector3(CascadedShadowCasterPass._lightDirectionProperty, light.direction);\n\n    // Every light use self virtual camera\n    context.rendererUpdateFlag |= ContextRendererUpdateFlag.viewProjectionMatrix;\n    context.applyVirtualCamera(virtualCamera, true);\n  }\n}\n","import { RenderQueueType } from \"../shader\";\nimport { BatcherManager } from \"./BatcherManager\";\nimport { RenderQueue } from \"./RenderQueue\";\n\n/**\n * @internal\n * Culling results.\n */\nexport class CullingResults {\n  readonly opaqueQueue: RenderQueue;\n  readonly transparentQueue: RenderQueue;\n  readonly alphaTestQueue: RenderQueue;\n\n  constructor() {\n    this.opaqueQueue = new RenderQueue(RenderQueueType.Opaque);\n    this.transparentQueue = new RenderQueue(RenderQueueType.Transparent);\n    this.alphaTestQueue = new RenderQueue(RenderQueueType.AlphaTest);\n  }\n\n  reset(): void {\n    this.opaqueQueue.clear();\n    this.transparentQueue.clear();\n    this.alphaTestQueue.clear();\n  }\n\n  sortBatch(batcherManager: BatcherManager) {\n    this.opaqueQueue.sortBatch(RenderQueue.compareForOpaque, batcherManager);\n    this.alphaTestQueue.sortBatch(RenderQueue.compareForOpaque, batcherManager);\n    this.transparentQueue.sortBatch(RenderQueue.compareForTransparent, batcherManager);\n  }\n\n  destroy(): void {\n    this.opaqueQueue.destroy();\n    this.transparentQueue.destroy();\n    this.alphaTestQueue.destroy();\n  }\n}\n","import { Camera } from \"../Camera\";\nimport { Engine } from \"../Engine\";\nimport { PipelinePass } from \"../RenderPipeline/PipelinePass\";\nimport { GLCapabilityType } from \"../base/Constant\";\nimport { CameraClearFlags } from \"../enums/CameraClearFlags\";\nimport { TextureFilterMode, TextureFormat, TextureWrapMode } from \"../texture\";\nimport { RenderTarget } from \"../texture/RenderTarget\";\nimport { CullingResults } from \"./CullingResults\";\nimport { PipelineUtils } from \"./PipelineUtils\";\nimport { RenderContext } from \"./RenderContext\";\nimport { PipelineStage } from \"./enums/PipelineStage\";\n\n/**\n * @internal\n * Depth only pass.\n */\nexport class DepthOnlyPass extends PipelinePass {\n  readonly _supportDepthTexture: boolean;\n\n  private _renderTarget: RenderTarget;\n\n  constructor(engine: Engine) {\n    super(engine);\n    this._supportDepthTexture = engine._hardwareRenderer.canIUse(GLCapabilityType.depthTexture);\n  }\n\n  onConfig(camera: Camera): void {\n    const engine = this.engine;\n    const { width, height } = camera.pixelViewport;\n\n    const renderTarget = PipelineUtils.recreateRenderTargetIfNeeded(\n      engine,\n      this._renderTarget,\n      width,\n      height,\n      null,\n      TextureFormat.Depth16,\n      true,\n      false,\n      1,\n      TextureWrapMode.Clamp,\n      TextureFilterMode.Point\n    );\n\n    this._renderTarget = renderTarget;\n  }\n\n  override onRender(context: RenderContext, cullingResults: CullingResults): void {\n    const engine = this.engine;\n    const renderTarget = this._renderTarget;\n    const camera = context.camera;\n    const rhi = engine._hardwareRenderer;\n    rhi.activeRenderTarget(renderTarget, PipelineUtils.defaultViewport, context.flipProjection, 0);\n    rhi.clearRenderTarget(engine, CameraClearFlags.Depth, null);\n\n    engine._renderCount++;\n    cullingResults.opaqueQueue.render(context, PipelineStage.DepthOnly);\n    cullingResults.alphaTestQueue.render(context, PipelineStage.DepthOnly);\n\n    camera.shaderData.setTexture(Camera._cameraDepthTextureProperty, this._renderTarget.depthTexture);\n  }\n}\n","import { Camera } from \"../Camera\";\nimport { Engine } from \"../Engine\";\nimport { Downsampling } from \"../enums/Downsampling\";\nimport { Texture, Texture2D, TextureFilterMode } from \"../texture\";\nimport { RenderTarget } from \"../texture/RenderTarget\";\nimport { TextureWrapMode } from \"../texture/enums/TextureWrapMode\";\nimport { PipelinePass } from \"./PipelinePass\";\nimport { PipelineUtils } from \"./PipelineUtils\";\nimport { RenderContext } from \"./RenderContext\";\n\n/**\n * @internal\n * Opaque texture pass.\n */\nexport class OpaqueTexturePass extends PipelinePass {\n  private _cameraColorTexture: Texture;\n  private _renderTarget: RenderTarget;\n\n  constructor(engine: Engine) {\n    super(engine);\n  }\n\n  onConfig(camera: Camera, cameraColorTexture: Texture): void {\n    this._cameraColorTexture = cameraColorTexture;\n\n    const downsampling = camera.opaqueTextureDownsampling;\n    const isNoDownsampling = downsampling === Downsampling.None;\n\n    const viewport = camera.pixelViewport;\n    const sizeScale = isNoDownsampling ? 1.0 : downsampling === Downsampling.TwoX ? 0.5 : 0.25;\n    const opaqueRenderTarget = PipelineUtils.recreateRenderTargetIfNeeded(\n      this.engine,\n      this._renderTarget,\n      viewport.width * sizeScale,\n      viewport.height * sizeScale,\n      camera._getInternalColorTextureFormat(),\n      null,\n      false,\n      false,\n      1,\n      TextureWrapMode.Clamp,\n      isNoDownsampling ? TextureFilterMode.Point : TextureFilterMode.Bilinear\n    );\n\n    this._renderTarget = opaqueRenderTarget;\n  }\n\n  override onRender(context: RenderContext): void {\n    PipelineUtils.blitTexture(this.engine, <Texture2D>this._cameraColorTexture, this._renderTarget);\n    context.camera.shaderData.setTexture(Camera._cameraOpaqueTextureProperty, this._renderTarget.getColorTexture(0));\n  }\n}\n","import { Vector2 } from \"@galacean/engine-math\";\nimport { Background } from \"../Background\";\nimport { Camera } from \"../Camera\";\nimport { Engine } from \"../Engine\";\nimport { BackgroundMode } from \"../enums/BackgroundMode\";\nimport { BackgroundTextureFillMode } from \"../enums/BackgroundTextureFillMode\";\nimport { CameraClearFlags } from \"../enums/CameraClearFlags\";\nimport { DepthTextureMode } from \"../enums/DepthTextureMode\";\nimport { ReplacementFailureStrategy } from \"../enums/ReplacementFailureStrategy\";\nimport { Shader } from \"../shader/Shader\";\nimport { ShaderPass } from \"../shader/ShaderPass\";\nimport { RenderQueueType } from \"../shader/enums/RenderQueueType\";\nimport { RenderState } from \"../shader/state/RenderState\";\nimport { CascadedShadowCasterPass } from \"../shadow/CascadedShadowCasterPass\";\nimport { ShadowType } from \"../shadow/enum/ShadowType\";\nimport {\n  RenderTarget,\n  Texture2D,\n  TextureCubeFace,\n  TextureFilterMode,\n  TextureFormat,\n  TextureWrapMode\n} from \"../texture\";\nimport { CullingResults } from \"./CullingResults\";\nimport { DepthOnlyPass } from \"./DepthOnlyPass\";\nimport { OpaqueTexturePass } from \"./OpaqueTexturePass\";\nimport { PipelineUtils } from \"./PipelineUtils\";\nimport { ContextRendererUpdateFlag, RenderContext } from \"./RenderContext\";\nimport { RenderElement } from \"./RenderElement\";\nimport { SubRenderElement } from \"./SubRenderElement\";\nimport { PipelineStage } from \"./enums/PipelineStage\";\n\n/**\n * Basic render pipeline.\n */\nexport class BasicRenderPipeline {\n  /** @internal */\n  _cullingResults: CullingResults;\n\n  private _camera: Camera;\n  private _lastCanvasSize = new Vector2();\n\n  private _internalColorTarget: RenderTarget = null;\n  private _cascadedShadowCasterPass: CascadedShadowCasterPass;\n  private _depthOnlyPass: DepthOnlyPass;\n  private _opaqueTexturePass: OpaqueTexturePass;\n\n  /**\n   * Create a basic render pipeline.\n   * @param camera - Camera\n   */\n  constructor(camera: Camera) {\n    this._camera = camera;\n    const { engine } = camera;\n    this._cullingResults = new CullingResults();\n    this._cascadedShadowCasterPass = new CascadedShadowCasterPass(camera);\n    this._depthOnlyPass = new DepthOnlyPass(engine);\n    this._opaqueTexturePass = new OpaqueTexturePass(engine);\n  }\n\n  /**\n   * Destroy internal resources.\n   */\n  destroy(): void {\n    this._cullingResults.destroy();\n    this._camera = null;\n  }\n\n  /**\n   * Perform scene rendering.\n   * @param context - Render context\n   * @param cubeFace - Render surface of cube texture\n   * @param mipLevel - Set mip level the data want to write\n   * @param ignoreClear - Ignore clear flag\n   */\n  render(context: RenderContext, cubeFace?: TextureCubeFace, mipLevel?: number, ignoreClear?: CameraClearFlags) {\n    context.rendererUpdateFlag = ContextRendererUpdateFlag.All;\n\n    const camera = this._camera;\n    const { scene, engine } = camera;\n    const cullingResults = this._cullingResults;\n    const sunlight = scene._lightManager._sunlight;\n    const depthOnlyPass = this._depthOnlyPass;\n    const depthPassEnabled = camera.depthTextureMode === DepthTextureMode.PrePass && depthOnlyPass._supportDepthTexture;\n\n    if (scene.castShadows && sunlight && sunlight.shadowType !== ShadowType.None) {\n      this._cascadedShadowCasterPass.onRender(context);\n      context.rendererUpdateFlag = ContextRendererUpdateFlag.None;\n    }\n\n    const batcherManager = engine._batcherManager;\n    cullingResults.reset();\n\n    // Depth use camera's view and projection matrix\n    context.rendererUpdateFlag |= ContextRendererUpdateFlag.viewProjectionMatrix;\n    context.applyVirtualCamera(camera._virtualCamera, depthPassEnabled);\n    this._prepareRender(context);\n\n    cullingResults.sortBatch(batcherManager);\n    batcherManager.uploadBuffer();\n\n    if (depthPassEnabled) {\n      depthOnlyPass.onConfig(camera);\n      depthOnlyPass.onRender(context, cullingResults);\n      context.rendererUpdateFlag = ContextRendererUpdateFlag.None;\n    } else {\n      camera.shaderData.setTexture(Camera._cameraDepthTextureProperty, engine._basicResources.whiteTexture2D);\n    }\n\n    // Check if need to create internal color texture\n    const independentCanvasEnabled = camera.independentCanvasEnabled;\n    if (independentCanvasEnabled) {\n      const viewport = camera.pixelViewport;\n      const internalColorTarget = PipelineUtils.recreateRenderTargetIfNeeded(\n        engine,\n        this._internalColorTarget,\n        viewport.width,\n        viewport.height,\n        camera._getInternalColorTextureFormat(),\n        TextureFormat.Depth24Stencil8,\n        false,\n        false,\n        camera.msaaSamples,\n        TextureWrapMode.Clamp,\n        TextureFilterMode.Bilinear\n      );\n      this._internalColorTarget = internalColorTarget;\n    } else {\n      const internalColorTarget = this._internalColorTarget;\n      if (internalColorTarget) {\n        internalColorTarget.getColorTexture(0)?.destroy(true);\n        internalColorTarget.destroy(true);\n        this._internalColorTarget = null;\n      }\n    }\n\n    this._drawRenderPass(context, camera, cubeFace, mipLevel, ignoreClear);\n  }\n\n  private _drawRenderPass(\n    context: RenderContext,\n    camera: Camera,\n    cubeFace?: TextureCubeFace,\n    mipLevel?: number,\n    ignoreClear?: CameraClearFlags\n  ) {\n    const cullingResults = this._cullingResults;\n    const { opaqueQueue, alphaTestQueue, transparentQueue } = cullingResults;\n\n    const { engine, scene } = camera;\n    const { background } = scene;\n\n    const rhi = engine._hardwareRenderer;\n    const internalColorTarget = this._internalColorTarget;\n    const colorTarget = internalColorTarget || camera.renderTarget;\n    const colorViewport = internalColorTarget ? PipelineUtils.defaultViewport : camera.viewport;\n    const needFlipProjection = !!internalColorTarget || (camera.renderTarget && cubeFace == undefined);\n\n    if (context.flipProjection !== needFlipProjection) {\n      // Just add projection matrix update type is enough\n      context.rendererUpdateFlag |= ContextRendererUpdateFlag.ProjectionMatrix;\n      context.applyVirtualCamera(camera._virtualCamera, needFlipProjection);\n    }\n\n    rhi.activeRenderTarget(colorTarget, colorViewport, context.flipProjection, mipLevel, cubeFace);\n    const clearFlags = camera.clearFlags & ~(ignoreClear ?? CameraClearFlags.None);\n    const color = background.solidColor;\n    if (clearFlags !== CameraClearFlags.None) {\n      rhi.clearRenderTarget(engine, clearFlags, color);\n    }\n\n    const maskManager = scene._maskManager;\n    if (clearFlags & CameraClearFlags.Stencil) {\n      maskManager.hasStencilWritten = false;\n    }\n\n    opaqueQueue.render(context, PipelineStage.Forward);\n    alphaTestQueue.render(context, PipelineStage.Forward);\n    if (clearFlags & CameraClearFlags.Color) {\n      if (background.mode === BackgroundMode.Sky) {\n        background.sky._render(context);\n      } else if (background.mode === BackgroundMode.Texture && background.texture) {\n        this._drawBackgroundTexture(camera, background);\n      }\n    }\n\n    // Copy opaque texture\n    if (camera.opaqueTextureEnabled) {\n      // Should blit to resolve the MSAA\n      colorTarget._blitRenderTarget();\n\n      const opaqueTexturePass = this._opaqueTexturePass;\n      opaqueTexturePass.onConfig(camera, colorTarget.getColorTexture(0));\n      opaqueTexturePass.onRender(context);\n\n      // Should revert to original render target\n      rhi.activeRenderTarget(colorTarget, colorViewport, context.flipProjection, mipLevel, cubeFace);\n    } else {\n      camera.shaderData.setTexture(Camera._cameraOpaqueTextureProperty, null);\n    }\n\n    transparentQueue.render(context, PipelineStage.Forward);\n    // Revert stencil buffer generated by mask\n    maskManager.clearMask(context, PipelineStage.Forward);\n\n    const postProcessManager = scene._postProcessManager;\n    const cameraRenderTarget = camera.renderTarget;\n    if (camera.enablePostProcess && postProcessManager.hasActiveEffect) {\n      postProcessManager._render(context, internalColorTarget, cameraRenderTarget);\n    } else if (internalColorTarget) {\n      internalColorTarget._blitRenderTarget();\n      PipelineUtils.blitTexture(\n        engine,\n        <Texture2D>internalColorTarget.getColorTexture(0),\n        cameraRenderTarget,\n        0,\n        camera.viewport\n      );\n    }\n\n    cameraRenderTarget?._blitRenderTarget();\n    cameraRenderTarget?.generateMipmaps();\n  }\n\n  /**\n   * Push render data to render queue.\n   * @param context - Render context\n   * @param renderElement - Render element\n   */\n  pushRenderElement(context: RenderContext, renderElement: RenderElement): void {\n    renderElement.renderQueueFlags = RenderQueueFlags.None;\n    const subRenderElements = renderElement.subRenderElements;\n    for (let i = 0, n = subRenderElements.length; i < n; ++i) {\n      const subRenderElement = subRenderElements[i];\n      const { material } = subRenderElement;\n      const { renderStates } = material;\n      const materialSubShader = material.shader.subShaders[0];\n      const replacementShader = context.replacementShader;\n      if (replacementShader) {\n        const replacementSubShaders = replacementShader.subShaders;\n        const { replacementTag } = context;\n        if (replacementTag) {\n          let replacementSuccess = false;\n          for (let j = 0, m = replacementSubShaders.length; j < m; j++) {\n            const subShader = replacementSubShaders[j];\n            if (subShader.getTagValue(replacementTag) === materialSubShader.getTagValue(replacementTag)) {\n              this.pushRenderElementByType(renderElement, subRenderElement, subShader.passes, renderStates);\n              replacementSuccess = true;\n            }\n          }\n\n          if (\n            !replacementSuccess &&\n            context.replacementFailureStrategy === ReplacementFailureStrategy.KeepOriginalShader\n          ) {\n            this.pushRenderElementByType(renderElement, subRenderElement, materialSubShader.passes, renderStates);\n          }\n        } else {\n          this.pushRenderElementByType(renderElement, subRenderElement, replacementSubShaders[0].passes, renderStates);\n        }\n      } else {\n        this.pushRenderElementByType(renderElement, subRenderElement, materialSubShader.passes, renderStates);\n      }\n    }\n  }\n\n  private pushRenderElementByType(\n    renderElement: RenderElement,\n    subRenderElement: SubRenderElement,\n    shaderPasses: ReadonlyArray<ShaderPass>,\n    renderStates: ReadonlyArray<RenderState>\n  ): void {\n    const cullingResults = this._cullingResults;\n    for (let i = 0, n = shaderPasses.length; i < n; i++) {\n      // Get render queue type\n      let renderQueueType: RenderQueueType;\n      const shaderPass = shaderPasses[i];\n      const renderState = shaderPass._renderState;\n      if (renderState) {\n        renderState._applyRenderQueueByShaderData(shaderPass._renderStateDataMap, subRenderElement.material.shaderData);\n        renderQueueType = renderState.renderQueueType;\n      } else {\n        renderQueueType = renderStates[i].renderQueueType;\n      }\n\n      const flag = 1 << renderQueueType;\n\n      subRenderElement.shaderPasses = shaderPasses;\n      subRenderElement.renderQueueFlags |= flag;\n\n      if (renderElement.renderQueueFlags & flag) {\n        continue;\n      }\n\n      switch (renderQueueType) {\n        case RenderQueueType.Opaque:\n          cullingResults.opaqueQueue.pushRenderElement(renderElement);\n          break;\n        case RenderQueueType.AlphaTest:\n          cullingResults.alphaTestQueue.pushRenderElement(renderElement);\n          break;\n        case RenderQueueType.Transparent:\n          cullingResults.transparentQueue.pushRenderElement(renderElement);\n          break;\n      }\n      renderElement.renderQueueFlags |= flag;\n    }\n  }\n\n  private _drawBackgroundTexture(camera: Camera, background: Background) {\n    const engine = camera.engine;\n    const rhi = engine._hardwareRenderer;\n    const { canvas } = engine;\n    const { _material: material, _mesh: mesh } = background;\n\n    if (\n      (this._lastCanvasSize.x !== canvas.width || this._lastCanvasSize.y !== canvas.height) &&\n      background._textureFillMode !== BackgroundTextureFillMode.Fill\n    ) {\n      this._lastCanvasSize.set(canvas.width, canvas.height);\n      background._resizeBackgroundTexture();\n    }\n\n    const pass = material.shader.subShaders[0].passes[0];\n    const program = pass._getShaderProgram(engine, Shader._compileMacros);\n    program.bind();\n    program.uploadAll(program.materialUniformBlock, material.shaderData);\n    program.uploadAll(program.cameraUniformBlock, camera.shaderData);\n    program.uploadUnGroupTextures();\n\n    (pass._renderState || material.renderState)._applyStates(\n      engine,\n      false,\n      pass._renderStateDataMap,\n      material.shaderData\n    );\n    rhi.drawPrimitive(mesh._primitive, mesh.subMesh, program);\n  }\n\n  private _prepareRender(context: RenderContext): void {\n    const camera = context.camera;\n    const engine = camera.engine;\n    const renderers = camera.scene._componentsManager._renderers;\n\n    const elements = renderers._elements;\n    for (let i = renderers.length - 1; i >= 0; --i) {\n      const renderer = elements[i];\n\n      // Filter by camera culling mask\n      if (!(camera.cullingMask & renderer._entity.layer)) {\n        continue;\n      }\n\n      // Filter by camera frustum\n      if (camera.enableFrustumCulling) {\n        if (!camera._frustum.intersectsBox(renderer.bounds)) {\n          continue;\n        }\n      }\n      renderer._prepareRender(context);\n      renderer._renderFrameCount = engine.time.frameCount;\n    }\n  }\n}\n\nexport enum RenderQueueFlags {\n  None = 0x0,\n  Opaque = 0x1,\n  AlphaTest = 0x2,\n  Transparent = 0x4,\n  All = 0x7\n}\n","import { IPoolElement } from \"../utils/ObjectPool\";\nimport { RenderQueueFlags } from \"./BasicRenderPipeline\";\nimport { SubRenderElement } from \"./SubRenderElement\";\n\nexport class RenderElement implements IPoolElement {\n  priority: number;\n  distanceForSort: number;\n  subRenderElements = Array<SubRenderElement>();\n  renderQueueFlags: RenderQueueFlags;\n\n  set(priority: number, distanceForSort: number): void {\n    this.priority = priority;\n    this.distanceForSort = distanceForSort;\n    this.subRenderElements.length = 0;\n  }\n\n  addSubRenderElement(element: SubRenderElement): void {\n    this.subRenderElements.push(element);\n  }\n\n  dispose(): void {\n    this.subRenderElements.length = 0;\n  }\n}\n","import { Renderer } from \"../Renderer\";\nimport { Primitive, SubMesh } from \"../graphic\";\nimport { Material } from \"../material\";\nimport { ShaderData, ShaderPass } from \"../shader\";\nimport { Texture2D } from \"../texture\";\nimport { IPoolElement } from \"../utils/ObjectPool\";\nimport { RenderQueueFlags } from \"./BasicRenderPipeline\";\nimport { SubPrimitiveChunk } from \"./SubPrimitiveChunk\";\n\nexport class SubRenderElement implements IPoolElement {\n  component: Renderer;\n  primitive: Primitive;\n  material: Material;\n  subPrimitive: SubMesh;\n  shaderPasses: ReadonlyArray<ShaderPass>;\n  shaderData?: ShaderData;\n  batched: boolean;\n  renderQueueFlags: RenderQueueFlags;\n\n  // @todo: maybe should remove later\n  texture?: Texture2D;\n  subChunk?: SubPrimitiveChunk;\n\n  set(\n    component: Renderer,\n    material: Material,\n    primitive: Primitive,\n    subPrimitive: SubMesh,\n    texture?: Texture2D,\n    subChunk?: SubPrimitiveChunk\n  ): void {\n    this.component = component;\n    this.material = material;\n    this.primitive = primitive;\n    this.subPrimitive = subPrimitive;\n    this.texture = texture;\n    this.subChunk = subChunk;\n  }\n\n  dispose(): void {\n    this.component = null;\n    this.material = null;\n    this.primitive = null;\n    this.subPrimitive = null;\n    this.shaderPasses = null;\n    this.shaderData && (this.shaderData = null);\n\n    this.texture && (this.texture = null);\n    this.subChunk && (this.subChunk = null);\n  }\n}\n","import { BoundingBox } from \"@galacean/engine-math\";\nimport { Entity } from \"../../Entity\";\nimport { RenderQueueFlags } from \"../../RenderPipeline/BasicRenderPipeline\";\nimport { BatchUtils } from \"../../RenderPipeline/BatchUtils\";\nimport { PrimitiveChunkManager } from \"../../RenderPipeline/PrimitiveChunkManager\";\nimport { RenderContext } from \"../../RenderPipeline/RenderContext\";\nimport { RenderElement } from \"../../RenderPipeline/RenderElement\";\nimport { SubPrimitiveChunk } from \"../../RenderPipeline/SubPrimitiveChunk\";\nimport { SubRenderElement } from \"../../RenderPipeline/SubRenderElement\";\nimport { Renderer, RendererUpdateFlags } from \"../../Renderer\";\nimport { assignmentClone, ignoreClone } from \"../../clone/CloneManager\";\nimport { SpriteMaskLayer } from \"../../enums/SpriteMaskLayer\";\nimport { ShaderProperty } from \"../../shader/ShaderProperty\";\nimport { SimpleSpriteAssembler } from \"../assembler/SimpleSpriteAssembler\";\nimport { SpriteModifyFlags } from \"../enums/SpriteModifyFlags\";\nimport { Sprite } from \"./Sprite\";\n\n/**\n * A component for masking Sprites.\n */\nexport class SpriteMask extends Renderer {\n  /** @internal */\n  static _textureProperty: ShaderProperty = ShaderProperty.getByName(\"renderer_MaskTexture\");\n  /** @internal */\n  static _alphaCutoffProperty: ShaderProperty = ShaderProperty.getByName(\"renderer_MaskAlphaCutoff\");\n\n  /** The mask layers the sprite mask influence to. */\n  @assignmentClone\n  influenceLayers: SpriteMaskLayer = SpriteMaskLayer.Everything;\n  /** @internal */\n  @ignoreClone\n  _renderElement: RenderElement;\n\n  /** @internal */\n  @ignoreClone\n  _subChunk: SubPrimitiveChunk;\n  /** @internal */\n  @ignoreClone\n  _maskIndex: number = -1;\n\n  @ignoreClone\n  private _sprite: Sprite = null;\n\n  @ignoreClone\n  private _automaticWidth: number = 0;\n  @ignoreClone\n  private _automaticHeight: number = 0;\n  @assignmentClone\n  private _customWidth: number = undefined;\n  @assignmentClone\n  private _customHeight: number = undefined;\n  @assignmentClone\n  private _flipX: boolean = false;\n  @assignmentClone\n  private _flipY: boolean = false;\n\n  @assignmentClone\n  private _alphaCutoff: number = 0.5;\n\n  /**\n   * Render width (in world coordinates).\n   *\n   * @remarks\n   * If width is set, return the set value,\n   * otherwise return `SpriteMask.sprite.width`.\n   */\n  get width(): number {\n    if (this._customWidth !== undefined) {\n      return this._customWidth;\n    } else {\n      this._dirtyUpdateFlag & SpriteMaskUpdateFlags.AutomaticSize && this._calDefaultSize();\n      return this._automaticWidth;\n    }\n  }\n\n  set width(value: number) {\n    if (this._customWidth !== value) {\n      this._customWidth = value;\n      this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;\n    }\n  }\n\n  /**\n   * Render height (in world coordinates).\n   *\n   * @remarks\n   * If height is set, return the set value,\n   * otherwise return `SpriteMask.sprite.height`.\n   */\n  get height(): number {\n    if (this._customHeight !== undefined) {\n      return this._customHeight;\n    } else {\n      this._dirtyUpdateFlag & SpriteMaskUpdateFlags.AutomaticSize && this._calDefaultSize();\n      return this._automaticHeight;\n    }\n  }\n\n  set height(value: number) {\n    if (this._customHeight !== value) {\n      this._customHeight = value;\n      this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;\n    }\n  }\n\n  /**\n   * Flips the sprite on the X axis.\n   */\n  get flipX(): boolean {\n    return this._flipX;\n  }\n\n  set flipX(value: boolean) {\n    if (this._flipX !== value) {\n      this._flipX = value;\n      this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;\n    }\n  }\n\n  /**\n   * Flips the sprite on the Y axis.\n   */\n  get flipY(): boolean {\n    return this._flipY;\n  }\n\n  set flipY(value: boolean) {\n    if (this._flipY !== value) {\n      this._flipY = value;\n      this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;\n    }\n  }\n\n  /**\n   * The Sprite to render.\n   */\n  get sprite(): Sprite {\n    return this._sprite;\n  }\n\n  set sprite(value: Sprite | null) {\n    const lastSprite = this._sprite;\n    if (lastSprite !== value) {\n      if (lastSprite) {\n        this._addResourceReferCount(lastSprite, -1);\n        lastSprite._updateFlagManager.removeListener(this._onSpriteChange);\n      }\n      this._dirtyUpdateFlag |= SpriteMaskUpdateFlags.All;\n      if (value) {\n        this._addResourceReferCount(value, 1);\n        value._updateFlagManager.addListener(this._onSpriteChange);\n        this.shaderData.setTexture(SpriteMask._textureProperty, value.texture);\n      } else {\n        this.shaderData.setTexture(SpriteMask._textureProperty, null);\n      }\n      this._sprite = value;\n    }\n  }\n\n  /**\n   * The minimum alpha value used by the mask to select the area of influence defined over the mask's sprite. Value between 0 and 1.\n   */\n  get alphaCutoff(): number {\n    return this._alphaCutoff;\n  }\n\n  set alphaCutoff(value: number) {\n    if (this._alphaCutoff !== value) {\n      this._alphaCutoff = value;\n      this.shaderData.setFloat(SpriteMask._alphaCutoffProperty, value);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    SimpleSpriteAssembler.resetData(this);\n    this.setMaterial(this._engine._basicResources.spriteMaskDefaultMaterial);\n    this.shaderData.setFloat(SpriteMask._alphaCutoffProperty, this._alphaCutoff);\n    this._renderElement = new RenderElement();\n    this._renderElement.addSubRenderElement(new SubRenderElement());\n    this._onSpriteChange = this._onSpriteChange.bind(this);\n  }\n\n  /**\n   * @internal\n   */\n  override _updateTransformShaderData(context: RenderContext, onlyMVP: boolean, batched: boolean): void {\n    //@todo: Always update world positions to buffer, should opt\n    super._updateTransformShaderData(context, onlyMVP, true);\n  }\n\n  /**\n   * @internal\n   */\n  override _cloneTo(target: SpriteMask, srcRoot: Entity, targetRoot: Entity): void {\n    super._cloneTo(target, srcRoot, targetRoot);\n    target.sprite = this._sprite;\n  }\n\n  /**\n   * @internal\n   */\n  override _canBatch(elementA: SubRenderElement, elementB: SubRenderElement): boolean {\n    return BatchUtils.canBatchSpriteMask(elementA, elementB);\n  }\n\n  /**\n   * @internal\n   */\n  override _batch(elementA: SubRenderElement, elementB?: SubRenderElement): void {\n    BatchUtils.batchFor2D(elementA, elementB);\n  }\n\n  /**\n   * @internal\n   */\n  override _onEnableInScene(): void {\n    super._onEnableInScene();\n    this.scene._maskManager.addSpriteMask(this);\n  }\n\n  /**\n   * @internal\n   */\n  override _onDisableInScene(): void {\n    super._onDisableInScene();\n    this.scene._maskManager.removeSpriteMask(this);\n  }\n\n  /**\n   * @internal\n   */\n  _getChunkManager(): PrimitiveChunkManager {\n    return this.engine._batcherManager.primitiveChunkManagerMask;\n  }\n\n  protected override _updateBounds(worldBounds: BoundingBox): void {\n    if (this.sprite) {\n      SimpleSpriteAssembler.updatePositions(this);\n    } else {\n      worldBounds.min.set(0, 0, 0);\n      worldBounds.max.set(0, 0, 0);\n    }\n  }\n\n  /**\n   * @inheritdoc\n   */\n  protected override _render(context: RenderContext): void {\n    if (!this.sprite?.texture || !this.width || !this.height) {\n      return;\n    }\n\n    let material = this.getMaterial();\n    if (!material) {\n      return;\n    }\n    const { _engine: engine } = this;\n    // @todo: This question needs to be raised rather than hidden.\n    if (material.destroyed) {\n      material = engine._basicResources.spriteMaskDefaultMaterial;\n    }\n\n    // Update position\n    if (this._dirtyUpdateFlag & RendererUpdateFlags.WorldVolume) {\n      SimpleSpriteAssembler.updatePositions(this);\n      this._dirtyUpdateFlag &= ~RendererUpdateFlags.WorldVolume;\n    }\n\n    // Update uv\n    if (this._dirtyUpdateFlag & SpriteMaskUpdateFlags.UV) {\n      SimpleSpriteAssembler.updateUVs(this);\n      this._dirtyUpdateFlag &= ~SpriteMaskUpdateFlags.UV;\n    }\n\n    const renderElement = this._renderElement;\n    const subRenderElement = renderElement.subRenderElements[0];\n    renderElement.set(this.priority, this._distanceForSort);\n\n    const subChunk = this._subChunk;\n    subRenderElement.set(this, material, subChunk.chunk.primitive, subChunk.subMesh, this.sprite.texture, subChunk);\n    subRenderElement.shaderPasses = material.shader.subShaders[0].passes;\n    subRenderElement.renderQueueFlags = RenderQueueFlags.All;\n    renderElement.addSubRenderElement(subRenderElement);\n  }\n\n  /**\n   * @inheritdoc\n   */\n  protected override _onDestroy(): void {\n    const sprite = this._sprite;\n    if (sprite) {\n      this._addResourceReferCount(sprite, -1);\n      sprite._updateFlagManager.removeListener(this._onSpriteChange);\n    }\n\n    super._onDestroy();\n\n    this._sprite = null;\n    if (this._subChunk) {\n      this._getChunkManager().freeSubChunk(this._subChunk);\n      this._subChunk = null;\n    }\n\n    this._renderElement = null;\n  }\n\n  private _calDefaultSize(): void {\n    const sprite = this._sprite;\n    if (sprite) {\n      this._automaticWidth = sprite.width;\n      this._automaticHeight = sprite.height;\n    } else {\n      this._automaticWidth = this._automaticHeight = 0;\n    }\n    this._dirtyUpdateFlag &= ~SpriteMaskUpdateFlags.AutomaticSize;\n  }\n\n  @ignoreClone\n  private _onSpriteChange(type: SpriteModifyFlags): void {\n    switch (type) {\n      case SpriteModifyFlags.texture:\n        this.shaderData.setTexture(SpriteMask._textureProperty, this.sprite.texture);\n        break;\n      case SpriteModifyFlags.size:\n        this._dirtyUpdateFlag |= SpriteMaskUpdateFlags.AutomaticSize;\n        if (this._customWidth === undefined || this._customHeight === undefined) {\n          this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;\n        }\n        break;\n      case SpriteModifyFlags.region:\n      case SpriteModifyFlags.atlasRegionOffset:\n        this._dirtyUpdateFlag |= SpriteMaskUpdateFlags.RenderData;\n        break;\n      case SpriteModifyFlags.atlasRegion:\n        this._dirtyUpdateFlag |= SpriteMaskUpdateFlags.UV;\n        break;\n      case SpriteModifyFlags.pivot:\n        this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;\n        break;\n      case SpriteModifyFlags.destroy:\n        this.sprite = null;\n        break;\n      default:\n        break;\n    }\n  }\n}\n\n/**\n * @remarks Extends `RendererUpdateFlag`.\n */\nenum SpriteMaskUpdateFlags {\n  /** UV. */\n  UV = 0x2,\n  /** WorldVolume and UV . */\n  RenderData = 0x3,\n  /** Automatic Size. */\n  AutomaticSize = 0x4,\n  /** All. */\n  All = 0x7\n}\n","import { BoundingBox, Color, Vector3 } from \"@galacean/engine-math\";\nimport { Engine } from \"../../Engine\";\nimport { Entity } from \"../../Entity\";\nimport { BatchUtils } from \"../../RenderPipeline/BatchUtils\";\nimport { PrimitiveChunkManager } from \"../../RenderPipeline/PrimitiveChunkManager\";\nimport { RenderContext } from \"../../RenderPipeline/RenderContext\";\nimport { SubPrimitiveChunk } from \"../../RenderPipeline/SubPrimitiveChunk\";\nimport { SubRenderElement } from \"../../RenderPipeline/SubRenderElement\";\nimport { Renderer } from \"../../Renderer\";\nimport { TransformModifyFlags } from \"../../Transform\";\nimport { assignmentClone, deepClone, ignoreClone } from \"../../clone/CloneManager\";\nimport { ShaderData, ShaderProperty } from \"../../shader\";\nimport { ShaderDataGroup } from \"../../shader/enums/ShaderDataGroup\";\nimport { Texture2D } from \"../../texture\";\nimport { FontStyle } from \"../enums/FontStyle\";\nimport { SpriteMaskInteraction } from \"../enums/SpriteMaskInteraction\";\nimport { TextHorizontalAlignment, TextVerticalAlignment } from \"../enums/TextAlignment\";\nimport { OverflowMode } from \"../enums/TextOverflow\";\nimport { CharRenderInfo } from \"./CharRenderInfo\";\nimport { Font } from \"./Font\";\nimport { SubFont } from \"./SubFont\";\nimport { TextUtils } from \"./TextUtils\";\n\n/**\n * Renders a text for 2D graphics.\n */\nexport class TextRenderer extends Renderer {\n  private static _textureProperty = ShaderProperty.getByName(\"renderElement_TextTexture\");\n  private static _tempVec30 = new Vector3();\n  private static _tempVec31 = new Vector3();\n  private static _worldPositions = [new Vector3(), new Vector3(), new Vector3(), new Vector3()];\n  private static _charRenderInfos: CharRenderInfo[] = [];\n\n  /** @internal */\n  @ignoreClone\n  _textChunks = Array<TextChunk>();\n  /** @internal */\n  @assignmentClone\n  _subFont: SubFont = null;\n  /** @internal */\n  @ignoreClone\n  _dirtyFlag: number = DirtyFlag.Font;\n\n  @deepClone\n  private _color: Color = new Color(1, 1, 1, 1);\n  @assignmentClone\n  private _text: string = \"\";\n  @assignmentClone\n  private _width: number = 0;\n  @assignmentClone\n  private _height: number = 0;\n  @ignoreClone\n  private _localBounds: BoundingBox = new BoundingBox();\n  @assignmentClone\n  private _font: Font = null;\n  @assignmentClone\n  private _fontSize: number = 24;\n  @assignmentClone\n  private _fontStyle: FontStyle = FontStyle.None;\n  @assignmentClone\n  private _lineSpacing: number = 0;\n  @assignmentClone\n  private _horizontalAlignment: TextHorizontalAlignment = TextHorizontalAlignment.Center;\n  @assignmentClone\n  private _verticalAlignment: TextVerticalAlignment = TextVerticalAlignment.Center;\n  @assignmentClone\n  private _enableWrapping: boolean = false;\n  @assignmentClone\n  private _overflowMode: OverflowMode = OverflowMode.Overflow;\n\n  /**\n   * Rendering color for the Text.\n   */\n  get color(): Color {\n    return this._color;\n  }\n\n  set color(value: Color) {\n    if (this._color !== value) {\n      this._color.copyFrom(value);\n    }\n  }\n\n  /**\n   * Rendering string for the Text.\n   */\n  get text(): string {\n    return this._text;\n  }\n\n  set text(value: string) {\n    value = value || \"\";\n    if (this._text !== value) {\n      this._text = value;\n      this._setDirtyFlagTrue(DirtyFlag.Position);\n    }\n  }\n\n  /**\n   * The width of the TextRenderer (in 3D world coordinates).\n   */\n  get width(): number {\n    return this._width;\n  }\n\n  set width(value: number) {\n    if (this._width !== value) {\n      this._width = value;\n      this._setDirtyFlagTrue(DirtyFlag.Position);\n    }\n  }\n\n  /**\n   * The height of the TextRenderer (in 3D world coordinates).\n   */\n  get height(): number {\n    return this._height;\n  }\n\n  set height(value: number) {\n    if (this._height !== value) {\n      this._height = value;\n      this._setDirtyFlagTrue(DirtyFlag.Position);\n    }\n  }\n\n  /**\n   * The font of the Text.\n   */\n  get font(): Font {\n    return this._font;\n  }\n\n  set font(value: Font) {\n    const lastFont = this._font;\n    if (lastFont !== value) {\n      lastFont && this._addResourceReferCount(lastFont, -1);\n      value && this._addResourceReferCount(value, 1);\n      this._font = value;\n      this._setDirtyFlagTrue(DirtyFlag.Font);\n    }\n  }\n\n  /**\n   * The font size of the Text.\n   */\n  get fontSize(): number {\n    return this._fontSize;\n  }\n\n  set fontSize(value: number) {\n    if (this._fontSize !== value) {\n      this._fontSize = value;\n      this._setDirtyFlagTrue(DirtyFlag.Font);\n    }\n  }\n\n  /**\n   * The style of the font.\n   */\n  get fontStyle(): FontStyle {\n    return this._fontStyle;\n  }\n\n  set fontStyle(value: FontStyle) {\n    if (this.fontStyle !== value) {\n      this._fontStyle = value;\n      this._setDirtyFlagTrue(DirtyFlag.Font);\n    }\n  }\n\n  /**\n   * The space between two lines (in pixels).\n   */\n  get lineSpacing(): number {\n    return this._lineSpacing;\n  }\n\n  set lineSpacing(value: number) {\n    if (this._lineSpacing !== value) {\n      this._lineSpacing = value;\n      this._setDirtyFlagTrue(DirtyFlag.Position);\n    }\n  }\n\n  /**\n   * The horizontal alignment.\n   */\n  get horizontalAlignment(): TextHorizontalAlignment {\n    return this._horizontalAlignment;\n  }\n\n  set horizontalAlignment(value: TextHorizontalAlignment) {\n    if (this._horizontalAlignment !== value) {\n      this._horizontalAlignment = value;\n      this._setDirtyFlagTrue(DirtyFlag.Position);\n    }\n  }\n\n  /**\n   * The vertical alignment.\n   */\n  get verticalAlignment(): TextVerticalAlignment {\n    return this._verticalAlignment;\n  }\n\n  set verticalAlignment(value: TextVerticalAlignment) {\n    if (this._verticalAlignment !== value) {\n      this._verticalAlignment = value;\n      this._setDirtyFlagTrue(DirtyFlag.Position);\n    }\n  }\n\n  /**\n   * Whether wrap text to next line when exceeds the width of the container.\n   */\n  get enableWrapping(): boolean {\n    return this._enableWrapping;\n  }\n\n  set enableWrapping(value: boolean) {\n    if (this._enableWrapping !== value) {\n      this._enableWrapping = value;\n      this._setDirtyFlagTrue(DirtyFlag.Position);\n    }\n  }\n\n  /**\n   * The overflow mode.\n   */\n  get overflowMode(): OverflowMode {\n    return this._overflowMode;\n  }\n\n  set overflowMode(value: OverflowMode) {\n    if (this._overflowMode !== value) {\n      this._overflowMode = value;\n      this._setDirtyFlagTrue(DirtyFlag.Position);\n    }\n  }\n\n  /**\n   * Interacts with the masks.\n   */\n  get maskInteraction(): SpriteMaskInteraction {\n    return this._maskInteraction;\n  }\n\n  set maskInteraction(value: SpriteMaskInteraction) {\n    if (this._maskInteraction !== value) {\n      this._maskInteraction = value;\n    }\n  }\n\n  /**\n   * The mask layer the sprite renderer belongs to.\n   */\n  get maskLayer(): number {\n    return this._maskLayer;\n  }\n\n  set maskLayer(value: number) {\n    this._maskLayer = value;\n  }\n\n  /**\n   * The bounding volume of the TextRenderer.\n   */\n  override get bounds(): BoundingBox {\n    if (this._isTextNoVisible()) {\n      if (this._isContainDirtyFlag(DirtyFlag.WorldBounds)) {\n        const localBounds = this._localBounds;\n        localBounds.min.set(0, 0, 0);\n        localBounds.max.set(0, 0, 0);\n        this._updateBounds(this._bounds);\n        this._setDirtyFlagFalse(DirtyFlag.WorldBounds);\n      }\n      return this._bounds;\n    }\n    this._isContainDirtyFlag(DirtyFlag.SubFont) && this._resetSubFont();\n    this._isContainDirtyFlag(DirtyFlag.LocalPositionBounds) && this._updateLocalData();\n    this._isContainDirtyFlag(DirtyFlag.WorldPosition) && this._updatePosition();\n    this._isContainDirtyFlag(DirtyFlag.WorldBounds) && this._updateBounds(this._bounds);\n    this._setDirtyFlagFalse(DirtyFlag.Font);\n\n    return this._bounds;\n  }\n\n  constructor(entity: Entity) {\n    super(entity);\n\n    const { engine } = this;\n    this._font = engine._textDefaultFont;\n    this._addResourceReferCount(this._font, 1);\n    this.setMaterial(engine._basicResources.textDefaultMaterial);\n    //@ts-ignore\n    this._color._onValueChanged = this._onColorChanged.bind(this);\n  }\n\n  /**\n   * @internal\n   */\n  protected override _onDestroy(): void {\n    if (this._font) {\n      this._addResourceReferCount(this._font, -1);\n      this._font = null;\n    }\n\n    super._onDestroy();\n\n    this._freeTextChunks();\n    this._textChunks = null;\n\n    this._subFont && (this._subFont = null);\n  }\n\n  /**\n   * @internal\n   */\n  override _cloneTo(target: TextRenderer, srcRoot: Entity, targetRoot: Entity): void {\n    super._cloneTo(target, srcRoot, targetRoot);\n    target.font = this._font;\n    target._subFont = this._subFont;\n  }\n\n  /**\n   * @internal\n   */\n  _isContainDirtyFlag(type: number): boolean {\n    return (this._dirtyFlag & type) != 0;\n  }\n\n  /**\n   * @internal\n   */\n  _setDirtyFlagTrue(type: number): void {\n    this._dirtyFlag |= type;\n  }\n\n  /**\n   * @internal\n   */\n  _setDirtyFlagFalse(type: number): void {\n    this._dirtyFlag &= ~type;\n  }\n\n  /**\n   * @internal\n   */\n  _getSubFont(): SubFont {\n    if (!this._subFont) {\n      this._resetSubFont();\n    }\n    return this._subFont;\n  }\n\n  /**\n   * @internal\n   */\n  override _updateTransformShaderData(context: RenderContext, onlyMVP: boolean, batched: boolean): void {\n    //@todo: Always update world positions to buffer, should opt\n    super._updateTransformShaderData(context, onlyMVP, true);\n  }\n\n  /**\n   * @internal\n   */\n  override _canBatch(elementA: SubRenderElement, elementB: SubRenderElement): boolean {\n    return BatchUtils.canBatchSprite(elementA, elementB);\n  }\n\n  /**\n   * @internal\n   */\n  override _batch(elementA: SubRenderElement, elementB?: SubRenderElement): void {\n    BatchUtils.batchFor2D(elementA, elementB);\n  }\n\n  /**\n   * @internal\n   */\n  _getChunkManager(): PrimitiveChunkManager {\n    return this.engine._batcherManager.primitiveChunkManager2D;\n  }\n\n  protected override _updateBounds(worldBounds: BoundingBox): void {\n    BoundingBox.transform(this._localBounds, this._entity.transform.worldMatrix, worldBounds);\n  }\n\n  protected override _render(context: RenderContext): void {\n    if (this._isTextNoVisible()) {\n      return;\n    }\n\n    if (this._isContainDirtyFlag(DirtyFlag.SubFont)) {\n      this._resetSubFont();\n      this._setDirtyFlagFalse(DirtyFlag.SubFont);\n    }\n\n    if (this._isContainDirtyFlag(DirtyFlag.LocalPositionBounds)) {\n      this._updateLocalData();\n      this._setDirtyFlagFalse(DirtyFlag.LocalPositionBounds);\n    }\n\n    if (this._isContainDirtyFlag(DirtyFlag.WorldPosition)) {\n      this._updatePosition();\n      this._setDirtyFlagFalse(DirtyFlag.WorldPosition);\n    }\n\n    if (this._isContainDirtyFlag(DirtyFlag.Color)) {\n      this._updateColor();\n      this._setDirtyFlagFalse(DirtyFlag.Color);\n    }\n\n    const camera = context.camera;\n    const engine = camera.engine;\n    const textSubRenderElementPool = engine._textSubRenderElementPool;\n    const material = this.getMaterial();\n    const renderElement = engine._renderElementPool.get();\n    renderElement.set(this.priority, this._distanceForSort);\n    const textChunks = this._textChunks;\n    for (let i = 0, n = textChunks.length; i < n; ++i) {\n      const { subChunk, texture } = textChunks[i];\n      const subRenderElement = textSubRenderElementPool.get();\n      subRenderElement.set(this, material, subChunk.chunk.primitive, subChunk.subMesh, texture, subChunk);\n      subRenderElement.shaderData ||= new ShaderData(ShaderDataGroup.RenderElement);\n      subRenderElement.shaderData.setTexture(TextRenderer._textureProperty, texture);\n      renderElement.addSubRenderElement(subRenderElement);\n    }\n    camera._renderPipeline.pushRenderElement(context, renderElement);\n  }\n\n  private _resetSubFont(): void {\n    const font = this._font;\n    this._subFont = font._getSubFont(this.fontSize, this.fontStyle);\n    this._subFont.nativeFontString = TextUtils.getNativeFontString(font.name, this.fontSize, this.fontStyle);\n  }\n\n  private _updatePosition(): void {\n    const { transform } = this.entity;\n    const e = transform.worldMatrix.elements;\n\n    // prettier-ignore\n    const e0 = e[0], e1 = e[1], e2 = e[2],\n    e4 = e[4], e5 = e[5], e6 = e[6],\n    e12 = e[12], e13 = e[13], e14 = e[14];\n\n    const up = TextRenderer._tempVec31.set(e4, e5, e6);\n    const right = TextRenderer._tempVec30.set(e0, e1, e2);\n\n    const worldPositions = TextRenderer._worldPositions;\n    const worldPosition0 = worldPositions[0];\n    const worldPosition1 = worldPositions[1];\n    const worldPosition2 = worldPositions[2];\n    const worldPosition3 = worldPositions[3];\n\n    const textChunks = this._textChunks;\n    for (let i = 0, n = textChunks.length; i < n; ++i) {\n      const { subChunk, charRenderInfos } = textChunks[i];\n      for (let j = 0, m = charRenderInfos.length; j < m; ++j) {\n        const charRenderInfo = charRenderInfos[j];\n        const { localPositions } = charRenderInfo;\n        const { x: topLeftX, y: topLeftY } = localPositions;\n\n        // Top-Left\n        worldPosition0.set(\n          topLeftX * e0 + topLeftY * e4 + e12,\n          topLeftX * e1 + topLeftY * e5 + e13,\n          topLeftX * e2 + topLeftY * e6 + e14\n        );\n\n        // Right offset\n        Vector3.scale(right, localPositions.z - topLeftX, worldPosition1);\n\n        // Top-Right\n        Vector3.add(worldPosition0, worldPosition1, worldPosition1);\n\n        // Up offset\n        Vector3.scale(up, localPositions.w - topLeftY, worldPosition2);\n\n        // Bottom-Left\n        Vector3.add(worldPosition0, worldPosition2, worldPosition3);\n        // Bottom-Right\n        Vector3.add(worldPosition1, worldPosition2, worldPosition2);\n\n        const vertices = subChunk.chunk.vertices;\n        for (let k = 0, o = subChunk.vertexArea.start + charRenderInfo.indexInChunk * 36; k < 4; ++k, o += 9) {\n          worldPositions[k].copyToArray(vertices, o);\n        }\n      }\n    }\n  }\n\n  private _updateColor(): void {\n    const { r, g, b, a } = this._color;\n    const textChunks = this._textChunks;\n    for (let i = 0, n = textChunks.length; i < n; ++i) {\n      const subChunk = textChunks[i].subChunk;\n      const vertexArea = subChunk.vertexArea;\n      const vertexCount = vertexArea.size / 9;\n      const vertices = subChunk.chunk.vertices;\n      for (let j = 0, o = vertexArea.start + 5; j < vertexCount; ++j, o += 9) {\n        vertices[o] = r;\n        vertices[o + 1] = g;\n        vertices[o + 2] = b;\n        vertices[o + 3] = a;\n      }\n    }\n  }\n\n  private _updateLocalData(): void {\n    const { min, max } = this._localBounds;\n    const charRenderInfos = TextRenderer._charRenderInfos;\n    const charFont = this._subFont;\n    const textMetrics = this.enableWrapping\n      ? TextUtils.measureTextWithWrap(this)\n      : TextUtils.measureTextWithoutWrap(this);\n    const { height, lines, lineWidths, lineHeight, lineMaxSizes } = textMetrics;\n    const charRenderInfoPool = this.engine._charRenderInfoPool;\n    const linesLen = lines.length;\n    let renderElementCount = 0;\n\n    if (linesLen > 0) {\n      const { _pixelsPerUnit } = Engine;\n      const { horizontalAlignment } = this;\n      const pixelsPerUnitReciprocal = 1.0 / _pixelsPerUnit;\n      const rendererWidth = this.width * _pixelsPerUnit;\n      const halfRendererWidth = rendererWidth * 0.5;\n      const rendererHeight = this.height * _pixelsPerUnit;\n      const halfLineHeight = lineHeight * 0.5;\n\n      let startY = 0;\n      const topDiff = lineHeight * 0.5 - lineMaxSizes[0].ascent;\n      const bottomDiff = lineHeight * 0.5 - lineMaxSizes[linesLen - 1].descent - 1;\n      switch (this.verticalAlignment) {\n        case TextVerticalAlignment.Top:\n          startY = rendererHeight * 0.5 - halfLineHeight + topDiff;\n          break;\n        case TextVerticalAlignment.Center:\n          startY = height * 0.5 - halfLineHeight - (bottomDiff - topDiff) * 0.5;\n          break;\n        case TextVerticalAlignment.Bottom:\n          startY = height - rendererHeight * 0.5 - halfLineHeight - bottomDiff;\n          break;\n      }\n\n      let firstLine = -1;\n      let minX = Number.MAX_SAFE_INTEGER;\n      let minY = Number.MAX_SAFE_INTEGER;\n      let maxX = Number.MIN_SAFE_INTEGER;\n      let maxY = Number.MIN_SAFE_INTEGER;\n      for (let i = 0; i < linesLen; ++i) {\n        const lineWidth = lineWidths[i];\n        if (lineWidth > 0) {\n          const line = lines[i];\n          let startX = 0;\n          let firstRow = -1;\n          if (firstLine < 0) {\n            firstLine = i;\n          }\n          switch (horizontalAlignment) {\n            case TextHorizontalAlignment.Left:\n              startX = -halfRendererWidth;\n              break;\n            case TextHorizontalAlignment.Center:\n              startX = -lineWidth * 0.5;\n              break;\n            case TextHorizontalAlignment.Right:\n              startX = halfRendererWidth - lineWidth;\n              break;\n          }\n          for (let j = 0, n = line.length; j < n; ++j) {\n            const char = line[j];\n            const charInfo = charFont._getCharInfo(char);\n            if (charInfo.h > 0) {\n              firstRow < 0 && (firstRow = j);\n              const charRenderInfo = (charRenderInfos[renderElementCount++] = charRenderInfoPool.get());\n              const { localPositions } = charRenderInfo;\n              charRenderInfo.texture = charFont._getTextureByIndex(charInfo.index);\n              charRenderInfo.uvs = charInfo.uvs;\n              const { w, ascent, descent } = charInfo;\n              const left = startX * pixelsPerUnitReciprocal;\n              const right = (startX + w) * pixelsPerUnitReciprocal;\n              const top = (startY + ascent) * pixelsPerUnitReciprocal;\n              const bottom = (startY - descent) * pixelsPerUnitReciprocal;\n              localPositions.set(left, top, right, bottom);\n              i === firstLine && (maxY = Math.max(maxY, top));\n              minY = Math.min(minY, bottom);\n              j === firstRow && (minX = Math.min(minX, left));\n              maxX = Math.max(maxX, right);\n            }\n            startX += charInfo.xAdvance + charInfo.offsetX;\n          }\n        }\n        startY -= lineHeight;\n      }\n      if (firstLine < 0) {\n        min.set(0, 0, 0);\n        max.set(0, 0, 0);\n      } else {\n        min.set(minX, minY, 0);\n        max.set(maxX, maxY, 0);\n      }\n    } else {\n      min.set(0, 0, 0);\n      max.set(0, 0, 0);\n    }\n\n    charFont._getLastIndex() > 0 &&\n      charRenderInfos.sort((a, b) => {\n        return a.texture.instanceId - b.texture.instanceId;\n      });\n\n    this._freeTextChunks();\n\n    if (renderElementCount === 0) {\n      return;\n    }\n\n    const textChunks = this._textChunks;\n    let curTextChunk = new TextChunk();\n    textChunks.push(curTextChunk);\n\n    const chunkMaxVertexCount = this._getChunkManager().maxVertexCount;\n    const curCharRenderInfo = charRenderInfos[0];\n    let curTexture = curCharRenderInfo.texture;\n    curTextChunk.texture = curTexture;\n    let curCharInfos = curTextChunk.charRenderInfos;\n    curCharInfos.push(curCharRenderInfo);\n\n    for (let i = 1; i < renderElementCount; ++i) {\n      const charRenderInfo = charRenderInfos[i];\n      const texture = charRenderInfo.texture;\n      if (curTexture !== texture || curCharInfos.length * 4 + 4 > chunkMaxVertexCount) {\n        this._buildChunk(curTextChunk, curCharInfos.length);\n\n        curTextChunk = new TextChunk();\n        textChunks.push(curTextChunk);\n        curTexture = texture;\n        curTextChunk.texture = texture;\n        curCharInfos = curTextChunk.charRenderInfos;\n      }\n      curCharInfos.push(charRenderInfo);\n    }\n    const charLength = curCharInfos.length;\n    if (charLength > 0) {\n      this._buildChunk(curTextChunk, charLength);\n    }\n    charRenderInfos.length = 0;\n  }\n\n  /**\n   * @internal\n   */\n  protected override _onTransformChanged(bit: TransformModifyFlags): void {\n    super._onTransformChanged(bit);\n    this._setDirtyFlagTrue(DirtyFlag.WorldPosition | DirtyFlag.WorldBounds);\n  }\n\n  private _isTextNoVisible(): boolean {\n    return (\n      this._text === \"\" ||\n      this._fontSize === 0 ||\n      (this.enableWrapping && this.width <= 0) ||\n      (this.overflowMode === OverflowMode.Truncate && this.height <= 0)\n    );\n  }\n\n  private _buildChunk(textChunk: TextChunk, count: number): SubPrimitiveChunk {\n    const { r, g, b, a } = this.color;\n    const tempIndices = CharRenderInfo.triangles;\n    const tempIndicesLength = tempIndices.length;\n    const subChunk = (textChunk.subChunk = this._getChunkManager().allocateSubChunk(count * 4));\n    const vertices = subChunk.chunk.vertices;\n    const indices = (subChunk.indices = []);\n    const charRenderInfos = textChunk.charRenderInfos;\n    for (let i = 0, ii = 0, io = 0, vo = subChunk.vertexArea.start + 3; i < count; ++i, io += 4) {\n      const charRenderInfo = charRenderInfos[i];\n      charRenderInfo.indexInChunk = i;\n\n      // Set indices\n      for (let j = 0; j < tempIndicesLength; ++j) {\n        indices[ii++] = tempIndices[j] + io;\n      }\n\n      // Set uv and color for vertices\n      for (let j = 0; j < 4; ++j, vo += 9) {\n        const uv = charRenderInfo.uvs[j];\n        uv.copyToArray(vertices, vo);\n        vertices[vo + 2] = r;\n        vertices[vo + 3] = g;\n        vertices[vo + 4] = b;\n        vertices[vo + 5] = a;\n      }\n    }\n\n    return subChunk;\n  }\n\n  private _freeTextChunks(): void {\n    const textChunks = this._textChunks;\n    const charRenderInfoPool = this.engine._charRenderInfoPool;\n    const manager = this._getChunkManager();\n    for (let i = 0, n = textChunks.length; i < n; ++i) {\n      const textChunk = textChunks[i];\n      const { charRenderInfos } = textChunk;\n      for (let j = 0, m = charRenderInfos.length; j < m; ++j) {\n        charRenderInfoPool.return(charRenderInfos[j]);\n      }\n      charRenderInfos.length = 0;\n      manager.freeSubChunk(textChunk.subChunk);\n      textChunk.subChunk = null;\n      textChunk.texture = null;\n    }\n    textChunks.length = 0;\n  }\n\n  @ignoreClone\n  private _onColorChanged(): void {\n    this._setDirtyFlagTrue(DirtyFlag.Color);\n  }\n}\n\nclass TextChunk {\n  charRenderInfos = new Array<CharRenderInfo>();\n  subChunk: SubPrimitiveChunk;\n  texture: Texture2D;\n}\n\nenum DirtyFlag {\n  SubFont = 0x1,\n  LocalPositionBounds = 0x2,\n  WorldPosition = 0x4,\n  WorldBounds = 0x8,\n  Color = 0x10,\n\n  Position = LocalPositionBounds | WorldPosition | WorldBounds,\n  Font = SubFont | Position\n}\n","/**\n * Buffer usage.\n */\nexport enum BufferUsage {\n  /** The buffer content are intended to be specified once, and used many times */\n  Static,\n  /** The buffer contents are intended to be respecified repeatedly, and used many times */\n  Dynamic,\n  /** The buffer contents are intended to be specified once, and used at most a few times */\n  Stream\n}\n","/**\n * Define update strategy when call bufferData/bufferSubData func.\n */\nexport enum SetDataOptions {\n  /** Can overwrite part of used buffer data and ensure correct rendering */\n  None,\n  /** Discard old buffer and create a new buffer, and won't affect the previous rendering */\n  Discard\n  ///** Need to ensure that the buffer data will not be overwritten, and won't interrupting rendering if setData immediately */\n  //NoOverwrite\n}\n","import { GraphicsResource } from \"../asset/GraphicsResource\";\nimport { TypedArray } from \"../base\";\nimport { Engine } from \"../Engine\";\nimport { IPlatformBuffer } from \"../renderingHardwareInterface\";\nimport { UpdateFlagManager } from \"../UpdateFlagManager\";\nimport { BufferBindFlag } from \"./enums/BufferBindFlag\";\nimport { BufferUsage } from \"./enums/BufferUsage\";\nimport { SetDataOptions } from \"./enums/SetDataOptions\";\n\n/**\n * Buffer.\n */\nexport class Buffer extends GraphicsResource {\n  /** @internal */\n  _dataUpdateManager: UpdateFlagManager = new UpdateFlagManager();\n\n  private _type: BufferBindFlag;\n  private _byteLength: number;\n  private _bufferUsage: BufferUsage;\n  private _platformBuffer: IPlatformBuffer;\n  private _readable: boolean;\n  private _data: Uint8Array;\n\n  /**\n   * Buffer binding flag.\n   */\n  get type(): BufferBindFlag {\n    return this._type;\n  }\n\n  /**\n   * Byte length.\n   */\n  get byteLength(): number {\n    return this._byteLength;\n  }\n\n  /**\n   * Buffer usage.\n   */\n  get bufferUsage(): BufferUsage {\n    return this._bufferUsage;\n  }\n\n  /**\n   * If buffer is readable.\n   */\n  get readable(): boolean {\n    return this._readable;\n  }\n\n  /**\n   * Buffer data cache.\n   *\n   * @remarks\n   * Buffer must be readable.\n   * If the data you get is modified, must call `setData()` to update buffer to GPU.\n   */\n  get data(): Uint8Array {\n    if (this._readable) {\n      return this._data;\n    } else {\n      throw \"Buffer is not readable.\";\n    }\n  }\n\n  /**\n   * Create Buffer.\n   * @param engine - Engine\n   * @param type - Buffer binding flag\n   * @param byteLength - Byte length\n   * @param bufferUsage - Buffer usage\n   * @param readable - If buffer is readable\n   */\n  constructor(engine: Engine, type: BufferBindFlag, byteLength: number, bufferUsage?: BufferUsage, readable?: boolean);\n\n  /**\n   * Create Buffer.\n   * @param engine - Engine\n   * @param type - Buffer binding flag\n   * @param data - Buffer data, if `readable` is true, the`data` property will store a copy of this\n   * @param bufferUsage - Buffer usage\n   * @param readable - If buffer is readable\n   */\n  constructor(\n    engine: Engine,\n    type: BufferBindFlag,\n    data: ArrayBuffer | ArrayBufferView,\n    bufferUsage?: BufferUsage,\n    readable?: boolean\n  );\n\n  constructor(\n    engine: Engine,\n    type: BufferBindFlag,\n    byteLengthOrData: number | ArrayBuffer | ArrayBufferView,\n    bufferUsage: BufferUsage = BufferUsage.Static,\n    readable: boolean = false\n  ) {\n    super(engine);\n    this._engine = engine;\n    this._type = type;\n    this._bufferUsage = bufferUsage;\n    this._readable = readable;\n\n    if (typeof byteLengthOrData === \"number\") {\n      this._byteLength = byteLengthOrData;\n      this._platformBuffer = engine._hardwareRenderer.createPlatformBuffer(type, byteLengthOrData, bufferUsage);\n      if (readable) {\n        this._data = new Uint8Array(byteLengthOrData);\n      }\n    } else {\n      const data = byteLengthOrData;\n      const byteLength = data.byteLength;\n      this._byteLength = byteLength;\n      this._platformBuffer = engine._hardwareRenderer.createPlatformBuffer(type, byteLength, bufferUsage, data);\n      if (readable) {\n        const buffer =\n          data.constructor === ArrayBuffer\n            ? data.slice(0)\n            : (<ArrayBufferView>data).buffer.slice(\n                (<ArrayBufferView>data).byteOffset,\n                (<ArrayBufferView>data).byteOffset + byteLength\n              );\n        this._data = new Uint8Array(buffer);\n      }\n    }\n  }\n\n  /**\n   * Bind buffer.\n   */\n  bind(): void {\n    this._platformBuffer.bind();\n  }\n\n  /**\n   * Set buffer data.\n   * @param data - Input buffer data\n   */\n  setData(data: ArrayBuffer | ArrayBufferView): void;\n\n  /**\n   * Set buffer data.\n   * @param data - Input buffer data\n   * @param bufferByteOffset - buffer byte offset\n   */\n  setData(data: ArrayBuffer | ArrayBufferView, bufferByteOffset: number): void;\n\n  /**\n   * Set buffer data.\n   * @param data - Input buffer data\n   * @param bufferByteOffset - Buffer byte offset\n   * @param dataOffset - Buffer byte offset\n   * @param dataLength - Data length\n   */\n  setData(data: ArrayBuffer | ArrayBufferView, bufferByteOffset: number, dataOffset: number, dataLength?: number): void;\n\n  /**\n   * Set buffer data.\n   * @param data - Input buffer data\n   * @param bufferByteOffset - Buffer byte offset\n   * @param dataOffset - Buffer byte offset\n   * @param dataLength - Data length\n   * @param options - Update strategy: None/Discard/NoOverwrite\n   */\n  setData(\n    data: ArrayBuffer | ArrayBufferView,\n    bufferByteOffset: number,\n    dataOffset: number,\n    dataLength: number,\n    options: SetDataOptions\n  ): void;\n\n  setData(\n    data: ArrayBuffer | ArrayBufferView,\n    bufferByteOffset: number = 0,\n    dataOffset: number = 0,\n    dataLength?: number,\n    options: SetDataOptions = SetDataOptions.None\n  ): void {\n    this._platformBuffer.setData(this._byteLength, data, bufferByteOffset, dataOffset, dataLength, options);\n\n    if (this._readable) {\n      const arrayBuffer = data.constructor === ArrayBuffer ? data : (<ArrayBufferView>data).buffer;\n\n      if (this._data.buffer !== arrayBuffer) {\n        const byteSize = (<TypedArray>data).BYTES_PER_ELEMENT || 1; // TypeArray is BYTES_PER_ELEMENT, unTypeArray is 1\n        const dataByteLength = dataLength ? byteSize * dataLength : data.byteLength;\n        const isArrayBufferView = (<ArrayBufferView>data).byteOffset !== undefined;\n        const byteOffset = isArrayBufferView ? (<ArrayBufferView>data).byteOffset + dataOffset * byteSize : dataOffset;\n        const srcData = new Uint8Array(arrayBuffer, byteOffset, dataByteLength);\n        this._data.set(srcData, bufferByteOffset);\n      }\n    }\n    this._isContentLost = false;\n    this._dataUpdateManager.dispatch();\n  }\n\n  /**\n   * Get buffer data.\n   * @param data - Output buffer data\n   */\n  getData(data: ArrayBufferView): void;\n\n  /**\n   * Get buffer data.\n   * @param data - Output buffer data\n   * @param bufferByteOffset - Buffer byte offset\n   */\n  getData(data: ArrayBufferView, bufferByteOffset: number): void;\n\n  /**\n   * Get buffer data.\n   * @param data - Output buffer data\n   * @param bufferByteOffset - Buffer byte offset\n   * @param dataOffset - Output data offset\n   * @param dataLength - Output data length\n   */\n  getData(data: ArrayBufferView, bufferByteOffset: number, dataOffset: number, dataLength: number): void;\n\n  getData(data: ArrayBufferView, bufferByteOffset: number = 0, dataOffset: number = 0, dataLength?: number): void {\n    this._platformBuffer.getData(data, bufferByteOffset, dataOffset, dataLength);\n  }\n\n  /**\n   * Mark buffer as readable, the `data` property will be not accessible anymore.\n   */\n  markAsUnreadable(): void {\n    this._data = null;\n    this._readable = false;\n  }\n\n  override _rebuild(): void {\n    const platformBuffer = this._engine._hardwareRenderer.createPlatformBuffer(\n      this._type,\n      this._byteLength,\n      this._bufferUsage\n    );\n    this._platformBuffer = platformBuffer;\n  }\n\n  /**\n   * @internal\n   */\n  protected override _onDestroy() {\n    super._onDestroy();\n    this._platformBuffer.destroy();\n  }\n}\n","/**\n * Index format.\n */\nexport enum IndexFormat {\n  /** 8 bit */\n  UInt8,\n  /** 16 bit */\n  UInt16,\n  /** 32 bit */\n  UInt32\n}\n","/**\n * Vertex element format.\n */\nexport enum VertexElementFormat {\n  /** 32-bit float */\n  Float,\n  /** Two-dimensional 32-bit float */\n  Vector2,\n  /** Three-dimensional 32-bit float */\n  Vector3,\n  /** Four-dimensional 32-bit float */\n  Vector4,\n  /** Four-dimensional 8-bit integer,range is [-128,127] */\n  Byte4,\n  /** Four-dimensional 8-bit Unsigned integer, range is [0,255] */\n  UByte4,\n  /** Four-dimensional 8-bit Normalized integer, range is [-1,1] */\n  NormalizedByte4,\n  /** Four-dimensional 8-bit Normalized unsigned integer, range is [0,1] */\n  NormalizedUByte4,\n  /** Two-dimensional 16-bit integer, range is[-32768, 32767] */\n  Short2,\n  /** Two-dimensional 16-bit Unsigned integer, range is [0, 65535] */\n  UShort2,\n  /** Two-dimensional 16-bit Unsigned integer, range is [-1, 1] */\n  NormalizedShort2,\n  /** Two-dimensional 16-bit Normalized unsigned integer, range is [0, 1] */\n  NormalizedUShort2,\n  /** Four-dimensional 16-bit integer, range is [-32768, 32767] */\n  Short4,\n  /** Four-dimensional 16-bit Unsigned integer, range is [0, 65535] */\n  UShort4,\n  /** Four-dimensional 16-bit Normalized integer, range is[-1, 1] */\n  NormalizedShort4,\n  /** Four-dimensional 16-bit Normalized unsigned integer, range is [0, 1] */\n  NormalizedUShort4\n}\n","import { DataType } from \"../base/Constant\";\nimport { IndexFormat } from \"./enums/IndexFormat\";\nimport { VertexElementFormat } from \"./enums/VertexElementFormat\";\n\nexport interface ElementInfo {\n  size: number;\n  type: DataType;\n  normalized: boolean;\n  normalizedScaleFactor: number;\n}\n\nexport class BufferUtil {\n  static _getGLIndexType(indexFormat: IndexFormat): DataType {\n    switch (indexFormat) {\n      case IndexFormat.UInt8:\n        return DataType.UNSIGNED_BYTE;\n      case IndexFormat.UInt16:\n        return DataType.UNSIGNED_SHORT;\n      case IndexFormat.UInt32:\n        return DataType.UNSIGNED_INT;\n    }\n  }\n\n  static _getGLIndexByteCount(indexFormat: IndexFormat): number {\n    switch (indexFormat) {\n      case IndexFormat.UInt8:\n        return 1;\n      case IndexFormat.UInt16:\n        return 2;\n      case IndexFormat.UInt32:\n        return 4;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _getElementInfo(format: VertexElementFormat): ElementInfo {\n    let size: number;\n    let type: DataType;\n    let normalized: boolean = false;\n    let normalizedScaleFactor: number;\n\n    switch (format) {\n      case VertexElementFormat.Float:\n        size = 1;\n        type = DataType.FLOAT;\n        break;\n      case VertexElementFormat.Vector2:\n        size = 2;\n        type = DataType.FLOAT;\n        break;\n      case VertexElementFormat.Vector3:\n        size = 3;\n        type = DataType.FLOAT;\n        break;\n      case VertexElementFormat.Vector4:\n        size = 4;\n        type = DataType.FLOAT;\n        break;\n      case VertexElementFormat.Byte4:\n        size = 4;\n        type = DataType.BYTE;\n        break;\n      case VertexElementFormat.UByte4:\n        size = 4;\n        type = DataType.UNSIGNED_BYTE;\n        break;\n      case VertexElementFormat.NormalizedByte4:\n        size = 4;\n        type = DataType.BYTE;\n        normalized = true;\n        normalizedScaleFactor = 1 / 127;\n        break;\n      case VertexElementFormat.NormalizedUByte4:\n        size = 4;\n        type = DataType.UNSIGNED_BYTE;\n        normalized = true;\n        normalizedScaleFactor = 1 / 255;\n        break;\n      case VertexElementFormat.Short2:\n        size = 2;\n        type = DataType.SHORT;\n        break;\n      case VertexElementFormat.UShort2:\n        size = 2;\n        type = DataType.UNSIGNED_SHORT;\n        break;\n      case VertexElementFormat.NormalizedShort2:\n        size = 2;\n        type = DataType.SHORT;\n        normalized = true;\n        normalizedScaleFactor = 1 / 32767;\n        break;\n      case VertexElementFormat.NormalizedUShort2:\n        size = 2;\n        type = DataType.UNSIGNED_SHORT;\n        normalized = true;\n        normalizedScaleFactor = 1 / 65535;\n        break;\n      case VertexElementFormat.Short4:\n        size = 4;\n        type = DataType.SHORT;\n        break;\n      case VertexElementFormat.UShort4:\n        size = 4;\n        type = DataType.UNSIGNED_SHORT;\n        break;\n      case VertexElementFormat.NormalizedShort4:\n        size = 4;\n        type = DataType.SHORT;\n        normalized = true;\n        normalizedScaleFactor = 1 / 32767;\n        break;\n      case VertexElementFormat.NormalizedUShort4:\n        size = 4;\n        type = DataType.UNSIGNED_SHORT;\n        normalized = true;\n        normalizedScaleFactor = 1 / 65535;\n        break;\n      default:\n        break;\n    }\n    return { size, type, normalized, normalizedScaleFactor };\n  }\n}\n","import { BufferUtil, ElementInfo } from \"./BufferUtil\";\nimport { VertexElementFormat } from \"./enums/VertexElementFormat\";\n\n/**\n * Vertex element.\n */\nexport class VertexElement {\n  _formatMetaInfo: ElementInfo;\n\n  private _attributeName: string;\n  private _offset: number;\n  private _format: VertexElementFormat;\n  private _bindingIndex: number;\n  private _instanceStepRate: number;\n\n  /**\n   * Vertex attribute.\n   */\n  get attribute(): string {\n    return this._attributeName;\n  }\n\n  /**\n   * Vertex data byte offset.\n   */\n  get offset(): number {\n    return this._offset;\n  }\n\n  set offset(value: number) {\n    this._offset = value;\n  }\n\n  /**\n   * Vertex data format.\n   */\n  get format(): VertexElementFormat {\n    return this._format;\n  }\n\n  /**\n   * Vertex buffer binding index.\n   */\n  get bindingIndex(): number {\n    return this._bindingIndex;\n  }\n\n  set bindingIndex(value: number) {\n    this._bindingIndex = value;\n  }\n\n  /**\n   * Instance cadence, the number of instances drawn for each vertex in the buffer, non-instance elements must be 0.\n   */\n  get instanceStepRate(): number {\n    return this._instanceStepRate;\n  }\n\n  /**\n   * Create vertex element.\n   * @param attribute - Input attribute\n   * @param offset - Vertex data byte offset\n   * @param format - Vertex data format\n   * @param bindingIndex - Vertex buffer binding index\n   * @param instanceStepRate - Instance cadence, the number of instances drawn for each vertex in the buffer, non-instance elements must be 0.\n   */\n  constructor(\n    attribute: string,\n    offset: number,\n    format: VertexElementFormat,\n    bindingIndex: number,\n    instanceStepRate: number = 0\n  ) {\n    this._attributeName = attribute;\n    this._offset = offset;\n    this._format = format;\n    this._bindingIndex = bindingIndex;\n    this._formatMetaInfo = BufferUtil._getElementInfo(this.format);\n    this._instanceStepRate = Math.floor(instanceStepRate);\n  }\n\n  /**\n   * @deprecated use `attributeName` instead\n   */\n  get semantic(): string {\n    return this.attribute;\n  }\n}\n","/**\n * Buffer binding flag.\n */\nexport enum BufferBindFlag {\n  /** Vertex buffer binding flag */\n  VertexBuffer,\n  /** Index buffer binding flag */\n  IndexBuffer\n}\n","/**\n * Mesh topology.\n */\nexport enum MeshTopology {\n  /** Draws a single dot */\n  Points = 0,\n  /** Draws a line between a pair of vertices */\n  Lines = 1,\n  /** Draws a straight line to the next vertex, and connects the last vertex back to the first */\n  LineLoop = 2,\n  /** Draws a straight line to the next vertex. */\n  LineStrip = 3,\n  /** Draws a triangle for a group of three vertices */\n  Triangles = 4,\n  /** Draws a triangle strip */\n  TriangleStrip = 5,\n  /** Draws a triangle fan */\n  TriangleFan = 6\n}\n","/**\n * Alpha blend mode.\n */\nexport enum BlendMode {\n  /** SRC ALPHA * SRC + (1 - SRC ALPHA) * DEST */\n  Normal,\n  /** SRC ALPHA * SRC + ONE * DEST */\n  Additive\n}\n","/**\n * Set which face for render.\n */\nexport enum RenderFace {\n  /** Render front face. */\n  Front,\n  /** Render back face. */\n  Back,\n  /** Render double face. */\n  Double\n}\n","import { IClone } from \"@galacean/engine-design\";\nimport { Engine } from \"../Engine\";\nimport { ReferResource } from \"../asset/ReferResource\";\nimport { CloneManager } from \"../clone/CloneManager\";\nimport { Shader } from \"../shader/Shader\";\nimport { ShaderData } from \"../shader/ShaderData\";\nimport { ShaderDataGroup } from \"../shader/enums/ShaderDataGroup\";\nimport { RenderState } from \"../shader/state/RenderState\";\n\n/**\n * Material.\n */\nexport class Material extends ReferResource implements IClone {\n  /** Name. */\n  name: string;\n\n  /** @internal */\n  _shader: Shader;\n  /** @internal */\n  _renderStates: RenderState[] = []; // todo: later will as a part of shaderData when shader effect frame is OK, that is more powerful and flexible.\n\n  private _shaderData: ShaderData = new ShaderData(ShaderDataGroup.Material);\n\n  /**\n   *  Shader data.\n   */\n  get shaderData(): ShaderData {\n    return this._shaderData;\n  }\n\n  /**\n   * Shader used by the material.\n   */\n  get shader(): Shader {\n    return this._shader;\n  }\n\n  set shader(value: Shader) {\n    const refCount = this._getReferCount();\n    if (refCount > 0) {\n      this._shader?._addReferCount(-refCount);\n      value._addReferCount(refCount);\n    }\n\n    this._shader = value;\n\n    const renderStates = this._renderStates;\n    const lastStatesCount = renderStates.length;\n\n    let maxPassCount = 0;\n    const subShaders = value.subShaders;\n    for (let i = 0; i < subShaders.length; i++) {\n      maxPassCount = Math.max(subShaders[i].passes.length, maxPassCount);\n    }\n\n    if (lastStatesCount < maxPassCount) {\n      for (let i = lastStatesCount; i < maxPassCount; i++) {\n        renderStates.push(new RenderState());\n      }\n    } else {\n      renderStates.length = maxPassCount;\n    }\n  }\n\n  /**\n   * First Render state.\n   */\n  get renderState(): RenderState {\n    return this._renderStates[0];\n  }\n\n  /**\n   * Render states.\n   */\n  get renderStates(): Readonly<RenderState[]> {\n    return this._renderStates;\n  }\n\n  /**\n   * Create a material instance.\n   * @param engine - Engine to which the material belongs\n   * @param shader - Shader used by the material\n   */\n  constructor(engine: Engine, shader: Shader) {\n    super(engine);\n    this.shader = shader;\n  }\n\n  /**\n   * Clone and return the instance.\n   */\n  clone(): Material {\n    const dest = new Material(this._engine, this.shader);\n    this.cloneTo(dest);\n    return dest;\n  }\n\n  /**\n   * Clone to the target material.\n   * @param target - target material\n   */\n  cloneTo(target: Material): void {\n    target.shader = this.shader;\n    this.shaderData.cloneTo(target.shaderData);\n    CloneManager.deepCloneObject(this.renderStates, target.renderStates, new Map<Object, Object>());\n  }\n\n  override _addReferCount(value: number): void {\n    if (this._destroyed) return;\n    super._addReferCount(value);\n    this.shaderData._addReferCount(value);\n    this._shader._addReferCount(value);\n  }\n\n  /**\n   * @override\n   */\n  protected override _onDestroy(): void {\n    super._onDestroy();\n    this._shader = null;\n    this._shaderData = null;\n    this._renderStates.length = 0;\n    this._renderStates = null;\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { BlendFactor, BlendOperation, CullMode, Shader, ShaderProperty } from \"../shader\";\nimport { RenderQueueType } from \"../shader/enums/RenderQueueType\";\nimport { ShaderMacro } from \"../shader/ShaderMacro\";\nimport { RenderState } from \"../shader/state/RenderState\";\nimport { BlendMode } from \"./enums/BlendMode\";\nimport { RenderFace } from \"./enums/RenderFace\";\nimport { Material } from \"./Material\";\n\nexport class BaseMaterial extends Material {\n  /** @internal */\n  static _shadowCasterRenderQueueProp = ShaderProperty.getByName(\"material_ShadowCasterRenderQueue\");\n\n  protected static _baseTextureMacro: ShaderMacro = ShaderMacro.getByName(\"MATERIAL_HAS_BASETEXTURE\");\n  protected static _normalTextureMacro: ShaderMacro = ShaderMacro.getByName(\"MATERIAL_HAS_NORMALTEXTURE\");\n  protected static _emissiveTextureMacro: ShaderMacro = ShaderMacro.getByName(\"MATERIAL_HAS_EMISSIVETEXTURE\");\n  protected static _transparentMacro: ShaderMacro = ShaderMacro.getByName(\"MATERIAL_IS_TRANSPARENT\");\n\n  protected static _baseColorProp: ShaderProperty = ShaderProperty.getByName(\"material_BaseColor\");\n  protected static _baseTextureProp: ShaderProperty = ShaderProperty.getByName(\"material_BaseTexture\");\n  protected static _tilingOffsetProp: ShaderProperty = ShaderProperty.getByName(\"material_TilingOffset\");\n  protected static _normalTextureProp: ShaderProperty = ShaderProperty.getByName(\"material_NormalTexture\");\n  protected static _normalIntensityProp: ShaderProperty = ShaderProperty.getByName(\"material_NormalIntensity\");\n  protected static _emissiveColorProp: ShaderProperty = ShaderProperty.getByName(\"material_EmissiveColor\");\n  protected static _emissiveTextureProp: ShaderProperty = ShaderProperty.getByName(\"material_EmissiveTexture\");\n\n  private static _alphaCutoffProp: ShaderProperty = ShaderProperty.getByName(\"material_AlphaCutoff\");\n  private static _alphaCutoffMacro: ShaderMacro = ShaderMacro.getByName(\"MATERIAL_IS_ALPHA_CUTOFF\");\n\n  private _renderFace: RenderFace = RenderFace.Front;\n  private _isTransparent: boolean = false;\n  private _blendMode: BlendMode = BlendMode.Normal;\n\n  /**\n   * Shader used by the material.\n   */\n  override get shader(): Shader {\n    return this._shader;\n  }\n\n  override set shader(value: Shader) {\n    const refCount = this._getReferCount();\n    if (refCount > 0) {\n      this._shader?._addReferCount(-refCount);\n      value._addReferCount(refCount);\n    }\n\n    this._shader = value;\n    const renderStates = this._renderStates;\n    const lastStatesCount = renderStates.length;\n\n    let maxPassCount = 0;\n    const subShaders = value.subShaders;\n    for (let i = 0; i < subShaders.length; i++) {\n      maxPassCount = Math.max(subShaders[i].passes.length, maxPassCount);\n    }\n\n    if (lastStatesCount < maxPassCount) {\n      for (let i = lastStatesCount; i < maxPassCount; i++) {\n        renderStates.push(new RenderState());\n        this.setBlendMode(i, BlendMode.Normal);\n      }\n    } else {\n      renderStates.length = maxPassCount;\n    }\n  }\n\n  /**\n   * Whether transparent of first shader pass render state.\n   */\n  get isTransparent(): boolean {\n    return this._isTransparent;\n  }\n\n  set isTransparent(value: boolean) {\n    if (value !== this._isTransparent) {\n      this.setIsTransparent(0, value);\n\n      const { shaderData } = this;\n      if (value) {\n        // Use alpha test queue to simulate transparent shadow\n        shaderData.setFloat(BaseMaterial._shadowCasterRenderQueueProp, RenderQueueType.AlphaTest);\n      } else {\n        const alphaCutoff = shaderData.getFloat(BaseMaterial._alphaCutoffProp);\n        if (alphaCutoff) {\n          shaderData.setFloat(BaseMaterial._shadowCasterRenderQueueProp, RenderQueueType.AlphaTest);\n        } else {\n          shaderData.setFloat(BaseMaterial._shadowCasterRenderQueueProp, RenderQueueType.Opaque);\n        }\n      }\n\n      this._isTransparent = value;\n    }\n  }\n\n  /**\n   * Blend mode of first shader pass render state.\n   * @remarks Only take effect when `isTransparent` is `true`.\n   */\n  get blendMode(): BlendMode {\n    return this._blendMode;\n  }\n\n  set blendMode(value: BlendMode) {\n    if (value !== this._blendMode) {\n      this.setBlendMode(0, value);\n      this._blendMode = value;\n    }\n  }\n\n  /**\n   * Alpha cutoff value.\n   * @remarks\n   * Fragments with alpha channel lower than cutoff value will be discarded.\n   * `0` means no fragment will be discarded.\n   */\n  get alphaCutoff(): number {\n    return this.shaderData.getFloat(BaseMaterial._alphaCutoffProp);\n  }\n\n  set alphaCutoff(value: number) {\n    const { shaderData } = this;\n    if (shaderData.getFloat(BaseMaterial._alphaCutoffProp) !== value) {\n      if (value) {\n        shaderData.enableMacro(BaseMaterial._alphaCutoffMacro);\n        shaderData.setFloat(BaseMaterial._shadowCasterRenderQueueProp, RenderQueueType.AlphaTest);\n      } else {\n        shaderData.disableMacro(BaseMaterial._alphaCutoffMacro);\n        if (this._isTransparent) {\n          shaderData.setFloat(BaseMaterial._shadowCasterRenderQueueProp, RenderQueueType.AlphaTest);\n        } else {\n          shaderData.setFloat(BaseMaterial._shadowCasterRenderQueueProp, RenderQueueType.Opaque);\n        }\n      }\n\n      const { renderStates } = this;\n      for (let i = 0, n = renderStates.length; i < n; i++) {\n        const renderState = renderStates[i];\n        if (value > 0) {\n          renderState.renderQueueType = renderState.blendState.targetBlendState.enabled\n            ? RenderQueueType.Transparent\n            : RenderQueueType.AlphaTest;\n        } else {\n          renderState.renderQueueType = renderState.blendState.targetBlendState.enabled\n            ? RenderQueueType.Transparent\n            : RenderQueueType.Opaque;\n        }\n      }\n      shaderData.setFloat(BaseMaterial._alphaCutoffProp, value);\n    }\n  }\n\n  /**\n   * Face for render of first shader pass render state.\n   */\n  get renderFace(): RenderFace {\n    return this._renderFace;\n  }\n\n  set renderFace(value: RenderFace) {\n    if (value !== this._renderFace) {\n      this.setRenderFace(0, value);\n      this._renderFace = value;\n    }\n  }\n\n  /**\n   * Create a BaseMaterial instance.\n   * @param engine - Engine to which the material belongs\n   * @param shader - Shader used by the material\n   */\n  constructor(engine: Engine, shader: Shader) {\n    super(engine, shader);\n\n    const { shaderData } = this;\n    shaderData.setFloat(BaseMaterial._alphaCutoffProp, 0);\n    shaderData.setFloat(BaseMaterial._shadowCasterRenderQueueProp, RenderQueueType.Opaque);\n  }\n\n  /**\n   * Set if is transparent of the shader pass render state.\n   * @param passIndex - Shader pass index\n   * @param isTransparent - If is transparent\n   */\n  setIsTransparent(passIndex: number, isTransparent: boolean): void {\n    const { renderStates } = this;\n    if (renderStates.length < passIndex) {\n      throw \"Pass should less than pass count.\";\n    }\n    const renderState = renderStates[passIndex];\n    const { shaderData } = this;\n\n    if (isTransparent) {\n      renderState.blendState.targetBlendState.enabled = true;\n      renderState.depthState.writeEnabled = false;\n      renderState.renderQueueType = RenderQueueType.Transparent;\n      shaderData.enableMacro(BaseMaterial._transparentMacro);\n    } else {\n      renderState.blendState.targetBlendState.enabled = false;\n      renderState.depthState.writeEnabled = true;\n\n      renderState.renderQueueType = shaderData.getFloat(BaseMaterial._alphaCutoffProp)\n        ? RenderQueueType.AlphaTest\n        : RenderQueueType.Opaque;\n      shaderData.disableMacro(BaseMaterial._transparentMacro);\n    }\n  }\n\n  /**\n   * Set the blend mode of shader pass render state.\n   * @param passIndex - Shader pass index\n   * @param blendMode - Blend mode\n   */\n  setBlendMode(passIndex: number, blendMode: BlendMode): void {\n    const { renderStates } = this;\n    if (renderStates.length < passIndex) {\n      throw \"Pass should less than pass count.\";\n    }\n    const { targetBlendState: target } = renderStates[passIndex].blendState;\n\n    switch (blendMode) {\n      case BlendMode.Normal:\n        target.sourceColorBlendFactor = BlendFactor.SourceAlpha;\n        target.destinationColorBlendFactor = BlendFactor.OneMinusSourceAlpha;\n        target.sourceAlphaBlendFactor = BlendFactor.One;\n        target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n        target.colorBlendOperation = target.alphaBlendOperation = BlendOperation.Add;\n        break;\n      case BlendMode.Additive:\n        target.sourceColorBlendFactor = BlendFactor.SourceAlpha;\n        target.destinationColorBlendFactor = BlendFactor.One;\n        target.sourceAlphaBlendFactor = BlendFactor.One;\n        target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n        target.colorBlendOperation = target.alphaBlendOperation = BlendOperation.Add;\n        break;\n    }\n  }\n\n  /**\n   * Set the render face of shader pass render state.\n   * @param passIndex - Shader pass index\n   * @param renderFace - Render face\n   */\n  setRenderFace(passIndex: number, renderFace: RenderFace): void {\n    const { renderStates } = this;\n    if (renderStates.length < passIndex) {\n      throw \"Pass should less than pass count.\";\n    }\n\n    switch (renderFace) {\n      case RenderFace.Front:\n        renderStates[passIndex].rasterState.cullMode = CullMode.Back;\n        break;\n      case RenderFace.Back:\n        renderStates[passIndex].rasterState.cullMode = CullMode.Front;\n        break;\n      case RenderFace.Double:\n        renderStates[passIndex].rasterState.cullMode = CullMode.Off;\n        break;\n    }\n  }\n\n  /**\n   * Clone and return the instance.\n   */\n  override clone(): BaseMaterial {\n    const dest = new BaseMaterial(this._engine, this.shader);\n    this.cloneTo(dest);\n    return dest;\n  }\n\n  /**\n   * Clone to the target material.\n   * @param target - target material\n   */\n  override cloneTo(target: BaseMaterial): void {\n    super.cloneTo(target);\n    target._renderFace = this._renderFace;\n    target._isTransparent = this._isTransparent;\n    target._blendMode = this._blendMode;\n  }\n}\n","import { Color, Vector4 } from \"@galacean/engine-math\";\nimport { Engine } from \"../Engine\";\nimport { Shader } from \"../shader/Shader\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { BaseMaterial } from \"./BaseMaterial\";\n\n/**\n * Blinn-phong Material.\n */\nexport class BlinnPhongMaterial extends BaseMaterial {\n  private static _specularColorProp = ShaderProperty.getByName(\"material_SpecularColor\");\n  private static _shininessProp = ShaderProperty.getByName(\"material_Shininess\");\n  private static _specularTextureProp = ShaderProperty.getByName(\"material_SpecularTexture\");\n\n  /**\n   * Base color.\n   */\n  get baseColor(): Color {\n    return this.shaderData.getColor(BlinnPhongMaterial._baseColorProp);\n  }\n\n  set baseColor(value: Color) {\n    const baseColor = this.shaderData.getColor(BlinnPhongMaterial._baseColorProp);\n    if (value !== baseColor) {\n      baseColor.copyFrom(value);\n    }\n  }\n\n  /**\n   * Base texture.\n   */\n  get baseTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(BlinnPhongMaterial._baseTextureProp);\n  }\n\n  set baseTexture(value: Texture2D) {\n    this.shaderData.setTexture(BlinnPhongMaterial._baseTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(BlinnPhongMaterial._baseTextureMacro);\n    } else {\n      this.shaderData.disableMacro(BlinnPhongMaterial._baseTextureMacro);\n    }\n  }\n\n  /**\n   * Specular color.\n   */\n  get specularColor(): Color {\n    return this.shaderData.getColor(BlinnPhongMaterial._specularColorProp);\n  }\n\n  set specularColor(value: Color) {\n    const specularColor = this.shaderData.getColor(BlinnPhongMaterial._specularColorProp);\n    if (value !== specularColor) {\n      specularColor.copyFrom(value);\n    }\n  }\n\n  /**\n   * Specular texture.\n   */\n  get specularTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(BlinnPhongMaterial._specularTextureProp);\n  }\n\n  set specularTexture(value: Texture2D) {\n    this.shaderData.setTexture(BlinnPhongMaterial._specularTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"MATERIAL_HAS_SPECULAR_TEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"MATERIAL_HAS_SPECULAR_TEXTURE\");\n    }\n  }\n\n  /**\n   * Emissive color.\n   */\n  get emissiveColor(): Color {\n    return this.shaderData.getColor(BlinnPhongMaterial._emissiveColorProp);\n  }\n\n  set emissiveColor(value: Color) {\n    const emissiveColor = this.shaderData.getColor(BlinnPhongMaterial._emissiveColorProp);\n    if (value !== emissiveColor) {\n      emissiveColor.copyFrom(value);\n    }\n  }\n\n  /**\n   * Emissive texture.\n   */\n  get emissiveTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(BlinnPhongMaterial._emissiveTextureProp);\n  }\n\n  set emissiveTexture(value: Texture2D) {\n    this.shaderData.setTexture(BlinnPhongMaterial._emissiveTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(BlinnPhongMaterial._emissiveTextureMacro);\n    } else {\n      this.shaderData.disableMacro(BlinnPhongMaterial._emissiveTextureMacro);\n    }\n  }\n\n  /**\n   * Normal texture.\n   */\n  get normalTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(BlinnPhongMaterial._normalTextureProp);\n  }\n\n  set normalTexture(value: Texture2D) {\n    this.shaderData.setTexture(BlinnPhongMaterial._normalTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(BlinnPhongMaterial._normalTextureMacro);\n    } else {\n      this.shaderData.disableMacro(BlinnPhongMaterial._normalTextureMacro);\n    }\n  }\n\n  /**\n   * Normal texture intensity.\n   */\n  get normalIntensity(): number {\n    return this.shaderData.getFloat(BlinnPhongMaterial._normalIntensityProp);\n  }\n\n  set normalIntensity(value: number) {\n    this.shaderData.setFloat(BlinnPhongMaterial._normalIntensityProp, value);\n  }\n\n  /**\n   * Set the specular reflection coefficient, the larger the value, the more convergent the specular reflection effect.\n   */\n  get shininess(): number {\n    return this.shaderData.getFloat(BlinnPhongMaterial._shininessProp);\n  }\n\n  set shininess(value: number) {\n    this.shaderData.setFloat(BlinnPhongMaterial._shininessProp, Math.max(value, 1e-4));\n  }\n\n  /**\n   * Tiling and offset of main textures.\n   */\n  get tilingOffset(): Vector4 {\n    return this.shaderData.getVector4(BlinnPhongMaterial._tilingOffsetProp);\n  }\n\n  set tilingOffset(value: Vector4) {\n    const tilingOffset = this.shaderData.getVector4(BlinnPhongMaterial._tilingOffsetProp);\n    if (value !== tilingOffset) {\n      tilingOffset.copyFrom(value);\n    }\n  }\n\n  /**\n   * Create a BlinnPhong material instance.\n   * @param engine - Engine to which the material belongs\n   */\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"blinn-phong\"));\n\n    const shaderData = this.shaderData;\n\n    shaderData.enableMacro(\"MATERIAL_NEED_WORLD_POS\");\n    shaderData.enableMacro(\"MATERIAL_NEED_TILING_OFFSET\");\n\n    shaderData.setColor(BlinnPhongMaterial._baseColorProp, new Color(1, 1, 1, 1));\n    shaderData.setColor(BlinnPhongMaterial._specularColorProp, new Color(1, 1, 1, 1));\n    shaderData.setColor(BlinnPhongMaterial._emissiveColorProp, new Color(0, 0, 0, 1));\n    shaderData.setVector4(BlinnPhongMaterial._tilingOffsetProp, new Vector4(1, 1, 0, 0));\n    shaderData.setFloat(BlinnPhongMaterial._shininessProp, 16);\n    shaderData.setFloat(BlinnPhongMaterial._normalIntensityProp, 1);\n  }\n\n  override clone(): BlinnPhongMaterial {\n    var dest: BlinnPhongMaterial = new BlinnPhongMaterial(this._engine);\n    this.cloneTo(dest);\n    return dest;\n  }\n}\n","/**\n * Texture UV coordinate.\n */\nexport enum TextureCoordinate {\n  UV0 = 0,\n  UV1,\n  UV2,\n  UV3,\n  UV4,\n  UV5,\n  UV6,\n  UV7\n}\n","import { Color, Vector4 } from \"@galacean/engine-math\";\nimport { Logger, ShaderProperty } from \"..\";\nimport { Engine } from \"../Engine\";\nimport { Shader } from \"../shader/Shader\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { BaseMaterial } from \"./BaseMaterial\";\nimport { TextureCoordinate } from \"./enums/TextureCoordinate\";\n\n/**\n * PBR (Physically-Based Rendering) Material.\n */\nexport abstract class PBRBaseMaterial extends BaseMaterial {\n  private static _occlusionTextureIntensityProp = ShaderProperty.getByName(\"material_OcclusionIntensity\");\n  private static _occlusionTextureCoordProp = ShaderProperty.getByName(\"material_OcclusionTextureCoord\");\n  private static _occlusionTextureProp = ShaderProperty.getByName(\"material_OcclusionTexture\");\n\n  private static _clearCoatProp = ShaderProperty.getByName(\"material_ClearCoat\");\n  private static _clearCoatTextureProp = ShaderProperty.getByName(\"material_ClearCoatTexture\");\n  private static _clearCoatRoughnessProp = ShaderProperty.getByName(\"material_ClearCoatRoughness\");\n  private static _clearCoatRoughnessTextureProp = ShaderProperty.getByName(\"material_ClearCoatRoughnessTexture\");\n  private static _clearCoatNormalTextureProp = ShaderProperty.getByName(\"material_ClearCoatNormalTexture\");\n\n  /**\n   * Base color.\n   */\n  get baseColor(): Color {\n    return this.shaderData.getColor(PBRBaseMaterial._baseColorProp);\n  }\n\n  set baseColor(value: Color) {\n    const baseColor = this.shaderData.getColor(PBRBaseMaterial._baseColorProp);\n    if (value !== baseColor) {\n      baseColor.copyFrom(value);\n    }\n  }\n\n  /**\n   * Base texture.\n   */\n  get baseTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRBaseMaterial._baseTextureProp);\n  }\n\n  set baseTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRBaseMaterial._baseTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(PBRBaseMaterial._baseTextureMacro);\n    } else {\n      this.shaderData.disableMacro(PBRBaseMaterial._baseTextureMacro);\n    }\n  }\n\n  /**\n   * Normal texture.\n   */\n  get normalTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRBaseMaterial._normalTextureProp);\n  }\n\n  set normalTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRBaseMaterial._normalTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(PBRBaseMaterial._normalTextureMacro);\n    } else {\n      this.shaderData.disableMacro(PBRBaseMaterial._normalTextureMacro);\n    }\n  }\n\n  /**\n   * Normal texture intensity.\n   */\n  get normalTextureIntensity(): number {\n    return this.shaderData.getFloat(PBRBaseMaterial._normalIntensityProp);\n  }\n\n  set normalTextureIntensity(value: number) {\n    this.shaderData.setFloat(PBRBaseMaterial._normalIntensityProp, value);\n  }\n\n  /**\n   * Emissive color.\n   */\n  get emissiveColor(): Color {\n    return this.shaderData.getColor(PBRBaseMaterial._emissiveColorProp);\n  }\n\n  set emissiveColor(value: Color) {\n    const emissiveColor = this.shaderData.getColor(PBRBaseMaterial._emissiveColorProp);\n    if (value !== emissiveColor) {\n      emissiveColor.copyFrom(value);\n    }\n  }\n\n  /**\n   * Emissive texture.\n   */\n  get emissiveTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRBaseMaterial._emissiveTextureProp);\n  }\n\n  set emissiveTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRBaseMaterial._emissiveTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(PBRBaseMaterial._emissiveTextureMacro);\n    } else {\n      this.shaderData.disableMacro(PBRBaseMaterial._emissiveTextureMacro);\n    }\n  }\n\n  /**\n   * Occlusion texture.\n   */\n  get occlusionTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRBaseMaterial._occlusionTextureProp);\n  }\n\n  set occlusionTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRBaseMaterial._occlusionTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"MATERIAL_HAS_OCCLUSION_TEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"MATERIAL_HAS_OCCLUSION_TEXTURE\");\n    }\n  }\n\n  /**\n   * Occlusion texture intensity.\n   */\n  get occlusionTextureIntensity(): number {\n    return this.shaderData.getFloat(PBRBaseMaterial._occlusionTextureIntensityProp);\n  }\n\n  set occlusionTextureIntensity(value: number) {\n    this.shaderData.setFloat(PBRBaseMaterial._occlusionTextureIntensityProp, value);\n  }\n\n  /**\n   * Occlusion texture uv coordinate.\n   * @remarks Must be UV0 or UV1.\n   */\n  get occlusionTextureCoord(): TextureCoordinate {\n    return this.shaderData.getFloat(PBRBaseMaterial._occlusionTextureCoordProp);\n  }\n\n  set occlusionTextureCoord(value: TextureCoordinate) {\n    if (value > TextureCoordinate.UV1) {\n      Logger.warn(\"Occlusion texture uv coordinate must be UV0 or UV1.\");\n    }\n    this.shaderData.setFloat(PBRBaseMaterial._occlusionTextureCoordProp, value);\n  }\n\n  /**\n   * Tiling and offset of main textures.\n   */\n  get tilingOffset(): Vector4 {\n    return this.shaderData.getVector4(PBRBaseMaterial._tilingOffsetProp);\n  }\n\n  set tilingOffset(value: Vector4) {\n    const tilingOffset = this.shaderData.getVector4(PBRBaseMaterial._tilingOffsetProp);\n    if (value !== tilingOffset) {\n      tilingOffset.copyFrom(value);\n    }\n  }\n\n  /**\n   * The clearCoat layer intensity, default 0.\n   */\n  get clearCoat(): number {\n    return this.shaderData.getFloat(PBRBaseMaterial._clearCoatProp);\n  }\n\n  set clearCoat(value: number) {\n    if (!!this.shaderData.getFloat(PBRBaseMaterial._clearCoatProp) !== !!value) {\n      if (value === 0) {\n        this.shaderData.disableMacro(\"MATERIAL_ENABLE_CLEAR_COAT\");\n      } else {\n        this.shaderData.enableMacro(\"MATERIAL_ENABLE_CLEAR_COAT\");\n      }\n    }\n    this.shaderData.setFloat(PBRBaseMaterial._clearCoatProp, value);\n  }\n\n  /**\n   * The clearCoat layer intensity texture.\n   */\n  get clearCoatTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRBaseMaterial._clearCoatTextureProp);\n  }\n\n  set clearCoatTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRBaseMaterial._clearCoatTextureProp, value);\n\n    if (value) {\n      this.shaderData.enableMacro(\"MATERIAL_HAS_CLEAR_COAT_TEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"MATERIAL_HAS_CLEAR_COAT_TEXTURE\");\n    }\n  }\n\n  /**\n   * The clearCoat layer roughness, default 0.\n   */\n  get clearCoatRoughness(): number {\n    return this.shaderData.getFloat(PBRBaseMaterial._clearCoatRoughnessProp);\n  }\n\n  set clearCoatRoughness(value: number) {\n    this.shaderData.setFloat(PBRBaseMaterial._clearCoatRoughnessProp, value);\n  }\n\n  /**\n   * The clearCoat layer roughness texture.\n   */\n  get clearCoatRoughnessTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRBaseMaterial._clearCoatRoughnessTextureProp);\n  }\n\n  set clearCoatRoughnessTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRBaseMaterial._clearCoatRoughnessTextureProp, value);\n\n    if (value) {\n      this.shaderData.enableMacro(\"MATERIAL_HAS_CLEAR_COAT_ROUGHNESS_TEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"MATERIAL_HAS_CLEAR_COAT_ROUGHNESS_TEXTURE\");\n    }\n  }\n\n  /**\n   * The clearCoat normal map texture.\n   */\n  get clearCoatNormalTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRBaseMaterial._clearCoatNormalTextureProp);\n  }\n\n  set clearCoatNormalTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRBaseMaterial._clearCoatNormalTextureProp, value);\n\n    if (value) {\n      this.shaderData.enableMacro(\"MATERIAL_HAS_CLEAR_COAT_NORMAL_TEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"MATERIAL_HAS_CLEAR_COAT_NORMAL_TEXTURE\");\n    }\n  }\n\n  /**\n   * Create a pbr base material instance.\n   * @param engine - Engine to which the material belongs\n   * @param shader - Shader used by the material\n   */\n  protected constructor(engine: Engine, shader: Shader) {\n    super(engine, shader);\n\n    const shaderData = this.shaderData;\n\n    shaderData.enableMacro(\"MATERIAL_NEED_WORLD_POS\");\n    shaderData.enableMacro(\"MATERIAL_NEED_TILING_OFFSET\");\n\n    shaderData.setColor(PBRBaseMaterial._baseColorProp, new Color(1, 1, 1, 1));\n    shaderData.setColor(PBRBaseMaterial._emissiveColorProp, new Color(0, 0, 0, 1));\n    shaderData.setVector4(PBRBaseMaterial._tilingOffsetProp, new Vector4(1, 1, 0, 0));\n\n    shaderData.setFloat(PBRBaseMaterial._normalIntensityProp, 1);\n    shaderData.setFloat(PBRBaseMaterial._occlusionTextureIntensityProp, 1);\n    shaderData.setFloat(PBRBaseMaterial._occlusionTextureCoordProp, TextureCoordinate.UV0);\n\n    shaderData.setFloat(PBRBaseMaterial._clearCoatProp, 0);\n    shaderData.setFloat(PBRBaseMaterial._clearCoatRoughnessProp, 0);\n  }\n}\n","import { MathUtil, Vector2, Vector3, Vector4 } from \"@galacean/engine-math\";\nimport { Engine } from \"../Engine\";\nimport { ShaderProperty } from \"../shader\";\nimport { Shader } from \"../shader/Shader\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { PBRBaseMaterial } from \"./PBRBaseMaterial\";\n\n/**\n * PBR (Metallic-Roughness Workflow) Material.\n */\nexport class PBRMaterial extends PBRBaseMaterial {\n  private static _metallicProp = ShaderProperty.getByName(\"material_Metal\");\n  private static _roughnessProp = ShaderProperty.getByName(\"material_Roughness\");\n  private static _roughnessMetallicTextureProp = ShaderProperty.getByName(\"material_RoughnessMetallicTexture\");\n\n  private static _iorProp = ShaderProperty.getByName(\"material_IOR\");\n\n  private static _anisotropyInfoProp = ShaderProperty.getByName(\"material_AnisotropyInfo\");\n  private static _anisotropyTextureProp = ShaderProperty.getByName(\"material_AnisotropyTexture\");\n\n  private _anisotropyRotation: number = 0;\n\n  private static _iridescenceInfoProp = ShaderProperty.getByName(\"material_IridescenceInfo\");\n  private static _iridescenceThicknessTextureProp = ShaderProperty.getByName(\"material_IridescenceThicknessTexture\");\n  private static _iridescenceTextureProp = ShaderProperty.getByName(\"material_IridescenceTexture\");\n  private _iridescenceRange = new Vector2(100, 400);\n\n  /**\n   * Index Of Refraction.\n   * @defaultValue `1.5`\n   */\n  get ior(): number {\n    return this.shaderData.getFloat(PBRMaterial._iorProp);\n  }\n\n  set ior(v: number) {\n    this.shaderData.setFloat(PBRMaterial._iorProp, Math.max(v, 0));\n  }\n\n  /**\n   * Metallic.\n   * @defaultValue `1.0`\n   */\n  get metallic(): number {\n    return this.shaderData.getFloat(PBRMaterial._metallicProp);\n  }\n\n  set metallic(value: number) {\n    this.shaderData.setFloat(PBRMaterial._metallicProp, value);\n  }\n\n  /**\n   * Roughness. default 1.0.\n   * @defaultValue `1.0`\n   */\n  get roughness(): number {\n    return this.shaderData.getFloat(PBRMaterial._roughnessProp);\n  }\n\n  set roughness(value: number) {\n    this.shaderData.setFloat(PBRMaterial._roughnessProp, value);\n  }\n\n  /**\n   * Roughness metallic texture.\n   * @remarks G channel is roughness, B channel is metallic\n   */\n  get roughnessMetallicTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRMaterial._roughnessMetallicTextureProp);\n  }\n\n  set roughnessMetallicTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRMaterial._roughnessMetallicTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"MATERIAL_HAS_ROUGHNESS_METALLIC_TEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"MATERIAL_HAS_ROUGHNESS_METALLIC_TEXTURE\");\n    }\n  }\n\n  /**\n   * The strength of anisotropy, when anisotropyTexture is present, this value is multiplied by the blue channel.\n   * @defaultValue `0`\n   */\n  get anisotropy(): number {\n    return this.shaderData.getVector3(PBRMaterial._anisotropyInfoProp).z;\n  }\n\n  set anisotropy(value: number) {\n    const anisotropyInfo = this.shaderData.getVector3(PBRMaterial._anisotropyInfoProp);\n    if (!!anisotropyInfo.z !== !!value) {\n      if (value === 0) {\n        this.shaderData.disableMacro(\"MATERIAL_ENABLE_ANISOTROPY\");\n      } else {\n        this.shaderData.enableMacro(\"MATERIAL_ENABLE_ANISOTROPY\");\n      }\n    }\n    anisotropyInfo.z = value;\n  }\n\n  /**\n   * The rotation of the anisotropy in tangent, bitangent space, value in degrees.\n   * @defaultValue `0`\n   */\n  get anisotropyRotation(): number {\n    return this._anisotropyRotation;\n  }\n\n  set anisotropyRotation(value: number) {\n    if (this._anisotropyRotation !== value) {\n      this._anisotropyRotation = value;\n\n      const anisotropyInfo = this.shaderData.getVector3(PBRMaterial._anisotropyInfoProp);\n      const rad = MathUtil.degreeToRadFactor * value;\n      anisotropyInfo.x = Math.cos(rad);\n      anisotropyInfo.y = Math.sin(rad);\n    }\n  }\n\n  /**\n   * The anisotropy texture.\n   * @remarks\n   * Red and green channels represent the anisotropy direction in [-1, 1] tangent, bitangent space, to be rotated by anisotropyRotation.\n   * The blue channel contains strength as [0, 1] to be multiplied by anisotropy.\n   */\n  get anisotropyTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRMaterial._anisotropyTextureProp);\n  }\n\n  set anisotropyTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRMaterial._anisotropyTextureProp, value);\n\n    if (value) {\n      this.shaderData.enableMacro(\"MATERIAL_HAS_ANISOTROPY_TEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"MATERIAL_HAS_ANISOTROPY_TEXTURE\");\n    }\n  }\n\n  /**\n   * The iridescence intensity factor, from 0.0 to 1.0.\n   * @defaultValue `0.0`\n   */\n  get iridescence(): number {\n    return this.shaderData.getVector4(PBRMaterial._iridescenceInfoProp).x;\n  }\n\n  set iridescence(value: number) {\n    value = Math.max(0, Math.min(1, value));\n    const iridescenceInfo = this.shaderData.getVector4(PBRMaterial._iridescenceInfoProp);\n    if (!!iridescenceInfo.x !== !!value) {\n      if (value === 0) {\n        this.shaderData.disableMacro(\"MATERIAL_ENABLE_IRIDESCENCE\");\n      } else {\n        this.shaderData.enableMacro(\"MATERIAL_ENABLE_IRIDESCENCE\");\n      }\n    }\n    iridescenceInfo.x = value;\n  }\n\n  /**\n   * The iridescence intensity texture, sampling red channel, and multiply 'iridescence'.\n   */\n  get iridescenceTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRMaterial._iridescenceTextureProp);\n  }\n\n  set iridescenceTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRMaterial._iridescenceTextureProp, value);\n\n    if (value) {\n      this.shaderData.enableMacro(\"MATERIAL_HAS_IRIDESCENCE_TEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"MATERIAL_HAS_IRIDESCENCE_TEXTURE\");\n    }\n  }\n\n  /**\n   * The index of refraction of the dielectric thin-film layer, greater than or equal to 1.0.\n   * @defaultValue `1.3`\n   */\n  get iridescenceIOR(): number {\n    return this.shaderData.getVector4(PBRMaterial._iridescenceInfoProp).y;\n  }\n\n  set iridescenceIOR(value: number) {\n    const iridescenceInfo = this.shaderData.getVector4(PBRMaterial._iridescenceInfoProp);\n    iridescenceInfo.y = Math.max(value, 1.0);\n  }\n\n  /**\n   * The range of iridescence thickness, x is minimum, y is maximum.\n   *  @defaultValue `[100, 400]`.\n   */\n  get iridescenceThicknessRange(): Vector2 {\n    return this._iridescenceRange;\n  }\n\n  set iridescenceThicknessRange(value: Vector2) {\n    if (this._iridescenceRange !== value) {\n      this._iridescenceRange.copyFrom(value);\n    }\n  }\n\n  /**\n   * The thickness texture of the thin-film layer, sampling green channel.\n   * @remarks\n   * If iridescenceThicknessTexture is defined, iridescence thickness between the 'iridescenceThicknessRange'.\n   * If iridescenceThicknessTexture is not defined, iridescence thickness will use only 'iridescenceThicknessRange.y'.\n   */\n  get iridescenceThicknessTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRMaterial._iridescenceThicknessTextureProp);\n  }\n\n  set iridescenceThicknessTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRMaterial._iridescenceThicknessTextureProp, value);\n\n    if (value) {\n      this.shaderData.enableMacro(\"MATERIAL_HAS_IRIDESCENCE_THICKNESS_TEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"MATERIAL_HAS_IRIDESCENCE_THICKNESS_TEXTURE\");\n    }\n  }\n\n  /**\n   * Create a pbr metallic-roughness workflow material instance.\n   * @param engine - Engine to which the material belongs\n   */\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"pbr\"));\n\n    const shaderData = this.shaderData;\n    shaderData.setFloat(PBRMaterial._metallicProp, 1);\n    shaderData.setFloat(PBRMaterial._roughnessProp, 1);\n    shaderData.setFloat(PBRMaterial._iorProp, 1.5);\n    shaderData.setVector3(PBRMaterial._anisotropyInfoProp, new Vector3(1, 0, 0));\n    shaderData.setVector4(PBRMaterial._iridescenceInfoProp, new Vector4(0, 1.3, 100, 400));\n    // @ts-ignore\n    this._iridescenceRange._onValueChanged = this._onIridescenceRangeChanged.bind(this);\n  }\n\n  private _onIridescenceRangeChanged(): void {\n    const iridescenceInfo = this.shaderData.getVector4(PBRMaterial._iridescenceInfoProp);\n    iridescenceInfo.z = this._iridescenceRange.x;\n    iridescenceInfo.w = this._iridescenceRange.y;\n  }\n\n  /**\n   * @inheritdoc\n   */\n  override clone(): PBRMaterial {\n    const dest = new PBRMaterial(this._engine);\n    this.cloneTo(dest);\n    return dest;\n  }\n}\n","import { Color } from \"@galacean/engine-math\";\nimport { Engine } from \"../Engine\";\nimport { Shader } from \"../shader/Shader\";\nimport { ShaderMacro } from \"../shader/ShaderMacro\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { PBRBaseMaterial } from \"./PBRBaseMaterial\";\n\n/**\n * PBR (Specular-Glossiness Workflow) Material.\n */\nexport class PBRSpecularMaterial extends PBRBaseMaterial {\n  private static _specularColorProp = ShaderProperty.getByName(\"material_PBRSpecularColor\");\n  private static _glossinessProp = ShaderProperty.getByName(\"material_Glossiness\");\n  private static _specularGlossinessTextureProp = ShaderProperty.getByName(\"material_SpecularGlossinessTexture\");\n  private static _specularGlossinessTextureMacro: ShaderMacro = ShaderMacro.getByName(\n    \"MATERIAL_HAS_SPECULAR_GLOSSINESS_TEXTURE\"\n  );\n\n  /**\n   * Specular color.\n   */\n  get specularColor(): Color {\n    return this.shaderData.getColor(PBRSpecularMaterial._specularColorProp);\n  }\n\n  set specularColor(value: Color) {\n    const specularColor = this.shaderData.getColor(PBRSpecularMaterial._specularColorProp);\n    if (value !== specularColor) {\n      specularColor.copyFrom(value);\n    }\n  }\n\n  /**\n   * Glossiness.\n   */\n  get glossiness(): number {\n    return this.shaderData.getFloat(PBRSpecularMaterial._glossinessProp);\n  }\n\n  set glossiness(value: number) {\n    this.shaderData.setFloat(PBRSpecularMaterial._glossinessProp, value);\n  }\n\n  /**\n   * Specular glossiness texture.\n   * @remarks RGB is specular, A is glossiness\n   */\n  get specularGlossinessTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRSpecularMaterial._specularGlossinessTextureProp);\n  }\n\n  set specularGlossinessTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRSpecularMaterial._specularGlossinessTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(PBRSpecularMaterial._specularGlossinessTextureMacro);\n    } else {\n      this.shaderData.disableMacro(PBRSpecularMaterial._specularGlossinessTextureMacro);\n    }\n  }\n\n  /**\n   * Create a pbr specular-glossiness workflow material instance.\n   * @param engine - Engine to which the material belongs\n   */\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"pbr-specular\"));\n\n    this.shaderData.setColor(PBRSpecularMaterial._specularColorProp, new Color(1, 1, 1, 1));\n    this.shaderData.setFloat(PBRSpecularMaterial._glossinessProp, 1.0);\n  }\n\n  /**\n   * @inheritdoc\n   */\n  override clone(): PBRSpecularMaterial {\n    const dest = new PBRSpecularMaterial(this._engine);\n    this.cloneTo(dest);\n    return dest;\n  }\n}\n","import { Color, Vector4 } from \"@galacean/engine-math\";\nimport { Engine } from \"../Engine\";\nimport { Shader } from \"../shader/Shader\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { BaseMaterial } from \"./BaseMaterial\";\n\n/**\n * Unlit Material.\n */\nexport class UnlitMaterial extends BaseMaterial {\n  /**\n   * Base color.\n   */\n  get baseColor(): Color {\n    return this.shaderData.getColor(UnlitMaterial._baseColorProp);\n  }\n\n  set baseColor(value: Color) {\n    const baseColor = this.shaderData.getColor(UnlitMaterial._baseColorProp);\n    if (value !== baseColor) {\n      baseColor.copyFrom(value);\n    }\n  }\n\n  /**\n   * Base texture.\n   */\n  get baseTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(UnlitMaterial._baseTextureProp);\n  }\n\n  set baseTexture(value: Texture2D) {\n    this.shaderData.setTexture(UnlitMaterial._baseTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(UnlitMaterial._baseTextureMacro);\n    } else {\n      this.shaderData.disableMacro(UnlitMaterial._baseTextureMacro);\n    }\n  }\n\n  /**\n   * Tiling and offset of main textures.\n   */\n  get tilingOffset(): Vector4 {\n    return this.shaderData.getVector4(UnlitMaterial._tilingOffsetProp);\n  }\n\n  set tilingOffset(value: Vector4) {\n    const tilingOffset = this.shaderData.getVector4(UnlitMaterial._tilingOffsetProp);\n    if (value !== tilingOffset) {\n      tilingOffset.copyFrom(value);\n    }\n  }\n\n  /**\n   * Create a unlit material instance.\n   * @param engine - Engine to which the material belongs\n   */\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"unlit\"));\n\n    const shaderData = this.shaderData;\n\n    shaderData.enableMacro(\"MATERIAL_OMIT_NORMAL\");\n    shaderData.enableMacro(\"MATERIAL_NEED_TILING_OFFSET\");\n\n    shaderData.setColor(UnlitMaterial._baseColorProp, new Color(1, 1, 1, 1));\n    shaderData.setVector4(UnlitMaterial._tilingOffsetProp, new Vector4(1, 1, 0, 0));\n  }\n\n  /**\n   * @inheritdoc\n   */\n  override clone(): UnlitMaterial {\n    const dest = new UnlitMaterial(this._engine);\n    this.cloneTo(dest);\n    return dest;\n  }\n}\n","import { Vector3 } from \"@galacean/engine-math\";\nimport { UpdateFlagManager } from \"../UpdateFlagManager\";\n\n/**\n * BlendShapeFrame.\n */\nexport class BlendShapeFrame {\n  /** Weight of BlendShapeFrame. */\n  readonly weight: number;\n\n  /** @internal */\n  _dataChangeManager: UpdateFlagManager = new UpdateFlagManager();\n\n  private _dirty: BlendShapeFrameDirty = BlendShapeFrameDirty.All;\n  private _deltaPositions: Vector3[];\n  private _deltaNormals: Vector3[];\n  private _deltaTangents: Vector3[];\n\n  /**\n   * Delta positions for the frame being added.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get deltaPositions(): Vector3[] {\n    return this._deltaPositions;\n  }\n\n  set deltaPositions(value: Vector3[]) {\n    this._deltaPositions = value;\n    this._dirty |= BlendShapeFrameDirty.Position;\n    this._dataChangeManager.dispatch(this._dirty, this);\n  }\n\n  /**\n   * Delta normals for the frame being added.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get deltaNormals(): Vector3[] {\n    return this._deltaNormals;\n  }\n\n  set deltaNormals(value: Vector3[]) {\n    this._deltaNormals = value;\n    this._dirty |= BlendShapeFrameDirty.Normal;\n    this._dataChangeManager.dispatch(this._dirty, this);\n  }\n\n  /**\n   * Delta tangents for the frame being added.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get deltaTangents(): Vector3[] {\n    return this._deltaTangents;\n  }\n\n  set deltaTangents(value: Vector3[]) {\n    this._deltaTangents = value;\n    this._dirty |= BlendShapeFrameDirty.Tangent;\n    this._dataChangeManager.dispatch(this._dirty, this);\n  }\n\n  /**\n   * Create a BlendShapeFrame.\n   * @param weight - Weight of BlendShapeFrame\n   * @param deltaPositions - Delta positions for the frame being added\n   * @param deltaNormals - Delta normals for the frame being added\n   * @param deltaTangents - Delta tangents for the frame being added\n   */\n  constructor(\n    weight: number,\n    deltaPositions: Vector3[],\n    deltaNormals: Vector3[] = null,\n    deltaTangents: Vector3[] = null\n  ) {\n    if (deltaNormals && deltaNormals.length !== deltaPositions.length) {\n      throw \"deltaNormals length must same with deltaPositions length.\";\n    }\n\n    if (deltaTangents && deltaTangents.length !== deltaPositions.length) {\n      throw \"deltaTangents length must same with deltaPositions length.\";\n    }\n\n    this.weight = weight;\n    this._deltaPositions = deltaPositions;\n    this._deltaNormals = deltaNormals;\n    this._deltaTangents = deltaTangents;\n  }\n\n  /**\n   * @internal\n   */\n  _releaseData(): void {\n    this._deltaPositions = null;\n    this._deltaNormals = null;\n    this._deltaTangents = null;\n  }\n}\n\nexport enum BlendShapeFrameDirty {\n  Position = 0x1,\n  Normal = 0x2,\n  Tangent = 0x4,\n  All = 0x7\n}\n","import { Vector3 } from \"@galacean/engine-math\";\nimport { UpdateFlagManager } from \"../UpdateFlagManager\";\nimport { BlendShapeFrame, BlendShapeFrameDirty } from \"./BlendShapeFrame\";\n\n/**\n * BlendShape.\n */\nexport class BlendShape {\n  /** Name of BlendShape. */\n  name: string;\n\n  /** @internal */\n  _useBlendShapeNormal: boolean = true;\n  /** @internal */\n  _useBlendShapeTangent: boolean = true;\n  /** @internal */\n  _layoutChangeManager: UpdateFlagManager = new UpdateFlagManager();\n  /** @internal */\n  _dataChangeManager: UpdateFlagManager = new UpdateFlagManager();\n\n  private _frames: BlendShapeFrame[] = [];\n\n  /**\n   * Frames of BlendShape.\n   */\n  get frames(): Readonly<BlendShapeFrame[]> {\n    return this._frames;\n  }\n\n  /**\n   * Create a BlendShape.\n   * @param name - BlendShape name.\n   */\n  constructor(name: string) {\n    this.name = name;\n    this._frameDataChangeListener = this._frameDataChangeListener.bind(this);\n  }\n\n  /**\n   * Add a BlendShapeFrame by weight, deltaPositions, deltaNormals and deltaTangents.\n   * @param weight - Weight of BlendShapeFrame\n   * @param deltaPositions - Delta positions for the frame being added\n   * @param deltaNormals - Delta normals for the frame being added\n   * @param deltaTangents - Delta tangents for the frame being added\n   */\n  addFrame(\n    weight: number,\n    deltaPositions: Vector3[],\n    deltaNormals?: Vector3[],\n    deltaTangents?: Vector3[]\n  ): BlendShapeFrame;\n\n  /**\n   * Add a BlendShapeFrame.\n   * @param frame - The BlendShapeFrame.\n   */\n  addFrame(frame: BlendShapeFrame): void;\n\n  addFrame(\n    frameOrWeight: BlendShapeFrame | number,\n    deltaPositions?: Vector3[],\n    deltaNormals?: Vector3[],\n    deltaTangents?: Vector3[]\n  ): void | BlendShapeFrame {\n    if (typeof frameOrWeight === \"number\") {\n      const frame = new BlendShapeFrame(frameOrWeight, deltaPositions, deltaNormals, deltaTangents);\n      this._addFrame(frame);\n      return frame;\n    } else {\n      this._addFrame(frameOrWeight);\n    }\n  }\n\n  /**\n   * Clear all frames.\n   */\n  clearFrames(): void {\n    const frames = this._frames;\n\n    for (let i = 0, n = frames.length; i < n; i++) {\n      frames[i]._dataChangeManager.removeListener(this._frameDataChangeListener);\n    }\n    frames.length = 0;\n    this._updateUseNormalAndTangent(true, true);\n    this._dataChangeManager.dispatch();\n  }\n\n  /**\n   * @internal\n   */\n  _releaseData(): void {\n    const frames = this._frames;\n    for (let i = 0, n = frames.length; i < n; i++) {\n      frames[i]._releaseData();\n    }\n  }\n\n  private _addFrame(frame: BlendShapeFrame): void {\n    const frames = this._frames;\n    const frameCount = frames.length;\n    if (frameCount > 0 && frame.deltaPositions.length !== frames[frameCount - 1].deltaPositions.length) {\n      throw \"Frame's deltaPositions length must same with before frame deltaPositions length.\";\n    }\n    this._frames.push(frame);\n\n    this._frameDataChangeListener(BlendShapeFrameDirty.All, frame);\n    frame._dataChangeManager.addListener(this._frameDataChangeListener);\n  }\n\n  private _updateUseNormalAndTangent(useNormal: boolean, useTangent: boolean): void {\n    const useBlendShapeNormal = this._useBlendShapeNormal && useNormal;\n    const useBlendShapeTangent = this._useBlendShapeTangent && useTangent;\n    if (this._useBlendShapeNormal !== useBlendShapeNormal || this._useBlendShapeTangent !== useBlendShapeTangent) {\n      this._useBlendShapeNormal = useBlendShapeNormal;\n      this._useBlendShapeTangent = useBlendShapeTangent;\n      this._layoutChangeManager.dispatch(0, this);\n    }\n  }\n\n  private _frameDataChangeListener(type: BlendShapeFrameDirty, frame: BlendShapeFrame): void {\n    this._updateUseNormalAndTangent(!!frame.deltaNormals, !!frame.deltaTangents);\n    this._dataChangeManager.dispatch();\n  }\n}\n","import { IndexFormat } from \"./enums/IndexFormat\";\nimport { Buffer } from \"./Buffer\";\n\n/**\n * Index buffer binding.\n */\nexport class IndexBufferBinding {\n  /** @internal */\n  _buffer: Buffer;\n  /** @internal */\n  _format: IndexFormat;\n\n  /**\n   * Index buffer.\n   */\n  get buffer(): Buffer {\n    return this._buffer;\n  }\n\n  /**\n   * Index buffer format.\n   */\n  get format(): IndexFormat {\n    return this._format;\n  }\n\n  /**\n   * Create index buffer binding.\n   * @param buffer - Index buffer\n   * @param format - Index buffer format\n   */\n  constructor(buffer: Buffer, format: IndexFormat) {\n    this._buffer = buffer;\n    this._format = format;\n  }\n}\n","import { MeshTopology } from \"./enums/MeshTopology\";\n\n/**\n * Sub-primitive, mainly contains drawing information.\n */\nexport class SubPrimitive {\n  /** Start drawing offset. */\n  start: number;\n  /** Drawing count. */\n  count: number;\n  /** Drawing topology. */\n  topology: MeshTopology;\n  /**\n   * Create a sub-primitive.\n   * @param start - Start drawing offset\n   * @param count - Drawing count\n   * @param topology - Drawing topology\n   */\n  constructor(start: number = 0, count: number = 0, topology: MeshTopology = MeshTopology.Triangles) {\n    this.start = start;\n    this.count = count;\n    this.topology = topology;\n  }\n}\n","import { IPoolElement } from \"../utils/ObjectPool\";\nimport { SubPrimitive } from \"./SubPrimitive\";\n\n/**\n * Sub-mesh, mainly contains drawing information.\n */\nexport class SubMesh extends SubPrimitive implements IPoolElement {\n  dispose?(): void {}\n}\n","import { IPlatformPrimitive } from \"@galacean/engine-design\";\nimport { Engine } from \"../Engine\";\nimport { GraphicsResource } from \"../asset/GraphicsResource\";\nimport { ShaderProgram } from \"../shader/ShaderProgram\";\nimport { BufferUtil } from \"./BufferUtil\";\nimport { IndexBufferBinding } from \"./IndexBufferBinding\";\nimport { SubPrimitive } from \"./SubPrimitive\";\nimport { VertexBufferBinding } from \"./VertexBufferBinding\";\nimport { VertexElement } from \"./VertexElement\";\n\n/**\n * @internal\n * Primitive.\n */\nexport class Primitive extends GraphicsResource {\n  enableVAO: boolean = true;\n  instanceCount: number = 0;\n  vertexBufferBindings: VertexBufferBinding[] = [];\n\n  /** @internal */\n  _vertexElementMap: Record<string, VertexElement> = {};\n  /** @internal */\n  _glIndexType: number;\n  /** @internal */\n  _glIndexByteCount: number;\n  /** @internal */\n  _bufferStructChanged: boolean = false;\n\n  private _vertexElements: VertexElement[] = [];\n  private _indexBufferBinding: IndexBufferBinding;\n  private _platformPrimitive: IPlatformPrimitive;\n\n  get vertexElements(): VertexElement[] {\n    return this._vertexElements;\n  }\n\n  get indexBufferBinding(): IndexBufferBinding {\n    return this._indexBufferBinding;\n  }\n\n  constructor(engine: Engine) {\n    super(engine);\n    this._platformPrimitive = engine._hardwareRenderer.createPlatformPrimitive(this);\n  }\n\n  addVertexElement(element: VertexElement): void {\n    const vertexElementMap = this._vertexElementMap;\n    const vertexElements = this._vertexElements;\n\n    const semantic = element.attribute;\n    const oldVertexElement = vertexElementMap[semantic];\n    if (oldVertexElement) {\n      console.warn(`VertexElement ${semantic} already exists.`);\n      vertexElements.splice(vertexElements.indexOf(oldVertexElement), 1);\n    }\n    vertexElementMap[semantic] = element;\n    vertexElements.push(element);\n    this._bufferStructChanged = true;\n  }\n\n  removeVertexElement(index: number): void {\n    const vertexElements = this._vertexElements;\n    // Delete the old vertex element\n    const vertexElement = vertexElements[index];\n    vertexElements.splice(index, 1);\n    delete this._vertexElementMap[vertexElement.attribute];\n    this._bufferStructChanged = true;\n  }\n\n  clearVertexElements(): void {\n    this._vertexElements.length = 0;\n    const vertexElementMap = this._vertexElementMap;\n    for (const k in vertexElementMap) {\n      delete vertexElementMap[k];\n    }\n    this._bufferStructChanged = true;\n  }\n\n  /**\n   * @remarks should use together with `setVertexElementsLength`\n   */\n  setVertexElement(index: number, element: VertexElement): void {\n    const vertexElementMap = this._vertexElementMap;\n    const vertexElements = this._vertexElements;\n\n    // Delete the old vertex element\n    const oldVertexElement = vertexElements[index];\n    oldVertexElement && delete vertexElementMap[oldVertexElement.attribute];\n\n    vertexElementMap[element.attribute] = element;\n    vertexElements[index] = element;\n    this._bufferStructChanged = true;\n  }\n\n  setVertexElementsLength(length: number): void {\n    const vertexElementMap = this._vertexElementMap;\n    const vertexElements = this._vertexElements;\n\n    for (let i = length, n = vertexElements.length; i < n; i++) {\n      const element = vertexElements[i];\n      delete vertexElementMap[element.attribute];\n    }\n    vertexElements.length = length;\n  }\n\n  setVertexBufferBinding(index: number, binding: VertexBufferBinding): void {\n    const referCount = this._getReferCount();\n    const vertexBufferBindings = this.vertexBufferBindings;\n    if (referCount > 0) {\n      vertexBufferBindings[index]?.buffer._addReferCount(-referCount);\n      binding?.buffer._addReferCount(referCount);\n    }\n    vertexBufferBindings[index] = binding;\n    this._bufferStructChanged = true;\n  }\n\n  /**\n   * Set vertex buffer binding.\n   * @param vertexBufferBindings - Vertex buffer binding\n   * @param firstIndex - First vertex buffer index, the default value is 0\n   */\n  setVertexBufferBindings(vertexBufferBindings: VertexBufferBinding[], firstIndex: number = 0): void {\n    const bindings = this.vertexBufferBindings;\n    const count = vertexBufferBindings.length;\n    const needLength = firstIndex + count;\n    bindings.length < needLength && (bindings.length = needLength);\n    for (let i = 0; i < count; i++) {\n      this.setVertexBufferBinding(firstIndex + i, vertexBufferBindings[i]);\n    }\n  }\n\n  setIndexBufferBinding(binding: IndexBufferBinding | null): void {\n    const lastBinding = this.indexBufferBinding;\n    const referCount = this._getReferCount();\n\n    if (lastBinding !== binding) {\n      this._indexBufferBinding = binding;\n      referCount > 0 && lastBinding?.buffer._addReferCount(-referCount);\n      if (binding) {\n        referCount > 0 && binding.buffer._addReferCount(referCount);\n        this._glIndexType = BufferUtil._getGLIndexType(binding.format);\n        this._glIndexByteCount = BufferUtil._getGLIndexByteCount(binding.format);\n      } else {\n        this._glIndexType = undefined;\n      }\n      this._bufferStructChanged = lastBinding?.buffer !== binding?.buffer;\n    }\n  }\n\n  draw(shaderProgram: ShaderProgram, subMesh: SubPrimitive): void {\n    this._platformPrimitive.draw(shaderProgram, subMesh);\n    this._bufferStructChanged = false;\n  }\n\n  override _addReferCount(value: number): void {\n    super._addReferCount(value);\n    const vertexBufferBindings = this.vertexBufferBindings;\n    for (let i = 0, n = vertexBufferBindings.length; i < n; i++) {\n      vertexBufferBindings[i]?.buffer._addReferCount(value);\n    }\n    this.indexBufferBinding?._buffer._addReferCount(value);\n  }\n\n  override _rebuild(): void {\n    this._engine._hardwareRenderer.createPlatformPrimitive(this);\n    this._isContentLost = false;\n  }\n\n  protected override _onDestroy(): void {\n    super._onDestroy();\n    this._platformPrimitive.destroy();\n    this._vertexElementMap = null;\n  }\n}\n","import { BoundingBox } from \"@galacean/engine-math\";\nimport { Engine } from \"../Engine\";\nimport { UpdateFlagManager } from \"../UpdateFlagManager\";\nimport { ReferResource } from \"../asset/ReferResource\";\nimport { IndexBufferBinding } from \"../graphic/IndexBufferBinding\";\nimport { SubMesh } from \"../graphic/SubMesh\";\nimport { VertexBufferBinding } from \"../graphic/VertexBufferBinding\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { MeshTopology } from \"../graphic/enums/MeshTopology\";\nimport { Primitive } from \"./Primitive\";\n\n/**\n * Mesh.\n */\nexport abstract class Mesh extends ReferResource {\n  /** Name. */\n  name: string;\n\n  /** @internal */\n  _primitive: Primitive;\n\n  /** @internal */\n  _updateFlagManager: UpdateFlagManager = new UpdateFlagManager();\n\n  private _bounds: BoundingBox = new BoundingBox();\n  private _subMeshes: SubMesh[] = [];\n\n  /**\n   * The bounding volume of the mesh.\n   */\n  get bounds(): BoundingBox {\n    return this._bounds;\n  }\n\n  set bounds(value: BoundingBox) {\n    if (this._bounds !== value) {\n      this._bounds.copyFrom(value);\n    }\n  }\n\n  /**\n   * First sub-mesh. Rendered using the first material.\n   */\n  get subMesh(): SubMesh | null {\n    return this._subMeshes[0] || null;\n  }\n\n  /**\n   * A collection of sub-mesh, each sub-mesh can be rendered with an independent material.\n   */\n  get subMeshes(): Readonly<SubMesh[]> {\n    return this._subMeshes;\n  }\n\n  /**\n   * Create mesh.\n   * @param engine - Engine\n   * @param name - Mesh name\n   */\n  constructor(engine: Engine, name?: string) {\n    super(engine);\n    this.name = name;\n    this._primitive = new Primitive(engine);\n    this._onBoundsChanged = this._onBoundsChanged.bind(this);\n\n    const bounds = this._bounds;\n    // @ts-ignore\n    bounds.min._onValueChanged = this._onBoundsChanged;\n    // @ts-ignore\n    bounds.max._onValueChanged = this._onBoundsChanged;\n  }\n\n  /**\n   * Add sub-mesh, each sub-mesh can correspond to an independent material.\n   * @param subMesh - Start drawing offset, if the index buffer is set, it means the offset in the index buffer, if not set, it means the offset in the vertex buffer\n   * @returns Sub-mesh\n   */\n  addSubMesh(subMesh: SubMesh): SubMesh;\n\n  /**\n   * Add sub-mesh, each sub-mesh can correspond to an independent material.\n   * @param start - Start drawing offset, if the index buffer is set, it means the offset in the index buffer, if not set, it means the offset in the vertex buffer\n   * @param count - Drawing count, if the index buffer is set, it means the count in the index buffer, if not set, it means the count in the vertex buffer\n   * @param topology - Drawing topology, default is MeshTopology.Triangles\n   * @returns Sub-mesh\n   */\n  addSubMesh(start: number, count: number, topology?: MeshTopology): SubMesh;\n\n  addSubMesh(\n    startOrSubMesh: number | SubMesh,\n    count?: number,\n    topology: MeshTopology = MeshTopology.Triangles\n  ): SubMesh {\n    if (typeof startOrSubMesh === \"number\") {\n      startOrSubMesh = new SubMesh(startOrSubMesh, count, topology);\n    }\n    this._subMeshes.push(startOrSubMesh);\n    return startOrSubMesh;\n  }\n\n  /**\n   * Remove sub-mesh.\n   * @param subMesh - Sub-mesh needs to be removed\n   */\n  removeSubMesh(subMesh: SubMesh): void {\n    const subMeshes = this._subMeshes;\n    const index = subMeshes.indexOf(subMesh);\n    if (index !== -1) {\n      subMeshes.splice(index, 1);\n    }\n  }\n\n  /**\n   * Clear all sub-mesh.\n   */\n  clearSubMesh(): void {\n    this._subMeshes.length = 0;\n  }\n\n  /**\n   * @internal\n   */\n  _clearVertexElements(): void {\n    this._primitive.clearVertexElements();\n    this._updateFlagManager.dispatch(MeshModifyFlags.VertexElements);\n  }\n\n  /**\n   * @internal\n   */\n  _addVertexElement(element: VertexElement): void {\n    this._primitive.addVertexElement(element);\n    this._updateFlagManager.dispatch(MeshModifyFlags.VertexElements);\n  }\n\n  /**\n   * @internal\n   */\n  _removeVertexElement(index: number): void {\n    this._primitive.removeVertexElement(index);\n    this._updateFlagManager.dispatch(MeshModifyFlags.VertexElements);\n  }\n\n  /**\n   * @internal\n   * @remarks should use together with `_setVertexElementsLength`\n   */\n  _setVertexElement(index: number, element: VertexElement): void {\n    this._primitive.setVertexElement(index, element);\n    this._updateFlagManager.dispatch(MeshModifyFlags.VertexElements);\n  }\n\n  /**\n   * @internal\n   *\n   */\n  _setVertexElementsLength(length: number): void {\n    this._primitive.setVertexElementsLength(length);\n  }\n\n  /**\n   * @internal\n   */\n  _setVertexBufferBinding(index: number, binding: VertexBufferBinding): void {\n    this._primitive.setVertexBufferBinding(index, binding);\n  }\n\n  override _addReferCount(value: number): void {\n    super._addReferCount(value);\n    this._primitive._addReferCount(value);\n  }\n\n  /**\n   * @internal\n   */\n  protected override _onDestroy(): void {\n    super._onDestroy();\n    this._primitive.destroy();\n  }\n\n  /**\n   * @internal\n   */\n  protected _setVertexElements(elements: VertexElement[]): void {\n    this._clearVertexElements();\n    for (let i = 0, n = elements.length; i < n; i++) {\n      this._addVertexElement(elements[i]);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  protected _setIndexBufferBinding(binding: IndexBufferBinding | null): void {\n    this._primitive.setIndexBufferBinding(binding);\n  }\n\n  private _onBoundsChanged(): void {\n    this._updateFlagManager.dispatch(MeshModifyFlags.Bounds);\n  }\n}\n\n/**\n * @internal\n */\nexport enum MeshModifyFlags {\n  Bounds = 0x1,\n  VertexElements = 0x2\n}\n","import { Buffer } from \"./Buffer\";\n\n/**\n * Vertex buffer binding.\n */\nexport class VertexBufferBinding {\n  /** @internal */\n  _buffer: Buffer;\n  /** @internal */\n  _stride: number;\n\n  /**\n   * Vertex buffer.\n   */\n  get buffer(): Buffer {\n    return this._buffer;\n  }\n\n  /**\n   * Vertex buffer stride.\n   */\n  get stride(): number {\n    return this._stride;\n  }\n\n  /**\n   * Create vertex buffer.\n   * @param buffer - Vertex buffer\n   * @param stride - Vertex buffer stride\n   */\n  constructor(buffer: Buffer, stride: number) {\n    this._buffer = buffer;\n    this._stride = stride;\n  }\n}\n","import { IndexBufferBinding, IndexFormat, Mesh, Buffer, VertexBufferBinding, VertexElement } from \"../graphic\";\n\n/**\n * BufferMesh.\n */\nexport class BufferMesh extends Mesh {\n  /**\n   * Instanced count, disable instanced drawing when set zero.\n   */\n  get instanceCount(): number {\n    return this._primitive.instanceCount;\n  }\n\n  set instanceCount(value: number) {\n    this._primitive.instanceCount = value;\n  }\n\n  /**\n   * Vertex buffer binding collection.\n   */\n  get vertexBufferBindings(): Readonly<VertexBufferBinding[]> {\n    return this._primitive.vertexBufferBindings;\n  }\n\n  /**\n   * Index buffer binding.\n   */\n  get indexBufferBinding(): IndexBufferBinding {\n    return this._primitive.indexBufferBinding;\n  }\n\n  /**\n   * Vertex element collection.\n   */\n  get vertexElements(): Readonly<VertexElement[]> {\n    return this._primitive.vertexElements;\n  }\n\n  /**\n   * Set vertex elements.\n   * @param elements - Vertex element collection\n   */\n  setVertexElements(elements: VertexElement[]): void {\n    this._setVertexElements(elements);\n  }\n\n  /**\n   * Set vertex buffer binding.\n   * @param vertexBufferBinding - Vertex buffer binding\n   * @param index - Vertex buffer index, the default value is 0\n   */\n  setVertexBufferBinding(vertexBufferBinding: VertexBufferBinding, index?: number): void;\n\n  /**\n   * Set vertex buffer binding.\n   * @param vertexBuffer - Vertex buffer\n   * @param stride - Vertex buffer data stride\n   * @param index - Vertex buffer index, the default value is 0\n   */\n  setVertexBufferBinding(vertexBuffer: Buffer, stride: number, index?: number): void;\n\n  setVertexBufferBinding(\n    bufferOrBinding: Buffer | VertexBufferBinding,\n    strideOrFirstIndex: number = 0,\n    index: number = 0\n  ): void {\n    let binding = <VertexBufferBinding>bufferOrBinding;\n    const isBinding = binding.buffer !== undefined;\n    isBinding || (binding = new VertexBufferBinding(<Buffer>bufferOrBinding, strideOrFirstIndex));\n\n    const bindings = this._primitive.vertexBufferBindings;\n    bindings.length <= index && (bindings.length = index + 1);\n    this._setVertexBufferBinding(isBinding ? strideOrFirstIndex : index, binding);\n  }\n\n  /**\n   * Set vertex buffer binding.\n   * @param vertexBufferBindings - Vertex buffer binding\n   * @param firstIndex - First vertex buffer index, the default value is 0\n   */\n  setVertexBufferBindings(vertexBufferBindings: VertexBufferBinding[], firstIndex: number = 0): void {\n    const bindings = this._primitive.vertexBufferBindings;\n    const count = vertexBufferBindings.length;\n    const needLength = firstIndex + count;\n    bindings.length < needLength && (bindings.length = needLength);\n    for (let i = 0; i < count; i++) {\n      this._setVertexBufferBinding(firstIndex + i, vertexBufferBindings[i]);\n    }\n  }\n\n  /**\n   * Set index buffer binding.\n   * @param buffer - Index buffer\n   * @param format - Index buffer format\n   */\n  setIndexBufferBinding(buffer: Buffer, format: IndexFormat): void;\n\n  /**\n   * Set index buffer binding.\n   * @param bufferBinding - Index buffer binding\n   * @remarks When bufferBinding is null, it will clear IndexBufferBinding\n   */\n  setIndexBufferBinding(bufferBinding: IndexBufferBinding | null): void;\n\n  setIndexBufferBinding(bufferOrBinding: Buffer | IndexBufferBinding | null, format?: IndexFormat): void {\n    let binding = <IndexBufferBinding>bufferOrBinding;\n    if (binding) {\n      const isBinding = binding.buffer !== undefined;\n      isBinding || (binding = new IndexBufferBinding(<Buffer>bufferOrBinding, format));\n    }\n    this._setIndexBufferBinding(binding);\n  }\n}\n","import { BoundingBox } from \"@galacean/engine-math\";\nimport { Entity } from \"../Entity\";\nimport { RenderContext } from \"../RenderPipeline/RenderContext\";\nimport { Renderer, RendererUpdateFlags } from \"../Renderer\";\nimport { Logger } from \"../base/Logger\";\nimport { ignoreClone } from \"../clone/CloneManager\";\nimport { Mesh, MeshModifyFlags } from \"../graphic/Mesh\";\nimport { ShaderMacro } from \"../shader/ShaderMacro\";\n\n/**\n * MeshRenderer Component.\n */\nexport class MeshRenderer extends Renderer {\n  private static _uvMacro = ShaderMacro.getByName(\"RENDERER_HAS_UV\");\n  private static _uv1Macro = ShaderMacro.getByName(\"RENDERER_HAS_UV1\");\n  private static _normalMacro = ShaderMacro.getByName(\"RENDERER_HAS_NORMAL\");\n  private static _tangentMacro = ShaderMacro.getByName(\"RENDERER_HAS_TANGENT\");\n  private static _enableVertexColorMacro = ShaderMacro.getByName(\"RENDERER_ENABLE_VERTEXCOLOR\");\n\n  private _enableVertexColor: boolean = false;\n\n  /** @internal */\n  @ignoreClone\n  _mesh: Mesh;\n\n  /**\n   * Mesh assigned to the renderer.\n   */\n  get mesh(): Mesh {\n    return this._mesh;\n  }\n\n  set mesh(value: Mesh) {\n    if (this._mesh !== value) {\n      this._setMesh(value);\n    }\n  }\n\n  /**\n   * Whether enable vertex color.\n   */\n  get enableVertexColor(): boolean {\n    return this._enableVertexColor;\n  }\n\n  set enableVertexColor(value: boolean) {\n    if (value !== this._enableVertexColor) {\n      this._dirtyUpdateFlag |= MeshRendererUpdateFlags.VertexElementMacro;\n      this._enableVertexColor = value;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    this._onMeshChanged = this._onMeshChanged.bind(this);\n  }\n\n  /**\n   * @internal\n   */\n  protected override _onDestroy(): void {\n    const mesh = this._mesh;\n    if (mesh) {\n      mesh.destroyed || this._addResourceReferCount(mesh, -1);\n      mesh._updateFlagManager.removeListener(this._onMeshChanged);\n      this._mesh = null;\n    }\n\n    super._onDestroy();\n  }\n\n  /**\n   * @internal\n   */\n  override _cloneTo(target: MeshRenderer, srcRoot: Entity, targetRoot: Entity): void {\n    super._cloneTo(target, srcRoot, targetRoot);\n    target.mesh = this._mesh;\n  }\n\n  /**\n   * @internal\n   */\n  override _prepareRender(context: RenderContext): void {\n    if (!this._mesh) {\n      Logger.error(\"mesh is null.\");\n      return;\n    }\n    if (this._mesh.destroyed) {\n      Logger.error(\"mesh is destroyed.\");\n      return;\n    }\n    super._prepareRender(context);\n  }\n\n  /**\n   * @internal\n   */\n  protected override _updateBounds(worldBounds: BoundingBox): void {\n    const mesh = this._mesh;\n    if (mesh) {\n      const localBounds = mesh.bounds;\n      const worldMatrix = this._entity.transform.worldMatrix;\n      BoundingBox.transform(localBounds, worldMatrix, worldBounds);\n    } else {\n      worldBounds.min.set(0, 0, 0);\n      worldBounds.max.set(0, 0, 0);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  protected override _render(context: RenderContext): void {\n    const mesh = this._mesh;\n    if (this._dirtyUpdateFlag & MeshRendererUpdateFlags.VertexElementMacro) {\n      const shaderData = this.shaderData;\n      const vertexElements = mesh._primitive.vertexElements;\n\n      shaderData.disableMacro(MeshRenderer._uvMacro);\n      shaderData.disableMacro(MeshRenderer._uv1Macro);\n      shaderData.disableMacro(MeshRenderer._normalMacro);\n      shaderData.disableMacro(MeshRenderer._tangentMacro);\n      shaderData.disableMacro(MeshRenderer._enableVertexColorMacro);\n\n      for (let i = 0, n = vertexElements.length; i < n; i++) {\n        switch (vertexElements[i].attribute) {\n          case \"TEXCOORD_0\":\n            shaderData.enableMacro(MeshRenderer._uvMacro);\n            break;\n          case \"TEXCOORD_1\":\n            shaderData.enableMacro(MeshRenderer._uv1Macro);\n            break;\n          case \"NORMAL\":\n            shaderData.enableMacro(MeshRenderer._normalMacro);\n            break;\n          case \"TANGENT\":\n            shaderData.enableMacro(MeshRenderer._tangentMacro);\n            break;\n          case \"COLOR_0\":\n            this._enableVertexColor && shaderData.enableMacro(MeshRenderer._enableVertexColorMacro);\n            break;\n        }\n      }\n      this._dirtyUpdateFlag &= ~MeshRendererUpdateFlags.VertexElementMacro;\n    }\n\n    const { _materials: materials, _engine: engine } = this;\n    const subMeshes = mesh.subMeshes;\n    const renderElement = engine._renderElementPool.get();\n    renderElement.set(this.priority, this._distanceForSort);\n    const subRenderElementPool = engine._subRenderElementPool;\n    for (let i = 0, n = subMeshes.length; i < n; i++) {\n      let material = materials[i];\n      if (!material) {\n        continue;\n      }\n      if (material.destroyed || material.shader.destroyed) {\n        material = this.engine._meshMagentaMaterial;\n      }\n\n      const subRenderElement = subRenderElementPool.get();\n      subRenderElement.set(this, material, mesh._primitive, subMeshes[i]);\n      renderElement.addSubRenderElement(subRenderElement);\n    }\n    context.camera._renderPipeline.pushRenderElement(context, renderElement);\n  }\n\n  private _setMesh(mesh: Mesh): void {\n    const lastMesh = this._mesh;\n    if (lastMesh) {\n      this._addResourceReferCount(lastMesh, -1);\n      lastMesh._updateFlagManager.removeListener(this._onMeshChanged);\n    }\n    if (mesh) {\n      this._addResourceReferCount(mesh, 1);\n      mesh._updateFlagManager.addListener(this._onMeshChanged);\n      this._dirtyUpdateFlag |= MeshRendererUpdateFlags.All;\n    }\n    this._mesh = mesh;\n  }\n\n  @ignoreClone\n  private _onMeshChanged(type: MeshModifyFlags): void {\n    type & MeshModifyFlags.Bounds && (this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume);\n    type & MeshModifyFlags.VertexElements && (this._dirtyUpdateFlag |= MeshRendererUpdateFlags.VertexElementMacro);\n  }\n}\n\n/**\n * @remarks Extends `RendererUpdateFlag`.\n */\nenum MeshRendererUpdateFlags {\n  /** VertexElementMacro. */\n  VertexElementMacro = 0x2,\n  /** All. */\n  All = 0x3\n}\n","import { Vector2, Vector3, Vector4 } from \"@galacean/engine-math\";\nimport { BoolUpdateFlag } from \"../BoolUpdateFlag\";\nimport { Engine } from \"../Engine\";\nimport { Buffer } from \"../graphic/Buffer\";\nimport { VertexBufferBinding } from \"../graphic/VertexBufferBinding\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { BufferBindFlag } from \"../graphic/enums/BufferBindFlag\";\nimport { BufferUsage } from \"../graphic/enums/BufferUsage\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { ShaderData } from \"../shader/ShaderData\";\nimport { ShaderMacro } from \"../shader/ShaderMacro\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { Texture2DArray, TextureFilterMode, TextureFormat } from \"../texture\";\nimport { BlendShape } from \"./BlendShape\";\nimport { ModelMesh } from \"./ModelMesh\";\nimport { SkinnedMeshRenderer } from \"./SkinnedMeshRenderer\";\n\n/**\n * @internal\n */\nexport class BlendShapeManager {\n  private static _blendShapeMacro = ShaderMacro.getByName(\"RENDERER_HAS_BLENDSHAPE\");\n  private static _blendShapeTextureMacro = ShaderMacro.getByName(\"RENDERER_BLENDSHAPE_USE_TEXTURE\");\n  private static _blendShapeNormalMacro = ShaderMacro.getByName(\"RENDERER_BLENDSHAPE_HAS_NORMAL\");\n  private static _blendShapeTangentMacro = ShaderMacro.getByName(\"RENDERER_BLENDSHAPE_HAS_TANGENT\");\n\n  private static _blendShapeWeightsProperty = ShaderProperty.getByName(\"renderer_BlendShapeWeights\");\n  private static _blendShapeTextureProperty = ShaderProperty.getByName(\"renderer_BlendShapeTexture\");\n  private static _blendShapeTextureInfoProperty = ShaderProperty.getByName(\"renderer_BlendShapeTextureInfo\");\n\n  /** @internal */\n  _blendShapeCount: number = 0;\n  /** @internal */\n  _blendShapes: BlendShape[] = [];\n  /** @internal */\n  _subDataDirtyFlags: BoolUpdateFlag[] = [];\n  /** @internal */\n  _vertexTexture: Texture2DArray;\n  /** @internal */\n  _vertexBuffers: Buffer[] = [];\n  /** @internal */\n  _vertices: Float32Array;\n  /** @internal */\n  _uniformOccupiesCount: number = 0;\n  /** @internal */\n  _bufferBindingOffset: number = -1;\n  /** @internal */\n  _vertexElementOffset: number = 0;\n\n  private _useBlendNormal: boolean = false;\n  private _useBlendTangent: boolean = false;\n  private _vertexElementCount: number = 0;\n  private _storeInVertexBufferInfo: Vector2[] = [];\n  private _maxCountSingleVertexBuffer: number = 0;\n  private readonly _engine: Engine;\n  private readonly _modelMesh: ModelMesh;\n  private readonly _lastHostCreatedInfo: Vector4 = new Vector4(); // x: blendShapeCount, y: useNormal, z: useBlendTangent, w: vertexCount\n  private readonly _canUseTextureStoreData: boolean = true;\n  private readonly _dataTextureInfo: Vector3 = new Vector3();\n\n  constructor(engine: Engine, modelMesh: ModelMesh) {\n    this._engine = engine;\n    this._modelMesh = modelMesh;\n    this._canUseTextureStoreData = this._engine._hardwareRenderer.capability.canUseFloatTextureBlendShape;\n    this._updateLayoutChange = this._updateLayoutChange.bind(this);\n  }\n\n  /**\n   * @internal\n   */\n  _addBlendShape(blendShape: BlendShape): void {\n    this._blendShapes.push(blendShape);\n    this._blendShapeCount++;\n\n    blendShape._layoutChangeManager.addListener(this._updateLayoutChange);\n    this._updateLayoutChange(0, blendShape);\n\n    this._subDataDirtyFlags.push(blendShape._dataChangeManager.createFlag(BoolUpdateFlag));\n  }\n\n  /**\n   * @internal\n   */\n  _clearBlendShapes(): void {\n    const blendShapes = this._blendShapes;\n    for (let i = 0, n = blendShapes.length; i < n; i++) {\n      blendShapes[i]._layoutChangeManager.removeListener(this._updateLayoutChange);\n    }\n    this._useBlendNormal = false;\n    this._useBlendTangent = false;\n    this._vertexElementCount = 0;\n    this._blendShapes.length = 0;\n    this._blendShapeCount = 0;\n\n    const subDataDirtyFlags = this._subDataDirtyFlags;\n    for (let i = 0, n = subDataDirtyFlags.length; i < n; i++) {\n      subDataDirtyFlags[i].destroy();\n    }\n    subDataDirtyFlags.length = 0;\n  }\n\n  /**\n   * @internal\n   */\n  _updateShaderData(shaderData: ShaderData, skinnedMeshRenderer: SkinnedMeshRenderer): void {\n    let blendShapeCount = this._blendShapeCount;\n    if (blendShapeCount > 0) {\n      shaderData.enableMacro(BlendShapeManager._blendShapeMacro);\n      if (this._useTextureMode()) {\n        shaderData.enableMacro(BlendShapeManager._blendShapeTextureMacro);\n        shaderData.setTexture(BlendShapeManager._blendShapeTextureProperty, this._vertexTexture);\n        shaderData.setVector3(BlendShapeManager._blendShapeTextureInfoProperty, this._dataTextureInfo);\n        shaderData.setFloatArray(BlendShapeManager._blendShapeWeightsProperty, skinnedMeshRenderer.blendShapeWeights);\n        shaderData.enableMacro(\"RENDERER_BLENDSHAPE_COUNT\", blendShapeCount.toString());\n        this._uniformOccupiesCount = blendShapeCount + 1;\n      } else {\n        const maxBlendCount = this._getVertexBufferModeSupportCount();\n        if (blendShapeCount > maxBlendCount) {\n          let condensedBlendShapeWeights = skinnedMeshRenderer._condensedBlendShapeWeights;\n          if (!condensedBlendShapeWeights) {\n            condensedBlendShapeWeights = new Float32Array(maxBlendCount);\n            skinnedMeshRenderer._condensedBlendShapeWeights = condensedBlendShapeWeights;\n          }\n          this._filterCondensedBlendShapeWeights(skinnedMeshRenderer.blendShapeWeights, condensedBlendShapeWeights);\n          shaderData.setFloatArray(BlendShapeManager._blendShapeWeightsProperty, condensedBlendShapeWeights);\n          this._modelMesh._primitive.enableVAO = false;\n          blendShapeCount = maxBlendCount;\n        } else {\n          shaderData.setFloatArray(BlendShapeManager._blendShapeWeightsProperty, skinnedMeshRenderer.blendShapeWeights);\n          this._modelMesh._primitive.enableVAO = true;\n        }\n        shaderData.disableMacro(BlendShapeManager._blendShapeTextureMacro);\n        shaderData.disableMacro(\"RENDERER_BLENDSHAPE_COUNT\");\n        this._uniformOccupiesCount = blendShapeCount;\n      }\n\n      if (this._useBlendNormal) {\n        shaderData.enableMacro(BlendShapeManager._blendShapeNormalMacro);\n      } else {\n        shaderData.disableMacro(BlendShapeManager._blendShapeNormalMacro);\n      }\n      if (this._useBlendTangent) {\n        shaderData.enableMacro(BlendShapeManager._blendShapeTangentMacro);\n      } else {\n        shaderData.disableMacro(BlendShapeManager._blendShapeTangentMacro);\n      }\n    } else {\n      shaderData.disableMacro(BlendShapeManager._blendShapeMacro);\n      shaderData.disableMacro(\"RENDERER_BLENDSHAPE_COUNT\");\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _useTextureMode(): boolean {\n    if (!this._canUseTextureStoreData) {\n      return false;\n    }\n    return this._blendShapeCount > this._getVertexBufferModeSupportCount();\n  }\n\n  /**\n   * @internal\n   */\n  _isCreateHost(vertexCount: number): boolean {\n    const createdInfo = this._lastHostCreatedInfo;\n    return (\n      createdInfo.x !== this._blendShapeCount ||\n      !!createdInfo.y !== this._useBlendNormal ||\n      !!createdInfo.z !== this._useBlendTangent ||\n      createdInfo.w !== vertexCount\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _vertexElementsNeedUpdate(): boolean {\n    const maxSupportCount = this._getVertexBufferModeSupportCount();\n    const info = this._lastHostCreatedInfo;\n    return (\n      Math.min(info.x, maxSupportCount) !== Math.min(this._blendShapeCount, maxSupportCount) ||\n      !!info.y !== this._useBlendNormal ||\n      !!info.z !== this._useBlendTangent\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _needUpdateData(): boolean {\n    const subDataDirtyFlags = this._subDataDirtyFlags;\n    for (let i = 0, n = subDataDirtyFlags.length; i < n; i++) {\n      if (subDataDirtyFlags[i].flag) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private _updateVertexBufferIndex(): void {\n    if (this._bufferBindingOffset !== -1) {\n      return;\n    }\n\n    const modelMesh = this._modelMesh;\n    const internalVertexBufferIndex = modelMesh._internalVertexBufferIndex;\n    const vertexBufferBindings = modelMesh._primitive.vertexBufferBindings;\n    let i = 0;\n    const n = Math.max(vertexBufferBindings.length, internalVertexBufferIndex + 1);\n    for (; i < n; i++) {\n      if (!vertexBufferBindings[i] && i !== internalVertexBufferIndex) {\n        break;\n      }\n    }\n    this._bufferBindingOffset = i;\n  }\n\n  /**\n   * @internal\n   */\n  _addVertexElements(modelMesh: ModelMesh): number {\n    this._updateVertexBufferIndex();\n\n    let elementIndex = this._vertexElementOffset;\n    const bindingOffset = this._bufferBindingOffset;\n\n    let offset = 0;\n    for (let i = 0, n = Math.min(this._blendShapeCount, this._getVertexBufferModeSupportCount()); i < n; i++) {\n      modelMesh._setVertexElement(\n        elementIndex++,\n        new VertexElement(`POSITION_BS${i}`, offset, VertexElementFormat.Vector3, bindingOffset)\n      );\n      offset += 12;\n      if (this._useBlendNormal) {\n        modelMesh._setVertexElement(\n          elementIndex++,\n          new VertexElement(`NORMAL_BS${i}`, offset, VertexElementFormat.Vector3, bindingOffset)\n        );\n        offset += 12;\n      }\n      if (this._useBlendTangent) {\n        modelMesh._setVertexElement(\n          elementIndex++,\n          new VertexElement(`TANGENT_BS${i}`, offset, VertexElementFormat.Vector3, bindingOffset)\n        );\n        offset += 12;\n      }\n    }\n    return elementIndex;\n  }\n\n  /**\n   * @internal\n   */\n  _update(noLongerReadable: boolean): void {\n    const { vertexCount } = this._modelMesh;\n    const useTexture = this._useTextureMode();\n    const createHost = this._isCreateHost(vertexCount);\n\n    if (createHost) {\n      if (useTexture) {\n        this._createTextureArray(vertexCount);\n      } else {\n        this._createVertexBuffers(vertexCount, noLongerReadable);\n      }\n      this._lastHostCreatedInfo.set(this._blendShapeCount, +this._useBlendNormal, +this._useBlendTangent, vertexCount);\n    }\n    if (this._needUpdateData()) {\n      if (useTexture) {\n        this._updateTextureArray(vertexCount, createHost);\n      } else {\n        this._updateVertexBuffers(vertexCount, createHost);\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _releaseMemoryCache(): void {\n    const blendShapes = this._blendShapes;\n    for (let i = 0, n = blendShapes.length; i < n; i++) {\n      blendShapes[i]._releaseData();\n    }\n\n    this._vertices = null;\n  }\n\n  private _createVertexBuffers(vertexCount: number, noLongerAccessible: boolean): void {\n    const {\n      _engine: engine,\n      _modelMesh: modelMesh,\n      _blendShapeCount: blendShapeCount,\n      _vertexBuffers: vertexBuffers\n    } = this;\n    const vertexFloatCount = this._vertexElementCount * 3;\n    const vertexByteCount = vertexFloatCount * 4;\n    const maxCountSingleBuffer = Math.floor(255 / vertexByteCount); // 255: Attribute MaxStride\n    const bufferCount = Math.ceil(blendShapeCount / maxCountSingleBuffer);\n    const floatCount = vertexFloatCount * vertexCount * Math.min(maxCountSingleBuffer, blendShapeCount);\n\n    vertexBuffers.length = bufferCount;\n    this._vertices = new Float32Array(floatCount);\n    this._maxCountSingleVertexBuffer = maxCountSingleBuffer;\n    this._storeInVertexBufferInfo.length = blendShapeCount;\n\n    const bufferBindingOffset = this._bufferBindingOffset;\n    for (let i = 0; i < bufferCount; i++) {\n      const lastIndex = bufferCount - 1;\n      const containCount = i === lastIndex ? blendShapeCount - lastIndex * maxCountSingleBuffer : maxCountSingleBuffer;\n      const stride = containCount * vertexByteCount;\n      const byteLength = stride * vertexCount;\n\n      const usage = noLongerAccessible ? BufferUsage.Static : BufferUsage.Dynamic;\n      const blendShapeBuffer = new Buffer(engine, BufferBindFlag.VertexBuffer, byteLength, usage);\n      modelMesh._setVertexBufferBinding(bufferBindingOffset + i, new VertexBufferBinding(blendShapeBuffer, stride));\n      vertexBuffers[i] = blendShapeBuffer;\n    }\n  }\n\n  private _createTextureArray(vertexCount: number): void {\n    const maxTextureSize = this._engine._hardwareRenderer.capability.maxTextureSize;\n    const vertexPixelStride = this._vertexElementCount;\n\n    let textureWidth = vertexPixelStride * vertexCount;\n    let textureHeight = 1;\n    if (textureWidth > maxTextureSize) {\n      textureHeight = Math.ceil(textureWidth / maxTextureSize);\n      textureWidth = maxTextureSize;\n    }\n\n    let blendShapeDataTexture = this._vertexTexture;\n    const blendShapeCount = this._blendShapes.length;\n\n    blendShapeDataTexture && blendShapeDataTexture.destroy();\n\n    blendShapeDataTexture = new Texture2DArray(\n      this._engine,\n      textureWidth,\n      textureHeight,\n      blendShapeCount,\n      TextureFormat.R32G32B32A32,\n      false\n    );\n    blendShapeDataTexture.filterMode = TextureFilterMode.Point;\n\n    this._vertices = new Float32Array(blendShapeCount * textureWidth * textureHeight * 4);\n    this._vertexTexture = blendShapeDataTexture;\n    this._dataTextureInfo.set(vertexPixelStride, textureWidth, textureHeight);\n  }\n\n  /**\n   * @internal\n   */\n  _updateVertexBuffers(vertexCount: number, force: boolean): void {\n    const { _blendShapes: blendShapes, _maxCountSingleVertexBuffer: maxCountSingleBuffer } = this;\n    const { _vertices: vertices, _vertexBuffers: vertexBuffers, _storeInVertexBufferInfo: storeInfos } = this;\n\n    const subDataDirtyFlags = this._subDataDirtyFlags;\n    const blendShapeFloatStride = this._vertexElementCount * 3;\n    const blendShapeByteStride = blendShapeFloatStride * 4;\n    const bufferOffset = this._bufferBindingOffset;\n\n    // @todo: should fix bug when dataChangedFlag is true\n    for (let i = 0, n = blendShapes.length; i < n; i++) {\n      const dataChangedFlag = subDataDirtyFlags[i];\n      if (force || dataChangedFlag.flag) {\n        const { frames } = blendShapes[i];\n        const frameCount = frames.length;\n        const endFrame = frames[frameCount - 1];\n        if (frameCount > 0 && endFrame.deltaPositions.length !== vertexCount) {\n          throw \"BlendShape frame deltaPositions length must same with mesh vertexCount.\";\n        }\n\n        const bufferIndex = Math.floor(i / maxCountSingleBuffer);\n        const indexInBuffer = i % maxCountSingleBuffer;\n        const buffer = vertexBuffers[bufferIndex];\n        const bufferFloatStride = buffer.byteLength / (vertexCount * 4);\n\n        let offset = indexInBuffer * blendShapeFloatStride;\n\n        let storeInfo = storeInfos[i];\n        storeInfo || (storeInfos[i] = storeInfo = new Vector2());\n        storeInfo.set(bufferOffset + bufferIndex, indexInBuffer * blendShapeByteStride); // BufferOffset is mesh vertexBuffer offset\n\n        const { deltaPositions } = endFrame;\n        for (let j = 0; j < vertexCount; j++) {\n          const start = offset + bufferFloatStride * j;\n          const deltaPosition = deltaPositions[j];\n          if (deltaPosition) {\n            vertices[start] = deltaPosition.x;\n            vertices[start + 1] = deltaPosition.y;\n            vertices[start + 2] = deltaPosition.z;\n          }\n        }\n        offset += 3;\n\n        if (this._useBlendNormal) {\n          const { deltaNormals } = endFrame;\n          if (deltaNormals) {\n            for (let j = 0; j < vertexCount; j++) {\n              const start = offset + bufferFloatStride * j;\n              const deltaNormal = deltaNormals[j];\n              if (deltaNormal) {\n                vertices[start] = deltaNormal.x;\n                vertices[start + 1] = deltaNormal.y;\n                vertices[start + 2] = deltaNormal.z;\n              }\n            }\n          }\n          offset += 3;\n        }\n\n        if (this._useBlendTangent) {\n          const { deltaTangents } = endFrame;\n          if (deltaTangents) {\n            for (let j = 0; j < vertexCount; j++) {\n              const start = offset + bufferFloatStride * j;\n              const deltaTangent = deltaTangents[j];\n              if (deltaTangent) {\n                vertices[start] = deltaTangent.x;\n                vertices[start + 1] = deltaTangent.y;\n                vertices[start + 2] = deltaTangent.z;\n              }\n            }\n          }\n          offset += 3;\n        }\n\n        if (indexInBuffer === maxCountSingleBuffer - 1 || i === n - 1) {\n          // @todo: can optimize in setData\n          buffer.setData(vertices, 0, 0, buffer.byteLength / 4);\n        }\n\n        dataChangedFlag.flag = false;\n      }\n    }\n  }\n\n  private _updateTextureArray(vertexCount: number, force: boolean): void {\n    const {\n      _blendShapes: blendShapes,\n      _vertexTexture: vertexTexture,\n      _vertices: vertices,\n      _subDataDirtyFlags: subDataDirtyFlags\n    } = this;\n\n    for (let i = 0, n = blendShapes.length; i < n; i++) {\n      const subDirtyFlag = subDataDirtyFlags[i];\n      const subBlendShapeDataStride = vertexTexture.width * vertexTexture.height * 4;\n      if (force || subDirtyFlag.flag) {\n        const { frames } = blendShapes[i];\n        const frameCount = frames.length;\n        const endFrame = frames[frameCount - 1];\n        if (frameCount > 0 && endFrame.deltaPositions.length !== vertexCount) {\n          throw \"BlendShape frame deltaPositions length must same with mesh vertexCount.\";\n        }\n\n        const { deltaPositions, deltaNormals, deltaTangents } = endFrame;\n        let offset = i * subBlendShapeDataStride;\n        for (let j = 0; j < vertexCount; j++) {\n          const position = deltaPositions[j];\n          vertices[offset] = position.x;\n          vertices[offset + 1] = position.y;\n          vertices[offset + 2] = position.z;\n          offset += 4;\n\n          if (deltaNormals) {\n            const normal = deltaNormals[j];\n            vertices[offset] = normal.x;\n            vertices[offset + 1] = normal.y;\n            vertices[offset + 2] = normal.z;\n            offset += 4;\n          }\n\n          if (deltaTangents) {\n            const tangent = deltaTangents[j];\n            vertices[offset] = tangent.x;\n            vertices[offset + 1] = tangent.y;\n            vertices[offset + 2] = tangent.z;\n            offset += 4;\n          }\n        }\n        subDirtyFlag.flag = false;\n      }\n    }\n    vertexTexture.setPixelBuffer(0, vertices);\n  }\n\n  private _updateLayoutChange(type: number, blendShape: BlendShape): void {\n    const notFirst = this._blendShapeCount > 1;\n    let vertexElementCount = 1;\n    let useBlendNormal = blendShape._useBlendShapeNormal;\n    let useBlendTangent = blendShape._useBlendShapeTangent;\n    if (notFirst) {\n      useBlendNormal &&= this._useBlendNormal;\n      useBlendTangent &&= this._useBlendTangent;\n    }\n\n    useBlendNormal && vertexElementCount++;\n    useBlendTangent && vertexElementCount++;\n\n    this._useBlendNormal = useBlendNormal;\n    this._useBlendTangent = useBlendTangent;\n    this._vertexElementCount = vertexElementCount;\n  }\n\n  private _attributeModeUpdateVertexElement(\n    vertexElements: VertexElement[],\n    vertexBufferStoreInfo: Vector2[],\n    index: number,\n    condensedIndex: number\n  ): void {\n    let elementOffset = this._vertexElementOffset + this._vertexElementCount * condensedIndex;\n\n    let { x: bufferIndex, y: offset } = vertexBufferStoreInfo[index];\n    const vertexElement = vertexElements[elementOffset];\n    vertexElement.bindingIndex = bufferIndex;\n    vertexElement.offset = offset;\n    if (this._useBlendNormal) {\n      const vertexElement = vertexElements[++elementOffset];\n      offset += 12;\n      vertexElement.bindingIndex = bufferIndex;\n      vertexElement.offset = offset;\n    }\n    if (this._useBlendTangent) {\n      const vertexElement = vertexElements[++elementOffset];\n      offset += 12;\n      vertexElement.bindingIndex = bufferIndex;\n      vertexElement.offset = offset;\n    }\n  }\n\n  private _getVertexBufferModeSupportCount(): number {\n    if (this._useBlendNormal && this._useBlendTangent) {\n      return 2;\n    } else {\n      return this._useBlendNormal || this._useBlendTangent ? 4 : 8;\n    }\n  }\n\n  private _filterCondensedBlendShapeWeights(\n    blendShapeWeights: Float32Array,\n    condensedBlendShapeWeights: Float32Array\n  ): void {\n    const condensedWeightsCount = condensedBlendShapeWeights.length;\n    const vertexElements = this._modelMesh._primitive.vertexElements;\n    const vertexBufferStoreInfo = this._storeInVertexBufferInfo;\n    let thresholdWeight = Number.POSITIVE_INFINITY;\n    let thresholdIndex: number;\n    for (let i = 0, n = Math.min(blendShapeWeights.length, this._blendShapeCount); i < n; i++) {\n      const weight = blendShapeWeights[i];\n      if (i < condensedWeightsCount) {\n        this._attributeModeUpdateVertexElement(vertexElements, vertexBufferStoreInfo, i, i);\n        condensedBlendShapeWeights[i] = weight;\n        if (weight < thresholdWeight) {\n          thresholdWeight = weight;\n          thresholdIndex = i;\n        }\n      } else if (weight > thresholdWeight) {\n        this._attributeModeUpdateVertexElement(vertexElements, vertexBufferStoreInfo, i, thresholdIndex);\n        condensedBlendShapeWeights[thresholdIndex] = weight;\n\n        thresholdWeight = Number.POSITIVE_INFINITY;\n        for (let j = 0; j < condensedWeightsCount; j++) {\n          const condensedWeight = condensedBlendShapeWeights[j];\n          if (condensedWeight < thresholdWeight) {\n            thresholdWeight = condensedWeight;\n            thresholdIndex = j;\n          }\n        }\n      }\n    }\n  }\n}\n","/**\n * Vertex attribute types of a vertex in a ModelMesh.\n */\nexport enum VertexAttribute {\n  /** Vertex position. */\n  Position = \"POSITION\",\n  /** Vertex normal. */\n  Normal = \"NORMAL\",\n  /** Vertex color. */\n  Color = \"COLOR_0\",\n  /** Vertex tangent. */\n  Tangent = \"TANGENT\",\n  /** Vertex bone weight. */\n  BoneWeight = \"WEIGHTS_0\",\n  /** Vertex bone index. */\n  BoneIndex = \"JOINTS_0\",\n  /** Vertex UV. */\n  UV = \"TEXCOORD_0\",\n  /** Vertex UV1. */\n  UV1 = \"TEXCOORD_1\",\n  /** Vertex UV2. */\n  UV2 = \"TEXCOORD_2\",\n  /** Vertex UV3. */\n  UV3 = \"TEXCOORD_3\",\n  /** Vertex UV4. */\n  UV4 = \"TEXCOORD_4\",\n  /** Vertex UV5. */\n  UV5 = \"TEXCOORD_5\",\n  /** Vertex UV6. */\n  UV6 = \"TEXCOORD_6\",\n  /** Vertex UV7. */\n  UV7 = \"TEXCOORD_7\"\n}\n","import { Color, Vector2, Vector3, Vector4 } from \"@galacean/engine-math\";\nimport { Engine } from \"../Engine\";\nimport { DataType, TypedArray } from \"../base\";\nimport { Buffer } from \"../graphic/Buffer\";\nimport { IndexBufferBinding } from \"../graphic/IndexBufferBinding\";\nimport { Mesh } from \"../graphic/Mesh\";\nimport { VertexBufferBinding } from \"../graphic/VertexBufferBinding\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { BufferBindFlag } from \"../graphic/enums/BufferBindFlag\";\nimport { BufferUsage } from \"../graphic/enums/BufferUsage\";\nimport { IndexFormat } from \"../graphic/enums/IndexFormat\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { BlendShape } from \"./BlendShape\";\nimport { BlendShapeManager } from \"./BlendShapeManager\";\nimport { VertexAttribute } from \"./enums/VertexAttribute\";\n\n/**\n * Mesh containing common vertex elements of the model.\n */\nexport class ModelMesh extends Mesh {\n  private static _tempVec0 = new Vector3();\n  private static _tempVec1 = new Vector3();\n  private static _tempVec2 = new Vector3();\n  private static _tempVec3 = new Vector3();\n  private static _tempVec4 = new Vector3();\n\n  /** @internal */\n  _blendShapeManager: BlendShapeManager;\n  /** @internal */\n  _internalVertexBufferIndex: number = -1;\n\n  private _vertexCount: number = 0;\n  private _vertexCountDirty: boolean = false;\n  private _dataVersionCounter: number = 0;\n\n  private _positions: Vector3[] | null = null;\n  private _normals: Vector3[] | null = null;\n  private _colors: Color[] | null = null;\n  private _tangents: Vector4[] | null = null;\n  private _uv: Vector2[] | null = null;\n  private _uv1: Vector2[] | null = null;\n  private _uv2: Vector2[] | null = null;\n  private _uv3: Vector2[] | null = null;\n  private _uv4: Vector2[] | null = null;\n  private _uv5: Vector2[] | null = null;\n  private _uv6: Vector2[] | null = null;\n  private _uv7: Vector2[] | null = null;\n  private _boneWeights: Vector4[] | null = null;\n  private _boneIndices: Vector4[] | null = null;\n  private _advancedElementUpdateFlag: VertexElementFlags = VertexElementFlags.None;\n  private _advancedDataUpdateFlag: VertexElementFlags = VertexElementFlags.None;\n  private _advancedVertexDataVersions: number[] = new Array<number>(14); // Only have 14 vertex element can set advanced data\n  private _advancedDataSyncToBuffer: boolean = false;\n\n  private _internalVertexBufferStride: number = 0;\n  private _internalVertexBufferCreatedInfo: Vector3 = new Vector3(0, 0, -1); // x:vertexCount, y:vertexStride, z:bufferIndex\n  private _internalVertexElementsOffset: number = 0;\n  private _internalVertexElementsFlags: VertexElementFlags = VertexElementFlags.None;\n\n  private _vertexBufferInfos: BufferUpdateInfo[] = [];\n\n  private _indices: Uint8Array | Uint16Array | Uint32Array | null = null;\n  private _indicesFormat: IndexFormat = null;\n  private _indicesChangeFlag: boolean = false;\n\n  /**\n   * Vertex count of mesh.\n   */\n  get vertexCount(): number {\n    if (this._vertexCountDirty) {\n      let vertexCount = 0;\n      const positionElement = this._primitive._vertexElementMap[VertexAttribute.Position];\n      if (positionElement) {\n        const positionBufferBinding = this._primitive.vertexBufferBindings[positionElement.bindingIndex];\n        if (positionBufferBinding) {\n          vertexCount = positionBufferBinding.buffer.byteLength / positionBufferBinding.stride;\n        }\n      }\n      this._vertexCount = vertexCount;\n      this._vertexCountDirty = false;\n    }\n    return this._vertexCount;\n  }\n\n  /**\n   * Vertex element collection.\n   */\n  get vertexElements(): Readonly<VertexElement[]> {\n    this._updateVertexElements();\n    return this._primitive.vertexElements;\n  }\n\n  /**\n   * Vertex buffer binding collection.\n   */\n  get vertexBufferBindings(): ReadonlyArray<VertexBufferBinding> {\n    // @todo: update if dirty like `vertexElements` is better\n    return this._primitive.vertexBufferBindings;\n  }\n\n  /**\n   * BlendShapes of this ModelMesh.\n   */\n  get blendShapes(): Readonly<BlendShape[]> {\n    return this._blendShapeManager._blendShapes;\n  }\n\n  /**\n   * BlendShape count of this ModelMesh.\n   */\n  get blendShapeCount(): number {\n    return this._blendShapeManager._blendShapeCount;\n  }\n\n  /**\n   * Create a model mesh.\n   * @param engine - Engine to which the mesh belongs\n   * @param name - Mesh name\n   */\n  constructor(engine: Engine, name?: string) {\n    super(engine);\n    this.name = name;\n    this._blendShapeManager = new BlendShapeManager(engine, this);\n  }\n\n  /**\n   * Set positions for the mesh.\n   * @param positions - The positions for the mesh\n   */\n  setPositions(positions: Vector3[] | null): void {\n    if (!this._positions && !positions) {\n      return;\n    }\n\n    this._updateAdvancedVertexDataMarks(VertexElementFlags.Position, VertexElementIndex.Position);\n    this._positions = positions;\n\n    this._vertexCount = positions?.length ?? 0;\n    this._vertexCountDirty = false;\n  }\n\n  /**\n   * Get positions for the mesh.\n   * @remarks Please call the setPositions() method after modification to ensure that the modification takes effect.\n   */\n  getPositions(): Vector3[] | null {\n    const positions = this._getVertexElementData(\n      this._positions,\n      VertexAttribute.Position,\n      VertexElementIndex.Position,\n      this._readVector3VertexData\n    );\n    this._positions = positions;\n    return positions;\n  }\n\n  /**\n   * Set per-vertex normals for the mesh.\n   * @param normals - The normals for the mesh\n   */\n  setNormals(normals: Vector3[] | null): void {\n    this._beforeSetAdvancedVertexData(normals, VertexElementFlags.Normal, VertexElementIndex.Normal);\n    this._normals = normals;\n  }\n\n  /**\n   * Get normals for the mesh.\n   * @remarks Please call the setNormals() method after modification to ensure that the modification takes effect.\n   */\n  getNormals(): Vector3[] | null {\n    const normals = this._getVertexElementData(\n      this._normals,\n      VertexAttribute.Normal,\n      VertexElementIndex.Normal,\n      this._readVector3VertexData\n    );\n    this._normals = normals;\n    return normals;\n  }\n\n  /**\n   * Set per-vertex colors for the mesh.\n   * @param colors - The colors for the mesh\n   */\n  setColors(colors: Color[] | null): void {\n    this._beforeSetAdvancedVertexData(colors, VertexElementFlags.Color, VertexElementIndex.Color);\n    this._colors = colors;\n  }\n\n  /**\n   * Get colors for the mesh.\n   * @remarks Please call the setColors() method after modification to ensure that the modification takes effect.\n   */\n  getColors(): Color[] | null {\n    const colors = this._getVertexElementData(\n      this._colors,\n      VertexAttribute.Color,\n      VertexElementIndex.Color,\n      this._readColorVertexData\n    );\n    this._colors = colors;\n    return colors;\n  }\n\n  /**\n   * Set per-vertex bone weights for the mesh.\n   * @param boneWeights - The bone weights for the mesh\n   */\n  setBoneWeights(boneWeights: Vector4[] | null): void {\n    this._beforeSetAdvancedVertexData(boneWeights, VertexElementFlags.BoneWeight, VertexElementIndex.BoneWeight);\n    this._boneWeights = boneWeights;\n  }\n\n  /**\n   * Get bone weights for the mesh.\n   * @remarks Please call the setWeights() method after modification to ensure that the modification takes effect.\n   */\n  getBoneWeights(): Vector4[] | null {\n    const boneWeights = this._getVertexElementData(\n      this._boneWeights,\n      VertexAttribute.BoneWeight,\n      VertexElementIndex.BoneWeight,\n      this._readVector4VertexData\n    );\n    this._boneWeights = boneWeights;\n    return boneWeights;\n  }\n\n  /**\n   * Set per-vertex bone indices for the mesh.\n   * @param boneIndices - The bone indices for the mesh\n   */\n  setBoneIndices(boneIndices: Vector4[] | null): void {\n    this._beforeSetAdvancedVertexData(boneIndices, VertexElementFlags.BoneIndex, VertexElementIndex.BoneIndex);\n    this._boneIndices = boneIndices;\n  }\n\n  /**\n   * Get bone indices for the mesh.\n   * @remarks Please call the setBoneIndices() method after modification to ensure that the modification takes effect.\n   */\n  getBoneIndices(): Vector4[] | null {\n    const boneIndices = this._getVertexElementData(\n      this._boneIndices,\n      VertexAttribute.BoneIndex,\n      VertexElementIndex.BoneIndex,\n      this._readVector4VertexData\n    );\n    this._boneIndices = boneIndices;\n    return boneIndices;\n  }\n\n  /**\n   * Set per-vertex tangents for the mesh.\n   * @param tangents - The tangents for the mesh\n   */\n  setTangents(tangents: Vector4[] | null): void {\n    this._beforeSetAdvancedVertexData(tangents, VertexElementFlags.Tangent, VertexElementIndex.Tangent);\n    this._tangents = tangents;\n  }\n\n  /**\n   * Get tangents for the mesh.\n   * @remarks Please call the setTangents() method after modification to ensure that the modification takes effect.\n   */\n  getTangents(): Vector4[] | null {\n    const tangents = this._getVertexElementData(\n      this._tangents,\n      VertexAttribute.Tangent,\n      VertexElementIndex.Tangent,\n      this._readVector4VertexData\n    );\n    this._tangents = tangents;\n    return tangents;\n  }\n\n  /**\n   * Set per-vertex uv for the mesh.\n   * @param uv - The uv for the mesh\n   */\n  setUVs(uv: Vector2[] | null): void;\n  /**\n   * Set per-vertex uv for the mesh by channelIndex.\n   * @param uv - The uv for the mesh\n   * @param channelIndex - The index of uv channels, in [0 ~ 7] range\n   */\n  setUVs(uv: Vector2[] | null, channelIndex: number): void;\n  setUVs(uv: Vector2[] | null, channelIndex?: number): void {\n    channelIndex = channelIndex ?? 0;\n    switch (channelIndex) {\n      case 0:\n        this._beforeSetAdvancedVertexData(uv, VertexElementFlags.UV, VertexElementIndex.UV);\n        this._uv = uv;\n        break;\n      case 1:\n        this._beforeSetAdvancedVertexData(uv, VertexElementFlags.UV1, VertexElementIndex.UV1);\n        this._uv1 = uv;\n        break;\n      case 2:\n        this._beforeSetAdvancedVertexData(uv, VertexElementFlags.UV2, VertexElementIndex.UV2);\n        this._uv2 = uv;\n        break;\n      case 3:\n        this._beforeSetAdvancedVertexData(uv, VertexElementFlags.UV3, VertexElementIndex.UV3);\n        this._uv3 = uv;\n        break;\n      case 4:\n        this._beforeSetAdvancedVertexData(uv, VertexElementFlags.UV4, VertexElementIndex.UV4);\n        this._uv4 = uv;\n        break;\n      case 5:\n        this._beforeSetAdvancedVertexData(uv, VertexElementFlags.UV5, VertexElementIndex.UV5);\n        this._uv5 = uv;\n        break;\n      case 6:\n        this._beforeSetAdvancedVertexData(uv, VertexElementFlags.UV6, VertexElementIndex.UV6);\n        this._uv6 = uv;\n        break;\n      case 7:\n        this._beforeSetAdvancedVertexData(uv, VertexElementFlags.UV7, VertexElementIndex.UV7);\n        this._uv7 = uv;\n        break;\n      default:\n        throw \"The index of channel needs to be in range [0 - 7].\";\n    }\n  }\n\n  /**\n   * Get uv for the mesh.\n   * @remarks Please call the setUV() method after modification to ensure that the modification takes effect.\n   */\n  getUVs(): Vector2[] | null;\n\n  /**\n   * Get uv for the mesh by channelIndex.\n   * @param channelIndex - The index of uv channels, in [0 ~ 7] range.\n   * @remarks Please call the setUV() method after modification to ensure that the modification takes effect.\n   */\n  getUVs(channelIndex: number): Vector2[] | null;\n\n  getUVs(channelIndex?: number): Vector2[] | null {\n    channelIndex = channelIndex ?? 0;\n    switch (channelIndex) {\n      case 0:\n        const uvs = this._getVertexElementData(\n          this._uv,\n          VertexAttribute.UV,\n          VertexElementIndex.UV,\n          this._readVector2VertexData\n        );\n        this._uv = uvs;\n        return uvs;\n      case 1:\n        const uv1s = this._getVertexElementData(\n          this._uv1,\n          VertexAttribute.UV1,\n          VertexElementIndex.UV1,\n          this._readVector2VertexData\n        );\n        this._uv1 = uv1s;\n        return uv1s;\n      case 2:\n        const uv2s = this._getVertexElementData(\n          this._uv2,\n          VertexAttribute.UV2,\n          VertexElementIndex.UV2,\n          this._readVector2VertexData\n        );\n        this._uv2 = uv2s;\n        return uv2s;\n      case 3:\n        const uv3s = this._getVertexElementData(\n          this._uv3,\n          VertexAttribute.UV3,\n          VertexElementIndex.UV3,\n          this._readVector2VertexData\n        );\n        this._uv3 = uv3s;\n        return uv3s;\n      case 4:\n        const uv4s = this._getVertexElementData(\n          this._uv4,\n          VertexAttribute.UV4,\n          VertexElementIndex.UV4,\n          this._readVector2VertexData\n        );\n        this._uv4 = uv4s;\n        return uv4s;\n      case 5:\n        const uv5s = this._getVertexElementData(\n          this._uv5,\n          VertexAttribute.UV5,\n          VertexElementIndex.UV5,\n          this._readVector2VertexData\n        );\n        this._uv5 = uv5s;\n        return uv5s;\n      case 6:\n        const uv6s = this._getVertexElementData(\n          this._uv6,\n          VertexAttribute.UV6,\n          VertexElementIndex.UV6,\n          this._readVector2VertexData\n        );\n        this._uv6 = uv6s;\n        return uv6s;\n      case 7:\n        const uv7s = this._getVertexElementData(\n          this._uv7,\n          VertexAttribute.UV7,\n          VertexElementIndex.UV7,\n          this._readVector2VertexData\n        );\n        this._uv7 = uv7s;\n        return uv7s;\n    }\n    throw \"The index of channel needs to be in range [0 - 7].\";\n  }\n\n  /**\n   * Set indices for the mesh.\n   * @param indices - The indices for the mesh\n   */\n  setIndices(indices: Uint8Array | Uint16Array | Uint32Array): void {\n    if (this._indices !== indices) {\n      this._indices = indices;\n      if (indices instanceof Uint8Array) {\n        this._indicesFormat = IndexFormat.UInt8;\n      } else if (indices instanceof Uint16Array) {\n        this._indicesFormat = IndexFormat.UInt16;\n      } else if (indices instanceof Uint32Array) {\n        this._indicesFormat = IndexFormat.UInt32;\n      }\n    }\n\n    this._indicesChangeFlag = true;\n  }\n\n  /**\n   * Get indices for the mesh.\n   */\n  getIndices(): Uint8Array | Uint16Array | Uint32Array {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    return this._indices;\n  }\n\n  /**\n   * Set vertex elements.\n   * @param elements - Vertex element collection\n   *\n   * @remarks\n   * Call this method will clear the vertex data set by the setPositions(), setNormals(), setColors(), setBoneWeights(), setBoneIndices(), setTangents(), setUVs() methods.\n   */\n  setVertexElements(elements: VertexElement[]): void {\n    this._clearVertexElements();\n\n    const count = elements.length;\n    for (let i = 0; i < count; i++) {\n      this._addVertexElement(elements[i]);\n    }\n\n    // Clear data if vertex element not contains\n    const vertexElementMap = this._primitive._vertexElementMap;\n    vertexElementMap[VertexAttribute.Position] || this.setPositions(null);\n    vertexElementMap[VertexAttribute.Normal] || this.setNormals(null);\n    vertexElementMap[VertexAttribute.Color] || this.setColors(null);\n    vertexElementMap[VertexAttribute.BoneWeight] || this.setBoneWeights(null);\n    vertexElementMap[VertexAttribute.BoneIndex] || this.setBoneIndices(null);\n    vertexElementMap[VertexAttribute.Tangent] || this.setTangents(null);\n    vertexElementMap[VertexAttribute.UV] || this.setUVs(null, 0);\n    vertexElementMap[VertexAttribute.UV1] || this.setUVs(null, 1);\n    vertexElementMap[VertexAttribute.UV2] || this.setUVs(null, 2);\n    vertexElementMap[VertexAttribute.UV3] || this.setUVs(null, 3);\n    vertexElementMap[VertexAttribute.UV4] || this.setUVs(null, 4);\n    vertexElementMap[VertexAttribute.UV5] || this.setUVs(null, 5);\n    vertexElementMap[VertexAttribute.UV6] || this.setUVs(null, 6);\n    vertexElementMap[VertexAttribute.UV7] || this.setUVs(null, 7);\n\n    // Destroy internal vertex buffer immediately\n    const internalVertexBufferIndex = this._internalVertexBufferCreatedInfo.z;\n    if (internalVertexBufferIndex !== -1) {\n      this._primitive.vertexBufferBindings[internalVertexBufferIndex]?.buffer.destroy();\n      this._setVertexBufferBinding(internalVertexBufferIndex, null);\n      this._internalVertexBufferCreatedInfo.z = -1;\n    }\n\n    this._internalVertexBufferStride = 0;\n    this._internalVertexElementsOffset = count;\n    this._advancedElementUpdateFlag = VertexElementFlags.None;\n    this._vertexCountDirty = true;\n    this._blendShapeManager._bufferBindingOffset = -1;\n    this._blendShapeManager._vertexElementOffset = count;\n  }\n\n  /**\n   * Set vertex buffer binding.\n   * @param vertexBufferBinding - Vertex buffer binding\n   * @param index - Vertex buffer index, the default value is 0\n   */\n  setVertexBufferBinding(vertexBufferBinding: VertexBufferBinding, index?: number): void;\n\n  /**\n   * Set vertex buffer binding.\n   * @param vertexBuffer - Vertex buffer\n   * @param stride - Vertex buffer data stride\n   * @param index - Vertex buffer index, the default value is 0\n   */\n  setVertexBufferBinding(vertexBuffer: Buffer, stride: number, index?: number): void;\n\n  setVertexBufferBinding(\n    bufferOrBinding: Buffer | VertexBufferBinding,\n    strideOrIndex: number = 0,\n    indexOrNull: number = 0\n  ): void {\n    let binding = <VertexBufferBinding>bufferOrBinding;\n    const isBinding = binding.buffer !== undefined;\n    isBinding || (binding = new VertexBufferBinding(<Buffer>bufferOrBinding, strideOrIndex));\n    const index = isBinding ? strideOrIndex : indexOrNull;\n\n    const bindings = this._primitive.vertexBufferBindings;\n    const updateInfos = this._vertexBufferInfos;\n\n    const needLength = index + 1;\n    if (bindings.length < needLength) {\n      bindings.length = needLength;\n      updateInfos.length = needLength;\n    }\n\n    this._setVertexBufferBinding(index, binding);\n\n    // Reset internal vertex buffer index if by custom buffer binding\n    if (index === this._internalVertexBufferIndex) {\n      this._internalVertexBufferIndex = -1;\n    }\n    // Reset blend shape buffer binding offset if by custom buffer binding\n    if (index === this._blendShapeManager._bufferBindingOffset) {\n      this._blendShapeManager._bufferBindingOffset = -1;\n    }\n    this._vertexCountDirty = true;\n  }\n\n  /**\n   * Set vertex buffer binding.\n   * @param vertexBufferBindings - Vertex buffer binding\n   * @param firstIndex - First vertex buffer index, the default value is 0\n   */\n  setVertexBufferBindings(vertexBufferBindings: VertexBufferBinding[], firstIndex: number = 0): void {\n    const count = vertexBufferBindings.length;\n    const bindings = this._primitive.vertexBufferBindings;\n    const updateInfos = this._vertexBufferInfos;\n\n    const needLength = firstIndex + count;\n    if (bindings.length < needLength) {\n      bindings.length = needLength;\n      updateInfos.length = needLength;\n    }\n\n    for (let i = 0; i < count; i++) {\n      const index = firstIndex + i;\n      this._setVertexBufferBinding(index, vertexBufferBindings[i]);\n      // Reset internal vertex buffer index if by custom buffer binding\n      if (index === this._internalVertexBufferIndex) {\n        this._internalVertexBufferIndex = -1;\n      }\n      // Reset blend shape buffer binding offset if by custom buffer binding\n      if (index === this._blendShapeManager._bufferBindingOffset) {\n        this._blendShapeManager._bufferBindingOffset = -1;\n      }\n    }\n    this._vertexCountDirty = true;\n  }\n\n  /**\n   * Get `VertexElement` by attribute.\n   * @param attribute - Vertex attribute\n   * @returns Vertex element\n   */\n  getVertexElement(attribute: VertexAttribute): VertexElement | null {\n    this._updateVertexElements();\n    return this._primitive._vertexElementMap[attribute];\n  }\n\n  /**\n   * Add a BlendShape for this ModelMesh.\n   * @param blendShape - The BlendShape\n   */\n  addBlendShape(blendShape: BlendShape): void {\n    this._blendShapeManager._addBlendShape(blendShape);\n  }\n\n  /**\n   * Clear all BlendShapes.\n   */\n  clearBlendShapes(): void {\n    this._blendShapeManager._clearBlendShapes();\n  }\n\n  /**\n   * Get name of BlendShape by given index.\n   * @param index - The index of BlendShape\n   * @returns The name of BlendShape\n   */\n  getBlendShapeName(index: number): string {\n    const blendShapes = this._blendShapeManager._blendShapes;\n    return blendShapes[index].name;\n  }\n\n  /**\n   * Upload data to GPU set by `setPositions()`, `setNormals()`, `setColors()`, `setBoneWeights()`, `setBoneIndices()`, `setTangents()`, `setUVs()`, `setIndices()` methods.\n   * This method will be auto generate vertex element and vertex buffer binding if needed.\n   *\n   * @param releaseData - Whether to release the data cache, release data can reduce memory usage.\n   */\n  uploadData(releaseData: boolean): void {\n    this._updateVertexElements();\n\n    // Shouldn't update buffer data version when sync advanced data to buffer\n    this._advancedDataSyncToBuffer = true;\n\n    // Update internal vertex buffer if needed\n    this._updateInternalVertexBuffer(releaseData);\n\n    // Update advanced vertex data to buffer\n    if (this._advancedDataUpdateFlag & VertexElementFlags.All) {\n      this._updateAdvancedVertices();\n\n      const vertexBufferInfos = this._vertexBufferInfos;\n      const vertexBufferBindings = this._primitive.vertexBufferBindings;\n      for (let i = 0, n = vertexBufferBindings.length; i < n; i++) {\n        const vertexBufferInfo = vertexBufferInfos[i];\n        // VertexBufferInfo maybe undefined\n        if (vertexBufferInfo?.uploadAdvancedData) {\n          const buffer = vertexBufferBindings[i]?.buffer;\n          buffer.setData(buffer.data);\n          vertexBufferInfo.uploadAdvancedData = false;\n        }\n      }\n    }\n    this._advancedDataSyncToBuffer = false;\n\n    if (this._indicesChangeFlag) {\n      const { _indices: indices } = this;\n      const indexBuffer = this._primitive.indexBufferBinding?._buffer;\n      if (indices) {\n        if (!indexBuffer || indices.byteLength != indexBuffer.byteLength) {\n          indexBuffer?.destroy();\n          const newIndexBuffer = new Buffer(this._engine, BufferBindFlag.IndexBuffer, indices);\n          this._setIndexBufferBinding(new IndexBufferBinding(newIndexBuffer, this._indicesFormat));\n        } else {\n          indexBuffer.setData(indices);\n          if (this._primitive.indexBufferBinding._format !== this._indicesFormat) {\n            this._setIndexBufferBinding(new IndexBufferBinding(indexBuffer, this._indicesFormat));\n          }\n        }\n      } else if (indexBuffer) {\n        indexBuffer.destroy();\n        this._setIndexBufferBinding(null);\n      }\n\n      this._indicesChangeFlag = false;\n    }\n\n    const blendShapeManager = this._blendShapeManager;\n    blendShapeManager._blendShapeCount > 0 && blendShapeManager._update(releaseData);\n\n    if (releaseData) {\n      this._accessible = false;\n      this._releaseCache(false);\n    }\n  }\n\n  /**\n   * Calculate mesh tangent.\n   * @remark need to set positions(with or not with indices), normals, uv before calculation.\n   * @remark based on http://foundationsofgameenginedev.com/FGED2-sample.pdf\n   */\n  calculateTangents(): void {\n    const positions = this.getPositions();\n    const normals = this.getNormals();\n    const uvs = this.getUVs();\n\n    if (!normals || !uvs) {\n      throw \"Set normal and uv before calculation.\";\n    }\n\n    const { _indices: indices, vertexCount } = this;\n    const { _tempVec0: e1, _tempVec1: e2, _tempVec2: t, _tempVec3: b, _tempVec4: temp } = ModelMesh;\n    const triangleCount = indices ? indices.length / 3 : positions.length / 3;\n    const tangents = new Array<Vector4>(vertexCount);\n    const biTangents = new Array<Vector3>(vertexCount);\n    for (let i = 0; i < vertexCount; i++) {\n      tangents[i] = new Vector4();\n      biTangents[i] = new Vector3();\n    }\n\n    // Calculate tangent and bi-tangent for each triangle and add to all three vertices.\n    for (let k = 0; k < triangleCount; k++) {\n      let i0 = 3 * k;\n      let i1 = 3 * k + 1;\n      let i2 = 3 * k + 2;\n      if (indices) {\n        i0 = indices[i0];\n        i1 = indices[i1];\n        i2 = indices[i2];\n      }\n\n      const p0 = positions[i0];\n      const p1 = positions[i1];\n      const p2 = positions[i2];\n      const w0 = uvs[i0];\n      const w1 = uvs[i1];\n      const w2 = uvs[i2];\n\n      Vector3.subtract(p1, p0, e1);\n      Vector3.subtract(p2, p0, e2);\n      const x1 = w1.x - w0.x;\n      const x2 = w2.x - w0.x;\n      const y1 = w1.y - w0.y;\n      const y2 = w2.y - w0.y;\n      const r = 1.0 / (x1 * y2 - x2 * y1);\n\n      Vector3.scale(e1, y2 * r, t);\n      Vector3.scale(e2, y1 * r, temp);\n      Vector3.subtract(t, temp, t);\n      Vector3.scale(e2, x1 * r, b);\n      Vector3.scale(e1, x2 * r, temp);\n      Vector3.subtract(b, temp, b);\n\n      let tangent = tangents[i0];\n      tangent.set(tangent.x + t.x, tangent.y + t.y, tangent.z + t.z, 1.0);\n\n      tangent = tangents[i1];\n      tangent.set(tangent.x + t.x, tangent.y + t.y, tangent.z + t.z, 1.0);\n\n      tangent = tangents[i2];\n      tangent.set(tangent.x + t.x, tangent.y + t.y, tangent.z + t.z, 1.0);\n\n      biTangents[i0].add(b);\n      biTangents[i1].add(b);\n      biTangents[i2].add(b);\n    }\n\n    // Orthonormalize each tangent and calculate the handedness.\n    for (let i = 0; i < vertexCount; i++) {\n      const n = normals[i];\n      const b = biTangents[i];\n      const tangent = tangents[i];\n      t.set(tangent.x, tangent.y, tangent.z);\n\n      Vector3.cross(t, b, temp);\n      const w = Vector3.dot(temp, n) > 0.0 ? 1 : -1;\n      Vector3.scale(n, Vector3.dot(t, n), temp);\n      Vector3.subtract(t, temp, t);\n      t.normalize();\n      tangent.set(t.x, t.y, t.z, w);\n    }\n    this.setTangents(tangents);\n  }\n\n  /**\n   * @internal\n   */\n  override _setVertexBufferBinding(index: number, binding: VertexBufferBinding): void {\n    const vertexBufferBindings = this._primitive.vertexBufferBindings;\n    const updateInfos = this._vertexBufferInfos;\n    const onVertexBufferChanged = () => {\n      if (!this._advancedDataSyncToBuffer) {\n        updateInfos[index].dataVersion = this._dataVersionCounter++;\n      }\n    };\n\n    // Remove listener from previous binding\n    const previousBinding = vertexBufferBindings[index];\n    previousBinding && previousBinding.buffer._dataUpdateManager.removeListener(onVertexBufferChanged);\n\n    super._setVertexBufferBinding(index, binding);\n\n    // Add listener to new binding and trigger update\n    if (binding) {\n      binding.buffer._dataUpdateManager.addListener(onVertexBufferChanged);\n      (updateInfos[index] ||= new BufferUpdateInfo()).reset();\n      onVertexBufferChanged();\n    } else {\n      if (index + 1 == vertexBufferBindings.length) {\n        vertexBufferBindings.length--;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _getVertexTypedArray(vertexDataBuffer: ArrayBuffer, dataType: DataType): TypedArray {\n    switch (dataType) {\n      case DataType.BYTE:\n        return new Int8Array(vertexDataBuffer);\n      case DataType.UNSIGNED_BYTE:\n        return new Uint8Array(vertexDataBuffer);\n      case DataType.SHORT:\n        return new Int16Array(vertexDataBuffer);\n      case DataType.UNSIGNED_SHORT:\n        return new Uint16Array(vertexDataBuffer);\n      case DataType.FLOAT:\n        return new Float32Array(vertexDataBuffer);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  protected override _onDestroy(): void {\n    super._onDestroy();\n    this._releaseCache(true);\n  }\n\n  private _getVertexElementData<T extends VertexType>(\n    vertices: T[],\n    vertexAttribute: VertexAttribute,\n    vertexElementIndex: VertexElementIndex,\n    readVertexData: (vertexAttribute: VertexAttribute) => T[]\n  ): T[] | null {\n    const advancedVertexDataVersions = this._advancedVertexDataVersions;\n    const advancedDataVersion = advancedVertexDataVersions[vertexElementIndex] ?? -1;\n    const vertexElement = this._primitive._vertexElementMap[vertexAttribute];\n    const bufferDataVersion = vertexElement ? this._vertexBufferInfos[vertexElement.bindingIndex].dataVersion : -1;\n    if (advancedDataVersion >= bufferDataVersion) {\n      return vertices;\n    } else {\n      advancedVertexDataVersions[vertexElementIndex] = bufferDataVersion;\n      return readVertexData.call(this, vertexAttribute);\n    }\n  }\n\n  private _beforeSetAdvancedVertexData<T extends VertexType>(\n    vertices: T[],\n    elementChangeFlag: VertexElementFlags,\n    elementIndex: VertexElementIndex\n  ): void {\n    if (vertices) {\n      if (vertices.length !== this._vertexCount) {\n        throw \"The array provided needs to be the same size as vertex count.\";\n      }\n    }\n\n    this._updateAdvancedVertexDataMarks(elementChangeFlag, elementIndex);\n  }\n\n  private _updateAdvancedVertexDataMarks<T extends VertexType>(\n    elementChangeFlag: VertexElementFlags,\n    elementIndex: VertexElementIndex\n  ): void {\n    this._advancedElementUpdateFlag |= elementChangeFlag;\n    this._advancedDataUpdateFlag |= elementChangeFlag;\n    this._advancedVertexDataVersions[elementIndex] = this._dataVersionCounter++;\n  }\n\n  private _updateInternalVertexBuffer(releaseData: boolean): void {\n    const bufferStride = this._internalVertexBufferStride;\n    const vertexCount = this.vertexCount;\n    const bufferCreatedInfo = this._internalVertexBufferCreatedInfo;\n\n    // If need recreate internal vertex buffer\n    const needByteLength = bufferStride * vertexCount;\n    if (bufferCreatedInfo.x * bufferCreatedInfo.y !== needByteLength) {\n      // Destroy old internal vertex buffer\n      const createdInternalBufferIndex = bufferCreatedInfo.z;\n      if (createdInternalBufferIndex !== -1) {\n        this._primitive.vertexBufferBindings[createdInternalBufferIndex]?.buffer.destroy();\n        this._setVertexBufferBinding(createdInternalBufferIndex, null);\n      }\n\n      const vertexBufferIndex = this._internalVertexBufferIndex;\n      const isCreate = bufferStride * this.vertexCount > 0;\n      if (isCreate) {\n        // No matter the internal buffer is stride change or vertex count change, we need set to internal buffer again\n        this._advancedDataUpdateFlag |= this._internalVertexElementsFlags;\n\n        const bufferUsage = releaseData ? BufferUsage.Static : BufferUsage.Dynamic;\n        const vertexBuffer = new Buffer(this._engine, BufferBindFlag.VertexBuffer, needByteLength, bufferUsage, true);\n        this._setVertexBufferBinding(vertexBufferIndex, new VertexBufferBinding(vertexBuffer, bufferStride));\n      }\n      bufferCreatedInfo.set(bufferStride, vertexCount, isCreate ? vertexBufferIndex : -1);\n    }\n  }\n\n  private _readVector2VertexData(attributeType: string): Vector2[] {\n    return this._readVertexData<Vector2>(attributeType, (dataReader: TypedArray, offset: number) => {\n      return new Vector2(dataReader[offset], dataReader[offset + 1]);\n    });\n  }\n\n  private _readVector3VertexData(attributeType: string): Vector3[] {\n    return this._readVertexData<Vector3>(attributeType, (dataReader: TypedArray, offset: number) => {\n      return new Vector3(dataReader[offset], dataReader[offset + 1], dataReader[offset + 2]);\n    });\n  }\n\n  private _readVector4VertexData(attributeType: string): Vector4[] {\n    return this._readVertexData<Vector4>(attributeType, (dataReader: TypedArray, offset: number) => {\n      return new Vector4(dataReader[offset], dataReader[offset + 1], dataReader[offset + 2], dataReader[offset + 3]);\n    });\n  }\n\n  private _readColorVertexData(attributeType: string): Color[] {\n    return this._readVertexData<Color>(attributeType, (dataReader: TypedArray, offset: number) => {\n      return new Color(dataReader[offset], dataReader[offset + 1], dataReader[offset + 2], dataReader[offset + 3]);\n    });\n  }\n\n  private _readVertexData<T extends VertexType>(\n    attributeType: string,\n    onVertexParse: (dataReader: TypedArray, offset: number) => T\n  ): T[] {\n    const primitive = this._primitive;\n    const vertexElement = primitive._vertexElementMap[attributeType];\n    if (!vertexElement) {\n      return null;\n    }\n\n    const bufferBinding = primitive.vertexBufferBindings[vertexElement.bindingIndex];\n    const buffer = bufferBinding?.buffer;\n    if (!buffer) {\n      return null;\n    }\n    if (!buffer.readable) {\n      throw \"Not allowed to access data while vertex buffer readable is false.\";\n    }\n\n    const vertexCount = this.vertexCount;\n    const formatMetaInfo = vertexElement._formatMetaInfo;\n    const vertices = new Array<T>(vertexCount);\n    const dataReader = this._getVertexTypedArray(buffer.data.buffer, formatMetaInfo.type);\n    const byteOffset = vertexElement.offset;\n    const byteStride = bufferBinding.stride;\n\n    for (let i = 0; i < vertexCount; i++) {\n      const offset = (i * byteStride + byteOffset) / dataReader.BYTES_PER_ELEMENT;\n      const vertex = onVertexParse(dataReader, offset);\n      formatMetaInfo.normalized && vertex.scale(formatMetaInfo.normalizedScaleFactor);\n      vertices[i] = vertex;\n    }\n\n    return vertices;\n  }\n\n  private _updateAdvancedVertexElement(\n    vertices: VertexType[],\n    attribute: VertexAttribute,\n    flag: VertexElementFlags\n  ): void {\n    const primitive = this._primitive;\n    const vertexElementMap = primitive._vertexElementMap;\n\n    if (vertices) {\n      if (!vertexElementMap[attribute]) {\n        const format = this._getAttributeFormat(attribute);\n        const offset = this._internalVertexBufferStride;\n        const bufferIndex = this._getInternalVertexBufferIndex();\n        this._addVertexElement(new VertexElement(attribute, offset, format, bufferIndex));\n\n        this._internalVertexBufferStride += this._getAttributeByteLength(attribute);\n        this._internalVertexElementsFlags |= flag;\n        this._blendShapeManager._vertexElementOffset++;\n      }\n    } else {\n      const vertexElement = vertexElementMap[attribute];\n      if (vertexElement) {\n        const index = this._primitive.vertexElements.indexOf(vertexElement);\n        if (index >= this._internalVertexElementsOffset) {\n          this._internalVertexBufferStride -= this._getAttributeByteLength(attribute);\n          this._internalVertexElementsFlags &= ~flag;\n        } else {\n          // If custom element should be removed\n          this._internalVertexElementsOffset--;\n        }\n\n        this._blendShapeManager._vertexElementOffset--;\n        this._removeVertexElement(index);\n      }\n    }\n  }\n\n  private _updateAdvancedVertexElements(): void {\n    const advancedElementUpdateFlag = this._advancedElementUpdateFlag;\n\n    if (advancedElementUpdateFlag & VertexElementFlags.Position) {\n      this._updateAdvancedVertexElement(this._positions, VertexAttribute.Position, VertexElementFlags.Position);\n    }\n\n    if (advancedElementUpdateFlag & VertexElementFlags.Normal) {\n      this._updateAdvancedVertexElement(this._normals, VertexAttribute.Normal, VertexElementFlags.Normal);\n    }\n\n    if (advancedElementUpdateFlag & VertexElementFlags.Color) {\n      this._updateAdvancedVertexElement(this._colors, VertexAttribute.Color, VertexElementFlags.Color);\n    }\n\n    if (advancedElementUpdateFlag & VertexElementFlags.BoneWeight) {\n      this._updateAdvancedVertexElement(this._boneWeights, VertexAttribute.BoneWeight, VertexElementFlags.BoneWeight);\n    }\n\n    if (advancedElementUpdateFlag & VertexElementFlags.BoneIndex) {\n      this._updateAdvancedVertexElement(this._boneIndices, VertexAttribute.BoneIndex, VertexElementFlags.BoneIndex);\n    }\n\n    if (advancedElementUpdateFlag & VertexElementFlags.Tangent) {\n      this._updateAdvancedVertexElement(this._tangents, VertexAttribute.Tangent, VertexElementFlags.Tangent);\n    }\n\n    if (advancedElementUpdateFlag & VertexElementFlags.UV) {\n      this._updateAdvancedVertexElement(this._uv, VertexAttribute.UV, VertexElementFlags.UV);\n    }\n\n    if (advancedElementUpdateFlag & VertexElementFlags.UV1) {\n      this._updateAdvancedVertexElement(this._uv1, VertexAttribute.UV1, VertexElementFlags.UV1);\n    }\n\n    if (advancedElementUpdateFlag & VertexElementFlags.UV2) {\n      this._updateAdvancedVertexElement(this._uv2, VertexAttribute.UV2, VertexElementFlags.UV2);\n    }\n\n    if (advancedElementUpdateFlag & VertexElementFlags.UV3) {\n      this._updateAdvancedVertexElement(this._uv3, VertexAttribute.UV3, VertexElementFlags.UV3);\n    }\n\n    if (advancedElementUpdateFlag & VertexElementFlags.UV4) {\n      this._updateAdvancedVertexElement(this._uv4, VertexAttribute.UV4, VertexElementFlags.UV4);\n    }\n\n    if (advancedElementUpdateFlag & VertexElementFlags.UV5) {\n      this._updateAdvancedVertexElement(this._uv5, VertexAttribute.UV5, VertexElementFlags.UV5);\n    }\n\n    if (advancedElementUpdateFlag & VertexElementFlags.UV6) {\n      this._updateAdvancedVertexElement(this._uv6, VertexAttribute.UV6, VertexElementFlags.UV6);\n    }\n\n    if (advancedElementUpdateFlag & VertexElementFlags.UV7) {\n      this._updateAdvancedVertexElement(this._uv7, VertexAttribute.UV7, VertexElementFlags.UV7);\n    }\n  }\n\n  private _updateVertexElements(): void {\n    const vertexElements = this._primitive.vertexElements;\n    const bsManager = this._blendShapeManager;\n    const previousCount = vertexElements.length;\n    const previousBSOffset = bsManager._vertexElementOffset;\n\n    if (this._advancedElementUpdateFlag & VertexElementFlags.All) {\n      this._updateAdvancedVertexElements();\n      this._advancedElementUpdateFlag = VertexElementFlags.None;\n    }\n\n    const bsUpdate = !bsManager._useTextureMode() && bsManager._vertexElementsNeedUpdate();\n    if (previousBSOffset !== bsManager._vertexElementOffset || (bsUpdate && bsManager._blendShapeCount > 0)) {\n      const length = bsManager._addVertexElements(this);\n      if (length < previousCount) {\n        this._setVertexElementsLength(length);\n      }\n    }\n  }\n\n  private _writeVector2AdvancedVertexData(\n    attribute: VertexAttribute,\n    elementIndex: VertexElementIndex,\n    vertices: Vector2[]\n  ): void {\n    this._writeAdvancedVertexData(attribute, elementIndex, (typedArray: TypedArray, offset: number, index: number) => {\n      const vertex = vertices[index]; // vertex maybe null or advanced data array length less than vertexCount\n      if (vertex) {\n        typedArray[offset] = vertex.x;\n        typedArray[offset + 1] = vertex.y;\n      }\n    });\n  }\n\n  private _writeVector3AdvancedVertexData(\n    attribute: VertexAttribute,\n    elementIndex: VertexElementIndex,\n    vertices: Vector3[]\n  ): void {\n    this._writeAdvancedVertexData(attribute, elementIndex, (typedArray: TypedArray, offset: number, index: number) => {\n      const vertex = vertices[index];\n      if (vertex) {\n        typedArray[offset] = vertex.x;\n        typedArray[offset + 1] = vertex.y;\n        typedArray[offset + 2] = vertex.z;\n      }\n    });\n  }\n\n  private _writeVector4AdvancedVertexData(\n    attribute: VertexAttribute,\n    elementIndex: VertexElementIndex,\n    vertices: Vector4[]\n  ): void {\n    this._writeAdvancedVertexData(attribute, elementIndex, (typedArray: TypedArray, offset: number, index: number) => {\n      const vertex = vertices[index];\n      if (vertex) {\n        typedArray[offset] = vertex.x;\n        typedArray[offset + 1] = vertex.y;\n        typedArray[offset + 2] = vertex.z;\n        typedArray[offset + 3] = vertex.w;\n      }\n    });\n  }\n\n  private _writeColorAdvancedVertexData(\n    attribute: VertexAttribute,\n    elementIndex: VertexElementIndex,\n    vertices: Color[]\n  ): void {\n    this._writeAdvancedVertexData(attribute, elementIndex, (typedArray: TypedArray, offset: number, index: number) => {\n      const vertex = vertices[index];\n      if (vertex) {\n        typedArray[offset] = vertex.r;\n        typedArray[offset + 1] = vertex.g;\n        typedArray[offset + 2] = vertex.b;\n        typedArray[offset + 3] = vertex.a;\n      }\n    });\n  }\n\n  private _writeAdvancedVertexData(\n    attribute: VertexAttribute,\n    elementIndex: VertexElementIndex,\n    onVertexWrite: (typedArray: TypedArray, offset: number, index: number) => void\n  ): void {\n    const primitive = this._primitive;\n    const vertexElement = primitive._vertexElementMap[attribute];\n    const bindingIndex = vertexElement.bindingIndex;\n    const bufferBinding = primitive.vertexBufferBindings[bindingIndex];\n    const buffer = bufferBinding?.buffer;\n    if (!buffer) {\n      return;\n    }\n    if (!buffer.readable) {\n      throw \"Vertex buffer is not readable, can't write vertex data.\";\n    }\n\n    const advancedDataVersion = this._advancedVertexDataVersions[elementIndex] ?? -1;\n    const vertexBufferInfo = this._vertexBufferInfos[bindingIndex];\n    if (advancedDataVersion > vertexBufferInfo.dataVersion) {\n      const formatMetaInfo = vertexElement._formatMetaInfo;\n      const typedArray = this._getVertexTypedArray(buffer.data.buffer, formatMetaInfo.type);\n      const byteOffset = vertexElement.offset;\n      const byteStride = bufferBinding.stride;\n      const { BYTES_PER_ELEMENT } = typedArray;\n\n      const { normalized, size, normalizedScaleFactor } = formatMetaInfo;\n      for (let i = 0, n = this._vertexCount; i < n; i++) {\n        const offset = (i * byteStride + byteOffset) / BYTES_PER_ELEMENT;\n        onVertexWrite(typedArray, offset, i);\n        if (normalized) {\n          for (let j = 0; j < size; j++) {\n            typedArray[offset + j] /= normalizedScaleFactor;\n          }\n        }\n      }\n      vertexBufferInfo.uploadAdvancedData = true;\n    }\n  }\n\n  private _updateAdvancedVertices(): void {\n    // prettier-ignore\n    const { _positions, _normals, _colors, _advancedDataUpdateFlag, _boneWeights, _boneIndices, _tangents, _uv, _uv1, _uv2, _uv3, _uv4, _uv5, _uv6, _uv7 } = this;\n\n    if (_advancedDataUpdateFlag & VertexElementFlags.Position) {\n      this._writeVector3AdvancedVertexData(VertexAttribute.Position, VertexElementIndex.Position, _positions);\n    }\n\n    if (_normals && _advancedDataUpdateFlag & VertexElementFlags.Normal) {\n      this._writeVector3AdvancedVertexData(VertexAttribute.Normal, VertexElementIndex.Normal, _normals);\n    }\n\n    if (_colors && _advancedDataUpdateFlag & VertexElementFlags.Color) {\n      this._writeColorAdvancedVertexData(VertexAttribute.Color, VertexElementIndex.Color, _colors);\n    }\n\n    if (_boneWeights && _advancedDataUpdateFlag & VertexElementFlags.BoneWeight) {\n      this._writeVector4AdvancedVertexData(VertexAttribute.BoneWeight, VertexElementIndex.BoneWeight, _boneWeights);\n    }\n\n    if (_boneIndices && _advancedDataUpdateFlag & VertexElementFlags.BoneIndex) {\n      this._writeVector4AdvancedVertexData(VertexAttribute.BoneIndex, VertexElementIndex.BoneIndex, _boneIndices);\n    }\n\n    if (_tangents && _advancedDataUpdateFlag & VertexElementFlags.Tangent) {\n      this._writeVector4AdvancedVertexData(VertexAttribute.Tangent, VertexElementIndex.Tangent, _tangents);\n    }\n\n    if (_uv && _advancedDataUpdateFlag & VertexElementFlags.UV) {\n      this._writeVector2AdvancedVertexData(VertexAttribute.UV, VertexElementIndex.UV, _uv);\n    }\n\n    if (_uv1 && _advancedDataUpdateFlag & VertexElementFlags.UV1) {\n      this._writeVector2AdvancedVertexData(VertexAttribute.UV1, VertexElementIndex.UV1, _uv1);\n    }\n\n    if (_uv2 && _advancedDataUpdateFlag & VertexElementFlags.UV2) {\n      this._writeVector2AdvancedVertexData(VertexAttribute.UV2, VertexElementIndex.UV2, _uv2);\n    }\n\n    if (_uv3 && _advancedDataUpdateFlag & VertexElementFlags.UV3) {\n      this._writeVector2AdvancedVertexData(VertexAttribute.UV3, VertexElementIndex.UV3, _uv3);\n    }\n\n    if (_uv4 && _advancedDataUpdateFlag & VertexElementFlags.UV4) {\n      this._writeVector2AdvancedVertexData(VertexAttribute.UV4, VertexElementIndex.UV4, _uv4);\n    }\n\n    if (_uv5 && _advancedDataUpdateFlag & VertexElementFlags.UV5) {\n      this._writeVector2AdvancedVertexData(VertexAttribute.UV5, VertexElementIndex.UV5, _uv5);\n    }\n\n    if (_uv6 && _advancedDataUpdateFlag & VertexElementFlags.UV6) {\n      this._writeVector2AdvancedVertexData(VertexAttribute.UV6, VertexElementIndex.UV6, _uv6);\n    }\n\n    if (_uv7 && _advancedDataUpdateFlag & VertexElementFlags.UV7) {\n      this._writeVector2AdvancedVertexData(VertexAttribute.UV7, VertexElementIndex.UV7, _uv7);\n    }\n\n    this._advancedDataUpdateFlag = 0;\n  }\n\n  private _getInternalVertexBufferIndex(): number {\n    const internalVertexBufferIndex = this._internalVertexBufferIndex;\n    if (internalVertexBufferIndex !== -1) {\n      return internalVertexBufferIndex;\n    }\n\n    let i = 0;\n    const vertexBufferBindings = this._primitive.vertexBufferBindings;\n    for (let n = vertexBufferBindings.length; i < n; i++) {\n      if (!vertexBufferBindings[i]) {\n        break;\n      }\n    }\n    this._internalVertexBufferIndex = i;\n    return i;\n  }\n\n  private _getAttributeFormat(attribute: VertexAttribute): VertexElementFormat {\n    switch (attribute) {\n      case VertexAttribute.Position:\n      case VertexAttribute.Normal:\n        return VertexElementFormat.Vector3;\n      case VertexAttribute.Color:\n      case VertexAttribute.BoneWeight:\n      case VertexAttribute.Tangent:\n        return VertexElementFormat.Vector4;\n      case VertexAttribute.BoneIndex:\n        return VertexElementFormat.UByte4;\n      case VertexAttribute.UV:\n      case VertexAttribute.UV1:\n      case VertexAttribute.UV2:\n      case VertexAttribute.UV3:\n      case VertexAttribute.UV4:\n      case VertexAttribute.UV5:\n      case VertexAttribute.UV6:\n      case VertexAttribute.UV7:\n        return VertexElementFormat.Vector2;\n    }\n  }\n\n  private _getAttributeByteLength(attribute: VertexAttribute): number {\n    switch (attribute) {\n      case VertexAttribute.Position:\n      case VertexAttribute.Normal:\n        return 12;\n      case VertexAttribute.Color:\n      case VertexAttribute.BoneWeight:\n      case VertexAttribute.Tangent:\n        return 16;\n      case VertexAttribute.BoneIndex:\n        return 4;\n      case VertexAttribute.UV:\n      case VertexAttribute.UV1:\n      case VertexAttribute.UV2:\n      case VertexAttribute.UV3:\n      case VertexAttribute.UV4:\n      case VertexAttribute.UV5:\n      case VertexAttribute.UV6:\n      case VertexAttribute.UV7:\n        return 8;\n    }\n  }\n\n  private _releaseCache(isDestroy: boolean): void {\n    this._positions = null;\n    this._tangents = null;\n    this._normals = null;\n    this._colors = null;\n    this._boneIndices = null;\n    this._boneWeights = null;\n    this._uv = null;\n    this._uv1 = null;\n    this._uv2 = null;\n    this._uv3 = null;\n    this._uv4 = null;\n    this._uv5 = null;\n    this._uv6 = null;\n    this._uv7 = null;\n    this._indices = null;\n    this._blendShapeManager._releaseMemoryCache();\n\n    if (!isDestroy) {\n      this._primitive.vertexBufferBindings[this._internalVertexBufferIndex]?.buffer.markAsUnreadable();\n\n      // If release data, we need update buffer data version to ensure get data method can read buffer\n      const dataVersion = this._dataVersionCounter++;\n      const vertexBufferInfos = this._vertexBufferInfos;\n      for (let i = 0, n = vertexBufferInfos.length; i < n; i++) {\n        const vertexBufferInfo = vertexBufferInfos[i];\n        vertexBufferInfo && (vertexBufferInfo.dataVersion = dataVersion);\n      }\n    }\n  }\n\n  /** @deprecated */\n  private _accessible: boolean = true;\n\n  /**\n   * @deprecated\n   * Whether to access data of the mesh.\n   */\n  get accessible(): boolean {\n    return this._accessible;\n  }\n}\n\nclass BufferUpdateInfo {\n  dataVersion: number = -1;\n  uploadAdvancedData: boolean = false;\n\n  reset(): void {\n    this.uploadAdvancedData = false;\n  }\n}\n\nenum VertexElementFlags {\n  None = 0,\n  Position = 0x1,\n  Normal = 0x2,\n  Color = 0x4,\n  Tangent = 0x8,\n  BoneWeight = 0x10,\n  BoneIndex = 0x20,\n  UV = 0x40,\n  UV1 = 0x80,\n  UV2 = 0x100,\n  UV3 = 0x200,\n  UV4 = 0x400,\n  UV5 = 0x800,\n  UV6 = 0x1000,\n  UV7 = 0x2000,\n  All = 0xffff\n}\n\nenum VertexElementIndex {\n  Position = 0,\n  Normal = 1,\n  Color = 2,\n  Tangent = 3,\n  BoneWeight = 4,\n  BoneIndex = 5,\n  UV = 6,\n  UV1 = 7,\n  UV2 = 8,\n  UV3 = 9,\n  UV4 = 10,\n  UV5 = 11,\n  UV6 = 12,\n  UV7 = 13\n}\n\ntype VertexType = Vector2 | Vector3 | Vector4 | Color;\n","import { ContentRestorer } from \"../asset/ContentRestorer\";\nimport { Buffer } from \"../graphic/Buffer\";\nimport { ModelMesh } from \"./ModelMesh\";\nimport { PrimitiveMesh } from \"./PrimitiveMesh\";\n\n/**\n * @internal\n */\nexport class PrimitiveMeshRestorer extends ContentRestorer<ModelMesh> {\n  constructor(\n    resource: ModelMesh,\n    public primitiveInfo: PrimitiveRestoreInfo\n  ) {\n    super(resource);\n  }\n\n  override restoreContent(): void {\n    const primitiveInfo = this.primitiveInfo;\n    switch (primitiveInfo.type) {\n      case PrimitiveType.Sphere:\n        const sphereInfo = <SphereRestoreInfo>primitiveInfo;\n        PrimitiveMesh._setSphereData(\n          this.resource,\n          sphereInfo.radius,\n          sphereInfo.segments,\n          sphereInfo.noLongerAccessible,\n          true,\n          sphereInfo.vertexBuffer\n        );\n        break;\n\n      case PrimitiveType.CCSphere:\n        const CCSphereInfo = <SubdivisionSurfaceSphereRestoreInfo>primitiveInfo;\n        PrimitiveMesh._setSubdivisionSurfaceSphereData(\n          this.resource,\n          CCSphereInfo.radius,\n          CCSphereInfo.step,\n          CCSphereInfo.noLongerAccessible,\n          true,\n          CCSphereInfo.vertexBuffer\n        );\n        break;\n\n      case PrimitiveType.Cuboid:\n        const cuboidInfo = <CuboidRestoreInfo>primitiveInfo;\n        PrimitiveMesh._setCuboidData(\n          this.resource,\n          cuboidInfo.width,\n          cuboidInfo.height,\n          cuboidInfo.depth,\n          cuboidInfo.noLongerAccessible,\n          true,\n          cuboidInfo.vertexBuffer\n        );\n        break;\n      case PrimitiveType.Plane:\n        const planeInfo = <PlaneRestoreInfo>primitiveInfo;\n        PrimitiveMesh._setPlaneData(\n          this.resource,\n          planeInfo.width,\n          planeInfo.height,\n          planeInfo.horizontalSegments,\n          planeInfo.verticalSegments,\n          planeInfo.noLongerAccessible,\n          true,\n          planeInfo.vertexBuffer\n        );\n        break;\n      case PrimitiveType.Cylinder:\n        const cylinderInfo = <CylinderRestoreInfo>primitiveInfo;\n        PrimitiveMesh._setCylinderData(\n          this.resource,\n          cylinderInfo.radiusTop,\n          cylinderInfo.radiusBottom,\n          cylinderInfo.height,\n          cylinderInfo.radialSegments,\n          cylinderInfo.heightSegments,\n          cylinderInfo.noLongerAccessible,\n          true,\n          cylinderInfo.vertexBuffer\n        );\n        break;\n      case PrimitiveType.Torus:\n        const torusInfo = <TorusRestoreInfo>primitiveInfo;\n        PrimitiveMesh._setTorusData(\n          this.resource,\n          torusInfo.radius,\n          torusInfo.tubeRadius,\n          torusInfo.radialSegments,\n          torusInfo.tubularSegments,\n          torusInfo.arc,\n          torusInfo.noLongerAccessible,\n          true,\n          torusInfo.vertexBuffer\n        );\n        break;\n      case PrimitiveType.Cone:\n        const coneInfo = <ConeRestoreInfo>primitiveInfo;\n        PrimitiveMesh._setConeData(\n          this.resource,\n          coneInfo.radius,\n          coneInfo.height,\n          coneInfo.radialSegments,\n          coneInfo.heightSegments,\n          coneInfo.noLongerAccessible,\n          true,\n          coneInfo.vertexBuffer\n        );\n        break;\n      case PrimitiveType.Capsule:\n        const capsuleInfo = <CapsuleRestoreInfo>primitiveInfo;\n        PrimitiveMesh._setCapsuleData(\n          this.resource,\n          capsuleInfo.radius,\n          capsuleInfo.height,\n          capsuleInfo.radialSegments,\n          capsuleInfo.heightSegments,\n          capsuleInfo.noLongerAccessible,\n          true,\n          capsuleInfo.vertexBuffer\n        );\n        break;\n    }\n  }\n}\n\nenum PrimitiveType {\n  Sphere,\n  Cuboid,\n  Plane,\n  Cylinder,\n  Torus,\n  Cone,\n  Capsule,\n  CCSphere\n}\n\n/**\n * @internal\n */\nexport class PrimitiveRestoreInfo {\n  constructor(\n    public type: PrimitiveType,\n    public vertexBuffer: Buffer,\n    public noLongerAccessible: boolean\n  ) {}\n}\n\n/**\n * @internal\n */\nexport class SphereRestoreInfo extends PrimitiveRestoreInfo {\n  constructor(\n    public radius: number,\n    public segments: number,\n    vertexBuffer: Buffer,\n    noLongerAccessible: boolean\n  ) {\n    super(PrimitiveType.Sphere, vertexBuffer, noLongerAccessible);\n  }\n}\n\n/**\n * @internal\n */\nexport class SubdivisionSurfaceSphereRestoreInfo extends PrimitiveRestoreInfo {\n  constructor(\n    public radius: number,\n    public step: number,\n    vertexBuffer: Buffer,\n    noLongerAccessible: boolean\n  ) {\n    super(PrimitiveType.CCSphere, vertexBuffer, noLongerAccessible);\n  }\n}\n\n/**\n * @internal\n */\nexport class CuboidRestoreInfo extends PrimitiveRestoreInfo {\n  constructor(\n    public width: number,\n    public height: number,\n    public depth: number,\n    vertexBuffer: Buffer,\n    noLongerAccessible: boolean\n  ) {\n    super(PrimitiveType.Cuboid, vertexBuffer, noLongerAccessible);\n  }\n}\n\n/**\n * @internal\n */\nexport class PlaneRestoreInfo extends PrimitiveRestoreInfo {\n  constructor(\n    public width: number,\n    public height: number,\n    public horizontalSegments: number,\n    public verticalSegments: number,\n    vertexBuffer: Buffer,\n    noLongerAccessible: boolean\n  ) {\n    super(PrimitiveType.Plane, vertexBuffer, noLongerAccessible);\n  }\n}\n\n/**\n * @internal\n */\nexport class CylinderRestoreInfo extends PrimitiveRestoreInfo {\n  constructor(\n    public radiusTop: number,\n    public radiusBottom: number,\n    public height: number,\n    public radialSegments: number,\n    public heightSegments: number,\n    vertexBuffer: Buffer,\n    noLongerAccessible: boolean\n  ) {\n    super(PrimitiveType.Cylinder, vertexBuffer, noLongerAccessible);\n  }\n}\n\n/**\n * @internal\n */\nexport class TorusRestoreInfo extends PrimitiveRestoreInfo {\n  constructor(\n    public radius: number,\n    public tubeRadius: number,\n    public radialSegments: number,\n    public tubularSegments: number,\n    public arc: number,\n    vertexBuffer: Buffer,\n    noLongerAccessible: boolean\n  ) {\n    super(PrimitiveType.Torus, vertexBuffer, noLongerAccessible);\n  }\n}\n\n/**\n * @internal\n */\nexport class ConeRestoreInfo extends PrimitiveRestoreInfo {\n  constructor(\n    public radius: number,\n    public height: number,\n    public radialSegments: number,\n    public heightSegments: number,\n    vertexBuffer: Buffer,\n    noLongerAccessible: boolean\n  ) {\n    super(PrimitiveType.Cone, vertexBuffer, noLongerAccessible);\n  }\n}\n\n/**\n * @internal\n */\nexport class CapsuleRestoreInfo extends PrimitiveRestoreInfo {\n  constructor(\n    public radius: number,\n    public height: number,\n    public radialSegments: number,\n    public heightSegments: number,\n    vertexBuffer: Buffer,\n    noLongerAccessible: boolean\n  ) {\n    super(PrimitiveType.Capsule, vertexBuffer, noLongerAccessible);\n  }\n}\n","import { MathUtil, Vector3 } from \"@galacean/engine-math\";\nimport { Engine } from \"../Engine\";\nimport { GLCapabilityType } from \"../base/Constant\";\nimport { BufferBindFlag, BufferUsage, VertexElement, VertexElementFormat } from \"../graphic\";\nimport { Buffer } from \"../graphic/Buffer\";\nimport { ModelMesh } from \"./ModelMesh\";\nimport {\n  CapsuleRestoreInfo,\n  ConeRestoreInfo,\n  CuboidRestoreInfo,\n  CylinderRestoreInfo,\n  PlaneRestoreInfo,\n  PrimitiveMeshRestorer,\n  SphereRestoreInfo,\n  SubdivisionSurfaceSphereRestoreInfo,\n  TorusRestoreInfo\n} from \"./PrimitiveMeshRestorer\";\nimport { VertexAttribute } from \"./enums/VertexAttribute\";\n\n/**\n * Used to generate common primitive meshes.\n */\nexport class PrimitiveMesh {\n  private static _tempVec30: Vector3 = new Vector3();\n\n  private static readonly _sphereSeedPositions = new Float32Array([\n    -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, -1\n  ]);\n\n  private static readonly _sphereSeedCells = new Float32Array([\n    0, 1, 2, 3, 3, 2, 4, 5, 5, 4, 6, 7, 7, 0, 3, 5, 7, 6, 1, 0, 6, 4, 2, 1\n  ]);\n\n  private static _sphereEdgeIdx: number = 0;\n  private static _spherePoleIdx: number = 0;\n\n  /**\n   * Create a sphere mesh.\n   * @param engine - Engine\n   * @param radius - Sphere radius\n   * @param segments - Number of segments\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Sphere model mesh\n   */\n  static createSphere(\n    engine: Engine,\n    radius: number = 0.5,\n    segments: number = 18,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const sphereMesh = new ModelMesh(engine);\n    PrimitiveMesh._setSphereData(sphereMesh, radius, segments, noLongerAccessible, false);\n\n    const vertexBuffer = sphereMesh.vertexBufferBindings[0].buffer;\n    engine.resourceManager.addContentRestorer(\n      new PrimitiveMeshRestorer(sphereMesh, new SphereRestoreInfo(radius, segments, vertexBuffer, noLongerAccessible))\n    );\n    return sphereMesh;\n  }\n\n  /**\n   * Create a sphere mesh by implementing Catmull-Clark Surface Subdivision Algorithm.\n   * Max step is limited to 6.\n   * @param engine - Engine\n   * @param radius - Sphere radius\n   * @param step - Number of subdiv steps\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Sphere model mesh\n   */\n  static createSubdivisionSurfaceSphere(\n    engine: Engine,\n    radius: number = 0.5,\n    step: number = 3,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const sphereMesh = new ModelMesh(engine);\n    PrimitiveMesh._setSubdivisionSurfaceSphereData(sphereMesh, radius, step, noLongerAccessible, false);\n\n    const vertexBuffer = sphereMesh.vertexBufferBindings[0].buffer;\n    engine.resourceManager.addContentRestorer(\n      new PrimitiveMeshRestorer(\n        sphereMesh,\n        new SubdivisionSurfaceSphereRestoreInfo(radius, step, vertexBuffer, noLongerAccessible)\n      )\n    );\n    return sphereMesh;\n  }\n\n  /**\n   * Create a cuboid mesh.\n   * @param engine - Engine\n   * @param width - Cuboid width\n   * @param height - Cuboid height\n   * @param depth - Cuboid depth\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Cuboid model mesh\n   */\n  static createCuboid(\n    engine: Engine,\n    width: number = 1,\n    height: number = 1,\n    depth: number = 1,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    PrimitiveMesh._setCuboidData(mesh, width, height, depth, noLongerAccessible, false);\n\n    const vertexBuffer = mesh.vertexBufferBindings[0].buffer;\n    engine.resourceManager.addContentRestorer(\n      new PrimitiveMeshRestorer(mesh, new CuboidRestoreInfo(width, height, depth, vertexBuffer, noLongerAccessible))\n    );\n    return mesh;\n  }\n\n  /**\n   * Create a plane mesh.\n   * @param engine - Engine\n   * @param width - Plane width\n   * @param height - Plane height\n   * @param horizontalSegments - Plane horizontal segments\n   * @param verticalSegments - Plane vertical segments\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Plane model mesh\n   */\n  static createPlane(\n    engine: Engine,\n    width: number = 1,\n    height: number = 1,\n    horizontalSegments: number = 1,\n    verticalSegments: number = 1,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    PrimitiveMesh._setPlaneData(mesh, width, height, horizontalSegments, verticalSegments, noLongerAccessible, false);\n\n    const vertexBuffer = mesh.vertexBufferBindings[0].buffer;\n    engine.resourceManager.addContentRestorer(\n      new PrimitiveMeshRestorer(\n        mesh,\n        new PlaneRestoreInfo(width, height, horizontalSegments, verticalSegments, vertexBuffer, noLongerAccessible)\n      )\n    );\n    return mesh;\n  }\n\n  /**\n   * Create a cylinder mesh.\n   * @param engine - Engine\n   * @param radiusTop - The radius of top cap\n   * @param radiusBottom - The radius of bottom cap\n   * @param height - The height of torso\n   * @param radialSegments - Cylinder radial segments\n   * @param heightSegments - Cylinder height segments\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Cylinder model mesh\n   */\n  static createCylinder(\n    engine: Engine,\n    radiusTop: number = 0.5,\n    radiusBottom: number = 0.5,\n    height: number = 2,\n    radialSegments: number = 20,\n    heightSegments: number = 1,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    PrimitiveMesh._setCylinderData(\n      mesh,\n      radiusTop,\n      radiusBottom,\n      height,\n      radialSegments,\n      heightSegments,\n      noLongerAccessible,\n      false\n    );\n\n    const vertexBuffer = mesh.vertexBufferBindings[0].buffer;\n    engine.resourceManager.addContentRestorer(\n      new PrimitiveMeshRestorer(\n        mesh,\n        new CylinderRestoreInfo(\n          radiusTop,\n          radiusBottom,\n          height,\n          radialSegments,\n          heightSegments,\n          vertexBuffer,\n          noLongerAccessible\n        )\n      )\n    );\n    return mesh;\n  }\n\n  /**\n   * Create a torus mesh.\n   * @param engine - Engine\n   * @param radius - Torus radius\n   * @param tubeRadius - Torus tube\n   * @param radialSegments - Torus radial segments\n   * @param tubularSegments - Torus tubular segments\n   * @param arc - Central angle\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Torus model mesh\n   */\n  static createTorus(\n    engine: Engine,\n    radius: number = 0.5,\n    tubeRadius: number = 0.1,\n    radialSegments: number = 30,\n    tubularSegments: number = 30,\n    arc: number = 360,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    PrimitiveMesh._setTorusData(\n      mesh,\n      radius,\n      tubeRadius,\n      radialSegments,\n      tubularSegments,\n      arc,\n      noLongerAccessible,\n      false\n    );\n\n    const vertexBuffer = mesh.vertexBufferBindings[0].buffer;\n    engine.resourceManager.addContentRestorer(\n      new PrimitiveMeshRestorer(\n        mesh,\n        new TorusRestoreInfo(radius, tubeRadius, radialSegments, tubularSegments, arc, vertexBuffer, noLongerAccessible)\n      )\n    );\n    return mesh;\n  }\n\n  /**\n   * Create a cone mesh.\n   * @param engine - Engine\n   * @param radius - The radius of cap\n   * @param height - The height of torso\n   * @param radialSegments - Cone radial segments\n   * @param heightSegments - Cone height segments\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Cone model mesh\n   */\n  static createCone(\n    engine: Engine,\n    radius: number = 0.5,\n    height: number = 2,\n    radialSegments: number = 20,\n    heightSegments: number = 1,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    PrimitiveMesh._setConeData(mesh, radius, height, radialSegments, heightSegments, noLongerAccessible, false);\n\n    const vertexBuffer = mesh.vertexBufferBindings[0].buffer;\n    engine.resourceManager.addContentRestorer(\n      new PrimitiveMeshRestorer(\n        mesh,\n        new ConeRestoreInfo(radius, height, radialSegments, heightSegments, vertexBuffer, noLongerAccessible)\n      )\n    );\n    return mesh;\n  }\n\n  /**\n   * Create a capsule mesh.\n   * @param engine - Engine\n   * @param radius - The radius of the two hemispherical ends\n   * @param height - The height of the cylindrical part, measured between the centers of the hemispherical ends\n   * @param radialSegments - Hemispherical end radial segments\n   * @param heightSegments - Cylindrical part height segments\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Capsule model mesh\n   */\n  static createCapsule(\n    engine: Engine,\n    radius: number = 0.5,\n    height: number = 2,\n    radialSegments: number = 6,\n    heightSegments: number = 1,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    PrimitiveMesh._setCapsuleData(mesh, radius, height, radialSegments, heightSegments, noLongerAccessible, false);\n\n    const vertexBuffer = mesh.vertexBufferBindings[0].buffer;\n    engine.resourceManager.addContentRestorer(\n      new PrimitiveMeshRestorer(\n        mesh,\n        new CapsuleRestoreInfo(radius, height, radialSegments, heightSegments, vertexBuffer, noLongerAccessible)\n      )\n    );\n    return mesh;\n  }\n\n  /**\n   * @internal\n   */\n  static _setSubdivisionSurfaceSphereData(\n    sphereMesh: ModelMesh,\n    radius: number,\n    step: number,\n    noLongerAccessible: boolean,\n    isRestoreMode: boolean,\n    restoreVertexBuffer?: Buffer\n  ): void {\n    // Max step is limited to 6. Because 7 step will generate a single mesh with over 98306 vertices\n    step = MathUtil.clamp(Math.floor(step), 1, 6);\n\n    const positions = new Float32Array(3 * (6 * Math.pow(4, step) + 2));\n    const cells = new Float32Array(24 * Math.pow(4, step));\n    PrimitiveMesh._subdiveCatmullClark(step, positions, cells);\n\n    const positionCount = positions.length / 3;\n    const cellsCount = cells.length / 4;\n    const poleOffset = positionCount + Math.pow(2, step + 1) - 1;\n    // 16 extra vertices for pole uv\n    // 2 vertices at each pole are idle\n    const vertexCount = poleOffset + 16;\n\n    const vertices = new Float32Array(vertexCount * 8);\n    const indices = PrimitiveMesh._generateIndices(sphereMesh.engine, positionCount, cellsCount * 6);\n\n    let seamCount = 0;\n    const seamVertices = <Record<number, number>>{};\n\n    // Get normals, uvs, and scale to radius\n    for (let i = 0; i < positionCount; i++) {\n      let offset = 3 * i;\n\n      let x = positions[offset];\n      let y = positions[offset + 1];\n      let z = positions[offset + 2];\n\n      const reciprocalLength = 1 / Math.sqrt(x * x + y * y + z * z);\n      x *= reciprocalLength;\n      y *= reciprocalLength;\n      z *= reciprocalLength;\n\n      offset = 8 * i;\n      vertices[offset] = x * radius;\n      vertices[offset + 1] = y * radius;\n      vertices[offset + 2] = z * radius;\n\n      vertices[offset + 3] = x;\n      vertices[offset + 4] = y;\n      vertices[offset + 5] = z;\n\n      vertices[offset + 6] = (Math.PI - Math.atan2(z, x)) / (2 * Math.PI);\n      vertices[offset + 7] = Math.acos(y) / Math.PI;\n\n      if (vertices[offset + 6] === 0) {\n        // Generate seam vertex\n        const seamOffset = 8 * (positionCount + seamCount++);\n\n        vertices.set(vertices.subarray(offset, offset + 8), seamOffset);\n        vertices[seamOffset + 6] = 1.0;\n\n        // Cache seam vertex\n        seamVertices[offset / 8] = seamOffset / 8;\n      }\n    }\n\n    // Get indices\n    let offset = 0;\n    this._spherePoleIdx = 0;\n    for (let i = 0; i < cellsCount; i++) {\n      const idx = 4 * i;\n\n      let indexA = cells[idx];\n      let indexB = cells[idx + 1];\n      let indexC = cells[idx + 2];\n      let indexD = cells[idx + 3];\n\n      // Handle seam by replacing vertex index to seam vertex index if necessary\n      const floatIndexA = 8 * indexA;\n      const floatIndexB = 8 * indexB;\n      const floatIndexC = 8 * indexC;\n      const floatIndexD = 8 * indexD;\n\n      // If center Z is negative\n      if (vertices[floatIndexA + 2] + vertices[floatIndexB + 2] + vertices[floatIndexC + 2] < 0) {\n        vertices[floatIndexA + 6] === 0 && (indexA = seamVertices[indexA]);\n        vertices[floatIndexB + 6] === 0 && (indexB = seamVertices[indexB]);\n        vertices[floatIndexC + 6] === 0 && (indexC = seamVertices[indexC]);\n        vertices[floatIndexD + 6] === 0 && (indexD = seamVertices[indexD]);\n      }\n\n      indices[offset] = indexA;\n      indices[offset + 1] = indexB;\n      indices[offset + 2] = indexC;\n\n      this._generateAndReplacePoleUV(indices, vertices, offset, poleOffset);\n\n      indices[offset + 3] = indexA;\n      indices[offset + 4] = indexC;\n      indices[offset + 5] = indexD;\n\n      this._generateAndReplacePoleUV(indices, vertices, offset + 3, poleOffset);\n\n      offset += 6;\n    }\n    if (!isRestoreMode) {\n      const { bounds } = sphereMesh;\n      bounds.min.set(-radius, -radius, -radius);\n      bounds.max.set(radius, radius, radius);\n    }\n    PrimitiveMesh._initialize(sphereMesh, vertices, indices, noLongerAccessible, isRestoreMode, restoreVertexBuffer);\n  }\n\n  /**\n   * @internal\n   */\n  static _setSphereData(\n    sphereMesh: ModelMesh,\n    radius: number,\n    segments: number,\n    noLongerAccessible: boolean,\n    isRestoreMode: boolean,\n    restoreVertexBuffer?: Buffer\n  ): void {\n    segments = Math.max(2, Math.floor(segments));\n\n    const count = segments + 1;\n    const vertexCount = count * count;\n    const rectangleCount = segments * segments;\n    const indices = PrimitiveMesh._generateIndices(sphereMesh.engine, vertexCount, rectangleCount * 6);\n    const thetaRange = Math.PI;\n    const alphaRange = thetaRange * 2;\n    const countReciprocal = 1.0 / count;\n    const segmentsReciprocal = 1.0 / segments;\n\n    const vertexFloatCount = 8;\n    const vertices = new Float32Array(vertexCount * vertexFloatCount);\n\n    for (let i = 0; i < vertexCount; ++i) {\n      const x = i % count;\n      const y = (i * countReciprocal) | 0;\n      const u = x * segmentsReciprocal;\n      const v = y * segmentsReciprocal;\n      const alphaDelta = u * alphaRange;\n      const thetaDelta = v * thetaRange;\n      const sinTheta = Math.sin(thetaDelta);\n\n      let posX = -radius * Math.cos(alphaDelta) * sinTheta;\n      let posY = radius * Math.cos(thetaDelta);\n      let posZ = radius * Math.sin(alphaDelta) * sinTheta;\n\n      let offset = i * vertexFloatCount;\n      // Position\n      vertices[offset++] = posX;\n      vertices[offset++] = posY;\n      vertices[offset++] = posZ;\n      // Normal\n      vertices[offset++] = posX;\n      vertices[offset++] = posY;\n      vertices[offset++] = posZ;\n      // TexCoord\n      vertices[offset++] = u;\n      vertices[offset++] = v;\n    }\n\n    let offset = 0;\n    for (let i = 0; i < rectangleCount; ++i) {\n      const x = i % segments;\n      const y = (i * segmentsReciprocal) | 0;\n\n      const a = y * count + x;\n      const b = a + 1;\n      const c = a + count;\n      const d = c + 1;\n\n      indices[offset++] = b;\n      indices[offset++] = a;\n      indices[offset++] = d;\n      indices[offset++] = a;\n      indices[offset++] = c;\n      indices[offset++] = d;\n    }\n\n    if (!isRestoreMode) {\n      const { bounds } = sphereMesh;\n      bounds.min.set(-radius, -radius, -radius);\n      bounds.max.set(radius, radius, radius);\n    }\n\n    PrimitiveMesh._initialize(sphereMesh, vertices, indices, noLongerAccessible, isRestoreMode, restoreVertexBuffer);\n  }\n\n  /**\n   * @internal\n   */\n  static _subdiveCatmullClark(step: number, positions: Float32Array, cells: Float32Array) {\n    const edges = new Map<number, IEdge>();\n    const faces = new Array<IFace>();\n\n    positions.set(PrimitiveMesh._sphereSeedPositions);\n    cells.set(PrimitiveMesh._sphereSeedCells);\n\n    for (let i = 0; i < step; i++) {\n      const cellCount = 6 * Math.pow(4, i);\n      const positionCount = 4 * cellCount + 2;\n\n      edges.clear();\n      faces.length = 0;\n\n      // Get cell face's facePoint\n      for (let j = 0; j < cellCount; j++) {\n        const face = (faces[j] = {\n          facePoint: new Vector3(),\n          adjacentEdges: new Array<IEdge>(4)\n        });\n\n        // Get cell's edgePoint\n        for (let k = 0; k < 4; k++) {\n          const offset = 3 * cells[4 * j + k];\n          face.facePoint.x += 0.25 * positions[offset];\n          face.facePoint.y += 0.25 * positions[offset + 1];\n          face.facePoint.z += 0.25 * positions[offset + 2];\n        }\n\n        // Get cell edges\n        for (let k = 0; k < 4; k++) {\n          const vertexIdxA = cells[4 * j + k];\n          const vertexIdxB = cells[4 * j + ((k + 1) % 4)];\n\n          const edgeIdxKey = Math.min(vertexIdxA, vertexIdxB) * positionCount + Math.max(vertexIdxA, vertexIdxB);\n\n          if (!edges.has(edgeIdxKey)) {\n            const edge: IEdge = {\n              edgePoint: new Vector3(),\n              edgePointIndex: undefined\n            };\n\n            const offsetA = 3 * vertexIdxA;\n            const offsetB = 3 * vertexIdxB;\n\n            edge.edgePoint.set(\n              0.25 * (positions[offsetA] + positions[offsetB]),\n              0.25 * (positions[offsetA + 1] + positions[offsetB + 1]),\n              0.25 * (positions[offsetA + 2] + positions[offsetB + 2])\n            );\n\n            edges.set(edgeIdxKey, edge);\n          }\n          const edge = edges.get(edgeIdxKey);\n\n          face.adjacentEdges[k] = edge;\n\n          const edgePoint = edge.edgePoint;\n          const facePoint = face.facePoint;\n\n          edgePoint.x += 0.25 * facePoint.x;\n          edgePoint.y += 0.25 * facePoint.y;\n          edgePoint.z += 0.25 * facePoint.z;\n        }\n      }\n\n      const prePointCount = cellCount + 2;\n      const edgePointOffset = prePointCount + cellCount;\n\n      let pointIdx = 0;\n      this._sphereEdgeIdx = 0;\n      const preCells = cells.slice(0, 4 * cellCount);\n\n      // Get New positions, which consists of updated positions of existing points, face points and edge points\n      for (let j = 0; j < cellCount; j++) {\n        // Add face point to new positions\n        const face = faces[j];\n        face.facePoint.copyToArray(positions, 3 * (prePointCount + j));\n\n        // Get the face point index\n        const ic = prePointCount + j;\n\n        let id: number, ib: number, temp: number;\n\n        //  ia -- id -- ia\n        //  |     |     |\n        //  ib -- ic -- ib\n        //  |     |     |\n        //  ia -- id -- ia\n        for (let k = 0; k < 4; k++) {\n          // Get the updated existing point index\n          const ia = preCells[pointIdx++];\n\n          // ib and id share four edge points in one cell\n          switch (k) {\n            case 0: {\n              const edgeB = face.adjacentEdges[k % 4];\n              const edgeD = face.adjacentEdges[(k + 3) % 4];\n              ib = this._calculateEdgeIndex(positions, edgeB, edgePointOffset);\n              id = this._calculateEdgeIndex(positions, edgeD, edgePointOffset);\n              temp = id;\n              break;\n            }\n            case 1:\n            case 2: {\n              const edgeB = face.adjacentEdges[k % 4];\n              id = ib;\n              ib = this._calculateEdgeIndex(positions, edgeB, edgePointOffset);\n              break;\n            }\n            case 3: {\n              id = ib;\n              ib = temp;\n              break;\n            }\n          }\n\n          const idx = 4 * (4 * j + k);\n          cells[idx] = ia;\n          cells[idx + 1] = ib;\n          cells[idx + 2] = ic;\n          cells[idx + 3] = id;\n        }\n      }\n    }\n  }\n\n  /**\n   * Duplicate vertices at the poles and adjust their UV coordinates.\n   */\n  private static _generateAndReplacePoleUV(\n    indices: Uint16Array | Uint32Array,\n    vertices: Float32Array,\n    idx: number,\n    poleOffset: number\n  ) {\n    const v = vertices[8 * indices[idx] + 7];\n\n    if (v === 0 || v === 1) {\n      const offset = 8 * indices[idx];\n      const addedOffset = 8 * (poleOffset + this._spherePoleIdx);\n      vertices.set(vertices.subarray(offset, offset + 8), addedOffset);\n      vertices[addedOffset + 6] =\n        0.5 * (vertices[offset + 6] + vertices[8 * indices[idx + 1] + 6] + vertices[8 * indices[idx + 2] + 6] - 0.5);\n\n      indices[idx] = poleOffset + this._spherePoleIdx++;\n    }\n  }\n  /**\n   * Get edge point index for subdivision surface sphere.\n   */\n  private static _calculateEdgeIndex(positions: Float32Array, edge: IEdge, offset: number): number {\n    if (edge.edgePointIndex !== undefined) {\n      return edge.edgePointIndex;\n    } else {\n      edge.edgePoint.copyToArray(positions, 3 * (offset + PrimitiveMesh._sphereEdgeIdx));\n\n      const index = offset + PrimitiveMesh._sphereEdgeIdx++;\n      edge.edgePointIndex = index;\n      return index;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _setCuboidData(\n    cuboidMesh: ModelMesh,\n    width: number,\n    height: number,\n    depth: number,\n    noLongerAccessible: boolean,\n    isRestoreMode: boolean,\n    restoreVertexBuffer?: Buffer\n  ): void {\n    const halfWidth = width / 2;\n    const halfHeight = height / 2;\n    const halfDepth = depth / 2;\n\n    const vertexFloatCount = 8;\n    const vertices = new Float32Array(24 * vertexFloatCount);\n\n    // Up\n    (vertices[0] = -halfWidth), (vertices[1] = halfHeight), (vertices[2] = -halfDepth);\n    (vertices[6] = 0), (vertices[7] = 0);\n    (vertices[8] = halfWidth), (vertices[9] = halfHeight), (vertices[10] = -halfDepth);\n    (vertices[14] = 1), (vertices[15] = 0);\n    (vertices[16] = halfWidth), (vertices[17] = halfHeight), (vertices[18] = halfDepth);\n    (vertices[22] = 1), (vertices[23] = 1);\n    (vertices[24] = -halfWidth), (vertices[25] = halfHeight), (vertices[26] = halfDepth);\n    (vertices[30] = 0), (vertices[31] = 1);\n    for (let i = 0; i < 4; i++) {\n      let normalOffset = vertexFloatCount * i + 3;\n      (vertices[normalOffset++] = 0), (vertices[normalOffset++] = 1), (vertices[normalOffset++] = 0);\n    }\n\n    // Down\n    (vertices[32] = -halfWidth), (vertices[33] = -halfHeight), (vertices[34] = -halfDepth);\n    (vertices[38] = 0), (vertices[39] = 1);\n    (vertices[40] = halfWidth), (vertices[41] = -halfHeight), (vertices[42] = -halfDepth);\n    (vertices[46] = 1), (vertices[47] = 1);\n    (vertices[48] = halfWidth), (vertices[49] = -halfHeight), (vertices[50] = halfDepth);\n    (vertices[54] = 1), (vertices[55] = 0);\n    (vertices[56] = -halfWidth), (vertices[57] = -halfHeight), (vertices[58] = halfDepth);\n    (vertices[62] = 0), (vertices[63] = 0);\n    for (let i = 0; i < 4; i++) {\n      let normalOffset = vertexFloatCount * i + 35;\n      (vertices[normalOffset++] = 0), (vertices[normalOffset++] = -1), (vertices[normalOffset++] = 0);\n    }\n\n    // Left\n    (vertices[64] = -halfWidth), (vertices[65] = halfHeight), (vertices[66] = -halfDepth);\n    (vertices[70] = 0), (vertices[71] = 0);\n    (vertices[72] = -halfWidth), (vertices[73] = halfHeight), (vertices[74] = halfDepth);\n    (vertices[78] = 1), (vertices[79] = 0);\n    (vertices[80] = -halfWidth), (vertices[81] = -halfHeight), (vertices[82] = halfDepth);\n    (vertices[86] = 1), (vertices[87] = 1);\n    (vertices[88] = -halfWidth), (vertices[89] = -halfHeight), (vertices[90] = -halfDepth);\n    (vertices[94] = 0), (vertices[95] = 1);\n    for (let i = 0; i < 4; i++) {\n      let normalOffset = vertexFloatCount * i + 67;\n      (vertices[normalOffset++] = -1), (vertices[normalOffset++] = 0), (vertices[normalOffset++] = 0);\n    }\n\n    // Right\n    (vertices[96] = halfWidth), (vertices[97] = halfHeight), (vertices[98] = -halfDepth);\n    (vertices[102] = 1), (vertices[103] = 0);\n    (vertices[104] = halfWidth), (vertices[105] = halfHeight), (vertices[106] = halfDepth);\n    (vertices[110] = 0), (vertices[111] = 0);\n    (vertices[112] = halfWidth), (vertices[113] = -halfHeight), (vertices[114] = halfDepth);\n    (vertices[118] = 0), (vertices[119] = 1);\n    (vertices[120] = halfWidth), (vertices[121] = -halfHeight), (vertices[122] = -halfDepth);\n    (vertices[126] = 1), (vertices[127] = 1);\n    for (let i = 0; i < 4; i++) {\n      let normalOffset = vertexFloatCount * i + 99;\n      (vertices[normalOffset++] = 1), (vertices[normalOffset++] = 0), (vertices[normalOffset++] = 0);\n    }\n\n    // Front\n    (vertices[128] = -halfWidth), (vertices[129] = halfHeight), (vertices[130] = halfDepth);\n    (vertices[134] = 0), (vertices[135] = 0);\n    (vertices[136] = halfWidth), (vertices[137] = halfHeight), (vertices[138] = halfDepth);\n    (vertices[142] = 1), (vertices[143] = 0);\n    (vertices[144] = halfWidth), (vertices[145] = -halfHeight), (vertices[146] = halfDepth);\n    (vertices[150] = 1), (vertices[151] = 1);\n    (vertices[152] = -halfWidth), (vertices[153] = -halfHeight), (vertices[154] = halfDepth);\n    (vertices[158] = 0), (vertices[159] = 1);\n    for (let i = 0; i < 4; i++) {\n      let normalOffset = vertexFloatCount * i + 131;\n      (vertices[normalOffset++] = 0), (vertices[normalOffset++] = 0), (vertices[normalOffset++] = 1);\n    }\n\n    // Back\n    (vertices[160] = -halfWidth), (vertices[161] = halfHeight), (vertices[162] = -halfDepth);\n    (vertices[166] = 1), (vertices[167] = 0);\n    (vertices[168] = halfWidth), (vertices[169] = halfHeight), (vertices[170] = -halfDepth);\n    (vertices[174] = 0), (vertices[175] = 0);\n    (vertices[176] = halfWidth), (vertices[177] = -halfHeight), (vertices[178] = -halfDepth);\n    (vertices[182] = 0), (vertices[183] = 1);\n    (vertices[184] = -halfWidth), (vertices[185] = -halfHeight), (vertices[186] = -halfDepth);\n    (vertices[190] = 1), (vertices[191] = 1);\n    for (let i = 0; i < 4; i++) {\n      let normalOffset = vertexFloatCount * i + 163;\n      (vertices[normalOffset++] = 0), (vertices[normalOffset++] = 0), (vertices[normalOffset++] = -1);\n    }\n\n    const indices = new Uint16Array(36);\n\n    // prettier-ignore\n    // Up\n    indices[0] = 0, indices[1] = 2, indices[2] = 1, indices[3] = 2, indices[4] = 0, indices[5] = 3,\n    // Down\n    indices[6] = 4, indices[7] = 6, indices[8] = 7, indices[9] = 6, indices[10] = 4, indices[11] = 5,\n    // Left\n    indices[12] = 8, indices[13] = 10, indices[14] = 9, indices[15] = 10, indices[16] = 8, indices[17] = 11,\n    // Right\n    indices[18] = 12, indices[19] = 14, indices[20] = 15, indices[21] = 14, indices[22] = 12, indices[23] = 13,\n    // Front\n    indices[24] = 16, indices[25] = 18, indices[26] = 17, indices[27] = 18, indices[28] = 16, indices[29] = 19,\n    // Back\n    indices[30] = 20, indices[31] = 22, indices[32] = 23, indices[33] = 22, indices[34] = 20, indices[35] = 21;\n\n    if (!isRestoreMode) {\n      const { bounds } = cuboidMesh;\n      bounds.min.set(-halfWidth, -halfHeight, -halfDepth);\n      bounds.max.set(halfWidth, halfHeight, halfDepth);\n    }\n    PrimitiveMesh._initialize(cuboidMesh, vertices, indices, noLongerAccessible, isRestoreMode, restoreVertexBuffer);\n  }\n\n  /**\n   * @internal\n   */\n  static _setPlaneData(\n    planeMesh: ModelMesh,\n    width: number,\n    height: number,\n    horizontalSegments: number,\n    verticalSegments: number,\n    noLongerAccessible: boolean,\n    isRestoreMode: boolean,\n    restoreVertexBuffer?: Buffer\n  ): void {\n    horizontalSegments = Math.max(1, Math.floor(horizontalSegments));\n    verticalSegments = Math.max(1, Math.floor(verticalSegments));\n\n    const horizontalCount = horizontalSegments + 1;\n    const verticalCount = verticalSegments + 1;\n    const halfWidth = width / 2;\n    const halfHeight = height / 2;\n    const gridWidth = width / horizontalSegments;\n    const gridHeight = height / verticalSegments;\n    const vertexCount = horizontalCount * verticalCount;\n    const rectangleCount = verticalSegments * horizontalSegments;\n    const indices = PrimitiveMesh._generateIndices(planeMesh.engine, vertexCount, rectangleCount * 6);\n    const horizontalCountReciprocal = 1.0 / horizontalCount;\n    const horizontalSegmentsReciprocal = 1.0 / horizontalSegments;\n    const verticalSegmentsReciprocal = 1.0 / verticalSegments;\n\n    const vertexFloatCount = 8;\n    const vertices = new Float32Array(vertexCount * vertexFloatCount);\n\n    for (let i = 0; i < vertexCount; ++i) {\n      const x = i % horizontalCount;\n      const z = (i * horizontalCountReciprocal) | 0;\n\n      let offset = i * vertexFloatCount;\n      // Position\n      vertices[offset++] = x * gridWidth - halfWidth;\n      vertices[offset++] = 0;\n      vertices[offset++] = z * gridHeight - halfHeight;\n      // Normal\n      vertices[offset++] = 0;\n      vertices[offset++] = 1;\n      vertices[offset++] = 0;\n      // TexCoord\n      vertices[offset++] = x * horizontalSegmentsReciprocal;\n      vertices[offset++] = z * verticalSegmentsReciprocal;\n    }\n\n    let offset = 0;\n    for (let i = 0; i < rectangleCount; ++i) {\n      const x = i % horizontalSegments;\n      const y = (i * horizontalSegmentsReciprocal) | 0;\n\n      const a = y * horizontalCount + x;\n      const b = a + 1;\n      const c = a + horizontalCount;\n      const d = c + 1;\n\n      indices[offset++] = a;\n      indices[offset++] = c;\n      indices[offset++] = b;\n      indices[offset++] = c;\n      indices[offset++] = d;\n      indices[offset++] = b;\n    }\n\n    if (!isRestoreMode) {\n      const { bounds } = planeMesh;\n      bounds.min.set(-halfWidth, 0, -halfHeight);\n      bounds.max.set(halfWidth, 0, halfHeight);\n    }\n\n    PrimitiveMesh._initialize(planeMesh, vertices, indices, noLongerAccessible, isRestoreMode, restoreVertexBuffer);\n  }\n\n  static _setCylinderData(\n    cylinderMesh: ModelMesh,\n    radiusTop: number = 0.5,\n    radiusBottom: number = 0.5,\n    height: number = 2,\n    radialSegments: number = 20,\n    heightSegments: number = 1,\n    noLongerAccessible: boolean,\n    isRestoreMode: boolean,\n    restoreVertexBuffer?: Buffer\n  ): void {\n    radialSegments = Math.floor(radialSegments);\n    heightSegments = Math.floor(heightSegments);\n\n    const radialCount = radialSegments + 1;\n    const verticalCount = heightSegments + 1;\n    const halfHeight = height * 0.5;\n    const unitHeight = height / heightSegments;\n    const torsoVertexCount = radialCount * verticalCount;\n    const torsoRectangleCount = radialSegments * heightSegments;\n    const capTriangleCount = radialSegments * 2;\n    const totalVertexCount = torsoVertexCount + 2 + capTriangleCount;\n    const indices = PrimitiveMesh._generateIndices(\n      cylinderMesh.engine,\n      totalVertexCount,\n      torsoRectangleCount * 6 + capTriangleCount * 3\n    );\n    const radialCountReciprocal = 1.0 / radialCount;\n    const radialSegmentsReciprocal = 1.0 / radialSegments;\n    const heightSegmentsReciprocal = 1.0 / heightSegments;\n\n    const vertexFloatCount = 8;\n    const vertices = new Float32Array(totalVertexCount * vertexFloatCount);\n\n    let indicesOffset = 0;\n\n    // Create torso\n    const thetaStart = Math.PI;\n    const thetaRange = Math.PI * 2;\n    const radiusDiff = radiusBottom - radiusTop;\n    const slope = radiusDiff / height;\n    const radiusSlope = radiusDiff / heightSegments;\n\n    for (let i = 0; i < torsoVertexCount; ++i) {\n      const x = i % radialCount;\n      const y = (i * radialCountReciprocal) | 0;\n      const u = x * radialSegmentsReciprocal;\n      const v = y * heightSegmentsReciprocal;\n      const theta = thetaStart + u * thetaRange;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n      const radius = radiusBottom - y * radiusSlope;\n\n      let posX = radius * sinTheta;\n      let posY = y * unitHeight - halfHeight;\n      let posZ = radius * cosTheta;\n\n      let offset = i * vertexFloatCount;\n      // Position\n      vertices[offset++] = posX;\n      vertices[offset++] = posY;\n      vertices[offset++] = posZ;\n      // Normal\n      vertices[offset++] = sinTheta;\n      vertices[offset++] = slope;\n      vertices[offset++] = cosTheta;\n      // TexCoord\n      vertices[offset++] = u;\n      vertices[offset++] = 1 - v;\n    }\n\n    for (let i = 0; i < torsoRectangleCount; ++i) {\n      const x = i % radialSegments;\n      const y = (i * radialSegmentsReciprocal) | 0;\n\n      const a = y * radialCount + x;\n      const b = a + 1;\n      const c = a + radialCount;\n      const d = c + 1;\n\n      indices[indicesOffset++] = b;\n      indices[indicesOffset++] = c;\n      indices[indicesOffset++] = a;\n      indices[indicesOffset++] = b;\n      indices[indicesOffset++] = d;\n      indices[indicesOffset++] = c;\n    }\n\n    let offset = torsoVertexCount * vertexFloatCount;\n    // Bottom position\n    vertices[offset++] = 0;\n    vertices[offset++] = -halfHeight;\n    vertices[offset++] = 0;\n    // Bottom normal\n    vertices[offset++] = 0;\n    vertices[offset++] = -1;\n    vertices[offset++] = 0;\n    // Bottom texCoord\n    vertices[offset++] = 0.5;\n    vertices[offset++] = 0.5;\n\n    // Top position\n    vertices[offset++] = 0;\n    vertices[offset++] = halfHeight;\n    vertices[offset++] = 0;\n    // Top normal\n    vertices[offset++] = 0;\n    vertices[offset++] = 1;\n    vertices[offset++] = 0;\n    // Top texCoord\n    vertices[offset++] = 0.5;\n    vertices[offset++] = 0.5;\n\n    // Add cap vertices\n    offset = (torsoVertexCount + 2) * vertexFloatCount;\n\n    const diameterTopReciprocal = 1.0 / (radiusTop * 2);\n    const diameterBottomReciprocal = 1.0 / (radiusBottom * 2);\n    const positionStride = radialCount * heightSegments;\n    for (let i = 0; i < radialSegments; ++i) {\n      const curPosBottomOffset = i * vertexFloatCount;\n      let curPosX = vertices[curPosBottomOffset];\n      let curPosZ = vertices[curPosBottomOffset + 2];\n\n      // Bottom position\n      vertices[offset++] = curPosX;\n      vertices[offset++] = -halfHeight;\n      vertices[offset++] = curPosZ;\n      // Bottom normal\n      vertices[offset++] = 0;\n      vertices[offset++] = -1;\n      vertices[offset++] = 0;\n      // Bottom texcoord\n      vertices[offset++] = curPosX * diameterBottomReciprocal + 0.5;\n      vertices[offset++] = 0.5 - curPosZ * diameterBottomReciprocal;\n\n      const curPosTopOffset = (i + positionStride) * vertexFloatCount;\n      curPosX = vertices[curPosTopOffset];\n      curPosZ = vertices[curPosTopOffset + 2];\n\n      // Top position\n      vertices[offset++] = curPosX;\n      vertices[offset++] = halfHeight;\n      vertices[offset++] = curPosZ;\n      // Top normal\n      vertices[offset++] = 0;\n      vertices[offset++] = 1;\n      vertices[offset++] = 0;\n      // Top texcoord\n      vertices[offset++] = curPosX * diameterTopReciprocal + 0.5;\n      vertices[offset++] = 0.5 - curPosZ * diameterTopReciprocal;\n    }\n\n    // Add cap indices\n    const topCapIndex = torsoVertexCount + 1;\n    const bottomIndiceIndex = torsoVertexCount + 2;\n    const topIndiceIndex = bottomIndiceIndex + 1;\n    for (let i = 0; i < radialSegments; ++i) {\n      const firstStride = i * 2;\n      const secondStride = i === radialSegments - 1 ? 0 : firstStride + 2;\n\n      // Bottom\n      indices[indicesOffset++] = torsoVertexCount;\n      indices[indicesOffset++] = bottomIndiceIndex + secondStride;\n      indices[indicesOffset++] = bottomIndiceIndex + firstStride;\n\n      // Top\n      indices[indicesOffset++] = topCapIndex;\n      indices[indicesOffset++] = topIndiceIndex + firstStride;\n      indices[indicesOffset++] = topIndiceIndex + secondStride;\n    }\n\n    if (!isRestoreMode) {\n      const { bounds } = cylinderMesh;\n      const radiusMax = Math.max(radiusTop, radiusBottom);\n      bounds.min.set(-radiusMax, -halfHeight, -radiusMax);\n      bounds.max.set(radiusMax, halfHeight, radiusMax);\n    }\n    PrimitiveMesh._initialize(cylinderMesh, vertices, indices, noLongerAccessible, isRestoreMode, restoreVertexBuffer);\n  }\n\n  /**\n   * @internal\n   */\n  static _setTorusData(\n    torusMesh: ModelMesh,\n    radius: number,\n    tubeRadius: number,\n    radialSegments: number,\n    tubularSegments: number,\n    arc: number,\n    noLongerAccessible: boolean,\n    isRestoreMode: boolean,\n    restoreVertexBuffer?: Buffer\n  ): void {\n    radialSegments = Math.floor(radialSegments);\n    tubularSegments = Math.floor(tubularSegments);\n\n    const vertexCount = (radialSegments + 1) * (tubularSegments + 1);\n    const rectangleCount = radialSegments * tubularSegments;\n    const indices = PrimitiveMesh._generateIndices(torusMesh.engine, vertexCount, rectangleCount * 6);\n\n    const vertexFloatCount = 8;\n    const vertices = new Float32Array(vertexCount * vertexFloatCount);\n\n    arc = (arc / 180) * Math.PI;\n\n    let offset = 0;\n\n    const normal = PrimitiveMesh._tempVec30;\n    for (let i = 0; i <= radialSegments; i++) {\n      for (let j = 0; j <= tubularSegments; j++) {\n        const u = (j / tubularSegments) * arc;\n        const v = (i / radialSegments) * Math.PI * 2;\n        const cosV = Math.cos(v);\n        const sinV = Math.sin(v);\n        const cosU = Math.cos(u);\n        const sinU = Math.sin(u);\n\n        // Position\n        const positionX = (radius + tubeRadius * cosV) * cosU;\n        const positionY = (radius + tubeRadius * cosV) * sinU;\n        const positionZ = tubeRadius * sinV;\n        vertices[offset++] = positionX;\n        vertices[offset++] = positionY;\n        vertices[offset++] = positionZ;\n\n        // Normal\n        const centerX = radius * cosU;\n        const centerY = radius * sinU;\n        normal.set(positionX - centerX, positionY - centerY, positionZ).normalize();\n        vertices[offset++] = normal.x;\n        vertices[offset++] = normal.y;\n        vertices[offset++] = normal.z;\n\n        // UV\n        vertices[offset++] = j / tubularSegments;\n        vertices[offset++] = i / radialSegments;\n      }\n    }\n\n    offset = 0;\n    for (let i = 1; i <= radialSegments; i++) {\n      for (let j = 1; j <= tubularSegments; j++) {\n        const a = (tubularSegments + 1) * i + j - 1;\n        const b = (tubularSegments + 1) * (i - 1) + j - 1;\n        const c = (tubularSegments + 1) * (i - 1) + j;\n        const d = (tubularSegments + 1) * i + j;\n\n        indices[offset++] = a;\n        indices[offset++] = b;\n        indices[offset++] = d;\n\n        indices[offset++] = b;\n        indices[offset++] = c;\n        indices[offset++] = d;\n      }\n    }\n\n    if (!isRestoreMode) {\n      const { bounds } = torusMesh;\n      const outerRadius = radius + tubeRadius;\n      bounds.min.set(-outerRadius, -outerRadius, -tubeRadius);\n      bounds.max.set(outerRadius, outerRadius, tubeRadius);\n    }\n\n    PrimitiveMesh._initialize(torusMesh, vertices, indices, noLongerAccessible, isRestoreMode, restoreVertexBuffer);\n  }\n\n  /**\n   * @internal\n   */\n  static _setConeData(\n    coneMesh: ModelMesh,\n    radius: number,\n    height: number,\n    radialSegments: number,\n    heightSegments: number,\n    noLongerAccessible: boolean,\n    isRestoreMode: boolean,\n    restoreVertexBuffer?: Buffer\n  ): void {\n    radialSegments = Math.floor(radialSegments);\n    heightSegments = Math.floor(heightSegments);\n\n    const radialCount = radialSegments + 1;\n    const verticalCount = heightSegments + 1;\n    const halfHeight = height * 0.5;\n    const unitHeight = height / heightSegments;\n    const torsoVertexCount = radialCount * verticalCount;\n    const torsoRectangleCount = radialSegments * heightSegments;\n    const totalVertexCount = torsoVertexCount + 1 + radialSegments;\n    const indices = PrimitiveMesh._generateIndices(\n      coneMesh.engine,\n      totalVertexCount,\n      torsoRectangleCount * 6 + radialSegments * 3\n    );\n    const radialCountReciprocal = 1.0 / radialCount;\n    const radialSegmentsReciprocal = 1.0 / radialSegments;\n    const heightSegmentsReciprocal = 1.0 / heightSegments;\n\n    const vertexFloatCount = 8;\n    const vertices = new Float32Array(totalVertexCount * 8);\n\n    let indicesOffset = 0;\n\n    // Create torso\n    const thetaStart = Math.PI;\n    const thetaRange = Math.PI * 2;\n    const slope = radius / height;\n\n    for (let i = 0; i < torsoVertexCount; ++i) {\n      const x = i % radialCount;\n      const y = (i * radialCountReciprocal) | 0;\n      const u = x * radialSegmentsReciprocal;\n      const v = y * heightSegmentsReciprocal;\n      const theta = thetaStart + u * thetaRange;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n      const curRadius = radius - v * radius;\n\n      let posX = curRadius * sinTheta;\n      let posY = y * unitHeight - halfHeight;\n      let posZ = curRadius * cosTheta;\n\n      let offset = i * vertexFloatCount;\n      // Position\n      vertices[offset++] = posX;\n      vertices[offset++] = posY;\n      vertices[offset++] = posZ;\n      // Normal\n      vertices[offset++] = sinTheta;\n      vertices[offset++] = slope;\n      vertices[offset++] = cosTheta;\n      // Texcoord\n      vertices[offset++] = u;\n      vertices[offset++] = 1 - v;\n    }\n\n    for (let i = 0; i < torsoRectangleCount; ++i) {\n      const x = i % radialSegments;\n      const y = (i * radialSegmentsReciprocal) | 0;\n\n      const a = y * radialCount + x;\n      const b = a + 1;\n      const c = a + radialCount;\n      const d = c + 1;\n\n      indices[indicesOffset++] = b;\n      indices[indicesOffset++] = c;\n      indices[indicesOffset++] = a;\n      indices[indicesOffset++] = b;\n      indices[indicesOffset++] = d;\n      indices[indicesOffset++] = c;\n    }\n\n    let offset = torsoVertexCount * vertexFloatCount;\n    // Bottom position\n    vertices[offset++] = 0;\n    vertices[offset++] = -halfHeight;\n    vertices[offset++] = 0;\n    // Bottom normal\n    vertices[offset++] = 0;\n    vertices[offset++] = -1;\n    vertices[offset++] = 0;\n    // Bottom texcoord\n    vertices[offset++] = 0.5;\n    vertices[offset++] = 0.5;\n\n    // Add bottom cap vertices\n    offset = (torsoVertexCount + 1) * vertexFloatCount;\n    const diameterBottomReciprocal = 1.0 / (radius * 2);\n    for (let i = 0; i < radialSegments; ++i) {\n      let curPosX = vertices[i * vertexFloatCount];\n      let curPosZ = vertices[i * vertexFloatCount + 2];\n\n      // Bottom position\n      vertices[offset++] = curPosX;\n      vertices[offset++] = -halfHeight;\n      vertices[offset++] = curPosZ;\n      // Bottom normal\n      vertices[offset++] = 0;\n      vertices[offset++] = -1;\n      vertices[offset++] = 0;\n      // Bottom texcoord\n      vertices[offset++] = curPosX * diameterBottomReciprocal + 0.5;\n      vertices[offset++] = 0.5 - curPosZ * diameterBottomReciprocal;\n    }\n\n    const bottomIndiceIndex = torsoVertexCount + 1;\n    for (let i = 0; i < radialSegments; ++i) {\n      const firstStride = i;\n      const secondStride = i === radialSegments - 1 ? 0 : firstStride + 1;\n\n      // Bottom\n      indices[indicesOffset++] = torsoVertexCount;\n      indices[indicesOffset++] = bottomIndiceIndex + secondStride;\n      indices[indicesOffset++] = bottomIndiceIndex + firstStride;\n    }\n\n    if (!isRestoreMode) {\n      const { bounds } = coneMesh;\n      bounds.min.set(-radius, -halfHeight, -radius);\n      bounds.max.set(radius, halfHeight, radius);\n    }\n\n    PrimitiveMesh._initialize(coneMesh, vertices, indices, noLongerAccessible, isRestoreMode, restoreVertexBuffer);\n  }\n\n  static _setCapsuleData(\n    capsuleMesh: ModelMesh,\n    radius: number,\n    height: number,\n    radialSegments: number,\n    heightSegments: number,\n    noLongerAccessible: boolean,\n    isRestoreMode: boolean,\n    restoreVertexBuffer?: Buffer\n  ): void {\n    radialSegments = Math.max(2, Math.floor(radialSegments));\n    heightSegments = Math.floor(heightSegments);\n\n    const radialCount = radialSegments + 1;\n    const verticalCount = heightSegments + 1;\n    const halfHeight = height * 0.5;\n    const unitHeight = height / heightSegments;\n    const torsoVertexCount = radialCount * verticalCount;\n    const torsoRectangleCount = radialSegments * heightSegments;\n\n    const capVertexCount = radialCount * radialCount;\n    const capRectangleCount = radialSegments * radialSegments;\n\n    const totalVertexCount = torsoVertexCount + 2 * capVertexCount;\n    const indices = PrimitiveMesh._generateIndices(\n      capsuleMesh.engine,\n      totalVertexCount,\n      (torsoRectangleCount + 2 * capRectangleCount) * 6\n    );\n\n    const radialCountReciprocal = 1.0 / radialCount;\n    const radialSegmentsReciprocal = 1.0 / radialSegments;\n    const heightSegmentsReciprocal = 1.0 / heightSegments;\n\n    const thetaStart = Math.PI;\n    const thetaRange = Math.PI * 2;\n\n    const vertexFloatCount = 8;\n    const vertices = new Float32Array(totalVertexCount * vertexFloatCount);\n\n    let indicesOffset = 0;\n\n    // create torso\n    for (let i = 0; i < torsoVertexCount; ++i) {\n      const x = i % radialCount;\n      const y = (i * radialCountReciprocal) | 0;\n      const u = x * radialSegmentsReciprocal;\n      const v = y * heightSegmentsReciprocal;\n      const theta = thetaStart + u * thetaRange;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n\n      let offset = i * vertexFloatCount;\n\n      // position\n      vertices[offset++] = radius * sinTheta;\n      vertices[offset++] = y * unitHeight - halfHeight;\n      vertices[offset++] = radius * cosTheta;\n\n      // Normal\n      vertices[offset++] = sinTheta;\n      vertices[offset++] = 0;\n      vertices[offset++] = cosTheta;\n\n      // Texcoord\n      vertices[offset++] = u;\n      vertices[offset++] = 1 - v;\n    }\n\n    for (let i = 0; i < torsoRectangleCount; ++i) {\n      const x = i % radialSegments;\n      const y = (i * radialSegmentsReciprocal) | 0;\n\n      const a = y * radialCount + x;\n      const b = a + 1;\n      const c = a + radialCount;\n      const d = c + 1;\n\n      indices[indicesOffset++] = b;\n      indices[indicesOffset++] = c;\n      indices[indicesOffset++] = a;\n      indices[indicesOffset++] = b;\n      indices[indicesOffset++] = d;\n      indices[indicesOffset++] = c;\n    }\n\n    PrimitiveMesh._createCapsuleCap(\n      radius,\n      height,\n      radialSegments,\n      thetaStart,\n      thetaRange,\n      torsoVertexCount,\n      1,\n      vertices,\n      indices,\n      indicesOffset\n    );\n\n    PrimitiveMesh._createCapsuleCap(\n      radius,\n      height,\n      radialSegments,\n      thetaStart,\n      -thetaRange,\n      torsoVertexCount + capVertexCount,\n      -1,\n      vertices,\n      indices,\n      indicesOffset + 6 * capRectangleCount\n    );\n\n    if (!isRestoreMode) {\n      const { bounds } = capsuleMesh;\n      bounds.min.set(-radius, -radius - halfHeight, -radius);\n      bounds.max.set(radius, radius + halfHeight, radius);\n    }\n\n    PrimitiveMesh._initialize(capsuleMesh, vertices, indices, noLongerAccessible, isRestoreMode, restoreVertexBuffer);\n  }\n\n  private static _initialize(\n    mesh: ModelMesh,\n    vertices: Float32Array,\n    indices: Uint16Array | Uint32Array,\n    noLongerAccessible: boolean,\n    isRestoreMode: boolean,\n    restoreVertexBuffer?: Buffer\n  ) {\n    if (isRestoreMode) {\n      restoreVertexBuffer.setData(vertices);\n      mesh.setIndices(indices);\n      mesh.uploadData(noLongerAccessible);\n    } else {\n      const vertexElements = [\n        new VertexElement(VertexAttribute.Position, 0, VertexElementFormat.Vector3, 0),\n        new VertexElement(VertexAttribute.Normal, 12, VertexElementFormat.Vector3, 0),\n        new VertexElement(VertexAttribute.UV, 24, VertexElementFormat.Vector2, 0)\n      ];\n      mesh.setVertexElements(vertexElements);\n\n      const vertexBuffer = new Buffer(mesh.engine, BufferBindFlag.VertexBuffer, vertices, BufferUsage.Static, true);\n      mesh.setVertexBufferBinding(vertexBuffer, 32, 0);\n\n      mesh.setIndices(indices);\n      mesh.calculateTangents();\n\n      mesh.uploadData(noLongerAccessible);\n\n      mesh.addSubMesh(0, indices.length);\n    }\n  }\n\n  private static _generateIndices(engine: Engine, vertexCount: number, indexCount: number): Uint16Array | Uint32Array {\n    let indices: Uint16Array | Uint32Array = null;\n    if (vertexCount > 65535) {\n      if (engine._hardwareRenderer.canIUse(GLCapabilityType.elementIndexUint)) {\n        indices = new Uint32Array(indexCount);\n      } else {\n        throw Error(\"The vertex count is over limit.\");\n      }\n    } else {\n      indices = new Uint16Array(indexCount);\n    }\n    return indices;\n  }\n\n  private static _createCapsuleCap(\n    radius: number,\n    height: number,\n    radialSegments: number,\n    thetaStart: number,\n    thetaRange: number,\n    offset: number,\n    posIndex: number,\n    vertices: Float32Array,\n    indices: Uint16Array | Uint32Array,\n    indicesOffset: number\n  ) {\n    const radialCount = radialSegments + 1;\n    const halfHeight = height * 0.5 * posIndex;\n    const capVertexCount = radialCount * radialCount;\n    const capRectangleCount = radialSegments * radialSegments;\n    const radialCountReciprocal = 1.0 / radialCount;\n    const radialSegmentsReciprocal = 1.0 / radialSegments;\n    const vertexFloatCount = 8;\n\n    for (let i = 0; i < capVertexCount; ++i) {\n      const x = i % radialCount;\n      const y = (i * radialCountReciprocal) | 0;\n      const u = x * radialSegmentsReciprocal;\n      const v = y * radialSegmentsReciprocal;\n      const theta = thetaStart + u * thetaRange;\n      const alpha = v * Math.PI * 0.5;\n      const sinAlpha = Math.sin(alpha);\n\n      const posX = radius * Math.sin(theta) * sinAlpha;\n      const posY = radius * Math.cos(alpha) * posIndex + halfHeight;\n      const posZ = radius * Math.cos(theta) * sinAlpha;\n\n      let index = (i + offset) * vertexFloatCount;\n      // Position\n      vertices[index++] = posX;\n      vertices[index++] = posY;\n      vertices[index++] = posZ;\n\n      // Normal\n      vertices[index++] = posX;\n      vertices[index++] = posY - halfHeight;\n      vertices[index++] = posZ;\n\n      // Texcoord\n      vertices[index++] = u;\n      vertices[index++] = v;\n    }\n\n    for (let i = 0; i < capRectangleCount; ++i) {\n      const x = i % radialSegments;\n      const y = (i * radialSegmentsReciprocal) | 0;\n\n      const a = y * radialCount + x + offset;\n      const b = a + 1;\n      const c = a + radialCount;\n      const d = c + 1;\n\n      indices[indicesOffset++] = b;\n      indices[indicesOffset++] = a;\n      indices[indicesOffset++] = d;\n      indices[indicesOffset++] = a;\n      indices[indicesOffset++] = c;\n      indices[indicesOffset++] = d;\n    }\n  }\n}\n\ninterface IEdge {\n  edgePoint: Vector3;\n  edgePointIndex: number;\n}\n\ninterface IFace {\n  facePoint: Vector3;\n  adjacentEdges: Array<IEdge>;\n}\n","function _is_native_reflect_construct() {\n    // Since Reflect.construct can't be properly polyfilled, some\n    // implementations (e.g. core-js@2) don't set the correct internal slots.\n    // Those polyfills don't allow us to subclass built-ins, so we need to\n    // use our fallback implementation.\n    try {\n        // If the internal slots aren't set, this throws an error similar to\n        //   TypeError: this is not a Boolean object.\n        var result = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n    } catch (_) {}\n    return (_is_native_reflect_construct = function() {\n        return !!result;\n    })();\n}\n\nexport { _is_native_reflect_construct as _ };\n","import { _ as _is_native_reflect_construct } from \"./_is_native_reflect_construct.js\";\nimport { _ as _set_prototype_of } from \"./_set_prototype_of.js\";\nfunction _construct(Parent, args, Class) {\n    if (_is_native_reflect_construct()) _construct = Reflect.construct;\n    else {\n        _construct = function construct(Parent, args, Class) {\n            var a = [null];\n            a.push.apply(a, args);\n            var Constructor = Function.bind.apply(Parent, a);\n            var instance = new Constructor();\n\n            if (Class) _set_prototype_of(instance, Class.prototype);\n\n            return instance;\n        };\n    }\n\n    return _construct.apply(null, arguments);\n}\nexport { _construct as _ };\n","import { Component } from \"../Component\";\nimport { Entity } from \"../Entity\";\nimport { CloneManager } from \"./CloneManager\";\n\n/**\n * Custom clone interface.\n */\nexport interface ICustomClone {\n  /**\n   * @internal\n   */\n  _cloneTo?(target: ICustomClone): void;\n  /**\n   * @internal\n   */\n  copyFrom?(source: ICustomClone): void;\n}\n\nexport interface IComponentCustomClone {\n  /**\n   * @internal\n   */\n  _cloneTo(target: IComponentCustomClone, srcRoot: Entity, targetRoot: Entity): void;\n}\n\nexport class ComponentCloner {\n  /**\n   * Clone component.\n   * @param source - Clone source\n   * @param target - Clone target\n   */\n  static cloneComponent(\n    source: Component,\n    target: Component,\n    srcRoot: Entity,\n    targetRoot: Entity,\n    deepInstanceMap: Map<Object, Object>\n  ): void {\n    const cloneModes = CloneManager.getCloneMode(source.constructor);\n\n    for (let k in source) {\n      CloneManager.cloneProperty(source, target, k, cloneModes[k], srcRoot, targetRoot, deepInstanceMap);\n    }\n\n    if ((<IComponentCustomClone>(source as unknown))._cloneTo) {\n      (<IComponentCustomClone>(source as unknown))._cloneTo(\n        <IComponentCustomClone>(target as unknown),\n        srcRoot,\n        targetRoot\n      );\n    }\n  }\n}\n","import { Matrix } from \"@galacean/engine-math\";\nimport { BoolUpdateFlag } from \"./BoolUpdateFlag\";\nimport { Component } from \"./Component\";\nimport { ComponentsDependencies } from \"./ComponentsDependencies\";\nimport { Engine } from \"./Engine\";\nimport { Layer } from \"./Layer\";\nimport { Scene } from \"./Scene\";\nimport { Script } from \"./Script\";\nimport { Transform } from \"./Transform\";\nimport { ReferResource } from \"./asset/ReferResource\";\nimport { EngineObject } from \"./base\";\nimport { ComponentCloner } from \"./clone/ComponentCloner\";\nimport { ActiveChangeFlag } from \"./enums/ActiveChangeFlag\";\nimport { DisorderedArray } from \"./utils/DisorderedArray\";\n\n/**\n * Entity, be used as components container.\n */\nexport class Entity extends EngineObject {\n  /**\n   * @internal\n   */\n  static _findChildByName(root: Entity, name: string): Entity {\n    const children = root._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child = children[i];\n      if (child.name === name) {\n        return child;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @internal\n   */\n  static _traverseSetOwnerScene(entity: Entity, scene: Scene): void {\n    entity._scene = scene;\n    const children = entity._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      this._traverseSetOwnerScene(children[i], scene);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _getEntityHierarchyPath(rootEntity: Entity, searchEntity: Entity, inversePath: number[]): boolean {\n    inversePath.length = 0;\n    while (searchEntity !== rootEntity) {\n      const parent = searchEntity.parent;\n      if (!parent) {\n        return false;\n      }\n      inversePath.push(searchEntity.siblingIndex);\n      searchEntity = parent;\n    }\n    return true;\n  }\n\n  /**\n   * @internal\n   */\n  static _getEntityByHierarchyPath(rootEntity: Entity, inversePath: number[]): Entity {\n    let entity = rootEntity;\n    for (let i = inversePath.length - 1; i >= 0; i--) {\n      entity = entity.children[inversePath[i]];\n    }\n    return entity;\n  }\n\n  /** The name of entity. */\n  name: string;\n  /** The layer the entity belongs to. */\n  layer: Layer = Layer.Layer0;\n  /** Transform component. */\n  readonly transform: Transform;\n\n  /** @internal */\n  _isActiveInHierarchy: boolean = false;\n  /** @internal */\n  _isActiveInScene: boolean = false;\n  /** @internal */\n  _components: Component[] = [];\n  /** @internal */\n  _scripts: DisorderedArray<Script> = new DisorderedArray<Script>();\n  /** @internal */\n  _children: Entity[] = [];\n  /** @internal */\n  _scene: Scene;\n  /** @internal */\n  _isRoot: boolean = false;\n  /** @internal */\n  _isActive: boolean = true;\n  /** @internal */\n  _siblingIndex: number = -1;\n\n  /** @internal */\n  _isTemplate: boolean = false;\n\n  private _templateResource: ReferResource;\n  private _parent: Entity = null;\n  private _activeChangedComponents: Component[];\n\n  /**\n   * Whether to activate locally.\n   */\n  get isActive(): boolean {\n    return this._isActive;\n  }\n\n  set isActive(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      if (value) {\n        const parent = this._parent;\n\n        let activeChangeFlag = ActiveChangeFlag.None;\n        if (this._isRoot && this._scene._isActiveInEngine) {\n          activeChangeFlag |= ActiveChangeFlag.All;\n        } else {\n          parent?._isActiveInHierarchy && (activeChangeFlag |= ActiveChangeFlag.Hierarchy);\n          parent?._isActiveInScene && (activeChangeFlag |= ActiveChangeFlag.Scene);\n        }\n\n        activeChangeFlag && this._processActive(activeChangeFlag);\n      } else {\n        let activeChangeFlag = ActiveChangeFlag.None;\n        this._isActiveInHierarchy && (activeChangeFlag |= ActiveChangeFlag.Hierarchy);\n        this._isActiveInScene && (activeChangeFlag |= ActiveChangeFlag.Scene);\n\n        activeChangeFlag && this._processInActive(activeChangeFlag);\n      }\n    }\n  }\n\n  /**\n   * Whether it is active in the hierarchy.\n   */\n  get isActiveInHierarchy(): boolean {\n    return this._isActiveInHierarchy;\n  }\n\n  /**\n   * The parent entity.\n   */\n  get parent(): Entity {\n    return this._parent;\n  }\n\n  set parent(value: Entity) {\n    this._setParent(value);\n  }\n\n  /**\n   * The children entities\n   */\n  get children(): Readonly<Entity[]> {\n    return this._children;\n  }\n\n  /**\n   * @deprecated Please use `children.length` property instead.\n   * Number of the children entities\n   */\n  get childCount(): number {\n    return this._children.length;\n  }\n\n  /**\n   * The scene the entity belongs to.\n   */\n  get scene(): Scene {\n    return this._scene;\n  }\n\n  /**\n   * The sibling index.\n   */\n  get siblingIndex(): number {\n    return this._siblingIndex;\n  }\n\n  set siblingIndex(value: number) {\n    if (this._siblingIndex === -1) {\n      throw `The entity ${this.name} is not in the hierarchy`;\n    }\n\n    this._setSiblingIndex(this._isRoot ? this._scene._rootEntities : this._parent._children, value);\n  }\n\n  /**\n   * Create a entity.\n   * @param engine - The engine the entity belongs to\n   */\n  constructor(engine: Engine, name?: string) {\n    super(engine);\n    this.name = name;\n    this.transform = this.addComponent(Transform);\n    this._inverseWorldMatFlag = this.transform.registerWorldChangeFlag();\n  }\n\n  /**\n   * Add component based on the component type.\n   * @param type - The type of the component\n   * @param args - The arguments of the component\n   * @returns\tThe component which has been added\n   */\n  addComponent<T extends new (entity: Entity, ...args: any[]) => Component>(\n    type: T,\n    ...args: ComponentArguments<T>\n  ): InstanceType<T> {\n    ComponentsDependencies._addCheck(this, type);\n    const component = new type(this, ...args) as InstanceType<T>;\n    this._components.push(component);\n    component._setActive(true, ActiveChangeFlag.All);\n    return component;\n  }\n\n  /**\n   * Get component which match the type.\n   * @param type - The type of the component\n   * @returns\tThe first component which match type\n   */\n  getComponent<T extends Component>(type: new (entity: Entity) => T): T | null {\n    const components = this._components;\n    for (let i = 0, n = components.length; i < n; i++) {\n      const component = components[i];\n      if (component instanceof type) {\n        return component;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get components which match the type.\n   * @param type - The type of the component\n   * @param results - The components which match type\n   * @returns\tThe components which match type\n   */\n  getComponents<T extends Component>(type: new (entity: Entity) => T, results: T[]): T[] {\n    results.length = 0;\n    const components = this._components;\n    for (let i = 0, n = components.length; i < n; i++) {\n      const component = components[i];\n      if (component instanceof type) {\n        results.push(component);\n      }\n    }\n    return results;\n  }\n\n  /**\n   * Get the components which match the type of the entity and it's children.\n   * @param type - The component type\n   * @param results - The components collection\n   * @returns\tThe components collection which match the type\n   */\n  getComponentsIncludeChildren<T extends Component>(type: new (entity: Entity) => T, results: T[]): T[] {\n    results.length = 0;\n    this._getComponentsInChildren<T>(type, results);\n    return results;\n  }\n\n  /**\n   * Add child entity.\n   * @param child - The child entity which want to be added\n   */\n  addChild(child: Entity): void;\n\n  /**\n   * Add child entity at specified index.\n   * @param index - specified index\n   * @param child - The child entity which want to be added\n   */\n  addChild(index: number, child: Entity): void;\n\n  addChild(indexOrChild: number | Entity, child?: Entity): void {\n    let index: number;\n    if (typeof indexOrChild === \"number\") {\n      index = indexOrChild;\n    } else {\n      index = undefined;\n      child = indexOrChild;\n    }\n\n    if (child._isRoot) {\n      child._scene._removeFromEntityList(child);\n      child._isRoot = false;\n\n      this._addToChildrenList(index, child);\n      child._parent = this;\n\n      const oldScene = child._scene;\n      const newScene = this._scene;\n\n      let inActiveChangeFlag = ActiveChangeFlag.None;\n      if (!this._isActiveInHierarchy) {\n        child._isActiveInHierarchy && (inActiveChangeFlag |= ActiveChangeFlag.Hierarchy);\n      }\n      if (child._isActiveInScene) {\n        if (this._isActiveInScene) {\n          // Cross scene should inActive first and then active\n          oldScene !== newScene && (inActiveChangeFlag |= ActiveChangeFlag.Scene);\n        } else {\n          inActiveChangeFlag |= ActiveChangeFlag.Scene;\n        }\n      }\n\n      inActiveChangeFlag && child._processInActive(inActiveChangeFlag);\n\n      if (child._scene !== newScene) {\n        Entity._traverseSetOwnerScene(child, newScene);\n      }\n\n      let activeChangeFlag = ActiveChangeFlag.None;\n      if (child._isActive) {\n        if (this._isActiveInHierarchy) {\n          !child._isActiveInHierarchy && (activeChangeFlag |= ActiveChangeFlag.Hierarchy);\n        }\n        if (this._isActiveInScene) {\n          (!child._isActiveInScene || oldScene !== newScene) && (activeChangeFlag |= ActiveChangeFlag.Scene);\n        }\n      }\n      activeChangeFlag && child._processActive(activeChangeFlag);\n\n      child._setTransformDirty();\n    } else {\n      child._setParent(this, index);\n    }\n  }\n\n  /**\n   * Remove child entity.\n   * @param child - The child entity which want to be removed\n   */\n  removeChild(child: Entity): void {\n    child._setParent(null);\n  }\n\n  /**\n   * @deprecated Please use `children` property instead.\n   * Find child entity by index.\n   * @param index - The index of the child entity\n   * @returns\tThe component which be found\n   */\n  getChild(index: number): Entity {\n    return this._children[index];\n  }\n\n  /**\n   * Find entity by name.\n   * @param name - The name of the entity which want to be found\n   * @returns The component which be found\n   */\n  findByName(name: string): Entity {\n    if (name === this.name) {\n      return this;\n    }\n    const children = this._children;\n    for (let i = 0, n = children.length; i < n; i++) {\n      const target = children[i].findByName(name);\n      if (target) {\n        return target;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Find the entity by path.\n   * @param path - The path fo the entity eg: /entity\n   * @returns The component which be found\n   */\n  findByPath(path: string): Entity {\n    const splits = path.split(\"/\");\n    let entity: Entity = this;\n    for (let i = 0, length = splits.length; i < length; ++i) {\n      const split = splits[i];\n      if (split) {\n        entity = Entity._findChildByName(entity, split);\n        if (!entity) {\n          return null;\n        }\n      }\n    }\n    return entity;\n  }\n\n  /**\n   * Create child entity.\n   * @param name - The child entity's name\n   * @returns The child entity\n   */\n  createChild(name?: string): Entity {\n    const child = new Entity(this.engine, name);\n    child.layer = this.layer;\n    child.parent = this;\n    return child;\n  }\n\n  /**\n   * Clear children entities.\n   */\n  clearChildren(): void {\n    const children = this._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child = children[i];\n      child._parent = null;\n\n      let activeChangeFlag = ActiveChangeFlag.None;\n      child._isActiveInHierarchy && (activeChangeFlag |= ActiveChangeFlag.Hierarchy);\n      child._isActiveInScene && (activeChangeFlag |= ActiveChangeFlag.Scene);\n      activeChangeFlag && child._processInActive(activeChangeFlag);\n\n      Entity._traverseSetOwnerScene(child, null); // Must after child._processInActive().\n    }\n    children.length = 0;\n  }\n\n  /**\n   * Clone this entity include children and components.\n   * @returns Cloned entity\n   */\n  clone(): Entity {\n    const cloneEntity = this._createCloneEntity();\n    this._parseCloneEntity(this, cloneEntity, this, cloneEntity, new Map<Object, Object>());\n    return cloneEntity;\n  }\n\n  /**\n   * @internal\n   */\n  _markAsTemplate(templateResource: ReferResource): void {\n    this._isTemplate = true;\n    this._templateResource = templateResource;\n  }\n\n  private _createCloneEntity(): Entity {\n    const cloneEntity = new Entity(this._engine, this.name);\n\n    const templateResource = this._templateResource;\n    if (templateResource) {\n      cloneEntity._templateResource = templateResource;\n      templateResource._addReferCount(1);\n    }\n\n    cloneEntity.layer = this.layer;\n    cloneEntity._isActive = this._isActive;\n    const { transform: cloneTransform } = cloneEntity;\n    const { transform: srcTransform } = this;\n    cloneTransform.position = srcTransform.position;\n    cloneTransform.rotation = srcTransform.rotation;\n    cloneTransform.scale = srcTransform.scale;\n\n    const srcChildren = this._children;\n    for (let i = 0, n = srcChildren.length; i < n; i++) {\n      cloneEntity.addChild(srcChildren[i]._createCloneEntity());\n    }\n    return cloneEntity;\n  }\n\n  private _parseCloneEntity(\n    src: Entity,\n    target: Entity,\n    srcRoot: Entity,\n    targetRoot: Entity,\n    deepInstanceMap: Map<Object, Object>\n  ): void {\n    const srcChildren = src._children;\n    const targetChildren = target._children;\n    for (let i = 0, n = srcChildren.length; i < n; i++) {\n      this._parseCloneEntity(srcChildren[i], targetChildren[i], srcRoot, targetRoot, deepInstanceMap);\n    }\n\n    const components = src._components;\n    for (let i = 0, n = components.length; i < n; i++) {\n      const sourceComp = components[i];\n      if (!(sourceComp instanceof Transform)) {\n        const targetComp = target.addComponent(<new (entity: Entity) => Component>sourceComp.constructor);\n        ComponentCloner.cloneComponent(sourceComp, targetComp, srcRoot, targetRoot, deepInstanceMap);\n      }\n    }\n  }\n\n  /**\n   * Destroy self.\n   */\n  override destroy(): void {\n    if (this._destroyed) {\n      return;\n    }\n\n    super.destroy();\n\n    if (this._templateResource) {\n      this._isTemplate || this._templateResource._addReferCount(-1);\n      this._templateResource = null;\n    }\n\n    const components = this._components;\n    for (let i = components.length - 1; i >= 0; i--) {\n      components[i].destroy();\n    }\n    this._components.length = 0;\n\n    const children = this._children;\n    while (children.length > 0) {\n      children[0].destroy();\n    }\n\n    if (this._isRoot) {\n      this._scene.removeRootEntity(this);\n    } else {\n      this._setParent(null);\n    }\n\n    this.isActive = false;\n  }\n\n  /**\n   * @internal\n   */\n  _removeComponent(component: Component): void {\n    ComponentsDependencies._removeCheck(this, component.constructor as any);\n    const components = this._components;\n    components.splice(components.indexOf(component), 1);\n  }\n\n  /**\n   * @internal\n   */\n  _addScript(script: Script) {\n    script._entityScriptsIndex = this._scripts.length;\n    this._scripts.add(script);\n  }\n\n  /**\n   * @internal\n   */\n  _removeScript(script: Script): void {\n    const replaced = this._scripts.deleteByIndex(script._entityScriptsIndex);\n    replaced && (replaced._entityScriptsIndex = script._entityScriptsIndex);\n    script._entityScriptsIndex = -1;\n  }\n\n  /**\n   * @internal\n   */\n  _removeFromParent(): void {\n    const oldParent = this._parent;\n    if (oldParent != null) {\n      const oldSibling = oldParent._children;\n      let index = this._siblingIndex;\n      oldSibling.splice(index, 1);\n      for (let n = oldSibling.length; index < n; index++) {\n        oldSibling[index]._siblingIndex--;\n      }\n      this._parent = null;\n      this._siblingIndex = -1;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _processActive(activeChangeFlag: ActiveChangeFlag): void {\n    if (this._activeChangedComponents) {\n      throw \"Note: can't set the 'main inActive entity' active in hierarchy, if the operation is in main inActive entity or it's children script's onDisable Event.\";\n    }\n    this._activeChangedComponents = this._scene._componentsManager.getActiveChangedTempList();\n    this._setActiveInHierarchy(this._activeChangedComponents, activeChangeFlag);\n    this._setActiveComponents(true, activeChangeFlag);\n  }\n\n  /**\n   * @internal\n   */\n  _processInActive(activeChangeFlag: ActiveChangeFlag): void {\n    if (this._activeChangedComponents) {\n      throw \"Note: can't set the 'main active entity' inActive in hierarchy, if the operation is in main active entity or it's children script's onEnable Event.\";\n    }\n    this._activeChangedComponents = this._scene._componentsManager.getActiveChangedTempList();\n    this._setInActiveInHierarchy(this._activeChangedComponents, activeChangeFlag);\n    this._setActiveComponents(false, activeChangeFlag);\n  }\n\n  /**\n   * @internal\n   */\n  _setTransformDirty() {\n    if (this.transform) {\n      this.transform._parentChange();\n    } else {\n      for (let i = 0, len = this._children.length; i < len; i++) {\n        this._children[i]._setTransformDirty();\n      }\n    }\n  }\n\n  private _addToChildrenList(index: number, child: Entity): void {\n    const children = this._children;\n    const childCount = children.length;\n    if (index === undefined) {\n      child._siblingIndex = childCount;\n      children.push(child);\n    } else {\n      if (index < 0 || index > childCount) {\n        throw `The index ${index} is out of child list bounds ${childCount}`;\n      }\n      child._siblingIndex = index;\n      children.splice(index, 0, child);\n      for (let i = index + 1, n = childCount + 1; i < n; i++) {\n        children[i]._siblingIndex++;\n      }\n    }\n  }\n\n  private _setParent(parent: Entity, siblingIndex?: number): void {\n    const oldParent = this._parent;\n    if (parent !== oldParent) {\n      this._removeFromParent();\n      this._parent = parent;\n      if (parent) {\n        parent._addToChildrenList(siblingIndex, this);\n\n        const oldScene = this._scene;\n        const parentScene = parent._scene;\n\n        let inActiveChangeFlag = ActiveChangeFlag.None;\n        if (!parent._isActiveInHierarchy) {\n          this._isActiveInHierarchy && (inActiveChangeFlag |= ActiveChangeFlag.Hierarchy);\n        }\n        if (parent._isActiveInScene) {\n          // cross scene should inActive first and then active\n          this._isActiveInScene && oldScene !== parentScene && (inActiveChangeFlag |= ActiveChangeFlag.Scene);\n        } else {\n          this._isActiveInScene && (inActiveChangeFlag |= ActiveChangeFlag.Scene);\n        }\n        inActiveChangeFlag && this._processInActive(inActiveChangeFlag);\n\n        if (oldScene !== parentScene) {\n          Entity._traverseSetOwnerScene(this, parentScene);\n        }\n\n        let activeChangeFlag = ActiveChangeFlag.None;\n\n        if (this._isActive) {\n          if (parent._isActiveInHierarchy) {\n            !this._isActiveInHierarchy && (activeChangeFlag |= ActiveChangeFlag.Hierarchy);\n          }\n          if (parent._isActiveInScene) {\n            (!this._isActiveInScene || oldScene !== parentScene) && (activeChangeFlag |= ActiveChangeFlag.Scene);\n          }\n        }\n\n        activeChangeFlag && this._processActive(activeChangeFlag);\n      } else {\n        let inActiveChangeFlag = ActiveChangeFlag.None;\n        this._isActiveInHierarchy && (inActiveChangeFlag |= ActiveChangeFlag.Hierarchy);\n        this._isActiveInScene && (inActiveChangeFlag |= ActiveChangeFlag.Scene);\n        inActiveChangeFlag && this._processInActive(inActiveChangeFlag);\n        if (oldParent) {\n          Entity._traverseSetOwnerScene(this, null);\n        }\n      }\n      this._setTransformDirty();\n    }\n  }\n\n  private _getComponentsInChildren<T extends Component>(type: new (entity: Entity) => T, results: T[]): void {\n    for (let i = this._components.length - 1; i >= 0; i--) {\n      const component = this._components[i];\n      if (component instanceof type) {\n        results.push(component);\n      }\n    }\n    for (let i = this._children.length - 1; i >= 0; i--) {\n      this._children[i]._getComponentsInChildren<T>(type, results);\n    }\n  }\n\n  private _setActiveComponents(isActive: boolean, activeChangeFlag: ActiveChangeFlag): void {\n    const activeChangedComponents = this._activeChangedComponents;\n    for (let i = 0, length = activeChangedComponents.length; i < length; ++i) {\n      activeChangedComponents[i]._setActive(isActive, activeChangeFlag);\n    }\n    this._scene._componentsManager.putActiveChangedTempList(activeChangedComponents);\n    this._activeChangedComponents = null;\n  }\n\n  private _setActiveInHierarchy(activeChangedComponents: Component[], activeChangeFlag: ActiveChangeFlag): void {\n    activeChangeFlag & ActiveChangeFlag.Hierarchy && (this._isActiveInHierarchy = true);\n    activeChangeFlag & ActiveChangeFlag.Scene && (this._isActiveInScene = true);\n    const components = this._components;\n    for (let i = 0, n = components.length; i < n; i++) {\n      const component = components[i];\n      (component.enabled || !component._awoken) && activeChangedComponents.push(component);\n    }\n    const children = this._children;\n    for (let i = 0, n = children.length; i < n; i++) {\n      const child = children[i];\n      child.isActive && child._setActiveInHierarchy(activeChangedComponents, activeChangeFlag);\n    }\n  }\n\n  private _setInActiveInHierarchy(activeChangedComponents: Component[], activeChangeFlag: ActiveChangeFlag): void {\n    activeChangeFlag & ActiveChangeFlag.Hierarchy && (this._isActiveInHierarchy = false);\n    activeChangeFlag & ActiveChangeFlag.Scene && (this._isActiveInScene = false);\n    const components = this._components;\n    for (let i = 0, n = components.length; i < n; i++) {\n      const component = components[i];\n      component.enabled && activeChangedComponents.push(component);\n    }\n    const children = this._children;\n    for (let i = 0, n = children.length; i < n; i++) {\n      const child = children[i];\n      child.isActive && child._setInActiveInHierarchy(activeChangedComponents, activeChangeFlag);\n    }\n  }\n\n  private _setSiblingIndex(sibling: Entity[], target: number): void {\n    target = Math.min(target, sibling.length - 1);\n    if (target < 0) {\n      throw `Sibling index ${target} should large than 0`;\n    }\n    if (this._siblingIndex !== target) {\n      const oldIndex = this._siblingIndex;\n      if (target < oldIndex) {\n        for (let i = oldIndex; i >= target; i--) {\n          const child = i == target ? this : sibling[i - 1];\n          sibling[i] = child;\n          child._siblingIndex = i;\n        }\n      } else {\n        for (let i = oldIndex; i <= target; i++) {\n          const child = i == target ? this : sibling[i + 1];\n          sibling[i] = child;\n          child._siblingIndex = i;\n        }\n      }\n    }\n  }\n\n  //--------------------------------------------------------------deprecated----------------------------------------------------------------\n  private _invModelMatrix: Matrix = new Matrix();\n  private _inverseWorldMatFlag: BoolUpdateFlag;\n\n  /**\n   * @deprecated\n   */\n  getInvModelMatrix(): Matrix {\n    if (this._inverseWorldMatFlag.flag) {\n      Matrix.invert(this.transform.worldMatrix, this._invModelMatrix);\n      this._inverseWorldMatFlag.flag = false;\n    }\n    return this._invModelMatrix;\n  }\n}\n\ntype ComponentArguments<T extends new (entity: Entity, ...args: any[]) => Component> = T extends new (\n  entity: Entity,\n  ...args: infer P\n) => Component\n  ? P\n  : never;\n","import { Matrix } from \"@galacean/engine-math\";\nimport { Entity } from \"../Entity\";\nimport { UpdateFlagManager } from \"../UpdateFlagManager\";\nimport { Utils } from \"../Utils\";\nimport { EngineObject } from \"../base/EngineObject\";\nimport { deepClone, ignoreClone } from \"../clone/CloneManager\";\nimport { IComponentCustomClone } from \"../clone/ComponentCloner\";\nimport { SkinnedMeshRenderer } from \"./SkinnedMeshRenderer\";\n\n/**\n * Skin used for skinned mesh renderer.\n */\nexport class Skin extends EngineObject implements IComponentCustomClone {\n  /** Inverse bind matrices. */\n  @deepClone\n  inverseBindMatrices = new Array<Matrix>();\n\n  /** @internal */\n  @ignoreClone\n  _skinMatrices: Float32Array;\n  /** @internal */\n  @ignoreClone\n  _updatedManager = new UpdateFlagManager();\n\n  @ignoreClone\n  private _rootBone: Entity;\n  @ignoreClone\n  private _bones = new Array<Entity>();\n  @ignoreClone\n  private _updateMark = -1;\n\n  /**\n   * Root bone.\n   */\n  get rootBone(): Entity {\n    return this._rootBone;\n  }\n\n  set rootBone(value: Entity) {\n    if (this._rootBone !== value) {\n      this._updatedManager.dispatch(SkinUpdateFlag.RootBoneChanged, value);\n      this._rootBone = value;\n    }\n  }\n\n  /**\n   * Bones of the skin.\n   */\n  get bones(): ReadonlyArray<Entity> {\n    return this._bones;\n  }\n\n  set bones(value: ReadonlyArray<Entity>) {\n    const bones = this._bones;\n    const boneCount = value?.length ?? 0;\n    const lastBoneCount = bones.length;\n\n    bones.length = boneCount;\n    for (let i = 0; i < boneCount; i++) {\n      bones[i] = value[i];\n    }\n\n    if (lastBoneCount !== boneCount) {\n      this._skinMatrices = new Float32Array(boneCount * 16);\n      this._updatedManager.dispatch(SkinUpdateFlag.BoneCountChanged, boneCount);\n    }\n  }\n\n  constructor(public name: string) {\n    super(null);\n  }\n\n  /**\n   * @internal\n   */\n  _updateSkinMatrices(renderer: SkinnedMeshRenderer) {\n    if (this._updateMark === renderer.engine.time.frameCount) {\n      return;\n    }\n\n    const { bones, inverseBindMatrices: bindMatrices, _skinMatrices: skinMatrices } = this;\n    const worldToLocal = (this.rootBone ?? renderer.entity).getInvModelMatrix();\n    for (let i = bones.length - 1; i >= 0; i--) {\n      const bone = bones[i];\n      const offset = i * 16;\n      if (bone) {\n        Utils._floatMatrixMultiply(bone.transform.worldMatrix, bindMatrices[i].elements, 0, skinMatrices, offset);\n      } else {\n        skinMatrices.set(bindMatrices[i].elements, offset);\n      }\n      Utils._floatMatrixMultiply(worldToLocal, skinMatrices, offset, skinMatrices, offset);\n    }\n\n    this._updateMark = renderer.engine.time.frameCount;\n  }\n\n  /**\n   * @internal\n   */\n  _cloneTo(target: Skin, srcRoot: Entity, targetRoot: Entity): void {\n    const paths = new Array<number>();\n\n    // Clone rootBone\n    const rootBone = this.rootBone;\n    if (rootBone) {\n      const success = Entity._getEntityHierarchyPath(srcRoot, rootBone, paths);\n      target.rootBone = success ? Entity._getEntityByHierarchyPath(targetRoot, paths) : rootBone;\n    }\n\n    // Clone bones\n    const bones = this.bones;\n    if (bones.length > 0) {\n      const boneCount = bones.length;\n      const destBones = new Array<Entity>(boneCount);\n      for (let i = 0; i < boneCount; i++) {\n        const bone = bones[i];\n        const success = Entity._getEntityHierarchyPath(srcRoot, bone, paths);\n        destBones[i] = success ? Entity._getEntityByHierarchyPath(targetRoot, paths) : bone;\n      }\n      target.bones = destBones;\n    }\n  }\n\n  /** @deprecated Please use `bones` instead. */\n  public joints: string[] = [];\n\n  /** @deprecated Please use `rootBone` instead. */\n  get skeleton(): string {\n    return this.rootBone?.name;\n  }\n\n  set skeleton(value: string) {\n    const rootBone = this._rootBone;\n    if (rootBone) {\n      rootBone.name = value;\n    }\n  }\n}\n\nexport enum SkinUpdateFlag {\n  BoneCountChanged,\n  RootBoneChanged\n}\n","import { BoundingBox, Vector2 } from \"@galacean/engine-math\";\nimport { Entity } from \"../Entity\";\nimport { RenderContext } from \"../RenderPipeline/RenderContext\";\nimport { RendererUpdateFlags } from \"../Renderer\";\nimport { Logger } from \"../base/Logger\";\nimport { deepClone, ignoreClone } from \"../clone/CloneManager\";\nimport { ShaderProperty } from \"../shader\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { TextureFilterMode } from \"../texture/enums/TextureFilterMode\";\nimport { TextureFormat } from \"../texture/enums/TextureFormat\";\nimport { MeshRenderer } from \"./MeshRenderer\";\nimport { ModelMesh } from \"./ModelMesh\";\nimport { Skin, SkinUpdateFlag } from \"./Skin\";\n\n/**\n * SkinnedMeshRenderer.\n */\nexport class SkinnedMeshRenderer extends MeshRenderer {\n  private static _jointCountProperty = ShaderProperty.getByName(\"renderer_JointCount\");\n  private static _jointSamplerProperty = ShaderProperty.getByName(\"renderer_JointSampler\");\n  private static _jointMatrixProperty = ShaderProperty.getByName(\"renderer_JointMatrix\");\n\n  /** @internal */\n  @ignoreClone\n  _condensedBlendShapeWeights: Float32Array;\n\n  @deepClone\n  private _localBounds: BoundingBox = new BoundingBox();\n\n  @ignoreClone\n  private _jointDataCreateCache: Vector2 = new Vector2(-1, -1);\n  @ignoreClone\n  private _blendShapeWeights: Float32Array;\n  @ignoreClone\n  private _maxVertexUniformVectors: number;\n\n  @ignoreClone\n  private _jointTexture: Texture2D;\n\n  @deepClone\n  private _skin: Skin;\n\n  /**\n   * Skin of the SkinnedMeshRenderer.\n   */\n  get skin(): Skin {\n    return this._skin;\n  }\n\n  set skin(value: Skin) {\n    const lastSkin = this._skin;\n    if (lastSkin !== value) {\n      this._applySkin(lastSkin, value);\n      this._skin = value;\n    }\n  }\n\n  /**\n   * The weights of the BlendShapes.\n   * @remarks Array index is BlendShape index.\n   */\n  get blendShapeWeights(): Float32Array {\n    this._checkBlendShapeWeightLength();\n    return this._blendShapeWeights;\n  }\n\n  set blendShapeWeights(value: Float32Array) {\n    this._checkBlendShapeWeightLength();\n    const blendShapeWeights = this._blendShapeWeights;\n    if (value.length <= blendShapeWeights.length) {\n      blendShapeWeights.set(value);\n    } else {\n      for (let i = 0, n = blendShapeWeights.length; i < n; i++) {\n        blendShapeWeights[i] = value[i];\n      }\n    }\n  }\n\n  /**\n   * Local bounds.\n   */\n  get localBounds(): BoundingBox {\n    return this._localBounds;\n  }\n\n  set localBounds(value: BoundingBox) {\n    if (this._localBounds !== value) {\n      this._localBounds.copyFrom(value);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    this._skin = null;\n\n    const rhi = this.entity.engine._hardwareRenderer;\n    let maxVertexUniformVectors = rhi.renderStates.getParameter(rhi.gl.MAX_VERTEX_UNIFORM_VECTORS);\n\n    // Limit size to 256 to avoid some problem:\n    // For renderer is \"Apple GPU\", when uniform is large than 256 the skeleton matrix array access in shader very slow in Safari or WKWebview. This may be a apple bug, Chrome and Firefox is OK!\n    // For renderer is \"ANGLE (AMD, AMD Radeon(TM) Graphics Direct3011 vs_5_0 ps_5_0, D3011)\", compile shader si very slow because of max uniform is 4096.\n    maxVertexUniformVectors = Math.min(maxVertexUniformVectors, rhi._options._maxAllowSkinUniformVectorCount);\n\n    this._maxVertexUniformVectors = maxVertexUniformVectors;\n\n    this._onLocalBoundsChanged = this._onLocalBoundsChanged.bind(this);\n    this._onSkinUpdated = this._onSkinUpdated.bind(this);\n\n    const localBounds = this._localBounds;\n    // @ts-ignore\n    localBounds.min._onValueChanged = this._onLocalBoundsChanged;\n    // @ts-ignore\n    localBounds.max._onValueChanged = this._onLocalBoundsChanged;\n  }\n\n  /**\n   * @internal\n   */\n  override _updateTransformShaderData(context: RenderContext, onlyMVP: boolean, batched: boolean): void {\n    const worldMatrix = this._transform.worldMatrix;\n    if (onlyMVP) {\n      this._updateProjectionRelatedShaderData(context, worldMatrix, batched);\n    } else {\n      this._updateWorldViewRelatedShaderData(context, worldMatrix, batched);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  override _onDestroy(): void {\n    super._onDestroy();\n    this._jointDataCreateCache = null;\n    this._skin = null;\n    this._blendShapeWeights = null;\n    this._localBounds = null;\n    this._jointTexture?.destroy();\n    this._jointTexture = null;\n  }\n\n  /**\n   * @internal\n   */\n  override _cloneTo(target: SkinnedMeshRenderer, srcRoot: Entity, targetRoot: Entity): void {\n    super._cloneTo(target, srcRoot, targetRoot);\n\n    if (this.skin) {\n      target._applySkin(null, target.skin);\n    }\n\n    this._blendShapeWeights && (target._blendShapeWeights = this._blendShapeWeights.slice());\n  }\n\n  protected override _update(context: RenderContext): void {\n    const { skin } = this;\n    if (skin?.bones.length > 0) {\n      skin._updateSkinMatrices(this);\n    }\n\n    const shaderData = this.shaderData;\n    const mesh = <ModelMesh>this.mesh;\n\n    const blendShapeManager = mesh._blendShapeManager;\n    blendShapeManager._updateShaderData(shaderData, this);\n\n    const bones = skin?.bones;\n    if (bones) {\n      const bsUniformOccupiesCount = blendShapeManager._uniformOccupiesCount;\n      const boneCount = bones.length;\n      const boneDataCreateCache = this._jointDataCreateCache;\n      const boneCountChange = boneCount !== boneDataCreateCache.x;\n\n      if (boneCountChange || bsUniformOccupiesCount !== boneDataCreateCache.y) {\n        // directly use max joint count to avoid shader recompile\n        // @TODO: different shader type should use different count, not always 44\n        const remainUniformJointCount = Math.ceil((this._maxVertexUniformVectors - (44 + bsUniformOccupiesCount)) / 4);\n\n        if (boneCount > remainUniformJointCount) {\n          const engine = this.engine;\n          if (engine._hardwareRenderer.canIUseMoreJoints) {\n            if (boneCountChange) {\n              this._jointTexture?.destroy();\n              this._jointTexture = new Texture2D(engine, 4, boneCount, TextureFormat.R32G32B32A32, false);\n              this._jointTexture.filterMode = TextureFilterMode.Point;\n              this._jointTexture.isGCIgnored = true;\n            }\n            shaderData.disableMacro(\"RENDERER_JOINTS_NUM\");\n            shaderData.enableMacro(\"RENDERER_USE_JOINT_TEXTURE\");\n            shaderData.setTexture(SkinnedMeshRenderer._jointSamplerProperty, this._jointTexture);\n          } else {\n            Logger.error(\n              `component's joints count(${boneCount}) greater than device's MAX_VERTEX_UNIFORM_VECTORS number ${this._maxVertexUniformVectors}, and don't support jointTexture in this device. suggest joint count less than ${remainUniformJointCount}.`,\n              this\n            );\n          }\n        } else {\n          this._jointTexture?.destroy();\n          shaderData.disableMacro(\"RENDERER_USE_JOINT_TEXTURE\");\n          shaderData.enableMacro(\"RENDERER_JOINTS_NUM\", remainUniformJointCount.toString());\n          shaderData.setFloatArray(SkinnedMeshRenderer._jointMatrixProperty, skin._skinMatrices);\n        }\n        boneDataCreateCache.set(boneCount, bsUniformOccupiesCount);\n      }\n\n      if (this._jointTexture) {\n        this._jointTexture.setPixelBuffer(skin._skinMatrices);\n      }\n    }\n\n    super._update(context);\n  }\n\n  /**\n   * @internal\n   */\n  protected override _updateBounds(worldBounds: BoundingBox): void {\n    const rootBone = this.skin?.rootBone;\n    if (rootBone) {\n      BoundingBox.transform(this._localBounds, this._transform.worldMatrix, worldBounds);\n    } else {\n      super._updateBounds(worldBounds);\n    }\n  }\n\n  private _checkBlendShapeWeightLength(): void {\n    const mesh = <ModelMesh>this._mesh;\n    const newBlendShapeCount = mesh ? mesh.blendShapeCount : 0;\n    const lastBlendShapeWeights = this._blendShapeWeights;\n    if (lastBlendShapeWeights) {\n      const lastBlendShapeWeightsCount = lastBlendShapeWeights.length;\n      if (lastBlendShapeWeightsCount !== newBlendShapeCount) {\n        const newBlendShapeWeights = new Float32Array(newBlendShapeCount);\n        if (newBlendShapeCount > lastBlendShapeWeightsCount) {\n          newBlendShapeWeights.set(lastBlendShapeWeights);\n        } else {\n          for (let i = 0; i < newBlendShapeCount; i++) {\n            newBlendShapeWeights[i] = lastBlendShapeWeights[i];\n          }\n        }\n        this._blendShapeWeights = newBlendShapeWeights;\n      }\n    } else {\n      this._blendShapeWeights = new Float32Array(newBlendShapeCount);\n    }\n  }\n\n  @ignoreClone\n  private _onLocalBoundsChanged(): void {\n    this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;\n  }\n\n  @ignoreClone\n  private _onSkinUpdated(type: SkinUpdateFlag, value: Object): void {\n    switch (type) {\n      case SkinUpdateFlag.BoneCountChanged:\n        const shaderData = this.shaderData;\n        if (<number>value > 0) {\n          shaderData.enableMacro(\"RENDERER_HAS_SKIN\");\n          shaderData.setInt(SkinnedMeshRenderer._jointCountProperty, <number>value);\n        } else {\n          shaderData.disableMacro(\"RENDERER_HAS_SKIN\");\n        }\n        break;\n      case SkinUpdateFlag.RootBoneChanged:\n        this._setTransform((<Entity>value).transform);\n        this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;\n        break;\n    }\n  }\n\n  private _applySkin(lastSkin: Skin, value: Skin): void {\n    const lastSkinBoneCount = lastSkin?.bones?.length ?? 0;\n    const lastRootBone = lastSkin?.rootBone ?? this.entity;\n    lastSkin?._updatedManager.removeListener(this._onSkinUpdated);\n\n    const skinBoneCount = value?.bones?.length ?? 0;\n    const rootBone = value?.rootBone ?? this.entity;\n    value?._updatedManager.addListener(this._onSkinUpdated);\n\n    if (lastSkinBoneCount !== skinBoneCount) {\n      this._onSkinUpdated(SkinUpdateFlag.BoneCountChanged, skinBoneCount);\n    }\n    if (lastRootBone !== rootBone) {\n      this._onSkinUpdated(SkinUpdateFlag.RootBoneChanged, rootBone);\n    }\n  }\n\n  /**\n   * @deprecated use {@link SkinnedMeshRenderer.skin.rootBone} instead.\n   */\n  get rootBone(): Entity {\n    return this.skin.rootBone;\n  }\n\n  set rootBone(value: Entity) {\n    this.skin.rootBone = value;\n  }\n\n  /**\n   * @deprecated use {@link SkinnedMeshRenderer.skin.bones} instead.\n   */\n  get bones(): Readonly<Entity[]> {\n    return this.skin.bones;\n  }\n\n  set bones(value: Readonly<Entity[]>) {\n    this.skin.bones = value;\n  }\n}\n","import { SpriteMaskInteraction } from \"./2d\";\nimport { Engine } from \"./Engine\";\nimport { RenderQueueMaskType } from \"./RenderPipeline/enums/RenderQueueMaskType\";\nimport { ContentRestorer } from \"./asset/ContentRestorer\";\nimport { Buffer } from \"./graphic/Buffer\";\nimport { VertexElement } from \"./graphic/VertexElement\";\nimport { BufferBindFlag } from \"./graphic/enums/BufferBindFlag\";\nimport { BufferUsage } from \"./graphic/enums/BufferUsage\";\nimport { MeshTopology } from \"./graphic/enums/MeshTopology\";\nimport { VertexElementFormat } from \"./graphic/enums/VertexElementFormat\";\nimport { Material } from \"./material\";\nimport { ModelMesh } from \"./mesh\";\nimport { Shader } from \"./shader/Shader\";\nimport { BlendFactor } from \"./shader/enums/BlendFactor\";\nimport { BlendOperation } from \"./shader/enums/BlendOperation\";\nimport { ColorWriteMask } from \"./shader/enums/ColorWriteMask\";\nimport { CompareFunction } from \"./shader/enums/CompareFunction\";\nimport { CullMode } from \"./shader/enums/CullMode\";\nimport { RenderQueueType } from \"./shader/enums/RenderQueueType\";\nimport { RenderStateElementKey } from \"./shader/enums/RenderStateElementKey\";\nimport { StencilOperation } from \"./shader/enums/StencilOperation\";\nimport { Texture, Texture2D, TextureCube, TextureCubeFace } from \"./texture\";\nimport { Texture2DArray } from \"./texture/Texture2DArray\";\nimport { TextureFormat } from \"./texture/enums/TextureFormat\";\n\n/**\n * @internal\n */\nexport class BasicResources {\n  private static _maskReadInsideRenderStates: RenderStateElementMap = null;\n  private static _maskReadOutsideRenderStates: RenderStateElementMap = null;\n  private static _maskWriteIncrementRenderStates: RenderStateElementMap = null;\n  private static _maskWriteDecrementRenderStates: RenderStateElementMap = null;\n\n  static getMaskInteractionRenderStates(maskInteraction: SpriteMaskInteraction): RenderStateElementMap {\n    const visibleInsideMask = maskInteraction === SpriteMaskInteraction.VisibleInsideMask;\n    let renderStates: RenderStateElementMap;\n    let compareFunction: CompareFunction;\n\n    if (visibleInsideMask) {\n      renderStates = BasicResources._maskReadInsideRenderStates;\n      if (renderStates) {\n        return renderStates;\n      }\n      BasicResources._maskReadInsideRenderStates = renderStates = <RenderStateElementMap>{};\n      compareFunction = CompareFunction.LessEqual;\n    } else {\n      renderStates = BasicResources._maskReadOutsideRenderStates;\n      if (renderStates) {\n        return renderStates;\n      }\n      BasicResources._maskReadOutsideRenderStates = renderStates = <RenderStateElementMap>{};\n      compareFunction = CompareFunction.Greater;\n    }\n\n    renderStates[RenderStateElementKey.StencilStateEnabled] = true;\n    renderStates[RenderStateElementKey.StencilStateWriteMask] = 0x00;\n    renderStates[RenderStateElementKey.StencilStateReferenceValue] = 1;\n    renderStates[RenderStateElementKey.StencilStateCompareFunctionFront] = compareFunction;\n    renderStates[RenderStateElementKey.StencilStateCompareFunctionBack] = compareFunction;\n\n    return renderStates;\n  }\n\n  static getMaskTypeRenderStates(maskType: RenderQueueMaskType): RenderStateElementMap {\n    const isIncrement = maskType === RenderQueueMaskType.Increment;\n    let renderStates: RenderStateElementMap;\n    let passOperation: StencilOperation;\n\n    if (isIncrement) {\n      renderStates = BasicResources._maskWriteIncrementRenderStates;\n      if (renderStates) {\n        return renderStates;\n      }\n      BasicResources._maskWriteIncrementRenderStates = renderStates = <RenderStateElementMap>{};\n      passOperation = StencilOperation.IncrementSaturate;\n    } else {\n      renderStates = BasicResources._maskWriteDecrementRenderStates;\n      if (renderStates) {\n        return renderStates;\n      }\n      BasicResources._maskWriteDecrementRenderStates = renderStates = <RenderStateElementMap>{};\n      passOperation = StencilOperation.DecrementSaturate;\n    }\n\n    renderStates[RenderStateElementKey.StencilStateEnabled] = true;\n    renderStates[RenderStateElementKey.StencilStatePassOperationFront] = passOperation;\n    renderStates[RenderStateElementKey.StencilStatePassOperationBack] = passOperation;\n    renderStates[RenderStateElementKey.StencilStateCompareFunctionFront] = CompareFunction.Always;\n    renderStates[RenderStateElementKey.StencilStateCompareFunctionBack] = CompareFunction.Always;\n    const failStencilOperation = StencilOperation.Keep;\n    renderStates[RenderStateElementKey.StencilStateFailOperationFront] = failStencilOperation;\n    renderStates[RenderStateElementKey.StencilStateFailOperationBack] = failStencilOperation;\n    renderStates[RenderStateElementKey.StencilStateZFailOperationFront] = failStencilOperation;\n    renderStates[RenderStateElementKey.StencilStateZFailOperationBack] = failStencilOperation;\n    renderStates[RenderStateElementKey.BlendStateColorWriteMask0] = ColorWriteMask.None;\n    renderStates[RenderStateElementKey.DepthStateEnabled] = false;\n    renderStates[RenderStateElementKey.RasterStateCullMode] = CullMode.Off;\n\n    return renderStates;\n  }\n\n  /**\n   * Use triangle to blit texture, ref: https://michaldrobot.com/2014/04/01/gcn-execution-patterns-in-full-screen-passes/ .\n   */\n  readonly blitMesh: ModelMesh;\n  readonly flipYBlitMesh: ModelMesh;\n  readonly blitMaterial: Material;\n\n  readonly whiteTexture2D: Texture2D;\n  readonly whiteTextureCube: TextureCube;\n  readonly whiteTexture2DArray: Texture2DArray;\n  readonly uintWhiteTexture2D: Texture2D;\n\n  readonly spriteDefaultMaterial: Material;\n  readonly textDefaultMaterial: Material;\n  readonly spriteMaskDefaultMaterial: Material;\n\n  constructor(engine: Engine) {\n    // prettier-ignore\n    const vertices = new Float32Array([\n      -1, -1, 0, 1, // left-bottom\n      3, -1, 2, 1,  // right-bottom\n      -1, 3, 0, -1 ]); // left-top\n\n    // prettier-ignore\n    const flipYVertices = new Float32Array([\n      3, -1, 2, 0,  // right-bottom\n      -1, -1, 0, 0, // left-bottom\n      -1, 3, 0, 2]); // left-top\n\n    const blitMaterial = new Material(engine, Shader.find(\"blit\"));\n    blitMaterial._addReferCount(1);\n    blitMaterial.renderState.depthState.enabled = false;\n    blitMaterial.renderState.depthState.writeEnabled = false;\n\n    this.blitMesh = this._createBlitMesh(engine, vertices);\n    this.flipYBlitMesh = this._createBlitMesh(engine, flipYVertices);\n    this.blitMaterial = blitMaterial;\n\n    // Create white and magenta textures\n    const whitePixel = new Uint8Array([255, 255, 255, 255]);\n\n    this.whiteTexture2D = this._create1x1Texture(engine, TextureType.Texture2D, TextureFormat.R8G8B8A8, whitePixel);\n    this.whiteTextureCube = this._create1x1Texture(engine, TextureType.TextureCube, TextureFormat.R8G8B8A8, whitePixel);\n\n    const isWebGL2 = engine._hardwareRenderer.isWebGL2;\n    if (isWebGL2) {\n      this.whiteTexture2DArray = this._create1x1Texture(\n        engine,\n        TextureType.Texture2DArray,\n        TextureFormat.R8G8B8A8,\n        whitePixel\n      );\n\n      const whitePixel32 = new Uint32Array([255, 255, 255, 255]);\n      this.uintWhiteTexture2D = this._create1x1Texture(\n        engine,\n        TextureType.Texture2D,\n        TextureFormat.R32G32B32A32_UInt,\n        whitePixel32\n      );\n    }\n\n    this.spriteDefaultMaterial = this._create2DMaterial(engine, Shader.find(\"Sprite\"));\n    this.textDefaultMaterial = this._create2DMaterial(engine, Shader.find(\"Text\"));\n    this.spriteMaskDefaultMaterial = this._createSpriteMaskMaterial(engine);\n  }\n\n  private _createBlitMesh(engine: Engine, vertices: Float32Array): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    mesh._addReferCount(1);\n    mesh.setVertexElements([new VertexElement(\"POSITION_UV\", 0, VertexElementFormat.Vector4, 0)]);\n    const buffer = new Buffer(engine, BufferBindFlag.VertexBuffer, vertices, BufferUsage.Static, true);\n    mesh.setVertexBufferBinding(buffer, 16);\n    mesh.addSubMesh(0, 3, MeshTopology.Triangles);\n    engine.resourceManager.addContentRestorer(\n      new (class extends ContentRestorer<ModelMesh> {\n        constructor() {\n          super(mesh);\n        }\n        restoreContent() {\n          buffer.setData(buffer.data);\n        }\n      })()\n    );\n    return mesh;\n  }\n\n  private _create1x1Texture<T extends Texture>(\n    engine: Engine,\n    type: TextureType,\n    format: TextureFormat,\n    pixel: Uint8Array | Uint32Array\n  ): T {\n    let texture: Texture;\n\n    switch (type) {\n      case TextureType.Texture2D:\n        const texture2D = new Texture2D(engine, 1, 1, format, false);\n        texture2D.setPixelBuffer(pixel);\n        texture = texture2D;\n        break;\n      case TextureType.Texture2DArray:\n        const texture2DArray = new Texture2DArray(engine, 1, 1, 1, format, false);\n        texture2DArray.setPixelBuffer(0, pixel);\n        texture = texture2DArray;\n        break;\n      case TextureType.TextureCube:\n        const textureCube = new TextureCube(engine, 1, format, false);\n        for (let i = 0; i < 6; i++) {\n          textureCube.setPixelBuffer(TextureCubeFace.PositiveX + i, pixel);\n        }\n        texture = textureCube;\n        break;\n      default:\n        throw \"Invalid texture type\";\n    }\n\n    texture.isGCIgnored = true;\n    engine.resourceManager.addContentRestorer(\n      new (class extends ContentRestorer<Texture> {\n        constructor() {\n          super(texture);\n        }\n        restoreContent() {\n          switch (type) {\n            case TextureType.Texture2D:\n              (<Texture2D>this.resource).setPixelBuffer(pixel);\n              break;\n            case TextureType.Texture2DArray:\n              (<Texture2DArray>this.resource).setPixelBuffer(0, pixel);\n              break;\n            case TextureType.TextureCube:\n              for (let i = 0; i < 6; i++) {\n                (<TextureCube>this.resource).setPixelBuffer(TextureCubeFace.PositiveX + i, pixel);\n              }\n              break;\n          }\n        }\n      })()\n    );\n    return texture as T;\n  }\n\n  private _create2DMaterial(engine: Engine, shader: Shader): Material {\n    const material = new Material(engine, shader);\n    const renderState = material.renderState;\n    const target = renderState.blendState.targetBlendState;\n    target.enabled = true;\n    target.sourceColorBlendFactor = BlendFactor.SourceAlpha;\n    target.destinationColorBlendFactor = BlendFactor.OneMinusSourceAlpha;\n    target.sourceAlphaBlendFactor = BlendFactor.One;\n    target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n    target.colorBlendOperation = target.alphaBlendOperation = BlendOperation.Add;\n    renderState.depthState.writeEnabled = false;\n    renderState.rasterState.cullMode = CullMode.Off;\n    renderState.renderQueueType = RenderQueueType.Transparent;\n    material.isGCIgnored = true;\n    return material;\n  }\n\n  private _createSpriteMaskMaterial(engine: Engine): Material {\n    const material = new Material(engine, Shader.find(\"SpriteMask\"));\n    material.isGCIgnored = true;\n    return material;\n  }\n}\n\nenum TextureType {\n  Texture2D,\n  TextureCube,\n  Texture2DArray\n}\n\nexport type RenderStateElementMap = Record<RenderStateElementKey, number | boolean>;\n","export abstract class ObjectPool<T extends IPoolElement> {\n  protected _type: new () => T;\n  protected _elements: T[];\n\n  constructor(type: new () => T) {\n    this._type = type;\n  }\n\n  garbageCollection(): void {\n    const elements = this._elements;\n    for (let i = elements.length - 1; i >= 0; i--) {\n      elements[i].dispose && elements[i].dispose();\n    }\n    elements.length = 0;\n  }\n\n  abstract get(): T;\n}\n\n/**\n * The basic interface for Object Pool's element.\n */\nexport interface IPoolElement {\n  /**\n   * Called when the object need be release.\n   */\n  dispose?(): void;\n}\n","import { IPoolElement, ObjectPool } from \"./ObjectPool\";\n\n/**\n * Returnable Object Pool.\n */\nexport class ReturnableObjectPool<T extends IPoolElement> extends ObjectPool<T> {\n  private _lastElementIndex: number;\n\n  constructor(type: new () => T, initializeCount: number = 1) {\n    super(type);\n    this._lastElementIndex = initializeCount - 1;\n    const elements = (this._elements = new Array<T>(initializeCount));\n    for (let i = 0; i < initializeCount; ++i) {\n      elements[i] = new type();\n    }\n  }\n\n  /**\n   * Get an object from the pool.\n   */\n  get(): T {\n    if (this._lastElementIndex < 0) {\n      return new this._type();\n    }\n    return this._elements[this._lastElementIndex--];\n  }\n\n  /**\n   * Return an object to the pool.\n   */\n  return(element: T): void {\n    this._elements[++this._lastElementIndex] = element;\n  }\n}\n","import { SubMesh } from \"../graphic\";\nimport { IPoolElement } from \"../utils/ObjectPool\";\nimport { VertexArea } from \"./VertexArea\";\nimport { PrimitiveChunk } from \"./PrimitiveChunk\";\n\n/**\n * @internal\n */\nexport class SubPrimitiveChunk implements IPoolElement {\n  chunk: PrimitiveChunk;\n  vertexArea: VertexArea;\n  subMesh: SubMesh;\n  indices: number[];\n\n  dispose?(): void {\n    this.chunk = null;\n    this.vertexArea = null;\n    this.subMesh = null;\n    this.indices = null;\n  }\n}\n","import { IPoolElement } from \"../utils/ObjectPool\";\n\n/**\n * @internal\n */\nexport class VertexArea implements IPoolElement {\n  constructor(\n    public start?: number,\n    public size?: number\n  ) {}\n\n  dispose?(): void {}\n}\n","import { Engine } from \"../Engine\";\nimport {\n  Buffer,\n  BufferBindFlag,\n  BufferUsage,\n  IndexBufferBinding,\n  IndexFormat,\n  MeshTopology,\n  Primitive,\n  SetDataOptions,\n  SubMesh,\n  VertexBufferBinding,\n  VertexElement,\n  VertexElementFormat\n} from \"../graphic\";\nimport { ReturnableObjectPool } from \"../utils/ReturnableObjectPool\";\nimport { SubPrimitiveChunk } from \"./SubPrimitiveChunk\";\nimport { VertexArea } from \"./VertexArea\";\n\n/**\n * @internal\n */\nexport class PrimitiveChunk {\n  static areaPool = new ReturnableObjectPool(VertexArea, 10);\n  static subChunkPool = new ReturnableObjectPool(SubPrimitiveChunk, 10);\n  static subMeshPool = new ReturnableObjectPool(SubMesh, 10);\n\n  primitive: Primitive;\n  vertices: Float32Array;\n  indices: Uint16Array;\n\n  updateVertexStart = Number.MAX_SAFE_INTEGER;\n  updateVertexEnd = Number.MIN_SAFE_INTEGER;\n  updateIndexLength = 0;\n\n  vertexFreeAreas: Array<VertexArea>;\n\n  constructor(engine: Engine, maxVertexCount: number) {\n    const primitive = new Primitive(engine);\n\n    // Vertex elements\n    primitive.addVertexElement(new VertexElement(\"POSITION\", 0, VertexElementFormat.Vector3, 0));\n    primitive.addVertexElement(new VertexElement(\"TEXCOORD_0\", 12, VertexElementFormat.Vector2, 0));\n    primitive.addVertexElement(new VertexElement(\"COLOR_0\", 20, VertexElementFormat.Vector4, 0));\n    primitive._addReferCount(1);\n\n    // Vertices\n    const vertexStride = 36;\n    const vertexBuffer = new Buffer(\n      engine,\n      BufferBindFlag.VertexBuffer,\n      maxVertexCount * vertexStride,\n      BufferUsage.Dynamic,\n      true\n    );\n    primitive.setVertexBufferBinding(0, new VertexBufferBinding(vertexBuffer, vertexStride));\n\n    // Indices\n    const indexBuffer = new Buffer(engine, BufferBindFlag.IndexBuffer, maxVertexCount * 8, BufferUsage.Dynamic, true);\n    primitive.setIndexBufferBinding(new IndexBufferBinding(indexBuffer, IndexFormat.UInt16));\n\n    this.primitive = primitive;\n    this.vertices = new Float32Array(vertexBuffer.data.buffer);\n    this.indices = new Uint16Array(indexBuffer.data.buffer);\n    this.vertexFreeAreas = [new VertexArea(0, maxVertexCount * 9)];\n  }\n\n  allocateSubChunk(vertexCount: number): SubPrimitiveChunk | null {\n    const area = this._allocateArea(vertexCount * 9);\n    if (area) {\n      const subChunk = PrimitiveChunk.subChunkPool.get();\n      subChunk.chunk = this;\n      subChunk.vertexArea = area;\n\n      const subMesh = PrimitiveChunk.subMeshPool.get();\n      subMesh.topology = MeshTopology.Triangles;\n      subChunk.subMesh = subMesh;\n      return subChunk;\n    }\n\n    return null;\n  }\n\n  freeSubChunk(subChunk: SubPrimitiveChunk): void {\n    this._freeArea(subChunk.vertexArea);\n    PrimitiveChunk.subMeshPool.return(subChunk.subMesh);\n    PrimitiveChunk.subChunkPool.return(subChunk);\n  }\n\n  uploadBuffer(): void {\n    // Set data option use Discard, or will resulted in performance slowdown when open antialias and cross-rendering of 3D and 2D elements.\n    // Device: iphone X(16.7.2)、iphone 15 pro max(17.1.1)、iphone XR(17.1.2) etc.\n    const { primitive, updateVertexStart, updateVertexEnd } = this;\n    if (updateVertexStart !== Number.MAX_SAFE_INTEGER && updateVertexEnd !== Number.MIN_SAFE_INTEGER) {\n      primitive.vertexBufferBindings[0].buffer.setData(\n        this.vertices,\n        updateVertexStart * 4,\n        updateVertexStart,\n        updateVertexEnd - updateVertexStart,\n        SetDataOptions.Discard\n      );\n\n      this.updateVertexStart = Number.MAX_SAFE_INTEGER;\n      this.updateVertexEnd = Number.MIN_SAFE_INTEGER;\n    }\n\n    primitive.indexBufferBinding.buffer.setData(this.indices, 0, 0, this.updateIndexLength, SetDataOptions.Discard);\n    this.updateIndexLength = 0;\n  }\n\n  destroy(): void {\n    this.primitive._addReferCount(-1);\n    this.primitive.destroy();\n    this.primitive = null;\n    this.vertices = null;\n    this.indices = null;\n  }\n\n  private _allocateArea(needSize: number): VertexArea | null {\n    const areas = this.vertexFreeAreas;\n    const pool = PrimitiveChunk.areaPool;\n    for (let i = 0, n = areas.length; i < n; ++i) {\n      const area = areas[i];\n      const size = area.size;\n      if (size > needSize) {\n        const newArea = pool.get();\n        newArea.start = area.start;\n        newArea.size = needSize;\n        area.start += needSize;\n        area.size -= needSize;\n        return newArea;\n      } else if (size === needSize) {\n        areas.splice(i, 1);\n        return area;\n      }\n    }\n    return null;\n  }\n\n  private _freeArea(area: VertexArea): void {\n    const { start, size } = area;\n    const freeAreas = this.vertexFreeAreas;\n    const end = start + size;\n    const pool = PrimitiveChunk.areaPool;\n    for (let i = 0, areaLen = freeAreas.length; i < areaLen; ++i) {\n      const curFreeArea = freeAreas[i];\n      const curStart = curFreeArea.start;\n      const curEnd = curStart + curFreeArea.size;\n\n      if (end < curStart) {\n        // The area to be freed is to the left of the current free area and is not connected\n        freeAreas.splice(i, 0, area);\n        return;\n      } else if (end === curStart) {\n        // The area to be freed is to the left of the current free area and is connected\n        curFreeArea.start = start;\n        curFreeArea.size += size;\n        pool.return(area);\n        return;\n      } else if (start === curEnd) {\n        // The area to be freed is to the right of the current free area and is connected\n        curFreeArea.size += size;\n        pool.return(area);\n        const nextIndex = i + 1;\n        if (nextIndex < areaLen) {\n          const nextFreeArea = freeAreas[nextIndex];\n          if (end === nextFreeArea.start) {\n            // The cur free area after merge is to the left of the next free area and is connected\n            curFreeArea.size += nextFreeArea.size;\n            freeAreas.splice(nextIndex, 1);\n            pool.return(nextFreeArea);\n          }\n        }\n        return;\n      }\n    }\n\n    // The area to be freed is to the right of the last free area and is not connected or free areas is empty\n    freeAreas.push(area);\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { PrimitiveChunk } from \"./PrimitiveChunk\";\nimport { SubPrimitiveChunk } from \"./SubPrimitiveChunk\";\n\n/**\n * @internal\n */\nexport class PrimitiveChunkManager {\n  primitiveChunks = new Array<PrimitiveChunk>();\n\n  constructor(\n    public engine: Engine,\n    public maxVertexCount = 4096\n  ) {}\n\n  allocateSubChunk(vertexCount: number): SubPrimitiveChunk {\n    const primitiveChunks = this.primitiveChunks;\n    const length = primitiveChunks.length;\n    let subChunk: SubPrimitiveChunk = null;\n    for (let i = 0; i < length; ++i) {\n      subChunk = primitiveChunks[i].allocateSubChunk(vertexCount);\n      if (subChunk) {\n        return subChunk;\n      }\n    }\n\n    const data = (primitiveChunks[length] ||= new PrimitiveChunk(this.engine, this.maxVertexCount));\n    subChunk = data.allocateSubChunk(vertexCount);\n    return subChunk;\n  }\n\n  freeSubChunk(subChunk: SubPrimitiveChunk): void {\n    subChunk.chunk.freeSubChunk(subChunk);\n  }\n\n  uploadBuffer(): void {\n    const { primitiveChunks } = this;\n    for (let i = 0, n = primitiveChunks.length; i < n; ++i) {\n      primitiveChunks[i].uploadBuffer();\n    }\n  }\n\n  destroy(): void {\n    const { primitiveChunks } = this;\n    for (let i = 0, n = primitiveChunks.length; i < n; ++i) {\n      primitiveChunks[i].destroy();\n    }\n    primitiveChunks.length = 0;\n    this.primitiveChunks = null;\n    this.engine = null;\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { Renderer } from \"../Renderer\";\nimport { PrimitiveChunkManager } from \"./PrimitiveChunkManager\";\nimport { RenderQueue } from \"./RenderQueue\";\nimport { SubRenderElement } from \"./SubRenderElement\";\n\n/**\n * @internal\n */\nexport class BatcherManager {\n  primitiveChunkManager2D: PrimitiveChunkManager;\n  primitiveChunkManagerMask: PrimitiveChunkManager;\n\n  constructor(engine: Engine) {\n    this.primitiveChunkManager2D = new PrimitiveChunkManager(engine);\n    this.primitiveChunkManagerMask = new PrimitiveChunkManager(engine, 128);\n  }\n\n  destroy() {\n    this.primitiveChunkManager2D.destroy();\n    this.primitiveChunkManagerMask.destroy();\n    this.primitiveChunkManager2D = null;\n    this.primitiveChunkManagerMask = null;\n  }\n\n  batch(renderQueue: RenderQueue): void {\n    const { elements, batchedSubElements, renderQueueType } = renderQueue;\n    let preSubElement: SubRenderElement;\n    let preRenderer: Renderer;\n    let preConstructor: Function;\n    for (let i = 0, n = elements.length; i < n; ++i) {\n      const subElements = elements[i].subRenderElements;\n      for (let j = 0, m = subElements.length; j < m; ++j) {\n        const subElement = subElements[j];\n\n        // Some sub render elements may not belong to the current render queue\n        if (!(subElement.renderQueueFlags & (1 << renderQueueType))) {\n          continue;\n        }\n\n        const renderer = subElement.component;\n        const constructor = renderer.constructor;\n        if (preSubElement) {\n          if (preConstructor === constructor && preRenderer._canBatch(preSubElement, subElement)) {\n            preRenderer._batch(preSubElement, subElement);\n            preSubElement.batched = true;\n          } else {\n            batchedSubElements.push(preSubElement);\n            preSubElement = subElement;\n            preRenderer = renderer;\n            preConstructor = constructor;\n            renderer._batch(subElement);\n            subElement.batched = false;\n          }\n        } else {\n          preSubElement = subElement;\n          preRenderer = renderer;\n          preConstructor = constructor;\n          renderer._batch(subElement);\n          subElement.batched = false;\n        }\n      }\n    }\n    preSubElement && batchedSubElements.push(preSubElement);\n  }\n\n  uploadBuffer() {\n    this.primitiveChunkManager2D.uploadBuffer();\n    this.primitiveChunkManagerMask.uploadBuffer();\n  }\n}\n","/**\n * Asset Type.\n */\nexport enum AssetType {\n  /**\n   * Plain text.\n   * @remarks Will not be cached based on url in ResourceManager.\n   */\n  Text = \"Text\",\n  /**\n   * JSON.\n   * @remarks Will not be cached based on url in ResourceManager.\n   */\n  JSON = \"JSON\",\n  /**\n   * ArrayBuffer.\n   * @remarks Will not be cached based on url in ResourceManager.\n   */\n  Buffer = \"Buffer\",\n  /** 2D Texture. */\n  Texture2D = \"Texture2D\",\n  /** Cube Texture. */\n  TextureCube = \"TextureCube\",\n  /** Material. */\n  Material = \"Material\",\n  /** Shader. */\n  Shader = \"Shader\",\n  /** Mesh. */\n  Mesh = \"Mesh\",\n  /** AnimationClip. */\n  AnimationClip = \"AnimationClip\",\n  /** AnimatorController. */\n  AnimatorController = \"AnimatorController\",\n  /** Prefab.*/\n  Prefab = \"Prefab\",\n  /** GLTF.*/\n  GLTF = \"GLTF\",\n  /** Compress Texture. */\n  KTX = \"KTX\",\n  /** Cube Compress Texture. */\n  KTXCube = \"KTXCube\",\n  /** KTX2 Compress Texture */\n  KTX2 = \"KTX2\",\n  /** Sprite. */\n  Sprite = \"Sprite\",\n  /** PrimitiveMesh. */\n  PrimitiveMesh = \"PrimitiveMesh\",\n  /** Sprite Atlas. */\n  SpriteAtlas = \"SpriteAtlas\",\n  /** Ambient light. */\n  Env = \"Environment\",\n  /** Scene. */\n  Scene = \"Scene\",\n  /** HDR to cube. */\n  HDR = \"HDR\",\n  /** Font. */\n  Font = \"Font\",\n  /** Source Font, include ttf、 otf and woff. */\n  SourceFont = \"SourceFont\",\n  /** Project asset. */\n  Project = \"project\"\n}\n","export class SafeLoopArray<T> {\n  private _array: T[] = [];\n  private _loopArray: T[] = [];\n  private _loopArrayDirty: boolean = false;\n\n  /**\n   * Get the length of the array.\n   */\n  get length(): number {\n    return this._array.length;\n  }\n\n  /**\n   * Push item to the array.\n   * @param item - The item which want to be pushed\n   */\n  push(item: T): void {\n    this._array.push(item);\n    this._loopArrayDirty = true;\n  }\n\n  /**\n   * Add item to the array.\n   * @param index - The index of the array\n   * @param item - The item which want to be added\n   */\n  add(index: number, item: T): void {\n    this._array.splice(index, 0, item);\n    this._loopArrayDirty = true;\n  }\n\n  /**\n   * Remove item from the array.\n   * @param index - The index of the array\n   */\n  removeByIndex(index: number): void {\n    this._array.splice(index, 1);\n    this._loopArrayDirty = true;\n  }\n\n  /**\n   * Remove item from array that pass the specified comparison function.\n   * @param filter - The comparison function\n   */\n  findAndRemove(filter: (value: T) => boolean): void {\n    const array = this._array;\n    for (let i = array.length - 1; i >= 0; i--) {\n      filter(array[i]) && this.removeByIndex(i);\n    }\n  }\n\n  /**\n   * The index of the item.\n   * @param item - The item which want to get the index\n   * @returns Index of the item\n   */\n  indexOf(item: T): number {\n    return this._array.indexOf(item);\n  }\n\n  /**\n   * Get the array.\n   * @returns The array\n   */\n  getArray(): ReadonlyArray<T> {\n    return this._array;\n  }\n\n  /**\n   * Get the array use for loop.\n   * @returns The array use for loop\n   */\n  getLoopArray(): ReadonlyArray<T> {\n    const loopArray = this._loopArray;\n    if (this._loopArrayDirty) {\n      const array = this._array;\n      const count = array.length;\n      loopArray.length = count;\n      for (let i = 0; i < count; i++) {\n        loopArray[i] = array[i];\n      }\n      this._loopArrayDirty = false;\n    }\n    return loopArray;\n  }\n}\n","import { Engine } from \"./Engine\";\nimport { Scene } from \"./Scene\";\nimport { AssetPromise } from \"./asset/AssetPromise\";\nimport { AssetType } from \"./asset/AssetType\";\nimport { SafeLoopArray } from \"./utils/SafeLoopArray\";\n\n/**\n * Scene manager.\n */\nexport class SceneManager {\n  /** @internal */\n  _allCreatedScenes: Scene[] = [];\n  /** @internal */\n  _scenes: SafeLoopArray<Scene> = new SafeLoopArray<Scene>();\n\n  /**\n   * Get the scene list.\n   */\n  get scenes(): ReadonlyArray<Scene> {\n    return this._scenes.getArray();\n  }\n\n  /**\n   * @internal\n   */\n  constructor(public readonly engine: Engine) {}\n\n  /**\n   * Add scene.\n   * @param scene - The scene which want to be added\n   */\n  addScene(scene: Scene): void;\n\n  /**\n   * Add scene at specified index.\n   * @param index - specified index\n   * @param child - The scene which want to be added\n   */\n  addScene(index: number, scene: Scene): void;\n\n  addScene(indexOrScene: number | Scene, scene?: Scene): void {\n    const scenes = this._scenes;\n\n    let index: number;\n    if (typeof indexOrScene === \"number\") {\n      if (indexOrScene < 0 || indexOrScene > scenes.length) {\n        throw \"The index is out of range.\";\n      }\n      index = indexOrScene;\n    } else {\n      index = scenes.length;\n      scene = indexOrScene;\n    }\n\n    if (scene.engine !== this.engine) {\n      throw \"The scene is not belong to this engine.\";\n    }\n\n    if (scene._sceneManager) {\n      const currentIndex = scenes.indexOf(scene);\n      if (currentIndex !== index) {\n        scenes.removeByIndex(currentIndex);\n        scenes.add(index, scene);\n      }\n    } else {\n      scene._sceneManager = this;\n      scenes.add(index, scene);\n      scene.isActive && scene._processActive(true);\n    }\n  }\n\n  /**\n   * Remove scene.\n   * @param scene - The scene which want to be removed\n   */\n  removeScene(scene: Scene): void {\n    const scenes = this._scenes;\n    const index = scenes.indexOf(scene);\n    if (index !== -1) {\n      const removedScene = scenes.getArray()[index];\n      scenes.removeByIndex(index);\n      scene._sceneManager = null;\n      removedScene.isActive && removedScene._processActive(false);\n    }\n  }\n\n  /**\n   * Load and activate scene.\n   * @param url - the path of the scene\n   * @param destroyOldScene - whether to destroy old scene\n   * @returns scene promise\n   */\n  loadScene(url: string, destroyOldScene: boolean = true): AssetPromise<Scene> {\n    const scenePromise = this.engine.resourceManager.load<Scene>({ url, type: AssetType.Scene });\n    scenePromise.then((scene: Scene) => {\n      if (destroyOldScene) {\n        const scenes = this._scenes.getArray();\n        for (let i = 0, n = scenes.length; i < n; i++) {\n          scenes[i].destroy();\n        }\n      }\n      this.addScene(scene);\n    });\n    return scenePromise;\n  }\n\n  /**\n   * Merge the source scene into the target scene.\n   * @remarks the global information of destScene will be used after the merge, and the lightingMap information will be merged.\n   * @param sourceScene - source scene\n   * @param destScene - target scene\n   */\n  mergeScenes(sourceScene: Scene, destScene: Scene): void {\n    const oldRootEntities = sourceScene.rootEntities;\n    while (oldRootEntities.length > 0) {\n      destScene.addRootEntity(oldRootEntities[0]);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _destroyAllScene(): void {\n    const allCreatedScenes = this._allCreatedScenes;\n    while (allCreatedScenes.length > 0) {\n      allCreatedScenes[0].destroy();\n    }\n  }\n\n  /**\n   * @deprecated\n   * Please use `scenes` instead.\n   *\n   * Get the first scene.\n   */\n  get activeScene(): Scene {\n    return this._scenes.getArray()[0];\n  }\n\n  set activeScene(scene: Scene) {\n    const firstScene = this.scenes[0];\n    if (firstScene) {\n      this.removeScene(firstScene);\n    }\n    scene && this.addScene(0, scene);\n  }\n}\n","/**\n * Asset Loading Promise.\n */\nexport class AssetPromise<T> implements PromiseLike<T> {\n  /**\n   * Return a new resource Promise through the provided asset promise collection.\n   * The resolved of the new AssetPromise will be triggered when all the Promises in the provided set are completed.\n   * @param - Promise Collection\n   * @returns AssetPromise\n   */\n  static all<T = any>(promises: (PromiseLike<T> | T)[]) {\n    return new AssetPromise<T[]>((resolve, reject, setTaskCompleteProgress) => {\n      const count = promises.length;\n      const results: T[] = new Array(count);\n      let completed = 0;\n\n      if (count === 0) {\n        return resolve(results);\n      }\n\n      function onComplete(index: number, resultValue: T) {\n        completed++;\n        results[index] = resultValue;\n\n        setTaskCompleteProgress(completed, count);\n        if (completed === count) {\n          resolve(results);\n        }\n      }\n\n      function onProgress(promise: PromiseLike<T> | T, index: number) {\n        if (promise instanceof Promise || promise instanceof AssetPromise) {\n          promise.then(function (value) {\n            onComplete(index, value);\n          }, reject);\n        } else {\n          Promise.resolve().then(() => {\n            onComplete(index, promise as T);\n          });\n        }\n      }\n\n      for (let i = 0; i < count; i++) {\n        onProgress(promises[i], i);\n      }\n    });\n  }\n\n  /** compatible with Promise */\n  get [Symbol.toStringTag]() {\n    return \"AssetPromise\";\n  }\n\n  private _promise: Promise<T>;\n  private _state = PromiseState.Pending;\n  private _taskCompleteProgress: TaskCompleteProgress;\n  private _taskDetailProgress: Record<string, TaskCompleteProgress>;\n  private _onTaskCompleteCallbacks: TaskCompleteCallback[] = [];\n  private _onTaskDetailCallbacks: TaskDetailCallback[] = [];\n  private _onCancelHandler: () => void;\n  private _reject: (reason: any) => void;\n\n  /**\n   * Create an asset loading Promise.\n   * @param executor - A callback used to initialize the promise. This callback is passed two arguments:\n   * a resolve callback used to resolve the promise with a value or the result of another promise,\n   * and a reject callback used to reject the promise with a provided reason or error.\n   * and a setProgress callback used to set promise progress with a percent.\n   */\n  constructor(executor: AssetPromiseExecutor<T>) {\n    this._promise = new Promise((resolve, reject) => {\n      this._reject = reject;\n      const onResolve = (value: T) => {\n        if (this._state === PromiseState.Pending) {\n          resolve(value);\n          this._state = PromiseState.Fulfilled;\n          this._onTaskCompleteCallbacks = undefined;\n          this._onTaskDetailCallbacks = undefined;\n        }\n      };\n      const onReject = (reason) => {\n        if (this._state === PromiseState.Pending) {\n          reject(reason);\n          this._state = PromiseState.Rejected;\n          this._onTaskCompleteCallbacks = undefined;\n          this._onTaskDetailCallbacks = undefined;\n        }\n      };\n      const onCancel = (callback) => {\n        if (this._state === PromiseState.Pending) {\n          this._onCancelHandler = callback;\n        }\n      };\n      const setTaskCompleteProgress = (loaded: number, total: number) => {\n        if (this._state === PromiseState.Pending) {\n          const progress = (this._taskCompleteProgress ||= { loaded, total });\n\n          progress.loaded = loaded;\n          progress.total = total;\n\n          this._onTaskCompleteCallbacks.forEach((callback) => callback(loaded, total));\n        }\n      };\n      const setTaskDetailProgress = (url: string, loaded: number, total: number) => {\n        if (this._state === PromiseState.Pending) {\n          this._taskDetailProgress ||= {};\n          const progress = (this._taskDetailProgress[url] ||= { loaded, total });\n          progress.loaded = loaded;\n          progress.total = total;\n          this._onTaskDetailCallbacks.forEach((callback) => callback(url, loaded, total));\n        }\n      };\n\n      executor(onResolve, onReject, setTaskCompleteProgress, setTaskDetailProgress, onCancel);\n    });\n  }\n\n  /**\n   * Progress callback.\n   * @param onTaskComplete - This callback function provides information about the overall progress of the task. For example, in batch processing tasks, you can use the loaded and total parameters to calculate the percentage of task completion or display a progress bar\n   * @param onTaskDetail - This callback function provides detailed progress information about the task. For instance, in file downloading scenarios, you can use the loaded and total parameters to calculate the download progress percentage and utilize the url parameter to provide additional details such as download speed and estimated remaining time\n   * @returns AssetPromise\n   */\n  onProgress(\n    onTaskComplete: (loaded: number, total: number) => void,\n    onTaskDetail?: (identifier: string, loaded: number, total: number) => void\n  ): AssetPromise<T> {\n    const completeProgress = this._taskCompleteProgress;\n    const detailProgress = this._taskDetailProgress;\n    if (completeProgress) {\n      onTaskComplete(completeProgress.loaded, completeProgress.total);\n    }\n\n    if (detailProgress) {\n      for (let url in detailProgress) {\n        const { loaded, total } = detailProgress[url];\n        onTaskDetail(url, loaded, total);\n      }\n    }\n\n    if (this._state === PromiseState.Pending) {\n      onTaskComplete && this._onTaskCompleteCallbacks.push(onTaskComplete);\n      onTaskDetail && this._onTaskDetailCallbacks.push(onTaskDetail);\n    }\n\n    return this;\n  }\n\n  then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: (value: T) => TResult1 | PromiseLike<TResult1>,\n    onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>\n  ): AssetPromise<TResult1 | TResult2> {\n    return new AssetPromise<TResult1 | TResult2>((resolve, reject) => {\n      this._promise.then(onfulfilled, onrejected).then(resolve).catch(reject);\n    });\n  }\n\n  /**\n   * Attaches a callback for only the rejection of the Promise.\n   * @param onRejected - The callback to execute when the Promise is rejected.\n   * @returns A Promise for the completion of the callback.\n   */\n  catch(onRejected: (reason: any) => any): AssetPromise<T> {\n    return new AssetPromise<T>((resolve, reject) => {\n      this._promise.catch(onRejected).then(resolve).catch(reject);\n    });\n  }\n\n  /**\n   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The\n   * resolved value cannot be modified from the callback.\n   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).\n   * @returns A Promise for the completion of the callback.\n   */\n  finally(onFinally?: () => void): Promise<T> {\n    return this._promise.finally(onFinally);\n  }\n\n  /**\n   * Cancel promise request.\n   * @returns Asset promise\n   */\n  cancel(): AssetPromise<T> {\n    if (this._state !== PromiseState.Pending) {\n      return;\n    }\n    this._state = PromiseState.Canceled;\n    this._reject(\"canceled\");\n    this._onCancelHandler && this._onCancelHandler();\n    return this;\n  }\n}\n\ninterface AssetPromiseExecutor<T> {\n  (\n    resolve: (value?: T | PromiseLike<T>) => void,\n    reject?: (reason?: any) => void,\n    setTaskCompleteProgress?: TaskCompleteCallback,\n    setTaskDetailProgress?: TaskDetailCallback,\n    onCancel?: (callback: () => void) => void\n  ): void;\n}\n\n/** @internal */\nenum PromiseState {\n  Pending = \"pending\",\n  Fulfilled = \"fulfilled\",\n  Rejected = \"rejected\",\n  Canceled = \"canceled\"\n}\n\ntype TaskCompleteProgress = {\n  loaded: number;\n  total: number;\n};\ntype TaskCompleteCallback = (loaded: number, total: number) => void;\ntype TaskDetailCallback = (url: string, loaded: number, total: number) => void;\n","import { AssetPromise } from \"./AssetPromise\";\n\nconst mimeType = {\n  json: \"json\",\n  gltf: \"json\",\n  mtl: \"json\",\n  prefab: \"json\",\n  txt: \"text\",\n  bin: \"arraybuffer\",\n  png: \"image\",\n  webp: \"image\",\n  jpg: \"image\"\n};\n\nconst defaultRetryCount = 1;\nconst defaultTimeout = Infinity;\nconst defaultInterval = 500;\n\nexport type RequestConfig = {\n  type?: XMLHttpRequestResponseType | \"image\";\n  retryCount?: number;\n  retryInterval?: number;\n  timeout?: number;\n} & RequestInit;\n\n/**\n * Web request.\n * @param url - The link\n * @param config - Load configuration\n */\nexport function request<T>(url: string, config: RequestConfig = {}): AssetPromise<T> {\n  return new AssetPromise((resolve, reject, setTaskCompleteProgress, setTaskDetailProgress) => {\n    const retryCount = config.retryCount ?? defaultRetryCount;\n    const retryInterval = config.retryInterval ?? defaultInterval;\n    config.timeout = config.timeout ?? defaultTimeout;\n    config.type = config.type ?? getMimeTypeFromUrl(url);\n    const executor = new MultiExecutor(\n      () => requestRes<T>(url, config).onProgress(setTaskCompleteProgress, setTaskDetailProgress),\n      retryCount,\n      retryInterval\n    );\n    executor.start().onError(reject).onComplete(resolve);\n  });\n}\n\nfunction requestRes<T>(url: string, config: RequestConfig): AssetPromise<T> {\n  return new AssetPromise((resolve, reject, setTaskCompleteProgress, setTaskDetailProgress) => {\n    const xhr = new XMLHttpRequest();\n    const isImg = config.type === \"image\";\n\n    xhr.timeout = config.timeout;\n    config.method = config.method ?? \"get\";\n\n    xhr.onload = () => {\n      if (xhr.status < 200 || xhr.status >= 300) {\n        reject(new Error(`request failed from: ${url}`));\n        return;\n      }\n      const result = xhr.response ?? xhr.responseText;\n      if (isImg) {\n        const img = new Image();\n\n        img.onload = () => {\n          // Call requestAnimationFrame to avoid iOS's bug.\n          requestAnimationFrame(() => {\n            setTaskCompleteProgress(1, 1);\n            //@ts-ignore\n            resolve(img);\n\n            img.onload = null;\n            img.onerror = null;\n            img.onabort = null;\n            URL.revokeObjectURL(img.src);\n          });\n        };\n\n        img.onerror = img.onabort = () => {\n          reject(new Error(`request ${img.src} fail`));\n          URL.revokeObjectURL(img.src);\n        };\n\n        img.crossOrigin = \"anonymous\";\n        img.src = URL.createObjectURL(result);\n      } else {\n        setTaskCompleteProgress(1, 1);\n        resolve(result);\n      }\n    };\n    xhr.onerror = () => {\n      reject(new Error(`request failed from: ${url}`));\n    };\n    xhr.ontimeout = () => {\n      reject(new Error(`request timeout from: ${url}`));\n    };\n    xhr.onprogress = (e) => {\n      if (e.lengthComputable) {\n        setTaskDetailProgress(url, e.loaded, e.total);\n      }\n    };\n    xhr.open(config.method, url, true);\n    xhr.withCredentials = config.credentials === \"include\";\n    // @ts-ignore\n    xhr.responseType = isImg ? \"blob\" : config.type;\n    const headers = config.headers;\n    if (headers) {\n      Object.keys(headers).forEach((name) => {\n        xhr.setRequestHeader(name, headers[name]);\n      });\n    }\n    // @ts-ignore\n    xhr.send(config.body as XMLHttpRequestBodyInit);\n  });\n}\n\nfunction getMimeTypeFromUrl(url: string) {\n  const extname = url.substring(url.lastIndexOf(\".\") + 1);\n  return mimeType[extname];\n}\n\nexport class MultiExecutor {\n  private _timeoutId: number = -100;\n  private _currentCount = 0;\n  private _onComplete: Function;\n  private _onError: Function;\n  private _error: any;\n  constructor(\n    private execFunc: (count?: number) => Promise<any>,\n    private totalCount: number,\n    private interval: number\n  ) {\n    this.exec = this.exec.bind(this);\n  }\n\n  start() {\n    this.exec();\n    return this;\n  }\n\n  onComplete(func: Function) {\n    this._onComplete = func;\n    return this;\n  }\n\n  onError(func: Function) {\n    this._onError = func;\n    return this;\n  }\n\n  cancel() {\n    window.clearTimeout(this._timeoutId);\n  }\n\n  private exec(): void {\n    if (this._currentCount >= this.totalCount) {\n      this._onError && this._onError(this._error);\n      return;\n    }\n    this._currentCount++;\n    this.execFunc(this._currentCount)\n      .then((result) => this._onComplete && this._onComplete(result))\n      .catch((e) => {\n        this._error = e;\n        this._timeoutId = window.setTimeout(this.exec, this.interval);\n      });\n  }\n}\n","import { ContentRestorer, Engine, EngineObject, Logger, Utils } from \"..\";\nimport { AssetPromise } from \"./AssetPromise\";\nimport { GraphicsResource } from \"./GraphicsResource\";\nimport { Loader } from \"./Loader\";\nimport { LoadItem } from \"./LoadItem\";\nimport { ReferResource } from \"./ReferResource\";\nimport { request, RequestConfig } from \"./request\";\n\n/**\n * ResourceManager\n */\nexport class ResourceManager {\n  /** @internal */\n  static _loaders: { [key: string]: Loader<any> } = {};\n  private static _extTypeMapping: { [key: string]: string } = {};\n\n  /**\n   * @internal\n   */\n  static _addLoader(type: string, loader: Loader<any>, extNames: string[]) {\n    this._loaders[type] = loader;\n    for (let i = 0, len = extNames.length; i < len; i++) {\n      this._extTypeMapping[extNames[i].toLowerCase()] = type;\n    }\n  }\n\n  private static _getTypeByUrl(url: string): string {\n    const path = url.split(\"?\")[0];\n    return this._extTypeMapping[path.substring(path.lastIndexOf(\".\") + 1).toLowerCase()];\n  }\n\n  /** The number of retries after failing to load assets. */\n  retryCount: number = 1;\n  /** Retry delay time after failed to load assets, in milliseconds. */\n  retryInterval: number = 0;\n  /** The default timeout period for loading assets, in milliseconds. */\n  timeout: number = Infinity;\n  /** Base url for loading assets. */\n  baseUrl: string | null = null;\n\n  private _loadingPromises: Record<string, AssetPromise<any>> = {};\n\n  /** Asset path pool, key is the `instanceID` of resource, value is asset path. */\n  private _assetPool: Record<number, string> = Object.create(null);\n  /** Asset url pool, key is the asset path and the value is the asset. */\n  private _assetUrlPool: Record<string, Object> = Object.create(null);\n\n  /** Referable resource pool, key is the `instanceID` of resource. */\n  private _referResourcePool: Record<number, ReferResource> = Object.create(null);\n  /** Graphic resource pool, key is the `instanceID` of resource. */\n  private _graphicResourcePool: Record<number, GraphicsResource> = Object.create(null);\n  /** Restorable resource information pool, key is the `instanceID` of resource. */\n  private _contentRestorerPool: Record<number, ContentRestorer<any>> = Object.create(null);\n  private _subAssetPromiseCallbacks: SubAssetPromiseCallbacks<any> = {};\n\n  /**\n   * Create a ResourceManager.\n   * @param engine - Engine to which the current ResourceManager belongs\n   */\n  constructor(public readonly engine: Engine) {}\n\n  /**\n   * Load asset asynchronously through the path.\n   * @param path - Path\n   * @returns Asset promise\n   */\n  load<T>(path: string): AssetPromise<T>;\n\n  /**\n   * Load asset collection asynchronously through urls.\n   * @param paths - Path collections\n   * @returns Asset Promise\n   */\n  load(paths: string[]): AssetPromise<Object[]>;\n\n  /**\n   * Load the asset asynchronously by asset item information.\n   * @param assetItem - AssetItem\n   * @returns AssetPromise\n   */\n  load<T>(assetItem: LoadItem): AssetPromise<T>;\n\n  /**\n   * Load the asset collection asynchronously by loading the information collection.\n   * @param assetItems - Asset collection\n   * @returns AssetPromise\n   */\n  load(assetItems: LoadItem[]): AssetPromise<Object[]>;\n\n  load<T>(assetInfo: string | LoadItem | (LoadItem | string)[]): AssetPromise<T | Object[]> {\n    // single item\n    if (!Array.isArray(assetInfo)) {\n      return this._loadSingleItem(assetInfo);\n    }\n    // multi items\n    const promises = assetInfo.map((item) => this._loadSingleItem<T>(item));\n    return AssetPromise.all(promises);\n  }\n\n  /**\n   * Get the resource from cache by asset url, return the resource object if it loaded, otherwise return null.\n   * @param url - Resource url\n   * @returns Resource object\n   */\n  getFromCache<T>(url: string): T {\n    return (this._assetUrlPool[url] as T) ?? null;\n  }\n\n  /**\n   * Find the resource by type.\n   * @param type - Resource type\n   * @returns - Resource collection\n   */\n  findResourcesByType<T extends EngineObject>(type: new (...args) => T): T[] {\n    const resources = new Array<T>();\n    const referResourcePool = this._referResourcePool;\n    for (const k in referResourcePool) {\n      const resource = referResourcePool[k];\n      if (resource instanceof type) {\n        resources.push(resource);\n      }\n    }\n    return resources;\n  }\n\n  /**\n   * Get asset url from instanceId.\n   * @param instanceId - Engine instance id\n   * @returns Asset url\n   */\n  getAssetPath(instanceId: number): string {\n    return this._assetPool[instanceId];\n  }\n\n  /**\n   * Cancel all assets that have not finished loading.\n   */\n  cancelNotLoaded(): void;\n\n  /**\n   * Cancel assets whose url has not finished loading.\n   * @param url - Resource url\n   */\n  cancelNotLoaded(url: string): void;\n\n  /**\n   * Cancel the incompletely loaded assets in urls.\n   * @param urls - Resource urls\n   */\n  cancelNotLoaded(urls: string[]): void;\n\n  cancelNotLoaded(url?: string | string[]): void {\n    if (!url) {\n      Utils.objectValues(this._loadingPromises).forEach((promise) => {\n        promise.cancel();\n      });\n    } else if (typeof url === \"string\") {\n      this._loadingPromises[url]?.cancel();\n    } else {\n      url.forEach((p) => {\n        this._loadingPromises[p]?.cancel();\n      });\n    }\n  }\n\n  /**\n   * Garbage collection will release resource objects managed by reference counting.\n   * @remarks The release principle is that it is not referenced by the components, including direct and indirect reference.\n   */\n  gc(): void {\n    this._gc(false);\n    this.engine._pendingGC();\n  }\n\n  /**\n   * Add content restorer.\n   * @param restorer - The restorer\n   */\n  addContentRestorer<T extends EngineObject>(restorer: ContentRestorer<T>): void {\n    this._contentRestorerPool[restorer.resource.instanceId] = restorer;\n  }\n\n  /**\n   * @internal\n   */\n  _getRemoteUrl(url: string): string {\n    return this._virtualPathMap[url] ?? url;\n  }\n\n  /**\n   * @internal\n   */\n  _requestByRemoteUrl<T>(url: string, config: RequestConfig): AssetPromise<T> {\n    return request(url, config);\n  }\n\n  /**\n   * @internal\n   */\n  _request<T>(url: string, config: RequestConfig): AssetPromise<T> {\n    const remoteUrl = this._getRemoteUrl(url);\n    return this._requestByRemoteUrl(remoteUrl, config);\n  }\n\n  /**\n   * @internal\n   */\n  _onSubAssetSuccess<T>(assetBaseURL: string, assetSubPath: string, value: T): void {\n    const remoteAssetBaseURL = this._virtualPathMap[assetBaseURL] ?? assetBaseURL;\n\n    const subPromiseCallback = this._subAssetPromiseCallbacks[remoteAssetBaseURL]?.[assetSubPath];\n    if (subPromiseCallback) {\n      subPromiseCallback.resolve(value);\n    } else {\n      // Pending\n      (this._subAssetPromiseCallbacks[remoteAssetBaseURL] ||= {})[assetSubPath] = {\n        resolvedValue: value\n      };\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _onSubAssetFail(assetBaseURL: string, assetSubPath: string, value: Error): void {\n    const subPromiseCallback = this._subAssetPromiseCallbacks[assetBaseURL]?.[assetSubPath];\n    if (subPromiseCallback) {\n      subPromiseCallback.reject(value);\n    } else {\n      // Pending\n      (this._subAssetPromiseCallbacks[assetBaseURL] ||= {})[assetSubPath] = {\n        rejectedValue: value\n      };\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _addAsset(path: string, asset: EngineObject): void {\n    this._assetPool[asset.instanceId] = path;\n    this._assetUrlPool[path] = asset;\n  }\n\n  /**\n   * @internal\n   */\n  _deleteAsset(asset: EngineObject): void {\n    const id = asset.instanceId;\n    const path = this._assetPool[id];\n    if (path) {\n      delete this._assetPool[id];\n      delete this._assetUrlPool[path];\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _addReferResource(resource: ReferResource): void {\n    this._referResourcePool[resource.instanceId] = resource;\n  }\n\n  /**\n   * @internal\n   */\n  _deleteReferResource(resource: EngineObject): void {\n    delete this._referResourcePool[resource.instanceId];\n  }\n\n  /**\n   * @internal\n   */\n  _addGraphicResource(resource: GraphicsResource): void {\n    this._graphicResourcePool[resource.instanceId] = resource;\n  }\n\n  /**\n   * @internal\n   */\n  _deleteGraphicResource(resource: EngineObject): void {\n    delete this._graphicResourcePool[resource.instanceId];\n  }\n\n  /**\n   * @internal\n   */\n  _deleteContentRestorer(resource: EngineObject): void {\n    delete this._contentRestorerPool[resource.instanceId];\n  }\n\n  /**\n   * @internal\n   */\n  _restoreGraphicResources(): void {\n    const graphicResourcePool = this._graphicResourcePool;\n    for (const id in graphicResourcePool) {\n      graphicResourcePool[id]._rebuild();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _lostGraphicResources(): void {\n    const graphicResourcePool = this._graphicResourcePool;\n    for (const id in graphicResourcePool) {\n      graphicResourcePool[id]._isContentLost = true;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _restoreResourcesContent(): Promise<void[]> {\n    const restoreContentInfoPool = this._contentRestorerPool;\n    const restorePromises = new Array<Promise<void>>();\n    for (const k in restoreContentInfoPool) {\n      const restoreInfo = restoreContentInfoPool[k];\n      const promise = restoreInfo.restoreContent();\n      promise && restorePromises.push(promise);\n    }\n    return Promise.all(restorePromises);\n  }\n\n  /**\n   * @internal\n   */\n  _destroy(): void {\n    this.cancelNotLoaded();\n    this._gc(true);\n    this._assetPool = null;\n    this._assetUrlPool = null;\n    this._referResourcePool = null;\n    this._graphicResourcePool = null;\n    this._contentRestorerPool = null;\n    this._loadingPromises = null;\n  }\n\n  private _assignDefaultOptions(assetInfo: LoadItem): LoadItem {\n    assetInfo.type = assetInfo.type ?? ResourceManager._getTypeByUrl(assetInfo.url);\n    if (assetInfo.type === undefined) {\n      throw `asset type should be specified: ${assetInfo.url}`;\n    }\n    assetInfo.retryCount = assetInfo.retryCount ?? this.retryCount;\n    assetInfo.timeout = assetInfo.timeout ?? this.timeout;\n    assetInfo.retryInterval = assetInfo.retryInterval ?? this.retryInterval;\n    assetInfo.url = assetInfo.url ?? assetInfo.urls.join(\",\");\n    return assetInfo;\n  }\n\n  private _loadSingleItem<T>(itemOrURL: LoadItem | string): AssetPromise<T> {\n    const item = this._assignDefaultOptions(typeof itemOrURL === \"string\" ? { url: itemOrURL } : itemOrURL);\n    let { url } = item;\n\n    // Not absolute and base url is set\n    if (!Utils.isAbsoluteUrl(url) && this.baseUrl) url = Utils.resolveAbsoluteUrl(this.baseUrl, url);\n\n    // Parse url\n    const { assetBaseURL, queryPath } = this._parseURL(url);\n    const paths = queryPath ? this._parseQueryPath(queryPath) : [];\n\n    // Get remote asset base url\n    const remoteAssetBaseURL = this._virtualPathMap[assetBaseURL] ?? assetBaseURL;\n\n    // Check cache\n    const cacheObject = this._assetUrlPool[remoteAssetBaseURL];\n    if (cacheObject) {\n      return new AssetPromise((resolve) => {\n        resolve(this._getResolveResource(cacheObject, paths) as T);\n      });\n    }\n\n    // Get asset url\n    let remoteAssetURL = remoteAssetBaseURL;\n    if (queryPath) {\n      remoteAssetURL += \"?q=\" + paths.shift();\n      let index: string;\n      while ((index = paths.shift())) {\n        remoteAssetURL += `[${index}]`;\n      }\n    }\n\n    // Check is loading\n    const loadingPromises = this._loadingPromises;\n    const loadingPromise = loadingPromises[remoteAssetURL];\n    if (loadingPromise) {\n      return new AssetPromise((resolve, reject, setTaskCompleteProgress, setTaskDetailProgress) => {\n        loadingPromise\n          .onProgress(setTaskCompleteProgress, setTaskDetailProgress)\n          .then((resource: EngineObject) => {\n            resolve(resource as T);\n          })\n          .catch((error: Error) => {\n            reject(error);\n          });\n      });\n    }\n\n    // Check loader\n    const loader = <Loader<T>>ResourceManager._loaders[item.type];\n    if (!loader) {\n      throw `loader not found: ${item.type}`;\n    }\n\n    // Check sub asset\n    if (queryPath) {\n      // Check whether load main asset\n      const mainPromise =\n        loadingPromises[remoteAssetBaseURL] || this._loadMainAsset(loader, item, remoteAssetBaseURL, assetBaseURL);\n      mainPromise.catch((e) => {\n        this._onSubAssetFail(remoteAssetBaseURL, queryPath, e);\n      });\n\n      return this._createSubAssetPromiseCallback<T>(remoteAssetBaseURL, remoteAssetURL, queryPath);\n    }\n\n    return this._loadMainAsset(loader, item, remoteAssetBaseURL, assetBaseURL);\n  }\n\n  private _loadMainAsset<T>(\n    loader: Loader<T>,\n    item: LoadItem,\n    remoteAssetBaseURL: string,\n    assetBaseURL: string\n  ): AssetPromise<T> {\n    item.url = assetBaseURL;\n    const loadingPromises = this._loadingPromises;\n    const promise = loader.load(item, this);\n    loadingPromises[remoteAssetBaseURL] = promise;\n\n    promise.then(\n      (resource: T) => {\n        if (loader.useCache) {\n          this._addAsset(remoteAssetBaseURL, resource as EngineObject);\n        }\n        delete loadingPromises[remoteAssetBaseURL];\n        this._releaseSubAssetPromiseCallback(remoteAssetBaseURL);\n      },\n      () => {\n        delete loadingPromises[remoteAssetBaseURL];\n        this._releaseSubAssetPromiseCallback(remoteAssetBaseURL);\n      }\n    );\n\n    return promise;\n  }\n\n  private _createSubAssetPromiseCallback<T>(\n    remoteAssetBaseURL: string,\n    remoteAssetURL: string,\n    assetSubPath: string\n  ): AssetPromise<T> {\n    const loadingPromises = this._loadingPromises;\n    const subPromiseCallback = this._subAssetPromiseCallbacks[remoteAssetBaseURL]?.[assetSubPath];\n    const resolvedValue = subPromiseCallback?.resolvedValue;\n    const rejectedValue = subPromiseCallback?.rejectedValue;\n\n    // Already resolved or rejected\n    if (resolvedValue || rejectedValue) {\n      return new AssetPromise<T>((resolve, reject) => {\n        if (resolvedValue) {\n          resolve(resolvedValue);\n        } else if (rejectedValue) {\n          reject(rejectedValue);\n        }\n      });\n    }\n\n    // Pending\n    const promise = new AssetPromise<T>((resolve, reject) => {\n      (this._subAssetPromiseCallbacks[remoteAssetBaseURL] ||= {})[assetSubPath] = {\n        resolve,\n        reject\n      };\n    });\n\n    loadingPromises[remoteAssetURL] = promise;\n\n    promise.then(\n      () => {\n        delete loadingPromises[remoteAssetURL];\n      },\n      () => delete loadingPromises[remoteAssetURL]\n    );\n\n    return promise;\n  }\n\n  private _gc(forceDestroy: boolean): void {\n    const objects = <ReferResource[]>Utils.objectValues(this._referResourcePool);\n    for (let i = 0, n = objects.length; i < n; i++) {\n      const object = objects[i];\n      if (!object.isGCIgnored || forceDestroy) {\n        object.destroy(forceDestroy, true);\n      }\n    }\n  }\n\n  private _getResolveResource(resource: any, paths: string[]): any {\n    let subResource = resource;\n    if (paths) {\n      for (let i = 0, n = paths.length; i < n; i++) {\n        const path = paths[i];\n        subResource = subResource[path];\n      }\n    }\n    return subResource;\n  }\n\n  private _parseURL(path: string): { assetBaseURL: string; queryPath: string } {\n    const [baseUrl, searchStr] = path.split(\"?\");\n    let queryPath = undefined;\n    let assetBaseURL = baseUrl;\n    if (searchStr) {\n      const params = searchStr.split(\"&\");\n      for (let i = 0; i < params.length; i++) {\n        const param = params[i];\n        if (param.startsWith(`q=`)) {\n          queryPath = decodeURIComponent(param.split(\"=\")[1]);\n          params.splice(i, 1);\n          break;\n        }\n      }\n      assetBaseURL = params.length > 0 ? baseUrl + \"?\" + params.join(\"&\") : baseUrl;\n    }\n    return { assetBaseURL, queryPath };\n  }\n\n  private _parseQueryPath(string): string[] {\n    const result = [];\n    if (string.charCodeAt(0) === charCodeOfDot) {\n      result.push(\"\");\n    }\n    string.replace(rePropName, (match, expression, quote, subString) => {\n      let key = match;\n      if (quote) {\n        key = subString.replace(reEscapeChar, \"$1\");\n      } else if (expression) {\n        key = expression.trim();\n      }\n      result.push(key);\n    });\n    return result;\n  }\n\n  private _releaseSubAssetPromiseCallback(assetBaseURL: string): void {\n    delete this._subAssetPromiseCallbacks[assetBaseURL];\n  }\n\n  //-----------------Editor temp solution-----------------\n\n  /** @internal */\n  _objectPool: { [key: string]: any } = Object.create(null);\n  /** @internal */\n  _editorResourceConfig: EditorResourceConfig = Object.create(null);\n  /** @internal */\n  _virtualPathMap: Record<string, string> = Object.create(null);\n\n  /**\n   * @internal\n   * @beta Just for internal editor, not recommended for developers.\n   */\n  getResourceByRef<T>(ref: { refId: string; key?: string; isClone?: boolean }): Promise<T> {\n    const { refId, key, isClone } = ref;\n    const obj = this._objectPool[refId];\n    let promise;\n    if (obj) {\n      promise = Promise.resolve(obj);\n    } else {\n      const resourceConfig = this._editorResourceConfig[refId];\n      if (!resourceConfig) {\n        Logger.warn(`refId:${refId} is not find in this._editorResourceConfig.`);\n        return Promise.resolve(null);\n      }\n      const remoteUrl = resourceConfig.path;\n      const queryPath = new URL(remoteUrl).search;\n      let url = resourceConfig.virtualPath + queryPath;\n      if (key) {\n        url += (url.indexOf(\"?\") > -1 ? \"&\" : \"?\") + \"q=\" + key;\n      }\n\n      promise = this.load<any>({\n        url,\n        type: resourceConfig.type\n      });\n    }\n    return promise.then((item) => (isClone ? item.clone() : item));\n  }\n\n  /**\n   * @internal\n   * @beta Just for internal editor, not recommended for developers.\n   */\n  initVirtualResources(config: EditorResourceItem[]): void {\n    config.forEach((element) => {\n      this._virtualPathMap[element.virtualPath] = element.path;\n      this._editorResourceConfig[element.id] = element;\n    });\n  }\n  //-----------------Editor temp solution-----------------\n}\n\n/**\n * Declare ResourceLoader's decorator.\n * @param assetType - Type of asset\n * @param extNames - Name of file extension\n */\nexport function resourceLoader(assetType: string, extNames: string[], useCache: boolean = true) {\n  return <T extends Loader<any>>(Target: { new (useCache: boolean): T }) => {\n    const loader = new Target(useCache);\n    ResourceManager._addLoader(assetType, loader, extNames);\n  };\n}\n\nconst charCodeOfDot = \".\".charCodeAt(0);\nconst reEscapeChar = /\\\\(\\\\)?/g;\nconst rePropName = RegExp(\n  // Match anything that isn't a dot or bracket.\n  \"[^.[\\\\]]+\" +\n    \"|\" +\n    // Or match property names within brackets.\n    \"\\\\[(?:\" +\n    // Match a non-string expression.\n    \"([^\\\"'][^[]*)\" +\n    \"|\" +\n    // Or match strings (supports escaping characters).\n    \"([\\\"'])((?:(?!\\\\2)[^\\\\\\\\]|\\\\\\\\.)*?)\\\\2\" +\n    \")\\\\]\" +\n    \"|\" +\n    // Or match \"\" as the space between consecutive dots or empty brackets.\n    \"(?=(?:\\\\.|\\\\[\\\\])(?:\\\\.|\\\\[\\\\]|$))\",\n  \"g\"\n);\n\ntype EditorResourceItem = { virtualPath: string; path: string; type: string; id: string };\ntype EditorResourceConfig = Record<string, EditorResourceItem>;\ntype SubAssetPromiseCallbacks<T> = Record<\n  // main asset url, ie. \"https://***.glb\"\n  string,\n  Record<\n    // sub asset url, ie. \"textures[0]\"\n    string,\n    {\n      // Already resolved or rejected\n      resolvedValue?: T;\n      rejectedValue?: Error;\n      // Pending\n      resolve?: (value: T) => void;\n      reject?: (reason: any) => void;\n    }\n  >\n>;\n","/**\n *  The current phase of the pointer.\n */\nexport enum PointerPhase {\n  /** A Pointer pressed on the screen. */\n  Down,\n  /** A pointer moved on the screen. */\n  Move,\n  /** A Pointer pressed on the screen but hasn't moved. */\n  Stationary,\n  /** A pointer was lifted from the screen. */\n  Up,\n  /** The system cancelled tracking for the pointer. */\n  Leave\n}\n","import { Vector2 } from \"@galacean/engine-math\";\nimport { Entity } from \"../../Entity\";\nimport { Script } from \"../../Script\";\nimport { PointerButton } from \"../enums/PointerButton\";\nimport { PointerPhase } from \"../enums/PointerPhase\";\nimport { DisorderedArray } from \"../../utils/DisorderedArray\";\n\n/**\n * Pointer.\n */\nexport class Pointer {\n  /**\n   * Unique id.\n   * @remarks Start from 0.\n   */\n  readonly id: number;\n  /** The phase of pointer. */\n  phase: PointerPhase = PointerPhase.Leave;\n  /** The button that triggers the pointer event. */\n  button: PointerButton;\n  /** The currently pressed buttons for this pointer. */\n  pressedButtons: PointerButton;\n  /** The position of the pointer in screen space pixel coordinates. */\n  position: Vector2 = new Vector2();\n  /** The change of the pointer. */\n  deltaPosition: Vector2 = new Vector2();\n  /** @internal */\n  _events: PointerEvent[] = [];\n  /** @internal */\n  _uniqueID: number;\n  /** @internal */\n  _upMap: number[] = [];\n  /** @internal */\n  _downMap: number[] = [];\n  /** @internal */\n  _upList: DisorderedArray<PointerButton> = new DisorderedArray();\n  /** @internal */\n  _downList: DisorderedArray<PointerButton> = new DisorderedArray();\n\n  private _currentPressedEntity: Entity;\n  private _currentEnteredEntity: Entity;\n\n  /**\n   * @internal\n   */\n  _firePointerExitAndEnter(rayCastEntity: Entity): void {\n    if (this._currentEnteredEntity !== rayCastEntity) {\n      if (this._currentEnteredEntity) {\n        this._currentEnteredEntity._scripts.forEach(\n          (element: Script) => {\n            element.onPointerExit(this);\n          },\n          (element: Script, index: number) => {\n            element._entityScriptsIndex = index;\n          }\n        );\n      }\n      if (rayCastEntity) {\n        rayCastEntity._scripts.forEach(\n          (element: Script) => {\n            element.onPointerEnter(this);\n          },\n          (element: Script, index: number) => {\n            element._entityScriptsIndex = index;\n          }\n        );\n      }\n      this._currentEnteredEntity = rayCastEntity;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _firePointerDown(rayCastEntity: Entity): void {\n    if (rayCastEntity) {\n      rayCastEntity._scripts.forEach(\n        (element: Script) => {\n          element.onPointerDown(this);\n        },\n        (element: Script, index: number) => {\n          element._entityScriptsIndex = index;\n        }\n      );\n    }\n    this._currentPressedEntity = rayCastEntity;\n  }\n\n  /**\n   * @internal\n   */\n  _firePointerDrag(): void {\n    if (this._currentPressedEntity) {\n      this._currentPressedEntity._scripts.forEach(\n        (element: Script) => {\n          element.onPointerDrag(this);\n        },\n        (element: Script, index: number) => {\n          element._entityScriptsIndex = index;\n        }\n      );\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _firePointerUpAndClick(rayCastEntity: Entity): void {\n    const { _currentPressedEntity: pressedEntity } = this;\n    if (pressedEntity) {\n      const sameTarget = pressedEntity === rayCastEntity;\n      pressedEntity._scripts.forEach(\n        (element: Script) => {\n          sameTarget && element.onPointerClick(this);\n          element.onPointerUp(this);\n        },\n        (element: Script, index: number) => {\n          element._entityScriptsIndex = index;\n        }\n      );\n      this._currentPressedEntity = null;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  constructor(id: number) {\n    this.id = id;\n  }\n}\n","/**\n * Defines values that specify the buttons on a pointer device.\n * Refer to the W3C standards:\n * (https://www.w3.org/TR/uievents/#dom-mouseevent-button)\n * (https://www.w3.org/TR/uievents/#dom-mouseevent-buttons)\n * Refer to Microsoft's documentation.(https://docs.microsoft.com/en-us/dotnet/api/system.windows.input.mousebutton?view=windowsdesktop-6.0)\n */\nexport enum PointerButton {\n  /** No button. */\n  None = 0x0,\n  /** Indicate the primary pointer of the device (in general, the left button or the only button on single-button devices, used to activate a user interface control or select text) or the un-initialized value. */\n  Primary = 0x1,\n  /** Indicate the secondary pointer (in general, the right button, often used to display a context menu). */\n  Secondary = 0x2,\n  /** Indicate the auxiliary pointer (in general, the middle button, often combined with a mouse wheel). */\n  Auxiliary = 0x4,\n  /** Indicate the X1 (back) pointer. */\n  XButton1 = 0x8,\n  /** Indicate the X2 (forward) pointer. */\n  XButton2 = 0x10,\n  /** Indicate the X3 pointer. */\n  XButton3 = 0x20,\n  /** Indicate the X4 pointer. */\n  XButton4 = 0x40,\n  /** Indicate the X5 pointer. */\n  XButton5 = 0x80,\n  /** Indicate the X6 pointer. */\n  XButton6 = 0x100,\n  /** Indicate the X7 pointer. */\n  XButton7 = 0x200,\n  /** Indicate the X8 pointer. */\n  XButton8 = 0x400\n}\n\n/**\n * @internal\n */\nexport const _pointerDec2BinMap = [\n  PointerButton.Primary,\n  PointerButton.Auxiliary,\n  PointerButton.Secondary,\n  PointerButton.XButton1,\n  PointerButton.XButton2,\n  PointerButton.XButton3,\n  PointerButton.XButton4,\n  PointerButton.XButton5,\n  PointerButton.XButton6,\n  PointerButton.XButton7,\n  PointerButton.XButton8\n];\n\n/**\n * @internal\n */\nexport const _pointerBin2DecMap: Record<number, number> = {\n  /** Primary */\n  0x1: 0,\n  /** Secondary */\n  0x2: 2,\n  /** Auxiliary */\n  0x4: 1,\n  /** XButton1 */\n  0x8: 3,\n  /** XButton2 */\n  0x10: 4,\n  /** XButton3 */\n  0x20: 5,\n  /** XButton4 */\n  0x40: 6,\n  /** XButton5 */\n  0x80: 7,\n  /** XButton6 */\n  0x100: 8,\n  /** XButton7 */\n  0x200: 9,\n  /** XButton8 */\n  0x400: 10\n};\n","import { Platform } from \"./Platform\";\n\n/**\n * System info.\n */\nexport class SystemInfo {\n  /** The platform is running on. */\n  static platform: Platform = Platform.Unknown;\n  /** The operating system is running on. */\n  static operatingSystem: string = \"\";\n\n  /** @internal */\n  static _isBrowser = true;\n\n  /** Whether the system support SIMD. */\n  private static _simdSupported: boolean | null = null;\n\n  /**\n   * The pixel ratio of the device.\n   */\n  static get devicePixelRatio(): number {\n    return window.devicePixelRatio;\n  }\n\n  /**\n   * @internal\n   */\n  static _initialize(): void {\n    {\n      if (typeof navigator == \"undefined\") {\n        SystemInfo._isBrowser = false;\n        return;\n      }\n\n      const userAgent = navigator.userAgent;\n\n      if (/iPhone/i.test(userAgent)) {\n        SystemInfo.platform = Platform.IPhone;\n      } else if (/iPad/i.test(userAgent)) {\n        SystemInfo.platform = Platform.IPad;\n      } else if (/Android/i.test(userAgent)) {\n        SystemInfo.platform = Platform.Android;\n      } else if (/Macintosh/i.test(userAgent)) {\n        SystemInfo.platform = Platform.Mac;\n      }\n\n      let v: RegExpMatchArray;\n      switch (SystemInfo.platform) {\n        case Platform.IPhone:\n          v = userAgent.match(/OS (\\d+)_?(\\d+)?_?(\\d+)?/);\n          this.operatingSystem = v ? `iPhone OS ${v[1]}.${v[2] || 0}.${v[3] || 0}` : \"iPhone OS\";\n          break;\n        case Platform.IPad:\n          v = userAgent.match(/OS (\\d+)_?(\\d+)?_?(\\d+)?/);\n          this.operatingSystem = v ? `iPad OS ${v[1]}.${v[2] || 0}.${v[3] || 0}` : \"iPad OS\";\n          break;\n        case Platform.Android:\n          v = userAgent.match(/Android (\\d+).?(\\d+)?.?(\\d+)?/);\n          this.operatingSystem = v ? `Android ${v[1]}.${v[2] || 0}.${v[3] || 0}` : \"Android\";\n          break;\n        case Platform.Mac:\n          v = userAgent.match(/Mac OS X (\\d+)_?(\\d+)?_?(\\d+)?/);\n          this.operatingSystem = v ? `Mac OS X ${v[1]}.${v[2] || 0}.${v[3] || 0}` : \"Mac OS X\";\n          break;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _detectSIMDSupported(): boolean {\n    if (this._simdSupported === null) {\n      this._simdSupported = WebAssembly.validate(\n        new Uint8Array([\n          0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 3, 2, 0, 0, 5, 3, 1, 0, 1, 12, 1, 0, 10, 22, 2, 12, 0, 65,\n          0, 65, 0, 65, 0, 252, 10, 0, 0, 11, 7, 0, 65, 0, 253, 15, 26, 11\n        ])\n      );\n    }\n    return this._simdSupported;\n  }\n}\n\nSystemInfo._initialize();\n","/**\n * The keys of the keyboard.\n * Keep up with W3C standards.(https://www.w3.org/TR/2017/CR-uievents-code-20170601/)\n */\nexport enum Keys {\n  /** `~ on a US keyboard. This is the 半角/全角/漢字 (hankaku/zenkaku/kanji) key on Japanese keyboards. */\n  Backquote,\n  /** Used for both the US \\| (on the 101-key layout) and also for the key located between the \" and Enter keys on row C of the 102-, 104- and 106-key layouts. Labelled #~ on a UK (102) keyboard. */\n  Backslash,\n  /**\tBackspace or ⌫. Labelled Delete on Apple keyboards. */\n  Backspace,\n  /** [{ on a US keyboard. */\n  BracketLeft,\n  /** ]} on a US keyboard. */\n  BracketRight,\n  /** ,< on a US keyboard. */\n  Comma,\n  /** 0) on a US keyboard. */\n  Digit0,\n  /** 1! on a US keyboard. */\n  Digit1,\n  /** 2@ on a US keyboard. */\n  Digit2,\n  /** 3# on a US keyboard. */\n  Digit3,\n  /** 4$ on a US keyboard. */\n  Digit4,\n  /** 5% on a US keyboard. */\n  Digit5,\n  /** 6^ on a US keyboard. */\n  Digit6,\n  /** 7& on a US keyboard. */\n  Digit7,\n  /** 8* on a US keyboard. */\n  Digit8,\n  /** 9( on a US keyboard. */\n  Digit9,\n  /** =+ on a US keyboard. */\n  Equal,\n  /** Located between the left Shift and Z keys. Labelled \\| on a UK keyboard. */\n  IntlBackslash,\n  /** Located between the / and right Shift keys. Labelled \\ろ (ro) on a Japanese keyboard. */\n  IntlRo,\n  /** Located between the = and Backspace keys. Labelled ¥ (yen) on a Japanese keyboard. \\/ on a Russian keyboard. */\n  IntlYen,\n  /** a on a US keyboard. Labelled q on an AZERTY (e.g., French) keyboard. */\n  KeyA,\n  /** b on a US keyboard. */\n  KeyB,\n  /** c on a US keyboard. */\n  KeyC,\n  /** d on a US keyboard. */\n  KeyD,\n  /** e on a US keyboard. */\n  KeyE,\n  /** f on a US keyboard. */\n  KeyF,\n  /** g on a US keyboard. */\n  KeyG,\n  /** h on a US keyboard. */\n  KeyH,\n  /** i on a US keyboard. */\n  KeyI,\n  /** j on a US keyboard. */\n  KeyJ,\n  /** k on a US keyboard. */\n  KeyK,\n  /** l on a US keyboard. */\n  KeyL,\n  /** m on a US keyboard. */\n  KeyM,\n  /** n on a US keyboard. */\n  KeyN,\n  /** o on a US keyboard. */\n  KeyO,\n  /** p on a US keyboard. */\n  KeyP,\n  /** q on a US keyboard. Labelled a on an AZERTY (e.g., French) keyboard. */\n  KeyQ,\n  /** r on a US keyboard. */\n  KeyR,\n  /** s on a US keyboard. */\n  KeyS,\n  /** t on a US keyboard. */\n  KeyT,\n  /** u on a US keyboard. */\n  KeyU,\n  /** v on a US keyboard. */\n  KeyV,\n  /** w on a US keyboard. Labelled z on an AZERTY (e.g., French) keyboard. */\n  KeyW,\n  /** x on a US keyboard. */\n  KeyX,\n  /** y on a US keyboard. Labelled z on a QWERTZ (e.g., German) keyboard. */\n  KeyY,\n  /** z on a US keyboard. Labelled w on an AZERTY (e.g., French) keyboard, and y on a QWERTZ (e.g., German) keyboard. */\n  KeyZ,\n  /** -_ on a US keyboard. */\n  Minus,\n  /** .> on a US keyboard. */\n  Period,\n  /** '\" on a US keyboard. */\n  Quote,\n  /** ;: on a US keyboard. */\n  Semicolon,\n  /** /? on a US keyboard. */\n  Slash,\n\n  /** Alt, Option or ⌥. */\n  AltLeft,\n  /** Alt, Option or ⌥. This is labelled AltGr key on many keyboard layouts. */\n  AltRight,\n  /** CapsLock or ⇪. */\n  CapsLock,\n  /** The application context menu key, which is typically found between the right Meta key and the right Control key. */\n  ContextMenu,\n  /** Control or ⌃. */\n  ControlLeft,\n  /** Control or ⌃. */\n  ControlRight,\n  /** Enter or ↵. Labelled Return on Apple keyboards. */\n  Enter,\n  /** The Windows, ⌘, Command or other OS symbol key. */\n  MetaLeft,\n  /** The Windows, ⌘, Command or other OS symbol key. */\n  MetaRight,\n  /** Shift or ⇧. */\n  ShiftLeft,\n  /** Shift or ⇧. */\n  ShiftRight,\n  /** Space. */\n  Space,\n  /** Tab or ⇥. */\n  Tab,\n\n  /** Japanese: 変換 (henkan). */\n  Convert,\n  /** Japanese: カタカナ/ひらがな/ローマ字 (katakana/hiragana/romaji). */\n  KanaMode,\n  /**\n   * Korean: HangulMode 한/영 (han/yeong).\n   * Japanese (Mac keyboard): かな (kana).\n   * */\n  Lang1,\n  /**\n   * \tKorean: Hanja 한자 (hanja).\n   *  Japanese (Mac keyboard): 英数 (eisu).\n   */\n  Lang2,\n  /** Japanese (word-processing keyboard): Katakana. */\n  Lang3,\n  /** Japanese (word-processing keyboard): Hiragana. */\n  Lang4,\n  /** Japanese (word-processing keyboard): Zenkaku/Hankaku. */\n  Lang5,\n  /** Japanese: 無変換 (muhenkan). */\n  NonConvert,\n\n  /** ⌦. The forward delete key. Note that on Apple keyboards, the key labelled Delete on the main part of the keyboard should be encoded as \"Backspace\". */\n  Delete,\n  /** Page Down, End or ↘. */\n  End,\n  /** Help. Not present on standard PC keyboards. */\n  Help,\n  /** Home or ↖. */\n  Home,\n  /** Insert or Ins. Not present on Apple keyboards. */\n  Insert,\n  /** Page Down, PgDn or ⇟. */\n  PageDown,\n  /** Page Up, PgUp or ⇞. */\n  PageUp,\n\n  /** ↓ */\n  ArrowDown,\n  /** ← */\n  ArrowLeft,\n  /** → */\n  ArrowRight,\n  /** ↑ */\n  ArrowUp,\n\n  /** On the Mac, the \"NumLock\" code should be used for the numpad Clear key. */\n  NumLock,\n  /**\n   * 0 Ins on a keyboard.\n   * 0 on a phone or remote control.\n   * */\n  Numpad0,\n  /**\n   * 1 End on a keyboard.\n   * 1 or 1 QZ on a phone or remote control.\n   */\n  Numpad1,\n  /**\n   * 2 ↓ on a keyboard.\n   * 2 ABC on a phone or remote control.\n   */\n  Numpad2,\n  /**\n   * 3 PgDn on a keyboard.\n   * 3 DEF on a phone or remote control.\n   */\n  Numpad3,\n  /**\n   * 4 ← on a keyboard.\n   * 4 GHI on a phone or remote control.\n   */\n  Numpad4,\n  /**\n   * 5 on a keyboard.\n   * 5 JKL on a phone or remote control.\n   */\n  Numpad5,\n  /**\n   * 6 → on a keyboard.\n   * 6 MNO on a phone or remote control.\n   */\n  Numpad6,\n  /**\n   * 7 Home on a keyboard.\n   * 7 PQRS or 7 PRS on a phone or remote control.\n   */\n  Numpad7,\n  /**\n   * 8 ↑ on a keyboard.\n   * 8 TUV on a phone or remote control.\n   */\n  Numpad8,\n  /**\n   * 9 PgUp on a keyboard.\n   * 9 WXYZ or 9 WXY on a phone or remote control.\n   */\n  Numpad9,\n  /** + */\n  NumpadAdd,\n  /** Found on the Microsoft Natural Keyboard. */\n  NumpadBackspace,\n  /** C or AC (All Clear). Also for use with numpads that have a Clear key that is separate from the NumLock key. On the Mac, the numpad Clear key should always be encoded as \"NumLock\". */\n  NumpadClear,\n  /** CE (Clear Entry) */\n  NumpadClearEntry,\n  /** , (thousands separator). For locales where the thousands separator is a \".\" (e.g., Brazil), this key may generate a .. */\n  NumpadComma,\n  /** . Del. For locales where the decimal separator is \",\" (e.g., Brazil), this key may generate a ,. */\n  NumpadDecimal,\n  /** / */\n  NumpadDivide,\n  /** Numpad Enter */\n  NumpadEnter,\n  /** = */\n  NumpadEqual,\n  /** # on a phone or remote control device. This key is typically found below the 9 key and to the right of the 0 key. */\n  NumpadHash,\n  /** M+ Add current entry to the value stored in memory. */\n  NumpadMemoryAdd,\n  /** MC Clear the value stored in memory. */\n  NumpadMemoryClear,\n  /** MR Replace the current entry with the value stored in memory. */\n  NumpadMemoryRecall,\n  /** MS Replace the value stored in memory with the current entry. */\n  NumpadMemoryStore,\n  /** M- Subtract current entry from the value stored in memory. */\n  NumpadMemorySubtract,\n  /**\n   * * on a keyboard. For use with numpads that provide mathematical operations (+, -, * and /).\n   * Use \"NumpadStar\" for the * key on phones and remote controls.\n   */\n  NumpadMultiply,\n  /** ( Found on the Microsoft Natural Keyboard. */\n  NumpadParenLeft,\n  /** ) Found on the Microsoft Natural Keyboard. */\n  NumpadParenRight,\n  /**\n   * * on a phone or remote control device. This key is typically found below the 7 key and to the left of the 0 key.\n   * Use \"NumpadMultiply\" for the * key on numeric keypads.\n   */\n  NumpadStar,\n  /** - */\n  NumpadSubtract,\n\n  /** Esc or ⎋. */\n  Escape,\n  /** F1 */\n  F1,\n  /** F2 */\n  F2,\n  /** F3 */\n  F3,\n  /** F4 */\n  F4,\n  /** F5 */\n  F5,\n  /** F6 */\n  F6,\n  /** F7 */\n  F7,\n  /** F8 */\n  F8,\n  /** F9 */\n  F9,\n  /** F10 */\n  F10,\n  /** F11 */\n  F11,\n  /** F12 */\n  F12,\n  /** F13 */\n  F13,\n  /** F14 */\n  F14,\n  /** F15 */\n  F15,\n  /** Fn This is typically a hardware key that does not generate a separate code. Most keyboards do not place this key in the function section, but it is included here to keep it with related keys. */\n  Fn,\n  /** FLock or FnLock. Function Lock key. Found on the Microsoft Natural Keyboard. */\n  FnLock,\n  /** PrtScr SysRq or Print Screen. */\n  PrintScreen,\n  /** Scroll Lock */\n  ScrollLock,\n  /** Pause Break */\n  Pause,\n\n  /** Some laptops place this key to the left of the ↑ key. */\n  BrowserBack,\n  /** Browser Favorites */\n  BrowserFavorites,\n  /** Some laptops place this key to the right of the ↑ key. */\n  BrowserForward,\n  /** Browser Home */\n  BrowserHome,\n  /** Browser Refresh */\n  BrowserRefresh,\n  /** Browser Search */\n  BrowserSearch,\n  /** Browser Stop */\n  BrowserStop,\n  /** Eject or ⏏. This key is placed in the function section on some Apple keyboards. */\n  Eject,\n  /** Sometimes labelled My Computer on the keyboard. */\n  LaunchApp1,\n  /** Sometimes labelled Calculator on the keyboard. */\n  LaunchApp2,\n  /** Launch Mail */\n  LaunchMail,\n  /** Media Play/Pause */\n  MediaPlayPause,\n  /** Media Select */\n  MediaSelect,\n  /** Media Stop */\n  MediaStop,\n  /** Media Track Next */\n  MediaTrackNext,\n  /** Media Track Previous */\n  MediaTrackPrevious,\n  /** This key is placed in the function section on some Apple keyboards, replacing the Eject key. */\n  Power,\n  /** Sleep */\n  Sleep,\n  /** Audio Volume Down */\n  AudioVolumeDown,\n  /** Audio Volume Mute */\n  AudioVolumeMute,\n  /** Audio Volume Up */\n  AudioVolumeUp,\n  /** Wake Up */\n  WakeUp,\n\n  /** Hyper */\n  Hyper,\n  /** Super */\n  Super,\n  /** Turbo */\n  Turbo,\n\n  /** Abort */\n  Abort,\n  /** Resume */\n  Resume,\n  /** Suspend */\n  Suspend,\n\n  /** Found on Sun’s USB keyboard. */\n  Again,\n  /** Found on Sun’s USB keyboard. */\n  Copy,\n  /** Found on Sun’s USB keyboard. */\n  Cut,\n  /** Found on Sun’s USB keyboard. */\n  Find,\n  /** Found on Sun’s USB keyboard. */\n  Open,\n  /** Found on Sun’s USB keyboard. */\n  Paste,\n  /** Found on Sun’s USB keyboard. */\n  Props,\n  /** Found on Sun’s USB keyboard. */\n  Select,\n  /** Found on Sun’s USB keyboard. */\n  Undo,\n\n  /** Use for dedicated ひらがな key found on some Japanese word processing keyboards. */\n  Hiragana,\n  /** Use for dedicated カタカナ key found on some Japanese word processing keyboards. */\n  Katakana,\n\n  /** This value code should be used when no other value given in this specification is appropriate. */\n  Unidentified\n}\n","import { Engine } from \"../../Engine\";\nimport { Platform } from \"../../Platform\";\nimport { SystemInfo } from \"../../SystemInfo\";\nimport { DisorderedArray } from \"../../utils/DisorderedArray\";\nimport { Keys } from \"../enums/Keys\";\nimport { IInput } from \"../interface/IInput\";\n\n/**\n * Keyboard Manager.\n * @internal\n */\nexport class KeyboardManager implements IInput {\n  /** @internal */\n  _curHeldDownKeyToIndexMap: number[] = [];\n  /** @internal */\n  _upKeyToFrameCountMap: number[] = [];\n  /** @internal */\n  _downKeyToFrameCountMap: number[] = [];\n\n  /** @internal */\n  _curFrameHeldDownList: DisorderedArray<Keys> = new DisorderedArray();\n  /** @internal */\n  _curFrameDownList: DisorderedArray<Keys> = new DisorderedArray();\n  /** @internal */\n  _curFrameUpList: DisorderedArray<Keys> = new DisorderedArray();\n\n  // @internal\n  _target: EventTarget;\n  private _engine: Engine;\n  private _nativeEvents: KeyboardEvent[] = [];\n\n  /**\n   * @internal\n   */\n  constructor(engine: Engine, target: EventTarget) {\n    this._engine = engine;\n    this._onBlur = this._onBlur.bind(this);\n    this._onKeyEvent = this._onKeyEvent.bind(this);\n    this._target = target;\n    this._addEventListener();\n  }\n\n  /**\n   * @internal\n   */\n  _update(): void {\n    const { _nativeEvents: nativeEvents, _curFrameDownList: curFrameDownList, _curFrameUpList: curFrameUpList } = this;\n    curFrameDownList.length = 0;\n    curFrameUpList.length = 0;\n    if (nativeEvents.length > 0) {\n      const frameCount = this._engine.time.frameCount;\n      const {\n        _curHeldDownKeyToIndexMap: curHeldDownKeyToIndexMap,\n        _curFrameHeldDownList: curFrameHeldDownList,\n        _downKeyToFrameCountMap: downKeyToFrameCountMap,\n        _upKeyToFrameCountMap: upKeyToFrameCountMap\n      } = this;\n      for (let i = 0, n = nativeEvents.length; i < n; i++) {\n        const evt = nativeEvents[i];\n        const codeKey = <Keys>Keys[evt.code];\n        switch (evt.type) {\n          case \"keydown\":\n            // Filter the repeated triggers of the keyboard.\n            if (curHeldDownKeyToIndexMap[codeKey] == null) {\n              curFrameDownList.add(codeKey);\n              curFrameHeldDownList.add(codeKey);\n              curHeldDownKeyToIndexMap[codeKey] = curFrameHeldDownList.length - 1;\n              downKeyToFrameCountMap[codeKey] = frameCount;\n            }\n            break;\n          case \"keyup\":\n            const delIndex = curHeldDownKeyToIndexMap[codeKey];\n            if (delIndex != null) {\n              curHeldDownKeyToIndexMap[codeKey] = null;\n              const swapCode = curFrameHeldDownList.deleteByIndex(delIndex);\n              swapCode && (curHeldDownKeyToIndexMap[swapCode] = delIndex);\n            }\n            curFrameUpList.add(codeKey);\n            upKeyToFrameCountMap[codeKey] = frameCount;\n            // Because on the mac, the keyup event is not responded to when the meta key is held down,\n            // in order to maintain the correct keystroke record, it is necessary to clear the record\n            // when the meta key is lifted.\n            // link: https://stackoverflow.com/questions/11818637/why-does-javascript-drop-keyup-events-when-the-metakey-is-pressed-on-mac-browser\n            if (SystemInfo.platform === Platform.Mac && (codeKey === Keys.MetaLeft || codeKey === Keys.MetaRight)) {\n              for (let i = 0, n = curFrameHeldDownList.length; i < n; i++) {\n                curHeldDownKeyToIndexMap[curFrameHeldDownList.get(i)] = null;\n              }\n              curFrameHeldDownList.length = 0;\n            }\n            break;\n          default:\n            break;\n        }\n      }\n      nativeEvents.length = 0;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _destroy(): void {\n    this._removeEventListener();\n    this._curHeldDownKeyToIndexMap.length = 0;\n    this._curHeldDownKeyToIndexMap = null;\n    this._upKeyToFrameCountMap.length = 0;\n    this._upKeyToFrameCountMap = null;\n    this._downKeyToFrameCountMap.length = 0;\n    this._downKeyToFrameCountMap = null;\n    this._nativeEvents.length = 0;\n    this._nativeEvents = null;\n    this._curFrameHeldDownList.length = 0;\n    this._curFrameHeldDownList = null;\n    this._curFrameDownList.length = 0;\n    this._curFrameDownList = null;\n    this._curFrameUpList.length = 0;\n    this._curFrameUpList = null;\n    this._engine = null;\n  }\n\n  private _onBlur() {\n    this._curHeldDownKeyToIndexMap.length = 0;\n    this._curFrameHeldDownList.length = 0;\n    this._curFrameDownList.length = 0;\n    this._curFrameUpList.length = 0;\n    this._nativeEvents.length = 0;\n  }\n\n  private _onKeyEvent(evt: KeyboardEvent): void {\n    this._nativeEvents.push(evt);\n  }\n\n  private _addEventListener(): void {\n    const { _target: target } = this;\n    target.addEventListener(\"keydown\", this._onKeyEvent);\n    target.addEventListener(\"keyup\", this._onKeyEvent);\n    target.addEventListener(\"blur\", this._onBlur);\n  }\n\n  private _removeEventListener(): void {\n    const { _target: target } = this;\n    target.removeEventListener(\"keydown\", this._onKeyEvent);\n    target.removeEventListener(\"keyup\", this._onKeyEvent);\n    target.removeEventListener(\"blur\", this._onBlur);\n  }\n}\n","import { ICollider, IStaticCollider } from \"@galacean/engine-design\";\nimport { BoolUpdateFlag } from \"../BoolUpdateFlag\";\nimport { Component } from \"../Component\";\nimport { DependentMode, dependentComponents } from \"../ComponentsDependencies\";\nimport { Entity } from \"../Entity\";\nimport { Transform } from \"../Transform\";\nimport { deepClone, ignoreClone } from \"../clone/CloneManager\";\nimport { ColliderShape } from \"./shape/ColliderShape\";\nimport { ICustomClone } from \"../clone/ComponentCloner\";\n\n/**\n * Base class for all colliders.\n * @decorator `@dependentComponents(Transform, DependentMode.CheckOnly)`\n */\n@dependentComponents(Transform, DependentMode.CheckOnly)\nexport class Collider extends Component implements ICustomClone {\n  /** @internal */\n  @ignoreClone\n  _index: number = -1;\n  /** @internal */\n  @ignoreClone\n  _nativeCollider: ICollider;\n  @ignoreClone\n  protected _updateFlag: BoolUpdateFlag;\n  @deepClone\n  protected _shapes: ColliderShape[] = [];\n\n  /**\n   * The shapes of this collider.\n   */\n  get shapes(): Readonly<ColliderShape[]> {\n    return this._shapes;\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    this._updateFlag = this.entity.transform.registerWorldChangeFlag();\n  }\n\n  /**\n   * Add collider shape on this collider.\n   * @param shape - Collider shape\n   */\n  addShape(shape: ColliderShape): void {\n    const oldCollider = shape._collider;\n    if (oldCollider !== this) {\n      if (oldCollider) {\n        oldCollider.removeShape(shape);\n      }\n\n      this._shapes.push(shape);\n      shape._collider = this;\n      this._nativeCollider.addShape(shape._nativeShape);\n      this._phasedActiveInScene && this.scene.physics._addColliderShape(shape);\n    }\n  }\n\n  /**\n   * Remove a collider shape.\n   * @param shape - The collider shape.\n   */\n  removeShape(shape: ColliderShape): void {\n    const index = this._shapes.indexOf(shape);\n    if (index !== -1) {\n      this._shapes.splice(index, 1);\n      this._phasedActiveInScene && this.scene.physics._removeColliderShape(shape);\n      shape._collider = null;\n      this._nativeCollider.removeShape(shape._nativeShape);\n    }\n  }\n\n  /**\n   * Remove all shape attached.\n   */\n  clearShapes(): void {\n    const shapes = this._shapes;\n    for (let i = 0, n = shapes.length; i < n; i++) {\n      const shape = shapes[i];\n      this._phasedActiveInScene && this.scene.physics._removeColliderShape(shape);\n      shape._destroy();\n      this._nativeCollider.removeShape(shape._nativeShape);\n    }\n    shapes.length = 0;\n  }\n\n  /**\n   * @internal\n   */\n  _onUpdate(): void {\n    if (this._updateFlag.flag) {\n      const { transform } = this.entity;\n      (<IStaticCollider>this._nativeCollider).setWorldTransform(\n        transform.worldPosition,\n        transform.worldRotationQuaternion\n      );\n\n      const worldScale = transform.lossyWorldScale;\n      for (let i = 0, n = this.shapes.length; i < n; i++) {\n        this.shapes[i]._nativeShape.setWorldScale(worldScale);\n      }\n      this._updateFlag.flag = false;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _onLateUpdate(): void {}\n\n  /**\n   * @internal\n   */\n  override _onEnableInScene(): void {\n    const physics = this.scene.physics;\n    physics._addCollider(this);\n    const shapes = this.shapes;\n    for (let i = 0, n = shapes.length; i < n; i++) {\n      physics._addColliderShape(shapes[i]);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  override _onDisableInScene(): void {\n    const physics = this.scene.physics;\n    physics._removeCollider(this);\n    const shapes = this.shapes;\n    for (let i = 0, n = shapes.length; i < n; i++) {\n      physics._removeColliderShape(shapes[i]);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _cloneTo(target: Collider): void {\n    const shapes = target._shapes;\n    for (let i = 0, n = shapes.length; i < n; i++) {\n      target._addPhysicsShape(shapes[i]);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  protected override _onDestroy(): void {\n    super._onDestroy();\n    this.clearShapes();\n    this._nativeCollider.destroy();\n  }\n\n  protected _addPhysicsShape(shape: ColliderShape): void {\n    shape._collider = this;\n\n    this._nativeCollider.addShape(shape._nativeShape);\n    this._phasedActiveInScene && this.scene.physics._addColliderShape(shape);\n  }\n}\n","import { ColliderShape } from \"./shape\";\n\nexport class Collision {\n  shape: ColliderShape;\n}\n","import { ICharacterController, ICollider, IPhysics, IPhysicsScene } from \"@galacean/engine-design\";\nimport { MathUtil, Ray, Vector3 } from \"@galacean/engine-math\";\nimport { Layer } from \"../Layer\";\nimport { Scene } from \"../Scene\";\nimport { CharacterController } from \"./CharacterController\";\nimport { Collider } from \"./Collider\";\nimport { Collision } from \"./Collision\";\nimport { HitResult } from \"./HitResult\";\nimport { ColliderShape } from \"./shape\";\nimport { Script } from \"../Script\";\nimport { DisorderedArray } from \"../utils/DisorderedArray\";\n\n/**\n * A physics scene is a collection of colliders and constraints which can interact.\n */\nexport class PhysicsScene {\n  /** @internal */\n  static _nativePhysics: IPhysics;\n\n  private static _collision = new Collision();\n\n  private _scene: Scene;\n  private _restTime: number = 0;\n  private _fixedTimeStep: number = 1 / 60;\n\n  private _colliders: DisorderedArray<Collider> = new DisorderedArray();\n\n  private _gravity: Vector3 = new Vector3(0, -9.81, 0);\n  private _nativePhysicsScene: IPhysicsScene;\n\n  private _onContactEnter = (obj1: number, obj2: number) => {\n    const physicalObjectsMap = this._scene.engine._physicalObjectsMap;\n    const shape1 = physicalObjectsMap[obj1];\n    const shape2 = physicalObjectsMap[obj2];\n\n    shape1.collider.entity._scripts.forEach(\n      (element: Script) => {\n        let collision = PhysicsScene._collision;\n        collision.shape = shape2;\n        element.onCollisionEnter(collision);\n      },\n      (element: Script, index: number) => {\n        element._entityScriptsIndex = index;\n      }\n    );\n\n    shape2.collider.entity._scripts.forEach(\n      (element: Script) => {\n        let collision = PhysicsScene._collision;\n        collision.shape = shape1;\n        element.onCollisionEnter(collision);\n      },\n      (element: Script, index: number) => {\n        element._entityScriptsIndex = index;\n      }\n    );\n  };\n\n  private _onContactExit = (obj1: number, obj2: number) => {\n    const physicalObjectsMap = this._scene.engine._physicalObjectsMap;\n    const shape1 = physicalObjectsMap[obj1];\n    const shape2 = physicalObjectsMap[obj2];\n\n    shape1.collider.entity._scripts.forEach(\n      (element: Script) => {\n        let collision = PhysicsScene._collision;\n        collision.shape = shape2;\n        element.onCollisionExit(collision);\n      },\n      (element: Script, index: number) => {\n        element._entityScriptsIndex = index;\n      }\n    );\n\n    shape2.collider.entity._scripts.forEach(\n      (element: Script) => {\n        let collision = PhysicsScene._collision;\n        collision.shape = shape1;\n        element.onCollisionExit(collision);\n      },\n      (element: Script, index: number) => {\n        element._entityScriptsIndex = index;\n      }\n    );\n  };\n  private _onContactStay = (obj1: number, obj2: number) => {\n    const physicalObjectsMap = this._scene.engine._physicalObjectsMap;\n    const shape1 = physicalObjectsMap[obj1];\n    const shape2 = physicalObjectsMap[obj2];\n\n    shape1.collider.entity._scripts.forEach(\n      (element: Script) => {\n        let collision = PhysicsScene._collision;\n        collision.shape = shape2;\n        element.onCollisionStay(collision);\n      },\n      (element: Script, index: number) => {\n        element._entityScriptsIndex = index;\n      }\n    );\n\n    shape2.collider.entity._scripts.forEach(\n      (element: Script) => {\n        let collision = PhysicsScene._collision;\n        collision.shape = shape1;\n        element.onCollisionStay(collision);\n      },\n      (element: Script, index: number) => {\n        element._entityScriptsIndex = index;\n      }\n    );\n  };\n  private _onTriggerEnter = (obj1: number, obj2: number) => {\n    const physicalObjectsMap = this._scene.engine._physicalObjectsMap;\n    const shape1 = physicalObjectsMap[obj1];\n    const shape2 = physicalObjectsMap[obj2];\n\n    shape1.collider.entity._scripts.forEach(\n      (element: Script) => {\n        element.onTriggerEnter(shape2);\n      },\n      (element: Script, index: number) => {\n        element._entityScriptsIndex = index;\n      }\n    );\n\n    shape2.collider.entity._scripts.forEach(\n      (element: Script) => {\n        element.onTriggerEnter(shape1);\n      },\n      (element: Script, index: number) => {\n        element._entityScriptsIndex = index;\n      }\n    );\n  };\n\n  private _onTriggerExit = (obj1: number, obj2: number) => {\n    const physicalObjectsMap = this._scene.engine._physicalObjectsMap;\n    const shape1 = physicalObjectsMap[obj1];\n    const shape2 = physicalObjectsMap[obj2];\n\n    shape1.collider.entity._scripts.forEach(\n      (element: Script) => {\n        element.onTriggerExit(shape2);\n      },\n      (element: Script, index: number) => {\n        element._entityScriptsIndex = index;\n      }\n    );\n\n    shape2.collider.entity._scripts.forEach(\n      (element: Script) => {\n        element.onTriggerExit(shape1);\n      },\n      (element: Script, index: number) => {\n        element._entityScriptsIndex = index;\n      }\n    );\n  };\n\n  private _onTriggerStay = (obj1: number, obj2: number) => {\n    const physicalObjectsMap = this._scene.engine._physicalObjectsMap;\n    const shape1 = physicalObjectsMap[obj1];\n    const shape2 = physicalObjectsMap[obj2];\n\n    shape1.collider.entity._scripts.forEach(\n      (element: Script) => {\n        element.onTriggerStay(shape2);\n      },\n      (element: Script, index: number) => {\n        element._entityScriptsIndex = index;\n      }\n    );\n\n    shape2.collider.entity._scripts.forEach(\n      (element: Script) => {\n        element.onTriggerStay(shape1);\n      },\n      (element: Script, index: number) => {\n        element._entityScriptsIndex = index;\n      }\n    );\n  };\n\n  /**\n   * The gravity of physics scene.\n   */\n  get gravity(): Vector3 {\n    return this._gravity;\n  }\n\n  set gravity(value: Vector3) {\n    const gravity = this._gravity;\n    if (gravity !== value) {\n      gravity.copyFrom(value);\n    }\n  }\n\n  /**\n   * The fixed time step in seconds at which physics are performed.\n   */\n  get fixedTimeStep(): number {\n    return this._fixedTimeStep;\n  }\n\n  set fixedTimeStep(value: number) {\n    this._fixedTimeStep = Math.max(value, MathUtil.zeroTolerance);\n  }\n\n  constructor(scene: Scene) {\n    this._scene = scene;\n\n    this._setGravity = this._setGravity.bind(this);\n    //@ts-ignore\n    this._gravity._onValueChanged = this._setGravity;\n\n    const engine = scene.engine;\n    if (engine._physicsInitialized) {\n      this._nativePhysicsScene = PhysicsScene._nativePhysics.createPhysicsScene(\n        engine._nativePhysicsManager,\n        this._onContactEnter,\n        this._onContactExit,\n        this._onContactStay,\n        this._onTriggerEnter,\n        this._onTriggerExit,\n        this._onTriggerStay\n      );\n    }\n  }\n\n  /**\n   * Casts a ray through the Scene and returns the first hit.\n   * @param ray - The ray\n   * @returns Returns True if the ray intersects with a collider, otherwise false\n   */\n  raycast(ray: Ray): boolean;\n\n  /**\n   * Casts a ray through the Scene and returns the first hit.\n   * @param ray - The ray\n   * @param outHitResult - If true is returned, outHitResult will contain more detailed collision information\n   * @returns Returns True if the ray intersects with a collider, otherwise false\n   */\n  raycast(ray: Ray, outHitResult: HitResult): boolean;\n\n  /**\n   * Casts a ray through the Scene and returns the first hit.\n   * @param ray - The ray\n   * @param distance - The max distance the ray should check\n   * @returns Returns True if the ray intersects with a collider, otherwise false\n   */\n  raycast(ray: Ray, distance: number): boolean;\n\n  /**\n   * Casts a ray through the Scene and returns the first hit.\n   * @param ray - The ray\n   * @param distance - The max distance the ray should check\n   * @param outHitResult - If true is returned, outHitResult will contain more detailed collision information\n   * @returns Returns True if the ray intersects with a collider, otherwise false\n   */\n  raycast(ray: Ray, distance: number, outHitResult: HitResult): boolean;\n\n  /**\n   * Casts a ray through the Scene and returns the first hit.\n   * @param ray - The ray\n   * @param distance - The max distance the ray should check\n   * @param layerMask - Layer mask that is used to selectively ignore Colliders when casting\n   * @returns Returns True if the ray intersects with a collider, otherwise false\n   */\n  raycast(ray: Ray, distance: number, layerMask: Layer): boolean;\n\n  /**\n   * Casts a ray through the Scene and returns the first hit.\n   * @param ray - The ray\n   * @param distance - The max distance the ray should check\n   * @param layerMask - Layer mask that is used to selectively ignore Colliders when casting\n   * @param outHitResult - If true is returned, outHitResult will contain more detailed collision information\n   * @returns Returns True if the ray intersects with a collider, otherwise false.\n   */\n  raycast(ray: Ray, distance: number, layerMask: Layer, outHitResult: HitResult): boolean;\n\n  raycast(\n    ray: Ray,\n    distanceOrResult?: number | HitResult,\n    layerMaskOrResult?: Layer | HitResult,\n    outHitResult?: HitResult\n  ): boolean {\n    let hitResult: HitResult;\n\n    let distance = Number.MAX_VALUE;\n    if (typeof distanceOrResult === \"number\") {\n      distance = distanceOrResult;\n    } else if (distanceOrResult != undefined) {\n      hitResult = distanceOrResult;\n    }\n\n    let layerMask = Layer.Everything;\n    if (typeof layerMaskOrResult === \"number\") {\n      layerMask = layerMaskOrResult;\n    } else if (layerMaskOrResult != undefined) {\n      hitResult = layerMaskOrResult;\n    }\n\n    if (outHitResult) {\n      hitResult = outHitResult;\n    }\n\n    const onRaycast = (obj: number) => {\n      const shape = this._scene.engine._physicalObjectsMap[obj];\n      if (!shape) {\n        return false;\n      }\n      return shape.collider.entity.layer & layerMask && shape.isSceneQuery;\n    };\n\n    if (hitResult != undefined) {\n      const result = this._nativePhysicsScene.raycast(ray, distance, onRaycast, (idx, distance, position, normal) => {\n        const hitShape = this._scene.engine._physicalObjectsMap[idx];\n        hitResult.entity = hitShape._collider.entity;\n        hitResult.shape = hitShape;\n        hitResult.distance = distance;\n        hitResult.normal.copyFrom(normal);\n        hitResult.point.copyFrom(position);\n      });\n\n      if (result) {\n        return true;\n      } else {\n        hitResult.entity = null;\n        hitResult.shape = null;\n        hitResult.distance = 0;\n        hitResult.point.set(0, 0, 0);\n        hitResult.normal.set(0, 0, 0);\n        return false;\n      }\n    } else {\n      return this._nativePhysicsScene.raycast(ray, distance, onRaycast);\n    }\n  }\n\n  /**\n   * Call on every frame to update pose of objects.\n   * @internal\n   */\n  _update(deltaTime: number): void {\n    const { _fixedTimeStep: fixedTimeStep, _nativePhysicsScene: nativePhysicsManager } = this;\n    const componentsManager = this._scene._componentsManager;\n\n    const simulateTime = this._restTime + deltaTime;\n    const step = Math.floor(simulateTime / fixedTimeStep);\n    this._restTime = simulateTime - step * fixedTimeStep;\n    for (let i = 0; i < step; i++) {\n      componentsManager.callScriptOnPhysicsUpdate();\n      this._callColliderOnUpdate();\n      nativePhysicsManager.update(fixedTimeStep);\n      this._callColliderOnLateUpdate();\n    }\n  }\n\n  /**\n   * Add ColliderShape into the manager.\n   * @param colliderShape - The Collider Shape.\n   * @internal\n   */\n  _addColliderShape(colliderShape: ColliderShape): void {\n    this._scene.engine._physicalObjectsMap[colliderShape.id] = colliderShape;\n    this._nativePhysicsScene.addColliderShape(colliderShape._nativeShape);\n  }\n\n  /**\n   * Remove ColliderShape.\n   * @param colliderShape - The Collider Shape.\n   * @internal\n   */\n  _removeColliderShape(colliderShape: ColliderShape): void {\n    delete this._scene.engine._physicalObjectsMap[colliderShape.id];\n    this._nativePhysicsScene.removeColliderShape(colliderShape._nativeShape);\n  }\n\n  /**\n   * Add collider into the manager.\n   * @param collider - StaticCollider or DynamicCollider.\n   * @internal\n   */\n  _addCollider(collider: Collider): void {\n    if (collider._index === -1) {\n      collider._index = this._colliders.length;\n      this._colliders.add(collider);\n    }\n    this._nativePhysicsScene.addCollider(<ICollider>collider._nativeCollider);\n  }\n\n  /**\n   * Add character controller into the manager.\n   * @param controller - Character Controller.\n   * @internal\n   */\n  _addCharacterController(controller: CharacterController): void {\n    if (controller._index === -1) {\n      controller._index = this._colliders.length;\n      this._colliders.add(controller);\n    }\n    this._nativePhysicsScene.addCharacterController(<ICharacterController>controller._nativeCollider);\n  }\n\n  /**\n   * Remove collider.\n   * @param collider - StaticCollider or DynamicCollider.\n   * @internal\n   */\n  _removeCollider(collider: Collider): void {\n    const replaced = this._colliders.deleteByIndex(collider._index);\n    replaced && (replaced._index = collider._index);\n    collider._index = -1;\n    this._nativePhysicsScene.removeCollider(<ICollider>collider._nativeCollider);\n  }\n\n  /**\n   * Remove collider.\n   * @param controller - Character Controller.\n   * @internal\n   */\n  _removeCharacterController(controller: CharacterController): void {\n    const replaced = this._colliders.deleteByIndex(controller._index);\n    replaced && (replaced._index = controller._index);\n    controller._index = -1;\n    this._nativePhysicsScene.removeCharacterController(<ICharacterController>controller._nativeCollider);\n  }\n\n  /**\n   * @internal\n   */\n  _callColliderOnUpdate(): void {\n    const elements = this._colliders._elements;\n    for (let i = this._colliders.length - 1; i >= 0; --i) {\n      elements[i]._onUpdate();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _callColliderOnLateUpdate(): void {\n    const elements = this._colliders._elements;\n    for (let i = this._colliders.length - 1; i >= 0; --i) {\n      elements[i]._onLateUpdate();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _gc(): void {\n    this._colliders.garbageCollection();\n  }\n\n  private _setGravity(): void {\n    this._nativePhysicsScene.setGravity(this._gravity);\n  }\n}\n","/**\n * The up axis of the collider shape.\n */\nexport enum ControllerNonWalkableMode {\n  /** Stops character from climbing up non-walkable slopes, but doesn't move it otherwise. */\n  PreventClimbing,\n  /** Stops character from climbing up non-walkable slopes, and forces it to slide down those slopes. */\n  PreventClimbingAndForceSliding\n}\n","import { ICharacterController } from \"@galacean/engine-design\";\nimport { Vector3 } from \"@galacean/engine-math\";\nimport { Entity } from \"../Entity\";\nimport { Collider } from \"./Collider\";\nimport { PhysicsScene } from \"./PhysicsScene\";\nimport { ControllerNonWalkableMode } from \"./enums/ControllerNonWalkableMode\";\nimport { ColliderShape } from \"./shape\";\n\n/**\n * The character controllers.\n */\nexport class CharacterController extends Collider {\n  private _stepOffset: number = 0.5;\n  private _nonWalkableMode: ControllerNonWalkableMode = ControllerNonWalkableMode.PreventClimbing;\n  private _upDirection = new Vector3(0, 1, 0);\n  private _slopeLimit: number = 0.707;\n\n  /**\n   * The step offset for the controller.\n   */\n  get stepOffset(): number {\n    return this._stepOffset;\n  }\n\n  set stepOffset(value: number) {\n    if (this._stepOffset !== value) {\n      this._stepOffset = value;\n      (<ICharacterController>this._nativeCollider).setStepOffset(value);\n    }\n  }\n\n  /**\n   * The value of the non-walkable mode.\n   */\n  get nonWalkableMode(): ControllerNonWalkableMode {\n    return this._nonWalkableMode;\n  }\n\n  set nonWalkableMode(value: ControllerNonWalkableMode) {\n    if (this._nonWalkableMode !== value) {\n      this._nonWalkableMode = value;\n      (<ICharacterController>this._nativeCollider).setNonWalkableMode(value);\n    }\n  }\n\n  /**\n   * The up direction for the controller.\n   */\n  get upDirection(): Vector3 {\n    return this._upDirection;\n  }\n\n  set upDirection(value: Vector3) {\n    if (this._upDirection !== value) {\n      this._upDirection.copyFrom(value);\n    }\n  }\n\n  /**\n   * The slope limit for the controller.\n   */\n  get slopeLimit(): number {\n    return this._slopeLimit;\n  }\n\n  set slopeLimit(value: number) {\n    if (this._slopeLimit !== value) {\n      this._slopeLimit = value;\n      (<ICharacterController>this._nativeCollider).setSlopeLimit(value);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    (<ICharacterController>this._nativeCollider) = PhysicsScene._nativePhysics.createCharacterController();\n\n    this._setUpDirection = this._setUpDirection.bind(this);\n    //@ts-ignore\n    this._upDirection._onValueChanged = this._setUpDirection;\n\n    // sync world position to physical space\n    this._onUpdate();\n  }\n\n  /**\n   * Moves the character using a \"collide-and-slide\" algorithm.\n   * @param disp - Displacement vector\n   * @param minDist - The minimum travelled distance to consider.\n   * @param elapsedTime - Time elapsed since last call\n   * @return flags - The ControllerCollisionFlag\n   */\n  move(disp: Vector3, minDist: number, elapsedTime: number): number {\n    const flags = (<ICharacterController>this._nativeCollider).move(disp, minDist, elapsedTime);\n    this._syncWorldPositionFromPhysicalSpace();\n    return flags;\n  }\n\n  /**\n   * Add collider shape on this controller.\n   * @param shape - Collider shape\n   */\n  override addShape(shape: ColliderShape): void {\n    if (this._shapes.length > 0) {\n      throw \"only allow single shape on controller!\";\n    }\n    super.addShape(shape);\n    this._updateFlag.flag = true;\n  }\n\n  /**\n   * Remove all shape attached.\n   */\n  override clearShapes(): void {\n    if (this._shapes.length > 0) {\n      super.removeShape(this._shapes[0]);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  override _onUpdate() {\n    if (this._updateFlag.flag) {\n      const { transform } = this.entity;\n      const shapes = this.shapes;\n      (<ICharacterController>this._nativeCollider).setWorldPosition(transform.worldPosition);\n\n      const worldScale = transform.lossyWorldScale;\n      for (let i = 0, n = shapes.length; i < n; i++) {\n        shapes[i]._nativeShape.setWorldScale(worldScale);\n      }\n      this._updateFlag.flag = false;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  override _onLateUpdate() {\n    this._syncWorldPositionFromPhysicalSpace();\n    this._updateFlag.flag = false;\n  }\n\n  /**\n   * @internal\n   */\n  override _onEnableInScene() {\n    const physics = this.scene.physics;\n    physics._addCharacterController(this);\n    const shapes = this.shapes;\n    for (let i = 0, n = shapes.length; i < n; i++) {\n      physics._addColliderShape(shapes[i]);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  override _onDisableInScene() {\n    const physics = this.scene.physics;\n    physics._removeCharacterController(this);\n    const shapes = this.shapes;\n    for (let i = 0, n = shapes.length; i < n; i++) {\n      physics._removeColliderShape(shapes[i]);\n    }\n  }\n\n  private _syncWorldPositionFromPhysicalSpace(): void {\n    (<ICharacterController>this._nativeCollider).getWorldPosition(this.entity.transform.worldPosition);\n  }\n\n  private _setUpDirection(): void {\n    (<ICharacterController>this._nativeCollider).setUpDirection(this._upDirection);\n  }\n}\n","import { IDynamicCollider } from \"@galacean/engine-design\";\nimport { Quaternion, Vector3 } from \"@galacean/engine-math\";\nimport { ignoreClone } from \"../clone/CloneManager\";\nimport { ICustomClone } from \"../clone/ComponentCloner\";\nimport { Entity } from \"../Entity\";\nimport { Collider } from \"./Collider\";\nimport { PhysicsScene } from \"./PhysicsScene\";\n\n/**\n * A dynamic collider can act with self-defined movement or physical force.\n */\nexport class DynamicCollider extends Collider {\n  @ignoreClone\n  private _linearDamping: number = 0;\n  @ignoreClone\n  private _angularDamping: number = 0.05;\n  @ignoreClone\n  private _linearVelocity = new Vector3();\n  @ignoreClone\n  private _angularVelocity = new Vector3();\n  @ignoreClone\n  private _mass: number = 1.0;\n  @ignoreClone\n  private _centerOfMass = new Vector3();\n  @ignoreClone\n  private _inertiaTensor = new Vector3(1, 1, 1);\n  @ignoreClone\n  private _maxAngularVelocity: number = 100;\n  @ignoreClone\n  private _maxDepenetrationVelocity: number = 1000;\n  @ignoreClone\n  private _solverIterations: number = 4;\n  @ignoreClone\n  private _isKinematic: boolean = false;\n  @ignoreClone\n  private _constraints: DynamicColliderConstraints = 0;\n  @ignoreClone\n  private _collisionDetectionMode: CollisionDetectionMode = CollisionDetectionMode.Discrete;\n  @ignoreClone\n  private _sleepThreshold: number = 5e-3;\n\n  /**\n   * The linear damping of the dynamic collider.\n   */\n  get linearDamping(): number {\n    return this._linearDamping;\n  }\n\n  set linearDamping(value: number) {\n    if (this._linearDamping !== value) {\n      this._linearDamping = value;\n      (<IDynamicCollider>this._nativeCollider).setLinearDamping(value);\n    }\n  }\n\n  /**\n   * The angular damping of the dynamic collider.\n   */\n  get angularDamping(): number {\n    return this._angularDamping;\n  }\n\n  set angularDamping(value: number) {\n    if (this._angularDamping !== value) {\n      this._angularDamping = value;\n      (<IDynamicCollider>this._nativeCollider).setAngularDamping(value);\n    }\n  }\n\n  /**\n   * The linear velocity vector of the dynamic collider measured in world unit per second.\n   */\n  get linearVelocity(): Vector3 {\n    return this._linearVelocity;\n  }\n\n  set linearVelocity(value: Vector3) {\n    if (this._linearVelocity !== value) {\n      this._linearVelocity.copyFrom(value);\n    }\n  }\n\n  /**\n   * The angular velocity vector of the dynamic collider measured in radians per second.\n   */\n  get angularVelocity(): Vector3 {\n    return this._angularVelocity;\n  }\n\n  set angularVelocity(value: Vector3) {\n    if (this._angularVelocity !== value) {\n      this._angularVelocity.copyFrom(value);\n    }\n  }\n\n  /**\n   * The mass of the dynamic collider.\n   */\n  get mass(): number {\n    return this._mass;\n  }\n\n  set mass(value: number) {\n    if (this._mass !== value) {\n      this._mass = value;\n      (<IDynamicCollider>this._nativeCollider).setMass(value);\n    }\n  }\n\n  /**\n   * The center of mass relative to the transform's origin.\n   */\n  get centerOfMass(): Vector3 {\n    return this._centerOfMass;\n  }\n\n  set centerOfMass(value: Vector3) {\n    if (this._centerOfMass !== value) {\n      this._centerOfMass.copyFrom(value);\n    }\n  }\n\n  /**\n   * The diagonal inertia tensor of mass relative to the center of mass.\n   */\n  get inertiaTensor(): Vector3 {\n    return this._inertiaTensor;\n  }\n\n  set inertiaTensor(value: Vector3) {\n    if (this._inertiaTensor !== value) {\n      this._inertiaTensor.copyFrom(value);\n    }\n  }\n\n  /**\n   * The maximum angular velocity of the collider measured in radians per second. (Default 7) range { 0, infinity }.\n   */\n  get maxAngularVelocity(): number {\n    return this._maxAngularVelocity;\n  }\n\n  set maxAngularVelocity(value: number) {\n    if (this._maxAngularVelocity !== value) {\n      this._maxAngularVelocity = value;\n      (<IDynamicCollider>this._nativeCollider).setMaxAngularVelocity(value);\n    }\n  }\n\n  /**\n   * Maximum velocity of a collider when moving out of penetrating state.\n   */\n  get maxDepenetrationVelocity(): number {\n    return this._maxDepenetrationVelocity;\n  }\n\n  set maxDepenetrationVelocity(value: number) {\n    if (this._maxDepenetrationVelocity !== value) {\n      this._maxDepenetrationVelocity = value;\n      (<IDynamicCollider>this._nativeCollider).setMaxDepenetrationVelocity(value);\n    }\n  }\n\n  /**\n   * The mass-normalized energy threshold, below which objects start going to sleep.\n   */\n  get sleepThreshold(): number {\n    return this._sleepThreshold;\n  }\n\n  set sleepThreshold(value: number) {\n    if (value !== this._sleepThreshold) {\n      this._sleepThreshold = value;\n      (<IDynamicCollider>this._nativeCollider).setSleepThreshold(value);\n    }\n  }\n\n  /**\n   * The solverIterations determines how accurately collider joints and collision contacts are resolved.\n   */\n  get solverIterations(): number {\n    return this._solverIterations;\n  }\n\n  set solverIterations(value: number) {\n    if (this._solverIterations !== value) {\n      this._solverIterations = value;\n      (<IDynamicCollider>this._nativeCollider).setSolverIterations(value);\n    }\n  }\n\n  /**\n   * Controls whether physics affects the dynamic collider.\n   */\n  get isKinematic(): boolean {\n    return this._isKinematic;\n  }\n\n  set isKinematic(value: boolean) {\n    if (this._isKinematic !== value) {\n      this._isKinematic = value;\n      (<IDynamicCollider>this._nativeCollider).setIsKinematic(value);\n    }\n  }\n\n  /**\n   * The particular rigid dynamic lock flag.\n   */\n  get constraints(): DynamicColliderConstraints {\n    return this._constraints;\n  }\n\n  set constraints(value: DynamicColliderConstraints) {\n    if (this._constraints !== value) {\n      this._constraints = value;\n      (<IDynamicCollider>this._nativeCollider).setConstraints(value);\n    }\n  }\n\n  /**\n   * The colliders' collision detection mode.\n   */\n  get collisionDetectionMode(): CollisionDetectionMode {\n    return this._collisionDetectionMode;\n  }\n\n  set collisionDetectionMode(value: CollisionDetectionMode) {\n    if (this._collisionDetectionMode !== value) {\n      this._collisionDetectionMode = value;\n      (<IDynamicCollider>this._nativeCollider).setCollisionDetectionMode(value);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    const { transform } = this.entity;\n    this._nativeCollider = PhysicsScene._nativePhysics.createDynamicCollider(\n      transform.worldPosition,\n      transform.worldRotationQuaternion\n    );\n\n    this._setLinearVelocity = this._setLinearVelocity.bind(this);\n    this._setAngularVelocity = this._setAngularVelocity.bind(this);\n    this._setCenterOfMass = this._setCenterOfMass.bind(this);\n    this._setInertiaTensor = this._setInertiaTensor.bind(this);\n\n    //@ts-ignore\n    this._linearVelocity._onValueChanged = this._setLinearVelocity;\n    //@ts-ignore\n    this._angularVelocity._onValueChanged = this._setAngularVelocity;\n    //@ts-ignore\n    this._centerOfMass._onValueChanged = this._setCenterOfMass;\n    //@ts-ignore\n    this._inertiaTensor._onValueChanged = this._setInertiaTensor;\n  }\n\n  /**\n   * Apply a force to the DynamicCollider.\n   * @param force - The force make the collider move\n   */\n  applyForce(force: Vector3): void {\n    (<IDynamicCollider>this._nativeCollider).addForce(force);\n  }\n\n  /**\n   * Apply a torque to the DynamicCollider.\n   * @param torque - The force make the collider rotate\n   */\n  applyTorque(torque: Vector3): void {\n    (<IDynamicCollider>this._nativeCollider).addTorque(torque);\n  }\n\n  /**\n   * Moves kinematically controlled dynamic actors through the game world.\n   * @param position - The desired position for the kinematic actor\n   */\n  move(position: Vector3): void;\n\n  /**\n   * Moves kinematically controlled dynamic actors through the game world.\n   * @param rotation - The desired rotation for the kinematic actor\n   */\n  move(rotation: Quaternion): void;\n\n  /**\n   * Moves kinematically controlled dynamic actors through the game world.\n   * @param position - The desired position for the kinematic actor\n   * @param rotation - The desired rotation for the kinematic actor\n   */\n  move(position: Vector3, rotation: Quaternion): void;\n\n  move(positionOrRotation: Vector3 | Quaternion, rotation?: Quaternion): void {\n    (<IDynamicCollider>this._nativeCollider).move(positionOrRotation, rotation);\n  }\n\n  /**\n   * Forces a collider to sleep at least one frame.\n   */\n  sleep(): void {\n    (<IDynamicCollider>this._nativeCollider).sleep();\n  }\n\n  /**\n   * Forces a collider to wake up.\n   */\n  wakeUp(): void {\n    (<IDynamicCollider>this._nativeCollider).wakeUp();\n  }\n\n  /**\n   * @internal\n   */\n  override _onLateUpdate(): void {\n    const { transform } = this.entity;\n    const { worldPosition, worldRotationQuaternion } = transform;\n    (<IDynamicCollider>this._nativeCollider).getWorldTransform(worldPosition, worldRotationQuaternion);\n    this._updateFlag.flag = false;\n  }\n\n  /**\n   * @internal\n   */\n  override _cloneTo(target: DynamicCollider): void {\n    super._cloneTo(target);\n    target.linearDamping = this.linearDamping;\n    target.angularDamping = this.angularDamping;\n    target.linearVelocity = this.linearVelocity;\n    target.angularVelocity = this.angularVelocity;\n    target.mass = this.mass;\n    target.centerOfMass = this.centerOfMass;\n    target.inertiaTensor = this.inertiaTensor;\n    target.maxAngularVelocity = this.maxAngularVelocity;\n    target.maxDepenetrationVelocity = this.maxDepenetrationVelocity;\n    target.sleepThreshold = this.sleepThreshold;\n    target.solverIterations = this.solverIterations;\n    target.isKinematic = this.isKinematic;\n    target.constraints = this.constraints;\n    target.collisionDetectionMode = this.collisionDetectionMode;\n  }\n\n  private _setLinearVelocity(): void {\n    (<IDynamicCollider>this._nativeCollider).setLinearVelocity(this._linearVelocity);\n  }\n\n  private _setAngularVelocity(): void {\n    (<IDynamicCollider>this._nativeCollider).setAngularVelocity(this._angularVelocity);\n  }\n\n  private _setCenterOfMass(): void {\n    (<IDynamicCollider>this._nativeCollider).setCenterOfMass(this._centerOfMass);\n  }\n\n  private _setInertiaTensor(): void {\n    (<IDynamicCollider>this._nativeCollider).setInertiaTensor(this._inertiaTensor);\n  }\n}\n\n/**\n * The collision detection mode constants.\n */\nexport enum CollisionDetectionMode {\n  /** Continuous collision detection is off for this dynamic collider. */\n  Discrete,\n  /** Continuous collision detection is on for colliding with static mesh geometry. */\n  Continuous,\n  /** Continuous collision detection is on for colliding with static and dynamic geometry. */\n  ContinuousDynamic,\n  /** Speculative continuous collision detection is on for static and dynamic geometries */\n  ContinuousSpeculative\n}\n\n/**\n * Use these flags to constrain motion of dynamic collider.\n */\nexport enum DynamicColliderConstraints {\n  /** Not Freeze. */\n  None = 0,\n  /** Freeze motion along the X-axis. */\n  FreezePositionX = 1,\n  /** Freeze motion along the Y-axis. */\n  FreezePositionY = 2,\n  /** Freeze motion along the Z-axis. */\n  FreezePositionZ = 4,\n  /** Freeze rotation along the X-axis. */\n  FreezeRotationX = 8,\n  /** Freeze rotation along the Y-axis. */\n  FreezeRotationY = 16,\n  /** Freeze rotation along the Z-axis. */\n  FreezeRotationZ = 32\n}\n","import { Entity } from \"../Entity\";\nimport { Vector3 } from \"@galacean/engine-math\";\nimport { ColliderShape } from \"./shape\";\n\n/**\n * Structure used to get information back from a raycast or a sweep.\n */\nexport class HitResult {\n  /** The entity that was hit. */\n  entity: Entity = null;\n  /** The distance from the ray's origin to the impact point. */\n  distance: number = 0;\n  /** The impact point in world space where the ray hit the collider. */\n  point: Vector3 = new Vector3();\n  /** The normal of the surface the ray hit. */\n  normal: Vector3 = new Vector3();\n  /** The shape of the collider that was hit. */\n  shape: ColliderShape = null;\n}\n","/**\n * Describes how physics materials of the colliding objects are combined.\n */\nexport enum PhysicsMaterialCombineMode {\n  /** Averages the friction/bounce of the two colliding materials. */\n  Average,\n  /** Uses the smaller friction/bounce of the two colliding materials. */\n  Minimum,\n  /** Multiplies the friction/bounce of the two colliding materials. */\n  Multiply,\n  /** Uses the larger friction/bounce of the two colliding materials. */\n  Maximum\n}\n","import { IPhysicsMaterial } from \"@galacean/engine-design\";\nimport { PhysicsScene } from \"./PhysicsScene\";\nimport { PhysicsMaterialCombineMode } from \"./enums/PhysicsMaterialCombineMode\";\n\n/**\n * Material class to represent a set of surface properties.\n */\nexport class PhysicsMaterial {\n  private _bounciness: number = 0.1;\n  private _dynamicFriction: number = 0.1;\n  private _staticFriction: number = 0.1;\n  private _bounceCombine: PhysicsMaterialCombineMode = PhysicsMaterialCombineMode.Average;\n  private _frictionCombine: PhysicsMaterialCombineMode = PhysicsMaterialCombineMode.Average;\n  private _destroyed: boolean;\n\n  /** @internal */\n  _nativeMaterial: IPhysicsMaterial;\n\n  constructor() {\n    this._nativeMaterial = PhysicsScene._nativePhysics.createPhysicsMaterial(\n      this._staticFriction,\n      this._dynamicFriction,\n      this._bounciness,\n      this._bounceCombine,\n      this._frictionCombine\n    );\n  }\n\n  /**\n   * The coefficient of bounciness.\n   */\n  get bounciness(): number {\n    return this._bounciness;\n  }\n\n  set bounciness(value: number) {\n    if (this._bounciness !== value) {\n      this._bounciness = value;\n      this._nativeMaterial.setBounciness(value);\n    }\n  }\n\n  /**\n   * The DynamicFriction value.\n   */\n  get dynamicFriction(): number {\n    return this._dynamicFriction;\n  }\n\n  set dynamicFriction(value: number) {\n    if (this._dynamicFriction !== value) {\n      this._dynamicFriction = value;\n      this._nativeMaterial.setDynamicFriction(value);\n    }\n  }\n\n  /**\n   * The coefficient of static friction.\n   */\n  get staticFriction(): number {\n    return this._staticFriction;\n  }\n\n  set staticFriction(value: number) {\n    if (this._staticFriction !== value) {\n      this._staticFriction = value;\n      this._nativeMaterial.setStaticFriction(value);\n    }\n  }\n\n  /**\n   * The restitution combine mode.\n   */\n  get bounceCombine(): PhysicsMaterialCombineMode {\n    return this._bounceCombine;\n  }\n\n  set bounceCombine(value: PhysicsMaterialCombineMode) {\n    if (this._bounceCombine !== value) {\n      this._bounceCombine = value;\n      this._nativeMaterial.setBounceCombine(value);\n    }\n  }\n\n  /**\n   * The friction combine mode.\n   */\n  get frictionCombine(): PhysicsMaterialCombineMode {\n    return this._frictionCombine;\n  }\n\n  set frictionCombine(value: PhysicsMaterialCombineMode) {\n    if (this._frictionCombine !== value) {\n      this._frictionCombine = value;\n      this._nativeMaterial.setFrictionCombine(value);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _destroy() {\n    !this._destroyed && this._nativeMaterial.destroy();\n    this._destroyed = true;\n  }\n}\n","import { Entity } from \"../Entity\";\nimport { Collider } from \"./Collider\";\nimport { PhysicsScene } from \"./PhysicsScene\";\n\n/**\n * A static collider component that will not move.\n * @remarks Mostly used for object which always stays at the same place and never moves around.\n */\nexport class StaticCollider extends Collider {\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    const { transform } = this.entity;\n    this._nativeCollider = PhysicsScene._nativePhysics.createStaticCollider(\n      transform.worldPosition,\n      transform.worldRotationQuaternion\n    );\n  }\n}\n","/**\n * The up axis of the collider shape.\n */\nexport enum ColliderShapeUpAxis {\n  /** Up axis is X. */\n  X,\n  /** Up axis is Y. */\n  Y,\n  /** Up axis is Z. */\n  Z\n}\n","/**\n * The up axis of the collider shape.\n */\nexport enum ControllerCollisionFlag {\n  /** Character is colliding to the sides. */\n  Sides = 1,\n  /** Character has collision above. */\n  Up = 2,\n  /** Character has collision below. */\n  Down = 4\n}\n","import { IJoint } from \"@galacean/engine-design\";\nimport { Quaternion, Vector3 } from \"@galacean/engine-math\";\nimport { ignoreClone } from \"../../clone/CloneManager\";\nimport { Component } from \"../../Component\";\nimport { dependentComponents, DependentMode } from \"../../ComponentsDependencies\";\nimport { Entity } from \"../../Entity\";\nimport { Collider } from \"../Collider\";\nimport { ICustomClone } from \"../../clone/ComponentCloner\";\n\n/**\n * A base class providing common functionality for joints.\n * @decorator `@dependentComponents(Collider, DependentMode.CheckOnly)`\n */\n@dependentComponents(Collider, DependentMode.CheckOnly)\nexport class Joint extends Component implements ICustomClone {\n  @ignoreClone\n  protected _colliderInfo = new JointColliderInfo();\n  @ignoreClone\n  protected _connectedColliderInfo = new JointColliderInfo();\n  @ignoreClone\n  protected _nativeJoint: IJoint;\n  @ignoreClone\n  private _force: number = 0;\n  @ignoreClone\n  private _torque: number = 0;\n\n  /**\n   * The connected collider.\n   */\n  get connectedCollider(): Collider {\n    return this._connectedColliderInfo.collider;\n  }\n\n  set connectedCollider(value: Collider) {\n    if (this._connectedColliderInfo.collider !== value) {\n      this._connectedColliderInfo.collider = value;\n      this._nativeJoint.setConnectedCollider(value._nativeCollider);\n    }\n  }\n\n  /**\n   * The connected anchor position.\n   * @remarks If connectedCollider is set, this anchor is relative offset, or the anchor is world position.\n   */\n  get connectedAnchor(): Vector3 {\n    return this._connectedColliderInfo.localPosition;\n  }\n\n  set connectedAnchor(value: Vector3) {\n    const connectedAnchor = this._connectedColliderInfo.localPosition;\n    if (value !== connectedAnchor) {\n      connectedAnchor.copyFrom(value);\n    }\n    this._nativeJoint.setConnectedAnchor(value);\n  }\n\n  /**\n   *  The scale to apply to the inverse mass of collider 0 for resolving this constraint.\n   */\n  get connectedMassScale(): number {\n    return this._connectedColliderInfo.massScale;\n  }\n\n  set connectedMassScale(value: number) {\n    if (value !== this._connectedColliderInfo.massScale) {\n      this._connectedColliderInfo.massScale = value;\n      this._nativeJoint.setConnectedMassScale(value);\n    }\n  }\n\n  /**\n   * The scale to apply to the inverse inertia of collider0 for resolving this constraint.\n   */\n  get connectedInertiaScale(): number {\n    return this._connectedColliderInfo.inertiaScale;\n  }\n\n  set connectedInertiaScale(value: number) {\n    if (value !== this._connectedColliderInfo.inertiaScale) {\n      this._connectedColliderInfo.inertiaScale = value;\n      this._nativeJoint.setConnectedInertiaScale(value);\n    }\n  }\n\n  /**\n   * The scale to apply to the inverse mass of collider 1 for resolving this constraint.\n   */\n  get massScale(): number {\n    return this._colliderInfo.massScale;\n  }\n\n  set massScale(value: number) {\n    if (value !== this._colliderInfo.massScale) {\n      this._colliderInfo.massScale = value;\n      this._nativeJoint.setMassScale(value);\n    }\n  }\n\n  /**\n   * The scale to apply to the inverse inertia of collider1 for resolving this constraint.\n   */\n  get inertiaScale(): number {\n    return this._colliderInfo.inertiaScale;\n  }\n\n  set inertiaScale(value: number) {\n    if (value !== this._colliderInfo.inertiaScale) {\n      this._colliderInfo.inertiaScale = value;\n      this._nativeJoint.setInertiaScale(value);\n    }\n  }\n\n  /**\n   * The maximum force the joint can apply before breaking.\n   */\n  get breakForce(): number {\n    return this._force;\n  }\n\n  set breakForce(value: number) {\n    if (value !== this._force) {\n      this._force = value;\n      this._nativeJoint.setBreakForce(value);\n    }\n  }\n\n  /**\n   * The maximum torque the joint can apply before breaking.\n   */\n  get breakTorque(): number {\n    return this._torque;\n  }\n\n  set breakTorque(value: number) {\n    if (value !== this._torque) {\n      this._torque = value;\n      this._nativeJoint.setBreakTorque(value);\n    }\n  }\n\n  constructor(entity: Entity) {\n    super(entity);\n    this._connectedColliderInfo.localPosition = new Vector3();\n  }\n\n  /**\n   * @internal\n   */\n  _cloneTo(target: Joint): void {\n    target.connectedCollider = this.connectedCollider;\n    target.connectedAnchor = this.connectedAnchor;\n    target.connectedMassScale = this.connectedMassScale;\n    target.connectedInertiaScale = this.connectedInertiaScale;\n    target.massScale = this.massScale;\n    target.inertiaScale = this.inertiaScale;\n    target.breakForce = this.breakForce;\n    target.breakTorque = this.breakTorque;\n  }\n}\n\n/**\n * @internal\n */\nclass JointColliderInfo {\n  collider: Collider = null;\n  localPosition: Vector3;\n  localRotation: Quaternion;\n  massScale: number = 0;\n  inertiaScale: number = 0;\n}\n","import { Collider } from \"../Collider\";\nimport { PhysicsScene } from \"../PhysicsScene\";\nimport { Joint } from \"./Joint\";\n\n/*\n * A fixed joint permits no relative movement between two colliders. ie the colliders are glued together.\n */\nexport class FixedJoint extends Joint {\n  /**\n   * @internal\n   */\n  override _onAwake() {\n    const collider = this._colliderInfo;\n    collider.collider = this.entity.getComponent(Collider);\n    this._nativeJoint = PhysicsScene._nativePhysics.createFixedJoint(collider.collider._nativeCollider);\n  }\n}\n","/**\n * Flags specific to the Hinge Joint.\n * @internal\n */\nexport enum HingeJointFlag {\n  /** None. */\n  None = 0,\n  /** Enable the limit. */\n  LimitEnabled = 1,\n  /** Enable the drive. */\n  DriveEnabled = 2,\n  /** If the existing velocity is beyond the drive velocity, do not add force. */\n  DriveFreeSpin = 4\n}\n","import { IHingeJoint } from \"@galacean/engine-design\";\nimport { Vector3 } from \"@galacean/engine-math\";\nimport { Collider } from \"../Collider\";\nimport { PhysicsScene } from \"../PhysicsScene\";\nimport { HingeJointFlag } from \"../enums/HingeJointFlag\";\nimport { Joint } from \"./Joint\";\nimport { JointLimits } from \"./JointLimits\";\nimport { JointMotor } from \"./JointMotor\";\nimport { ignoreClone } from \"../../clone/CloneManager\";\n\n/**\n * A joint which behaves in a similar way to a hinge or axle.\n */\nexport class HingeJoint extends Joint {\n  @ignoreClone\n  private _axis = new Vector3(1, 0, 0);\n  @ignoreClone\n  private _hingeFlags = HingeJointFlag.None;\n  @ignoreClone\n  private _useSpring = false;\n  @ignoreClone\n  private _jointMonitor: JointMotor;\n  @ignoreClone\n  private _limits: JointLimits;\n\n  /**\n   * The anchor rotation.\n   */\n  get axis(): Vector3 {\n    return this._axis;\n  }\n\n  set axis(value: Vector3) {\n    const axis = this._axis;\n    if (value !== axis) {\n      axis.copyFrom(value);\n    }\n    (<IHingeJoint>this._nativeJoint).setAxis(axis);\n  }\n\n  /**\n   * The swing offset.\n   */\n  get swingOffset(): Vector3 {\n    return this._colliderInfo.localPosition;\n  }\n\n  set swingOffset(value: Vector3) {\n    const swingOffset = this._colliderInfo.localPosition;\n    if (value !== swingOffset) {\n      swingOffset.copyFrom(value);\n    }\n    (<IHingeJoint>this._nativeJoint).setSwingOffset(swingOffset);\n  }\n\n  /**\n   * The current angle in degrees of the joint relative to its rest position.\n   */\n  get angle(): number {\n    return (<IHingeJoint>this._nativeJoint).getAngle();\n  }\n\n  /**\n   * The angular velocity of the joint in degrees per second.\n   */\n  get velocity(): Readonly<number> {\n    return (<IHingeJoint>this._nativeJoint).getVelocity();\n  }\n\n  /**\n   * Enables the joint's limits. Disabled by default.\n   */\n  get useLimits(): boolean {\n    return (this._hingeFlags & HingeJointFlag.LimitEnabled) == HingeJointFlag.LimitEnabled;\n  }\n\n  set useLimits(value: boolean) {\n    if (value !== this.useLimits) {\n      value ? (this._hingeFlags |= HingeJointFlag.LimitEnabled) : (this._hingeFlags &= ~HingeJointFlag.LimitEnabled);\n      (<IHingeJoint>this._nativeJoint).setHingeJointFlag(HingeJointFlag.LimitEnabled, value);\n    }\n  }\n\n  /**\n   * Enables the joint's motor. Disabled by default.\n   */\n  get useMotor(): boolean {\n    return (this._hingeFlags & HingeJointFlag.DriveEnabled) == HingeJointFlag.DriveEnabled;\n  }\n\n  set useMotor(value: boolean) {\n    if (value !== this.useMotor) {\n      value ? (this._hingeFlags |= HingeJointFlag.DriveEnabled) : (this._hingeFlags &= ~HingeJointFlag.DriveEnabled);\n      (<IHingeJoint>this._nativeJoint).setHingeJointFlag(HingeJointFlag.DriveEnabled, value);\n    }\n  }\n\n  /**\n   * Enables the joint's spring. Disabled by default.\n   */\n  get useSpring(): boolean {\n    return this._useSpring;\n  }\n\n  set useSpring(value: boolean) {\n    if (this._useSpring !== value) {\n      this._useSpring = value;\n      this.limits = this._limits;\n    }\n  }\n\n  /**\n   * The motor will apply a force up to a maximum force to achieve the target velocity in degrees per second.\n   */\n  get motor(): JointMotor {\n    return this._jointMonitor;\n  }\n\n  set motor(value: JointMotor) {\n    if (this._jointMonitor !== value) {\n      this._jointMonitor = value;\n      (<IHingeJoint>this._nativeJoint).setDriveVelocity(value.targetVelocity);\n      (<IHingeJoint>this._nativeJoint).setDriveForceLimit(value.forceLimit);\n      (<IHingeJoint>this._nativeJoint).setDriveGearRatio(value.gearRation);\n      (<IHingeJoint>this._nativeJoint).setHingeJointFlag(HingeJointFlag.DriveFreeSpin, value.freeSpin);\n    }\n  }\n\n  /**\n   * Limit of angular rotation (in degrees) on the hinge joint.\n   */\n  get limits(): JointLimits {\n    return this._limits;\n  }\n\n  set limits(value: JointLimits) {\n    if (this._limits !== value) {\n      this._limits = value;\n      if (this.useSpring) {\n        (<IHingeJoint>this._nativeJoint).setSoftLimit(value.min, value.max, value.stiffness, value.damping);\n      } else {\n        (<IHingeJoint>this._nativeJoint).setHardLimit(value.min, value.max, value.contactDistance);\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  override _onAwake() {\n    const collider = this._colliderInfo;\n    collider.localPosition = new Vector3();\n    collider.collider = this.entity.getComponent(Collider);\n    this._nativeJoint = PhysicsScene._nativePhysics.createHingeJoint(collider.collider._nativeCollider);\n  }\n\n  /**\n   * @internal\n   */\n  override _cloneTo(target: HingeJoint): void {\n    target.axis = this.axis;\n    target.swingOffset = this.swingOffset;\n    target.useLimits = this.useLimits;\n    target.useMotor = this.useMotor;\n    target.useSpring = this.useSpring;\n    target.motor = this.motor;\n    target.limits = this.limits;\n  }\n}\n","import { ISpringJoint } from \"@galacean/engine-design\";\nimport { Vector3 } from \"@galacean/engine-math\";\nimport { ICustomClone } from \"../../clone/ComponentCloner\";\nimport { Collider } from \"../Collider\";\nimport { PhysicsScene } from \"../PhysicsScene\";\nimport { Joint } from \"./Joint\";\n\n/**\n * A joint that maintains an upper or lower bound (or both) on the distance between two points on different objects.\n */\nexport class SpringJoint extends Joint {\n  private _minDistance: number = 0;\n  private _maxDistance: number = 0;\n  private _tolerance: number = 0.25;\n  private _stiffness: number = 0;\n  private _damping: number = 0;\n\n  /**\n   * The swing offset.\n   */\n  get swingOffset(): Vector3 {\n    return this._colliderInfo.localPosition;\n  }\n\n  set swingOffset(value: Vector3) {\n    const swingOffset = this._colliderInfo.localPosition;\n    if (value !== swingOffset) {\n      swingOffset.copyFrom(value);\n    }\n    (<ISpringJoint>this._nativeJoint).setSwingOffset(value);\n  }\n\n  /**\n   * The minimum distance.\n   */\n  get minDistance(): number {\n    return this._minDistance;\n  }\n\n  set minDistance(value: number) {\n    if (this._minDistance !== value) {\n      this._minDistance = value;\n      (<ISpringJoint>this._nativeJoint).setMinDistance(value);\n    }\n  }\n\n  /**\n   * The maximum distance.\n   */\n  get maxDistance(): number {\n    return this._maxDistance;\n  }\n\n  set maxDistance(value: number) {\n    if (this._maxDistance !== value) {\n      this._maxDistance = value;\n      (<ISpringJoint>this._nativeJoint).setMaxDistance(value);\n    }\n  }\n\n  /**\n   * The distance beyond the allowed range at which the joint becomes active.\n   */\n  get tolerance(): number {\n    return this._tolerance;\n  }\n\n  set tolerance(value: number) {\n    if (this._tolerance !== value) {\n      this._tolerance = value;\n      (<ISpringJoint>this._nativeJoint).setTolerance(value);\n    }\n  }\n\n  /**\n   * The spring strength of the joint.\n   */\n  get stiffness(): number {\n    return this._stiffness;\n  }\n\n  set stiffness(value: number) {\n    if (this._stiffness !== value) {\n      this._stiffness = value;\n      (<ISpringJoint>this._nativeJoint).setStiffness(value);\n    }\n  }\n\n  /**\n   * The degree of damping of the joint spring of the joint.\n   */\n  get damping(): number {\n    return this._damping;\n  }\n\n  set damping(value: number) {\n    if (this._damping !== value) {\n      this._damping = value;\n      (<ISpringJoint>this._nativeJoint).setDamping(value);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  override _onAwake() {\n    const collider = this._colliderInfo;\n    collider.localPosition = new Vector3();\n    collider.collider = this.entity.getComponent(Collider);\n    this._nativeJoint = PhysicsScene._nativePhysics.createSpringJoint(collider.collider._nativeCollider);\n  }\n\n  /**\n   * @internal\n   */\n  override _cloneTo(target: SpringJoint): void {\n    target.swingOffset = this.swingOffset;\n    target.minDistance = this.minDistance;\n    target.maxDistance = this.maxDistance;\n    target.tolerance = this.tolerance;\n    target.stiffness = this.stiffness;\n    target.damping = this.damping;\n  }\n}\n","/**\n * JointLimits is used to limit the joints angle.\n */\nexport class JointLimits {\n  /** The upper angular limit (in degrees) of the joint. */\n  max: number = 0;\n  /** The lower angular limit (in degrees) of the joint. */\n  min: number = 0;\n  /** Distance inside the limit value at which the limit will be considered to be active by the solver. */\n  contactDistance: number = -1;\n\n  /** The spring forces used to reach the target position. */\n  stiffness: number = 0;\n  /** The damper force uses to dampen the spring. */\n  damping: number = 0;\n}\n","/**\n * The JointMotor is used to motorize a joint.\n */\nexport class JointMotor {\n  /** The motor will apply a force up to force to achieve targetVelocity. */\n  targetVelocity: number = 0;\n  /** The force limit.*/\n  forceLimit: number = Number.MAX_VALUE;\n  /** Gear ration for the motor */\n  gearRation: number = 1.0;\n  /** If freeSpin is enabled the motor will only accelerate but never slow down. */\n  freeSpin: boolean = false;\n}\n","import { IColliderShape } from \"@galacean/engine-design\";\nimport { PhysicsMaterial } from \"../PhysicsMaterial\";\nimport { Vector3 } from \"@galacean/engine-math\";\nimport { Collider } from \"../Collider\";\nimport { ignoreClone } from \"../../clone/CloneManager\";\nimport { ICustomClone } from \"../../clone/ComponentCloner\";\n\n/**\n * Abstract class for collider shapes.\n */\nexport abstract class ColliderShape implements ICustomClone {\n  private static _idGenerator: number = 0;\n\n  /** @internal */\n  @ignoreClone\n  _collider: Collider;\n  /** @internal */\n  @ignoreClone\n  _nativeShape: IColliderShape;\n\n  @ignoreClone\n  protected _id: number;\n  @ignoreClone\n  protected _material: PhysicsMaterial;\n  @ignoreClone\n  private _isTrigger: boolean = false;\n  @ignoreClone\n  private _rotation: Vector3 = new Vector3();\n  @ignoreClone\n  private _position: Vector3 = new Vector3();\n  @ignoreClone\n  private _contactOffset: number = 0.02;\n\n  /**\n   * @internal\n   * @beta\n   * Whether raycast can select it.\n   */\n  isSceneQuery: boolean = true;\n\n  /**\n   * Collider owner of this shape.\n   */\n  get collider(): Collider {\n    return this._collider;\n  }\n\n  /**\n   * Unique id for this shape.\n   */\n  get id(): number {\n    return this._id;\n  }\n\n  /**\n   * Contact offset for this shape.\n   */\n  get contactOffset(): number {\n    return this._contactOffset;\n  }\n\n  set contactOffset(value: number) {\n    if (this._contactOffset !== value) {\n      this._contactOffset = value;\n      this._nativeShape.setContactOffset(value);\n    }\n  }\n\n  /**\n   * Physical material.\n   */\n  get material(): PhysicsMaterial {\n    return this._material;\n  }\n\n  set material(value: PhysicsMaterial) {\n    if (this._material !== value) {\n      this._material = value;\n      this._nativeShape.setMaterial(value._nativeMaterial);\n    }\n  }\n\n  /**\n   * The local rotation of this ColliderShape.\n   */\n  get rotation(): Vector3 {\n    return this._rotation;\n  }\n\n  set rotation(value: Vector3) {\n    if (this._rotation != value) {\n      this._rotation.copyFrom(value);\n    }\n  }\n\n  /**\n   * The local position of this ColliderShape.\n   */\n  get position(): Vector3 {\n    return this._position;\n  }\n\n  set position(value: Vector3) {\n    if (this._position !== value) {\n      this._position.copyFrom(value);\n    }\n  }\n\n  /**\n   * True for TriggerShape, false for SimulationShape.\n   */\n  get isTrigger(): boolean {\n    return this._isTrigger;\n  }\n\n  set isTrigger(value: boolean) {\n    if (this._isTrigger !== value) {\n      this._isTrigger = value;\n      this._nativeShape.setIsTrigger(value);\n    }\n  }\n\n  protected constructor() {\n    this._material = new PhysicsMaterial();\n    this._id = ColliderShape._idGenerator++;\n\n    this._setRotation = this._setRotation.bind(this);\n    this._setPosition = this._setPosition.bind(this);\n    //@ts-ignore\n    this._rotation._onValueChanged = this._setRotation;\n    //@ts-ignore\n    this._position._onValueChanged = this._setPosition;\n  }\n\n  /**\n   * @internal\n   */\n  _cloneTo(target: ColliderShape) {\n    target.contactOffset = this.contactOffset;\n    target.rotation = this.rotation;\n    target.position = this.position;\n    target.isTrigger = this.isTrigger;\n    target.material = this.material;\n  }\n\n  /**\n   * @internal\n   */\n  _destroy() {\n    this._material._destroy();\n    this._nativeShape.destroy();\n  }\n\n  private _setPosition(): void {\n    this._nativeShape.setPosition(this._position);\n  }\n\n  private _setRotation(): void {\n    this._nativeShape.setRotation(this._rotation);\n  }\n}\n","import { ColliderShape } from \"./ColliderShape\";\nimport { IBoxColliderShape } from \"@galacean/engine-design\";\nimport { Vector3 } from \"@galacean/engine-math\";\nimport { PhysicsScene } from \"../PhysicsScene\";\nimport { ignoreClone } from \"../../clone/CloneManager\";\n\n/**\n * Physical collider shape for box.\n */\nexport class BoxColliderShape extends ColliderShape {\n  @ignoreClone\n  private _size: Vector3 = new Vector3(1, 1, 1);\n\n  /**\n   * Size of box shape.\n   */\n  get size(): Vector3 {\n    return this._size;\n  }\n\n  set size(value: Vector3) {\n    if (this._size !== value) {\n      this._size.copyFrom(value);\n    }\n  }\n\n  constructor() {\n    super();\n    this._nativeShape = PhysicsScene._nativePhysics.createBoxColliderShape(\n      this._id,\n      this._size,\n      this._material._nativeMaterial\n    );\n\n    this._setSize = this._setSize.bind(this);\n    //@ts-ignore\n    this._size._onValueChanged = this._setSize;\n  }\n\n  /**\n   * @internal\n   */\n  override _cloneTo(target: BoxColliderShape) {\n    super._cloneTo(target);\n    target.size = this.size;\n  }\n\n  private _setSize(): void {\n    (<IBoxColliderShape>this._nativeShape).setSize(this._size);\n  }\n}\n","import { ColliderShape } from \"./ColliderShape\";\nimport { ISphereColliderShape } from \"@galacean/engine-design\";\nimport { PhysicsScene } from \"../PhysicsScene\";\nimport { ignoreClone } from \"../../clone/CloneManager\";\n\n/**\n * Physical collider shape for sphere.\n */\nexport class SphereColliderShape extends ColliderShape {\n  @ignoreClone\n  private _radius: number = 1;\n\n  /**\n   * Radius of sphere shape.\n   */\n  get radius(): number {\n    return this._radius;\n  }\n\n  set radius(value: number) {\n    if (this._radius !== value) {\n      this._radius = value;\n      (<ISphereColliderShape>this._nativeShape).setRadius(value);\n    }\n  }\n\n  constructor() {\n    super();\n    this._nativeShape = PhysicsScene._nativePhysics.createSphereColliderShape(\n      this._id,\n      this._radius,\n      this._material._nativeMaterial\n    );\n  }\n\n  override _cloneTo(target: SphereColliderShape) {\n    super._cloneTo(target);\n    target.radius = this.radius;\n  }\n}\n","import { PhysicsScene } from \"../PhysicsScene\";\nimport { ColliderShape } from \"./ColliderShape\";\n\n/**\n * Physical collider shape plane.\n */\nexport class PlaneColliderShape extends ColliderShape {\n  constructor() {\n    super();\n    this._nativeShape = PhysicsScene._nativePhysics.createPlaneColliderShape(this._id, this._material._nativeMaterial);\n  }\n}\n","import { ColliderShape } from \"./ColliderShape\";\nimport { ICapsuleColliderShape } from \"@galacean/engine-design\";\nimport { PhysicsScene } from \"../PhysicsScene\";\nimport { ColliderShapeUpAxis } from \"../enums/ColliderShapeUpAxis\";\nimport { ignoreClone } from \"../../clone/CloneManager\";\n\n/**\n * Physical collider shape for capsule.\n */\nexport class CapsuleColliderShape extends ColliderShape {\n  @ignoreClone\n  private _radius: number = 1;\n  @ignoreClone\n  private _height: number = 2;\n  @ignoreClone\n  private _upAxis: ColliderShapeUpAxis = ColliderShapeUpAxis.Y;\n\n  /**\n   * Radius of capsule.\n   */\n  get radius(): number {\n    return this._radius;\n  }\n\n  set radius(value: number) {\n    if (this._radius !== value) {\n      this._radius = value;\n      (<ICapsuleColliderShape>this._nativeShape).setRadius(value);\n    }\n  }\n\n  /**\n   * Height of capsule.\n   */\n  get height(): number {\n    return this._height;\n  }\n\n  set height(value: number) {\n    if (this._height !== value) {\n      this._height = value;\n      (<ICapsuleColliderShape>this._nativeShape).setHeight(value);\n    }\n  }\n\n  /**\n   * Up axis of capsule.\n   */\n  get upAxis(): ColliderShapeUpAxis {\n    return this._upAxis;\n  }\n\n  set upAxis(value: ColliderShapeUpAxis) {\n    if (this._upAxis !== value) {\n      this._upAxis = value;\n      (<ICapsuleColliderShape>this._nativeShape).setUpAxis(value);\n    }\n  }\n\n  constructor() {\n    super();\n    this._nativeShape = PhysicsScene._nativePhysics.createCapsuleColliderShape(\n      this._id,\n      this._radius,\n      this._height,\n      this._material._nativeMaterial\n    );\n  }\n\n  /**\n   * @internal\n   */\n  override _cloneTo(target: CapsuleColliderShape) {\n    super._cloneTo(target);\n    target.radius = this.radius;\n    target.height = this.height;\n    target.upAxis = this.upAxis;\n  }\n}\n","import { Ray, Vector2 } from \"@galacean/engine-math\";\nimport { Canvas } from \"../../Canvas\";\nimport { Engine } from \"../../Engine\";\nimport { Entity } from \"../../Entity\";\nimport { Scene } from \"../../Scene\";\nimport { CameraClearFlags } from \"../../enums/CameraClearFlags\";\nimport { HitResult } from \"../../physics\";\nimport { PointerButton, _pointerDec2BinMap } from \"../enums/PointerButton\";\nimport { PointerPhase } from \"../enums/PointerPhase\";\nimport { IInput } from \"../interface/IInput\";\nimport { Pointer } from \"./Pointer\";\nimport { DisorderedArray } from \"../../utils/DisorderedArray\";\n\n/**\n * Pointer Manager.\n * @internal\n */\nexport class PointerManager implements IInput {\n  private static _tempRay: Ray = new Ray();\n  private static _tempPoint: Vector2 = new Vector2();\n  private static _tempHitResult: HitResult = new HitResult();\n  /** @internal */\n  _pointers: Pointer[] = [];\n  /** @internal */\n  _multiPointerEnabled: boolean = true;\n  /** @internal */\n  _buttons: PointerButton = PointerButton.None;\n  /** @internal */\n  _upMap: number[] = [];\n  /** @internal */\n  _downMap: number[] = [];\n  /** @internal */\n  _upList: DisorderedArray<PointerButton> = new DisorderedArray();\n  /** @internal */\n  _downList: DisorderedArray<PointerButton> = new DisorderedArray();\n\n  // @internal\n  _target: EventTarget;\n  private _engine: Engine;\n  private _canvas: Canvas;\n  private _nativeEvents: PointerEvent[] = [];\n  private _pointerPool: Pointer[];\n  private _htmlCanvas: HTMLCanvasElement;\n\n  /**\n   * @internal\n   */\n  constructor(engine: Engine, target: EventTarget) {\n    // Temporary solution for mini program, window does not exist\n    if (typeof Window !== \"undefined\" && target instanceof Window) {\n      throw \"Do not set window as target because window cannot listen to pointer leave event.\";\n    }\n    this._engine = engine;\n    this._target = target;\n    this._canvas = engine.canvas;\n    // @ts-ignore\n    this._htmlCanvas = engine._canvas._webCanvas;\n    // If there are no compatibility issues, navigator.maxTouchPoints should be used here\n    this._pointerPool = new Array<Pointer>(11);\n    this._onPointerEvent = this._onPointerEvent.bind(this);\n    this._addEventListener();\n  }\n\n  /**\n   * @internal\n   */\n  _update(): void {\n    const { _pointers: pointers, _nativeEvents: nativeEvents, _htmlCanvas: htmlCanvas } = this;\n    const { width, height } = this._canvas;\n    const { clientWidth, clientHeight } = htmlCanvas;\n    const { left, top } = htmlCanvas.getBoundingClientRect();\n    const widthDPR = width / clientWidth;\n    const heightDPR = height / clientHeight;\n\n    // Clean up the pointer released in the previous frame\n    for (let i = pointers.length - 1; i >= 0; i--) {\n      if (pointers[i].phase === PointerPhase.Leave) {\n        pointers.splice(i, 1);\n      }\n    }\n\n    // Generate the pointer received for this frame\n    for (let i = 0, n = nativeEvents.length; i < n; i++) {\n      const evt = nativeEvents[i];\n      const { pointerId } = evt;\n      let pointer = this._getPointerByID(pointerId);\n      if (pointer) {\n        pointer._events.push(evt);\n      } else {\n        const lastCount = pointers.length;\n        if (lastCount === 0 || this._multiPointerEnabled) {\n          const { _pointerPool: pointerPool } = this;\n          // Get Pointer smallest index\n          let i = 0;\n          for (; i < lastCount; i++) {\n            if (pointers[i].id > i) {\n              break;\n            }\n          }\n          pointer = pointerPool[i] ||= new Pointer(i);\n          pointer._uniqueID = pointerId;\n          pointer._events.push(evt);\n          pointer.position.set((evt.clientX - left) * widthDPR, (evt.clientY - top) * heightDPR);\n          pointers.splice(i, 0, pointer);\n        }\n      }\n    }\n    nativeEvents.length = 0;\n\n    // Pointer handles its own events\n    this._upList.length = this._downList.length = 0;\n    this._buttons = PointerButton.None;\n    const frameCount = this._engine.time.frameCount;\n    for (let i = 0, n = pointers.length; i < n; i++) {\n      const pointer = pointers[i];\n      pointer._upList.length = pointer._downList.length = 0;\n      this._updatePointerInfo(frameCount, pointer, left, top, widthDPR, heightDPR);\n      this._buttons |= pointer.pressedButtons;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _firePointerScript(scenes: readonly Scene[]) {\n    const { _pointers: pointers, _canvas: canvas } = this;\n    for (let i = 0, n = pointers.length; i < n; i++) {\n      const pointer = pointers[i];\n      const { _events: events, position } = pointer;\n      pointer._firePointerDrag();\n      const rayCastEntity = this._pointerRayCast(scenes, position.x / canvas.width, position.y / canvas.height);\n      pointer._firePointerExitAndEnter(rayCastEntity);\n      const length = events.length;\n      if (length > 0) {\n        for (let i = 0; i < length; i++) {\n          const event = events[i];\n          switch (event.type) {\n            case \"pointerdown\":\n              pointer.phase = PointerPhase.Down;\n              pointer._firePointerDown(rayCastEntity);\n              break;\n            case \"pointerup\":\n              pointer.phase = PointerPhase.Up;\n              pointer._firePointerUpAndClick(rayCastEntity);\n              break;\n            case \"pointerleave\":\n            case \"pointercancel\":\n              pointer.phase = PointerPhase.Leave;\n              pointer._firePointerExitAndEnter(null);\n              break;\n          }\n        }\n        events.length = 0;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _destroy(): void {\n    this._removeEventListener();\n    this._pointerPool.length = 0;\n    this._nativeEvents.length = 0;\n    this._downMap.length = 0;\n    this._upMap.length = 0;\n  }\n\n  private _onPointerEvent(evt: PointerEvent) {\n    this._nativeEvents.push(evt);\n  }\n\n  private _getPointerByID(pointerId: number): Pointer {\n    const { _pointers: pointers } = this;\n    for (let i = pointers.length - 1; i >= 0; i--) {\n      if (pointers[i]._uniqueID === pointerId) {\n        return pointers[i];\n      }\n    }\n    return null;\n  }\n\n  private _updatePointerInfo(\n    frameCount: number,\n    pointer: Pointer,\n    left: number,\n    top: number,\n    widthPixelRatio: number,\n    heightPixelRatio: number\n  ) {\n    const { _events: events, position } = pointer;\n    const length = events.length;\n    if (length > 0) {\n      const { _upList, _upMap, _downList, _downMap } = this;\n      const latestEvent = events[length - 1];\n      const currX = (latestEvent.clientX - left) * widthPixelRatio;\n      const currY = (latestEvent.clientY - top) * heightPixelRatio;\n      pointer.deltaPosition.set(currX - position.x, currY - position.y);\n      position.set(currX, currY);\n      for (let i = 0; i < length; i++) {\n        const event = events[i];\n        const { button } = event;\n        pointer.button = _pointerDec2BinMap[button] || PointerButton.None;\n        pointer.pressedButtons = event.buttons;\n        switch (event.type) {\n          case \"pointerdown\":\n            _downList.add(button);\n            _downMap[button] = frameCount;\n            pointer._downList.add(button);\n            pointer._downMap[button] = frameCount;\n            pointer.phase = PointerPhase.Down;\n            break;\n          case \"pointerup\":\n            _upList.add(button);\n            _upMap[button] = frameCount;\n            pointer._upList.add(button);\n            pointer._upMap[button] = frameCount;\n            pointer.phase = PointerPhase.Up;\n            break;\n          case \"pointermove\":\n            pointer.phase = PointerPhase.Move;\n            break;\n          case \"pointerleave\":\n          case \"pointercancel\":\n            pointer.phase = PointerPhase.Leave;\n          default:\n            break;\n        }\n      }\n      this._engine._physicsInitialized || (events.length = 0);\n    } else {\n      pointer.deltaPosition.set(0, 0);\n      pointer.phase = PointerPhase.Stationary;\n    }\n  }\n\n  private _pointerRayCast(scenes: readonly Scene[], normalizedX: number, normalizedY: number): Entity {\n    const { _tempPoint: point, _tempRay: ray, _tempHitResult: hitResult } = PointerManager;\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const scene = scenes[i];\n      if (!scene.isActive || scene.destroyed) {\n        continue;\n      }\n      const { _activeCameras: cameras } = scene._componentsManager;\n      const elements = cameras._elements;\n\n      for (let j = cameras.length - 1; j >= 0; j--) {\n        const camera = elements[j];\n        if (camera.renderTarget) {\n          continue;\n        }\n        const { x: vpX, y: vpY, z: vpW, w: vpH } = camera.viewport;\n        if (normalizedX >= vpX && normalizedY >= vpY && normalizedX - vpX <= vpW && normalizedY - vpY <= vpH) {\n          point.set((normalizedX - vpX) / vpW, (normalizedY - vpY) / vpH);\n          if (\n            scene.physics.raycast(\n              camera.viewportPointToRay(point, ray),\n              Number.MAX_VALUE,\n              camera.cullingMask,\n              hitResult\n            )\n          ) {\n            return hitResult.entity;\n          } else if (camera.clearFlags & CameraClearFlags.Color) {\n            return null;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n  private _addEventListener(): void {\n    const { _target: target, _onPointerEvent: onPointerEvent } = this;\n    target.addEventListener(\"pointerdown\", onPointerEvent);\n    target.addEventListener(\"pointerup\", onPointerEvent);\n    target.addEventListener(\"pointerleave\", onPointerEvent);\n    target.addEventListener(\"pointermove\", onPointerEvent);\n    target.addEventListener(\"pointercancel\", onPointerEvent);\n  }\n\n  private _removeEventListener(): void {\n    const { _target: target, _onPointerEvent: onPointerEvent } = this;\n    target.removeEventListener(\"pointerdown\", onPointerEvent);\n    target.removeEventListener(\"pointerup\", onPointerEvent);\n    target.removeEventListener(\"pointerleave\", onPointerEvent);\n    target.removeEventListener(\"pointermove\", onPointerEvent);\n    target.removeEventListener(\"pointercancel\", onPointerEvent);\n    this._nativeEvents.length = 0;\n    this._pointers.length = 0;\n    this._downList.length = 0;\n    this._upList.length = 0;\n  }\n}\n","import { Vector3 } from \"@galacean/engine-math\";\nimport { Engine } from \"../../Engine\";\nimport { IInput } from \"../interface/IInput\";\n\n/**\n * Wheel Manager.\n * @internal\n */\nexport class WheelManager implements IInput {\n  /** @internal */\n  _delta: Vector3 = new Vector3();\n\n  // @internal\n  _target: EventTarget;\n  private _nativeEvents: WheelEvent[] = [];\n\n  /**\n   * @internal\n   */\n  constructor(engine: Engine, target: EventTarget) {\n    this._onWheelEvent = this._onWheelEvent.bind(this);\n    this._target = target;\n    this._addEventListener();\n  }\n\n  /**\n   * @internal\n   */\n  _update(): void {\n    const { _delta: delta } = this;\n    delta.set(0, 0, 0);\n    const { _nativeEvents: nativeEvents } = this;\n    if (nativeEvents.length > 0) {\n      for (let i = nativeEvents.length - 1; i >= 0; i--) {\n        const evt = nativeEvents[i];\n        delta.x += evt.deltaX;\n        delta.y += evt.deltaY;\n        delta.z += evt.deltaZ;\n      }\n      nativeEvents.length = 0;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _addEventListener(): void {\n    this._target.addEventListener(\"wheel\", this._onWheelEvent);\n  }\n\n  /**\n   * @internal\n   */\n  _removeEventListener(): void {\n    this._target.removeEventListener(\"wheel\", this._onWheelEvent);\n    this._nativeEvents.length = 0;\n    this._delta.set(0, 0, 0);\n  }\n\n  /**\n   * @internal\n   */\n  _destroy(): void {\n    this._removeEventListener();\n    this._nativeEvents = null;\n    this._delta = null;\n  }\n\n  private _onWheelEvent(evt: WheelEvent): void {\n    this._nativeEvents.push(evt);\n  }\n}\n","import { IInputOptions } from \"@galacean/engine-design\";\nimport { Vector3 } from \"@galacean/engine-math\";\nimport { Engine } from \"../Engine\";\nimport { Scene } from \"../Scene\";\nimport { Keys } from \"./enums/Keys\";\nimport { PointerButton, _pointerBin2DecMap } from \"./enums/PointerButton\";\nimport { KeyboardManager } from \"./keyboard/KeyboardManager\";\nimport { Pointer } from \"./pointer/Pointer\";\nimport { PointerManager } from \"./pointer/PointerManager\";\nimport { WheelManager } from \"./wheel/WheelManager\";\n\n/**\n * InputManager manages device input such as mouse, touch, keyboard, etc.\n */\nexport class InputManager {\n  private _engine: Engine;\n  /** Sometimes the input module will not be initialized, such as off-screen rendering. */\n  private _initialized: boolean = false;\n  private _wheelManager: WheelManager;\n  private _pointerManager: PointerManager;\n  private _keyboardManager: KeyboardManager;\n\n  /**\n   * Pointer list.\n   */\n  get pointers(): Readonly<Pointer[]> {\n    return this._initialized ? this._pointerManager._pointers : [];\n  }\n\n  /**\n   *  Whether to handle multi-pointer.\n   */\n  get multiPointerEnabled(): boolean {\n    return this._initialized ? this._pointerManager._multiPointerEnabled : false;\n  }\n\n  set multiPointerEnabled(enabled: boolean) {\n    this._initialized && (this._pointerManager._multiPointerEnabled = enabled);\n  }\n\n  /**\n   * Get the change of the scroll wheel on the x-axis.\n   * @returns Change value\n   */\n  get wheelDelta(): Readonly<Vector3 | null> {\n    return this._initialized ? this._wheelManager._delta : null;\n  }\n\n  /**\n   * Whether the key is being held down, if there is no parameter, return whether any key is being held down.\n   * @param key - The keys of the keyboard\n   * @returns Whether the key is being held down\n   */\n  isKeyHeldDown(key?: Keys): boolean {\n    if (this._initialized) {\n      if (key === undefined) {\n        return this._keyboardManager._curFrameHeldDownList.length > 0;\n      } else {\n        return this._keyboardManager._curHeldDownKeyToIndexMap[key] != null;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether the key starts to be pressed down during the current frame, if there is no parameter, return whether any key starts to be pressed down during the current frame.\n   * @param key - The keys of the keyboard\n   * @returns Whether the key starts to be pressed down during the current frame\n   */\n  isKeyDown(key?: Keys): boolean {\n    if (this._initialized) {\n      if (key === undefined) {\n        return this._keyboardManager._curFrameDownList.length > 0;\n      } else {\n        return this._keyboardManager._downKeyToFrameCountMap[key] === this._engine.time.frameCount;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether the key is released during the current frame, if there is no parameter, return whether any key released during the current frame.\n   * @param key - The keys of the keyboard\n   * @returns Whether the key is released during the current frame\n   */\n  isKeyUp(key?: Keys): boolean {\n    if (this._initialized) {\n      if (key === undefined) {\n        return this._keyboardManager._curFrameUpList.length > 0;\n      } else {\n        return this._keyboardManager._upKeyToFrameCountMap[key] === this._engine.time.frameCount;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether the pointer is being held down, if there is no parameter, return whether any pointer is being held down.\n   * @param pointerButton - The pointerButton on a pointer device\n   * @returns Whether the pointer is being held down\n   */\n  isPointerHeldDown(pointerButton?: PointerButton): boolean {\n    if (this._initialized) {\n      if (pointerButton === undefined) {\n        return this._pointerManager._buttons !== 0;\n      } else {\n        return (this._pointerManager._buttons & pointerButton) !== 0;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether the pointer starts to be pressed down during the current frame, if there is no parameter, return whether any pointer starts to be pressed down during the current frame.\n   * @param pointerButton - The pointerButton on a pointer device\n   * @returns Whether the pointer starts to be pressed down during the current frame\n   */\n  isPointerDown(pointerButton?: PointerButton): boolean {\n    if (this._initialized) {\n      if (pointerButton === undefined) {\n        return this._pointerManager._downList.length > 0;\n      } else {\n        return this._pointerManager._downMap[_pointerBin2DecMap[pointerButton]] === this._engine.time.frameCount;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether the pointer is released during the current frame, if there is no parameter, return whether any pointer released during the current frame.\n   * @param pointerButton - The pointerButtons on a mouse device\n   * @returns Whether the pointer is released during the current frame\n   */\n  isPointerUp(pointerButton?: PointerButton): boolean {\n    if (this._initialized) {\n      if (pointerButton === undefined) {\n        return this._pointerManager._upList.length > 0;\n      } else {\n        return this._pointerManager._upMap[_pointerBin2DecMap[pointerButton]] === this._engine.time.frameCount;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  constructor(engine: Engine, inputOptions?: IInputOptions) {\n    this._engine = engine;\n    // @ts-ignore\n    const canvas = engine._canvas._webCanvas;\n    if (typeof OffscreenCanvas === \"undefined\" || !(canvas instanceof OffscreenCanvas)) {\n      this._wheelManager = new WheelManager(engine, inputOptions?.wheelTarget ?? canvas);\n      this._pointerManager = new PointerManager(engine, inputOptions?.pointerTarget ?? canvas);\n      this._keyboardManager = new KeyboardManager(engine, inputOptions?.keyboardTarget ?? window);\n      this._initialized = true;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _update(): void {\n    if (this._initialized) {\n      this._wheelManager._update();\n      this._pointerManager._update();\n      this._keyboardManager._update();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _firePointerScript(scenes: readonly Scene[]): void {\n    this._initialized && this._pointerManager._firePointerScript(scenes);\n  }\n\n  /**\n   * @internal\n   */\n  _destroy(): void {\n    if (this._initialized) {\n      this._wheelManager._destroy();\n      this._wheelManager = null;\n      this._pointerManager._destroy();\n      this._pointerManager = null;\n      this._keyboardManager._destroy();\n      this._keyboardManager = null;\n    }\n  }\n}\n","/**\n * @internal\n */\nexport enum ParticleBillboardVertexAttribute {\n  cornerTextureCoordinate = \"a_CornerTextureCoordinate\"\n}\n","/**\n * @internal\n */\nexport enum ParticleInstanceVertexAttribute {\n  ShapePositionStartLifeTime = \"a_ShapePositionStartLifeTime\",\n  DirectionTime = \"a_DirectionTime\",\n  StartColor = \"a_StartColor\",\n  StartSize = \"a_StartSize\",\n  StartRotation0 = \"a_StartRotation0\",\n  StartSpeed = \"a_StartSpeed\",\n  Random0 = \"a_Random0\",\n  Random1 = \"a_Random1\",\n  SimulationWorldPosition = \"a_SimulationWorldPosition\",\n  SimulationWorldRotation = \"a_SimulationWorldRotation\",\n  SimulationUV = \"a_SimulationUV\"\n}\n","import { Engine } from \"../Engine\";\nimport { ContentRestorer } from \"../asset/ContentRestorer\";\nimport { Buffer } from \"../graphic/Buffer\";\nimport { IndexBufferBinding } from \"../graphic/IndexBufferBinding\";\nimport { VertexBufferBinding } from \"../graphic/VertexBufferBinding\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { BufferBindFlag } from \"../graphic/enums/BufferBindFlag\";\nimport { BufferUsage } from \"../graphic/enums/BufferUsage\";\nimport { IndexFormat } from \"../graphic/enums/IndexFormat\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { ParticleBillboardVertexAttribute } from \"./enums/attributes/BillboardParticleVertexAttribute\";\nimport { ParticleInstanceVertexAttribute } from \"./enums/attributes/ParticleInstanceVertexAttribute\";\n\n/**\n * @internal\n */\nexport class ParticleBufferUtils {\n  static readonly instanceVertexStride = 152;\n  static readonly instanceVertexFloatStride = ParticleBufferUtils.instanceVertexStride / 4;\n\n  static readonly startLifeTimeOffset = 3;\n  static readonly timeOffset = 7;\n  static readonly simulationUVOffset = 34;\n\n  static readonly billboardIndexCount = 6;\n\n  static readonly boundsFloatStride = 8;\n  static readonly boundsTimeOffset = 6;\n  static readonly boundsMaxLifetimeOffset = 7;\n\n  readonly billboardVertexElement = new VertexElement(\n    ParticleBillboardVertexAttribute.cornerTextureCoordinate,\n    0,\n    VertexElementFormat.Vector4,\n    0\n  );\n\n  readonly instanceVertexElements = [\n    new VertexElement(ParticleInstanceVertexAttribute.ShapePositionStartLifeTime, 0, VertexElementFormat.Vector4, 1, 1),\n    new VertexElement(ParticleInstanceVertexAttribute.DirectionTime, 16, VertexElementFormat.Vector4, 1, 1),\n    new VertexElement(ParticleInstanceVertexAttribute.StartColor, 32, VertexElementFormat.Vector4, 1, 1),\n    new VertexElement(ParticleInstanceVertexAttribute.StartSize, 48, VertexElementFormat.Vector3, 1, 1),\n    new VertexElement(ParticleInstanceVertexAttribute.StartRotation0, 60, VertexElementFormat.Vector3, 1, 1),\n    new VertexElement(ParticleInstanceVertexAttribute.StartSpeed, 72, VertexElementFormat.Float, 1, 1),\n    new VertexElement(ParticleInstanceVertexAttribute.Random0, 76, VertexElementFormat.Vector4, 1, 1),\n    new VertexElement(ParticleInstanceVertexAttribute.Random1, 92, VertexElementFormat.Vector4, 1, 1),\n    new VertexElement(ParticleInstanceVertexAttribute.SimulationWorldPosition, 108, VertexElementFormat.Vector3, 1, 1), //TODO:local模式下可省去内存\n    new VertexElement(ParticleInstanceVertexAttribute.SimulationWorldRotation, 120, VertexElementFormat.Vector4, 1, 1),\n    new VertexElement(ParticleInstanceVertexAttribute.SimulationUV, 136, VertexElementFormat.Vector4, 1, 1)\n  ];\n\n  readonly billboardVertexBufferBinding: VertexBufferBinding;\n  readonly billboardIndexBufferBinding: IndexBufferBinding;\n\n  constructor(engine: Engine) {\n    const stride = 16;\n    const billboardGeometryBuffer = new Buffer(\n      engine,\n      BufferBindFlag.VertexBuffer,\n      stride * 4,\n      BufferUsage.Static,\n      false\n    );\n    billboardGeometryBuffer.isGCIgnored = true;\n    this.billboardVertexBufferBinding = new VertexBufferBinding(billboardGeometryBuffer, stride);\n\n    const indexBuffer = new Buffer(\n      engine,\n      BufferBindFlag.IndexBuffer,\n      ParticleBufferUtils.billboardIndexCount,\n      BufferUsage.Static,\n      false\n    );\n    indexBuffer.isGCIgnored = true;\n    this.billboardIndexBufferBinding = new IndexBufferBinding(indexBuffer, IndexFormat.UInt8);\n\n    const billboardGeometryData = new Float32Array([\n      -0.5, -0.5, 0, 1, 0.5, -0.5, 1, 1, 0.5, 0.5, 1, 0, -0.5, 0.5, 0, 0\n    ]);\n    const indexData = new Uint8Array([0, 2, 3, 0, 1, 2]);\n\n    billboardGeometryBuffer.setData(billboardGeometryData);\n    indexBuffer.setData(indexData);\n\n    // Register content restorer\n    engine.resourceManager.addContentRestorer(\n      new (class extends ContentRestorer<Buffer> {\n        constructor() {\n          super(billboardGeometryBuffer);\n        }\n        restoreContent() {\n          billboardGeometryBuffer.setData(billboardGeometryData);\n        }\n      })()\n    );\n\n    engine.resourceManager.addContentRestorer(\n      new (class extends ContentRestorer<Buffer> {\n        constructor() {\n          super(indexBuffer);\n        }\n        restoreContent() {\n          indexData;\n        }\n      })()\n    );\n  }\n}\n","import { PipelineStage } from \"../RenderPipeline/enums/PipelineStage\";\nimport { BaseMaterial } from \"../material/BaseMaterial\";\nimport blitFs from \"../shaderlib/extra/Blit.fs.glsl\";\nimport blitVs from \"../shaderlib/extra/Blit.vs.glsl\";\nimport skyProceduralFs from \"../shaderlib/extra/SkyProcedural.fs.glsl\";\nimport skyProceduralVs from \"../shaderlib/extra/SkyProcedural.vs.glsl\";\nimport backgroundTextureFs from \"../shaderlib/extra/background-texture.fs.glsl\";\nimport backgroundTextureVs from \"../shaderlib/extra/background-texture.vs.glsl\";\nimport blinnPhongFs from \"../shaderlib/extra/blinn-phong.fs.glsl\";\nimport blinnPhongVs from \"../shaderlib/extra/blinn-phong.vs.glsl\";\nimport depthOnlyFs from \"../shaderlib/extra/depthOnly.fs.glsl\";\nimport depthOnlyVs from \"../shaderlib/extra/depthOnly.vs.glsl\";\nimport particleFs from \"../shaderlib/extra/particle.fs.glsl\";\nimport particleVs from \"../shaderlib/extra/particle.vs.glsl\";\nimport pbrSpecularFs from \"../shaderlib/extra/pbr-specular.fs.glsl\";\nimport pbrFs from \"../shaderlib/extra/pbr.fs.glsl\";\nimport pbrVs from \"../shaderlib/extra/pbr.vs.glsl\";\nimport shadowMapFs from \"../shaderlib/extra/shadow-map.fs.glsl\";\nimport shadowMapVs from \"../shaderlib/extra/shadow-map.vs.glsl\";\nimport skyboxFs from \"../shaderlib/extra/skybox.fs.glsl\";\nimport skyboxVs from \"../shaderlib/extra/skybox.vs.glsl\";\nimport spriteMaskFs from \"../shaderlib/extra/sprite-mask.fs.glsl\";\nimport spriteMaskVs from \"../shaderlib/extra/sprite-mask.vs.glsl\";\nimport spriteFs from \"../shaderlib/extra/sprite.fs.glsl\";\nimport spriteVs from \"../shaderlib/extra/sprite.vs.glsl\";\nimport textFs from \"../shaderlib/extra/text.fs.glsl\";\nimport textVs from \"../shaderlib/extra/text.vs.glsl\";\nimport unlitFs from \"../shaderlib/extra/unlit.fs.glsl\";\nimport unlitVs from \"../shaderlib/extra/unlit.vs.glsl\";\nimport { Shader } from \"./Shader\";\nimport { ShaderPass } from \"./ShaderPass\";\nimport { RenderStateElementKey } from \"./enums/RenderStateElementKey\";\nimport { RenderState } from \"./state\";\n\n/**\n * Internal shader pool.\n * @internal\n */\nexport class ShaderPool {\n  static init(): void {\n    const shadowCasterPass = new ShaderPass(\"ShadowCaster\", shadowMapVs, shadowMapFs, {\n      pipelineStage: PipelineStage.ShadowCaster\n    });\n    shadowCasterPass._renderState = new RenderState();\n    shadowCasterPass._renderStateDataMap[RenderStateElementKey.RenderQueueType] =\n      BaseMaterial._shadowCasterRenderQueueProp;\n\n    const depthOnlyPass = new ShaderPass(\"DepthOnly\", depthOnlyVs, depthOnlyFs, {\n      pipelineStage: PipelineStage.DepthOnly\n    });\n    const basePasses = [shadowCasterPass, depthOnlyPass];\n\n    const forwardPassTags = {\n      pipelineStage: PipelineStage.Forward\n    };\n\n    Shader.create(\"blinn-phong\", [\n      new ShaderPass(\"Forward\", blinnPhongVs, blinnPhongFs, forwardPassTags),\n      ...basePasses\n    ]);\n    Shader.create(\"pbr\", [new ShaderPass(\"Forward\", pbrVs, pbrFs, forwardPassTags), ...basePasses]);\n    Shader.create(\"pbr-specular\", [new ShaderPass(\"Forward\", pbrVs, pbrSpecularFs, forwardPassTags), ...basePasses]);\n    Shader.create(\"unlit\", [new ShaderPass(\"Forward\", unlitVs, unlitFs, forwardPassTags), ...basePasses]);\n\n    Shader.create(\"blit\", [new ShaderPass(\"Forward\", blitVs, blitFs, forwardPassTags)]);\n    Shader.create(\"skybox\", [new ShaderPass(\"Forward\", skyboxVs, skyboxFs, forwardPassTags)]);\n    Shader.create(\"SkyProcedural\", [new ShaderPass(\"Forward\", skyProceduralVs, skyProceduralFs, forwardPassTags)]);\n\n    Shader.create(\"particle-shader\", [new ShaderPass(\"Forward\", particleVs, particleFs, forwardPassTags)]);\n    Shader.create(\"SpriteMask\", [new ShaderPass(\"Forward\", spriteMaskVs, spriteMaskFs, forwardPassTags)]);\n    Shader.create(\"Sprite\", [new ShaderPass(\"Forward\", spriteVs, spriteFs, forwardPassTags)]);\n    Shader.create(\"Text\", [new ShaderPass(\"Forward\", textVs, textFs, forwardPassTags)]);\n    Shader.create(\"background-texture\", [\n      new ShaderPass(\"Forward\", backgroundTextureVs, backgroundTextureFs, forwardPassTags)\n    ]);\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { ShaderMacroCollection } from \"./ShaderMacroCollection\";\nimport { ShaderProgram } from \"./ShaderProgram\";\n\n/**\n * Shader program pool.\n * @internal\n */\nexport class ShaderProgramPool {\n  private _cacheHierarchyDepth: number = 1;\n  private _cacheMap: Tree<ShaderProgram> = Object.create(null);\n  private _lastQueryMap: Record<number, ShaderProgram>;\n  private _lastQueryKey: number;\n\n  constructor(public engine: Engine) {}\n\n  /**\n   * Get shader program by macro collection.\n   * @param macros - macro collection\n   * @returns shader program\n   */\n  get(macros: ShaderMacroCollection): ShaderProgram | null {\n    let cacheMap = this._cacheMap;\n    const maskLength = macros._length;\n    const cacheHierarchyDepth = this._cacheHierarchyDepth;\n    if (maskLength > cacheHierarchyDepth) {\n      this._resizeCacheMapHierarchy(cacheMap, 0, cacheHierarchyDepth, maskLength - cacheHierarchyDepth);\n      this._cacheHierarchyDepth = maskLength;\n    }\n\n    const mask = macros._mask;\n    const endIndex = macros._length - 1;\n    const maxEndIndex = this._cacheHierarchyDepth - 1;\n    for (let i = 0; i < maxEndIndex; i++) {\n      const subMask = endIndex < i ? 0 : mask[i];\n      let subCacheShaders = <Tree<ShaderProgram>>cacheMap[subMask];\n      subCacheShaders || (cacheMap[subMask] = subCacheShaders = Object.create(null));\n      cacheMap = subCacheShaders;\n    }\n\n    const cacheKey = endIndex < maxEndIndex ? 0 : mask[maxEndIndex];\n    const shader = (<Record<number, ShaderProgram>>cacheMap)[cacheKey];\n    if (!shader) {\n      this._lastQueryKey = cacheKey;\n      this._lastQueryMap = <Record<number, ShaderProgram>>cacheMap;\n    }\n    return shader;\n  }\n\n  /**\n   * Cache the shader program.\n   *\n   * @remarks\n   * The method must return an empty value after calling get() to run normally.\n   *\n   * @param shaderProgram - shader program\n   */\n  cache(shaderProgram: ShaderProgram): void {\n    this._lastQueryMap[this._lastQueryKey] = shaderProgram;\n  }\n\n  /**\n   * @internal\n   */\n  _destroy(): void {\n    this._recursiveDestroy(0, this._cacheMap);\n    this._cacheMap = Object.create(null);\n  }\n\n  private _recursiveDestroy(hierarchy: number, cacheMap: Tree<ShaderProgram>): void {\n    if (hierarchy === this._cacheHierarchyDepth - 1) {\n      for (let k in cacheMap) {\n        (<ShaderProgram>cacheMap[k]).destroy();\n      }\n      return;\n    }\n    ++hierarchy;\n    for (let k in cacheMap) {\n      this._recursiveDestroy(hierarchy, <Tree<ShaderProgram>>cacheMap[k]);\n    }\n  }\n\n  private _resizeCacheMapHierarchy(\n    cacheMap: Tree<ShaderProgram>,\n    hierarchy: number,\n    currentHierarchy: number,\n    increaseHierarchy: number\n  ): void {\n    // Only expand but not shrink\n    if (hierarchy == currentHierarchy - 1) {\n      for (let k in cacheMap) {\n        const shader = <ShaderProgram>cacheMap[k];\n        let subCacheMap = cacheMap;\n        for (let i = 0; i < increaseHierarchy; i++) {\n          subCacheMap[i == 0 ? k : 0] = subCacheMap = Object.create(null);\n        }\n        subCacheMap[0] = shader;\n      }\n    } else {\n      hierarchy++;\n      for (let k in cacheMap) {\n        this._resizeCacheMapHierarchy(<Tree<ShaderProgram>>cacheMap[k], hierarchy, currentHierarchy, increaseHierarchy);\n      }\n    }\n  }\n}\n\ntype Tree<T> = {\n  [key: number]: Tree<T> | T;\n};\n","import { IPoolElement, ObjectPool } from \"./ObjectPool\";\n\n/**\n * Clearable Object Pool.\n */\nexport class ClearableObjectPool<T extends IPoolElement> extends ObjectPool<T> {\n  private _usedElementCount: number = 0;\n\n  constructor(type: new () => T) {\n    super(type);\n    this._elements = [];\n  }\n\n  /**\n   * Get an object.\n   */\n  get(): T {\n    const { _usedElementCount: usedElementCount, _elements: elements } = this;\n    this._usedElementCount++;\n    if (elements.length === usedElementCount) {\n      const element = new this._type();\n      elements.push(element);\n      return element;\n    } else {\n      return elements[usedElementCount];\n    }\n  }\n\n  /**\n   * Clear used object count to 0, not destroy any object, just change index.\n   */\n  clear(): void {\n    this._usedElementCount = 0;\n  }\n}\n","import { IXRDevice } from \"@galacean/engine-design\";\nimport { Engine } from \"../Engine\";\nimport { CameraClearFlags } from \"../enums/CameraClearFlags\";\nimport { CameraType } from \"../enums/CameraType\";\n\n/**\n * XRManager located in the main package, its implementation logic is XRManagerExtended in the sub-package engine-xr.\n */\nexport class XRManager {\n  /**\n   * @internal\n   */\n  _initialize(engine: Engine, xrDevice: IXRDevice): void {}\n\n  /**\n   * @internal\n   */\n  _update(): void {}\n\n  /**\n   * @internal\n   */\n  _destroy(): void {}\n\n  /**\n   * @internal\n   */\n  _getRequestAnimationFrame(): (callback: FrameRequestCallback) => number {\n    return null;\n  }\n\n  /**\n   * @internal\n   */\n  _getCancelAnimationFrame(): (id: number) => void {\n    return null;\n  }\n  /**\n   * @internal\n   */\n  _getCameraIgnoreClearFlags(type: CameraType): CameraClearFlags {\n    return CameraClearFlags.None;\n  }\n}\n","import {\n  IHardwareRenderer,\n  IInputOptions,\n  IPhysics,\n  IPhysicsManager,\n  IShaderLab,\n  IXRDevice\n} from \"@galacean/engine-design\";\nimport { Color } from \"@galacean/engine-math\";\nimport { CharRenderInfo } from \"./2d/text/CharRenderInfo\";\nimport { Font } from \"./2d/text/Font\";\nimport { BasicResources } from \"./BasicResources\";\nimport { Camera } from \"./Camera\";\nimport { Canvas } from \"./Canvas\";\nimport { EngineSettings } from \"./EngineSettings\";\nimport { Entity } from \"./Entity\";\nimport { BatcherManager } from \"./RenderPipeline/BatcherManager\";\nimport { RenderContext } from \"./RenderPipeline/RenderContext\";\nimport { RenderElement } from \"./RenderPipeline/RenderElement\";\nimport { SubRenderElement } from \"./RenderPipeline/SubRenderElement\";\nimport { Scene } from \"./Scene\";\nimport { SceneManager } from \"./SceneManager\";\nimport { ResourceManager } from \"./asset/ResourceManager\";\nimport { EventDispatcher, Logger, Time } from \"./base\";\nimport { GLCapabilityType } from \"./base/Constant\";\nimport { ColorSpace } from \"./enums/ColorSpace\";\nimport { InputManager } from \"./input\";\nimport { Material } from \"./material/Material\";\nimport { ParticleBufferUtils } from \"./particle/ParticleBufferUtils\";\nimport { PhysicsScene } from \"./physics/PhysicsScene\";\nimport { ColliderShape } from \"./physics/shape/ColliderShape\";\nimport { Shader } from \"./shader/Shader\";\nimport { ShaderMacro } from \"./shader/ShaderMacro\";\nimport { ShaderMacroCollection } from \"./shader/ShaderMacroCollection\";\nimport { ShaderPass } from \"./shader/ShaderPass\";\nimport { ShaderPool } from \"./shader/ShaderPool\";\nimport { ShaderProgramPool } from \"./shader/ShaderProgramPool\";\nimport { RenderState } from \"./shader/state/RenderState\";\nimport { Texture2D, TextureFormat } from \"./texture\";\nimport { ClearableObjectPool } from \"./utils/ClearableObjectPool\";\nimport { ReturnableObjectPool } from \"./utils/ReturnableObjectPool\";\nimport { XRManager } from \"./xr/XRManager\";\n\nShaderPool.init();\n\n/**\n * Engine.\n */\nexport class Engine extends EventDispatcher {\n  /** @internal */\n  static _gammaMacro: ShaderMacro = ShaderMacro.getByName(\"ENGINE_IS_COLORSPACE_GAMMA\");\n  /** @internal */\n  static _noDepthTextureMacro: ShaderMacro = ShaderMacro.getByName(\"ENGINE_NO_DEPTH_TEXTURE\");\n  /** @internal Conversion of space units to pixel units for 2D. */\n  static _pixelsPerUnit: number = 100;\n\n  /** Input manager of Engine. */\n  readonly inputManager: InputManager;\n  /** XR manager of Engine. */\n  readonly xrManager: XRManager;\n\n  /** @internal */\n  _batcherManager: BatcherManager;\n\n  _particleBufferUtils: ParticleBufferUtils;\n  /** @internal */\n  _physicsInitialized: boolean = false;\n  /** @internal */\n  _physicalObjectsMap: Record<number, ColliderShape> = {};\n  /** @internal */\n  _nativePhysicsManager: IPhysicsManager;\n  /* @internal */\n  _hardwareRenderer: IHardwareRenderer;\n  /* @internal */\n  _lastRenderState: RenderState = new RenderState();\n\n  /* @internal */\n  _renderElementPool = new ClearableObjectPool(RenderElement);\n  /* @internal */\n  _subRenderElementPool = new ClearableObjectPool(SubRenderElement);\n  /* @internal */\n  _textSubRenderElementPool = new ClearableObjectPool(SubRenderElement);\n  /* @internal */\n  _charRenderInfoPool = new ReturnableObjectPool(CharRenderInfo, 50);\n\n  /* @internal */\n  _basicResources: BasicResources;\n  /* @internal */\n  _textDefaultFont: Font;\n  /* @internal */\n  _renderContext: RenderContext = new RenderContext();\n\n  /* @internal */\n  _meshMagentaMaterial: Material;\n  /* @internal */\n  _particleMagentaMaterial: Material;\n  /* @internal */\n  _depthTexture2D: Texture2D;\n\n  /* @internal */\n  _renderCount: number = 0;\n  /* @internal */\n  _shaderProgramPools: ShaderProgramPool[] = [];\n  /** @internal */\n  _fontMap: Record<string, Font> = {};\n  /** @internal @todo: temporary solution */\n  _macroCollection: ShaderMacroCollection = new ShaderMacroCollection();\n\n  /** @internal */\n  protected _canvas: Canvas;\n\n  private _settings: EngineSettings = {};\n  private _resourceManager: ResourceManager = new ResourceManager(this);\n  private _sceneManager: SceneManager = new SceneManager(this);\n  private _vSyncCount: number = 1;\n  private _targetFrameRate: number = 60;\n  private _time: Time = new Time();\n  private _isPaused: boolean = true;\n  private _requestId: number;\n  private _timeoutId: number;\n  private _vSyncCounter: number = 1;\n  private _targetFrameInterval: number = 1000 / 60;\n  private _destroyed: boolean = false;\n  private _frameInProcess: boolean = false;\n  private _waitingDestroy: boolean = false;\n  private _isDeviceLost: boolean = false;\n  private _waitingGC: boolean = false;\n\n  private _animate = () => {\n    if (this._vSyncCount) {\n      const raf = this.xrManager?._getRequestAnimationFrame() || requestAnimationFrame;\n      this._requestId = raf(this._animate);\n      if (this._vSyncCounter++ % this._vSyncCount === 0) {\n        this.update();\n        this._vSyncCounter = 1;\n      }\n    } else {\n      this._timeoutId = window.setTimeout(this._animate, this._targetFrameInterval);\n      this.update();\n    }\n  };\n\n  /**\n   * Settings of Engine.\n   */\n  get settings(): EngineSettings {\n    return this._settings;\n  }\n\n  /**\n   * The canvas to use for rendering.\n   */\n  get canvas(): Canvas {\n    return this._canvas;\n  }\n\n  /**\n   * The resource manager.\n   */\n  get resourceManager(): ResourceManager {\n    return this._resourceManager;\n  }\n\n  /**\n   * The scene manager.\n   */\n  get sceneManager(): SceneManager {\n    return this._sceneManager;\n  }\n\n  /**\n   * The time information of the engine.\n   */\n  get time(): Time {\n    return this._time;\n  }\n\n  /**\n   * Whether the engine is paused.\n   */\n  get isPaused(): boolean {\n    return this._isPaused;\n  }\n\n  /**\n   * The number of vertical synchronization means the number of vertical blanking for one frame.\n   * @remarks 0 means that the vertical synchronization is turned off.\n   */\n  get vSyncCount(): number {\n    return this._vSyncCount;\n  }\n\n  set vSyncCount(value: number) {\n    this._vSyncCount = Math.max(0, Math.floor(value));\n  }\n\n  /**\n   * Set the target frame rate you want to achieve.\n   * @remarks\n   * It only takes effect when vSyncCount = 0 (ie, vertical synchronization is turned off).\n   * The larger the value, the higher the target frame rate, Number.POSITIVE_INFINITY represents the infinite target frame rate.\n   */\n  get targetFrameRate(): number {\n    return this._targetFrameRate;\n  }\n\n  set targetFrameRate(value: number) {\n    value = Math.max(0.000001, value);\n    this._targetFrameRate = value;\n    this._targetFrameInterval = 1000 / value;\n  }\n\n  /**\n   * Indicates whether the engine is destroyed.\n   */\n  get destroyed(): boolean {\n    return this._destroyed;\n  }\n\n  protected constructor(canvas: Canvas, hardwareRenderer: IHardwareRenderer, configuration: EngineConfiguration) {\n    super();\n    this._hardwareRenderer = hardwareRenderer;\n    this._hardwareRenderer.init(canvas, this._onDeviceLost.bind(this), this._onDeviceRestored.bind(this));\n\n    this._canvas = canvas;\n\n    this._textDefaultFont = Font.createFromOS(this, \"Arial\");\n    this._textDefaultFont.isGCIgnored = true;\n\n    this._batcherManager = new BatcherManager(this);\n    this.inputManager = new InputManager(this, configuration.input);\n\n    const { xrDevice } = configuration;\n    if (xrDevice) {\n      this.xrManager = new XRManager();\n      this.xrManager._initialize(this, xrDevice);\n    }\n\n    if (!hardwareRenderer.canIUse(GLCapabilityType.depthTexture)) {\n      this._macroCollection.enable(Engine._noDepthTextureMacro);\n    } else {\n      const depthTexture2D = new Texture2D(this, 1, 1, TextureFormat.Depth16, false);\n      depthTexture2D.isGCIgnored = true;\n      this._depthTexture2D = depthTexture2D;\n    }\n\n    const meshMagentaMaterial = new Material(this, Shader.find(\"unlit\"));\n    meshMagentaMaterial.isGCIgnored = true;\n    meshMagentaMaterial.shaderData.setColor(\"material_BaseColor\", new Color(1.0, 0.0, 1.01, 1.0));\n    this._meshMagentaMaterial = meshMagentaMaterial;\n\n    const particleMagentaMaterial = new Material(this, Shader.find(\"particle-shader\"));\n    particleMagentaMaterial.isGCIgnored = true;\n    particleMagentaMaterial.shaderData.setColor(\"material_BaseColor\", new Color(1.0, 0.0, 1.01, 1.0));\n    this._particleMagentaMaterial = particleMagentaMaterial;\n\n    const innerSettings = this._settings;\n    const colorSpace = configuration.colorSpace || ColorSpace.Linear;\n    colorSpace === ColorSpace.Gamma && this._macroCollection.enable(Engine._gammaMacro);\n    innerSettings.colorSpace = colorSpace;\n\n    this._basicResources = new BasicResources(this);\n    this._particleBufferUtils = new ParticleBufferUtils(this);\n  }\n\n  /**\n   * Create an entity.\n   * @param name - The name of the entity\n   * @returns Entity\n   */\n  createEntity(name?: string): Entity {\n    return new Entity(this, name);\n  }\n\n  /**\n   * Pause the engine.\n   */\n  pause(): void {\n    this._isPaused = true;\n    const caf = this.xrManager?._getCancelAnimationFrame() || cancelAnimationFrame;\n    caf(this._requestId);\n    clearTimeout(this._timeoutId);\n  }\n\n  /**\n   * Resume the engine.\n   */\n  resume(): void {\n    if (!this._isPaused) return;\n    this._isPaused = false;\n    this.time._reset();\n    if (this._vSyncCount) {\n      const raf = this.xrManager?._getRequestAnimationFrame() || requestAnimationFrame;\n      this._requestId = raf(this._animate);\n    } else {\n      this._timeoutId = window.setTimeout(this._animate, this._targetFrameInterval);\n    }\n  }\n\n  /**\n   * Update the engine loop manually. If you call engine.run(), you generally don't need to call this function.\n   */\n  update(): void {\n    const time = this._time;\n    time._update();\n\n    const deltaTime = time.deltaTime;\n    this._frameInProcess = true;\n\n    this._subRenderElementPool.clear();\n    this._textSubRenderElementPool.clear();\n    this._renderElementPool.clear();\n\n    this.xrManager?._update();\n    const { inputManager, _physicsInitialized: physicsInitialized } = this;\n    inputManager._update();\n\n    const scenes = this._sceneManager._scenes.getLoopArray();\n    const sceneCount = scenes.length;\n\n    // Sort cameras and fire script `onStart`\n    for (let i = 0; i < sceneCount; i++) {\n      const scene = scenes[i];\n      if (!scene.isActive || scene.destroyed) continue;\n      const componentsManager = scene._componentsManager;\n      componentsManager.sortCameras();\n      componentsManager.callScriptOnStart();\n    }\n\n    // Update physics and fire `onPhysicsUpdate`\n    if (physicsInitialized) {\n      for (let i = 0; i < sceneCount; i++) {\n        const scene = scenes[i];\n        if (!scene.isActive || scene.destroyed) continue;\n        scene.physics._update(deltaTime);\n      }\n    }\n\n    // Fire `onPointerXX`\n    physicsInitialized && inputManager._firePointerScript(scenes);\n\n    // Fire `onUpdate`\n    for (let i = 0; i < sceneCount; i++) {\n      const scene = scenes[i];\n      if (!scene.isActive || scene.destroyed) continue;\n      scene._componentsManager.callScriptOnUpdate(deltaTime);\n    }\n\n    // Update `Animator` logic\n    for (let i = 0; i < sceneCount; i++) {\n      const scene = scenes[i];\n      if (!scene.isActive || scene.destroyed) continue;\n      scene._componentsManager.callAnimationUpdate(deltaTime);\n    }\n\n    // Fire `onLateUpdate`\n    for (let i = 0; i < sceneCount; i++) {\n      const scene = scenes[i];\n      if (!scene.isActive || scene.destroyed) continue;\n      scene._componentsManager.callScriptOnLateUpdate(deltaTime);\n    }\n\n    // Render scene and fire `onBeginRender` and `onEndRender`\n    if (!this._isDeviceLost) {\n      this._render(scenes);\n    }\n\n    if (this._waitingDestroy) {\n      this._destroy();\n    } else {\n      // Handling invalid scripts and fire `onDestroy`\n      for (let i = 0; i < sceneCount; i++) {\n        const scene = scenes[i];\n        if (!scene.isActive || scene.destroyed) continue;\n        scene._componentsManager.handlingInvalidScripts();\n      }\n    }\n\n    if (this._waitingGC) {\n      this._gc();\n      this._waitingGC = false;\n    }\n    this._frameInProcess = false;\n  }\n\n  /**\n   * Execution engine loop.\n   */\n  run(): void {\n    this.resume();\n    this.dispatch(\"run\", this);\n  }\n\n  /**\n   * Force lose graphic device.\n   * @remarks Used to simulate the phenomenon after the real loss of device.\n   */\n  forceLoseDevice(): void {\n    this._hardwareRenderer.forceLoseDevice();\n  }\n\n  /**\n   * Force restore graphic device.\n   * @remarks Used to simulate the phenomenon after the real restore of device.\n   */\n  forceRestoreDevice(): void {\n    this._hardwareRenderer.forceRestoreDevice();\n  }\n\n  private _destroy(): void {\n    this._sceneManager._destroyAllScene();\n\n    this._resourceManager._destroy();\n    this._textDefaultFont = null;\n    this._fontMap = null;\n\n    this.inputManager._destroy();\n    this._batcherManager.destroy();\n    this.xrManager?._destroy();\n    this.dispatch(\"shutdown\", this);\n\n    // Cancel animation\n    this.pause();\n\n    this._hardwareRenderer.destroy();\n\n    this.removeAllEventListeners();\n\n    this._animate = null;\n    this._sceneManager = null;\n    this._resourceManager = null;\n    this._canvas = null;\n    this._time = null;\n\n    this._waitingDestroy = false;\n    this._destroyed = true;\n  }\n\n  /**\n   * Destroy engine.\n   * @remarks If call during frame execution will delay until the end of the frame\n   */\n  destroy(): void {\n    if (this._destroyed) {\n      return;\n    }\n\n    if (this._frameInProcess) {\n      this._waitingDestroy = true;\n    } else {\n      this._destroy();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _getShaderProgramPool(shaderPass: ShaderPass): ShaderProgramPool {\n    const index = shaderPass._shaderPassId;\n    const shaderProgramPools = this._shaderProgramPools;\n    let pool = shaderProgramPools[index];\n    if (!pool) {\n      const length = index + 1;\n      if (length > shaderProgramPools.length) {\n        shaderProgramPools.length = length;\n      }\n      shaderProgramPools[index] = pool = new ShaderProgramPool(this);\n      shaderPass._shaderProgramPools.push(pool);\n    }\n    return pool;\n  }\n\n  /**\n   * @internal\n   */\n  _render(scenes: ReadonlyArray<Scene>): void {\n    // Update `Renderer` logic and shader data\n    const deltaTime = this.time.deltaTime;\n    for (let i = 0, n = scenes.length; i < n; i++) {\n      const scene = scenes[i];\n      if (!scene.isActive || scene.destroyed) continue;\n      scene._componentsManager.callRendererOnUpdate(deltaTime);\n      scene._updateShaderData();\n    }\n\n    // Fire script `onBeginRender` and `onEndRender`\n    for (let i = 0, n = scenes.length; i < n; i++) {\n      const scene = scenes[i];\n      if (!scene.isActive || scene.destroyed) continue;\n      const cameras = scene._componentsManager._activeCameras;\n\n      if (cameras.length === 0) {\n        Logger.debug(\"No active camera in scene.\");\n        continue;\n      }\n\n      cameras.forEach(\n        (camera: Camera) => {\n          const componentsManager = scene._componentsManager;\n          componentsManager.callCameraOnBeginRender(camera);\n          camera.render();\n          componentsManager.callCameraOnEndRender(camera);\n\n          // Temp solution for webgl implement bug\n          if (this._hardwareRenderer._options._forceFlush) {\n            this._hardwareRenderer.flush();\n          }\n        },\n        (camera: Camera, index: number) => {\n          camera._cameraIndex = index;\n        }\n      );\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _pendingGC() {\n    if (this._frameInProcess) {\n      this._waitingGC = true;\n    } else {\n      this._gc();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  protected _initialize(configuration: EngineConfiguration): Promise<Engine> {\n    const { shaderLab, physics } = configuration;\n\n    if (shaderLab && !Shader._shaderLab) {\n      Shader._shaderLab = shaderLab;\n    }\n\n    const initializePromises = new Array<Promise<any>>();\n    if (physics) {\n      initializePromises.push(\n        physics.initialize().then(() => {\n          PhysicsScene._nativePhysics = physics;\n          this._nativePhysicsManager = physics.createPhysicsManager();\n          this._physicsInitialized = true;\n          return this;\n        })\n      );\n    }\n\n    const loaders = ResourceManager._loaders;\n    for (let key in loaders) {\n      const loader = loaders[key];\n      if (loader.initialize) initializePromises.push(loader.initialize(this, configuration));\n    }\n    return Promise.all(initializePromises).then(() => this);\n  }\n\n  private _onDeviceLost(): void {\n    this._isDeviceLost = true;\n    // Lose graphic resources\n    this.resourceManager._lostGraphicResources();\n    console.log(\"Device lost.\");\n    this.dispatch(\"devicelost\", this);\n  }\n\n  private _onDeviceRestored(): void {\n    this._hardwareRenderer.resetState();\n    this._lastRenderState = new RenderState();\n    // Clear shader pools\n    this._shaderProgramPools.length = 0;\n\n    const { resourceManager } = this;\n    // Restore graphic resources\n    resourceManager._restoreGraphicResources();\n    console.log(\"Graphic resource restored.\");\n\n    // Restore resources content\n    resourceManager\n      ._restoreResourcesContent()\n      .then(() => {\n        console.log(\"Graphic resource content restored.\\n\\n\" + \"Device restored.\");\n        this.dispatch(\"devicerestored\", this);\n        this._isDeviceLost = false;\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }\n\n  private _gc(): void {\n    this._subRenderElementPool.garbageCollection();\n    this._textSubRenderElementPool.garbageCollection();\n    this._renderElementPool.garbageCollection();\n    this._renderContext.garbageCollection();\n  }\n\n  /**\n   * @deprecated\n   * The first scene physics manager.\n   */\n  get physicsManager() {\n    return this.sceneManager.scenes[0]?.physics;\n  }\n}\n\n/**\n * Engine configuration.\n */\nexport interface EngineConfiguration {\n  /** Physics. */\n  physics?: IPhysics;\n  /** XR Device. */\n  xrDevice?: IXRDevice;\n  /** Color space. */\n  colorSpace?: ColorSpace;\n  /** Shader lab. */\n  shaderLab?: IShaderLab;\n  /** Input options. */\n  input?: IInputOptions;\n}\n","import { UpdateFlagManager } from \"./UpdateFlagManager\";\n\n/**\n * Canvas.\n */\nexport abstract class Canvas {\n  /* @internal */\n  _sizeUpdateFlagManager: UpdateFlagManager = new UpdateFlagManager();\n\n  private _width: number;\n  private _height: number;\n\n  /**\n   * The width of the canvas.\n   */\n  get width(): number {\n    return this._width;\n  }\n\n  set width(value: number) {\n    if (this._width !== value) {\n      this._width = value;\n      this._onWidthChanged(value);\n      this._sizeUpdateFlagManager.dispatch();\n    }\n  }\n\n  /**\n   *The height of the canvas.\n   */\n  get height(): number {\n    return this._height;\n  }\n\n  set height(value: number) {\n    if (this._height !== value) {\n      this._height = value;\n      this._onHeightChange(value);\n      this._sizeUpdateFlagManager.dispatch();\n    }\n  }\n\n  protected abstract _onWidthChanged(value: number): void;\n\n  protected abstract _onHeightChange(value: number): void;\n}\n","import { MathUtil, Matrix } from \"@galacean/engine-math\";\nimport { RenderContext } from \"../RenderPipeline/RenderContext\";\nimport { Logger } from \"../base/Logger\";\nimport { Mesh } from \"../graphic/Mesh\";\nimport { Material } from \"../material\";\nimport { Shader } from \"../shader/Shader\";\nimport { ShaderMacroCollection } from \"../shader/ShaderMacroCollection\";\n\n/**\n * Sky.\n */\nexport class Sky {\n  private static _epsilon: number = 1e-6;\n  private static _viewProjMatrix: Matrix = new Matrix();\n  private static _projectionMatrix: Matrix = new Matrix(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, Sky._epsilon - 1, -1, 0, 0, 0, 0);\n\n  private _material: Material;\n  private _mesh: Mesh;\n\n  /**\n   *  Material of the sky.\n   */\n  get material() {\n    return this._material;\n  }\n\n  set material(value: Material) {\n    if (this._material !== value) {\n      value?._addReferCount(1);\n      this._material?._addReferCount(-1);\n      this._material = value;\n    }\n  }\n\n  /**\n   *  Mesh of the sky.\n   */\n  get mesh() {\n    return this._mesh;\n  }\n\n  set mesh(value: Mesh) {\n    if (this._mesh !== value) {\n      value?._addReferCount(1);\n      this._mesh?._addReferCount(-1);\n      this._mesh = value;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  destroy(): void {\n    this.mesh = null;\n    this.material = null;\n  }\n\n  /**\n   * @internal\n   */\n  _render(context: RenderContext): void {\n    const { material, mesh } = this;\n    if (!material) {\n      Logger.warn(\"The material of sky is not defined.\");\n      return;\n    }\n\n    if (material.destroyed) {\n      Logger.warn(\"The material of sky is destroyed.\");\n      return;\n    }\n\n    if (!mesh) {\n      Logger.warn(\"The mesh of sky is not defined.\");\n      return;\n    }\n\n    if (mesh.destroyed) {\n      Logger.warn(\"The mesh of sky is destroyed.\");\n      return;\n    }\n\n    const { engine, scene, aspectRatio, fieldOfView, viewMatrix, shaderData: cameraShaderData } = context.camera;\n    const sceneData = scene.shaderData;\n\n    const { _viewProjMatrix: viewProjMatrix, _projectionMatrix: projectionMatrix } = Sky;\n    const rhi = engine._hardwareRenderer;\n    const { shaderData: materialShaderData, shader, renderState } = material;\n\n    // no-scale view matrix\n    viewProjMatrix.copyFrom(viewMatrix);\n    const e = viewProjMatrix.elements;\n    e[12] = e[13] = e[14] = 0;\n\n    // epsilon-infinity projection matrix http://terathon.com/gdc07_lengyel.pdf\n    const f = 1.0 / Math.tan(MathUtil.degreeToRadian(fieldOfView) / 2);\n    projectionMatrix.elements[0] = f / aspectRatio;\n    projectionMatrix.elements[5] = f;\n\n    // view-proj matrix\n    Matrix.multiply(projectionMatrix, viewProjMatrix, viewProjMatrix);\n    const originViewProjMatrix = cameraShaderData.getMatrix(RenderContext.vpMatrixProperty);\n\n    if (context.flipProjection) {\n      Matrix.multiply(RenderContext._flipYMatrix, viewProjMatrix, viewProjMatrix);\n    }\n    cameraShaderData.setMatrix(RenderContext.vpMatrixProperty, viewProjMatrix);\n\n    const compileMacros = Shader._compileMacros;\n    ShaderMacroCollection.unionCollection(\n      context.camera._globalShaderMacro,\n      materialShaderData._macroCollection,\n      compileMacros\n    );\n\n    const pass = shader.subShaders[0].passes[0];\n    const program = pass._getShaderProgram(engine, compileMacros);\n    program.bind();\n    program.groupingOtherUniformBlock();\n    program.uploadAll(program.sceneUniformBlock, sceneData);\n    program.uploadAll(program.cameraUniformBlock, cameraShaderData);\n    program.uploadAll(program.materialUniformBlock, materialShaderData);\n    program.uploadUnGroupTextures();\n\n    renderState._applyStates(engine, false, pass._renderStateDataMap, materialShaderData);\n    rhi.drawPrimitive(mesh._primitive, mesh.subMesh, program);\n    cameraShaderData.setMatrix(RenderContext.vpMatrixProperty, originViewProjMatrix);\n  }\n}\n","import { Color, Vector2, Vector3 } from \"@galacean/engine-math\";\nimport { CompareFunction, ContentRestorer, Material, ModelMesh, Shader } from \".\";\nimport { Engine } from \"./Engine\";\nimport { BackgroundMode } from \"./enums/BackgroundMode\";\nimport { BackgroundTextureFillMode } from \"./enums/BackgroundTextureFillMode\";\nimport { Sky } from \"./sky/Sky\";\nimport { Texture2D } from \"./texture\";\n\n/**\n * Background of scene.\n */\nexport class Background {\n  /**\n   * Background mode.\n   * @defaultValue `BackgroundMode.SolidColor`\n   * @remarks If using `BackgroundMode.Sky` mode and material or mesh of the `sky` is not defined, it will downgrade to `BackgroundMode.SolidColor`.\n   */\n  mode: BackgroundMode = BackgroundMode.SolidColor;\n\n  /**\n   * Background solid color.\n   * @defaultValue `new Color(0.25, 0.25, 0.25, 1.0)`\n   * @remarks When `mode` is `BackgroundMode.SolidColor`, the property will take effects.\n   */\n  solidColor: Color = new Color(0.25, 0.25, 0.25, 1.0);\n\n  /**\n   * Background sky.\n   * @remarks When `mode` is `BackgroundMode.Sky`, the property will take effects.\n   */\n  readonly sky: Sky = new Sky();\n\n  /** @internal */\n  _textureFillMode: BackgroundTextureFillMode = BackgroundTextureFillMode.AspectFitHeight;\n\n  /** @internal */\n  _mesh: ModelMesh;\n  /** @internal */\n  _material: Material;\n\n  private _texture: Texture2D = null;\n\n  /**\n   * Background texture.\n   * @remarks When `mode` is `BackgroundMode.Texture`, the property will take effects.\n   */\n  get texture(): Texture2D {\n    return this._texture;\n  }\n\n  set texture(value: Texture2D) {\n    if (this._texture !== value) {\n      value?._addReferCount(1);\n      this._texture?._addReferCount(-1);\n      this._texture = value;\n      this._material.shaderData.setTexture(\"material_BaseTexture\", value);\n      this._resizeBackgroundTexture();\n    }\n  }\n\n  /**\n   * Background texture fill mode.\n   * @remarks When `mode` is `BackgroundMode.Texture`, the property will take effects.\n   * @defaultValue `BackgroundTextureFillMode.FitHeight`\n   */\n  get textureFillMode(): BackgroundTextureFillMode {\n    return this._textureFillMode;\n  }\n\n  set textureFillMode(value: BackgroundTextureFillMode) {\n    if (value !== this._textureFillMode) {\n      this._textureFillMode = value;\n      this._resizeBackgroundTexture();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  destroy(): void {\n    this.texture = null;\n    this._mesh._addReferCount(-1);\n    this._mesh = null;\n    this._material._addReferCount(-1);\n    this._material = null;\n    this.solidColor = null;\n    this.sky.destroy();\n  }\n\n  /**\n   * Constructor of Background.\n   * @param _engine Engine Which the background belongs to.\n   */\n  constructor(private _engine: Engine) {\n    this._initMesh(_engine);\n    this._initMaterial(_engine);\n  }\n\n  /**\n   * @internal\n   */\n  _resizeBackgroundTexture(): void {\n    const { _texture: texture, _mesh: mesh } = this;\n    if (!this._texture) {\n      return;\n    }\n    const { width, height } = this._engine.canvas;\n    const positions = mesh.getPositions();\n\n    switch (this._textureFillMode) {\n      case BackgroundTextureFillMode.Fill:\n        positions[0].set(-1, -1, 1);\n        positions[1].set(1, -1, 1);\n        positions[2].set(-1, 1, 1);\n        positions[3].set(1, 1, 1);\n        break;\n      case BackgroundTextureFillMode.AspectFitWidth:\n        const fitWidthScale = (texture.height * width) / texture.width / height;\n        positions[0].set(-1, -fitWidthScale, 1);\n        positions[1].set(1, -fitWidthScale, 1);\n        positions[2].set(-1, fitWidthScale, 1);\n        positions[3].set(1, fitWidthScale, 1);\n        break;\n      case BackgroundTextureFillMode.AspectFitHeight:\n        const fitHeightScale = (texture.width * height) / texture.height / width;\n        positions[0].set(-fitHeightScale, -1, 1);\n        positions[1].set(fitHeightScale, -1, 1);\n        positions[2].set(-fitHeightScale, 1, 1);\n        positions[3].set(fitHeightScale, 1, 1);\n        break;\n    }\n    mesh.setPositions(positions);\n    mesh.uploadData(false);\n  }\n\n  private _initMesh(engine: Engine): void {\n    const mesh = (this._mesh = this._createPlane(engine));\n    engine.resourceManager.addContentRestorer(\n      new (class extends ContentRestorer<ModelMesh> {\n        constructor() {\n          super(mesh);\n        }\n        restoreContent() {\n          mesh.setPositions(mesh.getPositions());\n          mesh.setUVs(mesh.getUVs());\n          mesh.setIndices(mesh.getIndices());\n          mesh.uploadData(false);\n        }\n      })()\n    );\n    this._mesh._addReferCount(1);\n  }\n\n  private _initMaterial(engine: Engine): void {\n    const material = (this._material = new Material(engine, Shader.find(\"background-texture\")));\n    material.renderState.depthState.compareFunction = CompareFunction.LessEqual;\n    material._addReferCount(1);\n  }\n\n  private _createPlane(engine: Engine): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    const indices = new Uint8Array([1, 2, 0, 1, 3, 2]);\n\n    const positions: Vector3[] = new Array(4);\n    const uvs: Vector2[] = new Array(4);\n\n    for (let i = 0; i < 4; ++i) {\n      positions[i] = new Vector3();\n      uvs[i] = new Vector2(i % 2, 1 - ((i * 0.5) | 0));\n    }\n\n    mesh.setPositions(positions);\n    mesh.setUVs(uvs);\n    mesh.setIndices(indices);\n\n    mesh.uploadData(false);\n    mesh.addSubMesh(0, indices.length);\n    return mesh;\n  }\n}\n","import { Camera } from \"./Camera\";\nimport { Component } from \"./Component\";\nimport { Renderer } from \"./Renderer\";\nimport { Script } from \"./Script\";\nimport { Animator } from \"./animation\";\nimport { DisorderedArray } from \"./utils/DisorderedArray\";\n\n/**\n * The manager of the components.\n */\nexport class ComponentsManager {\n  /* @internal */\n  _cameraNeedSorting: boolean = false;\n  /** @internal */\n  _activeCameras: DisorderedArray<Camera> = new DisorderedArray();\n  /** @internal */\n  _renderers: DisorderedArray<Renderer> = new DisorderedArray();\n\n  // Script\n  private _onStartScripts: DisorderedArray<Script> = new DisorderedArray();\n  private _onUpdateScripts: DisorderedArray<Script> = new DisorderedArray();\n  private _onLateUpdateScripts: DisorderedArray<Script> = new DisorderedArray();\n  private _onPhysicsUpdateScripts: DisorderedArray<Script> = new DisorderedArray();\n\n  private _pendingDestroyScripts: Script[] = [];\n  private _disposeDestroyScripts: Script[] = [];\n\n  // Animation\n  private _onUpdateAnimations: DisorderedArray<Animator> = new DisorderedArray();\n\n  // Render\n  private _onUpdateRenderers: DisorderedArray<Renderer> = new DisorderedArray();\n\n  // Delay dispose active/inActive Pool\n  private _componentsContainerPool: Component[][] = [];\n\n  addCamera(camera: Camera) {\n    camera._cameraIndex = this._activeCameras.length;\n    this._activeCameras.add(camera);\n    this._cameraNeedSorting = true;\n  }\n\n  removeCamera(camera: Camera) {\n    const replaced = this._activeCameras.deleteByIndex(camera._cameraIndex);\n    replaced && (replaced._cameraIndex = camera._cameraIndex);\n    camera._cameraIndex = -1;\n    this._cameraNeedSorting = true;\n  }\n\n  sortCameras(): void {\n    if (this._cameraNeedSorting) {\n      const activeCameras = this._activeCameras;\n      activeCameras.sort((a, b) => a.priority - b.priority);\n      for (let i = 0, n = activeCameras.length; i < n; i++) {\n        activeCameras.get(i)._cameraIndex = i;\n      }\n      this._cameraNeedSorting = false;\n    }\n  }\n\n  addRenderer(renderer: Renderer) {\n    renderer._rendererIndex = this._renderers.length;\n    this._renderers.add(renderer);\n  }\n\n  removeRenderer(renderer: Renderer) {\n    const replaced = this._renderers.deleteByIndex(renderer._rendererIndex);\n    replaced && (replaced._rendererIndex = renderer._rendererIndex);\n    renderer._rendererIndex = -1;\n  }\n\n  addOnStartScript(script: Script) {\n    script._onStartIndex = this._onStartScripts.length;\n    this._onStartScripts.add(script);\n  }\n\n  removeOnStartScript(script: Script): void {\n    const replaced = this._onStartScripts.deleteByIndex(script._onStartIndex);\n    replaced && (replaced._onStartIndex = script._onStartIndex);\n    script._onStartIndex = -1;\n  }\n\n  addOnUpdateScript(script: Script) {\n    script._onUpdateIndex = this._onUpdateScripts.length;\n    this._onUpdateScripts.add(script);\n  }\n\n  removeOnUpdateScript(script: Script): void {\n    const replaced = this._onUpdateScripts.deleteByIndex(script._onUpdateIndex);\n    replaced && (replaced._onUpdateIndex = script._onUpdateIndex);\n    script._onUpdateIndex = -1;\n  }\n\n  addOnLateUpdateScript(script: Script): void {\n    script._onLateUpdateIndex = this._onLateUpdateScripts.length;\n    this._onLateUpdateScripts.add(script);\n  }\n\n  removeOnLateUpdateScript(script: Script): void {\n    const replaced = this._onLateUpdateScripts.deleteByIndex(script._onLateUpdateIndex);\n    replaced && (replaced._onLateUpdateIndex = script._onLateUpdateIndex);\n    script._onLateUpdateIndex = -1;\n  }\n\n  addOnPhysicsUpdateScript(script: Script): void {\n    script._onPhysicsUpdateIndex = this._onPhysicsUpdateScripts.length;\n    this._onPhysicsUpdateScripts.add(script);\n  }\n\n  removeOnPhysicsUpdateScript(script: Script): void {\n    const replaced = this._onPhysicsUpdateScripts.deleteByIndex(script._onPhysicsUpdateIndex);\n    replaced && (replaced._onPhysicsUpdateIndex = script._onPhysicsUpdateIndex);\n    script._onPhysicsUpdateIndex = -1;\n  }\n\n  addOnUpdateAnimations(animation: Animator): void {\n    animation._onUpdateIndex = this._onUpdateAnimations.length;\n    this._onUpdateAnimations.add(animation);\n  }\n\n  removeOnUpdateAnimations(animation: Animator): void {\n    const replaced = this._onUpdateAnimations.deleteByIndex(animation._onUpdateIndex);\n    replaced && (replaced._onUpdateIndex = animation._onUpdateIndex);\n    animation._onUpdateIndex = -1;\n  }\n\n  addOnUpdateRenderers(renderer: Renderer): void {\n    renderer._onUpdateIndex = this._onUpdateRenderers.length;\n    this._onUpdateRenderers.add(renderer);\n  }\n\n  removeOnUpdateRenderers(renderer: Renderer): void {\n    const replaced = this._onUpdateRenderers.deleteByIndex(renderer._onUpdateIndex);\n    replaced && (replaced._onUpdateIndex = renderer._onUpdateIndex);\n    renderer._onUpdateIndex = -1;\n  }\n\n  addPendingDestroyScript(component: Script): void {\n    this._pendingDestroyScripts.push(component);\n  }\n\n  callScriptOnStart(): void {\n    const onStartScripts = this._onStartScripts;\n    if (onStartScripts.length > 0) {\n      // The 'onStartScripts.length' maybe add if you add some Script with addComponent() in some Script's onStart()\n      onStartScripts.forEachAndClean(\n        (script: Script) => {\n          script._started = true;\n          this.removeOnStartScript(script);\n          script.onStart();\n        },\n        (element: Script, index: number) => {\n          element._onStartIndex = index;\n        }\n      );\n    }\n  }\n\n  callScriptOnUpdate(deltaTime: number): void {\n    this._onUpdateScripts.forEach(\n      (element: Script) => {\n        element._started && element.onUpdate(deltaTime);\n      },\n      (element: Script, index: number) => {\n        element._onUpdateIndex = index;\n      }\n    );\n  }\n\n  callScriptOnLateUpdate(deltaTime: number): void {\n    this._onLateUpdateScripts.forEach(\n      (element: Script) => {\n        element._started && element.onLateUpdate(deltaTime);\n      },\n      (element: Script, index: number) => {\n        element._onLateUpdateIndex = index;\n      }\n    );\n  }\n\n  callScriptOnPhysicsUpdate(): void {\n    this._onPhysicsUpdateScripts.forEach(\n      (element: Script) => {\n        element._started && element.onPhysicsUpdate();\n      },\n      (element: Script, index: number) => {\n        element._onPhysicsUpdateIndex = index;\n      }\n    );\n  }\n\n  callAnimationUpdate(deltaTime: number): void {\n    this._onUpdateAnimations.forEach(\n      (element: Animator) => {\n        element.update(deltaTime);\n      },\n      (element: Animator, index: number) => {\n        element._onUpdateIndex = index;\n      }\n    );\n  }\n\n  callRendererOnUpdate(deltaTime: number): void {\n    this._onUpdateRenderers.forEach(\n      (element: Renderer) => {\n        element.update(deltaTime);\n      },\n      (element: Renderer, index: number) => {\n        element._onUpdateIndex = index;\n      }\n    );\n  }\n\n  handlingInvalidScripts(): void {\n    const { _disposeDestroyScripts: pendingDestroyScripts, _pendingDestroyScripts: disposeDestroyScripts } = this;\n    this._disposeDestroyScripts = disposeDestroyScripts;\n    this._pendingDestroyScripts = pendingDestroyScripts;\n    const length = disposeDestroyScripts.length;\n    if (length > 0) {\n      for (let i = length - 1; i >= 0; i--) {\n        disposeDestroyScripts[i].onDestroy();\n      }\n      disposeDestroyScripts.length = 0;\n    }\n  }\n\n  callCameraOnBeginRender(camera: Camera): void {\n    camera.entity._scripts.forEach(\n      (element: Script) => {\n        element.onBeginRender(camera);\n      },\n      (element: Script, index: number) => {\n        element._entityScriptsIndex = index;\n      }\n    );\n  }\n\n  callCameraOnEndRender(camera: Camera): void {\n    camera.entity._scripts.forEach(\n      (element: Script) => {\n        element.onEndRender(camera);\n      },\n      (element: Script, index: number) => {\n        element._entityScriptsIndex = index;\n      }\n    );\n  }\n\n  getActiveChangedTempList(): Component[] {\n    return this._componentsContainerPool.length ? this._componentsContainerPool.pop() : [];\n  }\n\n  putActiveChangedTempList(componentContainer: Component[]): void {\n    componentContainer.length = 0;\n    this._componentsContainerPool.push(componentContainer);\n  }\n\n  /**\n   * @internal\n   */\n  _gc() {\n    this._renderers.garbageCollection();\n    this._onStartScripts.garbageCollection();\n    this._onUpdateScripts.garbageCollection();\n    this._onLateUpdateScripts.garbageCollection();\n    this._onPhysicsUpdateScripts.garbageCollection();\n    this._onUpdateAnimations.garbageCollection();\n    this._onUpdateRenderers.garbageCollection();\n    this._activeCameras.garbageCollection();\n  }\n}\n","import { SpriteMask } from \"../2d\";\nimport { CameraClearFlags } from \"../enums/CameraClearFlags\";\nimport { SpriteMaskLayer } from \"../enums/SpriteMaskLayer\";\nimport { Material } from \"../material\";\nimport { CompareFunction } from \"../shader\";\nimport { RenderQueueType } from \"../shader/enums/RenderQueueType\";\nimport { StencilOperation } from \"../shader/enums/StencilOperation\";\nimport { DisorderedArray } from \"../utils/DisorderedArray\";\nimport { RenderContext } from \"./RenderContext\";\nimport { RenderQueue } from \"./RenderQueue\";\nimport { RenderQueueMaskType } from \"./enums/RenderQueueMaskType\";\n\n/**\n * @internal\n */\nexport class MaskManager {\n  private static _maskIncrementRenderQueue: RenderQueue;\n  private static _maskDecrementRenderQueue: RenderQueue;\n\n  static getMaskIncrementRenderQueue(): RenderQueue {\n    return (MaskManager._maskIncrementRenderQueue ||= new RenderQueue(RenderQueueType.Transparent));\n  }\n\n  static getMaskDecrementRenderQueue(): RenderQueue {\n    return (MaskManager._maskDecrementRenderQueue ||= new RenderQueue(RenderQueueType.Transparent));\n  }\n\n  hasStencilWritten = false;\n\n  private _preMaskLayer = SpriteMaskLayer.Nothing;\n  private _allSpriteMasks = new DisorderedArray<SpriteMask>();\n\n  addSpriteMask(mask: SpriteMask): void {\n    mask._maskIndex = this._allSpriteMasks.length;\n    this._allSpriteMasks.add(mask);\n  }\n\n  removeSpriteMask(mask: SpriteMask): void {\n    const replaced = this._allSpriteMasks.deleteByIndex(mask._maskIndex);\n    replaced && (replaced._maskIndex = mask._maskIndex);\n    mask._maskIndex = -1;\n  }\n\n  drawMask(context: RenderContext, pipelineStageTagValue: string, maskLayer: SpriteMaskLayer): void {\n    const incrementMaskQueue = MaskManager.getMaskIncrementRenderQueue();\n    incrementMaskQueue.clear();\n    const decrementMaskQueue = MaskManager.getMaskDecrementRenderQueue();\n    decrementMaskQueue.clear();\n\n    this._buildMaskRenderElement(maskLayer, incrementMaskQueue, decrementMaskQueue);\n\n    const batcherManager = context.camera.engine._batcherManager;\n    incrementMaskQueue.batch(batcherManager);\n    batcherManager.uploadBuffer();\n    incrementMaskQueue.render(context, pipelineStageTagValue, RenderQueueMaskType.Increment);\n    decrementMaskQueue.batch(batcherManager);\n    batcherManager.uploadBuffer();\n    decrementMaskQueue.render(context, pipelineStageTagValue, RenderQueueMaskType.Decrement);\n  }\n\n  clearMask(context: RenderContext, pipelineStageTagValue: string): void {\n    const preMaskLayer = this._preMaskLayer;\n    if (preMaskLayer !== SpriteMaskLayer.Nothing) {\n      if (this.hasStencilWritten) {\n        const decrementMaskQueue = MaskManager.getMaskDecrementRenderQueue();\n        decrementMaskQueue.clear();\n\n        const masks = this._allSpriteMasks;\n        for (let i = 0, n = masks.length; i < n; i++) {\n          const mask = masks.get(i);\n          mask.influenceLayers & preMaskLayer && decrementMaskQueue.pushRenderElement(mask._renderElement);\n        }\n\n        const batcherManager = context.camera.engine._batcherManager;\n        decrementMaskQueue.batch(batcherManager);\n        batcherManager.uploadBuffer();\n        decrementMaskQueue.render(context, pipelineStageTagValue, RenderQueueMaskType.Decrement);\n      } else {\n        const engine = context.camera.engine;\n        engine._hardwareRenderer.clearRenderTarget(engine, CameraClearFlags.Stencil, null);\n      }\n\n      this._preMaskLayer = SpriteMaskLayer.Nothing;\n    }\n  }\n\n  isStencilWritten(material: Material): boolean {\n    const stencilState = material.renderState.stencilState;\n    const stencilOperation = StencilOperation.Keep;\n    if (\n      stencilState.enabled &&\n      stencilState.writeMask !== 0x00 &&\n      (stencilState.passOperationFront !== stencilOperation ||\n        stencilState.passOperationBack !== stencilOperation ||\n        stencilState.failOperationFront !== stencilOperation ||\n        stencilState.failOperationBack !== stencilOperation ||\n        stencilState.zFailOperationFront !== stencilOperation ||\n        stencilState.zFailOperationBack !== stencilOperation)\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  isReadStencil(material: Material): boolean {\n    const { enabled, mask, compareFunctionFront, compareFunctionBack } = material.renderState.stencilState;\n    if (\n      enabled &&\n      mask !== 0x00 &&\n      ((compareFunctionFront !== CompareFunction.Always && compareFunctionFront !== CompareFunction.Never) ||\n        (compareFunctionBack !== CompareFunction.Always && compareFunctionBack !== CompareFunction.Never))\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  destroy(): void {\n    const allSpriteMasks = this._allSpriteMasks;\n    allSpriteMasks.length = 0;\n    allSpriteMasks.garbageCollection();\n  }\n\n  private _buildMaskRenderElement(\n    curMaskLayer: SpriteMaskLayer,\n    incrementMaskQueue: RenderQueue,\n    decrementMaskQueue: RenderQueue\n  ): void {\n    const preMaskLayer = this._preMaskLayer;\n    if (preMaskLayer !== curMaskLayer) {\n      const masks = this._allSpriteMasks;\n      const commonLayer = preMaskLayer & curMaskLayer;\n      const reduceLayer = preMaskLayer & ~curMaskLayer;\n      const maskElements = masks._elements;\n      for (let i = 0, n = masks.length; i < n; i++) {\n        const mask = maskElements[i];\n        const influenceLayers = mask.influenceLayers;\n\n        if (influenceLayers & commonLayer) {\n          continue;\n        }\n\n        if (influenceLayers & curMaskLayer) {\n          incrementMaskQueue.pushRenderElement(mask._renderElement);\n        } else if (influenceLayers & reduceLayer) {\n          decrementMaskQueue.pushRenderElement(mask._renderElement);\n        }\n      }\n      this._preMaskLayer = curMaskLayer;\n    }\n  }\n}\n","/**\n * Fog Mode.\n */\nexport enum FogMode {\n  /** Disable fog. */\n  None,\n  /** Linear fog. */\n  Linear,\n  /** Exponential fog. */\n  Exponential,\n  /** Exponential squared fog. */\n  ExponentialSquared\n}\n","/**\n * Diffuse mode.\n */\nexport enum DiffuseMode {\n  /** Solid color mode. */\n  SolidColor,\n\n  /**\n   * SH mode\n   * @remarks\n   * Use SH3 to represent irradiance environment maps efficiently, allowing for interactive rendering of diffuse objects under distant illumination.\n   */\n  SphericalHarmonics\n}\n","import { Color, SphericalHarmonics3 } from \"@galacean/engine-math\";\nimport { Scene } from \"../Scene\";\nimport { ShaderData } from \"../shader\";\nimport { ShaderMacro } from \"../shader/ShaderMacro\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { TextureCube } from \"../texture\";\nimport { DiffuseMode } from \"./enums/DiffuseMode\";\nimport { ReferResource } from \"../asset/ReferResource\";\nimport { Engine } from \"../Engine\";\n\n/**\n * Ambient light.\n */\nexport class AmbientLight extends ReferResource {\n  private static _shMacro: ShaderMacro = ShaderMacro.getByName(\"SCENE_USE_SH\");\n  private static _specularMacro: ShaderMacro = ShaderMacro.getByName(\"SCENE_USE_SPECULAR_ENV\");\n  private static _decodeRGBMMacro: ShaderMacro = ShaderMacro.getByName(\"SCENE_IS_DECODE_ENV_RGBM\");\n\n  private static _diffuseColorProperty: ShaderProperty = ShaderProperty.getByName(\"scene_EnvMapLight.diffuse\");\n  private static _diffuseSHProperty: ShaderProperty = ShaderProperty.getByName(\"scene_EnvSH\");\n  private static _diffuseIntensityProperty: ShaderProperty = ShaderProperty.getByName(\n    \"scene_EnvMapLight.diffuseIntensity\"\n  );\n  private static _specularTextureProperty: ShaderProperty = ShaderProperty.getByName(\"scene_EnvSpecularSampler\");\n  private static _specularIntensityProperty: ShaderProperty = ShaderProperty.getByName(\n    \"scene_EnvMapLight.specularIntensity\"\n  );\n  private static _mipLevelProperty: ShaderProperty = ShaderProperty.getByName(\"scene_EnvMapLight.mipMapLevel\");\n\n  private _diffuseSphericalHarmonics: SphericalHarmonics3;\n  private _diffuseSolidColor: Color = new Color(0.212, 0.227, 0.259);\n  private _diffuseIntensity: number = 1.0;\n  private _specularTexture: TextureCube;\n  private _specularIntensity: number = 1.0;\n  private _diffuseMode: DiffuseMode = DiffuseMode.SolidColor;\n  private _shArray: Float32Array = new Float32Array(27);\n  private _scenes: Scene[] = [];\n  private _specularTextureDecodeRGBM: boolean = false;\n\n  /**\n   * Whether to decode from specularTexture with RGBM format.\n   */\n  get specularTextureDecodeRGBM(): boolean {\n    return this._specularTextureDecodeRGBM;\n  }\n\n  set specularTextureDecodeRGBM(value: boolean) {\n    this._specularTextureDecodeRGBM = value;\n\n    const scenes = this._scenes;\n    for (let i = 0, n = scenes.length; i < n; i++) {\n      this._setSpecularTextureDecodeRGBM(scenes[i].shaderData);\n    }\n  }\n\n  /**\n   * Diffuse mode of ambient light.\n   */\n  get diffuseMode(): DiffuseMode {\n    return this._diffuseMode;\n  }\n\n  set diffuseMode(value: DiffuseMode) {\n    this._diffuseMode = value;\n\n    const scenes = this._scenes;\n    for (let i = 0, n = scenes.length; i < n; i++) {\n      this._setDiffuseMode(scenes[i].shaderData);\n    }\n  }\n\n  /**\n   * Diffuse reflection solid color.\n   * @remarks Effective when diffuse reflection mode is `DiffuseMode.SolidColor`.\n   */\n  get diffuseSolidColor(): Color {\n    return this._diffuseSolidColor;\n  }\n\n  set diffuseSolidColor(value: Color) {\n    if (value !== this._diffuseSolidColor) {\n      this._diffuseSolidColor.copyFrom(value);\n    }\n  }\n\n  /**\n   * Diffuse reflection spherical harmonics 3.\n   * @remarks Effective when diffuse reflection mode is `DiffuseMode.SphericalHarmonics`.\n   */\n  get diffuseSphericalHarmonics(): SphericalHarmonics3 {\n    return this._diffuseSphericalHarmonics;\n  }\n\n  set diffuseSphericalHarmonics(value: SphericalHarmonics3) {\n    this._diffuseSphericalHarmonics = value;\n    if (value) {\n      this._preComputeSH(value, this._shArray);\n      const scenes = this._scenes;\n      for (let i = 0, n = scenes.length; i < n; i++) {\n        scenes[i].shaderData.setFloatArray(AmbientLight._diffuseSHProperty, this._shArray);\n      }\n    }\n  }\n\n  /**\n   * Diffuse reflection intensity.\n   */\n  get diffuseIntensity(): number {\n    return this._diffuseIntensity;\n  }\n\n  set diffuseIntensity(value: number) {\n    this._diffuseIntensity = value;\n\n    const scenes = this._scenes;\n    for (let i = 0, n = scenes.length; i < n; i++) {\n      scenes[i].shaderData.setFloat(AmbientLight._diffuseIntensityProperty, value);\n    }\n  }\n\n  /**\n   * Specular reflection texture.\n   */\n  get specularTexture(): TextureCube {\n    return this._specularTexture;\n  }\n\n  set specularTexture(value: TextureCube) {\n    this._specularTexture = value;\n\n    const scenes = this._scenes;\n    for (let i = 0, n = scenes.length; i < n; i++) {\n      this._setSpecularTexture(scenes[i].shaderData);\n    }\n  }\n\n  /**\n   * Specular reflection intensity.\n   */\n  get specularIntensity(): number {\n    return this._specularIntensity;\n  }\n\n  set specularIntensity(value: number) {\n    this._specularIntensity = value;\n\n    for (let i = 0, n = this._scenes.length; i < n; i++) {\n      this._scenes[i].shaderData.setFloat(AmbientLight._specularIntensityProperty, value);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _addToScene(scene: Scene): void {\n    this._addReferCount(1);\n    this._scenes.push(scene);\n    const shaderData = scene.shaderData;\n    shaderData.setColor(AmbientLight._diffuseColorProperty, this._diffuseSolidColor);\n    shaderData.setFloat(AmbientLight._diffuseIntensityProperty, this._diffuseIntensity);\n    shaderData.setFloat(AmbientLight._specularIntensityProperty, this._specularIntensity);\n    shaderData.setFloatArray(AmbientLight._diffuseSHProperty, this._shArray);\n\n    this._setDiffuseMode(shaderData);\n    this._setSpecularTextureDecodeRGBM(shaderData);\n    this._setSpecularTexture(shaderData);\n  }\n\n  /**\n   * @internal\n   */\n  _removeFromScene(scene: Scene): void {\n    this._addReferCount(-1);\n    const scenes = this._scenes;\n    const index = scenes.indexOf(scene);\n    scenes.splice(index, 1);\n    const shaderData = scene.shaderData;\n    shaderData.setTexture(AmbientLight._specularTextureProperty, null);\n    shaderData.disableMacro(AmbientLight._specularMacro);\n  }\n\n  constructor(engine: Engine) {\n    super(engine);\n  }\n\n  private _setDiffuseMode(sceneShaderData: ShaderData): void {\n    if (this._diffuseMode === DiffuseMode.SphericalHarmonics) {\n      sceneShaderData.enableMacro(AmbientLight._shMacro);\n    } else {\n      sceneShaderData.disableMacro(AmbientLight._shMacro);\n    }\n  }\n\n  private _setSpecularTexture(sceneShaderData: ShaderData): void {\n    if (this._specularTexture) {\n      sceneShaderData.setTexture(AmbientLight._specularTextureProperty, this._specularTexture);\n      sceneShaderData.setFloat(AmbientLight._mipLevelProperty, this._specularTexture.mipmapCount - 1);\n      sceneShaderData.enableMacro(AmbientLight._specularMacro);\n    } else {\n      sceneShaderData.disableMacro(AmbientLight._specularMacro);\n    }\n  }\n\n  private _setSpecularTextureDecodeRGBM(sceneShaderData: ShaderData): void {\n    if (this._specularTextureDecodeRGBM) {\n      sceneShaderData.enableMacro(AmbientLight._decodeRGBMMacro);\n    } else {\n      sceneShaderData.disableMacro(AmbientLight._decodeRGBMMacro);\n    }\n  }\n\n  private _preComputeSH(sh: SphericalHarmonics3, out: Float32Array): void {\n    /**\n     * Basis constants\n     *\n     * 0: 1/2 * Math.sqrt(1 / Math.PI)\n     *\n     * 1: -1/2 * Math.sqrt(3 / Math.PI)\n     * 2: 1/2 * Math.sqrt(3 / Math.PI)\n     * 3: -1/2 * Math.sqrt(3 / Math.PI)\n     *\n     * 4: 1/2 * Math.sqrt(15 / Math.PI)\n     * 5: -1/2 * Math.sqrt(15 / Math.PI)\n     * 6: 1/4 * Math.sqrt(5 / Math.PI)\n     * 7: -1/2 * Math.sqrt(15 / Math.PI)\n     * 8: 1/4 * Math.sqrt(15 / Math.PI)\n     */\n\n    /**\n     * Convolution kernel\n     *\n     * 0: Math.PI\n     * 1: (2 * Math.PI) / 3\n     * 2: Math.PI / 4\n     */\n\n    const src = sh.coefficients;\n\n    // l0\n    out[0] = src[0] * 0.886227; // kernel0 * basis0 = 0.886227\n    out[1] = src[1] * 0.886227;\n    out[2] = src[2] * 0.886227;\n\n    // l1\n    out[3] = src[3] * -1.023327; // kernel1 * basis1 = -1.023327;\n    out[4] = src[4] * -1.023327;\n    out[5] = src[5] * -1.023327;\n    out[6] = src[6] * 1.023327; // kernel1 * basis2 = 1.023327\n    out[7] = src[7] * 1.023327;\n    out[8] = src[8] * 1.023327;\n    out[9] = src[9] * -1.023327; // kernel1 * basis3 = -1.023327\n    out[10] = src[10] * -1.023327;\n    out[11] = src[11] * -1.023327;\n\n    // l2\n    out[12] = src[12] * 0.858086; // kernel2 * basis4 = 0.858086\n    out[13] = src[13] * 0.858086;\n    out[14] = src[14] * 0.858086;\n    out[15] = src[15] * -0.858086; // kernel2 * basis5 = -0.858086\n    out[16] = src[16] * -0.858086;\n    out[17] = src[17] * -0.858086;\n    out[18] = src[18] * 0.247708; // kernel2 * basis6 = 0.247708\n    out[19] = src[19] * 0.247708;\n    out[20] = src[20] * 0.247708;\n    out[21] = src[21] * -0.858086; // kernel2 * basis7 = -0.858086\n    out[22] = src[22] * -0.858086;\n    out[23] = src[23] * -0.858086;\n    out[24] = src[24] * 0.429042; // kernel2 * basis8 = 0.429042\n    out[25] = src[25] * 0.429042;\n    out[26] = src[26] * 0.429042;\n  }\n}\n","import { Color, MathUtil, Matrix } from \"@galacean/engine-math\";\nimport { Component } from \"../Component\";\nimport { Layer } from \"../Layer\";\nimport { ignoreClone } from \"../clone/CloneManager\";\nimport { ShadowType } from \"../shadow\";\n\n/**\n * Light base class.\n */\nexport abstract class Light extends Component {\n  /** Light Intensity */\n  intensity = 1;\n\n  /**\n   * Culling mask - which layers the light affect.\n   * @remarks Support bit manipulation, corresponding to `Layer`.\n   */\n  cullingMask = Layer.Everything;\n\n  /** How this light casts shadows. */\n  shadowType = ShadowType.None;\n  /** Shadow bias.*/\n  shadowBias = 1;\n  /** Shadow mapping normal-based bias. */\n  shadowNormalBias = 1;\n\n  /**\n   * @deprecated\n   * Please use `shadowNearPlaneOffset` instead.\n   */\n  shadowNearPlane = 0.1;\n\n  /** @internal */\n  @ignoreClone\n  _lightIndex = -1;\n  /** @internal */\n  _lightColor = new Color();\n\n  private _shadowStrength = 1.0;\n  private _color = new Color(1, 1, 1, 1);\n  private _viewMat: Matrix;\n  private _inverseViewMat: Matrix;\n\n  /** Shadow intensity, the larger the value, the clearer and darker the shadow, range [0,1]. */\n  get shadowStrength(): number {\n    return this._shadowStrength;\n  }\n\n  set shadowStrength(value: number) {\n    this._shadowStrength = MathUtil.clamp(value, 0, 1);\n  }\n\n  /**\n   * Light Color.\n   */\n  get color(): Color {\n    return this._color;\n  }\n\n  set color(value: Color) {\n    if (this._color !== value) {\n      this._color.copyFrom(value);\n    }\n  }\n\n  /**\n   * View matrix.\n   */\n  get viewMatrix(): Matrix {\n    if (!this._viewMat) this._viewMat = new Matrix();\n    Matrix.invert(this.entity.transform.worldMatrix, this._viewMat);\n    return this._viewMat;\n  }\n\n  /**\n   * Inverse view matrix.\n   */\n  get inverseViewMatrix(): Matrix {\n    if (!this._inverseViewMat) this._inverseViewMat = new Matrix();\n    Matrix.invert(this.viewMatrix, this._inverseViewMat);\n    return this._inverseViewMat;\n  }\n\n  /**\n   * Light Color, include intensity.\n   * @internal\n   */\n  _getLightIntensityColor(): Color {\n    this._lightColor.r = this.color.r * this.intensity;\n    this._lightColor.g = this.color.g * this.intensity;\n    this._lightColor.b = this.color.b * this.intensity;\n    this._lightColor.a = this.color.a * this.intensity;\n    return this._lightColor;\n  }\n}\n","import { Color, Vector3 } from \"@galacean/engine-math\";\nimport { ColorSpace } from \"../enums/ColorSpace\";\nimport { ShaderData } from \"../shader\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { Light } from \"./Light\";\n\n/**\n * Directional light.\n */\nexport class DirectLight extends Light {\n  private static _cullingMaskProperty: ShaderProperty = ShaderProperty.getByName(\"scene_DirectLightCullingMask\");\n  private static _colorProperty: ShaderProperty = ShaderProperty.getByName(\"scene_DirectLightColor\");\n  private static _directionProperty: ShaderProperty = ShaderProperty.getByName(\"scene_DirectLightDirection\");\n\n  /**\n   * @internal\n   */\n  static _updateShaderData(shaderData: ShaderData, data: IDirectLightShaderData): void {\n    shaderData.setIntArray(DirectLight._cullingMaskProperty, data.cullingMask);\n    shaderData.setFloatArray(DirectLight._colorProperty, data.color);\n    shaderData.setFloatArray(DirectLight._directionProperty, data.direction);\n  }\n\n  /**\n   * The offset distance in the opposite direction of light direction when generating shadows.\n   * @remarks Increasing this value can avoid the holes in the shadow caused by low polygon models.\n   */\n  shadowNearPlaneOffset = 0.1;\n\n  private _reverseDirection: Vector3 = new Vector3();\n\n  /**\n   * Get direction.\n   */\n  get direction(): Vector3 {\n    return this.entity.transform.worldForward;\n  }\n\n  /**\n   * Get the opposite direction of the directional light direction.\n   */\n  get reverseDirection(): Vector3 {\n    Vector3.scale(this.direction, -1, this._reverseDirection);\n    return this._reverseDirection;\n  }\n\n  /**\n   * @internal\n   */\n  _appendData(lightIndex: number, data: IDirectLightShaderData): void {\n    const cullingMaskStart = lightIndex * 2;\n    const colorStart = lightIndex * 3;\n    const directionStart = lightIndex * 3;\n    const lightColor = this._getLightIntensityColor();\n    const direction = this.direction;\n\n    const cullingMask = this.cullingMask;\n    data.cullingMask[cullingMaskStart] = cullingMask & 65535;\n    data.cullingMask[cullingMaskStart + 1] = (cullingMask >>> 16) & 65535;\n\n    if (this.engine.settings.colorSpace === ColorSpace.Linear) {\n      data.color[colorStart] = Color.gammaToLinearSpace(lightColor.r);\n      data.color[colorStart + 1] = Color.gammaToLinearSpace(lightColor.g);\n      data.color[colorStart + 2] = Color.gammaToLinearSpace(lightColor.b);\n    } else {\n      data.color[colorStart] = lightColor.r;\n      data.color[colorStart + 1] = lightColor.g;\n      data.color[colorStart + 2] = lightColor.b;\n    }\n    data.direction[directionStart] = direction.x;\n    data.direction[directionStart + 1] = direction.y;\n    data.direction[directionStart + 2] = direction.z;\n  }\n\n  /**\n   * @internal\n   */\n  override _onEnableInScene(): void {\n    this.scene._lightManager._attachDirectLight(this);\n  }\n\n  /**\n   * @internal\n   */\n  override _onDisableInScene(): void {\n    this.scene._lightManager._detachDirectLight(this);\n  }\n}\n\n/**\n * Shader properties data of direct lights in the scene.\n */\nexport interface IDirectLightShaderData {\n  // Culling mask - which layers the light affect.\n  cullingMask: Int32Array;\n  // Light color.\n  color: Float32Array;\n  // Light direction.\n  direction: Float32Array;\n}\n","import { Color, Vector3 } from \"@galacean/engine-math\";\nimport { ColorSpace } from \"../enums/ColorSpace\";\nimport { ShaderData } from \"../shader\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { Light } from \"./Light\";\n\n/**\n * Point light.\n */\nexport class PointLight extends Light {\n  private static _cullingMaskProperty: ShaderProperty = ShaderProperty.getByName(\"scene_PointLightCullingMask\");\n  private static _colorProperty: ShaderProperty = ShaderProperty.getByName(\"scene_PointLightColor\");\n  private static _positionProperty: ShaderProperty = ShaderProperty.getByName(\"scene_PointLightPosition\");\n  private static _distanceProperty: ShaderProperty = ShaderProperty.getByName(\"scene_PointLightDistance\");\n\n  /**\n   * @internal\n   */\n  static _updateShaderData(shaderData: ShaderData, data: IPointLightShaderData): void {\n    shaderData.setIntArray(PointLight._cullingMaskProperty, data.cullingMask);\n    shaderData.setFloatArray(PointLight._colorProperty, data.color);\n    shaderData.setFloatArray(PointLight._positionProperty, data.position);\n    shaderData.setFloatArray(PointLight._distanceProperty, data.distance);\n  }\n\n  /** Defines a distance cutoff at which the light's intensity must be considered zero. */\n  distance: number = 100;\n\n  /**\n   * Get light position.\n   */\n  get position(): Vector3 {\n    return this.entity.transform.worldPosition;\n  }\n\n  /**\n   * @internal\n   */\n  _appendData(lightIndex: number, data: IPointLightShaderData): void {\n    const cullingMaskStart = lightIndex * 2;\n    const colorStart = lightIndex * 3;\n    const positionStart = lightIndex * 3;\n    const distanceStart = lightIndex;\n\n    const lightColor = this._getLightIntensityColor();\n    const lightPosition = this.position;\n\n    const cullingMask = this.cullingMask;\n    data.cullingMask[cullingMaskStart] = cullingMask & 65535;\n    data.cullingMask[cullingMaskStart + 1] = (cullingMask >>> 16) & 65535;\n\n    if (this.engine.settings.colorSpace === ColorSpace.Linear) {\n      data.color[colorStart] = Color.gammaToLinearSpace(lightColor.r);\n      data.color[colorStart + 1] = Color.gammaToLinearSpace(lightColor.g);\n      data.color[colorStart + 2] = Color.gammaToLinearSpace(lightColor.b);\n    } else {\n      data.color[colorStart] = lightColor.r;\n      data.color[colorStart + 1] = lightColor.g;\n      data.color[colorStart + 2] = lightColor.b;\n    }\n    data.position[positionStart] = lightPosition.x;\n    data.position[positionStart + 1] = lightPosition.y;\n    data.position[positionStart + 2] = lightPosition.z;\n    data.distance[distanceStart] = this.distance;\n  }\n\n  /**\n   * @internal\n   */\n  override _onEnableInScene(): void {\n    this.scene._lightManager._attachPointLight(this);\n  }\n\n  /**\n   * @internal\n   */\n  override _onDisableInScene(): void {\n    this.scene._lightManager._detachPointLight(this);\n  }\n}\n\n/**\n * Shader properties data of point lights in the scene.\n */\nexport interface IPointLightShaderData {\n  // Culling mask - which layers the light affect.\n  cullingMask: Int32Array;\n  // Light color.\n  color: Float32Array;\n  // Light position.\n  position: Float32Array;\n  // Defines a distance cutoff at which the light's intensity must be considered zero.\n  distance: Float32Array;\n}\n","import { Color, Matrix, Vector3 } from \"@galacean/engine-math\";\nimport { ColorSpace } from \"../enums/ColorSpace\";\nimport { ShaderData } from \"../shader\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { Light } from \"./Light\";\n\n/**\n * Spot light.\n */\nexport class SpotLight extends Light {\n  private static _cullingMaskProperty: ShaderProperty = ShaderProperty.getByName(\"scene_SpotLightCullingMask\");\n  private static _colorProperty: ShaderProperty = ShaderProperty.getByName(\"scene_SpotLightColor\");\n  private static _positionProperty: ShaderProperty = ShaderProperty.getByName(\"scene_SpotLightPosition\");\n  private static _directionProperty: ShaderProperty = ShaderProperty.getByName(\"scene_SpotLightDirection\");\n  private static _distanceProperty: ShaderProperty = ShaderProperty.getByName(\"scene_SpotLightDistance\");\n  private static _angleCosProperty: ShaderProperty = ShaderProperty.getByName(\"scene_SpotLightAngleCos\");\n  private static _penumbraCosProperty: ShaderProperty = ShaderProperty.getByName(\"scene_SpotLightPenumbraCos\");\n\n  /**\n   * @internal\n   */\n  static _updateShaderData(shaderData: ShaderData, data: ISpotLightShaderData): void {\n    shaderData.setIntArray(SpotLight._cullingMaskProperty, data.cullingMask);\n    shaderData.setFloatArray(SpotLight._colorProperty, data.color);\n    shaderData.setFloatArray(SpotLight._positionProperty, data.position);\n    shaderData.setFloatArray(SpotLight._directionProperty, data.direction);\n    shaderData.setFloatArray(SpotLight._distanceProperty, data.distance);\n    shaderData.setFloatArray(SpotLight._angleCosProperty, data.angleCos);\n    shaderData.setFloatArray(SpotLight._penumbraCosProperty, data.penumbraCos);\n  }\n\n  /** Defines a distance cutoff at which the light's intensity must be considered zero. */\n  distance: number = 100;\n  /** Angle, in radians, from centre of spotlight where falloff begins. */\n  angle: number = Math.PI / 6;\n  /** Angle, in radians, from falloff begins to ends. */\n  penumbra: number = Math.PI / 12;\n\n  private _inverseDirection: Vector3 = new Vector3();\n  private _projectMatrix: Matrix = new Matrix();\n\n  /**\n   * Get light position.\n   */\n  get position(): Vector3 {\n    return this.entity.transform.worldPosition;\n  }\n\n  /**\n   * Get light direction.\n   */\n  get direction(): Vector3 {\n    return this.entity.transform.worldForward;\n  }\n\n  /**\n   * Get the opposite direction of the spotlight.\n   */\n  get reverseDirection(): Vector3 {\n    Vector3.scale(this.direction, -1, this._inverseDirection);\n    return this._inverseDirection;\n  }\n\n  /**\n   * @internal\n   */\n  _appendData(lightIndex: number, data: ISpotLightShaderData): void {\n    const cullingMaskStart = lightIndex * 2;\n    const colorStart = lightIndex * 3;\n    const positionStart = lightIndex * 3;\n    const directionStart = lightIndex * 3;\n    const distanceStart = lightIndex;\n    const penumbraCosStart = lightIndex;\n    const angleCosStart = lightIndex;\n\n    const lightColor = this._getLightIntensityColor();\n    const position = this.position;\n    const direction = this.direction;\n\n    const cullingMask = this.cullingMask;\n    data.cullingMask[cullingMaskStart] = cullingMask & 65535;\n    data.cullingMask[cullingMaskStart + 1] = (cullingMask >>> 16) & 65535;\n\n    if (this.engine.settings.colorSpace === ColorSpace.Linear) {\n      data.color[colorStart] = Color.gammaToLinearSpace(lightColor.r);\n      data.color[colorStart + 1] = Color.gammaToLinearSpace(lightColor.g);\n      data.color[colorStart + 2] = Color.gammaToLinearSpace(lightColor.b);\n    } else {\n      data.color[colorStart] = lightColor.r;\n      data.color[colorStart + 1] = lightColor.g;\n      data.color[colorStart + 2] = lightColor.b;\n    }\n    data.position[positionStart] = position.x;\n    data.position[positionStart + 1] = position.y;\n    data.position[positionStart + 2] = position.z;\n    data.direction[directionStart] = direction.x;\n    data.direction[directionStart + 1] = direction.y;\n    data.direction[directionStart + 2] = direction.z;\n    data.distance[distanceStart] = this.distance;\n    data.angleCos[angleCosStart] = Math.cos(this.angle);\n    data.penumbraCos[penumbraCosStart] = Math.cos(this.angle + this.penumbra);\n  }\n\n  /**\n   * @internal\n   */\n  override _onEnableInScene(): void {\n    this.scene._lightManager._attachSpotLight(this);\n  }\n\n  /**\n   * @internal\n   */\n  override _onDisableInScene(): void {\n    this.scene._lightManager._detachSpotLight(this);\n  }\n}\n\n/**\n * Shader properties data of spot lights in the scene.\n */\nexport interface ISpotLightShaderData {\n  // Culling mask - which layers the light affect.\n  cullingMask: Int32Array;\n  // Light Color.\n  color: Float32Array;\n  // Light position.\n  position: Float32Array;\n  // Light direction\n  direction: Float32Array;\n  // Defines a distance cutoff at which the light's intensity must be considered zero.\n  distance: Float32Array;\n  // Angle, in radians, from centre of spotlight where falloff begins.\n  angleCos: Float32Array;\n  // Angle, in radians, from falloff begins to ends.\n  penumbraCos: Float32Array;\n}\n","import { ShaderData, ShaderProperty } from \"../shader\";\nimport { ShadowType } from \"../shadow\";\nimport { DisorderedArray } from \"../utils/DisorderedArray\";\nimport { DirectLight, IDirectLightShaderData } from \"./DirectLight\";\nimport { PointLight, IPointLightShaderData } from \"./PointLight\";\nimport { SpotLight, ISpotLightShaderData } from \"./SpotLight\";\n\n/**\n * Light manager.\n */\nexport class LightManager {\n  /** @internal */\n  static _sunlightColorProperty = ShaderProperty.getByName(\"scene_SunlightColor\");\n  /** @internal */\n  static _sunlightDirectionProperty = ShaderProperty.getByName(\"scene_SunlightDirection\");\n  /**\n   * Each type of light source is at most 10, beyond which it will not take effect.\n   * */\n  private static _maxLight: number = 10;\n\n  /** @internal */\n  _spotLights: DisorderedArray<SpotLight> = new DisorderedArray();\n  /** @internal */\n  _pointLights: DisorderedArray<PointLight> = new DisorderedArray();\n  /** @internal */\n  _directLights: DisorderedArray<DirectLight> = new DisorderedArray();\n  /** @internal */\n  _sunlight: DirectLight | null;\n\n  private _directData: IDirectLightShaderData = {\n    cullingMask: new Int32Array(LightManager._maxLight * 2),\n    color: new Float32Array(LightManager._maxLight * 3),\n    direction: new Float32Array(LightManager._maxLight * 3)\n  };\n\n  private _pointData: IPointLightShaderData = {\n    cullingMask: new Int32Array(LightManager._maxLight * 2),\n    color: new Float32Array(LightManager._maxLight * 3),\n    position: new Float32Array(LightManager._maxLight * 3),\n    distance: new Float32Array(LightManager._maxLight)\n  };\n\n  private _spotData: ISpotLightShaderData = {\n    cullingMask: new Int32Array(LightManager._maxLight * 2),\n    color: new Float32Array(LightManager._maxLight * 3),\n    position: new Float32Array(LightManager._maxLight * 3),\n    direction: new Float32Array(LightManager._maxLight * 3),\n    distance: new Float32Array(LightManager._maxLight),\n    angleCos: new Float32Array(LightManager._maxLight),\n    penumbraCos: new Float32Array(LightManager._maxLight)\n  };\n\n  /**\n   * @internal\n   */\n  _attachSpotLight(light: SpotLight): void {\n    light._lightIndex = this._spotLights.length;\n    this._spotLights.add(light);\n  }\n\n  /**\n   * @internal\n   */\n  _detachSpotLight(light: SpotLight): void {\n    const replaced = this._spotLights.deleteByIndex(light._lightIndex);\n    replaced && (replaced._lightIndex = light._lightIndex);\n    light._lightIndex = -1;\n  }\n\n  /**\n   * @internal\n   */\n  _attachPointLight(light: PointLight): void {\n    light._lightIndex = this._pointLights.length;\n    this._pointLights.add(light);\n  }\n\n  /**\n   * @internal\n   */\n  _detachPointLight(light: PointLight): void {\n    const replaced = this._pointLights.deleteByIndex(light._lightIndex);\n    replaced && (replaced._lightIndex = light._lightIndex);\n    light._lightIndex = -1;\n  }\n\n  /**\n   * @internal\n   */\n  _attachDirectLight(light: DirectLight): void {\n    light._lightIndex = this._directLights.length;\n    this._directLights.add(light);\n  }\n\n  /**\n   * @internal\n   */\n  _detachDirectLight(light: DirectLight): void {\n    const replaced = this._directLights.deleteByIndex(light._lightIndex);\n    replaced && (replaced._lightIndex = light._lightIndex);\n    light._lightIndex = -1;\n  }\n\n  /**\n   * @internal\n   */\n  _updateShaderData(shaderData: ShaderData): void {\n    const { _spotLights: spotLight, _pointLights: pointLight, _directLights: directLight } = this;\n    const { _spotData: spotData, _pointData: pointData, _directData: directData } = this;\n    const maxLight = LightManager._maxLight;\n    const spotLightCount = Math.min(spotLight.length, maxLight);\n    const pointLightCount = Math.min(pointLight.length, maxLight);\n    const directLightCount = Math.min(directLight.length, maxLight);\n\n    for (let i = 0; i < spotLightCount; i++) {\n      spotLight.get(i)._appendData(i, spotData);\n    }\n\n    for (let i = 0; i < pointLightCount; i++) {\n      pointLight.get(i)._appendData(i, pointData);\n    }\n\n    for (let i = 0; i < directLightCount; i++) {\n      directLight.get(i)._appendData(i, directData);\n    }\n\n    if (directLightCount) {\n      DirectLight._updateShaderData(shaderData, directData);\n      shaderData.enableMacro(\"SCENE_DIRECT_LIGHT_COUNT\", directLightCount.toString());\n    } else {\n      shaderData.disableMacro(\"SCENE_DIRECT_LIGHT_COUNT\");\n    }\n\n    if (pointLightCount) {\n      PointLight._updateShaderData(shaderData, pointData);\n      shaderData.enableMacro(\"SCENE_POINT_LIGHT_COUNT\", pointLightCount.toString());\n    } else {\n      shaderData.disableMacro(\"SCENE_POINT_LIGHT_COUNT\");\n    }\n\n    if (spotLightCount) {\n      SpotLight._updateShaderData(shaderData, spotData);\n      shaderData.enableMacro(\"SCENE_SPOT_LIGHT_COUNT\", spotLightCount.toString());\n    } else {\n      shaderData.disableMacro(\"SCENE_SPOT_LIGHT_COUNT\");\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _gc() {\n    this._spotLights.garbageCollection();\n    this._pointLights.garbageCollection();\n    this._directLights.garbageCollection();\n  }\n\n  /**\n   * @internal\n   */\n  _updateSunlightIndex(light: DirectLight): void {\n    const directLights = this._directLights;\n    const index = light._lightIndex;\n\n    // -1 means no sun light, 0 means the first direct light already is sun light\n    if (index > 0) {\n      const firstLight = directLights.get(0);\n      const sunlight = directLights.get(index);\n      directLights.set(0, sunlight);\n      directLights.set(index, firstLight);\n\n      sunlight._lightIndex = 0;\n      firstLight._lightIndex = index;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _getMaxBrightestSunlight(): DirectLight | null {\n    const directLights = this._directLights;\n\n    let sunlight = null;\n    let maxIntensity = Number.NEGATIVE_INFINITY;\n    let hasShadowLight = false;\n    for (let i = 0, n = directLights.length; i < n; i++) {\n      const currentLight = directLights.get(i);\n      if (currentLight.shadowType !== ShadowType.None && !hasShadowLight) {\n        maxIntensity = Number.NEGATIVE_INFINITY;\n        hasShadowLight = true;\n      }\n      const intensity = currentLight.intensity * currentLight.color.getBrightness();\n      if (hasShadowLight) {\n        if (currentLight.shadowType !== ShadowType.None && maxIntensity < intensity) {\n          maxIntensity = intensity;\n          sunlight = currentLight;\n        }\n      } else {\n        if (maxIntensity < intensity) {\n          maxIntensity = intensity;\n          sunlight = currentLight;\n        }\n      }\n    }\n    return sunlight;\n  }\n}\n","import { Color, MathUtil, Vector4 } from \"@galacean/engine-math\";\nimport { Camera } from \"../../Camera\";\nimport { PipelineUtils } from \"../../RenderPipeline/PipelineUtils\";\nimport { RenderContext } from \"../../RenderPipeline/RenderContext\";\nimport { Material } from \"../../material\";\nimport { Shader, ShaderMacro, ShaderPass, ShaderProperty } from \"../../shader\";\nimport blitVs from \"../../shaderlib/extra/Blit.vs.glsl\";\nimport { RenderTarget, Texture2D, TextureFilterMode, TextureWrapMode } from \"../../texture\";\n\nimport fragBlurH from \"../shaders/Bloom/BloomBlurH.glsl\";\nimport fragBlurV from \"../shaders/Bloom/BloomBlurV.glsl\";\nimport fragPrefilter from \"../shaders/Bloom/BloomPrefilter.glsl\";\nimport fragUpsample from \"../shaders/Bloom/BloomUpsample.glsl\";\n\n/**\n * This controls the size of the bloom texture.\n */\nexport enum BloomDownScaleMode {\n  /**\n   *  Use this to select half size as the starting resolution.\n   */\n  Half,\n  /**\n   *  Use this to select quarter size as the starting resolution.\n   */\n  Quarter\n}\n\nexport class BloomEffect {\n  static readonly SHADER_NAME = \"PostProcessEffect Bloom\";\n\n  // Bloom shader properties\n  private static _hqMacro: ShaderMacro = ShaderMacro.getByName(\"BLOOM_HQ\");\n  private static _dirtMacro: ShaderMacro = ShaderMacro.getByName(\"BLOOM_DIRT\");\n  private static _bloomParams = ShaderProperty.getByName(\"material_BloomParams\"); // x: threshold (linear), y: threshold knee, z: scatter\n  private static _lowMipTextureProp = ShaderProperty.getByName(\"material_lowMipTexture\");\n  private static _lowMipTexelSizeProp = ShaderProperty.getByName(\"material_lowMipTexelSize\"); // x: 1/width, y: 1/height, z: width, w: height\n\n  // Uber shader properties\n  private static _enableMacro: ShaderMacro = ShaderMacro.getByName(\"ENABLE_EFFECT_BLOOM\");\n  private static _bloomTextureProp = ShaderProperty.getByName(\"material_BloomTexture\");\n  private static _dirtTextureProp = ShaderProperty.getByName(\"material_BloomDirtTexture\");\n  private static _tintProp = ShaderProperty.getByName(\"material_BloomTint\");\n  private static _bloomIntensityParams = ShaderProperty.getByName(\"material_BloomIntensityParams\"); // x: bloom intensity, y: dirt intensity\n  private static _dirtTilingOffsetProp = ShaderProperty.getByName(\"material_BloomDirtTilingOffset\");\n\n  private _bloomMaterial: Material;\n  private _threshold: number;\n  private _scatter: number;\n  private _highQualityFiltering = false;\n\n  private _mipDownRT: RenderTarget[] = [];\n  private _mipUpRT: RenderTarget[] = [];\n  private _maxIterations = 6;\n  private _enabled = false;\n\n  /**\n   * Controls the starting resolution that this effect begins processing.\n   */\n  downScale = BloomDownScaleMode.Half;\n\n  /**\n   * Indicates whether the post process effect is enabled.\n   */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n\n  set enabled(value: boolean) {\n    if (value !== this._enabled) {\n      this._enabled = value;\n      if (value) {\n        this._uberMaterial.shaderData.enableMacro(BloomEffect._enableMacro);\n      } else {\n        this._uberMaterial.shaderData.disableMacro(BloomEffect._enableMacro);\n        this._releaseRenderTargets();\n      }\n    }\n  }\n\n  /**\n   * Set the level of brightness to filter out pixels under this level.\n   * @remarks This value is expressed in gamma-space.\n   */\n\n  get threshold(): number {\n    return this._threshold;\n  }\n\n  set threshold(value: number) {\n    value = Math.max(0, value);\n\n    if (value !== this._threshold) {\n      this._threshold = value;\n      const threshold = Color.gammaToLinearSpace(value);\n      const thresholdKnee = threshold * 0.5; // Hardcoded soft knee\n      const params = this._bloomMaterial.shaderData.getVector4(BloomEffect._bloomParams);\n      params.x = threshold;\n      params.y = thresholdKnee;\n    }\n  }\n\n  /**\n   * Controls the radius of the bloom effect.\n   */\n  get scatter(): number {\n    return this._scatter;\n  }\n\n  set scatter(value: number) {\n    value = MathUtil.clamp(value, 0, 1);\n\n    if (value !== this._scatter) {\n      this._scatter = value;\n      const params = this._bloomMaterial.shaderData.getVector4(BloomEffect._bloomParams);\n      const scatter = MathUtil.lerp(0.05, 0.95, value);\n      params.z = scatter;\n    }\n  }\n\n  /**\n   * Controls the strength of the bloom effect.\n   */\n  get intensity(): number {\n    return this._uberMaterial.shaderData.getVector4(BloomEffect._bloomIntensityParams).x;\n  }\n\n  set intensity(value: number) {\n    value = Math.max(0, value);\n\n    this._uberMaterial.shaderData.getVector4(BloomEffect._bloomIntensityParams).x = value;\n  }\n\n  /**\n   * Specifies the tint of the bloom effect.\n   */\n  get tint(): Color {\n    return this._uberMaterial.shaderData.getColor(BloomEffect._tintProp);\n  }\n\n  set tint(value: Color) {\n    const tint = this._uberMaterial.shaderData.getColor(BloomEffect._tintProp);\n    if (value !== tint) {\n      tint.copyFrom(value);\n    }\n  }\n\n  /**\n   * Controls whether to use bicubic sampling instead of bilinear sampling for the upSampling passes.\n   * @remarks This is slightly more expensive but helps getting smoother visuals.\n   */\n\n  get highQualityFiltering(): boolean {\n    return this._highQualityFiltering;\n  }\n\n  set highQualityFiltering(value: boolean) {\n    if (value !== this._highQualityFiltering) {\n      this._highQualityFiltering = value;\n      if (value) {\n        this._bloomMaterial.shaderData.enableMacro(BloomEffect._hqMacro);\n        this._uberMaterial.shaderData.enableMacro(BloomEffect._hqMacro);\n      } else {\n        this._bloomMaterial.shaderData.disableMacro(BloomEffect._hqMacro);\n        this._uberMaterial.shaderData.disableMacro(BloomEffect._hqMacro);\n      }\n    }\n  }\n\n  /**\n   * Specifies a Texture to add smudges or dust to the bloom effect.\n   */\n  get dirtTexture(): Texture2D {\n    return <Texture2D>this._uberMaterial.shaderData.getTexture(BloomEffect._dirtTextureProp);\n  }\n\n  set dirtTexture(value: Texture2D) {\n    this._uberMaterial.shaderData.setTexture(BloomEffect._dirtTextureProp, value);\n    if (value) {\n      this._uberMaterial.shaderData.enableMacro(BloomEffect._dirtMacro);\n    } else {\n      this._uberMaterial.shaderData.disableMacro(BloomEffect._dirtMacro);\n    }\n  }\n\n  /**\n   * Controls the strength of the lens dirt.\n   */\n  get dirtIntensity(): number {\n    return this._uberMaterial.shaderData.getVector4(BloomEffect._bloomIntensityParams).y;\n  }\n\n  set dirtIntensity(value: number) {\n    value = Math.max(0, value);\n\n    this._uberMaterial.shaderData.getVector4(BloomEffect._bloomIntensityParams).y = value;\n  }\n\n  constructor(private _uberMaterial: Material) {\n    const engine = _uberMaterial.engine;\n    const material = new Material(engine, Shader.find(BloomEffect.SHADER_NAME));\n    const depthState = material.renderState.depthState;\n\n    depthState.enabled = false;\n    depthState.writeEnabled = false;\n\n    const bloomShaderData = material.shaderData;\n    const uberShaderData = _uberMaterial.shaderData;\n    bloomShaderData.setVector4(BloomEffect._bloomParams, new Vector4());\n    bloomShaderData.setVector4(BloomEffect._lowMipTexelSizeProp, new Vector4());\n\n    uberShaderData.setVector4(BloomEffect._bloomIntensityParams, new Vector4(1, 1, 0, 0));\n    uberShaderData.setVector4(BloomEffect._dirtTilingOffsetProp, new Vector4());\n    uberShaderData.setColor(BloomEffect._tintProp, new Color(1, 1, 1, 1));\n\n    this._bloomMaterial = material;\n    this.threshold = 0.9;\n    this.scatter = 0.7;\n    this.intensity = 1;\n    this.dirtIntensity = 1;\n  }\n\n  onRender(context: RenderContext, srcTexture: Texture2D): void {\n    const camera = context.camera;\n    const downRes = this.downScale === BloomDownScaleMode.Half ? 1 : 2;\n    const pixelViewport = camera.pixelViewport;\n    const tw = pixelViewport.width >> downRes;\n    const th = pixelViewport.height >> downRes;\n\n    // Determine the iteration count\n    const mipCount = this._calculateMipCount(tw, th);\n\n    // Prefilter\n    this._prefilter(camera, srcTexture, tw, th, mipCount);\n    // Down sample - gaussian pyramid\n    this._downsample(mipCount);\n    // Up sample (bilinear by default, HQ filtering does bicubic instead\n    this._upsample(mipCount);\n    // Setup bloom on uber\n    this._setupUber(camera);\n  }\n\n  private _calculateMipCount(tw: number, th: number): number {\n    const maxSize = Math.max(tw, th);\n    const iterations = Math.floor(Math.log2(maxSize) - 1);\n    return Math.min(Math.max(iterations, 1), this._maxIterations);\n  }\n\n  private _prefilter(camera: Camera, srcTexture: Texture2D, tw: number, th: number, mipCount: number): void {\n    const engine = this._uberMaterial.engine;\n    const internalColorTextureFormat = camera._getInternalColorTextureFormat();\n    let mipWidth = tw,\n      mipHeight = th;\n\n    for (let i = 0; i < mipCount; i++) {\n      this._mipUpRT[i] = PipelineUtils.recreateRenderTargetIfNeeded(\n        engine,\n        this._mipUpRT[i],\n        mipWidth,\n        mipHeight,\n        internalColorTextureFormat,\n        null,\n        false,\n        false,\n        1,\n        TextureWrapMode.Clamp,\n        TextureFilterMode.Bilinear\n      );\n      this._mipDownRT[i] = PipelineUtils.recreateRenderTargetIfNeeded(\n        engine,\n        this._mipDownRT[i],\n        mipWidth,\n        mipHeight,\n        internalColorTextureFormat,\n        null,\n        false,\n        false,\n        1,\n        TextureWrapMode.Clamp,\n        TextureFilterMode.Bilinear\n      );\n\n      mipWidth = Math.max(1, Math.floor(mipWidth / 2));\n      mipHeight = Math.max(1, Math.floor(mipHeight / 2));\n    }\n\n    PipelineUtils.blitTexture(engine, srcTexture, this._mipDownRT[0], undefined, undefined, this._bloomMaterial, 0);\n  }\n\n  private _downsample(mipCount: number): void {\n    const material = this._bloomMaterial;\n    const engine = material.engine;\n    let lastDown = this._mipDownRT[0];\n\n    // Down sample - gaussian pyramid\n    for (let i = 1; i < mipCount; i++) {\n      // Classic two pass gaussian blur - use mipUp as a temporary target\n      // First pass does 2x downsampling + 9-tap gaussian\n      // Second pass does 9-tap gaussian using a 5-tap filter + bilinear filtering\n      PipelineUtils.blitTexture(\n        engine,\n        <Texture2D>lastDown.getColorTexture(0),\n        this._mipUpRT[i],\n        undefined,\n        undefined,\n        material,\n        1\n      );\n      PipelineUtils.blitTexture(\n        engine,\n        <Texture2D>this._mipUpRT[i].getColorTexture(0),\n        this._mipDownRT[i],\n        undefined,\n        undefined,\n        material,\n        2\n      );\n\n      lastDown = this._mipDownRT[i];\n    }\n  }\n\n  private _upsample(mipCount: number): void {\n    const material = this._bloomMaterial;\n    const engine = material.engine;\n    const shaderData = material.shaderData;\n\n    // Up sample (bilinear by default, HQ filtering does bicubic instead\n    for (let i = mipCount - 2; i >= 0; i--) {\n      const lowMip = i == mipCount - 2 ? this._mipDownRT[i + 1] : this._mipUpRT[i + 1];\n      const highMip = this._mipDownRT[i];\n      const dst = this._mipUpRT[i];\n\n      shaderData.setTexture(BloomEffect._lowMipTextureProp, lowMip.getColorTexture(0));\n      if (this.highQualityFiltering) {\n        const texelSizeLow = shaderData.getVector4(BloomEffect._lowMipTexelSizeProp);\n        texelSizeLow.set(1 / lowMip.width, 1 / lowMip.height, lowMip.width, lowMip.height);\n      }\n\n      PipelineUtils.blitTexture(engine, <Texture2D>highMip.getColorTexture(0), dst, undefined, undefined, material, 3);\n    }\n  }\n\n  private _setupUber(camera: Camera): void {\n    const shaderData = this._uberMaterial.shaderData;\n    const dirtTexture = this.dirtTexture;\n\n    if (dirtTexture) {\n      const dirtTilingOffset = shaderData.getVector4(BloomEffect._dirtTilingOffsetProp);\n      const dirtRatio = dirtTexture.width / dirtTexture.height;\n      const screenRatio = camera.aspectRatio;\n      if (dirtRatio > screenRatio) {\n        dirtTilingOffset.set(screenRatio / dirtRatio, 1, (1 - dirtTilingOffset.x) * 0.5, 0);\n      } else if (dirtRatio < screenRatio) {\n        dirtTilingOffset.set(1, dirtRatio / screenRatio, 0, (1 - dirtTilingOffset.y) * 0.5);\n      } else {\n        dirtTilingOffset.set(1, 1, 0, 0);\n      }\n    }\n\n    shaderData.setTexture(BloomEffect._bloomTextureProp, this._mipUpRT[0].getColorTexture(0));\n  }\n\n  private _releaseRenderTargets(): void {\n    const length = this._mipDownRT.length;\n\n    for (let i = 0; i < length; i++) {\n      const downRT = this._mipDownRT[i];\n      const upRT = this._mipUpRT[i];\n\n      if (downRT) {\n        downRT.getColorTexture(0).destroy(true);\n        downRT.destroy(true);\n      }\n\n      if (upRT) {\n        upRT.getColorTexture(0).destroy(true);\n        upRT.destroy(true);\n      }\n    }\n\n    this._mipDownRT.length = 0;\n    this._mipUpRT.length = 0;\n  }\n}\n\nShader.create(BloomEffect.SHADER_NAME, [\n  new ShaderPass(\"Bloom Prefilter\", blitVs, fragPrefilter),\n  new ShaderPass(\"Bloom Blur Horizontal\", blitVs, fragBlurH),\n  new ShaderPass(\"Bloom Blur Vertical\", blitVs, fragBlurV),\n  new ShaderPass(\"Bloom Upsample\", blitVs, fragUpsample)\n]);\n","import { Material } from \"../../material\";\nimport { ShaderMacro } from \"../../shader\";\n\n/**\n * Options to select a tonemapping algorithm to use.\n */\nexport enum TonemappingMode {\n  /**\n   * Neutral tonemapper\n   * @remarks Use this option if you only want range-remapping with minimal impact on color hue and saturation.\n   */\n  Neutral,\n\n  /**\n   * ACES Filmic reference tonemapper (custom approximation)\n   * @remarks\n   * Use this option to apply a close approximation of the reference ACES tonemapper for a more filmic look.\n   * It is more contrasted than Neutral and has an effect on actual color hue and saturation.\n   */\n  ACES\n}\n\nexport class TonemappingEffect {\n  private static _enableMacro: ShaderMacro = ShaderMacro.getByName(\"ENABLE_EFFECT_TONEMAPPING\");\n\n  private _mode: TonemappingMode;\n  private _enabled = false;\n\n  /**\n   * Indicates whether the post process effect is enabled.\n   */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n\n  set enabled(value: boolean) {\n    if (value !== this._enabled) {\n      this._enabled = value;\n      if (value) {\n        this._uberMaterial.shaderData.enableMacro(TonemappingEffect._enableMacro);\n      } else {\n        this._uberMaterial.shaderData.disableMacro(TonemappingEffect._enableMacro);\n      }\n    }\n  }\n\n  /**\n   * Use this to select a tonemapping algorithm to use.\n   */\n  get mode(): TonemappingMode {\n    return this._mode;\n  }\n\n  set mode(value: TonemappingMode) {\n    if (value !== this._mode) {\n      this._mode = value;\n      this._uberMaterial.shaderData.enableMacro(\"TONEMAPPING_MODE\", value.toString());\n    }\n  }\n\n  constructor(private _uberMaterial: Material) {\n    this.mode = TonemappingMode.Neutral;\n  }\n}\n","import { PipelineUtils } from \"../RenderPipeline/PipelineUtils\";\nimport { RenderContext } from \"../RenderPipeline/RenderContext\";\nimport { Scene } from \"../Scene\";\nimport { Material } from \"../material\";\nimport { Shader } from \"../shader\";\nimport { RenderTarget, Texture2D } from \"../texture\";\nimport { BloomEffect, TonemappingEffect } from \"./effects\";\n\n/**\n * @internal\n */\nexport class _PostProcessManager {\n  static readonly UBER_SHADER_NAME = \"UberPost\";\n\n  /**\n   * Whether the post process manager is active.\n   */\n  isActive = true;\n\n  /** @internal */\n  _uberMaterial: Material;\n  /** @internal */\n  _bloomEffect: BloomEffect;\n  /** @internal */\n  _tonemappingEffect: TonemappingEffect;\n\n  /**\n   * Whether has active post process effect.\n   */\n  get hasActiveEffect(): boolean {\n    return this.isActive && (this._bloomEffect.enabled || this._tonemappingEffect.enabled);\n  }\n\n  /**\n   * Create a PostProcessManager.\n   * @param scene - Scene to which the current PostProcessManager belongs\n   */\n  constructor(public readonly scene: Scene) {\n    const uberShader = Shader.find(_PostProcessManager.UBER_SHADER_NAME);\n    const uberMaterial = new Material(scene.engine, uberShader);\n    const depthState = uberMaterial.renderState.depthState;\n\n    depthState.enabled = false;\n    depthState.writeEnabled = false;\n\n    const bloomEffect = new BloomEffect(uberMaterial);\n    const tonemappingEffect = new TonemappingEffect(uberMaterial);\n\n    this._uberMaterial = uberMaterial;\n    this._bloomEffect = bloomEffect;\n    this._tonemappingEffect = tonemappingEffect;\n  }\n\n  /**\n   * @internal\n   */\n  _render(context: RenderContext, srcTarget: RenderTarget, destTarget: RenderTarget): void {\n    const camera = context.camera;\n    const engine = camera.engine;\n\n    // Should blit to resolve the MSAA\n    srcTarget._blitRenderTarget();\n    const srcTexture = <Texture2D>srcTarget.getColorTexture();\n    const bloomEffect = this._bloomEffect;\n\n    if (bloomEffect.enabled) {\n      bloomEffect.onRender(context, srcTexture);\n    }\n\n    // Done with Uber, blit it\n    PipelineUtils.blitTexture(engine, srcTexture, destTarget, 0, camera.viewport, this._uberMaterial);\n  }\n}\n","import { Shader } from \"../shader\";\nimport { ShaderLib } from \"../shaderlib\";\nimport { _PostProcessManager } from \"./PostProcessManager\";\n\nimport blitVs from \"../shaderlib/extra/Blit.vs.glsl\";\nimport Filtering from \"./shaders/Filtering.glsl\";\nimport PostCommon from \"./shaders/PostCommon.glsl\";\nimport ACESTonemapping from \"./shaders/Tonemapping/ACES/ACESTonemapping.glsl\";\nimport ColorTransform from \"./shaders/Tonemapping/ACES/ColorTransform.glsl\";\nimport ODT from \"./shaders/Tonemapping/ACES/ODT.glsl\";\nimport RRT from \"./shaders/Tonemapping/ACES/RRT.glsl\";\nimport Tonescale from \"./shaders/Tonemapping/ACES/Tonescale.glsl\";\nimport NeutralTonemapping from \"./shaders/Tonemapping/NeutralTonemapping.glsl\";\nimport UberPost from \"./shaders/UberPost.glsl\";\n\nexport * from \"./effects\";\nexport { _PostProcessManager };\n\nObject.assign(ShaderLib, {\n  PostCommon,\n  Filtering,\n  ODT,\n  RRT,\n  Tonescale,\n  ColorTransform,\n  NeutralTonemapping,\n  ACESTonemapping\n});\n\nShader.create(_PostProcessManager.UBER_SHADER_NAME, blitVs, UberPost);\n","import { Color, Vector3, Vector4 } from \"@galacean/engine-math\";\nimport { Background } from \"./Background\";\nimport { ComponentsManager } from \"./ComponentsManager\";\nimport { Engine } from \"./Engine\";\nimport { Entity } from \"./Entity\";\nimport { MaskManager } from \"./RenderPipeline/MaskManager\";\nimport { SceneManager } from \"./SceneManager\";\nimport { EngineObject, Logger } from \"./base\";\nimport { ActiveChangeFlag } from \"./enums/ActiveChangeFlag\";\nimport { FogMode } from \"./enums/FogMode\";\nimport { DirectLight } from \"./lighting\";\nimport { AmbientLight } from \"./lighting/AmbientLight\";\nimport { LightManager } from \"./lighting/LightManager\";\nimport { PhysicsScene } from \"./physics/PhysicsScene\";\nimport { _PostProcessManager } from \"./postProcess\";\nimport { ShaderProperty } from \"./shader\";\nimport { ShaderData } from \"./shader/ShaderData\";\nimport { ShaderMacroCollection } from \"./shader/ShaderMacroCollection\";\nimport { ShaderDataGroup } from \"./shader/enums/ShaderDataGroup\";\nimport { ShadowCascadesMode } from \"./shadow/enum/ShadowCascadesMode\";\nimport { ShadowResolution } from \"./shadow/enum/ShadowResolution\";\nimport { ShadowType } from \"./shadow/enum/ShadowType\";\n\n/**\n * Scene.\n */\nexport class Scene extends EngineObject {\n  private static _fogColorProperty = ShaderProperty.getByName(\"scene_FogColor\");\n  private static _fogParamsProperty = ShaderProperty.getByName(\"scene_FogParams\");\n\n  /** Scene name. */\n  name: string;\n\n  /** Physics. */\n  readonly physics: PhysicsScene = new PhysicsScene(this);\n\n  /** If cast shadows. */\n  castShadows: boolean = true;\n  /** The resolution of the shadow maps. */\n  shadowResolution: ShadowResolution = ShadowResolution.Medium;\n  /** The splits of two cascade distribution. */\n  shadowTwoCascadeSplits: number = 1.0 / 3.0;\n  /** The splits of four cascade distribution. */\n  shadowFourCascadeSplits: Vector3 = new Vector3(1.0 / 15, 3.0 / 15.0, 7.0 / 15.0);\n  /** Max Shadow distance. */\n  shadowDistance: number = 50;\n  /**\n   * Last shadow fade distance in percentage, range [0,1].\n   * @remarks Value 0 is used for no shadow fade.\n   */\n  shadowFadeBorder: number = 0.1;\n\n  /* @internal */\n  _lightManager: LightManager = new LightManager();\n  /* @internal */\n  _componentsManager: ComponentsManager = new ComponentsManager();\n  /** @internal */\n  _maskManager: MaskManager = new MaskManager();\n  /** @internal */\n  _isActiveInEngine: boolean = false;\n  /** @internal */\n  _sceneManager: SceneManager;\n  /** @internal */\n  _globalShaderMacro: ShaderMacroCollection = new ShaderMacroCollection();\n  /** @internal */\n  _rootEntities: Entity[] = [];\n  /** @internal */\n  _postProcessManager = new _PostProcessManager(this);\n\n  private _background: Background = new Background(this._engine);\n  private _shaderData: ShaderData = new ShaderData(ShaderDataGroup.Scene);\n  private _shadowCascades: ShadowCascadesMode = ShadowCascadesMode.NoCascades;\n  private _ambientLight: AmbientLight;\n  private _fogMode: FogMode = FogMode.None;\n  private _fogColor: Color = new Color(0.5, 0.5, 0.5, 1.0);\n  private _fogStart: number = 0;\n  private _fogEnd: number = 300;\n  private _fogDensity: number = 0.01;\n  private _fogParams: Vector4 = new Vector4();\n  private _isActive: boolean = true;\n  private _sun: DirectLight | null;\n  private _enableTransparentShadow = false;\n\n  /**\n   * Whether the scene is active.\n   */\n  get isActive(): boolean {\n    return this._isActive;\n  }\n\n  set isActive(value: boolean) {\n    if (this._isActive !== value) {\n      this._isActive = value;\n      if (value) {\n        this._sceneManager && this._processActive(true);\n      } else {\n        this._sceneManager && this._processActive(false);\n      }\n    }\n  }\n\n  /**\n   * Scene-related shader data.\n   */\n  get shaderData(): ShaderData {\n    return this._shaderData;\n  }\n\n  /**\n   * The background of the scene.\n   */\n  get background(): Background {\n    return this._background;\n  }\n\n  /**\n   *  Number of cascades to use for directional light shadows.\n   */\n  get shadowCascades(): ShadowCascadesMode {\n    return this._shadowCascades;\n  }\n\n  set shadowCascades(value: ShadowCascadesMode) {\n    if (this._shadowCascades !== value) {\n      this.shaderData.enableMacro(\"SCENE_SHADOW_CASCADED_COUNT\", value.toString());\n      this._shadowCascades = value;\n    }\n  }\n\n  /**\n   * Ambient light.\n   */\n  get ambientLight(): AmbientLight {\n    return this._ambientLight;\n  }\n\n  set ambientLight(value: AmbientLight) {\n    if (!value) {\n      Logger.warn(\"The scene must have one ambient light\");\n      return;\n    }\n\n    const lastAmbientLight = this._ambientLight;\n    if (lastAmbientLight !== value) {\n      lastAmbientLight && lastAmbientLight._removeFromScene(this);\n      value._addToScene(this);\n      this._ambientLight = value;\n    }\n  }\n\n  /**\n   * Fog mode.\n   * @remarks\n   * If set to `FogMode.None`, the fog will be disabled.\n   * If set to `FogMode.Linear`, the fog will be linear and controlled by `fogStart` and `fogEnd`.\n   * If set to `FogMode.Exponential`, the fog will be exponential and controlled by `fogDensity`.\n   * If set to `FogMode.ExponentialSquared`, the fog will be exponential squared and controlled by `fogDensity`.\n   */\n  get fogMode(): FogMode {\n    return this._fogMode;\n  }\n\n  set fogMode(value: FogMode) {\n    if (this._fogMode !== value) {\n      this.shaderData.enableMacro(\"SCENE_FOG_MODE\", value.toString());\n      this._fogMode = value;\n    }\n  }\n\n  /**\n   * Fog color.\n   */\n  get fogColor(): Color {\n    return this._fogColor;\n  }\n\n  set fogColor(value: Color) {\n    if (this._fogColor !== value) {\n      this._fogColor.copyFrom(value);\n    }\n  }\n\n  /**\n   * Fog start.\n   */\n  get fogStart(): number {\n    return this._fogStart;\n  }\n\n  set fogStart(value: number) {\n    if (this._fogStart !== value) {\n      this._computeLinearFogParams(value, this._fogEnd);\n      this._fogStart = value;\n    }\n  }\n\n  /**\n   * Fog end.\n   */\n  get fogEnd(): number {\n    return this._fogEnd;\n  }\n\n  set fogEnd(value: number) {\n    if (this._fogEnd !== value) {\n      this._computeLinearFogParams(this._fogStart, value);\n      this._fogEnd = value;\n    }\n  }\n\n  /**\n   * Fog density.\n   */\n  get fogDensity(): number {\n    return this._fogDensity;\n  }\n\n  set fogDensity(value: number) {\n    if (this._fogDensity !== value) {\n      this._computeExponentialFogParams(value);\n      this._fogDensity = value;\n    }\n  }\n\n  /**\n   * Count of root entities.\n   */\n  get rootEntitiesCount(): number {\n    return this._rootEntities.length;\n  }\n\n  /**\n   * Root entity collection.\n   */\n  get rootEntities(): Readonly<Entity[]> {\n    return this._rootEntities;\n  }\n\n  /**\n   * Sun light source.\n   * @remarks If set this to null, scene will use the brightest directional light.\n   */\n  get sun(): DirectLight | null {\n    return this._sun;\n  }\n\n  set sun(light: DirectLight | null) {\n    this._sun = light;\n  }\n\n  /**\n   * Whether to enable transparent shadow.\n   */\n  get enableTransparentShadow(): boolean {\n    return this._enableTransparentShadow;\n  }\n\n  set enableTransparentShadow(value: boolean) {\n    if (value !== this._enableTransparentShadow) {\n      this._enableTransparentShadow = value;\n      if (value) {\n        this.shaderData.enableMacro(\"SCENE_ENABLE_TRANSPARENT_SHADOW\");\n      } else {\n        this.shaderData.disableMacro(\"SCENE_ENABLE_TRANSPARENT_SHADOW\");\n      }\n    }\n  }\n\n  /**\n   * Create scene.\n   * @param engine - Engine\n   * @param name - Name\n   */\n  constructor(engine: Engine, name?: string) {\n    super(engine);\n    this.name = name || \"\";\n\n    const shaderData = this.shaderData;\n    shaderData._addReferCount(1);\n    this.ambientLight = new AmbientLight(engine);\n    engine.sceneManager._allCreatedScenes.push(this);\n\n    shaderData.enableMacro(\"SCENE_FOG_MODE\", this._fogMode.toString());\n    shaderData.enableMacro(\"SCENE_SHADOW_CASCADED_COUNT\", this.shadowCascades.toString());\n    shaderData.setColor(Scene._fogColorProperty, this._fogColor);\n    shaderData.setVector4(Scene._fogParamsProperty, this._fogParams);\n\n    this._computeLinearFogParams(this._fogStart, this._fogEnd);\n    this._computeExponentialFogParams(this._fogDensity);\n  }\n\n  /**\n   * Create root entity.\n   * @param name - Entity name\n   * @returns Entity\n   */\n  createRootEntity(name?: string): Entity {\n    const entity = new Entity(this._engine, name);\n    this.addRootEntity(entity);\n    return entity;\n  }\n\n  /**\n   * Append an entity.\n   * @param entity - The root entity to add\n   */\n  addRootEntity(entity: Entity): void;\n\n  /**\n   * Append an entity.\n   * @param index - specified index\n   * @param entity - The root entity to add\n   */\n  addRootEntity(index: number, entity: Entity): void;\n\n  addRootEntity(indexOrChild: number | Entity, entity?: Entity): void {\n    let index: number;\n    if (typeof indexOrChild === \"number\") {\n      index = indexOrChild;\n    } else {\n      index = undefined;\n      entity = indexOrChild;\n    }\n\n    const isRoot = entity._isRoot;\n    // Let entity become root\n    if (!isRoot) {\n      entity._isRoot = true;\n      entity._removeFromParent();\n      entity._setTransformDirty();\n    }\n\n    // Add or remove from scene's rootEntities\n    const oldScene = entity._scene;\n    if (oldScene !== this) {\n      if (oldScene && isRoot) {\n        oldScene._removeFromEntityList(entity);\n      }\n      this._addToRootEntityList(index, entity);\n    } else if (!isRoot) {\n      this._addToRootEntityList(index, entity);\n    }\n\n    // Process entity active/inActive\n    let inActiveChangeFlag = ActiveChangeFlag.None;\n    if (entity._isActiveInHierarchy) {\n      this._isActiveInEngine || (inActiveChangeFlag |= ActiveChangeFlag.Hierarchy);\n    }\n\n    // Cross scene should inActive first and then active\n    entity._isActiveInScene && oldScene !== this && (inActiveChangeFlag |= ActiveChangeFlag.Scene);\n\n    inActiveChangeFlag && entity._processInActive(inActiveChangeFlag);\n\n    if (oldScene !== this) {\n      Entity._traverseSetOwnerScene(entity, this);\n    }\n\n    let activeChangeFlag = ActiveChangeFlag.None;\n    if (entity._isActive) {\n      if (this._isActiveInEngine) {\n        !entity._isActiveInHierarchy && (activeChangeFlag |= ActiveChangeFlag.Hierarchy);\n      }\n      (!entity._isActiveInScene || oldScene !== this) && (activeChangeFlag |= ActiveChangeFlag.Scene);\n    }\n    activeChangeFlag && entity._processActive(activeChangeFlag);\n  }\n\n  /**\n   * Remove an entity.\n   * @param entity - The root entity to remove\n   */\n  removeRootEntity(entity: Entity): void {\n    if (entity._isRoot && entity._scene == this) {\n      this._removeFromEntityList(entity);\n      entity._isRoot = false;\n\n      let inActiveChangeFlag = ActiveChangeFlag.None;\n      this._isActiveInEngine && entity._isActiveInHierarchy && (inActiveChangeFlag |= ActiveChangeFlag.Hierarchy);\n      entity._isActiveInScene && (inActiveChangeFlag |= ActiveChangeFlag.Scene);\n      inActiveChangeFlag && entity._processInActive(inActiveChangeFlag);\n      Entity._traverseSetOwnerScene(entity, null);\n    }\n  }\n\n  /**\n   * Get root entity from index.\n   * @param index - Index\n   * @returns Entity\n   */\n  getRootEntity(index: number = 0): Entity | null {\n    return this._rootEntities[index];\n  }\n\n  /**\n   * Find entity globally by name.\n   * @param name - Entity name\n   * @returns Entity\n   */\n  findEntityByName(name: string): Entity | null {\n    const rootEntities = this._rootEntities;\n    for (let i = 0, n = rootEntities.length; i < n; i++) {\n      const entity = rootEntities[i].findByName(name);\n      if (entity) {\n        return entity;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Find entity globally by name,use ‘/’ symbol as a path separator.\n   * @param path - Entity's path\n   * @returns Entity\n   */\n  findEntityByPath(path: string): Entity | null {\n    const splits = path.split(\"/\").filter(Boolean);\n    for (let i = 0, n = this.rootEntitiesCount; i < n; i++) {\n      let findEntity = this.getRootEntity(i);\n      if (findEntity.name != splits[0]) continue;\n      for (let j = 1, m = splits.length; j < m; ++j) {\n        findEntity = Entity._findChildByName(findEntity, splits[j]);\n        if (!findEntity) break;\n      }\n      return findEntity;\n    }\n    return null;\n  }\n\n  /**\n   * @internal\n   */\n  _processActive(active: boolean): void {\n    this._isActiveInEngine = active;\n    const rootEntities = this._rootEntities;\n    for (let i = rootEntities.length - 1; i >= 0; i--) {\n      const entity = rootEntities[i];\n      if (entity._isActive) {\n        if (active) {\n          entity._processActive(ActiveChangeFlag.Hierarchy);\n        } else {\n          entity._processInActive(ActiveChangeFlag.Hierarchy);\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _updateShaderData(): void {\n    const shaderData = this.shaderData;\n    const engine = this._engine;\n    const lightManager = this._lightManager;\n\n    engine.time._updateSceneShaderData(shaderData);\n    lightManager._updateShaderData(this.shaderData);\n\n    const sunlight = (this._lightManager._sunlight = this._getSunlight());\n\n    if (sunlight) {\n      lightManager._updateSunlightIndex(sunlight);\n      shaderData.setColor(LightManager._sunlightColorProperty, sunlight._lightColor);\n      shaderData.setVector3(LightManager._sunlightDirectionProperty, sunlight.direction);\n    } else {\n      // @ts-ignore\n      shaderData.setVector3(LightManager._sunlightDirectionProperty, Vector3._zero);\n    }\n\n    if (this.castShadows && sunlight && sunlight.shadowType !== ShadowType.None) {\n      shaderData.enableMacro(\"SCENE_SHADOW_TYPE\", sunlight.shadowType.toString());\n    } else {\n      shaderData.disableMacro(\"SCENE_SHADOW_TYPE\");\n    }\n\n    // union scene and camera macro.\n    ShaderMacroCollection.unionCollection(\n      this.engine._macroCollection,\n      shaderData._macroCollection,\n      this._globalShaderMacro\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _removeFromEntityList(entity: Entity): void {\n    const rootEntities = this._rootEntities;\n    let index = entity._siblingIndex;\n    rootEntities.splice(index, 1);\n    for (let n = rootEntities.length; index < n; index++) {\n      rootEntities[index]._siblingIndex--;\n    }\n    entity._siblingIndex = -1;\n  }\n\n  /**\n   * @internal\n   */\n  protected override _onDestroy(): void {\n    super._onDestroy();\n\n    // Remove from sceneManager\n    const sceneManager = this._engine.sceneManager;\n    sceneManager.removeScene(this);\n\n    while (this.rootEntitiesCount > 0) {\n      this._rootEntities[0].destroy();\n    }\n    this.background.destroy();\n    this._ambientLight && this._ambientLight._removeFromScene(this);\n    this.shaderData._addReferCount(-1);\n    this._componentsManager.handlingInvalidScripts();\n    this._maskManager.destroy();\n\n    const allCreatedScenes = sceneManager._allCreatedScenes;\n    allCreatedScenes.splice(allCreatedScenes.indexOf(this), 1);\n  }\n\n  private _addToRootEntityList(index: number, rootEntity: Entity): void {\n    const rootEntities = this._rootEntities;\n    const rootEntityCount = rootEntities.length;\n    if (index === undefined) {\n      rootEntity._siblingIndex = rootEntityCount;\n      rootEntities.push(rootEntity);\n    } else {\n      if (index < 0 || index > rootEntityCount) {\n        throw `The index ${index} is out of child list bounds ${rootEntityCount}`;\n      }\n      rootEntity._siblingIndex = index;\n      rootEntities.splice(index, 0, rootEntity);\n      for (let i = index + 1, n = rootEntityCount + 1; i < n; i++) {\n        rootEntities[i]._siblingIndex++;\n      }\n    }\n  }\n\n  private _computeLinearFogParams(fogStart: number, fogEnd: number): void {\n    const fogRange = fogEnd - fogStart;\n    const fogParams = this._fogParams;\n    fogParams.x = -1 / fogRange;\n    fogParams.y = fogEnd / fogRange;\n  }\n\n  private _computeExponentialFogParams(density: number) {\n    this._fogParams.z = density / Math.LN2;\n    this._fogParams.w = density / Math.sqrt(Math.LN2);\n  }\n\n  private _getSunlight(): DirectLight | null {\n    let sunlight = null;\n\n    if (this._sun) {\n      sunlight = this._sun.enabled ? this._sun : null;\n    } else {\n      sunlight = this._lightManager._getMaxBrightestSunlight();\n    }\n\n    return sunlight;\n  }\n}\n","import { Camera } from \"./Camera\";\nimport { ignoreClone } from \"./clone/CloneManager\";\nimport { Component } from \"./Component\";\nimport { Pointer } from \"./input\";\nimport { ColliderShape } from \"./physics\";\nimport { Collision } from \"./physics/Collision\";\n\n/**\n * Script class, used for logic writing.\n */\nexport class Script extends Component {\n  /** @internal */\n  @ignoreClone\n  _started: boolean = false;\n  /** @internal */\n  @ignoreClone\n  _onStartIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _onUpdateIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _onLateUpdateIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _onPhysicsUpdateIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _onPreRenderIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _onPostRenderIndex: number = -1;\n  @ignoreClone\n  _entityScriptsIndex: number = -1;\n\n  /**\n   * Called when be enabled first time, only once.\n   */\n  onAwake(): void {}\n\n  /**\n   * Called when be enabled.\n   */\n  onEnable(): void {}\n\n  /**\n   * Called before the frame-level loop start for the first time, only once.\n   */\n  onStart(): void {}\n\n  /**\n   * The main loop, called frame by frame.\n   * @param deltaTime - The delta time since last frame in seconds\n   */\n  onUpdate(deltaTime: number): void {}\n\n  /**\n   * Called after the onUpdate finished, called frame by frame.\n   * @param deltaTime - The delta time since last frame in seconds\n   */\n  onLateUpdate(deltaTime: number): void {}\n\n  /**\n   * Called before camera rendering, called per camera.\n   * @param camera - Current camera.\n   */\n  onBeginRender(camera: Camera): void {}\n\n  /**\n   * Called after camera rendering, called per camera.\n   * @param camera - Current camera.\n   */\n  onEndRender(camera: Camera): void {}\n\n  /**\n   * Called before physics calculations, the number of times is related to the physical update frequency.\n   */\n  onPhysicsUpdate(): void {}\n\n  /**\n   * Called when the trigger enter.\n   * @param other - ColliderShape\n   */\n  onTriggerEnter(other: ColliderShape): void {}\n\n  /**\n   * Called when the trigger exit.\n   * @param other - ColliderShape\n   */\n  onTriggerExit(other: ColliderShape): void {}\n\n  /**\n   * Called when the trigger stay.\n   * @remarks onTriggerStay is called every frame while the trigger stay.\n   * @param other - ColliderShape\n   */\n  onTriggerStay(other: ColliderShape): void {}\n\n  /**\n   * Called when the collision enter.\n   * @param other - The Collision data associated with this collision event\n   * @remarks The Collision data will be invalid after this call, you should copy the data if needed.\n   */\n  onCollisionEnter(other: Collision): void {}\n\n  /**\n   * Called when the collision exit.\n   * @param other - The Collision data associated with this collision event\n   * @remarks The Collision data will be invalid after this call, you should copy the data if needed.\n   */\n  onCollisionExit(other: Collision): void {}\n\n  /**\n   * Called when the collision stay.\n   * @param other - The Collision data associated with this collision event\n   * @remarks The Collision data will be invalid after this call, you should copy the data if needed.\n   */\n  onCollisionStay(other: Collision): void {}\n\n  /**\n   * Called when the pointer is down while over the ColliderShape.\n   * @param pointer - The pointer that triggered\n   */\n  onPointerDown(pointer: Pointer): void {}\n\n  /**\n   * Called when the pointer is up while over the ColliderShape.\n   * @param pointer - The pointer that triggered\n   */\n  onPointerUp(pointer: Pointer): void {}\n\n  /**\n   * Called when the pointer is down and up with the same collider.\n   * @param pointer - The pointer that triggered\n   */\n  onPointerClick(pointer: Pointer): void {}\n\n  /**\n   * Called when the pointer is enters the ColliderShape.\n   * @param pointer - The pointer that triggered\n   */\n  onPointerEnter(pointer: Pointer): void {}\n\n  /**\n   * Called when the pointer is no longer over the ColliderShape.\n   * @param pointer - The pointer that triggered\n   */\n  onPointerExit(pointer: Pointer): void {}\n\n  /**\n   * Called when the pointer is down while over the ColliderShape and is still holding down.\n   * @param pointer - The pointer that triggered\n   * @remarks onPointerDrag is called every frame while the pointer is down.\n   */\n  onPointerDrag(pointer: Pointer): void {}\n\n  /**\n   * Called when be disabled.\n   */\n  onDisable(): void {}\n\n  /**\n   * Called at the end of the destroyed frame.\n   */\n  onDestroy(): void {}\n\n  /**\n   * @internal\n   */\n  override _onAwake(): void {\n    this.onAwake();\n  }\n\n  /**\n   * @internal\n   */\n  override _onEnable(): void {\n    this.onEnable();\n  }\n\n  /**\n   * @internal\n   */\n  override _onDisable(): void {\n    this.onDisable();\n  }\n\n  /**\n   * @internal\n   */\n  override _onEnableInScene(): void {\n    const { _componentsManager: componentsManager } = this.scene;\n    const { prototype } = Script;\n    if (!this._started) {\n      componentsManager.addOnStartScript(this);\n    }\n    if (this.onUpdate !== prototype.onUpdate) {\n      componentsManager.addOnUpdateScript(this);\n    }\n    if (this.onLateUpdate !== prototype.onLateUpdate) {\n      componentsManager.addOnLateUpdateScript(this);\n    }\n    if (this.onPhysicsUpdate !== prototype.onPhysicsUpdate) {\n      componentsManager.addOnPhysicsUpdateScript(this);\n    }\n    this._entity._addScript(this);\n  }\n\n  /**\n   * @internal\n   */\n  override _onDisableInScene(): void {\n    const componentsManager = this.scene._componentsManager;\n    const { prototype } = Script;\n\n    if (!this._started) {\n      componentsManager.removeOnStartScript(this);\n    }\n    if (this.onUpdate !== prototype.onUpdate) {\n      componentsManager.removeOnUpdateScript(this);\n    }\n    if (this.onLateUpdate !== prototype.onLateUpdate) {\n      componentsManager.removeOnLateUpdateScript(this);\n    }\n    if (this.onPhysicsUpdate !== prototype.onPhysicsUpdate) {\n      componentsManager.removeOnPhysicsUpdateScript(this);\n    }\n\n    this._entity._removeScript(this);\n  }\n\n  /**\n   * @internal\n   */\n  protected override _onDestroy(): void {\n    super._onDestroy();\n    if (this.scene) {\n      this.scene._componentsManager.addPendingDestroyScript(this);\n    } else {\n      this.onDestroy();\n    }\n  }\n}\n","import { Engine, EngineConfiguration } from \"../Engine\";\nimport { AssetPromise } from \"./AssetPromise\";\nimport { LoadItem } from \"./LoadItem\";\nimport { request, RequestConfig } from \"./request\";\nimport { ResourceManager } from \"./ResourceManager\";\n/**\n * Loader abstract class.\n */\nexport abstract class Loader<T> {\n  /**\n   * Register a class with a string name for serialization and deserialization.\n   * @param key - class name\n   * @param obj - class object\n   */\n  public static registerClass(className: string, classDefine: { new (...args: any): any }) {\n    this._engineObjects[className] = classDefine;\n    this._classNameMap.set(classDefine, className);\n  }\n\n  /**\n   * Get the class object by class name.\n   * @param key - class name\n   * @returns class object\n   */\n  public static getClass(className: string): { new (...args: any): any } {\n    return this._engineObjects[className];\n  }\n\n  /**\n   * Get the class name by class object.\n   * @param obj - class object\n   * @returns class name\n   */\n  public static getClassName(obj: Object): string {\n    return this._classNameMap.get(obj);\n  }\n\n  private static _engineObjects: { [key: string]: any } = {};\n  private static _classNameMap: Map<Object, string> = new Map();\n\n  constructor(public readonly useCache: boolean) {}\n  initialize?(engine: Engine, configuration: EngineConfiguration): Promise<void>;\n  abstract load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<T>;\n}\n","import { KeyframeValueType } from \"../../../Keyframe\";\nimport { AnimationCurveOwner } from \"../AnimationCurveOwner\";\nimport { IAnimationCurveOwnerAssembler } from \"./IAnimationCurveOwnerAssembler\";\n\n/**\n * @internal\n */\nexport class UniversalAnimationCurveOwnerAssembler implements IAnimationCurveOwnerAssembler<KeyframeValueType> {\n  private _getMounted: Record<string, KeyframeValueType | Function>;\n  private _setMounted: Record<string, KeyframeValueType | Function>;\n\n  private _getType: HandleType;\n  private _setType: HandleType;\n\n  private _getValueName: string;\n  private _setValueName: string;\n\n  private _getArgs: any[];\n  private _setArgs: any[];\n  private _replaceValueIndex: number;\n\n  private _getArrayIndex: number;\n  private _setArrayIndex: number;\n\n  initialize(owner: AnimationCurveOwner<KeyframeValueType>): void {\n    let mounted = owner.component;\n\n    const setProperties = owner.property.split(\".\");\n\n    if (owner.getProperty) {\n      const getProperties = owner.getProperty.split(\".\");\n      this._initializeMounted(mounted, getProperties, MountedParseFlag.Get);\n      this._initializeMounted(mounted, setProperties, MountedParseFlag.Set);\n    } else {\n      this._initializeMounted(mounted, setProperties, MountedParseFlag.Both);\n    }\n  }\n\n  getTargetValue(): KeyframeValueType {\n    switch (this._getType) {\n      case HandleType.Array:\n        return this._getMounted[this._getArrayIndex] as KeyframeValueType;\n      case HandleType.Method:\n        return (this._getMounted[this._getValueName] as Function).apply(this._getMounted, this._getArgs);\n      case HandleType.Property:\n        return this._getMounted[this._getValueName] as KeyframeValueType;\n    }\n  }\n\n  setTargetValue(value: KeyframeValueType): void {\n    switch (this._setType) {\n      case HandleType.Array:\n        this._setMounted[this._setArrayIndex] = value;\n        break;\n      case HandleType.Method:\n        const args = this._setArgs;\n        args[this._replaceValueIndex] = value;\n        (this._setMounted[this._setValueName] as Function).apply(this._setMounted, args);\n        break;\n      case HandleType.Property:\n        this._setMounted[this._setValueName] = value;\n        break;\n    }\n  }\n\n  private _initializeMounted(mounted: any, properties: string[], parseFlag: MountedParseFlag): void {\n    const endIndex = properties.length - 1;\n    for (let i = 0; i < endIndex; i++) {\n      const property = properties[i];\n      if (property.indexOf(\"[\") > -1) {\n        // is array\n        const indexPos = property.indexOf(\"[\");\n        mounted = mounted[property.slice(0, indexPos)];\n        mounted = mounted[parseInt(property.slice(indexPos + 1, -1))];\n      } else if (property.endsWith(\")\")) {\n        // is method\n        const methodName = property.slice(0, property.indexOf(\"(\"));\n        const args = property\n          .match(/\\w+\\(([^)]*)\\)/)[1]\n          .split(\",\")\n          .map((arg) => arg.trim().replace(/['\"]+/g, \"\"))\n          .filter((arg) => arg !== \"\");\n        mounted = mounted[methodName].apply(mounted, args);\n      } else {\n        // is property\n        mounted = mounted[property];\n      }\n    }\n\n    const property = properties[endIndex];\n\n    let handleType: HandleType;\n    let arrayIndex: number;\n    let methodName: string;\n    let args: any[];\n\n    if (property.indexOf(\"[\") > -1) {\n      const indexPos = property.indexOf(\"[\");\n      handleType = HandleType.Array;\n      mounted = mounted[property.slice(0, indexPos)];\n      arrayIndex = parseInt(property.slice(indexPos + 1, -1));\n    } else if (property.endsWith(\")\")) {\n      methodName = property.slice(0, property.indexOf(\"(\"));\n      args = property\n        .match(/\\w+\\(([^)]*)\\)/)[1]\n        .split(\",\")\n        .map((arg) => arg.trim().replace(/['\"]+/g, \"\"))\n        .filter((arg) => arg !== \"\");\n      handleType = HandleType.Method;\n      if (parseFlag & MountedParseFlag.Set) {\n        const index = args.indexOf(\"$value\");\n        this._replaceValueIndex = index > -1 ? index : args.length;\n      }\n    } else {\n      handleType = HandleType.Property;\n    }\n\n    if (parseFlag & MountedParseFlag.Set) {\n      this._setMounted = mounted;\n      this._setType = handleType;\n      this._setArrayIndex = arrayIndex;\n      this._setValueName = property;\n      methodName && (this._setValueName = methodName);\n      this._setArgs = args;\n    }\n    if (parseFlag & MountedParseFlag.Get) {\n      this._getMounted = mounted;\n      this._getType = handleType;\n      this._getArrayIndex = arrayIndex;\n      this._getValueName = property;\n      methodName && (this._getValueName = methodName);\n      this._getArgs = args;\n    }\n  }\n}\n\nenum HandleType {\n  Property,\n  Method,\n  Array\n}\n\nenum MountedParseFlag {\n  Get = 0x1,\n  Set = 0x2,\n  Both = 0x3\n}\n","import { Component } from \"../../../Component\";\nimport { Entity } from \"../../../Entity\";\nimport { AnimationCurve } from \"../../animationCurve/AnimationCurve\";\nimport { IAnimationCurveCalculator } from \"../../animationCurve/interfaces/IAnimationCurveCalculator\";\nimport { KeyframeValueType } from \"../../Keyframe\";\nimport { IAnimationCurveOwnerAssembler } from \"./assembler/IAnimationCurveOwnerAssembler\";\nimport { UniversalAnimationCurveOwnerAssembler } from \"./assembler/UniversalAnimationCurveOwnerAssembler\";\n\n/**\n * @internal\n */\nexport class AnimationCurveOwner<V extends KeyframeValueType> {\n  /** @internal */\n  static _components: Component[] = [];\n\n  private static _assemblerMap = new Map<ComponentType, Record<string, AssemblerType>>();\n\n  static registerAssembler(componentType: ComponentType, property: string, assemblerType: AssemblerType): void {\n    let subMap = AnimationCurveOwner._assemblerMap.get(componentType);\n    if (!subMap) {\n      subMap = {};\n      AnimationCurveOwner._assemblerMap.set(componentType, subMap);\n    }\n    subMap[property] = assemblerType;\n  }\n\n  static getAssemblerType(componentType: ComponentType, property: string): AssemblerType {\n    const subMap = AnimationCurveOwner._assemblerMap.get(componentType);\n    const assemblerType = subMap ? subMap[property] : undefined;\n    return assemblerType ?? UniversalAnimationCurveOwnerAssembler;\n  }\n\n  readonly target: Entity;\n  readonly property: string;\n  readonly getProperty?: string;\n  readonly component: Component;\n\n  defaultValue: V;\n  fixedPoseValue: V;\n  baseEvaluateData: IEvaluateData<V> = { curKeyframeIndex: 0, value: null };\n  crossEvaluateData: IEvaluateData<V> = { curKeyframeIndex: 0, value: null };\n  referenceTargetValue: V;\n  cureType: IAnimationCurveCalculator<V>;\n  updateMark: number = 0;\n\n  private _assembler: IAnimationCurveOwnerAssembler<V>;\n\n  constructor(\n    target: Entity,\n    type: new (entity: Entity) => Component,\n    component: Component,\n    property: string,\n    getProperty: string,\n    cureType: IAnimationCurveCalculator<V>\n  ) {\n    this.target = target;\n    this.property = property;\n    this.getProperty = getProperty;\n    this.component = component;\n    this.cureType = cureType;\n\n    const assemblerType = AnimationCurveOwner.getAssemblerType(type, property);\n    this._assembler = <IAnimationCurveOwnerAssembler<V>>new assemblerType();\n    this._assembler.initialize(this);\n\n    if (cureType._isCopyMode) {\n      this.referenceTargetValue = this._assembler.getTargetValue();\n    }\n  }\n\n  evaluateValue(curve: AnimationCurve<V>, time: number, additive: boolean): KeyframeValueType {\n    return additive\n      ? curve._evaluateAdditive(time, this.baseEvaluateData)\n      : curve._evaluate(time, this.baseEvaluateData);\n  }\n\n  evaluateCrossFadeValue(\n    srcCurve: AnimationCurve<V>,\n    destCurve: AnimationCurve<V>,\n    srcTime: number,\n    destTime: number,\n    crossWeight: number,\n    additive: boolean\n  ): KeyframeValueType {\n    if (!this.cureType._supportInterpolationMode) {\n      return this.evaluateValue(destCurve, destTime, false);\n    }\n\n    const srcValue =\n      srcCurve && srcCurve.keys.length\n        ? additive\n          ? srcCurve._evaluateAdditive(srcTime, this.baseEvaluateData)\n          : srcCurve._evaluate(srcTime, this.baseEvaluateData)\n        : additive\n          ? this.cureType._getZeroValue(this.baseEvaluateData.value)\n          : this.defaultValue;\n\n    const destValue =\n      destCurve && destCurve.keys.length\n        ? additive\n          ? destCurve._evaluateAdditive(destTime, this.crossEvaluateData)\n          : destCurve._evaluate(destTime, this.crossEvaluateData)\n        : additive\n          ? this.cureType._getZeroValue(this.crossEvaluateData.value)\n          : this.defaultValue;\n\n    return this._lerpValue(srcValue, destValue, crossWeight);\n  }\n\n  crossFadeFromPoseAndApplyValue(\n    destCurve: AnimationCurve<V>,\n    destTime: number,\n    crossWeight: number,\n    additive: boolean\n  ): KeyframeValueType {\n    if (!this.cureType._supportInterpolationMode) {\n      return this.evaluateValue(destCurve, destTime, false);\n    }\n\n    const srcValue = additive\n      ? this.cureType._subtractValue(this.fixedPoseValue, this.defaultValue, this.baseEvaluateData.value)\n      : this.fixedPoseValue;\n    const destValue =\n      destCurve && destCurve.keys.length\n        ? additive\n          ? destCurve._evaluateAdditive(destTime, this.crossEvaluateData)\n          : destCurve._evaluate(destTime, this.crossEvaluateData)\n        : additive\n          ? this.cureType._getZeroValue(this.crossEvaluateData.value)\n          : this.defaultValue;\n\n    return this._lerpValue(srcValue, destValue, crossWeight);\n  }\n\n  revertDefaultValue(): void {\n    this._assembler.setTargetValue(this.defaultValue);\n  }\n\n  getEvaluateValue(out: V): V {\n    if (this.cureType._isCopyMode) {\n      this.cureType._setValue(this.baseEvaluateData.value, out);\n      return out;\n    } else {\n      return this.baseEvaluateData.value;\n    }\n  }\n\n  saveDefaultValue(): void {\n    if (this.cureType._isCopyMode) {\n      this.cureType._setValue(this.referenceTargetValue, this.defaultValue);\n    } else {\n      this.defaultValue = this._assembler.getTargetValue();\n    }\n  }\n\n  saveFixedPoseValue(): void {\n    if (this.cureType._isCopyMode) {\n      this.cureType._setValue(this.referenceTargetValue, this.fixedPoseValue);\n    } else {\n      this.fixedPoseValue = this._assembler.getTargetValue();\n    }\n  }\n\n  applyValue(value: V, weight: number, additive: boolean): void {\n    const cureType = this.cureType;\n\n    if (additive) {\n      const assembler = this._assembler;\n\n      if (cureType._isCopyMode) {\n        cureType._additiveValue(value, weight, this.referenceTargetValue);\n      } else {\n        const originValue = assembler.getTargetValue();\n        const additiveValue = cureType._additiveValue(value, weight, originValue);\n        assembler.setTargetValue(additiveValue);\n      }\n    } else {\n      if (weight === 1.0) {\n        if (cureType._isCopyMode) {\n          cureType._setValue(value, this.referenceTargetValue);\n        } else {\n          this._assembler.setTargetValue(value);\n        }\n      } else {\n        if (cureType._isCopyMode) {\n          const targetValue = this.referenceTargetValue;\n          cureType._lerpValue(targetValue, value, weight, targetValue);\n        } else {\n          const originValue = this._assembler.getTargetValue();\n          const lerpValue = cureType._lerpValue(originValue, value, weight);\n          this._assembler.setTargetValue(lerpValue);\n        }\n      }\n    }\n  }\n\n  private _lerpValue(srcValue: V, destValue: V, crossWeight: number): KeyframeValueType {\n    if (this.cureType._isCopyMode) {\n      return this.cureType._lerpValue(srcValue, destValue, crossWeight, this.baseEvaluateData.value);\n    } else {\n      this.baseEvaluateData.value = this.cureType._lerpValue(srcValue, destValue, crossWeight);\n      return this.baseEvaluateData.value;\n    }\n  }\n}\n\ntype ComponentType = new (entity: Entity) => Component;\ntype AssemblerType = new () => IAnimationCurveOwnerAssembler<KeyframeValueType>;\n\nexport interface IEvaluateData<V extends KeyframeValueType> {\n  curKeyframeIndex: number;\n  value: V;\n}\n","import { Vector3 } from \"@galacean/engine-math\";\nimport { Transform } from \"../../../../Transform\";\nimport { KeyframeValueType } from \"../../../Keyframe\";\nimport { AnimationCurveOwner } from \"../AnimationCurveOwner\";\nimport { IAnimationCurveOwnerAssembler } from \"./IAnimationCurveOwnerAssembler\";\n\n/**\n * @internal\n */\nexport class PositionAnimationCurveOwnerAssembler implements IAnimationCurveOwnerAssembler<Vector3> {\n  private _transform: Transform;\n\n  initialize(owner: AnimationCurveOwner<KeyframeValueType>): void {\n    this._transform = owner.target.transform;\n  }\n\n  getTargetValue(): Vector3 {\n    return this._transform.position;\n  }\n  setTargetValue(value: Vector3): void {\n    this._transform.position = value;\n  }\n}\n\nAnimationCurveOwner.registerAssembler(Transform, \"position\", PositionAnimationCurveOwnerAssembler);\n","import { Quaternion } from \"@galacean/engine-math\";\nimport { Transform } from \"../../../../Transform\";\nimport { KeyframeValueType } from \"../../../Keyframe\";\nimport { AnimationCurveOwner } from \"../AnimationCurveOwner\";\nimport { IAnimationCurveOwnerAssembler } from \"./IAnimationCurveOwnerAssembler\";\n\n/**\n * @internal\n */\nexport class RotationAnimationCurveOwnerAssembler implements IAnimationCurveOwnerAssembler<Quaternion> {\n  private _transform: Transform;\n\n  initialize(owner: AnimationCurveOwner<KeyframeValueType>): void {\n    this._transform = owner.target.transform;\n  }\n\n  getTargetValue(): Quaternion {\n    return this._transform.rotationQuaternion;\n  }\n\n  setTargetValue(value: Quaternion): void {\n    this._transform.rotationQuaternion = value;\n  }\n}\n\nAnimationCurveOwner.registerAssembler(Transform, \"rotationQuaternion\", RotationAnimationCurveOwnerAssembler);\n","import { Vector3 } from \"@galacean/engine-math\";\nimport { Transform } from \"../../../../Transform\";\nimport { KeyframeValueType } from \"../../../Keyframe\";\nimport { AnimationCurveOwner } from \"../AnimationCurveOwner\";\nimport { IAnimationCurveOwnerAssembler } from \"./IAnimationCurveOwnerAssembler\";\n\n/**\n * @internal\n */\nexport class ScaleAnimationCurveOwnerAssembler implements IAnimationCurveOwnerAssembler<Vector3> {\n  private _transform: Transform;\n\n  initialize(owner: AnimationCurveOwner<KeyframeValueType>): void {\n    this._transform = owner.target.transform;\n  }\n\n  getTargetValue(): Vector3 {\n    return this._transform.scale;\n  }\n\n  setTargetValue(value: Vector3): void {\n    this._transform.scale = value;\n  }\n}\nAnimationCurveOwner.registerAssembler(Transform, \"scale\", ScaleAnimationCurveOwnerAssembler);\n","import { SkinnedMeshRenderer } from \"../../../../mesh\";\nimport { KeyframeValueType } from \"../../../Keyframe\";\nimport { AnimationCurveOwner } from \"../AnimationCurveOwner\";\nimport { IAnimationCurveOwnerAssembler } from \"./IAnimationCurveOwnerAssembler\";\n\n/**\n * @internal\n */\nexport class BlendShapeWeightsAnimationCurveOwnerAssembler implements IAnimationCurveOwnerAssembler<Float32Array> {\n  private _skinnedMeshRenderer: SkinnedMeshRenderer;\n\n  initialize(owner: AnimationCurveOwner<KeyframeValueType>): void {\n    this._skinnedMeshRenderer = <SkinnedMeshRenderer>owner.component;\n  }\n\n  getTargetValue(): Float32Array {\n    return this._skinnedMeshRenderer.blendShapeWeights;\n  }\n\n  setTargetValue(value: Float32Array): void {\n    this._skinnedMeshRenderer.blendShapeWeights = value;\n  }\n}\n\nAnimationCurveOwner.registerAssembler(\n  SkinnedMeshRenderer,\n  \"blendShapeWeights\",\n  BlendShapeWeightsAnimationCurveOwnerAssembler\n);\n","import { KeyframeValueType } from \"../Keyframe\";\nimport { AnimationCurveOwner } from \"./animationCurveOwner/AnimationCurveOwner\";\n\n/**\n * @internal\n */\nexport class AnimationCurveLayerOwner {\n  crossSrcCurveIndex: number;\n  crossDestCurveIndex: number;\n  crossCurveMark: number = 0;\n  curveOwner: AnimationCurveOwner<KeyframeValueType>;\n  finalValue: KeyframeValueType;\n  isActive: boolean = true;\n\n  initFinalValue() {\n    const { cureType, defaultValue } = this.curveOwner;\n\n    if (cureType._isCopyMode) {\n      cureType._setValue(defaultValue, this.finalValue);\n    } else {\n      this.finalValue = defaultValue;\n    }\n  }\n\n  saveFinalValue(): void {\n    this.finalValue = this.curveOwner.getEvaluateValue(this.finalValue);\n  }\n}\n","import { Component } from \"../Component\";\nimport { Entity } from \"../Entity\";\nimport { KeyframeValueType } from \"./Keyframe\";\nimport { AnimationCurve } from \"./animationCurve\";\nimport { IAnimationCurveCalculator } from \"./animationCurve/interfaces/IAnimationCurveCalculator\";\nimport { AnimationCurveLayerOwner } from \"./internal/AnimationCurveLayerOwner\";\nimport { AnimationCurveOwner } from \"./internal/animationCurveOwner/AnimationCurveOwner\";\n\n/**\n * Associate AnimationCurve and the Entity\n */\nexport class AnimationClipCurveBinding {\n  /**\n   * Path to the entity this curve applies to. The relativePath is formatted similar to a pathname,\n   * e.g. \"root/spine/leftArm\". If relativePath is empty it refers to the entity the animation clip is attached to.\n   */\n  relativePath: string;\n  /** The class type of the component that is animated. */\n  type: new (entity: Entity) => Component;\n  /** The index of the component that is animated. */\n  typeIndex: number = 0;\n  /**\n   * The name or path to the property being animated.\n   * @remarks support property:\"a.b\", array: \"a.b[0]\", method: \"a.b('c', 0, $value)\"\n   */\n  property: string;\n\n  /**\n   * The name or path to get the value when being animated.\n   * @remarks support property:\"a.b\", array: \"a.b[0]\", method: \"a.b('c', 0)\"\n   */\n  getProperty?: string;\n  /** The animation curve. */\n  curve: AnimationCurve<KeyframeValueType>;\n\n  private _tempCurveOwner: Record<number, AnimationCurveOwner<KeyframeValueType>> = {};\n\n  /**\n   * @internal\n   */\n  _createCurveOwner(entity: Entity, component: Component): AnimationCurveOwner<KeyframeValueType> {\n    const curveType = (<unknown>this.curve.constructor) as IAnimationCurveCalculator<KeyframeValueType>;\n    const owner = new AnimationCurveOwner(entity, this.type, component, this.property, this.getProperty, curveType);\n    curveType._initializeOwner(owner);\n    owner.saveDefaultValue();\n    return owner;\n  }\n\n  /**\n   * @internal\n   */\n  _createCurveLayerOwner(owner: AnimationCurveOwner<KeyframeValueType>): AnimationCurveLayerOwner {\n    const curveType = (<unknown>this.curve.constructor) as IAnimationCurveCalculator<KeyframeValueType>;\n    const layerOwner = new AnimationCurveLayerOwner();\n    layerOwner.curveOwner = owner;\n    curveType._initializeLayerOwner(layerOwner);\n    // If curve.keys.length is 0, updateFinishedState will assign 0 to the target, causing an error, so initialize by assigning defaultValue to finalValue.\n    layerOwner.initFinalValue();\n    return layerOwner;\n  }\n\n  /**\n   * @internal\n   */\n  _getTempCurveOwner(entity: Entity, component: Component): AnimationCurveOwner<KeyframeValueType> {\n    const { instanceId } = entity;\n    if (!this._tempCurveOwner[instanceId]) {\n      this._tempCurveOwner[instanceId] = this._createCurveOwner(entity, component);\n    }\n    return this._tempCurveOwner[instanceId];\n  }\n}\n","/**\n * AnimationEvent lets you call a script function similar to SendMessage as part of playing back an animation.\n */\nexport class AnimationEvent {\n  /** The time when the event be triggered. */\n  time: number;\n  /** The name of the method called in the script. */\n  functionName: string;\n  /** The parameter that is stored in the event and will be sent to the function. */\n  parameter: Object;\n}\n","import { EngineObject } from \"../base/EngineObject\";\nimport { Component } from \"../Component\";\nimport { Entity } from \"../Entity\";\nimport { UpdateFlagManager } from \"../UpdateFlagManager\";\nimport { AnimationClipCurveBinding } from \"./AnimationClipCurveBinding\";\nimport { AnimationCurve } from \"./animationCurve/AnimationCurve\";\nimport { AnimationEvent } from \"./AnimationEvent\";\nimport { AnimationCurveOwner } from \"./internal/animationCurveOwner/AnimationCurveOwner\";\nimport { KeyframeValueType } from \"./Keyframe\";\n\n/**\n * Stores keyframe based animations.\n */\nexport class AnimationClip extends EngineObject {\n  /** @internal */\n  _curveBindings: AnimationClipCurveBinding[] = [];\n\n  /** @internal */\n  _updateFlagManager: UpdateFlagManager = new UpdateFlagManager();\n\n  private _length: number = 0;\n  private _events: AnimationEvent[] = [];\n\n  /**\n   * Animation events for this animation clip.\n   */\n  get events(): Readonly<AnimationEvent[]> {\n    return this._events;\n  }\n\n  /**\n   * Animation curve bindings for this animation clip.\n   */\n  get curveBindings(): Readonly<AnimationClipCurveBinding[]> {\n    return this._curveBindings;\n  }\n\n  /**\n   * Animation length in seconds.\n   */\n  get length(): number {\n    return this._length;\n  }\n\n  /**\n   * @param name - The AnimationClip's name\n   */\n  constructor(public readonly name: string) {\n    super(null);\n  }\n\n  /**\n   * Adds an animation event to the clip.\n   * @param functionName - The name of the method called in the script\n   * @param time - The time when the event be triggered\n   * @param parameter - The parameter that is stored in the event and will be sent to the function\n   */\n  addEvent(functionName: string, time: number, parameter: Object): void;\n\n  /**\n   * Adds an animation event to the clip.\n   * @param event - The animation event\n   */\n  addEvent(event: AnimationEvent): void;\n\n  addEvent(param: AnimationEvent | string, time?: number, parameter?: Object): void {\n    let newEvent: AnimationEvent;\n    if (typeof param === \"string\") {\n      const event = new AnimationEvent();\n      event.functionName = param;\n      event.time = time;\n      event.parameter = parameter;\n      newEvent = event;\n    } else {\n      newEvent = param;\n    }\n    const events = this._events;\n    const count = events.length;\n    const eventTime = newEvent.time;\n    const maxEventTime = count ? events[count - 1].time : 0;\n    if (eventTime >= maxEventTime) {\n      events.push(newEvent);\n    } else {\n      let index = count;\n      while (--index >= 0 && eventTime < events[index].time);\n      events.splice(index + 1, 0, newEvent);\n    }\n\n    this._updateFlagManager.dispatch();\n  }\n\n  /**\n   * Clears all events from the clip.\n   */\n  clearEvents(): void {\n    this._events.length = 0;\n    this._updateFlagManager.dispatch();\n  }\n\n  /**\n   * Add curve binding for the clip.\n   * @param entityPath - Path to the game object this curve applies to. The entityPath is formatted similar to a pathname, e.g. \"/root/spine/leftArm\"\n   * @param componentType - The class type of the component that is animated\n   * @param propertyPath - The path to the property being animated, support \"a.b\" and \"a.b[x]\" description mode\n   * @param curve - The animation curve\n   */\n  addCurveBinding<T extends Component>(\n    entityPath: string,\n    componentType: new (entity: Entity) => T,\n    propertyPath: string,\n    curve: AnimationCurve<KeyframeValueType>\n  ): void;\n\n  /**\n   * Add curve binding for the clip.\n   * @param entityPath - Path to the game object this curve applies to. The entityPath is formatted similar to a pathname, e.g. \"/root/spine/leftArm\"\n   * @param componentType - The class type of the component that is animated\n   * @param setPropertyPath - The path to set the property being animated, support \"a.b\", \"a.b[x]\" and \"a.b('c', 0, $value)\" description mode\n   * @param getPropertyPath - The path to get the value when being animated, support \"a.b\", \"a.b[x]\" and \"a.b('c', 0, $value)\" description mode\n   * @param curve - The animation curve\n   */\n  addCurveBinding<T extends Component>(\n    entityPath: string,\n    componentType: new (entity: Entity) => T,\n    setPropertyPath: string,\n    getPropertyPath: string,\n    curve: AnimationCurve<KeyframeValueType>\n  ): void;\n\n  /**\n   * Add curve binding for the clip.\n   * @param entityPath - Path to the game object this curve applies to. The entityPath is formatted similar to a pathname, e.g. \"/root/spine/leftArm\"\n   * @param componentType - The type index of the component that is animated\n   * @param componentIndex - The class type of the component that is animated\n   * @param propertyPath - The path to the property being animated, support \"a.b\" and \"a.b[x]\" description mode\n   * @param curve - The animation curve\n   */\n  addCurveBinding<T extends Component>(\n    entityPath: string,\n    componentType: new (entity: Entity) => T,\n    componentIndex: number,\n    propertyPath: string,\n    curve: AnimationCurve<KeyframeValueType>\n  ): void;\n\n  /**\n   * Add curve binding for the clip.\n   * @param entityPath - Path to the game object this curve applies to. The entityPath is formatted similar to a pathname, e.g. \"/root/spine/leftArm\"\n   * @param componentType - The class type of the component that is animated\n   * @param componentIndex - The class type of the component that is animated\n   * @param setPropertyPath - The path to set the property being animated, support \"a.b\", \"a.b[x]\" and \"a.b('c', 0, $value)\" description mode\n   * @param getPropertyPath - The path to get the value when being animated, support \"a.b\", \"a.b[x]\" and \"a.b('c', 0, $value)\" description mode\n   * @param curve - The animation curve\n   */\n  addCurveBinding<T extends Component>(\n    entityPath: string,\n    componentType: new (entity: Entity) => T,\n    componentIndex: number,\n    setPropertyPath: string,\n    getPropertyPath: string,\n    curve: AnimationCurve<KeyframeValueType>\n  ): void;\n\n  addCurveBinding<T extends Component>(\n    entityPath: string,\n    componentType: new (entity: Entity) => T,\n    propertyOrSetPropertyPathOrComponentIndex: number | string,\n    curveOrSetPropertyPathOrGetPropertyPath: AnimationCurve<KeyframeValueType> | string,\n    curveOrGetPropertyPath?: AnimationCurve<KeyframeValueType> | string,\n    curve?: AnimationCurve<KeyframeValueType>\n  ): void {\n    const curveBinding = new AnimationClipCurveBinding();\n    curveBinding.relativePath = entityPath;\n    curveBinding.type = componentType;\n\n    if (typeof propertyOrSetPropertyPathOrComponentIndex === \"number\") {\n      curveBinding.typeIndex = propertyOrSetPropertyPathOrComponentIndex;\n      curveBinding.property = <string>curveOrSetPropertyPathOrGetPropertyPath;\n      if (typeof curveOrGetPropertyPath === \"string\") {\n        curveBinding.getProperty = curveOrGetPropertyPath;\n        curveBinding.curve = curve;\n      } else {\n        curveBinding.curve = curveOrGetPropertyPath;\n      }\n    } else {\n      curveBinding.property = propertyOrSetPropertyPathOrComponentIndex;\n      if (typeof curveOrSetPropertyPathOrGetPropertyPath === \"string\") {\n        curveBinding.getProperty = curveOrSetPropertyPathOrGetPropertyPath;\n        curveBinding.curve = <AnimationCurve<KeyframeValueType>>curveOrGetPropertyPath;\n      } else {\n        curveBinding.curve = curveOrSetPropertyPathOrGetPropertyPath;\n      }\n    }\n\n    this._length = Math.max(this._length, curveBinding.curve.length);\n    this._curveBindings.push(curveBinding);\n  }\n\n  /**\n   * Clears all curve bindings from the clip.\n   */\n  clearCurveBindings(): void {\n    this._curveBindings.length = 0;\n    this._length = 0;\n  }\n\n  /**\n   * @internal\n   * Samples an animation at a given time.\n   * @param entity - The animated entity\n   * @param time - The time to sample an animation\n   */\n  _sampleAnimation(entity: Entity, time: number): void {\n    const { _curveBindings: curveBindings } = this;\n    for (let i = curveBindings.length - 1; i >= 0; i--) {\n      const curve = curveBindings[i];\n      const targetEntity = entity.findByPath(curve.relativePath);\n      if (targetEntity) {\n        const component =\n          curve.typeIndex > 0\n            ? targetEntity.getComponents(curve.type, AnimationCurveOwner._components)[curve.typeIndex]\n            : targetEntity.getComponent(curve.type);\n        if (!component) {\n          continue;\n        }\n        const curveOwner = curve._getTempCurveOwner(targetEntity, component);\n        if (curveOwner && curve.curve.keys.length) {\n          const value = curveOwner.evaluateValue(curve.curve, time, false);\n          curveOwner.applyValue(value, 1, false);\n        }\n      }\n    }\n  }\n}\n","/**\n * Animation interpolation method.\n */\nexport enum InterpolationType {\n  /** Linear interpolation */\n  Linear,\n  /** Cubic spline interpolation */\n  CubicSpine,\n  /** Stepped interpolation */\n  Step,\n  /** Hermite interpolation */\n  Hermite\n}\n","import { InterpolationType } from \"../enums/InterpolationType\";\nimport { IEvaluateData } from \"../internal/animationCurveOwner/AnimationCurveOwner\";\nimport { Keyframe, KeyframeValueType } from \"../Keyframe\";\nimport { IAnimationCurveCalculator } from \"./interfaces/IAnimationCurveCalculator\";\n\n/**\n * Store a collection of Keyframes that can be evaluated over time.\n */\nexport abstract class AnimationCurve<V extends KeyframeValueType> {\n  /** All keys defined in the animation curve. */\n  keys: Keyframe<V>[] = [];\n\n  protected _evaluateData: IEvaluateData<V> = { curKeyframeIndex: 0, value: null };\n  protected _length: number = 0;\n  protected _interpolation: InterpolationType;\n\n  private _type: IAnimationCurveCalculator<V>;\n\n  /**\n   * The interpolationType of the animation curve.\n   */\n  get interpolation(): InterpolationType {\n    return this._interpolation;\n  }\n\n  set interpolation(value: InterpolationType) {\n    if (!this._type._supportInterpolationMode && value !== InterpolationType.Step) {\n      this._interpolation = InterpolationType.Step;\n      console.warn(\"The interpolation type must be `InterpolationType.Step`.\");\n    } else {\n      this._interpolation = value;\n    }\n  }\n\n  /**\n   * Animation curve length in seconds.\n   */\n  get length(): number {\n    return this._length;\n  }\n\n  constructor() {\n    const type = (<unknown>this.constructor) as IAnimationCurveCalculator<V>;\n    this._interpolation = type._supportInterpolationMode ? InterpolationType.Linear : InterpolationType.Step;\n    this._type = type;\n  }\n\n  /**\n   * Add a new key to the curve.\n   * @param key - The keyframe\n   */\n  addKey(key: Keyframe<V>): void {\n    const { time } = key;\n    const { keys } = this;\n\n    if (time >= this._length) {\n      keys.push(key);\n      this._length = time;\n    } else {\n      let index = keys.length;\n      while (--index >= 0 && time < keys[index].time);\n      keys.splice(index + 1, 0, key);\n    }\n  }\n\n  /**\n   * Evaluate the curve at time.\n   * @param time - The time within the curve you want to evaluate\n   */\n  evaluate(time: number): V {\n    return this._evaluate(time, this._evaluateData);\n  }\n\n  /**\n   * Removes a key.\n   * @param index - The index of the key to remove\n   */\n  removeKey(index: number): void {\n    this.keys.splice(index, 1);\n    const { keys } = this;\n\n    let newLength = 0;\n    for (let i = keys.length - 1; i >= 0; i--) {\n      const key = keys[i];\n      if (key.time > this._length) {\n        newLength = key.time;\n      }\n    }\n    this._length = newLength;\n  }\n\n  /**\n   * @internal\n   */\n  _evaluate(time: number, evaluateData: IEvaluateData<V>): V {\n    const { length } = this.keys;\n    if (!length) {\n      console.warn(`This curve don't have any keyframes: `, this);\n      return;\n    }\n\n    const { keys, interpolation } = this;\n\n    // Compute curIndex and nextIndex.\n    let curIndex = evaluateData.curKeyframeIndex;\n\n    // Reset loop,if delete keyfranme may cause `curIndex >= length`\n    if (curIndex !== -1 && (curIndex >= length || time < keys[curIndex].time)) {\n      curIndex = -1;\n    }\n\n    let nextIndex = curIndex + 1;\n    while (nextIndex < length) {\n      if (time < keys[nextIndex].time) {\n        break;\n      }\n      curIndex++;\n      nextIndex++;\n    }\n    evaluateData.curKeyframeIndex = curIndex;\n\n    // Evaluate value.\n    let value: V;\n    if (curIndex === -1) {\n      value = this._type._setValue(keys[0].value, evaluateData.value);\n    } else if (nextIndex === length) {\n      value = this._type._setValue(keys[curIndex].value, evaluateData.value);\n    } else {\n      // Time between first frame and end frame.\n      const curFrame = keys[curIndex];\n      const nextFrame = keys[nextIndex];\n      const curFrameTime = curFrame.time;\n      const duration = nextFrame.time - curFrameTime;\n      const t = (time - curFrameTime) / duration;\n\n      switch (interpolation) {\n        case InterpolationType.Linear:\n          value = this._type._lerpValue(curFrame.value, nextFrame.value, t, evaluateData.value);\n          break;\n        case InterpolationType.Step:\n          value = this._type._setValue(curFrame.value, evaluateData.value);\n          break;\n        case InterpolationType.CubicSpine:\n        case InterpolationType.Hermite:\n          value = this._type._hermiteInterpolationValue(curFrame, nextFrame, t, duration, evaluateData.value);\n          break;\n      }\n    }\n\n    evaluateData.value = value;\n\n    return value;\n  }\n\n  /**\n   * @internal\n   */\n  _evaluateAdditive(time: number, evaluateData: IEvaluateData<V>): V {\n    const result = this._evaluate(time, evaluateData);\n    return this._type._subtractValue(result, this.keys[0].value, evaluateData.value);\n  }\n}\n","import { StaticInterfaceImplement } from \"../../base/StaticInterfaceImplement\";\nimport { AnimationCurveLayerOwner } from \"../internal/AnimationCurveLayerOwner\";\nimport { AnimationCurveOwner } from \"../internal/animationCurveOwner/AnimationCurveOwner\";\nimport { Keyframe } from \"../Keyframe\";\nimport { AnimationCurve } from \"./AnimationCurve\";\nimport { IAnimationCurveCalculator } from \"./interfaces/IAnimationCurveCalculator\";\n\n/**\n * Store a collection of Keyframes that can be evaluated over time.\n */\n@StaticInterfaceImplement<IAnimationCurveCalculator<number[]>>()\nexport class AnimationArrayCurve extends AnimationCurve<number[]> {\n  /** @internal */\n  static _isCopyMode: boolean = true;\n  /** @internal */\n  static _supportInterpolationMode: boolean = true;\n\n  /**\n   * @internal\n   */\n  static _initializeOwner(owner: AnimationCurveOwner<number[]>): void {\n    owner.defaultValue = [];\n    owner.fixedPoseValue = [];\n    owner.baseEvaluateData.value = [];\n    owner.crossEvaluateData.value = [];\n  }\n\n  /**\n   * @internal\n   */\n  static _initializeLayerOwner(owner: AnimationCurveLayerOwner): void {\n    owner.finalValue = [];\n  }\n\n  /**\n   * @internal\n   */\n  static _lerpValue(srcValue: number[], destValue: number[], weight: number, out: number[]): number[] {\n    for (let i = 0, n = out.length; i < n; ++i) {\n      const src = srcValue[i];\n      out[i] = src + (destValue[i] - src) * weight;\n    }\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _subtractValue(src: number[], base: number[], out: number[]): number[] {\n    for (let i = 0, n = src.length; i < n; i++) {\n      out[i] = src[i] - base[i];\n    }\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _getZeroValue(out: number[]): number[] {\n    for (let i = 0, n = out.length; i < n; i++) {\n      out[i] = 0;\n    }\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _additiveValue(value: number[], weight: number, out: number[]): number[] {\n    for (let i = 0, n = out.length; i < n; ++i) {\n      out[i] += value[i] * weight;\n    }\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _setValue(source: number[], out: number[]): number[] {\n    for (let i = 0, n = out.length; i < n; ++i) {\n      out[i] = source[i];\n    }\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _hermiteInterpolationValue(\n    frame: Keyframe<number[]>,\n    nextFrame: Keyframe<number[]>,\n    t: number,\n    duration: number,\n    out: number[]\n  ): number[] {\n    const t0 = frame.outTangent;\n    const t1 = nextFrame.inTangent;\n    const p0 = frame.value;\n    const p1 = nextFrame.value;\n\n    const t2 = t * t;\n    const t3 = t2 * t;\n    const a = 2.0 * t3 - 3.0 * t2 + 1.0;\n    const b = t3 - 2.0 * t2 + t;\n    const c = t3 - t2;\n    const d = -2.0 * t3 + 3.0 * t2;\n\n    for (let i = 0, n = p0.length; i < n; ++i) {\n      if (Number.isFinite(t0[i]) && Number.isFinite(t1[i])) {\n        out[i] = a * p0[i] + b * t0[i] * duration + c * t1[i] * duration + d * p1[i];\n      } else {\n        out[i] = frame.value[i];\n      }\n    }\n    return out;\n  }\n\n  constructor() {\n    super();\n    this._evaluateData.value = [];\n  }\n}\n","import { StaticInterfaceImplement } from \"../../base/StaticInterfaceImplement\";\nimport { AnimationCurveLayerOwner } from \"../internal/AnimationCurveLayerOwner\";\nimport { AnimationCurveOwner } from \"../internal/animationCurveOwner/AnimationCurveOwner\";\nimport { Keyframe } from \"../Keyframe\";\nimport { AnimationCurve } from \"./AnimationCurve\";\nimport { IAnimationCurveCalculator } from \"./interfaces/IAnimationCurveCalculator\";\n\n/**\n * Store a collection of Keyframes that can be evaluated over time.\n */\n@StaticInterfaceImplement<IAnimationCurveCalculator<boolean>>()\nexport class AnimationBoolCurve extends AnimationCurve<boolean> {\n  /** @internal */\n  static _isCopyMode: boolean = false;\n  /** @internal */\n  static _supportInterpolationMode: boolean = false;\n\n  /**\n   * @internal\n   */\n  static _initializeOwner(owner: AnimationCurveOwner<boolean>): void {\n    owner.defaultValue = false;\n    owner.fixedPoseValue = false;\n    owner.baseEvaluateData.value = false;\n    owner.crossEvaluateData.value = false;\n  }\n\n  /**\n   * @internal\n   */\n  static _initializeLayerOwner(owner: AnimationCurveLayerOwner): void {\n    owner.finalValue = false;\n  }\n\n  /**\n   * @internal\n   */\n  static _lerpValue(srcValue: boolean, destValue: boolean): boolean {\n    return srcValue;\n  }\n\n  /**\n   * @internal\n   */\n  static _subtractValue(src: boolean, base: boolean, out: boolean): boolean {\n    return src;\n  }\n\n  /**\n   * @internal\n   */\n  static _getZeroValue(): boolean {\n    return false;\n  }\n  /**\n   * @internal\n   */\n  static _additiveValue(value: boolean, weight: number, source: boolean): boolean {\n    return value;\n  }\n\n  /**\n   * @internal\n   */\n  static _setValue(value: boolean): boolean {\n    return value;\n  }\n\n  /**\n   * @internal\n   */\n  static _hermiteInterpolationValue(frame: Keyframe<boolean>): boolean {\n    return frame.value;\n  }\n\n  constructor() {\n    super();\n    this._evaluateData.value = false;\n  }\n}\n","import { Color } from \"@galacean/engine-math\";\nimport { StaticInterfaceImplement } from \"../../base/StaticInterfaceImplement\";\nimport { AnimationCurveLayerOwner } from \"../internal/AnimationCurveLayerOwner\";\nimport { AnimationCurveOwner } from \"../internal/animationCurveOwner/AnimationCurveOwner\";\nimport { Keyframe } from \"../Keyframe\";\nimport { AnimationCurve } from \"./AnimationCurve\";\nimport { IAnimationCurveCalculator } from \"./interfaces/IAnimationCurveCalculator\";\n\n/**\n * Store a collection of Keyframes that can be evaluated over time.\n */\n@StaticInterfaceImplement<IAnimationCurveCalculator<Color>>()\nexport class AnimationColorCurve extends AnimationCurve<Color> {\n  /** @internal */\n  static _isCopyMode: boolean = true;\n  /** @internal */\n  static _supportInterpolationMode: boolean = true;\n\n  /**\n   * @internal\n   */\n  static _initializeOwner(owner: AnimationCurveOwner<Color>): void {\n    owner.defaultValue = new Color();\n    owner.fixedPoseValue = new Color();\n    owner.baseEvaluateData.value = new Color();\n    owner.crossEvaluateData.value = new Color();\n  }\n\n  /**\n   * @internal\n   */\n  static _initializeLayerOwner(owner: AnimationCurveLayerOwner): void {\n    owner.finalValue = new Color();\n  }\n\n  /**\n   * @internal\n   */\n  static _lerpValue(srcValue: Color, destValue: Color, weight: number, out: Color): Color {\n    Color.lerp(srcValue, destValue, weight, out);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _subtractValue(src: Color, base: Color, out: Color): Color {\n    Color.subtract(src, base, out);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _getZeroValue(out: Color) {\n    out.set(0, 0, 0, 0);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _additiveValue(value: Color, weight: number, out: Color): Color {\n    Color.scale(value, weight, value);\n    Color.add(out, value, out);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _setValue(source: Color, out: Color): Color {\n    out.copyFrom(source);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _hermiteInterpolationValue(\n    frame: Keyframe<Color>,\n    nextFrame: Keyframe<Color>,\n    t: number,\n    dur: number,\n    out: Color\n  ): Color {\n    const p0 = frame.value;\n    const tan0 = frame.outTangent;\n    const p1 = nextFrame.value;\n    const tan1 = nextFrame.inTangent;\n\n    const t2 = t * t;\n    const t3 = t2 * t;\n    const a = 2.0 * t3 - 3.0 * t2 + 1.0;\n    const b = t3 - 2.0 * t2 + t;\n    const c = t3 - t2;\n    const d = -2.0 * t3 + 3.0 * t2;\n\n    let t0 = tan0.x,\n      t1 = tan1.x;\n    if (Number.isFinite(t0) && Number.isFinite(t1)) {\n      out.r = a * p0.r + b * t0 * dur + c * t1 * dur + d * p1.r;\n    } else {\n      out.r = p0.r;\n    }\n\n    (t0 = tan0.y), (t1 = tan1.y);\n    if (Number.isFinite(t0) && Number.isFinite(t1)) {\n      out.g = a * p0.g + b * t0 * dur + c * t1 * dur + d * p1.g;\n    } else {\n      out.g = p0.g;\n    }\n\n    (t0 = tan0.z), (t1 = tan1.z);\n    if (Number.isFinite(t0) && Number.isFinite(t1)) {\n      out.b = a * p0.b + b * t0 * dur + c * t1 * dur + d * p1.b;\n    } else {\n      out.b = p0.b;\n    }\n\n    (t0 = tan0.w), (t1 = tan1.w);\n    if (Number.isFinite(t0) && Number.isFinite(t1)) {\n      out.a = a * p0.a + b * t0 * dur + c * t1 * dur + d * p1.a;\n    } else {\n      out.a = p0.a;\n    }\n\n    return out;\n  }\n\n  constructor() {\n    super();\n    this._evaluateData.value = new Color();\n  }\n}\n","import { StaticInterfaceImplement } from \"../../base/StaticInterfaceImplement\";\nimport { AnimationCurveLayerOwner } from \"../internal/AnimationCurveLayerOwner\";\nimport { AnimationCurveOwner } from \"../internal/animationCurveOwner/AnimationCurveOwner\";\nimport { Keyframe } from \"../Keyframe\";\nimport { AnimationCurve } from \"./AnimationCurve\";\nimport { IAnimationCurveCalculator } from \"./interfaces/IAnimationCurveCalculator\";\n\n/**\n * Store a collection of Keyframes that can be evaluated over time.\n */\n@StaticInterfaceImplement<IAnimationCurveCalculator<Float32Array>>()\nexport class AnimationFloatArrayCurve extends AnimationCurve<Float32Array> {\n  /** @internal */\n  static _isCopyMode: boolean = true;\n  /** @internal */\n  static _supportInterpolationMode: boolean = true;\n\n  /**\n   * @internal\n   */\n  static _initializeOwner(owner: AnimationCurveOwner<Float32Array>): void {\n    const size = owner.referenceTargetValue.length;\n    owner.defaultValue = new Float32Array(size);\n    owner.fixedPoseValue = new Float32Array(size);\n    owner.baseEvaluateData.value = new Float32Array(size);\n    owner.crossEvaluateData.value = new Float32Array(size);\n  }\n\n  /**\n   * @internal\n   */\n  static _initializeLayerOwner(owner: AnimationCurveLayerOwner): void {\n    const size = (<Float32Array>owner.curveOwner.referenceTargetValue).length;\n    owner.finalValue = new Float32Array(size);\n  }\n\n  /**\n   * @internal\n   */\n  static _lerpValue(srcValue: Float32Array, destValue: Float32Array, weight: number, out: Float32Array): Float32Array {\n    for (let i = 0, n = out.length; i < n; ++i) {\n      const src = srcValue[i];\n      out[i] = src + (destValue[i] - src) * weight;\n    }\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _subtractValue(src: Float32Array, base: Float32Array, out: Float32Array): Float32Array {\n    for (let i = 0, n = src.length; i < n; i++) {\n      out[i] = src[i] - base[i];\n    }\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _getZeroValue(out: Float32Array): Float32Array {\n    for (let i = 0, n = out.length; i < n; i++) {\n      out[i] = 0;\n    }\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _additiveValue(value: Float32Array, weight: number, out: Float32Array): Float32Array {\n    for (let i = 0, n = out.length; i < n; ++i) {\n      out[i] += value[i] * weight;\n    }\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _setValue(source: Float32Array, out: Float32Array): Float32Array {\n    for (let i = 0, n = out.length; i < n; ++i) {\n      out[i] = source[i];\n    }\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _hermiteInterpolationValue(\n    frame: Keyframe<Float32Array>,\n    nextFrame: Keyframe<Float32Array>,\n    t: number,\n    dur: number,\n    out: Float32Array\n  ): Float32Array {\n    const t0 = frame.outTangent;\n    const t1 = nextFrame.inTangent;\n    const p0 = frame.value;\n    const p1 = nextFrame.value;\n\n    const t2 = t * t;\n    const t3 = t2 * t;\n    const a = 2.0 * t3 - 3.0 * t2 + 1.0;\n    const b = t3 - 2.0 * t2 + t;\n    const c = t3 - t2;\n    const d = -2.0 * t3 + 3.0 * t2;\n\n    for (let i = 0, n = p0.length; i < n; ++i) {\n      if (Number.isFinite(t0[i]) && Number.isFinite(t1[i])) {\n        out[i] = a * p0[i] + b * t0[i] * dur + c * t1[i] * dur + d * p1[i];\n      } else {\n        out[i] = frame.value[i];\n      }\n    }\n    return out;\n  }\n\n  /**\n   * @inheritdoc\n   */\n  override addKey(key: Keyframe<Float32Array>): void {\n    super.addKey(key);\n\n    const evaluateData = this._evaluateData;\n    if (!evaluateData.value || evaluateData.value.length !== key.value.length) {\n      const size = key.value.length;\n      evaluateData.value = new Float32Array(size);\n    }\n  }\n}\n","import { StaticInterfaceImplement } from \"../../base/StaticInterfaceImplement\";\nimport { AnimationCurveLayerOwner } from \"../internal/AnimationCurveLayerOwner\";\nimport { AnimationCurveOwner } from \"../internal/animationCurveOwner/AnimationCurveOwner\";\nimport { Keyframe } from \"../Keyframe\";\nimport { AnimationCurve } from \"./AnimationCurve\";\nimport { IAnimationCurveCalculator } from \"./interfaces/IAnimationCurveCalculator\";\n\n/**\n * Store a collection of Keyframes that can be evaluated over time.\n */\n@StaticInterfaceImplement<IAnimationCurveCalculator<number>>()\nexport class AnimationFloatCurve extends AnimationCurve<number> {\n  /** @internal */\n  static _isCopyMode: boolean = false;\n  /** @internal */\n  static _supportInterpolationMode: boolean = true;\n\n  /**\n   * @internal\n   */\n  static _initializeOwner(owner: AnimationCurveOwner<number>): void {\n    owner.defaultValue = 0;\n    owner.fixedPoseValue = 0;\n    owner.baseEvaluateData.value = 0;\n    owner.crossEvaluateData.value = 0;\n  }\n\n  /**\n   * @internal\n   */\n  static _initializeLayerOwner(owner: AnimationCurveLayerOwner): void {\n    owner.finalValue = 0;\n  }\n\n  /**\n   * @internal\n   */\n  static _lerpValue(srcValue: number, destValue: number, crossWeight: number): number {\n    return srcValue + (destValue - srcValue) * crossWeight;\n  }\n\n  /**\n   * @internal\n   */\n  static _additiveValue(value: number, weight: number, source: number): number {\n    return (source += value * weight);\n  }\n\n  /**\n   * @internal\n   */\n  static _subtractValue(src: number, base: number): number {\n    return src - base;\n  }\n\n  /**\n   * @internal\n   */\n  static _getZeroValue(): number {\n    return 0;\n  }\n\n  /**\n   * @internal\n   */\n  static _setValue(source: number): number {\n    return source;\n  }\n\n  /**\n   * @internal\n   */\n  static _hermiteInterpolationValue(\n    frame: Keyframe<number>,\n    nextFrame: Keyframe<number>,\n    t: number,\n    dur: number\n  ): number {\n    const t0 = frame.outTangent;\n    const t1 = nextFrame.inTangent;\n    if (Number.isFinite(t0) && Number.isFinite(t1)) {\n      const t2 = t * t;\n      const t3 = t2 * t;\n      const a = 2.0 * t3 - 3.0 * t2 + 1.0;\n      const b = t3 - 2.0 * t2 + t;\n      const c = t3 - t2;\n      const d = -2.0 * t3 + 3.0 * t2;\n      return a * frame.value + b * t0 * dur + c * t1 * dur + d * nextFrame.value;\n    } else {\n      return frame.value;\n    }\n  }\n\n  constructor() {\n    super();\n    this._evaluateData.value = 0;\n  }\n}\n","import { Quaternion } from \"@galacean/engine-math\";\nimport { StaticInterfaceImplement } from \"../../base/StaticInterfaceImplement\";\nimport { AnimationCurveLayerOwner } from \"../internal/AnimationCurveLayerOwner\";\nimport { AnimationCurveOwner } from \"../internal/animationCurveOwner/AnimationCurveOwner\";\nimport { Keyframe } from \"../Keyframe\";\nimport { AnimationCurve } from \"./AnimationCurve\";\nimport { IAnimationCurveCalculator } from \"./interfaces/IAnimationCurveCalculator\";\n\n/**\n * Store a collection of Keyframes that can be evaluated over time.\n */\n@StaticInterfaceImplement<IAnimationCurveCalculator<Quaternion>>()\nexport class AnimationQuaternionCurve extends AnimationCurve<Quaternion> {\n  /** @internal */\n  static _supportInterpolationMode: boolean = true;\n  /** @internal */\n  static _isCopyMode: boolean = true;\n\n  /** @internal */\n  private static _tempConjugateQuat = new Quaternion();\n\n  /**\n   * @internal\n   */\n  static _initializeOwner(owner: AnimationCurveOwner<Quaternion>): void {\n    owner.defaultValue = new Quaternion();\n    owner.fixedPoseValue = new Quaternion();\n    owner.baseEvaluateData.value = new Quaternion();\n    owner.crossEvaluateData.value = new Quaternion();\n  }\n\n  /**\n   * @internal\n   */\n  static _initializeLayerOwner(owner: AnimationCurveLayerOwner): void {\n    owner.finalValue = new Quaternion();\n  }\n\n  /**\n   * @internal\n   */\n  static _lerpValue(src: Quaternion, dest: Quaternion, weight: number, out: Quaternion): Quaternion {\n    Quaternion.slerp(src, dest, weight, out);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _additiveValue(value: Quaternion, weight: number, out: Quaternion): Quaternion {\n    value.x = value.x * weight;\n    value.y = value.y * weight;\n    value.z = value.z * weight;\n\n    value.normalize();\n    out.multiply(value);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _subtractValue(src: Quaternion, base: Quaternion, out: Quaternion): Quaternion {\n    const { _tempConjugateQuat: conjugate } = AnimationQuaternionCurve;\n    Quaternion.conjugate(base, conjugate);\n    Quaternion.multiply(conjugate, src, out);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _getZeroValue(out: Quaternion): Quaternion {\n    out.set(0, 0, 0, 1);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _setValue(source: Quaternion, out: Quaternion): Quaternion {\n    out.copyFrom(source);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _hermiteInterpolationValue(\n    frame: Keyframe<Quaternion>,\n    nextFrame: Keyframe<Quaternion>,\n    t: number,\n    dur: number,\n    out: Quaternion\n  ): Quaternion {\n    const p0 = frame.value;\n    const tan0 = frame.outTangent;\n    const p1 = nextFrame.value;\n    const tan1 = nextFrame.inTangent;\n\n    const t2 = t * t;\n    const t3 = t2 * t;\n    const a = 2.0 * t3 - 3.0 * t2 + 1.0;\n    const b = t3 - 2.0 * t2 + t;\n    const c = t3 - t2;\n    const d = -2.0 * t3 + 3.0 * t2;\n\n    let t0 = tan0.x,\n      t1 = tan1.x;\n    if (Number.isFinite(t0) && Number.isFinite(t1)) {\n      out.x = a * p0.x + b * t0 * dur + c * t1 * dur + d * p1.x;\n    } else {\n      out.x = p0.x;\n    }\n\n    (t0 = tan0.y), (t1 = tan1.y);\n    if (Number.isFinite(t0) && Number.isFinite(t1)) {\n      out.y = a * p0.y + b * t0 * dur + c * t1 * dur + d * p1.y;\n    } else {\n      out.y = p0.y;\n    }\n\n    (t0 = tan0.z), (t1 = tan1.z);\n    if (Number.isFinite(t0) && Number.isFinite(t1)) {\n      out.z = a * p0.z + b * t0 * dur + c * t1 * dur + d * p1.z;\n    } else {\n      out.z = p0.z;\n    }\n\n    (t0 = tan0.w), (t1 = tan1.w);\n    if (Number.isFinite(t0) && Number.isFinite(t1)) {\n      out.w = a * p0.w + b * t0 * dur + c * t1 * dur + d * p1.w;\n    } else {\n      out.w = p0.w;\n    }\n    return out;\n  }\n\n  constructor() {\n    super();\n    this._evaluateData.value = new Quaternion();\n  }\n}\n","import { Vector2 } from \"@galacean/engine-math\";\nimport { StaticInterfaceImplement } from \"../../base/StaticInterfaceImplement\";\nimport { AnimationCurveLayerOwner } from \"../internal/AnimationCurveLayerOwner\";\nimport { AnimationCurveOwner } from \"../internal/animationCurveOwner/AnimationCurveOwner\";\nimport { Keyframe } from \"../Keyframe\";\nimport { AnimationCurve } from \"./AnimationCurve\";\nimport { IAnimationCurveCalculator } from \"./interfaces/IAnimationCurveCalculator\";\n\n/**\n * Store a collection of Keyframes that can be evaluated over time.\n */\n@StaticInterfaceImplement<IAnimationCurveCalculator<Vector2>>()\nexport class AnimationVector2Curve extends AnimationCurve<Vector2> {\n  /** @internal */\n  static _isCopyMode: boolean = true;\n  /** @internal */\n  static _supportInterpolationMode: boolean = true;\n\n  /**\n   * @internal\n   */\n  static _initializeOwner(owner: AnimationCurveOwner<Vector2>): void {\n    owner.defaultValue = new Vector2();\n    owner.fixedPoseValue = new Vector2();\n    owner.baseEvaluateData.value = new Vector2();\n    owner.crossEvaluateData.value = new Vector2();\n  }\n\n  /**\n   * @internal\n   */\n  static _initializeLayerOwner(owner: AnimationCurveLayerOwner): void {\n    owner.finalValue = new Vector2();\n  }\n\n  /**\n   * @internal\n   */\n  static _lerpValue(srcValue: Vector2, destValue: Vector2, weight: number, out: Vector2): Vector2 {\n    Vector2.lerp(srcValue, destValue, weight, out);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _additiveValue(value: Vector2, weight: number, out: Vector2): Vector2 {\n    Vector2.scale(value, weight, value);\n    Vector2.add(out, value, out);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _subtractValue(src: Vector2, base: Vector2, out: Vector2): Vector2 {\n    Vector2.subtract(src, base, out);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _getZeroValue(out: Vector2): Vector2 {\n    out.set(0, 0);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _setValue(source: Vector2, out: Vector2): Vector2 {\n    out.copyFrom(source);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _hermiteInterpolationValue(\n    frame: Keyframe<Vector2>,\n    nextFrame: Keyframe<Vector2>,\n    t: number,\n    dur: number,\n    out: Vector2\n  ): Vector2 {\n    const p0 = frame.value;\n    const tan0 = frame.outTangent;\n    const p1 = nextFrame.value;\n    const tan1 = nextFrame.inTangent;\n\n    const t2 = t * t;\n    const t3 = t2 * t;\n    const a = 2.0 * t3 - 3.0 * t2 + 1.0;\n    const b = t3 - 2.0 * t2 + t;\n    const c = t3 - t2;\n    const d = -2.0 * t3 + 3.0 * t2;\n\n    let t0 = tan0.x,\n      t1 = tan1.x;\n    if (Number.isFinite(t0) && Number.isFinite(t1)) {\n      out.x = a * p0.x + b * t0 * dur + c * t1 * dur + d * p1.x;\n    } else {\n      out.x = p0.x;\n    }\n\n    (t0 = tan0.y), (t1 = tan1.y);\n    if (Number.isFinite(t0) && Number.isFinite(t1)) {\n      out.y = a * p0.y + b * t0 * dur + c * t1 * dur + d * p1.y;\n    } else {\n      out.y = p0.y;\n    }\n\n    return out;\n  }\n\n  constructor() {\n    super();\n    this._evaluateData.value = new Vector2();\n  }\n}\n","import { Vector3 } from \"@galacean/engine-math\";\nimport { StaticInterfaceImplement } from \"../../base/StaticInterfaceImplement\";\nimport { AnimationCurveLayerOwner } from \"../internal/AnimationCurveLayerOwner\";\nimport { AnimationCurveOwner } from \"../internal/animationCurveOwner/AnimationCurveOwner\";\nimport { Keyframe } from \"../Keyframe\";\nimport { AnimationCurve } from \"./AnimationCurve\";\nimport { IAnimationCurveCalculator } from \"./interfaces/IAnimationCurveCalculator\";\n\n/**\n * Store a collection of Keyframes that can be evaluated over time.\n */\n@StaticInterfaceImplement<IAnimationCurveCalculator<Vector3>>()\nexport class AnimationVector3Curve extends AnimationCurve<Vector3> {\n  /** @internal */\n  static _isCopyMode: boolean = true;\n  /** @internal */\n  static _supportInterpolationMode: boolean = true;\n\n  /**\n   * @internal\n   */\n  static _initializeOwner(owner: AnimationCurveOwner<Vector3>): void {\n    owner.defaultValue = new Vector3();\n    owner.fixedPoseValue = new Vector3();\n    owner.baseEvaluateData.value = new Vector3();\n    owner.crossEvaluateData.value = new Vector3();\n  }\n\n  /**\n   * @internal\n   */\n  static _initializeLayerOwner(owner: AnimationCurveLayerOwner): void {\n    owner.finalValue = new Vector3();\n  }\n\n  /**\n   * @internal\n   */\n  static _lerpValue(srcValue: Vector3, destValue: Vector3, weight: number, out: Vector3): Vector3 {\n    Vector3.lerp(srcValue, destValue, weight, out);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _relativeBaseValue(base: Vector3, out: Vector3): Vector3 {\n    Vector3.subtract(out, base, out);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _additiveValue(value: Vector3, weight: number, out: Vector3): Vector3 {\n    Vector3.scale(value, weight, value);\n    Vector3.add(out, value, out);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _subtractValue(src: Vector3, base: Vector3, out: Vector3): Vector3 {\n    Vector3.subtract(src, base, out);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _getZeroValue(out: Vector3): Vector3 {\n    out.set(0, 0, 0);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _setValue(source: Vector3, out: Vector3): Vector3 {\n    out.copyFrom(source);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _hermiteInterpolationValue(\n    frame: Keyframe<Vector3>,\n    nextFrame: Keyframe<Vector3>,\n    t: number,\n    dur: number,\n    out: Vector3\n  ): Vector3 {\n    const p0 = frame.value;\n    const tan0 = frame.outTangent;\n    const p1 = nextFrame.value;\n    const tan1 = nextFrame.inTangent;\n\n    const t2 = t * t;\n    const t3 = t2 * t;\n    const a = 2.0 * t3 - 3.0 * t2 + 1.0;\n    const b = t3 - 2.0 * t2 + t;\n    const c = t3 - t2;\n    const d = -2.0 * t3 + 3.0 * t2;\n\n    let t0 = tan0.x,\n      t1 = tan1.x;\n    if (Number.isFinite(t0) && Number.isFinite(t1)) {\n      out.x = a * p0.x + b * t0 * dur + c * t1 * dur + d * p1.x;\n    } else {\n      out.x = p0.x;\n    }\n\n    (t0 = tan0.y), (t1 = tan1.y);\n    if (Number.isFinite(t0) && Number.isFinite(t1)) {\n      out.y = a * p0.y + b * t0 * dur + c * t1 * dur + d * p1.y;\n    } else {\n      out.y = p0.y;\n    }\n\n    (t0 = tan0.z), (t1 = tan1.z);\n    if (Number.isFinite(t0) && Number.isFinite(t1)) {\n      out.z = a * p0.z + b * t0 * dur + c * t1 * dur + d * p1.z;\n    } else {\n      out.z = p0.z;\n    }\n\n    return out;\n  }\n\n  constructor() {\n    super();\n    this._evaluateData.value = new Vector3();\n  }\n}\n","import { Vector4 } from \"@galacean/engine-math\";\nimport { StaticInterfaceImplement } from \"../../base/StaticInterfaceImplement\";\nimport { AnimationCurveLayerOwner } from \"../internal/AnimationCurveLayerOwner\";\nimport { AnimationCurveOwner } from \"../internal/animationCurveOwner/AnimationCurveOwner\";\nimport { Keyframe } from \"../Keyframe\";\nimport { AnimationCurve } from \"./AnimationCurve\";\nimport { IAnimationCurveCalculator } from \"./interfaces/IAnimationCurveCalculator\";\n\n/**\n * Store a collection of Keyframes that can be evaluated over time.\n */\n@StaticInterfaceImplement<IAnimationCurveCalculator<Vector4>>()\nexport class AnimationVector4Curve extends AnimationCurve<Vector4> {\n  /** @internal */\n  static _isCopyMode: boolean = true;\n  /** @internal */\n  static _supportInterpolationMode: boolean = true;\n\n  /**\n   * @internal\n   */\n  static _initializeOwner(owner: AnimationCurveOwner<Vector4>): void {\n    owner.defaultValue = new Vector4();\n    owner.fixedPoseValue = new Vector4();\n    owner.baseEvaluateData.value = new Vector4();\n    owner.crossEvaluateData.value = new Vector4();\n  }\n\n  /**\n   * @internal\n   */\n  static _initializeLayerOwner(owner: AnimationCurveLayerOwner): void {\n    owner.finalValue = new Vector4();\n  }\n\n  /**\n   * @internal\n   */\n  static _lerpValue(srcValue: Vector4, destValue: Vector4, weight: number, out: Vector4): Vector4 {\n    Vector4.lerp(srcValue, destValue, weight, out);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _additiveValue(value: Vector4, weight: number, out: Vector4): Vector4 {\n    Vector4.scale(value, weight, value);\n    Vector4.add(out, value, out);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _subtractValue(src: Vector4, base: Vector4, out: Vector4): Vector4 {\n    Vector4.subtract(src, base, out);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _getZeroValue(out: Vector4): Vector4 {\n    out.set(0, 0, 0, 0);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _setValue(source: Vector4, out: Vector4): Vector4 {\n    out.copyFrom(source);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _hermiteInterpolationValue(\n    frame: Keyframe<Vector4>,\n    nextFrame: Keyframe<Vector4>,\n    t: number,\n    dur: number,\n    out: Vector4\n  ): Vector4 {\n    const p0 = frame.value;\n    const tan0 = frame.outTangent;\n    const p1 = nextFrame.value;\n    const tan1 = nextFrame.inTangent;\n\n    const t2 = t * t;\n    const t3 = t2 * t;\n    const a = 2.0 * t3 - 3.0 * t2 + 1.0;\n    const b = t3 - 2.0 * t2 + t;\n    const c = t3 - t2;\n    const d = -2.0 * t3 + 3.0 * t2;\n\n    let t0 = tan0.x,\n      t1 = tan1.x;\n    if (Number.isFinite(t0) && Number.isFinite(t1)) {\n      out.x = a * p0.x + b * t0 * dur + c * t1 * dur + d * p1.x;\n    } else {\n      out.x = p0.x;\n    }\n\n    (t0 = tan0.y), (t1 = tan1.y);\n    if (Number.isFinite(t0) && Number.isFinite(t1)) {\n      out.y = a * p0.y + b * t0 * dur + c * t1 * dur + d * p1.y;\n    } else {\n      out.y = p0.y;\n    }\n\n    (t0 = tan0.z), (t1 = tan1.z);\n    if (Number.isFinite(t0) && Number.isFinite(t1)) {\n      out.z = a * p0.z + b * t0 * dur + c * t1 * dur + d * p1.z;\n    } else {\n      out.z = p0.z;\n    }\n\n    (t0 = tan0.w), (t1 = tan1.w);\n    if (Number.isFinite(t0) && Number.isFinite(t1)) {\n      out.w = a * p0.w + b * t0 * dur + c * t1 * dur + d * p1.w;\n    } else {\n      out.w = p0.w;\n    }\n    return out;\n  }\n\n  constructor() {\n    super();\n    this._evaluateData.value = new Vector4();\n  }\n}\n","import { ReferResource } from \"../../asset/ReferResource\";\nimport { StaticInterfaceImplement } from \"../../base/StaticInterfaceImplement\";\nimport { AnimationCurveLayerOwner } from \"../internal/AnimationCurveLayerOwner\";\nimport { AnimationCurveOwner } from \"../internal/animationCurveOwner/AnimationCurveOwner\";\nimport { Keyframe } from \"../Keyframe\";\nimport { AnimationCurve } from \"./AnimationCurve\";\nimport { IAnimationCurveCalculator } from \"./interfaces/IAnimationCurveCalculator\";\n\n/**\n * Store a collection of Keyframes that can be evaluated over time.\n */\n@StaticInterfaceImplement<IAnimationCurveCalculator<ReferResource>>()\nexport class AnimationRefCurve extends AnimationCurve<ReferResource> {\n  /** @internal */\n  static _isCopyMode: boolean = false;\n  /** @internal */\n  static _supportInterpolationMode: boolean = false;\n\n  /**\n   * @internal\n   */\n  static _initializeOwner(owner: AnimationCurveOwner<ReferResource>): void {}\n\n  /**\n   * @internal\n   */\n  static _initializeLayerOwner(owner: AnimationCurveLayerOwner): void {}\n\n  /**\n   * @internal\n   */\n  static _setValue(value: ReferResource): ReferResource {\n    return value;\n  }\n\n  constructor() {\n    super();\n  }\n}\n","import { Rect } from \"@galacean/engine-math\";\nimport { StaticInterfaceImplement } from \"../../base/StaticInterfaceImplement\";\nimport { AnimationCurveLayerOwner } from \"../internal/AnimationCurveLayerOwner\";\nimport { AnimationCurveOwner } from \"../internal/animationCurveOwner/AnimationCurveOwner\";\nimport { AnimationCurve } from \"./AnimationCurve\";\nimport { IAnimationCurveCalculator } from \"./interfaces/IAnimationCurveCalculator\";\n\n/**\n * Store a collection of Keyframes that can be evaluated over time.\n */\n@StaticInterfaceImplement<IAnimationCurveCalculator<Rect>>()\nexport class AnimationRectCurve extends AnimationCurve<Rect> {\n  /** @internal */\n  static _isCopyMode: boolean = true;\n  /** @internal */\n  static _supportInterpolationMode: boolean = false;\n\n  /**\n   * @internal\n   */\n  static _initializeOwner(owner: AnimationCurveOwner<Rect>): void {\n    owner.defaultValue = new Rect();\n    owner.fixedPoseValue = new Rect();\n    owner.baseEvaluateData.value = new Rect();\n    owner.crossEvaluateData.value = new Rect();\n  }\n\n  /**\n   * @internal\n   */\n  static _initializeLayerOwner(owner: AnimationCurveLayerOwner): void {\n    owner.finalValue = new Rect();\n  }\n\n  /**\n   * @internal\n   */\n  static _setValue(source: Rect, out: Rect): Rect {\n    out.copyFrom(source);\n    return out;\n  }\n\n  constructor() {\n    super();\n    this._evaluateData.value = new Rect();\n  }\n}\n","import { StaticInterfaceImplement } from \"../../base/StaticInterfaceImplement\";\nimport { AnimationCurveLayerOwner } from \"../internal/AnimationCurveLayerOwner\";\nimport { AnimationCurveOwner } from \"../internal/animationCurveOwner/AnimationCurveOwner\";\nimport { Keyframe } from \"../Keyframe\";\nimport { AnimationCurve } from \"./AnimationCurve\";\nimport { IAnimationCurveCalculator } from \"./interfaces/IAnimationCurveCalculator\";\n\n/**\n * Store a collection of Keyframes that can be evaluated over time.\n */\n@StaticInterfaceImplement<IAnimationCurveCalculator<string>>()\nexport class AnimationStringCurve extends AnimationCurve<string> {\n  /** @internal */\n  static _isCopyMode: boolean = false;\n  /** @internal */\n  static _supportInterpolationMode: boolean = false;\n\n  /**\n   * @internal\n   */\n  static _initializeOwner(owner: AnimationCurveOwner<string>): void {\n    owner.defaultValue = \"\";\n    owner.fixedPoseValue = \"\";\n    owner.baseEvaluateData.value = \"\";\n    owner.crossEvaluateData.value = \"\";\n  }\n\n  /**\n   * @internal\n   */\n  static _initializeLayerOwner(owner: AnimationCurveLayerOwner): void {\n    owner.finalValue = \"\";\n  }\n\n  /**\n   * @internal\n   */\n  static _lerpValue(srcValue: string, destValue: string): string {\n    return srcValue;\n  }\n\n  /**\n   * @internal\n   */\n  static _subtractValue(src: string, base: string, out: string): string {\n    return src;\n  }\n\n  /**\n   * @internal\n   */\n  static _getZeroValue(): string {\n    return \"\";\n  }\n  /**\n   * @internal\n   */\n  static _additiveValue(value: string, weight: number, source: string): string {\n    return value;\n  }\n\n  /**\n   * @internal\n   */\n  static _setValue(value: string): string {\n    return value;\n  }\n\n  /**\n   * @internal\n   */\n  static _hermiteInterpolationValue(frame: Keyframe<string>): string {\n    return frame.value;\n  }\n\n  constructor() {\n    super();\n    this._evaluateData.value = \"\";\n  }\n}\n","/**\n * The mode of the animator condition.\n */\nexport enum AnimatorConditionMode {\n  /** The condition is true when the parameter value is true. */\n  If,\n  /** The condition is true when the parameter value is false. */\n  IfNot,\n  /** The condition is true when the parameter value is greater than the threshold. */\n  Greater,\n  /** The condition is true when the parameter value is less than the threshold. */\n  Less,\n  /** The condition is true when the parameter value is equal to the threshold. */\n  Equals,\n  /** The condition is true when the parameter value is not equal to the threshold. */\n  NotEquals\n}\n","/**\n * Animator culling mode.\n */\nexport enum AnimatorCullingMode {\n  /** Disable Culling. */\n  None,\n  /** Completely disabled when renderers are all culled. */\n  Complete\n}\n","export enum AnimatorLayerBlendingMode {\n  Override,\n  Additive\n}\n","/**\n * @internal\n */\nexport enum AnimatorStatePlayState {\n  UnStarted,\n  Playing,\n  Finished\n}\n","/**\n * Layer state.\n */\nexport enum LayerState {\n  /** Standby state. */\n  Standby,\n  /** Playing state. */\n  Playing,\n  /** CrossFading state. */\n  CrossFading,\n  /** FixedCrossFading state. */\n  FixedCrossFading,\n  /** Finished state. */\n  Finished\n}\n","import { IPoolElement } from \"../../utils/ObjectPool\";\nimport { AnimationEvent } from \"../AnimationEvent\";\n/**\n * @internal\n */\nexport class AnimationEventHandler implements IPoolElement {\n  event: AnimationEvent;\n  handlers: Function[] = [];\n\n  dispose() {}\n}\n","function _type_of(obj) {\n    \"@swc/helpers - typeof\";\n\n    return obj && typeof Symbol !== \"undefined\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n}\nexport { _type_of as _ };\n","import { AnimatorControllerParameterValue } from \"./AnimatorControllerParameter\";\nimport { AnimatorConditionMode } from \"./enums/AnimatorConditionMode\";\n\n/**\n * Condition that is used to determine if a transition must be taken.\n */\nexport class AnimatorCondition {\n  /** The mode of the condition. */\n  mode: AnimatorConditionMode;\n  /** The name of the parameter used in the condition. */\n  parameterName: string;\n  /** The AnimatorParameter's threshold value for the condition to be true. */\n  threshold?: AnimatorControllerParameterValue;\n}\n","import { AnimatorCondition } from \"./AnimatorCondition\";\nimport { AnimatorControllerParameterValue } from \"./AnimatorControllerParameter\";\nimport { AnimatorState } from \"./AnimatorState\";\nimport { AnimatorStateTransitionCollection } from \"./AnimatorStateTransitionCollection\";\nimport { AnimatorConditionMode } from \"./enums/AnimatorConditionMode\";\n\n/**\n * Transitions define when and how the state machine switch from on state to another. AnimatorTransition always originate from a StateMachine or a StateMachine entry.\n */\nexport class AnimatorStateTransition {\n  /** The duration of the transition. The duration is in normalized time by default. To set it to be in seconds, set isFixedDuration to true. */\n  duration = 0;\n  /** The time at which the destination state will start. This is represented in normalized time. */\n  offset = 0;\n  /** ExitTime represents the exact time at which the transition can take effect. This is represented in normalized time. */\n  exitTime = 1.0;\n  /** The destination state of the transition. */\n  destinationState: AnimatorState;\n  /** Mutes the transition. The transition will never occur. */\n  mute = false;\n  /** Determines whether the duration of the transition is reported in a fixed duration in seconds or as a normalized time. */\n  isFixedDuration = false;\n\n  /** @internal */\n  _collection: AnimatorStateTransitionCollection;\n  /** @internal */\n  _isExit = false;\n\n  private _conditions: AnimatorCondition[] = [];\n  private _solo = false;\n  private _hasExitTime = true;\n\n  /**\n   * Is the transition destination the exit of the current state machine.\n   */\n  get isExit(): Readonly<boolean> {\n    return this._isExit;\n  }\n\n  /**\n   * Mutes all other transitions in the source state.\n   */\n  get solo(): boolean {\n    return this._solo;\n  }\n\n  set solo(value: boolean) {\n    if (this._solo === value) return;\n    this._solo = value;\n    this._collection?.updateTransitionSolo(value);\n  }\n  /**\n   * The conditions in the transition.\n   */\n  get conditions(): Readonly<AnimatorCondition[]> {\n    return this._conditions;\n  }\n\n  /**\n   * When active the transition will have an exit time condition.\n   */\n  get hasExitTime(): boolean {\n    return this._hasExitTime;\n  }\n\n  set hasExitTime(value: boolean) {\n    if (this._hasExitTime === value) return;\n    this._hasExitTime = value;\n    this._collection?.updateTransitionsIndex(this, value);\n  }\n\n  /**\n   * Add a condition to a transition.\n   * @param parameterName - The name of the parameter\n   * @param mode - The AnimatorCondition mode of the condition\n   * @param threshold - The threshold value of the condition\n   */\n  addCondition(\n    parameterName: string,\n    mode?: AnimatorConditionMode,\n    threshold?: AnimatorControllerParameterValue\n  ): AnimatorCondition;\n\n  /**\n   * Add a condition to a transition.\n   * @param animatorCondition - The condition to add\n   */\n  addCondition(animatorCondition: AnimatorCondition): AnimatorCondition;\n\n  addCondition(\n    param: string | AnimatorCondition,\n    mode?: AnimatorConditionMode,\n    threshold?: AnimatorControllerParameterValue\n  ): AnimatorCondition {\n    if (typeof param === \"object\") {\n      this._conditions.push(param);\n      return param;\n    } else {\n      const condition = new AnimatorCondition();\n      condition.parameterName = param;\n      condition.mode = mode ?? AnimatorConditionMode.If;\n      condition.threshold = threshold;\n      this._conditions.push(condition);\n      return condition;\n    }\n  }\n\n  /**\n   * Remove a condition from the transition.\n   * @param condition - The condition to remove\n   */\n  removeCondition(condition: AnimatorCondition) {\n    const index = this._conditions.indexOf(condition);\n    index !== -1 && this._conditions.splice(index, 1);\n  }\n\n  /**\n   * @internal\n   */\n  _getFixedDuration(): number {\n    return this.isFixedDuration ? this.duration : this.duration * this.destinationState._getDuration();\n  }\n}\n","/**\n * Animation wrap mode.\n */\nexport enum WrapMode {\n  /** Play once */\n  Once = 0,\n  /** Loop play */\n  Loop = 1\n}\n","import { AnimatorState } from \"../AnimatorState\";\nimport { AnimatorStatePlayState } from \"../enums/AnimatorStatePlayState\";\nimport { WrapMode } from \"../enums/WrapMode\";\nimport { AnimatorStateData } from \"./AnimatorStateData\";\n\n/**\n * @internal\n */\nexport class AnimatorStatePlayData {\n  state: AnimatorState;\n  stateData: AnimatorStateData;\n  playedTime: number;\n  playState: AnimatorStatePlayState;\n  clipTime: number;\n  currentEventIndex: number;\n  isForward = true;\n  offsetFrameTime: number;\n\n  private _changedOrientation = false;\n\n  reset(state: AnimatorState, stateData: AnimatorStateData, offsetFrameTime: number): void {\n    this.state = state;\n    this.playedTime = 0;\n    this.offsetFrameTime = offsetFrameTime;\n    this.stateData = stateData;\n    this.playState = AnimatorStatePlayState.UnStarted;\n    this.clipTime = state.clipStartTime * state.clip.length;\n    this.currentEventIndex = 0;\n    this.isForward = true;\n    this.state._transitionCollection.needResetCurrentCheckIndex = true;\n  }\n\n  updateOrientation(deltaTime: number): void {\n    if (deltaTime !== 0) {\n      const lastIsForward = this.isForward;\n      this.isForward = deltaTime > 0;\n      if (this.isForward !== lastIsForward) {\n        this._changedOrientation = true;\n        this.isForward || this._correctTime();\n      }\n    }\n  }\n\n  update(deltaTime: number): void {\n    this.playedTime += deltaTime;\n    const state = this.state;\n    let time = this.playedTime + this.offsetFrameTime;\n    const duration = state._getDuration();\n    this.playState = AnimatorStatePlayState.Playing;\n    if (state.wrapMode === WrapMode.Loop) {\n      time = duration ? time % duration : 0;\n    } else {\n      if (Math.abs(time) >= duration) {\n        time = time < 0 ? -duration : duration;\n        this.playState = AnimatorStatePlayState.Finished;\n      }\n    }\n\n    time < 0 && (time += duration);\n    this.clipTime = time + state.clipStartTime * state.clip.length;\n\n    if (this._changedOrientation) {\n      !this.isForward && this._correctTime();\n      this._changedOrientation = false;\n    }\n  }\n\n  private _correctTime() {\n    const { state } = this;\n    if (this.clipTime === 0) {\n      this.clipTime = state.clipEndTime * state.clip.length;\n    }\n  }\n}\n","import { AnimatorControllerLayer } from \"../AnimatorControllerLayer\";\nimport { AnimatorStateTransition } from \"../AnimatorStateTransition\";\nimport { LayerState } from \"../enums/LayerState\";\nimport { AnimationCurveLayerOwner } from \"./AnimationCurveLayerOwner\";\nimport { AnimatorStateData } from \"./AnimatorStateData\";\nimport { AnimatorStatePlayData } from \"./AnimatorStatePlayData\";\n\n/**\n * @internal\n */\nexport class AnimatorLayerData {\n  layerIndex: number;\n  layer: AnimatorControllerLayer;\n  curveOwnerPool: Record<number, Record<string, AnimationCurveLayerOwner>> = Object.create(null);\n  animatorStateDataMap: Record<string, AnimatorStateData> = {};\n  srcPlayData: AnimatorStatePlayData = new AnimatorStatePlayData();\n  destPlayData: AnimatorStatePlayData = new AnimatorStatePlayData();\n  layerState: LayerState = LayerState.Standby;\n  crossCurveMark: number = 0;\n  manuallyTransition: AnimatorStateTransition = new AnimatorStateTransition();\n  crossFadeTransition: AnimatorStateTransition;\n  crossLayerOwnerCollection: AnimationCurveLayerOwner[] = [];\n\n  switchPlayData(): void {\n    const srcPlayData = this.destPlayData;\n    const switchTemp = this.srcPlayData;\n    this.srcPlayData = srcPlayData;\n    this.destPlayData = switchTemp;\n  }\n\n  resetCurrentCheckIndex(): void {\n    this.layer.stateMachine._entryTransitionCollection.needResetCurrentCheckIndex = true;\n    this.layer.stateMachine._anyStateTransitionCollection.needResetCurrentCheckIndex = true;\n  }\n}\n","import { AnimationCurveLayerOwner } from \"./AnimationCurveLayerOwner\";\nimport { AnimationEventHandler } from \"./AnimationEventHandler\";\n\n/**\n * @internal\n */\nexport class AnimatorStateData {\n  curveLayerOwner: AnimationCurveLayerOwner[] = [];\n  eventHandlers: AnimationEventHandler[] = [];\n}\n","import { MathUtil } from \"@galacean/engine-math\";\nimport { BoolUpdateFlag } from \"../BoolUpdateFlag\";\nimport { Component } from \"../Component\";\nimport { Entity } from \"../Entity\";\nimport { Renderer } from \"../Renderer\";\nimport { Script } from \"../Script\";\nimport { Logger } from \"../base/Logger\";\nimport { assignmentClone, ignoreClone } from \"../clone/CloneManager\";\nimport { ClearableObjectPool } from \"../utils/ClearableObjectPool\";\nimport { AnimatorController } from \"./AnimatorController\";\nimport { AnimatorControllerLayer } from \"./AnimatorControllerLayer\";\nimport { AnimatorControllerParameter, AnimatorControllerParameterValue } from \"./AnimatorControllerParameter\";\nimport { AnimatorState } from \"./AnimatorState\";\nimport { AnimatorStateTransition } from \"./AnimatorStateTransition\";\nimport { AnimatorStateTransitionCollection } from \"./AnimatorStateTransitionCollection\";\nimport { KeyframeValueType } from \"./Keyframe\";\nimport { AnimatorConditionMode } from \"./enums/AnimatorConditionMode\";\nimport { AnimatorCullingMode } from \"./enums/AnimatorCullingMode\";\nimport { AnimatorLayerBlendingMode } from \"./enums/AnimatorLayerBlendingMode\";\nimport { AnimatorStatePlayState } from \"./enums/AnimatorStatePlayState\";\nimport { LayerState } from \"./enums/LayerState\";\nimport { AnimationCurveLayerOwner } from \"./internal/AnimationCurveLayerOwner\";\nimport { AnimationEventHandler } from \"./internal/AnimationEventHandler\";\nimport { AnimatorLayerData } from \"./internal/AnimatorLayerData\";\nimport { AnimatorStateData } from \"./internal/AnimatorStateData\";\nimport { AnimatorStatePlayData } from \"./internal/AnimatorStatePlayData\";\nimport { AnimationCurveOwner } from \"./internal/animationCurveOwner/AnimationCurveOwner\";\n\n/**\n * The controller of the animation system.\n */\nexport class Animator extends Component {\n  private static _passedTriggerParameterNames = new Array<string>();\n\n  /** Culling mode of this Animator. */\n  cullingMode: AnimatorCullingMode = AnimatorCullingMode.None;\n  /** The playback speed of the Animator, 1.0 is normal playback speed. */\n  @assignmentClone\n  speed = 1.0;\n\n  /** @internal */\n  _playFrameCount = -1;\n  /** @internal */\n  _onUpdateIndex = -1;\n\n  protected _animatorController: AnimatorController;\n\n  @ignoreClone\n  protected _controllerUpdateFlag: BoolUpdateFlag;\n  @ignoreClone\n  protected _updateMark = 0;\n\n  @ignoreClone\n  private _animatorLayersData = new Array<AnimatorLayerData>();\n  @ignoreClone\n  private _curveOwnerPool: Record<number, Record<string, AnimationCurveOwner<KeyframeValueType>>> = Object.create(null);\n  @ignoreClone\n  private _animationEventHandlerPool = new ClearableObjectPool(AnimationEventHandler);\n  @ignoreClone\n  private _parametersValueMap = <Record<string, AnimatorControllerParameterValue>>Object.create(null);\n\n  @ignoreClone\n  private _tempAnimatorStateInfo: IAnimatorStateInfo = { layerIndex: -1, state: null };\n\n  @ignoreClone\n  private _controlledRenderers = new Array<Renderer>();\n\n  /**\n   * All layers from the AnimatorController which belongs this Animator.\n   */\n  get animatorController(): AnimatorController {\n    return this._animatorController;\n  }\n\n  set animatorController(animatorController: AnimatorController) {\n    if (animatorController !== this._animatorController) {\n      this._reset();\n      this._controllerUpdateFlag && this._controllerUpdateFlag.destroy();\n      this._controllerUpdateFlag = animatorController && animatorController._registerChangeFlag();\n      this._animatorController = animatorController;\n    }\n  }\n\n  /**\n   * The layers in the animator's controller.\n   */\n  get layers(): Readonly<AnimatorControllerLayer[]> {\n    return this._animatorController?._layers;\n  }\n\n  /**\n   * The parameters in the animator's controller.\n   */\n  get parameters(): Readonly<AnimatorControllerParameter[]> {\n    return this._animatorController?._parameters;\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n  }\n\n  /**\n   * Play a state by name.\n   * @param stateName - The state name\n   * @param layerIndex - The layer index(default -1). If layer is -1, play the first state with the given state name\n   * @param normalizedTimeOffset - The normalized time offset (between 0 and 1, default 0) to start the state's animation from\n   */\n  play(stateName: string, layerIndex: number = -1, normalizedTimeOffset: number = 0): void {\n    if (this._controllerUpdateFlag?.flag) {\n      this._reset();\n    }\n\n    const stateInfo = this._getAnimatorStateInfo(stateName, layerIndex);\n    const { state } = stateInfo;\n\n    if (!state) {\n      return;\n    }\n\n    if (this._preparePlay(state, stateInfo.layerIndex, normalizedTimeOffset)) {\n      this._playFrameCount = this.engine.time.frameCount;\n    }\n  }\n\n  /**\n   * Create a cross fade from the current state to another state with a normalized duration.\n   * @param stateName - The state name\n   * @param normalizedDuration - The normalized duration of the transition, relative to the destination state's duration (range: 0 to 1)\n   * @param layerIndex - The layer index(default -1). If layer is -1, play the first state with the given state name\n   * @param normalizedTimeOffset - The normalized time offset (between 0 and 1, default 0) to start the destination state's animation from\n   */\n  crossFade(\n    stateName: string,\n    normalizedDuration: number,\n    layerIndex: number = -1,\n    normalizedTimeOffset: number = 0\n  ): void {\n    this._crossFade(stateName, normalizedDuration, layerIndex, normalizedTimeOffset, false);\n  }\n\n  /**\n   * Create a cross fade from the current state to another state with a fixed duration.\n   * @param stateName - The state name\n   * @param fixedDuration - The duration of the transition in seconds\n   * @param layerIndex - The layer index(default -1). If layer is -1, play the first state with the given state name\n   * @param normalizedTimeOffset - The normalized time offset (between 0 and 1, default 0) to start the destination state's animation from\n   */\n  crossFadeInFixedDuration(\n    stateName: string,\n    fixedDuration: number,\n    layerIndex: number = -1,\n    normalizedTimeOffset: number = 0\n  ): void {\n    this._crossFade(stateName, fixedDuration, layerIndex, normalizedTimeOffset, true);\n  }\n\n  /**\n   * Evaluates the animator component based on deltaTime.\n   * @param deltaTime - The deltaTime when the animation update\n   */\n  update(deltaTime: number): void {\n    // Play or crossFade in script, animation playing from the first frame, deltaTime should be 0\n    if (this._playFrameCount === this.engine.time.frameCount) {\n      deltaTime = 0;\n    }\n\n    let animationUpdate: boolean;\n    if (this.cullingMode === AnimatorCullingMode.Complete) {\n      animationUpdate = false;\n      const controlledRenderers = this._controlledRenderers;\n      for (let i = 0, n = controlledRenderers.length; i < n; i++) {\n        if (!controlledRenderers[i].isCulled) {\n          animationUpdate = true;\n          break;\n        }\n      }\n    } else {\n      animationUpdate = true;\n    }\n\n    const animatorController = this._animatorController;\n    if (!animatorController) {\n      return;\n    }\n\n    if (this._controllerUpdateFlag?.flag) {\n      this._reset();\n    }\n\n    this._updateMark++;\n\n    const { layers } = animatorController;\n    for (let i = 0, n = layers.length; i < n; i++) {\n      const layerData = this._getAnimatorLayerData(i);\n      this._updateState(layerData, deltaTime, animationUpdate);\n    }\n  }\n\n  /**\n   * Get the playing state from the target layerIndex.\n   * @param layerIndex - The layer index\n   */\n  getCurrentAnimatorState(layerIndex: number): AnimatorState {\n    return this._animatorLayersData[layerIndex]?.srcPlayData?.state;\n  }\n\n  /**\n   * Get the state by name.\n   * @param stateName - The state name\n   * @param layerIndex - The layer index(default -1). If layer is -1, find the first state with the given state name\n   */\n  findAnimatorState(stateName: string, layerIndex: number = -1): AnimatorState {\n    return this._getAnimatorStateInfo(stateName, layerIndex).state;\n  }\n\n  /**\n   * Get the layer by name.\n   * @param name - The layer's name.\n   */\n  findLayerByName(name: string): AnimatorControllerLayer {\n    return this._animatorController?._layersMap[name];\n  }\n\n  /**\n   * Get the parameter by name from animatorController.\n   * @param name - The name of the parameter\n   */\n  getParameter(name: string): AnimatorControllerParameter {\n    return this._animatorController?._parametersMap[name] ?? null;\n  }\n\n  /**\n   * Get the value of the given parameter.\n   * @param name - The name of the parameter\n   * @param value - The value of the parameter\n   */\n  getParameterValue(name: string): AnimatorControllerParameterValue {\n    const parameter = this._animatorController?._parametersMap[name];\n    if (parameter) {\n      return this._parametersValueMap[name] ?? parameter.defaultValue;\n    }\n    return undefined;\n  }\n\n  /**\n   * Set the value of the given parameter.\n   * @param name - The name of the parameter\n   * @param value - The value of the parameter\n   */\n  setParameterValue(name: string, value: AnimatorControllerParameterValue): void {\n    const parameter = this._animatorController?._parametersMap[name];\n    if (parameter) {\n      this._parametersValueMap[name] = value;\n    }\n  }\n\n  /**\n   * Activate the trigger parameter by name.\n   * @param name - The name of the trigger parameter\n   */\n  activateTriggerParameter(name: string): void {\n    const parameter = this._animatorController?._parametersMap[name];\n\n    if (parameter?._isTrigger) {\n      this._parametersValueMap[name] = true;\n    }\n  }\n\n  /**\n   * Reset the trigger parameter to deactivate it by name.\n   * @param name - The name of the trigger parameter\n   */\n  deactivateTriggerParameter(name: string): void {\n    const parameter = this._animatorController?._parametersMap[name];\n\n    if (parameter?._isTrigger) {\n      this._parametersValueMap[name] = false;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  override _onEnable(): void {\n    this._reset();\n    this._entity.getComponentsIncludeChildren(Renderer, this._controlledRenderers);\n  }\n\n  /**\n   * @internal\n   */\n  override _onEnableInScene(): void {\n    this.scene._componentsManager.addOnUpdateAnimations(this);\n  }\n  /**\n   * @internal\n   */\n  override _onDisableInScene(): void {\n    this.scene._componentsManager.removeOnUpdateAnimations(this);\n  }\n\n  /**\n   * @internal\n   */\n  _reset(): void {\n    const { _curveOwnerPool: animationCurveOwners } = this;\n    for (let instanceId in animationCurveOwners) {\n      const propertyOwners = animationCurveOwners[instanceId];\n      for (let property in propertyOwners) {\n        const owner = propertyOwners[property];\n        owner.revertDefaultValue();\n      }\n    }\n\n    this._animatorLayersData.length = 0;\n    this._curveOwnerPool = Object.create(null);\n    this._parametersValueMap = Object.create(null);\n    this._animationEventHandlerPool.clear();\n\n    if (this._controllerUpdateFlag) {\n      this._controllerUpdateFlag.flag = false;\n    }\n  }\n\n  private _crossFade(\n    stateName: string,\n    duration: number,\n    layerIndex: number,\n    normalizedTimeOffset: number,\n    isFixedDuration: boolean\n  ): void {\n    if (this._controllerUpdateFlag?.flag) {\n      this._reset();\n    }\n\n    const { state, layerIndex: playLayerIndex } = this._getAnimatorStateInfo(stateName, layerIndex);\n    const { manuallyTransition } = this._getAnimatorLayerData(playLayerIndex);\n    manuallyTransition.duration = duration;\n\n    manuallyTransition.offset = normalizedTimeOffset;\n    manuallyTransition.isFixedDuration = isFixedDuration;\n    manuallyTransition.destinationState = state;\n\n    if (this._prepareCrossFadeByTransition(manuallyTransition, playLayerIndex)) {\n      this._playFrameCount = this.engine.time.frameCount;\n    }\n  }\n\n  private _getAnimatorStateInfo(stateName: string, layerIndex: number): IAnimatorStateInfo {\n    const { _animatorController: animatorController, _tempAnimatorStateInfo: stateInfo } = this;\n    let state: AnimatorState = null;\n    if (animatorController) {\n      const layers = animatorController.layers;\n      if (layerIndex === -1) {\n        for (let i = 0, n = layers.length; i < n; i++) {\n          state = layers[i].stateMachine.findStateByName(stateName);\n          if (state) {\n            layerIndex = i;\n            break;\n          }\n        }\n      } else {\n        state = layers[layerIndex].stateMachine.findStateByName(stateName);\n      }\n    }\n    stateInfo.layerIndex = layerIndex;\n    stateInfo.state = state;\n    return stateInfo;\n  }\n\n  private _getAnimatorStateData(\n    stateName: string,\n    animatorState: AnimatorState,\n    animatorLayerData: AnimatorLayerData,\n    layerIndex: number\n  ): AnimatorStateData {\n    const { animatorStateDataMap } = animatorLayerData;\n    let animatorStateData = animatorStateDataMap[stateName];\n    if (!animatorStateData) {\n      animatorStateData = new AnimatorStateData();\n      animatorStateDataMap[stateName] = animatorStateData;\n      this._saveAnimatorStateData(animatorState, animatorStateData, animatorLayerData, layerIndex);\n      this._saveAnimatorEventHandlers(animatorState, animatorStateData);\n    }\n    return animatorStateData;\n  }\n\n  private _saveAnimatorStateData(\n    animatorState: AnimatorState,\n    animatorStateData: AnimatorStateData,\n    animatorLayerData: AnimatorLayerData,\n    layerIndex: number\n  ): void {\n    const { entity, _curveOwnerPool: curveOwnerPool } = this;\n    let { mask } = this._animatorController.layers[layerIndex];\n    const { curveLayerOwner } = animatorStateData;\n    const { _curveBindings: curves } = animatorState.clip;\n\n    const { curveOwnerPool: layerCurveOwnerPool } = animatorLayerData;\n\n    for (let i = curves.length - 1; i >= 0; i--) {\n      const curve = curves[i];\n      const { relativePath } = curve;\n      const targetEntity = curve.relativePath === \"\" ? entity : entity.findByPath(curve.relativePath);\n      if (targetEntity) {\n        const component =\n          curve.typeIndex > 0\n            ? targetEntity.getComponents(curve.type, AnimationCurveOwner._components)[curve.typeIndex]\n            : targetEntity.getComponent(curve.type);\n\n        if (!component) {\n          continue;\n        }\n\n        const { property } = curve;\n        const { instanceId } = component;\n        // Get owner\n        const propertyOwners = (curveOwnerPool[instanceId] ||= <Record<string, AnimationCurveOwner<KeyframeValueType>>>(\n          Object.create(null)\n        ));\n        const owner = (propertyOwners[property] ||= curve._createCurveOwner(targetEntity, component));\n\n        // Get layer owner\n        const layerPropertyOwners = (layerCurveOwnerPool[instanceId] ||= <Record<string, AnimationCurveLayerOwner>>(\n          Object.create(null)\n        ));\n        const layerOwner = (layerPropertyOwners[property] ||= curve._createCurveLayerOwner(owner));\n\n        if (mask && mask.pathMasks.length) {\n          layerOwner.isActive = mask.getPathMask(relativePath)?.active ?? true;\n        }\n\n        curveLayerOwner[i] = layerOwner;\n      } else {\n        curveLayerOwner[i] = null;\n        Logger.warn(`The entity don\\'t have the child entity which path is ${curve.relativePath}.`);\n      }\n    }\n  }\n\n  private _saveAnimatorEventHandlers(state: AnimatorState, animatorStateData: AnimatorStateData): void {\n    const eventHandlerPool = this._animationEventHandlerPool;\n    const scripts = [];\n    const { eventHandlers } = animatorStateData;\n\n    const clipChangedListener = () => {\n      this._entity.getComponents(Script, scripts);\n      const scriptCount = scripts.length;\n      const { events } = state.clip;\n      eventHandlers.length = 0;\n      for (let i = 0, n = events.length; i < n; i++) {\n        const event = events[i];\n        const eventHandler = eventHandlerPool.get();\n        const funcName = event.functionName;\n        const { handlers } = eventHandler;\n\n        eventHandler.event = event;\n        handlers.length = 0;\n        for (let j = scriptCount - 1; j >= 0; j--) {\n          const script = scripts[j];\n          const handler = <Function>script[funcName]?.bind(script);\n          handler && handlers.push(handler);\n        }\n        eventHandlers.push(eventHandler);\n      }\n    };\n    clipChangedListener();\n    state._updateFlagManager.addListener(clipChangedListener);\n  }\n\n  private _clearCrossData(animatorLayerData: AnimatorLayerData): void {\n    animatorLayerData.crossCurveMark++;\n    animatorLayerData.crossLayerOwnerCollection.length = 0;\n  }\n\n  private _addCrossOwner(\n    animatorLayerData: AnimatorLayerData,\n    layerOwner: AnimationCurveLayerOwner,\n    curCurveIndex: number,\n    nextCurveIndex: number\n  ): void {\n    layerOwner.crossSrcCurveIndex = curCurveIndex;\n    layerOwner.crossDestCurveIndex = nextCurveIndex;\n    animatorLayerData.crossLayerOwnerCollection.push(layerOwner);\n  }\n\n  private _prepareCrossFading(animatorLayerData: AnimatorLayerData): void {\n    // Add src cross curve data\n    this._prepareSrcCrossData(animatorLayerData, false);\n    // Add dest cross curve data\n    this._prepareDestCrossData(animatorLayerData, false);\n  }\n\n  private _prepareStandbyCrossFading(animatorLayerData: AnimatorLayerData): void {\n    // Standby have two sub state, one is never play, one is finished, never play srcPlayData.state is null\n    animatorLayerData.srcPlayData.state && this._prepareSrcCrossData(animatorLayerData, true);\n    // Add dest cross curve data\n    this._prepareDestCrossData(animatorLayerData, true);\n  }\n\n  private _prepareFixedPoseCrossFading(animatorLayerData: AnimatorLayerData): void {\n    const { crossLayerOwnerCollection } = animatorLayerData;\n\n    // Save current cross curve data owner fixed pose\n    for (let i = crossLayerOwnerCollection.length - 1; i >= 0; i--) {\n      const layerOwner = crossLayerOwnerCollection[i];\n      if (!layerOwner) continue;\n      layerOwner.curveOwner.saveFixedPoseValue();\n      // Reset destCurveIndex When fixed pose crossFading again\n      layerOwner.crossDestCurveIndex = -1;\n    }\n    // Prepare dest AnimatorState cross data\n    this._prepareDestCrossData(animatorLayerData, true);\n  }\n\n  private _prepareSrcCrossData(animatorLayerData: AnimatorLayerData, saveFixed: boolean): void {\n    const { curveLayerOwner } = animatorLayerData.srcPlayData.stateData;\n    for (let i = curveLayerOwner.length - 1; i >= 0; i--) {\n      const layerOwner = curveLayerOwner[i];\n      if (!layerOwner) continue;\n      layerOwner.crossCurveMark = animatorLayerData.crossCurveMark;\n      saveFixed && layerOwner.curveOwner.saveFixedPoseValue();\n      this._addCrossOwner(animatorLayerData, layerOwner, i, -1);\n    }\n  }\n\n  private _prepareDestCrossData(animatorLayerData: AnimatorLayerData, saveFixed: boolean): void {\n    const { curveLayerOwner } = animatorLayerData.destPlayData.stateData;\n    for (let i = curveLayerOwner.length - 1; i >= 0; i--) {\n      const layerOwner = curveLayerOwner[i];\n      if (!layerOwner) continue;\n      if (layerOwner.crossCurveMark === animatorLayerData.crossCurveMark) {\n        layerOwner.crossDestCurveIndex = i;\n      } else {\n        const owner = layerOwner.curveOwner;\n        saveFixed && owner.saveFixedPoseValue();\n        layerOwner.crossCurveMark = animatorLayerData.crossCurveMark;\n        this._addCrossOwner(animatorLayerData, layerOwner, -1, i);\n      }\n    }\n  }\n\n  private _getAnimatorLayerData(layerIndex: number): AnimatorLayerData {\n    let animatorLayerData = this._animatorLayersData[layerIndex];\n    if (!animatorLayerData) {\n      animatorLayerData = new AnimatorLayerData();\n      animatorLayerData.layerIndex = layerIndex;\n      animatorLayerData.layer = this._animatorController.layers[layerIndex];\n      this._animatorLayersData[layerIndex] = animatorLayerData;\n    }\n    return animatorLayerData;\n  }\n\n  private _updateState(layerData: AnimatorLayerData, deltaTime: number, aniUpdate: boolean): void {\n    const { layer } = layerData;\n    let { weight } = layer;\n    const additive = layer.blendingMode === AnimatorLayerBlendingMode.Additive;\n\n    layerData.layerIndex === 0 && (weight = 1.0);\n\n    switch (layerData.layerState) {\n      case LayerState.Standby:\n        this._checkAnyAndEntryState(layerData, deltaTime, aniUpdate);\n        break;\n      case LayerState.Playing:\n        this._updatePlayingState(layerData, weight, additive, deltaTime, aniUpdate);\n        break;\n      case LayerState.Finished:\n        this._updateFinishedState(layerData, weight, additive, deltaTime, aniUpdate);\n        break;\n      case LayerState.CrossFading:\n        this._updateCrossFadeState(layerData, weight, additive, deltaTime, aniUpdate);\n        break;\n      case LayerState.FixedCrossFading:\n        this._updateCrossFadeFromPoseState(layerData, weight, additive, deltaTime, aniUpdate);\n        break;\n    }\n  }\n\n  private _updatePlayingState(\n    layerData: AnimatorLayerData,\n    weight: number,\n    additive: boolean,\n    deltaTime: number,\n    aniUpdate: boolean\n  ): void {\n    const { srcPlayData } = layerData;\n    const { state } = srcPlayData;\n\n    const playSpeed = state.speed * this.speed;\n    const playDeltaTime = playSpeed * deltaTime;\n\n    srcPlayData.updateOrientation(playDeltaTime);\n\n    const { clipTime: lastClipTime, playState: lastPlayState } = srcPlayData;\n\n    // Precalculate to get the transition\n    srcPlayData.update(playDeltaTime);\n\n    const { clipTime, isForward } = srcPlayData;\n    const { _transitionCollection: transitions } = state;\n    const { _anyStateTransitionCollection: anyStateTransitions } = layerData.layer.stateMachine;\n\n    const transition =\n      (anyStateTransitions.count &&\n        this._applyStateTransitions(\n          layerData,\n          isForward,\n          srcPlayData,\n          anyStateTransitions,\n          lastClipTime,\n          clipTime,\n          playDeltaTime,\n          aniUpdate\n        )) ||\n      (transitions.count &&\n        this._applyStateTransitions(\n          layerData,\n          isForward,\n          srcPlayData,\n          transitions,\n          lastClipTime,\n          clipTime,\n          playDeltaTime,\n          aniUpdate\n        ));\n\n    let playCostTime: number;\n    if (transition) {\n      const clipEndTime = state._getClipActualEndTime();\n\n      if (transition.hasExitTime) {\n        const exitTime = transition.exitTime * state._getDuration() + state._getClipActualStartTime();\n\n        if (isForward) {\n          if (exitTime < lastClipTime) {\n            playCostTime = exitTime + clipEndTime - lastClipTime;\n          } else {\n            playCostTime = exitTime - lastClipTime;\n          }\n        } else {\n          const startTime = state._getClipActualStartTime();\n          if (lastClipTime < exitTime) {\n            playCostTime = clipEndTime - exitTime + lastClipTime - startTime;\n          } else {\n            playCostTime = lastClipTime - exitTime;\n          }\n          playCostTime = -playCostTime;\n        }\n      } else {\n        playCostTime = 0;\n      }\n      // Revert actualDeltaTime and update playCostTime\n      srcPlayData.update(playCostTime - playDeltaTime);\n    } else {\n      playCostTime = playDeltaTime;\n      if (srcPlayData.playState === AnimatorStatePlayState.Finished) {\n        layerData.layerState = LayerState.Finished;\n      }\n    }\n\n    this._evaluatePlayingState(srcPlayData, weight, additive, aniUpdate);\n    this._fireAnimationEventsAndCallScripts(\n      layerData.layerIndex,\n      srcPlayData,\n      state,\n      lastClipTime,\n      lastPlayState,\n      playCostTime\n    );\n\n    if (transition) {\n      // Remove speed factor, use actual cost time\n      const remainDeltaTime = deltaTime - playCostTime / playSpeed;\n      remainDeltaTime > 0 && this._updateState(layerData, remainDeltaTime, aniUpdate);\n    }\n  }\n\n  private _evaluatePlayingState(\n    playData: AnimatorStatePlayData,\n    weight: number,\n    additive: boolean,\n    aniUpdate: boolean\n  ): void {\n    const curveBindings = playData.state.clip._curveBindings;\n    const finished = playData.playState === AnimatorStatePlayState.Finished;\n\n    if (aniUpdate || finished) {\n      const curveLayerOwner = playData.stateData.curveLayerOwner;\n      for (let i = curveBindings.length - 1; i >= 0; i--) {\n        const layerOwner = curveLayerOwner[i];\n        const owner = layerOwner?.curveOwner;\n\n        if (!owner || !layerOwner.isActive) {\n          continue;\n        }\n\n        const curve = curveBindings[i].curve;\n        if (curve.keys.length) {\n          this._checkRevertOwner(owner, additive);\n\n          const value = owner.evaluateValue(curve, playData.clipTime, additive);\n          aniUpdate && owner.applyValue(value, weight, additive);\n          finished && layerOwner.saveFinalValue();\n        }\n      }\n    }\n  }\n\n  private _updateCrossFadeState(\n    layerData: AnimatorLayerData,\n    weight: number,\n    additive: boolean,\n    deltaTime: number,\n    aniUpdate: boolean\n  ) {\n    const { srcPlayData, destPlayData, layerIndex } = layerData;\n    const { speed } = this;\n    const { state: srcState } = srcPlayData;\n    const { state: destState } = destPlayData;\n    const transitionDuration = layerData.crossFadeTransition._getFixedDuration();\n\n    const srcPlaySpeed = srcState.speed * speed;\n    const dstPlaySpeed = destState.speed * speed;\n    const dstPlayDeltaTime = dstPlaySpeed * deltaTime;\n\n    srcPlayData && srcPlayData.updateOrientation(srcPlaySpeed * deltaTime);\n    destPlayData && destPlayData.updateOrientation(dstPlayDeltaTime);\n\n    const { clipTime: lastSrcClipTime, playState: lastSrcPlayState } = srcPlayData;\n    const { clipTime: lastDestClipTime, playState: lastDstPlayState } = destPlayData;\n\n    let dstPlayCostTime: number;\n    if (destPlayData.isForward) {\n      // The time that has been played\n      const playedTime = destPlayData.playedTime;\n      dstPlayCostTime =\n        playedTime + dstPlayDeltaTime > transitionDuration ? transitionDuration - playedTime : dstPlayDeltaTime;\n    } else {\n      // The time that has been played\n      const playedTime = destPlayData.playedTime;\n      dstPlayCostTime =\n        // -dstPlayDeltaTime: The time that will be played, negative are meant to make it be a periods\n        // > transition: The time that will be played is enough to finish the transition\n        playedTime - dstPlayDeltaTime > transitionDuration\n          ? // Negative number is used to convert a time period into a reverse deltaTime.\n            // -(transitionDuration - playedTime)\n            playedTime - transitionDuration\n          : dstPlayDeltaTime;\n    }\n\n    const actualCostTime = dstPlaySpeed === 0 ? deltaTime : dstPlayCostTime / dstPlaySpeed;\n    const srcPlayCostTime = actualCostTime * srcPlaySpeed;\n\n    srcPlayData.update(srcPlayCostTime);\n    destPlayData.update(dstPlayCostTime);\n\n    let crossWeight = Math.abs(destPlayData.playedTime) / transitionDuration;\n    (crossWeight >= 1.0 - MathUtil.zeroTolerance || transitionDuration === 0) && (crossWeight = 1.0);\n\n    const crossFadeFinished = crossWeight === 1.0;\n\n    if (crossFadeFinished) {\n      srcPlayData.playState = AnimatorStatePlayState.Finished;\n      this._preparePlayOwner(layerData, destState);\n      this._evaluatePlayingState(destPlayData, weight, additive, aniUpdate);\n    } else {\n      this._evaluateCrossFadeState(layerData, srcPlayData, destPlayData, weight, crossWeight, additive, aniUpdate);\n    }\n\n    this._fireAnimationEventsAndCallScripts(\n      layerIndex,\n      srcPlayData,\n      srcState,\n      lastSrcClipTime,\n      lastSrcPlayState,\n      srcPlayCostTime\n    );\n\n    this._fireAnimationEventsAndCallScripts(\n      layerIndex,\n      destPlayData,\n      destState,\n      lastDestClipTime,\n      lastDstPlayState,\n      dstPlayCostTime\n    );\n\n    if (crossFadeFinished) {\n      this._updateCrossFadeData(layerData);\n      const remainDeltaTime = deltaTime - actualCostTime;\n      remainDeltaTime > 0 && this._updateState(layerData, remainDeltaTime, aniUpdate);\n    }\n  }\n\n  private _evaluateCrossFadeState(\n    layerData: AnimatorLayerData,\n    srcPlayData: AnimatorStatePlayData,\n    destPlayData: AnimatorStatePlayData,\n    weight: number,\n    crossWeight: number,\n    additive: boolean,\n    aniUpdate: boolean\n  ) {\n    const { crossLayerOwnerCollection } = layerData;\n    const { _curveBindings: srcCurves } = srcPlayData.state.clip;\n    const { state: destState } = destPlayData;\n    const { _curveBindings: destCurves } = destState.clip;\n\n    const finished = destPlayData.playState === AnimatorStatePlayState.Finished;\n\n    if (aniUpdate || finished) {\n      for (let i = crossLayerOwnerCollection.length - 1; i >= 0; i--) {\n        const layerOwner = crossLayerOwnerCollection[i];\n        const owner = layerOwner?.curveOwner;\n\n        if (!owner) continue;\n\n        const srcCurveIndex = layerOwner.crossSrcCurveIndex;\n        const destCurveIndex = layerOwner.crossDestCurveIndex;\n\n        this._checkRevertOwner(owner, additive);\n\n        const value = owner.evaluateCrossFadeValue(\n          srcCurveIndex >= 0 ? srcCurves[srcCurveIndex].curve : null,\n          destCurveIndex >= 0 ? destCurves[destCurveIndex].curve : null,\n          srcPlayData.clipTime,\n          destPlayData.clipTime,\n          crossWeight,\n          additive\n        );\n        aniUpdate && owner.applyValue(value, weight, additive);\n        finished && layerOwner.saveFinalValue();\n      }\n    }\n  }\n\n  private _updateCrossFadeFromPoseState(\n    layerData: AnimatorLayerData,\n    weight: number,\n    additive: boolean,\n    deltaTime: number,\n    aniUpdate: boolean\n  ) {\n    const { destPlayData } = layerData;\n    const { state } = destPlayData;\n\n    const transitionDuration = layerData.crossFadeTransition._getFixedDuration();\n\n    const playSpeed = state.speed * this.speed;\n    const playDeltaTime = playSpeed * deltaTime;\n\n    destPlayData.updateOrientation(playDeltaTime);\n\n    const { clipTime: lastDestClipTime, playState: lastPlayState } = destPlayData;\n\n    let dstPlayCostTime: number;\n    if (destPlayData.isForward) {\n      // The time that has been played\n      const playedTime = destPlayData.playedTime;\n      dstPlayCostTime =\n        playedTime + playDeltaTime > transitionDuration ? transitionDuration - playedTime : playDeltaTime;\n    } else {\n      // The time that has been played\n      const playedTime = destPlayData.playedTime;\n      dstPlayCostTime =\n        // -playDeltaTime: The time that will be played, negative are meant to make it be a periods\n        // > transition: The time that will be played is enough to finish the transition\n        playedTime - playDeltaTime > transitionDuration\n          ? // Negative number is used to convert a time period into a reverse deltaTime.\n            // -(transitionDuration - playedTime)\n            playedTime - transitionDuration\n          : playDeltaTime;\n    }\n\n    const actualCostTime = playSpeed === 0 ? deltaTime : dstPlayCostTime / playSpeed;\n\n    destPlayData.update(dstPlayCostTime);\n\n    let crossWeight = Math.abs(destPlayData.playedTime) / transitionDuration;\n    (crossWeight >= 1.0 - MathUtil.zeroTolerance || transitionDuration === 0) && (crossWeight = 1.0);\n\n    const crossFadeFinished = crossWeight === 1.0;\n\n    if (crossFadeFinished) {\n      this._preparePlayOwner(layerData, state);\n      this._evaluatePlayingState(destPlayData, weight, additive, aniUpdate);\n    } else {\n      this._evaluateCrossFadeFromPoseState(layerData, destPlayData, weight, crossWeight, additive, aniUpdate);\n    }\n\n    this._fireAnimationEventsAndCallScripts(\n      layerData.layerIndex,\n      destPlayData,\n      state,\n      lastDestClipTime,\n      lastPlayState,\n      dstPlayCostTime\n    );\n\n    if (crossFadeFinished) {\n      this._updateCrossFadeData(layerData);\n      const remainDeltaTime = deltaTime - actualCostTime;\n      remainDeltaTime > 0 && this._updateState(layerData, remainDeltaTime, aniUpdate);\n    }\n  }\n\n  private _evaluateCrossFadeFromPoseState(\n    layerData: AnimatorLayerData,\n    destPlayData: AnimatorStatePlayData,\n    weight: number,\n    crossWeight: number,\n    additive: boolean,\n    aniUpdate: boolean\n  ) {\n    const { crossLayerOwnerCollection } = layerData;\n    const { state } = destPlayData;\n    const { _curveBindings: curveBindings } = state.clip;\n\n    const { clipTime: destClipTime, playState } = destPlayData;\n    const finished = playState === AnimatorStatePlayState.Finished;\n\n    // When the animator is culled (aniUpdate=false), if the play state has finished, the final value needs to be calculated and saved to be applied directly\n    if (aniUpdate || finished) {\n      for (let i = crossLayerOwnerCollection.length - 1; i >= 0; i--) {\n        const layerOwner = crossLayerOwnerCollection[i];\n        const owner = layerOwner?.curveOwner;\n\n        if (!owner) continue;\n\n        const curveIndex = layerOwner.crossDestCurveIndex;\n\n        this._checkRevertOwner(owner, additive);\n\n        const value = layerOwner.curveOwner.crossFadeFromPoseAndApplyValue(\n          curveIndex >= 0 ? curveBindings[curveIndex].curve : null,\n          destClipTime,\n          crossWeight,\n          additive\n        );\n        aniUpdate && owner.applyValue(value, weight, additive);\n        finished && layerOwner.saveFinalValue();\n      }\n    }\n  }\n\n  private _updateFinishedState(\n    layerData: AnimatorLayerData,\n    weight: number,\n    additive: boolean,\n    deltaTime: number,\n    aniUpdate: boolean\n  ): void {\n    const playData = layerData.srcPlayData;\n    const { state } = playData;\n    const actualSpeed = state.speed * this.speed;\n    const actualDeltaTime = actualSpeed * deltaTime;\n\n    playData.updateOrientation(actualDeltaTime);\n\n    const { clipTime, isForward } = playData;\n    const { _transitionCollection: transitions } = state;\n    const { _anyStateTransitionCollection: anyStateTransitions } = layerData.layer.stateMachine;\n\n    const transition =\n      (anyStateTransitions.count && this._applyTransitionsByCondition(layerData, anyStateTransitions, aniUpdate)) ||\n      (transitions.count &&\n        this._applyStateTransitions(\n          layerData,\n          isForward,\n          playData,\n          transitions,\n          clipTime,\n          clipTime,\n          actualDeltaTime,\n          aniUpdate\n        ));\n\n    if (transition) {\n      this._updateState(layerData, deltaTime, aniUpdate);\n    } else {\n      this._evaluateFinishedState(playData, weight, additive, aniUpdate);\n    }\n  }\n\n  private _evaluateFinishedState(\n    playData: AnimatorStatePlayData,\n    weight: number,\n    additive: boolean,\n    aniUpdate: boolean\n  ): void {\n    if (!aniUpdate) {\n      return;\n    }\n\n    const { curveLayerOwner } = playData.stateData;\n    const { _curveBindings: curveBindings } = playData.state.clip;\n\n    for (let i = curveBindings.length - 1; i >= 0; i--) {\n      const layerOwner = curveLayerOwner[i];\n      const owner = layerOwner?.curveOwner;\n\n      if (!owner) continue;\n\n      this._checkRevertOwner(owner, additive);\n\n      owner.applyValue(layerOwner.finalValue, weight, additive);\n    }\n  }\n\n  private _updateCrossFadeData(layerData: AnimatorLayerData): void {\n    const { destPlayData } = layerData;\n    if (destPlayData.playState === AnimatorStatePlayState.Finished) {\n      layerData.layerState = LayerState.Finished;\n    } else {\n      layerData.layerState = LayerState.Playing;\n    }\n    layerData.switchPlayData();\n    layerData.crossFadeTransition = null;\n  }\n\n  private _preparePlayOwner(layerData: AnimatorLayerData, playState: AnimatorState): void {\n    if (layerData.layerState === LayerState.Playing) {\n      const srcPlayData = layerData.srcPlayData;\n      if (srcPlayData.state !== playState) {\n        const { curveLayerOwner } = srcPlayData.stateData;\n        for (let i = curveLayerOwner.length - 1; i >= 0; i--) {\n          curveLayerOwner[i]?.curveOwner.revertDefaultValue();\n        }\n      }\n    } else {\n      const { crossLayerOwnerCollection } = layerData;\n      for (let i = crossLayerOwnerCollection.length - 1; i >= 0; i--) {\n        crossLayerOwnerCollection[i].curveOwner.revertDefaultValue();\n      }\n    }\n  }\n\n  private _applyStateTransitions(\n    layerData: AnimatorLayerData,\n    isForward: boolean,\n    playData: AnimatorStatePlayData,\n    transitionCollection: AnimatorStateTransitionCollection,\n    lastClipTime: number,\n    clipTime: number,\n    deltaTime: number,\n    aniUpdate: boolean\n  ): AnimatorStateTransition {\n    const { state } = playData;\n    const clipDuration = state.clip.length;\n    let targetTransition: AnimatorStateTransition = null;\n    const startTime = state.clipStartTime * clipDuration;\n    const endTime = state.clipEndTime * clipDuration;\n\n    if (transitionCollection.noExitTimeCount) {\n      targetTransition = this._checkNoExitTimeTransition(layerData, transitionCollection, aniUpdate);\n      if (targetTransition) {\n        return targetTransition;\n      }\n    }\n\n    if (isForward) {\n      if (lastClipTime + deltaTime >= endTime) {\n        targetTransition = this._checkSubTransition(\n          layerData,\n          state,\n          transitionCollection,\n          lastClipTime,\n          endTime,\n          aniUpdate\n        );\n        if (!targetTransition) {\n          transitionCollection.needResetCurrentCheckIndex = true;\n          targetTransition = this._checkSubTransition(\n            layerData,\n            state,\n            transitionCollection,\n            startTime,\n            clipTime,\n            aniUpdate\n          );\n        }\n      } else {\n        targetTransition = this._checkSubTransition(\n          layerData,\n          state,\n          transitionCollection,\n          lastClipTime,\n          clipTime,\n          aniUpdate\n        );\n      }\n    } else {\n      //@todo backwards play currentIndex should not be 0\n      if (lastClipTime + deltaTime <= startTime) {\n        targetTransition = this._checkBackwardsSubTransition(\n          layerData,\n          state,\n          transitionCollection,\n          lastClipTime,\n          startTime,\n          aniUpdate\n        );\n        if (!targetTransition) {\n          transitionCollection.needResetCurrentCheckIndex = true;\n          targetTransition = this._checkBackwardsSubTransition(\n            layerData,\n            state,\n            transitionCollection,\n            clipTime,\n            endTime,\n            aniUpdate\n          );\n        }\n      } else {\n        targetTransition = this._checkBackwardsSubTransition(\n          layerData,\n          state,\n          transitionCollection,\n          lastClipTime,\n          clipTime,\n          aniUpdate\n        );\n      }\n    }\n\n    return targetTransition;\n  }\n\n  private _checkNoExitTimeTransition(\n    layerData: AnimatorLayerData,\n    transitionCollection: AnimatorStateTransitionCollection,\n    aniUpdate: boolean\n  ): AnimatorStateTransition {\n    for (let i = 0, n = transitionCollection.count; i < n; ++i) {\n      const transition = transitionCollection.get(i);\n      if (\n        transition.mute ||\n        (transitionCollection.isSoloMode && !transition.solo) ||\n        !this._checkConditions(transition)\n      )\n        continue;\n\n      return this._applyTransition(layerData, transition, aniUpdate);\n    }\n    return null;\n  }\n\n  private _checkSubTransition(\n    layerData: AnimatorLayerData,\n    state: AnimatorState,\n    transitionCollection: AnimatorStateTransitionCollection,\n    lastClipTime: number,\n    curClipTime: number,\n    aniUpdate: boolean\n  ): AnimatorStateTransition {\n    if (transitionCollection.needResetCurrentCheckIndex) transitionCollection.resetCurrentCheckIndex(true);\n\n    const { transitions } = transitionCollection;\n    let transitionIndex = transitionCollection.noExitTimeCount + transitionCollection.currentCheckIndex;\n    for (let n = transitions.length; transitionIndex < n; transitionIndex++) {\n      const transition = transitions[transitionIndex];\n      const exitTime = transition.exitTime * state._getDuration() + state._getClipActualStartTime();\n\n      if (exitTime > curClipTime) {\n        break;\n      }\n\n      if (exitTime < lastClipTime) continue;\n\n      transitionCollection.updateCurrentCheckIndex(true);\n\n      if (\n        transition.mute ||\n        (transitionCollection.isSoloMode && !transition.solo) ||\n        !this._checkConditions(transition)\n      ) {\n        continue;\n      }\n\n      return this._applyTransition(layerData, transition, aniUpdate);\n    }\n    return null;\n  }\n\n  private _checkBackwardsSubTransition(\n    layerData: AnimatorLayerData,\n    state: AnimatorState,\n    transitionCollection: AnimatorStateTransitionCollection,\n    lastClipTime: number,\n    curClipTime: number,\n    aniUpdate: boolean\n  ): AnimatorStateTransition {\n    if (transitionCollection.needResetCurrentCheckIndex) transitionCollection.resetCurrentCheckIndex(false);\n\n    const { transitions, noExitTimeCount } = transitionCollection;\n    let transitionIndex = transitionCollection.currentCheckIndex + noExitTimeCount;\n    for (; transitionIndex >= noExitTimeCount; transitionIndex--) {\n      const transition = transitions[transitionIndex];\n      const exitTime = transition.exitTime * state._getDuration() + state._getClipActualStartTime();\n\n      if (exitTime < curClipTime) {\n        break;\n      }\n\n      if (exitTime > lastClipTime) continue;\n\n      transitionCollection.updateCurrentCheckIndex(false);\n\n      if (\n        transition.mute ||\n        (transitionCollection.isSoloMode && !transition.solo) ||\n        !this._checkConditions(transition)\n      ) {\n        continue;\n      }\n\n      return this._applyTransition(layerData, transition, aniUpdate);\n    }\n    return null;\n  }\n\n  private _applyTransitionsByCondition(\n    layerData: AnimatorLayerData,\n    transitionCollection: AnimatorStateTransitionCollection,\n    aniUpdate: boolean\n  ): AnimatorStateTransition {\n    for (let i = 0, n = transitionCollection.count; i < n; i++) {\n      const transition = transitionCollection.get(i);\n\n      if (transition.mute) continue;\n\n      if (transitionCollection.isSoloMode && !transition.solo) continue;\n\n      if (this._checkConditions(transition)) {\n        if (this._applyTransition(layerData, transition, aniUpdate)) {\n          return transition;\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  private _preparePlay(state: AnimatorState, layerIndex: number, normalizedTimeOffset: number = 0): boolean {\n    const name = state.name;\n    if (!state.clip) {\n      Logger.warn(`The state named ${name} has no AnimationClip data.`);\n      return false;\n    }\n\n    const animatorLayerData = this._getAnimatorLayerData(layerIndex);\n    const animatorStateData = this._getAnimatorStateData(name, state, animatorLayerData, layerIndex);\n\n    this._preparePlayOwner(animatorLayerData, state);\n\n    animatorLayerData.layerState = LayerState.Playing;\n    animatorLayerData.srcPlayData.reset(state, animatorStateData, state._getClipActualEndTime() * normalizedTimeOffset);\n    animatorLayerData.resetCurrentCheckIndex();\n\n    return true;\n  }\n\n  private _applyTransition(\n    layerData: AnimatorLayerData,\n    transition: AnimatorStateTransition,\n    aniUpdate: boolean\n  ): AnimatorStateTransition {\n    // Need prepare first, it should crossFade when to exit\n    const success = this._prepareCrossFadeByTransition(transition, layerData.layerIndex);\n    if (transition.isExit) {\n      this._checkAnyAndEntryState(layerData, 0, aniUpdate);\n      return transition;\n    }\n    return success ? transition : null;\n  }\n\n  private _checkConditions(transition: AnimatorStateTransition): boolean {\n    const { conditions } = transition;\n    let allPass = true;\n    for (let i = 0, n = conditions.length; i < n; ++i) {\n      let pass = false;\n      const { mode, parameterName: name, threshold } = conditions[i];\n      const parameterValue = this.getParameterValue(name);\n\n      if (parameterValue === undefined) {\n        return false;\n      }\n\n      if (parameterValue === true) {\n        const parameter = this.getParameter(name);\n        if (parameter?._isTrigger) {\n          Animator._passedTriggerParameterNames.push(name);\n          pass = true;\n        }\n      }\n\n      if (!pass) {\n        switch (mode) {\n          case AnimatorConditionMode.Equals:\n            if (parameterValue === threshold) {\n              pass = true;\n            }\n            break;\n          case AnimatorConditionMode.Greater:\n            if (parameterValue > threshold) {\n              pass = true;\n            }\n            break;\n          case AnimatorConditionMode.Less:\n            if (parameterValue < threshold) {\n              pass = true;\n            }\n            break;\n          case AnimatorConditionMode.NotEquals:\n            if (parameterValue !== threshold) {\n              pass = true;\n            }\n            break;\n          case AnimatorConditionMode.If:\n            if (parameterValue === true) {\n              pass = true;\n            }\n            break;\n          case AnimatorConditionMode.IfNot:\n            if (parameterValue === false) {\n              pass = true;\n            }\n            break;\n        }\n      }\n\n      if (!pass) {\n        allPass = false;\n        break;\n      }\n    }\n\n    if (allPass) {\n      this._deactivateTriggeredParameters();\n    }\n\n    Animator._passedTriggerParameterNames.length = 0;\n\n    return allPass;\n  }\n\n  private _prepareCrossFadeByTransition(transition: AnimatorStateTransition, layerIndex: number): boolean {\n    const crossState = transition.destinationState;\n\n    if (!crossState) {\n      return false;\n    }\n    if (!crossState.clip) {\n      Logger.warn(`The state named ${crossState.name} has no AnimationClip data.`);\n      return false;\n    }\n\n    const animatorLayerData = this._getAnimatorLayerData(layerIndex);\n    const animatorStateData = this._getAnimatorStateData(crossState.name, crossState, animatorLayerData, layerIndex);\n\n    animatorLayerData.destPlayData.reset(\n      crossState,\n      animatorStateData,\n      transition.offset * crossState._getClipActualEndTime()\n    );\n    animatorLayerData.resetCurrentCheckIndex();\n\n    switch (animatorLayerData.layerState) {\n      case LayerState.Standby:\n      case LayerState.Finished:\n        animatorLayerData.layerState = LayerState.FixedCrossFading;\n        this._clearCrossData(animatorLayerData);\n        this._prepareStandbyCrossFading(animatorLayerData);\n        break;\n      case LayerState.Playing:\n        animatorLayerData.layerState = LayerState.CrossFading;\n        this._clearCrossData(animatorLayerData);\n        this._prepareCrossFading(animatorLayerData);\n        break;\n      case LayerState.CrossFading:\n        animatorLayerData.layerState = LayerState.FixedCrossFading;\n        this._prepareFixedPoseCrossFading(animatorLayerData);\n        break;\n      case LayerState.FixedCrossFading:\n        this._prepareFixedPoseCrossFading(animatorLayerData);\n        break;\n    }\n\n    animatorLayerData.crossFadeTransition = transition;\n\n    return true;\n  }\n\n  private _fireAnimationEvents(\n    playData: AnimatorStatePlayData,\n    eventHandlers: AnimationEventHandler[],\n    lastClipTime: number,\n    deltaTime: number\n  ): void {\n    const { state, isForward, clipTime } = playData;\n    const startTime = state._getClipActualStartTime();\n    const endTime = state._getClipActualEndTime();\n\n    if (isForward) {\n      if (lastClipTime + deltaTime >= endTime) {\n        this._fireSubAnimationEvents(playData, eventHandlers, lastClipTime, endTime);\n        playData.currentEventIndex = 0;\n        this._fireSubAnimationEvents(playData, eventHandlers, startTime, clipTime);\n      } else {\n        this._fireSubAnimationEvents(playData, eventHandlers, lastClipTime, clipTime);\n      }\n    } else {\n      if (lastClipTime + deltaTime <= startTime) {\n        this._fireBackwardSubAnimationEvents(playData, eventHandlers, lastClipTime, startTime);\n        playData.currentEventIndex = eventHandlers.length - 1;\n        this._fireBackwardSubAnimationEvents(playData, eventHandlers, endTime, clipTime);\n      } else {\n        this._fireBackwardSubAnimationEvents(playData, eventHandlers, lastClipTime, clipTime);\n      }\n    }\n  }\n\n  private _fireSubAnimationEvents(\n    playState: AnimatorStatePlayData,\n    eventHandlers: AnimationEventHandler[],\n    lastClipTime: number,\n    curClipTime: number\n  ): void {\n    let eventIndex = playState.currentEventIndex;\n    for (let n = eventHandlers.length; eventIndex < n; eventIndex++) {\n      const eventHandler = eventHandlers[eventIndex];\n      const { time, parameter } = eventHandler.event;\n\n      if (time > curClipTime) {\n        break;\n      }\n\n      const { handlers } = eventHandler;\n      if (time >= lastClipTime) {\n        for (let j = handlers.length - 1; j >= 0; j--) {\n          handlers[j](parameter);\n        }\n        playState.currentEventIndex = Math.min(eventIndex + 1, n - 1);\n      }\n    }\n  }\n\n  private _fireBackwardSubAnimationEvents(\n    playState: AnimatorStatePlayData,\n    eventHandlers: AnimationEventHandler[],\n    lastClipTime: number,\n    curClipTime: number\n  ): void {\n    let eventIndex = playState.currentEventIndex;\n    for (; eventIndex >= 0; eventIndex--) {\n      const eventHandler = eventHandlers[eventIndex];\n      const { time, parameter } = eventHandler.event;\n\n      if (time < curClipTime) {\n        break;\n      }\n\n      if (time <= lastClipTime) {\n        const { handlers } = eventHandler;\n        for (let j = handlers.length - 1; j >= 0; j--) {\n          handlers[j](parameter);\n        }\n        playState.currentEventIndex = Math.max(eventIndex - 1, 0);\n      }\n    }\n  }\n\n  private _callAnimatorScriptOnEnter(state: AnimatorState, layerIndex: number): void {\n    const scripts = state._onStateEnterScripts;\n    for (let i = 0, n = scripts.length; i < n; i++) {\n      scripts[i].onStateEnter(this, state, layerIndex);\n    }\n  }\n\n  private _callAnimatorScriptOnUpdate(state: AnimatorState, layerIndex: number): void {\n    const scripts = state._onStateUpdateScripts;\n    for (let i = 0, n = scripts.length; i < n; i++) {\n      scripts[i].onStateUpdate(this, state, layerIndex);\n    }\n  }\n\n  private _callAnimatorScriptOnExit(state: AnimatorState, layerIndex: number): void {\n    const scripts = state._onStateExitScripts;\n    for (let i = 0, n = scripts.length; i < n; i++) {\n      scripts[i].onStateExit(this, state, layerIndex);\n    }\n  }\n\n  private _checkAnyAndEntryState(layerData: AnimatorLayerData, remainDeltaTime: number, aniUpdate: boolean): void {\n    const { stateMachine } = layerData.layer;\n    const { _anyStateTransitionCollection: anyStateTransitions, _entryTransitionCollection: entryTransitions } =\n      stateMachine;\n    let transition: AnimatorStateTransition;\n\n    transition =\n      anyStateTransitions.count && this._applyTransitionsByCondition(layerData, anyStateTransitions, aniUpdate);\n\n    if (!transition) {\n      transition = entryTransitions.count && this._applyTransitionsByCondition(layerData, entryTransitions, aniUpdate);\n    }\n\n    if (transition) {\n      this._updateState(layerData, remainDeltaTime, aniUpdate);\n    } else {\n      const defaultState = stateMachine.defaultState;\n      if (defaultState) {\n        this._preparePlay(defaultState, layerData.layerIndex);\n        this._updateState(layerData, remainDeltaTime, aniUpdate);\n      }\n    }\n  }\n\n  private _checkRevertOwner(owner: AnimationCurveOwner<KeyframeValueType>, additive: boolean): void {\n    if (additive && owner.updateMark !== this._updateMark) {\n      owner.revertDefaultValue();\n    }\n    owner.updateMark = this._updateMark;\n  }\n\n  private _fireAnimationEventsAndCallScripts(\n    layerIndex: number,\n    playData: AnimatorStatePlayData,\n    state: AnimatorState,\n    lastClipTime: number,\n    lastPlayState: AnimatorStatePlayState,\n    deltaTime: number\n  ) {\n    const { eventHandlers } = playData.stateData;\n    eventHandlers.length && this._fireAnimationEvents(playData, eventHandlers, lastClipTime, deltaTime);\n\n    if (lastPlayState === AnimatorStatePlayState.UnStarted) {\n      this._callAnimatorScriptOnEnter(state, layerIndex);\n    }\n    if (lastPlayState !== AnimatorStatePlayState.Finished && playData.playState === AnimatorStatePlayState.Finished) {\n      this._callAnimatorScriptOnExit(state, layerIndex);\n    } else {\n      this._callAnimatorScriptOnUpdate(state, layerIndex);\n    }\n  }\n\n  private _deactivateTriggeredParameters(): void {\n    const passedTriggerParameterNames = Animator._passedTriggerParameterNames;\n    for (let i = 0, n = passedTriggerParameterNames.length; i < n; i++) {\n      this._parametersValueMap[passedTriggerParameterNames[i]] = false;\n    }\n  }\n}\n\ninterface IAnimatorStateInfo {\n  layerIndex: number;\n  state: AnimatorState;\n}\n","function _assert_this_initialized(self) {\n    if (self === void 0) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\n    return self;\n}\nexport { _assert_this_initialized as _ };\n","export type AnimatorControllerParameterValue = number | string | boolean;\n\n/**\n * Used to communicate between scripting and the controller, parameters can be set in scripting and used by the controller.\n */\nexport class AnimatorControllerParameter {\n  /** The default value of the parameter. */\n  defaultValue: AnimatorControllerParameterValue;\n\n  /** @internal */\n  _onNameChanged: (oldName: string, newName: string) => void = null;\n\n  /** @internal */\n  _isTrigger: boolean = false;\n\n  private _name: string;\n\n  /**\n   * The name of the parameter.\n   */\n  get name(): string {\n    return this._name;\n  }\n\n  set name(name: string) {\n    if (this._name === name) {\n      return;\n    }\n    const oldName = this._name;\n    this._name = name;\n    this._onNameChanged?.(oldName, name);\n  }\n}\n","import { BoolUpdateFlag } from \"../BoolUpdateFlag\";\nimport { AnimatorControllerParameter, AnimatorControllerParameterValue } from \"./AnimatorControllerParameter\";\nimport { UpdateFlagManager } from \"../UpdateFlagManager\";\nimport { AnimatorControllerLayer } from \"./AnimatorControllerLayer\";\nimport { ReferResource } from \"../asset/ReferResource\";\nimport { Engine } from \"../Engine\";\n\n/**\n * Store the data for Animator playback.\n */\nexport class AnimatorController extends ReferResource {\n  /** @internal */\n  _parameters: AnimatorControllerParameter[] = [];\n  /** @internal */\n  _parametersMap: Record<string, AnimatorControllerParameter> = {};\n  /** @internal */\n  _layers: AnimatorControllerLayer[] = [];\n  /** @internal */\n  _layersMap: Record<string, AnimatorControllerLayer> = {};\n\n  private _updateFlagManager: UpdateFlagManager = new UpdateFlagManager();\n\n  /**\n   * The layers in the controller.\n   */\n  get layers(): Readonly<AnimatorControllerLayer[]> {\n    return this._layers;\n  }\n\n  /**\n   * The parameters in the controller.\n   */\n  get parameters(): Readonly<AnimatorControllerParameter[]> {\n    return this._parameters;\n  }\n\n  /**\n   * Create an AnimatorController.\n   * @param engine - Engine to which the animatorController belongs\n   */\n  constructor(engine: Engine);\n\n  /**\n   * @deprecated\n   */\n  constructor();\n\n  constructor(engine?: Engine) {\n    engine && super(engine);\n  }\n\n  /**\n   * Add a parameter to the controller.\n   * @param name - The name of the parameter\n   * @param defaultValue - The default value of the parameter\n   */\n  addParameter(name: string, defaultValue?: AnimatorControllerParameterValue): AnimatorControllerParameter {\n    return this._addParameter(name, defaultValue, false);\n  }\n\n  /**\n   * Add a trigger parameter to the controller.\n   * @param name - The name of the parameter\n   */\n  addTriggerParameter(name: string): AnimatorControllerParameter {\n    return this._addParameter(name, false, true);\n  }\n\n  /**\n   * Remove a parameter from the controller by name, including trigger parameters.\n   * @param name - The name of the parameter\n   */\n  removeParameter(name: string) {\n    const parameter = this._parametersMap[name];\n    const index = this._parameters.indexOf(parameter);\n    if (index !== -1) {\n      this._parameters.splice(index, 1);\n      delete this._parametersMap[parameter.name];\n    }\n  }\n\n  /**\n   * Clear all parameters, including trigger parameters.\n   */\n  clearParameters(): void {\n    this._parameters.length = 0;\n    for (let name in this._parametersMap) {\n      delete this._parametersMap[name];\n    }\n  }\n\n  /**\n   * Get the parameter by name.\n   * @param name - The name of the parameter\n   */\n  getParameter(name: string): AnimatorControllerParameter {\n    return this._parametersMap[name] || null;\n  }\n\n  /**\n   * Get the layer by name.\n   * @param name - The layer's name.\n   */\n  findLayerByName(name: string): AnimatorControllerLayer {\n    return this._layersMap[name];\n  }\n\n  /**\n   * Add a layer to the controller.\n   * @param layer - The layer to add\n   */\n  addLayer(layer: AnimatorControllerLayer): void {\n    this._layers.push(layer);\n    this._layersMap[layer.name] = layer;\n    this._updateFlagManager.dispatch();\n  }\n\n  /**\n   * Remove a layer from the controller.\n   * @param layerIndex - The index of the AnimatorLayer\n   */\n  removeLayer(layerIndex: number): void {\n    const theLayer = this.layers[layerIndex];\n    this._layers.splice(layerIndex, 1);\n    delete this._layersMap[theLayer.name];\n    this._updateFlagManager.dispatch();\n  }\n\n  /**\n   * Clear layers.\n   */\n  clearLayers(): void {\n    this._layers.length = 0;\n    for (let name in this._layersMap) {\n      delete this._layersMap[name];\n    }\n    this._updateFlagManager.dispatch();\n  }\n\n  /**\n   * @internal\n   */\n  _registerChangeFlag(): BoolUpdateFlag {\n    return this._updateFlagManager.createFlag(BoolUpdateFlag);\n  }\n\n  private _addParameter(\n    name: string,\n    defaultValue: AnimatorControllerParameterValue,\n    isTrigger: boolean = false\n  ): AnimatorControllerParameter {\n    if (this._parametersMap[name]) {\n      console.warn(`Parameter ${name} already exists.`);\n      return null;\n    }\n    const param = new AnimatorControllerParameter();\n    param.name = name;\n    param.defaultValue = defaultValue;\n    param._isTrigger = isTrigger;\n    param._onNameChanged = (oldName, newName) => {\n      delete this._parametersMap[oldName];\n      this._parametersMap[newName] = param as AnimatorControllerParameter;\n    };\n    this._parametersMap[name] = param;\n    this._parameters.push(param);\n    return param;\n  }\n}\n","import { AnimatorState } from \"./AnimatorState\";\nimport { AnimatorStateTransition } from \"./AnimatorStateTransition\";\n\n/**\n * @internal\n */\nexport class AnimatorStateTransitionCollection {\n  transitions = new Array<AnimatorStateTransition>();\n  noExitTimeCount = 0;\n  needResetCurrentCheckIndex = true;\n  currentCheckIndex: number;\n\n  private _soloCount = 0;\n\n  get isSoloMode(): boolean {\n    return this._soloCount > 0;\n  }\n\n  get count(): number {\n    return this.transitions.length;\n  }\n\n  get(index: number): AnimatorStateTransition {\n    return this.transitions[index];\n  }\n\n  add(transitionOrAnimatorState: AnimatorStateTransition | AnimatorState): AnimatorStateTransition {\n    let transition: AnimatorStateTransition;\n    if (transitionOrAnimatorState instanceof AnimatorState) {\n      transition = new AnimatorStateTransition();\n      transition.hasExitTime = false;\n      transition.destinationState = transitionOrAnimatorState;\n    } else {\n      transition = transitionOrAnimatorState;\n    }\n\n    this._addTransition(transition);\n\n    transition._collection = this;\n    if (transition.solo) {\n      this._soloCount++;\n    }\n    return transition;\n  }\n\n  remove(transition: AnimatorStateTransition): void {\n    const transitions = this.transitions;\n    const index = transitions.indexOf(transition);\n    if (index !== -1) {\n      transitions.splice(index, 1);\n      if (!transition.hasExitTime) {\n        this.noExitTimeCount--;\n      }\n    }\n\n    transition._collection = null;\n    if (transition.solo) {\n      this._soloCount--;\n    }\n  }\n\n  clear(): void {\n    const transitions = this.transitions;\n    for (let i = 0, n = transitions.length; i < n; i++) {\n      const transition = transitions[i];\n      transition._collection = null;\n    }\n    transitions.length = 0;\n    this._soloCount = 0;\n    this.noExitTimeCount = 0;\n  }\n\n  updateTransitionSolo(isModifiedSolo: boolean): void {\n    this._soloCount += isModifiedSolo ? 1 : -1;\n  }\n\n  updateTransitionsIndex(transition: AnimatorStateTransition, hasExitTime: boolean): void {\n    const transitions = this.transitions;\n    transitions.splice(transitions.indexOf(transition), 1);\n    this._addTransition(transition);\n  }\n\n  updateCurrentCheckIndex(isForward: boolean): void {\n    this.currentCheckIndex = isForward\n      ? Math.min(this.currentCheckIndex + 1, this.count - this.noExitTimeCount - 1)\n      : Math.max(this.currentCheckIndex - 1, 0);\n  }\n\n  resetCurrentCheckIndex(isForward: boolean): void {\n    this.currentCheckIndex = isForward ? 0 : this.count - this.noExitTimeCount - 1;\n    this.needResetCurrentCheckIndex = false;\n  }\n\n  private _addTransition(transition: AnimatorStateTransition): void {\n    const transitions = this.transitions;\n\n    if (!transition.hasExitTime) {\n      transitions.unshift(transition);\n      this.noExitTimeCount++;\n      return;\n    }\n\n    const { exitTime } = transition;\n    const count = transitions.length;\n    const maxExitTime = count ? transitions[count - 1].exitTime : 0;\n    if (exitTime >= maxExitTime) {\n      transitions.push(transition);\n    } else {\n      let index = count;\n      while (--index >= 0 && exitTime < transitions[index].exitTime);\n      transitions.splice(index + 1, 0, transition);\n    }\n  }\n}\n","import { Animator } from \"../animation/Animator\";\nimport { AnimatorState } from \"../animation/AnimatorState\";\n\n/**\n * StateMachineScript is a component that can be added to a animator state. It's the base class every script on a state derives from.\n */\nexport class StateMachineScript {\n  /** @internal */\n  _destroyed: boolean = false;\n  /** @internal */\n  _state: AnimatorState;\n  /**\n   * onStateEnter is called when a transition starts and the state machine starts to evaluate this state.\n   * @param animator - The animator\n   * @param animatorState - The state be evaluated\n   * @param layerIndex - The index of the layer where the state is located\n   */\n  onStateEnter(animator: Animator, animatorState: AnimatorState, layerIndex: number): void {}\n\n  /**\n   * onStateUpdate is called on each Update frame between onStateEnter and onStateExit callbacks.\n   * @param animator - The animator\n   * @param animatorState - The state be evaluated\n   * @param layerIndex - The index of the layer where the state is located\n   */\n  onStateUpdate(animator: Animator, animatorState: AnimatorState, layerIndex: number): void {}\n\n  /**\n   * onStateExit is called when a transition ends and the state machine finishes evaluating this state.\n   * @param animator - The animator\n   * @param animatorState - The state be evaluated\n   * @param layerIndex - The index of the layer where the state is located\n   */\n  onStateExit(animator: Animator, animatorState: AnimatorState, layerIndex: number): void {}\n\n  /**\n   * Destroy this instance.\n   */\n  destroy(): void {\n    if (this._destroyed) {\n      return;\n    }\n\n    this._state._removeStateMachineScript(this);\n    this._destroyed = true;\n  }\n}\n","import { UpdateFlagManager } from \"../UpdateFlagManager\";\nimport { AnimationClip } from \"./AnimationClip\";\nimport { AnimatorStateTransition } from \"./AnimatorStateTransition\";\nimport { AnimatorStateTransitionCollection } from \"./AnimatorStateTransitionCollection\";\nimport { WrapMode } from \"./enums/WrapMode\";\nimport { StateMachineScript } from \"./StateMachineScript\";\n\n/**\n * States are the basic building blocks of a state machine. Each state contains a AnimationClip which will play while the character is in that state.\n */\nexport class AnimatorState {\n  /** The speed of the clip. 1 is normal speed, default 1. */\n  speed: number = 1.0;\n  /** The wrap mode used in the state. */\n  wrapMode: WrapMode = WrapMode.Loop;\n\n  /** @internal */\n  _onStateEnterScripts: StateMachineScript[] = [];\n  /** @internal */\n  _onStateUpdateScripts: StateMachineScript[] = [];\n  /** @internal */\n  _onStateExitScripts: StateMachineScript[] = [];\n  /** @internal */\n  _updateFlagManager: UpdateFlagManager = new UpdateFlagManager();\n  /** @internal */\n  _transitionCollection: AnimatorStateTransitionCollection = new AnimatorStateTransitionCollection();\n\n  private _clipStartTime: number = 0;\n  private _clipEndTime: number = 1;\n  private _clip: AnimationClip;\n\n  /**\n   * The transitions that are going out of the state.\n   */\n  get transitions(): Readonly<AnimatorStateTransition[]> {\n    return this._transitionCollection.transitions;\n  }\n\n  /**\n   * The clip that is being played by this animator state.\n   */\n  get clip(): AnimationClip {\n    return this._clip;\n  }\n\n  set clip(clip: AnimationClip) {\n    const lastClip = this._clip;\n    if (lastClip === clip) {\n      return;\n    }\n\n    if (lastClip) {\n      lastClip._updateFlagManager.removeListener(this._onClipChanged);\n    }\n\n    this._clip = clip;\n    this._clipEndTime = Math.min(this._clipEndTime, 1);\n\n    this._onClipChanged();\n\n    clip && clip._updateFlagManager.addListener(this._onClipChanged);\n  }\n\n  /**\n   * The normalized start time of the clip, the range is 0 to 1, default is 0.\n   */\n  get clipStartTime(): number {\n    return this._clipStartTime;\n  }\n\n  set clipStartTime(time: number) {\n    this._clipStartTime = Math.max(time, 0);\n  }\n\n  /**\n   * The normalized end time of the clip, the range is 0 to 1, default is 1.\n   */\n  get clipEndTime(): number {\n    return this._clipEndTime;\n  }\n\n  set clipEndTime(time: number) {\n    this._clipEndTime = Math.min(time, 1);\n  }\n\n  /**\n   * @param name - The state's name\n   */\n  constructor(public readonly name: string) {\n    this._onClipChanged = this._onClipChanged.bind(this);\n  }\n\n  /**\n   * Add an outgoing transition.\n   * @param transition - The transition\n   */\n  addTransition(transition: AnimatorStateTransition): AnimatorStateTransition;\n  /**\n   * Add an outgoing transition to the destination state.\n   * @param animatorState - The destination state\n   */\n  addTransition(animatorState: AnimatorState): AnimatorStateTransition;\n\n  addTransition(transitionOrAnimatorState: AnimatorStateTransition | AnimatorState): AnimatorStateTransition {\n    return this._transitionCollection.add(transitionOrAnimatorState);\n  }\n\n  /**\n   * Add an outgoing transition to exit of the stateMachine.\n   * @param exitTime - The time at which the transition can take effect. This is represented in normalized time.\n   */\n  addExitTransition(exitTime: number = 1.0): AnimatorStateTransition {\n    const transition = new AnimatorStateTransition();\n    transition._isExit = true;\n    transition.exitTime = exitTime;\n\n    return this._transitionCollection.add(transition);\n  }\n  /**\n   * Remove a transition from the state.\n   * @param transition - The transition\n   */\n  removeTransition(transition: AnimatorStateTransition): void {\n    this._transitionCollection.remove(transition);\n    if (transition._isExit) {\n      transition._isExit = false;\n    }\n  }\n\n  /**\n   * Adds a state machine script class of type T to the AnimatorState.\n   * @param scriptType - The state machine script class of type T\n   */\n  addStateMachineScript<T extends StateMachineScript>(scriptType: new () => T): T {\n    const script = new scriptType();\n    script._state = this;\n\n    const { prototype } = StateMachineScript;\n    if (script.onStateEnter !== prototype.onStateEnter) {\n      this._onStateEnterScripts.push(script);\n    }\n    if (script.onStateUpdate !== prototype.onStateUpdate) {\n      this._onStateUpdateScripts.push(script);\n    }\n    if (script.onStateExit !== prototype.onStateExit) {\n      this._onStateExitScripts.push(script);\n    }\n\n    return script;\n  }\n\n  /**\n   * Clears all transitions from the state.\n   */\n  clearTransitions(): void {\n    this._transitionCollection.clear();\n  }\n\n  /**\n   * @internal\n   */\n  _getDuration(): number {\n    if (this.clip) {\n      return (this._clipEndTime - this._clipStartTime) * this.clip.length;\n    }\n    return null;\n  }\n\n  /**\n   * @internal\n   */\n  _removeStateMachineScript(script: StateMachineScript): void {\n    const { prototype } = StateMachineScript;\n    if (script.onStateEnter !== prototype.onStateEnter) {\n      const index = this._onStateEnterScripts.indexOf(script);\n      index !== -1 && this._onStateEnterScripts.splice(index, 1);\n    }\n    if (script.onStateUpdate !== prototype.onStateUpdate) {\n      const index = this._onStateUpdateScripts.indexOf(script);\n      index !== -1 && this._onStateUpdateScripts.splice(index, 1);\n    }\n    if (script.onStateExit !== prototype.onStateExit) {\n      const index = this._onStateExitScripts.indexOf(script);\n      index !== -1 && this._onStateExitScripts.splice(index, 1);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _onClipChanged(): void {\n    this._updateFlagManager.dispatch();\n  }\n\n  /**\n   * @internal\n   */\n  _getClipActualStartTime(): number {\n    return this._clipStartTime * this.clip.length;\n  }\n\n  /**\n   * @internal\n   */\n  _getClipActualEndTime(): number {\n    return this._clipEndTime * this.clip.length;\n  }\n}\n","import { AnimatorState } from \"./AnimatorState\";\nimport { AnimatorStateTransition } from \"./AnimatorStateTransition\";\nimport { AnimatorStateTransitionCollection } from \"./AnimatorStateTransitionCollection\";\nexport interface AnimatorStateMap {\n  [key: string]: AnimatorState;\n}\n\n/**\n * A graph controlling the interaction of states. Each state references a motion.\n */\nexport class AnimatorStateMachine {\n  /** The list of states. */\n  readonly states: AnimatorState[] = [];\n\n  /**\n   * The state will be played automatically.\n   * @remarks When the Animator's AnimatorController changed or the Animator's onEnable be triggered.\n   */\n  defaultState: AnimatorState;\n\n  /** @internal */\n  _entryTransitionCollection = new AnimatorStateTransitionCollection();\n  /** @internal */\n  _anyStateTransitionCollection = new AnimatorStateTransitionCollection();\n\n  private _statesMap: AnimatorStateMap = {};\n\n  /**\n   * The list of entry transitions in the state machine.\n   */\n  get entryTransitions(): Readonly<AnimatorStateTransition[]> {\n    return this._entryTransitionCollection.transitions;\n  }\n\n  /**\n   * The list of AnyState transitions.\n   */\n  get anyStateTransitions(): Readonly<AnimatorStateTransition[]> {\n    return this._anyStateTransitionCollection.transitions;\n  }\n\n  /**\n   * Add a state to the state machine.\n   * @param name - The name of the new state\n   */\n  addState(name: string): AnimatorState {\n    let state = this.findStateByName(name);\n    if (!state) {\n      state = new AnimatorState(name);\n      this.states.push(state);\n      this._statesMap[name] = state;\n    } else {\n      console.warn(`The state named ${name} has existed.`);\n    }\n    return state;\n  }\n\n  /**\n   * Remove a state from the state machine.\n   * @param state - The state\n   */\n  removeState(state: AnimatorState): void {\n    const { name } = state;\n    const index = this.states.indexOf(state);\n    if (index > -1) {\n      this.states.splice(index, 1);\n    }\n    delete this._statesMap[name];\n  }\n\n  /**\n   * Get the state by name.\n   * @param name - The layer's name\n   */\n  findStateByName(name: string): AnimatorState {\n    return this._statesMap[name];\n  }\n\n  /**\n   * Makes a unique state name in the state machine.\n   * @param name - Desired name for the state.\n   * @returns Unique name.\n   */\n  makeUniqueStateName(name: string): string {\n    const { _statesMap } = this;\n    const originName = name;\n    let index = 0;\n    while (_statesMap[name]) {\n      name = `${originName} ${index}`;\n      index++;\n    }\n    return name;\n  }\n\n  /**\n   * Add an entry transition.\n   * @param transition - The transition\n   */\n  addEntryStateTransition(transition: AnimatorStateTransition): AnimatorStateTransition;\n  /**\n   * Add an entry transition to the destination state, the default value of entry transition's hasExitTime is false.\n   * @param animatorState - The destination state\n   */\n\n  addEntryStateTransition(animatorState: AnimatorState): AnimatorStateTransition;\n\n  addEntryStateTransition(transitionOrAnimatorState: AnimatorStateTransition | AnimatorState): AnimatorStateTransition {\n    return this._entryTransitionCollection.add(transitionOrAnimatorState);\n  }\n\n  /**\n   * Remove an entry transition.\n   * @param transition - The transition\n   */\n  removeEntryStateTransition(transition: AnimatorStateTransition): void {\n    this._entryTransitionCollection.remove(transition);\n  }\n\n  /**\n   * Add an any transition.\n   * @param transition - The transition\n   */\n  addAnyStateTransition(transition: AnimatorStateTransition): AnimatorStateTransition;\n  /**\n   * Add an any transition to the destination state, the default value of any transition's hasExitTime is false.\n   * @param animatorState - The destination state\n   */\n  addAnyStateTransition(animatorState: AnimatorState): AnimatorStateTransition;\n\n  addAnyStateTransition(transitionOrAnimatorState: AnimatorStateTransition | AnimatorState): AnimatorStateTransition {\n    return this._anyStateTransitionCollection.add(transitionOrAnimatorState);\n  }\n\n  /**\n   * Remove an any transition.\n   * @param transition - The transition\n   */\n  removeAnyStateTransition(transition: AnimatorStateTransition): void {\n    this._anyStateTransitionCollection.remove(transition);\n  }\n\n  /**\n   * Clear all entry state transitions.\n   */\n  clearEntryStateTransitions(): void {\n    this._entryTransitionCollection.clear();\n  }\n\n  /**\n   * Clear all any state transitions.\n   */\n  clearAnyStateTransitions(): void {\n    this._anyStateTransitionCollection.clear();\n  }\n}\n","import { AnimatorStateMachine } from \"./AnimatorStateMachine\";\nimport { AnimatorLayerBlendingMode } from \"./enums/AnimatorLayerBlendingMode\";\nimport { AnimatorLayerMask } from \"./AnimatorLayerMask\";\n\n/**\n * The Animation Layer contains a state machine that controls animations of a model or part of it.\n */\nexport class AnimatorControllerLayer {\n  /** The blending weight that the layers has. It is not taken into account for the first layer. */\n  weight: number = 1.0;\n  /** The blending mode used by the layer. It is not taken into account for the first layer. */\n  blendingMode: AnimatorLayerBlendingMode = AnimatorLayerBlendingMode.Override;\n  /** The state machine for the layer. */\n  stateMachine: AnimatorStateMachine;\n  /** The AnimatorLayerMask is used to mask out certain entities from being animated by an AnimatorLayer. */\n  mask: AnimatorLayerMask;\n\n  /**\n   * @param name - The layer's name\n   */\n  constructor(public readonly name: string) {\n    this.stateMachine = new AnimatorStateMachine();\n  }\n}\n","import { Color, Quaternion, Rect, Vector2, Vector3, Vector4 } from \"@galacean/engine-math\";\nimport { ReferResource } from \"../asset/ReferResource\";\n\n/**\n * Keyframe.\n * @typeParam V - Type of Keyframe value\n */\nexport class Keyframe<\n  V extends KeyframeValueType,\n  T = V extends number\n    ? number\n    : V extends Vector2\n      ? Vector2\n      : V extends Vector3\n        ? Vector3\n        : V extends Vector4 | Color | Quaternion | Rect\n          ? Vector4\n          : V extends number[] | Float32Array\n            ? number[]\n            : V extends ReferResource\n              ? ReferResource\n              : never\n> {\n  /** The time of the Keyframe. */\n  time: number;\n  /** The value of the Keyframe. */\n  value: V;\n  /** Sets the incoming tangent for this key. The incoming tangent affects the slope of the curve from the previous key to this key. */\n  inTangent?: T;\n  /** Sets the outgoing tangent for this key. The outgoing tangent affects the slope of the curve from this key to the next key. */\n  outTangent?: T;\n}\n\n/**\n * Type of Keyframe value.\n */\nexport type KeyframeValueType =\n  | number\n  | Vector2\n  | Vector3\n  | Vector4\n  | number[]\n  | Float32Array\n  | Quaternion\n  | Color\n  | Rect\n  | string\n  | boolean\n  | ReferResource;\n","/**\n * LayerPathMask represents a mask for a specific entity in an animation layer.\n * It is used to control the animation whether to be applied to the entity or not.\n */\nexport class LayerPathMask {\n  /**\n   * It identifies a particular entity in the hierarchy.\n   * Example: \"arm/left/hand\" could be a path to the left hand of a character.\n   */\n  path: string;\n\n  /**\n   * The active property is indicating whether the animation at this path is active or not.\n   * When true, the animation for this path is applied; when false, the animation for this path is ignored.\n   */\n  active: boolean;\n}\n","import { Entity } from \"../Entity\";\nimport { LayerPathMask } from \"./LayerPathMask\";\n\n/**\n * AnimatorLayerMask is used to mask out certain entities from being animated by an AnimatorLayer.\n */\nexport class AnimatorLayerMask {\n  /**\n   * Creates an AnimatorLayerMask instance by specifying an entity.\n   * This will automatically add path masks for the entity and all its children.\n   * @param entity - The root entity to create path masks for\n   */\n  static createByEntity(entity: Entity): AnimatorLayerMask {\n    const mask = new AnimatorLayerMask();\n    mask.addPathMask(\"\");\n    AnimatorLayerMask._addPathMaskWithChildren(mask, entity, \"\");\n    return mask;\n  }\n\n  private static _addPathMaskWithChildren(mask: AnimatorLayerMask, entity: Entity, parentPath: string) {\n    const children = entity.children;\n    for (let i = 0, n = children.length; i < n; ++i) {\n      const child = children[i];\n      const childPath = parentPath ? `${parentPath}/${child.name}` : child.name;\n      mask.addPathMask(childPath);\n      AnimatorLayerMask._addPathMaskWithChildren(mask, child, childPath);\n    }\n  }\n\n  private _pathMasks: LayerPathMask[] = [];\n  private _pathMaskMap: Record<string, LayerPathMask> = {};\n\n  /**\n   * The list of path masks.\n   */\n  get pathMasks(): Readonly<LayerPathMask[]> {\n    return this._pathMasks;\n  }\n\n  /**\n   * Adds a path mask to the AnimatorLayerMask, the root path is \"\".\n   * @param path - The path to add a mask for\n   * @returns The created or existing LayerPathMask\n   */\n  addPathMask(path: string): LayerPathMask {\n    const existed = this._pathMaskMap[path];\n    if (existed) {\n      return existed;\n    }\n\n    const pathMask = new LayerPathMask();\n    pathMask.path = path;\n    pathMask.active = true;\n    this._pathMasks.push(pathMask);\n    this._pathMaskMap[path] = pathMask;\n    return pathMask;\n  }\n\n  /**\n   * Removes a path mask from the AnimatorLayerMask.\n   * @param path - The path of the mask to remove\n   */\n  removePathMask(path: string): void {\n    const { _pathMasks: pathMasks } = this;\n    for (let i = 0, n = this._pathMasks.length; i < n; ++i) {\n      if (pathMasks[i].path === path) {\n        pathMasks.splice(i, 1);\n        delete this._pathMaskMap[path];\n        break;\n      }\n    }\n  }\n\n  /**\n   * Get a path mask based on the given path.\n   * @param path - The path of the mask to get\n   * @returns The LayerPathMask for the given path\n   */\n  getPathMask(path: string): LayerPathMask {\n    return this._pathMaskMap[path];\n  }\n\n  /**\n   * Sets the active state of a path mask.\n   * If recursive is true, it also sets the active state of all child path masks.\n   * @param path - The path of the mask to modify\n   * @param active - The active state to set\n   * @param withChildren - Whether to apply the active state recursively to child paths\n   */\n  setPathMaskActive(path: string, active: boolean, withChildren: boolean = false): void {\n    const pathMask = this._pathMaskMap[path];\n    if (pathMask) {\n      pathMask.active = active;\n    }\n\n    if (withChildren) {\n      for (let p in this._pathMaskMap) {\n        if (p.startsWith(path)) {\n          this._pathMaskMap[p].active = active;\n        }\n      }\n    }\n  }\n}\n","import { Color } from \"@galacean/engine-math\";\nimport { Engine } from \"../Engine\";\nimport { Material } from \"../material/Material\";\nimport { Shader } from \"../shader/Shader\";\nimport { ShaderMacro } from \"../shader/ShaderMacro\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { CompareFunction } from \"../shader/enums/CompareFunction\";\nimport { CullMode } from \"../shader/enums/CullMode\";\nimport { TextureCube } from \"../texture\";\n\n/**\n * SkyBoxMaterial.\n */\nexport class SkyBoxMaterial extends Material {\n  private static _tintColorProp = ShaderProperty.getByName(\"material_TintColor\");\n  private static _textureCubeProp = ShaderProperty.getByName(\"material_CubeTexture\");\n  private static _rotationProp = ShaderProperty.getByName(\"material_Rotation\");\n  private static _exposureProp = ShaderProperty.getByName(\"material_Exposure\");\n  private static _decodeSkyRGBMMacro = ShaderMacro.getByName(\"MATERIAL_IS_DECODE_SKY_RGBM\");\n\n  private _textureDecodeRGBM: boolean = false;\n  private _tintColor: Color = new Color(1, 1, 1, 1);\n\n  /**\n   * Whether to decode texture with RGBM format.\n   */\n  get textureDecodeRGBM(): boolean {\n    return this._textureDecodeRGBM;\n  }\n\n  set textureDecodeRGBM(value: boolean) {\n    this._textureDecodeRGBM = value;\n    if (value) {\n      this.shaderData.enableMacro(SkyBoxMaterial._decodeSkyRGBMMacro);\n    } else {\n      this.shaderData.disableMacro(SkyBoxMaterial._decodeSkyRGBMMacro);\n    }\n  }\n\n  /**\n   * Texture of the sky box material.\n   */\n  get texture(): TextureCube {\n    return this.shaderData.getTexture(SkyBoxMaterial._textureCubeProp) as TextureCube;\n  }\n\n  set texture(value: TextureCube) {\n    this.shaderData.setTexture(SkyBoxMaterial._textureCubeProp, value);\n  }\n\n  /**\n   * The angle to rotate around the y-axis, unit is degree.\n   */\n  get rotation(): number {\n    return this.shaderData.getFloat(SkyBoxMaterial._rotationProp);\n  }\n\n  set rotation(value: number) {\n    this.shaderData.setFloat(SkyBoxMaterial._rotationProp, value);\n  }\n\n  /**\n   * The exposure value of this material.\n   */\n  get exposure(): number {\n    return this.shaderData.getFloat(SkyBoxMaterial._exposureProp);\n  }\n\n  set exposure(value: number) {\n    this.shaderData.setFloat(SkyBoxMaterial._exposureProp, value);\n  }\n\n  /**\n   * The Tint color of this material.\n   */\n  get tintColor(): Color {\n    return this._tintColor;\n  }\n\n  set tintColor(value: Color) {\n    if (this._tintColor != value) {\n      this._tintColor.copyFrom(value);\n    }\n  }\n\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"skybox\"));\n\n    this.renderState.rasterState.cullMode = CullMode.Off;\n    this.renderState.depthState.compareFunction = CompareFunction.LessEqual;\n\n    this.shaderData.setFloat(SkyBoxMaterial._rotationProp, 0);\n    this.shaderData.setFloat(SkyBoxMaterial._exposureProp, 1);\n    this.shaderData.setColor(SkyBoxMaterial._tintColorProp, this._tintColor);\n  }\n\n  override clone(): SkyBoxMaterial {\n    const dest = new SkyBoxMaterial(this._engine);\n    this.cloneTo(dest);\n    return dest;\n  }\n}\n","import { Color } from \"@galacean/engine-math\";\nimport { Engine } from \"../Engine\";\nimport { Material } from \"../material/Material\";\nimport { CompareFunction, CullMode, Shader, ShaderMacro } from \"../shader\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\n\n/**\n * Sun mode.\n */\nexport enum SunMode {\n  /** None */\n  None,\n  /** Simple sun. */\n  Simple,\n  /** High quality sun. */\n  HighQuality\n}\n\n/**\n * Sky procedural material.\n */\nexport class SkyProceduralMaterial extends Material {\n  private static _sunSizeProp: ShaderProperty = ShaderProperty.getByName(\"material_SunSize\");\n  private static _sunSizeConvergenceProp: ShaderProperty = ShaderProperty.getByName(\"material_SunSizeConvergence\");\n  private static _atmosphereThicknessProp: ShaderProperty = ShaderProperty.getByName(\"material_AtmosphereThickness\");\n  private static _skyTintProp: ShaderProperty = ShaderProperty.getByName(\"material_SkyTint\");\n  private static _groundTintProp: ShaderProperty = ShaderProperty.getByName(\"material_GroundTint\");\n  private static _exposureProp: ShaderProperty = ShaderProperty.getByName(\"material_Exposure\");\n\n  private static _sunHighQualityMacro: ShaderMacro = ShaderMacro.getByName(\"MATERIAL_SUN_HIGH_QUALITY\");\n  private static _sunSimpleMacro: ShaderMacro = ShaderMacro.getByName(\"MATERIAL_SUN_SIMPLE\");\n\n  private _sunDisk: SunMode;\n\n  /**\n   * Sun mode.\n   */\n  get sunMode(): SunMode {\n    return this._sunDisk;\n  }\n\n  set sunMode(value: SunMode) {\n    const shaderData = this.shaderData;\n    switch (value) {\n      case SunMode.HighQuality:\n        shaderData.disableMacro(SkyProceduralMaterial._sunSimpleMacro);\n        shaderData.enableMacro(SkyProceduralMaterial._sunHighQualityMacro);\n        break;\n      case SunMode.Simple:\n        shaderData.disableMacro(SkyProceduralMaterial._sunHighQualityMacro);\n        shaderData.enableMacro(SkyProceduralMaterial._sunSimpleMacro);\n        break;\n      case SunMode.None:\n        shaderData.disableMacro(SkyProceduralMaterial._sunHighQualityMacro);\n        shaderData.disableMacro(SkyProceduralMaterial._sunSimpleMacro);\n        break;\n      default:\n        throw \"SkyBoxProceduralMaterial: unknown sun value.\";\n    }\n    this._sunDisk = value;\n  }\n\n  /**\n   * Sun size, range is 0 to 1.\n   */\n  get sunSize(): number {\n    return this.shaderData.getFloat(SkyProceduralMaterial._sunSizeProp);\n  }\n\n  set sunSize(value: number) {\n    this.shaderData.setFloat(SkyProceduralMaterial._sunSizeProp, Math.min(Math.max(0.0, value), 1.0));\n  }\n\n  /**\n   * Sun size convergence, range is 0 to 20.\n   */\n  get sunSizeConvergence(): number {\n    return this.shaderData.getFloat(SkyProceduralMaterial._sunSizeConvergenceProp);\n  }\n\n  set sunSizeConvergence(value: number) {\n    this.shaderData.setFloat(SkyProceduralMaterial._sunSizeConvergenceProp, Math.min(Math.max(0.0, value), 20.0));\n  }\n\n  /**\n   * Atmosphere thickness, range is 0 to 5.\n   */\n  get atmosphereThickness(): number {\n    return this.shaderData.getFloat(SkyProceduralMaterial._atmosphereThicknessProp);\n  }\n\n  set atmosphereThickness(value: number) {\n    this.shaderData.setFloat(SkyProceduralMaterial._atmosphereThicknessProp, Math.min(Math.max(0.0, value), 5.0));\n  }\n\n  /**\n   * Sky tint.\n   */\n  get skyTint(): Color {\n    return this.shaderData.getColor(SkyProceduralMaterial._skyTintProp);\n  }\n\n  set skyTint(value: Color) {\n    this.shaderData.setColor(SkyProceduralMaterial._skyTintProp, value);\n  }\n\n  /**\n   * Ground tint.\n   */\n  get groundTint(): Color {\n    return this.shaderData.getColor(SkyProceduralMaterial._groundTintProp);\n  }\n\n  set groundTint(value: Color) {\n    this.shaderData.setColor(SkyProceduralMaterial._groundTintProp, value);\n  }\n\n  /**\n   * Exposure, range is 0 to 8.\n   */\n  get exposure(): number {\n    return this.shaderData.getFloat(SkyProceduralMaterial._exposureProp);\n  }\n\n  set exposure(value: number) {\n    this.shaderData.setFloat(SkyProceduralMaterial._exposureProp, Math.min(Math.max(0.0, value), 8.0));\n  }\n\n  /**\n   * Constructor a SkyBoxProceduralMaterial instance.\n   * @param engine - Engine to which the material belongs\n   */\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"SkyProcedural\"));\n    this.sunMode = SunMode.HighQuality;\n    this.sunSize = 0.04;\n    this.sunSizeConvergence = 5;\n    this.atmosphereThickness = 1.0;\n    this.skyTint = new Color(0.5, 0.5, 0.5, 1.0);\n    this.groundTint = new Color(0.369, 0.349, 0.341, 1.0);\n    this.exposure = 1.3;\n\n    this.renderState.rasterState.cullMode = CullMode.Off;\n    this.renderState.depthState.compareFunction = CompareFunction.LessEqual;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  override clone(): SkyProceduralMaterial {\n    const dest = new SkyProceduralMaterial(this._engine);\n    this.cloneTo(dest);\n    return dest;\n  }\n}\n","/**\n * The rendering mode for particle renderer.\n */\nexport enum ParticleRenderMode {\n  /** Render particles as billboards facing the active camera. */\n  Billboard,\n  /** Stretch particles in the direction of motion. */\n  StretchBillboard,\n  /** Render particles as billboards always facing up along the y-Axis. */\n  HorizontalBillboard,\n  /** Render particles as billboards always facing the player, but not pitching along the x-Axis. */\n  VerticalBillboard,\n  /** Render particles as meshes. */\n  Mesh,\n  /** Do not render particles. */\n  None\n}\n","/**\n * The space to simulate particles in.\n */\nexport enum ParticleSimulationSpace {\n  /** Simulate particles in local space. */\n  Local,\n  /** Simulate particles in world space. */\n  World\n}\n","export enum ParticleStopMode {\n  /** Stop emitting new particles and clear existing particles immediately. */\n  StopEmittingAndClear,\n  /** Stop emitting new particles, but keep existing particles until they expire. */\n  StopEmitting\n}\n","import { BoundingBox, Vector3 } from \"@galacean/engine-math\";\nimport { Entity } from \"../Entity\";\nimport { RenderContext } from \"../RenderPipeline/RenderContext\";\nimport { Renderer, RendererUpdateFlags } from \"../Renderer\";\nimport { TransformModifyFlags } from \"../Transform\";\nimport { GLCapabilityType } from \"../base/Constant\";\nimport { deepClone, ignoreClone, shallowClone } from \"../clone/CloneManager\";\nimport { ModelMesh } from \"../mesh/ModelMesh\";\nimport { ShaderMacro } from \"../shader/ShaderMacro\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { ParticleGenerator } from \"./ParticleGenerator\";\nimport { ParticleRenderMode } from \"./enums/ParticleRenderMode\";\nimport { ParticleSimulationSpace } from \"./enums/ParticleSimulationSpace\";\nimport { ParticleStopMode } from \"./enums/ParticleStopMode\";\n\n/**\n * Particle Renderer Component.\n */\nexport class ParticleRenderer extends Renderer {\n  private static readonly _billboardModeMacro = ShaderMacro.getByName(\"RENDERER_MODE_SPHERE_BILLBOARD\");\n  private static readonly _stretchedBillboardModeMacro = ShaderMacro.getByName(\"RENDERER_MODE_STRETCHED_BILLBOARD\");\n  private static readonly _horizontalBillboardModeMacro = ShaderMacro.getByName(\"RENDERER_MODE_HORIZONTAL_BILLBOARD\");\n  private static readonly _verticalBillboardModeMacro = ShaderMacro.getByName(\"RENDERER_MODE_VERTICAL_BILLBOARD\");\n  private static readonly _renderModeMeshMacro = ShaderMacro.getByName(\"RENDERER_MODE_MESH\");\n\n  private static readonly _pivotOffsetProperty = ShaderProperty.getByName(\"renderer_PivotOffset\");\n  private static readonly _lengthScale = ShaderProperty.getByName(\"renderer_StretchedBillboardLengthScale\");\n  private static readonly _speedScale = ShaderProperty.getByName(\"renderer_StretchedBillboardSpeedScale\");\n  private static readonly _currentTime = ShaderProperty.getByName(\"renderer_CurrentTime\");\n\n  /** Particle generator. */\n  @deepClone\n  readonly generator: ParticleGenerator;\n  /** Specifies how much particles stretch depending on their velocity. */\n  velocityScale = 0;\n  /** How much are the particles stretched in their direction of motion, defined as the length of the particle compared to its width. */\n  lengthScale = 2;\n  /** The pivot of particle. */\n  @shallowClone\n  pivot = new Vector3();\n\n  /** @internal */\n  @ignoreClone\n  _generatorBounds = new BoundingBox();\n  /** @internal */\n  @ignoreClone\n  _transformedBounds = new BoundingBox();\n\n  private _renderMode: ParticleRenderMode;\n  private _currentRenderModeMacro: ShaderMacro;\n  private _mesh: ModelMesh;\n  private _supportInstancedArrays: boolean;\n\n  /**\n   * Specifies how particles are rendered.\n   */\n  get renderMode(): ParticleRenderMode {\n    return this._renderMode;\n  }\n\n  set renderMode(value: ParticleRenderMode) {\n    if (this._renderMode !== value) {\n      const lastRenderMode = this._renderMode;\n      this._renderMode = value;\n\n      let renderModeMacro = <ShaderMacro>null;\n      const shaderData = this.shaderData;\n      switch (value) {\n        case ParticleRenderMode.Billboard:\n          renderModeMacro = ParticleRenderer._billboardModeMacro;\n          break;\n        case ParticleRenderMode.StretchBillboard:\n          renderModeMacro = ParticleRenderer._stretchedBillboardModeMacro;\n          break;\n        case ParticleRenderMode.HorizontalBillboard:\n          throw \"Not implemented\";\n          renderModeMacro = ParticleRenderer._horizontalBillboardModeMacro;\n          break;\n        case ParticleRenderMode.VerticalBillboard:\n          throw \"Not implemented\";\n          renderModeMacro = ParticleRenderer._verticalBillboardModeMacro;\n          break;\n        case ParticleRenderMode.Mesh:\n          throw \"Not implemented\";\n          renderModeMacro = ParticleRenderer._renderModeMeshMacro;\n          break;\n      }\n\n      if (this._currentRenderModeMacro !== renderModeMacro) {\n        this._currentRenderModeMacro && shaderData.disableMacro(this._currentRenderModeMacro);\n        renderModeMacro && shaderData.enableMacro(renderModeMacro);\n        this._currentRenderModeMacro = renderModeMacro;\n      }\n\n      // @ts-ignore\n      if ((lastRenderMode !== ParticleRenderMode.Mesh) !== (value === ParticleRenderMode.Mesh)) {\n        this.generator._reorganizeGeometryBuffers();\n      }\n    }\n  }\n\n  /**\n   * The mesh of particle.\n   * @remarks Valid when `renderMode` is `Mesh`.\n   */\n  get mesh(): ModelMesh {\n    return this._mesh;\n  }\n\n  set mesh(value: ModelMesh) {\n    const lastMesh = this._mesh;\n    if (lastMesh !== value) {\n      this._mesh = value;\n      lastMesh && this._addResourceReferCount(lastMesh, -1);\n      value && this._addResourceReferCount(value, 1);\n      if (this.renderMode === ParticleRenderMode.Mesh) {\n        this.generator._reorganizeGeometryBuffers();\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    this._onGeneratorParamsChanged = this._onGeneratorParamsChanged.bind(this);\n    this.generator = new ParticleGenerator(this);\n\n    this._currentRenderModeMacro = ParticleRenderer._billboardModeMacro;\n    this.shaderData.enableMacro(ParticleRenderer._billboardModeMacro);\n\n    this._supportInstancedArrays = this.engine._hardwareRenderer.canIUse(GLCapabilityType.instancedArrays);\n\n    this._onGeneratorParamsChanged();\n  }\n\n  /**\n   * @internal\n   */\n  override _onEnable(): void {\n    if (this.generator.main.playOnEnabled) {\n      this.generator.play(false);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  override _onDisable(): void {\n    this.generator.stop(false, ParticleStopMode.StopEmittingAndClear);\n  }\n\n  /**\n   * @internal\n   */\n  override _prepareRender(context: RenderContext): void {\n    if (!this._supportInstancedArrays) {\n      return;\n    }\n\n    super._prepareRender(context);\n  }\n\n  /**\n   * @internal\n   */\n  override _updateTransformShaderData(context: RenderContext, onlyMVP: boolean, batched: boolean): void {\n    //@todo: Don't need to update transform shader data, temp solution\n    super._updateTransformShaderData(context, onlyMVP, true);\n  }\n  protected override _updateBounds(worldBounds: BoundingBox): void {\n    const { generator } = this;\n\n    // Using `isAlive` instead of `firstActiveElement !== firstFreeElement`\n    // Because `firstActiveElement !== firstFreeElement` will cause bounds is merely a point, and cannot be culled forever\n    // Must generate bounds even when there is no particle but in play state\n    if (!generator.isAlive) {\n      const worldPosition = this.entity.transform.worldPosition;\n      worldBounds.min.copyFrom(worldPosition);\n      worldBounds.max.copyFrom(worldPosition);\n      return;\n    }\n    if (generator.main.simulationSpace === ParticleSimulationSpace.Local) {\n      generator._updateBoundsSimulationLocal(worldBounds);\n    } else {\n      if (this._isContainDirtyFlag(ParticleUpdateFlags.TransformVolume)) {\n        generator._generateTransformedBounds();\n        this._setDirtyFlagFalse(ParticleUpdateFlags.TransformVolume);\n      }\n      generator._updateBoundsSimulationWorld(worldBounds);\n    }\n  }\n\n  protected override _update(context: RenderContext): void {\n    const generator = this.generator;\n    generator._update(this.engine.time.deltaTime);\n\n    // No particles to render\n    if (generator._firstActiveElement === generator._firstFreeElement) {\n      return;\n    }\n\n    const shaderData = this.shaderData;\n    shaderData.setFloat(ParticleRenderer._lengthScale, this.lengthScale);\n    shaderData.setFloat(ParticleRenderer._speedScale, this.velocityScale);\n    shaderData.setFloat(ParticleRenderer._currentTime, this.generator._playTime);\n    shaderData.setVector3(ParticleRenderer._pivotOffsetProperty, this.pivot);\n\n    this.generator._updateShaderData(shaderData);\n  }\n\n  protected override _render(context: RenderContext): void {\n    const generator = this.generator;\n    generator._primitive.instanceCount = generator._getAliveParticleCount();\n\n    let material = this.getMaterial();\n    if (!material) {\n      return;\n    }\n\n    if (material.destroyed || material.shader.destroyed) {\n      material = this.engine._particleMagentaMaterial;\n    }\n\n    const engine = this._engine;\n    const renderElement = engine._renderElementPool.get();\n    renderElement.set(this.priority, this._distanceForSort);\n    const subRenderElement = engine._subRenderElementPool.get();\n    subRenderElement.set(this, material, generator._primitive, generator._subPrimitive);\n    renderElement.addSubRenderElement(subRenderElement);\n    context.camera._renderPipeline.pushRenderElement(context, renderElement);\n  }\n\n  protected override _onDestroy(): void {\n    const mesh = this._mesh;\n    if (mesh) {\n      mesh.destroyed || this._addResourceReferCount(mesh, -1);\n    }\n    super._onDestroy();\n    this.generator._destroy();\n  }\n\n  /**\n   * @internal\n   */\n  _isContainDirtyFlag(type: number): boolean {\n    return (this._dirtyUpdateFlag & type) != 0;\n  }\n\n  /**\n   * @internal\n   */\n  _setDirtyFlagFalse(type: number): void {\n    this._dirtyUpdateFlag &= ~type;\n  }\n\n  /**\n   * @internal\n   */\n  _onWorldVolumeChanged(): void {\n    this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;\n  }\n\n  /**\n   * @internal\n   */\n  @ignoreClone\n  _onGeneratorParamsChanged(): void {\n    this._dirtyUpdateFlag |=\n      ParticleUpdateFlags.GeneratorVolume | ParticleUpdateFlags.TransformVolume | RendererUpdateFlags.WorldVolume;\n  }\n\n  /**\n   * @internal\n   */\n  override _onTransformChanged(type: TransformModifyFlags): void {\n    this._dirtyUpdateFlag |= ParticleUpdateFlags.TransformVolume | RendererUpdateFlags.WorldVolume;\n  }\n}\n\n/**\n * @internal\n */\nexport enum ParticleUpdateFlags {\n  /** On World Transform Changed */\n  TransformVolume = 0x2,\n  /** On Generator Bounds Related Params Changed */\n  GeneratorVolume = 0x4\n}\n","/**\n * Particle curve mode.\n */\nexport enum ParticleCurveMode {\n  /* Single constant mode. */\n  Constant,\n  /* Random value between two constants mode. */\n  TwoConstants,\n  /* Single curve mode. */\n  Curve,\n  /* Random value between two curves mode. */\n  TwoCurves\n}\n","/**\n * Particle gradient mode.\n */\nexport enum ParticleGradientMode {\n  /* Single constant color. */\n  Constant,\n  /* Random value between two constant colors. */\n  TwoConstants,\n  /* Single color gradient curve mode. */\n  Gradient,\n  /* Random value between two color gradients. */\n  TwoGradients\n}\n","/**\n * @internal\n */\nexport enum ParticleRandomSubSeeds {\n  Burst = 0x23571a3e,\n  StartDelay = 0x13371337,\n  StartColor = 0x12460f3b,\n  StartSize = 0x6aed452e,\n  StartRotation = 0xdec4aea1,\n  randomizeRotationDirection = 0x96aa4de3,\n  StartLifetime = 0x8d2c8431,\n  StartSpeed = 0xf3857f6f,\n  VelocityOverLifetime = 0xe0fbd834,\n  ColorOverLifetime = 0x13740583,\n  SizeOverLifetime = 0x591bc05c,\n  RotationOverLifetime = 0x40eb95e4,\n  TextureSheetAnimation = 0xbc524e5,\n  Shape = 0xaf502044,\n  GravityModifier = 0xa47b8c4d\n}\n","import { Color } from \"@galacean/engine-math\";\nimport { deepClone, ignoreClone } from \"../../clone/CloneManager\";\nimport { ColorSpace } from \"../../enums/ColorSpace\";\n\n/**\n * Particle gradient.\n */\nexport class ParticleGradient {\n  @deepClone\n  private _colorKeys: GradientColorKey[] = [];\n  @deepClone\n  private _alphaKeys: GradientAlphaKey[] = [];\n  @ignoreClone\n  private _colorTypeArray: Float32Array;\n  @ignoreClone\n  private _alphaTypeArray: Float32Array;\n\n  private _colorTypeArrayDirty: boolean = false;\n  private _alphaTypeArrayDirty: boolean = false;\n\n  /**\n   * The color keys of the gradient.\n   */\n  get colorKeys(): ReadonlyArray<GradientColorKey> {\n    return this._colorKeys;\n  }\n\n  /**\n   * The alpha keys of the gradient.\n   */\n  get alphaKeys(): ReadonlyArray<GradientAlphaKey> {\n    return this._alphaKeys;\n  }\n\n  /**\n   * Create a new particle gradient.\n   * @param colorKeys - The color keys of the gradient\n   * @param alphaKeys - The alpha keys of the gradient\n   */\n  constructor(colorKeys: GradientColorKey[] = null, alphaKeys: GradientAlphaKey[] = null) {\n    if (colorKeys) {\n      for (let i = 0, n = colorKeys.length; i < n; i++) {\n        const key = colorKeys[i];\n        this.addColorKey(key);\n      }\n    }\n\n    if (alphaKeys) {\n      for (let i = 0, n = alphaKeys.length; i < n; i++) {\n        const key = alphaKeys[i];\n        this.addAlphaKey(key);\n      }\n    }\n  }\n\n  /**\n   * Add a color key to the gradient.\n   * @param key - The key\n   */\n  addColorKey(key: GradientColorKey): void;\n  /**\n   * Add a color key to the gradient.\n   * @param time - The key time\n   * @param color - The key color\n   */\n  addColorKey(time: number, color: Color): void;\n\n  addColorKey(timeOrKey: number | GradientColorKey, color?: Color): void {\n    const colorKeys = this._colorKeys;\n\n    if (colorKeys.length === 4) {\n      throw new Error(\"Gradient can only have 4 color keys\");\n    }\n\n    const key = typeof timeOrKey === \"number\" ? new GradientColorKey(timeOrKey, color) : timeOrKey;\n    key._onValueChanged = this._setColorTypeArrayDirty.bind(this);\n    this._addKey(colorKeys, key);\n    this._colorTypeArrayDirty = true;\n  }\n\n  /**\n   * Add an alpha key to the gradient.\n   * @param key - The key\n   */\n  addAlphaKey(key: GradientAlphaKey): void;\n\n  /**\n   * Add an alpha key to the gradient.\n   * @param time - The key time\n   * @param alpha - The key alpha\n   */\n  addAlphaKey(time: number, alpha: number): void;\n\n  addAlphaKey(timeOrKey: number | GradientAlphaKey, alpha?: number): void {\n    const alphaKeys = this._alphaKeys;\n\n    if (alphaKeys.length === 4) {\n      throw new Error(\"Gradient can only have 4 alpha keys\");\n    }\n\n    const key = typeof timeOrKey === \"number\" ? new GradientAlphaKey(timeOrKey, alpha) : timeOrKey;\n    key._onValueChanged = this._setAlphaTypeArrayDirty.bind(this);\n    this._addKey(alphaKeys, key);\n    this._alphaTypeArrayDirty = true;\n  }\n\n  /**\n   * Remove a color key from the gradient.\n   * @param index - The remove color key index\n   */\n  removeColorKey(index: number): void {\n    this._colorKeys[index]._onValueChanged = null;\n    this._removeKey(this._colorKeys, index);\n    this._colorTypeArrayDirty = true;\n  }\n\n  /**\n   * Remove an alpha key from the gradient.\n   * @param index - The remove alpha key index\n   */\n  removeAlphaKey(index: number): void {\n    this._alphaKeys[index]._onValueChanged = null;\n    this._removeKey(this._alphaKeys, index);\n    this._alphaTypeArrayDirty = true;\n  }\n\n  /**\n   * Set the keys of the gradient.\n   * @param colorKeys - The color keys\n   * @param alphaKeys - The alpha keys\n   */\n  setKeys(colorKeys: GradientColorKey[], alphaKeys: GradientAlphaKey[]): void {\n    const currentColorKeys = this._colorKeys;\n    const currentAlphaKeys = this._alphaKeys;\n    for (let i = 0, n = currentColorKeys.length; i < n; i++) {\n      currentColorKeys[i]._onValueChanged = null;\n    }\n    for (let i = 0, n = currentAlphaKeys.length; i < n; i++) {\n      currentAlphaKeys[i]._onValueChanged = null;\n    }\n    currentColorKeys.length = 0;\n    currentAlphaKeys.length = 0;\n\n    for (let i = 0, n = colorKeys.length; i < n; i++) {\n      this._addKey(currentColorKeys, colorKeys[i]);\n    }\n    for (let i = 0, n = alphaKeys.length; i < n; i++) {\n      this._addKey(currentAlphaKeys, alphaKeys[i]);\n    }\n    this._alphaTypeArrayDirty = true;\n    this._colorTypeArrayDirty = true;\n  }\n\n  /**\n   * @internal\n   */\n  _getColorTypeArray(colorSpace: ColorSpace): Float32Array {\n    const typeArray = (this._colorTypeArray ||= new Float32Array(4 * 4));\n    if (this._colorTypeArrayDirty) {\n      const keys = this._colorKeys;\n      for (let i = 0, n = Math.min(keys.length, 4); i < n; i++) {\n        const offset = i * 4;\n        const key = keys[i];\n        typeArray[offset] = key.time;\n        const color = key.color;\n        if (colorSpace === ColorSpace.Linear) {\n          typeArray[offset + 1] = Color.gammaToLinearSpace(color.r);\n          typeArray[offset + 2] = Color.gammaToLinearSpace(color.g);\n          typeArray[offset + 3] = Color.gammaToLinearSpace(color.b);\n        } else {\n          typeArray[offset + 1] = color.r;\n          typeArray[offset + 2] = color.g;\n          typeArray[offset + 3] = color.b;\n        }\n      }\n      this._colorTypeArrayDirty = false;\n    }\n\n    return typeArray;\n  }\n\n  /**\n   * @internal\n   */\n  _getAlphaTypeArray(): Float32Array {\n    const typeArray = (this._alphaTypeArray ||= new Float32Array(4 * 2));\n    if (this._alphaTypeArrayDirty) {\n      const keys = this._alphaKeys;\n      for (let i = 0, n = Math.min(keys.length, 4); i < n; i++) {\n        const offset = i * 2;\n        const key = keys[i];\n        typeArray[offset] = key.time;\n        typeArray[offset + 1] = key.alpha;\n      }\n      this._alphaTypeArrayDirty = false;\n    }\n\n    return typeArray;\n  }\n\n  private _addKey<T extends { time: number }>(keys: T[], key: T): void {\n    const time = key.time;\n    const count = keys.length;\n    const duration = count ? keys[count - 1].time : 0;\n    if (time >= duration) {\n      keys.push(key);\n    } else {\n      let index = count;\n      while (--index >= 0 && time < keys[index].time);\n      keys.splice(index + 1, 0, key);\n    }\n  }\n\n  private _removeKey<T extends { time: number }>(keys: T[], index: number): void {\n    keys.splice(index, 1);\n  }\n\n  @ignoreClone\n  private _setColorTypeArrayDirty(): void {\n    this._colorTypeArrayDirty = true;\n  }\n\n  @ignoreClone\n  private _setAlphaTypeArrayDirty(): void {\n    this._alphaTypeArrayDirty = true;\n  }\n}\n\n/**\n * The color key of the particle gradient.\n */\nexport class GradientColorKey {\n  /** @internal */\n  _onValueChanged: () => void = null;\n\n  private _time: number;\n  private _color: Color = new Color();\n\n  /**\n   * The key time.\n   */\n  get time(): number {\n    return this._time;\n  }\n\n  set time(value: number) {\n    this._time = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The key color.\n   */\n  get color(): Color {\n    return this._color;\n  }\n\n  set color(value: Color) {\n    if (this._color !== value) {\n      this._color.copyFrom(value);\n    }\n  }\n\n  /**\n   * Constructor of GradientColorKey.\n   * @param time - The time of the gradient colorKey\n   * @param color - The alpha component of the gradient colorKey\n   */\n  constructor(time: number, color: Color) {\n    this._time = time;\n    color && this._color.copyFrom(color);\n    // @ts-ignore\n    this._color._onValueChanged = this._onValueChanged;\n  }\n}\n\n/**\n * The alpha key of the particle gradient.\n */\nexport class GradientAlphaKey {\n  /** @internal */\n  _onValueChanged: () => void = null;\n\n  private _time: number;\n  private _alpha: number;\n\n  /**\n   * The key time.\n   */\n  get time(): number {\n    return this._time;\n  }\n\n  set time(value: number) {\n    this._time = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The key alpha.\n   */\n  get alpha(): number {\n    return this._alpha;\n  }\n\n  set alpha(value: number) {\n    this._alpha = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * Constructor of GradientAlphaKey.\n   * @param time - The time of the gradient alpha key\n   * @param alpha - The alpha component of the gradient alpha key\n   */\n  constructor(time: number, alpha: number) {\n    this._time = time;\n    this._alpha = alpha;\n  }\n}\n","import { Color } from \"@galacean/engine-math\";\nimport { deepClone } from \"../../clone/CloneManager\";\nimport { ParticleGradientMode } from \"../enums/ParticleGradientMode\";\nimport { ParticleGradient } from \"./ParticleGradient\";\n\n/**\n * Particle composite gradient.\n */\nexport class ParticleCompositeGradient {\n  /** The gradient mode. */\n  mode: ParticleGradientMode = ParticleGradientMode.Constant;\n  /* The min constant color used by the gradient if mode is set to `TwoConstants`. */\n  @deepClone\n  constantMin: Color = new Color();\n  /* The max constant color used by the gradient if mode is set to `TwoConstants`. */\n  @deepClone\n  constantMax: Color = new Color();\n  /** The min gradient used by the gradient if mode is set to `Gradient`. */\n  @deepClone\n  gradientMin: ParticleGradient = new ParticleGradient();\n  /** The max gradient used by the gradient if mode is set to `Gradient`. */\n  @deepClone\n  gradientMax: ParticleGradient = new ParticleGradient();\n\n  /**\n   *  The constant color used by the gradient if mode is set to `Constant`.\n   */\n  get constant(): Color {\n    return this.constantMax;\n  }\n\n  set constant(value: Color) {\n    this.constantMax = value;\n  }\n\n  /**\n   * The gradient used by the gradient if mode is set to `Gradient`.\n   */\n  get gradient(): ParticleGradient {\n    return this.gradientMax;\n  }\n\n  set gradient(value: ParticleGradient) {\n    this.gradientMax = value;\n  }\n\n  /**\n   * Create a particle gradient that generates a constant color.\n   * @param constant - The constant color\n   */\n  constructor(constant: Color);\n\n  /**\n   * Create a particle gradient that can generate color between a minimum constant and a maximum constant.\n   * @param constantMin - The min constant color\n   * @param constantMax - The max constant color\n   */\n  constructor(constantMin: Color, constantMax: Color);\n\n  /**\n   * Create a particle gradient that generates a color from a gradient.\n   * @param gradient - The gradient\n   */\n  constructor(gradient: ParticleGradient);\n\n  /**\n   * Create a particle gradient that can generate color from a minimum gradient and a maximum gradient.\n   * @param gradientMin - The min gradient\n   *\n   */\n  constructor(gradientMin: ParticleGradient, gradientMax: ParticleGradient);\n\n  constructor(constantOrGradient: Color | ParticleGradient, constantMaxOrGradientMax?: Color | ParticleGradient) {\n    if (constantOrGradient.constructor === Color) {\n      if (constantMaxOrGradientMax) {\n        this.constantMin.copyFrom(<Color>constantOrGradient);\n        this.constantMax.copyFrom(<Color>constantMaxOrGradientMax);\n        this.mode = ParticleGradientMode.TwoConstants;\n      } else {\n        this.constant.copyFrom(<Color>constantOrGradient);\n        this.mode = ParticleGradientMode.Constant;\n      }\n    } else {\n      if (constantMaxOrGradientMax) {\n        this.gradientMin = <ParticleGradient>constantOrGradient;\n        this.gradientMax = <ParticleGradient>constantMaxOrGradientMax;\n        this.mode = ParticleGradientMode.TwoGradients;\n      } else {\n        this.gradient = <ParticleGradient>constantOrGradient;\n        this.mode = ParticleGradientMode.Gradient;\n      }\n    }\n  }\n\n  /**\n   * Query the color at the specified time.\n   * @param time - Normalized time at which to evaluate the gradient, Valid when `mode` is set to `Gradient` or `TwoGradients`\n   * @param lerpFactor - Lerp factor between two constants or gradients, Valid when `mode` is set to `TwoConstants` or `TwoGradients`\n   * @param out - The result color\n   */\n\n  evaluate(time: number, lerpFactor: number, out: Color): void {\n    switch (this.mode) {\n      case ParticleGradientMode.Constant:\n        out.copyFrom(this.constant);\n        break;\n      case ParticleGradientMode.TwoConstants:\n        Color.lerp(this.constantMin, this.constantMax, lerpFactor, out);\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { ignoreClone } from \"../../clone/CloneManager\";\nimport { ShaderData, ShaderMacro } from \"../../shader\";\nimport { ParticleGenerator } from \"../ParticleGenerator\";\n\n/**\n * Particle generator module.\n */\nexport abstract class ParticleGeneratorModule {\n  @ignoreClone\n  protected _generator: ParticleGenerator;\n\n  protected _enabled: boolean = false;\n\n  /**\n   * Specifies whether the module is enabled or not.\n   */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n\n  set enabled(value: boolean) {\n    this._enabled = value;\n  }\n\n  /**\n   * @internal\n   */\n  constructor(generator: ParticleGenerator) {\n    this._generator = generator;\n  }\n\n  protected _enableMacro(shaderData: ShaderData, lastEnableMacro: ShaderMacro, enableMacro: ShaderMacro): ShaderMacro {\n    if (lastEnableMacro !== enableMacro) {\n      lastEnableMacro && shaderData.disableMacro(lastEnableMacro);\n      enableMacro && shaderData.enableMacro(enableMacro);\n    }\n    return enableMacro;\n  }\n}\n","import { Color, Rand, Vector4 } from \"@galacean/engine-math\";\nimport { deepClone, ignoreClone } from \"../../clone/CloneManager\";\nimport { ShaderData } from \"../../shader/ShaderData\";\nimport { ShaderMacro } from \"../../shader/ShaderMacro\";\nimport { ShaderProperty } from \"../../shader/ShaderProperty\";\nimport { ParticleGradientMode } from \"../enums/ParticleGradientMode\";\nimport { ParticleRandomSubSeeds } from \"../enums/ParticleRandomSubSeeds\";\nimport { ParticleCompositeGradient } from \"./ParticleCompositeGradient\";\nimport { ParticleGeneratorModule } from \"./ParticleGeneratorModule\";\nimport { GradientAlphaKey, GradientColorKey, ParticleGradient } from \"./ParticleGradient\";\n\n/**\n * Color over lifetime module.\n */\nexport class ColorOverLifetimeModule extends ParticleGeneratorModule {\n  static readonly _gradientMacro = ShaderMacro.getByName(\"RENDERER_COL_GRADIENT\");\n  static readonly _randomGradientsMacro = ShaderMacro.getByName(\"RENDERER_COL_RANDOM_GRADIENTS\");\n\n  static readonly _minGradientColor = ShaderProperty.getByName(\"renderer_COLMinGradientColor\");\n  static readonly _minGradientAlpha = ShaderProperty.getByName(\"renderer_COLMinGradientAlpha\");\n  static readonly _maxGradientColor = ShaderProperty.getByName(\"renderer_COLMaxGradientColor\");\n  static readonly _maxGradientAlpha = ShaderProperty.getByName(\"renderer_COLMaxGradientAlpha\");\n  static readonly _gradientKeysCount = ShaderProperty.getByName(\"renderer_COLGradientKeysMaxTime\");\n\n  /** Color gradient over lifetime. */\n  @deepClone\n  color = new ParticleCompositeGradient(\n    new ParticleGradient(\n      [new GradientColorKey(0.0, new Color(1, 1, 1)), new GradientColorKey(1.0, new Color(1, 1, 1))],\n      [new GradientAlphaKey(0, 1), new GradientAlphaKey(1, 1)]\n    )\n  );\n\n  /** @internal */\n  @ignoreClone\n  _colorGradientRand = new Rand(0, ParticleRandomSubSeeds.ColorOverLifetime);\n\n  @ignoreClone\n  private _gradientKeysCount = new Vector4(0, 0, 0, 0); // x: minColorKeysMaxTime, y: minAlphaKeysMaxTime, z: maxColorKeysMaxTime, w: maxAlphaKeysMaxTime\n  @ignoreClone\n  private _colorMacro: ShaderMacro;\n\n  /**\n   * @internal\n   */\n  _updateShaderData(shaderData: ShaderData): void {\n    let colorMacro = <ShaderMacro>null;\n    if (this.enabled) {\n      const mode = this.color.mode;\n\n      if (mode !== ParticleGradientMode.Gradient && mode !== ParticleGradientMode.TwoGradients) {\n        throw new Error(\"Invalid color mode, only gradient and two gradients are supported in color over lifetime.\");\n      }\n\n      const color = this.color;\n      const colorSpace = this._generator._renderer.engine.settings.colorSpace;\n      shaderData.setFloatArray(\n        ColorOverLifetimeModule._maxGradientColor,\n        color.gradientMax._getColorTypeArray(colorSpace)\n      );\n      shaderData.setFloatArray(ColorOverLifetimeModule._maxGradientAlpha, color.gradientMax._getAlphaTypeArray());\n\n      if (mode === ParticleGradientMode.Gradient) {\n        colorMacro = ColorOverLifetimeModule._gradientMacro;\n      } else {\n        shaderData.setFloatArray(\n          ColorOverLifetimeModule._minGradientColor,\n          color.gradientMin._getColorTypeArray(colorSpace)\n        );\n        shaderData.setFloatArray(ColorOverLifetimeModule._minGradientAlpha, color.gradientMin._getAlphaTypeArray());\n        colorMacro = ColorOverLifetimeModule._randomGradientsMacro;\n      }\n\n      const colorMinKeys = color.gradientMin.colorKeys;\n      const alphaMinKeys = color.gradientMin.alphaKeys;\n      const colorMaxKeys = color.gradientMax.colorKeys;\n      const alphaMaxKeys = color.gradientMax.alphaKeys;\n\n      this._gradientKeysCount.set(\n        colorMinKeys.length ? colorMinKeys[colorMinKeys.length - 1].time : 0,\n        alphaMinKeys.length ? alphaMinKeys[alphaMinKeys.length - 1].time : 0,\n        colorMaxKeys.length ? colorMaxKeys[colorMaxKeys.length - 1].time : 0,\n        alphaMaxKeys.length ? alphaMaxKeys[alphaMaxKeys.length - 1].time : 0\n      );\n      shaderData.setVector4(ColorOverLifetimeModule._gradientKeysCount, this._gradientKeysCount);\n    }\n\n    this._colorMacro = this._enableMacro(shaderData, this._colorMacro, colorMacro);\n  }\n\n  /**\n   * @internal\n   */\n  _resetRandomSeed(seed: number): void {\n    this._colorGradientRand.reset(seed, ParticleRandomSubSeeds.ColorOverLifetime);\n  }\n}\n","import { Vector2 } from \"@galacean/engine-math\";\nimport { deepClone, ignoreClone } from \"../../clone/CloneManager\";\nimport { ParticleCurveMode } from \"../enums/ParticleCurveMode\";\nimport { CurveKey, ParticleCurve } from \"./ParticleCurve\";\nimport { UpdateFlagManager } from \"../../UpdateFlagManager\";\n\n/**\n * Particle composite curve.\n */\nexport class ParticleCompositeCurve {\n  @ignoreClone\n  private _updateManager = new UpdateFlagManager();\n  private _mode = ParticleCurveMode.Constant;\n  private _constantMin = 0;\n  private _constantMax = 0;\n  @deepClone\n  private _curveMin: ParticleCurve;\n  @deepClone\n  private _curveMax: ParticleCurve;\n  @ignoreClone\n  private _updateDispatch: () => void;\n\n  /**\n   * The curve mode.\n   */\n  get mode(): ParticleCurveMode {\n    return this._mode;\n  }\n  set mode(value: ParticleCurveMode) {\n    if (value !== this._mode) {\n      this._mode = value;\n      this._updateDispatch();\n    }\n  }\n\n  /**\n   * The min constant value used by the curve if mode is set to `TwoConstants`.\n   */\n  get constantMin(): number {\n    return this._constantMin;\n  }\n\n  set constantMin(value: number) {\n    if (value !== this._constantMin) {\n      this._constantMin = value;\n      this._updateDispatch();\n    }\n  }\n\n  /**\n   * The max constant value used by the curve if mode is set to `TwoConstants`.\n   */\n  get constantMax(): number {\n    return this._constantMax;\n  }\n\n  set constantMax(value: number) {\n    if (value !== this._constantMax) {\n      this._constantMax = value;\n      this._updateDispatch();\n    }\n  }\n\n  /**\n   * The min curve used by the curve if mode is set to `TwoCurves`.\n   */\n  get curveMin(): ParticleCurve {\n    return this._curveMin;\n  }\n\n  set curveMin(value: ParticleCurve) {\n    const lastCurve = this._curveMin;\n    if (value !== lastCurve) {\n      this._curveMin = value;\n      this._onCurveChange(lastCurve, value);\n    }\n  }\n\n  /**\n   * The max curve used by the curve if mode is set to `TwoCurves`.\n   */\n  get curveMax(): ParticleCurve {\n    return this._curveMax;\n  }\n\n  set curveMax(value: ParticleCurve) {\n    const lastCurve = this._curveMax;\n    if (value !== lastCurve) {\n      this._curveMax = value;\n      this._onCurveChange(lastCurve, value);\n    }\n  }\n\n  /**\n   * The constant value used by the curve if mode is set to `Constant`.\n   */\n  get constant(): number {\n    return this.constantMax;\n  }\n\n  set constant(value: number) {\n    this.constantMax = value;\n  }\n\n  /**\n   * The curve used by the curve if mode is set to `Curve`.\n   */\n  get curve(): ParticleCurve {\n    return this.curveMax;\n  }\n\n  set curve(value: ParticleCurve) {\n    this.curveMax = value;\n  }\n\n  /**\n   * Create a particle curve that generates a constant value.\n   * @param constant - The constant value\n   */\n  constructor(constant: number);\n\n  /**\n   * Create a particle curve that can generate values between a minimum constant and a maximum constant.\n   * @param constantMin - The min constant value\n   * @param constantMax - The max constant value\n   */\n  constructor(constantMin: number, constantMax: number);\n\n  /**\n   * Create a particle composite curve by a curve.\n   * @param curve - The curve\n   */\n  constructor(curve: ParticleCurve);\n\n  /**\n   * Create a particle composite curve by min and max curves.\n   * @param curveMin - The min curve\n   * @param curveMax - The max curve\n   */\n  constructor(curveMin: ParticleCurve, curveMax: ParticleCurve);\n\n  constructor(constantOrCurve: number | ParticleCurve, constantMaxOrCurveMax?: number | ParticleCurve) {\n    this._updateDispatch = this._updateManager.dispatch.bind(this._updateManager);\n    if (typeof constantOrCurve === \"number\") {\n      if (constantMaxOrCurveMax) {\n        this.constantMin = constantOrCurve;\n        this.constantMax = <number>constantMaxOrCurveMax;\n        this.mode = ParticleCurveMode.TwoConstants;\n      } else {\n        this.constant = constantOrCurve;\n        this.mode = ParticleCurveMode.Constant;\n      }\n    } else {\n      if (constantMaxOrCurveMax) {\n        this.curveMin = constantOrCurve;\n        this.curveMax = <ParticleCurve>constantMaxOrCurveMax;\n        this.mode = ParticleCurveMode.TwoCurves;\n      } else {\n        this.curve = constantOrCurve;\n        this.mode = ParticleCurveMode.Curve;\n      }\n    }\n  }\n\n  /**\n   * Query the value at the specified time.\n   * @param time - Normalized time at which to evaluate the curve, Valid when `mode` is set to `Curve` or `TwoCurves`\n   * @param lerpFactor - Lerp factor between two constants or curves, Valid when `mode` is set to `TwoConstants` or `TwoCurves`\n   * @returns - The result curve value\n   */\n\n  evaluate(time: number, lerpFactor: number): number {\n    switch (this.mode) {\n      case ParticleCurveMode.Constant:\n        return this.constant;\n      case ParticleCurveMode.TwoConstants:\n        return this.constantMin + (this.constantMax - this.constantMin) * lerpFactor;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _getMax(): number {\n    switch (this.mode) {\n      case ParticleCurveMode.Constant:\n        return this.constantMax;\n      case ParticleCurveMode.TwoConstants:\n        return Math.max(this.constantMin, this.constantMax);\n      case ParticleCurveMode.Curve:\n        return this._getMaxKeyValue(this.curveMax?.keys);\n      case ParticleCurveMode.TwoCurves:\n        const min = this._getMaxKeyValue(this.curveMin?.keys);\n        const max = this._getMaxKeyValue(this.curveMax?.keys);\n        return min > max ? min : max;\n    }\n  }\n\n  /**\n   * @internal\n\n   */\n  _getMinMax(out: Vector2): void {\n    switch (this.mode) {\n      case ParticleCurveMode.Constant:\n        out.x = out.y = this.constantMax;\n        break;\n      case ParticleCurveMode.TwoConstants:\n        out.set(Math.min(this.constantMin, this.constantMax), Math.max(this.constantMin, this.constantMax));\n        break;\n      case ParticleCurveMode.Curve:\n        out.set(this._getMinKeyValue(this.curveMax?.keys), this._getMaxKeyValue(this.curveMax?.keys));\n        break;\n      case ParticleCurveMode.TwoCurves:\n        const minCurveMax = this._getMinKeyValue(this.curveMax?.keys);\n        const minCurveMin = this._getMinKeyValue(this.curveMin?.keys);\n\n        const maxCurveMax = this._getMaxKeyValue(this.curveMax?.keys);\n        const maxCurveMin = this._getMaxKeyValue(this.curveMin?.keys);\n\n        const min = minCurveMax < minCurveMin ? minCurveMax : minCurveMin;\n        const max = maxCurveMax > maxCurveMin ? maxCurveMax : maxCurveMin;\n\n        out.set(min, max);\n        break;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _registerOnValueChanged(listener: () => void): void {\n    this._updateManager.addListener(listener);\n  }\n\n  /**\n   * @internal\n   */\n  _unRegisterOnValueChanged(listener: () => void): void {\n    this._updateManager.removeListener(listener);\n  }\n\n  private _getMaxKeyValue(keys: ReadonlyArray<CurveKey>): number {\n    let max = undefined;\n    const count = keys?.length ?? 0;\n    if (count > 0) {\n      max = keys[0].value;\n      for (let i = 1; i < count; i++) {\n        const value = keys[i].value;\n        max = Math.max(max, value);\n      }\n    }\n    return max;\n  }\n\n  private _getMinKeyValue(keys: ReadonlyArray<CurveKey>): number {\n    let min = undefined;\n    const count = keys?.length ?? 0;\n    if (count > 0) {\n      min = keys[0].value;\n      for (let i = 1; i < count; i++) {\n        const value = keys[i].value;\n        min = Math.min(min, value);\n      }\n    }\n    return min;\n  }\n\n  private _onCurveChange(lastValue: ParticleCurve, value: ParticleCurve) {\n    const dispatch = this._updateDispatch;\n    lastValue?._unRegisterOnValueChanged(dispatch);\n    value?._registerOnValueChanged(dispatch);\n    dispatch();\n  }\n}\n","import { Rand } from \"@galacean/engine-math\";\nimport { deepClone, ignoreClone } from \"../../clone/CloneManager\";\nimport { ParticleRandomSubSeeds } from \"../enums/ParticleRandomSubSeeds\";\nimport { Burst } from \"./Burst\";\nimport { ParticleCompositeCurve } from \"./ParticleCompositeCurve\";\nimport { ParticleGeneratorModule } from \"./ParticleGeneratorModule\";\nimport { BaseShape } from \"./shape/BaseShape\";\n\n/**\n * The EmissionModule of a Particle Generator.\n */\nexport class EmissionModule extends ParticleGeneratorModule {\n  /**  The rate of particle emission. */\n  @deepClone\n  rateOverTime: ParticleCompositeCurve = new ParticleCompositeCurve(10);\n  /**  The rate at which the emitter spawns new particles over distance. */\n  @deepClone\n  rateOverDistance: ParticleCompositeCurve = new ParticleCompositeCurve(0);\n\n  @deepClone\n  _shape: BaseShape;\n  /** @internal */\n  @ignoreClone\n  _shapeRand = new Rand(0, ParticleRandomSubSeeds.Shape);\n  /** @internal */\n  _frameRateTime: number = 0;\n\n  @deepClone\n  private _bursts: Burst[] = [];\n\n  private _currentBurstIndex: number = 0;\n\n  @ignoreClone\n  private _burstRand: Rand = new Rand(0, ParticleRandomSubSeeds.Burst);\n\n  /**\n   * The shape of the emitter.\n   */\n  get shape() {\n    return this._shape;\n  }\n\n  set shape(value: BaseShape) {\n    const lastShape = this._shape;\n    if (value !== lastShape) {\n      this._shape = value;\n\n      const renderer = this._generator._renderer;\n      lastShape?._unRegisterOnValueChanged(renderer._onGeneratorParamsChanged);\n      value?._registerOnValueChanged(renderer._onGeneratorParamsChanged);\n\n      renderer._onGeneratorParamsChanged();\n    }\n  }\n\n  /**\n   * Gets the burst array.\n   */\n  get bursts(): ReadonlyArray<Burst> {\n    return this._bursts;\n  }\n\n  /**\n   * Add a single burst.\n   * @param burst - The burst\n   */\n  addBurst(burst: Burst): void {\n    const bursts = this._bursts;\n    let burstIndex = bursts.length;\n    while (--burstIndex >= 0 && burst.time < bursts[burstIndex].time);\n    bursts.splice(burstIndex + 1, 0, burst);\n  }\n\n  /**\n   * Remove a single burst from the array of bursts.\n   * @param burst - The burst data\n   */\n  removeBurst(burst: Burst): void {\n    const index = this._bursts.indexOf(burst);\n    if (index !== -1) {\n      this._bursts.splice(index, 1);\n    }\n  }\n\n  /**\n   * Remove a single burst from the array of bursts.\n   * @param index - The burst data index\n   */\n  removeBurstByIndex(index: number): void {\n    this._bursts.splice(index, 1);\n  }\n\n  /**\n   * Clear burst data.\n   */\n  clearBurst(): void {\n    this._bursts.length = 0;\n  }\n\n  /**\n   * @internal\n   */\n  _emit(lastPlayTime: number, playTime: number): void {\n    this._emitByRateOverTime(playTime);\n    this._emitByBurst(lastPlayTime, playTime);\n  }\n\n  /**\n   * @internal\n   */\n  _resetRandomSeed(seed: number): void {\n    this._burstRand.reset(seed, ParticleRandomSubSeeds.Burst);\n    this._shapeRand.reset(seed, ParticleRandomSubSeeds.Shape);\n  }\n\n  /**\n   * @internal\n   */\n  _reset(): void {\n    this._frameRateTime = 0;\n    this._currentBurstIndex = 0;\n  }\n\n  /**\n   * @internal\n   */\n  _destroy(): void {\n    this._shape?._unRegisterOnValueChanged(this._generator._renderer._onGeneratorParamsChanged);\n  }\n\n  private _emitByRateOverTime(playTime: number): void {\n    const ratePerSeconds = this.rateOverTime.evaluate(undefined, undefined);\n    if (ratePerSeconds > 0) {\n      const generator = this._generator;\n      const emitInterval = 1.0 / ratePerSeconds;\n\n      let cumulativeTime = playTime - this._frameRateTime;\n      while (cumulativeTime >= emitInterval) {\n        cumulativeTime -= emitInterval;\n        this._frameRateTime += emitInterval;\n        generator._emit(this._frameRateTime, 1);\n      }\n    }\n  }\n\n  private _emitByBurst(lastPlayTime: number, playTime: number): void {\n    const main = this._generator.main;\n    const duration = main.duration;\n    const cycleCount = Math.floor((playTime - lastPlayTime) / duration);\n\n    // Across one cycle\n    if (main.isLoop && (cycleCount > 0 || playTime % duration < lastPlayTime % duration)) {\n      let middleTime = Math.ceil(lastPlayTime / duration) * duration;\n      this._emitBySubBurst(lastPlayTime, middleTime, duration);\n      this._currentBurstIndex = 0;\n\n      for (let i = 0; i < cycleCount; i++) {\n        const lastMiddleTime = middleTime;\n        middleTime += duration;\n        this._emitBySubBurst(lastMiddleTime, middleTime, duration);\n        this._currentBurstIndex = 0;\n      }\n\n      this._emitBySubBurst(middleTime, playTime, duration);\n    } else {\n      this._emitBySubBurst(lastPlayTime, playTime, duration);\n    }\n  }\n\n  private _emitBySubBurst(lastPlayTime: number, playTime: number, duration: number): void {\n    const generator = this._generator;\n    const rand = this._burstRand;\n    const bursts = this.bursts;\n\n    // Calculate the relative time of the burst\n    const baseTime = Math.floor(lastPlayTime / duration) * duration;\n    const startTime = lastPlayTime % duration;\n    const endTime = startTime + (playTime - lastPlayTime);\n\n    let index = this._currentBurstIndex;\n    for (let n = bursts.length; index < n; index++) {\n      const burst = bursts[index];\n      const burstTime = burst.time;\n\n      if (burstTime > endTime) {\n        break;\n      }\n\n      if (burstTime >= startTime) {\n        const count = burst.count.evaluate(undefined, rand.random());\n        generator._emit(baseTime + burstTime, count);\n      }\n    }\n    this._currentBurstIndex = index;\n  }\n}\n","/**\n * Control how Particle Generator apply transform scale.\n */\nexport enum ParticleScaleMode {\n  /** Scale the Particle Generator using the entire transform hierarchy. */\n  Hierarchy,\n  /** Scale the Particle Generator using only its own transform scale. (Ignores parent scale). */\n  Local,\n  /** Only apply transform scale to the shape component, which controls where particles are spawned, but does not affect their size or movement. */\n  World\n}\n","import { Color, Rand, Vector3, Vector4 } from \"@galacean/engine-math\";\nimport { TransformModifyFlags } from \"../../Transform\";\nimport { deepClone, ignoreClone } from \"../../clone/CloneManager\";\nimport { ICustomClone } from \"../../clone/ComponentCloner\";\nimport { ShaderData } from \"../../shader/ShaderData\";\nimport { ShaderProperty } from \"../../shader/ShaderProperty\";\nimport { ParticleGenerator } from \"../ParticleGenerator\";\nimport { ParticleRandomSubSeeds } from \"../enums/ParticleRandomSubSeeds\";\nimport { ParticleScaleMode } from \"../enums/ParticleScaleMode\";\nimport { ParticleSimulationSpace } from \"../enums/ParticleSimulationSpace\";\nimport { ParticleCompositeCurve } from \"./ParticleCompositeCurve\";\nimport { ParticleCompositeGradient } from \"./ParticleCompositeGradient\";\n\nexport class MainModule implements ICustomClone {\n  private _tempVector40 = new Vector4();\n  private static _vector3One = new Vector3(1, 1, 1);\n\n  private static readonly _positionScale = ShaderProperty.getByName(\"renderer_PositionScale\");\n  private static readonly _sizeScale = ShaderProperty.getByName(\"renderer_SizeScale\");\n  private static readonly _worldPosition = ShaderProperty.getByName(\"renderer_WorldPosition\");\n  private static readonly _worldRotation = ShaderProperty.getByName(\"renderer_WorldRotation\");\n  private static readonly _gravity = ShaderProperty.getByName(\"renderer_Gravity\");\n  private static readonly _simulationSpace = ShaderProperty.getByName(\"renderer_SimulationSpace\");\n  private static readonly _startRotation3D = ShaderProperty.getByName(\"renderer_ThreeDStartRotation\");\n  private static readonly _scaleMode = ShaderProperty.getByName(\"renderer_ScalingMode\");\n\n  /** The duration of the Particle Generator in seconds. */\n  duration = 5.0;\n  /** Specifies whether the Particle Generator loops. */\n  isLoop = true;\n\n  /** Start delay in seconds. */\n  @deepClone\n  startDelay = new ParticleCompositeCurve(0);\n\n  /** A flag to enable 3D particle rotation, when disabled, only `startRotationZ` is used. */\n  startRotation3D = false;\n  /** The initial rotation of particles around the x-axis when emitted.*/\n  @deepClone\n  startRotationX = new ParticleCompositeCurve(0);\n  /** The initial rotation of particles around the y-axis when emitted. */\n  @deepClone\n  startRotationY = new ParticleCompositeCurve(0);\n  /** The initial rotation of particles around the z-axis when emitted. */\n  @deepClone\n  startRotationZ = new ParticleCompositeCurve(0);\n  /** Makes some particles spin in the opposite direction. */\n  flipRotation = 0;\n\n  /** The mode of start color */\n  @deepClone\n  startColor = new ParticleCompositeGradient(new Color(1, 1, 1, 1));\n  /** A scale that this Particle Generator applies to gravity, defined by Physics.gravity. */\n  /** Override the default playback speed of the Particle Generator. */\n  simulationSpeed = 1.0;\n  /** Control how the Particle Generator applies its Transform component to the particles it emits. */\n  scalingMode = ParticleScaleMode.Local;\n  /** If set to true, the Particle Generator automatically begins to play on startup. */\n  playOnEnabled = true;\n\n  /** @internal */\n  @ignoreClone\n  _maxParticleBuffer = 1000;\n  /** @internal */\n  @ignoreClone\n  readonly _startDelayRand = new Rand(0, ParticleRandomSubSeeds.StartDelay);\n  /** @internal */\n  @ignoreClone\n  readonly _startSpeedRand = new Rand(0, ParticleRandomSubSeeds.StartSpeed);\n  /** @internal */\n  @ignoreClone\n  readonly _startLifeTimeRand = new Rand(0, ParticleRandomSubSeeds.StartLifetime);\n  /** @internal */\n  @ignoreClone\n  readonly _startColorRand = new Rand(0, ParticleRandomSubSeeds.StartColor);\n  /** @internal */\n  @ignoreClone\n  readonly _startSizeRand = new Rand(0, ParticleRandomSubSeeds.StartSize);\n  /** @internal */\n  @ignoreClone\n  readonly _startRotationRand = new Rand(0, ParticleRandomSubSeeds.StartRotation);\n\n  @ignoreClone\n  readonly _gravityModifierRand = new Rand(0, ParticleRandomSubSeeds.GravityModifier);\n\n  @deepClone\n  private _startLifetime: ParticleCompositeCurve;\n  @deepClone\n  private _startSpeed: ParticleCompositeCurve;\n  private _startSize3D = false;\n  @deepClone\n  private _startSizeX: ParticleCompositeCurve;\n  @deepClone\n  private _startSizeY: ParticleCompositeCurve;\n  @deepClone\n  private _startSizeZ: ParticleCompositeCurve;\n  @deepClone\n  private _gravityModifier: ParticleCompositeCurve;\n  private _simulationSpace = ParticleSimulationSpace.Local;\n  @ignoreClone\n  private _generator: ParticleGenerator;\n\n  /**\n   * The initial lifetime of particles when emitted.\n   */\n  get startLifetime(): ParticleCompositeCurve {\n    return this._startLifetime;\n  }\n\n  set startLifetime(value: ParticleCompositeCurve) {\n    const lastValue = this._startLifetime;\n    if (value !== lastValue) {\n      this._startLifetime = value;\n      this._onCompositeCurveChange(lastValue, value);\n    }\n  }\n\n  /**\n   * The initial speed of particles when the Particle Generator first spawns them.\n   */\n  get startSpeed(): ParticleCompositeCurve {\n    return this._startSpeed;\n  }\n\n  set startSpeed(value: ParticleCompositeCurve) {\n    const lastValue = this._startSpeed;\n    if (value !== lastValue) {\n      this._startSpeed = value;\n      this._onCompositeCurveChange(lastValue, value);\n    }\n  }\n\n  /**\n   * A flag to enable specifying particle size individually for each axis.\n   */\n  get startSize3D(): boolean {\n    return this._startSize3D;\n  }\n\n  set startSize3D(value: boolean) {\n    if (value !== this._startSize3D) {\n      this._startSize3D = value;\n      this._generator._renderer._onGeneratorParamsChanged();\n    }\n  }\n\n  /**\n   * The initial size of particles along the x-axis when the Particle Generator first spawns them.\n   */\n  get startSizeX(): ParticleCompositeCurve {\n    return this._startSizeX;\n  }\n\n  set startSizeX(value: ParticleCompositeCurve) {\n    const lastValue = this._startSizeX;\n    if (value !== lastValue) {\n      this._startSizeX = value;\n      this._onCompositeCurveChange(lastValue, value);\n    }\n  }\n\n  /**\n   * The initial size of particles along the y-axis when the Particle Generator first spawns them.\n   */\n  get startSizeY(): ParticleCompositeCurve {\n    return this._startSizeY;\n  }\n\n  set startSizeY(value: ParticleCompositeCurve) {\n    const lastValue = this._startSizeY;\n    if (value !== lastValue) {\n      this._startSizeY = value;\n      this._onCompositeCurveChange(lastValue, value);\n    }\n  }\n\n  /**\n   * The initial size of particles along the z-axis when the Particle Generator first spawns them.\n   */\n  get startSizeZ(): ParticleCompositeCurve {\n    return this._startSizeZ;\n  }\n\n  set startSizeZ(value: ParticleCompositeCurve) {\n    const lastValue = this._startSizeZ;\n    if (value !== lastValue) {\n      this._startSizeZ = value;\n      this._onCompositeCurveChange(lastValue, value);\n    }\n  }\n\n  /**\n   * A scale that this Particle Generator applies to gravity, defined by Physics.gravity.\n   */\n  get gravityModifier(): ParticleCompositeCurve {\n    return this._gravityModifier;\n  }\n\n  set gravityModifier(value: ParticleCompositeCurve) {\n    const lastValue = this._gravityModifier;\n    if (value !== lastValue) {\n      this._gravityModifier = value;\n      this._onCompositeCurveChange(lastValue, value);\n    }\n  }\n\n  /**\n   * This selects the space in which to simulate particles. It can be either world or local space.\n   */\n  get simulationSpace(): ParticleSimulationSpace {\n    return this._simulationSpace;\n  }\n\n  set simulationSpace(value: ParticleSimulationSpace) {\n    if (value !== this._simulationSpace) {\n      this._simulationSpace = value;\n\n      const generator = this._generator;\n      generator._renderer._onTransformChanged(TransformModifyFlags.WorldMatrix);\n\n      if (value === ParticleSimulationSpace.Local) {\n        generator._freeBoundsArray();\n      }\n    }\n  }\n\n  /**\n   * Max particles count.\n   */\n  get maxParticles(): number {\n    return this._maxParticleBuffer - 1;\n  }\n\n  set maxParticles(value: number) {\n    this._maxParticleBuffer = value + 1;\n  }\n\n  /**\n   * The initial size of particles when the Particle Generator first spawns them.\n   */\n  get startSize(): ParticleCompositeCurve {\n    return this.startSizeX;\n  }\n\n  set startSize(value: ParticleCompositeCurve) {\n    this.startSizeX = value;\n  }\n\n  /**\n   * @internal\n   */\n  constructor(generator: ParticleGenerator) {\n    this._generator = generator;\n\n    this.startLifetime = new ParticleCompositeCurve(5);\n    this.startSpeed = new ParticleCompositeCurve(5);\n    this.startSizeX = new ParticleCompositeCurve(1);\n    this.startSizeY = new ParticleCompositeCurve(1);\n    this.startSizeZ = new ParticleCompositeCurve(1);\n    this.gravityModifier = new ParticleCompositeCurve(0);\n  }\n\n  /**\n   * @internal\n   */\n  _resetRandomSeed(randomSeed: number): void {\n    this._startSpeedRand.reset(randomSeed, ParticleRandomSubSeeds.StartSpeed);\n    this._startLifeTimeRand.reset(randomSeed, ParticleRandomSubSeeds.StartLifetime);\n    this._startColorRand.reset(randomSeed, ParticleRandomSubSeeds.StartColor);\n    this._startSizeRand.reset(randomSeed, ParticleRandomSubSeeds.StartSize);\n    this._startRotationRand.reset(randomSeed, ParticleRandomSubSeeds.StartRotation);\n  }\n\n  /**\n   * @internal\n   */\n  _getPositionScale(): Vector3 {\n    const transform = this._generator._renderer.entity.transform;\n    switch (this.scalingMode) {\n      case ParticleScaleMode.Hierarchy:\n      case ParticleScaleMode.World:\n        return transform.lossyWorldScale;\n      case ParticleScaleMode.Local:\n        return transform.scale;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _updateShaderData(shaderData: ShaderData): void {\n    const renderer = this._generator._renderer;\n    const transform = renderer.entity.transform;\n\n    switch (this.simulationSpace) {\n      case ParticleSimulationSpace.Local:\n        shaderData.setVector3(MainModule._worldPosition, transform.worldPosition);\n        const worldRotation = transform.worldRotationQuaternion;\n        const worldRotationV4 = this._tempVector40.copyFrom(worldRotation); // Maybe shaderData should support Quaternion\n        shaderData.setVector4(MainModule._worldRotation, worldRotationV4);\n        break;\n      case ParticleSimulationSpace.World:\n        break;\n      default:\n        throw new Error(\"ParticleRenderer: SimulationSpace value is invalid.\");\n    }\n\n    switch (this.scalingMode) {\n      case ParticleScaleMode.Hierarchy:\n        var scale = transform.lossyWorldScale;\n        shaderData.setVector3(MainModule._positionScale, scale);\n        shaderData.setVector3(MainModule._sizeScale, scale);\n        break;\n      case ParticleScaleMode.Local:\n        var scale = transform.scale;\n        shaderData.setVector3(MainModule._positionScale, scale);\n        shaderData.setVector3(MainModule._sizeScale, scale);\n        break;\n      case ParticleScaleMode.World:\n        shaderData.setVector3(MainModule._positionScale, transform.lossyWorldScale);\n        shaderData.setVector3(MainModule._sizeScale, MainModule._vector3One);\n        break;\n    }\n\n    shaderData.setVector3(MainModule._gravity, renderer.scene.physics.gravity);\n    shaderData.setInt(MainModule._simulationSpace, this.simulationSpace);\n    shaderData.setFloat(MainModule._startRotation3D, +this.startRotation3D);\n    shaderData.setInt(MainModule._scaleMode, this.scalingMode);\n  }\n\n  /**\n   * @internal\n   */\n  _cloneTo(target: MainModule): void {\n    target.maxParticles = this.maxParticles;\n\n    if (target._simulationSpace === ParticleSimulationSpace.World) {\n      target._generator._generateTransformedBounds();\n    }\n  }\n\n  private _onCompositeCurveChange(lastValue: ParticleCompositeCurve, value: ParticleCompositeCurve): void {\n    const renderer = this._generator._renderer;\n    lastValue?._unRegisterOnValueChanged(renderer._onGeneratorParamsChanged);\n    value?._registerOnValueChanged(renderer._onGeneratorParamsChanged);\n    renderer._onGeneratorParamsChanged();\n  }\n}\n","import { MathUtil, Rand, Vector3 } from \"@galacean/engine-math\";\nimport { deepClone, ignoreClone } from \"../../clone/CloneManager\";\nimport { ShaderData } from \"../../shader/ShaderData\";\nimport { ShaderMacro } from \"../../shader/ShaderMacro\";\nimport { ShaderProperty } from \"../../shader/ShaderProperty\";\nimport { ParticleCurveMode } from \"../enums/ParticleCurveMode\";\nimport { ParticleRandomSubSeeds } from \"../enums/ParticleRandomSubSeeds\";\nimport { ParticleCompositeCurve } from \"./ParticleCompositeCurve\";\nimport { ParticleGeneratorModule } from \"./ParticleGeneratorModule\";\n\n/**\n * Rotate particles throughout their lifetime.\n */\nexport class RotationOverLifetimeModule extends ParticleGeneratorModule {\n  static readonly _constantModeMacro = ShaderMacro.getByName(\"RENDERER_ROL_CONSTANT_MODE\");\n  static readonly _curveModeMacro = ShaderMacro.getByName(\"RENDERER_ROL_CURVE_MODE\");\n  static readonly _isSeparateMacro = ShaderMacro.getByName(\"RENDERER_ROL_IS_SEPARATE\");\n  static readonly _isRandomTwoMacro = ShaderMacro.getByName(\"RENDERER_ROL_IS_RANDOM_TWO\");\n\n  static readonly _minConstantProperty = ShaderProperty.getByName(\"renderer_ROLMinConst\");\n  static readonly _minCurveXProperty = ShaderProperty.getByName(\"renderer_ROLMinCurveX\");\n  static readonly _minCurveYProperty = ShaderProperty.getByName(\"renderer_ROLMinCurveY\");\n  static readonly _minCurveZProperty = ShaderProperty.getByName(\"renderer_ROLMinCurveZ\");\n  static readonly _maxConstantProperty = ShaderProperty.getByName(\"renderer_ROLMaxConst\");\n  static readonly _maxCurveXProperty = ShaderProperty.getByName(\"renderer_ROLMaxCurveX\");\n  static readonly _maxCurveYProperty = ShaderProperty.getByName(\"renderer_ROLMaxCurveY\");\n  static readonly _maxCurveZProperty = ShaderProperty.getByName(\"renderer_ROLMaxCurveZ\");\n\n  /** Specifies whether the rotation is separate on each axis, when disabled, only `rotationZ` is used. */\n  separateAxes: boolean = false;\n  /** Rotation over lifetime for z axis. */\n  @deepClone\n  rotationX = new ParticleCompositeCurve(0);\n  /** Rotation over lifetime for z axis. */\n  @deepClone\n  rotationY = new ParticleCompositeCurve(0);\n  /** Rotation over lifetime for z axis. */\n  @deepClone\n  rotationZ = new ParticleCompositeCurve(45);\n\n  /** @internal */\n  @ignoreClone\n  _rotationRand = new Rand(0, ParticleRandomSubSeeds.RotationOverLifetime);\n\n  @ignoreClone\n  private _rotationMinConstant = new Vector3();\n  @ignoreClone\n  private _rotationMaxConstant = new Vector3();\n  @ignoreClone\n  private _enableSeparateMacro: ShaderMacro;\n  @ignoreClone\n  private _isCurveMacro: ShaderMacro;\n  @ignoreClone\n  private _isRandomTwoMacro: ShaderMacro;\n\n  /**\n   * @internal\n   */\n  _updateShaderData(shaderData: ShaderData): void {\n    let enableSeparateMacro = <ShaderMacro>null;\n    let isCurveMacro = <ShaderMacro>null;\n    let isRandomTwoMacro = <ShaderMacro>null;\n    if (this.enabled) {\n      const rotationX = this.rotationX;\n      const rotationY = this.rotationY;\n      const rotationZ = this.rotationZ;\n      const separateAxes = this.separateAxes;\n\n      const isRandomCurveMode = separateAxes\n        ? rotationX.mode === ParticleCurveMode.TwoCurves &&\n          rotationY.mode === ParticleCurveMode.TwoCurves &&\n          rotationZ.mode === ParticleCurveMode.TwoCurves\n        : rotationZ.mode === ParticleCurveMode.TwoCurves;\n\n      const isCurveMode =\n        isRandomCurveMode || separateAxes\n          ? rotationX.mode === ParticleCurveMode.Curve &&\n            rotationY.mode === ParticleCurveMode.Curve &&\n            rotationZ.mode === ParticleCurveMode.Curve\n          : rotationZ.mode === ParticleCurveMode.Curve;\n\n      if (isCurveMode) {\n        shaderData.setFloatArray(RotationOverLifetimeModule._maxCurveZProperty, rotationZ.curveMax._getTypeArray());\n        if (separateAxes) {\n          shaderData.setFloatArray(RotationOverLifetimeModule._maxCurveXProperty, rotationX.curveMax._getTypeArray());\n          shaderData.setFloatArray(RotationOverLifetimeModule._maxCurveYProperty, rotationY.curveMax._getTypeArray());\n        }\n        if (isRandomCurveMode) {\n          shaderData.setFloatArray(RotationOverLifetimeModule._minCurveZProperty, rotationZ.curveMin._getTypeArray());\n          if (separateAxes) {\n            shaderData.setFloatArray(RotationOverLifetimeModule._minCurveXProperty, rotationX.curveMin._getTypeArray());\n            shaderData.setFloatArray(RotationOverLifetimeModule._minCurveYProperty, rotationY.curveMin._getTypeArray());\n          }\n          isRandomTwoMacro = RotationOverLifetimeModule._isRandomTwoMacro;\n        }\n        isCurveMacro = RotationOverLifetimeModule._curveModeMacro;\n      } else {\n        const constantMax = this._rotationMaxConstant;\n        constantMax.set(\n          MathUtil.degreeToRadian(rotationX.constantMax),\n          MathUtil.degreeToRadian(rotationY.constantMax),\n          MathUtil.degreeToRadian(rotationZ.constantMax)\n        );\n        shaderData.setVector3(RotationOverLifetimeModule._maxConstantProperty, constantMax);\n\n        if (\n          separateAxes\n            ? rotationX.mode === ParticleCurveMode.TwoConstants &&\n              rotationY.mode === ParticleCurveMode.TwoConstants &&\n              rotationZ.mode === ParticleCurveMode.TwoConstants\n            : rotationZ.mode === ParticleCurveMode.TwoConstants\n        ) {\n          const constantMin = this._rotationMinConstant;\n          constantMin.set(\n            MathUtil.degreeToRadian(rotationX.constantMin),\n            MathUtil.degreeToRadian(rotationY.constantMin),\n            MathUtil.degreeToRadian(rotationZ.constantMin)\n          );\n          shaderData.setVector3(RotationOverLifetimeModule._minConstantProperty, constantMin);\n          isRandomTwoMacro = RotationOverLifetimeModule._isRandomTwoMacro;\n        }\n        isCurveMacro = RotationOverLifetimeModule._constantModeMacro;\n      }\n\n      if (separateAxes) {\n        enableSeparateMacro = RotationOverLifetimeModule._isSeparateMacro;\n      }\n    }\n    this._enableSeparateMacro = this._enableMacro(shaderData, this._enableSeparateMacro, enableSeparateMacro);\n    this._isCurveMacro = this._enableMacro(shaderData, this._isCurveMacro, isCurveMacro);\n    this._isRandomTwoMacro = this._enableMacro(shaderData, this._isRandomTwoMacro, isRandomTwoMacro);\n  }\n\n  /**\n   * @internal\n   */\n  _resetRandomSeed(seed: number): void {\n    this._rotationRand.reset(seed, ParticleRandomSubSeeds.RotationOverLifetime);\n  }\n}\n","import { UpdateFlagManager } from \"../../UpdateFlagManager\";\nimport { deepClone, ignoreClone } from \"../../clone/CloneManager\";\n\n/**\n * Particle curve.\n */\nexport class ParticleCurve {\n  @ignoreClone\n  private _updateManager = new UpdateFlagManager();\n  @deepClone\n  private _keys = new Array<CurveKey>();\n  @ignoreClone\n  private _typeArray: Float32Array;\n  private _typeArrayDirty = false;\n  @ignoreClone\n  private _updateDispatch: () => void;\n\n  /**\n   * The keys of the curve.\n   */\n  get keys(): ReadonlyArray<CurveKey> {\n    return this._keys;\n  }\n\n  /**\n   * Create a new particle curve.\n   * @param keys - The keys of the curve\n   */\n  constructor(...keys: CurveKey[]) {\n    this._updateDispatch = this._updateManager.dispatch.bind(this._updateManager);\n\n    for (let i = 0, n = keys.length; i < n; i++) {\n      const key = keys[i];\n      this.addKey(key);\n    }\n  }\n\n  /**\n   * Add an key to the curve.\n   * @param key - The key\n   */\n  addKey(key: CurveKey): void;\n\n  /**\n   * Add an key to the curve.\n   * @param time - The key time\n   * @param value - The key value\n   */\n  addKey(time: number, value: number): void;\n\n  addKey(timeOrKey: number | CurveKey, value?: number): void {\n    const keys = this._keys;\n\n    if (keys.length === 4) {\n      throw new Error(\"Curve can only have 4 keys\");\n    }\n\n    const key = typeof timeOrKey === \"number\" ? new CurveKey(timeOrKey, value) : timeOrKey;\n    this._addKey(keys, key);\n    key._registerOnValueChanged(this._updateDispatch);\n    this._updateDispatch();\n    this._typeArrayDirty = true;\n  }\n\n  /**\n   * Remove a key from the curve.\n   * @param index - The remove key index\n   */\n  removeKey(index: number): void {\n    this._keys.splice(index, 1);\n    this._typeArrayDirty = true;\n    const removeKey = this._keys[index];\n    removeKey._unRegisterOnValueChanged(this._updateDispatch);\n    this._updateDispatch();\n  }\n\n  /**\n   * Set the keys of the curve.\n   * @param keys - The keys\n   */\n  setKeys(keys: CurveKey[]): void {\n    this._keys.length = 0;\n    for (let i = 0, n = keys.length; i < n; i++) {\n      this.addKey(keys[i]);\n    }\n    this._typeArrayDirty = true;\n  }\n\n  /**\n   * @internal\n   */\n  _getTypeArray(): Float32Array {\n    const typeArray = (this._typeArray ||= new Float32Array(4 * 2));\n    if (this._typeArrayDirty) {\n      const keys = this._keys;\n      for (let i = 0, n = Math.min(keys.length, 4); i < n; i++) {\n        const offset = i * 2;\n        const key = keys[i];\n        typeArray[offset] = key.time;\n        typeArray[offset + 1] = key.value;\n      }\n      this._typeArrayDirty = false;\n    }\n    return typeArray;\n  }\n\n  /**\n   * @internal\n   */\n  _registerOnValueChanged(listener: () => void): void {\n    this._updateManager.addListener(listener);\n  }\n\n  /**\n   * @internal\n   */\n  _unRegisterOnValueChanged(listener: () => void): void {\n    this._updateManager.removeListener(listener);\n  }\n\n  private _addKey(keys: CurveKey[], key: CurveKey): void {\n    const count = keys.length;\n    const time = key.time;\n    const duration = count ? keys[count - 1].time : 0;\n    if (time >= duration) {\n      keys.push(key);\n    } else {\n      let index = count;\n      while (--index >= 0 && time < keys[index].time);\n      keys.splice(index + 1, 0, key);\n    }\n  }\n}\n\n/**\n * The key of the curve.\n */\nexport class CurveKey {\n  @ignoreClone\n  private _updateManager = new UpdateFlagManager();\n  private _time: number;\n  private _value: number;\n\n  /**\n   * The key time.\n   */\n  get time(): number {\n    return this._time;\n  }\n\n  set time(value: number) {\n    if (value !== this._time) {\n      this._time = value;\n      this._updateManager.dispatch();\n    }\n  }\n\n  /**\n   * The key value.\n   */\n  get value(): number {\n    return this._value;\n  }\n\n  set value(value: number) {\n    if (value !== this._value) {\n      this._value = value;\n      this._updateManager.dispatch();\n    }\n  }\n\n  /**\n   * Create a new key.\n   */\n  constructor(time: number, value: number) {\n    this._time = time;\n    this._value = value;\n  }\n\n  /**\n   * @internal\n   */\n  _registerOnValueChanged(listener: () => void): void {\n    this._updateManager.addListener(listener);\n  }\n\n  /**\n   * @internal\n   */\n  _unRegisterOnValueChanged(listener: () => void): void {\n    this._updateManager.removeListener(listener);\n  }\n}\n","import { deepClone, ignoreClone } from \"../../clone/CloneManager\";\nimport { ShaderData } from \"../../shader/ShaderData\";\nimport { ShaderMacro } from \"../../shader/ShaderMacro\";\nimport { ShaderProperty } from \"../../shader/ShaderProperty\";\nimport { ParticleGenerator } from \"../ParticleGenerator\";\nimport { ParticleCurveMode } from \"../enums/ParticleCurveMode\";\nimport { ParticleCompositeCurve } from \"./ParticleCompositeCurve\";\nimport { CurveKey, ParticleCurve } from \"./ParticleCurve\";\nimport { ParticleGeneratorModule } from \"./ParticleGeneratorModule\";\n\n/**\n * Size over lifetime module.\n */\nexport class SizeOverLifetimeModule extends ParticleGeneratorModule {\n  static readonly _curveModeMacro = ShaderMacro.getByName(\"RENDERER_SOL_CURVE_MODE\");\n  static readonly _isSeparateMacro = ShaderMacro.getByName(\"RENDERER_SOL_IS_SEPARATE\");\n  static readonly _isRandomTwoMacro = ShaderMacro.getByName(\"RENDERER_SOL_IS_RANDOM_TWO\");\n\n  static readonly _minCurveXProperty = ShaderProperty.getByName(\"renderer_SOLMinCurveX\");\n  static readonly _minCurveYProperty = ShaderProperty.getByName(\"renderer_SOLMinCurveY\");\n  static readonly _minCurveZProperty = ShaderProperty.getByName(\"renderer_SOLMinCurveZ\");\n  static readonly _maxCurveXProperty = ShaderProperty.getByName(\"renderer_SOLMaxCurveX\");\n  static readonly _maxCurveYProperty = ShaderProperty.getByName(\"renderer_SOLMaxCurveY\");\n  static readonly _maxCurveZProperty = ShaderProperty.getByName(\"renderer_SOLMaxCurveZ\");\n\n  private _separateAxes = false;\n  @deepClone\n  private _sizeX: ParticleCompositeCurve;\n  @deepClone\n  private _sizeY: ParticleCompositeCurve;\n  @deepClone\n  private _sizeZ: ParticleCompositeCurve;\n\n  @ignoreClone\n  private _enableSeparateMacro: ShaderMacro;\n  @ignoreClone\n  private _isCurveMacro: ShaderMacro;\n  @ignoreClone\n  private _isRandomTwoMacro: ShaderMacro;\n\n  /**\n   * Specifies whether the Size is separate on each axis.\n   */\n  set separateAxes(value: boolean) {\n    if (value !== this._separateAxes) {\n      this._separateAxes = value;\n      this._generator._renderer._onGeneratorParamsChanged();\n    }\n  }\n\n  get separateAxes(): boolean {\n    return this._separateAxes;\n  }\n\n  /**\n   * Size curve over lifetime for x axis.\n   */\n  get sizeX(): ParticleCompositeCurve {\n    return this._sizeX;\n  }\n\n  set sizeX(value: ParticleCompositeCurve) {\n    const lastValue = this._sizeX;\n    if (value !== lastValue) {\n      this._sizeX = value;\n      this._onCompositeCurveChange(lastValue, value);\n    }\n  }\n\n  /**\n   * Size curve over lifetime for y axis.\n   */\n  get sizeY(): ParticleCompositeCurve {\n    return this._sizeY;\n  }\n\n  set sizeY(value: ParticleCompositeCurve) {\n    const lastValue = this._sizeY;\n    if (value !== lastValue) {\n      this._sizeY = value;\n      this._onCompositeCurveChange(lastValue, value);\n    }\n  }\n\n  /**\n   * Size curve over lifetime for z axis.\n   */\n  get sizeZ(): ParticleCompositeCurve {\n    return this._sizeZ;\n  }\n\n  set sizeZ(value: ParticleCompositeCurve) {\n    const lastValue = this._sizeZ;\n    if (value !== lastValue) {\n      this._sizeZ = value;\n      this._onCompositeCurveChange(lastValue, value);\n    }\n  }\n\n  /**\n   * Size curve over lifetime.\n   */\n  get size(): ParticleCompositeCurve {\n    return this.sizeX;\n  }\n\n  set size(value: ParticleCompositeCurve) {\n    this.sizeX = value;\n  }\n\n  constructor(generator: ParticleGenerator) {\n    super(generator);\n\n    this.sizeX = new ParticleCompositeCurve(new ParticleCurve(new CurveKey(0, 0), new CurveKey(1, 1)));\n    this.sizeY = new ParticleCompositeCurve(new ParticleCurve(new CurveKey(0, 0), new CurveKey(1, 1)));\n    this.sizeZ = new ParticleCompositeCurve(new ParticleCurve(new CurveKey(0, 0), new CurveKey(1, 1)));\n  }\n\n  /**\n   * @internal\n   */\n  _updateShaderData(shaderData: ShaderData): void {\n    let enableSeparateMacro = <ShaderMacro>null;\n    let isCurveMacro = <ShaderMacro>null;\n    let isRandomTwoMacro = <ShaderMacro>null;\n\n    if (this.enabled) {\n      const sizeX = this.sizeX;\n      const sizeY = this.sizeY;\n      const sizeZ = this.sizeZ;\n\n      const separateAxes = this.separateAxes;\n      const isRandomCurveMode = separateAxes\n        ? sizeX.mode === ParticleCurveMode.TwoCurves &&\n          sizeY.mode === ParticleCurveMode.TwoCurves &&\n          sizeZ.mode === ParticleCurveMode.TwoCurves\n        : sizeX.mode === ParticleCurveMode.TwoCurves;\n\n      const isCurveMode =\n        isRandomCurveMode || separateAxes\n          ? sizeX.mode === ParticleCurveMode.Curve &&\n            sizeY.mode === ParticleCurveMode.Curve &&\n            sizeZ.mode === ParticleCurveMode.Curve\n          : sizeX.mode === ParticleCurveMode.Curve;\n\n      if (isCurveMode) {\n        shaderData.setFloatArray(SizeOverLifetimeModule._maxCurveXProperty, sizeX.curveMax._getTypeArray());\n        if (separateAxes) {\n          shaderData.setFloatArray(SizeOverLifetimeModule._maxCurveYProperty, sizeY.curveMax._getTypeArray());\n          shaderData.setFloatArray(SizeOverLifetimeModule._maxCurveZProperty, sizeZ.curveMax._getTypeArray());\n        }\n        if (isRandomCurveMode) {\n          shaderData.setFloatArray(SizeOverLifetimeModule._minCurveXProperty, sizeX.curveMin._getTypeArray());\n          if (separateAxes) {\n            shaderData.setFloatArray(SizeOverLifetimeModule._minCurveYProperty, sizeY.curveMin._getTypeArray());\n            shaderData.setFloatArray(SizeOverLifetimeModule._minCurveZProperty, sizeZ.curveMin._getTypeArray());\n          }\n          isRandomTwoMacro = SizeOverLifetimeModule._isRandomTwoMacro;\n        }\n        isCurveMacro = SizeOverLifetimeModule._curveModeMacro;\n      }\n\n      if (separateAxes) {\n        enableSeparateMacro = SizeOverLifetimeModule._isSeparateMacro;\n      }\n    }\n\n    this._enableSeparateMacro = this._enableMacro(shaderData, this._enableSeparateMacro, enableSeparateMacro);\n    this._isCurveMacro = this._enableMacro(shaderData, this._isCurveMacro, isCurveMacro);\n    this._isRandomTwoMacro = this._enableMacro(shaderData, this._isRandomTwoMacro, isRandomTwoMacro);\n  }\n\n  private _onCompositeCurveChange(lastValue: ParticleCompositeCurve, value: ParticleCompositeCurve): void {\n    const renderer = this._generator._renderer;\n    lastValue?._unRegisterOnValueChanged(renderer._onGeneratorParamsChanged);\n    value?._registerOnValueChanged(renderer._onGeneratorParamsChanged);\n    renderer._onGeneratorParamsChanged();\n  }\n}\n","import { Rand, Vector2, Vector3 } from \"@galacean/engine-math\";\nimport { deepClone, ignoreClone, shallowClone } from \"../../clone/CloneManager\";\nimport { ShaderData } from \"../../shader/ShaderData\";\nimport { ShaderMacro } from \"../../shader/ShaderMacro\";\nimport { ShaderProperty } from \"../../shader/ShaderProperty\";\nimport { ParticleCurveMode } from \"../enums/ParticleCurveMode\";\nimport { ParticleRandomSubSeeds } from \"../enums/ParticleRandomSubSeeds\";\nimport { ParticleCompositeCurve } from \"./ParticleCompositeCurve\";\nimport { CurveKey, ParticleCurve } from \"./ParticleCurve\";\nimport { ParticleGeneratorModule } from \"./ParticleGeneratorModule\";\n\n/**\n * Texture sheet animation module.\n */\nexport class TextureSheetAnimationModule extends ParticleGeneratorModule {\n  private static readonly _frameCurveMacro = ShaderMacro.getByName(\"RENDERER_TSA_FRAME_CURVE\");\n  private static readonly _frameRandomCurvesMacro = ShaderMacro.getByName(\"RENDERER_TSA_FRAME_RANDOM_CURVES\");\n\n  private static readonly _frameMinCurveProperty = ShaderProperty.getByName(\"renderer_TSAFrameMinCurve\");\n  private static readonly _frameMaxCurveProperty = ShaderProperty.getByName(\"renderer_TSAFrameMaxCurve\");\n\n  private static readonly _cycleCountProperty = ShaderProperty.getByName(\"renderer_TSACycles\");\n  private static readonly _tillingParamsProperty = ShaderProperty.getByName(\"renderer_TSATillingParams\");\n\n  /** Frame over time curve of the texture sheet. */\n  @deepClone\n  readonly frameOverTime = new ParticleCompositeCurve(new ParticleCurve(new CurveKey(0, 0), new CurveKey(1, 1)));\n  /** Texture sheet animation type. */\n  type = TextureSheetAnimationType.WholeSheet;\n  /** Cycle count. */\n  cycleCount = 1;\n\n  /** @internal */\n  @shallowClone\n  _tillingInfo = new Vector3(1, 1, 1); // x:subU, y:subV, z:tileCount\n  /** @internal */\n  @ignoreClone\n  _frameOverTimeRand = new Rand(0, ParticleRandomSubSeeds.TextureSheetAnimation);\n\n  @deepClone\n  private _tiling = new Vector2(1, 1);\n  @ignoreClone\n  private _frameCurveMacro: ShaderMacro;\n\n  /**\n   * Tiling of the texture sheet.\n   * */\n  get tiling(): Vector2 {\n    return this._tiling;\n  }\n\n  set tiling(value: Vector2) {\n    this._tiling = value;\n    this._tillingInfo.set(1.0 / value.x, 1.0 / value.y, value.x * value.y);\n  }\n\n  /**\n   * @internal\n   */\n  _updateShaderData(shaderData: ShaderData): void {\n    let frameMacro = <ShaderMacro>null;\n    if (this.enabled) {\n      const mode = this.frameOverTime.mode;\n      if (mode === ParticleCurveMode.Curve || mode === ParticleCurveMode.TwoCurves) {\n        const frame = this.frameOverTime;\n        shaderData.setFloatArray(TextureSheetAnimationModule._frameMaxCurveProperty, frame.curveMax._getTypeArray());\n        if (mode === ParticleCurveMode.Curve) {\n          frameMacro = TextureSheetAnimationModule._frameCurveMacro;\n        } else {\n          shaderData.setFloatArray(TextureSheetAnimationModule._frameMinCurveProperty, frame.curveMin._getTypeArray());\n          frameMacro = TextureSheetAnimationModule._frameRandomCurvesMacro;\n        }\n\n        shaderData.setFloat(TextureSheetAnimationModule._cycleCountProperty, this.cycleCount);\n        shaderData.setVector3(TextureSheetAnimationModule._tillingParamsProperty, this._tillingInfo);\n      }\n    }\n\n    this._frameCurveMacro = this._enableMacro(shaderData, this._frameCurveMacro, frameMacro);\n  }\n\n  /**\n   * @internal\n   */\n  _resetRandomSeed(randomSeed: number): void {\n    this._frameOverTimeRand.reset(randomSeed, ParticleRandomSubSeeds.TextureSheetAnimation);\n  }\n}\n\n/**\n * Texture sheet animation type.\n */\nexport enum TextureSheetAnimationType {\n  /** Animate over the whole texture sheet from left to right, top to bottom. */\n  WholeSheet,\n  /** Animate a single row in the sheet from left to right. */\n  SingleRow\n}\n","import { Rand, Vector3 } from \"@galacean/engine-math\";\nimport { deepClone, ignoreClone } from \"../../clone/CloneManager\";\nimport { ShaderMacro } from \"../../shader\";\nimport { ShaderData } from \"../../shader/ShaderData\";\nimport { ShaderProperty } from \"../../shader/ShaderProperty\";\nimport { ParticleCurveMode } from \"../enums/ParticleCurveMode\";\nimport { ParticleRandomSubSeeds } from \"../enums/ParticleRandomSubSeeds\";\nimport { ParticleSimulationSpace } from \"../enums/ParticleSimulationSpace\";\nimport { ParticleCompositeCurve } from \"./ParticleCompositeCurve\";\nimport { ParticleGeneratorModule } from \"./ParticleGeneratorModule\";\nimport { ParticleGenerator } from \"../ParticleGenerator\";\n\n/**\n * Velocity over lifetime module.\n */\nexport class VelocityOverLifetimeModule extends ParticleGeneratorModule {\n  static readonly _constantMacro = ShaderMacro.getByName(\"RENDERER_VOL_CONSTANT\");\n  static readonly _curveMacro = ShaderMacro.getByName(\"RENDERER_VOL_CURVE\");\n  static readonly _randomConstantMacro = ShaderMacro.getByName(\"RENDERER_VOL_RANDOM_CONSTANT\");\n  static readonly _randomCurveMacro = ShaderMacro.getByName(\"RENDERER_VOL_RANDOM_CURVE\");\n\n  static readonly _minConstantProperty = ShaderProperty.getByName(\"renderer_VOLMinConst\");\n  static readonly _maxConstantProperty = ShaderProperty.getByName(\"renderer_VOLMaxConst\");\n  static readonly _minGradientXProperty = ShaderProperty.getByName(\"renderer_VOLMinGradientX\");\n  static readonly _minGradientYProperty = ShaderProperty.getByName(\"renderer_VOLMinGradientY\");\n  static readonly _minGradientZProperty = ShaderProperty.getByName(\"renderer_VOLMinGradientZ\");\n  static readonly _maxGradientXProperty = ShaderProperty.getByName(\"renderer_VOLMaxGradientX\");\n  static readonly _maxGradientYProperty = ShaderProperty.getByName(\"renderer_VOLMaxGradientY\");\n  static readonly _maxGradientZProperty = ShaderProperty.getByName(\"renderer_VOLMaxGradientZ\");\n  static readonly _spaceProperty = ShaderProperty.getByName(\"renderer_VOLSpace\");\n\n  /** @internal */\n  @ignoreClone\n  _velocityRand = new Rand(0, ParticleRandomSubSeeds.VelocityOverLifetime);\n\n  @ignoreClone\n  private _velocityMinConstant = new Vector3();\n  @ignoreClone\n  private _velocityMaxConstant = new Vector3();\n  @ignoreClone\n  private _velocityMacro: ShaderMacro;\n\n  @deepClone\n  private _velocityX: ParticleCompositeCurve;\n  @deepClone\n  private _velocityY: ParticleCompositeCurve;\n  @deepClone\n  private _velocityZ: ParticleCompositeCurve;\n  private _space = ParticleSimulationSpace.Local;\n\n  /**\n   * Velocity over lifetime for x axis.\n   */\n  get velocityX(): ParticleCompositeCurve {\n    return this._velocityX;\n  }\n\n  set velocityX(value: ParticleCompositeCurve) {\n    const lastValue = this._velocityX;\n    if (value !== lastValue) {\n      this._velocityX = value;\n      this._onCompositeCurveChange(lastValue, value);\n    }\n  }\n\n  /**\n   * Velocity over lifetime for y axis.\n   */\n  get velocityY(): ParticleCompositeCurve {\n    return this._velocityY;\n  }\n\n  set velocityY(value: ParticleCompositeCurve) {\n    const lastValue = this._velocityY;\n    if (value !== lastValue) {\n      this._velocityY = value;\n      this._onCompositeCurveChange(lastValue, value);\n    }\n  }\n\n  /**\n   * Velocity over lifetime for z axis.\n   */\n  get velocityZ(): ParticleCompositeCurve {\n    return this._velocityZ;\n  }\n\n  set velocityZ(value: ParticleCompositeCurve) {\n    const lastValue = this._velocityZ;\n    if (value !== lastValue) {\n      this._velocityZ = value;\n      this._onCompositeCurveChange(lastValue, value);\n    }\n  }\n\n  /**\n   * Velocity space.\n   */\n  get space(): ParticleSimulationSpace {\n    return this._space;\n  }\n\n  set space(value: ParticleSimulationSpace) {\n    if (value !== this._space) {\n      this._space = value;\n      this._generator._renderer._onGeneratorParamsChanged();\n    }\n  }\n\n  override get enabled(): boolean {\n    return this._enabled;\n  }\n\n  override set enabled(value: boolean) {\n    if (value !== this._enabled) {\n      this._enabled = value;\n      this._generator._renderer._onGeneratorParamsChanged();\n    }\n  }\n\n  constructor(generator: ParticleGenerator) {\n    super(generator);\n\n    this.velocityX = new ParticleCompositeCurve(0);\n    this.velocityY = new ParticleCompositeCurve(0);\n    this.velocityZ = new ParticleCompositeCurve(0);\n  }\n\n  /**\n   * @internal\n   */\n  _updateShaderData(shaderData: ShaderData): void {\n    let velocityMacro = <ShaderMacro>null;\n    if (this.enabled) {\n      const velocityX = this.velocityX;\n      const velocityY = this.velocityY;\n      const velocityZ = this.velocityZ;\n\n      const isRandomCurveMode =\n        velocityX.mode === ParticleCurveMode.TwoCurves &&\n        velocityY.mode === ParticleCurveMode.TwoCurves &&\n        velocityZ.mode === ParticleCurveMode.TwoCurves;\n\n      if (\n        isRandomCurveMode ||\n        (velocityX.mode === ParticleCurveMode.Curve &&\n          velocityY.mode === ParticleCurveMode.Curve &&\n          velocityZ.mode === ParticleCurveMode.Curve)\n      ) {\n        shaderData.setFloatArray(VelocityOverLifetimeModule._maxGradientXProperty, velocityX.curveMax._getTypeArray());\n        shaderData.setFloatArray(VelocityOverLifetimeModule._maxGradientYProperty, velocityY.curveMax._getTypeArray());\n        shaderData.setFloatArray(VelocityOverLifetimeModule._maxGradientZProperty, velocityZ.curveMax._getTypeArray());\n        if (isRandomCurveMode) {\n          shaderData.setFloatArray(\n            VelocityOverLifetimeModule._minGradientXProperty,\n            velocityX.curveMin._getTypeArray()\n          );\n          shaderData.setFloatArray(\n            VelocityOverLifetimeModule._minGradientYProperty,\n            velocityY.curveMin._getTypeArray()\n          );\n          shaderData.setFloatArray(\n            VelocityOverLifetimeModule._minGradientZProperty,\n            velocityZ.curveMin._getTypeArray()\n          );\n          velocityMacro = VelocityOverLifetimeModule._randomCurveMacro;\n        } else {\n          velocityMacro = VelocityOverLifetimeModule._curveMacro;\n        }\n      } else {\n        const constantMax = this._velocityMaxConstant;\n        constantMax.set(velocityX.constantMax, velocityY.constantMax, velocityZ.constantMax);\n        shaderData.setVector3(VelocityOverLifetimeModule._maxConstantProperty, constantMax);\n        if (\n          velocityX.mode === ParticleCurveMode.TwoConstants &&\n          velocityY.mode === ParticleCurveMode.TwoConstants &&\n          velocityZ.mode === ParticleCurveMode.TwoConstants\n        ) {\n          const constantMin = this._velocityMinConstant;\n          constantMin.set(velocityX.constantMin, velocityY.constantMin, velocityZ.constantMin);\n          shaderData.setVector3(VelocityOverLifetimeModule._minConstantProperty, constantMin);\n          velocityMacro = VelocityOverLifetimeModule._randomConstantMacro;\n        } else {\n          velocityMacro = VelocityOverLifetimeModule._constantMacro;\n        }\n      }\n\n      shaderData.setInt(VelocityOverLifetimeModule._spaceProperty, this.space);\n    }\n    this._velocityMacro = this._enableMacro(shaderData, this._velocityMacro, velocityMacro);\n  }\n\n  /**\n   * @internal\n   */\n  _resetRandomSeed(seed: number): void {\n    this._velocityRand.reset(seed, ParticleRandomSubSeeds.VelocityOverLifetime);\n  }\n\n  private _onCompositeCurveChange(lastValue: ParticleCompositeCurve, value: ParticleCompositeCurve): void {\n    const renderer = this._generator._renderer;\n    lastValue?._unRegisterOnValueChanged(renderer._onGeneratorParamsChanged);\n    value?._registerOnValueChanged(renderer._onGeneratorParamsChanged);\n    renderer._onGeneratorParamsChanged();\n  }\n}\n","import { BoundingBox, Color, MathUtil, Matrix, Quaternion, Vector2, Vector3 } from \"@galacean/engine-math\";\nimport { Transform } from \"../Transform\";\nimport { deepClone, ignoreClone } from \"../clone/CloneManager\";\nimport { ColorSpace } from \"../enums/ColorSpace\";\nimport { Primitive } from \"../graphic/Primitive\";\nimport { SubMesh } from \"../graphic/SubMesh\";\nimport { SubPrimitive } from \"../graphic/SubPrimitive\";\nimport { VertexBufferBinding } from \"../graphic/VertexBufferBinding\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { BufferBindFlag } from \"../graphic/enums/BufferBindFlag\";\nimport { BufferUsage } from \"../graphic/enums/BufferUsage\";\nimport { MeshTopology } from \"../graphic/enums/MeshTopology\";\nimport { SetDataOptions } from \"../graphic/enums/SetDataOptions\";\nimport { VertexAttribute } from \"../mesh\";\nimport { ShaderData } from \"../shader\";\nimport { Buffer } from \"./../graphic/Buffer\";\nimport { ParticleBufferUtils } from \"./ParticleBufferUtils\";\nimport { ParticleRenderer, ParticleUpdateFlags } from \"./ParticleRenderer\";\nimport { ParticleCurveMode } from \"./enums/ParticleCurveMode\";\nimport { ParticleGradientMode } from \"./enums/ParticleGradientMode\";\nimport { ParticleRenderMode } from \"./enums/ParticleRenderMode\";\nimport { ParticleSimulationSpace } from \"./enums/ParticleSimulationSpace\";\nimport { ParticleStopMode } from \"./enums/ParticleStopMode\";\nimport { ColorOverLifetimeModule } from \"./modules/ColorOverLifetimeModule\";\nimport { EmissionModule } from \"./modules/EmissionModule\";\nimport { MainModule } from \"./modules/MainModule\";\nimport { ParticleCompositeCurve } from \"./modules/ParticleCompositeCurve\";\nimport { RotationOverLifetimeModule } from \"./modules/RotationOverLifetimeModule\";\nimport { SizeOverLifetimeModule } from \"./modules/SizeOverLifetimeModule\";\nimport { TextureSheetAnimationModule } from \"./modules/TextureSheetAnimationModule\";\nimport { VelocityOverLifetimeModule } from \"./modules/VelocityOverLifetimeModule\";\n\n/**\n * Particle Generator.\n */\nexport class ParticleGenerator {\n  private static _tempVector20 = new Vector2();\n  private static _tempVector21 = new Vector2();\n  private static _tempVector22 = new Vector2();\n  private static _tempVector30 = new Vector3();\n  private static _tempVector31 = new Vector3();\n  private static _tempMat = new Matrix();\n  private static _tempColor0 = new Color();\n  private static _tempParticleRenderers = new Array<ParticleRenderer>();\n\n  private static readonly _particleIncreaseCount = 128;\n  private static readonly _transformedBoundsIncreaseCount = 16;\n\n  /** Use auto random seed. */\n  useAutoRandomSeed = true;\n\n  /** Main module. */\n  @deepClone\n  readonly main: MainModule;\n  /** Emission module. */\n  @deepClone\n  readonly emission = new EmissionModule(this);\n  /** Velocity over lifetime module. */\n  @deepClone\n  readonly velocityOverLifetime: VelocityOverLifetimeModule;\n  /** Size over lifetime module. */\n  @deepClone\n  readonly sizeOverLifetime: SizeOverLifetimeModule;\n  /** Rotation over lifetime module. */\n  @deepClone\n  readonly rotationOverLifetime = new RotationOverLifetimeModule(this);\n  /** Color over lifetime module. */\n  @deepClone\n  readonly colorOverLifetime = new ColorOverLifetimeModule(this);\n  /** Texture sheet animation module. */\n  @deepClone\n  readonly textureSheetAnimation = new TextureSheetAnimationModule(this);\n\n  /** @internal */\n  _currentParticleCount = 0;\n  /** @internal */\n  @ignoreClone\n  _playTime = 0;\n\n  /** @internal */\n  @ignoreClone\n  _firstNewElement = 0;\n  /** @internal */\n  @ignoreClone\n  _firstActiveElement = 0;\n  /** @internal */\n  @ignoreClone\n  _firstFreeElement = 0;\n  /** @internal */\n  @ignoreClone\n  _firstRetiredElement = 0;\n  /** @internal */\n  @ignoreClone\n  _primitive: Primitive;\n  /** @internal */\n  @ignoreClone\n  _vertexBufferBindings = new Array<VertexBufferBinding>();\n  /** @internal */\n  @ignoreClone\n  _subPrimitive = new SubMesh(0, 0, MeshTopology.Triangles);\n  /** @internal */\n  @ignoreClone\n  readonly _renderer: ParticleRenderer;\n\n  @ignoreClone\n  private _isPlaying = false;\n  @ignoreClone\n  private _instanceBufferResized = false;\n  @ignoreClone\n  private _waitProcessRetiredElementCount = 0;\n  @ignoreClone\n  private _instanceVertexBufferBinding: VertexBufferBinding;\n  @ignoreClone\n  private _instanceVertices: Float32Array;\n  private _randomSeed = 0;\n  @ignoreClone\n  private _transformedBoundsArray: Float32Array;\n  @ignoreClone\n  private _transformedBoundsCount = 0;\n  @ignoreClone\n  private _firstActiveTransformedBoundingBox = 0;\n  @ignoreClone\n  private _firstFreeTransformedBoundingBox = 0;\n  @ignoreClone\n  private _playStartDelay = 0;\n\n  /**\n   * Whether the particle generator is contain alive or is still creating particles.\n   */\n  get isAlive(): boolean {\n    if (this._isPlaying) {\n      return true;\n    }\n\n    return this._firstActiveElement !== this._firstFreeElement;\n  }\n\n  /**\n   * Random seed.\n   *\n   * @remarks\n   * If `useAutoRandomSeed` is true, this value will be random changed when play.\n   * If you set this value custom, `useAutoRandomSeed` will be false.\n   */\n  get randomSeed(): number {\n    return this._randomSeed;\n  }\n\n  set randomSeed(value: number) {\n    this._resetGlobalRandSeed(value);\n    this.useAutoRandomSeed = false;\n  }\n\n  /**\n   * @internal\n   */\n  constructor(renderer: ParticleRenderer) {\n    this._renderer = renderer;\n    const subPrimitive = new SubPrimitive();\n    subPrimitive.start = 0;\n\n    this._primitive = new Primitive(renderer.engine);\n    this._reorganizeGeometryBuffers();\n    this._resizeInstanceBuffer(true, ParticleGenerator._particleIncreaseCount);\n\n    this.main = new MainModule(this);\n    this.velocityOverLifetime = new VelocityOverLifetimeModule(this);\n    this.sizeOverLifetime = new SizeOverLifetimeModule(this);\n\n    this.emission.enabled = true;\n  }\n\n  /**\n   * Start emitting particles.\n   * @param withChildren - Whether to start the particle generator of the child entity\n   */\n  play(withChildren: boolean = true): void {\n    if (withChildren) {\n      const particleRenderers = this._renderer.entity.getComponentsIncludeChildren(\n        ParticleRenderer,\n        ParticleGenerator._tempParticleRenderers\n      );\n      for (let i = 0, n = particleRenderers.length; i < n; i++) {\n        const particleRenderer = particleRenderers[i];\n        particleRenderer.generator.play(false);\n      }\n    } else {\n      this._isPlaying = true;\n      if (this.useAutoRandomSeed) {\n        this._resetGlobalRandSeed(Math.floor(Math.random() * 0xffffffff)); // 2^32 - 1\n      }\n\n      this._playStartDelay = this.main.startDelay.evaluate(undefined, this.main._startDelayRand.random());\n    }\n  }\n\n  /**\n   * Stop emitting particles.\n   * @param withChildren - Whether to stop the particle generator of the child entity\n   * @param stopMode - Stop mode\n   */\n  stop(withChildren: boolean = true, stopMode: ParticleStopMode = ParticleStopMode.StopEmitting): void {\n    if (withChildren) {\n      const particleRenderers = this._renderer.entity.getComponentsIncludeChildren(\n        ParticleRenderer,\n        ParticleGenerator._tempParticleRenderers\n      );\n      for (let i = 0, n = particleRenderers.length; i < n; i++) {\n        const particleRenderer = particleRenderers[i];\n        particleRenderer.generator.stop(false, stopMode);\n      }\n    } else {\n      this._isPlaying = false;\n      if (stopMode === ParticleStopMode.StopEmittingAndClear) {\n        // Move the pointer to free immediately\n        const firstFreeElement = this._firstFreeElement;\n        this._firstRetiredElement = firstFreeElement;\n        this._firstActiveElement = firstFreeElement;\n        this._firstNewElement = firstFreeElement;\n        this._playTime = 0;\n\n        this._firstActiveTransformedBoundingBox = this._firstFreeTransformedBoundingBox;\n\n        this.emission._reset();\n      }\n    }\n  }\n\n  /**\n   * Manually emit certain number of particles immediately.\n   * @param count - Number of particles to emit\n   */\n  emit(count: number): void {\n    this._emit(this._playTime, count);\n  }\n\n  /**\n   * @internal\n   */\n  _emit(time: number, count: number): void {\n    if (this.emission.enabled) {\n      // Wait the existing particles to be retired\n      if (this.main._maxParticleBuffer < this._currentParticleCount) {\n        return;\n      }\n      const position = ParticleGenerator._tempVector30;\n      const direction = ParticleGenerator._tempVector31;\n      const transform = this._renderer.entity.transform;\n      const shape = this.emission.shape;\n      for (let i = 0; i < count; i++) {\n        if (shape?.enabled) {\n          shape._generatePositionAndDirection(this.emission._shapeRand, time, position, direction);\n          const positionScale = this.main._getPositionScale();\n          position.multiply(positionScale);\n          direction.normalize().multiply(positionScale);\n        } else {\n          position.set(0, 0, 0);\n          direction.set(0, 0, -1);\n        }\n        this._addNewParticle(position, direction, transform, time);\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _update(elapsedTime: number): void {\n    const lastAlive = this.isAlive;\n    const { main, emission } = this;\n    const duration = main.duration;\n    const lastPlayTime = this._playTime;\n    const deltaTime = elapsedTime * main.simulationSpeed;\n\n    // Process start delay time\n    if (this._playStartDelay > 0) {\n      const remainingDelay = (this._playStartDelay -= deltaTime);\n      if (remainingDelay < 0) {\n        this._playTime -= remainingDelay;\n        this._playStartDelay = 0;\n      } else {\n        return;\n      }\n    }\n\n    this._playTime += deltaTime;\n\n    this._retireActiveParticles();\n    this._freeRetiredParticles();\n\n    if (main.simulationSpace === ParticleSimulationSpace.World) {\n      this._retireTransformedBounds();\n    }\n\n    if (emission.enabled && this._isPlaying) {\n      // If maxParticles is changed dynamically, currentParticleCount may be greater than maxParticles\n      if (this._currentParticleCount > main._maxParticleBuffer) {\n        const notRetireParticleCount = this._getNotRetiredParticleCount();\n        if (notRetireParticleCount < main._maxParticleBuffer) {\n          this._resizeInstanceBuffer(false);\n        }\n      }\n      emission._emit(lastPlayTime, this._playTime);\n      if (!main.isLoop && this._playTime > duration) {\n        this._isPlaying = false;\n      }\n    }\n\n    if (this.isAlive) {\n      if (main.simulationSpace === ParticleSimulationSpace.World) {\n        this._generateTransformedBounds();\n      }\n    } else {\n      // Reset play time when is not playing and no active particles to avoid potential precision problems in GPU\n      const discardTime = Math.min(emission._frameRateTime, Math.floor(this._playTime / duration) * duration);\n      this._playTime -= discardTime;\n      emission._frameRateTime -= discardTime;\n    }\n\n    if (this.isAlive !== lastAlive) {\n      this._renderer._onWorldVolumeChanged();\n    }\n\n    // Add new particles to vertex buffer when has wait process retired element or new particle\n    //\n    // Another choice is just add new particles to vertex buffer and render all particles ignore the retired particle in shader, especially billboards\n    // But webgl don't support map buffer range, so this choice don't have performance advantage even less set data to GPU\n    if (\n      this._firstNewElement != this._firstFreeElement ||\n      this._waitProcessRetiredElementCount > 0 ||\n      this._instanceBufferResized ||\n      this._instanceVertexBufferBinding._buffer.isContentLost\n    ) {\n      this._addActiveParticlesToVertexBuffer();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _reorganizeGeometryBuffers(): void {\n    const renderer = this._renderer;\n    const particleUtils = renderer.engine._particleBufferUtils;\n    const primitive = this._primitive;\n    const vertexBufferBindings = this._vertexBufferBindings;\n\n    primitive.clearVertexElements();\n    vertexBufferBindings.length = 0;\n\n    if (renderer.renderMode === ParticleRenderMode.Mesh) {\n      const mesh = renderer.mesh;\n      if (!mesh) {\n        return;\n      }\n\n      const positionElement = mesh.getVertexElement(VertexAttribute.Position);\n      const colorElement = mesh.getVertexElement(VertexAttribute.Color);\n      const uvElement = mesh.getVertexElement(VertexAttribute.UV);\n      const positionBufferBinding = positionElement ? mesh.vertexBufferBindings[positionElement.bindingIndex] : null;\n      const colorBufferBinding = colorElement ? mesh.vertexBufferBindings[colorElement.bindingIndex] : null;\n      const uvBufferBinding = uvElement ? mesh.vertexBufferBindings[uvElement.bindingIndex] : null;\n\n      if (positionBufferBinding) {\n        const index = this._addVertexBufferBindingsFilterDuplicate(positionBufferBinding, vertexBufferBindings);\n        primitive.addVertexElement(\n          new VertexElement(VertexAttribute.Position, positionElement.offset, positionElement.format, index)\n        );\n      }\n\n      if (colorBufferBinding) {\n        const index = this._addVertexBufferBindingsFilterDuplicate(colorBufferBinding, vertexBufferBindings);\n        primitive.addVertexElement(\n          new VertexElement(VertexAttribute.Color, colorElement.offset, colorElement.format, index)\n        );\n      }\n\n      if (uvBufferBinding) {\n        const index = this._addVertexBufferBindingsFilterDuplicate(uvBufferBinding, vertexBufferBindings);\n        primitive.addVertexElement(new VertexElement(VertexAttribute.UV, uvElement.offset, uvElement.format, index));\n      }\n\n      // @todo: multi subMesh or not support\n      const indexBufferBinding = mesh._primitive.indexBufferBinding;\n      primitive.setIndexBufferBinding(indexBufferBinding);\n      this._subPrimitive.count = indexBufferBinding.buffer.byteLength / primitive._glIndexByteCount;\n    } else {\n      primitive.addVertexElement(particleUtils.billboardVertexElement);\n      vertexBufferBindings.push(particleUtils.billboardVertexBufferBinding);\n      primitive.setIndexBufferBinding(particleUtils.billboardIndexBufferBinding);\n      this._subPrimitive.count = ParticleBufferUtils.billboardIndexCount;\n    }\n    primitive.setVertexBufferBindings(vertexBufferBindings);\n\n    const instanceVertexElements = particleUtils.instanceVertexElements;\n    const bindingIndex = vertexBufferBindings.length;\n    for (let i = 0, n = instanceVertexElements.length; i < n; i++) {\n      const element = instanceVertexElements[i];\n      primitive.addVertexElement(\n        new VertexElement(element.attribute, element.offset, element.format, bindingIndex, element.instanceStepRate)\n      );\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _resizeInstanceBuffer(isIncrease: boolean, increaseCount?: number): void {\n    this._instanceVertexBufferBinding?.buffer.destroy();\n\n    const stride = ParticleBufferUtils.instanceVertexStride;\n    const newParticleCount = isIncrease ? this._currentParticleCount + increaseCount : this.main._maxParticleBuffer;\n    const newByteLength = stride * newParticleCount;\n    const engine = this._renderer.engine;\n    const vertexInstanceBuffer = new Buffer(\n      engine,\n      BufferBindFlag.VertexBuffer,\n      newByteLength,\n      BufferUsage.Dynamic,\n      false\n    );\n    vertexInstanceBuffer.isGCIgnored = true;\n\n    const vertexBufferBindings = this._primitive.vertexBufferBindings;\n    const vertexBufferBinding = new VertexBufferBinding(vertexInstanceBuffer, stride);\n\n    const instanceVertices = new Float32Array(newByteLength / 4);\n\n    const lastInstanceVertices = this._instanceVertices;\n    if (lastInstanceVertices) {\n      const floatStride = ParticleBufferUtils.instanceVertexFloatStride;\n\n      const firstFreeElement = this._firstFreeElement;\n      const firstRetiredElement = this._firstRetiredElement;\n      if (isIncrease) {\n        instanceVertices.set(new Float32Array(lastInstanceVertices.buffer, 0, firstFreeElement * floatStride));\n\n        const nextFreeElement = firstFreeElement + 1;\n        const freeEndOffset = (nextFreeElement + increaseCount) * floatStride;\n        instanceVertices.set(\n          new Float32Array(lastInstanceVertices.buffer, nextFreeElement * floatStride * 4),\n          freeEndOffset\n        );\n\n        // Maintain expanded pointers\n        this._firstNewElement > firstFreeElement && (this._firstNewElement += increaseCount);\n        this._firstActiveElement > firstFreeElement && (this._firstActiveElement += increaseCount);\n        firstRetiredElement > firstFreeElement && (this._firstRetiredElement += increaseCount);\n      } else {\n        let migrateCount: number, bufferOffset: number;\n        if (firstRetiredElement <= firstFreeElement) {\n          migrateCount = firstFreeElement - firstRetiredElement;\n          bufferOffset = 0;\n\n          // Maintain expanded pointers\n          this._firstFreeElement -= firstRetiredElement;\n          this._firstNewElement -= firstRetiredElement;\n          this._firstActiveElement -= firstRetiredElement;\n          this._firstRetiredElement = 0;\n        } else {\n          migrateCount = this._currentParticleCount - firstRetiredElement;\n          bufferOffset = firstFreeElement;\n\n          // Maintain expanded pointers\n          this._firstNewElement > firstFreeElement && (this._firstNewElement -= firstFreeElement);\n          this._firstActiveElement > firstFreeElement && (this._firstActiveElement -= firstFreeElement);\n          firstRetiredElement > firstFreeElement && (this._firstRetiredElement -= firstFreeElement);\n        }\n\n        instanceVertices.set(\n          new Float32Array(\n            lastInstanceVertices.buffer,\n            firstRetiredElement * floatStride * 4,\n            migrateCount * floatStride\n          ),\n          bufferOffset * floatStride\n        );\n      }\n\n      this._instanceBufferResized = true;\n    }\n    // Instance buffer always at last\n    this._primitive.setVertexBufferBinding(\n      lastInstanceVertices ? vertexBufferBindings.length - 1 : vertexBufferBindings.length,\n      vertexBufferBinding\n    );\n\n    this._instanceVertices = instanceVertices;\n    this._instanceVertexBufferBinding = vertexBufferBinding;\n    this._currentParticleCount = newParticleCount;\n  }\n\n  /**\n   * @internal\n   */\n  _updateShaderData(shaderData: ShaderData): void {\n    this.main._updateShaderData(shaderData);\n    this.velocityOverLifetime._updateShaderData(shaderData);\n    this.textureSheetAnimation._updateShaderData(shaderData);\n    this.sizeOverLifetime._updateShaderData(shaderData);\n    this.rotationOverLifetime._updateShaderData(shaderData);\n    this.colorOverLifetime._updateShaderData(shaderData);\n  }\n\n  /**\n   * @internal\n   */\n  _resetGlobalRandSeed(seed: number): void {\n    this._randomSeed = seed;\n    this.main._resetRandomSeed(seed);\n    this.emission._resetRandomSeed(seed);\n    this.textureSheetAnimation._resetRandomSeed(seed);\n    this.velocityOverLifetime._resetRandomSeed(seed);\n    this.rotationOverLifetime._resetRandomSeed(seed);\n    this.colorOverLifetime._resetRandomSeed(seed);\n  }\n\n  /**\n   * @internal\n   */\n  _getAliveParticleCount(): number {\n    if (this._firstActiveElement <= this._firstFreeElement) {\n      return this._firstFreeElement - this._firstActiveElement;\n    } else {\n      let instanceCount = this._currentParticleCount - this._firstActiveElement;\n      if (this._firstFreeElement > 0) {\n        instanceCount += this._firstFreeElement;\n      }\n      return instanceCount;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _getNotRetiredParticleCount(): number {\n    if (this._firstRetiredElement <= this._firstFreeElement) {\n      return this._firstFreeElement - this._firstRetiredElement;\n    } else {\n      let instanceCount = this._currentParticleCount - this._firstRetiredElement;\n      if (this._firstFreeElement > 0) {\n        instanceCount += this._firstFreeElement;\n      }\n      return instanceCount;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _destroy(): void {\n    this._instanceVertexBufferBinding.buffer.destroy();\n    this._primitive.destroy();\n    this.emission._destroy();\n  }\n\n  /**\n   * @internal\n   */\n  _updateBoundsSimulationLocal(bounds: BoundingBox): void {\n    const renderer = this._renderer;\n    // Get longest Lifetime\n    const maxLifetime = this.main.startLifetime._getMax();\n\n    const { _generatorBounds: generatorBounds, _transformedBounds: transformedBounds } = renderer;\n    if (renderer._isContainDirtyFlag(ParticleUpdateFlags.GeneratorVolume)) {\n      this._calculateGeneratorBounds(maxLifetime, generatorBounds);\n      renderer._setDirtyFlagFalse(ParticleUpdateFlags.GeneratorVolume);\n    }\n\n    if (renderer._isContainDirtyFlag(ParticleUpdateFlags.TransformVolume)) {\n      this._calculateTransformedBounds(maxLifetime, generatorBounds, transformedBounds);\n      renderer._setDirtyFlagFalse(ParticleUpdateFlags.TransformVolume);\n    }\n\n    this._addGravityToBounds(maxLifetime, transformedBounds, bounds);\n  }\n\n  /**\n   * @internal\n   */\n  _updateBoundsSimulationWorld(bounds: BoundingBox): void {\n    const boundsArray = this._transformedBoundsArray;\n    const firstActiveElement = this._firstActiveTransformedBoundingBox;\n    const firstFreeElement = this._firstFreeTransformedBoundingBox;\n\n    const index = firstActiveElement * ParticleBufferUtils.boundsFloatStride;\n    bounds.min.copyFromArray(boundsArray, index);\n    bounds.max.copyFromArray(boundsArray, index + 3);\n\n    if (firstActiveElement < firstFreeElement) {\n      for (let i = firstActiveElement + 1; i < firstFreeElement; i++) {\n        this._mergeTransformedBounds(i, bounds);\n      }\n    } else {\n      for (let i = firstActiveElement + 1, n = this._transformedBoundsCount; i < n; i++) {\n        this._mergeTransformedBounds(i, bounds);\n      }\n      if (firstFreeElement > 0) {\n        for (let i = 0; i < firstFreeElement; i++) {\n          this._mergeTransformedBounds(i, bounds);\n        }\n      }\n    }\n\n    const maxLifetime = this.main.startLifetime._getMax();\n    this._addGravityToBounds(maxLifetime, bounds, bounds);\n  }\n\n  /**\n   * @internal\n   */\n  _freeBoundsArray(): void {\n    this._transformedBoundsArray = null;\n\n    this._transformedBoundsCount = 0;\n    this._firstActiveTransformedBoundingBox = 0;\n    this._firstFreeTransformedBoundingBox = 0;\n  }\n\n  /**\n   * @internal\n   */\n  _generateTransformedBounds(): void {\n    const renderer = this._renderer;\n    // Get longest Lifetime\n    const maxLifetime = this.main.startLifetime._getMax();\n\n    const generatorBounds = renderer._generatorBounds;\n    if (renderer._isContainDirtyFlag(ParticleUpdateFlags.GeneratorVolume)) {\n      this._calculateGeneratorBounds(maxLifetime, generatorBounds);\n      renderer._setDirtyFlagFalse(ParticleUpdateFlags.GeneratorVolume);\n    }\n\n    const { boundsFloatStride, boundsTimeOffset, boundsMaxLifetimeOffset } = ParticleBufferUtils;\n    const firstFreeElement = this._firstFreeTransformedBoundingBox;\n    if (renderer._isContainDirtyFlag(ParticleUpdateFlags.TransformVolume)) {\n      // Resize transformed bounds if needed\n      let nextFreeElement = firstFreeElement + 1;\n      if (nextFreeElement >= this._transformedBoundsCount) {\n        nextFreeElement = 0;\n      }\n      if (nextFreeElement === this._firstActiveTransformedBoundingBox) {\n        this._resizeTransformedBoundsArray();\n        nextFreeElement = firstFreeElement + 1;\n      }\n\n      // Generate transformed bounds\n      const transformedBounds = renderer._transformedBounds;\n      this._calculateTransformedBounds(maxLifetime, generatorBounds, transformedBounds);\n\n      const boundsOffset = firstFreeElement * boundsFloatStride;\n      const boundsArray = this._transformedBoundsArray;\n      transformedBounds.min.copyToArray(boundsArray, boundsOffset);\n      transformedBounds.max.copyToArray(boundsArray, boundsOffset + 3);\n\n      boundsArray[boundsOffset + boundsTimeOffset] = this._playTime;\n      boundsArray[boundsOffset + boundsMaxLifetimeOffset] = maxLifetime;\n\n      this._firstFreeTransformedBoundingBox = nextFreeElement;\n      renderer._setDirtyFlagFalse(ParticleUpdateFlags.TransformVolume);\n    } else {\n      let previousFreeElement = this._firstFreeTransformedBoundingBox - 1;\n      if (previousFreeElement < 0) {\n        previousFreeElement = this._transformedBoundsCount;\n      }\n      this._transformedBoundsArray[previousFreeElement * ParticleBufferUtils.boundsFloatStride + boundsTimeOffset] =\n        this._playTime;\n    }\n  }\n\n  private _addNewParticle(position: Vector3, direction: Vector3, transform: Transform, time: number): void {\n    const firstFreeElement = this._firstFreeElement;\n    let nextFreeElement = firstFreeElement + 1;\n    if (nextFreeElement >= this._currentParticleCount) {\n      nextFreeElement = 0;\n    }\n\n    const main = this.main;\n    // Check if can be expanded\n\n    // Using 'nextFreeElement' instead of 'freeElement' when comparing with '_firstRetiredElement'\n    // aids in definitively identifying the head and tail of the circular queue.\n\n    // Failure to adopt this approach may impede growth initiation\n    // due to the initial alignment of 'freeElement' and 'firstRetiredElement'.\n    if (nextFreeElement === this._firstRetiredElement) {\n      const increaseCount = Math.min(\n        ParticleGenerator._particleIncreaseCount,\n        main._maxParticleBuffer - this._currentParticleCount\n      );\n      if (increaseCount === 0) {\n        return;\n      }\n\n      this._resizeInstanceBuffer(true, increaseCount);\n\n      // Recalculate nextFreeElement after resize\n      nextFreeElement = firstFreeElement + 1;\n    }\n\n    let pos: Vector3, rot: Quaternion;\n    if (main.simulationSpace === ParticleSimulationSpace.World) {\n      pos = transform.worldPosition;\n      rot = transform.worldRotationQuaternion;\n    }\n\n    const startSpeed = main.startSpeed.evaluate(undefined, main._startSpeedRand.random());\n\n    const instanceVertices = this._instanceVertices;\n    const offset = firstFreeElement * ParticleBufferUtils.instanceVertexFloatStride;\n\n    // Position\n    instanceVertices[offset] = position.x;\n    instanceVertices[offset + 1] = position.y;\n    instanceVertices[offset + 2] = position.z;\n\n    // Start life time\n    instanceVertices[offset + ParticleBufferUtils.startLifeTimeOffset] = main.startLifetime.evaluate(\n      undefined,\n      main._startLifeTimeRand.random()\n    );\n\n    // Direction\n    instanceVertices[offset + 4] = direction.x;\n    instanceVertices[offset + 5] = direction.y;\n    instanceVertices[offset + 6] = direction.z;\n\n    // Time\n    instanceVertices[offset + ParticleBufferUtils.timeOffset] = time;\n\n    // Color\n    const startColor = ParticleGenerator._tempColor0;\n    main.startColor.evaluate(undefined, main._startColorRand.random(), startColor);\n    if (this._renderer.engine.settings.colorSpace === ColorSpace.Linear) {\n      startColor.toLinear(startColor);\n    }\n\n    instanceVertices[offset + 8] = startColor.r;\n    instanceVertices[offset + 9] = startColor.g;\n    instanceVertices[offset + 10] = startColor.b;\n    instanceVertices[offset + 11] = startColor.a;\n\n    // Start size\n    const startSizeRand = main._startSizeRand;\n    if (main.startSize3D) {\n      instanceVertices[offset + 12] = main.startSizeX.evaluate(undefined, startSizeRand.random());\n      instanceVertices[offset + 13] = main.startSizeY.evaluate(undefined, startSizeRand.random());\n      instanceVertices[offset + 14] = main.startSizeZ.evaluate(undefined, startSizeRand.random());\n    } else {\n      const size = main.startSize.evaluate(undefined, startSizeRand.random());\n      instanceVertices[offset + 12] = size;\n      instanceVertices[offset + 13] = size;\n      instanceVertices[offset + 14] = size;\n    }\n\n    // Start rotation\n    const startRotationRand = main._startRotationRand;\n    if (main.startRotation3D) {\n      instanceVertices[offset + 15] = MathUtil.degreeToRadian(\n        main.startRotationX.evaluate(undefined, startRotationRand.random())\n      );\n      instanceVertices[offset + 16] = MathUtil.degreeToRadian(\n        main.startRotationY.evaluate(undefined, startRotationRand.random())\n      );\n      instanceVertices[offset + 17] = MathUtil.degreeToRadian(\n        main.startRotationZ.evaluate(undefined, startRotationRand.random())\n      );\n    } else {\n      instanceVertices[offset + 15] = MathUtil.degreeToRadian(\n        main.startRotationZ.evaluate(undefined, startRotationRand.random())\n      );\n    }\n\n    // Start speed\n    instanceVertices[offset + 18] = startSpeed;\n\n    // Gravity, unused, size, rotation\n    switch (main.gravityModifier.mode) {\n      case ParticleCurveMode.Constant:\n        instanceVertices[offset + 19] = main.gravityModifier.constant;\n        break;\n      case ParticleCurveMode.TwoConstants:\n        instanceVertices[offset + 19] = main.gravityModifier.evaluate(undefined, main._gravityModifierRand.random());\n        break;\n    }\n\n    const colorOverLifetime = this.colorOverLifetime;\n    if (colorOverLifetime.enabled && colorOverLifetime.color.mode === ParticleGradientMode.TwoGradients) {\n      instanceVertices[offset + 20] = colorOverLifetime._colorGradientRand.random();\n    }\n\n    // instanceVertices[offset + 21] = rand.random();\n\n    const rotationOverLifetime = this.rotationOverLifetime;\n    if (rotationOverLifetime.enabled && rotationOverLifetime.rotationZ.mode === ParticleCurveMode.TwoConstants) {\n      instanceVertices[offset + 22] = rotationOverLifetime._rotationRand.random();\n    }\n\n    // Texture sheet animation\n    const textureSheetAnimation = this.textureSheetAnimation;\n    if (textureSheetAnimation.enabled && textureSheetAnimation.frameOverTime.mode === ParticleCurveMode.TwoCurves) {\n      instanceVertices[offset + 23] = textureSheetAnimation._frameOverTimeRand.random();\n    }\n\n    // Velocity random\n    const velocityOverLifetime = this.velocityOverLifetime;\n    if (\n      velocityOverLifetime.enabled &&\n      velocityOverLifetime.velocityX.mode === ParticleCurveMode.TwoConstants &&\n      velocityOverLifetime.velocityY.mode === ParticleCurveMode.TwoConstants &&\n      velocityOverLifetime.velocityZ.mode === ParticleCurveMode.TwoConstants\n    ) {\n      const rand = velocityOverLifetime._velocityRand;\n      instanceVertices[offset + 24] = rand.random();\n      instanceVertices[offset + 25] = rand.random();\n      instanceVertices[offset + 26] = rand.random();\n    }\n\n    if (this.main.simulationSpace === ParticleSimulationSpace.World) {\n      // Simulation world position\n      instanceVertices[offset + 27] = pos.x;\n      instanceVertices[offset + 28] = pos.y;\n      instanceVertices[offset + 29] = pos.z;\n\n      // Simulation world position\n      instanceVertices[offset + 30] = rot.x;\n      instanceVertices[offset + 31] = rot.y;\n      instanceVertices[offset + 32] = rot.z;\n      instanceVertices[offset + 33] = rot.w;\n    }\n\n    // Simulation UV\n    if (textureSheetAnimation.enabled) {\n      const { frameOverTime } = textureSheetAnimation;\n      const { x, y, z } = textureSheetAnimation._tillingInfo;\n\n      let tileRow = 0;\n      if (frameOverTime.mode === ParticleCurveMode.Constant || frameOverTime.mode === ParticleCurveMode.TwoConstants) {\n        tileRow =\n          Math.floor(frameOverTime.evaluate(undefined, textureSheetAnimation._frameOverTimeRand.random()) * z) * x;\n      }\n      const tileRowIndex = Math.floor(tileRow);\n\n      instanceVertices[offset + ParticleBufferUtils.simulationUVOffset] = x;\n      instanceVertices[offset + 35] = y;\n      instanceVertices[offset + 36] = tileRow - tileRowIndex;\n      instanceVertices[offset + 37] = tileRowIndex * y;\n    } else {\n      instanceVertices[offset + ParticleBufferUtils.simulationUVOffset] = 1;\n      instanceVertices[offset + 35] = 1;\n      instanceVertices[offset + 36] = 0;\n      instanceVertices[offset + 37] = 0;\n    }\n\n    this._firstFreeElement = nextFreeElement;\n  }\n\n  private _retireActiveParticles(): void {\n    const engine = this._renderer.engine;\n\n    const frameCount = engine.time.frameCount;\n    const instanceVertices = this._instanceVertices;\n\n    while (this._firstActiveElement !== this._firstNewElement) {\n      const activeParticleOffset = this._firstActiveElement * ParticleBufferUtils.instanceVertexFloatStride;\n      const activeParticleTimeOffset = activeParticleOffset + ParticleBufferUtils.timeOffset;\n\n      const particleAge = this._playTime - instanceVertices[activeParticleTimeOffset];\n      // Use `Math.fround` to ensure the precision of comparison is same\n      if (Math.fround(particleAge) < instanceVertices[activeParticleOffset + ParticleBufferUtils.startLifeTimeOffset]) {\n        break;\n      }\n\n      // Store frame count in time offset to free retired particle\n      instanceVertices[activeParticleTimeOffset] = frameCount;\n      if (++this._firstActiveElement >= this._currentParticleCount) {\n        this._firstActiveElement = 0;\n      }\n\n      // Record wait process retired element count\n      this._waitProcessRetiredElementCount++;\n    }\n  }\n\n  private _freeRetiredParticles(): void {\n    const frameCount = this._renderer.engine.time.frameCount;\n\n    while (this._firstRetiredElement !== this._firstActiveElement) {\n      const offset =\n        this._firstRetiredElement * ParticleBufferUtils.instanceVertexFloatStride +\n        ParticleBufferUtils.startLifeTimeOffset;\n      const age = frameCount - this._instanceVertices[offset];\n\n      // WebGL don't support map buffer range, so off this optimization\n      if (age < 0) {\n        break;\n      }\n\n      if (++this._firstRetiredElement >= this._currentParticleCount) {\n        this._firstRetiredElement = 0;\n      }\n    }\n  }\n\n  private _addActiveParticlesToVertexBuffer(): void {\n    const firstActiveElement = this._firstActiveElement;\n    const firstFreeElement = this._firstFreeElement;\n\n    // firstActiveElement == firstFreeElement should not update\n    if (firstActiveElement === firstFreeElement) {\n      return;\n    }\n\n    const byteStride = ParticleBufferUtils.instanceVertexStride;\n    const start = firstActiveElement * byteStride;\n    const instanceBuffer = this._instanceVertexBufferBinding.buffer;\n    const dataBuffer = this._instanceVertices.buffer;\n\n    if (firstActiveElement < firstFreeElement) {\n      instanceBuffer.setData(\n        dataBuffer,\n        0,\n        start,\n        (firstFreeElement - firstActiveElement) * byteStride,\n        SetDataOptions.Discard\n      );\n    } else {\n      const firstSegmentCount = (this._currentParticleCount - firstActiveElement) * byteStride;\n      instanceBuffer.setData(dataBuffer, 0, start, firstSegmentCount, SetDataOptions.Discard);\n\n      if (firstFreeElement > 0) {\n        instanceBuffer.setData(dataBuffer, firstSegmentCount, 0, firstFreeElement * byteStride);\n      }\n    }\n    this._firstNewElement = firstFreeElement;\n    this._waitProcessRetiredElementCount = 0;\n    this._instanceBufferResized = false;\n  }\n\n  private _addVertexBufferBindingsFilterDuplicate(\n    vertexBufferBinding: VertexBufferBinding,\n    out: VertexBufferBinding[]\n  ): number {\n    let index = 0;\n    for (let n = out.length; index < n; index++) {\n      if (out[index] === vertexBufferBinding) {\n        return index;\n      }\n    }\n    out.push(vertexBufferBinding);\n    return index;\n  }\n\n  private _resizeTransformedBoundsArray(): void {\n    const floatStride = ParticleBufferUtils.boundsFloatStride;\n    const increaseCount = ParticleGenerator._transformedBoundsIncreaseCount;\n\n    this._transformedBoundsCount += increaseCount;\n    const lastBoundsArray = this._transformedBoundsArray;\n    const boundsArray = new Float32Array(this._transformedBoundsCount * floatStride);\n\n    if (lastBoundsArray) {\n      const firstFreeElement = this._firstFreeTransformedBoundingBox;\n      boundsArray.set(new Float32Array(lastBoundsArray.buffer, 0, firstFreeElement * floatStride));\n\n      const nextFreeElement = firstFreeElement + 1;\n      const freeEndOffset = (nextFreeElement + increaseCount) * floatStride;\n      boundsArray.set(new Float32Array(lastBoundsArray.buffer, nextFreeElement * floatStride * 4), freeEndOffset);\n\n      const firstActiveElement = this._firstActiveTransformedBoundingBox;\n      if (firstActiveElement > firstFreeElement) {\n        this._firstActiveTransformedBoundingBox += increaseCount;\n      }\n    }\n\n    this._transformedBoundsArray = boundsArray;\n  }\n\n  private _retireTransformedBounds(): void {\n    const { boundsFloatStride, boundsTimeOffset, boundsMaxLifetimeOffset } = ParticleBufferUtils;\n    const boundsArray = this._transformedBoundsArray;\n    const firstFreeElement = this._firstFreeTransformedBoundingBox;\n    const count = this._transformedBoundsCount;\n\n    while (this._firstActiveTransformedBoundingBox !== firstFreeElement) {\n      const index = this._firstActiveTransformedBoundingBox * boundsFloatStride;\n      const age = this._playTime - boundsArray[index + boundsTimeOffset];\n      if (age <= boundsArray[index + boundsMaxLifetimeOffset]) {\n        break;\n      }\n\n      if (++this._firstActiveTransformedBoundingBox >= count) {\n        this._firstActiveTransformedBoundingBox = 0;\n      }\n      this._renderer._onWorldVolumeChanged();\n    }\n  }\n\n  private _calculateGeneratorBounds(maxLifetime: number, bounds: BoundingBox): void {\n    const { _tempVector30: directionMax, _tempVector31: directionMin, _tempVector20: speedMinMax } = ParticleGenerator;\n    const { min, max } = bounds;\n    const { main } = this;\n\n    // StartSpeed's impact\n    const { shape } = this.emission;\n    if (shape?.enabled) {\n      shape._getPositionRange(min, max);\n      shape._getDirectionRange(directionMin, directionMax);\n    } else {\n      min.set(0, 0, 0);\n      max.set(0, 0, 0);\n      directionMin.set(0, 0, -1);\n      directionMax.set(0, 0, 0);\n    }\n    this._getExtremeValueFromZero(main.startSpeed, speedMinMax);\n\n    const { x: speedMin, y: speedMax } = speedMinMax;\n    const { x: dirMinX, y: dirMinY, z: dirMinZ } = directionMin;\n    const { x: dirMaxX, y: dirMaxY, z: dirMaxZ } = directionMax;\n\n    min.set(\n      min.x + Math.min(dirMinX * speedMax, dirMaxX * speedMin) * maxLifetime,\n      min.y + Math.min(dirMinY * speedMax, dirMaxY * speedMin) * maxLifetime,\n      min.z + Math.min(dirMinZ * speedMax, dirMaxZ * speedMin) * maxLifetime\n    );\n\n    max.set(\n      max.x + Math.max(dirMinX * speedMin, dirMaxX * speedMax) * maxLifetime,\n      max.y + Math.max(dirMinY * speedMin, dirMaxY * speedMax) * maxLifetime,\n      max.z + Math.max(dirMinZ * speedMin, dirMaxZ * speedMax) * maxLifetime\n    );\n\n    // StartSize's impact\n    let maxSize = main.startSize._getMax();\n\n    if (main.startSize3D) {\n      const startSizeYMax = main.startSizeY._getMax();\n      if (\n        this._renderer.renderMode === ParticleRenderMode.Billboard ||\n        ParticleRenderMode.StretchBillboard ||\n        ParticleRenderMode.HorizontalBillboard\n      ) {\n        maxSize = Math.max(maxSize, startSizeYMax);\n      } else {\n        const startSizeZMax = main.startSizeZ._getMax();\n        maxSize = Math.max(maxSize, startSizeYMax, startSizeZMax);\n      }\n    }\n\n    // Use diagonal for potential rotation\n    maxSize *= 1.414;\n\n    // SizeOverLifetime impact\n    const { sizeOverLifetime } = this;\n    if (sizeOverLifetime.enabled) {\n      let maxSizeOverLifetime = sizeOverLifetime.size._getMax();\n      if (sizeOverLifetime.separateAxes) {\n        const maxSizeOverLifetimeY = sizeOverLifetime.sizeY._getMax();\n        const maxSizeOverLifetimeZ = sizeOverLifetime.sizeZ._getMax();\n        maxSizeOverLifetime = Math.max(maxSizeOverLifetime, maxSizeOverLifetimeY, maxSizeOverLifetimeZ);\n      }\n\n      maxSize *= maxSizeOverLifetime;\n    }\n\n    min.set(min.x - maxSize, min.y - maxSize, min.z - maxSize);\n    max.set(max.x + maxSize, max.y + maxSize, max.z + maxSize);\n  }\n\n  private _mergeTransformedBounds(index: number, bounds: BoundingBox): void {\n    const { min, max } = bounds;\n    const boundsArray = this._transformedBoundsArray;\n\n    const offset = index * ParticleBufferUtils.boundsFloatStride;\n\n    min.set(\n      Math.min(min.x, boundsArray[offset]),\n      Math.min(min.y, boundsArray[offset + 1]),\n      Math.min(min.z, boundsArray[offset + 2])\n    );\n\n    max.set(\n      Math.max(max.x, boundsArray[offset + 3]),\n      Math.max(max.y, boundsArray[offset + 4]),\n      Math.max(max.z, boundsArray[offset + 5])\n    );\n  }\n\n  private _calculateTransformedBounds(maxLifetime: number, origin: BoundingBox, out: BoundingBox): void {\n    const {\n      _tempVector20: velMinMaxX,\n      _tempVector21: velMinMaxY,\n      _tempVector22: velMinMaxZ,\n      _tempMat: rotateMat\n    } = ParticleGenerator;\n    const { transform } = this._renderer.entity;\n    const worldPosition = transform.worldPosition;\n    Matrix.rotationQuaternion(transform.worldRotationQuaternion, rotateMat);\n\n    const { min: originMin, max: originMax } = origin;\n    const { min, max } = out;\n\n    const { velocityOverLifetime } = this;\n    if (velocityOverLifetime.enabled) {\n      this._getExtremeValueFromZero(velocityOverLifetime.velocityX, velMinMaxX);\n      this._getExtremeValueFromZero(velocityOverLifetime.velocityY, velMinMaxY);\n      this._getExtremeValueFromZero(velocityOverLifetime.velocityZ, velMinMaxZ);\n\n      if (velocityOverLifetime.space === ParticleSimulationSpace.Local) {\n        min.set(\n          originMin.x + velMinMaxX.x * maxLifetime,\n          originMin.y + velMinMaxY.x * maxLifetime,\n          originMin.z + velMinMaxZ.x * maxLifetime\n        );\n        max.set(\n          originMax.x + velMinMaxX.y * maxLifetime,\n          originMax.y + velMinMaxY.y * maxLifetime,\n          originMax.z + velMinMaxZ.y * maxLifetime\n        );\n\n        out.transform(rotateMat);\n      } else {\n        out.transform(rotateMat);\n\n        min.set(\n          originMin.x + velMinMaxX.x * maxLifetime,\n          originMin.y + velMinMaxY.x * maxLifetime,\n          originMin.z + velMinMaxZ.x * maxLifetime\n        );\n        max.set(\n          originMax.x + velMinMaxX.y * maxLifetime,\n          originMax.y + velMinMaxY.y * maxLifetime,\n          originMax.z + velMinMaxZ.y * maxLifetime\n        );\n      }\n    } else {\n      BoundingBox.transform(origin, rotateMat, out);\n    }\n\n    min.add(worldPosition);\n    max.add(worldPosition);\n  }\n\n  private _addGravityToBounds(maxLifetime: number, origin: BoundingBox, out: BoundingBox): void {\n    const { min: originMin, max: originMax } = origin;\n    const modifierMinMax = ParticleGenerator._tempVector20;\n\n    // Gravity modifier impact\n    this._getExtremeValueFromZero(this.main.gravityModifier, modifierMinMax);\n    const { x, y, z } = this._renderer.scene.physics.gravity;\n\n    const coefficient = 0.5 * maxLifetime * maxLifetime;\n    const minGravityEffect = modifierMinMax.x * coefficient;\n    const maxGravityEffect = modifierMinMax.y * coefficient;\n\n    const gravityEffectMinX = x * minGravityEffect;\n    const gravityEffectMaxX = x * maxGravityEffect;\n\n    const gravityEffectMinY = y * minGravityEffect;\n    const gravityEffectMaxY = y * maxGravityEffect;\n\n    const gravityEffectMinZ = z * minGravityEffect;\n    const gravityEffectMaxZ = z * maxGravityEffect;\n\n    out.min.set(\n      Math.min(gravityEffectMinX, gravityEffectMaxX) + originMin.x,\n      Math.min(gravityEffectMinY, gravityEffectMaxY) + originMin.y,\n      Math.min(gravityEffectMinZ, gravityEffectMaxZ) + originMin.z\n    );\n\n    out.max.set(\n      Math.max(gravityEffectMinX, gravityEffectMaxX) + originMax.x,\n      Math.max(gravityEffectMinY, gravityEffectMaxY) + originMax.y,\n      Math.max(gravityEffectMinZ, gravityEffectMaxZ) + originMax.z\n    );\n  }\n\n  private _getExtremeValueFromZero(curve: ParticleCompositeCurve, out: Vector2): void {\n    curve._getMinMax(out);\n    out.x = Math.min(0, out.x);\n    out.y = Math.max(0, out.y);\n  }\n}\n","import { Color } from \"@galacean/engine-math\";\nimport { Engine } from \"../Engine\";\nimport { BaseMaterial } from \"../material/BaseMaterial\";\nimport { Shader } from \"../shader/Shader\";\nimport { Texture2D } from \"../texture/Texture2D\";\n\n/**\n * Particle Material.\n */\nexport class ParticleMaterial extends BaseMaterial {\n  /**\n   * Base color.\n   */\n  get baseColor(): Color {\n    return this.shaderData.getColor(BaseMaterial._baseColorProp);\n  }\n\n  set baseColor(value: Color) {\n    const baseColor = this.shaderData.getColor(BaseMaterial._baseColorProp);\n    if (value !== baseColor) {\n      baseColor.copyFrom(value);\n    }\n  }\n\n  /**\n   * Base texture.\n   */\n  get baseTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(BaseMaterial._baseTextureProp);\n  }\n\n  set baseTexture(value: Texture2D) {\n    this.shaderData.setTexture(BaseMaterial._baseTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(BaseMaterial._baseTextureMacro);\n    } else {\n      this.shaderData.disableMacro(BaseMaterial._baseTextureMacro);\n    }\n  }\n\n  /**\n   * Create a unlit material instance.\n   * @param engine - Engine to which the material belongs\n   */\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"particle-shader\"));\n\n    const shaderData = this.shaderData;\n    shaderData.setColor(BaseMaterial._baseColorProp, new Color(1, 1, 1, 1));\n\n    this.isTransparent = true;\n  }\n\n  /**\n   * @inheritdoc\n   */\n  override clone(): ParticleMaterial {\n    const dest = new ParticleMaterial(this._engine);\n    this.cloneTo(dest);\n    return dest;\n  }\n}\n","import { deepClone } from \"../../clone/CloneManager\";\nimport { ParticleCompositeCurve } from \"./ParticleCompositeCurve\";\n\n/**\n * A burst is a particle emission event, where a number of particles are all emitted at the same time\n */\nexport class Burst {\n  public time: number;\n  @deepClone\n  public count: ParticleCompositeCurve;\n\n  /**\n   * Create burst object.\n   * @param time - Time to emit the burst\n   * @param count - Count of particles to emit\n   */\n  constructor(time: number, count: ParticleCompositeCurve) {\n    this.time = time;\n    this.count = count;\n  }\n}\n","import { Rand, Vector3 } from \"@galacean/engine-math\";\nimport { ParticleShapeType } from \"./enums/ParticleShapeType\";\nimport { UpdateFlagManager } from \"../../../UpdateFlagManager\";\nimport { ignoreClone } from \"../../../clone/CloneManager\";\n\n/**\n * Base class for all particle shapes.\n */\nexport abstract class BaseShape {\n  /** The type of shape to emit particles from. */\n  abstract readonly shapeType: ParticleShapeType;\n\n  @ignoreClone\n  protected _updateManager = new UpdateFlagManager();\n\n  private _enabled = true;\n  private _randomDirectionAmount = 0;\n\n  /**\n   * Specifies whether the ShapeModule is enabled or disabled.\n   */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n\n  set enabled(value: boolean) {\n    if (value !== this._enabled) {\n      this._enabled = value;\n      this._updateManager.dispatch();\n    }\n  }\n\n  /**\n   * Randomizes the starting direction of particles.\n   */\n  get randomDirectionAmount(): number {\n    return this._randomDirectionAmount;\n  }\n\n  set randomDirectionAmount(value: number) {\n    if (value !== this._randomDirectionAmount) {\n      this._randomDirectionAmount = value;\n      this._updateManager.dispatch();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _registerOnValueChanged(listener: () => void): void {\n    this._updateManager.addListener(listener);\n  }\n\n  /**\n   * @internal\n   */\n  _unRegisterOnValueChanged(listener: () => void): void {\n    this._updateManager.removeListener(listener);\n  }\n\n  /**\n   * @internal\n   */\n  abstract _generatePositionAndDirection(rand: Rand, emitTime: number, position: Vector3, direction: Vector3): void;\n\n  /**\n   * @internal\n   */\n  abstract _getDirectionRange(outMin: Vector3, outMax: Vector3): void;\n\n  /**\n   * @internal\n   */\n  abstract _getPositionRange(outMin: Vector3, outMax: Vector3): void;\n}\n","import { Rand, Vector2, Vector3 } from \"@galacean/engine-math\";\n\n/**\n * @internal\n */\nexport class ShapeUtils {\n  static randomPointUnitArcCircle(arc: number, out: Vector2, rand: Rand): void {\n    const angle = rand.random() * arc;\n    out.x = Math.cos(angle);\n    out.y = Math.sin(angle);\n  }\n\n  static randomPointInsideUnitArcCircle(arc: number, out: Vector2, rand: Rand): void {\n    ShapeUtils.randomPointUnitArcCircle(arc, out, rand);\n    const range = Math.sqrt(rand.random());\n    out.x = out.x * range;\n    out.y = out.y * range;\n  }\n\n  static randomPointUnitCircle(out: Vector2, rand: Rand): void {\n    const angle = rand.random() * Math.PI * 2;\n    out.x = Math.cos(angle);\n    out.y = Math.sin(angle);\n  }\n\n  static randomPointInsideUnitCircle(out: Vector2, rand: Rand): void {\n    ShapeUtils.randomPointUnitCircle(out, rand);\n    const range = Math.sqrt(rand.random());\n    out.x = out.x * range;\n    out.y = out.y * range;\n  }\n\n  static _randomPointUnitSphere(out: Vector3, rand: Rand): void {\n    const z = rand.random() * 2 - 1.0;\n    const a = rand.random() * Math.PI * 2;\n\n    const r = Math.sqrt(1.0 - z * z);\n\n    out.x = r * Math.cos(a);\n    out.y = r * Math.sin(a);\n    out.z = z;\n  }\n\n  static _randomPointInsideUnitSphere(out: Vector3, rand: Rand): void {\n    ShapeUtils._randomPointUnitSphere(out, rand);\n    const range = Math.pow(rand.random(), 1.0 / 3.0);\n    out.x = out.x * range;\n    out.y = out.y * range;\n    out.z = out.z * range;\n  }\n\n  static _randomPointInsideHalfUnitBox(out: Vector3, rand: Rand = null): void {\n    out.x = rand.random() - 0.5;\n    out.y = rand.random() - 0.5;\n    out.z = rand.random() - 0.5;\n  }\n}\n","/**\n * The emission shape.\n */\nexport enum ParticleShapeType {\n  /** Emit from the volume of a box. */\n  Box = 0,\n  /** Emit from a circle. */\n  Circle = 1,\n  /** Emit from the base of a cone. */\n  Cone = 2,\n  /** Emit from a half-sphere. */\n  Hemisphere = 3,\n  /** Emit from a sphere. */\n  Sphere = 4\n}\n","import { Rand, Vector3 } from \"@galacean/engine-math\";\nimport { deepClone } from \"../../../clone/CloneManager\";\nimport { BaseShape } from \"./BaseShape\";\nimport { ShapeUtils } from \"./ShapeUtils\";\nimport { ParticleShapeType } from \"./enums/ParticleShapeType\";\n\n/**\n * Particle shape that emits particles from a box.\n */\nexport class BoxShape extends BaseShape {\n  private static _tempVector30 = new Vector3();\n\n  readonly shapeType = ParticleShapeType.Box;\n\n  @deepClone\n  private _size = new Vector3(1, 1, 1);\n\n  /**\n   * The size of the box.\n   */\n  get size() {\n    return this._size;\n  }\n\n  set size(value: Vector3) {\n    if (value !== this._size) {\n      this._size.copyFrom(value);\n    }\n  }\n\n  constructor() {\n    super();\n    // @ts-ignore\n    this._size._onValueChanged = this._updateManager.dispatch.bind(this._updateManager);\n  }\n\n  /**\n   * @internal\n   */\n  _generatePositionAndDirection(rand: Rand, emitTime: number, position: Vector3, direction: Vector3): void {\n    ShapeUtils._randomPointInsideHalfUnitBox(position, rand);\n    position.multiply(this.size);\n\n    const defaultDirection = BoxShape._tempVector30;\n    defaultDirection.set(0.0, 0.0, -1.0);\n    ShapeUtils._randomPointUnitSphere(direction, rand);\n    Vector3.lerp(defaultDirection, direction, this.randomDirectionAmount, direction);\n  }\n\n  /**\n   * @internal\n   */\n  _getDirectionRange(outMin: Vector3, outMax: Vector3): void {\n    const radian = Math.PI * this.randomDirectionAmount;\n\n    if (this.randomDirectionAmount < 0.5) {\n      const dirSin = Math.sin(radian);\n      outMin.set(-dirSin, -dirSin, -1);\n      outMax.set(dirSin, dirSin, 0);\n    } else {\n      const dirCos = Math.cos(radian);\n      outMin.set(-1, -1, -1);\n      outMax.set(1, 1, -dirCos);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _getPositionRange(outMin: Vector3, outMax: Vector3): void {\n    const { x, y, z } = this._size;\n    outMin.set(-x * 0.5, -y * 0.5, -z * 0.5);\n    outMax.set(x * 0.5, y * 0.5, z * 0.5);\n  }\n}\n","/**\n * Particle shape multi mode value.\n */\nexport enum ParticleShapeArcMode {\n  /** Generate points randomly. */\n  Random,\n  /** Animate the emission point around the shape. */\n  Loop\n}\n","import { MathUtil, Rand, Vector2, Vector3 } from \"@galacean/engine-math\";\nimport { BaseShape } from \"./BaseShape\";\nimport { ShapeUtils } from \"./ShapeUtils\";\nimport { ParticleShapeArcMode } from \"./enums/ParticleShapeArcMode\";\nimport { ParticleShapeType } from \"./enums/ParticleShapeType\";\n\n/**\n * Particle shape that emits particles from a circle.\n */\nexport class CircleShape extends BaseShape {\n  private static _tempPositionPoint = new Vector2();\n\n  readonly shapeType = ParticleShapeType.Circle;\n\n  private _radius = 1.0;\n  private _arc = 360.0;\n  private _arcMode = ParticleShapeArcMode.Random;\n  private _arcSpeed = 1.0;\n\n  /**\n   * Radius of the shape to emit particles from.\n   */\n  get radius(): number {\n    return this._radius;\n  }\n\n  set radius(value: number) {\n    if (value !== this._radius) {\n      this._radius = value;\n      this._updateManager.dispatch();\n    }\n  }\n\n  /**\n   * Angle of the circle arc to emit particles from.\n   */\n  get arc(): number {\n    return this._arc;\n  }\n\n  set arc(value: number) {\n    if (value !== this._arc) {\n      this._arc = value;\n      this._updateManager.dispatch();\n    }\n  }\n\n  /**\n   * The mode to generate particles around the arc.\n   */\n  get arcMode(): ParticleShapeArcMode {\n    return this._arcMode;\n  }\n\n  set arcMode(value: ParticleShapeArcMode) {\n    if (value !== this._arcMode) {\n      this._arcMode = value;\n      this._updateManager.dispatch();\n    }\n  }\n\n  /**\n   * The speed of complete 360 degree rotation.\n   */\n  get arcSpeed(): number {\n    return this._arcSpeed;\n  }\n\n  set arcSpeed(value: number) {\n    if (value !== this._arcSpeed) {\n      this._arcSpeed = value;\n      this._updateManager.dispatch();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _generatePositionAndDirection(rand: Rand, emitTime: number, position: Vector3, direction: Vector3): void {\n    const positionPoint = CircleShape._tempPositionPoint;\n\n    switch (this.arcMode) {\n      case ParticleShapeArcMode.Loop:\n        const normalizedEmitTime = (emitTime * this.arcSpeed * (360 / this.arc)) % 1;\n        const radian = MathUtil.degreeToRadian(this.arc * normalizedEmitTime);\n        positionPoint.set(Math.cos(radian), Math.sin(radian));\n        positionPoint.scale(rand.random());\n        break;\n      case ParticleShapeArcMode.Random:\n        ShapeUtils.randomPointInsideUnitArcCircle(MathUtil.degreeToRadian(this.arc), positionPoint, rand);\n        break;\n    }\n\n    position.set(positionPoint.x, positionPoint.y, 0);\n    position.scale(this.radius);\n\n    ShapeUtils._randomPointUnitSphere(direction, rand);\n    Vector3.lerp(position, direction, this.randomDirectionAmount, direction);\n  }\n\n  /**\n   * @internal\n   */\n  _getDirectionRange(outMin: Vector3, outMax: Vector3): void {\n    const randomDirZ = this.randomDirectionAmount > 0.5 ? 1 : Math.sin(this.randomDirectionAmount * Math.PI);\n    const randomDegreeOnXY = 0.5 * (360 - this._arc) * this.randomDirectionAmount;\n    const randomDirY = randomDegreeOnXY > 90 ? -1 : -Math.sin(randomDegreeOnXY);\n    this._getUnitArcRange(this._arc + randomDegreeOnXY, outMin, outMax, randomDirY, randomDirZ);\n  }\n\n  /**\n   * @internal\n   */\n  _getPositionRange(outMin: Vector3, outMax: Vector3): void {\n    this._getUnitArcRange(this._arc, outMin, outMax, 0, 0);\n    outMin.scale(this._radius);\n    outMax.scale(this._radius);\n  }\n\n  private _getUnitArcRange(\n    arc: number,\n    outMin: Vector3,\n    outMax: Vector3,\n    randomDirY: number,\n    randomDirZ: number\n  ): void {\n    const radian = MathUtil.degreeToRadian(arc);\n    const dirSin = Math.sin(radian);\n    const dirCos = Math.cos(radian);\n\n    if (arc < 90) {\n      outMin.set(0, randomDirY, -randomDirZ);\n      outMax.set(1, dirSin, randomDirZ);\n    } else if (arc < 180) {\n      outMin.set(dirCos, randomDirY, -randomDirZ);\n      outMax.set(1, 1, randomDirZ);\n    } else if (arc < 270) {\n      outMin.set(-1, Math.min(dirSin, randomDirY), -randomDirZ);\n      outMax.set(1, 1, randomDirZ);\n    } else {\n      outMin.set(-1, -1, -randomDirZ);\n      outMax.set(1, 1, randomDirZ);\n    }\n  }\n}\n","import { MathUtil, Rand, Vector2, Vector3 } from \"@galacean/engine-math\";\nimport { BaseShape } from \"./BaseShape\";\nimport { ShapeUtils } from \"./ShapeUtils\";\nimport { ParticleShapeType } from \"./enums/ParticleShapeType\";\n\n/**\n * Cone shape.\n */\nexport class ConeShape extends BaseShape {\n  private static _tempVector20 = new Vector2();\n  private static _tempVector21 = new Vector2();\n  private static _tempVector30 = new Vector3();\n  private static _tempVector31 = new Vector3();\n\n  readonly shapeType = ParticleShapeType.Cone;\n\n  private _angle = 25.0;\n  private _radius = 1.0;\n  private _length = 5.0;\n  private _emitType = ConeEmitType.Base;\n\n  /**\n   * Angle of the cone to emit particles from.\n   */\n  get angle(): number {\n    return this._angle;\n  }\n\n  set angle(value: number) {\n    if (value !== this._angle) {\n      this._angle = value;\n      this._updateManager.dispatch();\n    }\n  }\n\n  /**\n   * Radius of the shape to emit particles from.\n   */\n  get radius(): number {\n    return this._radius;\n  }\n\n  set radius(value: number) {\n    if (value !== this._radius) {\n      this._radius = value;\n      this._updateManager.dispatch();\n    }\n  }\n\n  /**\n   * Length of the cone to emit particles from.\n   */\n  get length(): number {\n    return this._length;\n  }\n\n  set length(value: number) {\n    if (value !== this._length) {\n      this._length = value;\n      this._updateManager.dispatch();\n    }\n  }\n\n  /**\n   * Cone emitter type.\n   */\n  get emitType(): ConeEmitType {\n    return this._emitType;\n  }\n\n  set emitType(value: ConeEmitType) {\n    if (value !== this._emitType) {\n      this._emitType = value;\n      this._updateManager.dispatch();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _generatePositionAndDirection(rand: Rand, emitTime: number, position: Vector3, direction: Vector3): void {\n    const unitPosition = ConeShape._tempVector20;\n    const radian = MathUtil.degreeToRadian(this.angle);\n    const dirSinA = Math.sin(radian);\n    const dirCosA = Math.cos(radian);\n\n    switch (this.emitType) {\n      case ConeEmitType.Base:\n        ShapeUtils.randomPointInsideUnitCircle(unitPosition, rand);\n        position.set(unitPosition.x * this.radius, unitPosition.y * this.radius, 0);\n\n        const unitDirection = ConeShape._tempVector21;\n        ShapeUtils.randomPointInsideUnitCircle(unitDirection, rand);\n        Vector2.lerp(unitPosition, unitDirection, this.randomDirectionAmount, unitDirection);\n        direction.set(unitDirection.x * dirSinA, unitDirection.y * dirSinA, -dirCosA);\n        break;\n      case ConeEmitType.Volume:\n        ShapeUtils.randomPointInsideUnitCircle(unitPosition, rand);\n        position.set(unitPosition.x * this.radius, unitPosition.y * this.radius, 0);\n\n        direction.set(unitPosition.x * dirSinA, unitPosition.y * dirSinA, -dirCosA);\n        direction.normalize();\n\n        const distance = ConeShape._tempVector30;\n        Vector3.scale(direction, this.length * rand.random(), distance);\n        position.add(distance);\n\n        const randomDirection = ConeShape._tempVector31;\n        ShapeUtils._randomPointUnitSphere(randomDirection, rand);\n        Vector3.lerp(direction, randomDirection, this.randomDirectionAmount, direction);\n        break;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _getDirectionRange(outMin: Vector3, outMax: Vector3): void {\n    let radian = 0;\n    switch (this.emitType) {\n      case ConeEmitType.Base:\n        radian = MathUtil.degreeToRadian(this._angle);\n\n        break;\n      case ConeEmitType.Volume:\n        const randomRadian = MathUtil.degreeToRadian((180 - this._angle) * this.randomDirectionAmount + this._angle);\n        radian = Math.sin(randomRadian);\n        break;\n    }\n\n    const dirSin = Math.sin(radian);\n    outMin.set(-dirSin, -dirSin, -1);\n    outMax.set(dirSin, dirSin, 0);\n  }\n\n  /**\n   * @internal\n   */\n  _getPositionRange(outMin: Vector3, outMax: Vector3): void {\n    const { radius } = this;\n\n    switch (this.emitType) {\n      case ConeEmitType.Base:\n        outMin.set(-radius, -radius, 0);\n        outMax.set(radius, radius, 0);\n        break;\n      case ConeEmitType.Volume:\n        const { length } = this;\n        const dirSin = Math.sin(MathUtil.degreeToRadian(this._angle));\n        outMin.set(-radius - dirSin * length, -radius - dirSin * length, -length);\n        outMax.set(radius + dirSin * length, radius + dirSin * length, 0);\n        break;\n    }\n  }\n}\n\n/**\n * Cone emitter type.\n */\nexport enum ConeEmitType {\n  /** Emit particles from the base of the cone. */\n  Base,\n  /** Emit particles from the volume of the cone. */\n  Volume\n}\n","import { Rand, Vector3 } from \"@galacean/engine-math\";\nimport { BaseShape } from \"./BaseShape\";\nimport { ShapeUtils } from \"./ShapeUtils\";\nimport { ParticleShapeType } from \"./enums/ParticleShapeType\";\n\n/**\n * Particle shape that emits particles from a hemisphere.\n */\nexport class HemisphereShape extends BaseShape {\n  readonly shapeType = ParticleShapeType.Hemisphere;\n\n  private _radius = 1.0;\n\n  /**\n   * Radius of the shape to emit particles from.\n   */\n  get radius(): number {\n    return this._radius;\n  }\n\n  set radius(value: number) {\n    if (value !== this._radius) {\n      this._radius = value;\n      this._updateManager.dispatch();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _generatePositionAndDirection(rand: Rand, emitTime: number, position: Vector3, direction: Vector3): void {\n    ShapeUtils._randomPointInsideUnitSphere(position, rand);\n    position.scale(this.radius);\n\n    const z = position.z;\n    z > 0.0 && (position.z = -z);\n\n    ShapeUtils._randomPointUnitSphere(direction, rand);\n    Vector3.lerp(position, direction, this.randomDirectionAmount, direction);\n  }\n\n  /**\n   * @internal\n   */\n  _getDirectionRange(outMin: Vector3, outMax: Vector3): void {\n    const randomDir = Math.sin(0.5 * this.randomDirectionAmount * Math.PI);\n    outMin.set(-1, -1, -1);\n    outMax.set(1, 1, randomDir);\n  }\n\n  /**\n   * @internal\n   */\n  _getPositionRange(outMin: Vector3, outMax: Vector3): void {\n    const radius = this._radius;\n    outMin.set(-radius, -radius, -radius);\n    outMax.set(radius, radius, 0);\n  }\n}\n","import { Rand, Vector3 } from \"@galacean/engine-math\";\nimport { BaseShape } from \"./BaseShape\";\nimport { ShapeUtils } from \"./ShapeUtils\";\nimport { ParticleShapeType } from \"./enums/ParticleShapeType\";\n\n/**\n * Particle shape that emits particles from a sphere.\n */\nexport class SphereShape extends BaseShape {\n  readonly shapeType = ParticleShapeType.Sphere;\n\n  private _radius = 1.0;\n\n  /**\n   * Radius of the shape to emit particles from.\n   */\n  get radius(): number {\n    return this._radius;\n  }\n\n  set radius(value: number) {\n    if (value !== this._radius) {\n      this._radius = value;\n      this._updateManager.dispatch();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _generatePositionAndDirection(rand: Rand, emitTime: number, position: Vector3, direction: Vector3): void {\n    ShapeUtils._randomPointInsideUnitSphere(position, rand);\n    position.scale(this.radius);\n\n    ShapeUtils._randomPointUnitSphere(direction, rand);\n    Vector3.lerp(position, direction, this.randomDirectionAmount, direction);\n  }\n\n  /**\n   * @internal\n   */\n  _getDirectionRange(outMin: Vector3, outMax: Vector3): void {\n    outMin.set(-1, -1, -1);\n    outMax.set(1, 1, 1);\n  }\n\n  /**\n   * @internal\n   */\n  _getPositionRange(outMin: Vector3, outMax: Vector3): void {\n    const radius = this._radius;\n    outMin.set(-radius, -radius, -radius);\n    outMax.set(radius, radius, radius);\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { Material } from \"../material/Material\";\nimport { BlendFactor, Shader } from \"../shader\";\nimport FRAG_SHADER from \"./trail.fs.glsl\";\nimport VERT_SHADER from \"./trail.vs.glsl\";\n\nShader.create(\"trail\", VERT_SHADER, FRAG_SHADER);\n\nexport class TrailMaterial extends Material {\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"trail\"));\n\n    const target = this.renderState.blendState.targetBlendState;\n    target.enabled = true;\n    target.sourceColorBlendFactor = target.sourceAlphaBlendFactor = BlendFactor.SourceAlpha;\n    target.destinationColorBlendFactor = target.destinationAlphaBlendFactor = BlendFactor.One;\n\n    this.renderState.depthState.writeEnabled = false;\n  }\n}\n","import { Matrix, Quaternion, Vector3 } from \"@galacean/engine-math\";\nimport { Entity } from \"../Entity\";\nimport { RenderContext } from \"../RenderPipeline/RenderContext\";\nimport { Buffer } from \"../graphic/Buffer\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { BufferUsage } from \"../graphic/enums/BufferUsage\";\nimport { MeshTopology } from \"../graphic/enums/MeshTopology\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { BufferMesh } from \"../mesh/BufferMesh\";\nimport { MeshRenderer } from \"../mesh/MeshRenderer\";\nimport { Texture2D } from \"../texture\";\nimport { TrailMaterial } from \"./TrailMaterial\";\n\nconst _tempVector3 = new Vector3();\n\n/**\n * @deprecated\n */\nexport class TrailRenderer extends MeshRenderer {\n  private _vertexStride: number;\n  private _vertices: Float32Array;\n  private _vertexBuffer: Buffer;\n  private _stroke;\n  private _minSeg;\n  private _lifetime;\n  private _maxPointNum;\n  private _points: Array<Vector3>;\n  private _pointStates: Array<number>;\n  private _strapPoints: Array<Vector3>;\n  private _curPointNum;\n  private _prePointsNum;\n  /**\n   * @deprecated\n   */\n  constructor(entity: Entity, props: any) {\n    super(entity);\n\n    this._stroke = props.stroke || 0.2;\n    this._minSeg = props.minSeg || 0.02;\n    this._lifetime = props.lifetime || 1000;\n    this._maxPointNum = (this._lifetime / 1000.0) * entity.engine.targetFrameRate;\n\n    this._points = [];\n    this._pointStates = [];\n    this._strapPoints = [];\n    for (let i = 0; i < this._maxPointNum; i++) {\n      this._points.push(new Vector3());\n      this._pointStates.push(this._lifetime);\n\n      this._strapPoints.push(new Vector3());\n      this._strapPoints.push(new Vector3());\n    }\n    this._curPointNum = 0;\n\n    const mtl = props.material || new TrailMaterial(this.engine);\n    this.setMaterial(mtl);\n\n    this.setTexture(props.texture);\n    this._initGeometry();\n  }\n\n  /**\n   * @internal\n   */\n  override update(deltaTime: number) {\n    let mov = 0,\n      newIdx = 0;\n    for (let i = 0; i < this._curPointNum; i++) {\n      this._pointStates[i] -= deltaTime;\n      if (this._pointStates[i] < 0) {\n        mov++;\n      } else if (mov > 0) {\n        newIdx = i - mov;\n\n        // Move data\n        this._pointStates[newIdx] = this._pointStates[i];\n\n        // Move point\n        this._points[newIdx].copyFrom(this._points[i]);\n      }\n    }\n    this._curPointNum -= mov;\n\n    let appendNewPoint = true;\n    if (this._curPointNum === this._maxPointNum) {\n      appendNewPoint = false;\n    } else if (this._curPointNum > 0) {\n      const lastPoint = this._points[this._points.length - 1];\n      if (Vector3.distance(this.entity.transform.worldPosition, lastPoint) < this._minSeg) {\n        appendNewPoint = false;\n      } else {\n        // debugger\n      }\n    }\n\n    if (appendNewPoint) {\n      this._pointStates[this._curPointNum] = this._lifetime;\n      this._points[this._curPointNum].copyFrom(this.entity.transform.worldPosition);\n\n      this._curPointNum++;\n    }\n  }\n\n  /**\n   * @deprecated\n   * Set trail texture.\n   * @param texture\n   */\n  setTexture(texture: Texture2D) {\n    if (texture) {\n      this.getMaterial().shaderData.setTexture(\"u_texture\", texture);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  protected override _render(context: RenderContext): void {\n    this._updateStrapVertices(context.camera, this._points);\n    this._updateStrapCoords();\n    this._vertexBuffer.setData(this._vertices);\n\n    super._render(context);\n  }\n\n  private _initGeometry() {\n    const mesh = new BufferMesh(this._entity.engine);\n\n    const vertexStride = 20;\n    const vertexCount = this._maxPointNum * 2;\n    const vertexFloatCount = vertexCount * vertexStride;\n    const vertices = new Float32Array(vertexFloatCount);\n    const vertexElements = [\n      new VertexElement(\"POSITION\", 0, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"TEXCOORD_0\", 12, VertexElementFormat.Vector2, 0)\n    ];\n    const vertexBuffer = new Buffer(this.engine, vertexFloatCount * 4, BufferUsage.Dynamic);\n\n    mesh.setVertexBufferBinding(vertexBuffer, vertexStride);\n    mesh.setVertexElements(vertexElements);\n    mesh.addSubMesh(0, vertexCount, MeshTopology.TriangleStrip);\n\n    this._vertexBuffer = vertexBuffer;\n    this._vertexStride = vertexStride;\n    this._vertices = vertices;\n    this.mesh = mesh;\n  }\n\n  private _updateStrapVertices(camera, points: Array<Vector3>) {\n    const m: Matrix = camera.viewMatrix;\n    const e = m.elements;\n    const vx = new Vector3(e[0], e[4], e[8]);\n    const vy = new Vector3(e[1], e[5], e[9]);\n    const vz = new Vector3(e[2], e[6], e[10]);\n    const s = this._stroke;\n\n    vy.scale(s);\n\n    const up = new Vector3();\n    const down = new Vector3();\n\n    const rotation = new Quaternion();\n\n    Vector3.transformByQuat(vx, rotation, vx);\n    Vector3.transformByQuat(vy, rotation, vy);\n\n    const dy = new Vector3();\n    const cross = new Vector3();\n    const perpVector = new Vector3();\n\n    vx.normalize();\n\n    const vertices = this._vertices;\n    //-- quad pos\n    for (let i = 0; i < this._maxPointNum; i++) {\n      //-- center pos\n      if (i < this._curPointNum) {\n        const p = points[i];\n\n        if (i === this._curPointNum - 1 && i !== 0) {\n          Vector3.subtract(p, points[i - 1], perpVector);\n        } else {\n          Vector3.subtract(points[i + 1], p, perpVector);\n        }\n\n        this._projectOnPlane(perpVector, vz, perpVector);\n        perpVector.normalize();\n\n        // Calculate angle between vectors\n        let angle = Math.acos(Vector3.dot(vx, perpVector));\n        Vector3.cross(vx, perpVector, cross);\n        if (Vector3.dot(cross, vz) <= 0) {\n          angle = Math.PI * 2 - angle;\n        }\n        Quaternion.rotationAxisAngle(vz, angle, rotation);\n        Vector3.transformByQuat(vy, rotation, dy);\n\n        Vector3.add(p, dy, up);\n        Vector3.subtract(p, dy, down);\n      }\n\n      const p0 = (i * 2 * this._vertexStride) / 4;\n      const p1 = ((i * 2 + 1) * this._vertexStride) / 4;\n      vertices[p0] = up.x;\n      vertices[p0 + 1] = up.y;\n      vertices[p0 + 2] = up.z;\n\n      vertices[p1] = down.x;\n      vertices[p1 + 1] = down.y;\n      vertices[p1 + 2] = down.z;\n    }\n  }\n\n  private _updateStrapCoords() {\n    if (this._prePointsNum === this._curPointNum) {\n      return;\n    }\n\n    this._prePointsNum = this._curPointNum;\n\n    const count = this._curPointNum;\n    const texDelta = 1.0 / count;\n    const vertices = this._vertices;\n    for (let i = 0; i < count; i++) {\n      const d = 1.0 - i * texDelta;\n      const p0 = (i * 2 * this._vertexStride) / 4;\n      const p1 = ((i * 2 + 1) * this._vertexStride) / 4;\n\n      vertices[p0] = 0;\n      vertices[p0 + 1] = d;\n\n      vertices[p1] = 1.0;\n      vertices[p1 + 1] = d;\n    }\n  }\n\n  private _projectOnVector(a: Vector3, p: Vector3, out: Vector3): void {\n    const n_p = p.clone();\n    Vector3.normalize(n_p, n_p);\n    const cosine = Vector3.dot(a, n_p);\n    out.x = n_p.x * cosine;\n    out.y = n_p.y * cosine;\n    out.z = n_p.z * cosine;\n  }\n\n  private _projectOnPlane(a: Vector3, n: Vector3, out: Vector3) {\n    this._projectOnVector(a, n, _tempVector3);\n    Vector3.subtract(a, _tempVector3, out);\n  }\n}\n","import { Camera } from \"../Camera\";\nimport { Layer } from \"../Layer\";\nimport { Script } from \"../Script\";\nimport { RenderBufferDepthFormat, Texture, Texture2D, TextureCube } from \"../texture\";\nimport { RenderTarget } from \"../texture/RenderTarget\";\n\n/**\n * Environmental probes, providing necessary capabilities such as reflection and refraction.\n * @example\n * ```ts\n * const probe = cameraEntity.addComponent( CubeProbe )\n * probe.onTextureChange = cubeTexture => {\n *   envLight.specularTexture = cubeTexture;\n *   skybox.specularTexture = cubeTexture;\n * }\n * ```\n */\nexport abstract class Probe extends Script {\n  /**\n   * Probe's layer, render everything by default.\n   */\n  probeLayer: Layer = Layer.Everything;\n\n  /**\n   * The width of the probe rendering target.\n   */\n  width: number = 1024;\n\n  /**\n   * The height of the probe rendering target.\n   */\n  height: number = 1024;\n\n  /**\n   * When using WebGL2, you can turn on MSAA at the hardware layer.\n   */\n  antiAliasing: number = 1;\n\n  /**\n   * Whether the probe is rendered to the cube color texture.\n   */\n  protected readonly _isCube: boolean = false;\n\n  private _oriCameraRenderTarget: RenderTarget;\n  private _renderTarget: RenderTarget;\n  private _renderTargetSwap: RenderTarget;\n  private _activeRenderTarget: RenderTarget;\n  private _camera: Camera;\n  private _oriCameraCullingMask: Layer;\n\n  private get _texture(): Texture {\n    return this._activeRenderTarget?.getColorTexture();\n  }\n\n  /**\n   * Provide hooks for users to exchange Texture.\n   * @remarks Prevent issue: Feedback Loops Between Textures and the Framebuffer.\n   */\n  onTextureChange(renderColorTexture: Texture) {}\n\n  override onBeginRender(camera: Camera): void {\n    if (!this.enabled) return;\n    this._camera = camera;\n    this._oriCameraCullingMask = camera.cullingMask;\n    camera.cullingMask = this.probeLayer;\n    if (\n      !this._activeRenderTarget ||\n      this._activeRenderTarget.width !== this.width ||\n      this._activeRenderTarget.height !== this.height ||\n      this._activeRenderTarget.antiAliasing !== this.antiAliasing\n    ) {\n      this._renderTarget = new RenderTarget(\n        this.engine,\n        this.width,\n        this.height,\n        this._isCube ? new TextureCube(this.engine, this.width) : new Texture2D(this.engine, this.width, this.height),\n        RenderBufferDepthFormat.Depth,\n        this.antiAliasing\n      );\n\n      this._renderTargetSwap = new RenderTarget(\n        this.engine,\n        this.width,\n        this.height,\n        this._isCube ? new TextureCube(this.engine, this.width) : new Texture2D(this.engine, this.width, this.height),\n        RenderBufferDepthFormat.Depth,\n        this.antiAliasing\n      );\n\n      this._activeRenderTarget = this._renderTarget;\n    }\n\n    this._oriCameraRenderTarget = camera.renderTarget;\n    camera.renderTarget = this._activeRenderTarget;\n  }\n\n  override onEndRender(camera: Camera): void {\n    if (!this.enabled) return;\n\n    this.onTextureChange && this.onTextureChange(this._texture);\n\n    this._activeRenderTarget =\n      this._activeRenderTarget === this._renderTarget ? this._renderTargetSwap : this._renderTarget;\n  }\n\n  protected _reset(): void {\n    if (!this.enabled) return;\n    this._camera.renderTarget = this._oriCameraRenderTarget;\n    this._camera.cullingMask = this._oriCameraCullingMask;\n  }\n}\n","import { Matrix, Vector3 } from \"@galacean/engine-math\";\nimport { Camera } from \"../Camera\";\nimport { TextureCubeFace } from \"../texture\";\nimport { Probe } from \"./Probe\";\n\nconst cacheTarget: Vector3 = new Vector3();\nconst cacheUp: Vector3 = new Vector3();\nconst cacheDir: Vector3 = new Vector3();\n\n/**\n * Cube probe, generate cubeTexture, used for dynamic environment reflection and other effects.\n */\nexport class CubeProbe extends Probe {\n  /**\n   * The position of the probe can be set, the default is the origin [0,0,0].\n   */\n  position: Vector3 = new Vector3(0, 0, 0);\n\n  /** @internal */\n  protected override readonly _isCube: boolean = true;\n\n  private oriViewMatrix = new Matrix();\n  private _oriFieldOfView: number;\n\n  override onBeginRender(camera: Camera): void {\n    if (!this.enabled) return;\n    super.onBeginRender(camera);\n    this._storeCamera(camera);\n\n    // Render 6 faces\n    for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n      // Change camera parameters\n      this._setCamera(faceIndex, camera);\n      camera.render(TextureCubeFace.PositiveX + faceIndex);\n    }\n\n    this._restoreCamera(camera);\n    super._reset();\n  }\n\n  /**\n   * Store original camera parameters.\n   */\n  private _storeCamera(camera: Camera) {\n    this.oriViewMatrix.copyFrom(camera.viewMatrix);\n    this._oriFieldOfView = camera.fieldOfView;\n  }\n\n  /**\n   * Restore camera parameters.\n   */\n  private _restoreCamera(camera: Camera) {\n    camera.viewMatrix.copyFrom(this.oriViewMatrix);\n    camera.fieldOfView = this._oriFieldOfView;\n  }\n\n  /**\n   * Set camera parameters according to the rendering surface.\n   */\n  private _setCamera(faceIndex: number, camera: Camera) {\n    switch (faceIndex) {\n      // positive_x\n      case 0:\n        cacheUp.set(0, -1, 0);\n        cacheDir.set(1, 0, 0);\n        break;\n      // negative_x\n      case 1:\n        cacheUp.set(0, -1, 0);\n        cacheDir.set(-1, 0, 0);\n        break;\n      // positive_y\n      case 2:\n        cacheUp.set(0, 0, 1);\n        cacheDir.set(0, 1, 0);\n        break;\n      // negative_y\n      case 3:\n        cacheUp.set(0, 0, -1);\n        cacheDir.set(0, -1, 0);\n        break;\n      // positive_z\n      case 4:\n        cacheUp.set(0, -1, 0);\n        cacheDir.set(0, 0, 1);\n        break;\n      // negative_z\n      case 5:\n        cacheUp.set(0, -1, 0);\n        cacheDir.set(0, 0, -1);\n        break;\n    }\n\n    Vector3.add(this.position, cacheDir, cacheTarget);\n    Matrix.lookAt(this.position, cacheTarget, cacheUp, camera.viewMatrix);\n    camera.fieldOfView = 90;\n  }\n}\n"],"names":["Platform","CharRenderInfo","localPositions","Vector4","dispose","texture","uvs","triangles","CloneMode","ignoreClone","target","propertyKey","CloneManager","registerCloneMode","Ignore","assignmentClone","Assignment","shallowClone","Shallow","deepClone","Deep","mode","targetMap","_subCloneModeMap","get","constructor","Object","create","set","getCloneMode","type","cloneModes","_cloneModeMap","objectType","_objectType","cloneModeMap","subCloneModes","assign","getPrototypeOf","cloneProperty","source","k","cloneMode","srcRoot","targetRoot","deepInstanceMap","sourceProperty","undefined","Uint8Array","Uint16Array","Uint32Array","Int8Array","Int16Array","Int32Array","Float32Array","Float64Array","targetPropertyT","length","slice","Array","targetPropertyA","i","targetProperty","copyFrom","_cloneTo","deepCloneObject","Map","EngineObject","engine","instanceId","_instanceIdCounter","_destroyed","_engine","destroy","_onDestroy","resourceManager","_deleteAsset","_deleteContentRestorer","destroyed","ReferResource","isGCIgnored","_refCount","_superResources","_addReferResource","force","isGC","superResources","n","refCount","_associationSuperResource","superResource","push","_disassociationSuperResource","index","indexOf","splice","_getReferCount","_addReferCount","value","_addToResourceManager","path","_addAsset","_deleteReferResource","ContentRestorer","resource","RenderBufferDepthFormat","TextureCubeFace","TextureDepthCompareFunction","TextureFilterMode","TextureFormat","TextureUsage","TextureWrapMode","GraphicsResource","_isContentLost","_addGraphicResource","_deleteGraphicResource","isContentLost","noop","message","optionalParams","debug","console","log","bind","info","warn","error","Logger","isEnabled","enable","disable","Texture","_isDepthTexture","_anisoLevel","_useDepthCompareMode","generateMipmaps","_mipmap","_platformTexture","_setUseDepthCompareMode","setUseDepthCompareMode","_rebuild","platformTexture","wrapModeU","_wrapModeU","wrapModeV","_wrapModeV","filterMode","_filterMode","anisoLevel","_hardwareRenderer","_isWebGL2","depthCompareFunction","_depthCompareFunction","_getMaxMiplevel","size","Math","floor","log2","_getMipmapCount","max","_width","_height","_isIntFormat","R32G32B32A32_UInt","_format","format","width","height","usage","_usage","mipmapCount","_mipmapCount","Point","capability","maxAnisoLevel","RenderTarget","renderTexture","depth","antiAliasing","Depth","_depthFormat","_autoGenerateMipmaps","_depthTexture","_antiAliasing","_depth","colorTextures","colorTexture","_colorTextures","_platformRenderTarget","createPlatformRenderTarget","getColorTexture","_blitRenderTarget","blitRenderTarget","autoGenerateMipmaps","colorTextureCount","depthTexture","Texture2D","mipmap","R8G8B8A8","Static","DepthStencil","Depth16","Depth24","Depth32","Depth24Stencil8","Depth32Stencil8","createPlatformTexture2D","Bilinear","Repeat","setPixelBuffer","colorBuffer","mipLevel","x","y","setImageSource","imageSource","flipY","premultiplyAlpha","getPixelBuffer","xOrMipLevelOrOut","yOrMipLevel","mipLevelOrOut","out","argsLength","arguments","Texture2DArray","_length","createPlatformTexture2DArray","offsetIndex","elementIndex","TextureCube","createPlatformTextureCube","Clamp","face","FontAtlas","_charInfoMap","_space","_curX","_curY","_nextY","uploadCharTexture","charInfo","w","h","data","space","textureSize","offsetWidth","offsetHeight","Error","endX","endY","bufferOffset","Vector2","textureSizeReciprocal","u0","u1","v0","v1","addCharInfo","char","charCodeAt","getCharInfo","FontStyle","OverflowMode","TextUtils","textContext","_textContext","canvas","OffscreenCanvas","document","createElement","context","getContext","willReadFrequently","measureFont","fontString","fontSizeInfoCache","_fontSizeInfoCache","_measureFontOrChar","_measureString","getNativeFontString","fontName","fontSize","style","str","Bold","Italic","test","_genericFontFamilies","measureChar","measureTextWithWrap","renderer","subFont","_getSubFont","nativeFontString","fontSizeInfo","subTexts","text","split","lines","lineWidths","lineMaxSizes","pixelsPerUnit","Engine","_pixelsPerUnit","lineHeight","lineSpacing","wrapWidth","textWidth","subText","_pushLine","word","wordWidth","wordMaxAscent","wordMaxDescent","line","lineWidth","lineMaxAscent","lineMaxDescent","notFirstLine","j","m","_getCharInfo","charCode","isSpace","unableFromWord","offsetY","halfH","ascent","descent","xAdvance","overflowMode","Overflow","measureTextWithoutWrap","textCount","curWidth","maxAscent","maxDescent","getNativeFontHash","measureString","isChar","font","measureText","actualBoundingBoxLeft","actualBoundingBoxRight","actualWidth","round","abs","baseline","ceil","_measureBaseline","_heightMultiplier","_baselineMultiplier","_extendHeight","fillStyle","clearRect","textBaseline","fillText","colorData","getImageData","len","top","bottom","integerW","integerWReciprocal","idx","lineIntegerW","buffer","offsetX","_uploadCharTexture","_addCharInfo","SubFont","_fontAtlases","_lastIndex","fontAtlases","lastIndex","_createFontAtlas","fontAtlas","_getTextureByIndex","_getLastIndex","addContentRestorer","restoreContent","charInfoMap","Font","name","_name","_subFontMap","fontStyle","key","subFontMap","_fontMap","createFromOS","fontMap","SpriteMaskInteraction","TextHorizontalAlignment","TextVerticalAlignment","SpriteAtlas","_sprites","_spriteNamesToIndex","getSprite","sprite","getSprites","outSprites","_addSprite","_atlas","sprites","SpriteDrawMode","SpriteTileMode","Utils","removeFromArray","array","item","last","end","decodeText","TextDecoder","decode","s","il","String","fromCharCode","decodeURIComponent","encodeURIComponent","isAbsoluteUrl","url","isBase64Url","objectValues","obj","keys","map","resolveAbsoluteUrl","baseUrl","relativeUrl","fileSchema","URL","href","substring","_floatMatrixMultiply","left","re","rOffset","oe","offset","le","elements","l11","l12","l13","l14","l21","l22","l23","l24","l31","l32","l33","l34","l41","l42","l43","l44","r11","r12","r13","r14","r21","r22","r23","r24","r31","r32","r33","r34","r41","r42","r43","r44","_reflectGet","pathArr","_stringToPath","object","_quickSort","a","from","to","compareFunc","_insertionSort","third_index","v2","c01","tmp","c02","c12","pivot","low_end","high_start","partition","element","order","top_elem","string","result","charCodeOfDot","replace","rePropName","match","expression","quote","subString","reEscapeChar","trim","RegExp","UpdateFlagManager","_updateFlags","_listeners","createFlag","flag","addFlag","_flagManagers","removeFlag","success","addListener","listener","removeListener","dispatch","param","updateFlags","listeners","SpriteModifyFlags","Sprite","region","border","_automaticWidth","_automaticHeight","_customWidth","_customHeight","_positions","_uvs","_bounds","BoundingBox","_texture","_atlasRotated","_atlasRegion","Rect","_atlasRegionOffset","_region","_pivot","_border","_dirtyUpdateFlag","_updateFlagManager","_onRegionChange","_onPivotChange","_onBorderChange","_onValueChanged","clone","cloneSprite","_getPositions","_updatePositions","_getUVs","_updateUVs","_getBounds","_dispatchSpriteChange","_calDefaultSize","pixelsPerUnitReciprocal","z","blank","regionX","regionW","regionH","regionRight","regionBottom","regionY","right","positions","min","uv","atlasRegionOffset","atlasRegionX","atlasRegionW","atlasRegionH","offsetLeft","offsetRight","offsetBottom","realWidth","realHeight","offsetTop","atlasRegionY","borderLeft","borderRight","borderTop","borderBottom","atlasRegion","SpriteUpdateFlags","MathUtil","clamp","atlasRotated","BlendFactor","BlendOperation","ColorWriteMask","CompareFunction","CullMode","RenderStateElementKey","RenderQueueType","ShaderPropertyType","StencilOperation","ShaderPlatformTarget","ShaderMacro","maskIndex","maskValue","_maskIndex","_maskValue","macroNameIDMap","_macroNameIdMap","nameID","_macroNameCounter","_nameId","getByName","macro","_macroMap","maskMap","_macroMaskMap","counter","_macroCounter","bit","_getMacrosElements","macros","mask","_mask","subMaskMap","subMask","ShaderMacroCollection","maskStart","endIndex","newValue","unionCollection","macroCollection","addMask","addSize","maskSize","complementaryCollection","removeMask","intersectionCollection","unionMask","isEnable","clear","outMask","minSize","maxSize","minMask","maxMask","PipelineStage","EventDispatcher","_events","_eventCount","hasEvent","event","eventNames","listenerCount","isArray","count","pool","_dispatchingListenersPool","dispatchingListeners","pop","once","off","fn","on","_addEventListener","_clearEvent","removeEventListener","removeAllEventListeners","events","ShaderProperty","_uniqueId","_propertyNameCounter","propertyNameMap","_propertyNameMap","property","_propertyIdMap","_getShaderPropertyGroup","propertyName","shaderProperty","_group","_type","Time","_frameCount","_deltaTime","_actualDeltaTime","_elapsedTime","_actualElapsedTime","_elapsedTimeValue","_deltaTimeValue","maximumDeltaTime","timeScale","_lastSystemTime","performance","now","_reset","_update","currentSystemTime","actualDeltaTime","deltaTime","_updateSceneShaderData","shaderData","elapsedTimeValue","deltaTimeValue","time","sin","cos","setVector4","_elapsedTimeProperty","_deltaTimeProperty","frameCount","elapsedTime","actualElapsedTime","DataType","GLCapabilityType","pbr_frag_define","pbr_helper","brdf","direct_irradiance_frag_define","ibl_frag_define","pbr_frag","ShadowCoord","ShadowFragmentDeclaration","shadow_sample_tent","ShadowVertexDeclaration","ShadowVertex","particle_common","velocity_over_lifetime_module","rotation_over_lifetime_module","size_over_lifetime_module","color_over_lifetime_module","texture_sheet_animation_module","sphere_billboard","stretched_billboard","vertical_billboard","horizontal_billboard","particle_mesh","ShaderLib","common","common_vert","transform_declare","camera_declare","color_share","normal_share","uv_share","worldpos_share","FogVertexDeclaration","FogFragmentDeclaration","begin_normal_vert","begin_position_vert","position_vert","color_vert","normal_vert","skinning_vert","blendShape_input","blendShape_vert","uv_vert","worldpos_vert","FogVertex","light_frag_define","mobile_material_frag","FogFragment","begin_mobile_frag","begin_viewdir_frag","mobile_blinnphong_frag","noise_common","noise_cellular_2D","noise_cellular_2x2","noise_cellular_2x2x2","noise_cellular_3D","noise_cellular","noise_perlin_2D","noise_perlin_3D","noise_perlin_4D","noise_perlin","noise_psrd_2D","noise_simplex_2D","noise_simplex_3D_grad","noise_simplex_3D","noise_simplex_4D","noise_simplex","ShadowLib","PBRShaderLib","normal_get","ParticleShaderLib","ShaderFactory","parseCustomMacros","join","registerInclude","includeName","includeSource","unRegisterInclude","parseIncludes","src","regex","convertTo300","shader","isFrag","_has300Output","isMRT","_replaceMRTShader","fragmentShader","_has300OutInFragReg","declaration","mrtIndexSet","Set","res","add","forEach","_shaderExtension","e","ShaderTagKey","_nameCounter","nameMap","_nameMap","ShaderPart","_tagsMap","setTag","keyOrKeyName","tags","deleteTag","getTagValue","ColorSpace","ShaderUniform","textureUseCompareMode","rhi","_rhi","_gl","gl","_colorSpace","settings","colorSpace","upload1f","shaderUniform","cacheValue","uniform1f","location","upload1fv","uniform1fv","upload2f","r","g","Linear","uniform2f","Color","gammaToLinearSpace","upload2fv","uniform2fv","upload3f","b","uniform3f","upload3fv","uniform3fv","upload4f","uniform4f","upload4fv","uniform4fv","upload1i","uniform1i","upload1iv","uniform1iv","upload2i","uniform2i","upload2iv","uniform2iv","upload3i","uniform3i","upload3iv","uniform3iv","upload4i","uniform4i","upload4iv","uniform4iv","uploadMat4","uniformMatrix4fv","uploadMat4v","uploadTexture","activeTexture","textureIndex","bindTexture","uploadTextureArray","textureIndices","ShaderUniformBlock","constUniforms","textureUniforms","ShaderDataGroup","ShaderProgram","vertexSource","fragmentSource","sceneUniformBlock","cameraUniformBlock","rendererUniformBlock","materialUniformBlock","renderElementUniformBlock","otherUniformBlock","_uploadRenderCount","_uploadSceneId","_uploadCameraId","_uploadRendererId","_uploadMaterialId","attributeLocation","_activeTextureUint","_glProgram","_createProgram","_isValid","_recordLocation","id","_counter","uploadAll","uniformBlock","uploadUniforms","uploadTextures","propertyValueMap","_propertyValueMap","uniform","propertyId","applyFunc","textureDefault","uploadUnGroupTextures","groupingOtherUniformBlock","_groupingSubOtherUniforms","_currentBindShaderProgram","useProgram","deleteProgram","uniforms","isTexture","group","_groupingUniform","Scene","Camera","Renderer","Material","RenderElement","vertexShader","_createShader","VERTEX_SHADER","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","validateProgram","deleteShader","getProgramParameter","LINK_STATUS","isContextLost","getError","VALIDATE_STATUS","getProgramInfoLog","shaderType","shaderSource","createShader","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","_addLineNum","uniformInfos","_getUniformInfos","attributeInfos","_getAttributeInfos","basicResources","_basicResources","substr","getUniformLocation","FLOAT","FLOAT_VEC2","FLOAT_VEC3","Vector3","FLOAT_VEC4","BOOL","INT","BOOL_VEC2","INT_VEC2","BOOL_VEC3","INT_VEC3","BOOL_VEC4","INT_VEC4","FLOAT_MAT4","SAMPLER_2D","SAMPLER_CUBE","UNSIGNED_INT_SAMPLER_2D","SAMPLER_2D_ARRAY","SAMPLER_2D_SHADOW","defaultTexture","whiteTexture2D","whiteTextureCube","uintWhiteTexture2D","whiteTexture2DArray","_depthTexture2D","defaultTextures","glTextureIndices","TEXTURE0","glTextureIndex","getAttribLocation","uniformCount","ACTIVE_UNIFORMS","getActiveUniform","attributeCount","ACTIVE_ATTRIBUTES","getActiveAttrib","limitLength","toString","prefix","isValid","ShaderType","ShaderPass","nameOrVertexSource","vertexSourceOrFragmentSourceOrCode","fragmentSourceOrTagsOrVertexEntry","fragmentEntryOrTags","_shaderPassId","_renderStateDataMap","_shaderProgramPools","_path","_platformMacros","_shaderPassCounter","Canonical","_shaderLabSource","_vertexEntry","_fragmentEntry","pipelineStage","Forward","ShaderLab","_vertexSource","_fragmentSource","_getShaderProgram","shaderProgramPool","_getShaderProgramPool","shaderProgram","_getCanonicalShaderProgram","_compileShaderProgram","cache","_destroy","shaderProgramPools","vertexEntry","fragmentEntry","platformMacros","isWebGL2","canIUse","shaderTextureLod","standardDerivatives","start","shaderProgramSource","Shader","_shaderLab","_parseShaderPass","GLES300","GLES100","_shaderRootPath","vertex","fragment","macroNameList","macroNameStr","versionStr","graphicAPI","precisionStr","SubShader","passes","passCount","_passes","RenderTargetBlendState","enabled","colorBlendOperation","Add","alphaBlendOperation","sourceColorBlendFactor","One","sourceAlphaBlendFactor","destinationColorBlendFactor","Zero","destinationAlphaBlendFactor","colorWriteMask","All","BlendState","targetBlendState","blendColor","alphaToCoverage","_applyShaderDataValue","renderStateDataMap","blendState","enable0Property","BlendStateEnabled0","getFloat","colorBlendOperation0Property","BlendStateColorBlendOperation0","alphaBlendOperation0Property","BlendStateAlphaBlendOperation0","sourceColorBlendFactor0Property","BlendStateSourceColorBlendFactor0","sourceAlphaBlendFactor0Property","BlendStateSourceAlphaBlendFactor0","destinationColorBlendFactor0Property","BlendStateDestinationColorBlendFactor0","destinationAlphaBlendFactor0Property","BlendStateDestinationAlphaBlendFactor0","colorWriteMask0Property","BlendStateColorWriteMask0","blendColorProperty","BlendStateBlendColor","getColor","alphaToCoverageProperty","BlendStateAlphaToCoverage","_apply","hardwareRenderer","lastRenderState","customStates","_platformApply","lastState","lastTargetBlendState","colorWriteMaskState","BLEND","blendFuncSeparate","_getGLBlendFactor","blendEquationSeparate","_getGLBlendOperation","equals","colorMask","Red","Green","Blue","Alpha","SAMPLE_ALPHA_TO_COVERAGE","blendFactor","ZERO","ONE","SourceColor","SRC_COLOR","OneMinusSourceColor","ONE_MINUS_SRC_COLOR","DestinationColor","DST_COLOR","OneMinusDestinationColor","ONE_MINUS_DST_COLOR","SourceAlpha","SRC_ALPHA","OneMinusSourceAlpha","ONE_MINUS_SRC_ALPHA","DestinationAlpha","DST_ALPHA","OneMinusDestinationAlpha","ONE_MINUS_DST_ALPHA","SourceAlphaSaturate","SRC_ALPHA_SATURATE","BlendColor","CONSTANT_COLOR","OneMinusBlendColor","ONE_MINUS_CONSTANT_COLOR","blendOperation","FUNC_ADD","Subtract","FUNC_SUBTRACT","ReverseSubtract","FUNC_REVERSE_SUBTRACT","Min","blendMinMax","MIN","Max","MAX","DepthState","compareFunction","Less","writeEnabled","enableProperty","DepthStateEnabled","writeEnabledProperty","DepthStateWriteEnabled","compareFunctionProperty","DepthStateCompareFunction","depthState","enabledState","DEPTH_TEST","depthFunc","_getGLCompareFunction","depthMask","Never","NEVER","LESS","Equal","EQUAL","LessEqual","LEQUAL","Greater","GREATER","NotEqual","NOTEQUAL","GreaterEqual","GEQUAL","Always","ALWAYS","RasterState","cullMode","Back","depthBias","slopeScaledDepthBias","_cullFaceEnable","_frontFaceInvert","cullModeProperty","RasterStateCullMode","depthBiasProperty","RasterStateDepthBias","slopeScaledDepthBiasProperty","RasterStateSlopeScaledDepthBias","frontFaceInvert","rasterState","cullModeState","cullFaceEnable","Off","CULL_FACE","cullFace","BACK","FRONT","frontFace","CW","CCW","_enableGlobalDepthBias","POLYGON_OFFSET_FILL","polygonOffset","StencilState","referenceValue","writeMask","compareFunctionFront","compareFunctionBack","passOperationFront","Keep","passOperationBack","failOperationFront","failOperationBack","zFailOperationFront","zFailOperationBack","StencilStateEnabled","referenceValueProperty","StencilStateReferenceValue","maskProperty","StencilStateMask","writeMaskProperty","StencilStateWriteMask","compareFunctionFrontProperty","StencilStateCompareFunctionFront","compareFunctionBackProperty","StencilStateCompareFunctionBack","passOperationFrontProperty","StencilStatePassOperationFront","passOperationBackProperty","StencilStatePassOperationBack","failOperationFrontProperty","StencilStateFailOperationFront","failOperationBackProperty","StencilStateFailOperationBack","zFailOperationFrontProperty","StencilStateZFailOperationFront","zFailOperationBackProperty","StencilStateZFailOperationBack","stencilState","writeMaskState","referenceValueState","compareFunctionFrontState","compareFunctionBackState","passOperationFrontState","passOperationBackState","failOperationFrontState","failOperationBackState","zFailOperationFrontState","zFailOperationBackState","STENCIL_TEST","referenceOrMaskChange","stencilFuncSeparate","stencilOpSeparate","_getGLStencilOperation","stencilMask","KEEP","Replace","REPLACE","IncrementSaturate","INCR","DecrementSaturate","DECR","Invert","INVERT","IncrementWrap","INCR_WRAP","DecrementWrap","DECR_WRAP","RenderState","renderQueueType","Opaque","_applyStates","customRenderStates","_applyStatesByShaderData","_lastRenderState","_renderContext","flipProjection","_applyRenderQueueByShaderData","subShaders","_subShaders","_registerPath","subShader","shaderPass","compileVariant","compileMacros","_compileMacros","_shaderMap","nameOrShaderSource","vertexSourceOrShaderPassesOrSubShaders","shaderMap","shaderContent","_parseShaderContent","subShaderList","subShaderContent","passList","passInfo","isUsePass","paths","find","pass","shaderPassContent","contents","renderStates","constantMap","variableMap","renderState","_renderState","_applyConstRenderStates","parseInt","getMacroByName","getPropertyByName","ShaderData","_macroCollection","getPropertyValue","setFloat","_setPropertyValue","Float","getInt","setInt","Int","getFloatArray","setFloatArray","FloatArray","getIntArray","setIntArray","IntArray","getVector2","setVector2","getVector3","setVector3","getVector4","getMatrix","setMatrix","Matrix","setColor","getTexture","setTexture","lastValue","getTextureArray","setTextureArray","TextureArray","enableMacro","lastMacro","disableMacro","currentMacro","getMacros","macroMap","values","getProperties","properties","propertyIdMap","cloneTo","referCount","targetPropertyValueMap","BatchUtils","canBatchSprite","elementA","elementB","shaderPasses","_disableBatchTag","subChunk","chunk","rendererA","component","rendererB","maskInteractionA","maskInteraction","None","maskLayer","material","canBatchSpriteMask","alphaCutoffProperty","SpriteMask","_alphaCutoffProperty","batchFor2D","indices","subChunkIndices","startIndex","updateIndexLength","subMesh","vertexArea","vertexOffset","updateVertexStart","updateVertexEnd","ActiveChangeFlag","Component","entity","_awoken","_phasedActiveInScene","_phasedActive","_enabled","_entity","_onAwake","_onEnable","_onDisable","_onEnableInScene","_onDisableInScene","_setActive","activeChangeFlag","_isActiveInScene","Hierarchy","_isActiveInHierarchy","_addResourceReferCount","_isTemplate","_removeComponent","isActiveInHierarchy","scene","ComponentsDependencies","_addCheck","dependentInfo","_dependenciesMap","components","dependentComponent","getComponent","addComponent","_removeCheck","invDependencies","_invDependenciesMap","_addDependency","targetInfo","includes","_addInvDependency","currentComponent","dependentComponents","componentOrComponents","dependentMode","DependentMode","UpdateFlag","clearFromManagers","_removeFromManagers","flagManagers","BoolUpdateFlag","Transform","_position","_rotation","_rotationQuaternion","Quaternion","_scale","_worldPosition","_worldRotation","_worldRotationQuaternion","_lossyWorldScale","_localMatrix","_worldMatrix","_worldForward","_worldRight","_worldUp","_isParentDirty","_parentTransformCache","_dirtyFlag","_onPositionChanged","_onWorldPositionChanged","_onRotationChanged","_onWorldRotationChanged","_onRotationQuaternionChanged","_onWorldRotationQuaternionChanged","_onScaleChanged","setPosition","setRotation","setRotationQuaternion","setScale","setWorldPosition","setWorldRotation","setWorldRotationQuaternion","translate","translationOrX","relativeToLocalOrY","relativeToLocal","_tempVec30","_translate","rotate","rotationOrX","_rotateXYZ","rotateByAxis","axis","angle","rad","degreeToRadFactor","rotationAxisAngle","_tempQuat0","_rotateByQuat","lookAt","targetPosition","worldUp","zAxis","subtract","worldPosition","axisLen","zeroTolerance","scale","xAxis","_tempVec31","cross","yAxis","_tempVec32","rotMat","_tempMat41","getRotation","registerWorldChangeFlag","_parentChange","_updateAllWorldFlag","_isFrontFaceInvert","lossyWorldScale","isInvert","_updateWorldPositionFlag","_isContainDirtyFlags","_worldAssociatedChange","nodeChildren","_children","transform","_updateWorldRotationFlag","_updateWorldPositionAndRotationFlag","_updateWorldScaleFlag","_updateWorldPositionAndScaleFlag","_getParentTransform","parentCache","parent","_getScaleMatrix","invRotation","invRotationMat","_tempMat30","worldRotScaMat","_tempMat31","scaMat","_tempMat32","copyFromMatrix","worldMatrix","invert","worldRotationQuaternion","Matrix3x3","rotationQuaternion","multiply","targetDirtyFlags","_isContainDirtyFlag","_setDirtyFlagTrue","_setDirtyFlagFalse","rotateQuat","translation","transformByQuat","radFactor","rotQuat","rotationEuler","transformCoordinate","TransformModifyFlags","worldRotation","degreeToRadian","invParentQuaternion","position","getTranslation","rotation","toEuler","radToDegreeFactor","normalized","normalize","scaleMat","localMatrix","affineTransformation","decompose","_tempMat42","worldForward","worldRight","SpriteMaskLayer","_onUpdateIndex","_rendererIndex","_globalShaderMacro","_maskInteraction","_maskLayer","Layer0","_batchedTransformShaderData","_overrideUpdate","_materials","_rendererLayer","_shaderData","_mvMatrix","_mvpMatrix","_mvInvMatrix","_normalMatrix","_materialsInstanced","_priority","_receiveShadows","castShadows","prototype","update","_onTransformChanged","_setTransform","_receiveShadowMacro","_rendererLayerProperty","getInstanceMaterial","materials","_createInstanceMaterial","getMaterial","setMaterial","indexOrMaterial","_setMaterial","getInstanceMaterials","materialsInstance","getMaterials","setMaterials","internalMaterials","materialsInstanced","internalMaterial","componentsManager","_componentsManager","addOnUpdateRenderers","addRenderer","removeOnUpdateRenderers","removeRenderer","_prepareRender","_renderFrameCount","virtualCamera","cameraPosition","boundsCenter","bounds","getCenter","_tempVector0","isOrthographic","_distanceForSort","dot","forward","distanceSquared","_render","camera","_updateTransformShaderData","onlyMVP","batched","_transform","_updateProjectionRelatedShaderData","_updateWorldViewRelatedShaderData","_canBatch","_batch","layer","mvInvMatrix","identityMatrix","_identity","viewMatrix","_localMatrixProperty","_worldMatrixProperty","_mvMatrixProperty","_mvInvMatrixProperty","_normalMatrixProperty","mvMatrix","normalMatrix","transpose","_mvpMatrixProperty","viewProjectionMatrix","mvpMatrix","_updateBounds","worldBounds","insMaterial","isCulled","receiveShadows","materialCount","priority","CheckOnly","RendererUpdateFlags","StaticInterfaceImplement","SimpleSpriteAssembler","resetData","manager","_getChunkManager","lastSubChunk","_subChunk","freeSubChunk","allocateSubChunk","_rectangleTriangles","updatePositions","pivotX","pivotY","wE","pWE","sx","flipX","sy","spritePositions","vertices","o","updateUVs","spriteUVs","updateColor","color","SlicedSpriteAssembler","expectHeight","fixedLeft","expectWidth","fixedBottom","fixedRight","fixedTop","row","column","widthScale","heightScale","localTransX","localTransY","rowValue","columnValue","rowU","DisorderedArray","_loopCounter","_blankCount","_elements","delete","deleteByIndex","callbackFn","swapFn","_startLoop","_endLoop","forEachAndClean","preEnd","_endLoopAndClean","sort","compareFn","garbageCollection","swapElement","isLopping","TiledSpriteAssembler","vertexCount","sizeChanged","newSubChunk","tileMode","tiledAdaptiveThreshold","threshold","_posRow","posRow","_posColumn","_uvRow","uvRow","_uvColumn","uvColumn","maxVertexCount","posColumn","Adaptive","_calculateAdaptiveDividing","_calculateContinuousDividing","wE0","wE1","wE2","wE4","wE5","wE6","wE12","wE13","wE14","rowLength","columnLength","trianglesOffset","doubleJ","uvL","uvR","uvT","isNaN","l","t","uvB","spriteUV0","spriteUV1","spriteUV2","spriteUV3","fixedL","fixedR","fixedLR","fixedCW","fixedT","fixedB","fixedTB","fixedCH","rType","cType","rVertCount","cVertCount","rRepeatCount","cRepeatCount","rowCount","columnCount","NaN","countInteger","SpriteRenderer","_tileMode","Continuous","_tiledAdaptiveThreshold","_color","_sprite","_flipX","_flipY","drawMode","Simple","spriteDefaultMaterial","_onSpriteChange","_onColorChanged","_assembler","_drawMode","_batcherManager","primitiveChunkManager2D","WorldVolume","renderElement","_renderElementPool","subRenderElement","_subRenderElementPool","primitive","addSubRenderElement","_renderPipeline","pushRenderElement","_textureProperty","Sliced","Tiled","SpriteRendererUpdateFlags","WorldVolumeAndUV","VertexData","lastSprite","Layer","PipelineUtils","recreateTextureIfNeeded","currentTexture","textureWrapMode","textureFilterMode","recreateRenderTargetIfNeeded","currentRenderTarget","colorFormat","depthFormat","needDepthTexture","currentColorTexture","currentDepthTexture","blitTexture","destination","viewport","passIndex","defaultViewport","blitMesh","flipYBlitMesh","blitMaterial","activeRenderTarget","rendererShaderData","_rendererShaderData","_blitTextureProperty","_blitMipLevelProperty","_texelSize","_blitTexelSizeProperty","drawPrimitive","_primitive","VirtualCamera","projectionMatrix","nearClipPlane","farClipPlane","CameraClearFlags","CameraType","DepthTextureMode","Downsampling","MSAASamples","ReplacementFailureStrategy","MathTemp","tempVec4","tempVec3","tempVec2","enableFrustumCulling","clearFlags","cullingMask","Everything","depthTextureMode","opaqueTextureDownsampling","TwoX","msaaSamples","_cameraType","Normal","_frustum","BoundingFrustum","_virtualCamera","_replacementShader","_replacementSubShaderTag","_replacementFailureStrategy","_cameraIndex","_isCustomViewMatrix","_isCustomProjectionMatrix","_fieldOfView","_orthographicSize","_isProjectionDirty","_isInvProjMatDirty","_customAspectRatio","_renderTarget","_depthBufferParams","_opaqueTextureEnabled","_enableHDR","_enablePostProcess","_viewport","_pixelViewport","_inverseProjectionMatrix","_invViewProjMat","_isViewMatrixDirty","_isInvViewProjDirty","_frustumChangeFlag","BasicRenderPipeline","_updatePixelViewport","_onPixelViewportChanged","_sizeUpdateFlagManager","resetViewMatrix","_viewMatrixChange","resetProjectionMatrix","_projectionMatrixChange","resetAspectRatio","worldToViewportPoint","point","cameraPoint","viewportPoint","transformToVec4","viewportToWorldPoint","nf","pointZ","_innerViewportToWorldPoint","_getInvViewProjMat","viewportPointToRay","invViewProjMat","origin","direction","screenToViewportPoint","viewportToScreenPoint","worldToScreenPoint","screenToWorldPoint","screenPointToRay","render","cubeFace","replacementShader","replacementTag","replacementFailureStrategy","calculateFromMatrix","_updateShaderData","ignoreClearFlags","independentCanvasEnabled","xrManager","_getCameraIgnoreClearFlags","_renderCount","setReplacementShader","failureStrategy","KeepOriginalShader","resetReplacementShader","addCamera","removeCamera","_getInternalColorTextureFormat","R11G11B10_UFloat","R16G16B16A16","renderTarget","clipPoint","_inverseViewMatrixProperty","_cameraPositionProperty","_cameraForwardProperty","_cameraUpProperty","depthBufferParams","farDivideNear","_cameraDepthBufferParamsProperty","_getInverseProjectionMatrix","_checkMainCanvasAntialiasWaste","opaqueTextureEnabled","enableHDR","enablePostProcess","_postProcessManager","hasActiveEffect","fieldOfView","aspectRatio","pixelViewport","_cameraNeedSorting","orthographicSize","rotationTranslation","perspective","ortho","supportHDR","textureHalfFloat","_cameraDepthTextureProperty","_cameraOpaqueTextureProperty","BackgroundMode","BackgroundTextureFillMode","PipelinePass","RenderContext","_projectionParams","rendererUpdateFlag","applyVirtualCamera","_flipYMatrix","_flipYProjectionMatrix","_flipYViewProjectionMatrix","_viewMatrixProperty","_projectionMatrixProperty","vpMatrixProperty","projectionParams","_cameraProjectionProperty","pipelineStageKey","ContextRendererUpdateFlag","RenderQueueMaskType","RenderQueue","batchedSubElements","sortBatch","batcherManager","batch","pipelineStageTagValue","maskType","No","cameraId","cameraData","sceneId","sceneData","_maskManager","maskManager","renderCount","subElement","WorldViewMatrix","ProjectionMatrix","needMaskInteraction","needMaskType","BasicResources","getMaskTypeRenderStates","drawMask","getMaskInteractionRenderStates","isReadStencil","clearMask","isStencilWritten","hasStencilWritten","renderElementShaderData","rendererId","materialData","switchProgram","switchRenderCount","rendererData","materialId","subPrimitive","compareForOpaque","distanceForSort","compareForTransparent","ShadowSliceData","cullPlanes","Plane","splitBoundSphere","BoundingSphere","ShadowResolution","ShadowType","ShadowUtils","shadowResolution","Low","Medium","High","VeryHigh","shadowDepthFormat","supportDepthTexture","cullingRenderBounds","cullPlaneCount","plane","normal","distance","shadowCullFrustum","light","shadowSliceData","getBoundSphereByFrustum","near","far","centerZ","radius","sqrt","tan","k2","farSNear","farANear","center","sphereCenterZ","getDirectionLightShadowCullPlanes","cameraFrustum","splitDistance","cameraNear","frustumCorners","_frustumCorners","backPlaneFaces","_backPlaneFaces","planeNeighbors","_frustumPlaneNeighbors","twoPlaneCorners","_frustumTwoPlaneCorners","edgePlanePoint2","_edgePlanePoint2","getPlane","FrustumFace","Near","Far","Left","Right","Bottom","Top","splitNearDistance","splitNear","_adjustNearPlane","splitFar","_adjustFarPlane","CollisionUtil","intersectionPointThreePlanes","backIndex","edgeIndex","backFace","neighborFaces","neighborFace","notBackFace","corners","point0","point1","fromPoints","getDirectionalLightMatrices","lightUp","lightSide","lightForward","cascadeIndex","nearPlane","outShadowMatrices","boundSphere","resolution","halfShadowResolution","borderRadius","atlasBorderSize","borderDiam","sizeUnit","radiusUnit","upLen","sideLen","forwardLen","projectMatrix","_shadowMapCoordMatrix","getMaxTileResolutionInAtlas","atlasWidth","atlasHeight","tileCount","currentTileCount","getShadowBias","frustumSize","texelSize","shadowBias","normalBias","shadowNormalBias","shadowType","SoftHigh","kernelRadius","applySliceTransform","tileSize","atlasOffset","sliceMatrix","_tempMatrix0","oneOverAtlasWidth","oneOverAtlasHeight","scaleX","scaleY","getScaleAndBiasForLinearDistanceFade","fadeDistance","outInfo","multiplier","distanceFadeNear","fadeRange","ShadowCascadesMode","CascadedShadowCasterPass","_shadowMapSize","_shadowBias","_shadowSliceData","_lightUp","_lightSide","_splitBoundSpheres","_maxCascades","_shadowMatrices","_shadowInfos","_viewportOffsets","_camera","_supportDepthTexture","onRender","_lightManager","_sunlight","_updateShadowSettings","_renderDirectShadowMap","_updateReceiversShaderData","viewports","splitBoundSpheres","shadowMatrices","_cullingResults","opaqueQueue","alphaTestQueue","shadowCascades","_cascadesSplitDistance","lightWorld","lightWorldE","_shadowMapFormat","shadowTexture","clearRenderTarget","_clearColor","cameraForward","_tempVector","shadowTileResolution","_shadowTileResolution","shadowNearPlaneOffset","_updateSingleShadowCasterShaderData","renderers","_renderers","setGlobalDepthBias","scissor","ShadowCaster","shadowFar","shadowDistance","pow","shadowFadeBorder","shadowStrength","_shadowMatricesProperty","_shadowInfosProperty","_shadowMapsProperty","_shadowSplitSpheresProperty","_getCascadesSplitDistance","cascadesSplitDistance","shadowTwoCascadeSplits","shadowFourCascadeSplits","range","tFov","denominator","NoCascades","_getFarWithRadius","TwoCascades","FourCascades","shadowFormat","_shadowMapResolution","_shadowCascadeMode","viewportOffset","sceneShaderData","_lightShadowBiasProperty","_lightDirectionProperty","CullingResults","transparentQueue","Transparent","AlphaTest","reset","DepthOnlyPass","onConfig","cullingResults","DepthOnly","OpaqueTexturePass","cameraColorTexture","_cameraColorTexture","downsampling","isNoDownsampling","sizeScale","opaqueRenderTarget","_lastCanvasSize","_internalColorTarget","_cascadedShadowCasterPass","_depthOnlyPass","_opaqueTexturePass","ignoreClear","sunlight","depthOnlyPass","depthPassEnabled","PrePass","uploadBuffer","internalColorTarget","_drawRenderPass","background","colorTarget","colorViewport","needFlipProjection","solidColor","Stencil","Sky","sky","_drawBackgroundTexture","opaqueTexturePass","postProcessManager","cameraRenderTarget","renderQueueFlags","subRenderElements","materialSubShader","replacementSubShaders","replacementSuccess","pushRenderElementByType","_material","_mesh","mesh","_textureFillMode","Fill","_resizeBackgroundTexture","intersectsBox","RenderQueueFlags","SubRenderElement","influenceLayers","_alphaCutoff","spriteMaskDefaultMaterial","_renderElement","addSpriteMask","removeSpriteMask","primitiveChunkManagerMask","alphaCutoff","TextRenderer","_textChunks","_subFont","_text","_localBounds","_font","_fontSize","_fontStyle","_lineSpacing","_horizontalAlignment","Center","_verticalAlignment","_enableWrapping","_overflowMode","_textDefaultFont","textDefaultMaterial","_freeTextChunks","_resetSubFont","_isTextNoVisible","_updateLocalData","_updatePosition","_updateColor","textSubRenderElementPool","_textSubRenderElementPool","textChunks","e0","e1","e2","e4","e5","e6","e12","e13","e14","up","worldPositions","_worldPositions","worldPosition0","worldPosition1","worldPosition2","worldPosition3","charRenderInfos","charRenderInfo","topLeftY","topLeftX","indexInChunk","copyToArray","_charRenderInfos","charFont","textMetrics","enableWrapping","charRenderInfoPool","_charRenderInfoPool","linesLen","renderElementCount","horizontalAlignment","rendererWidth","halfRendererWidth","rendererHeight","halfLineHeight","startY","topDiff","bottomDiff","verticalAlignment","firstLine","minX","Number","MAX_SAFE_INTEGER","minY","maxX","MIN_SAFE_INTEGER","maxY","startX","firstRow","curTextChunk","TextChunk","chunkMaxVertexCount","curCharRenderInfo","curTexture","curCharInfos","_buildChunk","charLength","DirtyFlag","Truncate","textChunk","tempIndices","tempIndicesLength","ii","io","vo","return","lastFont","localBounds","BufferUsage","SetDataOptions","Buffer","byteLengthOrData","bufferUsage","readable","_dataUpdateManager","_bufferUsage","_readable","_byteLength","_platformBuffer","createPlatformBuffer","_data","byteLength","ArrayBuffer","byteOffset","setData","bufferByteOffset","dataOffset","dataLength","options","arrayBuffer","byteSize","BYTES_PER_ELEMENT","dataByteLength","isArrayBufferView","srcData","getData","markAsUnreadable","platformBuffer","IndexFormat","VertexElementFormat","BufferUtil","_getGLIndexType","indexFormat","UInt8","UNSIGNED_BYTE","UInt16","UNSIGNED_SHORT","UInt32","UNSIGNED_INT","_getGLIndexByteCount","_getElementInfo","normalizedScaleFactor","Byte4","BYTE","UByte4","NormalizedByte4","NormalizedUByte4","Short2","SHORT","UShort2","NormalizedShort2","NormalizedUShort2","Short4","UShort4","NormalizedShort4","NormalizedUShort4","VertexElement","attribute","bindingIndex","instanceStepRate","_attributeName","_offset","_bindingIndex","_formatMetaInfo","_instanceStepRate","semantic","BufferBindFlag","MeshTopology","BlendMode","RenderFace","_renderStates","dest","_shader","lastStatesCount","maxPassCount","BaseMaterial","_renderFace","Front","_isTransparent","_blendMode","_alphaCutoffProp","_shadowCasterRenderQueueProp","setIsTransparent","isTransparent","_transparentMacro","setBlendMode","blendMode","Additive","setRenderFace","renderFace","Double","_alphaCutoffMacro","_baseTextureMacro","_normalTextureMacro","_emissiveTextureMacro","_baseColorProp","_baseTextureProp","_tilingOffsetProp","_normalTextureProp","_normalIntensityProp","_emissiveColorProp","_emissiveTextureProp","BlinnPhongMaterial","_specularColorProp","_shininessProp","baseColor","baseTexture","specularColor","specularTexture","_specularTextureProp","emissiveColor","emissiveTexture","normalTexture","normalIntensity","shininess","tilingOffset","TextureCoordinate","PBRBaseMaterial","_occlusionTextureIntensityProp","_occlusionTextureCoordProp","UV0","_clearCoatProp","_clearCoatRoughnessProp","normalTextureIntensity","occlusionTexture","_occlusionTextureProp","occlusionTextureIntensity","occlusionTextureCoord","UV1","clearCoat","clearCoatTexture","_clearCoatTextureProp","clearCoatRoughness","clearCoatRoughnessTexture","_clearCoatRoughnessTextureProp","clearCoatNormalTexture","_clearCoatNormalTextureProp","PBRMaterial","_anisotropyRotation","_iridescenceRange","_metallicProp","_roughnessProp","_iorProp","_anisotropyInfoProp","_iridescenceInfoProp","_onIridescenceRangeChanged","iridescenceInfo","ior","v","metallic","roughness","roughnessMetallicTexture","_roughnessMetallicTextureProp","anisotropy","anisotropyInfo","anisotropyRotation","anisotropyTexture","_anisotropyTextureProp","iridescence","iridescenceTexture","_iridescenceTextureProp","iridescenceIOR","iridescenceThicknessRange","iridescenceThicknessTexture","_iridescenceThicknessTextureProp","PBRSpecularMaterial","_glossinessProp","glossiness","specularGlossinessTexture","_specularGlossinessTextureProp","_specularGlossinessTextureMacro","UnlitMaterial","BlendShapeFrame","weight","deltaPositions","deltaNormals","deltaTangents","_dataChangeManager","_dirty","_deltaPositions","_deltaNormals","_deltaTangents","_releaseData","BlendShapeFrameDirty","BlendShape","_useBlendShapeNormal","_useBlendShapeTangent","_layoutChangeManager","_frames","_frameDataChangeListener","addFrame","frameOrWeight","frame","_addFrame","clearFrames","frames","_updateUseNormalAndTangent","useNormal","useTangent","useBlendShapeNormal","useBlendShapeTangent","IndexBufferBinding","_buffer","SubPrimitive","topology","Triangles","SubMesh","Primitive","enableVAO","instanceCount","vertexBufferBindings","_vertexElementMap","_bufferStructChanged","_vertexElements","_platformPrimitive","createPlatformPrimitive","addVertexElement","vertexElementMap","vertexElements","oldVertexElement","removeVertexElement","vertexElement","clearVertexElements","setVertexElement","setVertexElementsLength","setVertexBufferBinding","binding","setVertexBufferBindings","firstIndex","bindings","needLength","setIndexBufferBinding","lastBinding","indexBufferBinding","_indexBufferBinding","_glIndexType","_glIndexByteCount","draw","Mesh","_subMeshes","_onBoundsChanged","addSubMesh","startOrSubMesh","removeSubMesh","subMeshes","clearSubMesh","_clearVertexElements","_addVertexElement","_removeVertexElement","_setVertexElement","_setVertexElementsLength","_setVertexBufferBinding","_setVertexElements","_setIndexBufferBinding","MeshModifyFlags","VertexBufferBinding","stride","_stride","BufferMesh","setVertexElements","bufferOrBinding","strideOrFirstIndex","isBinding","MeshRenderer","_enableVertexColor","_onMeshChanged","_uvMacro","_uv1Macro","_normalMacro","_tangentMacro","_enableVertexColorMacro","subRenderElementPool","_meshMagentaMaterial","_setMesh","lastMesh","Bounds","VertexElements","enableVertexColor","BlendShapeManager","modelMesh","_blendShapeCount","_blendShapes","_subDataDirtyFlags","_vertexBuffers","_uniformOccupiesCount","_bufferBindingOffset","_vertexElementOffset","_useBlendNormal","_useBlendTangent","_vertexElementCount","_storeInVertexBufferInfo","_maxCountSingleVertexBuffer","_lastHostCreatedInfo","_canUseTextureStoreData","_dataTextureInfo","_modelMesh","canUseFloatTextureBlendShape","_updateLayoutChange","_addBlendShape","blendShape","_clearBlendShapes","blendShapes","subDataDirtyFlags","skinnedMeshRenderer","blendShapeCount","_blendShapeMacro","_useTextureMode","_blendShapeTextureMacro","_blendShapeTextureProperty","_vertexTexture","_blendShapeTextureInfoProperty","_blendShapeWeightsProperty","blendShapeWeights","maxBlendCount","_getVertexBufferModeSupportCount","condensedBlendShapeWeights","_condensedBlendShapeWeights","_filterCondensedBlendShapeWeights","_blendShapeNormalMacro","_blendShapeTangentMacro","_isCreateHost","createdInfo","_vertexElementsNeedUpdate","maxSupportCount","_needUpdateData","_updateVertexBufferIndex","internalVertexBufferIndex","_internalVertexBufferIndex","_addVertexElements","bindingOffset","noLongerReadable","useTexture","createHost","_createTextureArray","_createVertexBuffers","_updateTextureArray","_updateVertexBuffers","_releaseMemoryCache","_vertices","noLongerAccessible","vertexBuffers","vertexFloatCount","vertexByteCount","maxCountSingleBuffer","bufferCount","floatCount","bufferBindingOffset","containCount","Dynamic","blendShapeBuffer","VertexBuffer","maxTextureSize","vertexPixelStride","textureWidth","textureHeight","blendShapeDataTexture","R32G32B32A32","storeInfos","blendShapeFloatStride","blendShapeByteStride","dataChangedFlag","endFrame","bufferIndex","indexInBuffer","bufferFloatStride","storeInfo","deltaPosition","deltaNormal","deltaTangent","vertexTexture","subDirtyFlag","subBlendShapeDataStride","tangent","notFirst","vertexElementCount","useBlendNormal","useBlendTangent","_attributeModeUpdateVertexElement","vertexBufferStoreInfo","condensedIndex","elementOffset","condensedWeightsCount","thresholdWeight","POSITIVE_INFINITY","thresholdIndex","condensedWeight","VertexAttribute","ModelMesh","_vertexCount","_vertexCountDirty","_dataVersionCounter","_normals","_colors","_tangents","_uv","_uv1","_uv2","_uv3","_uv4","_uv5","_uv6","_uv7","_boneWeights","_boneIndices","_advancedElementUpdateFlag","_advancedDataUpdateFlag","_advancedVertexDataVersions","_advancedDataSyncToBuffer","_internalVertexBufferStride","_internalVertexBufferCreatedInfo","_internalVertexElementsOffset","_internalVertexElementsFlags","_vertexBufferInfos","_indices","_indicesFormat","_indicesChangeFlag","_accessible","_blendShapeManager","setPositions","_updateAdvancedVertexDataMarks","getPositions","_getVertexElementData","Position","_readVector3VertexData","setNormals","normals","_beforeSetAdvancedVertexData","getNormals","setColors","colors","getColors","_readColorVertexData","setBoneWeights","boneWeights","getBoneWeights","BoneWeight","_readVector4VertexData","setBoneIndices","boneIndices","getBoneIndices","BoneIndex","setTangents","tangents","getTangents","Tangent","setUVs","channelIndex","getUVs","UV","_readVector2VertexData","uv1s","uv2s","UV2","uv3s","UV3","uv4s","UV4","uv5s","UV5","uv6s","UV6","uv7s","UV7","setIndices","getIndices","strideOrIndex","indexOrNull","updateInfos","getVertexElement","_updateVertexElements","addBlendShape","clearBlendShapes","getBlendShapeName","uploadData","releaseData","_updateInternalVertexBuffer","_updateAdvancedVertices","vertexBufferInfos","vertexBufferInfo","uploadAdvancedData","indexBuffer","newIndexBuffer","IndexBuffer","blendShapeManager","_releaseCache","calculateTangents","_tempVec0","_tempVec1","_tempVec2","_tempVec3","_tempVec4","temp","triangleCount","biTangents","i0","i1","i2","p0","p1","p2","w0","w1","w2","x1","x2","y1","y2","onVertexBufferChanged","dataVersion","previousBinding","BufferUpdateInfo","_getVertexTypedArray","vertexDataBuffer","dataType","vertexAttribute","vertexElementIndex","readVertexData","advancedVertexDataVersions","advancedDataVersion","bufferDataVersion","call","elementChangeFlag","bufferStride","bufferCreatedInfo","needByteLength","createdInternalBufferIndex","vertexBufferIndex","isCreate","vertexBuffer","attributeType","_readVertexData","dataReader","onVertexParse","bufferBinding","formatMetaInfo","byteStride","_updateAdvancedVertexElement","_getAttributeFormat","_getInternalVertexBufferIndex","_getAttributeByteLength","_updateAdvancedVertexElements","advancedElementUpdateFlag","bsManager","previousCount","previousBSOffset","bsUpdate","_writeVector2AdvancedVertexData","_writeAdvancedVertexData","typedArray","_writeVector3AdvancedVertexData","_writeVector4AdvancedVertexData","_writeColorAdvancedVertexData","onVertexWrite","isDestroy","positionElement","positionBufferBinding","accessible","PrimitiveMeshRestorer","primitiveInfo","sphereInfo","PrimitiveMesh","_setSphereData","segments","CCSphereInfo","_setSubdivisionSurfaceSphereData","step","cuboidInfo","_setCuboidData","planeInfo","_setPlaneData","horizontalSegments","verticalSegments","cylinderInfo","_setCylinderData","radiusTop","radiusBottom","radialSegments","heightSegments","torusInfo","_setTorusData","tubeRadius","tubularSegments","arc","coneInfo","_setConeData","capsuleInfo","_setCapsuleData","PrimitiveRestoreInfo","SphereRestoreInfo","SubdivisionSurfaceSphereRestoreInfo","CuboidRestoreInfo","PlaneRestoreInfo","CylinderRestoreInfo","TorusRestoreInfo","ConeRestoreInfo","CapsuleRestoreInfo","createSphere","sphereMesh","createSubdivisionSurfaceSphere","createCuboid","createPlane","createCylinder","createTorus","createCone","createCapsule","isRestoreMode","restoreVertexBuffer","cells","_subdiveCatmullClark","positionCount","cellsCount","poleOffset","_generateIndices","seamCount","seamVertices","reciprocalLength","PI","atan2","acos","seamOffset","subarray","_spherePoleIdx","indexA","indexB","indexC","indexD","floatIndexA","floatIndexB","floatIndexC","floatIndexD","_generateAndReplacePoleUV","_initialize","rectangleCount","thetaRange","alphaRange","countReciprocal","segmentsReciprocal","u","alphaDelta","thetaDelta","sinTheta","posX","posY","posZ","c","d","edges","faces","_sphereSeedPositions","_sphereSeedCells","cellCount","facePoint","adjacentEdges","vertexIdxA","vertexIdxB","edgeIdxKey","has","edge","edgePoint","edgePointIndex","offsetA","offsetB","prePointCount","edgePointOffset","pointIdx","_sphereEdgeIdx","preCells","ic","ib","ia","edgeB","edgeD","_calculateEdgeIndex","addedOffset","cuboidMesh","halfWidth","halfHeight","halfDepth","normalOffset","planeMesh","horizontalCount","verticalCount","gridWidth","gridHeight","horizontalCountReciprocal","horizontalSegmentsReciprocal","verticalSegmentsReciprocal","cylinderMesh","radialCount","unitHeight","torsoVertexCount","torsoRectangleCount","capTriangleCount","totalVertexCount","radialCountReciprocal","radialSegmentsReciprocal","heightSegmentsReciprocal","indicesOffset","thetaStart","radiusDiff","slope","radiusSlope","theta","cosTheta","diameterTopReciprocal","diameterBottomReciprocal","positionStride","curPosBottomOffset","curPosX","curPosZ","curPosTopOffset","topCapIndex","bottomIndiceIndex","topIndiceIndex","firstStride","secondStride","radiusMax","torusMesh","cosV","sinV","cosU","sinU","positionX","positionY","positionZ","centerX","centerY","outerRadius","coneMesh","curRadius","capsuleMesh","capVertexCount","capRectangleCount","_createCapsuleCap","indexCount","elementIndexUint","posIndex","alpha","sinAlpha","ComponentCloner","cloneComponent","Entity","_components","_scripts","_isRoot","_isActive","_siblingIndex","_parent","_invModelMatrix","_inverseWorldMatFlag","args","getComponents","results","getComponentsIncludeChildren","_getComponentsInChildren","addChild","indexOrChild","child","_scene","_removeFromEntityList","_addToChildrenList","oldScene","newScene","inActiveChangeFlag","_processInActive","_traverseSetOwnerScene","_processActive","_setTransformDirty","_setParent","removeChild","getChild","findByName","children","findByPath","splits","_findChildByName","createChild","clearChildren","cloneEntity","_createCloneEntity","_parseCloneEntity","_markAsTemplate","templateResource","_templateResource","cloneTransform","srcTransform","srcChildren","targetChildren","sourceComp","targetComp","removeRootEntity","isActive","_addScript","script","_entityScriptsIndex","_removeScript","replaced","_removeFromParent","oldParent","oldSibling","_activeChangedComponents","getActiveChangedTempList","_setActiveInHierarchy","_setActiveComponents","_setInActiveInHierarchy","childCount","siblingIndex","parentScene","activeChangedComponents","putActiveChangedTempList","_setSiblingIndex","sibling","oldIndex","getInvModelMatrix","root","_getEntityHierarchyPath","rootEntity","searchEntity","inversePath","_getEntityByHierarchyPath","_isActiveInEngine","_rootEntities","Skin","inverseBindMatrices","_updatedManager","_bones","_updateMark","joints","_updateSkinMatrices","bones","bindMatrices","_skinMatrices","skinMatrices","worldToLocal","rootBone","bone","boneCount","destBones","_rootBone","lastBoneCount","skeleton","SkinUpdateFlag","SkinnedMeshRenderer","_jointDataCreateCache","_skin","maxVertexUniformVectors","getParameter","MAX_VERTEX_UNIFORM_VECTORS","_options","_maxAllowSkinUniformVectorCount","_maxVertexUniformVectors","_onLocalBoundsChanged","_onSkinUpdated","_blendShapeWeights","_jointTexture","skin","_applySkin","bsUniformOccupiesCount","boneDataCreateCache","boneCountChange","remainUniformJointCount","canIUseMoreJoints","_jointSamplerProperty","_jointMatrixProperty","_checkBlendShapeWeightLength","newBlendShapeCount","lastBlendShapeWeights","lastBlendShapeWeightsCount","newBlendShapeWeights","BoneCountChanged","_jointCountProperty","RootBoneChanged","lastSkin","lastSkinBoneCount","lastRootBone","skinBoneCount","flipYVertices","_createBlitMesh","whitePixel","_create1x1Texture","whitePixel32","_create2DMaterial","_createSpriteMaskMaterial","pixel","texture2D","texture2DArray","textureCube","PositiveX","visibleInsideMask","VisibleInsideMask","_maskReadInsideRenderStates","_maskReadOutsideRenderStates","isIncrement","Increment","passOperation","_maskWriteIncrementRenderStates","_maskWriteDecrementRenderStates","failStencilOperation","ObjectPool","ReturnableObjectPool","initializeCount","_lastElementIndex","SubPrimitiveChunk","VertexArea","PrimitiveChunk","vertexStride","vertexFreeAreas","area","_allocateArea","subChunkPool","subMeshPool","_freeArea","Discard","needSize","areas","areaPool","newArea","freeAreas","areaLen","curFreeArea","curStart","curEnd","nextIndex","nextFreeArea","PrimitiveChunkManager","primitiveChunks","BatcherManager","renderQueue","preSubElement","preRenderer","preConstructor","subElements","AssetType","SafeLoopArray","_array","_loopArray","_loopArrayDirty","removeByIndex","findAndRemove","filter","getArray","getLoopArray","loopArray","SceneManager","_allCreatedScenes","_scenes","addScene","indexOrScene","scenes","_sceneManager","currentIndex","removeScene","removedScene","loadScene","destroyOldScene","scenePromise","load","then","mergeScenes","sourceScene","destScene","oldRootEntities","rootEntities","addRootEntity","_destroyAllScene","allCreatedScenes","activeScene","firstScene","AssetPromise","executor","_state","_onTaskCompleteCallbacks","_onTaskDetailCallbacks","_promise","Promise","resolve","reject","_reject","onResolve","onReject","reason","onCancel","callback","_onCancelHandler","setTaskCompleteProgress","loaded","total","progress","_taskCompleteProgress","setTaskDetailProgress","_taskDetailProgress","onProgress","onTaskComplete","onTaskDetail","completeProgress","detailProgress","onfulfilled","onrejected","catch","onRejected","finally","onFinally","cancel","all","promises","onComplete","resultValue","completed","promise","Symbol","toStringTag","mimeType","json","gltf","mtl","prefab","txt","bin","png","webp","jpg","defaultRetryCount","defaultTimeout","Infinity","defaultInterval","request","config","retryCount","retryInterval","timeout","getMimeTypeFromUrl","MultiExecutor","requestRes","onError","xhr","XMLHttpRequest","isImg","method","onload","status","response","responseText","img","Image","requestAnimationFrame","onerror","onabort","revokeObjectURL","crossOrigin","createObjectURL","ontimeout","onprogress","lengthComputable","open","withCredentials","credentials","responseType","headers","setRequestHeader","send","body","extname","lastIndexOf","execFunc","totalCount","interval","_timeoutId","_currentCount","exec","func","_onComplete","_onError","window","clearTimeout","_error","setTimeout","ResourceManager","_loadingPromises","_assetPool","_assetUrlPool","_referResourcePool","_graphicResourcePool","_contentRestorerPool","_subAssetPromiseCallbacks","_objectPool","_editorResourceConfig","_virtualPathMap","assetInfo","_loadSingleItem","getFromCache","findResourcesByType","resources","referResourcePool","getAssetPath","cancelNotLoaded","p","gc","_gc","_pendingGC","restorer","_getRemoteUrl","_requestByRemoteUrl","_request","remoteUrl","_onSubAssetSuccess","assetBaseURL","assetSubPath","remoteAssetBaseURL","subPromiseCallback","resolvedValue","_onSubAssetFail","rejectedValue","asset","_restoreGraphicResources","graphicResourcePool","_lostGraphicResources","_restoreResourcesContent","restoreContentInfoPool","restorePromises","restoreInfo","_assignDefaultOptions","_getTypeByUrl","urls","itemOrURL","_parseURL","queryPath","_parseQueryPath","cacheObject","_getResolveResource","remoteAssetURL","shift","loadingPromises","loadingPromise","loader","_loaders","mainPromise","_loadMainAsset","_createSubAssetPromiseCallback","useCache","_releaseSubAssetPromiseCallback","forceDestroy","objects","subResource","searchStr","params","startsWith","getResourceByRef","ref","refId","isClone","resourceConfig","search","virtualPath","initVirtualResources","_addLoader","extNames","_extTypeMapping","toLowerCase","resourceLoader","assetType","Target","PointerPhase","Pointer","phase","Leave","_upMap","_downMap","_upList","_downList","_firePointerExitAndEnter","rayCastEntity","_currentEnteredEntity","onPointerExit","onPointerEnter","_firePointerDown","onPointerDown","_currentPressedEntity","_firePointerDrag","onPointerDrag","_firePointerUpAndClick","pressedEntity","sameTarget","onPointerClick","onPointerUp","PointerButton","_pointerDec2BinMap","_pointerBin2DecMap","SystemInfo","navigator","_isBrowser","userAgent","platform","IPhone","IPad","Android","Mac","operatingSystem","_detectSIMDSupported","_simdSupported","WebAssembly","validate","devicePixelRatio","Unknown","Keys","KeyboardManager","_curHeldDownKeyToIndexMap","_upKeyToFrameCountMap","_downKeyToFrameCountMap","_curFrameHeldDownList","_curFrameDownList","_curFrameUpList","_nativeEvents","_onBlur","_onKeyEvent","_target","nativeEvents","curFrameDownList","curFrameUpList","curHeldDownKeyToIndexMap","curFrameHeldDownList","downKeyToFrameCountMap","upKeyToFrameCountMap","evt","codeKey","code","delIndex","swapCode","MetaLeft","MetaRight","_removeEventListener","addEventListener","Collider","_index","_shapes","_updateFlag","addShape","shape","oldCollider","_collider","removeShape","_nativeCollider","_nativeShape","physics","_addColliderShape","_removeColliderShape","clearShapes","shapes","_onUpdate","setWorldTransform","worldScale","setWorldScale","_onLateUpdate","_addCollider","_removeCollider","_addPhysicsShape","Collision","PhysicsScene","_restTime","_fixedTimeStep","_colliders","_gravity","_onContactEnter","obj1","obj2","physicalObjectsMap","_physicalObjectsMap","shape1","shape2","collider","collision","_collision","onCollisionEnter","_onContactExit","onCollisionExit","_onContactStay","onCollisionStay","_onTriggerEnter","onTriggerEnter","_onTriggerExit","onTriggerExit","_onTriggerStay","onTriggerStay","_setGravity","_physicsInitialized","_nativePhysicsScene","_nativePhysics","createPhysicsScene","_nativePhysicsManager","raycast","ray","distanceOrResult","layerMaskOrResult","outHitResult","hitResult","MAX_VALUE","layerMask","onRaycast","isSceneQuery","hitShape","fixedTimeStep","nativePhysicsManager","simulateTime","callScriptOnPhysicsUpdate","_callColliderOnUpdate","_callColliderOnLateUpdate","colliderShape","addColliderShape","removeColliderShape","addCollider","_addCharacterController","controller","addCharacterController","removeCollider","_removeCharacterController","removeCharacterController","setGravity","gravity","ControllerNonWalkableMode","CharacterController","_stepOffset","_nonWalkableMode","PreventClimbing","_upDirection","_slopeLimit","createCharacterController","_setUpDirection","move","disp","minDist","flags","_syncWorldPositionFromPhysicalSpace","getWorldPosition","setUpDirection","stepOffset","setStepOffset","nonWalkableMode","setNonWalkableMode","upDirection","slopeLimit","setSlopeLimit","DynamicCollider","_linearDamping","_angularDamping","_linearVelocity","_angularVelocity","_mass","_centerOfMass","_inertiaTensor","_maxAngularVelocity","_maxDepenetrationVelocity","_solverIterations","_isKinematic","_constraints","_collisionDetectionMode","_sleepThreshold","createDynamicCollider","_setLinearVelocity","_setAngularVelocity","_setCenterOfMass","_setInertiaTensor","applyForce","addForce","applyTorque","torque","addTorque","positionOrRotation","sleep","wakeUp","getWorldTransform","linearDamping","angularDamping","linearVelocity","angularVelocity","mass","centerOfMass","inertiaTensor","maxAngularVelocity","maxDepenetrationVelocity","sleepThreshold","solverIterations","isKinematic","constraints","collisionDetectionMode","setLinearVelocity","setAngularVelocity","setCenterOfMass","setInertiaTensor","setLinearDamping","setAngularDamping","setMass","setMaxAngularVelocity","setMaxDepenetrationVelocity","setSleepThreshold","setSolverIterations","setIsKinematic","setConstraints","setCollisionDetectionMode","CollisionDetectionMode","DynamicColliderConstraints","HitResult","PhysicsMaterialCombineMode","PhysicsMaterial","_bounciness","_dynamicFriction","_staticFriction","_bounceCombine","Average","_frictionCombine","_nativeMaterial","createPhysicsMaterial","bounciness","setBounciness","dynamicFriction","setDynamicFriction","staticFriction","setStaticFriction","bounceCombine","setBounceCombine","frictionCombine","setFrictionCombine","StaticCollider","createStaticCollider","ColliderShapeUpAxis","ControllerCollisionFlag","Joint","_colliderInfo","JointColliderInfo","_connectedColliderInfo","_force","_torque","localPosition","connectedCollider","connectedAnchor","connectedMassScale","connectedInertiaScale","massScale","inertiaScale","breakForce","breakTorque","_nativeJoint","setConnectedCollider","setConnectedAnchor","setConnectedMassScale","setConnectedInertiaScale","setMassScale","setInertiaScale","setBreakForce","setBreakTorque","FixedJoint","createFixedJoint","HingeJointFlag","HingeJoint","_axis","_hingeFlags","_useSpring","createHingeJoint","swingOffset","useLimits","useMotor","useSpring","motor","limits","setAxis","setSwingOffset","getAngle","velocity","getVelocity","LimitEnabled","setHingeJointFlag","DriveEnabled","_limits","_jointMonitor","setDriveVelocity","targetVelocity","setDriveForceLimit","forceLimit","setDriveGearRatio","gearRation","DriveFreeSpin","freeSpin","setSoftLimit","stiffness","damping","setHardLimit","contactDistance","SpringJoint","_minDistance","_maxDistance","_tolerance","_stiffness","_damping","createSpringJoint","minDistance","maxDistance","tolerance","setMinDistance","setMaxDistance","setTolerance","setStiffness","setDamping","JointLimits","JointMotor","ColliderShape","_isTrigger","_contactOffset","_id","_idGenerator","_setRotation","_setPosition","contactOffset","isTrigger","setContactOffset","setIsTrigger","BoxColliderShape","_size","createBoxColliderShape","_setSize","setSize","SphereColliderShape","_radius","createSphereColliderShape","setRadius","PlaneColliderShape","createPlaneColliderShape","CapsuleColliderShape","_upAxis","Y","createCapsuleColliderShape","upAxis","setHeight","setUpAxis","PointerManager","_pointers","_multiPointerEnabled","_buttons","Window","_canvas","_htmlCanvas","_webCanvas","_pointerPool","_onPointerEvent","pointers","htmlCanvas","clientWidth","clientHeight","getBoundingClientRect","widthDPR","heightDPR","pointerId","pointer","_getPointerByID","lastCount","pointerPool","_uniqueID","clientX","clientY","_updatePointerInfo","pressedButtons","_firePointerScript","_pointerRayCast","Down","Up","widthPixelRatio","heightPixelRatio","latestEvent","currX","currY","button","buttons","Move","Stationary","normalizedX","normalizedY","_tempPoint","_tempRay","_tempHitResult","cameras","_activeCameras","vpX","vpY","vpW","vpH","onPointerEvent","Ray","WheelManager","_delta","_onWheelEvent","delta","deltaX","deltaY","deltaZ","InputManager","inputOptions","_initialized","_wheelManager","wheelTarget","_pointerManager","pointerTarget","_keyboardManager","keyboardTarget","isKeyHeldDown","isKeyDown","isKeyUp","isPointerHeldDown","pointerButton","isPointerDown","isPointerUp","multiPointerEnabled","wheelDelta","ParticleBillboardVertexAttribute","ParticleInstanceVertexAttribute","ParticleBufferUtils","billboardVertexElement","cornerTextureCoordinate","instanceVertexElements","ShapePositionStartLifeTime","DirectionTime","StartColor","StartSize","StartRotation0","StartSpeed","Random0","Random1","SimulationWorldPosition","SimulationWorldRotation","SimulationUV","billboardGeometryBuffer","billboardVertexBufferBinding","billboardIndexCount","billboardIndexBufferBinding","billboardGeometryData","indexData","instanceVertexStride","instanceVertexFloatStride","startLifeTimeOffset","timeOffset","simulationUVOffset","boundsFloatStride","boundsTimeOffset","boundsMaxLifetimeOffset","ShaderPool","init","shadowCasterPass","shadowMapVs","shadowMapFs","depthOnlyVs","depthOnlyFs","basePasses","forwardPassTags","blinnPhongVs","blinnPhongFs","pbrVs","pbrFs","pbrSpecularFs","unlitVs","unlitFs","blitVs","blitFs","skyboxVs","skyboxFs","skyProceduralVs","skyProceduralFs","particleVs","particleFs","spriteMaskVs","spriteMaskFs","spriteVs","spriteFs","textVs","textFs","backgroundTextureVs","backgroundTextureFs","ShaderProgramPool","_cacheHierarchyDepth","_cacheMap","cacheMap","maskLength","cacheHierarchyDepth","_resizeCacheMapHierarchy","maxEndIndex","subCacheShaders","cacheKey","_lastQueryKey","_lastQueryMap","_recursiveDestroy","hierarchy","currentHierarchy","increaseHierarchy","subCacheMap","ClearableObjectPool","_usedElementCount","usedElementCount","XRManager","xrDevice","_getRequestAnimationFrame","_getCancelAnimationFrame","configuration","_settings","_resourceManager","_vSyncCount","_targetFrameRate","_time","_isPaused","_vSyncCounter","_targetFrameInterval","_frameInProcess","_waitingDestroy","_isDeviceLost","_waitingGC","_animate","raf","_requestId","_onDeviceLost","_onDeviceRestored","inputManager","input","_noDepthTextureMacro","depthTexture2D","meshMagentaMaterial","particleMagentaMaterial","_particleMagentaMaterial","innerSettings","Gamma","_gammaMacro","_particleBufferUtils","createEntity","pause","caf","cancelAnimationFrame","resume","physicsInitialized","sceneCount","sortCameras","callScriptOnStart","callScriptOnUpdate","callAnimationUpdate","callScriptOnLateUpdate","handlingInvalidScripts","run","forceLoseDevice","forceRestoreDevice","callCameraOnBeginRender","callCameraOnEndRender","_forceFlush","flush","callRendererOnUpdate","shaderLab","initializePromises","initialize","createPhysicsManager","loaders","resetState","sceneManager","isPaused","vSyncCount","targetFrameRate","physicsManager","Canvas","_onWidthChanged","_onHeightChange","cameraShaderData","_viewProjMatrix","_projectionMatrix","materialShaderData","viewProjMatrix","f","originViewProjMatrix","_epsilon","Background","SolidColor","AspectFitHeight","_initMesh","_initMaterial","AspectFitWidth","fitWidthScale","fitHeightScale","_createPlane","textureFillMode","ComponentsManager","_onStartScripts","_onUpdateScripts","_onLateUpdateScripts","_onPhysicsUpdateScripts","_pendingDestroyScripts","_disposeDestroyScripts","_onUpdateAnimations","_onUpdateRenderers","_componentsContainerPool","activeCameras","addOnStartScript","_onStartIndex","removeOnStartScript","addOnUpdateScript","removeOnUpdateScript","addOnLateUpdateScript","_onLateUpdateIndex","removeOnLateUpdateScript","addOnPhysicsUpdateScript","_onPhysicsUpdateIndex","removeOnPhysicsUpdateScript","addOnUpdateAnimations","animation","removeOnUpdateAnimations","addPendingDestroyScript","onStartScripts","_started","onStart","onUpdate","onLateUpdate","onPhysicsUpdate","pendingDestroyScripts","disposeDestroyScripts","onDestroy","onBeginRender","onEndRender","componentContainer","MaskManager","_preMaskLayer","Nothing","_allSpriteMasks","incrementMaskQueue","getMaskIncrementRenderQueue","decrementMaskQueue","getMaskDecrementRenderQueue","_buildMaskRenderElement","Decrement","preMaskLayer","masks","stencilOperation","allSpriteMasks","curMaskLayer","commonLayer","reduceLayer","maskElements","_maskIncrementRenderQueue","_maskDecrementRenderQueue","FogMode","DiffuseMode","AmbientLight","_diffuseSolidColor","_diffuseIntensity","_specularIntensity","_diffuseMode","_shArray","_specularTextureDecodeRGBM","_addToScene","_diffuseColorProperty","_diffuseIntensityProperty","_specularIntensityProperty","_diffuseSHProperty","_setDiffuseMode","_setSpecularTextureDecodeRGBM","_setSpecularTexture","_removeFromScene","_specularTextureProperty","_specularMacro","SphericalHarmonics","_shMacro","_specularTexture","_mipLevelProperty","_decodeRGBMMacro","_preComputeSH","sh","coefficients","specularTextureDecodeRGBM","diffuseMode","diffuseSolidColor","diffuseSphericalHarmonics","_diffuseSphericalHarmonics","diffuseIntensity","specularIntensity","Light","intensity","shadowNearPlane","_lightIndex","_lightColor","_shadowStrength","_getLightIntensityColor","_viewMat","inverseViewMatrix","_inverseViewMat","DirectLight","_reverseDirection","_appendData","lightIndex","cullingMaskStart","colorStart","directionStart","lightColor","_attachDirectLight","_detachDirectLight","_cullingMaskProperty","_colorProperty","_directionProperty","reverseDirection","PointLight","positionStart","distanceStart","lightPosition","_attachPointLight","_detachPointLight","_positionProperty","_distanceProperty","SpotLight","penumbra","_inverseDirection","_projectMatrix","penumbraCosStart","angleCosStart","angleCos","penumbraCos","_attachSpotLight","_detachSpotLight","_angleCosProperty","_penumbraCosProperty","LightManager","_spotLights","_pointLights","_directLights","_directData","_maxLight","_pointData","_spotData","spotLight","pointLight","directLight","spotData","pointData","directData","maxLight","spotLightCount","pointLightCount","directLightCount","_updateSunlightIndex","directLights","firstLight","_getMaxBrightestSunlight","maxIntensity","NEGATIVE_INFINITY","hasShadowLight","currentLight","getBrightness","_sunlightColorProperty","_sunlightDirectionProperty","BloomDownScaleMode","BloomEffect","_uberMaterial","_highQualityFiltering","_mipDownRT","_mipUpRT","_maxIterations","downScale","SHADER_NAME","bloomShaderData","uberShaderData","_bloomParams","_lowMipTexelSizeProp","_bloomIntensityParams","_dirtTilingOffsetProp","_tintProp","_bloomMaterial","scatter","dirtIntensity","srcTexture","downRes","tw","th","mipCount","_calculateMipCount","_prefilter","_downsample","_upsample","_setupUber","iterations","internalColorTextureFormat","mipWidth","mipHeight","lastDown","lowMip","highMip","dst","_lowMipTextureProp","highQualityFiltering","texelSizeLow","dirtTexture","dirtTilingOffset","dirtRatio","screenRatio","_bloomTextureProp","_releaseRenderTargets","downRT","upRT","_enableMacro","_threshold","thresholdKnee","_scatter","lerp","tint","_hqMacro","_dirtTextureProp","_dirtMacro","fragPrefilter","fragBlurH","fragBlurV","fragUpsample","TonemappingMode","TonemappingEffect","_mode","_PostProcessManager","uberShader","UBER_SHADER_NAME","uberMaterial","bloomEffect","tonemappingEffect","_bloomEffect","_tonemappingEffect","srcTarget","destTarget","PostCommon","Filtering","ODT","RRT","Tonescale","ColorTransform","NeutralTonemapping","ACESTonemapping","UberPost","_background","_shadowCascades","_fogMode","_fogColor","_fogStart","_fogEnd","_fogDensity","_fogParams","_enableTransparentShadow","ambientLight","_fogColorProperty","_fogParamsProperty","_computeLinearFogParams","_computeExponentialFogParams","createRootEntity","isRoot","_addToRootEntityList","getRootEntity","findEntityByName","findEntityByPath","Boolean","rootEntitiesCount","findEntity","active","lightManager","_getSunlight","_zero","_ambientLight","rootEntityCount","fogStart","fogEnd","fogRange","fogParams","density","LN2","_sun","lastAmbientLight","fogMode","fogColor","fogDensity","sun","enableTransparentShadow","Script","_onPreRenderIndex","_onPostRenderIndex","onAwake","onEnable","other","onDisable","Loader","registerClass","className","classDefine","_engineObjects","_classNameMap","getClass","getClassName","UniversalAnimationCurveOwnerAssembler","owner","mounted","setProperties","getProperty","_initializeMounted","getTargetValue","_getType","_getMounted","_getArrayIndex","_getValueName","apply","_getArgs","setTargetValue","_setType","_setMounted","_setArrayIndex","_setArgs","_replaceValueIndex","_setValueName","parseFlag","indexPos","endsWith","methodName","arg","handleType","arrayIndex","AnimationCurveOwner","cureType","baseEvaluateData","curKeyframeIndex","crossEvaluateData","updateMark","assemblerType","getAssemblerType","_isCopyMode","referenceTargetValue","evaluateValue","curve","additive","_evaluateAdditive","_evaluate","evaluateCrossFadeValue","srcCurve","destCurve","srcTime","destTime","crossWeight","_supportInterpolationMode","srcValue","_getZeroValue","defaultValue","destValue","_lerpValue","crossFadeFromPoseAndApplyValue","_subtractValue","fixedPoseValue","revertDefaultValue","getEvaluateValue","_setValue","saveDefaultValue","saveFixedPoseValue","applyValue","assembler","_additiveValue","originValue","additiveValue","targetValue","lerpValue","registerAssembler","componentType","subMap","_assemblerMap","PositionAnimationCurveOwnerAssembler","RotationAnimationCurveOwnerAssembler","ScaleAnimationCurveOwnerAssembler","BlendShapeWeightsAnimationCurveOwnerAssembler","_skinnedMeshRenderer","AnimationCurveLayerOwner","crossCurveMark","initFinalValue","curveOwner","finalValue","saveFinalValue","AnimationClipCurveBinding","typeIndex","_tempCurveOwner","_createCurveOwner","curveType","_initializeOwner","_createCurveLayerOwner","layerOwner","_initializeLayerOwner","_getTempCurveOwner","AnimationEvent","AnimationClip","_curveBindings","addEvent","parameter","newEvent","functionName","eventTime","maxEventTime","clearEvents","addCurveBinding","entityPath","propertyOrSetPropertyPathOrComponentIndex","curveOrSetPropertyPathOrGetPropertyPath","curveOrGetPropertyPath","curveBinding","relativePath","clearCurveBindings","_sampleAnimation","curveBindings","targetEntity","InterpolationType","AnimationCurve","_evaluateData","_interpolation","Step","addKey","evaluate","removeKey","newLength","evaluateData","interpolation","curIndex","curFrame","nextFrame","curFrameTime","duration","CubicSpine","Hermite","_hermiteInterpolationValue","AnimationArrayCurve","base","t0","outTangent","t1","inTangent","t2","t3","isFinite","AnimationBoolCurve","AnimationColorCurve","dur","tan0","tan1","AnimationFloatArrayCurve","AnimationFloatCurve","AnimationQuaternionCurve","slerp","conjugate","_tempConjugateQuat","AnimationVector2Curve","AnimationVector3Curve","_relativeBaseValue","AnimationVector4Curve","AnimationRefCurve","AnimationRectCurve","AnimationStringCurve","AnimatorConditionMode","AnimatorCullingMode","AnimatorLayerBlendingMode","AnimatorStatePlayState","LayerState","AnimationEventHandler","handlers","AnimatorCondition","AnimatorStateTransition","exitTime","mute","isFixedDuration","_isExit","_conditions","_solo","_hasExitTime","addCondition","condition","parameterName","If","removeCondition","_getFixedDuration","destinationState","_getDuration","isExit","solo","_collection","updateTransitionSolo","conditions","hasExitTime","updateTransitionsIndex","WrapMode","AnimatorStatePlayData","isForward","_changedOrientation","state","stateData","offsetFrameTime","playedTime","playState","UnStarted","clipTime","clipStartTime","clip","currentEventIndex","_transitionCollection","needResetCurrentCheckIndex","updateOrientation","lastIsForward","_correctTime","Playing","wrapMode","Loop","Finished","clipEndTime","AnimatorLayerData","curveOwnerPool","animatorStateDataMap","srcPlayData","destPlayData","layerState","Standby","manuallyTransition","crossLayerOwnerCollection","switchPlayData","switchTemp","resetCurrentCheckIndex","stateMachine","_entryTransitionCollection","_anyStateTransitionCollection","AnimatorStateData","curveLayerOwner","eventHandlers","Animator","cullingMode","speed","_playFrameCount","_animatorLayersData","_curveOwnerPool","_animationEventHandlerPool","_parametersValueMap","_tempAnimatorStateInfo","layerIndex","_controlledRenderers","play","stateName","normalizedTimeOffset","_controllerUpdateFlag","stateInfo","_getAnimatorStateInfo","_preparePlay","crossFade","normalizedDuration","_crossFade","crossFadeInFixedDuration","fixedDuration","animationUpdate","Complete","controlledRenderers","animatorController","_animatorController","layers","layerData","_getAnimatorLayerData","_updateState","getCurrentAnimatorState","findAnimatorState","findLayerByName","_layersMap","_parametersMap","getParameterValue","setParameterValue","activateTriggerParameter","deactivateTriggerParameter","animationCurveOwners","propertyOwners","playLayerIndex","_prepareCrossFadeByTransition","findStateByName","_getAnimatorStateData","animatorState","animatorLayerData","animatorStateData","_saveAnimatorStateData","_saveAnimatorEventHandlers","curves","layerCurveOwnerPool","layerPropertyOwners","pathMasks","getPathMask","eventHandlerPool","scripts","clipChangedListener","scriptCount","eventHandler","funcName","handler","_clearCrossData","_addCrossOwner","curCurveIndex","nextCurveIndex","crossSrcCurveIndex","crossDestCurveIndex","_prepareCrossFading","_prepareSrcCrossData","_prepareDestCrossData","_prepareStandbyCrossFading","_prepareFixedPoseCrossFading","saveFixed","aniUpdate","blendingMode","_checkAnyAndEntryState","_updatePlayingState","_updateFinishedState","CrossFading","_updateCrossFadeState","FixedCrossFading","_updateCrossFadeFromPoseState","playSpeed","playDeltaTime","lastPlayState","transitions","anyStateTransitions","transition","_applyStateTransitions","lastClipTime","playCostTime","_getClipActualEndTime","_getClipActualStartTime","startTime","_evaluatePlayingState","_fireAnimationEventsAndCallScripts","remainDeltaTime","playData","finished","_checkRevertOwner","srcState","destState","transitionDuration","crossFadeTransition","srcPlaySpeed","dstPlaySpeed","dstPlayDeltaTime","lastSrcPlayState","lastDstPlayState","dstPlayCostTime","actualCostTime","srcPlayCostTime","crossFadeFinished","_preparePlayOwner","_evaluateCrossFadeState","lastSrcClipTime","lastDestClipTime","_updateCrossFadeData","srcCurves","destCurves","srcCurveIndex","destCurveIndex","_evaluateCrossFadeFromPoseState","destClipTime","curveIndex","actualSpeed","_applyTransitionsByCondition","_evaluateFinishedState","transitionCollection","clipDuration","targetTransition","endTime","noExitTimeCount","_checkNoExitTimeTransition","_checkSubTransition","_checkBackwardsSubTransition","isSoloMode","_checkConditions","_applyTransition","curClipTime","transitionIndex","currentCheckIndex","updateCurrentCheckIndex","allPass","parameterValue","_passedTriggerParameterNames","Equals","NotEquals","IfNot","_deactivateTriggeredParameters","crossState","_fireAnimationEvents","_fireSubAnimationEvents","_fireBackwardSubAnimationEvents","eventIndex","_callAnimatorScriptOnEnter","_onStateEnterScripts","onStateEnter","_callAnimatorScriptOnUpdate","_onStateUpdateScripts","onStateUpdate","_callAnimatorScriptOnExit","_onStateExitScripts","onStateExit","entryTransitions","defaultState","passedTriggerParameterNames","_registerChangeFlag","_layers","parameters","_parameters","AnimatorControllerParameter","_onNameChanged","oldName","AnimatorController","addParameter","_addParameter","addTriggerParameter","removeParameter","clearParameters","addLayer","removeLayer","theLayer","clearLayers","newName","AnimatorStateTransitionCollection","_soloCount","transitionOrAnimatorState","AnimatorState","_addTransition","remove","isModifiedSolo","unshift","maxExitTime","StateMachineScript","animator","_removeStateMachineScript","_clipStartTime","_clipEndTime","_onClipChanged","addTransition","addExitTransition","removeTransition","addStateMachineScript","scriptType","clearTransitions","_clip","lastClip","AnimatorStateMachine","states","_statesMap","addState","removeState","makeUniqueStateName","originName","addEntryStateTransition","removeEntryStateTransition","addAnyStateTransition","removeAnyStateTransition","clearEntryStateTransitions","clearAnyStateTransitions","AnimatorControllerLayer","Override","Keyframe","LayerPathMask","AnimatorLayerMask","_pathMasks","_pathMaskMap","addPathMask","existed","pathMask","removePathMask","setPathMaskActive","withChildren","createByEntity","_addPathMaskWithChildren","parentPath","childPath","SkyBoxMaterial","_textureDecodeRGBM","_tintColor","_rotationProp","_exposureProp","_tintColorProp","textureDecodeRGBM","_decodeSkyRGBMMacro","_textureCubeProp","exposure","tintColor","SunMode","SkyProceduralMaterial","sunMode","sunSize","sunSizeConvergence","atmosphereThickness","skyTint","groundTint","_sunDisk","_sunSimpleMacro","_sunHighQualityMacro","_sunSizeProp","_sunSizeConvergenceProp","_atmosphereThicknessProp","_skyTintProp","_groundTintProp","ParticleRenderMode","ParticleSimulationSpace","ParticleStopMode","ParticleRenderer","velocityScale","lengthScale","_generatorBounds","_transformedBounds","_onGeneratorParamsChanged","generator","ParticleGenerator","_currentRenderModeMacro","_billboardModeMacro","_supportInstancedArrays","instancedArrays","main","playOnEnabled","stop","StopEmittingAndClear","isAlive","simulationSpace","Local","_updateBoundsSimulationLocal","_generateTransformedBounds","_updateBoundsSimulationWorld","_firstActiveElement","_firstFreeElement","_lengthScale","_speedScale","_currentTime","_playTime","_pivotOffsetProperty","_getAliveParticleCount","_subPrimitive","_onWorldVolumeChanged","ParticleUpdateFlags","renderMode","_renderMode","lastRenderMode","renderModeMacro","Billboard","StretchBillboard","_stretchedBillboardModeMacro","HorizontalBillboard","VerticalBillboard","_reorganizeGeometryBuffers","_horizontalBillboardModeMacro","_verticalBillboardModeMacro","_renderModeMeshMacro","ParticleCurveMode","ParticleGradientMode","ParticleRandomSubSeeds","ParticleGradient","colorKeys","alphaKeys","_colorKeys","_alphaKeys","_colorTypeArrayDirty","_alphaTypeArrayDirty","addColorKey","addAlphaKey","timeOrKey","GradientColorKey","_setColorTypeArrayDirty","_addKey","GradientAlphaKey","_setAlphaTypeArrayDirty","removeColorKey","_removeKey","removeAlphaKey","setKeys","currentColorKeys","currentAlphaKeys","_getColorTypeArray","typeArray","_colorTypeArray","_getAlphaTypeArray","_alphaTypeArray","_alpha","ParticleCompositeGradient","constantOrGradient","constantMaxOrGradientMax","Constant","constantMin","constantMax","gradientMin","gradientMax","TwoConstants","constant","TwoGradients","gradient","Gradient","lerpFactor","ParticleGeneratorModule","_generator","lastEnableMacro","ColorOverLifetimeModule","_colorGradientRand","Rand","ColorOverLifetime","_gradientKeysCount","colorMacro","_renderer","_maxGradientColor","_maxGradientAlpha","_gradientMacro","_minGradientColor","_minGradientAlpha","_randomGradientsMacro","colorMinKeys","alphaMinKeys","colorMaxKeys","alphaMaxKeys","_colorMacro","_resetRandomSeed","seed","ParticleCompositeCurve","constantOrCurve","constantMaxOrCurveMax","_updateManager","_constantMin","_constantMax","_updateDispatch","curveMin","curveMax","TwoCurves","Curve","_getMax","_getMaxKeyValue","_getMinMax","_getMinKeyValue","minCurveMax","minCurveMin","maxCurveMax","maxCurveMin","_registerOnValueChanged","_unRegisterOnValueChanged","_onCurveChange","_curveMin","lastCurve","_curveMax","EmissionModule","rateOverTime","rateOverDistance","_shapeRand","Shape","_frameRateTime","_bursts","_currentBurstIndex","_burstRand","Burst","addBurst","burst","bursts","burstIndex","removeBurst","removeBurstByIndex","clearBurst","_emit","lastPlayTime","playTime","_emitByRateOverTime","_emitByBurst","_shape","ratePerSeconds","emitInterval","cumulativeTime","cycleCount","isLoop","middleTime","_emitBySubBurst","lastMiddleTime","rand","baseTime","burstTime","random","lastShape","ParticleScaleMode","MainModule","_tempVector40","startDelay","startRotation3D","startRotationX","startRotationY","startRotationZ","flipRotation","startColor","simulationSpeed","scalingMode","_maxParticleBuffer","_startDelayRand","StartDelay","_startSpeedRand","_startLifeTimeRand","StartLifetime","_startColorRand","_startSizeRand","_startRotationRand","StartRotation","_gravityModifierRand","GravityModifier","_startSize3D","_simulationSpace","startLifetime","startSpeed","startSizeX","startSizeY","startSizeZ","gravityModifier","randomSeed","_getPositionScale","World","worldRotationV4","_positionScale","_sizeScale","_vector3One","_startRotation3D","_scaleMode","maxParticles","_onCompositeCurveChange","_startLifetime","_startSpeed","startSize3D","_startSizeX","_startSizeY","_startSizeZ","_gravityModifier","WorldMatrix","_freeBoundsArray","startSize","RotationOverLifetimeModule","separateAxes","rotationX","rotationY","rotationZ","_rotationRand","RotationOverLifetime","_rotationMinConstant","_rotationMaxConstant","enableSeparateMacro","isCurveMacro","isRandomTwoMacro","isRandomCurveMode","isCurveMode","_maxCurveZProperty","_getTypeArray","_maxCurveXProperty","_maxCurveYProperty","_minCurveZProperty","_minCurveXProperty","_minCurveYProperty","_isRandomTwoMacro","_curveModeMacro","_maxConstantProperty","_minConstantProperty","_constantModeMacro","_isSeparateMacro","_enableSeparateMacro","_isCurveMacro","ParticleCurve","_keys","_typeArrayDirty","CurveKey","_typeArray","_value","SizeOverLifetimeModule","_separateAxes","sizeX","sizeY","sizeZ","_sizeX","_sizeY","_sizeZ","TextureSheetAnimationModule","frameOverTime","_tillingInfo","_frameOverTimeRand","TextureSheetAnimation","_tiling","frameMacro","_frameMaxCurveProperty","_frameCurveMacro","_frameMinCurveProperty","_frameRandomCurvesMacro","_cycleCountProperty","_tillingParamsProperty","tiling","VelocityOverLifetimeModule","_velocityRand","VelocityOverLifetime","_velocityMinConstant","_velocityMaxConstant","velocityX","velocityY","velocityZ","velocityMacro","_maxGradientXProperty","_maxGradientYProperty","_maxGradientZProperty","_minGradientXProperty","_minGradientYProperty","_minGradientZProperty","_randomCurveMacro","_curveMacro","_randomConstantMacro","_constantMacro","_spaceProperty","_velocityMacro","_velocityX","_velocityY","_velocityZ","useAutoRandomSeed","emission","rotationOverLifetime","colorOverLifetime","textureSheetAnimation","_currentParticleCount","_firstNewElement","_firstRetiredElement","_vertexBufferBindings","_isPlaying","_instanceBufferResized","_waitProcessRetiredElementCount","_randomSeed","_transformedBoundsCount","_firstActiveTransformedBoundingBox","_firstFreeTransformedBoundingBox","_playStartDelay","_resizeInstanceBuffer","_particleIncreaseCount","velocityOverLifetime","sizeOverLifetime","particleRenderers","_tempParticleRenderers","particleRenderer","_resetGlobalRandSeed","stopMode","StopEmitting","firstFreeElement","emit","_tempVector30","_tempVector31","_generatePositionAndDirection","positionScale","_addNewParticle","lastAlive","remainingDelay","_retireActiveParticles","_freeRetiredParticles","_retireTransformedBounds","notRetireParticleCount","_getNotRetiredParticleCount","discardTime","_instanceVertexBufferBinding","_addActiveParticlesToVertexBuffer","particleUtils","colorElement","uvElement","colorBufferBinding","uvBufferBinding","_addVertexBufferBindingsFilterDuplicate","isIncrease","increaseCount","newParticleCount","newByteLength","vertexInstanceBuffer","vertexBufferBinding","instanceVertices","lastInstanceVertices","_instanceVertices","floatStride","firstRetiredElement","nextFreeElement","freeEndOffset","migrateCount","maxLifetime","transformedBounds","GeneratorVolume","_calculateGeneratorBounds","generatorBounds","TransformVolume","_calculateTransformedBounds","_addGravityToBounds","boundsArray","_transformedBoundsArray","firstActiveElement","copyFromArray","_mergeTransformedBounds","_resizeTransformedBoundsArray","boundsOffset","previousFreeElement","pos","rot","_tempColor0","toLinear","startSizeRand","startRotationRand","tileRow","tileRowIndex","activeParticleOffset","activeParticleTimeOffset","particleAge","fround","age","instanceBuffer","dataBuffer","firstSegmentCount","_transformedBoundsIncreaseCount","lastBoundsArray","directionMax","directionMin","_tempVector20","speedMinMax","_getPositionRange","_getDirectionRange","_getExtremeValueFromZero","speedMax","dirMinX","dirMinY","dirMinZ","dirMaxX","dirMaxY","dirMaxZ","speedMin","startSizeYMax","startSizeZMax","maxSizeOverLifetime","maxSizeOverLifetimeY","maxSizeOverLifetimeZ","velMinMaxX","_tempVector21","_tempVector22","velMinMaxZ","_tempMat","rotateMat","originMax","velMinMaxY","originMin","modifierMinMax","coefficient","minGravityEffect","maxGravityEffect","gravityEffectMinX","gravityEffectMaxX","gravityEffectMinY","gravityEffectMaxY","gravityEffectMinZ","gravityEffectMaxZ","ParticleMaterial","BaseShape","_randomDirectionAmount","randomDirectionAmount","ShapeUtils","randomPointUnitArcCircle","randomPointInsideUnitArcCircle","randomPointUnitCircle","randomPointInsideUnitCircle","_randomPointUnitSphere","_randomPointInsideUnitSphere","_randomPointInsideHalfUnitBox","ParticleShapeType","BoxShape","shapeType","Box","emitTime","defaultDirection","outMin","outMax","radian","dirSin","dirCos","ParticleShapeArcMode","CircleShape","Circle","_arc","_arcMode","Random","_arcSpeed","positionPoint","_tempPositionPoint","arcMode","normalizedEmitTime","arcSpeed","randomDirZ","randomDegreeOnXY","randomDirY","_getUnitArcRange","ConeShape","Cone","_angle","_emitType","unitPosition","dirSinA","dirCosA","emitType","unitDirection","randomDirection","randomRadian","ConeEmitType","HemisphereShape","Hemisphere","randomDir","SphereShape","Sphere","VERT_SHADER","FRAG_SHADER","TrailMaterial","_tempVector3","TrailRenderer","props","_stroke","stroke","_minSeg","minSeg","_lifetime","lifetime","_maxPointNum","_points","_pointStates","_strapPoints","_curPointNum","_initGeometry","mov","newIdx","appendNewPoint","lastPoint","_updateStrapVertices","_updateStrapCoords","_vertexBuffer","TriangleStrip","_vertexStride","points","vx","vy","vz","down","dy","perpVector","_projectOnPlane","_prePointsNum","texDelta","_projectOnVector","n_p","cosine","Probe","probeLayer","_isCube","onTextureChange","renderColorTexture","_oriCameraCullingMask","_activeRenderTarget","_renderTargetSwap","_oriCameraRenderTarget","cacheTarget","cacheUp","cacheDir","CubeProbe","oriViewMatrix","_storeCamera","faceIndex","_setCamera","_restoreCamera","_oriFieldOfView"],"mappings":";;;;;;AAAA;;IAGO,IAAKA,QAAAA,iBAAAA,SAAAA,QAAAA,EAAAA;6BACY,QAAA,CAAA,QAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA;4BAED,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;0BAEF,QAAA,CAAA,QAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA,CAAA;yBAED,QAAA,CAAA,QAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA,GAAA,KAAA,CAAA;6BAEI,QAAA,CAAA,QAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA;AATZA,IAAAA,OAAAA,QAAAA,CAAAA;AAWX,CAAA,CAAA,EAAA;;ACdD,SAAS,iBAAiB,CAAC,MAAM,EAAE,KAAK,EAAE;AAC1C,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC3C,QAAQ,IAAI,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AAClC,QAAQ,UAAU,CAAC,UAAU,GAAG,UAAU,CAAC,UAAU,IAAI,KAAK,CAAC;AAC/D,QAAQ,UAAU,CAAC,YAAY,GAAG,IAAI,CAAC;AACvC;AACA,QAAQ,IAAI,OAAO,IAAI,UAAU,EAAE,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC;AAC9D;AACA,QAAQ,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,UAAU,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;AAClE,KAAK;AACL,CAAC;AACD,SAAS,aAAa,CAAC,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE;AAC7D,IAAI,IAAI,UAAU,EAAE,iBAAiB,CAAC,WAAW,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;AACzE,IAAI,IAAI,WAAW,EAAE,iBAAiB,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;AACjE;AACA,IAAI,OAAO,WAAW,CAAC;AACvB;;AChBA,SAAS,iBAAiB,CAAC,CAAC,EAAE,CAAC,EAAE;AACjC,IAAI,iBAAiB,GAAG,MAAM,CAAC,cAAc,IAAI,SAAS,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE;AAC/E,QAAQ,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC;AACxB;AACA,QAAQ,OAAO,CAAC,CAAC;AACjB,KAAK,CAAC;AACN;AACA,IAAI,OAAO,iBAAiB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACnC;;ACNA,SAAS,SAAS,CAAC,QAAQ,EAAE,UAAU,EAAE;AACzC,IAAI,IAAI,OAAO,UAAU,KAAK,UAAU,IAAI,UAAU,KAAK,IAAI,EAAE;AACjE,QAAQ,MAAM,IAAI,SAAS,CAAC,oDAAoD,CAAC,CAAC;AAClF,KAAK;AACL;AACA,IAAI,QAAQ,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,UAAU,IAAI,UAAU,CAAC,SAAS,EAAE,EAAE,WAAW,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;AACrJ;AACA,IAAI,IAAI,UAAU,EAAE,iBAAiB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;AAC5D;;ACNA;;IAGO,IAAMC,cAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,cAAAA,GAAAA;6CAIuB,IAAA,CAClCC,iBAAiB,IAAIC,kBAAAA,EAAAA,CAAAA;;AALVF,IAAAA,IAAAA,MAAAA,GAAAA,cAAAA,CAAAA,SAAAA,CAAAA;IASXG,MAAAA,CAAAA,OAIC,GAJDA,SAAAA,OAAAA,GAAAA;QACE,IAAI,CAACC,OAAO,GAAG,IAAA,CAAA;QACf,IAAI,CAACH,cAAc,GAAG,IAAA,CAAA;QACtB,IAAI,CAACI,GAAG,GAAG,IAAA,CAAA;AACb,KAAA,CAAA;AAbWL,IAAAA,OAAAA,cAAAA,CAAAA;AAcZ,CAAA,EAAA,CAAA;AAdYA,cAAAA,CACJM,SAAY,GAAA;AAAC,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAE,CAAA;;ACRvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAwCA;AACO,SAAS,UAAU,CAAC,UAAU,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE;AAC1D,EAAE,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,MAAM,GAAG,IAAI,KAAK,IAAI,GAAG,IAAI,GAAG,MAAM,CAAC,wBAAwB,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC;AAC/H,EAAE,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,OAAO,CAAC,QAAQ,KAAK,UAAU,EAAE,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,UAAU,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;AACjI,OAAO,KAAK,IAAI,CAAC,GAAG,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC;AACpJ,EAAE,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;AAChE,CAAC;AA2QD;AACuB,OAAO,eAAe,KAAK,UAAU,GAAG,eAAe,GAAG,UAAU,KAAK,EAAE,UAAU,EAAE,OAAO,EAAE;AACvH,EAAE,IAAI,CAAC,GAAG,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;AAC7B,EAAE,OAAO,CAAC,CAAC,IAAI,GAAG,iBAAiB,EAAE,CAAC,CAAC,KAAK,GAAG,KAAK,EAAE,CAAC,CAAC,UAAU,GAAG,UAAU,EAAE,CAAC,CAAC;AACnF;;AC1UA,SAAS,WAAW,CAAC,IAAI,EAAE,KAAK,EAAE;AAClC,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,OAAO,MAAM,KAAK,WAAW,IAAI,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE;AACrF,QAAQ,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC;AACjD,KAAK,MAAM,OAAO,IAAI,YAAY,KAAK,CAAC;AACxC;;ACJA;;IAGO,IAAKC,SAAAA,iBAAAA,SAAAA,SAAAA,EAAAA;yBACQ,SAAA,CAAA,SAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;6BAEI,SAAA,CAAA,SAAA,CAAA,YAAA,CAAA,GAAA,CAAA,CAAA,GAAA,YAAA,CAAA;0BAEH,SAAA,CAAA,SAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA;uBAEH,SAAA,CAAA,SAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA,CAAA;AAPNA,IAAAA,OAAAA,SAAAA,CAAAA;AASX,CAAA,CAAA,EAAA,CAAA;;ACPD;;AAEC,IACM,SAASC,WAAYC,CAAAA,MAAc,EAAEC,WAAmB,EAAA;AAC7DC,IAAAA,YAAAA,CAAaC,iBAAiB,CAACH,MAAQC,EAAAA,WAAAA,EAAaH,UAAUM,MAAM,CAAA,CAAA;AACtE,CAAA;AAEA;;;;;;AAMC,IACM,SAASC,eAAgBL,CAAAA,MAAc,EAAEC,WAAmB,EAAA;AACjEC,IAAAA,YAAAA,CAAaC,iBAAiB,CAACH,MAAQC,EAAAA,WAAAA,EAAaH,UAAUQ,UAAU,CAAA,CAAA;AAC1E,CAAA;AAEA;;;;;;;AAOC,IACM,SAASC,YAAaP,CAAAA,MAAc,EAAEC,WAAmB,EAAA;AAC9DC,IAAAA,YAAAA,CAAaC,iBAAiB,CAACH,MAAQC,EAAAA,WAAAA,EAAaH,UAAUU,OAAO,CAAA,CAAA;AACvE,CAAA;AAEA;;;;;;;;AAQC,IACM,SAASC,SAAUT,CAAAA,MAAc,EAAEC,WAAmB,EAAA;AAC3DC,IAAAA,YAAAA,CAAaC,iBAAiB,CAACH,MAAQC,EAAAA,WAAAA,EAAaH,UAAUY,IAAI,CAAA,CAAA;AACpE,CAAA;AAEA;;;IAIO,IAAMR,YAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,YAAAA,GAAAA,EAAAA;AAQX;;;;;MARWA,YAcJC,CAAAA,iBAON,GAPD,SAAOA,kBAAkBH,MAAc,EAAEC,WAAmB,EAAEU,IAAe,EAAA;QAC3E,IAAIC,SAAAA,GAAYV,YAAaW,CAAAA,gBAAgB,CAACC,GAAG,CAACd,OAAOe,WAAW,CAAA,CAAA;AACpE,QAAA,IAAI,CAACH,SAAW,EAAA;YACdA,SAAYI,GAAAA,MAAAA,CAAOC,MAAM,CAAC,IAAA,CAAA,CAAA;AAjBnBf,YAAAA,YAAAA,CAkBMW,gBAAgB,CAACK,GAAG,CAAClB,MAAAA,CAAOe,WAAW,EAAEH,SAAAA,CAAAA,CAAAA;AACxD,SAAA;QACAA,SAAS,CAACX,YAAY,GAAGU,IAAAA,CAAAA;AAC3B,KAAA,CAAA;AAEA;;AAEC,MACD,YAAOQ,CAAAA,YAgBN,GAhBD,SAAOA,aAAaC,IAAc,EAAA;AAChC,QAAA,IAAIC,aAAanB,YA3BRA,CA2BqBoB,aAAa,CAACR,GAAG,CAACM,IAAAA,CAAAA,CAAAA;AAChD,QAAA,IAAI,CAACC,UAAY,EAAA;YACfA,UAAaL,GAAAA,MAAAA,CAAOC,MAAM,CAAC,IAAA,CAAA,CAAA;AA7BpBf,YAAAA,YAAAA,CA8BMoB,aAAa,CAACJ,GAAG,CAACE,IAAMC,EAAAA,UAAAA,CAAAA,CAAAA;YACrC,IAAME,UAAAA,GAAarB,YA/BZA,CA+ByBsB,WAAW,CAAA;YAC3C,IAAMC,YAAAA,GAAevB,YAhCdA,CAgC2BW,gBAAgB,CAAA;AAClD,YAAA,MAAOO,SAASG,UAAY,CAAA;gBAC1B,IAAMG,aAAAA,GAAgBD,YAAaX,CAAAA,GAAG,CAACM,IAAAA,CAAAA,CAAAA;AACvC,gBAAA,IAAIM,aAAe,EAAA;oBACjBV,MAAOW,CAAAA,MAAM,CAACN,UAAYK,EAAAA,aAAAA,CAAAA,CAAAA;AAC5B,iBAAA;gBACAN,IAAOJ,GAAAA,MAAAA,CAAOY,cAAc,CAACR,IAAAA,CAAAA,CAAAA;AAC/B,aAAA;AACF,SAAA;QACA,OAAOC,UAAAA,CAAAA;AACT,KAAA,CAAA;AA1CWnB,IAAAA,YAAAA,CA4CJ2B,aAsGN,GAtGD,SAAOA,aACLC,CAAAA,MAAc,EACd9B,MAAc,EACd+B,CAAkB,EAClBC,SAAoB,EACpBC,OAAe,EACfC,UAAkB,EAClBC,eAAoC,EAAA;QAEpC,IAAIH,SAAAA,KAAclC,SAAUM,CAAAA,MAAM,EAAE;AAClC,YAAA,OAAA;AACF,SAAA;QAEA,IAAMgC,cAAAA,GAAiBN,MAAM,CAACC,CAAE,CAAA,CAAA;QAChC,IAAkB,WAAdK,CAAAA,cAAAA,EAA0BpB,MAAQ,CAAA,EAAA;AACpC,YAAA,IAAIgB,SAAcK,KAAAA,SAAAA,IAAaL,SAAclC,KAAAA,SAAAA,CAAUQ,UAAU,EAAE;gBACjEN,MAAM,CAAC+B,EAAE,GAAGK,cAAAA,CAAAA;AACZ,gBAAA,OAAA;AACF,aAAA;YAEA,IAAMhB,IAAAA,GAAOgB,eAAerB,WAAW,CAAA;YACvC,OAAQK,IAAAA;gBACN,KAAKkB,UAAAA,CAAAA;gBACL,KAAKC,WAAAA,CAAAA;gBACL,KAAKC,WAAAA,CAAAA;gBACL,KAAKC,SAAAA,CAAAA;gBACL,KAAKC,UAAAA,CAAAA;gBACL,KAAKC,UAAAA,CAAAA;gBACL,KAAKC,YAAAA,CAAAA;gBACL,KAAKC,YAAAA;oBACH,IAAIC,eAAAA,GAA8B9C,MAAM,CAAC+B,CAAE,CAAA,CAAA;oBAC3C,IAAIe,eAAAA,IAAmB,QAAQA,eAAgBC,CAAAA,MAAM,KAAK,cAAaX,CAAgBW,MAAM,EAAE;AAC7F/C,wBAAAA,MAAM,CAAC+B,CAAAA,CAAE,GAAgBK,eAAgBY,KAAK,EAAA,CAAA;qBACzC,MAAA;AACLF,wBAAAA,eAAAA,CAAgB5B,GAAG,CAAakB,cAAAA,CAAAA,CAAAA;AAClC,qBAAA;AACA,oBAAA,MAAA;gBACF,KAAKa,KAAAA;oBACH,IAAIC,eAAAA,GAA8BlD,MAAM,CAAC+B,CAAE,CAAA,CAAA;oBAC3C,IAAMgB,MAAAA,GAAS,cAAaX,CAAgBW,MAAM,CAAA;AAClD,oBAAA,IAAIG,mBAAmB,IAAM,EAAA;AAC3BlD,wBAAAA,MAAM,CAAC+B,CAAAA,CAAE,GAAGmB,eAAAA,GAAkB,IAAID,KAAWF,CAAAA,MAAAA,CAAAA,CAAAA;qBACxC,MAAA;AACLG,wBAAAA,eAAAA,CAAgBH,MAAM,GAAGA,MAAAA,CAAAA;AAC3B,qBAAA;AACA,oBAAA,IAAK,IAAII,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAIJ,QAAQI,CAAK,EAAA,CAAA;AAzF9BjD,wBAAAA,YAAAA,CA0FY2B,aAAa,CACZO,cAAAA,EACZc,iBACAC,CACAnB,EAAAA,SAAAA,EACAC,SACAC,UACAC,EAAAA,eAAAA,CAAAA,CAAAA;AAEJ,qBAAA;AACA,oBAAA,MAAA;AACF,gBAAA;oBACE,IAAIiB,cAAAA,GAAyBpD,MAAM,CAAC+B,CAAE,CAAA,CAAA;;AAEtC,oBAAA,IAAI,CAACqB,cAAgB,EAAA;wBACnBA,cAAiBjB,GAAAA,eAAAA,CAAgBrB,GAAG,CAACsB,cAAAA,CAAAA,CAAAA;AACrC,wBAAA,IAAI,CAACgB,cAAgB,EAAA;4BACnBA,cAAiB,GAAA,IAAIhB,eAAerB,WAAW,EAAA,CAAA;4BAC/CoB,eAAgBjB,CAAAA,GAAG,CAACkB,cAAgBgB,EAAAA,cAAAA,CAAAA,CAAAA;AACtC,yBAAA;wBACApD,MAAM,CAAC+B,EAAE,GAAGqB,cAAAA,CAAAA;AACd,qBAAA;oBAEA,IAAmBhB,cAAgBiB,CAAAA,QAAQ,EAAE;;AAE5BD,wBAAAA,cAAAA,CAAgBC,QAAQ,CAAejB,cAAAA,CAAAA,CAAAA;qBACjD,MAAA;;AAEL,wBAAA,IAAMf,aAAanB,YAtHlBA,CAsH+BiB,YAAY,CAACiB,eAAerB,WAAW,CAAA,CAAA;wBACvE,IAAK,IAAIgB,OAAKK,cAAgB,CAAA;4BAvH7BlC,YAwHc2B,CAAAA,aAAa,CAChBO,cAAAA,EACRgB,cACArB,EAAAA,GAAAA,EACAV,UAAU,CAACU,GAAAA,CAAE,EACbE,OAAAA,EACAC,UACAC,EAAAA,eAAAA,CAAAA,CAAAA;AAEJ,yBAAA;;wBAGA,IAA4BC,cAAgBkB,CAAAA,QAAQ,EAAE;4BAC5BlB,cAAgBkB,CAAAA,QAAQ,CACvBF,cAAAA,EACvBnB,OACAC,EAAAA,UAAAA,CAAAA,CAAAA;AAEJ,yBAAA;AACF,qBAAA;AACA,oBAAA,MAAA;AACJ,aAAA;SACK,MAAA;;YAELlC,MAAM,CAAC+B,EAAE,GAAGK,cAAAA,CAAAA;AACd,SAAA;AACF,KAAA,CAAA;IAlJWlC,YAoJJqD,CAAAA,eAIN,GAJD,SAAOA,eAAAA,CAAgBzB,MAAc,EAAE9B,MAAc,EAAEmC,eAAoC,EAAA;QACzF,IAAK,IAAIJ,KAAKD,MAAQ,CAAA;YArJb5B,YAsJM2B,CAAAA,aAAa,CAACC,MAAQ9B,EAAAA,MAAAA,EAAQ+B,GAAGjC,SAAUY,CAAAA,IAAI,EAAE,IAAA,EAAM,IAAMyB,EAAAA,eAAAA,CAAAA,CAAAA;AAC5E,SAAA;AACF,KAAA,CAAA;AAxJWjC,IAAAA,OAAAA,YAAAA,CAAAA;AAyJZ,CAAA,GAAA;AAxJC,iBADWA,YAEJW,CAAAA,gBAAAA,GAAmB,IAAI2C,GAAAA,EAAAA,CAAAA;AAC9B,iBAHWtD,YAIJoB,CAAAA,aAAAA,GAAgB,IAAIkC,GAAAA,EAAAA,CAAAA;AAJhBtD,YAMIsB,CAAAA,WAAAA,GAAcR,MAAOY,CAAAA,cAAc,CAACZ,MAAAA,CAAAA;;ACvDrD;;IAGO,IAAeyC,YAAf,iBAAA,WAAA;AAAeA,IAAAA,SAAAA,YAAAA,CAyBRC,MAAc,EAAA;AAtB1B,iCAESC,IAAAA,CAAAA,UAAAA,GAAqB,EALVF,aAKyBG,kBAAkB,CAAA;aAIrDC,UAAsB,GAAA,KAAA,CAAA;QAiB9B,IAAI,CAACC,OAAO,GAAGJ,MAAAA,CAAAA;;AA1BGD,IAAAA,IAAAA,MAAAA,GAAAA,YAAAA,CAAAA,SAAAA,CAAAA;AA6BpB;;MAGAM,MAAAA,CAAAA,OAIC,GAJDA,SAAAA,OAAAA,GAAAA;QACE,IAAI,IAAI,CAACF,UAAU,EAAE,OAAA;AACrB,QAAA,IAAI,CAACG,UAAU,EAAA,CAAA;QACf,IAAI,CAACH,UAAU,GAAG,IAAA,CAAA;AACpB,KAAA,CAAA;IAEA,MAAUG,CAAAA,UAIT,GAJD,SAAUA,UAAAA,GAAAA;AACR,QAAA,IAAM,eAAEC,GAAoB,IAAI,CAACH,OAAO,CAAhCG,eAAAA,CAAAA;QACRA,eAAgBC,CAAAA,YAAY,CAAC,IAAI,CAAA,CAAA;QACjCD,eAAgBE,CAAAA,sBAAsB,CAAC,IAAI,CAAA,CAAA;AAC7C,KAAA,CAAA;AA1CoBV,IAAAA,aAAAA,CAAAA,YAAAA,EAAAA;;YAchBC,GAAAA,EAAAA,QAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACI,OAAO,CAAA;AACrB,aAAA;;;YAKIM,GAAAA,EAAAA,WAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACP,UAAU,CAAA;AACxB,aAAA;;;AAvBoBJ,IAAAA,OAAAA,YAAAA,CAAAA;AA2CrB,CAAA,GAAA;AA3CqBA,YAAAA,CACLG,kBAA6B,GAAA,CAAA,CAAA;;;;;;;;ACH9C;;IAGO,IAAeS,aAAf,iBAAA,SAAA,YAAA,EAAA;AAAeA,IAAAA,SAAAA,CAAAA,aAAAA,EAAAA,YAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,aAAAA,CAcEX,MAAc,EAAA;;AAClC,QAAA,KAAA,GAAA,YAAA,CAAA,IAAA,CAAA,IAAA,EAAMA,wIAd4G,KAAA,CACpHY,cAAuB,KAEfC,EAAAA,KAAAA,CAAAA,SAAAA,GAAoB,SACpBC,eAAmC,GAAA,IAAA,CAAA;QAWzCd,MAAOO,CAAAA,eAAe,CAACQ,iBAAiB,CAAA,KAAA,CAAA,CAAA;;;AAhBtBJ,IAAAA,IAAAA,MAAAA,GAAAA,aAAAA,CAAAA,SAAAA,CAAAA;AA+BpB,IAAA,MAAA,CAASN,OAsBR,GAtBD,SAASA,OAAQW,CAAAA,KAAsB,EAAEC,IAAc,EAAA;AAAtCD,QAAAA,IAAAA,kBAAAA,KAAiB,GAAA,KAAA,CAAA;AAChC,QAAA,IAAI,CAACA,KAAO,EAAA;AACV,YAAA,IAAI,IAAI,CAACH,SAAS,KAAK,CAAG,EAAA;gBACxB,OAAO,KAAA,CAAA;AACT,aAAA;YAEA,IAAMK,cAAAA,GAAiB,IAAI,CAACJ,eAAe,CAAA;YAC3C,IAAII,cAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,cAAgB7B,CAAAA,MAAM,EAAE;AAC1B,gBAAA,IAAI4B,IAAM,EAAA;oBACR,IAAK,IAAIxB,IAAI,CAAG0B,EAAAA,CAAAA,GAAID,eAAe7B,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;AACrD,wBAAA,IAAIyB,cAAc,CAACzB,CAAAA,CAAE,CAAC2B,QAAQ,GAAG,CAAG,EAAA;4BAClC,OAAO,KAAA,CAAA;AACT,yBAAA;AACF,qBAAA;iBACK,MAAA;oBACL,OAAO,KAAA,CAAA;AACT,iBAAA;AACF,aAAA;AACF,SAAA;AAEA,QAAA,YAAA,CAAA,SAAA,CAAMf,OAAD,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;QACL,OAAO,IAAA,CAAA;AACT,KAAA,CAAA;AAEA;;AAEC,MACDgB,MAAAA,CAAAA,yBAEC,GAFDA,SAAAA,0BAA0BC,aAA4B,EAAA;QACnD,CAAA,IAAI,CAACR,eAAAA,KAAL,IAAI,CAACA,kBAAoB,EAAE,CAAD,EAAGS,IAAI,CAACD,aAAAA,CAAAA,CAAAA;AACrC,KAAA,CAAA;AAEA;;AAEC,MACDE,MAAAA,CAAAA,4BAIC,GAJDA,SAAAA,6BAA6BF,aAA4B,EAAA;QACvD,IAAMJ,cAAAA,GAAiB,IAAI,CAACJ,eAAe,CAAA;QAC3C,IAAMW,KAAAA,GAAQP,cAAeQ,CAAAA,OAAO,CAACJ,aAAAA,CAAAA,CAAAA;QACrCJ,cAAeS,CAAAA,MAAM,CAACF,KAAO,EAAA,CAAA,CAAA,CAAA;AAC/B,KAAA,CAAA;AAEA;;MAGAG,MAAAA,CAAAA,cAEC,GAFDA,SAAAA,cAAAA,GAAAA;QACE,OAAO,IAAI,CAACf,SAAS,CAAA;AACvB,KAAA,CAAA;AAEA;;AAEC,MACDgB,MAAAA,CAAAA,cAEC,GAFDA,SAAAA,eAAeC,KAAa,EAAA;QAC1B,IAAI,CAACjB,SAAS,IAAIiB,KAAAA,CAAAA;AACpB,KAAA,CAAA;AAEA;;AAEC,MACDC,MAAAA,CAAAA,qBAEC,GAFDA,SAAAA,sBAAsBC,IAAY,EAAA;QAChC,IAAI,CAAC5B,OAAO,CAACG,eAAe,CAAC0B,SAAS,CAACD,MAAM,IAAI,CAAA,CAAA;AACnD,KAAA,CAAA;AAEA;;MAGA,MAAA,CAAmB1B,UAOlB,GAPD,SAAmBA,UAAAA,GAAAA;AACjB,QAAA,YAAA,CAAA,SAAA,CAAMA,UAAD,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;AACL,QAAA,IAAI,CAACF,OAAO,CAACG,eAAe,CAAC2B,oBAAoB,CAAC,IAAI,CAAA,CAAA;QACtD,IAAMd,QAAAA,GAAW,IAAI,CAACQ,cAAc,EAAA,CAAA;AACpC,QAAA,IAAIR,WAAW,CAAG,EAAA;YAChB,IAAI,CAACS,cAAc,CAAC,CAACT,QAAAA,CAAAA,CAAAA;AACvB,SAAA;AACF,KAAA,CAAA;AAtGoBT,IAAAA,aAAAA,CAAAA,aAAAA,EAAAA;;YAUhBS,GAAAA,EAAAA,UAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACP,SAAS,CAAA;AACvB,aAAA;;;AAZoBF,IAAAA,OAAAA,aAAAA,CAAAA;EAAsBZ,YAuG3C;;AC3GD;;AAEC,IACM,IAAeoC,kBAAf,SAAeA,eAAAA,CAIR,QAAkB,EAAA;SAAXC,QAAAA,GAAAA,QAAAA,CAAAA;AAOpB;;ACjBD;;;;IAKO,IAAKC,uBAAAA,iBAAAA,SAAAA,uBAAAA,EAAAA;4FAC2E,uBAAA,CAAA,uBAAA,CAAA,OAAA,CAAA,GAAA,EAAA,CAAA,GAAA,OAAA,CAAA;qCAEvD,uBAAA,CAAA,uBAAA,CAAA,SAAA,CAAA,GAAA,EAAA,CAAA,GAAA,SAAA,CAAA;qGAEgE,uBAAA,CAAA,uBAAA,CAAA,cAAA,CAAA,GAAA,EAAA,CAAA,GAAA,cAAA,CAAA;sCAG/D,uBAAA,CAAA,uBAAA,CAAA,SAAA,CAAA,GAAA,EAAA,CAAA,GAAA,SAAA,CAAA;sCAEA,uBAAA,CAAA,uBAAA,CAAA,SAAA,CAAA,GAAA,EAAA,CAAA,GAAA,SAAA,CAAA;sCAEA,uBAAA,CAAA,uBAAA,CAAA,SAAA,CAAA,GAAA,EAAA,CAAA,GAAA,SAAA,CAAA;sDAEgB,uBAAA,CAAA,uBAAA,CAAA,iBAAA,CAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,CAAA;sDAEA,uBAAA,CAAA,uBAAA,CAAA,iBAAA,CAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,CAAA;AAhBrCA,IAAAA,OAAAA,uBAAAA,CAAAA;AAkBX,CAAA,CAAA,EAAA;;ACvBD;;IAGO,IAAKC,eAAAA,iBAAAA,SAAAA,eAAAA,EAAAA;sDACqC,eAAA,CAAA,eAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA,CAAA;sDAEA,eAAA,CAAA,eAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA,CAAA;sDAEA,eAAA,CAAA,eAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA,CAAA;sDAEA,eAAA,CAAA,eAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA,CAAA;sDAEA,eAAA,CAAA,eAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA,CAAA;sDAEA,eAAA,CAAA,eAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA,CAAA;AAXrCA,IAAAA,OAAAA,eAAAA,CAAAA;AAaX,CAAA,CAAA,EAAA;;AChBD;;IAGO,IAAKC,2BAAAA,iBAAAA,SAAAA,2BAAAA,EAAAA;uBACM,2BAAA,CAAA,2BAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA,CAAA;oEAE6C,2BAAA,CAAA,2BAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA,CAAA;8DAEN,2BAAA,CAAA,2BAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA,CAAA;gFAEkB,2BAAA,CAAA,2BAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA,CAAA;uEAET,2BAAA,CAAA,2BAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA;uEAEA,2BAAA,CAAA,2BAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA,CAAA;mFAEY,2BAAA,CAAA,2BAAA,CAAA,cAAA,CAAA,GAAA,CAAA,CAAA,GAAA,cAAA,CAAA;wBAE3D,2BAAA,CAAA,2BAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;AAfPA,IAAAA,OAAAA,2BAAAA,CAAAA;AAiBX,CAAA,CAAA,EAAA;;ACpBD;;IAGO,IAAKC,iBAAAA,iBAAAA,SAAAA,iBAAAA,EAAAA;4BACW,iBAAA,CAAA,iBAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA,CAAA;+BAEG,iBAAA,CAAA,iBAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA,CAAA;gCAEC,iBAAA,CAAA,iBAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA,CAAA;AALfA,IAAAA,OAAAA,iBAAAA,CAAAA;AAOX,CAAA,CAAA,EAAA;;ACVD;;IAGO,IAAKC,aAAAA,iBAAAA,SAAAA,aAAAA,EAAAA;2CAC0B,aAAA,CAAA,aAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;4CAEC,aAAA,CAAA,aAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA,CAAA;4CAEA,aAAA,CAAA,aAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA,CAAA;2GAE+D,aAAA,CAAA,aAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA,CAAA;sFAErB,aAAA,CAAA,aAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;uCAE/C,aAAA,CAAA,aAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;+DAEwB,aAAA,CAAA,aAAA,CAAA,gBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,gBAAA,CAAA;6CAElB,aAAA,CAAA,aAAA,CAAA,cAAA,CAAA,GAAA,CAAA,CAAA,GAAA,cAAA,CAAA;6CAEA,aAAA,CAAA,aAAA,CAAA,cAAA,CAAA,GAAA,CAAA,CAAA,GAAA,cAAA,CAAA;8DAEiB,aAAA,CAAA,aAAA,CAAA,mBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,mBAAA,CAAA;wGAE0C,aAAA,CAAA,aAAA,CAAA,kBAAA,CAAA,GAAA,EAAA,CAAA,GAAA,kBAAA,CAAA;oDAGpD,aAAA,CAAA,aAAA,CAAA,KAAA,CAAA,GAAA,EAAA,CAAA,GAAA,KAAA,CAAA;qDAEC,aAAA,CAAA,aAAA,CAAA,KAAA,CAAA,GAAA,EAAA,CAAA,GAAA,KAAA,CAAA;mEAEc,aAAA,CAAA,aAAA,CAAA,KAAA,CAAA,GAAA,EAAA,CAAA,GAAA,KAAA,CAAA;oDAEf,aAAA,CAAA,aAAA,CAAA,UAAA,CAAA,GAAA,EAAA,CAAA,GAAA,UAAA,CAAA;oDAEA,aAAA,CAAA,aAAA,CAAA,UAAA,CAAA,GAAA,EAAA,CAAA,GAAA,UAAA,CAAA;+EAE2B,aAAA,CAAA,aAAA,CAAA,YAAA,CAAA,GAAA,EAAA,CAAA,GAAA,YAAA,CAAA;oDAE3B,aAAA,CAAA,aAAA,CAAA,YAAA,CAAA,GAAA,EAAA,CAAA,GAAA,YAAA,CAAA;oDAEA,aAAA,CAAA,aAAA,CAAA,YAAA,CAAA,GAAA,EAAA,CAAA,GAAA,YAAA,CAAA;qDAEC,aAAA,CAAA,aAAA,CAAA,aAAA,CAAA,GAAA,EAAA,CAAA,GAAA,aAAA,CAAA;oDAED,aAAA,CAAA,aAAA,CAAA,YAAA,CAAA,GAAA,EAAA,CAAA,GAAA,YAAA,CAAA;qDAEC,aAAA,CAAA,aAAA,CAAA,aAAA,CAAA,GAAA,EAAA,CAAA,GAAA,aAAA,CAAA;mEAEc,aAAA,CAAA,aAAA,CAAA,UAAA,CAAA,GAAA,EAAA,CAAA,GAAA,UAAA,CAAA;mEAEA,aAAA,CAAA,aAAA,CAAA,UAAA,CAAA,GAAA,EAAA,CAAA,GAAA,UAAA,CAAA;mEAEA,aAAA,CAAA,aAAA,CAAA,UAAA,CAAA,GAAA,EAAA,CAAA,GAAA,UAAA,CAAA;mEAEA,aAAA,CAAA,aAAA,CAAA,UAAA,CAAA,GAAA,EAAA,CAAA,GAAA,UAAA,CAAA;qEAEE,aAAA,CAAA,aAAA,CAAA,YAAA,CAAA,GAAA,EAAA,CAAA,GAAA,YAAA,CAAA;qEAEA,aAAA,CAAA,aAAA,CAAA,YAAA,CAAA,GAAA,EAAA,CAAA,GAAA,YAAA,CAAA;6FAGwB,aAAA,CAAA,aAAA,CAAA,OAAA,CAAA,GAAA,EAAA,CAAA,GAAA,OAAA,CAAA;qCAExD,aAAA,CAAA,aAAA,CAAA,SAAA,CAAA,GAAA,EAAA,CAAA,GAAA,SAAA,CAAA;qGAEgE,aAAA,CAAA,aAAA,CAAA,cAAA,CAAA,GAAA,EAAA,CAAA,GAAA,cAAA,CAAA;gCAErE,aAAA,CAAA,aAAA,CAAA,SAAA,CAAA,GAAA,EAAA,CAAA,GAAA,SAAA,CAAA;gCAEA,aAAA,CAAA,aAAA,CAAA,SAAA,CAAA,GAAA,EAAA,CAAA,GAAA,SAAA,CAAA;gCAEA,aAAA,CAAA,aAAA,CAAA,SAAA,CAAA,GAAA,EAAA,CAAA,GAAA,SAAA,CAAA;gDAEgB,aAAA,CAAA,aAAA,CAAA,iBAAA,CAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,CAAA;gDAEA,aAAA,CAAA,aAAA,CAAA,iBAAA,CAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,CAAA;wDAGQ,aAAA,CAAA,aAAA,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;wDAEA,aAAA,CAAA,aAAA,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;AA9EvCA,IAAAA,OAAAA,aAAAA,CAAAA;AAgFX,CAAA,CAAA,EAAA;;ACnFD;;IAGO,IAAKC,YAAAA,iBAAAA,SAAAA,YAAAA,EAAAA;yEACwD,YAAA,CAAA,YAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;qGAE4B,YAAA,CAAA,YAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA;AAHpFA,IAAAA,OAAAA,YAAAA,CAAAA;AAKX,CAAA,CAAA,EAAA;;ACRD;;IAGO,IAAKC,eAAAA,iBAAAA,SAAAA,eAAAA,EAAAA;oFACmE,eAAA,CAAA,eAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA,CAAA;uFAEG,eAAA,CAAA,eAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;wGAEiB,eAAA,CAAA,eAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;AALvFA,IAAAA,OAAAA,eAAAA,CAAAA;AAOX,CAAA,CAAA,EAAA;;ACPM,IAAA,gBAAA,iBAAA,SAAA,aAAA,EAAA;AAAeC,IAAAA,SAAAA,CAAAA,gBAAAA,EAAAA,aAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,gBAAAA,CAWE5C,MAAc,EAAA;;gBAClC,aAAMA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,CAAAA,IAAAA,IAAAA,mBAXM,KAAA,CACd6C,cAA0B,GAAA,KAAA,CAAA;QAWxB7C,MAAOO,CAAAA,eAAe,CAACuC,mBAAmB,CAAA,KAAA,CAAA,CAAA;;;AAbxBF,IAAAA,IAAAA,MAAAA,GAAAA,gBAAAA,CAAAA,SAAAA,CAAAA;AAqBpB;;MAGA,MAAA,CAAmBtC,UAGlB,GAHD,SAAmBA,UAAAA,GAAAA;AACjB,QAAA,aAAA,CAAA,SAAA,CAAMA,UAAD,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;AACL,QAAA,IAAI,CAACN,MAAM,CAACO,eAAe,CAACwC,sBAAsB,CAAC,IAAI,CAAA,CAAA;AACzD,KAAA,CAAA;AA3BoBH,IAAAA,aAAAA,CAAAA,gBAAAA,EAAAA;;YAOhBI,GAAAA,EAAAA,eAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACH,cAAc,CAAA;AAC5B,aAAA;;;AAToBD,IAAAA,OAAAA,gBAAAA,CAAAA;EAAyBjC,aA4B9C,CAAA;;AC/BD;;;AAGC,yBAED,IAAMsC,IAAAA,GAAO,SAACC,OAAAA,EAAAA;AAAkBC,IAAAA,IAAAA,IAAAA,IAAAA,GAAAA,SAAAA,CAAAA,MAAAA,EAAAA,cAAAA,GAAAA,IAAAA,KAAAA,CAAAA,IAAAA,GAAAA,CAAAA,GAAAA,IAAAA,GAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAAAA,IAAAA,GAAAA,CAAAA,EAAAA,IAAAA,GAAAA,IAAAA,EAAAA,IAAAA,EAAAA,CAAAA;AAAAA,QAAAA,cAAAA,CAAAA,IAAAA,GAAAA,CAAAA,CAAAA,GAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA;;AAA2B,CAAA,CAAA;AAC3D,IAAMC,KAAQC,GAAAA,OAAAA,CAAQC,GAAG,CAACC,IAAI,CAACF,OAAAA,CAAAA,CAAAA;AAC/B,IAAMG,IAAOH,GAAAA,OAAAA,CAAQG,IAAI,CAACD,IAAI,CAACF,OAAAA,CAAAA,CAAAA;AAC/B,IAAMI,IAAOJ,GAAAA,OAAAA,CAAQI,IAAI,CAACF,IAAI,CAACF,OAAAA,CAAAA,CAAAA;AAC/B,IAAMK,KAAQL,GAAAA,OAAAA,CAAQK,KAAK,CAACH,IAAI,CAACF,OAAAA,CAAAA,CAAAA;IAEpBM,MAAS,GAAA;IACpBP,KAAOH,EAAAA,IAAAA;IACPO,IAAMP,EAAAA,IAAAA;IACNQ,IAAMR,EAAAA,IAAAA;IACNS,KAAOT,EAAAA,IAAAA;IACPW,SAAW,EAAA,KAAA;uBAGXC,QAAAA,SAAAA,MAAAA,GAAAA;QACE,IAAI,CAACT,KAAK,GAAGA,KAAAA,CAAAA;QACb,IAAI,CAACI,IAAI,GAAGA,IAAAA,CAAAA;QACZ,IAAI,CAACC,IAAI,GAAGA,IAAAA,CAAAA;QACZ,IAAI,CAACC,KAAK,GAAGA,KAAAA,CAAAA;QACb,IAAI,CAACE,SAAS,GAAG,IAAA,CAAA;AACnB,KAAA;wBAGAE,SAAAA,SAAAA,OAAAA,GAAAA;QACE,IAAI,CAACV,KAAK,GAAGH,IAAAA,CAAAA;QACb,IAAI,CAACO,IAAI,GAAGP,IAAAA,CAAAA;QACZ,IAAI,CAACQ,IAAI,GAAGR,IAAAA,CAAAA;QACZ,IAAI,CAACS,KAAK,GAAGT,IAAAA,CAAAA;QACb,IAAI,CAACW,SAAS,GAAG,KAAA,CAAA;AACnB,KAAA;AACF;;AC1BA;;IAGO,IAAeG,OAAf,iBAAA,SAAA,gBAAA,EAAA;AAAeA,IAAAA,SAAAA,CAAAA,OAAAA,EAAAA,gBAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,OAAAA,GAAAA;;AAOpB,QAAA,KAAA,GAAA,gBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA,mBACAC,KAAAA,CAAAA,eAAAA,GAA2B,KAWnBC,EAAAA,KAAAA,CAAAA,WAAAA,GAAsB,SAEtBC,oBAAgC,GAAA,KAAA,CAAA;;;AArBpBH,IAAAA,IAAAA,MAAAA,GAAAA,OAAAA,CAAAA,SAAAA,CAAAA;AA0JpB;;MAGAI,MAAAA,CAAAA,eAIC,GAJDA,SAAAA,eAAAA,GAAAA;AACE,QAAA,IAAI,CAAC,IAAI,CAACC,OAAO,EAAE,OAAA;QAEnB,IAAI,CAACC,gBAAgB,CAACF,eAAe,EAAA,CAAA;AACvC,KAAA,CAAA;AAEA;;AAEC,MACDG,MAAAA,CAAAA,uBAKC,GALDA,SAAAA,wBAAwBxC,KAAc,EAAA;AACpC,QAAA,IAAI,IAAI,CAACoC,oBAAoB,KAAKpC,KAAO,EAAA;AACvC,YAAA,IAAI,CAACuC,gBAAgB,CAACE,sBAAsB,CAACzC,KAAAA,CAAAA,CAAAA;YAC7C,IAAI,CAACoC,oBAAoB,GAAGpC,KAAAA,CAAAA;AAC9B,SAAA;AACF,KAAA,CAAA;AAEA;;MAGA,MAAA,CAAS0C,QAUR,GAVD,SAASA,QAAAA,GAAAA;QACP,IAAMC,eAAAA,GAAkB,IAAI,CAACJ,gBAAgB,CAAA;AAC7CI,QAAAA,eAAAA,CAAgBC,SAAS,GAAG,IAAI,CAACC,UAAU,CAAA;AAC3CF,QAAAA,eAAAA,CAAgBG,SAAS,GAAG,IAAI,CAACC,UAAU,CAAA;AAC3CJ,QAAAA,eAAAA,CAAgBK,UAAU,GAAG,IAAI,CAACC,WAAW,CAAA;AAC7CN,QAAAA,eAAAA,CAAgBO,UAAU,GAAG,IAAI,CAACf,WAAW,CAAA;AAC7C,QAAA,IAAI,IAAI,CAAC7D,OAAO,CAAC6E,iBAAiB,CAACC,SAAS,EAAE;AAC5CT,YAAAA,eAAAA,CAAgBU,oBAAoB,GAAG,IAAI,CAACC,qBAAqB,CAAA;AACjEX,YAAAA,eAAAA,CAAgBF,sBAAsB,CAAC,IAAI,CAACL,oBAAoB,CAAA,CAAA;AAClE,SAAA;AACF,KAAA,CAAA;AAEA;;MAGA,MAAA,CAAmB5D,UAIlB,GAJD,SAAmBA,UAAAA,GAAAA;AACjB,QAAA,gBAAA,CAAA,SAAA,CAAMA,UAAD,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;QACL,IAAI,CAAC+D,gBAAgB,CAAChE,OAAO,EAAA,CAAA;QAC7B,IAAI,CAACgE,gBAAgB,GAAG,IAAA,CAAA;AAC1B,KAAA,CAAA;AAEA;;;AAGC,MACD,MAAUgB,CAAAA,eAET,GAFD,SAAUA,gBAAgBC,IAAY,EAAA;AACpC,QAAA,OAAOC,IAAKC,CAAAA,KAAK,CAACD,IAAAA,CAAKE,IAAI,CAACH,IAAAA,CAAAA,CAAAA,CAAAA;AAC9B,KAAA,CAAA;IAEA,MAAUI,CAAAA,eAET,GAFD,SAAUA,eAAAA,GAAAA;QACR,OAAO,IAAI,CAACtB,OAAO,GAAGmB,KAAKC,KAAK,CAACD,KAAKE,IAAI,CAACF,KAAKI,GAAG,CAAC,IAAI,CAACC,MAAM,EAAE,IAAI,CAACC,OAAO,CAAA,CAAA,CAAA,GAAM,CAAI,GAAA,CAAA,CAAA;AACzF,KAAA,CAAA;IAEA,MAAUC,CAAAA,YAKT,GALD,SAAUA,YAAAA,GAAAA;AACR,QAAA,IAAIrD,cAAcsD,iBAAiB,KAAK,IAAI,CAACC,OAAO,EAAE;YACpD,OAAO,IAAA,CAAA;AACT,SAAA;QACA,OAAO,KAAA,CAAA;AACT,KAAA,CAAA;AAtNoBjC,IAAAA,aAAAA,CAAAA,OAAAA,EAAAA;;YA0BhBkC,GAAAA,EAAAA,QAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACD,OAAO,CAAA;AACrB,aAAA;;;YAKIE,GAAAA,EAAAA,OAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACN,MAAM,CAAA;AACpB,aAAA;;;YAKIO,GAAAA,EAAAA,QAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACN,OAAO,CAAA;AACrB,aAAA;;;YAKIO,GAAAA,EAAAA,OAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACC,MAAM,CAAA;AACpB,aAAA;;;YAKI3B,GAAAA,EAAAA,WAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACC,UAAU,CAAA;AACxB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAc7C,KAAsB,EAAA;AAClC,gBAAA,IAAIA,KAAU,KAAA,IAAI,CAAC6C,UAAU,EAAE,OAAA;gBAC/B,IAAI,CAACA,UAAU,GAAG7C,KAAAA,CAAAA;AAElB,gBAAA,IAAI,CAACuC,gBAAgB,CAACK,SAAS,GAAG5C,KAAAA,CAAAA;AACpC,aAAA;;;YAKI8C,GAAAA,EAAAA,WAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACC,UAAU,CAAA;AACxB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAc/C,KAAsB,EAAA;AAClC,gBAAA,IAAIA,KAAU,KAAA,IAAI,CAAC+C,UAAU,EAAE,OAAA;gBAC/B,IAAI,CAACA,UAAU,GAAG/C,KAAAA,CAAAA;AAElB,gBAAA,IAAI,CAACuC,gBAAgB,CAACO,SAAS,GAAG9C,KAAAA,CAAAA;AACpC,aAAA;;;YAKIwE,GAAAA,EAAAA,aAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACC,YAAY,CAAA;AAC1B,aAAA;;;YAKIzB,GAAAA,EAAAA,YAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACC,WAAW,CAAA;AACzB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAejD,KAAwB,EAAA;AACrC,gBAAA,IAAIA,KAAU,KAAA,IAAI,CAACiD,WAAW,EAAE,OAAA;AAEhC,gBAAA,IAAIjD,UAAUU,iBAAkBgE,CAAAA,KAAK,IAAI,IAAI,CAACV,YAAY,EAAI,EAAA;AAC5DhE,oBAAAA,KAAAA,GAAQU,kBAAkBgE,KAAK,CAAA;AAC/B7C,oBAAAA,MAAAA,CAAOF,IAAI,CAAE,iEAAA,CAAA,CAAA;AACb,oBAAA,OAAA;AACF,iBAAA;gBAEA,IAAI,CAACsB,WAAW,GAAGjD,KAAAA,CAAAA;AAEnB,gBAAA,IAAI,CAACuC,gBAAgB,CAACS,UAAU,GAAGhD,KAAAA,CAAAA;AACrC,aAAA;;;YAKIkD,GAAAA,EAAAA,YAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACf,WAAW,CAAA;AACzB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAenC,KAAa,EAAA;gBAC1B,IAAM6D,GAAAA,GAAM,IAAI,CAACvF,OAAO,CAAC6E,iBAAiB,CAACwB,UAAU,CAACC,aAAa,CAAA;AAEnE,gBAAA,IAAI5E,QAAQ6D,GAAK,EAAA;AACfhC,oBAAAA,MAAAA,CAAOF,IAAI,CAAC,aAAC,GAAa3B,QAAM,yDAAyD6D,GAAAA,GAAAA,CAAAA,CAAAA;oBACzF7D,KAAQ6D,GAAAA,GAAAA,CAAAA;AACV,iBAAA;AAEA,gBAAA,IAAI7D,QAAQ,CAAG,EAAA;AACb6B,oBAAAA,MAAAA,CAAOF,IAAI,CAAC,aAAC,GAAa3B,KAAM,GAAA,gEAAA,CAAA,CAAA;oBAChCA,KAAQ,GAAA,CAAA,CAAA;AACV,iBAAA;AAEA,gBAAA,IAAIA,KAAU,KAAA,IAAI,CAACmC,WAAW,EAAE,OAAA;gBAEhC,IAAI,CAACA,WAAW,GAAGnC,KAAAA,CAAAA;AAEnB,gBAAA,IAAI,CAACuC,gBAAgB,CAACW,UAAU,GAAGlD,KAAAA,CAAAA;AACrC,aAAA;;;YAMIqD,GAAAA,EAAAA,sBAAAA;;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACC,qBAAqB,CAAA;AACnC,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAyBtD,KAAkC,EAAA;gBACzD,IAAI,CAAC,IAAI,CAAC1B,OAAO,CAAC6E,iBAAiB,CAACC,SAAS,EAAE;AAC7C7B,oBAAAA,OAAAA,CAAQI,IAAI,CAAC,0CAAA,CAAA,CAAA;AACb,oBAAA,OAAA;AACF,iBAAA;AAEA,gBAAA,IAAI3B,KAAU,KAAA,IAAI,CAACsD,qBAAqB,EAAE;oBACxC,IAAI,CAACA,qBAAqB,GAAGtD,KAAAA,CAAAA;AAC7B,oBAAA,IAAI,CAACuC,gBAAgB,CAACc,oBAAoB,GAAGrD,KAAAA,CAAAA;AAC/C,iBAAA;AACF,aAAA;;;AAxJoBiC,IAAAA,OAAAA,OAAAA,CAAAA;EAAgBnB,gBAuNrC;;AC5ND;;IAGO,IAAM+D,YAAN,iBAAA,SAAA,gBAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,YAAAA,EAAAA,gBAAAA,CAAAA,CAAAA;aAAAA,YA6IT3G,CAAAA,MAAc,EACdkG,KAAa,EACbC,MAAc,EACdS,aAAyC,EACzCC,KAAqF,EACrFC,YAAwB,EAAA;QADxBD,IAAAA,KAAAA,KAAAA,KAAAA,CAAAA,EAAAA,KAAkEpE,GAAAA,aAAAA,CAAcsE,KAAK,CAAA;AACrFD,QAAAA,IAAAA,yBAAAA,YAAuB,GAAA,CAAA,CAAA;;AAEvB,QAAA,KAAA,GAAA,gBAAA,CAAA,IAAA,CAAA,IAAA,EAAM9G,kCA5IM,KAAA,CACdgH,eAAqC,IAE7BC,EAAAA,KAAAA,CAAAA,oBAAAA,GAAgC,YAIhCC,aAAgC,GAAA,IAAA,CAAA;AAuItC,QAAA,KAAA,CAAKtB,MAAM,GAAGM,KAAAA,CAAAA;AACd,QAAA,KAAA,CAAKL,OAAO,GAAGM,MAAAA,CAAAA;AACf,QAAA,KAAA,CAAKgB,aAAa,GAAGL,YAAAA,CAAAA;AACrB,QAAA,KAAA,CAAKM,MAAM,GAAmCP,KAAAA,CAAAA;AAE9C,QAAA,IAAID,aAAe,EAAA;AACjB,YAAA,IAAMS,gBAAgBT,WAAa,CAAbA,eAAyBrH,KAAQqH,CAAAA,GAAAA,aAAAA,CAActH,KAAK,EAAK,GAAA;AAACsH,gBAAAA,aAAAA;AAAc,aAAA,CAAA;YAC9F,IAAK,IAAInH,IAAI,CAAG0B,EAAAA,CAAAA,GAAIkG,cAAchI,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;gBACpD,IAAM6H,YAAAA,GAAeD,aAAa,CAAC5H,CAAE,CAAA,CAAA;gBACrC,IAAI6H,YAAAA,CAAatD,eAAe,EAAE;oBAChC,MAAM,wCAAA,CAAA;AACR,iBAAA;AACAsD,gBAAAA,YAAAA,CAAazF,cAAc,CAAC,CAAA,CAAA,CAAA;AAC9B,aAAA;AACA,YAAA,KAAA,CAAK0F,cAAc,GAAGF,aAAAA,CAAAA;SACjB,MAAA;YACL,KAAKE,CAAAA,cAAc,GAAG,EAAE,CAAA;AAC1B,SAAA;QAEA,IAAS,WAALV,CAAAA,KAAAA,EAAiB9C,OAAS,CAAA,EAAA;YAC5B,IAAI,CAAC8C,KAAM7C,CAAAA,eAAe,EAAE;gBAC1B,MAAM,sCAAA,CAAA;AACR,aAAA;AACA,YAAA,KAAA,CAAKkD,aAAa,GAAGL,KAAAA,CAAAA;YACrB,KAAKK,CAAAA,aAAa,CAACrF,cAAc,CAAC,CAAA,CAAA,CAAA;YAClC,KAAKmF,CAAAA,YAAY,GAAGH,KAAAA,CAAMZ,MAAM,CAAA;SAC3B,MAAA,IAAI,OAAOY,KAAAA,KAAU,QAAU,EAAA;AACpC,YAAA,KAAA,CAAKG,YAAY,GAAkBH,KAAAA,CAAAA;AACrC,SAAA;AAEA,QAAA,KAAA,CAAKW,qBAAqB,GAAGxH,MAAOiF,CAAAA,iBAAiB,CAACwC,0BAA0B,CAAA,KAAA,CAAA,CAAA;;;AApLvEd,IAAAA,IAAAA,MAAAA,GAAAA,YAAAA,CAAAA,SAAAA,CAAAA;AAuLX;;;AAGC,MACDe,MAAAA,CAAAA,eAEC,GAFDA,SAAAA,gBAAgBjG,KAAiB,EAAA;AAAjBA,QAAAA,IAAAA,kBAAAA,KAAgB,GAAA,CAAA,CAAA;AACvB,QAAA,IAAA,0BAAA,CAAA;QAAP,OAAO,CAAA,6BAAA,IAAI,CAAC8F,cAAc,CAAC9F,KAAAA,CAAM,YAA1B,0BAA8B,GAAA,IAAA,CAAA;AACvC,KAAA,CAAA;AAEA;;MAGA0C,MAAAA,CAAAA,eASC,GATDA,SAAAA,eAAAA,GAAAA;QACE,IAAI,IAAI,CAAC8C,oBAAoB,EAAE;YAC7B,IAAMI,aAAAA,GAAgB,IAAI,CAACE,cAAc,CAAA;YACzC,IAAK,IAAI9H,IAAI,CAAG0B,EAAAA,CAAAA,GAAIkG,cAAchI,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;gBACpD,IAAM6H,YAAAA,GAAeD,aAAa,CAAC5H,CAAE,CAAA,CAAA;AACrC6H,gBAAAA,YAAAA,CAAanD,eAAe,EAAA,CAAA;AAC9B,aAAA;AACA,YAAA,IAAI,CAAC+C,aAAa,IAAI,IAAI,CAACA,aAAa,CAAC/C,eAAe,EAAA,CAAA;AAC1D,SAAA;AACF,KAAA,CAAA;AAEA;;MAGA,MAAA,CAAmB7D,UAWlB,GAXD,SAAmBA,UAAAA,GAAAA;AAQjB,QAAA,IAAA,mBAAA,CAAA;AAPA,QAAA,gBAAA,CAAA,SAAA,CAAMA,UAAD,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;QACL,IAAI,CAACkH,qBAAqB,CAACnH,OAAO,EAAA,CAAA;AAClC,QAAA,IAA0C,KAAA,GAAA,IAAI,EAAtBgH,gBAAkB,KAAlCE,CAAAA,cAAAA,CAAAA;QACR,IAAK,IAAI9H,IAAI,CAAG0B,EAAAA,CAAAA,GAAIkG,cAAchI,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;AACpD4H,YAAAA,aAAa,CAAC5H,CAAAA,CAAE,CAACoC,cAAc,CAAC,CAAC,CAAA,CAAA,CAAA;AACnC,SAAA;AACAwF,QAAAA,aAAAA,CAAchI,MAAM,GAAG,CAAA,CAAA;AACvB,QAAA,CAAA,mBAAA,GAAA,IAAI,CAAC6H,aAAa,qBAAlB,mBAAoBrF,CAAAA,cAAc,CAAC,CAAC,CAAA,CAAA,CAAA;QACpC,IAAI,CAACqF,aAAa,GAAG,IAAA,CAAA;QACrB,IAAI,CAACE,MAAM,GAAG,IAAA,CAAA;AAChB,KAAA,CAAA;AAEA;;MAGAO,MAAAA,CAAAA,iBAEC,GAFDA,SAAAA,iBAAAA,GAAAA;QACE,IAAI,CAACH,qBAAqB,CAACI,gBAAgB,EAAA,CAAA;AAC7C,KAAA,CAAA;AAEA;;MAGA,MAAA,CAASpD,QAER,GAFD,SAASA,QAAAA,GAAAA;QACP,IAAI,CAACgD,qBAAqB,GAAG,IAAI,CAACpH,OAAO,CAAC6E,iBAAiB,CAACwC,0BAA0B,CAAC,IAAI,CAAA,CAAA;AAC7F,KAAA,CAAA;AAzOWd,IAAAA,aAAAA,CAAAA,YAAAA,EAAAA;;YAoBPkB,GAAAA,EAAAA,qBAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACZ,oBAAoB,CAAA;AAClC,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAwBnF,KAAc,EAAA;gBACpC,IAAI,CAACmF,oBAAoB,GAAGnF,KAAAA,CAAAA;AAC9B,aAAA;;;YAKIoE,GAAAA,EAAAA,OAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACN,MAAM,CAAA;AACpB,aAAA;;;YAKIO,GAAAA,EAAAA,QAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACN,OAAO,CAAA;AACrB,aAAA;;;YAKIiC,GAAAA,EAAAA,mBAAAA;;;MAAJ,SAAA,GAAA,GAAA;AACE,gBAAA,OAAO,IAAI,CAACP,cAAc,CAAClI,MAAM,CAAA;AACnC,aAAA;;;YAKI0I,GAAAA,EAAAA,cAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACb,aAAa,CAAA;AAC3B,aAAA;;;YAMIJ,GAAAA,EAAAA,cAAAA;;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACK,aAAa,CAAA;AAC3B,aAAA;;;AA9DWR,IAAAA,OAAAA,YAAAA,CAAAA;EAAqB/D,gBA0OjC;;AC5OD;;IAGO,IAAMoF,SAAN,iBAAA,SAAA,OAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,SAAAA,EAAAA,OAAAA,CAAAA,CAAAA;aAAAA,SAWThI,CAAAA,MAAc,EACdkG,KAAa,EACbC,MAAc,EACdF,MAA8C,EAC9CgC,MAAsB,EACtB7B,KAAyC,EAAA;QAFzCH,IAAAA,MAAAA,KAAAA,KAAAA,CAAAA,EAAAA,MAAwBxD,GAAAA,aAAAA,CAAcyF,QAAQ,CAAA;AAC9CD,QAAAA,IAAAA,mBAAAA,MAAkB,GAAA,IAAA,CAAA;QAClB7B,IAAAA,KAAAA,KAAAA,KAAAA,CAAAA,EAAAA,KAAsB1D,GAAAA,YAAAA,CAAayF,MAAM,CAAA;;gBAEzC,OAAMnI,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,CAAAA,IAAAA,IAAAA,CAAAA;AACN,QAAA,KAAA,CAAKoE,OAAO,GAAG6D,MAAAA,CAAAA;AACf,QAAA,KAAA,CAAKrC,MAAM,GAAGM,KAAAA,CAAAA;AACd,QAAA,KAAA,CAAKL,OAAO,GAAGM,MAAAA,CAAAA;AACf,QAAA,KAAA,CAAKE,MAAM,GAAGD,KAAAA,CAAAA;AACd,QAAA,KAAA,CAAKJ,OAAO,GAAGC,MAAAA,CAAAA;QACf,KAAKM,CAAAA,YAAY,GAAG,KAAA,CAAKb,eAAe,EAAA,CAAA;AAExC,QAAA,KAAA,CAAK1B,eAAe,GAClBiC,MAAUxD,IAAAA,aAAAA,CAAcsE,KAAK,IAC7Bd,MAAUxD,IAAAA,aAAAA,CAAc2F,YAAY,IACpCnC,MAAUxD,IAAAA,aAAAA,CAAc4F,OAAO,IAC/BpC,MAAUxD,IAAAA,aAAAA,CAAc6F,OAAO,IAC/BrC,MAAUxD,IAAAA,aAAAA,CAAc8F,OAAO,IAC/BtC,MAAUxD,IAAAA,aAAAA,CAAc+F,eAAe,IACvCvC,MAAUxD,IAAAA,aAAAA,CAAcgG,eAAe,CAAA;AAEzC,QAAA,KAAA,CAAKpE,gBAAgB,GAAGrE,MAAOiF,CAAAA,iBAAiB,CAACyD,uBAAuB,CAAA,KAAA,CAAA,CAAA;QAExE,KAAK5D,CAAAA,UAAU,GAAG,KAAKgB,CAAAA,YAAY,KAAKtD,iBAAkBgE,CAAAA,KAAK,GAAGhE,iBAAAA,CAAkBmG,QAAQ,CAAA;AAC5F,QAAA,KAAA,CAAKjE,SAAS,GAAG,KAAA,CAAKE,SAAS,GAAGjC,gBAAgBiG,MAAM,CAAA;;;AAtC/CZ,IAAAA,IAAAA,MAAAA,GAAAA,SAAAA,CAAAA,SAAAA,CAAAA;AAyCX;;;;;;;;;AASC,MACDa,MAAAA,CAAAA,cAUC,GAVDA,SAAAA,eACEC,WAA4B,EAC5BC,QAAoB,EACpBC,CAAa,EACbC,CAAa,EACb/C,KAAc,EACdC,MAAe,EAAA;AAJf4C,QAAAA,IAAAA,qBAAAA,QAAmB,GAAA,CAAA,CAAA;AACnBC,QAAAA,IAAAA,cAAAA,CAAY,GAAA,CAAA,CAAA;AACZC,QAAAA,IAAAA,cAAAA,CAAY,GAAA,CAAA,CAAA;QAIX,IAAI,CAAC5E,gBAAgB,CAAwBwE,cAAc,CAACC,WAAaC,EAAAA,QAAAA,EAAUC,CAAGC,EAAAA,CAAAA,EAAG/C,KAAOC,EAAAA,MAAAA,CAAAA,CAAAA;QACjG,IAAI,CAACtD,cAAc,GAAG,KAAA,CAAA;AACxB,KAAA,CAAA;AAEA;;;;;;;;AAQC,MACDqG,MAAAA,CAAAA,cAUC,GAVDA,SAAAA,eACEC,WAA2B,EAC3BJ,QAAoB,EACpBK,KAAsB,EACtBC,gBAAiC,EACjCL,CAAa,EACbC,CAAa,EAAA;AAJbF,QAAAA,IAAAA,qBAAAA,QAAmB,GAAA,CAAA,CAAA;AACnBK,QAAAA,IAAAA,kBAAAA,KAAiB,GAAA,KAAA,CAAA;AACjBC,QAAAA,IAAAA,6BAAAA,gBAA4B,GAAA,KAAA,CAAA;AAC5BL,QAAAA,IAAAA,cAAAA,CAAY,GAAA,CAAA,CAAA;AACZC,QAAAA,IAAAA,cAAAA,CAAY,GAAA,CAAA,CAAA;QAEX,IAAI,CAAC5E,gBAAgB,CAAwB6E,cAAc,CAACC,WAAaJ,EAAAA,QAAAA,EAAUK,KAAOC,EAAAA,gBAAAA,EAAkBL,CAAGC,EAAAA,CAAAA,CAAAA,CAAAA;QAChH,IAAI,CAACpG,cAAc,GAAG,KAAA,CAAA;AACxB,KAAA,CAAA;AAoCAyG,IAAAA,MAAAA,CAAAA,cA8CC,GA9CDA,SAAAA,cAAAA,CACEC,gBAA0C,EAC1CC,WAAsC,EACtCtD,KAAc,EACdC,MAAe,EACfsD,aAAwC,EACxCC,GAAqB,EAAA;QAErB,IAAMC,UAAAA,GAAaC,UAAUvK,MAAM,CAAA;AACnC,QAAA,IAAIsK,eAAe,CAAG,EAAA;AACnB,YAAA,IAAI,CAACtF,gBAAgB,CAAwBiF,cAAc,CAC1D,CACA,EAAA,CAAA,EACA,IAAI,CAAC1D,MAAM,EACX,IAAI,CAACC,OAAO,EACZ,CACiB0D,EAAAA,gBAAAA,CAAAA,CAAAA;SAEd,MAAA,IAAII,eAAe,CAAG,EAAA;AAC1B,YAAA,IAAI,CAACtF,gBAAgB,CAAwBiF,cAAc,CAC1D,GACA,CACA,EAAA,IAAI,CAAC1D,MAAM,IAAa2D,gBACxB,EAAA,IAAI,CAAC1D,OAAO,IAAa0D,kBACjBA,gBACSC,EAAAA,WAAAA,CAAAA,CAAAA;SAEd,MAAA,IAAIG,eAAe,CAAG,EAAA;YAC1B,IAAI,CAACtF,gBAAgB,CAAwBiF,cAAc,CAClDC,gBACAC,EAAAA,WAAAA,EACRtD,KACAC,EAAAA,MAAAA,EACA,CACiBsD,EAAAA,aAAAA,CAAAA,CAAAA;SAEd,MAAA,IAAIE,eAAe,CAAG,EAAA;YAC1B,IAAI,CAACtF,gBAAgB,CAAwBiF,cAAc,CAClDC,gBACAC,EAAAA,WAAAA,EACRtD,KACAC,EAAAA,MAAAA,EACQsD,aACRC,EAAAA,GAAAA,CAAAA,CAAAA;AAEJ,SAAA;AACF,KAAA,CAAA;AAEA;;MAGA,MAAA,CAASlF,QAGR,GAHD,SAASA,QAAAA,GAAAA;QACP,IAAI,CAACH,gBAAgB,GAAG,IAAI,CAACjE,OAAO,CAAC6E,iBAAiB,CAACyD,uBAAuB,CAAC,IAAI,CAAA,CAAA;AACnF,QAAA,OAAA,CAAA,SAAA,CAAMlE,QAAD,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;AACP,KAAA,CAAA;AA5KWwD,IAAAA,OAAAA,SAAAA,CAAAA;EAAkBjE,OA6K9B;;ACjLD;;IAGO,IAAM8F,cAAN,iBAAA,SAAA,OAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,cAAAA,EAAAA,OAAAA,CAAAA,CAAAA;aAAAA,cAoBT7J,CAAAA,MAAc,EACdkG,KAAa,EACbC,MAAc,EACd9G,MAAc,EACd4G,MAA8C,EAC9CgC,MAAsB,EAAA;QADtBhC,IAAAA,MAAAA,KAAAA,KAAAA,CAAAA,EAAAA,MAAwBxD,GAAAA,aAAAA,CAAcyF,QAAQ,CAAA;AAC9CD,QAAAA,IAAAA,mBAAAA,MAAkB,GAAA,IAAA,CAAA;;gBAElB,OAAMjI,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,CAAAA,IAAAA,IAAAA,CAAAA;AACN,QAAA,KAAA,CAAKoE,OAAO,GAAG6D,MAAAA,CAAAA;AACf,QAAA,KAAA,CAAKrC,MAAM,GAAGM,KAAAA,CAAAA;AACd,QAAA,KAAA,CAAKL,OAAO,GAAGM,MAAAA,CAAAA;AACf,QAAA,KAAA,CAAK2D,OAAO,GAAGzK,MAAAA,CAAAA;AACf,QAAA,KAAA,CAAK2G,OAAO,GAAGC,MAAAA,CAAAA;QACf,KAAKM,CAAAA,YAAY,GAAG,KAAA,CAAKb,eAAe,EAAA,CAAA;AAExC,QAAA,KAAA,CAAKrB,gBAAgB,GAAGrE,MAAOiF,CAAAA,iBAAiB,CAAC8E,4BAA4B,CAAA,KAAA,CAAA,CAAA;QAE7E,KAAKjF,CAAAA,UAAU,GAAGtC,iBAAAA,CAAkBmG,QAAQ,CAAA;AAC5C,QAAA,KAAA,CAAKjE,SAAS,GAAG,KAAA,CAAKE,SAAS,GAAGjC,gBAAgBiG,MAAM,CAAA;;;AAtC/CiB,IAAAA,IAAAA,MAAAA,GAAAA,cAAAA,CAAAA,SAAAA,CAAAA;AAyCX;;;;;;;;;;;AAWC,MACDhB,OAAAA,cAqBC,GArBDA,SAAAA,cACEmB,CAAAA,WAAmB,EACnBlB,WAA4B,EAC5BC,QAAoB,EACpBC,CAAa,EACbC,CAAa,EACb/C,KAAc,EACdC,MAAe,EACf9G,MAAe,EAAA;AALf0J,QAAAA,IAAAA,qBAAAA,QAAmB,GAAA,CAAA,CAAA;AACnBC,QAAAA,IAAAA,cAAAA,CAAY,GAAA,CAAA,CAAA;AACZC,QAAAA,IAAAA,cAAAA,CAAY,GAAA,CAAA,CAAA;QAKX,IAAI,CAAC5E,gBAAgB,CAA6BwE,cAAc,CAC/DmB,WACAlB,EAAAA,WAAAA,EACAC,QACAC,EAAAA,CAAAA,EACAC,CACA/C,EAAAA,KAAAA,EACAC,MACA9G,EAAAA,MAAAA,CAAAA,CAAAA;QAEF,IAAI,CAACwD,cAAc,GAAG,KAAA,CAAA;AACxB,KAAA,CAAA;AAEA;;;;;;;;;AASC,MACDqG,OAAAA,cAmBC,GAnBDA,SAAAA,cAAAA,CACEe,YAAoB,EACpBd,WAA2B,EAC3BJ,QAAoB,EACpBK,KAAsB,EACtBC,gBAAiC,EACjCL,CAAa,EACbC,CAAa,EAAA;AAJbF,QAAAA,IAAAA,qBAAAA,QAAmB,GAAA,CAAA,CAAA;AACnBK,QAAAA,IAAAA,kBAAAA,KAAiB,GAAA,KAAA,CAAA;AACjBC,QAAAA,IAAAA,6BAAAA,gBAA4B,GAAA,KAAA,CAAA;AAC5BL,QAAAA,IAAAA,cAAAA,CAAY,GAAA,CAAA,CAAA;AACZC,QAAAA,IAAAA,cAAAA,CAAY,GAAA,CAAA,CAAA;QAEX,IAAI,CAAC5E,gBAAgB,CAA6B6E,cAAc,CAC/De,cACAd,WACAJ,EAAAA,QAAAA,EACAK,KACAC,EAAAA,gBAAAA,EACAL,CACAC,EAAAA,CAAAA,CAAAA,CAAAA;QAEF,IAAI,CAACpG,cAAc,GAAG,KAAA,CAAA;AACxB,KAAA,CAAA;AAgDAyG,IAAAA,MAAAA,CAAAA,cAmDC,GAnDDA,SAAAA,cACEW,CAAAA,YAAoB,EACpBV,gBAA0C,EAC1CC,WAAsC,EACtCtD,KAAc,EACdC,MAAe,EACfsD,aAAwC,EACxCC,GAAqB,EAAA;QAErB,IAAMC,UAAAA,GAAaC,UAAUvK,MAAM,CAAA;AACnC,QAAA,IAAIsK,eAAe,CAAG,EAAA;AACnB,YAAA,IAAI,CAACtF,gBAAgB,CAA6BiF,cAAc,CAC/DW,cACA,CACA,EAAA,CAAA,EACA,IAAI,CAACrE,MAAM,EACX,IAAI,CAACC,OAAO,EACZ,CACiB0D,EAAAA,gBAAAA,CAAAA,CAAAA;SAEd,MAAA,IAAII,eAAe,CAAG,EAAA;AAC1B,YAAA,IAAI,CAACtF,gBAAgB,CAA6BiF,cAAc,CAC/DW,YAAAA,EACA,GACA,CACA,EAAA,IAAI,CAACrE,MAAM,IAAa2D,gBACxB,EAAA,IAAI,CAAC1D,OAAO,IAAa0D,kBACjBA,gBACSC,EAAAA,WAAAA,CAAAA,CAAAA;SAEd,MAAA,IAAIG,eAAe,CAAG,EAAA;YAC1B,IAAI,CAACtF,gBAAgB,CAA6BiF,cAAc,CAC/DW,cACQV,gBACAC,EAAAA,WAAAA,EACRtD,KACAC,EAAAA,MAAAA,EACA,CACiBsD,EAAAA,aAAAA,CAAAA,CAAAA;SAEd,MAAA,IAAIE,eAAe,CAAG,EAAA;YAC1B,IAAI,CAACtF,gBAAgB,CAA6BiF,cAAc,CAC/DW,cACQV,gBACAC,EAAAA,WAAAA,EACRtD,KACAC,EAAAA,MAAAA,EACQsD,aACRC,EAAAA,GAAAA,CAAAA,CAAAA;AAEJ,SAAA;AACF,KAAA,CAAA;AAEA;;MAGA,MAAA,CAASlF,QAGR,GAHD,SAASA,QAAAA,GAAAA;QACP,IAAI,CAACH,gBAAgB,GAAG,IAAI,CAACjE,OAAO,CAAC6E,iBAAiB,CAAC8E,4BAA4B,CAAC,IAAI,CAAA,CAAA;AACxF,QAAA,OAAA,CAAA,SAAA,CAAMvF,QAAD,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;AACP,KAAA,CAAA;AApNWqF,IAAAA,aAAAA,CAAAA,cAAAA,EAAAA;;YAMPxK,GAAAA,EAAAA,QAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACyK,OAAO,CAAA;AACrB,aAAA;;;AARWD,IAAAA,OAAAA,cAAAA,CAAAA;EAAuB9F,OAqNnC;;ACvND;;IAGO,IAAMmG,WAAN,iBAAA,SAAA,OAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,WAAAA,EAAAA,OAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,WAAAA,CAQClK,MAAc,EAAEsF,IAAY,EAAEW,MAA8C,EAAEgC,MAAsB,EAAA;QAAtEhC,IAAAA,MAAAA,KAAAA,KAAAA,CAAAA,EAAAA,MAAwBxD,GAAAA,aAAAA,CAAcyF,QAAQ,CAAA;AAAED,QAAAA,IAAAA,mBAAAA,MAAkB,GAAA,IAAA,CAAA;;gBAC1G,OAAMjI,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,CAAAA,IAAAA,IAAAA,CAAAA;AAEN,QAAA,KAAA,CAAKoE,OAAO,GAAG6D,MAAAA,CAAAA;AACf,QAAA,KAAA,CAAKrC,MAAM,GAAGN,IAAAA,CAAAA;AACd,QAAA,KAAA,CAAKO,OAAO,GAAGP,IAAAA,CAAAA;AACf,QAAA,KAAA,CAAKU,OAAO,GAAGC,MAAAA,CAAAA;QACf,KAAKM,CAAAA,YAAY,GAAG,KAAA,CAAKb,eAAe,EAAA,CAAA;AAExC,QAAA,KAAA,CAAKrB,gBAAgB,GAAGrE,MAAOiF,CAAAA,iBAAiB,CAACkF,yBAAyB,CAAA,KAAA,CAAA,CAAA;QAE1E,KAAKrF,CAAAA,UAAU,GAAGtC,iBAAAA,CAAkBmG,QAAQ,CAAA;AAC5C,QAAA,KAAA,CAAKjE,SAAS,GAAG,KAAA,CAAKE,SAAS,GAAGjC,gBAAgByH,KAAK,CAAA;;;AApB9CF,IAAAA,IAAAA,MAAAA,GAAAA,WAAAA,CAAAA,SAAAA,CAAAA;AAuBX;;;;;;;;;;AAUC,MACDrB,OAAAA,cAWC,GAXDA,SAAAA,cAAAA,CACEwB,IAAqB,EACrBvB,WAA4B,EAC5BC,QAAoB,EACpBC,CAAa,EACbC,CAAa,EACb/C,KAAc,EACdC,MAAe,EAAA;AAJf4C,QAAAA,IAAAA,qBAAAA,QAAmB,GAAA,CAAA,CAAA;AACnBC,QAAAA,IAAAA,cAAAA,CAAY,GAAA,CAAA,CAAA;AACZC,QAAAA,IAAAA,cAAAA,CAAY,GAAA,CAAA,CAAA;QAIX,IAAI,CAAC5E,gBAAgB,CAA0BwE,cAAc,CAACwB,MAAMvB,WAAaC,EAAAA,QAAAA,EAAUC,CAAGC,EAAAA,CAAAA,EAAG/C,KAAOC,EAAAA,MAAAA,CAAAA,CAAAA;QACzG,IAAI,CAACtD,cAAc,GAAG,KAAA,CAAA;AACxB,KAAA,CAAA;AAEA;;;;;;;;;AASC,MACDqG,OAAAA,cAmBC,GAnBDA,SAAAA,cAAAA,CACEmB,IAAqB,EACrBlB,WAA2B,EAC3BJ,QAAoB,EACpBK,KAAsB,EACtBC,gBAAiC,EACjCL,CAAa,EACbC,CAAa,EAAA;AAJbF,QAAAA,IAAAA,qBAAAA,QAAmB,GAAA,CAAA,CAAA;AACnBK,QAAAA,IAAAA,kBAAAA,KAAiB,GAAA,KAAA,CAAA;AACjBC,QAAAA,IAAAA,6BAAAA,gBAA4B,GAAA,KAAA,CAAA;AAC5BL,QAAAA,IAAAA,cAAAA,CAAY,GAAA,CAAA,CAAA;AACZC,QAAAA,IAAAA,cAAAA,CAAY,GAAA,CAAA,CAAA;QAEX,IAAI,CAAC5E,gBAAgB,CAA0B6E,cAAc,CAC5DmB,MACAlB,WACAJ,EAAAA,QAAAA,EACAK,KACAC,EAAAA,gBAAAA,EACAL,CACAC,EAAAA,CAAAA,CAAAA,CAAAA;QAEF,IAAI,CAACpG,cAAc,GAAG,KAAA,CAAA;AACxB,KAAA,CAAA;AAmDAyG,IAAAA,MAAAA,CAAAA,cAmDC,GAnDDA,SAAAA,cACEe,CAAAA,IAAqB,EACrBd,gBAA0C,EAC1CC,WAAsC,EACtCtD,KAAc,EACdC,MAAe,EACfsD,aAAwC,EACxCC,GAAqB,EAAA;QAErB,IAAMC,UAAAA,GAAaC,UAAUvK,MAAM,CAAA;AACnC,QAAA,IAAIsK,eAAe,CAAG,EAAA;AACnB,YAAA,IAAI,CAACtF,gBAAgB,CAA0BiF,cAAc,CAC5De,MACA,CACA,EAAA,CAAA,EACA,IAAI,CAACzE,MAAM,EACX,IAAI,CAACC,OAAO,EACZ,CACiB0D,EAAAA,gBAAAA,CAAAA,CAAAA;SAEd,MAAA,IAAII,eAAe,CAAG,EAAA;AAC1B,YAAA,IAAI,CAACtF,gBAAgB,CAA0BiF,cAAc,CAC5De,IAAAA,EACA,GACA,CACA,EAAA,IAAI,CAACzE,MAAM,IAAa2D,gBACxB,EAAA,IAAI,CAAC1D,OAAO,IAAa0D,kBACjBA,gBACSC,EAAAA,WAAAA,CAAAA,CAAAA;SAEd,MAAA,IAAIG,eAAe,CAAG,EAAA;YAC1B,IAAI,CAACtF,gBAAgB,CAA0BiF,cAAc,CAC5De,MACQd,gBACAC,EAAAA,WAAAA,EACRtD,KACAC,EAAAA,MAAAA,EACA,CACiBsD,EAAAA,aAAAA,CAAAA,CAAAA;SAEd,MAAA,IAAIE,eAAe,CAAG,EAAA;YAC1B,IAAI,CAACtF,gBAAgB,CAA0BiF,cAAc,CAC5De,MACQd,gBACAC,EAAAA,WAAAA,EACRtD,KACAC,EAAAA,MAAAA,EACQsD,aACRC,EAAAA,GAAAA,CAAAA,CAAAA;AAEJ,SAAA;AACF,KAAA,CAAA;AAEA;;MAGA,MAAA,CAASlF,QAGR,GAHD,SAASA,QAAAA,GAAAA;QACP,IAAI,CAACH,gBAAgB,GAAG,IAAI,CAACjE,OAAO,CAAC6E,iBAAiB,CAACkF,yBAAyB,CAAC,IAAI,CAAA,CAAA;AACrF,QAAA,OAAA,CAAA,SAAA,CAAM3F,QAAD,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;AACP,KAAA,CAAA;AA1LW0F,IAAAA,OAAAA,WAAAA,CAAAA;EAAoBnG,OA2LhC;;AChMD;;IAGO,IAAMuG,SAAN,iBAAA,SAAA,aAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,SAAAA,EAAAA,aAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,SAAAA,CASCtK,MAAc,EAAA;;gBACxB,aAAMA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,CAAAA,IAAAA,IAAAA,EAAAA,KAAAA,CAPRuK,YAAyC,GAAA,EACjCC,EAAAA,KAAAA,CAAAA,MAAAA,GAAiB,SACjBC,KAAgB,GAAA,CAAA,EAAA,KAAA,CAChBC,KAAgB,GAAA,CAAA,EAAA,KAAA,CAChBC,MAAiB,GAAA,CAAA,CAAA;;;AAPdL,IAAAA,IAAAA,MAAAA,GAAAA,SAAAA,CAAAA,SAAAA,CAAAA;AAaXM,IAAAA,MAAAA,CAAAA,iBAiDC,GAjDDA,SAAAA,iBAAAA,CAAkBC,QAAkB,EAAA;QAClC,IAAW3E,QAA2B2E,QAA9BC,CAAAA,CAAAA,EAAUC,MAAoBF,GAAAA,QAAAA,CAApBE,CAAWC,EAAAA,IAAAA,GAASH,QAATG,CAAAA,IAAAA,CAAAA;QAC7B,IAAmC,KAAA,GAAA,IAAI,EAAvBC,QAAmB,KAA3BT,CAAAA,MAAAA,EAAevO,UAAY,KAAZA,CAAAA,OAAAA,CAAAA;QACvB,IAAMiP,WAAAA,GAAcjP,QAAQiK,KAAK,CAAA;AACjC,QAAA,IAAMiF,cAAcjF,KAAQ+E,GAAAA,KAAAA,CAAAA;AAC5B,QAAA,IAAMG,eAAejF,MAAS8E,GAAAA,KAAAA,CAAAA;AAC9B,QAAA,IAAI,CAAIE,GAAAA,WAAAA,IAAeD,WAAe,IAAA,CAAA,GAAIE,gBAAgBF,WAAa,EAAA;AACrE,YAAA,MAAMG,KAAM,CAAA,iCAAA,CAAA,CAAA;AACd,SAAA;AAEA,QAAA,IAAMC,IAAO,GAAA,IAAI,CAACb,KAAK,GAAGU,WAAAA,CAAAA;AAC1B,QAAA,IAAIG,QAAQJ,WAAa,EAAA;YACvB,IAAI,CAACT,KAAK,GAAGQ,KAAAA,CAAAA;AACb,YAAA,IAAI,CAACP,KAAK,GAAG,IAAI,CAACC,MAAM,GAAGM,KAAAA,CAAAA;AAC7B,SAAA;AACA,QAAA,IAAMM,IAAO,GAAA,IAAI,CAACb,KAAK,GAAGU,YAAAA,CAAAA;AAC1B,QAAA,IAAIG,IAAO,GAAA,IAAI,CAACZ,MAAM,EAAE;YACtB,IAAI,CAACA,MAAM,GAAGY,IAAAA,CAAAA;AAChB,SAAA;AACA,QAAA,IAAIA,QAAQL,WAAa,EAAA;YACvB,OAAO,KAAA,CAAA;AACT,SAAA;AAEA,QAAA,IAAIhF,KAAQ,GAAA,CAAA,IAAKC,MAAS,GAAA,CAAA,IAAK6E,IAAM,EAAA;YACnCH,QAASW,CAAAA,YAAY,GAAG,IAAIC,kBAAQ,CAAA,IAAI,CAAChB,KAAK,EAAE,IAAI,CAACC,KAAK,CAAA,CAAA;AAC1DzO,YAAAA,OAAAA,CAAQ4M,cAAc,CAACmC,IAAM,EAAA,CAAA,EAAG,IAAI,CAACP,KAAK,EAAE,IAAI,CAACC,KAAK,EAAExE,KAAOC,EAAAA,MAAAA,CAAAA,CAAAA;AAC/DlK,YAAAA,OAAAA,CAAQkI,eAAe,EAAA,CAAA;AACzB,SAAA;AAEA,QAAA,IAAMuH,wBAAwB,GAAMR,GAAAA,WAAAA,CAAAA;QACpC,IAAMlC,CAAAA,GAAI,IAAI,CAACyB,KAAK,CAAA;QACpB,IAAMxB,CAAAA,GAAI,IAAI,CAACyB,KAAK,CAAA;AACpB,QAAA,IAAMI,CAAI5E,GAAAA,KAAAA,CAAAA;AACV,QAAA,IAAM6E,CAAI5E,GAAAA,MAAAA,CAAAA;AACV,QAAA,IAAMwF,KAAK3C,CAAI0C,GAAAA,qBAAAA,CAAAA;AACf,QAAA,IAAME,EAAK,GAAC5C,CAAAA,CAAAA,GAAI8B,CAAAA,IAAKY,qBAAAA,CAAAA;AACrB,QAAA,IAAMG,KAAK5C,CAAIyC,GAAAA,qBAAAA,CAAAA;AACf,QAAA,IAAMI,EAAK,GAAC7C,CAAAA,CAAAA,GAAI8B,CAAAA,IAAKW,qBAAAA,CAAAA;AAErBb,QAAAA,QAAAA,CAAS7B,CAAC,GAAGA,CAAAA,CAAAA;AACb6B,QAAAA,QAAAA,CAAS5B,CAAC,GAAGA,CAAAA,CAAAA;QACb,IAAM/M,GAAAA,GAAM2O,SAAS3O,GAAG,CAAA;AACxBA,QAAAA,GAAG,CAAC,CAAA,CAAE,CAACsB,GAAG,CAACmO,EAAIE,EAAAA,EAAAA,CAAAA,CAAAA;AACf3P,QAAAA,GAAG,CAAC,CAAA,CAAE,CAACsB,GAAG,CAACoO,EAAIC,EAAAA,EAAAA,CAAAA,CAAAA;AACf3P,QAAAA,GAAG,CAAC,CAAA,CAAE,CAACsB,GAAG,CAACoO,EAAIE,EAAAA,EAAAA,CAAAA,CAAAA;AACf5P,QAAAA,GAAG,CAAC,CAAA,CAAE,CAACsB,GAAG,CAACmO,EAAIG,EAAAA,EAAAA,CAAAA,CAAAA;QAEf,IAAI,CAACrB,KAAK,IAAIU,WAAcF,GAAAA,KAAAA,CAAAA;QAC5B,OAAO,IAAA,CAAA;AACT,KAAA,CAAA;AAEAc,IAAAA,MAAAA,CAAAA,WAEC,GAFDA,SAAAA,WAAYC,CAAAA,IAAY,EAAEnB,QAAkB,EAAA;AAC1C,QAAA,IAAI,CAACN,YAAY,CAACyB,KAAKC,UAAU,CAAC,GAAG,GAAGpB,QAAAA,CAAAA;AAC1C,KAAA,CAAA;AAEAqB,IAAAA,MAAAA,CAAAA,WAEC,GAFDA,SAAAA,WAAAA,CAAYF,IAAY,EAAA;AACtB,QAAA,OAAO,IAAI,CAACzB,YAAY,CAACyB,IAAKC,CAAAA,UAAU,CAAC,CAAG,CAAA,CAAA,CAAA;AAC9C,KAAA,CAAA;AAEA;;MAGA,MAAA,CAAmB3L,UAKlB,GALD,SAAmBA,UAAAA,GAAAA;AACjB,QAAA,aAAA,CAAA,SAAA,CAAMA,UAAD,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;QACL,IAAI,CAACrE,OAAO,CAACoE,OAAO,EAAA,CAAA;QACpB,IAAI,CAACpE,OAAO,GAAG,IAAA,CAAA;QACf,IAAI,CAACsO,YAAY,GAAG,EAAC,CAAA;AACvB,KAAA,CAAA;AAhFWD,IAAAA,OAAAA,SAAAA,CAAAA;EAAkB3J,aAiF9B,CAAA;;AC1FD;;IAGO,IAAKwL,SAAAA,iBAAAA,SAAAA,SAAAA,EAAAA;kCACiB,SAAA,CAAA,SAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA,CAAA;yBAET,SAAA,CAAA,SAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA,CAAA;2BAEE,SAAA,CAAA,SAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;AALVA,IAAAA,OAAAA,SAAAA,CAAAA;AAOX,CAAA,CAAA,EAAA;;ACVD;;IAGO,IAAKC,YAAAA,iBAAAA,SAAAA,YAAAA,EAAAA;8CAC6B,YAAA,CAAA,YAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA,CAAA;0DAEY,YAAA,CAAA,YAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA,CAAA;AAHzCA,IAAAA,OAAAA,YAAAA,CAAAA;AAKX,CAAA,CAAA,EAAA;;ACAD;;;IAIO,IAAMC,SAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,SAAAA,GAAAA,EAAAA;AAyBX;;;AAGC,MACD,SA7BWA,CA6BJC,WAgBN,GAhBD,SAAOA,WAAAA,GAAAA;QACL,IAAoBA,cA9BXD,SA8BHE,CAAAA,YAAAA,CAAAA;AACN,QAAA,IAAI,CAACD,WAAa,EAAA;YAChB,IAAIE,MAAAA,CAAAA;YACJ,IAAI;gBACFA,MAAS,GAAA,IAAIC,gBAAgB,CAAG,EAAA,CAAA,CAAA,CAAA;AAClC,aAAA,CAAE,OAAM,CAAA,EAAA;gBACND,MAASE,GAAAA,QAAAA,CAASC,aAAa,CAAC,QAAA,CAAA,CAAA;AAClC,aAAA;AACA,YAAA,IAAMC,OACJJ,GAAAA,MAAAA,CAAOK,UAAU,CAAC,IAAM,EAAA;gBAAEC,kBAAoB,EAAA,IAAA;AAAK,aAAA,CAAA,CAAA;YAErDR,WAAc,GAAA;gBAAEE,MAAAA,EAAAA,MAAAA;gBAAQI,OAAAA,EAAAA,OAAAA;AAAQ,aAAA,CAAA;AAzCzBP,YAAAA,SAAAA,CA0CGE,YAAY,GAAGD,WAAAA,CAAAA;AAC3B,SAAA;QACA,OAAOA,WAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;AAIC,MACD,SAAOS,CAAAA,WAUN,GAVD,SAAOA,YAAYC,UAAkB,EAAA;QACnC,IAA4BC,oBArDnBZ,SAqDDa,CAAAA,kBAAAA,CAAAA;QACR,IAAI1J,IAAAA,GAAOyJ,iBAAiB,CAACD,UAAW,CAAA,CAAA;AACxC,QAAA,IAAIxJ,IAAM,EAAA;YACR,OAAOA,IAAAA,CAAAA;AACT,SAAA;QAEAA,IAAqB6I,GA3DZA,UA2DsBc,kBAAkB,CAACH,YAAYX,SA3DrDA,CA2D+De,cAAc,EAAE,KAAA,CAAA,CAAA;QACxFH,iBAAiB,CAACD,WAAW,GAAGxJ,IAAAA,CAAAA;QAChC,OAAOA,IAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;;;MAhEW6I,SAuEJgB,CAAAA,mBASN,GATD,SAAOA,oBAAoBC,QAAgB,EAAEC,QAAgB,EAAEC,KAAgB,EAAA;AAC7E,QAAA,IAAIC,GAAMD,GAAAA,KAAAA,GAAQrB,SAAUuB,CAAAA,IAAI,GAAG,OAAU,GAAA,EAAA,CAAA;AAC7CF,QAAAA,KAAAA,GAAQrB,SAAUwB,CAAAA,MAAM,KAAKF,OAAO,SAAQ,CAAA,CAAA;;AAE5C,QAAA,IAAI,CAAC,oBAAA,CAAqBG,IAAI,CAACN,QAAajB,CAAAA,IA3EnCA,SA2E6CwB,CAAAA,oBAAoB,CAACnM,OAAO,CAAC4L,QAAAA,CAAAA,IAAa,CAAC,CAAG,EAAA;YAClGA,QAAW,GAAC,MAAGA,QAAS,GAAA,GAAA,CAAA;AAC1B,SAAA;QACAG,GAAO,IAAGF,WAAS,KAAKD,GAAAA,QAAAA,CAAAA;QACxB,OAAOG,GAAAA,CAAAA;AACT,KAAA,CAAA;AAhFWpB,IAAAA,SAAAA,CAkFJyB,WAEN,GAFD,SAAOA,WAAY9B,CAAAA,IAAY,EAAEgB,UAAkB,EAAA;AACjD,QAAA,OAAiBX,SAnFRA,CAmFkBc,kBAAkB,CAACH,YAAYhB,IAAM,EAAA,IAAA,CAAA,CAAA;AAClE,KAAA,CAAA;AApFWK,IAAAA,SAAAA,CAsFJ0B,mBA4KN,GA5KD,SAAOA,mBAAAA,CAAoBC,QAAsB,EAAA;QAC/C,IAAMC,OAAAA,GAAUD,SAASE,WAAW,EAAA,CAAA;QACpC,IAAMlB,UAAAA,GAAaiB,QAAQE,gBAAgB,CAAA;AAC3C,QAAA,IAAMC,YAAe/B,GAzFZA,SAyFsBU,CAAAA,WAAW,CAACC,UAAAA,CAAAA,CAAAA;AAC3C,QAAA,IAAMqB,QAAWL,GAAAA,QAAAA,CAASM,IAAI,CAACC,KAAK,CAAC,gBAAA,CAAA,CAAA;AAErC,QAAA,IAAMC,QAAQ,IAAIjP,KAAAA,EAAAA,CAAAA;AAClB,QAAA,IAAMkP,aAAa,IAAIlP,KAAAA,EAAAA,CAAAA;AACvB,QAAA,IAAMmP,eAAe,IAAInP,KAAAA,EAAAA,CAAAA;QAEzB,IAAMoP,aAAAA,GAAgBC,OAAOC,cAAc,CAAA;AAC3C,QAAA,IAAMC,aAAaV,YAAa9I,CAAAA,IAAI,GAAG0I,QAAAA,CAASe,WAAW,GAAGJ,aAAAA,CAAAA;QAC9D,IAAMK,SAAAA,GAAYhB,QAAS9H,CAAAA,KAAK,GAAGyI,aAAAA,CAAAA;AACnC,QAAA,IAAIM,SAAY,GAAA,CAAA,CAAA;AAEhBhB,QAAAA,OAAAA,CAAQE,gBAAgB,GAAGnB,UAAAA,CAAAA;QAC3B,IAAK,IAAIvN,IAAI,CAAG0B,EAAAA,CAAAA,GAAIkN,SAAShP,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;YAC/C,IAAMyP,OAAAA,GAAUb,QAAQ,CAAC5O,CAAE,CAAA,CAAA;;YAE3B,IAAIyP,OAAAA,CAAQ7P,MAAM,KAAK,CAAG,EAAA;gBACxB,IAAI,CAAC8P,SAAS,CAACX,KAAAA,EAAOC,YAAYC,YAAc,EAAA,EAAA,EAAI,GAAG,CAAG,EAAA,CAAA,CAAA,CAAA;AAC1D,gBAAA,SAAA;AACF,aAAA;AAEA,YAAA,IAAIU,IAAO,GAAA,EAAA,CAAA;AACX,YAAA,IAAIC,SAAY,GAAA,CAAA,CAAA;AAChB,YAAA,IAAIC,aAAgB,GAAA,CAAA,CAAA;AACpB,YAAA,IAAIC,cAAiB,GAAA,CAAA,CAAA;AAErB,YAAA,IAAIC,IAAO,GAAA,EAAA,CAAA;AACX,YAAA,IAAIC,SAAY,GAAA,CAAA,CAAA;AAChB,YAAA,IAAIC,aAAgB,GAAA,CAAA,CAAA;AACpB,YAAA,IAAIC,cAAiB,GAAA,CAAA,CAAA;AAErB,YAAA,IAAIC,YAAe,GAAA,KAAA,CAAA;YAEnB,IAAK,IAAIC,CAAI,GAAA,CAAA,EAAGC,CAAIZ,GAAAA,OAAAA,CAAQ7P,MAAM,EAAEwQ,CAAAA,GAAIC,CAAG,EAAA,EAAED,CAAG,CAAA;gBAC9C,IAAM7D,IAAAA,GAAOkD,OAAO,CAACW,CAAE,CAAA,CAAA;AACvB,gBAAA,IAAMhF,WAAWwB,SA5HZA,CA4HsB0D,YAAY,CAAC/D,MAAMgB,UAAYiB,EAAAA,OAAAA,CAAAA,CAAAA;gBAC1D,IAAM+B,QAAAA,GAAWhE,IAAKC,CAAAA,UAAU,CAAC,CAAA,CAAA,CAAA;AACjC,gBAAA,IAAMgE,UAAUD,QAAa,KAAA,EAAA,CAAA;gBAE7B,IAAIC,OAAAA,IAAWL,gBAAgBJ,IAAKnQ,CAAAA,MAAM,KAAK,CAAK+P,IAAAA,IAAAA,CAAK/P,MAAM,KAAK,CAAG,EAAA;AACrE,oBAAA,SAAA;AACF,iBAAA;;AAGA,gBAAA,IAAM6Q,cAAiBD,GAAAA,OAAAA,IAAYD,QAAY,IAAA,MAAA,IAAUA,QAAY,IAAA,MAAA,CAAA;AACrE,gBAAA,IAAQlF,CAAeD,GAAAA,QAAAA,CAAfC,CAAGqF,EAAAA,OAAAA,GAAYtF,QAAZsF,CAAAA,OAAAA,CAAAA;gBACX,IAAMC,KAAAA,GAAQvF,QAASE,CAAAA,CAAC,GAAG,GAAA,CAAA;AAC3B,gBAAA,IAAMsF,SAASD,KAAQD,GAAAA,OAAAA,CAAAA;AACvB,gBAAA,IAAMG,UAAUF,KAAQD,GAAAA,OAAAA,CAAAA;AAExB,gBAAA,IAAID,cAAgB,EAAA;;oBAElB,IAAId,IAAAA,CAAK/P,MAAM,GAAG,CAAG,EAAA;wBACnB,IAAIoQ,SAAAA,GAAYJ,YAAYL,SAAW,EAAA;;AAErC,4BAAA,IAAIS,YAAY,CAAG,EAAA;gCACjB,IAAI,CAACN,SAAS,CAACX,KAAAA,EAAOC,YAAYC,YAAcc,EAAAA,IAAAA,EAAMC,WAAWC,aAAeC,EAAAA,cAAAA,CAAAA,CAAAA;AAClF,6BAAA;4BAEAV,SAAY1J,GAAAA,IAAAA,CAAKI,GAAG,CAACsJ,SAAWQ,EAAAA,SAAAA,CAAAA,CAAAA;4BAChCG,YAAe,GAAA,IAAA,CAAA;4BACfJ,IAAOJ,GAAAA,IAAAA,CAAAA;4BACPK,SAAYJ,GAAAA,SAAAA,CAAAA;4BACZK,aAAgBJ,GAAAA,aAAAA,CAAAA;4BAChBK,cAAiBJ,GAAAA,cAAAA,CAAAA;yBACZ,MAAA;4BACLC,IAAQJ,IAAAA,IAAAA,CAAAA;4BACRK,SAAaJ,IAAAA,SAAAA,CAAAA;4BACbK,aAAgBnK,GAAAA,IAAAA,CAAKI,GAAG,CAAC+J,aAAeJ,EAAAA,aAAAA,CAAAA,CAAAA;4BACxCK,cAAiBpK,GAAAA,IAAAA,CAAKI,GAAG,CAACgK,cAAgBJ,EAAAA,cAAAA,CAAAA,CAAAA;AAC5C,yBAAA;wBAEAH,IAAO,GAAA,EAAA,CAAA;AACPC,wBAAAA,SAAAA,GAAYC,gBAAgBC,cAAiB,GAAA,CAAA,CAAA;AAC/C,qBAAA;;;AAIA,oBAAA,IAAIE,SAAY3E,GAAAA,CAAAA,GAAIkE,SAAaS,IAAAA,SAAAA,GAAY,CAAG,EAAA;wBAC9C,IAAI,CAACN,SAAS,CAACX,KAAAA,EAAOC,YAAYC,YAAcc,EAAAA,IAAAA,EAAMC,WAAWC,aAAeC,EAAAA,cAAAA,CAAAA,CAAAA;wBAChFV,SAAY1J,GAAAA,IAAAA,CAAKI,GAAG,CAACsJ,SAAWQ,EAAAA,SAAAA,CAAAA,CAAAA;wBAChCG,YAAe,GAAA,IAAA,CAAA;AACf,wBAAA,IAAIK,OAAS,EAAA;4BACXT,IAAO,GAAA,EAAA,CAAA;AACPC,4BAAAA,SAAAA,GAAYC,gBAAgBC,cAAiB,GAAA,CAAA,CAAA;yBACxC,MAAA;4BACLH,IAAOxD,GAAAA,IAAAA,CAAAA;AACPyD,4BAAAA,SAAAA,GAAY5E,SAAS0F,QAAQ,CAAA;4BAC7Bb,aAAgBW,GAAAA,MAAAA,CAAAA;4BAChBV,cAAiBW,GAAAA,OAAAA,CAAAA;AACnB,yBAAA;qBACK,MAAA;wBACLd,IAAQxD,IAAAA,IAAAA,CAAAA;AACRyD,wBAAAA,SAAAA,IAAa5E,SAAS0F,QAAQ,CAAA;wBAC9Bb,aAAgBnK,GAAAA,IAAAA,CAAKI,GAAG,CAAC+J,aAAeW,EAAAA,MAAAA,CAAAA,CAAAA;wBACxCV,cAAiBpK,GAAAA,IAAAA,CAAKI,GAAG,CAACgK,cAAgBW,EAAAA,OAAAA,CAAAA,CAAAA;AAC5C,qBAAA;iBACK,MAAA;AACL,oBAAA,IAAIjB,SAAYxE,GAAAA,QAAAA,CAASC,CAAC,GAAGkE,SAAW,EAAA;AACtC,wBAAA,IAAIS,YAAY,CAAG,EAAA;4BACjB,IAAI,CAACN,SAAS,CAACX,KAAAA,EAAOC,YAAYC,YAAcc,EAAAA,IAAAA,EAAMC,WAAWC,aAAeC,EAAAA,cAAAA,CAAAA,CAAAA;4BAChFV,SAAY1J,GAAAA,IAAAA,CAAKI,GAAG,CAACsJ,SAAWQ,EAAAA,SAAAA,CAAAA,CAAAA;4BAChCD,IAAO,GAAA,EAAA,CAAA;AACPC,4BAAAA,SAAAA,GAAYC,gBAAgBC,cAAiB,GAAA,CAAA,CAAA;AAC/C,yBAAA;;AAGA,wBAAA,IAAIN,YAAY,CAAG,EAAA;4BACjB,IAAI,CAACF,SAAS,CAACX,KAAAA,EAAOC,YAAYC,YAAcU,EAAAA,IAAAA,EAAMC,WAAWC,aAAeC,EAAAA,cAAAA,CAAAA,CAAAA;AAClF,yBAAA;wBAEAN,SAAY1J,GAAAA,IAAAA,CAAKI,GAAG,CAACsJ,SAAWI,EAAAA,SAAAA,CAAAA,CAAAA;wBAChCO,YAAe,GAAA,IAAA,CAAA;wBACfR,IAAOpD,GAAAA,IAAAA,CAAAA;AACPqD,wBAAAA,SAAAA,GAAYxE,SAAS0F,QAAQ,CAAA;wBAC7BjB,aAAgBe,GAAAA,MAAAA,CAAAA;wBAChBd,cAAiBe,GAAAA,OAAAA,CAAAA;qBACZ,MAAA;wBACLlB,IAAQpD,IAAAA,IAAAA,CAAAA;AACRqD,wBAAAA,SAAAA,IAAaxE,SAAS0F,QAAQ,CAAA;wBAC9BjB,aAAgB/J,GAAAA,IAAAA,CAAKI,GAAG,CAAC2J,aAAee,EAAAA,MAAAA,CAAAA,CAAAA;wBACxCd,cAAiBhK,GAAAA,IAAAA,CAAKI,GAAG,CAAC4J,cAAgBe,EAAAA,OAAAA,CAAAA,CAAAA;AAC5C,qBAAA;AACF,iBAAA;AACF,aAAA;AAEA,YAAA,IAAIjB,YAAY,CAAG,EAAA;;gBAEjB,IAAII,SAAAA,GAAYJ,YAAYL,SAAW,EAAA;;AAErC,oBAAA,IAAIS,YAAY,CAAG,EAAA;wBACjB,IAAI,CAACN,SAAS,CAACX,KAAAA,EAAOC,YAAYC,YAAcc,EAAAA,IAAAA,EAAMC,WAAWC,aAAeC,EAAAA,cAAAA,CAAAA,CAAAA;AAClF,qBAAA;oBACAV,SAAY1J,GAAAA,IAAAA,CAAKI,GAAG,CAACsJ,SAAWQ,EAAAA,SAAAA,CAAAA,CAAAA;oBAEhCA,SAAY,GAAA,CAAA,CAAA;;AAEZ,oBAAA,IAAIJ,YAAY,CAAG,EAAA;wBACjB,IAAI,CAACF,SAAS,CAACX,KAAAA,EAAOC,YAAYC,YAAcU,EAAAA,IAAAA,EAAMC,WAAWC,aAAeC,EAAAA,cAAAA,CAAAA,CAAAA;AAClF,qBAAA;oBACAN,SAAY1J,GAAAA,IAAAA,CAAKI,GAAG,CAACsJ,SAAWI,EAAAA,SAAAA,CAAAA,CAAAA;iBAC3B,MAAA;;oBAELG,IAAQJ,IAAAA,IAAAA,CAAAA;oBACRK,SAAaJ,IAAAA,SAAAA,CAAAA;oBACbK,aAAgBnK,GAAAA,IAAAA,CAAKI,GAAG,CAAC+J,aAAeJ,EAAAA,aAAAA,CAAAA,CAAAA;oBACxCK,cAAiBpK,GAAAA,IAAAA,CAAKI,GAAG,CAACgK,cAAgBJ,EAAAA,cAAAA,CAAAA,CAAAA;AAC5C,iBAAA;AACF,aAAA;AAEA,YAAA,IAAIE,YAAY,CAAG,EAAA;gBACjB,IAAI,CAACN,SAAS,CAACX,KAAAA,EAAOC,YAAYC,YAAcc,EAAAA,IAAAA,EAAMC,WAAWC,aAAeC,EAAAA,cAAAA,CAAAA,CAAAA;gBAChFV,SAAY1J,GAAAA,IAAAA,CAAKI,GAAG,CAACsJ,SAAWQ,EAAAA,SAAAA,CAAAA,CAAAA;AAClC,aAAA;AACF,SAAA;QAEA,IAAItJ,MAAAA,GAAS6H,QAAS7H,CAAAA,MAAM,GAAGwI,aAAAA,CAAAA;AAC/B,QAAA,IAAIX,QAASwC,CAAAA,YAAY,KAAKpE,YAAAA,CAAaqE,QAAQ,EAAE;YACnDtK,MAAS2I,GAAAA,UAAAA,GAAaN,MAAMnP,MAAM,CAAA;AACpC,SAAA;QAEA,OAAO;YACL6G,KAAO+I,EAAAA,SAAAA;YACP9I,MAAAA,EAAAA,MAAAA;YACAqI,KAAAA,EAAAA,KAAAA;YACAC,UAAAA,EAAAA,UAAAA;YACAK,UAAAA,EAAAA,UAAAA;YACAJ,YAAAA,EAAAA,YAAAA;AACF,SAAA,CAAA;AACF,KAAA,CAAA;AAlQWrC,IAAAA,SAAAA,CAoQJqE,sBAkDN,GAlDD,SAAOA,sBAAAA,CAAuB1C,QAAsB,EAAA;QAClD,IAAMC,OAAAA,GAAUD,SAASE,WAAW,EAAA,CAAA;QACpC,IAAMlB,UAAAA,GAAaiB,QAAQE,gBAAgB,CAAA;AAC3C,QAAA,IAAMC,YAAe/B,GAvQZA,SAuQsBU,CAAAA,WAAW,CAACC,UAAAA,CAAAA,CAAAA;AAC3C,QAAA,IAAMqB,QAAWL,GAAAA,QAAAA,CAASM,IAAI,CAACC,KAAK,CAAC,gBAAA,CAAA,CAAA;QACrC,IAAMoC,SAAAA,GAAYtC,SAAShP,MAAM,CAAA;AACjC,QAAA,IAAMmP,QAAQ,IAAIjP,KAAAA,EAAAA,CAAAA;AAClB,QAAA,IAAMkP,aAAa,IAAIlP,KAAAA,EAAAA,CAAAA;AACvB,QAAA,IAAMmP,eAAe,IAAInP,KAAAA,EAAAA,CAAAA;QACzB,IAAQsP,iBAAmBD,MAAnBC,CAAAA,cAAAA,CAAAA;AACR,QAAA,IAAMC,aAAaV,YAAa9I,CAAAA,IAAI,GAAG0I,QAAAA,CAASe,WAAW,GAAGF,cAAAA,CAAAA;AAE9D,QAAA,IAAI3I,KAAQ,GAAA,CAAA,CAAA;AACZ+H,QAAAA,OAAAA,CAAQE,gBAAgB,GAAGnB,UAAAA,CAAAA;AAC3B,QAAA,IAAK,IAAIvN,CAAI,GAAA,CAAA,EAAGA,CAAIkR,GAAAA,SAAAA,EAAW,EAAElR,CAAG,CAAA;YAClC,IAAM+P,IAAAA,GAAOnB,QAAQ,CAAC5O,CAAE,CAAA,CAAA;AACxB,YAAA,IAAImR,QAAW,GAAA,CAAA,CAAA;AACf,YAAA,IAAIC,SAAY,GAAA,CAAA,CAAA;AAChB,YAAA,IAAIC,UAAa,GAAA,CAAA,CAAA;YAEjB,IAAK,IAAIjB,CAAI,GAAA,CAAA,EAAGC,CAAIN,GAAAA,IAAAA,CAAKnQ,MAAM,EAAEwQ,CAAAA,GAAIC,CAAG,EAAA,EAAED,CAAG,CAAA;gBAC3C,IAAMhF,QAAAA,GAAWwB,SAAU0D,CAAAA,YAAY,CAACP,IAAI,CAACK,CAAE,CAAA,EAAE7C,UAAYiB,EAAAA,OAAAA,CAAAA,CAAAA;AAC7D2C,gBAAAA,QAAAA,IAAY/F,SAAS0F,QAAQ,CAAA;gBAC7B,IAAQJ,UAAYtF,QAAZsF,CAAAA,OAAAA,CAAAA;gBACR,IAAMC,KAAAA,GAAQvF,QAASE,CAAAA,CAAC,GAAG,GAAA,CAAA;AAC3B,gBAAA,IAAMsF,SAASD,KAAQD,GAAAA,OAAAA,CAAAA;AACvB,gBAAA,IAAMG,UAAUF,KAAQD,GAAAA,OAAAA,CAAAA;gBACxBU,SAAYR,GAAAA,MAAAA,KAAWQ,SAAAA,GAAYR,MAAK,CAAA,CAAA;gBACxCS,UAAaR,GAAAA,OAAAA,KAAYQ,UAAAA,GAAaR,OAAM,CAAA,CAAA;AAC9C,aAAA;AAEA,YAAA,IAAIM,WAAW,CAAG,EAAA;gBAChB,IAAI,CAACzB,SAAS,CAACX,KAAAA,EAAOC,YAAYC,YAAcc,EAAAA,IAAAA,EAAMoB,UAAUC,SAAWC,EAAAA,UAAAA,CAAAA,CAAAA;gBAC3E5K,KAAQX,GAAAA,IAAAA,CAAKI,GAAG,CAACO,KAAO0K,EAAAA,QAAAA,CAAAA,CAAAA;AAC1B,aAAA;AACF,SAAA;QAEA,IAAIzK,MAAAA,GAAS6H,QAAS7H,CAAAA,MAAM,GAAG0I,cAAAA,CAAAA;AAC/B,QAAA,IAAIb,QAASwC,CAAAA,YAAY,KAAKpE,YAAAA,CAAaqE,QAAQ,EAAE;YACnDtK,MAAS2I,GAAAA,UAAAA,GAAaN,MAAMnP,MAAM,CAAA;AACpC,SAAA;QAEA,OAAO;YACL6G,KAAAA,EAAAA,KAAAA;YACAC,MAAAA,EAAAA,MAAAA;YACAqI,KAAAA,EAAAA,KAAAA;YACAC,UAAAA,EAAAA,UAAAA;YACAK,UAAAA,EAAAA,UAAAA;YACAJ,YAAAA,EAAAA,YAAAA;AACF,SAAA,CAAA;AACF,KAAA,CAAA;AAEA;;;;;;MAxTWrC,SA+TJ0E,CAAAA,iBASN,GATD,SAAOA,kBAAkBzD,QAAgB,EAAEC,QAAgB,EAAEC,KAAgB,EAAA;AAC3E,QAAA,IAAIC,GAAMD,GAAAA,KAAAA,GAAQrB,SAAUuB,CAAAA,IAAI,GAAG,MAAS,GAAA,EAAA,CAAA;AAC5CF,QAAAA,KAAAA,GAAQrB,SAAUwB,CAAAA,MAAM,KAAKF,OAAO,QAAO,CAAA,CAAA;;AAE3C,QAAA,IAAI,CAAC,oBAAA,CAAqBG,IAAI,CAACN,QAAajB,CAAAA,IAnUnCA,SAmU6CwB,CAAAA,oBAAoB,CAACnM,OAAO,CAAC4L,QAAAA,CAAAA,IAAa,CAAC,CAAG,EAAA;AAClGA,YAAAA,QAAAA,GAAW,EAAGA,GAAAA,QAAAA,CAAAA;AAChB,SAAA;QACAG,GAAO,IAAGF,WAAS,IAAID,GAAAA,QAAAA,CAAAA;QACvB,OAAOG,GAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;MA1UWpB,SA6UJc,CAAAA,kBAiGN,GAjGD,SAAOA,mBAAmBH,UAAkB,EAAEgE,aAAqB,EAAEC,MAAe,EAAA;QAClF,IAA4B5E,sBAAAA,GAAAA,SAAUC,CAAAA,WAAW,IAAzCE,MAAoBH,GAAAA,sBAAAA,CAApBG,MAAQI,EAAAA,OAAAA,GAAYP,sBAAZO,CAAAA,OAAAA,CAAAA;AAChBA,QAAAA,OAAAA,CAAQsE,IAAI,GAAGlE,UAAAA,CAAAA;;;;AAIf,QAAA,IAA8EJ,oBAAAA,GAAAA,OAAAA,CAAQuE,WAAW,CAACH,aAA1FI,CAAAA,EAAAA,qBAAAA,GAAsExE,oBAAtEwE,CAAAA,qBAAAA,EAAuBC,sBAA+CzE,GAAAA,oBAAAA,CAA/CyE,sBAAwBnL,EAAOoL,cAAgB1E,oBAAvB1G,CAAAA,KAAAA,CAAAA;;;;AAIvD,QAAA,IAAMA,KAAQX,GAAAA,IAAAA,CAAKI,GAAG,CACpB,GACAJ,IAAKgM,CAAAA,KAAK,CAAChM,IAAAA,CAAKI,GAAG,CAAC0L,sBAAAA,GAAyB9L,IAAKiM,CAAAA,GAAG,CAACJ,qBAAwBE,CAAAA,EAAAA,WAAAA,CAAAA,CAAAA,CAAAA,CAAAA;;QAGhF,IAAIG,QAAAA,GAAWlM,IAAKmM,CAAAA,IAAI,CAAC9E,OAAAA,CAAQuE,WAAW,CAAC9E,SA5VpCA,CA4V8CsF,gBAAgB,CAAA,CAAEzL,KAAK,CAAA,CAAA;AAC9E,QAAA,IAAIC,MAASsL,GAAAA,QAAAA,GAAWpF,SA7VfA,CA6VyBuF,iBAAiB,CAAA;AACnDH,QAAAA,QAAAA,GA9VSpF,SA8VawF,CAAAA,mBAAmB,GAAGJ,QAAY,GAAA,CAAA,CAAA;QACxD,IAAQK,gBA/VCzF,SA+VDyF,CAAAA,aAAAA,CAAAA;QACR3L,MAAU2L,IAAAA,aAAAA,CAAAA;AACVL,QAAAA,QAAAA,IAAYK,aAAgB,GAAA,GAAA,CAAA;AAE5BtF,QAAAA,MAAAA,CAAOtG,KAAK,GAAGA,KAAAA,CAAAA;AACfsG,QAAAA,MAAAA,CAAOrG,MAAM,GAAGA,MAAAA,CAAAA;AAEhByG,QAAAA,OAAAA,CAAQsE,IAAI,GAAGlE,UAAAA,CAAAA;AACfJ,QAAAA,OAAAA,CAAQmF,SAAS,GAAG,MAAA,CAAA;AACpBnF,QAAAA,OAAAA,CAAQoF,SAAS,CAAC,CAAG,EAAA,CAAA,EAAG9L,KAAOC,EAAAA,MAAAA,CAAAA,CAAAA;AAC/ByG,QAAAA,OAAAA,CAAQqF,YAAY,GAAG,QAAA,CAAA;AACvBrF,QAAAA,OAAAA,CAAQmF,SAAS,GAAG,MAAA,CAAA;AACpB,QAAA,IAAIX,wBAAwB,CAAG,EAAA;YAC7BxE,OAAQsF,CAAAA,QAAQ,CAAClB,aAAAA,EAAeI,qBAAuBK,EAAAA,QAAAA,CAAAA,CAAAA;SAClD,MAAA;YACL7E,OAAQsF,CAAAA,QAAQ,CAAClB,aAAAA,EAAe,CAAGS,EAAAA,QAAAA,CAAAA,CAAAA;AACrC,SAAA;QAEA,IAAMU,SAAAA,GAAYvF,QAAQwF,YAAY,CAAC,GAAG,CAAGlM,EAAAA,KAAAA,EAAOC,QAAQ6E,IAAI,CAAA;QAChE,IAAMqH,GAAAA,GAAMF,UAAU9S,MAAM,CAAA;AAE5B,QAAA,IAAIiT,MAAM,CAAC,CAAA,CAAA;AACX,QAAA,IAAIC,SAAS,CAAC,CAAA,CAAA;QACd,IAAItJ,CAAAA,CAAAA;AACJ,QAAA,IAAIoH,MAAS,GAAA,CAAA,CAAA;AACb,QAAA,IAAIC,OAAU,GAAA,CAAA,CAAA;AACd,QAAA,IAAIhL,IAAO,GAAA,CAAA,CAAA;QAEX,IAAMkN,QAAAA,GAAWhG,OAAOtG,KAAK,CAAA;AAC7B,QAAA,IAAMuM,qBAAqB,GAAMD,GAAAA,QAAAA,CAAAA;AACjC,QAAA,IAAK,IAAI/S,CAAI,GAAA,CAAA,EAAGA,CAAI4S,GAAAA,GAAAA,EAAK5S,KAAK,CAAG,CAAA;AAC/B,YAAA,IAAI0S,SAAS,CAAC1S,CAAI,GAAA,CAAA,CAAE,KAAK,CAAG,EAAA;AAC1B,gBAAA,IAAMiT,MAAMjT,CAAI,GAAA,IAAA,CAAA;AAChBwJ,gBAAAA,CAAAA,GAAI,CAAC,EAAEyJ,GAAAA,GAAMD,kBAAiB,CAAA,CAAA;gBAE9B,IAAIH,GAAAA,KAAQ,CAAC,CAAG,EAAA;oBACdA,GAAMrJ,GAAAA,CAAAA,CAAAA;AACR,iBAAA;AAEA,gBAAA,IAAIA,IAAIsJ,MAAQ,EAAA;oBACdA,MAAStJ,GAAAA,CAAAA,CAAAA;AACX,iBAAA;aACK,MAAA;AACLkJ,gBAAAA,SAAS,CAAC1S,CAAAA,CAAE,GAAG0S,SAAS,CAAC1S,CAAAA,GAAI,CAAE,CAAA,GAAG0S,SAAS,CAAC1S,CAAI,GAAA,CAAA,CAAE,GAAG,GAAA,CAAA;AACvD,aAAA;AACF,SAAA;AAEA,QAAA,IAAI6S,GAAQ,KAAA,CAAC,CAAKC,IAAAA,MAAAA,KAAW,CAAC,CAAG,EAAA;AAC/BlC,YAAAA,MAAAA,GAASoB,QAAWa,GAAAA,GAAAA,CAAAA;;AAEpBhC,YAAAA,OAAAA,GAAUiC,SAASd,QAAW,GAAA,CAAA,CAAA;AAC9BnM,YAAAA,IAAAA,GAAO+K,MAASC,GAAAA,OAAAA,CAAAA;AAClB,SAAA;AAEA,QAAA,IAAIW,MAAQ,EAAA;AACV,YAAA,IAAIjG,IAAO,GAAA,IAAA,CAAA;AACX,YAAA,IAAI1F,OAAO,CAAG,EAAA;AACZ,gBAAA,IAAMqN,eAAeH,QAAW,GAAA,CAAA,CAAA;;AAEhCxH,gBAAAA,IAAAA,GAAO,IAAIpM,UAAWuT,CAAAA,SAAAA,CAAUS,MAAM,EAAEN,GAAAA,GAAMK,cAAcrN,IAAOqN,GAAAA,YAAAA,CAAAA,CAAAA;AACrE,aAAA;YACA,OAAO;gBACL3G,IAAMgF,EAAAA,aAAAA;gBACNhI,CAAG,EAAA,CAAA;gBACHC,CAAG,EAAA,CAAA;gBACH6B,CAAG5E,EAAAA,KAAAA;gBACH6E,CAAGzF,EAAAA,IAAAA;gBACHuN,OAASzB,EAAAA,qBAAAA,GAAwB,IAAIA,qBAAwB,GAAA,CAAA;AAC7DjB,gBAAAA,OAAAA,EAAS,CAACE,MAASC,GAAAA,OAAM,IAAK,GAAA;gBAC9BC,QAAUhL,EAAAA,IAAAA,CAAKgM,KAAK,CAACD,WAAAA,CAAAA;gBACrBpV,GAAK,EAAA;oBAAC,IAAIuP,kBAAAA,EAAAA;oBAAW,IAAIA,kBAAAA,EAAAA;oBAAW,IAAIA,kBAAAA,EAAAA;oBAAW,IAAIA,kBAAAA,EAAAA;AAAU,iBAAA;gBACjE4E,MAAAA,EAAAA,MAAAA;gBACAC,OAAAA,EAAAA,OAAAA;gBACA7O,KAAO,EAAA,CAAA;gBACPuJ,IAAAA,EAAAA,IAAAA;AACF,aAAA,CAAA;SACK,MAAA;YACL,OAAO;gBAAEqF,MAAAA,EAAAA,MAAAA;gBAAQC,OAAAA,EAAAA,OAAAA;gBAAShL,IAAAA,EAAAA,IAAAA;AAAK,aAAA,CAAA;AACjC,SAAA;AACF,KAAA,CAAA;AAEA;;MAhbW+G,SAmbJ0D,CAAAA,YASN,GATD,SAAOA,aAAa/D,IAAY,EAAEgB,UAAkB,EAAEkE,IAAa,EAAA;QACjE,IAAIrG,QAAAA,GAAWqG,IAAKnB,CAAAA,YAAY,CAAC/D,IAAAA,CAAAA,CAAAA;AACjC,QAAA,IAAI,CAACnB,QAAU,EAAA;AACbA,YAAAA,QAAAA,GAAWwB,SAtbJA,CAsbcyB,WAAW,CAAC9B,IAAMgB,EAAAA,UAAAA,CAAAA,CAAAA;AACvCkE,YAAAA,IAAAA,CAAK4B,kBAAkB,CAACjI,QAAAA,CAAAA,CAAAA;YACxBqG,IAAK6B,CAAAA,YAAY,CAAC/G,IAAMnB,EAAAA,QAAAA,CAAAA,CAAAA;AAC1B,SAAA;QAEA,OAAOA,QAAAA,CAAAA;AACT,KAAA,CAAA;AA5bWwB,IAAAA,SAAAA,CA8bI8C,SAgBd,GAhBD,SAAeA,SACbX,CAAAA,KAAe,EACfC,UAAoB,EACpBC,YAA4B,EAC5Bc,IAAY,EACZC,SAAiB,EACjBY,MAAc,EACdC,OAAe,EAAA;AAEf9B,QAAAA,KAAAA,CAAMjN,IAAI,CAACiO,IAAAA,CAAAA,CAAAA;AACXf,QAAAA,UAAAA,CAAWlN,IAAI,CAACkO,SAAAA,CAAAA,CAAAA;AAChBf,QAAAA,YAAAA,CAAanN,IAAI,CAAC;YAChB8O,MAAAA,EAAAA,MAAAA;YACAC,OAAAA,EAAAA,OAAAA;AACAhL,YAAAA,IAAAA,EAAM+K,MAASC,GAAAA,OAAAA;AACjB,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;AA9cWjE,IAAAA,OAAAA,SAAAA,CAAAA;AA+cZ,CAAA,GAAA;AA9cC,iBADWA,UAEJwB,oBAAiC,GAAA;AACtC,IAAA,OAAA;AACA,IAAA,YAAA;AACA,IAAA,WAAA;AACA,IAAA,SAAA;AACA,IAAA,SAAA;AACA,IAAA,WAAA;AACA,IAAA,MAAA;AACA,IAAA,OAAA;AACA,IAAA,UAAA;AACD,CAAA,CAAA;AAED;AACA,iBAfWxB,UAgBJyF,aAAwB,GAAA,CAAA,CAAA;AAC/B,qFAjBWzF,UAkBIe,cAAyB,GAAA,MAAA,CAAA;AAlB7Bf,SAAAA,CAmBIsF,gBAA2B,GAAA,GAAA,CAAA;AAnB/BtF,SAAAA,CAoBIuF,iBAA4B,GAAA,CAAA,CAAA;AApBhCvF,SAAAA,CAqBIwF,mBAA8B,GAAA,GAAA,CAAA;AArBlCxF,SAAAA,CAsBIa,qBAAmD,EAAC,CAAA;AAtBxDb,SAAAA,CAuBIE,YAA4B,GAAA,IAAA;;AC3B7C;;IAGO,IAAMyG,OAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,OAAAA,CAOChT,MAAc,EAAA;AAHlBiT,QAAAA,IAAAA,CAAAA,YAAAA,GAA4B,EAAE,CAAA;AAC9BC,QAAAA,IAAAA,CAAAA,UAAAA,GAAqB,CAAC,CAAA,CAAA;QAG5B,IAAI,CAAC9S,OAAO,GAAGJ,MAAAA,CAAAA;;AARNgT,IAAAA,IAAAA,MAAAA,GAAAA,OAAAA,CAAAA,SAAAA,CAAAA;IAWX3S,MAAAA,CAAAA,OAMC,GANDA,SAAAA,OAAAA,GAAAA;QACE,IAAM8S,WAAAA,GAAc,IAAI,CAACF,YAAY,CAAA;QACrC,IAAK,IAAIxT,CAAI,GAAA,CAAA,EAAG0B,CAAIgS,GAAAA,WAAAA,CAAY9T,MAAM,EAAEI,CAAAA,GAAI0B,CAAG,EAAA,EAAE1B,CAAG,CAAA;AAClD0T,YAAAA,WAAW,CAAC1T,CAAAA,CAAE,CAACY,OAAO,CAAC,IAAA,CAAA,CAAA;AACzB,SAAA;AACA8S,QAAAA,WAAAA,CAAY9T,MAAM,GAAG,CAAA,CAAA;AACvB,KAAA,CAAA;AAEA;;AAEC,MACDyT,MAAAA,CAAAA,kBAeC,GAfDA,SAAAA,mBAAmBjI,QAAkB,EAAA;QACnC,IAAMsI,WAAAA,GAAc,IAAI,CAACF,YAAY,CAAA;QACrC,IAAIG,SAAAA,GAAY,IAAI,CAACF,UAAU,CAAA;QAC/B,IAAIE,SAAAA,KAAc,CAAC,CAAG,EAAA;AACpB,YAAA,IAAI,CAACC,gBAAgB,EAAA,CAAA;AACrBD,YAAAA,SAAAA,EAAAA,CAAAA;AACF,SAAA;QACA,IAAIE,SAAAA,GAAYH,WAAW,CAACC,SAAU,CAAA,CAAA;AACtC,QAAA,IAAI,CAACE,SAAAA,CAAU1I,iBAAiB,CAACC,QAAW,CAAA,EAAA;YAC1CyI,SAAY,GAAA,IAAI,CAACD,gBAAgB,EAAA,CAAA;AACjCC,YAAAA,SAAAA,CAAU1I,iBAAiB,CAACC,QAAAA,CAAAA,CAAAA;AAC5BuI,YAAAA,SAAAA,EAAAA,CAAAA;AACF,SAAA;QACA,IAAI,CAACF,UAAU,GAAGE,SAAAA,CAAAA;AAClBvI,QAAAA,QAAAA,CAASG,IAAI,GAAG,IAAA,CAAA;AAClB,KAAA,CAAA;AAEA;;AAEC,MACD+H,OAAAA,YAIC,GAJDA,SAAAA,YAAa/G,CAAAA,IAAY,EAAEnB,QAAkB,EAAA;QAC3C,IAAMuI,SAAAA,GAAY,IAAI,CAACF,UAAU,CAAA;AACjCrI,QAAAA,QAAAA,CAASpJ,KAAK,GAAG2R,SAAAA,CAAAA;AACjB,QAAA,IAAI,CAACH,YAAY,CAACG,UAAU,CAACrH,WAAW,CAACC,IAAMnB,EAAAA,QAAAA,CAAAA,CAAAA;AACjD,KAAA,CAAA;AAEA;;AAEC,MACDkF,MAAAA,CAAAA,YAUC,GAVDA,SAAAA,aAAa/D,IAAY,EAAA;QACvB,IAAMmH,WAAAA,GAAc,IAAI,CAACF,YAAY,CAAA;QACrC,IAAK,IAAIxT,CAAI,GAAA,CAAA,EAAG0B,CAAIgS,GAAAA,WAAAA,CAAY9T,MAAM,EAAEI,CAAAA,GAAI0B,CAAG,EAAA,EAAE1B,CAAG,CAAA;YAClD,IAAM6T,SAAAA,GAAYH,WAAW,CAAC1T,CAAE,CAAA,CAAA;YAChC,IAAMoL,QAAAA,GAAWyI,SAAUpH,CAAAA,WAAW,CAACF,IAAAA,CAAAA,CAAAA;AACvC,YAAA,IAAInB,QAAU,EAAA;gBACZ,OAAOA,QAAAA,CAAAA;AACT,aAAA;AACF,SAAA;QACA,OAAO,IAAA,CAAA;AACT,KAAA,CAAA;AAEA;;AAEC,MACD0I,MAAAA,CAAAA,kBAMC,GANDA,SAAAA,mBAAmB9R,KAAa,EAAA;AAC9B,QAAA,IAAM6R,SAAY,GAAA,IAAI,CAACL,YAAY,CAACxR,KAAM,CAAA,CAAA;AAC1C,QAAA,IAAI6R,SAAW,EAAA;AACb,YAAA,OAAOA,UAAUrX,OAAO,CAAA;AAC1B,SAAA;QACA,OAAO,IAAA,CAAA;AACT,KAAA,CAAA;AAEA;;MAGAuX,MAAAA,CAAAA,aAEC,GAFDA,SAAAA,aAAAA,GAAAA;QACE,OAAO,IAAI,CAACN,UAAU,CAAA;AACxB,KAAA,CAAA;IAEA,MAAQG,CAAAA,gBAmCP,GAnCD,SAAQA,gBAAAA,GAAAA;AACN,QAAA,IAA4B,KAAA,GAAA,IAAI,EAAfrT,SAAW,KAApBI,CAAAA,OAAAA,CAAAA;QACR,IAAMkT,SAAAA,GAAY,IAAIhJ,SAAUtK,CAAAA,MAAAA,CAAAA,CAAAA;QAChC,IAAM/D,OAAAA,GAAU,IAAI+L,SAAUhI,CAAAA,MAAAA,EAAQ,KAAK,GAAKyC,EAAAA,aAAAA,CAAcyF,QAAQ,EAAE,KAAA,CAAA,CAAA;QACxEjM,OAAQ6I,CAAAA,UAAU,GAAGtC,iBAAAA,CAAkBmG,QAAQ,CAAA;AAC/C2K,QAAAA,SAAAA,CAAUrX,OAAO,GAAGA,OAAAA,CAAAA;AACpBqX,QAAAA,SAAAA,CAAU1S,WAAW,GAAG3E,OAAQ2E,CAAAA,WAAW,GAAG,IAAA,CAAA;AAC9C,QAAA,IAAI,CAACqS,YAAY,CAAC1R,IAAI,CAAC+R,SAAAA,CAAAA,CAAAA;QAEvB,IAAMnF,gBAAAA,GAAmB,IAAI,CAACA,gBAAgB,CAAA;AAE9CnO,QAAAA,MAAAA,CAAOO,eAAe,CAACkT,kBAAkB,CACvC,mBAAK,SAAA,eAAA,EAAA;;;AAED,gBAAA,OAAA,eAAMH,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA,CAAAA;;;YAERI,MAAAA,CAAAA,cAcC,GAdDA,SAAAA,cAAAA,GAAAA;gBACE,IAAQtR,QAAa,GAAA,IAAI,CAAjBA,QAAAA,CAAAA;gBACR,IAAMuR,WAAAA,GAAcvR,SAASmI,YAAY,CAAA;gBACzC,IAAMtO,OAAAA,GAAUmG,SAASnG,OAAO,CAAA;gBAChC,IAAK,IAAIoC,KAAKsV,WAAa,CAAA;oBACzB,IAAM9I,QAAAA,GAAW8I,WAAW,CAACtV,CAAE,CAAA,CAAA;oBAC/B,IAAM2M,IAAAA,GAAOqB,UAAUyB,WAAW,CAACjD,SAASmB,IAAI,EAAEmC,kBAAkBnD,IAAI,CAAA;oBAExE,IAAIH,QAAAA,CAASC,CAAC,GAAG,CAAA,IAAKD,SAASE,CAAC,GAAG,KAAKC,IAAM,EAAA;wBAC5C,IAAQQ,eAAiBX,QAAjBW,CAAAA,YAAAA,CAAAA;AACRvP,wBAAAA,OAAAA,CAAQ4M,cAAc,CAACmC,IAAM,EAAA,CAAA,EAAGQ,aAAaxC,CAAC,EAAEwC,YAAavC,CAAAA,CAAC,EAAE4B,QAAAA,CAASC,CAAC,EAAED,SAASE,CAAC,CAAA,CAAA;AACxF,qBAAA;AACF,iBAAA;AACA9O,gBAAAA,OAAAA,CAAQkI,eAAe,EAAA,CAAA;AACzB,aAAA,CAAA;;AAlBiBhC,SAAAA,CAAAA,eAAAA,CAAAA,GAAAA,CAAAA,CAAAA;QAsBrB,OAAOmR,SAAAA,CAAAA;AACT,KAAA,CAAA;AApHWN,IAAAA,OAAAA,OAAAA,CAAAA;AAqHZ,CAAA,EAAA;;AC3HD;;IAGO,IAAMY,IAAN,iBAAA,SAAA,aAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,IAAAA,EAAAA,aAAAA,CAAAA,CAAAA;aAAAA,IA+BC5T,CAAAA,MAAc,EAAE6T,IAAiB,EAAA;AAAjBA,QAAAA,IAAAA,iBAAAA,IAAe,GAAA,EAAA,CAAA;;AACzC,QAAA,KAAA,GAAA,aAAA,CAAA,IAAA,CAAA,IAAA,EAAM7T,MAXA8T,CAAAA,IAAAA,IAAAA,EAAAA,KAAAA,CAAAA,KAAAA,GAAgB,EAChBC,EAAAA,KAAAA,CAAAA,WAAAA,GAAuC,EAAC,CAAA;AAW9C,QAAA,KAAA,CAAKD,KAAK,GAAGD,IAAAA,CAAAA;;;AAjCJD,IAAAA,IAAAA,MAAAA,GAAAA,IAAAA,CAAAA,SAAAA,CAAAA;AAoCX;;AAEC,MACD1F,OAAAA,WAUC,GAVDA,SAAAA,WAAYX,CAAAA,QAAgB,EAAEyG,SAAoB,EAAA;QAChD,IAAMC,GAAAA,GAAM,QAAG1G,GAAS,GAAGyG,GAAAA,SAAAA,CAAAA;QAC3B,IAAME,UAAAA,GAAa,IAAI,CAACH,WAAW,CAAA;QACnC,IAAI9F,OAAAA,GAAUiG,UAAU,CAACD,GAAI,CAAA,CAAA;AAC7B,QAAA,IAAIhG,OAAS,EAAA;YACX,OAAOA,OAAAA,CAAAA;AACT,SAAA;AACAA,QAAAA,OAAAA,GAAU,IAAI+E,OAAAA,CAAQ,IAAI,CAAChT,MAAM,CAAA,CAAA;QACjCkU,UAAU,CAACD,IAAI,GAAGhG,OAAAA,CAAAA;QAClB,OAAOA,OAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;MAGA,MAAA,CAAmB3N,UAQlB,GARD,SAAmBA,UAAAA,GAAAA;AACjB,QAAA,aAAA,CAAA,SAAA,CAAMA,UAAD,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;QACL,IAAM4T,UAAAA,GAAa,IAAI,CAACH,WAAW,CAAA;QACnC,IAAK,IAAI1V,KAAK6V,UAAY,CAAA;YACxBA,UAAU,CAAC7V,CAAE,CAAA,CAACgC,OAAO,EAAA,CAAA;AACvB,SAAA;QACA,IAAI,CAAC0T,WAAW,GAAG,IAAA,CAAA;QACnB,OAAO,IAAI,CAAC/T,MAAM,CAACmU,QAAQ,CAAC,IAAI,CAACL,KAAK,CAAC,CAAA;AACzC,KAAA,CAAA;AA7DA;;;;;MADWF,KAOJQ,YAYN,GAZD,SAAOA,YAAapU,CAAAA,MAAc,EAAE6T,IAAY,EAAA;AAC9C,QAAA,IAAIA,IAAM,EAAA;YACR,IAAMQ,OAAAA,GAAUrU,OAAOmU,QAAQ,CAAA;YAC/B,IAAIjD,IAAAA,GAAOmD,OAAO,CAACR,IAAK,CAAA,CAAA;AACxB,YAAA,IAAI3C,IAAM,EAAA;gBACR,OAAOA,IAAAA,CAAAA;AACT,aAAA;YACAA,IAAO,GAAA,IAdA0C,KAcS5T,MAAQ6T,EAAAA,IAAAA,CAAAA,CAAAA;YACxBQ,OAAO,CAACR,KAAK,GAAG3C,IAAAA,CAAAA;YAChB,OAAOA,IAAAA,CAAAA;AACT,SAAA;QACA,OAAO,IAAA,CAAA;AACT,KAAA,CAAA;AAnBW0C,IAAAA,aAAAA,CAAAA,IAAAA,EAAAA;;YA2BPC,GAAAA,EAAAA,MAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACC,KAAK,CAAA;AACnB,aAAA;;;AA7BWF,IAAAA,OAAAA,IAAAA,CAAAA;EAAajT,aA+DzB;;ACvED;;IAGO,IAAK2T,qBAAAA,iBAAAA,SAAAA,qBAAAA,EAAAA;iEACgD,qBAAA,CAAA,qBAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA,CAAA;6EAEY,qBAAA,CAAA,qBAAA,CAAA,mBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,mBAAA,CAAA;8EAEC,qBAAA,CAAA,qBAAA,CAAA,oBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,oBAAA,CAAA;AAL7DA,IAAAA,OAAAA,qBAAAA,CAAAA;AAOX,CAAA,CAAA,EAAA;;ACVD;;IAGO,IAAKC,uBAAAA,iBAAAA,SAAAA,uBAAAA,EAAAA;mCACkB,uBAAA,CAAA,uBAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA,CAAA;qCAEE,uBAAA,CAAA,uBAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;oCAED,uBAAA,CAAA,uBAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA,CAAA;AALnBA,IAAAA,OAAAA,uBAAAA,CAAAA;AAOX,CAAA,CAAA,EAAA,EAAA;AAED;;IAGO,IAAKC,qBAAAA,iBAAAA,SAAAA,qBAAAA,EAAAA;gCACe,qBAAA,CAAA,qBAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA,GAAA,KAAA,CAAA;mCAEG,qBAAA,CAAA,qBAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;mCAEA,qBAAA,CAAA,qBAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;AALlBA,IAAAA,OAAAA,qBAAAA,CAAAA;AAOX,CAAA,CAAA,EAAA;;AClBD;;IAGO,IAAMC,WAAN,iBAAA,SAAA,aAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,WAAAA,EAAAA,aAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,WAAAA,CAiDCzU,MAAc,EAAA;;AACxB,QAAA,KAAA,GAAA,aAAA,CAAA,IAAA,CAAA,IAAA,EAAMA,MAjDA0U,CAAAA,IAAAA,IAAAA,EAAAA,KAAAA,CAAAA,QAAAA,GAAqB,IAAInV,KAAAA,EAAAA,EAAAA,KAAAA,CACzBoV,sBAA8C,EAAC,CAAA;;;AAF5CF,IAAAA,IAAAA,MAAAA,GAAAA,WAAAA,CAAAA,SAAAA,CAAAA;AAWX;;;;AAIC,MACDG,MAAAA,CAAAA,SAMC,GANDA,SAAAA,UAAUf,IAAY,EAAA;QACpB,IAAMgB,MAAAA,GAAS,IAAI,CAACH,QAAQ,CAAC,IAAI,CAACC,mBAAmB,CAACd,IAAAA,CAAK,CAAC,CAAA;AAC5D,QAAA,IAAI,CAACgB,MAAQ,EAAA;YACXxR,OAAQI,CAAAA,IAAI,CAAC,2BAAA,GAA8BoQ,IAAO,GAAA,gBAAA,CAAA,CAAA;AACpD,SAAA;QACA,OAAOgB,MAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;;AAKC,MACDC,OAAAA,UAaC,GAbDA,SAAAA,UAAWjB,CAAAA,IAAY,EAAEkB,UAAoB,EAAA;AAC3CA,QAAAA,UAAAA,CAAW1V,MAAM,GAAG,CAAA,CAAA;AACpB,QAAA,IAAII,CAAI,GAAA,IAAI,CAACkV,mBAAmB,CAACd,IAAK,CAAA,CAAA;AACtC,QAAA,IAAIpU,MAAMd,SAAW,EAAA;YACnB,IAAQ+V,QAAa,GAAA,IAAI,CAAjBA,QAAAA,CAAAA;YACR,MAAOjV,CAAAA,IAAK,GAAGA,CAAK,EAAA,CAAA;gBAClB,IAAMoV,MAAAA,GAASH,QAAQ,CAACjV,CAAE,CAAA,CAAA;AAC1BoV,gBAAAA,MAAAA,CAAOhB,IAAI,KAAKA,IAAQkB,IAAAA,UAAAA,CAAWxT,IAAI,CAACsT,MAAAA,CAAAA,CAAAA;AAC1C,aAAA;SACK,MAAA;AACLxR,YAAAA,OAAAA,CAAQI,IAAI,CAAC,qEAAA,CAAA,CAAA;AACf,SAAA;QACA,OAAOsR,UAAAA,CAAAA;AACT,KAAA,CAAA;AAUA;;AAEC,MACDC,MAAAA,CAAAA,UAIC,GAJDA,SAAAA,WAAWH,MAAc,EAAA;AACvB,QAAA,IAAI,CAACF,mBAAmB,CAACE,MAAAA,CAAOhB,IAAI,CAAC,GAAG,IAAI,CAACa,QAAQ,CAACnT,IAAI,CAACsT,MAAU,CAAA,GAAA,CAAA,CAAA;QACrEA,MAAOI,CAAAA,MAAM,GAAG,IAAI,CAAA;AACpBJ,QAAAA,MAAAA,CAAOjU,WAAW,GAAG,IAAA,CAAA;AACvB,KAAA,CAAA;AAEA;;MAGA,MAAA,CAAmBN,UASlB,GATD,SAAmBA,UAAAA,GAAAA;AACjB,QAAA,aAAA,CAAA,SAAA,CAAMA,UAAD,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;AACL,QAAA,IAA8B,KAAA,GAAA,IAAI,EAAhB4U,UAAY,KAAtBR,CAAAA,QAAAA,CAAAA;QACR,IAAK,IAAIjV,IAAI,CAAG0B,EAAAA,CAAAA,GAAI+T,QAAQ7V,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;YAC9CyV,OAAO,CAACzV,CAAE,CAAA,CAACY,OAAO,EAAA,CAAA;AACpB,SAAA;AACA6U,QAAAA,OAAAA,CAAQ7V,MAAM,GAAG,CAAA,CAAA;QACjB,IAAI,CAACqV,QAAQ,GAAG,IAAA,CAAA;QAChB,IAAI,CAACC,mBAAmB,GAAG,IAAA,CAAA;AAC7B,KAAA,CAAA;AA1EWF,IAAAA,aAAAA,CAAAA,WAAAA,EAAAA;;YAOPS,GAAAA,EAAAA,SAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACR,QAAQ,CAAA;AACtB,aAAA;;;AATWD,IAAAA,OAAAA,WAAAA,CAAAA;EAAoB9T,aA2EhC;;AClFD;;IAGO,IAAKwU,cAAAA,iBAAAA,SAAAA,cAAAA,EAAAA;gDAC+B,cAAA,CAAA,cAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;yHAEyE,cAAA,CAAA,cAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;4HAEG,cAAA,CAAA,cAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA,CAAA;AAL3GA,IAAAA,OAAAA,cAAAA,CAAAA;AAOX,CAAA,CAAA,EAAA;;ACVD;;;IAIO,IAAKC,cAAAA,iBAAAA,SAAAA,cAAAA,EAAAA;kDACiC,cAAA,CAAA,cAAA,CAAA,YAAA,CAAA,GAAA,CAAA,CAAA,GAAA,YAAA,CAAA;AAE3C;AACwE,6EAAA,cAAA,CAAA,cAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA,CAAA;AAJ9DA,IAAAA,OAAAA,cAAAA,CAAAA;AAMX,CAAA,CAAA,EAAA;;ACRM,IAAA,KAAA,iBAAA,WAAA;AAAMC,IAAAA,SAAAA,KAAAA,GAAAA,EAAAA;AACX;;;;MADWA,MAMJC,eAYN,GAZD,SAAOA,eAAgBC,CAAAA,KAAY,EAAEC,IAAS,EAAA;QAC5C,IAAM/T,KAAAA,GAAQ8T,KAAM7T,CAAAA,OAAO,CAAC8T,IAAAA,CAAAA,CAAAA;AAC5B,QAAA,IAAI/T,QAAQ,CAAG,EAAA;YACb,OAAO,KAAA,CAAA;AACT,SAAA;QACA,IAAMgU,IAAAA,GAAOF,KAAMlW,CAAAA,MAAM,GAAG,CAAA,CAAA;AAC5B,QAAA,IAAIoC,UAAUgU,IAAM,EAAA;YAClB,IAAMC,GAAAA,GAAMH,KAAK,CAACE,IAAK,CAAA,CAAA;YACvBF,KAAK,CAAC9T,MAAM,GAAGiU,GAAAA,CAAAA;AACjB,SAAA;AACAH,QAAAA,KAAAA,CAAMlW,MAAM,EAAA,CAAA;QACZ,OAAO,IAAA,CAAA;AACT,KAAA,CAAA;AAEA;;AAEC,MACD,KAAOsW,CAAAA,UAaN,GAbD,SAAOA,WAAWJ,KAAiB,EAAA;QACjC,IAAI,OAAOK,gBAAgB,WAAa,EAAA;YACtC,OAAO,IAAIA,WAAcC,EAAAA,CAAAA,MAAM,CAACN,KAAAA,CAAAA,CAAAA;AAClC,SAAA;;AAGA,QAAA,IAAIO,CAAI,GAAA,EAAA,CAAA;QAER,IAAK,IAAIrW,IAAI,CAAGsW,EAAAA,EAAAA,GAAKR,MAAMlW,MAAM,EAAEI,CAAIsW,GAAAA,EAAAA,EAAItW,CAAK,EAAA,CAAA;AAC9CqW,YAAAA,CAAAA,IAAKE,MAAOC,CAAAA,YAAY,CAACV,KAAK,CAAC9V,CAAE,CAAA,CAAA,CAAA;AACnC,SAAA;AAEA,QAAA,OAAOyW,mBAAmBC,kBAAmBL,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAC/C,KAAA,CAAA;AAEA;;;;AAIC,MACD,KAAOM,CAAAA,aAEN,GAFD,SAAOA,cAAcC,GAAW,EAAA;QAC9B,OAAO,+BAAA,CAAgCzI,IAAI,CAACyI,GAAAA,CAAAA,CAAAA;AAC9C,KAAA,CAAA;AAEA;;;;AAIC,MACD,KAAOC,CAAAA,WAEN,GAFD,SAAOA,YAAYD,GAAW,EAAA;QAC5B,OAAO,eAAA,CAAgBzI,IAAI,CAACyI,GAAAA,CAAAA,CAAAA;AAC9B,KAAA,CAAA;AAEA;;AAEC,MACD,KAAOE,CAAAA,YAEN,GAFD,SAAOA,aAAaC,GAAQ,EAAA;AAC1B,QAAA,OAAOlZ,OAAOmZ,IAAI,CAACD,GAAKE,CAAAA,CAAAA,GAAG,CAAC,SAACzC,GAAAA,EAAAA;AAAauC,YAAAA,OAAAA,GAAG,CAACvC,GAAI,CAAA,CAAA;;AACpD,KAAA,CAAA;AAEA;;;;;MA/DWoB,MAqEJsB,kBAgBN,GAhBD,SAAOA,kBAAmBC,CAAAA,OAAe,EAAEC,WAAmB,EAAA;AAC5D,QAAA,IAAIxB,KAtEKA,CAsECe,aAAa,CAACS,WAAc,CAAA,EAAA;YACpC,OAAOA,WAAAA,CAAAA;AACT,SAAA;AAEA,QAAA,IAAIxB,KA1EKA,CA0ECiB,WAAW,CAACO,WAAc,CAAA,EAAA;YAClC,OAAOA,WAAAA,CAAAA;AACT,SAAA;AAEA,QAAA,IAAI,CAAC,UAAA,CAAWjJ,IAAI,CAACgJ,OAAU,CAAA,EAAA;AAC7B,YAAA,IAAME,UAAa,GAAA,UAAA,CAAA;AACnBF,YAAAA,OAAAA,GAAUE,UAAaF,GAAAA,OAAAA,CAAAA;YACvB,OAAO,IAAIG,IAAIF,WAAaD,EAAAA,OAAAA,CAAAA,CAASI,IAAI,CAACC,SAAS,CAACH,UAAAA,CAAWzX,MAAM,CAAA,CAAA;AACvE,SAAA;AAEA,QAAA,OAAOwX,cAAc,IAAIE,GAAAA,CAAIF,WAAaD,EAAAA,OAAAA,CAAAA,CAASI,IAAI,GAAGJ,OAAAA,CAAAA;AAC5D,KAAA,CAAA;AAEA;;AAEC,MACD,KA1FWvB,CA0FJ6B,oBAkCN,GAlCD,SAAOA,oBAAqBC,CAAAA,IAAY,EAAEC,EAAgB,EAAEC,OAAe,EAAEC,EAAgB,EAAEC,MAAc,EAAA;QAC3G,IAAMC,EAAAA,GAAKL,KAAKM,QAAQ,CAAA;;AAGxB,QAAA,IAAMC,MAAMF,EAAE,CAAC,CAAE,CAAA,EAAEG,MAAMH,EAAE,CAAC,CAAE,CAAA,EAAEI,MAAMJ,EAAE,CAAC,CAAE,CAAA,EAAEK,MAAML,EAAE,CAAC,CAAE,CAAA,EACxDM,MAAMN,EAAE,CAAC,CAAE,CAAA,EAAEO,MAAMP,EAAE,CAAC,CAAE,CAAA,EAAEQ,MAAMR,EAAE,CAAC,EAAE,EAAES,GAAAA,GAAMT,EAAE,CAAC,CAAA,CAAE,EAClDU,GAAAA,GAAMV,EAAE,CAAC,CAAA,CAAE,EAAEW,GAAAA,GAAMX,EAAE,CAAC,CAAA,CAAE,EAAEY,GAAAA,GAAMZ,EAAE,CAAC,EAAA,CAAG,EAAEa,GAAAA,GAAMb,EAAE,CAAC,EAAA,CAAG,EACpDc,GAAAA,GAAMd,EAAE,CAAC,EAAA,CAAG,EAAEe,GAAAA,GAAMf,EAAE,CAAC,EAAA,CAAG,EAAEgB,GAAAA,GAAMhB,EAAE,CAAC,EAAA,CAAG,EAAEiB,GAAMjB,GAAAA,EAAE,CAAC,EAAG,CAAA,CAAA;;QAGtD,IAAMkB,GAAAA,GAAMtB,EAAE,CAACC,OAAAA,CAAQ,EAAEsB,GAAMvB,GAAAA,EAAE,CAACC,OAAU,GAAA,CAAA,CAAE,EAAEuB,GAAMxB,GAAAA,EAAE,CAACC,OAAU,GAAA,CAAA,CAAE,EAAEwB,GAAMzB,GAAAA,EAAE,CAACC,OAAU,GAAA,CAAA,CAAE,EAC5FyB,GAAM1B,GAAAA,EAAE,CAACC,OAAU,GAAA,CAAA,CAAE,EAAE0B,GAAM3B,GAAAA,EAAE,CAACC,OAAU,GAAA,CAAA,CAAE,EAAE2B,GAAM5B,GAAAA,EAAE,CAACC,OAAU,GAAA,CAAA,CAAE,EAAE4B,GAAM7B,GAAAA,EAAE,CAACC,OAAU,GAAA,CAAA,CAAE,EAC1F6B,GAAM9B,GAAAA,EAAE,CAACC,OAAU,GAAA,CAAA,CAAE,EAAE8B,GAAM/B,GAAAA,EAAE,CAACC,OAAU,GAAA,CAAA,CAAE,EAAE+B,GAAMhC,GAAAA,EAAE,CAACC,OAAU,GAAA,EAAA,CAAG,EAAEgC,GAAMjC,GAAAA,EAAE,CAACC,OAAU,GAAA,EAAA,CAAG,EAC5FiC,GAAMlC,GAAAA,EAAE,CAACC,OAAU,GAAA,EAAA,CAAG,EAAEkC,GAAMnC,GAAAA,EAAE,CAACC,OAAU,GAAA,EAAA,CAAG,EAAEmC,GAAMpC,GAAAA,EAAE,CAACC,OAAU,GAAA,EAAA,CAAG,EAAEoC,GAAMrC,GAAAA,EAAE,CAACC,OAAAA,GAAU,EAAG,CAAA,CAAA;QAE9FC,EAAE,CAACC,OAAO,GAAGG,GAAAA,GAAMgB,MAAMZ,GAAMa,GAAAA,GAAAA,GAAMT,GAAMU,GAAAA,GAAAA,GAAMN,GAAMO,GAAAA,GAAAA,CAAAA;QACvDvB,EAAE,CAACC,MAAS,GAAA,CAAA,CAAE,GAAGI,GAAAA,GAAMe,MAAMX,GAAMY,GAAAA,GAAAA,GAAMR,GAAMS,GAAAA,GAAAA,GAAML,GAAMM,GAAAA,GAAAA,CAAAA;QAC3DvB,EAAE,CAACC,MAAS,GAAA,CAAA,CAAE,GAAGK,GAAAA,GAAMc,MAAMV,GAAMW,GAAAA,GAAAA,GAAMP,GAAMQ,GAAAA,GAAAA,GAAMJ,GAAMK,GAAAA,GAAAA,CAAAA;QAC3DvB,EAAE,CAACC,MAAS,GAAA,CAAA,CAAE,GAAGM,GAAAA,GAAMa,MAAMT,GAAMU,GAAAA,GAAAA,GAAMN,GAAMO,GAAAA,GAAAA,GAAMH,GAAMI,GAAAA,GAAAA,CAAAA;QAE3DvB,EAAE,CAACC,MAAS,GAAA,CAAA,CAAE,GAAGG,GAAAA,GAAMoB,MAAMhB,GAAMiB,GAAAA,GAAAA,GAAMb,GAAMc,GAAAA,GAAAA,GAAMV,GAAMW,GAAAA,GAAAA,CAAAA;QAC3D3B,EAAE,CAACC,MAAS,GAAA,CAAA,CAAE,GAAGI,GAAAA,GAAMmB,MAAMf,GAAMgB,GAAAA,GAAAA,GAAMZ,GAAMa,GAAAA,GAAAA,GAAMT,GAAMU,GAAAA,GAAAA,CAAAA;QAC3D3B,EAAE,CAACC,MAAS,GAAA,CAAA,CAAE,GAAGK,GAAAA,GAAMkB,MAAMd,GAAMe,GAAAA,GAAAA,GAAMX,GAAMY,GAAAA,GAAAA,GAAMR,GAAMS,GAAAA,GAAAA,CAAAA;QAC3D3B,EAAE,CAACC,MAAS,GAAA,CAAA,CAAE,GAAGM,GAAAA,GAAMiB,MAAMb,GAAMc,GAAAA,GAAAA,GAAMV,GAAMW,GAAAA,GAAAA,GAAMP,GAAMQ,GAAAA,GAAAA,CAAAA;QAE3D3B,EAAE,CAACC,MAAS,GAAA,CAAA,CAAE,GAAGG,GAAAA,GAAMwB,MAAMpB,GAAMqB,GAAAA,GAAAA,GAAMjB,GAAMkB,GAAAA,GAAAA,GAAMd,GAAMe,GAAAA,GAAAA,CAAAA;QAC3D/B,EAAE,CAACC,MAAS,GAAA,CAAA,CAAE,GAAGI,GAAAA,GAAMuB,MAAMnB,GAAMoB,GAAAA,GAAAA,GAAMhB,GAAMiB,GAAAA,GAAAA,GAAMb,GAAMc,GAAAA,GAAAA,CAAAA;QAC3D/B,EAAE,CAACC,MAAS,GAAA,EAAA,CAAG,GAAGK,GAAAA,GAAMsB,MAAMlB,GAAMmB,GAAAA,GAAAA,GAAMf,GAAMgB,GAAAA,GAAAA,GAAMZ,GAAMa,GAAAA,GAAAA,CAAAA;QAC5D/B,EAAE,CAACC,MAAS,GAAA,EAAA,CAAG,GAAGM,GAAAA,GAAMqB,MAAMjB,GAAMkB,GAAAA,GAAAA,GAAMd,GAAMe,GAAAA,GAAAA,GAAMX,GAAMY,GAAAA,GAAAA,CAAAA;QAE5D/B,EAAE,CAACC,MAAS,GAAA,EAAA,CAAG,GAAGG,GAAAA,GAAM4B,MAAMxB,GAAMyB,GAAAA,GAAAA,GAAMrB,GAAMsB,GAAAA,GAAAA,GAAMlB,GAAMmB,GAAAA,GAAAA,CAAAA;QAC5DnC,EAAE,CAACC,MAAS,GAAA,EAAA,CAAG,GAAGI,GAAAA,GAAM2B,MAAMvB,GAAMwB,GAAAA,GAAAA,GAAMpB,GAAMqB,GAAAA,GAAAA,GAAMjB,GAAMkB,GAAAA,GAAAA,CAAAA;QAC5DnC,EAAE,CAACC,MAAS,GAAA,EAAA,CAAG,GAAGK,GAAAA,GAAM0B,MAAMtB,GAAMuB,GAAAA,GAAAA,GAAMnB,GAAMoB,GAAAA,GAAAA,GAAMhB,GAAMiB,GAAAA,GAAAA,CAAAA;QAC5DnC,EAAE,CAACC,MAAS,GAAA,EAAA,CAAG,GAAGM,GAAAA,GAAMyB,MAAMrB,GAAMsB,GAAAA,GAAAA,GAAMlB,GAAMmB,GAAAA,GAAAA,GAAMf,GAAMgB,GAAAA,GAAAA,CAAAA;AAC9D,KAAA,CAAA;AAEA;;;;;;MA9HWpE,MAqIJqE,WAWN,GAXD,SAAOA,WAAYpd,CAAAA,MAAc,EAAE0F,IAAY,EAAA;AAC7C,QAAA,IAAM2X,OAAU,GAAA,IAAI,CAACC,aAAa,CAAC5X,IAAAA,CAAAA,CAAAA;AAEnC,QAAA,IAAI6X,MAASvd,GAAAA,MAAAA,CAAAA;AACb,QAAA,IAAImF,KAAQ,GAAA,CAAA,CAAA;QACZ,IAAMpC,MAAAA,GAASsa,QAAQta,MAAM,CAAA;QAE7B,MAAOwa,MAAAA,IAAU,IAAQpY,IAAAA,KAAAA,GAAQpC,MAAQ,CAAA;AACvCwa,YAAAA,MAAAA,GAASA,MAAM,CAACF,OAAO,CAAClY,QAAQ,CAAC,CAAA;AACnC,SAAA;QACA,OAAOA,KAAAA,IAASA,KAASpC,IAAAA,MAAAA,GAASwa,MAASlb,GAAAA,SAAAA,CAAAA;AAC7C,KAAA,CAAA;AAEA;;;;;AAKC,MACD,KAxJW0W,CAwJJyE,UA+EN,GA/ED,SAAOA,UAAAA,CAAcC,CAAM,EAAEC,IAAY,EAAEC,EAAU,EAAEC,WAAqB,EAAA;AAC1E,QAAA,MAAO,IAAM,CAAA;;YAEX,IAAID,EAAAA,GAAKD,QAAQ,EAAI,EAAA;AACnB,gBAAA,IAAI,CAACG,cAAc,CAACJ,CAAAA,EAAGC,MAAMC,EAAIC,EAAAA,WAAAA,CAAAA,CAAAA;AACjC,gBAAA,OAAA;AACF,aAAA;YACA,IAAME,WAAAA,GAAc,IAACJ,GAAOC,EAAO,IAAA,CAAA,CAAA;;YAEnC,IAAIpO,EAAAA,GAAKkO,CAAC,CAACC,IAAK,CAAA,CAAA;AAChB,YAAA,IAAIlO,EAAKiO,GAAAA,CAAC,CAACE,EAAAA,GAAK,CAAE,CAAA,CAAA;YAClB,IAAII,EAAAA,GAAKN,CAAC,CAACK,WAAY,CAAA,CAAA;YACvB,IAAME,GAAAA,GAAMJ,YAAYrO,EAAIC,EAAAA,EAAAA,CAAAA,CAAAA;AAC5B,YAAA,IAAIwO,MAAM,CAAG,EAAA;;AAEX,gBAAA,IAAMC,GAAM1O,GAAAA,EAAAA,CAAAA;gBACZA,EAAKC,GAAAA,EAAAA,CAAAA;gBACLA,EAAKyO,GAAAA,GAAAA,CAAAA;AACP,aAAA;YACA,IAAMC,GAAAA,GAAMN,YAAYrO,EAAIwO,EAAAA,EAAAA,CAAAA,CAAAA;AAC5B,YAAA,IAAIG,OAAO,CAAG,EAAA;;AAEZ,gBAAA,IAAMD,IAAM1O,GAAAA,EAAAA,CAAAA;gBACZA,EAAKwO,GAAAA,EAAAA,CAAAA;gBACLA,EAAKvO,GAAAA,EAAAA,CAAAA;gBACLA,EAAKyO,GAAAA,IAAAA,CAAAA;aACA,MAAA;;gBAEL,IAAME,GAAAA,GAAMP,YAAYpO,EAAIuO,EAAAA,EAAAA,CAAAA,CAAAA;AAC5B,gBAAA,IAAII,MAAM,CAAG,EAAA;;AAEX,oBAAA,IAAMF,IAAMzO,GAAAA,EAAAA,CAAAA;oBACZA,EAAKuO,GAAAA,EAAAA,CAAAA;oBACLA,EAAKE,GAAAA,IAAAA,CAAAA;AACP,iBAAA;AACF,aAAA;;YAEAR,CAAC,CAACC,KAAK,GAAGnO,EAAAA,CAAAA;YACVkO,CAAC,CAACE,EAAK,GAAA,CAAA,CAAE,GAAGI,EAAAA,CAAAA;AACZ,YAAA,IAAMK,KAAQ5O,GAAAA,EAAAA,CAAAA;YACd,IAAI6O,OAAAA,GAAUX,IAAO,GAAA,CAAA,CAAA;YACrB,IAAIY,UAAAA,GAAaX,EAAK,GAAA,CAAA,CAAA;AACtBF,YAAAA,CAAC,CAACK,WAAAA,CAAY,GAAGL,CAAC,CAACY,OAAQ,CAAA,CAAA;YAC3BZ,CAAC,CAACY,QAAQ,GAAGD,KAAAA,CAAAA;;;AAIbG,YAAAA,SAAAA,EAAW,IAAK,IAAIpb,CAAAA,GAAIkb,UAAU,CAAGlb,EAAAA,CAAAA,GAAImb,YAAYnb,CAAK,EAAA,CAAA;gBACxD,IAAIqb,OAAAA,GAAUf,CAAC,CAACta,CAAE,CAAA,CAAA;gBAClB,IAAIsb,KAAAA,GAAQb,YAAYY,OAASJ,EAAAA,KAAAA,CAAAA,CAAAA;AACjC,gBAAA,IAAIK,QAAQ,CAAG,EAAA;AACbhB,oBAAAA,CAAC,CAACta,CAAAA,CAAE,GAAGsa,CAAC,CAACY,OAAQ,CAAA,CAAA;oBACjBZ,CAAC,CAACY,QAAQ,GAAGG,OAAAA,CAAAA;AACbH,oBAAAA,OAAAA,EAAAA,CAAAA;iBACK,MAAA,IAAII,QAAQ,CAAG,EAAA;oBACpB,GAAG;AACDH,wBAAAA,UAAAA,EAAAA,CAAAA;wBACA,IAAIA,UAAAA,IAAcnb,GAAG,MAAMob,SAAAA,CAAAA;wBAC3B,IAAMG,QAAAA,GAAWjB,CAAC,CAACa,UAAW,CAAA,CAAA;AAC9BG,wBAAAA,KAAAA,GAAQb,YAAYc,QAAUN,EAAAA,KAAAA,CAAAA,CAAAA;AAChC,qBAAA,OAASK,QAAQ,CAAG,EAAA;AACpBhB,oBAAAA,CAAC,CAACta,CAAAA,CAAE,GAAGsa,CAAC,CAACa,UAAW,CAAA,CAAA;oBACpBb,CAAC,CAACa,WAAW,GAAGE,OAAAA,CAAAA;AAChB,oBAAA,IAAIC,QAAQ,CAAG,EAAA;wBACbD,OAAUf,GAAAA,CAAC,CAACta,CAAE,CAAA,CAAA;AACdsa,wBAAAA,CAAC,CAACta,CAAAA,CAAE,GAAGsa,CAAC,CAACY,OAAQ,CAAA,CAAA;wBACjBZ,CAAC,CAACY,QAAQ,GAAGG,OAAAA,CAAAA;AACbH,wBAAAA,OAAAA,EAAAA,CAAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;YACA,IAAIV,EAAAA,GAAKW,UAAaD,GAAAA,OAAAA,GAAUX,IAAM,EAAA;AACpC,gBAAA,IAAI,CAACF,UAAU,CAACC,CAAAA,EAAGa,YAAYX,EAAIC,EAAAA,WAAAA,CAAAA,CAAAA;gBACnCD,EAAKU,GAAAA,OAAAA,CAAAA;aACA,MAAA;AACL,gBAAA,IAAI,CAACb,UAAU,CAACC,CAAAA,EAAGC,MAAMW,OAAST,EAAAA,WAAAA,CAAAA,CAAAA;gBAClCF,IAAOY,GAAAA,UAAAA,CAAAA;AACT,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AAvOWvF,IAAAA,KAAAA,CAyOIuE,aAed,GAfD,SAAeA,aAAAA,CAAcqB,MAAM,EAAA;AACjC,QAAA,IAAMC,SAAS,EAAE,CAAA;AACjB,QAAA,IAAID,MAAOhP,CAAAA,UAAU,CAAC,CAAA,CAAA,KAAOkP,eAAe,EAAA;AAC1CD,YAAAA,MAAAA,CAAO3Z,IAAI,CAAC,EAAA,CAAA,CAAA;AACd,SAAA;AACA0Z,QAAAA,MAAAA,CAAOG,OAAO,CAACC,YAAAA,EAAY,SAACC,KAAAA,EAAOC,YAAYC,KAAOC,EAAAA,SAAAA,EAAAA;AACpD,YAAA,IAAIxH,GAAMqH,GAAAA,KAAAA,CAAAA;AACV,YAAA,IAAIE,KAAO,EAAA;gBACTvH,GAAMwH,GAAAA,SAAAA,CAAUL,OAAO,CAACM,cAAc,EAAA,IAAA,CAAA,CAAA;AACxC,aAAA,MAAO,IAAIH,UAAY,EAAA;AACrBtH,gBAAAA,GAAAA,GAAMsH,WAAWI,IAAI,EAAA,CAAA;AACvB,aAAA;AACAT,YAAAA,MAAAA,CAAO3Z,IAAI,CAAC0S,GAAAA,CAAAA,CAAAA;AACd,SAAA,CAAA,CAAA;QACA,OAAOiH,MAAAA,CAAAA;AACT,KAAA,CAAA;IAxPW7F,KA0PI8E,CAAAA,cAed,GAfD,SAAeA,cAAkBJ,CAAAA,CAAM,EAAEC,IAAY,EAAEC,EAAU,EAAEC,WAAqB,EAAA;AACtF,QAAA,IAAK,IAAIza,CAAIua,GAAAA,IAAAA,GAAO,CAAGva,EAAAA,CAAAA,GAAIwa,IAAIxa,CAAK,EAAA,CAAA;AAClC,YAAA,IAAIoQ,IAAAA,KAAAA,CAAAA,CAAAA;YACJ,IAAMiL,OAAAA,GAAUf,CAAC,CAACta,CAAE,CAAA,CAAA;AACpB,YAAA,IAAKoQ,CAAIpQ,GAAAA,CAAAA,GAAI,CAAGoQ,EAAAA,CAAAA,IAAKmK,MAAMnK,CAAK,EAAA,CAAA;gBAC9B,IAAM0K,GAAAA,GAAMR,CAAC,CAAClK,CAAE,CAAA,CAAA;gBAChB,IAAMkL,KAAAA,GAAQb,YAAYK,GAAKO,EAAAA,OAAAA,CAAAA,CAAAA;AAC/B,gBAAA,IAAIC,QAAQ,CAAG,EAAA;oBACbhB,CAAC,CAAClK,CAAI,GAAA,CAAA,CAAE,GAAG0K,GAAAA,CAAAA;iBACN,MAAA;AACL,oBAAA,MAAA;AACF,iBAAA;AACF,aAAA;YACAR,CAAC,CAAClK,CAAI,GAAA,CAAA,CAAE,GAAGiL,OAAAA,CAAAA;AACb,SAAA;AACF,KAAA,CAAA;AAzQWzF,IAAAA,OAAAA,KAAAA,CAAAA;AA0QZ,CAAA,GAAA;AAED,IAAM8F,eAAAA,GAAgB,GAAIlP,CAAAA,UAAU,CAAC,CAAA,CAAA,CAAA;AACrC,IAAMyP,cAAe,GAAA,UAAA,CAAA;AACrB,IAAML,YAAAA,GAAaO;AAEjB,WAAA,GACE;AAEA,QAAA;AAEA,eAAA,GACA;AAEA,wCACA,GAAA,MAAA,GACA;AAEA,oCACF,EAAA,GAAA,CAAA;;AC5RF;;IAGO,IAAMC,iBAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,iBAAAA,GAAAA;yBACG,IAAA,CACdC,eAA6B,EAAE,CAAA;AAEvBC,QAAAA,IAAAA,CAAAA,UAAAA,GAA0D,EAAE,CAAA;;AAJzDF,IAAAA,IAAAA,MAAAA,GAAAA,iBAAAA,CAAAA,SAAAA,CAAAA;AAMX;;;AAGC,MACDG,MAAAA,CAAAA,UAIC,GAJDA,SAAAA,WAAiCte,IAAiB,EAAA;AAChD,QAAA,IAAMue,OAAO,IAAIve,IAAAA,EAAAA,CAAAA;QACjB,IAAI,CAACwe,OAAO,CAACD,IAAAA,CAAAA,CAAAA;QACb,OAAOA,IAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;AAGC,MACDC,MAAAA,CAAAA,OAGC,GAHDA,SAAAA,QAAQD,IAAgB,EAAA;AACtB,QAAA,IAAI,CAACH,YAAY,CAACva,IAAI,CAAC0a,IAAAA,CAAAA,CAAAA;AACvBA,QAAAA,IAAAA,CAAKE,aAAa,CAAC5a,IAAI,CAAC,IAAI,CAAA,CAAA;AAC9B,KAAA,CAAA;AAEA;;;AAGC,MACD6a,MAAAA,CAAAA,UAKC,GALDA,SAAAA,WAAWH,IAAgB,EAAA;AACzB,QAAA,IAAMI,UAAUhH,KAAMC,CAAAA,eAAe,CAAC,IAAI,CAACwG,YAAY,EAAEG,IAAAA,CAAAA,CAAAA;AACzD,QAAA,IAAII,OAAS,EAAA;AACXhH,YAAAA,KAAAA,CAAMC,eAAe,CAAC2G,IAAKE,CAAAA,aAAa,EAAE,IAAI,CAAA,CAAA;AAChD,SAAA;AACF,KAAA,CAAA;AAEA;;;AAGC,MACDG,MAAAA,CAAAA,WAEC,GAFDA,SAAAA,YAAYC,QAAiD,EAAA;AAC3D,QAAA,IAAI,CAACR,UAAU,CAACxa,IAAI,CAACgb,QAAAA,CAAAA,CAAAA;AACvB,KAAA,CAAA;AAEA;;;AAGC,MACDC,MAAAA,CAAAA,cAEC,GAFDA,SAAAA,eAAeD,QAAiD,EAAA;AAC9DlH,QAAAA,KAAAA,CAAMC,eAAe,CAAC,IAAI,CAACyG,UAAU,EAAEQ,QAAAA,CAAAA,CAAAA;AACzC,KAAA,CAAA;AAEA;;;;AAIC,MACDE,OAAAA,QAUC,GAVDA,SAAAA,QAAS/e,CAAAA,IAAa,EAAEgf,KAAc,EAAA;QACpC,IAAMC,WAAAA,GAAc,IAAI,CAACb,YAAY,CAAA;QACrC,IAAK,IAAIrc,IAAIkd,WAAYtd,CAAAA,MAAM,GAAG,CAAGI,EAAAA,CAAAA,IAAK,GAAGA,CAAK,EAAA,CAAA;AAChDkd,YAAAA,WAAW,CAACld,CAAAA,CAAE,CAACgd,QAAQ,CAAC/e,IAAMgf,EAAAA,KAAAA,CAAAA,CAAAA;AAChC,SAAA;QAEA,IAAME,SAAAA,GAAY,IAAI,CAACb,UAAU,CAAA;QACjC,IAAK,IAAItc,KAAImd,SAAUvd,CAAAA,MAAM,GAAG,CAAGI,EAAAA,EAAAA,IAAK,GAAGA,EAAK,EAAA,CAAA;YAC9Cmd,SAAS,CAACnd,EAAE,CAAA,CAAC/B,IAAMgf,EAAAA,KAAAA,CAAAA,CAAAA;AACrB,SAAA;AACF,KAAA,CAAA;AAnEWb,IAAAA,OAAAA,iBAAAA,CAAAA;AAoEZ,CAAA,EAAA;;AC1ED;;IAGO,IAAKgB,iBAAAA,iBAAAA,SAAAA,iBAAAA,EAAAA;;;;;;;;;;AAAAA,IAAAA,OAAAA,iBAAAA,CAAAA;AAUX,CAAA,CAAA,EAAA,CAAA;;ACLD;;IAGO,IAAMC,MAAN,iBAAA,SAAA,aAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,MAAAA,EAAAA,aAAAA,CAAAA,CAAAA;aAAAA,MA2LT9c,CAAAA,MAAc,EACd/D,OAAyB,EACzB8gB,MAAmB,EACnBrC,KAAqB,EACrBsC,MAAsB,EACtBnJ,IAAmB,EAAA;AAJnB5X,QAAAA,IAAAA,oBAAAA,OAAqB,GAAA,IAAA,CAAA;AACrB8gB,QAAAA,IAAAA,mBAAAA,MAAe,GAAA,IAAA,CAAA;AACfrC,QAAAA,IAAAA,kBAAAA,KAAiB,GAAA,IAAA,CAAA;AACjBsC,QAAAA,IAAAA,mBAAAA,MAAkB,GAAA,IAAA,CAAA;AAClBnJ,QAAAA,IAAAA,iBAAAA,IAAe,GAAA,IAAA,CAAA;;gBAEf,aAAM7T,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,CAAAA,IAAAA,IAAAA,EAAAA,KAAAA,CA9LAid,kBAA0B,CAC1BC,EAAAA,KAAAA,CAAAA,gBAAAA,GAA2B,SAC3BC,YAAuBxe,GAAAA,SAAAA,EAAAA,KAAAA,CACvBye,aAAwBze,GAAAA,SAAAA,EAAAA,KAAAA,CAExB0e,UAAwB,GAAA;YAAC,IAAI5R,kBAAAA,EAAAA;YAAW,IAAIA,kBAAAA,EAAAA;YAAW,IAAIA,kBAAAA,EAAAA;YAAW,IAAIA,kBAAAA,EAAAA;AAAU,SAAA,EAAA,KAAA,CACpF6R,IAAkB,GAAA;YAAC,IAAI7R,kBAAAA,EAAAA;YAAW,IAAIA,kBAAAA,EAAAA;YAAW,IAAIA,kBAAAA,EAAAA;YAAW,IAAIA,kBAAAA,EAAAA;SAAU,EAC9E8R,KAAAA,CAAAA,OAAAA,GAAuB,IAAIC,sBAE3BC,EAAAA,EAAAA,KAAAA,CAAAA,QAAAA,GAAsB,YACtBC,aAAyB,GAAA,KAAA,EAAA,KAAA,CACzBC,eAAqB,IAAIC,eAAAA,CAAK,GAAG,CAAG,EAAA,CAAA,EAAG,UACvCC,kBAA8B,GAAA,IAAI9hB,mBAAQ,CAAG,EAAA,CAAA,EAAG,GAAG,CAEnD+hB,CAAAA,EAAAA,KAAAA,CAAAA,OAAAA,GAAgB,IAAIF,eAAK,CAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,CAAA,EAAA,KAAA,CAClCG,SAAkB,IAAItS,kBAAAA,CAAQ,KAAK,GACnCuS,CAAAA,EAAAA,KAAAA,CAAAA,OAAAA,GAAmB,IAAIjiB,kBAAQ,CAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,CAAA,EAAA,KAAA,CAExCkiB,uCAIM,KAAA,CACdC,qBAAwC,IAAIrC,iBAAAA,EAAAA,CAAAA;AAwK1C,QAAA,KAAA,CAAK4B,QAAQ,GAAGxhB,OAAAA,CAAAA;AAChB,QAAA,KAAA,CAAKkiB,eAAe,GAAG,KAAKA,CAAAA,eAAe,CAAC5a,IAAI,CAAA,KAAA,CAAA,CAAA;AAChD,QAAA,KAAA,CAAK6a,cAAc,GAAG,KAAKA,CAAAA,cAAc,CAAC7a,IAAI,CAAA,KAAA,CAAA,CAAA;AAC9C,QAAA,KAAA,CAAK8a,eAAe,GAAG,KAAKA,CAAAA,eAAe,CAAC9a,IAAI,CAAA,KAAA,CAAA,CAAA;;AAEhD,QAAA,KAAA,CAAKua,OAAO,CAACQ,eAAe,GAAG,MAAKH,eAAe,CAAA;;AAEnD,QAAA,KAAA,CAAKJ,MAAM,CAACO,eAAe,GAAG,MAAKF,cAAc,CAAA;;AAEjD,QAAA,KAAA,CAAKJ,OAAO,CAACM,eAAe,GAAG,MAAKD,eAAe,CAAA;AACnDtB,QAAAA,MAAAA,IAAU,KAAKe,CAAAA,OAAO,CAACne,QAAQ,CAACod,MAAAA,CAAAA,CAAAA;AAChCrC,QAAAA,KAAAA,IAAS,KAAKqD,CAAAA,MAAM,CAACpe,QAAQ,CAAC+a,KAAAA,CAAAA,CAAAA;AAC9BsC,QAAAA,MAAAA,IAAU,KAAKgB,CAAAA,OAAO,CAACre,QAAQ,CAACqd,MAAAA,CAAAA,CAAAA;AAChC,QAAA,KAAA,CAAKnJ,IAAI,GAAGA,IAAAA,CAAAA;;;AAhNHiJ,IAAAA,IAAAA,MAAAA,GAAAA,MAAAA,CAAAA,SAAAA,CAAAA;AAmNX;;;MAIAyB,MAAAA,CAAAA,KAMC,GANDA,SAAAA,KAAAA,GAAAA;QACE,IAAMC,WAAAA,GAAc,IAxNX1B,MAAAA,CAwNsB,IAAI,CAAC1c,OAAO,EAAE,IAAI,CAACqd,QAAQ,EAAE,IAAI,CAACK,OAAO,EAAE,IAAI,CAACC,MAAM,EAAE,IAAI,CAACC,OAAO,EAAE,IAAI,CAACnK,IAAI,CAAA,CAAA;AAC9G2K,QAAAA,WAAAA,CAAYd,aAAa,GAAG,IAAI,CAACA,aAAa,CAAA;AAC9Cc,QAAAA,WAAAA,CAAYb,YAAY,CAAChe,QAAQ,CAAC,IAAI,CAACge,YAAY,CAAA,CAAA;AACnDa,QAAAA,WAAAA,CAAYX,kBAAkB,CAACle,QAAQ,CAAC,IAAI,CAACke,kBAAkB,CAAA,CAAA;QAC/D,OAAOW,WAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;MAGAC,MAAAA,CAAAA,aAGC,GAHDA,SAAAA,aAAAA,GAAAA;AACE,QAAA,IAAI,CAACR,gBAAgB,GAAkC,CAAA,IAAA,IAAI,CAACS,gBAAgB,EAAA,CAAA;QAC5E,OAAO,IAAI,CAACrB,UAAU,CAAA;AACxB,KAAA,CAAA;AAEA;;MAGAsB,MAAAA,CAAAA,OAGC,GAHDA,SAAAA,OAAAA,GAAAA;AACE,QAAA,IAAI,CAACV,gBAAgB,GAA4B,CAAA,IAAA,IAAI,CAACW,UAAU,EAAA,CAAA;QAChE,OAAO,IAAI,CAACtB,IAAI,CAAA;AAClB,KAAA,CAAA;AAEA;;MAGAuB,MAAAA,CAAAA,UAGC,GAHDA,SAAAA,UAAAA,GAAAA;AACE,QAAA,IAAI,CAACZ,gBAAgB,GAAkC,CAAA,IAAA,IAAI,CAACS,gBAAgB,EAAA,CAAA;QAC5E,OAAO,IAAI,CAACnB,OAAO,CAAA;AACrB,KAAA,CAAA;AAEA;;AAEC,MACD,MAAS1b,CAAAA,cAGR,GAHD,SAASA,eAAeC,KAAa,EAAA;AAEnC,QAAA,IAAA,YAAA,CAAA;AADA,QAAA,aAAA,CAAA,SAAA,CAAMD,cAAD,CAAgBC,IAAAA,CAAAA,IAAAA,EAAAA,KAAAA,CAAAA,CAAAA;AACrB,QAAA,CAAA,YAAA,GAAA,IAAI,CAACmT,MAAM,KAAX,IAAA,GAAA,KAAA,CAAA,GAAA,YAAA,CAAapT,cAAc,CAACC,KAAAA,CAAAA,CAAAA;AAC9B,KAAA,CAAA;AAEA;;MAGA,MAAA,CAAmBxB,UAgBlB,GAhBD,SAAmBA,UAAAA,GAAAA;AACjB,QAAA,IAAI,CAACwe,qBAAqB,CAACjC,iBAAAA,CAAkBxc,OAAO,CAAA,CAAA;AACpD,QAAA,aAAA,CAAA,SAAA,CAAMC,UAAD,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;AACL,QAAA,IAAI,CAAC+c,UAAU,CAAChe,MAAM,GAAG,CAAA,CAAA;QACzB,IAAI,CAACge,UAAU,GAAG,IAAA,CAAA;AAClB,QAAA,IAAI,CAACC,IAAI,CAACje,MAAM,GAAG,CAAA,CAAA;QACnB,IAAI,CAACie,IAAI,GAAG,IAAA,CAAA;QACZ,IAAI,CAACK,YAAY,GAAG,IAAA,CAAA;QACpB,IAAI,CAACE,kBAAkB,GAAG,IAAA,CAAA;QAC1B,IAAI,CAACC,OAAO,GAAG,IAAA,CAAA;QACf,IAAI,CAACC,MAAM,GAAG,IAAA,CAAA;QACd,IAAI,CAACC,OAAO,GAAG,IAAA,CAAA;QACf,IAAI,CAACT,OAAO,GAAG,IAAA,CAAA;QACf,IAAI,CAACtI,MAAM,GAAG,IAAA,CAAA;QACd,IAAI,CAACwI,QAAQ,GAAG,IAAA,CAAA;QAChB,IAAI,CAACS,kBAAkB,GAAG,IAAA,CAAA;AAC5B,KAAA,CAAA;IAEA,MAAQa,CAAAA,eAgBP,GAhBD,SAAQA,eAAAA,GAAAA;QACN,IAAI,IAAI,CAACtB,QAAQ,EAAE;AACjB,YAAA,IAAgE,KAAA,GAAA,IAAI,EAA5DA,QAAAA,GAAwD,KAAxDA,CAAAA,QAAAA,EAAUE,YAA8C,GAAA,KAAA,CAA9CA,YAAcE,EAAAA,kBAAAA,GAAgC,KAAhCA,CAAAA,kBAAAA,EAAoBC,UAAY,KAAZA,CAAAA,OAAAA,CAAAA;YACpD,IAAMkB,uBAAAA,GAA0B,GAAMpQ,GAAAA,MAAAA,CAAOC,cAAc,CAAA;YAC3D,IAAI,CAACoO,eAAe,GAChBQ,SAASvX,KAAK,GAAGyX,aAAazX,KAAK,IAAK,CAAI2X,GAAAA,kBAAAA,CAAmB7U,CAAC,GAAG6U,kBAAAA,CAAmBoB,CAAC,CAADA,GACxFnB,OAAQ5X,CAAAA,KAAK,GACb8Y,uBAAAA,CAAAA;YACF,IAAI,CAAC9B,gBAAgB,GACjBO,SAAStX,MAAM,GAAGwX,aAAaxX,MAAM,IAAK,CAAI0X,GAAAA,kBAAAA,CAAmB5U,CAAC,GAAG4U,kBAAAA,CAAmB/S,CAAC,CAADA,GAC1FgT,OAAQ3X,CAAAA,MAAM,GACd6Y,uBAAAA,CAAAA;SACG,MAAA;AACL,YAAA,IAAI,CAAC/B,eAAe,GAAG,IAAI,CAACC,gBAAgB,GAAG,CAAA,CAAA;AACjD,SAAA;QACA,IAAI,CAACe,gBAAgB,IAAI,CAAA,CAAA,CAAA;AAC3B,KAAA,CAAA;IAEA,MAAQS,CAAAA,gBA0BP,GA1BD,SAAQA,gBAAAA,GAAAA;QACN,IAAMQ,KAAAA,GAAQ,IAAI,CAACrB,kBAAkB,CAAA;AACrC,QAAA,IAAoE,gBAAA,IAAI,CAACC,OAAO,EAArEqB,UAAyD,aAA5DnW,CAAAA,CAAAA,EAAYC,OAAgD,GAAA,aAAA,CAAhDA,GAAY/C,OAAOkZ,GAA6B,cAApClZ,KAAgBC,EAAQkZ,UAAY,aAApBlZ,CAAAA,MAAAA,CAAAA;QAChD,IAAMmZ,WAAAA,GAAc,IAAIH,OAAUC,GAAAA,OAAAA,CAAAA;QAClC,IAAMG,YAAAA,GAAe,IAAIC,OAAUH,GAAAA,OAAAA,CAAAA;QACnC,IAAMlI,IAAAA,GAAO5R,KAAKI,GAAG,CAACuZ,MAAMlW,CAAC,GAAGmW,SAAS,CAAKC,CAAAA,GAAAA,OAAAA,CAAAA;QAC9C,IAAM7M,MAAAA,GAAShN,KAAKI,GAAG,CAACuZ,MAAMpU,CAAC,GAAG0U,SAAS,CAAKH,CAAAA,GAAAA,OAAAA,CAAAA;QAChD,IAAMI,KAAAA,GAAQ,IAAIla,IAAKI,CAAAA,GAAG,CAACuZ,KAAMD,CAAAA,CAAC,GAAGK,WAAAA,EAAa,CAAKF,CAAAA,GAAAA,OAAAA,CAAAA;QACvD,IAAM9M,GAAAA,GAAM,IAAI/M,IAAKI,CAAAA,GAAG,CAACuZ,KAAMjW,CAAAA,CAAC,GAAGsW,YAAAA,EAAc,CAAKF,CAAAA,GAAAA,OAAAA,CAAAA;;;;;;;QAQtD,IAAMK,SAAAA,GAAY,IAAI,CAACrC,UAAU,CAAA;AACjCqC,QAAAA,SAAS,CAAC,CAAA,CAAE,CAACliB,GAAG,CAAC2Z,IAAM5E,EAAAA,MAAAA,CAAAA,CAAAA;AACvBmN,QAAAA,SAAS,CAAC,CAAA,CAAE,CAACliB,GAAG,CAACiiB,KAAOlN,EAAAA,MAAAA,CAAAA,CAAAA;AACxBmN,QAAAA,SAAS,CAAC,CAAA,CAAE,CAACliB,GAAG,CAAC2Z,IAAM7E,EAAAA,GAAAA,CAAAA,CAAAA;AACvBoN,QAAAA,SAAS,CAAC,CAAA,CAAE,CAACliB,GAAG,CAACiiB,KAAOnN,EAAAA,GAAAA,CAAAA,CAAAA;QAExB,IAAqB,aAAA,GAAA,IAAI,CAACiL,OAAO,EAAzBoC,GAAa,GAAA,aAAA,CAAbA,GAAKha,EAAAA,GAAAA,GAAQ,aAARA,CAAAA,GAAAA,CAAAA;QACbga,GAAIniB,CAAAA,GAAG,CAAC2Z,IAAAA,EAAM5E,MAAQ,EAAA,CAAA,CAAA,CAAA;QACtB5M,GAAInI,CAAAA,GAAG,CAACiiB,KAAAA,EAAOnN,GAAK,EAAA,CAAA,CAAA,CAAA;QACpB,IAAI,CAAC2L,gBAAgB,IAAI,CAAA,CAAA,CAAA;AAC3B,KAAA,CAAA;IAEA,MAAQW,CAAAA,UA8BP,GA9BD,SAAQA,UAAAA,GAAAA;QACN,IAA4D,KAAA,GAAA,IAAI,EAAlDgB,KAA8C,KAApDtC,CAAAA,IAAAA,EAAUO,iBAAoBgC,GAAsB,KAA1ChC,CAAAA,kBAAAA,CAAAA;AAClB,QAAA,IAAoE,gBAAA,IAAI,CAACC,OAAO,EAArEqB,UAAyD,aAA5DnW,CAAAA,CAAAA,EAAYC,OAAgD,GAAA,aAAA,CAAhDA,GAAY/C,OAAOkZ,GAA6B,cAApClZ,KAAgBC,EAAQkZ,UAAY,aAApBlZ,CAAAA,MAAAA,CAAAA;QAChD,IAAMmZ,WAAAA,GAAc,IAAIH,OAAUC,GAAAA,OAAAA,CAAAA;QAClC,IAAMG,YAAAA,GAAe,IAAIC,OAAUH,GAAAA,OAAAA,CAAAA;AACnC,QAAA,IAAwF,qBAAA,IAAI,CAAC1B,YAAY,EAA9FmC,eAA6E,kBAAhF9W,CAAAA,CAAAA,EAAiBC,YAA+D,GAAA,kBAAA,CAA/DA,GAAiB/C,YAAO6Z,GAAuC,mBAA9C7Z,KAAqBC,EAAQ6Z,eAAiB,kBAAzB7Z,CAAAA,MAAAA,CAAAA;AAC/D,QAAA,IAAQ6C,UAAGiX,GAA8DJ,iBAAjE7W,CAAAA,CAAAA,EAAeC,SAAkD4W,GAAAA,iBAAAA,CAAlD5W,CAAcgW,EAAGiB,WAAiCL,GAAAA,iBAAAA,CAApCZ,CAAgBnU,EAAGqV,eAAiBN,iBAApB/U,CAAAA,CAAAA,CAAAA;AACrD,QAAA,IAAMsV,SAAYL,GAAAA,YAAAA,IAAgB,CAAA,GAAIE,aAAaC,WAAU,CAAA,CAAA;AAC7D,QAAA,IAAMG,UAAaL,GAAAA,YAAAA,IAAgB,CAAA,GAAIM,YAAYH,YAAW,CAAA,CAAA;;AAE9D,QAAA,IAAMhJ,OAAO5R,IAAKI,CAAAA,GAAG,CAACwZ,OAAUc,GAAAA,UAAAA,EAAY,KAAKG,SAAYN,GAAAA,YAAAA,CAAAA;AAC7D,QAAA,IAAMxN,MAAM/M,IAAKI,CAAAA,GAAG,CAAC4Z,YAAee,GAAAA,SAAAA,EAAW,KAAKD,UAAaE,GAAAA,YAAAA,CAAAA;QACjE,IAAMd,KAAAA,GAAQM,eAAeD,YAAeva,GAAAA,IAAAA,CAAKI,GAAG,CAAC2Z,WAAAA,GAAcY,aAAa,CAAKE,CAAAA,GAAAA,SAAAA,CAAAA;QACrF,IAAM7N,MAAAA,GAASyN,eAAeO,YAAehb,GAAAA,IAAAA,CAAKI,GAAG,CAAC6Z,OAAAA,GAAUW,cAAc,CAAKE,CAAAA,GAAAA,UAAAA,CAAAA;AACnF,QAAA,IAAyE,gBAAA,IAAI,CAACrC,OAAO,EAA1EwC,aAA8D,aAAjExX,CAAAA,CAAAA,EAAeC,YAAkD,GAAA,aAAA,CAAlDA,GAAiBgW,WAAGwB,GAA8B,cAAjCxB,CAAgBnU,EAAG4V,YAAc,aAAjB5V,CAAAA,CAAAA,CAAAA;;AAExD8U,QAAAA,EAAE,CAAC,CAAA,CAAE,CAACpiB,GAAG,CAAC2Z,IAAM5E,EAAAA,MAAAA,CAAAA,CAAAA;;QAEhBqN,EAAE,CAAC,EAAE,CAACpiB,GAAG,CACP,CAAC2hB,OAAUc,GAAAA,UAAAA,GAAaO,UAAapB,GAAAA,OAAM,IAAKgB,SAAYN,GAAAA,YAAAA,EAC5DE,eAAeO,YAAe,GAACf,CAAAA,OAAUW,GAAAA,YAAAA,GAAeQ,YAAetB,GAAAA,OAAM,IAAKgB,UAAAA,CAAAA,CAAAA;;QAGpFT,EAAE,CAAC,EAAE,CAACpiB,GAAG,CACPuiB,YAAeD,GAAAA,YAAAA,GAAe,CAACR,WAAcY,GAAAA,WAAAA,GAAcO,cAAcrB,OAAM,IAAKgB,WACpF,CAACb,eAAee,SAAYI,GAAAA,SAAAA,GAAYrB,OAAM,IAAKgB,UAAaE,GAAAA,YAAAA,CAAAA,CAAAA;;AAGlEX,QAAAA,EAAE,CAAC,CAAA,CAAE,CAACpiB,GAAG,CAACiiB,KAAOnN,EAAAA,GAAAA,CAAAA,CAAAA;QACjB,IAAI,CAAC2L,gBAAgB,IAAI,CAAA,CAAA,CAAA;AAC3B,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQa,qBAiBP,GAjBD,SAAQA,qBAAAA,CAAsBphB,IAAuB,EAAA;QACnD,OAAQA,IAAAA;AACN,YAAA,KAAKmf,kBAAkB5gB,OAAO;AAC5B,gBAAA,IAAI,CAACgiB,gBAAgB,IAAA,CAAA,CAAA;AACrB,gBAAA,MAAA;AACF,YAAA,KAAKpB,kBAAkBgD,iBAAiB,CAAA;AACxC,YAAA,KAAKhD,kBAAkBE,MAAM;AAC3B,gBAAA,IAAI,CAACkB,gBAAgB,IAAA,CAAA,CAAA;AACrB,gBAAA,MAAA;AACF,YAAA,KAAKpB,kBAAkB+D,WAAW;gBAChC,IAAI,CAAC3C,gBAAgB,IAAI4C,CAAAA,GAAAA,CAAAA,CAAAA;AACzB,gBAAA,MAAA;AACF,YAAA,KAAKhE,kBAAkBG,MAAM;AAC3B,gBAAA,IAAI,CAACiB,gBAAgB,IAAA,CAAA,CAAA;AACrB,gBAAA,MAAA;AACJ,SAAA;AACA,QAAA,IAAI,CAACC,kBAAkB,CAACzB,QAAQ,CAAC/e,IAAAA,CAAAA,CAAAA;AACnC,KAAA,CAAA;IAEA,MAAQygB,CAAAA,eAaP,GAbD,SAAQA,eAAAA,GAAAA;AACN,QAAA,IAA4B,KAAA,GAAA,IAAI,EAAfpB,SAAW,KAApBe,CAAAA,OAAAA,CAAAA;;AAERf,QAAAA,MAAAA,CAAOuB,eAAe,GAAG,IAAA,CAAA;AACzB,QAAA,IAAMtV,IAAI8X,mBAASC,CAAAA,KAAK,CAAChE,MAAO/T,CAAAA,CAAC,EAAE,CAAG,EAAA,CAAA,CAAA,CAAA;AACtC,QAAA,IAAMC,IAAI6X,mBAASC,CAAAA,KAAK,CAAChE,MAAO9T,CAAAA,CAAC,EAAE,CAAG,EAAA,CAAA,CAAA,CAAA;QACtC8T,MAAOvf,CAAAA,GAAG,CAACwL,CAAGC,EAAAA,CAAAA,EAAG6X,oBAASC,KAAK,CAAChE,OAAO7W,KAAK,EAAE,GAAG,CAAI8C,GAAAA,CAAAA,CAAAA,EAAI8X,oBAASC,KAAK,CAAChE,OAAO5W,MAAM,EAAE,GAAG,CAAI8C,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAC9F,QAAA,IAAI,CAAC6V,qBAAqB,CAACjC,iBAAAA,CAAkBE,MAAM,CAAA,CAAA;QACnD,IAAI,IAAI,CAACI,YAAY,KAAKxe,aAAa,IAAI,CAACye,aAAa,KAAKze,SAAW,EAAA;AACvE,YAAA,IAAI,CAACmgB,qBAAqB,CAACjC,iBAAAA,CAAkBvX,IAAI,CAAA,CAAA;AACnD,SAAA;;AAEAyX,QAAAA,MAAAA,CAAOuB,eAAe,GAAG,IAAI,CAACH,eAAe,CAAA;AAC/C,KAAA,CAAA;IAEA,MAAQC,CAAAA,cAEP,GAFD,SAAQA,cAAAA,GAAAA;AACN,QAAA,IAAI,CAACU,qBAAqB,CAACjC,iBAAAA,CAAkBnC,KAAK,CAAA,CAAA;AACpD,KAAA,CAAA;IAEA,MAAQ2D,CAAAA,eAUP,GAVD,SAAQA,eAAAA,GAAAA;AACN,QAAA,IAA4B,KAAA,GAAA,IAAI,EAAfrB,SAAW,KAApBgB,CAAAA,OAAAA,CAAAA;;AAERhB,QAAAA,MAAAA,CAAOsB,eAAe,GAAG,IAAA,CAAA;AACzB,QAAA,IAAMtV,IAAI8X,mBAASC,CAAAA,KAAK,CAAC/D,MAAOhU,CAAAA,CAAC,EAAE,CAAG,EAAA,CAAA,CAAA,CAAA;AACtC,QAAA,IAAMC,IAAI6X,mBAASC,CAAAA,KAAK,CAAC/D,MAAO/T,CAAAA,CAAC,EAAE,CAAG,EAAA,CAAA,CAAA,CAAA;QACtC+T,MAAOxf,CAAAA,GAAG,CAACwL,CAAGC,EAAAA,CAAAA,EAAG6X,oBAASC,KAAK,CAAC/D,OAAOiC,CAAC,EAAE,GAAG,CAAIjW,GAAAA,CAAAA,CAAAA,EAAI8X,oBAASC,KAAK,CAAC/D,OAAOlS,CAAC,EAAE,GAAG,CAAI7B,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AACrF,QAAA,IAAI,CAAC6V,qBAAqB,CAACjC,iBAAAA,CAAkBG,MAAM,CAAA,CAAA;;AAEnDA,QAAAA,MAAAA,CAAOsB,eAAe,GAAG,IAAI,CAACD,eAAe,CAAA;AAC/C,KAAA,CAAA;AAlZWvB,IAAAA,aAAAA,CAAAA,MAAAA,EAAAA;;YAgCP7gB,GAAAA,EAAAA,SAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACwhB,QAAQ,CAAA;AACtB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAY3b,KAAgB,EAAA;AAC1B,gBAAA,IAAI,IAAI,CAAC2b,QAAQ,KAAK3b,KAAO,EAAA;oBAC3B,IAAI,CAAC2b,QAAQ,GAAG3b,KAAAA,CAAAA;AAChB,oBAAA,IAAI,CAACgd,qBAAqB,CAACjC,iBAAAA,CAAkB5gB,OAAO,CAAA,CAAA;oBACpD,IAAI,IAAI,CAACkhB,YAAY,KAAKxe,aAAa,IAAI,CAACye,aAAa,KAAKze,SAAW,EAAA;AACvE,wBAAA,IAAI,CAACmgB,qBAAqB,CAACjC,iBAAAA,CAAkBvX,IAAI,CAAA,CAAA;AACnD,qBAAA;AACF,iBAAA;AACF,aAAA;;;YASIY,GAAAA,EAAAA,OAAAA;;;;;;;MAAJ,SAAA,GAAA,GAAA;AACE,gBAAA,IAAI,IAAI,CAACiX,YAAY,KAAKxe,SAAW,EAAA;oBACnC,OAAO,IAAI,CAACwe,YAAY,CAAA;iBACnB,MAAA;AACL,oBAAA,IAAI,CAACc,gBAAgB,GAAsC,CAAA,IAAA,IAAI,CAACc,eAAe,EAAA,CAAA;oBAC/E,OAAO,IAAI,CAAC9B,eAAe,CAAA;AAC7B,iBAAA;AACF,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAUnb,KAAa,EAAA;AACrB,gBAAA,IAAI,IAAI,CAACqb,YAAY,KAAKrb,KAAO,EAAA;oBAC/B,IAAI,CAACqb,YAAY,GAAGrb,KAAAA,CAAAA;AACpB,oBAAA,IAAI,CAACgd,qBAAqB,CAACjC,iBAAAA,CAAkBvX,IAAI,CAAA,CAAA;AACnD,iBAAA;AACF,aAAA;;;YASIa,GAAAA,EAAAA,QAAAA;;;;;;;MAAJ,SAAA,GAAA,GAAA;AACE,gBAAA,IAAI,IAAI,CAACiX,aAAa,KAAKze,SAAW,EAAA;oBACpC,OAAO,IAAI,CAACye,aAAa,CAAA;iBACpB,MAAA;AACL,oBAAA,IAAI,CAACa,gBAAgB,GAAsC,CAAA,IAAA,IAAI,CAACc,eAAe,EAAA,CAAA;oBAC/E,OAAO,IAAI,CAAC7B,gBAAgB,CAAA;AAC9B,iBAAA;AACF,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAWpb,KAAa,EAAA;AACtB,gBAAA,IAAI,IAAI,CAACsb,aAAa,KAAKtb,KAAO,EAAA;oBAChC,IAAI,CAACsb,aAAa,GAAGtb,KAAAA,CAAAA;AACrB,oBAAA,IAAI,CAACgd,qBAAqB,CAACjC,iBAAAA,CAAkBvX,IAAI,CAAA,CAAA;AACnD,iBAAA;AACF,aAAA;;;YAKI0b,GAAAA,EAAAA,cAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACtD,aAAa,CAAA;AAC3B,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAiB5b,KAAc,EAAA;AAC7B,gBAAA,IAAI,IAAI,CAAC4b,aAAa,IAAI5b,KAAO,EAAA;oBAC/B,IAAI,CAAC4b,aAAa,GAAG5b,KAAAA,CAAAA;AACvB,iBAAA;AACF,aAAA;;;YAKI8e,GAAAA,EAAAA,aAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACjD,YAAY,CAAA;AAC1B,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAgB7b,KAAW,EAAA;AACzB,gBAAA,IAAMkH,IAAI8X,mBAASC,CAAAA,KAAK,CAACjf,KAAMkH,CAAAA,CAAC,EAAE,CAAG,EAAA,CAAA,CAAA,CAAA;AACrC,gBAAA,IAAMC,IAAI6X,mBAASC,CAAAA,KAAK,CAACjf,KAAMmH,CAAAA,CAAC,EAAE,CAAG,EAAA,CAAA,CAAA,CAAA;gBACrC,IAAI,CAAC0U,YAAY,CAACngB,GAAG,CAACwL,CAAGC,EAAAA,CAAAA,EAAG6X,mBAASC,CAAAA,KAAK,CAACjf,KAAAA,CAAMoE,KAAK,EAAE,CAAA,EAAG,CAAI8C,GAAAA,CAAAA,CAAAA,EAAI8X,mBAASC,CAAAA,KAAK,CAACjf,KAAMqE,CAAAA,MAAM,EAAE,CAAA,EAAG,CAAI8C,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AACvG,gBAAA,IAAI,CAAC6V,qBAAqB,CAACjC,iBAAAA,CAAkB+D,WAAW,CAAA,CAAA;gBACxD,IAAI,IAAI,CAACzD,YAAY,KAAKxe,aAAa,IAAI,CAACye,aAAa,KAAKze,SAAW,EAAA;AACvE,oBAAA,IAAI,CAACmgB,qBAAqB,CAACjC,iBAAAA,CAAkBvX,IAAI,CAAA,CAAA;AACnD,iBAAA;AACF,aAAA;;;YAKIua,GAAAA,EAAAA,mBAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAAChC,kBAAkB,CAAA;AAChC,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAsB/b,KAAc,EAAA;AAClC,gBAAA,IAAMkH,IAAI8X,mBAASC,CAAAA,KAAK,CAACjf,KAAMkH,CAAAA,CAAC,EAAE,CAAG,EAAA,CAAA,CAAA,CAAA;AACrC,gBAAA,IAAMC,IAAI6X,mBAASC,CAAAA,KAAK,CAACjf,KAAMmH,CAAAA,CAAC,EAAE,CAAG,EAAA,CAAA,CAAA,CAAA;gBACrC,IAAI,CAAC4U,kBAAkB,CAACrgB,GAAG,CAACwL,CAAGC,EAAAA,CAAAA,EAAG6X,mBAASC,CAAAA,KAAK,CAACjf,KAAAA,CAAMmd,CAAC,EAAE,CAAA,EAAG,CAAIjW,GAAAA,CAAAA,CAAAA,EAAI8X,mBAASC,CAAAA,KAAK,CAACjf,KAAMgJ,CAAAA,CAAC,EAAE,CAAA,EAAG,CAAI7B,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AACpG,gBAAA,IAAI,CAAC6V,qBAAqB,CAACjC,iBAAAA,CAAkBgD,iBAAiB,CAAA,CAAA;gBAC9D,IAAI,IAAI,CAAC1C,YAAY,KAAKxe,aAAa,IAAI,CAACye,aAAa,KAAKze,SAAW,EAAA;AACvE,oBAAA,IAAI,CAACmgB,qBAAqB,CAACjC,iBAAAA,CAAkBvX,IAAI,CAAA,CAAA;AACnD,iBAAA;AACF,aAAA;;;YAKIyX,GAAAA,EAAAA,QAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACe,OAAO,CAAA;AACrB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAWhc,KAAW,EAAA;gBACpB,IAAI,CAACgc,OAAO,KAAKhc,KAAAA,IAAS,IAAI,CAACgc,OAAO,CAACne,QAAQ,CAACmC,KAAAA,CAAAA,CAAAA;AAClD,aAAA;;;YAMI4Y,GAAAA,EAAAA,OAAAA;;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACqD,MAAM,CAAA;AACpB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAUjc,KAAc,EAAA;gBACtB,IAAI,CAACic,MAAM,KAAKjc,KAAAA,IAAS,IAAI,CAACic,MAAM,CAACpe,QAAQ,CAACmC,KAAAA,CAAAA,CAAAA;AAChD,aAAA;;;YASIkb,GAAAA,EAAAA,QAAAA;;;;;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACgB,OAAO,CAAA;AACrB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAWlc,KAAc,EAAA;gBACvB,IAAI,CAACkc,OAAO,KAAKlc,KAAAA,IAAS,IAAI,CAACkc,OAAO,CAACre,QAAQ,CAACmC,KAAAA,CAAAA,CAAAA;AAClD,aAAA;;;AA/KWgb,IAAAA,OAAAA,MAAAA,CAAAA;EAAenc,aAmZ3B;;AC9ZD;;;IAIO,IAAKsgB,WAAAA,iBAAAA,SAAAA,WAAAA,EAAAA;uBACM,WAAA,CAAA,WAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA,CAAA;uBAEA,WAAA,CAAA,WAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA,GAAA,KAAA,CAAA;4BAEK,WAAA,CAAA,WAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,GAAA,aAAA,CAAA;2CAEe,WAAA,CAAA,WAAA,CAAA,qBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,qBAAA,CAAA;2BAEhB,WAAA,CAAA,WAAA,CAAA,kBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,kBAAA,CAAA;2CAEgB,WAAA,CAAA,WAAA,CAAA,0BAAA,CAAA,GAAA,CAAA,CAAA,GAAA,0BAAA,CAAA;2BAEhB,WAAA,CAAA,WAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,GAAA,aAAA,CAAA;2CAEgB,WAAA,CAAA,WAAA,CAAA,qBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,qBAAA,CAAA;2BAEhB,WAAA,CAAA,WAAA,CAAA,kBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,kBAAA,CAAA;2CAEgB,WAAA,CAAA,WAAA,CAAA,0BAAA,CAAA,GAAA,CAAA,CAAA,GAAA,0BAAA,CAAA;kEAEuB,WAAA,CAAA,WAAA,CAAA,qBAAA,CAAA,GAAA,EAAA,CAAA,GAAA,qBAAA,CAAA;2BAEvC,WAAA,CAAA,WAAA,CAAA,YAAA,CAAA,GAAA,EAAA,CAAA,GAAA,YAAA,CAAA;2CAEgB,WAAA,CAAA,WAAA,CAAA,oBAAA,CAAA,GAAA,EAAA,CAAA,GAAA,oBAAA,CAAA;AAzB1BA,IAAAA,OAAAA,WAAAA,CAAAA;AA2BX,CAAA,CAAA,EAAA;;AC/BD;;;IAIO,IAAKC,cAAAA,iBAAAA,SAAAA,cAAAA,EAAAA;sBACK,cAAA,CAAA,cAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA,GAAA,KAAA,CAAA;sBAEA,cAAA,CAAA,cAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA,CAAA;sBAEA,cAAA,CAAA,cAAA,CAAA,iBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,iBAAA,CAAA;8CAEwB,cAAA,CAAA,cAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA,GAAA,KAAA,CAAA;8CAEA,cAAA,CAAA,cAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA,GAAA,KAAA,CAAA;AAT7BA,IAAAA,OAAAA,cAAAA,CAAAA;AAWX,CAAA,CAAA,EAAA;;ACfD;;;IAIO,IAAKC,cAAAA,iBAAAA,SAAAA,cAAAA,EAAAA;wCACuB,cAAA,CAAA,cAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA,CAAA;qCAEH,cAAA,CAAA,cAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA,GAAA,KAAA,CAAA;uCAEE,cAAA,CAAA,cAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA,CAAA;sCAED,cAAA,CAAA,cAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA,CAAA;uCAEC,cAAA,CAAA,cAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA,CAAA;iCAEN,cAAA,CAAA,cAAA,CAAA,KAAA,CAAA,GAAA,EAAA,CAAA,GAAA,KAAA,CAAA;AAXhBA,IAAAA,OAAAA,cAAAA,CAAAA;AAaX,CAAA,CAAA,EAAA;;ACjBD;;;IAIO,IAAKC,eAAAA,iBAAAA,SAAAA,eAAAA,EAAAA;uBACM,eAAA,CAAA,eAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA,CAAA;mFAE4D,eAAA,CAAA,eAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA,CAAA;6EAEN,eAAA,CAAA,eAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA,CAAA;+FAEkB,eAAA,CAAA,eAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA,CAAA;sFAET,eAAA,CAAA,eAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA;sFAEA,eAAA,CAAA,eAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA,CAAA;kGAEY,eAAA,CAAA,eAAA,CAAA,cAAA,CAAA,GAAA,CAAA,CAAA,GAAA,cAAA,CAAA;wBAE1E,eAAA,CAAA,eAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;AAfPA,IAAAA,OAAAA,eAAAA,CAAAA;AAiBX,CAAA,CAAA,EAAA;;ACrBD;;;IAIO,IAAKC,QAAAA,iBAAAA,SAAAA,QAAAA,EAAAA;4BACW,QAAA,CAAA,QAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA,GAAA,KAAA,CAAA;+CAEmB,QAAA,CAAA,QAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA,CAAA;8CAED,QAAA,CAAA,QAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA,CAAA;AAL7BA,IAAAA,OAAAA,QAAAA,CAAAA;AAOX,CAAA,CAAA,EAAA;;ACXM,IAAA,qBAAKC,iBAAAA,SAAAA,qBAAAA,EAAAA;iDACgC,qBAAA,CAAA,qBAAA,CAAA,oBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,oBAAA,CAAA;+DAEc,qBAAA,CAAA,qBAAA,CAAA,gCAAA,CAAA,GAAA,CAAA,CAAA,GAAA,gCAAA,CAAA;+DAEA,qBAAA,CAAA,qBAAA,CAAA,gCAAA,CAAA,GAAA,CAAA,CAAA,GAAA,gCAAA,CAAA;mEAEI,qBAAA,CAAA,qBAAA,CAAA,mCAAA,CAAA,GAAA,CAAA,CAAA,GAAA,mCAAA,CAAA;mEAEA,qBAAA,CAAA,qBAAA,CAAA,mCAAA,CAAA,GAAA,CAAA,CAAA,GAAA,mCAAA,CAAA;wEAEK,qBAAA,CAAA,qBAAA,CAAA,wCAAA,CAAA,GAAA,CAAA,CAAA,GAAA,wCAAA,CAAA;wEAEA,qBAAA,CAAA,qBAAA,CAAA,wCAAA,CAAA,GAAA,CAAA,CAAA,GAAA,wCAAA,CAAA;0DAEd,qBAAA,CAAA,qBAAA,CAAA,2BAAA,CAAA,GAAA,CAAA,CAAA,GAAA,2BAAA,CAAA;wCAElB,qBAAA,CAAA,qBAAA,CAAA,sBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,sBAAA,CAAA;8CAEM,qBAAA,CAAA,qBAAA,CAAA,2BAAA,CAAA,GAAA,CAAA,CAAA,GAAA,2BAAA,CAAA;oCAGV,qBAAA,CAAA,qBAAA,CAAA,mBAAA,CAAA,GAAA,EAAA,CAAA,GAAA,mBAAA,CAAA;0CAEM,qBAAA,CAAA,qBAAA,CAAA,wBAAA,CAAA,GAAA,EAAA,CAAA,GAAA,wBAAA,CAAA;6CAEG,qBAAA,CAAA,qBAAA,CAAA,2BAAA,CAAA,GAAA,EAAA,CAAA,GAAA,2BAAA,CAAA;sCAGP,qBAAA,CAAA,qBAAA,CAAA,qBAAA,CAAA,GAAA,EAAA,CAAA,GAAA,qBAAA,CAAA;8CAEQ,qBAAA,CAAA,qBAAA,CAAA,4BAAA,CAAA,GAAA,EAAA,CAAA,GAAA,4BAAA,CAAA;wCAEN,qBAAA,CAAA,qBAAA,CAAA,kBAAA,CAAA,GAAA,EAAA,CAAA,GAAA,kBAAA,CAAA;yCAEC,qBAAA,CAAA,qBAAA,CAAA,uBAAA,CAAA,GAAA,EAAA,CAAA,GAAA,uBAAA,CAAA;qDAEY,qBAAA,CAAA,qBAAA,CAAA,kCAAA,CAAA,GAAA,EAAA,CAAA,GAAA,kCAAA,CAAA;oDAED,qBAAA,CAAA,qBAAA,CAAA,iCAAA,CAAA,GAAA,EAAA,CAAA,GAAA,iCAAA,CAAA;mDAED,qBAAA,CAAA,qBAAA,CAAA,gCAAA,CAAA,GAAA,EAAA,CAAA,GAAA,gCAAA,CAAA;kDAED,qBAAA,CAAA,qBAAA,CAAA,+BAAA,CAAA,GAAA,EAAA,CAAA,GAAA,+BAAA,CAAA;mDAEC,qBAAA,CAAA,qBAAA,CAAA,gCAAA,CAAA,GAAA,EAAA,CAAA,GAAA,gCAAA,CAAA;kDAED,qBAAA,CAAA,qBAAA,CAAA,+BAAA,CAAA,GAAA,EAAA,CAAA,GAAA,+BAAA,CAAA;qDAEG,qBAAA,CAAA,qBAAA,CAAA,iCAAA,CAAA,GAAA,EAAA,CAAA,GAAA,iCAAA,CAAA;oDAED,qBAAA,CAAA,qBAAA,CAAA,gCAAA,CAAA,GAAA,EAAA,CAAA,GAAA,gCAAA,CAAA;uCAGb,qBAAA,CAAA,qBAAA,CAAA,qBAAA,CAAA,GAAA,EAAA,CAAA,GAAA,qBAAA,CAAA;uCAEA,qBAAA,CAAA,qBAAA,CAAA,sBAAA,CAAA,GAAA,EAAA,CAAA,GAAA,sBAAA,CAAA;wCAEC,qBAAA,CAAA,qBAAA,CAAA,iCAAA,CAAA,GAAA,EAAA,CAAA,GAAA,iCAAA,CAAA;kCAGN,qBAAA,CAAA,qBAAA,CAAA,iBAAA,CAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,CAAA;AA7DjBA,IAAAA,OAAAA,qBAAAA,CAAAA;AA+DX,CAAA,CAAA,EAAA;;AC/DD;;IAGO,IAAKC,eAAAA,iBAAAA,SAAAA,eAAAA,EAAAA;yBACQ,eAAA,CAAA,eAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;uCAEc,eAAA,CAAA,eAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA,CAAA;+GAEwE,eAAA,CAAA,eAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,GAAA,aAAA,CAAA;AAL9FA,IAAAA,OAAAA,eAAAA,CAAAA;AAOX,CAAA,CAAA,EAAA;;ACVD;;IAGO,IAAKC,kBAAAA,iBAAAA,SAAAA,kBAAAA,EAAAA;uBACM,kBAAA,CAAA,kBAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA,CAAA;qBAEF,kBAAA,CAAA,kBAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA,GAAA,KAAA,CAAA;yBAEI,kBAAA,CAAA,kBAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA;yBAEA,kBAAA,CAAA,kBAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA;yBAEA,kBAAA,CAAA,kBAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA;wBAED,kBAAA,CAAA,kBAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;uBAED,kBAAA,CAAA,kBAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA,CAAA;yBAEE,kBAAA,CAAA,kBAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA;6BAEI,kBAAA,CAAA,kBAAA,CAAA,YAAA,CAAA,GAAA,CAAA,CAAA,GAAA,YAAA,CAAA;2BAEF,kBAAA,CAAA,kBAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA,CAAA;+BAEI,kBAAA,CAAA,kBAAA,CAAA,cAAA,CAAA,GAAA,EAAA,CAAA,GAAA,cAAA,CAAA;AArBdA,IAAAA,OAAAA,kBAAAA,CAAAA;AAuBX,CAAA,CAAA,EAAA;;AC1BD;;;IAIO,IAAKC,gBAAAA,iBAAAA,SAAAA,gBAAAA,EAAAA;oCACmB,gBAAA,CAAA,gBAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA,CAAA;+CAEW,gBAAA,CAAA,gBAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA,CAAA;iEAEkB,gBAAA,CAAA,gBAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA;4GAE2C,gBAAA,CAAA,gBAAA,CAAA,mBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,mBAAA,CAAA;qEAEvC,gBAAA,CAAA,gBAAA,CAAA,mBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,mBAAA,CAAA;6DAER,gBAAA,CAAA,gBAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;uJAE0F,gBAAA,CAAA,gBAAA,CAAA,eAAA,CAAA,GAAA,CAAA,CAAA,GAAA,eAAA,CAAA;8KAEuB,gBAAA,CAAA,gBAAA,CAAA,eAAA,CAAA,GAAA,CAAA,CAAA,GAAA,eAAA,CAAA;AAf7JA,IAAAA,OAAAA,gBAAAA,CAAAA;AAiBX,CAAA,CAAA,EAAA;;ACrBM,IAAA,oBAAKC,iBAAAA,SAAAA,oBAAAA,EAAAA;;;AAAAA,IAAAA,OAAAA,oBAAAA,CAAAA;AAGX,CAAA,CAAA,EAAA;;ACHD,SAAS,oBAAoB,CAAC,GAAG,EAAE,GAAG,EAAE;AACxC,IAAI,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,GAAG,GAAG,CAAC,MAAM,EAAE,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC;AAC1D;AACA,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAC1E;AACA,IAAI,OAAO,IAAI,CAAC;AAChB;;ACJA,SAAS,8BAA8B,CAAC,CAAC,EAAE,MAAM,EAAE;AACnD,IAAI,IAAI,CAAC,CAAC,EAAE,OAAO;AACnB,IAAI,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE,OAAO,oBAAoB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;AACtE;AACA,IAAI,IAAI,CAAC,GAAG,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAC3D;AACA,IAAI,IAAI,CAAC,KAAK,QAAQ,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC;AAChE,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,KAAK,EAAE,OAAO,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACzD,IAAI,IAAI,CAAC,KAAK,WAAW,IAAI,0CAA0C,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,oBAAoB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;AACxH;;ACTA,SAAS,oCAAoC,CAAC,CAAC,EAAE,cAAc,EAAE;AACjE,IAAI,IAAI,EAAE,GAAG,OAAO,MAAM,KAAK,WAAW,IAAI,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,YAAY,CAAC,CAAC;AACpF;AACA,IAAI,IAAI,EAAE,EAAE,OAAO,CAAC,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACnD;AACA,IAAI,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,EAAE,GAAG,8BAA8B,CAAC,CAAC,CAAC,CAAC,IAAI,cAAc,IAAI,CAAC,IAAI,OAAO,CAAC,CAAC,MAAM,KAAK,QAAQ,EAAE;AAC7H,QAAQ,IAAI,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC;AACvB;AACA,QAAQ,IAAI,CAAC,GAAG,CAAC,CAAC;AAClB;AACA,QAAQ,OAAO,WAAW;AAC1B,YAAY,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;AACrD;AACA,YAAY,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;AAClD,SAAS,CAAC;AACV,KAAK;AACL;AACA,IAAI,MAAM,IAAI,SAAS,CAAC,uIAAuI,CAAC,CAAC;AACjK;;AClBA;;IAGO,IAAMC,WAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,WAAAA,CA6ES9N,IAAY,EAAE/R,KAAa,EAAE8f,SAAiB,EAAEC,SAAiB,EAAA;QACnF,IAAI,CAAChO,IAAI,GAAGA,IAAAA,CAAAA;QACZ,IAAI,CAACiO,UAAU,GAAGF,SAAAA,CAAAA;QAClB,IAAI,CAACG,UAAU,GAAGF,SAAAA,CAAAA;QAClB,IAAI,CAAC/f,KAAK,GAAGA,KAAAA,CAAAA;QAEb,IAAMkgB,cAAAA,GAAiBL,WAnFdA,CAmF0BM,eAAe,CAAA;QAClD,IAAIC,MAAAA,GAASF,cAAc,CAACnO,IAAK,CAAA,CAAA;AACjC,QAAA,IAAImO,cAAc,CAACnO,IAAK,CAAA,KAAKlV,SAAW,EAAA;AACtCqjB,YAAAA,cAAc,CAACnO,IAAK,CAAA,GAAGqO,MAASP,GAtFzBA,YAsFqCQ,iBAAiB,EAAA,CAAA;AAC/D,SAAA;QACA,IAAI,CAACC,OAAO,GAAGF,MAAAA,CAAAA;;AAxFNP,IAAAA,WAAAA,CAyBJU,SAmBN,GAnBD,SAAOA,SAAUxO,CAAAA,IAAY,EAAE/R,KAAc,EAAA;AAC3C,QAAA,IAAMmS,GAAMnS,GAAAA,KAAAA,GAAQ+R,IAAQ,GAAA,GAAA,GAAK/R,KAAQ+R,GAAAA,IAAAA,CAAAA;AACzC,QAAA,IAAIyO,KAAQX,GA3BHA,WA2BeY,CAAAA,SAAS,CAACtO,GAAI,CAAA,CAAA;AACtC,QAAA,IAAI,CAACqO,KAAO,EAAA;YACV,IAAME,OAAAA,GAAUb,WA7BTA,CA6BqBc,aAAa,CAAA;YACzC,IAAMC,OAAAA,GAAUf,WA9BTA,CA8BqBgB,aAAa,CAAA;AACzC,YAAA,IAAMlhB,KAAQ8D,GAAAA,IAAAA,CAAKC,KAAK,CAACkd,OAAU,GAAA,EAAA,CAAA,CAAA;AACnC,YAAA,IAAME,MAAMF,OAAU,GAAA,EAAA,CAAA;AAEtBJ,YAAAA,KAAAA,GAAQ,IAlCDX,WAAAA,CAkCiB9N,IAAM/R,EAAAA,KAAAA,EAAOL,OAAO,CAAKmhB,IAAAA,GAAAA,CAAAA,CAAAA;YAlC1CjB,WAmCKY,CAAAA,SAAS,CAACtO,GAAAA,CAAI,GAAGqO,KAAAA,CAAAA;YAC7B,IAAI7gB,KAAAA,IAAS+gB,OAAQnjB,CAAAA,MAAM,EAAE;AAC3BmjB,gBAAAA,OAAAA,CAAQnjB,MAAM,EAAA,CAAA;AACdmjB,gBAAAA,OAAO,CAAC/gB,KAAAA,CAAM,GAAG,IAAIlC,KAAmB,CAAA,EAAA,CAAA,CAAA;AAC1C,aAAA;AACAijB,YAAAA,OAAO,CAAC/gB,KAAAA,CAAM,CAACmhB,GAAAA,CAAI,GAAGN,KAAAA,CAAAA;AAxCfX,YAAAA,WAAAA,CAyCKgB,aAAa,EAAA,CAAA;AAC3B,SAAA;QACA,OAAOL,KAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;MA9CWX,YAiDJkB,kBAcN,GAdD,SAAOA,kBAAmBC,CAAAA,MAA6B,EAAEpZ,GAAkB,EAAA;QACzE,IAAM8Y,OAAAA,GAAUb,WAlDPA,CAkDmBc,aAAa,CAAA;QACzC,IAAMM,IAAAA,GAAOD,OAAOE,KAAK,CAAA;AACzBtZ,QAAAA,GAAAA,CAAIrK,MAAM,GAAG,CAAA,CAAA;QACb,IAAK,IAAII,IAAI,CAAG0B,EAAAA,CAAAA,GAAI2hB,OAAOhZ,OAAO,EAAErK,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;YAC9C,IAAMwjB,UAAAA,GAAaT,OAAO,CAAC/iB,CAAE,CAAA,CAAA;YAC7B,IAAMyjB,OAAAA,GAAUH,IAAI,CAACtjB,CAAE,CAAA,CAAA;AACvB,YAAA,IAAMqQ,CAAIoT,GAAAA,OAAAA,GAAU,CAAI,GAAA,EAAA,GAAK3d,IAAKC,CAAAA,KAAK,CAACD,IAAAA,CAAKE,IAAI,CAACyd,OAAY,CAAA,CAAA,GAAA,CAAA,CAAA;AAC9D,YAAA,IAAK,IAAIrT,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAIC,GAAGD,CAAK,EAAA,CAAA;gBAC1B,IAAIqT,OAAAA,GAAW,KAAKrT,CAAI,EAAA;AACtBnG,oBAAAA,GAAAA,CAAInI,IAAI,CAAC0hB,UAAU,CAACpT,CAAE,CAAA,CAAA,CAAA;AACxB,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AA/DW8R,IAAAA,OAAAA,WAAAA,CAAAA;AA0FZ,CAAA,GAAA;AAzFC,iBADWA,WAEJc,CAAAA,aAAAA,GAAiC,EAAE,CAAA;AAC1C,iBAHWd,WAAAA,CAIJM,eAA0C3kB,GAAAA,MAAAA,CAAOC,MAAM,CAAC,IAAA,CAAA,CAAA;AAJpDokB,WAAAA,CAMIQ,iBAA4B,GAAA,CAAA,CAAA;AANhCR,WAAAA,CAOIgB,aAAwB,GAAA,CAAA,CAAA;AAP5BhB,WAQIY,CAAAA,SAAAA,GAAyCjlB,MAAOC,CAAAA,MAAM,CAAC,IAAA,CAAA;;ACXxE;;;IAIO,IAAM4lB,qBAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,qBAAAA,GAAAA;yBAkCG,IAAA,CACdH,QAAkB,EAAE,CAAA;AACpB,8BACAlZ,OAAkB,GAAA,CAAA,CAAA;;AArCPqZ,IAAAA,IAAAA,MAAAA,GAAAA,qBAAAA,CAAAA,SAAAA,CAAAA;AAuCX;;;AAGC,MACDtf,MAAAA,CAAAA,MAeC,GAfDA,SAAAA,OAAOye,KAAkB,EAAA;QACvB,IAAM7gB,KAAAA,GAAQ6gB,MAAMR,UAAU,CAAA;AAC9B,QAAA,IAAMxc,OAAO7D,KAAQ,GAAA,CAAA,CAAA;QACrB,IAAMshB,IAAAA,GAAO,IAAI,CAACC,KAAK,CAAA;AACvB,QAAA,IAAII,SAAY,GAAA,IAAI,CAACtZ,OAAO;AAC5B,QAAA,IAAIsZ,YAAY9d,IAAM,EAAA;YACpByd,IAAK1jB,CAAAA,MAAM,GAAGiG,IAASyd,KAAAA,KAAK1jB,MAAM,GAAGiG,IAAG,CAAA,CAAA;YACxC,MAAO8d,SAAAA,GAAY3hB,OAAO2hB,SAAa,EAAA,CAAA;gBACrCL,IAAI,CAACK,UAAU,GAAG,CAAA,CAAA;AACpB,aAAA;AACAL,YAAAA,IAAI,CAACthB,KAAAA,CAAM,GAAG6gB,KAAAA,CAAMP,UAAU,CAAA;YAC9B,IAAI,CAACjY,OAAO,GAAGxE,IAAAA,CAAAA;SACV,MAAA;AACLyd,YAAAA,IAAI,CAACthB,KAAAA,CAAM,IAAI6gB,KAAAA,CAAMP,UAAU,CAAA;AACjC,SAAA;AACF,KAAA,CAAA;AAEA;;;AAGC,MACDje,MAAAA,CAAAA,OAaC,GAbDA,SAAAA,QAAQwe,KAAkB,EAAA;QACxB,IAAM7gB,KAAAA,GAAQ6gB,MAAMR,UAAU,CAAA;QAC9B,IAAMiB,IAAAA,GAAO,IAAI,CAACC,KAAK,CAAA;AACvB,QAAA,IAAMK,QAAW,GAAA,IAAI,CAACvZ,OAAO,GAAG,CAAA,CAAA;AAChC,QAAA,IAAIrI,QAAQ4hB,QAAU,EAAA;AACpB,YAAA,OAAA;AACF,SAAA;AACA,QAAA,IAAMC,WAAWP,IAAI,CAACthB,MAAM,GAAG,CAAC6gB,MAAMP,UAAU,CAAA;QAChD,IAAItgB,KAAAA,IAAS4hB,QAAYC,IAAAA,QAAAA,KAAa,CAAG,EAAA;AACvC,YAAA,IAAI,CAACxZ,OAAO,EAAA,CAAA;SACP,MAAA;YACLiZ,IAAI,CAACthB,MAAM,GAAG6hB,QAAAA,CAAAA;AAChB,SAAA;AACF,KAAA,CAAA;AAEA;;;AAGC,MACDC,MAAAA,CAAAA,eAoBC,GApBDA,SAAAA,gBAAgBC,eAAsC,EAAA;QACpD,IAAMC,OAAAA,GAAUD,gBAAgBR,KAAK,CAAA;QACrC,IAAMU,OAAAA,GAAUF,gBAAgB1Z,OAAO,CAAA;QACvC,IAAMiZ,IAAAA,GAAO,IAAI,CAACC,KAAK,CAAA;QACvB,IAAMW,QAAAA,GAAW,IAAI,CAAC7Z,OAAO,CAAA;AAC7B,QAAA,IAAI6Z,WAAWD,OAAS,EAAA;AACtBX,YAAAA,IAAAA,CAAK1jB,MAAM,GAAGqkB,OAAAA,KAAYX,IAAK1jB,CAAAA,MAAM,GAAGqkB,OAAM,CAAA,CAAA;AAC9C,YAAA,IAAIjkB,CAAI,GAAA,CAAA,CAAA;YACR,MAAOA,CAAAA,GAAIkkB,UAAUlkB,CAAK,EAAA,CAAA;AACxBsjB,gBAAAA,IAAI,CAACtjB,CAAAA,CAAE,IAAIgkB,OAAO,CAAChkB,CAAE,CAAA,CAAA;AACvB,aAAA;YACA,MAAOA,CAAAA,GAAIikB,SAASjkB,CAAK,EAAA,CAAA;AACvBsjB,gBAAAA,IAAI,CAACtjB,CAAAA,CAAE,GAAGgkB,OAAO,CAAChkB,CAAE,CAAA,CAAA;AACtB,aAAA;YACA,IAAI,CAACqK,OAAO,GAAG4Z,OAAAA,CAAAA;SACV,MAAA;AACL,YAAA,IAAK,IAAIjkB,EAAAA,GAAI,CAAGA,EAAAA,EAAAA,GAAIikB,SAASjkB,EAAK,EAAA,CAAA;AAChCsjB,gBAAAA,IAAI,CAACtjB,EAAAA,CAAE,IAAIgkB,OAAO,CAAChkB,EAAE,CAAA,CAAA;AACvB,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AAEA;;;AAGC,MACDmkB,MAAAA,CAAAA,uBAcC,GAdDA,SAAAA,wBAAwBJ,eAAsC,EAAA;QAC5D,IAAMK,UAAAA,GAAaL,gBAAgBR,KAAK,CAAA;QACxC,IAAMD,IAAAA,GAAO,IAAI,CAACC,KAAK,CAAA;AACvB,QAAA,IAAIK,QAAW,GAAA,IAAI,CAACvZ,OAAO,GAAG,CAAA,CAAA;AAC9B,QAAA,IAAIrK,IAAI8F,IAAKoa,CAAAA,GAAG,CAAC6D,eAAgB1Z,CAAAA,OAAO,GAAG,CAAGuZ,EAAAA,QAAAA,CAAAA,CAAAA;QAC9C,MAAO5jB,CAAAA,IAAK,GAAGA,CAAK,EAAA,CAAA;YAClB,IAAM6jB,QAAAA,GAAWP,IAAI,CAACtjB,CAAAA,CAAE,GAAG,CAACokB,UAAU,CAACpkB,CAAE,CAAA,CAAA;YACzC,IAAIA,CAAAA,IAAK4jB,QAAYC,IAAAA,QAAAA,KAAa,CAAG,EAAA;AACnCD,gBAAAA,QAAAA,EAAAA,CAAAA;AACA,gBAAA,IAAI,CAACvZ,OAAO,EAAA,CAAA;aACP,MAAA;gBACLiZ,IAAI,CAACtjB,EAAE,GAAG6jB,QAAAA,CAAAA;AACZ,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AAEA;;;AAGC,MACDQ,MAAAA,CAAAA,sBAWC,GAXDA,SAAAA,uBAAuBN,eAAsC,EAAA;QAC3D,IAAMO,SAAAA,GAAYP,gBAAgBR,KAAK,CAAA;QACvC,IAAMD,IAAAA,GAAO,IAAI,CAACC,KAAK,CAAA;QACvB,IAAK,IAAIvjB,IAAI,IAAI,CAACqK,OAAO,GAAG,CAAA,EAAGrK,CAAK,IAAA,CAAA,EAAGA,CAAK,EAAA,CAAA;AAC1C,YAAA,IAAMqC,QAAQihB,IAAI,CAACtjB,EAAE,GAAGskB,SAAS,CAACtkB,CAAE,CAAA,CAAA;AACpC,YAAA,IAAIqC,SAAS,CAAKrC,IAAAA,CAAAA,IAAK,IAAI,CAACqK,OAAO,GAAG,CAAG,EAAA;AACvC,gBAAA,IAAI,CAACA,OAAO,EAAA,CAAA;aACP,MAAA;gBACLiZ,IAAI,CAACtjB,EAAE,GAAGqC,KAAAA,CAAAA;AACZ,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AAEA;;;AAGC,MACDkiB,MAAAA,CAAAA,QAMC,GANDA,SAAAA,SAAS1B,KAAkB,EAAA;QACzB,IAAM7gB,KAAAA,GAAQ6gB,MAAMR,UAAU,CAAA;AAC9B,QAAA,IAAIrgB,KAAS,IAAA,IAAI,CAACqI,OAAO,EAAE;YACzB,OAAO,KAAA,CAAA;AACT,SAAA;QACA,OAAQ,CAAA,IAAI,CAACkZ,KAAK,CAACvhB,KAAAA,CAAM,GAAG6gB,KAAAA,CAAMP,UAAS,MAAO,CAAA,CAAA;AACpD,KAAA,CAAA;AAEA;;MAGAkC,MAAAA,CAAAA,KAEC,GAFDA,SAAAA,KAAAA,GAAAA;QACE,IAAI,CAACna,OAAO,GAAG,CAAA,CAAA;AACjB,KAAA,CAAA;AA9JA;;;;;MADWqZ,qBAOJI,CAAAA,eAyBN,GAzBD,SAAOA,gBAAgBpM,IAA2B,EAAEsI,KAA4B,EAAE/V,GAA0B,EAAA;QAC1G,IAAMwa,OAAAA,GAAUxa,IAAIsZ,KAAK,CAAA;AACzB,QAAA,IAAImB,OAAiBC,EAAAA,OAAAA,CAAAA;AACrB,QAAA,IAAIC,OAAmBC,EAAAA,OAAAA,CAAAA;AACvB,QAAA,IAAInN,IAAKrN,CAAAA,OAAO,GAAG2V,KAAAA,CAAM3V,OAAO,EAAE;AAChCqa,YAAAA,OAAAA,GAAUhN,KAAKrN,OAAO,CAAA;AACtBsa,YAAAA,OAAAA,GAAU3E,MAAM3V,OAAO,CAAA;AACvBua,YAAAA,OAAAA,GAAUlN,KAAK6L,KAAK,CAAA;AACpBsB,YAAAA,OAAAA,GAAU7E,MAAMuD,KAAK,CAAA;SAChB,MAAA;AACLmB,YAAAA,OAAAA,GAAU1E,MAAM3V,OAAO,CAAA;AACvBsa,YAAAA,OAAAA,GAAUjN,KAAKrN,OAAO,CAAA;AACtBua,YAAAA,OAAAA,GAAU5E,MAAMuD,KAAK,CAAA;AACrBsB,YAAAA,OAAAA,GAAUnN,KAAK6L,KAAK,CAAA;AACtB,SAAA;AAEA,QAAA,IAAIvjB,CAAI,GAAA,CAAA,CAAA;AACRykB,QAAAA,OAAAA,CAAQ7kB,MAAM,GAAG+kB,OAAAA,KAAYF,OAAQ7kB,CAAAA,MAAM,GAAG+kB,OAAM,CAAA,CAAA;QACpD,MAAO3kB,CAAAA,GAAI0kB,SAAS1kB,CAAK,EAAA,CAAA;YACvBykB,OAAO,CAACzkB,EAAE,GAAG4kB,OAAO,CAAC5kB,CAAE,CAAA,GAAG6kB,OAAO,CAAC7kB,CAAE,CAAA,CAAA;AACtC,SAAA;QACA,MAAOA,CAAAA,GAAI2kB,SAAS3kB,CAAK,EAAA,CAAA;AACvBykB,YAAAA,OAAO,CAACzkB,CAAAA,CAAE,GAAG6kB,OAAO,CAAC7kB,CAAE,CAAA,CAAA;AACzB,SAAA;AACAiK,QAAAA,GAAAA,CAAII,OAAO,GAAGsa,OAAAA,CAAAA;AAChB,KAAA,CAAA;AAhCWjB,IAAAA,OAAAA,qBAAAA,CAAAA;AAgKZ,CAAA;;ACtKD,SAAS,QAAQ,GAAG;AACpB,IAAI,QAAQ,GAAG,MAAM,CAAC,MAAM,IAAI,SAAS,MAAM,CAAC,MAAM,EAAE;AACxD,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACnD,YAAY,IAAI,MAAM,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;AACtC,YAAY,KAAK,IAAI,GAAG,IAAI,MAAM,EAAE,IAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;AACrH,SAAS;AACT;AACA,QAAQ,OAAO,MAAM,CAAC;AACtB,KAAK,CAAC;AACN;AACA,IAAI,OAAO,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AAC3C;;ACXA;;IAGO,IAAKoB,aAAAA,iBAAAA,SAAAA,aAAAA,EAAAA;4BACW,aAAA,CAAA,WAAA,CAAA,GAAA,WAAA,CAAA;gCAEI,aAAA,CAAA,cAAA,CAAA,GAAA,cAAA,CAAA;kCAEE,aAAA,CAAA,SAAA,CAAA,GAAA,SAAA,CAAA;AALjBA,IAAAA,OAAAA,aAAAA,CAAAA;AAOX,CAAA,CAAA,EAAA;;ACVD;;IAGO,IAAMC,eAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,eAAAA,GAAAA;aAGHC,OAAmDnnB,GAAAA,MAAAA,CAAOC,MAAM,CAAC,IAAA,CAAA,CAAA;aACjEmnB,WAAsB,GAAA,CAAA,CAAA;;AAJnBF,IAAAA,IAAAA,MAAAA,GAAAA,eAAAA,CAAAA,SAAAA,CAAAA;AAMX;;;;AAIC,MACDG,MAAAA,CAAAA,QAEC,GAFDA,SAAAA,SAASC,KAAa,EAAA;AACpB,QAAA,OAAO,IAAI,CAACH,OAAO,CAACG,MAAM,IAAI,IAAA,CAAA;AAChC,KAAA,CAAA;AAEA;;;MAIAC,MAAAA,CAAAA,UAGC,GAHDA,SAAAA,UAAAA,GAAAA;AACE,QAAA,IAAI,IAAI,CAACH,WAAW,KAAK,CAAA,EAAG,OAAO,EAAE,CAAA;AACrC,QAAA,OAAOpnB,MAAOmZ,CAAAA,IAAI,CAAC,IAAI,CAACgO,OAAO,CAAA,CAAA;AACjC,KAAA,CAAA;AAEA;;;;AAIC,MACDK,MAAAA,CAAAA,aAMC,GANDA,SAAAA,cAAcF,KAAa,EAAA;AACzB,QAAA,IAAMhI,SAAY,GAAA,IAAI,CAAC6H,OAAO,CAACG,KAAM,CAAA,CAAA;QAErC,IAAI,CAAChI,WAAW,OAAO,CAAA,CAAA;AACvB,QAAA,IAAIrd,MAAMwlB,OAAO,CAACnI,SAAY,CAAA,EAAA,OAAOA,UAAUvd,MAAM,CAAA;QACrD,OAAO,CAAA,CAAA;AACT,KAAA,CAAA;AAEA;;;;;AAKC,MACDod,OAAAA,QAkCC,GAlCDA,SAAAA,QAASmI,CAAAA,KAAa,EAAE5Z,IAAU,EAAA;AAChC,QAAA,IAAI,CAAC,IAAI,CAACyZ,OAAO,CAACG,MAAM,EAAE;YACxB,OAAO,KAAA,CAAA;AACT,SAAA;AAEA,QAAA,IAAMhI,SAAY,GAAA,IAAI,CAAC6H,OAAO,CAACG,KAAM,CAAA,CAAA;QAErC,IAAIrlB,KAAAA,CAAMwlB,OAAO,CAACnI,SAAY,CAAA,EAAA;YAC5B,IAAMoI,KAAAA,GAAQpI,UAAUvd,MAAM,CAAA;;YAG9B,IAAmC4lB,OAtD5BT,eAsDCU,CAAAA,yBAAAA,CAAAA;YACR,IAAMC,oBAAAA,GAAuBF,KAAK5lB,MAAM,GAAG,IAAI4lB,IAAKG,CAAAA,GAAG,KAAK,EAAE,CAAA;AAC9DD,YAAAA,oBAAAA,CAAqB9lB,MAAM,GAAG2lB,KAAAA,CAAAA;AAC9B,YAAA,IAAK,IAAIvlB,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAIulB,OAAOvlB,CAAK,EAAA,CAAA;AAC9B0lB,gBAAAA,oBAAoB,CAAC1lB,CAAAA,CAAE,GAAGmd,SAAS,CAACnd,CAAE,CAAA,CAAA;AACxC,aAAA;AAEA,YAAA,IAAK,IAAIA,EAAAA,GAAI,CAAGA,EAAAA,EAAAA,GAAIulB,OAAOvlB,EAAK,EAAA,CAAA;gBAC9B,IAAM8c,QAAAA,GAAW4I,oBAAoB,CAAC1lB,EAAE,CAAA,CAAA;gBACxC,IAAI,CAAC8c,QAAS7b,CAAAA,SAAS,EAAE;oBACvB,IAAI6b,QAAAA,CAAS8I,IAAI,EAAE,IAAI,CAACC,GAAG,CAACV,KAAOrI,EAAAA,QAAAA,CAASgJ,EAAE,CAAA,CAAA;AAC9ChJ,oBAAAA,QAAAA,CAASgJ,EAAE,CAACva,IAAAA,CAAAA,CAAAA;AACd,iBAAA;AACF,aAAA;;AAGAma,YAAAA,oBAAAA,CAAqB9lB,MAAM,GAAG,CAAA,CAAA;AAC9B4lB,YAAAA,IAAAA,CAAK1jB,IAAI,CAAC4jB,oBAAAA,CAAAA,CAAAA;SACL,MAAA;YACL,IAAIvI,SAAAA,CAAUyI,IAAI,EAAE,IAAI,CAACC,GAAG,CAACV,KAAOhI,EAAAA,SAAAA,CAAU2I,EAAE,CAAA,CAAA;AAChD3I,YAAAA,SAAAA,CAAU2I,EAAE,CAACva,IAAAA,CAAAA,CAAAA;AACf,SAAA;QACA,OAAO,IAAA,CAAA;AACT,KAAA,CAAA;AAEA;;;;;AAKC,MACDwa,OAAAA,EAEC,GAFDA,SAAAA,EAAGZ,CAAAA,KAAa,EAAEW,EAAY,EAAA;AAC5B,QAAA,OAAO,IAAI,CAACE,iBAAiB,CAACb,KAAOW,EAAAA,EAAAA,CAAAA,CAAAA;AACvC,KAAA,CAAA;AAEA;;;;;AAKC,MACDF,OAAAA,IAEC,GAFDA,SAAAA,IAAKT,CAAAA,KAAa,EAAEW,EAAY,EAAA;AAC9B,QAAA,OAAO,IAAI,CAACE,iBAAiB,CAACb,OAAOW,EAAI,EAAA,IAAA,CAAA,CAAA;AAC3C,KAAA,CAAA;AAEA;;;;AAIC,MACDD,OAAAA,GA0BC,GA1BDA,SAAAA,GAAIV,CAAAA,KAAa,EAAEW,EAAa,EAAA;QAC9B,IAAI,CAAC,IAAI,CAACd,OAAO,CAACG,KAAM,CAAA,EAAE,OAAO,IAAI,CAAA;AACrC,QAAA,IAAI,CAACW,EAAI,EAAA;YACP,IAAI,CAACG,WAAW,CAACd,KAAAA,CAAAA,CAAAA;AACjB,YAAA,OAAO,IAAI,CAAA;AACb,SAAA;AAEA,QAAA,IAAMhI,SAAY,GAAA,IAAI,CAAC6H,OAAO,CAACG,KAAM,CAAA,CAAA;QACrC,IAAMG,OAAAA,GAAUxlB,KAAMwlB,CAAAA,OAAO,CAACnI,SAAAA,CAAAA,CAAAA;AAC9B,QAAA,IAAI,CAACmI,OAAAA,IAAWnI,SAAU2I,CAAAA,EAAE,KAAKA,EAAI,EAAA;YACnC,IAAI,CAACG,WAAW,CAACd,KAAAA,CAAAA,CAAAA;AACnB,SAAA,MAAO,IAAIG,OAAS,EAAA;YAClB,IAAK,IAAItlB,IAAImd,SAAUvd,CAAAA,MAAM,GAAG,CAAGI,EAAAA,CAAAA,IAAK,GAAGA,CAAK,EAAA,CAAA;AAC9C,gBAAA,IAAImd,SAAS,CAACnd,CAAAA,CAAE,CAAC8lB,EAAE,KAAKA,EAAI,EAAA;;AAE1B3I,oBAAAA,SAAS,CAACnd,CAAAA,CAAE,CAACiB,SAAS,GAAG,IAAA,CAAA;oBACzBkc,SAAUjb,CAAAA,MAAM,CAAClC,CAAG,EAAA,CAAA,CAAA,CAAA;AACtB,iBAAA;AACF,aAAA;YACA,IAAImd,SAAAA,CAAUvd,MAAM,KAAK,CAAG,EAAA;gBAC1B,IAAI,CAACqmB,WAAW,CAACd,KAAAA,CAAAA,CAAAA;AACnB,aAAA,MAAO,IAAIhI,SAAAA,CAAUvd,MAAM,KAAK,CAAG,EAAA;AACjC,gBAAA,IAAI,CAAColB,OAAO,CAACG,MAAM,GAAGhI,SAAS,CAAC,CAAE,CAAA,CAAA;AACpC,aAAA;AACF,SAAA;AACA,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;;AAKC,MACD+I,OAAAA,mBAEC,GAFDA,SAAAA,mBAAoBf,CAAAA,KAAa,EAAEW,EAAa,EAAA;AAC9C,QAAA,OAAO,IAAI,CAACD,GAAG,CAACV,KAAOW,EAAAA,EAAAA,CAAAA,CAAAA;AACzB,KAAA,CAAA;AAEA;;;AAGC,MACDK,MAAAA,CAAAA,uBAOC,GAPDA,SAAAA,wBAAwBhB,KAAc,EAAA;AACpC,QAAA,IAAIA,KAAO,EAAA;YACT,IAAI,IAAI,CAACH,OAAO,CAACG,MAAM,EAAE,IAAI,CAACc,WAAW,CAACd,KAAAA,CAAAA,CAAAA;SACrC,MAAA;AACL,YAAA,IAAI,CAACH,OAAO,GAAGnnB,MAAAA,CAAOC,MAAM,CAAC,IAAA,CAAA,CAAA;YAC7B,IAAI,CAACmnB,WAAW,GAAG,CAAA,CAAA;AACrB,SAAA;AACF,KAAA,CAAA;IAEA,MAAQe,CAAAA,iBAcP,GAdD,SAAQA,iBAAAA,CAAkBb,KAAa,EAAEW,EAAY,EAAEF,IAAc,EAAA;AACnE,QAAA,IAAM9I,QAAW,GAAA;YAAEgJ,EAAAA,EAAAA,EAAAA;YAAIF,IAAAA,EAAAA,IAAAA;AAAK,SAAA,CAAA;QAC5B,IAAMQ,MAAAA,GAAS,IAAI,CAACpB,OAAO,CAAA;QAC3B,IAAM3J,OAAAA,GAAU+K,MAAM,CAACjB,KAAM,CAAA,CAAA;AAE7B,QAAA,IAAI,CAAC9J,OAAS,EAAA;YACZ+K,MAAM,CAACjB,MAAM,GAAGrI,QAAAA,CAAAA;AAChB,YAAA,IAAI,CAACmI,WAAW,EAAA,CAAA;AAClB,SAAA,MAAO,IAAInlB,KAAAA,CAAMwlB,OAAO,CAACjK,OAAU,CAAA,EAAA;AACjCA,YAAAA,OAAAA,CAAQvZ,IAAI,CAACgb,QAAAA,CAAAA,CAAAA;SACR,MAAA;YACLsJ,MAAM,CAACjB,MAAM,GAAG;AAAC9J,gBAAAA,OAAAA;AAASyB,gBAAAA,QAAAA;AAAS,aAAA,CAAA;AACrC,SAAA;AACA,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQmJ,WAMP,GAND,SAAQA,WAAAA,CAAYd,KAAa,EAAA;AAC/B,QAAA,IAAI,EAAE,IAAI,CAACF,WAAW,KAAK,CAAG,EAAA;AAC5B,YAAA,IAAI,CAACD,OAAO,GAAGnnB,MAAAA,CAAOC,MAAM,CAAC,IAAA,CAAA,CAAA;SACxB,MAAA;AACL,YAAA,OAAO,IAAI,CAACknB,OAAO,CAACG,KAAM,CAAA,CAAA;AAC5B,SAAA;AACF,KAAA,CAAA;AAjLWJ,IAAAA,OAAAA,eAAAA,CAAAA;AAkLZ,CAAA,GAAA;AAlLYA,eAAAA,CACIU,4BAA2C,EAAE;;ACD9D;;IAGO,IAAMY,cAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,cAAAA,CAoDCjS,IAAY,EAAA;QACtB,IAAI,CAACA,IAAI,GAAGA,IAAAA,CAAAA;AACZ,QAAA,IAAI,CAACkS,SAAS,GAtDLD,eAsDuBE,oBAAoB,EAAA,CAAA;;AA/CtD;;;;AAIC,MACD,cAAO3D,CAAAA,SAUN,GAVD,SAAOA,UAAUxO,IAAY,EAAA;QAC3B,IAAMoS,eAAAA,GAAkBH,cAbfA,CAa8BI,gBAAgB,CAAA;AACvD,QAAA,IAAID,eAAe,CAACpS,IAAK,CAAA,IAAI,IAAM,EAAA;YACjC,OAAOoS,eAAe,CAACpS,IAAK,CAAA,CAAA;SACvB,MAAA;YACL,IAAMsS,QAAAA,GAAW,IAjBVL,cAiB6BjS,CAAAA,IAAAA,CAAAA,CAAAA;YACpCoS,eAAe,CAACpS,KAAK,GAAGsS,QAAAA,CAAAA;AAlBjBL,YAAAA,cAAAA,CAmBQM,cAAc,CAACD,QAASJ,CAAAA,SAAS,CAAC,GAAGI,QAAAA,CAAAA;YACpD,OAAOA,QAAAA,CAAAA;AACT,SAAA;AACF,KAAA,CAAA;AAEA;;AAEC,MACD,cAAOE,CAAAA,uBAGN,GAHD,SAAOA,wBAAwBC,YAAoB,EAAA;AACjD,QAAA,IAAMC,cAAiBT,GA5BdA,cA4B6BI,CAAAA,gBAAgB,CAACI,YAAa,CAAA,CAAA;QACpE,OAAOC,cAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,eAAgBC,MAAM,CAAA;AAC/B,KAAA,CAAA;AA9BWV,IAAAA,aAAAA,CAAAA,cAAAA,EAAAA;;YA6CPpoB,GAAAA,EAAAA,MAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAAC+oB,KAAK,CAAA;AACnB,aAAA;;;AA/CWX,IAAAA,OAAAA,cAAAA,CAAAA;AAwDZ,CAAA,GAAA;AAvDC,iBADWA,cAAAA,CAEJM,cAAiD9oB,GAAAA,MAAAA,CAAOC,MAAM,CAAC,IAAA,CAAA,CAAA;AAF3DuoB,cAAAA,CAIIE,oBAA+B,GAAA,CAAA,CAAA;AAJnCF,cAKII,CAAAA,gBAAAA,GAAmD5oB,MAAOC,CAAAA,MAAM,CAAC,IAAA,CAAA;;ACPlF;;IAGO,IAAMmpB,IAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,IAAAA,GAAAA;aAIHC,WAAsB,GAAA,CAAA,CAAA;aACtBC,UAAqB,GAAA,CAAA,CAAA;aACrBC,gBAA2B,GAAA,CAAA,CAAA;aAC3BC,YAAuB,GAAA,CAAA,CAAA;aACvBC,kBAA6B,GAAA,CAAA,CAAA;AAG7BC,QAAAA,IAAAA,CAAAA,iBAAAA,GAA6B,IAAIjrB,kBAAAA,EAAAA,CAAAA;AACjCkrB,QAAAA,IAAAA,CAAAA,eAAAA,GAA2B,IAAIlrB,kBAAAA,EAAAA,CAAAA;AAEvC,qEACAmrB,gBAA2B,GAAA,QAAA,CAAA;AAE3B,uCACAC,SAAoB,GAAA,GAAA,CAAA;AA6ClB,QAAA,IAAI,CAACC,eAAe,GAAGC,WAAAA,CAAYC,GAAG,EAAK,GAAA,IAAA,CAAA;;AA/DlCZ,IAAAA,IAAAA,MAAAA,GAAAA,IAAAA,CAAAA,SAAAA,CAAAA;AAkEX;;MAGAa,MAAAA,CAAAA,MAEC,GAFDA,SAAAA,MAAAA,GAAAA;AACE,QAAA,IAAI,CAACH,eAAe,GAAGC,WAAAA,CAAYC,GAAG,EAAK,GAAA,IAAA,CAAA;AAC7C,KAAA,CAAA;AAEA;;MAGAE,MAAAA,CAAAA,OAaC,GAbDA,SAAAA,OAAAA,GAAAA;QACE,IAAMC,iBAAAA,GAAoBJ,WAAYC,CAAAA,GAAG,EAAK,GAAA,IAAA,CAAA;AAE9C,QAAA,IAAMI,eAAkBD,GAAAA,iBAAAA,GAAoB,IAAI,CAACL,eAAe,CAAA;QAChE,IAAI,CAACP,gBAAgB,GAAGa,eAAAA,CAAAA;QACxB,IAAI,CAACX,kBAAkB,IAAIW,eAAAA,CAAAA;QAE3B,IAAMC,SAAAA,GAAYpiB,IAAKoa,CAAAA,GAAG,CAAC+H,eAAAA,EAAiB,IAAI,CAACR,gBAAgB,CAAA,GAAI,IAAI,CAACC,SAAS,CAAA;QACnF,IAAI,CAACP,UAAU,GAAGe,SAAAA,CAAAA;QAClB,IAAI,CAACb,YAAY,IAAIa,SAAAA,CAAAA;AACrB,QAAA,IAAI,CAAChB,WAAW,EAAA,CAAA;QAEhB,IAAI,CAACS,eAAe,GAAGK,iBAAAA,CAAAA;AACzB,KAAA,CAAA;AAEA;;AAEC,MACDG,MAAAA,CAAAA,sBASC,GATDA,SAAAA,uBAAuBC,UAAsB,EAAA;QAC3C,IAAiF,KAAA,GAAA,IAAI,EAA1DC,mBAAsD,KAAzEd,CAAAA,iBAAAA,EAAqCC,cAAiBc,GAAmB,KAApCd,CAAAA,eAAAA,CAAAA;QAE7C,IAAMe,IAAAA,GAAO,IAAI,CAAClB,YAAY,CAAA;QAC9BgB,gBAAiBtqB,CAAAA,GAAG,CAACwqB,IAAAA,EAAMziB,IAAK0iB,CAAAA,GAAG,CAACD,IAAOziB,CAAAA,EAAAA,IAAAA,CAAK2iB,GAAG,CAACF,IAAO,CAAA,EAAA,CAAA,CAAA,CAAA;AAC3DH,QAAAA,UAAAA,CAAWM,UAAU,CAACzB,IAnGbA,CAmGkB0B,oBAAoB,EAAEN,gBAAAA,CAAAA,CAAAA;AAEjDC,QAAAA,cAAAA,CAAevqB,GAAG,CAAC,IAAI,CAACopB,UAAU,EAAE,GAAG,CAAG,EAAA,CAAA,CAAA,CAAA;AAC1CiB,QAAAA,UAAAA,CAAWM,UAAU,CAACzB,IAtGbA,CAsGkB2B,kBAAkB,EAAEN,cAAAA,CAAAA,CAAAA;AACjD,KAAA,CAAA;AAvGWrB,IAAAA,aAAAA,CAAAA,IAAAA,EAAAA;;YAuBP4B,GAAAA,EAAAA,YAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAAC3B,WAAW,CAAA;AACzB,aAAA;;;YAOIgB,GAAAA,EAAAA,WAAAA;;;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACf,UAAU,CAAA;AACxB,aAAA;;;YAKI2B,GAAAA,EAAAA,aAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACzB,YAAY,CAAA;AAC1B,aAAA;;;YAOIY,GAAAA,EAAAA,iBAAAA;;;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACb,gBAAgB,CAAA;AAC9B,aAAA;;;YAKI2B,GAAAA,EAAAA,mBAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACzB,kBAAkB,CAAA;AAChC,aAAA;;;AAzDWL,IAAAA,OAAAA,IAAAA,CAAAA;AAwGZ,CAAA,GAAA;AAxGYA,IACI0B,CAAAA,oBAAAA,GAAuBtC,cAAezD,CAAAA,SAAS,CAAC,mBAAA,CAAA,CAAA;AADpDqE,IAEI2B,CAAAA,kBAAAA,GAAqBvC,cAAezD,CAAAA,SAAS,CAAC,iBAAA,CAAA;;ACT/D;;IAGO,IAAKoG,QAAAA,iBAAAA,SAAAA,QAAAA,EAAAA;iBACA,QAAA,CAAA,QAAA,CAAA,OAAA,CAAA,GAAA,IAAA,CAAA,GAAA,OAAA,CAAA;iDAEgC,QAAA,CAAA,QAAA,CAAA,YAAA,CAAA,GAAA,KAAA,CAAA,GAAA,YAAA,CAAA;mDAEE,QAAA,CAAA,QAAA,CAAA,YAAA,CAAA,GAAA,KAAA,CAAA,GAAA,YAAA,CAAA;kDAED,QAAA,CAAA,QAAA,CAAA,YAAA,CAAA,GAAA,KAAA,CAAA,GAAA,YAAA,CAAA;mBAG/B,QAAA,CAAA,QAAA,CAAA,KAAA,CAAA,GAAA,IAAA,CAAA,GAAA,KAAA,CAAA;0CAEuB,QAAA,CAAA,QAAA,CAAA,UAAA,CAAA,GAAA,KAAA,CAAA,GAAA,UAAA,CAAA;4CAEE,QAAA,CAAA,QAAA,CAAA,UAAA,CAAA,GAAA,KAAA,CAAA,GAAA,UAAA,CAAA;2CAED,QAAA,CAAA,QAAA,CAAA,UAAA,CAAA,GAAA,KAAA,CAAA,GAAA,UAAA,CAAA;mBAGxB,QAAA,CAAA,QAAA,CAAA,MAAA,CAAA,GAAA,KAAA,CAAA,GAAA,MAAA,CAAA;0CAEuB,QAAA,CAAA,QAAA,CAAA,WAAA,CAAA,GAAA,KAAA,CAAA,GAAA,WAAA,CAAA;4CAEE,QAAA,CAAA,QAAA,CAAA,WAAA,CAAA,GAAA,KAAA,CAAA,GAAA,WAAA,CAAA;2CAED,QAAA,CAAA,QAAA,CAAA,WAAA,CAAA,GAAA,KAAA,CAAA,GAAA,WAAA,CAAA;+BAGZ,QAAA,CAAA,QAAA,CAAA,YAAA,CAAA,GAAA,KAAA,CAAA,GAAA,YAAA,CAAA;8BAED,QAAA,CAAA,QAAA,CAAA,YAAA,CAAA,GAAA,KAAA,CAAA,GAAA,YAAA,CAAA;+BAEC,QAAA,CAAA,QAAA,CAAA,YAAA,CAAA,GAAA,KAAA,CAAA,GAAA,YAAA,CAAA;uBAGR,QAAA,CAAA,QAAA,CAAA,aAAA,CAAA,GAAA,KAAA,CAAA,GAAA,aAAA,CAAA;uDAEgC,QAAA,CAAA,QAAA,CAAA,kBAAA,CAAA,GAAA,MAAA,CAAA,GAAA,kBAAA,CAAA;yDAEE,QAAA,CAAA,QAAA,CAAA,kBAAA,CAAA,GAAA,MAAA,CAAA,GAAA,kBAAA,CAAA;wDAED,QAAA,CAAA,QAAA,CAAA,kBAAA,CAAA,GAAA,MAAA,CAAA,GAAA,kBAAA,CAAA;yBAG/B,QAAA,CAAA,QAAA,CAAA,WAAA,CAAA,GAAA,MAAA,CAAA,GAAA,WAAA,CAAA;gDAEuB,QAAA,CAAA,QAAA,CAAA,gBAAA,CAAA,GAAA,MAAA,CAAA,GAAA,gBAAA,CAAA;kDAEE,QAAA,CAAA,QAAA,CAAA,gBAAA,CAAA,GAAA,MAAA,CAAA,GAAA,gBAAA,CAAA;iDAED,QAAA,CAAA,QAAA,CAAA,gBAAA,CAAA,GAAA,MAAA,CAAA,GAAA,gBAAA,CAAA;qCAGZ,QAAA,CAAA,QAAA,CAAA,kBAAA,CAAA,GAAA,MAAA,CAAA,GAAA,kBAAA,CAAA;oCAED,QAAA,CAAA,QAAA,CAAA,kBAAA,CAAA,GAAA,MAAA,CAAA,GAAA,kBAAA,CAAA;qCAEC,QAAA,CAAA,QAAA,CAAA,kBAAA,CAAA,GAAA,MAAA,CAAA,GAAA,kBAAA,CAAA;oCAGD,QAAA,CAAA,QAAA,CAAA,kBAAA,CAAA,GAAA,MAAA,CAAA,GAAA,kBAAA,CAAA;0CAEM,QAAA,CAAA,QAAA,CAAA,oBAAA,CAAA,GAAA,MAAA,CAAA,GAAA,oBAAA,CAAA;sBAGpB,QAAA,CAAA,QAAA,CAAA,YAAA,CAAA,GAAA,KAAA,CAAA,GAAA,YAAA,CAAA;oCAEc,QAAA,CAAA,QAAA,CAAA,cAAA,CAAA,GAAA,KAAA,CAAA,GAAA,cAAA,CAAA;gBAGpB,QAAA,CAAA,QAAA,CAAA,MAAA,CAAA,GAAA,IAAA,CAAA,GAAA,MAAA,CAAA;yBAES,QAAA,CAAA,QAAA,CAAA,eAAA,CAAA,GAAA,IAAA,CAAA,GAAA,eAAA,CAAA;iBAER,QAAA,CAAA,QAAA,CAAA,OAAA,CAAA,GAAA,IAAA,CAAA,GAAA,OAAA,CAAA;0BAES,QAAA,CAAA,QAAA,CAAA,gBAAA,CAAA,GAAA,IAAA,CAAA,GAAA,gBAAA,CAAA;AAEnB;AA9EUA,IAAAA,OAAAA,QAAAA,CAAAA;AAgFX,CAAA,CAAA,EAAA,EAAA;AAED;;;MAIO,IAAKC,gBAAAA,iBAAAA,SAAAA,gBAAAA,EAAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,IAAAA,OAAAA,gBAAAA,CAAAA;AAqCX,CAAA,CAAA,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpHD,mBAAe;IACbC,eAAAA,EAAAA,eAAAA;IAEAC,UAAAA,EAAAA,UAAAA;IACAC,IAAAA,EAAAA,IAAAA;IACAC,6BAAAA,EAAAA,6BAAAA;IACAC,eAAAA,EAAAA,eAAAA;IAEAC,QAAAA,EAAAA,QAAAA;AACF,CAAE;;;;;;;;;;;;ACbF,gBAAe;IACbC,WAAAA,EAAAA,WAAAA;IACAC,yBAAAA,EAAAA,yBAAAA;IACAC,kBAAAA,EAAAA,kBAAAA;IACAC,uBAAAA,EAAAA,uBAAAA;IACAC,YAAAA,EAAAA,YAAAA;AACF,CAAE;;;;;;;;;;;;;;;;;;;;;;;;ACCF,wBAAe;IACbC,eAAAA,EAAAA,eAAAA;IACAC,6BAAAA,EAAAA,6BAAAA;IACAC,6BAAAA,EAAAA,6BAAAA;IACAC,yBAAAA,EAAAA,yBAAAA;IACAC,0BAAAA,EAAAA,0BAAAA;IACAC,8BAAAA,EAAAA,8BAAAA;IAEAC,gBAAAA,EAAAA,gBAAAA;IACAC,mBAAAA,EAAAA,mBAAAA;IACAC,kBAAAA,EAAAA,kBAAAA;IACAC,oBAAAA,EAAAA,oBAAAA;IACAC,aAAAA,EAAAA,aAAAA;AACF,CAAE;;;;IC+BWC,SAAY,GAAA,QAAA,CAAA;IACvBC,MAAAA,EAAAA,MAAAA;IACAC,WAAAA,EAAAA,WAAAA;IACAC,iBAAAA,EAAAA,iBAAAA;IACAC,cAAAA,EAAAA,cAAAA;IAEAC,WAAAA,EAAAA,WAAAA;IACAC,YAAAA,EAAAA,YAAAA;IACAC,QAAAA,EAAAA,QAAAA;IACAC,cAAAA,EAAAA,cAAAA;IACAC,oBAAAA,EAAAA,oBAAAA;IACAC,sBAAAA,EAAAA,sBAAAA;IAEAC,iBAAAA,EAAAA,iBAAAA;IACAC,mBAAAA,EAAAA,mBAAAA;IAEAC,aAAAA,EAAAA,aAAAA;IACAC,UAAAA,EAAAA,UAAAA;IACAC,WAAAA,EAAAA,WAAAA;IACAC,aAAAA,EAAAA,aAAAA;IACAC,gBAAAA,EAAAA,gBAAAA;IACAC,eAAAA,EAAAA,eAAAA;IACAC,OAAAA,EAAAA,OAAAA;IACAC,aAAAA,EAAAA,aAAAA;IACAC,SAAAA,EAAAA,SAAAA;IAEAC,iBAAAA,EAAAA,iBAAAA;IACAC,oBAAAA,EAAAA,oBAAAA;IACAC,WAAAA,EAAAA,WAAAA;IAEAC,iBAAAA,EAAAA,iBAAAA;IACAC,kBAAAA,EAAAA,kBAAAA;IAEAC,sBAAAA,EAAAA,sBAAAA;IAEAC,YAAAA,EAAAA,YAAAA;IACAC,iBAAAA,EAAAA,iBAAAA;IACAC,kBAAAA,EAAAA,kBAAAA;IACAC,oBAAAA,EAAAA,oBAAAA;IACAC,iBAAAA,EAAAA,iBAAAA;IACAC,cAAAA,EAAAA,cAAAA;IACAC,eAAAA,EAAAA,eAAAA;IACAC,eAAAA,EAAAA,eAAAA;IACAC,eAAAA,EAAAA,eAAAA;IACAC,YAAAA,EAAAA,YAAAA;IACAC,aAAAA,EAAAA,aAAAA;IACAC,gBAAAA,EAAAA,gBAAAA;IACAC,qBAAAA,EAAAA,qBAAAA;IACAC,gBAAAA,EAAAA,gBAAAA;IACAC,gBAAAA,EAAAA,gBAAAA;IACAC,aAAAA,EAAAA,aAAAA;GAEGC,SACAC,EAAAA,YAAAA,EAAAA;IACHC,UAAAA,EAAAA,UAAAA;GACGC,iBACH;;AC7GK,IAAA,aAAA,iBAAA,WAAA;AAAMC,IAAAA,SAAAA,aAAAA,GAAAA,EAAAA;AAAAA,IAAAA,aAAAA,CAaJC,iBAEN,GAFD,SAAOA,iBAAAA,CAAkBpK,MAAqB,EAAA;QAC5C,OAAOA,MAAAA,CAAOpM,GAAG,CAAC,SAAC5G,CAAAA,EAAAA;AAAM,YAAA,OAAC,UAAUA,IAAAA,CAAEhO,CAAAA,KAAK,GAAGgO,CAAE+D,CAAAA,IAAI,GAAI,GAAA,GAAK/D,EAAEhO,KAAK,GAAGgO,CAAE+D,CAAAA,IAAI,CAAC,GAAA,IAAA,CAAA;AAAKsZ,SAAAA,CAAAA,CAAAA,IAAI,CAAC,EAAA,CAAA,CAAA;AAC1F,KAAA,CAAA;AAfWF,IAAAA,aAAAA,CAiBJG,eAKN,GALD,SAAOA,eAAgBC,CAAAA,WAAmB,EAAEC,aAAqB,EAAA;QAC/D,IAAIrD,SAAS,CAACoD,WAAAA,CAAY,EAAE;YAC1B,MAAO,UAAOA,WAAY,GAAA,gCAAA,CAAA;AAC5B,SAAA;QACApD,SAAS,CAACoD,YAAY,GAAGC,aAAAA,CAAAA;AAC3B,KAAA,CAAA;AAtBWL,IAAAA,aAAAA,CAwBJM,iBAEN,GAFD,SAAOA,iBAAAA,CAAkBF,WAAmB,EAAA;QAC1C,OAAOpD,SAAS,CAACoD,WAAY,CAAA,CAAA;AAC/B,KAAA,CAAA;AAEA;;;MA5BWJ,cAgCJO,aAaN,GAbD,SAAOA,aAAcC,CAAAA,GAAW,EAAEC,KAAyC,EAAA;AAAzCA,QAAAA,IAAAA,kBAAAA,KAAQ,GAAA,iCAAA,CAAA;QACxC,SAAStS,OAAAA,CAAQE,KAAK,EAAEhc,KAAK,EAAA;YAC3B,IAAI8b,SAAAA,GAAU6O,SAAS,CAAC3qB,KAAM,CAAA,CAAA;AAE9B,YAAA,IAAI8b,cAAYzc,SAAW,EAAA;AACzBgF,gBAAAA,MAAAA,CAAOD,KAAK,CAAE,gBAAgB4X,GAAAA,KAAAA,CAAMK,IAAI,EAAG,GAAA,gBAAA,CAAA,CAAA;gBAC3C,OAAO,EAAA,CAAA;AACT,aAAA;AAEA,YAAA,OAAOsR,aAzCAA,CAyCcO,aAAa,CAACpS,SAASsS,EAAAA,KAAAA,CAAAA,CAAAA;AAC9C,SAAA;QAEA,OAAOD,GAAAA,CAAIrS,OAAO,CAACsS,KAAOtS,EAAAA,OAAAA,CAAAA,CAAAA;AAC5B,KAAA,CAAA;AAEA;;;;QA/CW6R,cAoDJU,YA4BN,GA5BD,SAAOA,YAAaC,CAAAA,MAAc,EAAEC,MAAgB,EAAA;AAClDD,QAAAA,MAAAA,GAASA,MAAOxS,CAAAA,OAAO,CAAC,cAAA,EAAgByS,SAAS,IAAO,GAAA,KAAA,CAAA,CAAA;QACxDD,MAASA,GAAAA,MAAAA,CAAOxS,OAAO,CAAC,uBAAyB,EAAA,SAAA,CAAA,CAAA;QACjDwS,MAASA,GAAAA,MAAAA,CAAOxS,OAAO,CAAC,oBAAsB,EAAA,aAAA,CAAA,CAAA;AAE9C,QAAA,IAAIyS,MAAQ,EAAA;YACVD,MAASA,GAAAA,MAAAA,CAAOxS,OAAO,CAAC,6BAA+B,EAAA,YAAA,CAAA,CAAA;YACvDwS,MAASA,GAAAA,MAAAA,CAAOxS,OAAO,CAAC,8BAAgC,EAAA,aAAA,CAAA,CAAA;YACxDwS,MAASA,GAAAA,MAAAA,CAAOxS,OAAO,CAAC,0BAA4B,EAAA,gBAAA,CAAA,CAAA;YACpDwS,MAASA,GAAAA,MAAAA,CAAOxS,OAAO,CAAC,2BAA6B,EAAA,iBAAA,CAAA,CAAA;YACrDwS,MAASA,GAAAA,MAAAA,CAAOxS,OAAO,CAAC,sBAAwB,EAAA,cAAA,CAAA,CAAA;AAEhD,YAAA,IAAI,CAhEG6R,aAgEYa,CAAAA,aAAa,CAACF,MAAS,CAAA,EAAA;gBACxC,IAAMG,KAAAA,GAAQ,uBAAwBngB,CAAAA,IAAI,CAACggB,MAAAA,CAAAA,CAAAA;AAC3C,gBAAA,IAAIG,KAAO,EAAA;oBACTH,MAASA,GAAAA,MAAAA,CAAOxS,OAAO,CAAC,mBAAqB,EAAA,gBAAA,CAAA,CAAA;oBAC7C,IAAMF,MAAAA,GAAS0S,MAAOtS,CAAAA,KAAK,CAAC,uBAAA,CAAA,CAAA;AAC5BsS,oBAAAA,MAAAA,GAAS,IAAI,CAACI,iBAAiB,CAACJ,MAAQ1S,EAAAA,MAAAA,CAAAA,CAAAA;iBACnC,MAAA;oBACL0S,MAASA,GAAAA,MAAAA,CAAOxS,OAAO,CAAC,oBAAuB,EAAA,mCAAA,CAAA,CAAA;oBAC/CwS,MAASA,GAAAA,MAAAA,CAAOxS,OAAO,CAAC,mBAAqB,EAAA,aAAA,CAAA,CAAA;AAC/C,iBAAA;AACF,aAAA;SACK,MAAA;YACLwS,MAASA,GAAAA,MAAAA,CAAOxS,OAAO,CAAC,gBAAkB,EAAA,IAAA,CAAA,CAAA;AAC5C,SAAA;QAEA,OAAOwS,MAAAA,CAAAA;AACT,KAAA,CAAA;AAhFWX,IAAAA,aAAAA,CAkFIa,aAEd,GAFD,SAAeA,aAAAA,CAAcG,cAAsB,EAAA;AACjD,QAAA,OAAOhB,aAnFEA,CAmFYiB,mBAAmB,CAACtgB,IAAI,CAACqgB,cAAAA,CAAAA,CAAAA;AAChD,KAAA,CAAA;AApFWhB,IAAAA,aAAAA,CAsFIe,iBAkBd,GAlBD,SAAeA,iBAAkBJ,CAAAA,MAAc,EAAE1S,MAAgB,EAAA;AAC/D,QAAA,IAAIiT,WAAc,GAAA,EAAA,CAAA;AAClB,QAAA,IAAMC,cAAc,IAAIC,GAAAA,EAAAA,CAAAA;AAExB,QAAA,IAAK,IAAI5uB,CAAI,GAAA,CAAA,EAAGA,IAAIyb,MAAO7b,CAAAA,MAAM,EAAEI,CAAK,EAAA,CAAA;AACtC,YAAA,IAAM6uB,MAAMpT,MAAM,CAACzb,CAAE,CAAA,CAAC6b,KAAK,CAAC,wBAAA,CAAA,CAAA;AAC5B8S,YAAAA,WAAAA,CAAYG,GAAG,CAACD,GAAG,CAAC,CAAE,CAAA,CAAA,CAAA;AACxB,SAAA;QAEAF,WAAYI,CAAAA,OAAO,CAAC,SAAC/sB,KAAAA,EAAAA;AACnB0sB,YAAAA,WAAAA,IAAe,kBAAC,GAAkB1sB,KAAM,GAAA,yBAAA,GAAyBA,KAAM,GAAA,KAAA,CAAA;AACzE,SAAA,CAAA,CAAA;QACA0sB,WAAgB,IAAA,YAAA,CAAA;QAEhBP,MAASA,GAAAA,MAAAA,CAAOxS,OAAO,CAAC,yBAA2B,EAAA,gBAAA,CAAA,CAAA;QAEnDwS,MAASA,GAAAA,MAAAA,CAAOxS,OAAO,CAAC,oBAAsB+S,EAAAA,WAAAA,CAAAA,CAAAA;QAC9C,OAAOP,MAAAA,CAAAA;AACT,KAAA,CAAA;AAxGWX,IAAAA,OAAAA,aAAAA,CAAAA;AAyGZ,CAAA,GAAA;AAxGC,iBADWA,cAEKwB,gBAAmB,GAAA;AACjC,IAAA,2BAAA;AACA,IAAA,6BAAA;AACA,IAAA,qBAAA;AACA,IAAA,mBAAA;CACD,CACE/X,GAAG,CAAC,SAACgY,CAAAA,EAAAA;AAAM,IAAA,OAAC,gBAAaA,CAAE,GAAA,aAAA,CAAA;AAC3BvB,CAAAA,CAAAA,CAAAA,IAAI,CAAC,EAAA,CAAA,CAAA;AATGF,aAWaiB,CAAAA,mBAAAA,GAAsB;;;ACfhD;;IAGO,IAAMS,YAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,YAAAA,CAoBS9a,IAAY,EAAA;QAC9B,IAAI,CAACA,IAAI,GAAGA,IAAAA,CAAAA;AACZ,QAAA,IAAI,CAACkS,SAAS,GAtBL4I,aAsBqBC,YAAY,EAAA,CAAA;;AAlB5C;;;;AAIC,MACD,YAAOvM,CAAAA,SAGN,GAHD,SAAOA,UAAUxO,IAAY,EAAA;YAEnBgb,QAAQhb,EAAAA,KAAAA,CAAAA;QADhB,IAAMgb,OAAAA,GAAUF,YAVPA,CAUoBG,QAAQ,CAAA;AACrC,QAAA,OAAQD,CAAAA,QAAAA,GAAAA,OAAO,EAAChb,KAAAA,GAAAA,IAAAA,CAAK,KAAbgb,QAAO,CAAChb,KAAAA,CAAK,GAAK,IAXjB8a,YAWkC9a,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAC7C,KAAA,CAAA;AAZW8a,IAAAA,OAAAA,YAAAA,CAAAA;AAwBZ,CAAA,GAAA;AAxBYA,YAAAA,CACIC,YAAuB,GAAA,CAAA,CAAA;AAD3BD,YAEIG,CAAAA,QAAAA,GAAyCxxB,MAAOC,CAAAA,MAAM,CAAC,IAAA,CAAA;;ACFxE;;IAGO,IAAewxB,UAAf,iBAAA,WAAA;AAAeA,IAAAA,SAAAA,UAAAA,GAAAA;aAGZC,QAAsD1xB,GAAAA,MAAAA,CAAOC,MAAM,CAAC,IAAA,CAAA,CAAA;;AAHxDwxB,IAAAA,IAAAA,MAAAA,GAAAA,UAAAA,CAAAA,SAAAA,CAAAA;AA0BpBE,IAAAA,MAAAA,CAAAA,MAQC,GARDA,SAAAA,MAA4CC,CAAAA,YAAmC,EAAEptB,KAAQ,EAAA;AACvF,QAAA,IAAMmS,MAAM,OAAOib,YAAAA,KAAiB,WAAWP,YAAatM,CAAAA,SAAS,CAAC6M,YAAgBA,CAAAA,GAAAA,YAAAA,CAAAA;QACtF,IAAMC,IAAAA,GAAO,IAAI,CAACH,QAAQ,CAAA;AAE1B,QAAA,IAAIG,IAAI,CAAClb,GAAAA,CAAI8R,SAAS,CAAC,KAAKpnB,SAAW,EAAA;AACrCgF,YAAAA,MAAAA,CAAOF,IAAI,CAAE,0BAA0BwQ,GAAAA,GAAAA,CAAIJ,IAAI,GAAC,sBAAA,CAAA,CAAA;AAClD,SAAA;AACAsb,QAAAA,IAAI,CAAClb,GAAAA,CAAI8R,SAAS,CAAC,GAAGjkB,KAAAA,CAAAA;AACxB,KAAA,CAAA;AAcAstB,IAAAA,MAAAA,CAAAA,SAIC,GAJDA,SAAAA,SAAAA,CAAUF,YAAmC,EAAA;AAC3C,QAAA,OAAO,IAAI,CAACF,QAAQ,CACjB,CAAA,OAAOE,YAAAA,IAAgB,QAAWP,GAAAA,YAAAA,CAAatM,SAAS,CAAC6M,YAAAA,CAAAA,GAAgBA,YAAW,EAAGnJ,SAAS,CAClG,CAAA;AACH,KAAA,CAAA;AAgBAsJ,IAAAA,MAAAA,CAAAA,WAIC,GAJDA,SAAAA,WAAAA,CAAiDH,YAAmC,EAAA;AAClF,QAAA,OAAO,IAAI,CAACF,QAAQ,CAClB,OAAOE,YAAgB,IAAA,QAAA,GAAWP,YAAatM,CAAAA,SAAS,CAAC6M,YAAcnJ,CAAAA,CAAAA,SAAS,GAAGmJ,YAAAA,CAAanJ,SAAS,CAC1G,CAAA;AACH,KAAA,CAAA;AAxEoBgJ,IAAAA,aAAAA,CAAAA,UAAAA,EAAAA;;YAQhBlb,GAAAA,EAAAA,MAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACC,KAAK,CAAA;AACnB,aAAA;;;AAVoBib,IAAAA,OAAAA,UAAAA,CAAAA;AAyErB,CAAA,EAAA;;AC/ED;;IAGO,IAAKO,UAAAA,iBAAAA,SAAAA,UAAAA,EAAAA;+BACc,UAAA,CAAA,UAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;8BAED,UAAA,CAAA,UAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA,CAAA;AAHbA,IAAAA,OAAAA,UAAAA,CAAAA;AAKX,CAAA,CAAA,EAAA;;ACDD;;;IAIO,IAAMC,aAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,aAAAA,CAcCvvB,MAAc,EAAA;aAN1BwvB,qBAAiC,GAAA,KAAA,CAAA;QAO/B,IAAMC,GAAAA,GAAMzvB,OAAOiF,iBAAiB,CAAA;QACpC,IAAI,CAACyqB,IAAI,GAAGD,GAAAA,CAAAA;AACZ,QAAA,IAAI,CAACE,GAAG,GAAGF,GAAAA,CAAIG,EAAE,CAAA;AACjB,QAAA,IAAI,CAACC,WAAW,GAAG7vB,MAAO8vB,CAAAA,QAAQ,CAACC,UAAU,CAAA;;AAlBpCR,IAAAA,IAAAA,MAAAA,GAAAA,aAAAA,CAAAA,SAAAA,CAAAA;AAqBXS,IAAAA,MAAAA,CAAAA,QAKC,GALDA,SAAAA,QAASC,CAAAA,aAA4B,EAAEnuB,KAAa,EAAA;AAClD,QAAA,IAAI,IAAI,CAACouB,UAAU,KAAKpuB,KAAO,EAAA;AAC7B,YAAA,IAAI,CAAC6tB,GAAG,CAACQ,SAAS,CAACF,aAAAA,CAAcG,QAAQ,EAAEtuB,KAAAA,CAAAA,CAAAA;YAC3C,IAAI,CAACouB,UAAU,GAAGpuB,KAAAA,CAAAA;AACpB,SAAA;AACF,KAAA,CAAA;AAEAuuB,IAAAA,MAAAA,CAAAA,SAEC,GAFDA,SAAAA,SAAUJ,CAAAA,aAA4B,EAAEnuB,KAAmB,EAAA;AACzD,QAAA,IAAI,CAAC6tB,GAAG,CAACW,UAAU,CAACL,aAAAA,CAAcG,QAAQ,EAAEtuB,KAAAA,CAAAA,CAAAA;AAC9C,KAAA,CAAA;AAEAyuB,IAAAA,MAAAA,CAAAA,QAuBC,GAvBDA,SAAAA,QAASN,CAAAA,aAA4B,EAAEnuB,KAA0C,EAAA;QAC/E,IAAMouB,UAAAA,GAAsB,IAAI,CAACA,UAAU,CAAA;AAC3C,QAAA,IAAI,KAAQpuB,CAAO0uB,CAAC,KAAK7xB,SAAW,EAAA;AAClC,YAAA,IAAIuxB,UAAWlnB,CAAAA,CAAC,KAAalH,KAAO0uB,CAAAA,CAAC,IAAIN,UAAAA,CAAWjnB,CAAC,KAAK,KAAQnH,CAAO2uB,CAAC,EAAE;AAC1E,gBAAA,IAAI,IAAI,CAACZ,WAAW,KAAKP,UAAAA,CAAWoB,MAAM,EAAE;oBAC1C,IAAI,CAACf,GAAG,CAACgB,SAAS,CAChBV,aAAcG,CAAAA,QAAQ,EACtBQ,gBAAMC,CAAAA,kBAAkB,CAAC,KAAQ/uB,CAAO0uB,CAAC,CACzCI,EAAAA,gBAAAA,CAAMC,kBAAkB,CAAS/uB,MAAO2uB,CAAC,CAAA,CAAA,CAAA;iBAEtC,MAAA;AACL,oBAAA,IAAI,CAACd,GAAG,CAACgB,SAAS,CAACV,aAAcG,CAAAA,QAAQ,EAAUtuB,KAAO0uB,CAAAA,CAAC,EAAU1uB,MAAO2uB,CAAC,CAAA,CAAA;AAC/E,iBAAA;AACAP,gBAAAA,UAAAA,CAAWlnB,CAAC,GAAG,KAAQlH,CAAO0uB,CAAC,CAAA;AAC/BN,gBAAAA,UAAAA,CAAWjnB,CAAC,GAAG,KAAQnH,CAAO2uB,CAAC,CAAA;AACjC,aAAA;SACK,MAAA;AACL,YAAA,IAAIP,UAAWlnB,CAAAA,CAAC,KAAelH,KAAOkH,CAAAA,CAAC,IAAIknB,UAAAA,CAAWjnB,CAAC,KAAK,KAAUnH,CAAOmH,CAAC,EAAE;AAC9E,gBAAA,IAAI,CAAC0mB,GAAG,CAACgB,SAAS,CAACV,aAAcG,CAAAA,QAAQ,EAAYtuB,KAAOkH,CAAAA,CAAC,EAAYlH,MAAOmH,CAAC,CAAA,CAAA;AACjFinB,gBAAAA,UAAAA,CAAWlnB,CAAC,GAAG,KAAUlH,CAAOkH,CAAC,CAAA;AACjCknB,gBAAAA,UAAAA,CAAWjnB,CAAC,GAAG,KAAUnH,CAAOmH,CAAC,CAAA;AACnC,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AAEA6nB,IAAAA,MAAAA,CAAAA,SAEC,GAFDA,SAAAA,SAAUb,CAAAA,aAA4B,EAAEnuB,KAAmB,EAAA;AACzD,QAAA,IAAI,CAAC6tB,GAAG,CAACoB,UAAU,CAACd,aAAAA,CAAcG,QAAQ,EAAEtuB,KAAAA,CAAAA,CAAAA;AAC9C,KAAA,CAAA;AAEAkvB,IAAAA,MAAAA,CAAAA,QA8BC,GA9BDA,SAAAA,QAASf,CAAAA,aAA4B,EAAEnuB,KAAgC,EAAA;QACrE,IAAMouB,UAAAA,GAAsB,IAAI,CAACA,UAAU,CAAA;AAC3C,QAAA,IAAI,KAAQpuB,CAAO0uB,CAAC,KAAK7xB,SAAW,EAAA;YAClC,IAAIuxB,UAAAA,CAAWlnB,CAAC,KAAalH,MAAO0uB,CAAC,IAAIN,WAAWjnB,CAAC,KAAK,KAAewnB,CAAAA,CAAC,IAAIP,UAAWjR,CAAAA,CAAC,KAAK,KAAQnd,CAAOmvB,CAAC,EAAE;AAC/G,gBAAA,IAAI,IAAI,CAACpB,WAAW,KAAKP,UAAAA,CAAWoB,MAAM,EAAE;oBAC1C,IAAI,CAACf,GAAG,CAACuB,SAAS,CAChBjB,aAAcG,CAAAA,QAAQ,EACtBQ,gBAAAA,CAAMC,kBAAkB,CAAC,KAAQ/uB,CAAO0uB,CAAC,CAAA,EACzCI,gBAAMC,CAAAA,kBAAkB,CAAS/uB,KAAO2uB,CAAAA,CAAC,CACzCG,EAAAA,gBAAAA,CAAMC,kBAAkB,CAAC,KAAQ/uB,CAAOmvB,CAAC,CAAA,CAAA,CAAA;iBAEtC,MAAA;AACL,oBAAA,IAAI,CAACtB,GAAG,CAACuB,SAAS,CAACjB,aAAAA,CAAcG,QAAQ,EAAUtuB,KAAO0uB,CAAAA,CAAC,EAAE,KAAQ1uB,CAAO2uB,CAAC,EAAU3uB,MAAOmvB,CAAC,CAAA,CAAA;AACjG,iBAAA;AACAf,gBAAAA,UAAAA,CAAWlnB,CAAC,GAAG,KAAQlH,CAAO0uB,CAAC,CAAA;AAC/BN,gBAAAA,UAAAA,CAAWjnB,CAAC,GAAG,KAAQnH,CAAO2uB,CAAC,CAAA;AAC/BP,gBAAAA,UAAAA,CAAWjR,CAAC,GAAG,KAAQnd,CAAOmvB,CAAC,CAAA;AACjC,aAAA;SACK,MAAA;YACL,IACEf,UAAAA,CAAWlnB,CAAC,KAAelH,MAAOkH,CAAC,IACnCknB,WAAWjnB,CAAC,KAAK,KAAiBA,CAAAA,CAAC,IACnCinB,UAAWjR,CAAAA,CAAC,KAAK,KAAUnd,CAAOmd,CAAC,EACnC;AACA,gBAAA,IAAI,CAAC0Q,GAAG,CAACuB,SAAS,CAACjB,aAAAA,CAAcG,QAAQ,EAAYtuB,KAAOkH,CAAAA,CAAC,EAAE,KAAUlH,CAAOmH,CAAC,EAAYnH,MAAOmd,CAAC,CAAA,CAAA;AACrGiR,gBAAAA,UAAAA,CAAWlnB,CAAC,GAAG,KAAUlH,CAAOkH,CAAC,CAAA;AACjCknB,gBAAAA,UAAAA,CAAWjnB,CAAC,GAAG,KAAUnH,CAAOmH,CAAC,CAAA;AACjCinB,gBAAAA,UAAAA,CAAWjR,CAAC,GAAG,KAAUnd,CAAOmd,CAAC,CAAA;AACnC,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AAEAkS,IAAAA,MAAAA,CAAAA,SAEC,GAFDA,SAAAA,SAAUlB,CAAAA,aAA4B,EAAEnuB,KAAmB,EAAA;AACzD,QAAA,IAAI,CAAC6tB,GAAG,CAACyB,UAAU,CAACnB,aAAAA,CAAcG,QAAQ,EAAEtuB,KAAAA,CAAAA,CAAAA;AAC9C,KAAA,CAAA;AAEAuvB,IAAAA,MAAAA,CAAAA,QAmDC,GAnDDA,SAAAA,QAASpB,CAAAA,aAA4B,EAAEnuB,KAAsB,EAAA;QAC3D,IAAMouB,UAAAA,GAAsB,IAAI,CAACA,UAAU,CAAA;AAC3C,QAAA,IAAI,KAAQpuB,CAAO0uB,CAAC,KAAK7xB,SAAW,EAAA;YAClC,IACEuxB,UAAAA,CAAWlnB,CAAC,KAAK,KAAQlH,CAAO0uB,CAAC,IACjCN,UAAWjnB,CAAAA,CAAC,KAAanH,KAAO2uB,CAAAA,CAAC,IACjCP,UAAAA,CAAWjR,CAAC,KAAK,KAAQnd,CAAOmvB,CAAC,IACjCf,UAAWplB,CAAAA,CAAC,KAAahJ,KAAOiY,CAAAA,CAAC,EACjC;AACA,gBAAA,IAAI,IAAI,CAAC8V,WAAW,KAAKP,UAAAA,CAAWoB,MAAM,EAAE;AAC1C,oBAAA,IAAI,CAACf,GAAG,CAAC2B,SAAS,CAChBrB,aAAAA,CAAcG,QAAQ,EACtBQ,gBAAMC,CAAAA,kBAAkB,CAAS/uB,MAAO0uB,CAAC,CAAA,EACzCI,gBAAMC,CAAAA,kBAAkB,CAAS/uB,KAAO2uB,CAAAA,CAAC,GACzCG,gBAAMC,CAAAA,kBAAkB,CAAS/uB,KAAOmvB,CAAAA,CAAC,CACzC,EAAQnvB,MAAOiY,CAAC,CAAA,CAAA;iBAEb,MAAA;oBACL,IAAI,CAAC4V,GAAG,CAAC2B,SAAS,CAChBrB,aAAcG,CAAAA,QAAQ,EACdtuB,KAAO0uB,CAAAA,CAAC,EAChB,KAAQ1uB,CAAO2uB,CAAC,EACR3uB,MAAOmvB,CAAC,EAChB,KAAQnvB,CAAOiY,CAAC,CAAA,CAAA;AAEpB,iBAAA;AACAmW,gBAAAA,UAAAA,CAAWlnB,CAAC,GAAG,KAAQlH,CAAO0uB,CAAC,CAAA;AAC/BN,gBAAAA,UAAAA,CAAWjnB,CAAC,GAAG,KAAQnH,CAAO2uB,CAAC,CAAA;AAC/BP,gBAAAA,UAAAA,CAAWjR,CAAC,GAAG,KAAQnd,CAAOmvB,CAAC,CAAA;AAC/Bf,gBAAAA,UAAAA,CAAWplB,CAAC,GAAG,KAAQhJ,CAAOiY,CAAC,CAAA;AACjC,aAAA;SACK,MAAA;YACL,IACEmW,UAAAA,CAAWlnB,CAAC,KAAK,KAAUlH,CAAOkH,CAAC,IACnCknB,UAAWjnB,CAAAA,CAAC,KAAenH,KAAOmH,CAAAA,CAAC,IACnCinB,UAAAA,CAAWjR,CAAC,KAAK,KAAUnd,CAAOmd,CAAC,IACnCiR,UAAWplB,CAAAA,CAAC,KAAehJ,KAAOgJ,CAAAA,CAAC,EACnC;gBACA,IAAI,CAAC6kB,GAAG,CAAC2B,SAAS,CAChBrB,aAAcG,CAAAA,QAAQ,EACZtuB,KAAOkH,CAAAA,CAAC,EAClB,KAAUlH,CAAOmH,CAAC,EACRnH,MAAOmd,CAAC,EAClB,KAAUnd,CAAOgJ,CAAC,CAAA,CAAA;AAEpBolB,gBAAAA,UAAAA,CAAWlnB,CAAC,GAAG,KAAUlH,CAAOkH,CAAC,CAAA;AACjCknB,gBAAAA,UAAAA,CAAWjnB,CAAC,GAAG,KAAUnH,CAAOmH,CAAC,CAAA;AACjCinB,gBAAAA,UAAAA,CAAWjR,CAAC,GAAG,KAAUnd,CAAOmd,CAAC,CAAA;AACjCiR,gBAAAA,UAAAA,CAAWplB,CAAC,GAAG,KAAUhJ,CAAOgJ,CAAC,CAAA;AACnC,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AAEAymB,IAAAA,MAAAA,CAAAA,SAEC,GAFDA,SAAAA,SAAUtB,CAAAA,aAA4B,EAAEnuB,KAAmB,EAAA;AACzD,QAAA,IAAI,CAAC6tB,GAAG,CAAC6B,UAAU,CAACvB,aAAAA,CAAcG,QAAQ,EAAEtuB,KAAAA,CAAAA,CAAAA;AAC9C,KAAA,CAAA;AAEA2vB,IAAAA,MAAAA,CAAAA,QAKC,GALDA,SAAAA,QAASxB,CAAAA,aAA4B,EAAEnuB,KAAa,EAAA;AAClD,QAAA,IAAI,IAAI,CAACouB,UAAU,KAAKpuB,KAAO,EAAA;AAC7B,YAAA,IAAI,CAAC6tB,GAAG,CAAC+B,SAAS,CAACzB,aAAAA,CAAcG,QAAQ,EAAEtuB,KAAAA,CAAAA,CAAAA;YAC3C,IAAI,CAACouB,UAAU,GAAGpuB,KAAAA,CAAAA;AACpB,SAAA;AACF,KAAA,CAAA;AAEA6vB,IAAAA,MAAAA,CAAAA,SAEC,GAFDA,SAAAA,SAAU1B,CAAAA,aAA4B,EAAEnuB,KAAiB,EAAA;AACvD,QAAA,IAAI,CAAC6tB,GAAG,CAACiC,UAAU,CAAC3B,aAAAA,CAAcG,QAAQ,EAAEtuB,KAAAA,CAAAA,CAAAA;AAC9C,KAAA,CAAA;AAEA+vB,IAAAA,MAAAA,CAAAA,QAeC,GAfDA,SAAAA,QAAS5B,CAAAA,aAA4B,EAAEnuB,KAA0C,EAAA;QAC/E,IAAMouB,UAAAA,GAAsB,IAAI,CAACA,UAAU,CAAA;AAC3C,QAAA,IAAI,KAAQpuB,CAAO0uB,CAAC,KAAK7xB,SAAW,EAAA;AAClC,YAAA,IAAIuxB,UAAWlnB,CAAAA,CAAC,KAAalH,KAAO0uB,CAAAA,CAAC,IAAIN,UAAAA,CAAWjnB,CAAC,KAAK,KAAQnH,CAAO2uB,CAAC,EAAE;AAC1E,gBAAA,IAAI,CAACd,GAAG,CAACmC,SAAS,CAAC7B,aAAcG,CAAAA,QAAQ,EAAUtuB,KAAO0uB,CAAAA,CAAC,EAAU1uB,MAAO2uB,CAAC,CAAA,CAAA;AAC7EP,gBAAAA,UAAAA,CAAWlnB,CAAC,GAAG,KAAQlH,CAAO0uB,CAAC,CAAA;AAC/BN,gBAAAA,UAAAA,CAAWjnB,CAAC,GAAG,KAAQnH,CAAO2uB,CAAC,CAAA;AACjC,aAAA;SACK,MAAA;AACL,YAAA,IAAIP,UAAWlnB,CAAAA,CAAC,KAAelH,KAAOkH,CAAAA,CAAC,IAAIknB,UAAAA,CAAWjnB,CAAC,KAAK,KAAUnH,CAAOmH,CAAC,EAAE;AAC9E,gBAAA,IAAI,CAAC0mB,GAAG,CAACmC,SAAS,CAAC7B,aAAcG,CAAAA,QAAQ,EAAYtuB,KAAOkH,CAAAA,CAAC,EAAYlH,MAAOmH,CAAC,CAAA,CAAA;AACjFinB,gBAAAA,UAAAA,CAAWlnB,CAAC,GAAG,KAAUlH,CAAOkH,CAAC,CAAA;AACjCknB,gBAAAA,UAAAA,CAAWjnB,CAAC,GAAG,KAAUnH,CAAOmH,CAAC,CAAA;AACnC,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AAEA8oB,IAAAA,MAAAA,CAAAA,SAEC,GAFDA,SAAAA,SAAU9B,CAAAA,aAA4B,EAAEnuB,KAAiB,EAAA;AACvD,QAAA,IAAI,CAAC6tB,GAAG,CAACqC,UAAU,CAAC/B,aAAAA,CAAcG,QAAQ,EAAEtuB,KAAAA,CAAAA,CAAAA;AAC9C,KAAA,CAAA;AAEAmwB,IAAAA,MAAAA,CAAAA,QAqBC,GArBDA,SAAAA,QAAShC,CAAAA,aAA4B,EAAEnuB,KAAgC,EAAA;QACrE,IAAMouB,UAAAA,GAAsB,IAAI,CAACA,UAAU,CAAA;AAC3C,QAAA,IAAI,KAAQpuB,CAAO0uB,CAAC,KAAK7xB,SAAW,EAAA;YAClC,IAAIuxB,UAAAA,CAAWlnB,CAAC,KAAalH,MAAO0uB,CAAC,IAAIN,WAAWjnB,CAAC,KAAK,KAAewnB,CAAAA,CAAC,IAAIP,UAAWjR,CAAAA,CAAC,KAAK,KAAQnd,CAAOmvB,CAAC,EAAE;AAC/G,gBAAA,IAAI,CAACtB,GAAG,CAACuC,SAAS,CAACjC,aAAAA,CAAcG,QAAQ,EAAUtuB,KAAO0uB,CAAAA,CAAC,EAAE,KAAQ1uB,CAAO2uB,CAAC,EAAU3uB,MAAOmvB,CAAC,CAAA,CAAA;AAC/Ff,gBAAAA,UAAAA,CAAWlnB,CAAC,GAAG,KAAQlH,CAAO0uB,CAAC,CAAA;AAC/BN,gBAAAA,UAAAA,CAAWjnB,CAAC,GAAG,KAAQnH,CAAO2uB,CAAC,CAAA;AAC/BP,gBAAAA,UAAAA,CAAWjR,CAAC,GAAG,KAAQnd,CAAOmvB,CAAC,CAAA;AACjC,aAAA;SACK,MAAA;YACL,IACEf,UAAAA,CAAWlnB,CAAC,KAAelH,MAAOkH,CAAC,IACnCknB,WAAWjnB,CAAC,KAAK,KAAiBA,CAAAA,CAAC,IACnCinB,UAAWjR,CAAAA,CAAC,KAAK,KAAUnd,CAAOmd,CAAC,EACnC;AACA,gBAAA,IAAI,CAAC0Q,GAAG,CAACuC,SAAS,CAACjC,aAAAA,CAAcG,QAAQ,EAAYtuB,KAAOkH,CAAAA,CAAC,EAAE,KAAUlH,CAAOmH,CAAC,EAAYnH,MAAOmd,CAAC,CAAA,CAAA;AACrGiR,gBAAAA,UAAAA,CAAWlnB,CAAC,GAAG,KAAUlH,CAAOkH,CAAC,CAAA;AACjCknB,gBAAAA,UAAAA,CAAWjnB,CAAC,GAAG,KAAUnH,CAAOmH,CAAC,CAAA;AACjCinB,gBAAAA,UAAAA,CAAWjR,CAAC,GAAG,KAAUnd,CAAOmd,CAAC,CAAA;AACnC,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AACAkT,IAAAA,MAAAA,CAAAA,SAEC,GAFDA,SAAAA,SAAUlC,CAAAA,aAA4B,EAAEnuB,KAAiB,EAAA;AACvD,QAAA,IAAI,CAAC6tB,GAAG,CAACyC,UAAU,CAACnC,aAAAA,CAAcG,QAAQ,EAAEtuB,KAAAA,CAAAA,CAAAA;AAC9C,KAAA,CAAA;AACAuwB,IAAAA,MAAAA,CAAAA,QAyCC,GAzCDA,SAAAA,QAASpC,CAAAA,aAA4B,EAAEnuB,KAAsB,EAAA;QAC3D,IAAMouB,UAAAA,GAAsB,IAAI,CAACA,UAAU,CAAA;AAC3C,QAAA,IAAI,KAAQpuB,CAAO0uB,CAAC,KAAK7xB,SAAW,EAAA;YAClC,IACEuxB,UAAAA,CAAWlnB,CAAC,KAAK,KAAQlH,CAAO0uB,CAAC,IACjCN,UAAWjnB,CAAAA,CAAC,KAAanH,KAAO2uB,CAAAA,CAAC,IACjCP,UAAAA,CAAWjR,CAAC,KAAK,KAAQnd,CAAOmvB,CAAC,IACjCf,UAAWplB,CAAAA,CAAC,KAAahJ,KAAOiY,CAAAA,CAAC,EACjC;gBACA,IAAI,CAAC4V,GAAG,CAAC2C,SAAS,CAChBrC,aAAcG,CAAAA,QAAQ,EACdtuB,KAAO0uB,CAAAA,CAAC,EAChB,KAAQ1uB,CAAO2uB,CAAC,EACR3uB,MAAOmvB,CAAC,EAChB,KAAQnvB,CAAOiY,CAAC,CAAA,CAAA;AAElBmW,gBAAAA,UAAAA,CAAWlnB,CAAC,GAAG,KAAQlH,CAAO0uB,CAAC,CAAA;AAC/BN,gBAAAA,UAAAA,CAAWjnB,CAAC,GAAG,KAAQnH,CAAO2uB,CAAC,CAAA;AAC/BP,gBAAAA,UAAAA,CAAWjR,CAAC,GAAG,KAAQnd,CAAOmvB,CAAC,CAAA;AAC/Bf,gBAAAA,UAAAA,CAAWplB,CAAC,GAAG,KAAQhJ,CAAOiY,CAAC,CAAA;AACjC,aAAA;SACK,MAAA;YACL,IACEmW,UAAAA,CAAWlnB,CAAC,KAAK,KAAUlH,CAAOkH,CAAC,IACnCknB,UAAWjnB,CAAAA,CAAC,KAAenH,KAAOmH,CAAAA,CAAC,IACnCinB,UAAAA,CAAWjR,CAAC,KAAK,KAAUnd,CAAOmd,CAAC,IACnCiR,UAAWplB,CAAAA,CAAC,KAAehJ,KAAOgJ,CAAAA,CAAC,EACnC;gBACA,IAAI,CAAC6kB,GAAG,CAAC2C,SAAS,CAChBrC,aAAcG,CAAAA,QAAQ,EACZtuB,KAAOkH,CAAAA,CAAC,EAClB,KAAUlH,CAAOmH,CAAC,EACRnH,MAAOmd,CAAC,EAClB,KAAUnd,CAAOgJ,CAAC,CAAA,CAAA;AAEpBolB,gBAAAA,UAAAA,CAAWlnB,CAAC,GAAG,KAAUlH,CAAOkH,CAAC,CAAA;AACjCknB,gBAAAA,UAAAA,CAAWjnB,CAAC,GAAG,KAAUnH,CAAOmH,CAAC,CAAA;AACjCinB,gBAAAA,UAAAA,CAAWjR,CAAC,GAAG,KAAUnd,CAAOmd,CAAC,CAAA;AACjCiR,gBAAAA,UAAAA,CAAWplB,CAAC,GAAG,KAAUhJ,CAAOgJ,CAAC,CAAA;AACnC,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AAEAynB,IAAAA,MAAAA,CAAAA,SAEC,GAFDA,SAAAA,SAAUtC,CAAAA,aAA4B,EAAEnuB,KAAiB,EAAA;AACvD,QAAA,IAAI,CAAC6tB,GAAG,CAAC6C,UAAU,CAACvC,aAAAA,CAAcG,QAAQ,EAAEtuB,KAAAA,CAAAA,CAAAA;AAC9C,KAAA,CAAA;AAEA2wB,IAAAA,MAAAA,CAAAA,UAEC,GAFDA,SAAAA,UAAWxC,CAAAA,aAA4B,EAAEnuB,KAAa,EAAA;QACpD,IAAI,CAAC6tB,GAAG,CAAC+C,gBAAgB,CAACzC,cAAcG,QAAQ,EAAE,KAAOtuB,EAAAA,KAAAA,CAAM2V,QAAQ,CAAA,CAAA;AACzE,KAAA,CAAA;AAEAkb,IAAAA,MAAAA,CAAAA,WAEC,GAFDA,SAAAA,WAAY1C,CAAAA,aAA4B,EAAEnuB,KAAmB,EAAA;QAC3D,IAAI,CAAC6tB,GAAG,CAAC+C,gBAAgB,CAACzC,aAAcG,CAAAA,QAAQ,EAAE,KAAOtuB,EAAAA,KAAAA,CAAAA,CAAAA;AAC3D,KAAA,CAAA;AAEA8wB,IAAAA,MAAAA,CAAAA,aAMC,GANDA,SAAAA,aAAc3C,CAAAA,aAA4B,EAAEnuB,KAAc,EAAA;QACxD,IAAM2tB,GAAAA,GAAM,IAAI,CAACC,IAAI,CAAA;QACrBD,GAAIoD,CAAAA,aAAa,CAAC5C,aAAAA,CAAc6C,YAAY,CAAA,CAAA;QAC5CrD,GAAIsD,CAAAA,WAAW,CAACjxB,KAAAA,CAAMuC,gBAAgB,CAAA,CAAA;QAEtCvC,KAAMwC,CAAAA,uBAAuB,CAAC2rB,aAAAA,CAAcT,qBAAqB,CAAA,CAAA;AACnE,KAAA,CAAA;AAEAwD,IAAAA,MAAAA,CAAAA,kBASC,GATDA,SAAAA,kBAAmB/C,CAAAA,aAA4B,EAAEnuB,KAAgB,EAAA;QAC/D,IAAM2tB,GAAAA,GAAM,IAAI,CAACC,IAAI,CAAA;QACrB,IAAMuD,cAAAA,GAAiBhD,cAAc6C,YAAY,CAAA;AACjD,QAAA,IAAK,IAAIrzB,CAAI,GAAA,CAAA,EAAGA,IAAIqC,KAAMzC,CAAAA,MAAM,EAAEI,CAAK,EAAA,CAAA;YACrC,IAAMxD,OAAAA,GAAU6F,KAAK,CAACrC,CAAE,CAAA,CAAA;AACxBgwB,YAAAA,GAAAA,CAAIoD,aAAa,CAACI,cAAc,CAACxzB,CAAE,CAAA,CAAA,CAAA;YACnCgwB,GAAIsD,CAAAA,WAAW,CAAC92B,OAAAA,CAAQoI,gBAAgB,CAAA,CAAA;YACxCpI,OAAQqI,CAAAA,uBAAuB,CAAC2rB,aAAAA,CAAcT,qBAAqB,CAAA,CAAA;AACrE,SAAA;AACF,KAAA,CAAA;AA3RWD,IAAAA,OAAAA,aAAAA,CAAAA;AA4RZ,CAAA,EAAA;;ACrSD;;;AAGC,IACM,IAAA,kBAAM2D,GAAN,SAAMA,kBAAAA,GAAAA;AACFC,IAAAA,IAAAA,CAAAA,aAAAA,GAAiC,EAAE,CAAA;AACnCC,IAAAA,IAAAA,CAAAA,eAAAA,GAAmC,EAAE,CAAA;AAC/C,CAAA;;ACTD;;IAGO,IAAKC,eAAAA,iBAAAA,SAAAA,eAAAA,EAAAA;wBACO,eAAA,CAAA,eAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA,CAAA;yBAEC,eAAA,CAAA,eAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;2BAEE,eAAA,CAAA,eAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA,CAAA;2BAEA,eAAA,CAAA,eAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA,CAAA;iCAEM,eAAA,CAAA,eAAA,CAAA,eAAA,CAAA,GAAA,CAAA,CAAA,GAAA,eAAA,CAAA;AAThBA,IAAAA,OAAAA,eAAAA,CAAAA;AAWX,CAAA,CAAA,EAAA,CAAA;;ACHD;;;IAIO,IAAMC,aAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,aAAAA,CAuDCtzB,MAAc,EAAEuzB,YAAoB,EAAEC,cAAsB,EAAA;AAlC/DC,QAAAA,IAAAA,CAAAA,iBAAAA,GAAwC,IAAIP,kBAAAA,EAAAA,CAAAA;AAC5CQ,QAAAA,IAAAA,CAAAA,kBAAAA,GAAyC,IAAIR,kBAAAA,EAAAA,CAAAA;AAC7CS,QAAAA,IAAAA,CAAAA,oBAAAA,GAA2C,IAAIT,kBAAAA,EAAAA,CAAAA;AAC/CU,QAAAA,IAAAA,CAAAA,oBAAAA,GAA2C,IAAIV,kBAAAA,EAAAA,CAAAA;AAC/CW,QAAAA,IAAAA,CAAAA,yBAAAA,GAAgD,IAAIX,kBAAAA,EAAAA,CAAAA;AACpDY,QAAAA,IAAAA,CAAAA,iBAAAA,GAAwC,IAAIZ,kBAAAA,EAAAA,CAAAA;yBAEvC,IAAA,CACda,qBAA6B,CAAC,CAAA,CAAA;yBAChB,IAAA,CACdC,iBAAyB,CAAC,CAAA,CAAA;yBACZ,IAAA,CACdC,kBAA0B,CAAC,CAAA,CAAA;yBACb,IAAA,CACdC,oBAA4B,CAAC,CAAA,CAAA;yBACf,IAAA,CACdC,oBAA4B,CAAC,CAAA,CAAA;aAE7BC,iBAA2C92B,GAAAA,MAAAA,CAAOC,MAAM,CAAC,IAAA,CAAA,CAAA;aAOjD82B,kBAA6B,GAAA,CAAA,CAAA;QAUnC,IAAI,CAACj0B,OAAO,GAAGJ,MAAAA,CAAAA;AACf,QAAA,IAAI,CAAC2vB,GAAG,GAAG3vB,MAAOiF,CAAAA,iBAAiB,CAAC2qB,EAAE,CAAA;AACtC,QAAA,IAAI,CAAC0E,UAAU,GAAG,IAAI,CAACC,cAAc,CAAChB,YAAcC,EAAAA,cAAAA,CAAAA,CAAAA;QAEpD,IAAI,IAAI,CAACc,UAAU,EAAE;YACnB,IAAI,CAACE,QAAQ,GAAG,IAAA,CAAA;AAChB,YAAA,IAAI,CAACC,eAAe,EAAA,CAAA;SACf,MAAA;YACL,IAAI,CAACD,QAAQ,GAAG,KAAA,CAAA;AAClB,SAAA;AAEA,QAAA,IAAI,CAACE,EAAE,GAnEEpB,cAmEeqB,QAAQ,EAAA,CAAA;;AAnEvBrB,IAAAA,IAAAA,MAAAA,GAAAA,aAAAA,CAAAA,SAAAA,CAAAA;AAsEX;;;;AAIC,MACDsB,OAAAA,SAGC,GAHDA,SAAAA,SAAUC,CAAAA,YAAgC,EAAEhN,UAAsB,EAAA;QAChE,IAAI,CAACiN,cAAc,CAACD,YAAchN,EAAAA,UAAAA,CAAAA,CAAAA;QAClC,IAAI,CAACkN,cAAc,CAACF,YAAchN,EAAAA,UAAAA,CAAAA,CAAAA;AACpC,KAAA,CAAA;AAEA;;;;AAIC,MACDiN,OAAAA,cASC,GATDA,SAAAA,cAAeD,CAAAA,YAAgC,EAAEhN,UAAsB,EAAA;QACrE,IAAMmN,gBAAAA,GAAmBnN,WAAWoN,iBAAiB,CAAA;QACrD,IAAM9B,aAAAA,GAAgB0B,aAAa1B,aAAa,CAAA;QAEhD,IAAK,IAAI1zB,IAAI,CAAG0B,EAAAA,CAAAA,GAAIgyB,cAAc9zB,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;YACpD,IAAMy1B,OAAAA,GAAU/B,aAAa,CAAC1zB,CAAE,CAAA,CAAA;AAChC,YAAA,IAAMuL,IAAOgqB,GAAAA,gBAAgB,CAACE,OAAAA,CAAQC,UAAU,CAAC,CAAA;AACjDnqB,YAAAA,IAAAA,IAAQ,IAAQkqB,IAAAA,OAAAA,CAAQE,SAAS,CAACF,OAASlqB,EAAAA,IAAAA,CAAAA,CAAAA;AAC7C,SAAA;AACF,KAAA,CAAA;AAEA;;;;AAIC,MACD+pB,OAAAA,cAeC,GAfDA,SAAAA,cAAeF,CAAAA,YAAgC,EAAEhN,UAAsB,EAAA;QACrE,IAAMmN,gBAAAA,GAAmBnN,WAAWoN,iBAAiB,CAAA;QACrD,IAAM7B,eAAAA,GAAkByB,aAAazB,eAAe,CAAA;;AAEpD,QAAA,IAAIA,eAAiB,EAAA;YACnB,IAAK,IAAI3zB,IAAI,CAAG0B,EAAAA,CAAAA,GAAIiyB,gBAAgB/zB,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;gBACtD,IAAMy1B,OAAAA,GAAU9B,eAAe,CAAC3zB,CAAE,CAAA,CAAA;AAClC,gBAAA,IAAMxD,OAAmB+4B,GAAAA,gBAAgB,CAACE,OAAAA,CAAQC,UAAU,CAAC,CAAA;AAC7D,gBAAA,IAAIl5B,OAAW,IAAA,CAACA,OAAQyE,CAAAA,SAAS,EAAE;oBACjCw0B,OAAQE,CAAAA,SAAS,CAACF,OAASj5B,EAAAA,OAAAA,CAAAA,CAAAA;iBACtB,MAAA;AACLi5B,oBAAAA,OAAAA,CAAQE,SAAS,CAACF,OAASA,EAAAA,OAAAA,CAAQG,cAAc,CAAA,CAAA;AACnD,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AAEA;;MAGAC,MAAAA,CAAAA,qBASC,GATDA,SAAAA,qBAAAA,GAAAA;AACE,QAAA,IAAMlC,eAAkB,GAAA,IAAI,CAACU,iBAAiB,CAACV,eAAe,CAAA;;AAE9D,QAAA,IAAIA,eAAiB,EAAA;YACnB,IAAK,IAAI3zB,IAAI,CAAG0B,EAAAA,CAAAA,GAAIiyB,gBAAgB/zB,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;gBACtD,IAAMy1B,OAAAA,GAAU9B,eAAe,CAAC3zB,CAAE,CAAA,CAAA;AAClCy1B,gBAAAA,OAAAA,CAAQE,SAAS,CAACF,OAASA,EAAAA,OAAAA,CAAQG,cAAc,CAAA,CAAA;AACnD,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AAEA;;MAGAE,MAAAA,CAAAA,yBAIC,GAJDA,SAAAA,yBAAAA,GAAAA;QACE,IAA2C,uBAAA,GAAA,IAAI,CAACzB,iBAAiB,EAAzDX,aAAmC,GAAA,uBAAA,CAAnCA,aAAeC,EAAAA,eAAAA,GAAoB,uBAApBA,CAAAA,eAAAA,CAAAA;AACvBD,QAAAA,aAAAA,CAAc9zB,MAAM,GAAG,CAAA,IAAK,IAAI,CAACm2B,yBAAyB,CAACrC,aAAe,EAAA,KAAA,CAAA,CAAA;AAC1EC,QAAAA,eAAAA,CAAgB/zB,MAAM,GAAG,CAAA,IAAK,IAAI,CAACm2B,yBAAyB,CAACpC,eAAiB,EAAA,IAAA,CAAA,CAAA;AAChF,KAAA,CAAA;AAEA;;;MAIA7vB,MAAAA,CAAAA,IASC,GATDA,SAAAA,IAAAA,GAAAA;AACE,QAAA,IAAMksB,GAAyB,GAAA,IAAI,CAACrvB,OAAO,CAAC6E,iBAAiB,CAAA;AAC7D,QAAA,IAAIwqB,GAAIgG,CAAAA,yBAAyB,KAAK,IAAI,EAAE;AAC1C,YAAA,IAAI,CAAC9F,GAAG,CAAC+F,UAAU,CAAC,IAAI,CAACpB,UAAU,CAAA,CAAA;YACnC7E,GAAIgG,CAAAA,yBAAyB,GAAG,IAAI,CAAA;YACpC,OAAO,IAAA,CAAA;SACF,MAAA;YACL,OAAO,KAAA,CAAA;AACT,SAAA;AACF,KAAA,CAAA;AAEA;;MAGAp1B,MAAAA,CAAAA,OAGC,GAHDA,SAAAA,OAAAA,GAAAA;QACE,IAAMuvB,EAAAA,GAAK,IAAI,CAACD,GAAG,CAAA;QACnB,IAAI,CAAC2E,UAAU,IAAI1E,EAAAA,CAAG+F,aAAa,CAAC,IAAI,CAACrB,UAAU,CAAA,CAAA;AACrD,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQkB,yBASP,GATD,SAAQA,yBAA0BI,CAAAA,QAAyB,EAAEC,SAAkB,EAAA;QAC7E,IAAK,IAAIp2B,IAAIm2B,QAASv2B,CAAAA,MAAM,GAAG,CAAGI,EAAAA,CAAAA,IAAK,GAAGA,CAAK,EAAA,CAAA;YAC7C,IAAMy1B,OAAAA,GAAUU,QAAQ,CAACn2B,CAAE,CAAA,CAAA;AAC3B,YAAA,IAAMq2B,KAAQhQ,GAAAA,cAAAA,CAAeO,uBAAuB,CAAC6O,QAAQrhB,IAAI,CAAA,CAAA;AACjE,YAAA,IAAIiiB,UAAUn3B,SAAW,EAAA;AACvBi3B,gBAAAA,QAAAA,CAASj0B,MAAM,CAACi0B,QAASl0B,CAAAA,OAAO,CAACwzB,OAAU,CAAA,EAAA,CAAA,CAAA,CAAA;AAC3C,gBAAA,IAAI,CAACa,gBAAgB,CAACb,OAAAA,EAASY,KAAOD,EAAAA,SAAAA,CAAAA,CAAAA;AACxC,aAAA;AACF,SAAA;AACF,KAAA,CAAA;IAEA,MAAQE,CAAAA,gBA4CP,GA5CD,SAAQA,gBAAAA,CAAiBb,OAAsB,EAAEY,KAAsB,EAAED,SAAkB,EAAA;QACzF,OAAQC,KAAAA;AACN,YAAA,KAAKzC,gBAAgB2C,KAAK;AACxB,gBAAA,IAAIH,SAAW,EAAA;AACb,oBAAA,IAAI,CAACpC,iBAAiB,CAACL,eAAe,CAAC7xB,IAAI,CAAC2zB,OAAAA,CAAAA,CAAAA;iBACvC,MAAA;AACL,oBAAA,IAAI,CAACzB,iBAAiB,CAACN,aAAa,CAAC5xB,IAAI,CAAC2zB,OAAAA,CAAAA,CAAAA;AAC5C,iBAAA;AACA,gBAAA,MAAA;AACF,YAAA,KAAK7B,gBAAgB4C,MAAM;AACzB,gBAAA,IAAIJ,SAAW,EAAA;AACb,oBAAA,IAAI,CAACnC,kBAAkB,CAACN,eAAe,CAAC7xB,IAAI,CAAC2zB,OAAAA,CAAAA,CAAAA;iBACxC,MAAA;AACL,oBAAA,IAAI,CAACxB,kBAAkB,CAACP,aAAa,CAAC5xB,IAAI,CAAC2zB,OAAAA,CAAAA,CAAAA;AAC7C,iBAAA;AACA,gBAAA,MAAA;AACF,YAAA,KAAK7B,gBAAgB6C,QAAQ;AAC3B,gBAAA,IAAIL,SAAW,EAAA;AACb,oBAAA,IAAI,CAAClC,oBAAoB,CAACP,eAAe,CAAC7xB,IAAI,CAAC2zB,OAAAA,CAAAA,CAAAA;iBAC1C,MAAA;AACL,oBAAA,IAAI,CAACvB,oBAAoB,CAACR,aAAa,CAAC5xB,IAAI,CAAC2zB,OAAAA,CAAAA,CAAAA;AAC/C,iBAAA;AACA,gBAAA,MAAA;AACF,YAAA,KAAK7B,gBAAgB8C,QAAQ;AAC3B,gBAAA,IAAIN,SAAW,EAAA;AACb,oBAAA,IAAI,CAACjC,oBAAoB,CAACR,eAAe,CAAC7xB,IAAI,CAAC2zB,OAAAA,CAAAA,CAAAA;iBAC1C,MAAA;AACL,oBAAA,IAAI,CAACtB,oBAAoB,CAACT,aAAa,CAAC5xB,IAAI,CAAC2zB,OAAAA,CAAAA,CAAAA;AAC/C,iBAAA;AACA,gBAAA,MAAA;AACF,YAAA,KAAK7B,gBAAgB+C,aAAa;AAChC,gBAAA,IAAIP,SAAW,EAAA;AACb,oBAAA,IAAI,CAAChC,yBAAyB,CAACT,eAAe,CAAC7xB,IAAI,CAAC2zB,OAAAA,CAAAA,CAAAA;iBAC/C,MAAA;AACL,oBAAA,IAAI,CAACrB,yBAAyB,CAACV,aAAa,CAAC5xB,IAAI,CAAC2zB,OAAAA,CAAAA,CAAAA;AACpD,iBAAA;AACA,gBAAA,MAAA;AACF,YAAA;AACE,gBAAA,IAAIW,SAAW,EAAA;AACb,oBAAA,IAAI,CAAC/B,iBAAiB,CAACV,eAAe,CAAC7xB,IAAI,CAAC2zB,OAAAA,CAAAA,CAAAA;iBACvC,MAAA;AACL,oBAAA,IAAI,CAACpB,iBAAiB,CAACX,aAAa,CAAC5xB,IAAI,CAAC2zB,OAAAA,CAAAA,CAAAA;AAC5C,iBAAA;AACJ,SAAA;AACF,KAAA,CAAA;AAEA;;AAEC,MACD,OAAQX,cAyCP,GAzCD,SAAQA,cAAehB,CAAAA,YAAoB,EAAEC,cAAsB,EAAA;QACjE,IAAM5D,EAAAA,GAAK,IAAI,CAACD,GAAG,CAAA;;AAGnB,QAAA,IAAM0G,eAAe,IAAI,CAACC,aAAa,CAAC1G,EAAAA,CAAG2G,aAAa,EAAEhD,YAAAA,CAAAA,CAAAA;AAC1D,QAAA,IAAI,CAAC8C,YAAc,EAAA;YACjB,OAAO,IAAA,CAAA;AACT,SAAA;AAEA,QAAA,IAAMpI,iBAAiB,IAAI,CAACqI,aAAa,CAAC1G,EAAAA,CAAG4G,eAAe,EAAEhD,cAAAA,CAAAA,CAAAA;AAC9D,QAAA,IAAI,CAACvF,cAAgB,EAAA;YACnB,OAAO,IAAA,CAAA;AACT,SAAA;;QAGA,IAAMwI,OAAAA,GAAU7G,GAAG8G,aAAa,EAAA,CAAA;AAChC,QAAA,IAAI,CAACD,OAAS,EAAA;AACZpzB,YAAAA,OAAAA,CAAQI,IAAI,CAAC,oCAAA,CAAA,CAAA;YACb,OAAO,IAAA,CAAA;AACT,SAAA;QAEAmsB,EAAG+G,CAAAA,YAAY,CAACF,OAASJ,EAAAA,YAAAA,CAAAA,CAAAA;QACzBzG,EAAG+G,CAAAA,YAAY,CAACF,OAASxI,EAAAA,cAAAA,CAAAA,CAAAA;AACzB2B,QAAAA,EAAAA,CAAGgH,WAAW,CAACH,OAAAA,CAAAA,CAAAA;AACf7G,QAAAA,EAAAA,CAAGiH,eAAe,CAACJ,OAAAA,CAAAA,CAAAA;AAEnB7G,QAAAA,EAAAA,CAAGkH,YAAY,CAACT,YAAAA,CAAAA,CAAAA;AAChBzG,QAAAA,EAAAA,CAAGkH,YAAY,CAAC7I,cAAAA,CAAAA,CAAAA;AAEhB,QAAA,IAAItqB,MAAOC,CAAAA,SAAS,IAAI,CAACgsB,GAAGmH,mBAAmB,CAACN,OAAS7G,EAAAA,EAAAA,CAAGoH,WAAW,CAAA,IAAK,CAACpH,EAAAA,CAAGqH,aAAa,EAAI,EAAA;AAC/FtzB,YAAAA,MAAAA,CAAOD,KAAK,CACV,kCAAC,IACE,gBAAgBksB,GAAAA,EAAAA,CAAGsH,QAAQ,EAAA,GAAG,MAAI,CAAA,IACnC,mBAAC,GAAmBtH,EAAGmH,CAAAA,mBAAmB,CAACN,OAAAA,EAAS7G,EAAGuH,CAAAA,eAAe,CAAE,GAAA,MAAI,CAC5E,IAAA,2BAAC,GAA2BvH,EAAGwH,CAAAA,iBAAiB,CAACX,OAAS,CAAA,CAAA,CAAA,CAAA;AAE9D7G,YAAAA,EAAAA,CAAG+F,aAAa,CAACc,OAAAA,CAAAA,CAAAA;YACjB,OAAO,IAAA,CAAA;AACT,SAAA;QAEA,OAAOA,OAAAA,CAAAA;AACT,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQH,aAwBP,GAxBD,SAAQA,aAAce,CAAAA,UAAkB,EAAEC,YAAoB,EAAA;QAC5D,IAAM1H,EAAAA,GAAK,IAAI,CAACD,GAAG,CAAA;QACnB,IAAM/B,MAAAA,GAASgC,EAAG2H,CAAAA,YAAY,CAACF,UAAAA,CAAAA,CAAAA;AAE/B,QAAA,IAAI,CAACzJ,MAAQ,EAAA;AACXvqB,YAAAA,OAAAA,CAAQI,IAAI,CAAC,mCAAA,CAAA,CAAA;YACb,OAAO,IAAA,CAAA;AACT,SAAA;QAEAmsB,EAAG0H,CAAAA,YAAY,CAAC1J,MAAQ0J,EAAAA,YAAAA,CAAAA,CAAAA;AACxB1H,QAAAA,EAAAA,CAAG4H,aAAa,CAAC5J,MAAAA,CAAAA,CAAAA;AAEjB,QAAA,IAAIjqB,MAAOC,CAAAA,SAAS,IAAI,CAACgsB,GAAG6H,kBAAkB,CAAC7J,MAAQgC,EAAAA,EAAAA,CAAG8H,cAAc,CAAA,IAAK,CAAC9H,EAAAA,CAAGqH,aAAa,EAAI,EAAA;AAChG5zB,YAAAA,OAAAA,CAAQI,IAAI,CACV,oCAAC,IACC,eAAC,IAAe4zB,UAAAA,IAAczH,EAAG2G,CAAAA,aAAa,GAAG,QAAA,GAAW,UAAS,CAAE,GAAA,MAAI,CAC3E,IAAA,2BAAC,GAA2B3G,EAAG+H,CAAAA,gBAAgB,CAAC/J,MAAQ,CAAA,GAAA,IAAE,CAC1D,IAAA,kBAAmB0F,GA5RhBA,aA4R8BsE,CAAAA,WAAW,CAACN,YAAc,CAAA,CAAA,CAAA,CAAA;AAE/D1H,YAAAA,EAAAA,CAAGkH,YAAY,CAAClJ,MAAAA,CAAAA,CAAAA;YAChB,OAAO,IAAA,CAAA;AACT,SAAA;QAEA,OAAOA,MAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;MAGA,MAAA,CAAQ6G,eA2JP,GA3JD,SAAQA,eAAAA,GAAAA;;QACN,IAAM7E,EAAAA,GAAK,IAAI,CAACD,GAAG,CAAA;QACnB,IAAM8G,OAAAA,GAAU,IAAI,CAACnC,UAAU,CAAA;QAC/B,IAAMuD,YAAAA,GAAe,IAAI,CAACC,gBAAgB,EAAA,CAAA;QAC1C,IAAMC,cAAAA,GAAiB,IAAI,CAACC,kBAAkB,EAAA,CAAA;AAC9C,QAAA,IAAMC,cAAiB,GAAA,IAAI,CAAC73B,OAAO,CAAC83B,eAAe,CAAA;AAEnDL,QAAAA,YAAAA,CAAarJ,OAAO,CAAC,SAAA,KAAA,EAAA;gBAAG3a,IAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAMvO,IAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAM5H,IAAAA,GAAAA,KAAAA,CAAAA,IAAAA,CAAAA;AAClC,YAAA,IAAMuyB,aAAgB,GAAA,IAAIV,aAAc,CAAA,KAAA,CAAKnvB,OAAO,CAAA,CAAA;AACpD,YAAA,IAAI2kB,OAAU,GAAA,KAAA,CAAA;AACd,YAAA,IAAI8Q,SAAY,GAAA,KAAA,CAAA;AAEhB,YAAA,IAAIhiB,IAAKnS,CAAAA,OAAO,CAAC,KAAA,CAAA,GAAS,CAAG,EAAA;AAC3BmS,gBAAAA,IAAAA,GAAOA,KAAKskB,MAAM,CAAC,CAAGtkB,EAAAA,IAAAA,CAAKxU,MAAM,GAAG,CAAA,CAAA,CAAA;gBACpC0lB,OAAU,GAAA,IAAA,CAAA;AACZ,aAAA;AAEA,YAAA,IAAMqL,QAAWR,GAAAA,EAAAA,CAAGwI,kBAAkB,CAAC3B,OAAS5iB,EAAAA,IAAAA,CAAAA,CAAAA;AAChDoc,YAAAA,aAAAA,CAAcpc,IAAI,GAAGA,IAAAA,CAAAA;AACrBoc,YAAAA,aAAAA,CAAckF,UAAU,GAAGrP,cAAAA,CAAezD,SAAS,CAACxO,MAAMkS,SAAS,CAAA;AACnEkK,YAAAA,aAAAA,CAAcG,QAAQ,GAAGA,QAAAA,CAAAA;YAEzB,OAAQ1yB,IAAAA;AACN,gBAAA,KAAKkyB,GAAGyI,KAAK;AACX,oBAAA,IAAItT,OAAS,EAAA;wBACXkL,aAAcmF,CAAAA,SAAS,GAAGnF,aAAAA,CAAcI,SAAS,CAAA;qBAC5C,MAAA;wBACLJ,aAAcmF,CAAAA,SAAS,GAAGnF,aAAAA,CAAcD,QAAQ,CAAA;AAChDC,wBAAAA,aAAAA,CAAcC,UAAU,GAAG,CAAA,CAAA;AAC7B,qBAAA;AACA,oBAAA,MAAA;AACF,gBAAA,KAAKN,GAAG0I,UAAU;AAChB,oBAAA,IAAIvT,OAAS,EAAA;wBACXkL,aAAcmF,CAAAA,SAAS,GAAGnF,aAAAA,CAAca,SAAS,CAAA;qBAC5C,MAAA;wBACLb,aAAcmF,CAAAA,SAAS,GAAGnF,aAAAA,CAAcM,QAAQ,CAAA;AAChDN,wBAAAA,aAAAA,CAAcC,UAAU,GAAG,IAAIzkB,kBAAAA,CAAQ,CAAG,EAAA,CAAA,CAAA,CAAA;AAC5C,qBAAA;AACA,oBAAA,MAAA;AACF,gBAAA,KAAKmkB,GAAG2I,UAAU;AAChB,oBAAA,IAAIxT,OAAS,EAAA;wBACXkL,aAAcmF,CAAAA,SAAS,GAAGnF,aAAAA,CAAckB,SAAS,CAAA;qBAC5C,MAAA;wBACLlB,aAAcmF,CAAAA,SAAS,GAAGnF,aAAAA,CAAce,QAAQ,CAAA;AAChDf,wBAAAA,aAAAA,CAAcC,UAAU,GAAG,IAAIsI,kBAAAA,CAAQ,GAAG,CAAG,EAAA,CAAA,CAAA,CAAA;AAC/C,qBAAA;AACA,oBAAA,MAAA;AACF,gBAAA,KAAK5I,GAAG6I,UAAU;AAChB,oBAAA,IAAI1T,OAAS,EAAA;wBACXkL,aAAcmF,CAAAA,SAAS,GAAGnF,aAAAA,CAAcsB,SAAS,CAAA;qBAC5C,MAAA;wBACLtB,aAAcmF,CAAAA,SAAS,GAAGnF,aAAAA,CAAcoB,QAAQ,CAAA;AAChDpB,wBAAAA,aAAAA,CAAcC,UAAU,GAAG,IAAIn0B,kBAAQ,CAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,CAAA,CAAA;AAClD,qBAAA;AACA,oBAAA,MAAA;AACF,gBAAA,KAAK6zB,GAAG8I,IAAI,CAAA;AACZ,gBAAA,KAAK9I,GAAG+I,GAAG;AACT,oBAAA,IAAI5T,OAAS,EAAA;wBACXkL,aAAcmF,CAAAA,SAAS,GAAGnF,aAAAA,CAAc0B,SAAS,CAAA;qBAC5C,MAAA;wBACL1B,aAAcmF,CAAAA,SAAS,GAAGnF,aAAAA,CAAcwB,QAAQ,CAAA;AAChDxB,wBAAAA,aAAAA,CAAcC,UAAU,GAAG,CAAA,CAAA;AAC7B,qBAAA;AACA,oBAAA,MAAA;AACF,gBAAA,KAAKN,GAAGgJ,SAAS,CAAA;AACjB,gBAAA,KAAKhJ,GAAGiJ,QAAQ;AACd,oBAAA,IAAI9T,OAAS,EAAA;wBACXkL,aAAcmF,CAAAA,SAAS,GAAGnF,aAAAA,CAAc8B,SAAS,CAAA;qBAC5C,MAAA;wBACL9B,aAAcmF,CAAAA,SAAS,GAAGnF,aAAAA,CAAc4B,QAAQ,CAAA;AAChD5B,wBAAAA,aAAAA,CAAcC,UAAU,GAAG,IAAIzkB,kBAAAA,CAAQ,CAAG,EAAA,CAAA,CAAA,CAAA;AAC5C,qBAAA;AACA,oBAAA,MAAA;AACF,gBAAA,KAAKmkB,GAAGkJ,SAAS,CAAA;AACjB,gBAAA,KAAKlJ,GAAGmJ,QAAQ;AACd,oBAAA,IAAIhU,OAAS,EAAA;wBACXkL,aAAcmF,CAAAA,SAAS,GAAGnF,aAAAA,CAAckC,SAAS,CAAA;qBAC5C,MAAA;wBACLlC,aAAcmF,CAAAA,SAAS,GAAGnF,aAAAA,CAAcgC,QAAQ,CAAA;AAChDhC,wBAAAA,aAAAA,CAAcC,UAAU,GAAG,IAAIsI,kBAAAA,CAAQ,GAAG,CAAG,EAAA,CAAA,CAAA,CAAA;AAC/C,qBAAA;AACA,oBAAA,MAAA;AACF,gBAAA,KAAK5I,GAAGoJ,SAAS,CAAA;AACjB,gBAAA,KAAKpJ,GAAGqJ,QAAQ;AACd,oBAAA,IAAIlU,OAAS,EAAA;wBACXkL,aAAcmF,CAAAA,SAAS,GAAGnF,aAAAA,CAAcsC,SAAS,CAAA;qBAC5C,MAAA;wBACLtC,aAAcmF,CAAAA,SAAS,GAAGnF,aAAAA,CAAcoC,QAAQ,CAAA;AAChDpC,wBAAAA,aAAAA,CAAcC,UAAU,GAAG,IAAIn0B,kBAAAA,CAAQ,GAAG,CAAG,EAAA,CAAA,CAAA,CAAA;AAC/C,qBAAA;AACA,oBAAA,MAAA;AACF,gBAAA,KAAK6zB,GAAGsJ,UAAU;AAChBjJ,oBAAAA,aAAAA,CAAcmF,SAAS,GAAGrQ,OAAAA,GAAUkL,cAAc0C,WAAW,GAAG1C,cAAcwC,UAAU,CAAA;AACxF,oBAAA,MAAA;AACF,gBAAA,KAAK7C,GAAGuJ,UAAU,CAAA;AAClB,gBAAA,KAAKvJ,GAAGwJ,YAAY,CAAA;gBACpB,KAA8BxJ,GAAIyJ,uBAAuB,CAAA;gBACzD,KAA8BzJ,GAAI0J,gBAAgB,CAAA;gBAClD,KAA8B1J,GAAI2J,iBAAiB;oBACjD,IAAIC,cAAAA,CAAAA;oBACJ,OAAQ97B,IAAAA;AACN,wBAAA,KAAKkyB,GAAGuJ,UAAU;AAChBK,4BAAAA,cAAAA,GAAiBvB,eAAewB,cAAc,CAAA;AAC9C,4BAAA,MAAA;AACF,wBAAA,KAAK7J,GAAGwJ,YAAY;AAClBI,4BAAAA,cAAAA,GAAiBvB,eAAeyB,gBAAgB,CAAA;AAChD,4BAAA,MAAA;wBACF,KAA8B9J,GAAIyJ,uBAAuB;AACvDG,4BAAAA,cAAAA,GAAiBvB,eAAe0B,kBAAkB,CAAA;AAClD,4BAAA,MAAA;wBACF,KAA8B/J,GAAI0J,gBAAgB;AAChDE,4BAAAA,cAAAA,GAAiBvB,eAAe2B,mBAAmB,CAAA;AACnD,4BAAA,MAAA;wBACF,KAA8BhK,GAAI2J,iBAAiB;4BACjDC,cAAiB,GAAA,KAAA,CAAKp5B,OAAO,CAACy5B,eAAe,CAAA;AAC7C5J,4BAAAA,aAAAA,CAAcT,qBAAqB,GAAG,IAAA,CAAA;AACtC,4BAAA,MAAA;AACJ,qBAAA;oBAEAqG,SAAY,GAAA,IAAA,CAAA;AACZ,oBAAA,IAAI9Q,OAAS,EAAA;wBACX,IAAM+U,eAAAA,GAAkB,IAAIv6B,KAAe+F,CAAAA,IAAAA,CAAAA,CAAAA;wBAC3C,IAAM2tB,cAAAA,GAAiB,IAAIh0B,UAAWqG,CAAAA,IAAAA,CAAAA,CAAAA;wBACtC,IAAMy0B,gBAAAA,GAAmB,IAAIx6B,KAAc+F,CAAAA,IAAAA,CAAAA,CAAAA;AAE3C,wBAAA,IAAK,IAAI7F,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAI6F,MAAM7F,CAAK,EAAA,CAAA;4BAC7Bq6B,eAAe,CAACr6B,EAAE,GAAG+5B,cAAAA,CAAAA;AACrBvG,4BAAAA,cAAc,CAACxzB,CAAAA,CAAE,GAAG,KAAA,CAAK40B,kBAAkB,CAAA;AAC3C0F,4BAAAA,gBAAgB,CAACt6B,CAAE,CAAA,GAAGmwB,GAAGoK,QAAQ,GAAG,MAAK3F,kBAAkB,EAAA,CAAA;AAC7D,yBAAA;AACApE,wBAAAA,aAAAA,CAAcoF,cAAc,GAAGyE,eAAAA,CAAAA;AAC/B7J,wBAAAA,aAAAA,CAAc6C,YAAY,GAAGiH,gBAAAA,CAAAA;wBAC7B9J,aAAcmF,CAAAA,SAAS,GAAGnF,aAAAA,CAAc+C,kBAAkB,CAAA;AAC1D,wBAAA,KAAA,CAAKzvB,IAAI,EAAA,CAAA;wBACTqsB,EAAGgC,CAAAA,UAAU,CAACxB,QAAU6C,EAAAA,cAAAA,CAAAA,CAAAA;qBACnB,MAAA;AACL,wBAAA,IAAMgH,cAAiBrK,GAAAA,EAAAA,CAAGoK,QAAQ,GAAG,MAAK3F,kBAAkB,CAAA;AAC5DpE,wBAAAA,aAAAA,CAAcoF,cAAc,GAAGmE,cAAAA,CAAAA;AAC/BvJ,wBAAAA,aAAAA,CAAc6C,YAAY,GAAGmH,cAAAA,CAAAA;wBAC7BhK,aAAcmF,CAAAA,SAAS,GAAGnF,aAAAA,CAAc2C,aAAa,CAAA;AACrD,wBAAA,KAAA,CAAKrvB,IAAI,EAAA,CAAA;AACTqsB,wBAAAA,EAAAA,CAAG8B,SAAS,CAACtB,QAAU,EAAA,KAAA,CAAKiE,kBAAkB,EAAA,CAAA,CAAA;AAChD,qBAAA;AACA,oBAAA,MAAA;AACF,gBAAA;AACE,oBAAA,MAAM,IAAIhpB,KAAM,CAAA,0BAAA,CAAA,CAAA;AACpB,aAAA;YAEA,IAAMyqB,KAAAA,GAAQhQ,cAAeO,CAAAA,uBAAuB,CAACxS,IAAAA,CAAAA,CAAAA;YACrD,KAAKkiB,CAAAA,gBAAgB,CAAC9F,aAAAA,EAAe6F,KAAOD,EAAAA,SAAAA,CAAAA,CAAAA;AAC9C,SAAA,CAAA,CAAA;AAEAkC,QAAAA,cAAAA,CAAevJ,OAAO,CAAC,SAAA,KAAA,EAAA;gBAAG3a,IAAAA,GAAAA,KAAAA,CAAAA,IAAAA,CAAAA;AACxB,YAAA,KAAA,CAAKugB,iBAAiB,CAACvgB,IAAAA,CAAK,GAAG+b,EAAGsK,CAAAA,iBAAiB,CAACzD,OAAS5iB,EAAAA,IAAAA,CAAAA,CAAAA;AAC/D,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;IAEA,MAAQikB,CAAAA,gBAYP,GAZD,SAAQA,gBAAAA,GAAAA;QACN,IAAMlI,EAAAA,GAAK,IAAI,CAACD,GAAG,CAAA;QACnB,IAAM8G,OAAAA,GAAU,IAAI,CAACnC,UAAU,CAAA;AAC/B,QAAA,IAAM6F,eAAevK,EAAGmH,CAAAA,mBAAmB,CAACN,OAAAA,EAAS7G,GAAGwK,eAAe,CAAA,CAAA;QAEvE,IAAMvC,YAAAA,GAAe,IAAIt4B,KAAuB46B,CAAAA,YAAAA,CAAAA,CAAAA;AAChD,QAAA,IAAK,IAAI16B,CAAI,GAAA,CAAA,EAAGA,CAAI06B,GAAAA,YAAAA,EAAc,EAAE16B,CAAG,CAAA;AACrC,YAAA,IAAM+D,IAAOosB,GAAAA,EAAAA,CAAGyK,gBAAgB,CAAC5D,OAASh3B,EAAAA,CAAAA,CAAAA,CAAAA;YAC1Co4B,YAAY,CAACp4B,EAAE,GAAG+D,IAAAA,CAAAA;AACpB,SAAA;QAEA,OAAOq0B,YAAAA,CAAAA;AACT,KAAA,CAAA;IAEA,MAAQG,CAAAA,kBAYP,GAZD,SAAQA,kBAAAA,GAAAA;QACN,IAAMpI,EAAAA,GAAK,IAAI,CAACD,GAAG,CAAA;QACnB,IAAM8G,OAAAA,GAAU,IAAI,CAACnC,UAAU,CAAA;AAC/B,QAAA,IAAMyD,iBAAiB,IAAIx4B,KAAAA,EAAAA,CAAAA;AAE3B,QAAA,IAAM+6B,iBAAiB1K,EAAGmH,CAAAA,mBAAmB,CAACN,OAAAA,EAAS7G,GAAG2K,iBAAiB,CAAA,CAAA;AAC3E,QAAA,IAAK,IAAI96B,CAAI,GAAA,CAAA,EAAGA,CAAI66B,GAAAA,cAAAA,EAAgB,EAAE76B,CAAG,CAAA;AACvC,YAAA,IAAM+D,IAAOosB,GAAAA,EAAAA,CAAG4K,eAAe,CAAC/D,OAASh3B,EAAAA,CAAAA,CAAAA,CAAAA;YACzCs4B,cAAc,CAACt4B,EAAE,GAAG+D,IAAAA,CAAAA;AACtB,SAAA;QAEA,OAAOu0B,cAAAA,CAAAA;AACT,KAAA,CAAA;AA/dWzE,IAAAA,aAAAA,CAGIsE,WAcd,GAdD,SAAeA,WAAAA,CAAYnqB,GAAW,EAAA;QACpC,IAAMe,KAAAA,GAAQf,GAAIc,CAAAA,KAAK,CAAC,IAAA,CAAA,CAAA;QACxB,IAAMksB,WAAAA,GAAc,CAACjsB,KAAMnP,CAAAA,MAAM,GAAG,CAAA,EAAGq7B,QAAQ,EAAGr7B,CAAAA,MAAM,GAAG,CAAA,CAAA;QAC3D,IAAIs7B,MAAAA,CAAAA;AACJ,QAAA,OAAOnsB,KACJkI,CAAAA,GAAG,CAAC,SAAClH,IAAM/N,EAAAA,KAAAA,EAAAA;AACVk5B,YAAAA,MAAAA,GAAS,IAAC,IAAIl5B,KAAAA,GAAQ,CAAA,CAAA,CAAA;YACtB,IAAIk5B,MAAAA,CAAOt7B,MAAM,IAAIo7B,WAAAA,EAAa,OAAOE,MAAO1jB,CAAAA,SAAS,CAAC,CAAA,EAAGwjB,WAAejrB,CAAAA,GAAAA,IAAAA,CAAAA;YAE5E,IAAK,IAAI/P,IAAI,CAAGA,EAAAA,CAAAA,GAAIg7B,cAAcE,MAAOt7B,CAAAA,MAAM,EAAEI,CAAAA,EAAAA,CAAKk7B,MAAU,IAAA,GAAA,CAAA;AAEhE,YAAA,OAAOA,MAASnrB,GAAAA,IAAAA,CAAAA;AAClB,SAAA,CAAA,CACC2d,IAAI,CAAC,IAAA,CAAA,CAAA;AACV,KAAA,CAAA;AAjBWmG,IAAAA,aAAAA,CAAAA,aAAAA,EAAAA;;YAmDPsH,GAAAA,EAAAA,SAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACpG,QAAQ,CAAA;AACtB,aAAA;;;AArDWlB,IAAAA,OAAAA,aAAAA,CAAAA;AAgeZ,CAAA,EAAA,CAAA;AAheYA,aAAAA,CACIqB,QAAmB,GAAA,CAAA;;AChBpC;;;IAIO,IAAKkG,UAAAA,iBAAAA,SAAAA,UAAAA,EAAAA;wBACO,UAAA,CAAA,UAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA,CAAA;8BAEM,UAAA,CAAA,UAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA,CAAA;AAHbA,IAAAA,OAAAA,UAAAA,CAAAA;AAKX,CAAA,CAAA,EAAA,CAAA;;ACMD;;IAGO,IAAMC,UAAN,iBAAA,SAAA,UAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,UAAAA,EAAAA,UAAAA,CAAAA,CAAAA;aAAAA,UAgETC,CAAAA,kBAA0B,EAC1BC,kCAAuF,EACvFC,iCAAsF,EACtFC,mBAAwE,EACxE/L,IAAgD,EAAA;;AAEhD,QAAA,KAAA,GAAA,UAAA,CAAA,IAAA,CAAA,IAAA,CAAA,IAAA,IAAA,mBAhEFgM,KAAAA,CAAAA,aAAAA,GAAwB,oBAOV,KAAA,CACdC,sBAAsD,EAAC,mBAEvDC,KAAAA,CAAAA,mBAAAA,GAA2C,EAAE,yBAU7CC,KAAQ,GAAA,EAAA,EAAA,KAAA,CAEAC,kBAA4B,EAAE,CAAA;AA2CpC,QAAA,KAAA,CAAKJ,aAAa,GAAGL,UAvEZA,CAuEuBU,kBAAkB,EAAA,CAAA;QAClD,KAAK/U,CAAAA,KAAK,GAAGoU,UAAAA,CAAWY,SAAS,CAAA;QAEjC,IAAI,OAAOP,wBAAwB,QAAU,EAAA;AAC3C,YAAA,KAAA,CAAKpnB,KAAK,GAAGinB,kBAAAA,CAAAA;AACb,YAAA,KAAA,CAAKW,gBAAgB,GAAGV,kCAAAA,CAAAA;AACxB,YAAA,KAAA,CAAKW,YAAY,GAAGV,iCAAAA,CAAAA;AACpB,YAAA,KAAA,CAAKW,cAAc,GAAGV,mBAAAA,CAAAA;YACtB/L,IAAO,GAAA,QAAA,CAAA;AACL0M,gBAAAA,aAAAA,EAAetX,cAAcuX,OAAO;AACjC3M,aAAAA,EAAAA,IAAAA,CAAAA,CAAAA;YAEL,KAAK1I,CAAAA,KAAK,GAAGoU,UAAAA,CAAWkB,SAAS,CAAA;SAC5B,MAAA,IAAI,OAAOd,iCAAAA,KAAsC,QAAU,EAAA;AAChE,YAAA,KAAA,CAAKnnB,KAAK,GAAGinB,kBAAAA,CAAAA;AACb,YAAA,KAAA,CAAKiB,aAAa,GAAGhB,kCAAAA,CAAAA;AACrB,YAAA,KAAA,CAAKiB,eAAe,GAAGhB,iCAAAA,CAAAA;AACvB9L,YAAAA,IAAAA,GAAO+L,8BAAAA,mBAAuB,GAAA;AAC5BW,gBAAAA,aAAAA,EAAetX,cAAcuX,OAAO;AACtC,aAAA,CAAA;SACK,MAAA;AACL,YAAA,KAAA,CAAKhoB,KAAK,GAAG,SAAA,CAAA;AACb,YAAA,KAAA,CAAKkoB,aAAa,GAAGjB,kBAAAA,CAAAA;AACrB,YAAA,KAAA,CAAKkB,eAAe,GAAGjB,kCAAAA,CAAAA;AACvB7L,YAAAA,IAAAA,GAAO8L,4CAAAA,iCAAqC,GAAA;AAC1CY,gBAAAA,aAAAA,EAAetX,cAAcuX,OAAO;AACtC,aAAA,CAAA;AACF,SAAA;QACA,IAAK,IAAM7nB,OAAOkb,IAAM,CAAA;AACtB,YAAA,KAAA,CAAKF,MAAM,CAAChb,GAAKkb,EAAAA,IAAI,CAAClb,GAAI,CAAA,CAAA,CAAA;AAC5B,SAAA;;;AArGS6mB,IAAAA,IAAAA,MAAAA,GAAAA,UAAAA,CAAAA,SAAAA,CAAAA;AAwGX;;AAEC,MACDoB,OAAAA,iBAeC,GAfDA,SAAAA,iBAAkBl8B,CAAAA,MAAc,EAAEwjB,eAAsC,EAAA;AACtE,QAAA,IAAM2Y,iBAAoBn8B,GAAAA,MAAAA,CAAOo8B,qBAAqB,CAAC,IAAI,CAAA,CAAA;QAC3D,IAAIC,aAAAA,GAAgBF,iBAAkB/+B,CAAAA,GAAG,CAAComB,eAAAA,CAAAA,CAAAA;AAC1C,QAAA,IAAI6Y,aAAe,EAAA;YACjB,OAAOA,aAAAA,CAAAA;AACT,SAAA;AAEA,QAAA,IAAI,IAAI,CAAC5V,KAAK,KAAKoU,UAAAA,CAAWY,SAAS,EAAE;AACvCY,YAAAA,aAAAA,GAAgB,IAAI,CAACC,0BAA0B,CAACt8B,MAAQwjB,EAAAA,eAAAA,CAAAA,CAAAA;SACnD,MAAA;AACL6Y,YAAAA,aAAAA,GAAgB,IAAI,CAACE,qBAAqB,CAACv8B,MAAQwjB,EAAAA,eAAAA,EAAiB,IAAI,CAACmY,YAAY,EAAE,IAAI,CAACC,cAAc,CAAA,CAAA;AAC5G,SAAA;AAEAO,QAAAA,iBAAAA,CAAkBK,KAAK,CAACH,aAAAA,CAAAA,CAAAA;QACxB,OAAOA,aAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;MAGAI,MAAAA,CAAAA,QASC,GATDA,SAAAA,QAAAA,GAAAA;QACE,IAAMC,kBAAAA,GAAqB,IAAI,CAACrB,mBAAmB,CAAA;QACnD,IAAK,IAAI57B,IAAI,CAAG0B,EAAAA,CAAAA,GAAIu7B,mBAAmBr9B,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;YACzD,IAAM08B,iBAAAA,GAAoBO,kBAAkB,CAACj9B,CAAE,CAAA,CAAA;AAC/C08B,YAAAA,iBAAAA,CAAkBM,QAAQ,EAAA,CAAA;YAC1B,OAAON,iBAAAA,CAAkBn8B,MAAM,CAACq7B,mBAAmB,CAAC,IAAI,CAACF,aAAa,CAAC,CAAA;AACzE,SAAA;;AAEAuB,QAAAA,kBAAAA,CAAmBr9B,MAAM,GAAG,CAAA,CAAA;AAC9B,KAAA,CAAA;AAEA;;MAGA,MAAA,CAAQk9B,qBA0CP,GA1CD,SAAQA,qBAAAA,CACNv8B,MAAc,EACdwjB,eAAsC,EACtCmZ,WAAmB,EACnBC,aAAqB,EAAA;QAErB,IAAyD,KAAA,GAAA,IAAI,EAA9C56B,OAA0C,KAAjDs5B,CAAAA,KAAAA,EAAaC,cAAiBsB,GAAmB,KAApCtB,CAAAA,eAAAA,CAAAA;AAErB,QAAA,IAAMuB,QAAW98B,GAAAA,MAAAA,CAAOiF,iBAAiB,CAAC63B,QAAQ,CAAA;AAClD,QAAA,IAAMha,SAAS,IAAIvjB,KAAAA,EAAAA,CAAAA;QACnBoiB,WAAYkB,CAAAA,kBAAkB,CAACW,eAAiBV,EAAAA,MAAAA,CAAAA,CAAAA;AAEhD+Z,QAAAA,cAAAA,CAAex9B,MAAM,GAAG,CAAA,CAAA;AACxB,QAAA,IAAIW,OAAOiF,iBAAiB,CAAC83B,OAAO,CAACrU,gBAAAA,CAAiBsU,gBAAgB,CAAG,EAAA;AACvEH,YAAAA,cAAAA,CAAet7B,IAAI,CAAC,aAAA,CAAA,CAAA;AACtB,SAAA;AACA,QAAA,IAAIvB,OAAOiF,iBAAiB,CAAC83B,OAAO,CAACrU,gBAAAA,CAAiBuU,mBAAmB,CAAG,EAAA;AAC1EJ,YAAAA,cAAAA,CAAet7B,IAAI,CAAC,iBAAA,CAAA,CAAA;AACtB,SAAA;AACA,QAAA,IAAIu7B,QAAU,EAAA;AACZD,YAAAA,cAAAA,CAAet7B,IAAI,CAAC,qBAAA,CAAA,CAAA;SACf,MAAA;AACLs7B,YAAAA,cAAAA,CAAet7B,IAAI,CAAC,qBAAA,CAAA,CAAA;AACtB,SAAA;QAEA,IAAM27B,KAAAA,GAAQ7V,YAAYC,GAAG,EAAA,CAAA;AAC7B,QAAA,IAAM6V,mBAAsBC,GAAAA,MAAAA,CAAOC,UAAU,CAACC,gBAAgB,CAC5D,IAAI,CAAC5B,gBAAgB,EACrBiB,WACAC,EAAAA,aAAAA,EACA9Z,MACAga,EAAAA,QAAAA,GAAWpb,oBAAqB6b,CAAAA,OAAO,GAAG7b,oBAAAA,CAAqB8b,OAAO,EACtEX,cACA,EAAA,IAAI9lB,GAAI/U,CAAAA,IAAAA,EAAM84B,UA9KPA,CA8KkB2C,eAAe,CAAA,CAAEzmB,IAAI,CAAA,CAAA;QAEhDrT,MAAOH,CAAAA,IAAI,CAAC,qCAAC,IAAqC6jB,WAAYC,CAAAA,GAAG,EAAK4V,GAAAA,KAAI,CAAE,GAAA,IAAA,CAAA,CAAA;AAE5E,QAAA,IAAIC,mBAAqB,EAAA;AACvB,YAAA,OAAO,IAAI7J,aAActzB,CAAAA,MAAAA,EAAQm9B,oBAAoBO,MAAM,EAAEP,oBAAoBQ,QAAQ,CAAA,CAAA;SACpF,MAAA;YACL,OAAO,IAAIrK,aAActzB,CAAAA,MAAAA,EAAQ,EAAI,EAAA,EAAA,CAAA,CAAA;AACvC,SAAA;AACF,KAAA,CAAA;;AAGA,IAAA,MAAA,CAAQs8B,0BA6CP,GA7CD,SAAQA,0BAA2Bt8B,CAAAA,MAAc,EAAEwjB,eAAsC,EAAA;AACvF,QAAA,IAAMsZ,QAAoB98B,GAAAA,MAAAA,CAAOiF,iBAAiB,CAAC63B,QAAQ,CAAA;AAC3D,QAAA,IAAMc,gBAAgB,IAAIr+B,KAAAA,EAAAA,CAAAA;QAC1BoiB,WAAYkB,CAAAA,kBAAkB,CAACW,eAAiBoa,EAAAA,aAAAA,CAAAA,CAAAA;QAChD,IAAMC,YAAAA,GAAe5Q,aAAcC,CAAAA,iBAAiB,CAAC0Q,aAAAA,CAAAA,CAAAA;QACrD,IAAME,UAAAA,GAAahB,WAAW,iBAAoB,GAAA,cAAA,CAAA;QAClD,IAAMiB,UAAAA,GAAajB,WAAW,6BAAgC,GAAA,6BAAA,CAAA;AAC9D,QAAA,IAAIkB,YAAgB,GAAA,8LAAA,CAAA;AAUpB,QAAA,IAAIh+B,OAAOiF,iBAAiB,CAAC83B,OAAO,CAACrU,gBAAAA,CAAiBsU,gBAAgB,CAAG,EAAA;YACvEgB,YAAgB,IAAA,uBAAA,CAAA;AAClB,SAAA;AACA,QAAA,IAAIh+B,OAAOiF,iBAAiB,CAAC83B,OAAO,CAACrU,gBAAAA,CAAiBuU,mBAAmB,CAAG,EAAA;YAC1Ee,YAAgB,IAAA,2BAAA,CAAA;AAClB,SAAA;AAEA,QAAA,IAAIzK,YACF,GAAC,GAAGuK,GAAAA,UAAAA,GAAW,eACXC,UAAW,GAAA,YAAA,GACXF,YAAa,GAAA,UAAA,GACb5Q,aAAcO,CAAAA,aAAa,CAAC,IAAI,CAACwO,aAAa,CAAA,CAAA;QACpD,IAAIxI,cAAAA,GACF,GAAC,GAAGsK,UAAW,GAAA,YAAA,GACXC,aAAW,YACXjB,IAAAA,QAAW,GAAA,EAAA,GAAK7P,aAAcwB,CAAAA,gBAAgB,CAAC,GAAA,YAAA,GAC/CuP,YAAa,GAAA,YAAA,GACbH,YAAa,GAAA,UAAA,GACb5Q,cAAcO,aAAa,CAAC,IAAI,CAACyO,eAAe,CAAA,CAAA;AAEtD,QAAA,IAAIa,QAAU,EAAA;YACZvJ,YAAetG,GAAAA,aAAAA,CAAcU,YAAY,CAAC4F,YAAAA,CAAAA,CAAAA;YAC1CC,cAAiBvG,GAAAA,aAAAA,CAAcU,YAAY,CAAC6F,cAAgB,EAAA,IAAA,CAAA,CAAA;AAC9D,SAAA;AAEA,QAAA,IAAM6I,aAAgB,GAAA,IAAI/I,aAActzB,CAAAA,MAAAA,EAAQuzB,YAAcC,EAAAA,cAAAA,CAAAA,CAAAA;QAE9D,OAAO6I,aAAAA,CAAAA;AACT,KAAA,CAAA;AAvOWvB,IAAAA,OAAAA,UAAAA,CAAAA;EAAmB/L,UAwO/B,EAAA;AAxOY+L,UAAAA,CACIU,kBAA6B,GAAA,CAAA,CAAA;AAC5C,iBAFWV,WAGJ2C,eAAkB,GAAA,iBAAA;;AClB3B;;IAGO,IAAMQ,SAAN,iBAAA,SAAA,UAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,SAAAA,EAAAA,UAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,SAAAA,CAeCpqB,IAAY,EAAEqqB,MAAoB,EAAE/O,IAAgD,EAAA;;AAC9F,QAAA,KAAA,GAAA,UAAA,CAAA,IAAA,CAAA,IAAA,CAAA,IAAA,IAAA,CAAA;AACA,QAAA,KAAA,CAAKrb,KAAK,GAAGD,IAAAA,CAAAA;QACb,IAAMsqB,SAAAA,GAAYD,OAAO7+B,MAAM,CAAA;AAC/B,QAAA,IAAI8+B,YAAY,CAAG,EAAA;YACjB,MAAM,2BAAA,CAAA;AACR,SAAA;QACA,KAAKC,CAAAA,OAAO,GAAGF,MAAAA,CAAO5+B,KAAK,EAAA,CAAA;QAE3B,IAAK,IAAM2U,OAAOkb,IAAM,CAAA;AACtB,YAAA,KAAA,CAAKF,MAAM,CAAChb,GAAKkb,EAAAA,IAAI,CAAClb,GAAI,CAAA,CAAA,CAAA;AAC5B,SAAA;;;AA1BSgqB,IAAAA,aAAAA,CAAAA,SAAAA,EAAAA;;YAMPC,GAAAA,EAAAA,QAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACE,OAAO,CAAA;AACrB,aAAA;;;AARWH,IAAAA,OAAAA,SAAAA,CAAAA;EAAkBlP,UA4B9B;;AC9BD;;AAEC,IACM,IAAA,sBAAMsP,GAAN,SAAMA,sBAAAA,GAAAA;AACX,yCACAC,OAAmB,GAAA,KAAA,CAAA;wCACc,IAAA,CACjCC,mBAAsCrd,GAAAA,cAAAA,CAAesd,GAAG,CAAA;sCACzB,IAAA,CAC/BC,mBAAsCvd,GAAAA,cAAAA,CAAesd,GAAG,CAAA;gDACf,IAAA,CACzCE,sBAAsCzd,GAAAA,WAAAA,CAAY0d,GAAG,CAAA;8CACd,IAAA,CACvCC,sBAAsC3d,GAAAA,WAAAA,CAAY0d,GAAG,CAAA;qDACP,IAAA,CAC9CE,2BAA2C5d,GAAAA,WAAAA,CAAY6d,IAAI,CAAA;mDACf,IAAA,CAC5CC,2BAA2C9d,GAAAA,WAAAA,CAAY6d,IAAI,CAAA;uBAC3C,IAAA,CAChBE,cAAiC7d,GAAAA,cAAAA,CAAe8d,GAAG,CAAA;AACpD;;ACVD;;IAGO,IAAMC,UAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,UAAAA,GAAAA;qDAyD+B,IAAA,CAEjCC,mBAA2C,IAAId,sBAAAA,EAAAA,CAAAA;AACxD,0CAESe,UAAoB,GAAA,IAAIxO,gBAAM,CAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,CAAA,CAAA;AAChD,mEACAyO,eAA2B,GAAA,KAAA,CAAA;;AAhEhBH,IAAAA,IAAAA,MAAAA,GAAAA,UAAAA,CAAAA,SAAAA,CAAAA;AAkEX;;AAEC,MACDI,OAAAA,qBA2DC,GA3DDA,SAAAA,qBAAsBC,CAAAA,kBAAkD,EAAE1X,UAAsB,EAAA;QAC9F,IAAM2X,UAAAA,GAAa,IAAI,CAACL,gBAAgB,CAAA;AAExC,QAAA,IAAMM,eAAkBF,GAAAA,kBAAkB,CAACje,qBAAAA,CAAsBoe,kBAAkB,CAAC,CAAA;AACpF,QAAA,IAAID,oBAAoB9gC,SAAW,EAAA;YACjC,IAAM2/B,OAAAA,GAAUzW,UAAW8X,CAAAA,QAAQ,CAACF,eAAAA,CAAAA,CAAAA;AACpCD,YAAAA,UAAAA,CAAWlB,OAAO,GAAGA,OAAAA,KAAY3/B,SAAY,GAAA,CAAC,CAAC2/B,OAAU,GAAA,KAAA,CAAA;AAC3D,SAAA;AAEA,QAAA,IAAMsB,4BAA+BL,GAAAA,kBAAkB,CAACje,qBAAAA,CAAsBue,8BAA8B,CAAC,CAAA;AAC7G,QAAA,IAAID,iCAAiCjhC,SAAW,EAAA;AACbkpB,YAAAA,IAAAA,oBAAAA,CAAAA;YAAjC2X,UAAWjB,CAAAA,mBAAmB,GAAG1W,CAAAA,oBAAAA,GAAAA,UAAAA,CAAW8X,QAAQ,CAACC,4BAAAA,CAAAA,KAAAA,IAAAA,GAApB/X,oBAAqD3G,GAAAA,cAAAA,CAAesd,GAAG,CAAA;AAC1G,SAAA;AAEA,QAAA,IAAMsB,4BAA+BP,GAAAA,kBAAkB,CAACje,qBAAAA,CAAsBye,8BAA8B,CAAC,CAAA;AAC7G,QAAA,IAAID,iCAAiCnhC,SAAW,EAAA;AACbkpB,YAAAA,IAAAA,qBAAAA,CAAAA;YAAjC2X,UAAWf,CAAAA,mBAAmB,GAAG5W,CAAAA,qBAAAA,GAAAA,UAAAA,CAAW8X,QAAQ,CAACG,4BAAAA,CAAAA,KAAAA,IAAAA,GAApBjY,qBAAqD3G,GAAAA,cAAAA,CAAesd,GAAG,CAAA;AAC1G,SAAA;AAEA,QAAA,IAAMwB,+BAAkCT,GAAAA,kBAAkB,CAACje,qBAAAA,CAAsB2e,iCAAiC,CAAC,CAAA;AACnH,QAAA,IAAID,oCAAoCrhC,SAAW,EAAA;AACbkpB,YAAAA,IAAAA,qBAAAA,CAAAA;YAApC2X,UAAWd,CAAAA,sBAAsB,GAAG7W,CAAAA,qBAAAA,GAAAA,UAAAA,CAAW8X,QAAQ,CAACK,+BAAAA,CAAAA,KAAAA,IAAAA,GAApBnY,qBAAwD5G,GAAAA,WAAAA,CAAY0d,GAAG,CAAA;AAC7G,SAAA;AAEA,QAAA,IAAMuB,+BAAkCX,GAAAA,kBAAkB,CAACje,qBAAAA,CAAsB6e,iCAAiC,CAAC,CAAA;AACnH,QAAA,IAAID,oCAAoCvhC,SAAW,EAAA;AACbkpB,YAAAA,IAAAA,qBAAAA,CAAAA;YAApC2X,UAAWZ,CAAAA,sBAAsB,GAAG/W,CAAAA,qBAAAA,GAAAA,UAAAA,CAAW8X,QAAQ,CAACO,+BAAAA,CAAAA,KAAAA,IAAAA,GAApBrY,qBAAwD5G,GAAAA,WAAAA,CAAY0d,GAAG,CAAA;AAC7G,SAAA;AAEA,QAAA,IAAMyB,oCACJb,GAAAA,kBAAkB,CAACje,qBAAAA,CAAsB+e,sCAAsC,CAAC,CAAA;AAClF,QAAA,IAAID,yCAAyCzhC,SAAW,EAAA;AAEpDkpB,YAAAA,IAAAA,qBAAAA,CAAAA;YADF2X,UAAWX,CAAAA,2BAA2B,GACpChX,CAAAA,qBAAAA,GAAAA,UAAAA,CAAW8X,QAAQ,CAACS,oCAAAA,CAAAA,KAAAA,IAAAA,GAApBvY,qBAA6D5G,GAAAA,WAAAA,CAAY6d,IAAI,CAAA;AACjF,SAAA;AAEA,QAAA,IAAMwB,oCACJf,GAAAA,kBAAkB,CAACje,qBAAAA,CAAsBif,sCAAsC,CAAC,CAAA;AAClF,QAAA,IAAID,yCAAyC3hC,SAAW,EAAA;AAEpDkpB,YAAAA,IAAAA,qBAAAA,CAAAA;YADF2X,UAAWT,CAAAA,2BAA2B,GACpClX,CAAAA,qBAAAA,GAAAA,UAAAA,CAAW8X,QAAQ,CAACW,oCAAAA,CAAAA,KAAAA,IAAAA,GAApBzY,qBAA6D5G,GAAAA,WAAAA,CAAY6d,IAAI,CAAA;AACjF,SAAA;AAEA,QAAA,IAAM0B,uBAA0BjB,GAAAA,kBAAkB,CAACje,qBAAAA,CAAsBmf,yBAAyB,CAAC,CAAA;AACnG,QAAA,IAAID,4BAA4B7hC,SAAW,EAAA;AACbkpB,YAAAA,IAAAA,qBAAAA,CAAAA;YAA5B2X,UAAWR,CAAAA,cAAc,GAAGnX,CAAAA,qBAAAA,GAAAA,UAAAA,CAAW8X,QAAQ,CAACa,uBAAAA,CAAAA,KAAAA,IAAAA,GAApB3Y,qBAAgD1G,GAAAA,cAAAA,CAAe8d,GAAG,CAAA;AAChG,SAAA;AAEA,QAAA,IAAMyB,kBAAqBnB,GAAAA,kBAAkB,CAACje,qBAAAA,CAAsBqf,oBAAoB,CAAC,CAAA;AACzF,QAAA,IAAID,uBAAuB/hC,SAAW,EAAA;YACpC,IAAMygC,UAAAA,GAAavX,UAAW+Y,CAAAA,QAAQ,CAACF,kBAAAA,CAAAA,CAAAA;AACvCtB,YAAAA,UAAAA,KAAezgC,aAAa,IAAI,CAACygC,UAAU,CAACz/B,QAAQ,CAACy/B,UAAAA,CAAAA,CAAAA;AACvD,SAAA;AAEA,QAAA,IAAMyB,uBAA0BtB,GAAAA,kBAAkB,CAACje,qBAAAA,CAAsBwf,yBAAyB,CAAC,CAAA;AACnG,QAAA,IAAID,4BAA4BliC,SAAW,EAAA;YACzC,IAAM0gC,eAAAA,GAAkBxX,UAAW8X,CAAAA,QAAQ,CAACkB,uBAAAA,CAAAA,CAAAA;AAC5C,YAAA,IAAI,CAACxB,eAAe,GAAGA,oBAAoB1gC,SAAY,GAAA,CAAC,CAAC0gC,eAAkB,GAAA,KAAA,CAAA;AAC7E,SAAA;AACF,KAAA,CAAA;AAEA;;;MAIA0B,MAAAA,CAAAA,MAMC,GANDA,SAAAA,OACEC,gBAAmC,EACnCC,eAA4B,EAC5BC,YAAoC,EAAA;AAEpC,QAAA,IAAI,CAACC,cAAc,CAACH,gBAAkBC,EAAAA,eAAAA,CAAgBzB,UAAU,EAAE0B,YAAAA,CAAAA,CAAAA;AACpE,KAAA,CAAA;IAEA,MAAQC,CAAAA,cA2FP,GA3FD,SAAQA,cAAAA,CAAe1R,GAAsB,EAAE2R,SAAqB,EAAEF,YAAoC,EAAA;QACxG,IAAMtR,EAAAA,GAA4BH,IAAIG,EAAE,CAAA;QACxC,IAAMyR,oBAAAA,GAAuBD,UAAUjC,gBAAgB,CAAA;QAEvD,IASI,sBAAA,GAAA,IAAI,CAACA,gBAAgB,EARvBb,OAQE,GAAA,sBAAA,CARFA,OACAC,EAAAA,mBAAAA,GAOE,sBAPFA,CAAAA,mBAAAA,EACAE,mBAME,GAAA,sBAAA,CANFA,mBACAC,EAAAA,sBAAAA,GAKE,sBALFA,CAAAA,sBAAAA,EACAG,2BAIE,GAAA,sBAAA,CAJFA,2BACAD,EAAAA,sBAAAA,GAGE,sBAHFA,CAAAA,sBAAAA,EACAG,2BAEE,GAAA,sBAAA,CAFFA,2BACAC,EAAAA,cAAAA,GACE,sBADFA,CAAAA,cAAAA,CAAAA;AAGF,QAAA,IAAIkC,YAAc,EAAA;AAChB,YAAA,IAAMI,mBAAsBJ,GAAAA,YAAY,CAAC5f,qBAAAA,CAAsBmf,yBAAyB,CAAC,CAAA;YACzFa,mBAAwB3iC,KAAAA,SAAAA,KAAcqgC,cAAAA,GAAiCsC,mBAAkB,CAAA,CAAA;AAC3F,SAAA;QAEA,IAAIhD,OAAAA,KAAY+C,oBAAqB/C,CAAAA,OAAO,EAAE;AAC5C,YAAA,IAAIA,OAAS,EAAA;gBACX1O,EAAG/rB,CAAAA,MAAM,CAAC+rB,EAAAA,CAAG2R,KAAK,CAAA,CAAA;aACb,MAAA;gBACL3R,EAAG9rB,CAAAA,OAAO,CAAC8rB,EAAAA,CAAG2R,KAAK,CAAA,CAAA;AACrB,aAAA;AACAF,YAAAA,oBAAAA,CAAqB/C,OAAO,GAAGA,OAAAA,CAAAA;AACjC,SAAA;AAEA,QAAA,IAAIA,OAAS,EAAA;;AAEX,YAAA,IACEI,sBAA2B2C,KAAAA,oBAAAA,CAAqB3C,sBAAsB,IACtEG,gCAAgCwC,oBAAqBxC,CAAAA,2BAA2B,IAChFD,sBAAAA,KAA2ByC,qBAAqBzC,sBAAsB,IACtEG,2BAAgCsC,KAAAA,oBAAAA,CAAqBtC,2BAA2B,EAChF;gBACAnP,EAAG4R,CAAAA,iBAAiB,CAnLftC,UAoLQuC,CAAAA,iBAAiB,CAAChS,GAAKiP,EAAAA,sBAAAA,CAAAA,EAClCQ,UArLGA,CAqLQuC,iBAAiB,CAAChS,KAAKoP,2BAClCK,CAAAA,EAtLGA,UAsLQuC,CAAAA,iBAAiB,CAAChS,GAAAA,EAAKmP,yBAClCM,UAvLGA,CAuLQuC,iBAAiB,CAAChS,GAAKsP,EAAAA,2BAAAA,CAAAA,CAAAA,CAAAA;AAEpCsC,gBAAAA,oBAAAA,CAAqB3C,sBAAsB,GAAGA,sBAAAA,CAAAA;AAC9C2C,gBAAAA,oBAAAA,CAAqBxC,2BAA2B,GAAGA,2BAAAA,CAAAA;AACnDwC,gBAAAA,oBAAAA,CAAqBzC,sBAAsB,GAAGA,sBAAAA,CAAAA;AAC9CyC,gBAAAA,oBAAAA,CAAqBtC,2BAA2B,GAAGA,2BAAAA,CAAAA;AACrD,aAAA;;AAGA,YAAA,IACER,wBAAwB8C,oBAAqB9C,CAAAA,mBAAmB,IAChEE,mBAAwB4C,KAAAA,oBAAAA,CAAqB5C,mBAAmB,EAChE;AACA7O,gBAAAA,EAAAA,CAAG8R,qBAAqB,CACtBxC,UArMGA,CAqMQyC,oBAAoB,CAAClS,GAAK8O,EAAAA,mBAAAA,CAAAA,EACrCW,UAtMGA,CAsMQyC,oBAAoB,CAAClS,GAAKgP,EAAAA,mBAAAA,CAAAA,CAAAA,CAAAA;AAEvC4C,gBAAAA,oBAAAA,CAAqB9C,mBAAmB,GAAGA,mBAAAA,CAAAA;AAC3C8C,gBAAAA,oBAAAA,CAAqB5C,mBAAmB,GAAGA,mBAAAA,CAAAA;AAC7C,aAAA;;YAGA,IAAMW,UAAAA,GAAa,IAAI,CAACA,UAAU,CAAA;AAClC,YAAA,IAAI,CAACxO,gBAAMgR,CAAAA,MAAM,CAACR,SAAUhC,CAAAA,UAAU,EAAEA,UAAa,CAAA,EAAA;AACnDxP,gBAAAA,EAAAA,CAAGwP,UAAU,CAACA,UAAW5O,CAAAA,CAAC,EAAE4O,UAAAA,CAAW3O,CAAC,EAAE2O,UAAWnO,CAAAA,CAAC,EAAEmO,UAAAA,CAAWrlB,CAAC,CAAA,CAAA;gBACpEqnB,SAAUhC,CAAAA,UAAU,CAACz/B,QAAQ,CAACy/B,UAAAA,CAAAA,CAAAA;AAChC,aAAA;AACF,SAAA;;QAGA,IAAIJ,cAAAA,KAAmBqC,oBAAqBrC,CAAAA,cAAc,EAAE;AAC1DpP,YAAAA,EAAAA,CAAGiS,SAAS,CACV,CAAC7C,iBAAiB7d,cAAe2gB,CAAAA,GAAG,MAAM,CAC1C,EAAC9C,CAAAA,cAAAA,GAAiB7d,eAAe4gB,KAAI,MAAO,CAAA,EAC5C,CAAC/C,cAAiB7d,GAAAA,cAAAA,CAAe6gB,IAAI,MAAM,CAC3C,EAAChD,CAAAA,cAAAA,GAAiB7d,cAAe8gB,CAAAA,KAAK,MAAM,CAAA,CAAA,CAAA;AAE9CZ,YAAAA,oBAAAA,CAAqBrC,cAAc,GAAGA,cAAAA,CAAAA;AACxC,SAAA;;QAGA,IAAMK,eAAAA,GAAkB,IAAI,CAACA,eAAe,CAAA;QAC5C,IAAIA,eAAAA,KAAoB+B,SAAU/B,CAAAA,eAAe,EAAE;AACjD,YAAA,IAAIA,eAAiB,EAAA;gBACnBzP,EAAG/rB,CAAAA,MAAM,CAAC+rB,EAAAA,CAAGsS,wBAAwB,CAAA,CAAA;aAChC,MAAA;gBACLtS,EAAG9rB,CAAAA,OAAO,CAAC8rB,EAAAA,CAAGsS,wBAAwB,CAAA,CAAA;AACxC,aAAA;AACAd,YAAAA,SAAAA,CAAU/B,eAAe,GAAGA,eAAAA,CAAAA;AAC9B,SAAA;AACF,KAAA,CAAA;AAzOWH,IAAAA,UAAAA,CACIuC,iBA+Bd,GA/BD,SAAeA,iBAAkBhS,CAAAA,GAAsB,EAAE0S,WAAwB,EAAA;QAC/E,IAAMvS,EAAAA,GAAKH,IAAIG,EAAE,CAAA;QAEjB,OAAQuS,WAAAA;AACN,YAAA,KAAKlhB,YAAY6d,IAAI;AACnB,gBAAA,OAAOlP,GAAGwS,IAAI,CAAA;AAChB,YAAA,KAAKnhB,YAAY0d,GAAG;AAClB,gBAAA,OAAO/O,GAAGyS,GAAG,CAAA;AACf,YAAA,KAAKphB,YAAYqhB,WAAW;AAC1B,gBAAA,OAAO1S,GAAG2S,SAAS,CAAA;AACrB,YAAA,KAAKthB,YAAYuhB,mBAAmB;AAClC,gBAAA,OAAO5S,GAAG6S,mBAAmB,CAAA;AAC/B,YAAA,KAAKxhB,YAAYyhB,gBAAgB;AAC/B,gBAAA,OAAO9S,GAAG+S,SAAS,CAAA;AACrB,YAAA,KAAK1hB,YAAY2hB,wBAAwB;AACvC,gBAAA,OAAOhT,GAAGiT,mBAAmB,CAAA;AAC/B,YAAA,KAAK5hB,YAAY6hB,WAAW;AAC1B,gBAAA,OAAOlT,GAAGmT,SAAS,CAAA;AACrB,YAAA,KAAK9hB,YAAY+hB,mBAAmB;AAClC,gBAAA,OAAOpT,GAAGqT,mBAAmB,CAAA;AAC/B,YAAA,KAAKhiB,YAAYiiB,gBAAgB;AAC/B,gBAAA,OAAOtT,GAAGuT,SAAS,CAAA;AACrB,YAAA,KAAKliB,YAAYmiB,wBAAwB;AACvC,gBAAA,OAAOxT,GAAGyT,mBAAmB,CAAA;AAC/B,YAAA,KAAKpiB,YAAYqiB,mBAAmB;AAClC,gBAAA,OAAO1T,GAAG2T,kBAAkB,CAAA;AAC9B,YAAA,KAAKtiB,YAAYuiB,UAAU;AACzB,gBAAA,OAAO5T,GAAG6T,cAAc,CAAA;AAC1B,YAAA,KAAKxiB,YAAYyiB,kBAAkB;AACjC,gBAAA,OAAO9T,GAAG+T,wBAAwB,CAAA;AACtC,SAAA;AACF,KAAA,CAAA;AAhCWzE,IAAAA,UAAAA,CAkCIyC,oBAqBd,GArBD,SAAeA,oBAAqBlS,CAAAA,GAAsB,EAAEmU,cAA8B,EAAA;QACxF,IAAMhU,EAAAA,GAAKH,IAAIG,EAAE,CAAA;QAEjB,OAAQgU,cAAAA;AACN,YAAA,KAAK1iB,eAAesd,GAAG;AACrB,gBAAA,OAAO5O,GAAGiU,QAAQ,CAAA;AACpB,YAAA,KAAK3iB,eAAe4iB,QAAQ;AAC1B,gBAAA,OAAOlU,GAAGmU,aAAa,CAAA;AACzB,YAAA,KAAK7iB,eAAe8iB,eAAe;AACjC,gBAAA,OAAOpU,GAAGqU,qBAAqB,CAAA;AACjC,YAAA,KAAK/iB,eAAegjB,GAAG;AACrB,gBAAA,IAAI,CAACzU,GAAIsN,CAAAA,OAAO,CAACrU,gBAAAA,CAAiByb,WAAW,CAAG,EAAA;AAC9C,oBAAA,MAAM,IAAI94B,KAAM,CAAA,qDAAA,CAAA,CAAA;AAClB,iBAAA;gBACA,OAAOukB,EAAAA,CAAGwU,GAAG,CAAA;AACf,YAAA,KAAKljB,eAAemjB,GAAG;AACrB,gBAAA,IAAI,CAAC5U,GAAIsN,CAAAA,OAAO,CAACrU,gBAAAA,CAAiByb,WAAW,CAAG,EAAA;AAC9C,oBAAA,MAAM,IAAI94B,KAAM,CAAA,qDAAA,CAAA,CAAA;AAClB,iBAAA;gBACA,OAAOukB,EAAAA,CAAG0U,GAAG,CAAA;AACjB,SAAA;AACF,KAAA,CAAA;AAvDWpF,IAAAA,OAAAA,UAAAA,CAAAA;AA0OZ,CAAA,GAAA;;;;;;;;ACnPD;;IAGO,IAAMqF,UAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,UAAAA,GAAAA;AAwBX,sDACAjG,OAAmB,GAAA,IAAA,CAAA;0CACY,IAAA,CAC/BkG,eAAmCpjB,GAAAA,eAAAA,CAAgBqjB,IAAI,CAAA;AACvD,2DACAC,YAAwB,GAAA,IAAA,CAAA;;AA7BbH,IAAAA,IAAAA,MAAAA,GAAAA,UAAAA,CAAAA,SAAAA,CAAAA;AA+BX;;AAEC,MACDjF,OAAAA,qBAiBC,GAjBDA,SAAAA,qBAAsBC,CAAAA,kBAAkD,EAAE1X,UAAsB,EAAA;AAC9F,QAAA,IAAM8c,cAAiBpF,GAAAA,kBAAkB,CAACje,qBAAAA,CAAsBsjB,iBAAiB,CAAC,CAAA;AAClF,QAAA,IAAID,mBAAmBhmC,SAAW,EAAA;YAChC,IAAM2/B,OAAAA,GAAUzW,UAAW8X,CAAAA,QAAQ,CAACgF,cAAAA,CAAAA,CAAAA;AACpC,YAAA,IAAI,CAACrG,OAAO,GAAGA,YAAY3/B,SAAY,GAAA,CAAC,CAAC2/B,OAAU,GAAA,KAAA,CAAA;AACrD,SAAA;AAEA,QAAA,IAAMuG,oBAAuBtF,GAAAA,kBAAkB,CAACje,qBAAAA,CAAsBwjB,sBAAsB,CAAC,CAAA;AAC7F,QAAA,IAAID,yBAAyBlmC,SAAW,EAAA;YACtC,IAAM+lC,YAAAA,GAAe7c,UAAW8X,CAAAA,QAAQ,CAACkF,oBAAAA,CAAAA,CAAAA;AACzC,YAAA,IAAI,CAACH,YAAY,GAAGA,iBAAiB/lC,SAAY,GAAA,CAAC,CAAC+lC,YAAe,GAAA,KAAA,CAAA;AACpE,SAAA;AAEA,QAAA,IAAMK,uBAA0BxF,GAAAA,kBAAkB,CAACje,qBAAAA,CAAsB0jB,yBAAyB,CAAC,CAAA;AACnG,QAAA,IAAID,4BAA4BpmC,SAAW,EAAA;AAClBkpB,YAAAA,IAAAA,oBAAAA,CAAAA;YAAvB,IAAI,CAAC2c,eAAe,GAAG3c,CAAAA,oBAAAA,GAAAA,UAAW8X,CAAAA,QAAQ,CAACoF,uBAAAA,CAAAA,KAAAA,IAAAA,GAApBld,oBAAgDzG,GAAAA,eAAAA,CAAgBqjB,IAAI,CAAA;AAC7F,SAAA;AACF,KAAA,CAAA;AAEA;;;MAIA1D,MAAAA,CAAAA,MAMC,GANDA,SAAAA,OACEC,gBAAmC,EACnCC,eAA4B,EAC5BC,YAAoC,EAAA;AAEpC,QAAA,IAAI,CAACC,cAAc,CAACH,gBAAkBC,EAAAA,eAAAA,CAAgBgE,UAAU,EAAE/D,YAAAA,CAAAA,CAAAA;AACpE,KAAA,CAAA;IAEA,MAAQC,CAAAA,cA+BP,GA/BD,SAAQA,cAAAA,CAAe1R,GAAsB,EAAE2R,SAAqB,EAAEF,YAAoC,EAAA;QACxG,IAAMtR,EAAAA,GAA4BH,IAAIG,EAAE,CAAA;QACxC,IAAiD,KAAA,GAAA,IAAI,EAA/C0O,OAA2C,GAAA,KAAA,CAA3CA,SAASkG,eAAkC,GAAA,KAAA,CAAlCA,eAAiBE,EAAAA,YAAAA,GAAiB,KAAjBA,CAAAA,YAAAA,CAAAA;AAEhC,QAAA,IAAIxD,YAAc,EAAA;AAChB,YAAA,IAAMgE,YAAehE,GAAAA,YAAY,CAAC5f,qBAAAA,CAAsBsjB,iBAAiB,CAAC,CAAA;YAC1EM,YAAiBvmC,KAAAA,SAAAA,KAAc2/B,OAAAA,GAAmB4G,YAAW,CAAA,CAAA;AAC/D,SAAA;QAEA,IAAI5G,OAAAA,IAAW8C,SAAU9C,CAAAA,OAAO,EAAE;AAChC,YAAA,IAAIA,OAAS,EAAA;gBACX1O,EAAG/rB,CAAAA,MAAM,CAAC+rB,EAAAA,CAAGuV,UAAU,CAAA,CAAA;aAClB,MAAA;gBACLvV,EAAG9rB,CAAAA,OAAO,CAAC8rB,EAAAA,CAAGuV,UAAU,CAAA,CAAA;AAC1B,aAAA;AACA/D,YAAAA,SAAAA,CAAU9C,OAAO,GAAGA,OAAAA,CAAAA;AACtB,SAAA;AAEA,QAAA,IAAIA,OAAS,EAAA;;YAEX,IAAIkG,eAAAA,IAAmBpD,SAAUoD,CAAAA,eAAe,EAAE;AAChD5U,gBAAAA,EAAAA,CAAGwV,SAAS,CAtFPb,UAsFmBc,CAAAA,qBAAqB,CAAC5V,GAAK+U,EAAAA,eAAAA,CAAAA,CAAAA,CAAAA;AACnDpD,gBAAAA,SAAAA,CAAUoD,eAAe,GAAGA,eAAAA,CAAAA;AAC9B,aAAA;AACF,SAAA;;QAGA,IAAIE,YAAAA,IAAgBtD,SAAUsD,CAAAA,YAAY,EAAE;AAC1C9U,YAAAA,EAAAA,CAAG0V,SAAS,CAACZ,YAAAA,CAAAA,CAAAA;AACbtD,YAAAA,SAAAA,CAAUsD,YAAY,GAAGA,YAAAA,CAAAA;AAC3B,SAAA;AACF,KAAA,CAAA;AAhGWH,IAAAA,UAAAA,CACIc,qBAqBd,GArBD,SAAeA,qBAAsB5V,CAAAA,GAAsB,EAAE+U,eAAgC,EAAA;QAC3F,IAAM5U,EAAAA,GAAKH,IAAIG,EAAE,CAAA;QAEjB,OAAQ4U,eAAAA;AACN,YAAA,KAAKpjB,gBAAgBmkB,KAAK;AACxB,gBAAA,OAAO3V,GAAG4V,KAAK,CAAA;AACjB,YAAA,KAAKpkB,gBAAgBqjB,IAAI;AACvB,gBAAA,OAAO7U,GAAG6V,IAAI,CAAA;AAChB,YAAA,KAAKrkB,gBAAgBskB,KAAK;AACxB,gBAAA,OAAO9V,GAAG+V,KAAK,CAAA;AACjB,YAAA,KAAKvkB,gBAAgBwkB,SAAS;AAC5B,gBAAA,OAAOhW,GAAGiW,MAAM,CAAA;AAClB,YAAA,KAAKzkB,gBAAgB0kB,OAAO;AAC1B,gBAAA,OAAOlW,GAAGmW,OAAO,CAAA;AACnB,YAAA,KAAK3kB,gBAAgB4kB,QAAQ;AAC3B,gBAAA,OAAOpW,GAAGqW,QAAQ,CAAA;AACpB,YAAA,KAAK7kB,gBAAgB8kB,YAAY;AAC/B,gBAAA,OAAOtW,GAAGuW,MAAM,CAAA;AAClB,YAAA,KAAK/kB,gBAAgBglB,MAAM;AACzB,gBAAA,OAAOxW,GAAGyW,MAAM,CAAA;AACpB,SAAA;AACF,KAAA,CAAA;AAtBW9B,IAAAA,OAAAA,UAAAA,CAAAA;AAiGZ,CAAA;;ACpGD;;IAGO,IAAM+B,WAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,WAAAA,GAAAA;0FACoE,IAAA,CAC/EC,QAAqBllB,GAAAA,QAAAA,CAASmlB,IAAI,CAAA;AAClC,mIACAC,SAAoB,GAAA,CAAA,CAAA;AACpB,qFACAC,oBAA+B,GAAA,CAAA,CAAA;AAE/B,8BACAC,eAA2B,GAAA,IAAA,CAAA;AAC3B,8BACAC,gBAA4B,GAAA,KAAA,CAAA;;AAXjBN,IAAAA,IAAAA,MAAAA,GAAAA,WAAAA,CAAAA,SAAAA,CAAAA;AAaX;;AAEC,MACDhH,OAAAA,qBAeC,GAfDA,SAAAA,qBAAsBC,CAAAA,kBAAkD,EAAE1X,UAAsB,EAAA;AAC9F,QAAA,IAAMgf,gBAAmBtH,GAAAA,kBAAkB,CAACje,qBAAAA,CAAsBwlB,mBAAmB,CAAC,CAAA;AACtF,QAAA,IAAID,qBAAqBloC,SAAW,EAAA;AAClBkpB,YAAAA,IAAAA,oBAAAA,CAAAA;YAAhB,IAAI,CAAC0e,QAAQ,GAAG1e,CAAAA,oBAAAA,GAAAA,UAAW8X,CAAAA,QAAQ,CAACkH,gBAAAA,CAAAA,KAAAA,IAAAA,GAApBhf,oBAAyCxG,GAAAA,QAAAA,CAASmlB,IAAI,CAAA;AACxE,SAAA;AAEA,QAAA,IAAMO,iBAAoBxH,GAAAA,kBAAkB,CAACje,qBAAAA,CAAsB0lB,oBAAoB,CAAC,CAAA;AACxF,QAAA,IAAID,sBAAsBpoC,SAAW,EAAA;AAClBkpB,YAAAA,IAAAA,qBAAAA,CAAAA;YAAjB,IAAI,CAAC4e,SAAS,GAAG5e,CAAAA,wBAAAA,UAAW8X,CAAAA,QAAQ,CAACoH,iBAAAA,CAAAA,KAAAA,IAAAA,GAApBlf,qBAA0C,GAAA,CAAA,CAAA;AAC7D,SAAA;AAEA,QAAA,IAAMof,4BAA+B1H,GAAAA,kBAAkB,CAACje,qBAAAA,CAAsB4lB,+BAA+B,CAAC,CAAA;AAC9G,QAAA,IAAID,iCAAiCtoC,SAAW,EAAA;AAClBkpB,YAAAA,IAAAA,qBAAAA,CAAAA;YAA5B,IAAI,CAAC6e,oBAAoB,GAAG7e,CAAAA,wBAAAA,UAAW8X,CAAAA,QAAQ,CAACsH,4BAAAA,CAAAA,KAAAA,IAAAA,GAApBpf,qBAAqD,GAAA,CAAA,CAAA;AACnF,SAAA;AACF,KAAA,CAAA;AAEA;;MAGAkZ,MAAAA,CAAAA,MAOC,GAPDA,SAAAA,MAAAA,CACEC,gBAAmC,EACnCC,eAA4B,EAC5BkG,eAAwB,EACxBjG,YAAoC,EAAA;AAEpC,QAAA,IAAI,CAACC,cAAc,CAACH,kBAAkBC,eAAgBmG,CAAAA,WAAW,EAAED,eAAiBjG,EAAAA,YAAAA,CAAAA,CAAAA;AACtF,KAAA,CAAA;IAEA,MAAQC,CAAAA,cA0DP,GA1DD,SAAQA,cACN1R,CAAAA,GAAsB,EACtB2R,SAAsB,EACtB+F,eAAwB,EACxBjG,YAAoC,EAAA;QAEpC,IAAMtR,EAAAA,GAA4BH,IAAIG,EAAE,CAAA;QACxC,IAAoD,KAAA,GAAA,IAAI,EAAlD2W,QAA8C,GAAA,KAAA,CAA9CA,UAAUE,SAAoC,GAAA,KAAA,CAApCA,SAAWC,EAAAA,oBAAAA,GAAyB,KAAzBA,CAAAA,oBAAAA,CAAAA;AAE3B,QAAA,IAAIxF,YAAc,EAAA;AAChB,YAAA,IAAMmG,aAAgBnG,GAAAA,YAAY,CAAC5f,qBAAAA,CAAsBwlB,mBAAmB,CAAC,CAAA;YAC7EO,aAAkB1oC,KAAAA,SAAAA,KAAc4nC,QAAAA,GAAqBc,aAAY,CAAA,CAAA;AACnE,SAAA;QAEA,IAAMC,cAAAA,GAAiBf,QAAallB,KAAAA,QAAAA,CAASkmB,GAAG,CAAA;QAChD,IAAID,cAAAA,KAAmBlG,SAAUuF,CAAAA,eAAe,EAAE;AAChD,YAAA,IAAIW,cAAgB,EAAA;gBAClB1X,EAAG/rB,CAAAA,MAAM,CAAC+rB,EAAAA,CAAG4X,SAAS,CAAA,CAAA;aACjB,MAAA;gBACL5X,EAAG9rB,CAAAA,OAAO,CAAC8rB,EAAAA,CAAG4X,SAAS,CAAA,CAAA;AACzB,aAAA;AACApG,YAAAA,SAAAA,CAAUuF,eAAe,GAAGW,cAAAA,CAAAA;AAC9B,SAAA;;AAGA,QAAA,IAAIA,cAAgB,EAAA;YAClB,IAAIf,QAAAA,KAAanF,SAAUmF,CAAAA,QAAQ,EAAE;gBACnC,IAAIA,QAAAA,IAAYllB,QAASmlB,CAAAA,IAAI,EAAE;oBAC7B5W,EAAG6X,CAAAA,QAAQ,CAAC7X,EAAAA,CAAG8X,IAAI,CAAA,CAAA;iBACd,MAAA;oBACL9X,EAAG6X,CAAAA,QAAQ,CAAC7X,EAAAA,CAAG+X,KAAK,CAAA,CAAA;AACtB,iBAAA;AACAvG,gBAAAA,SAAAA,CAAUmF,QAAQ,GAAGA,QAAAA,CAAAA;AACvB,aAAA;AACF,SAAA;QAEA,IAAIY,eAAAA,KAAoB/F,SAAUwF,CAAAA,gBAAgB,EAAE;AAClD,YAAA,IAAIO,eAAiB,EAAA;gBACnBvX,EAAGgY,CAAAA,SAAS,CAAChY,EAAAA,CAAGiY,EAAE,CAAA,CAAA;aACb,MAAA;gBACLjY,EAAGgY,CAAAA,SAAS,CAAChY,EAAAA,CAAGkY,GAAG,CAAA,CAAA;AACrB,aAAA;AACA1G,YAAAA,SAAAA,CAAUwF,gBAAgB,GAAGO,eAAAA,CAAAA;AAC/B,SAAA;;QAGA,IAAI,CAAC1X,GAAIsY,CAAAA,sBAAsB,EAAE;AAC/B,YAAA,IAAItB,cAAcrF,SAAUqF,CAAAA,SAAS,IAAIC,oBAAyBtF,KAAAA,SAAAA,CAAUsF,oBAAoB,EAAE;gBAChG,IAAID,SAAAA,KAAc,CAAKC,IAAAA,oBAAAA,KAAyB,CAAG,EAAA;oBACjD9W,EAAG/rB,CAAAA,MAAM,CAAC+rB,EAAAA,CAAGoY,mBAAmB,CAAA,CAAA;oBAChCpY,EAAGqY,CAAAA,aAAa,CAACvB,oBAAsBD,EAAAA,SAAAA,CAAAA,CAAAA;iBAClC,MAAA;oBACL7W,EAAG9rB,CAAAA,OAAO,CAAC8rB,EAAAA,CAAGoY,mBAAmB,CAAA,CAAA;AACnC,iBAAA;AACA5G,gBAAAA,SAAAA,CAAUqF,SAAS,GAAGA,SAAAA,CAAAA;AACtBrF,gBAAAA,SAAAA,CAAUsF,oBAAoB,GAAGA,oBAAAA,CAAAA;AACnC,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AAvGWJ,IAAAA,OAAAA,WAAAA,CAAAA;AAwGZ,CAAA;;AC1GD;;IAGO,IAAM4B,YAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,YAAAA,GAAAA;AA+CX,oDACA5J,OAAmB,GAAA,KAAA,CAAA;AACnB,qEACA6J,cAAyB,GAAA,CAAA,CAAA;AACzB,2IACAplB,IAAe,GAAA,IAAA,CAAA;AACf,iHACAqlB,SAAoB,GAAA,IAAA,CAAA;sIACuG,IAAA,CAC3HC,oBAAwCjnB,GAAAA,eAAAA,CAAgBglB,MAAM,CAAA;gIACuD,IAAA,CACrHkC,mBAAuClnB,GAAAA,eAAAA,CAAgBglB,MAAM,CAAA;iHACyC,IAAA,CACtGmC,kBAAuC9mB,GAAAA,gBAAAA,CAAiB+mB,IAAI,CAAA;gHACyC,IAAA,CACrGC,iBAAsChnB,GAAAA,gBAAAA,CAAiB+mB,IAAI,CAAA;0FACoB,IAAA,CAC/EE,kBAAuCjnB,GAAAA,gBAAAA,CAAiB+mB,IAAI,CAAA;yFACkB,IAAA,CAC9EG,iBAAsClnB,GAAAA,gBAAAA,CAAiB+mB,IAAI,CAAA;qHAC+C,IAAA,CAC1GI,mBAAwCnnB,GAAAA,gBAAAA,CAAiB+mB,IAAI,CAAA;oHAC4C,IAAA,CACzGK,kBAAuCpnB,GAAAA,gBAAAA,CAAiB+mB,IAAI,CAAA;;AAtEjDN,IAAAA,IAAAA,MAAAA,GAAAA,YAAAA,CAAAA,SAAAA,CAAAA;AAwEX;;AAEC,MACD5I,OAAAA,qBA6DC,GA7DDA,SAAAA,qBAAsBC,CAAAA,kBAAkD,EAAE1X,UAAsB,EAAA;AAC9F,QAAA,IAAM8c,cAAiBpF,GAAAA,kBAAkB,CAACje,qBAAAA,CAAsBwnB,mBAAmB,CAAC,CAAA;AACpF,QAAA,IAAInE,mBAAmBhmC,SAAW,EAAA;YAChC,IAAM2/B,OAAAA,GAAUzW,UAAW8X,CAAAA,QAAQ,CAACgF,cAAAA,CAAAA,CAAAA;AACpC,YAAA,IAAI,CAACrG,OAAO,GAAGA,YAAY3/B,SAAY,GAAA,CAAC,CAAC2/B,OAAU,GAAA,KAAA,CAAA;AACrD,SAAA;AAEA,QAAA,IAAMyK,sBAAyBxJ,GAAAA,kBAAkB,CAACje,qBAAAA,CAAsB0nB,0BAA0B,CAAC,CAAA;AACnG,QAAA,IAAID,2BAA2BpqC,SAAW,EAAA;AAClBkpB,YAAAA,IAAAA,oBAAAA,CAAAA;YAAtB,IAAI,CAACsgB,cAAc,GAAGtgB,CAAAA,uBAAAA,UAAW8X,CAAAA,QAAQ,CAACoJ,sBAAAA,CAAAA,KAAAA,IAAAA,GAApBlhB,oBAA+C,GAAA,CAAA,CAAA;AACvE,SAAA;AAEA,QAAA,IAAMohB,YAAe1J,GAAAA,kBAAkB,CAACje,qBAAAA,CAAsB4nB,gBAAgB,CAAC,CAAA;AAC/E,QAAA,IAAID,iBAAiBtqC,SAAW,EAAA;AAClBkpB,YAAAA,IAAAA,qBAAAA,CAAAA;YAAZ,IAAI,CAAC9E,IAAI,GAAG8E,CAAAA,wBAAAA,UAAW8X,CAAAA,QAAQ,CAACsJ,YAAAA,CAAAA,KAAAA,IAAAA,GAApBphB,qBAAqC,GAAA,IAAA,CAAA;AACnD,SAAA;AAEA,QAAA,IAAMshB,iBAAoB5J,GAAAA,kBAAkB,CAACje,qBAAAA,CAAsB8nB,qBAAqB,CAAC,CAAA;AACzF,QAAA,IAAID,sBAAsBxqC,SAAW,EAAA;AAClBkpB,YAAAA,IAAAA,qBAAAA,CAAAA;YAAjB,IAAI,CAACugB,SAAS,GAAGvgB,CAAAA,wBAAAA,UAAW8X,CAAAA,QAAQ,CAACwJ,iBAAAA,CAAAA,KAAAA,IAAAA,GAApBthB,qBAA0C,GAAA,IAAA,CAAA;AAC7D,SAAA;AAEA,QAAA,IAAMwhB,4BAA+B9J,GAAAA,kBAAkB,CAACje,qBAAAA,CAAsBgoB,gCAAgC,CAAC,CAAA;AAC/G,QAAA,IAAID,iCAAiC1qC,SAAW,EAAA;AAClBkpB,YAAAA,IAAAA,qBAAAA,CAAAA;YAA5B,IAAI,CAACwgB,oBAAoB,GAAGxgB,CAAAA,qBAAAA,GAAAA,UAAW8X,CAAAA,QAAQ,CAAC0J,4BAAAA,CAAAA,KAAAA,IAAAA,GAApBxhB,qBAAqDzG,GAAAA,eAAAA,CAAgBglB,MAAM,CAAA;AACzG,SAAA;AAEA,QAAA,IAAMmD,2BAA8BhK,GAAAA,kBAAkB,CAACje,qBAAAA,CAAsBkoB,+BAA+B,CAAC,CAAA;AAC7G,QAAA,IAAID,gCAAgC5qC,SAAW,EAAA;AAClBkpB,YAAAA,IAAAA,qBAAAA,CAAAA;YAA3B,IAAI,CAACygB,mBAAmB,GAAGzgB,CAAAA,qBAAAA,GAAAA,UAAW8X,CAAAA,QAAQ,CAAC4J,2BAAAA,CAAAA,KAAAA,IAAAA,GAApB1hB,qBAAoDzG,GAAAA,eAAAA,CAAgBglB,MAAM,CAAA;AACvG,SAAA;AAEA,QAAA,IAAMqD,0BAA6BlK,GAAAA,kBAAkB,CAACje,qBAAAA,CAAsBooB,8BAA8B,CAAC,CAAA;AAC3G,QAAA,IAAID,+BAA+B9qC,SAAW,EAAA;AAClBkpB,YAAAA,IAAAA,qBAAAA,CAAAA;YAA1B,IAAI,CAAC0gB,kBAAkB,GAAG1gB,CAAAA,qBAAAA,GAAAA,UAAW8X,CAAAA,QAAQ,CAAC8J,0BAAAA,CAAAA,KAAAA,IAAAA,GAApB5hB,qBAAmDpG,GAAAA,gBAAAA,CAAiB+mB,IAAI,CAAA;AACpG,SAAA;AAEA,QAAA,IAAMmB,yBAA4BpK,GAAAA,kBAAkB,CAACje,qBAAAA,CAAsBsoB,6BAA6B,CAAC,CAAA;AACzG,QAAA,IAAID,8BAA8BhrC,SAAW,EAAA;AAClBkpB,YAAAA,IAAAA,qBAAAA,CAAAA;YAAzB,IAAI,CAAC4gB,iBAAiB,GAAG5gB,CAAAA,qBAAAA,GAAAA,UAAW8X,CAAAA,QAAQ,CAACgK,yBAAAA,CAAAA,KAAAA,IAAAA,GAApB9hB,qBAAkDpG,GAAAA,gBAAAA,CAAiB+mB,IAAI,CAAA;AAClG,SAAA;AAEA,QAAA,IAAMqB,0BAA6BtK,GAAAA,kBAAkB,CAACje,qBAAAA,CAAsBwoB,8BAA8B,CAAC,CAAA;AAC3G,QAAA,IAAID,+BAA+BlrC,SAAW,EAAA;AAClBkpB,YAAAA,IAAAA,qBAAAA,CAAAA;YAA1B,IAAI,CAAC6gB,kBAAkB,GAAG7gB,CAAAA,qBAAAA,GAAAA,UAAW8X,CAAAA,QAAQ,CAACkK,0BAAAA,CAAAA,KAAAA,IAAAA,GAApBhiB,qBAAmDpG,GAAAA,gBAAAA,CAAiB+mB,IAAI,CAAA;AACpG,SAAA;AAEA,QAAA,IAAMuB,yBAA4BxK,GAAAA,kBAAkB,CAACje,qBAAAA,CAAsB0oB,6BAA6B,CAAC,CAAA;AACzG,QAAA,IAAID,8BAA8BprC,SAAW,EAAA;AAClBkpB,YAAAA,IAAAA,qBAAAA,CAAAA;YAAzB,IAAI,CAAC8gB,iBAAiB,GAAG9gB,CAAAA,qBAAAA,GAAAA,UAAW8X,CAAAA,QAAQ,CAACoK,yBAAAA,CAAAA,KAAAA,IAAAA,GAApBliB,qBAAkDpG,GAAAA,gBAAAA,CAAiB+mB,IAAI,CAAA;AAClG,SAAA;AAEA,QAAA,IAAMyB,2BAA8B1K,GAAAA,kBAAkB,CAACje,qBAAAA,CAAsB4oB,+BAA+B,CAAC,CAAA;AAC7G,QAAA,IAAID,gCAAgCtrC,SAAW,EAAA;AAClBkpB,YAAAA,IAAAA,qBAAAA,CAAAA;YAA3B,IAAI,CAAC+gB,mBAAmB,GAAG/gB,CAAAA,qBAAAA,GAAAA,UAAW8X,CAAAA,QAAQ,CAACsK,2BAAAA,CAAAA,KAAAA,IAAAA,GAApBpiB,qBAAoDpG,GAAAA,gBAAAA,CAAiB+mB,IAAI,CAAA;AACtG,SAAA;AAEA,QAAA,IAAM2B,0BAA6B5K,GAAAA,kBAAkB,CAACje,qBAAAA,CAAsB8oB,8BAA8B,CAAC,CAAA;AAC3G,QAAA,IAAID,+BAA+BxrC,SAAW,EAAA;AAClBkpB,YAAAA,IAAAA,sBAAAA,CAAAA;YAA1B,IAAI,CAACghB,kBAAkB,GAAGhhB,CAAAA,sBAAAA,GAAAA,UAAW8X,CAAAA,QAAQ,CAACwK,0BAAAA,CAAAA,KAAAA,IAAAA,GAApBtiB,sBAAmDpG,GAAAA,gBAAAA,CAAiB+mB,IAAI,CAAA;AACpG,SAAA;AACF,KAAA,CAAA;AAEA;;MAGAzH,MAAAA,CAAAA,MAMC,GANDA,SAAAA,OACEC,gBAAmC,EACnCC,eAA4B,EAC5BC,YAAoC,EAAA;AAEpC,QAAA,IAAI,CAACC,cAAc,CAACH,gBAAkBC,EAAAA,eAAAA,CAAgBoJ,YAAY,EAAEnJ,YAAAA,CAAAA,CAAAA;AACtE,KAAA,CAAA;IAEA,MAAQC,CAAAA,cAqHP,GArHD,SAAQA,cAAAA,CAAe1R,GAAsB,EAAE2R,SAAuB,EAAEF,YAAoC,EAAA;QAC1G,IAAMtR,EAAAA,GAA4BH,IAAIG,EAAE,CAAA;AACxC,QAAA,IAaI,QAAA,IAAI,EAZN0O,OAYE,GAAA,KAAA,CAZFA,SACA6J,cAWE,GAAA,KAAA,CAXFA,cACAplB,EAAAA,IAAAA,GAUE,MAVFA,IACAslB,EAAAA,oBAAAA,GASE,KATFA,CAAAA,oBAAAA,EACAC,sBAQE,KARFA,CAAAA,mBAAAA,EACAI,kBAOE,GAAA,KAAA,CAPFA,oBACAE,mBAME,GAAA,KAAA,CANFA,mBACAL,EAAAA,kBAAAA,GAKE,MALFA,kBACAI,EAAAA,iBAAAA,GAIE,KAJFA,CAAAA,iBAAAA,EACAE,qBAGE,KAHFA,CAAAA,kBAAAA,EACAJ,oBAEE,KAFFA,CAAAA,iBAAAA,EACAL,YACE,KADFA,CAAAA,SAAAA,CAAAA;AAGF,QAAA,IAAIlH,YAAc,EAAA;AAChB,YAAA,IAAMgE,YAAehE,GAAAA,YAAY,CAAC5f,qBAAAA,CAAsBwnB,mBAAmB,CAAC,CAAA;YAC5E5D,YAAiBvmC,KAAAA,SAAAA,KAAc2/B,OAAAA,GAAmB4G,YAAW,CAAA,CAAA;AAC7D,YAAA,IAAMoF,cAAiBpJ,GAAAA,YAAY,CAAC5f,qBAAAA,CAAsB8nB,qBAAqB,CAAC,CAAA;YAChFkB,cAAmB3rC,KAAAA,SAAAA,KAAcypC,SAAAA,GAAoBkC,cAAa,CAAA,CAAA;AAClE,YAAA,IAAMC,mBAAsBrJ,GAAAA,YAAY,CAAC5f,qBAAAA,CAAsB0nB,0BAA0B,CAAC,CAAA;YAC1FuB,mBAAwB5rC,KAAAA,SAAAA,KAAcwpC,cAAAA,GAAyBoC,mBAAkB,CAAA,CAAA;AACjF,YAAA,IAAMC,yBAA4BtJ,GAAAA,YAAY,CAAC5f,qBAAAA,CAAsBgoB,gCAAgC,CAAC,CAAA;YACtGkB,yBAA8B7rC,KAAAA,SAAAA,KAAc0pC,oBAAAA,GAAwCmC,yBAAwB,CAAA,CAAA;AAC5G,YAAA,IAAMC,wBAA2BvJ,GAAAA,YAAY,CAAC5f,qBAAAA,CAAsBkoB,+BAA+B,CAAC,CAAA;YACpGiB,wBAA6B9rC,KAAAA,SAAAA,KAAc2pC,mBAAAA,GAAuCmC,wBAAuB,CAAA,CAAA;AACzG,YAAA,IAAMC,uBAA0BxJ,GAAAA,YAAY,CAAC5f,qBAAAA,CAAsBooB,8BAA8B,CAAC,CAAA;YAClGgB,uBAA4B/rC,KAAAA,SAAAA,KAAc4pC,kBAAAA,GAAuCmC,uBAAsB,CAAA,CAAA;AACvG,YAAA,IAAMC,sBAAyBzJ,GAAAA,YAAY,CAAC5f,qBAAAA,CAAsBsoB,6BAA6B,CAAC,CAAA;YAChGe,sBAA2BhsC,KAAAA,SAAAA,KAAc8pC,iBAAAA,GAAsCkC,sBAAqB,CAAA,CAAA;AACpG,YAAA,IAAMC,uBAA0B1J,GAAAA,YAAY,CAAC5f,qBAAAA,CAAsBwoB,8BAA8B,CAAC,CAAA;YAClGc,uBAA4BjsC,KAAAA,SAAAA,KAAc+pC,kBAAAA,GAAuCkC,uBAAsB,CAAA,CAAA;AACvG,YAAA,IAAMC,sBAAyB3J,GAAAA,YAAY,CAAC5f,qBAAAA,CAAsB0oB,6BAA6B,CAAC,CAAA;YAChGa,sBAA2BlsC,KAAAA,SAAAA,KAAcgqC,iBAAAA,GAAsCkC,sBAAqB,CAAA,CAAA;AACpG,YAAA,IAAMC,wBAA2B5J,GAAAA,YAAY,CAAC5f,qBAAAA,CAAsB4oB,+BAA+B,CAAC,CAAA;YACpGY,wBAA6BnsC,KAAAA,SAAAA,KAAciqC,mBAAAA,GAAwCkC,wBAAuB,CAAA,CAAA;AAC1G,YAAA,IAAMC,uBAA0B7J,GAAAA,YAAY,CAAC5f,qBAAAA,CAAsB8oB,8BAA8B,CAAC,CAAA;YAClGW,uBAA4BpsC,KAAAA,SAAAA,KAAckqC,kBAAAA,GAAuCkC,uBAAsB,CAAA,CAAA;AACzG,SAAA;QAEA,IAAIzM,OAAAA,IAAW8C,SAAU9C,CAAAA,OAAO,EAAE;AAChC,YAAA,IAAIA,OAAS,EAAA;gBACX1O,EAAG/rB,CAAAA,MAAM,CAAC+rB,EAAAA,CAAGob,YAAY,CAAA,CAAA;aACpB,MAAA;gBACLpb,EAAG9rB,CAAAA,OAAO,CAAC8rB,EAAAA,CAAGob,YAAY,CAAA,CAAA;AAC5B,aAAA;AACA5J,YAAAA,SAAAA,CAAU9C,OAAO,GAAGA,OAAAA,CAAAA;AACtB,SAAA;AAEA,QAAA,IAAIA,OAAS,EAAA;;AAEX,YAAA,IAAM2M,wBAAwB9C,cAAmB/G,KAAAA,SAAAA,CAAU+G,cAAc,IAAIplB,IAAAA,KAASqe,UAAUre,IAAI,CAAA;AACpG,YAAA,IAAIkoB,qBAAyB5C,IAAAA,oBAAAA,KAAyBjH,SAAUiH,CAAAA,oBAAoB,EAAE;gBACpFzY,EAAGsb,CAAAA,mBAAmB,CACpBtb,EAAAA,CAAG+X,KAAK,EACRO,YA9MGA,CA8MU7C,qBAAqB,CAAC5V,GAAK4Y,EAAAA,oBAAAA,CAAAA,EACxCF,cACAplB,EAAAA,IAAAA,CAAAA,CAAAA;AAEFqe,gBAAAA,SAAAA,CAAUiH,oBAAoB,GAAGA,oBAAAA,CAAAA;AACnC,aAAA;AAEA,YAAA,IAAI4C,qBAAyB3C,IAAAA,mBAAAA,KAAwBlH,SAAUkH,CAAAA,mBAAmB,EAAE;gBAClF1Y,EAAGsb,CAAAA,mBAAmB,CACpBtb,EAAAA,CAAG8X,IAAI,EACPQ,YAxNGA,CAwNU7C,qBAAqB,CAAC5V,GAAK6Y,EAAAA,mBAAAA,CAAAA,EACxCH,cACAplB,EAAAA,IAAAA,CAAAA,CAAAA;AAEFqe,gBAAAA,SAAAA,CAAUkH,mBAAmB,GAAGA,mBAAAA,CAAAA;AAClC,aAAA;AACA,YAAA,IAAI2C,qBAAuB,EAAA;AACzB7J,gBAAAA,SAAAA,CAAU+G,cAAc,GAAGA,cAAAA,CAAAA;AAC3B/G,gBAAAA,SAAAA,CAAUre,IAAI,GAAGA,IAAAA,CAAAA;AACnB,aAAA;;YAGA,IACE2lB,kBAAAA,KAAuBtH,SAAUsH,CAAAA,kBAAkB,IACnDE,mBAAAA,KAAwBxH,SAAUwH,CAAAA,mBAAmB,IACrDL,kBAAAA,KAAuBnH,SAAUmH,CAAAA,kBAAkB,EACnD;gBACA3Y,EAAGub,CAAAA,iBAAiB,CAClBvb,EAAG+X,CAAAA,KAAK,EACRO,YA3OGA,CA2OUkD,sBAAsB,CAAC3b,GAAAA,EAAKiZ,qBACzCR,YA5OGA,CA4OUkD,sBAAsB,CAAC3b,GAAAA,EAAKmZ,sBACzCV,YA7OGA,CA6OUkD,sBAAsB,CAAC3b,GAAK8Y,EAAAA,kBAAAA,CAAAA,CAAAA,CAAAA;AAE3CnH,gBAAAA,SAAAA,CAAUsH,kBAAkB,GAAGA,kBAAAA,CAAAA;AAC/BtH,gBAAAA,SAAAA,CAAUwH,mBAAmB,GAAGA,mBAAAA,CAAAA;AAChCxH,gBAAAA,SAAAA,CAAUmH,kBAAkB,GAAGA,kBAAAA,CAAAA;AACjC,aAAA;YAEA,IACEI,iBAAAA,KAAsBvH,SAAUuH,CAAAA,iBAAiB,IACjDE,kBAAAA,KAAuBzH,SAAUyH,CAAAA,kBAAkB,IACnDJ,iBAAAA,KAAsBrH,SAAUqH,CAAAA,iBAAiB,EACjD;gBACA7Y,EAAGub,CAAAA,iBAAiB,CAClBvb,EAAG8X,CAAAA,IAAI,EACPQ,YA3PGA,CA2PUkD,sBAAsB,CAAC3b,GAAAA,EAAKkZ,oBACzCT,YA5PGA,CA4PUkD,sBAAsB,CAAC3b,GAAAA,EAAKoZ,qBACzCX,YA7PGA,CA6PUkD,sBAAsB,CAAC3b,GAAKgZ,EAAAA,iBAAAA,CAAAA,CAAAA,CAAAA;AAE3CrH,gBAAAA,SAAAA,CAAUuH,iBAAiB,GAAGA,iBAAAA,CAAAA;AAC9BvH,gBAAAA,SAAAA,CAAUyH,kBAAkB,GAAGA,kBAAAA,CAAAA;AAC/BzH,gBAAAA,SAAAA,CAAUqH,iBAAiB,GAAGA,iBAAAA,CAAAA;AAChC,aAAA;;YAGA,IAAIL,SAAAA,KAAchH,SAAUgH,CAAAA,SAAS,EAAE;AACrCxY,gBAAAA,EAAAA,CAAGyb,WAAW,CAACjD,SAAAA,CAAAA,CAAAA;AACfhH,gBAAAA,SAAAA,CAAUgH,SAAS,GAAGA,SAAAA,CAAAA;AACxB,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AA1QWF,IAAAA,YAAAA,CACI7C,qBAqBd,GArBD,SAAeA,qBAAsB5V,CAAAA,GAAsB,EAAE+U,eAAgC,EAAA;QAC3F,IAAM5U,EAAAA,GAAKH,IAAIG,EAAE,CAAA;QAEjB,OAAQ4U,eAAAA;AACN,YAAA,KAAKpjB,gBAAgBmkB,KAAK;AACxB,gBAAA,OAAO3V,GAAG4V,KAAK,CAAA;AACjB,YAAA,KAAKpkB,gBAAgBqjB,IAAI;AACvB,gBAAA,OAAO7U,GAAG6V,IAAI,CAAA;AAChB,YAAA,KAAKrkB,gBAAgBskB,KAAK;AACxB,gBAAA,OAAO9V,GAAG+V,KAAK,CAAA;AACjB,YAAA,KAAKvkB,gBAAgBwkB,SAAS;AAC5B,gBAAA,OAAOhW,GAAGiW,MAAM,CAAA;AAClB,YAAA,KAAKzkB,gBAAgB0kB,OAAO;AAC1B,gBAAA,OAAOlW,GAAGmW,OAAO,CAAA;AACnB,YAAA,KAAK3kB,gBAAgB4kB,QAAQ;AAC3B,gBAAA,OAAOpW,GAAGqW,QAAQ,CAAA;AACpB,YAAA,KAAK7kB,gBAAgB8kB,YAAY;AAC/B,gBAAA,OAAOtW,GAAGuW,MAAM,CAAA;AAClB,YAAA,KAAK/kB,gBAAgBglB,MAAM;AACzB,gBAAA,OAAOxW,GAAGyW,MAAM,CAAA;AACpB,SAAA;AACF,KAAA,CAAA;AAtBW6B,IAAAA,YAAAA,CAwBIkD,sBAqBd,GArBD,SAAeA,sBAAuB3b,CAAAA,GAAsB,EAAE+U,eAAiC,EAAA;QAC7F,IAAM5U,EAAAA,GAAKH,IAAIG,EAAE,CAAA;QAEjB,OAAQ4U,eAAAA;AACN,YAAA,KAAK/iB,iBAAiB+mB,IAAI;AACxB,gBAAA,OAAO5Y,GAAG0b,IAAI,CAAA;AAChB,YAAA,KAAK7pB,iBAAiBqd,IAAI;AACxB,gBAAA,OAAOlP,GAAGwS,IAAI,CAAA;AAChB,YAAA,KAAK3gB,iBAAiB8pB,OAAO;AAC3B,gBAAA,OAAO3b,GAAG4b,OAAO,CAAA;AACnB,YAAA,KAAK/pB,iBAAiBgqB,iBAAiB;AACrC,gBAAA,OAAO7b,GAAG8b,IAAI,CAAA;AAChB,YAAA,KAAKjqB,iBAAiBkqB,iBAAiB;AACrC,gBAAA,OAAO/b,GAAGgc,IAAI,CAAA;AAChB,YAAA,KAAKnqB,iBAAiBoqB,MAAM;AAC1B,gBAAA,OAAOjc,GAAGkc,MAAM,CAAA;AAClB,YAAA,KAAKrqB,iBAAiBsqB,aAAa;AACjC,gBAAA,OAAOnc,GAAGoc,SAAS,CAAA;AACrB,YAAA,KAAKvqB,iBAAiBwqB,aAAa;AACjC,gBAAA,OAAOrc,GAAGsc,SAAS,CAAA;AACvB,SAAA;AACF,KAAA,CAAA;AA7CWhE,IAAAA,OAAAA,YAAAA,CAAAA;AA2QZ,CAAA;;AC5QD;;IAGO,IAAMiE,WAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,WAAAA,GAAAA;4BACM,IAAA,CAER3M,aAAyB,IAAIN,UAAAA,EAAAA,CAAAA;4BACrB,IAAA,CAER+F,aAAyB,IAAIV,UAAAA,EAAAA,CAAAA;8BACnB,IAAA,CAEV8F,eAA6B,IAAInC,YAAAA,EAAAA,CAAAA;6BACxB,IAAA,CAETd,cAA2B,IAAId,WAAAA,EAAAA,CAAAA;kCAEjB,IAAA,CACvB8F,eAAmC7qB,GAAAA,eAAAA,CAAgB8qB,MAAM,CAAA;;AAf9CF,IAAAA,IAAAA,MAAAA,GAAAA,WAAAA,CAAAA,SAAAA,CAAAA;AAiBX;;AAEC,MACDG,MAAAA,CAAAA,YAqBC,GArBDA,SAAAA,YACEtsC,CAAAA,MAAc,EACdmnC,eAAwB,EACxB5H,kBAAkD,EAClD1X,UAAsB,EACtB0kB,kBAA0C,EAAA;;AAG1ChN,QAAAA,kBAAAA,IAAsB,IAAI,CAACiN,wBAAwB,CAACjN,kBAAoB1X,EAAAA,UAAAA,CAAAA,CAAAA;QACxE,IAAMmZ,gBAAAA,GAAmBhhC,OAAOiF,iBAAiB,CAAA;QACjD,IAAMg8B,eAAAA,GAAkBjhC,OAAOysC,gBAAgB,CAAA;QAC/C,IAAM7/B,OAAAA,GAAU5M,OAAO0sC,cAAc,CAAA;AACrC,QAAA,IAAI,CAAClN,UAAU,CAACuB,MAAM,CAACC,kBAAkBC,eAAiBsL,EAAAA,kBAAAA,CAAAA,CAAAA;AAC1D,QAAA,IAAI,CAACtH,UAAU,CAAClE,MAAM,CAACC,kBAAkBC,eAAiBsL,EAAAA,kBAAAA,CAAAA,CAAAA;AAC1D,QAAA,IAAI,CAAClC,YAAY,CAACtJ,MAAM,CAACC,kBAAkBC,eAAiBsL,EAAAA,kBAAAA,CAAAA,CAAAA;AAC5D,QAAA,IAAI,CAACnF,WAAW,CAACrG,MAAM,CACrBC,gBAAAA,EACAC,eACAr0B,EAAAA,OAAAA,CAAQ+/B,cAAc,GAAG,CAACxF,eAAAA,GAAkBA,eAC5CoF,EAAAA,kBAAAA,CAAAA,CAAAA;AAEJ,KAAA,CAAA;AAEA;;;AAGC,MACDK,OAAAA,6BAKC,GALDA,SAAAA,6BAA8BrN,CAAAA,kBAAkD,EAAE1X,UAAsB,EAAA;AACtG,QAAA,IAAMukB,eAAkB7M,GAAAA,kBAAkB,CAACje,qBAAAA,CAAsBC,eAAe,CAAC,CAAA;AACjF,QAAA,IAAI6qB,oBAAoBztC,SAAW,EAAA;AACVkpB,YAAAA,IAAAA,oBAAAA,CAAAA;YAAvB,IAAI,CAACukB,eAAe,GAAGvkB,CAAAA,oBAAAA,GAAAA,UAAW8X,CAAAA,QAAQ,CAACyM,eAAAA,CAAAA,KAAAA,IAAAA,GAApBvkB,oBAAwCtG,GAAAA,eAAAA,CAAgB8qB,MAAM,CAAA;AACvF,SAAA;AACF,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQG,wBAKP,GALD,SAAQA,wBAAyBjN,CAAAA,kBAAkD,EAAE1X,UAAsB,EAAA;AACzG,QAAA,IAAI,CAAC2X,UAAU,CAACF,qBAAqB,CAACC,kBAAoB1X,EAAAA,UAAAA,CAAAA,CAAAA;AAC1D,QAAA,IAAI,CAACod,UAAU,CAAC3F,qBAAqB,CAACC,kBAAoB1X,EAAAA,UAAAA,CAAAA,CAAAA;AAC1D,QAAA,IAAI,CAACwiB,YAAY,CAAC/K,qBAAqB,CAACC,kBAAoB1X,EAAAA,UAAAA,CAAAA,CAAAA;AAC5D,QAAA,IAAI,CAACuf,WAAW,CAAC9H,qBAAqB,CAACC,kBAAoB1X,EAAAA,UAAAA,CAAAA,CAAAA;AAC7D,KAAA,CAAA;AA3DWskB,IAAAA,OAAAA,WAAAA,CAAAA;AA4DZ,CAAA,GAAA;;;;;;;;;;;;;;ACvDD;;IAGO,IAAM/O,MAAN,iBAAA,WAAA;aAAMA,MAmRT,CAAgBvpB,IAAY,EAC5Bg5B,UAAuB,EAAA;aADPh5B,IAAAA,GAAAA,IAAAA,CAAAA;aA/BVhT,SAAoB,GAAA,CAAA,CAAA;aACpBV,UAAsB,GAAA,KAAA,CAAA;QAiC5B,IAAI,CAAC0T,IAAI,GAAGA,IAAAA,CAAAA;QACZ,IAAI,CAACi5B,WAAW,GAAGD,UAAAA,CAAAA;;AAvRVzP,IAAAA,IAAAA,MAAAA,GAAAA,MAAAA,CAAAA,SAAAA,CAAAA;AAsQX;;;AAGC,MACD2P,MAAAA,CAAAA,aAMC,GANDA,SAAAA,cAAc/qC,IAAY,EAAA;QACxB,IAAwB,IAAA,SAAA,GAAA,oCAAA,CAAA,IAAI,CAAC8qC,WAAW,CAAE,EAAA,KAAA,EAAA,CAAA,CAAA,KAAA,GAAA,SAAA,EAAA,EAAA,IAAA,EAAA;AAA/BE,YAAAA,IAAAA,SAAAA,GAAAA,KAAAA,CAAAA,KAAAA,CAAAA;YACT,IAAyBA,IAAAA,UAAAA,GAAAA,oCAAAA,CAAAA,SAAAA,CAAU9O,MAAM,CAAE,EAAA,MAAA,EAAA,CAAA,CAAA,MAAA,GAAA,UAAA,EAAA,EAAA,IAAA,EAAA;AAAhC+O,gBAAAA,IAAAA,UAAAA,GAAAA,MAAAA,CAAAA,KAAAA,CAAAA;AACTA,gBAAAA,UAAAA,CAAW3R,KAAK,GAAGt5B,IAAAA,CAAAA;AACrB,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AAUA;;;;;;;;;AASC,MACDkrC,OAAAA,cAiBC,GAjBDA,SAAAA,cAAeltC,CAAAA,MAAc,EAAE8iB,MAAgB,EAAA;QAC7C,IAAMqqB,aAAAA,GAAgB/P,MArSbA,CAqSoBgQ,cAAc,CAAA;AAC3CD,QAAAA,aAAAA,CAAclpB,KAAK,EAAA,CAAA;QACnB,IAAK,IAAIxkB,IAAI,CAAG0B,EAAAA,CAAAA,GAAI2hB,OAAOzjB,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;AAC7C0tC,YAAAA,aAAAA,CAActpC,MAAM,CAAC8d,WAAAA,CAAYU,SAAS,CAACS,MAAM,CAACrjB,CAAE,CAAA,CAAA,CAAA,CAAA;AACtD,SAAA;AAEA,QAAA,IAAIm7B,OAAU,GAAA,KAAA,CAAA;QACd,IAAMiS,UAAAA,GAAa,IAAI,CAACC,WAAW,CAAA;QACnC,IAAK,IAAIrtC,KAAI,CAAG0B,EAAAA,EAAAA,GAAI0rC,WAAWxtC,MAAM,EAAEI,EAAI0B,GAAAA,EAAAA,EAAG1B,EAAK,EAAA,CAAA;AACjD,YAAA,IAAM,MAAEy+B,GAAW2O,UAAU,CAACptC,GAAE,CAAxBy+B,MAAAA,CAAAA;YACR,IAAK,IAAIruB,IAAI,CAAGC,EAAAA,CAAAA,GAAIouB,OAAO7+B,MAAM,EAAEwQ,CAAIC,GAAAA,CAAAA,EAAGD,CAAK,EAAA,CAAA;AAC7C,gBAAA,IAAMwsB,gBAAgB6B,MAAM,CAACruB,EAAE,CAACqsB,iBAAiB,CAACl8B,MAAQmtC,EAAAA,aAAAA,CAAAA,CAAAA;AAC1DvS,gBAAAA,OAAAA,GAAU/qB,MAAM,CAAIwsB,GAAAA,aAAAA,CAAczB,OAAO,GAAGA,OAAAA,IAAWyB,cAAczB,OAAO,CAAA;AAC9E,aAAA;AACF,SAAA;QACA,OAAOA,OAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;AAIC,MACDv6B,MAAAA,CAAAA,OAgBC,GAhBDA,SAAAA,QAAQW,KAAsB,EAAA;AAAtBA,QAAAA,IAAAA,kBAAAA,KAAiB,GAAA,KAAA,CAAA;AACvB,QAAA,IAAI,CAACA,KAAS,IAAA,IAAI,CAACH,SAAS,KAAK,CAAG,EAAA;YAClC,OAAO,KAAA,CAAA;AACT,SAAA;QAEA,IAAMgsC,UAAAA,GAAa,IAAI,CAACC,WAAW,CAAA;QACnC,IAAK,IAAIrtC,IAAI,CAAG0B,EAAAA,CAAAA,GAAI0rC,WAAWxtC,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;AACjD,YAAA,IAAMy+B,MAAS2O,GAAAA,UAAU,CAACptC,CAAAA,CAAE,CAACy+B,MAAM,CAAA;YACnC,IAAK,IAAIruB,IAAI,CAAGC,EAAAA,CAAAA,GAAIouB,OAAO7+B,MAAM,EAAEwQ,CAAIC,GAAAA,CAAAA,EAAGD,CAAK,EAAA,CAAA;gBAC7CquB,MAAM,CAACruB,CAAE,CAAA,CAAC4sB,QAAQ,EAAA,CAAA;AACpB,aAAA;AACF,SAAA;AAEA,QAAA,OAAOW,MAAOiQ,CAAAA,UAAU,CAAC,IAAI,CAACx5B,IAAI,CAAC,CAAA;QACnC,IAAI,CAAC1T,UAAU,GAAG,IAAA,CAAA;QAClB,OAAO,IAAA,CAAA;AACT,KAAA,CAAA;AAEA;;MAGAyB,MAAAA,CAAAA,cAEC,GAFDA,SAAAA,cAAAA,GAAAA;QACE,OAAO,IAAI,CAACf,SAAS,CAAA;AACvB,KAAA,CAAA;AAEA;;AAEC,MACDgB,MAAAA,CAAAA,cAEC,GAFDA,SAAAA,eAAeC,KAAa,EAAA;QAC1B,IAAI,CAACjB,SAAS,IAAIiB,KAAAA,CAAAA;AACpB,KAAA,CAAA;IA1VWs7B,MAwDJ7/B,CAAAA,MAwFN,GAxFD,SAAOA,MAAAA,CACL+vC,kBAA0B,EAC1BC,sCAA4E,EAC5E/Z,cAAuB,EAAA;QAEvB,IAAI5F,MAAAA,CAAAA;QACJ,IAAM4f,SAAAA,GAAYpQ,MA9DTA,CA8DgBiQ,UAAU,CAAA;AAEnC,QAAA,IAAI,CAACE,sCAAwC,EAAA;AAC3C,YAAA,IAAI,CAjEGnQ,MAiEKC,CAAAA,UAAU,EAAE;gBACtB,MAAM,oCAAA,CAAA;AACR,aAAA;AAEA,YAAA,IAAMoQ,gBAAgBrQ,MArEfA,CAqEsBC,UAAU,CAACqQ,mBAAmB,CAACJ,kBAAAA,CAAAA,CAAAA;AAC5D,YAAA,IAAIE,SAAS,CAACC,aAAc55B,CAAAA,IAAI,CAAC,EAAE;AACjCxQ,gBAAAA,OAAAA,CAAQK,KAAK,CAAE,gBAAgB+pC,GAAAA,aAAAA,CAAc55B,IAAI,GAAC,mBAAA,CAAA,CAAA;AAClD,gBAAA,OAAA;AACF,aAAA;AACA,YAAA,IAAM85B,gBAAgBF,aAAcZ,CAAAA,UAAU,CAACn2B,GAAG,CAAC,SAACk3B,gBAAAA,EAAAA;AAClD,gBAAA,IAAMC,WAAWD,gBAAiB1P,CAAAA,MAAM,CAACxnB,GAAG,CAAC,SAACo3B,QAAAA,EAAAA;oBAC5C,IAAIA,QAAAA,CAASC,SAAS,EAAE;4BAGf3Q,4BAAAA,EAAAA,YAAAA,CAAAA;;AADP,wBAAA,IAAM4Q,KAAQF,GAAAA,QAAAA,CAASj6B,IAAI,CAACtF,KAAK,CAAC,GAAA,CAAA,CAAA;AAClC,wBAAA,OAAA,CAAO6uB,YAAAA,GA/ENA,MA+Ea6Q,CAAAA,IAAI,CAACD,KAAK,CAAC,CAAE,CAAA,CAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,CAApB5Q,+BAAAA,YACHyP,CAAAA,UAAU,CAACoB,IAAI,CAAC,SAACjB,SAAAA,EAAAA;AAAcA,4BAAAA,OAAAA,SAAAA,CAAUn5B,IAAI,KAAKm6B,KAAK,CAAC,CAAE,CAAA,CAAA;AADvD5Q,yBAAAA,CAAAA,KAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,4BAAAA,CAEHc,MAAM,CAAC+P,IAAI,CAAC,SAACC,IAAAA,EAAAA;AAASA,4BAAAA,OAAAA,IAAAA,CAAKr6B,IAAI,KAAKm6B,KAAK,CAAC,CAAE,CAAA,CAAA;;AAClD,qBAAA;AAEA,oBAAA,IAAMG,oBAAoB,IAAIrT,UAAAA,CAC5BgT,QAASj6B,CAAAA,IAAI,EACbi6B,QAASM,CAAAA,QAAQ,EACjBN,QAAAA,CAASnR,WAAW,EACpBmR,QAAAA,CAASlR,aAAa,EACtBkR,SAAS3e,IAAI,CAAA,CAAA;oBAGf,IAAqC2e,sBAAAA,GAAAA,SAASO,YAAY,EAAlDC,cAA6BR,sBAA7BQ,CAAAA,WAAAA,EAAaC,cAAgBT,sBAAhBS,CAAAA,WAAAA,CAAAA;;AAErB,oBAAA,IAAIjxC,MAAOmZ,CAAAA,IAAI,CAAC63B,WAAAA,CAAAA,CAAajvC,MAAM,GAAG,CAAK/B,IAAAA,MAAAA,CAAOmZ,IAAI,CAAC83B,WAAalvC,CAAAA,CAAAA,MAAM,GAAG,CAAG,EAAA;;AAE9E,wBAAA,IAAMmvC,cAAc,IAAIrC,WAAAA,EAAAA,CAAAA;AACxBgC,wBAAAA,iBAAAA,CAAkBM,YAAY,GAAGD,WAAAA,CAAAA;wBACjC,IAAK,IAAInwC,KAAKiwC,WAAa,CAAA;AAlG1BlR,4BAAAA,MAAAA,CAmGQsR,uBAAuB,CAACF,WAAAA,EAAoCG,SAAStwC,CAAIiwC,CAAAA,EAAAA,WAAW,CAACjwC,CAAE,CAAA,CAAA,CAAA;AAChG,yBAAA;;AAGA,wBAAA,IAAMkhC,qBAAqB,EAAC,CAAA;wBAC5B,IAAK,IAAIlhC,MAAKkwC,WAAa,CAAA;4BACzBhP,kBAAkB,CAAClhC,GAAE,GAAGynB,cAAAA,CAAezD,SAAS,CAACksB,WAAW,CAAClwC,EAAE,CAAA,CAAA,CAAA;AACjE,yBAAA;AACA8vC,wBAAAA,iBAAAA,CAAkB/S,mBAAmB,GAAGmE,kBAAAA,CAAAA;AAC1C,qBAAA;oBAEA,OAAO4O,iBAAAA,CAAAA;AACT,iBAAA,CAAA,CAAA;AAEA,gBAAA,OAAO,IAAIlQ,SAAU2P,CAAAA,gBAAAA,CAAiB/5B,IAAI,EAAEg6B,QAAAA,EAAUD,iBAAiBze,IAAI,CAAA,CAAA;AAC7E,aAAA,CAAA,CAAA;AAEAvB,YAAAA,MAAAA,GAAS,IApHFwP,MAAAA,CAoHaqQ,aAAc55B,CAAAA,IAAI,EAAE85B,aAAAA,CAAAA,CAAAA;AACxCH,YAAAA,SAAS,CAACC,aAAAA,CAAc55B,IAAI,CAAC,GAAG+Z,MAAAA,CAAAA;YAChC,OAAOA,MAAAA,CAAAA;SACF,MAAA;YACL,IAAI4f,SAAS,CAACF,kBAAAA,CAAmB,EAAE;AACjCjqC,gBAAAA,OAAAA,CAAQK,KAAK,CAAC,gBAAC,GAAgB4pC,kBAAmB,GAAA,mBAAA,CAAA,CAAA;AAClD,gBAAA,OAAA;AACF,aAAA;YACA,IAAI,OAAOC,2CAA2C,QAAU,EAAA;gBAC9D,IAAMN,UAAAA,GAAa,IAAInS,UAAAA,CAAWyS,sCAAwC/Z,EAAAA,cAAAA,CAAAA,CAAAA;gBAC1E5F,MAAS,GAAA,IA9HJwP,OA8HekQ,kBAAoB,EAAA;AAAC,oBAAA,IAAIrP,UAAU,SAAW,EAAA;AAACgP,wBAAAA,UAAAA;AAAW,qBAAA,CAAA;AAAE,iBAAA,CAAA,CAAA;aAC3E,MAAA;gBACL,IAAIM,sCAAAA,CAAuCluC,MAAM,GAAG,CAAG,EAAA;AACrD,oBAAA,IAAIkuC,sCAAsC,CAAC,CAAA,CAAE,CAAClwC,WAAW,KAAKy9B,UAAY,EAAA;wBACxElN,MAAS,GAAA,IAlIRwP,OAkImBkQ,kBAAoB,EAAA;AACtC,4BAAA,IAAIrP,UAAU,SAAyBsP,EAAAA,sCAAAA,CAAAA;AACxC,yBAAA,CAAA,CAAA;qBACI,MAAA;AACL3f,wBAAAA,MAAAA,GAAS,IAtIRwP,MAAAA,CAsImBkQ,kBAAiCC,EAAAA,sCAAAA,CAAuCjuC,KAAK,EAAA,CAAA,CAAA;AACnG,qBAAA;iBACK,MAAA;oBACL,MAAM,kDAAA,CAAA;AACR,iBAAA;AACF,aAAA;AACF,SAAA;QAEAkuC,SAAS,CAACF,mBAAmB,GAAG1f,MAAAA,CAAAA;QAChC,OAAOA,MAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;AAGC,MACD,MAAOqgB,CAAAA,IAEN,GAFD,SAAOA,KAAKp6B,IAAY,EAAA;AACtB,QAAA,OAAOupB,MAvJEA,CAuJKiQ,UAAU,CAACx5B,IAAK,CAAA,CAAA;AAChC,KAAA,CAAA;IAxJWupB,MA0JIsR,CAAAA,uBAwFd,GAxFD,SAAeA,uBAAAA,CACbF,WAAwB,EACxBv6B,GAA0B,EAC1BnS,KAAwC,EAAA;QAExC,OAAQmS,GAAAA;AACN,YAAA,KAAKqN,sBAAsBoe,kBAAkB;AAC3C8O,gBAAAA,WAAAA,CAAYhP,UAAU,CAACL,gBAAgB,CAACb,OAAO,GAAYx8B,KAAAA,CAAAA;AAC3D,gBAAA,MAAA;AACF,YAAA,KAAKwf,sBAAsBue,8BAA8B;AACvD2O,gBAAAA,WAAAA,CAAYhP,UAAU,CAACL,gBAAgB,CAACZ,mBAAmB,GAAmBz8B,KAAAA,CAAAA;AAC9E,gBAAA,MAAA;AACF,YAAA,KAAKwf,sBAAsBye,8BAA8B;AACvDyO,gBAAAA,WAAAA,CAAYhP,UAAU,CAACL,gBAAgB,CAACV,mBAAmB,GAAmB38B,KAAAA,CAAAA;AAC9E,gBAAA,MAAA;AACF,YAAA,KAAKwf,sBAAsB2e,iCAAiC;AAC1DuO,gBAAAA,WAAAA,CAAYhP,UAAU,CAACL,gBAAgB,CAACT,sBAAsB,GAAgB58B,KAAAA,CAAAA;AAC9E,gBAAA,MAAA;AACF,YAAA,KAAKwf,sBAAsB+e,sCAAsC;AAC/DmO,gBAAAA,WAAAA,CAAYhP,UAAU,CAACL,gBAAgB,CAACN,2BAA2B,GAAgB/8B,KAAAA,CAAAA;AACnF,gBAAA,MAAA;AACF,YAAA,KAAKwf,sBAAsB6e,iCAAiC;AAC1DqO,gBAAAA,WAAAA,CAAYhP,UAAU,CAACL,gBAAgB,CAACP,sBAAsB,GAAgB98B,KAAAA,CAAAA;AAC9E,gBAAA,MAAA;AACF,YAAA,KAAKwf,sBAAsBif,sCAAsC;AAC/DiO,gBAAAA,WAAAA,CAAYhP,UAAU,CAACL,gBAAgB,CAACJ,2BAA2B,GAAgBj9B,KAAAA,CAAAA;AACnF,gBAAA,MAAA;AACF,YAAA,KAAKwf,sBAAsBmf,yBAAyB;AAClD+N,gBAAAA,WAAAA,CAAYhP,UAAU,CAACL,gBAAgB,CAACH,cAAc,GAAmBl9B,KAAAA,CAAAA;AACzE,gBAAA,MAAA;AACF,YAAA,KAAKwf,sBAAsBsjB,iBAAiB;gBAC1C4J,WAAYvJ,CAAAA,UAAU,CAAC3G,OAAO,GAAYx8B,KAAAA,CAAAA;AAC1C,gBAAA,MAAA;AACF,YAAA,KAAKwf,sBAAsBwjB,sBAAsB;gBAC/C0J,WAAYvJ,CAAAA,UAAU,CAACP,YAAY,GAAY5iC,KAAAA,CAAAA;AAC/C,gBAAA,MAAA;AACF,YAAA,KAAKwf,sBAAsB0jB,yBAAyB;gBAClDwJ,WAAYvJ,CAAAA,UAAU,CAACT,eAAe,GAAoB1iC,KAAAA,CAAAA;AAC1D,gBAAA,MAAA;AACF,YAAA,KAAKwf,sBAAsBwnB,mBAAmB;gBAC5C0F,WAAYnE,CAAAA,YAAY,CAAC/L,OAAO,GAAYx8B,KAAAA,CAAAA;AAC5C,gBAAA,MAAA;AACF,YAAA,KAAKwf,sBAAsB0nB,0BAA0B;gBACnDwF,WAAYnE,CAAAA,YAAY,CAAClC,cAAc,GAAWrmC,KAAAA,CAAAA;AAClD,gBAAA,MAAA;AACF,YAAA,KAAKwf,sBAAsB4nB,gBAAgB;gBACzCsF,WAAYnE,CAAAA,YAAY,CAACtnB,IAAI,GAAWjhB,KAAAA,CAAAA;AACxC,gBAAA,MAAA;AACF,YAAA,KAAKwf,sBAAsB8nB,qBAAqB;gBAC9CoF,WAAYnE,CAAAA,YAAY,CAACjC,SAAS,GAAWtmC,KAAAA,CAAAA;AAC7C,gBAAA,MAAA;AACF,YAAA,KAAKwf,sBAAsBgoB,gCAAgC;gBACzDkF,WAAYnE,CAAAA,YAAY,CAAChC,oBAAoB,GAAoBvmC,KAAAA,CAAAA;AACjE,gBAAA,MAAA;AACF,YAAA,KAAKwf,sBAAsBkoB,+BAA+B;gBACxDgF,WAAYnE,CAAAA,YAAY,CAAC/B,mBAAmB,GAAoBxmC,KAAAA,CAAAA;AAChE,gBAAA,MAAA;AACF,YAAA,KAAKwf,sBAAsBooB,8BAA8B;gBACvD8E,WAAYnE,CAAAA,YAAY,CAAC9B,kBAAkB,GAAqBzmC,KAAAA,CAAAA;AAChE,gBAAA,MAAA;AACF,YAAA,KAAKwf,sBAAsBsoB,6BAA6B;gBACtD4E,WAAYnE,CAAAA,YAAY,CAAC5B,iBAAiB,GAAqB3mC,KAAAA,CAAAA;AAC/D,gBAAA,MAAA;AACF,YAAA,KAAKwf,sBAAsBwoB,8BAA8B;gBACvD0E,WAAYnE,CAAAA,YAAY,CAAC3B,kBAAkB,GAAqB5mC,KAAAA,CAAAA;AAChE,gBAAA,MAAA;AACF,YAAA,KAAKwf,sBAAsB0oB,6BAA6B;gBACtDwE,WAAYnE,CAAAA,YAAY,CAAC1B,iBAAiB,GAAqB7mC,KAAAA,CAAAA;AAC/D,gBAAA,MAAA;AACF,YAAA,KAAKwf,sBAAsB4oB,+BAA+B;gBACxDsE,WAAYnE,CAAAA,YAAY,CAACzB,mBAAmB,GAAqB9mC,KAAAA,CAAAA;AACjE,gBAAA,MAAA;AACF,YAAA,KAAKwf,sBAAsB8oB,8BAA8B;gBACvDoE,WAAYnE,CAAAA,YAAY,CAACxB,kBAAkB,GAAqB/mC,KAAAA,CAAAA;AAChE,gBAAA,MAAA;AACF,YAAA,KAAKwf,sBAAsBwlB,mBAAmB;gBAC5C0H,WAAYpH,CAAAA,WAAW,CAACb,QAAQ,GAAazkC,KAAAA,CAAAA;AAC7C,gBAAA,MAAA;AACF,YAAA,KAAKwf,sBAAsB0lB,oBAAoB;gBAC7CwH,WAAYpH,CAAAA,WAAW,CAACX,SAAS,GAAW3kC,KAAAA,CAAAA;AAC5C,gBAAA,MAAA;AACF,YAAA,KAAKwf,sBAAsB4lB,+BAA+B;gBACxDsH,WAAYpH,CAAAA,WAAW,CAACV,oBAAoB,GAAW5kC,KAAAA,CAAAA;AACvD,gBAAA,MAAA;AACF,YAAA,KAAKwf,sBAAsBC,eAAe;AACxCitB,gBAAAA,WAAAA,CAAYpC,eAAe,GAAoBtqC,KAAAA,CAAAA;AAC/C,gBAAA,MAAA;AACJ,SAAA;AACF,KAAA,CAAA;AAlPWs7B,IAAAA,MAAAA,CA+WJwR,cAEN,GAFD,SAAOA,cAAe/6B,CAAAA,IAAY,EAAE/R,KAAc,EAAA;QAChD,OAAO6f,WAAAA,CAAYU,SAAS,CAACxO,IAAM/R,EAAAA,KAAAA,CAAAA,CAAAA;AACrC,KAAA,CAAA;AAEA;;;;;;AAMC,MACD,MAAO+sC,CAAAA,iBAEN,GAFD,SAAOA,kBAAkBh7B,IAAY,EAAA;QACnC,OAAOiS,cAAAA,CAAezD,SAAS,CAACxO,IAAAA,CAAAA,CAAAA;AAClC,KAAA,CAAA;AA5XWupB,IAAAA,aAAAA,CAAAA,MAAAA,EAAAA;;YA2PPyP,GAAAA,EAAAA,YAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACC,WAAW,CAAA;AACzB,aAAA;;;YAKIpsC,GAAAA,EAAAA,WAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACP,UAAU,CAAA;AACxB,aAAA;;;AApQWi9B,IAAAA,OAAAA,MAAAA,CAAAA;AA6XZ,CAAA,GAAA;AA5XC,iBADWA,MAEKgQ,CAAAA,cAAAA,GAAwC,IAAIjqB,qBAAAA,EAAAA,CAAAA;AAFjDia,MAOIiQ,CAAAA,UAAAA,GAAqC/vC,MAAOC,CAAAA,MAAM,CAAC,IAAA,CAAA;;AClBpE;;IAGO,IAAMuxC,UAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,UAAAA,CAmBChZ,KAAsB,EAAA;AAflC,yBAEAb,IAAAA,CAAAA,iBAAAA,GAA6D33B,MAAOC,CAAAA,MAAM,CAAC,IAAA,CAAA,CAAA;yBAC7D,IAAA,CAEdwxC,mBAA0C,IAAI5rB,qBAAAA,EAAAA,CAAAA;aAGtCZ,SAAyCjlB,GAAAA,MAAAA,CAAOC,MAAM,CAAC,IAAA,CAAA,CAAA;aAEvDsD,SAAoB,GAAA,CAAA,CAAA;QAM1B,IAAI,CAAC2lB,MAAM,GAAGsP,KAAAA,CAAAA;;AApBLgZ,IAAAA,IAAAA,MAAAA,GAAAA,UAAAA,CAAAA,SAAAA,CAAAA;AAqCXnP,IAAAA,MAAAA,CAAAA,QAEC,GAFDA,SAAAA,QAAAA,CAASxZ,QAAiC,EAAA;QACxC,OAAO,IAAI,CAAC6oB,gBAAgB,CAAC7oB,QAAAA,CAAAA,CAAAA;AAC/B,KAAA,CAAA;AAkBA8oB,IAAAA,MAAAA,CAAAA,QAEC,GAFDA,SAAAA,QAAS9oB,CAAAA,QAAiC,EAAErkB,KAAa,EAAA;AACvD,QAAA,IAAI,CAACotC,iBAAiB,CAAC/oB,QAAU3E,EAAAA,kBAAAA,CAAmB2tB,KAAK,EAAErtC,KAAAA,CAAAA,CAAAA;AAC7D,KAAA,CAAA;AAgBAstC,IAAAA,MAAAA,CAAAA,MAEC,GAFDA,SAAAA,MAAAA,CAAOjpB,QAAiC,EAAA;QACtC,OAAO,IAAI,CAAC6oB,gBAAgB,CAAC7oB,QAAAA,CAAAA,CAAAA;AAC/B,KAAA,CAAA;AAkBAkpB,IAAAA,MAAAA,CAAAA,MAEC,GAFDA,SAAAA,MAAOlpB,CAAAA,QAAiC,EAAErkB,KAAa,EAAA;AACrD,QAAA,IAAI,CAACotC,iBAAiB,CAAC/oB,QAAU3E,EAAAA,kBAAAA,CAAmB8tB,GAAG,EAAExtC,KAAAA,CAAAA,CAAAA;AAC3D,KAAA,CAAA;AAgBAytC,IAAAA,MAAAA,CAAAA,aAEC,GAFDA,SAAAA,aAAAA,CAAcppB,QAAiC,EAAA;QAC7C,OAAO,IAAI,CAAC6oB,gBAAgB,CAAC7oB,QAAAA,CAAAA,CAAAA;AAC/B,KAAA,CAAA;AAkBAqpB,IAAAA,MAAAA,CAAAA,aAEC,GAFDA,SAAAA,aAAcrpB,CAAAA,QAAiC,EAAErkB,KAAmB,EAAA;AAClE,QAAA,IAAI,CAACotC,iBAAiB,CAAC/oB,QAAU3E,EAAAA,kBAAAA,CAAmBiuB,UAAU,EAAE3tC,KAAAA,CAAAA,CAAAA;AAClE,KAAA,CAAA;AAgBA4tC,IAAAA,MAAAA,CAAAA,WAEC,GAFDA,SAAAA,WAAAA,CAAYvpB,QAAiC,EAAA;QAC3C,OAAO,IAAI,CAAC6oB,gBAAgB,CAAC7oB,QAAAA,CAAAA,CAAAA;AAC/B,KAAA,CAAA;AAkBAwpB,IAAAA,MAAAA,CAAAA,WAEC,GAFDA,SAAAA,WAAYxpB,CAAAA,QAAiC,EAAErkB,KAAiB,EAAA;AAC9D,QAAA,IAAI,CAACotC,iBAAiB,CAAC/oB,QAAU3E,EAAAA,kBAAAA,CAAmBouB,QAAQ,EAAE9tC,KAAAA,CAAAA,CAAAA;AAChE,KAAA,CAAA;AAgBA+tC,IAAAA,MAAAA,CAAAA,UAEC,GAFDA,SAAAA,UAAAA,CAAW1pB,QAAiC,EAAA;QAC1C,OAAO,IAAI,CAAC6oB,gBAAgB,CAAC7oB,QAAAA,CAAAA,CAAAA;AAC/B,KAAA,CAAA;AAkBA2pB,IAAAA,MAAAA,CAAAA,UAEC,GAFDA,SAAAA,UAAW3pB,CAAAA,QAAiC,EAAErkB,KAAc,EAAA;AAC1D,QAAA,IAAI,CAACotC,iBAAiB,CAAC/oB,QAAU3E,EAAAA,kBAAAA,CAAmB/V,OAAO,EAAE3J,KAAAA,CAAAA,CAAAA;AAC/D,KAAA,CAAA;AAgBAiuC,IAAAA,MAAAA,CAAAA,UAEC,GAFDA,SAAAA,UAAAA,CAAW5pB,QAAiC,EAAA;QAC1C,OAAO,IAAI,CAAC6oB,gBAAgB,CAAC7oB,QAAAA,CAAAA,CAAAA;AAC/B,KAAA,CAAA;AAkBA6pB,IAAAA,MAAAA,CAAAA,UAEC,GAFDA,SAAAA,UAAW7pB,CAAAA,QAAiC,EAAErkB,KAAc,EAAA;AAC1D,QAAA,IAAI,CAACotC,iBAAiB,CAAC/oB,QAAU3E,EAAAA,kBAAAA,CAAmBgX,OAAO,EAAE12B,KAAAA,CAAAA,CAAAA;AAC/D,KAAA,CAAA;AAgBAmuC,IAAAA,MAAAA,CAAAA,UAEC,GAFDA,SAAAA,UAAAA,CAAW9pB,QAAiC,EAAA;QAC1C,OAAO,IAAI,CAAC6oB,gBAAgB,CAAC7oB,QAAAA,CAAAA,CAAAA;AAC/B,KAAA,CAAA;AAkBAgC,IAAAA,MAAAA,CAAAA,UAEC,GAFDA,SAAAA,UAAWhC,CAAAA,QAAiC,EAAErkB,KAAc,EAAA;AAC1D,QAAA,IAAI,CAACotC,iBAAiB,CAAC/oB,QAAU3E,EAAAA,kBAAAA,CAAmBzlB,OAAO,EAAE+F,KAAAA,CAAAA,CAAAA;AAC/D,KAAA,CAAA;AAgBAouC,IAAAA,MAAAA,CAAAA,SAEC,GAFDA,SAAAA,SAAAA,CAAU/pB,QAAiC,EAAA;QACzC,OAAO,IAAI,CAAC6oB,gBAAgB,CAAC7oB,QAAAA,CAAAA,CAAAA;AAC/B,KAAA,CAAA;AAkBAgqB,IAAAA,MAAAA,CAAAA,SAEC,GAFDA,SAAAA,SAAUhqB,CAAAA,QAAiC,EAAErkB,KAAa,EAAA;AACxD,QAAA,IAAI,CAACotC,iBAAiB,CAAC/oB,QAAU3E,EAAAA,kBAAAA,CAAmB4uB,MAAM,EAAEtuC,KAAAA,CAAAA,CAAAA;AAC9D,KAAA,CAAA;AAgBA8+B,IAAAA,MAAAA,CAAAA,QAEC,GAFDA,SAAAA,QAAAA,CAASza,QAAiC,EAAA;QACxC,OAAO,IAAI,CAAC6oB,gBAAgB,CAAC7oB,QAAAA,CAAAA,CAAAA;AAC/B,KAAA,CAAA;AAkBAkqB,IAAAA,MAAAA,CAAAA,QAEC,GAFDA,SAAAA,QAASlqB,CAAAA,QAAiC,EAAErkB,KAAY,EAAA;AACtD,QAAA,IAAI,CAACotC,iBAAiB,CAAC/oB,QAAU3E,EAAAA,kBAAAA,CAAmBoP,KAAK,EAAE9uB,KAAAA,CAAAA,CAAAA;AAC7D,KAAA,CAAA;AAgBAwuC,IAAAA,MAAAA,CAAAA,UAEC,GAFDA,SAAAA,UAAAA,CAAWnqB,QAAiC,EAAA;QAC1C,OAAO,IAAI,CAAC6oB,gBAAgB,CAAC7oB,QAAAA,CAAAA,CAAAA;AAC/B,KAAA,CAAA;AAgBAoqB,IAAAA,MAAAA,CAAAA,UAQC,GARDA,SAAAA,UAAWpqB,CAAAA,QAAiC,EAAErkB,KAAc,EAAA;QAC1D,IAAMV,QAAAA,GAAW,IAAI,CAACP,SAAS,CAAA;AAC/B,QAAA,IAAIO,WAAW,CAAG,EAAA;AAChB,YAAA,IAAMovC,SAAY,GAAA,IAAI,CAACxB,gBAAgB,CAAU7oB,QAAAA,CAAAA,CAAAA;YACjDqqB,SAAaA,IAAAA,SAAAA,CAAU3uC,cAAc,CAAC,CAACT,QAAAA,CAAAA,CAAAA;YACvCU,KAASA,IAAAA,KAAAA,CAAMD,cAAc,CAACT,QAAAA,CAAAA,CAAAA;AAChC,SAAA;AACA,QAAA,IAAI,CAAC8tC,iBAAiB,CAAC/oB,QAAU3E,EAAAA,kBAAAA,CAAmBzd,OAAO,EAAEjC,KAAAA,CAAAA,CAAAA;AAC/D,KAAA,CAAA;AAgBA2uC,IAAAA,MAAAA,CAAAA,eAEC,GAFDA,SAAAA,eAAAA,CAAgBtqB,QAAiC,EAAA;QAC/C,OAAO,IAAI,CAAC6oB,gBAAgB,CAAC7oB,QAAAA,CAAAA,CAAAA;AAC/B,KAAA,CAAA;AAgBAuqB,IAAAA,MAAAA,CAAAA,eAgBC,GAhBDA,SAAAA,eAAgBvqB,CAAAA,QAAiC,EAAErkB,KAAgB,EAAA;QACjE,IAAMV,QAAAA,GAAW,IAAI,CAACP,SAAS,CAAA;AAC/B,QAAA,IAAIO,WAAW,CAAG,EAAA;AAChB,YAAA,IAAMovC,SAAY,GAAA,IAAI,CAACxB,gBAAgB,CAAY7oB,QAAAA,CAAAA,CAAAA;AACnD,YAAA,IAAIqqB,SAAW,EAAA;gBACb,IAAK,IAAI/wC,IAAI,CAAG0B,EAAAA,CAAAA,GAAIqvC,UAAUnxC,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;AAChD+wC,oBAAAA,SAAS,CAAC/wC,CAAAA,CAAE,CAACoC,cAAc,CAAC,CAACT,QAAAA,CAAAA,CAAAA;AAC/B,iBAAA;AACF,aAAA;AACA,YAAA,IAAIU,KAAO,EAAA;gBACT,IAAK,IAAIrC,KAAI,CAAG0B,EAAAA,EAAAA,GAAIW,MAAMzC,MAAM,EAAEI,EAAI0B,GAAAA,EAAAA,EAAG1B,EAAK,EAAA,CAAA;AAC5CqC,oBAAAA,KAAK,CAACrC,EAAAA,CAAE,CAACoC,cAAc,CAACT,QAAAA,CAAAA,CAAAA;AAC1B,iBAAA;AACF,aAAA;AACF,SAAA;AACA,QAAA,IAAI,CAAC8tC,iBAAiB,CAAC/oB,QAAU3E,EAAAA,kBAAAA,CAAmBmvB,YAAY,EAAE7uC,KAAAA,CAAAA,CAAAA;AACpE,KAAA,CAAA;AAEA;;;;AAIC,MACDktC,MAAAA,CAAAA,gBAKC,GALDA,SAAAA,iBAAoD7oB,QAAiC,EAAA;QACnF,IAAI,OAAOA,aAAa,QAAU,EAAA;YAChCA,QAAWL,GAAAA,cAAAA,CAAezD,SAAS,CAAC8D,QAAAA,CAAAA,CAAAA;AACtC,SAAA;AACA,QAAA,OAAO,IAAI,CAAC8O,iBAAiB,CAAC9O,QAAAA,CAASJ,SAAS,CAAC,CAAA;AACnD,KAAA,CAAA;AAsBA6qB,IAAAA,MAAAA,CAAAA,WAYC,GAZDA,SAAAA,WAAYtuB,CAAAA,KAA2B,EAAExgB,KAAc,EAAA;QACrD,IAAI,OAAOwgB,UAAU,QAAU,EAAA;YAC7BA,KAAQX,GAAAA,WAAAA,CAAYU,SAAS,CAACC,KAAOxgB,EAAAA,KAAAA,CAAAA,CAAAA;AACvC,SAAA;QACA,IAAMogB,MAAAA,GAASI,MAAMF,OAAO,CAAA;AAC5B,QAAA,IAAMyuB,SAAY,GAAA,IAAI,CAACtuB,SAAS,CAACL,MAAO,CAAA,CAAA;AACxC,QAAA,IAAI2uB,cAAcvuB,KAAO,EAAA;YACvB,IAAMkB,eAAAA,GAAkB,IAAI,CAACurB,gBAAgB,CAAA;YAC7C8B,SAAartB,IAAAA,eAAAA,CAAgB1f,OAAO,CAAC+sC,SAAAA,CAAAA,CAAAA;AACrCrtB,YAAAA,eAAAA,CAAgB3f,MAAM,CAACye,KAAAA,CAAAA,CAAAA;AACvB,YAAA,IAAI,CAACC,SAAS,CAACL,MAAAA,CAAO,GAAGI,KAAAA,CAAAA;AAC3B,SAAA;AACF,KAAA,CAAA;AAcAwuB,IAAAA,MAAAA,CAAAA,YAgBC,GAhBDA,SAAAA,YAAAA,CAAaxuB,KAA2B,EAAA;QACtC,IAAIJ,MAAAA,CAAAA;QACJ,IAAI,OAAOI,UAAU,QAAU,EAAA;YAC7BJ,MAASP,GAAAA,WAAAA,CAAYM,eAAe,CAACK,KAAM,CAAA,CAAA;AAC3C,YAAA,IAAIJ,WAAWvjB,SAAW,EAAA;AACxB,gBAAA,OAAA;AACF,aAAA;SACK,MAAA;AACLujB,YAAAA,MAAAA,GAASI,MAAMF,OAAO,CAAA;AACxB,SAAA;AAEA,QAAA,IAAM2uB,YAAe,GAAA,IAAI,CAACxuB,SAAS,CAACL,MAAO,CAAA,CAAA;AAC3C,QAAA,IAAI6uB,YAAc,EAAA;AAChB,YAAA,IAAI,CAAChC,gBAAgB,CAACjrC,OAAO,CAACitC,YAAAA,CAAAA,CAAAA;AAC9B,YAAA,OAAO,IAAI,CAACxuB,SAAS,CAACL,MAAO,CAAA,CAAA;AAC/B,SAAA;AACF,KAAA,CAAA;AAYA8uB,IAAAA,MAAAA,CAAAA,SAUC,GAVDA,SAAAA,SAAAA,CAAUtnC,GAAmB,EAAA;AAC3B,QAAA,IAAIA,GAAK,EAAA;YACP,IAAMunC,QAAAA,GAAW,IAAI,CAAC1uB,SAAS,CAAA;AAC/B7Y,YAAAA,GAAAA,CAAIrK,MAAM,GAAG,CAAA,CAAA;YACb,IAAK,IAAI4U,OAAOg9B,QAAU,CAAA;AACxBvnC,gBAAAA,GAAAA,CAAInI,IAAI,CAAC0vC,QAAQ,CAACh9B,GAAI,CAAA,CAAA,CAAA;AACxB,aAAA;SACK,MAAA;AACL,YAAA,OAAO3W,MAAO4zC,CAAAA,MAAM,CAAC,IAAI,CAAC3uB,SAAS,CAAA,CAAA;AACrC,SAAA;AACF,KAAA,CAAA;AAcA4uB,IAAAA,MAAAA,CAAAA,aAkBC,GAlBDA,SAAAA,aAAAA,CAAcznC,GAAsB,EAAA;QAClC,IAAI0nC,UAAAA,CAAAA;AACJ,QAAA,IAAI1nC,GAAK,EAAA;AACPA,YAAAA,GAAAA,CAAIrK,MAAM,GAAG,CAAA,CAAA;YACb+xC,UAAa1nC,GAAAA,GAAAA,CAAAA;SACR,MAAA;AACL0nC,YAAAA,UAAAA,GAAa,EAAE,CAAA;AACjB,SAAA;QAEA,IAAMpc,gBAAAA,GAAmB,IAAI,CAACC,iBAAiB,CAAA;QAC/C,IAAMoc,aAAAA,GAAgBvrB,eAAeM,cAAc,CAAA;QACnD,IAAK,IAAInS,OAAO+gB,gBAAkB,CAAA;AAChCoc,YAAAA,UAAAA,CAAW7vC,IAAI,CAAC8vC,aAAa,CAACp9B,GAAI,CAAA,CAAA,CAAA;AACpC,SAAA;AAEA,QAAA,IAAI,CAACvK,GAAK,EAAA;YACR,OAAO0nC,UAAAA,CAAAA;AACT,SAAA;AACF,KAAA,CAAA;IAEA7yB,MAAAA,CAAAA,KAIC,GAJDA,SAAAA,KAAAA,GAAAA;AACE,QAAA,IAAMsJ,UAAa,GAAA,IA5kBVinB,UA4kByB,CAAA,IAAI,CAACtoB,MAAM,CAAA,CAAA;QAC7C,IAAI,CAAC8qB,OAAO,CAACzpB,UAAAA,CAAAA,CAAAA;QACb,OAAOA,UAAAA,CAAAA;AACT,KAAA,CAAA;AAEAypB,IAAAA,MAAAA,CAAAA,OA8BC,GA9BDA,SAAAA,OAAAA,CAAQh1C,MAAkB,EAAA;QACxBE,YAAaqD,CAAAA,eAAe,CAAC,IAAI,CAACkvC,gBAAgB,EAAEzyC,MAAAA,CAAOyyC,gBAAgB,EAAE,IAAIjvC,GAAAA,EAAAA,CAAAA,CAAAA;AACjFxC,QAAAA,MAAAA,CAAOW,MAAM,CAAC3B,MAAAA,CAAOimB,SAAS,EAAE,IAAI,CAACA,SAAS,CAAA,CAAA;QAC9C,IAAMgvB,UAAAA,GAAaj1C,OAAOsF,cAAc,EAAA,CAAA;QACxC,IAAMozB,gBAAAA,GAAmB,IAAI,CAACC,iBAAiB,CAAA;QAC/C,IAAMuc,sBAAAA,GAAyBl1C,OAAO24B,iBAAiB,CAAA;QACvD,IAAMxe,IAAAA,GAAOnZ,MAAOmZ,CAAAA,IAAI,CAACue,gBAAAA,CAAAA,CAAAA;QACzB,IAAK,IAAIv1B,IAAI,CAAG0B,EAAAA,CAAAA,GAAIsV,KAAKpX,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;YAC3C,IAAMpB,CAAAA,GAAIoY,IAAI,CAAChX,CAAE,CAAA,CAAA;YACjB,IAAM0mB,QAAAA,GAAoC6O,gBAAgB,CAAC32B,CAAE,CAAA,CAAA;AAC7D,YAAA,IAAI8nB,YAAY,IAAM,EAAA;gBACpB,IAAI,OAAOA,aAAa,QAAU,EAAA;oBAChCqrB,sBAAsB,CAACnzC,EAAE,GAAG8nB,QAAAA,CAAAA;AAC9B,iBAAA,MAAO,IAAY,WAARA,CAAAA,QAAAA,EAAoBpiB,OAAS,CAAA,EAAA;oBACtCytC,sBAAsB,CAACnzC,EAAE,GAAG8nB,QAAAA,CAAAA;oBAC5BorB,UAAa,GAAA,CAAA,IAAKprB,QAAStkB,CAAAA,cAAc,CAAC0vC,UAAAA,CAAAA,CAAAA;AAC5C,iBAAA,MAAO,IAAY,WAARprB,CAAAA,QAAAA,EAAoB5mB,KAAS4mB,CAAAA,IAAQ,WAARA,CAAAA,QAAAA,EAAoBjnB,YAAgBinB,CAAAA,IAAQ,WAARA,CAAAA,QAAAA,EAAoBlnB,UAAY,CAAA,EAAA;AAC1GuyC,oBAAAA,sBAAsB,CAACnzC,CAAAA,CAAE,GAAG8nB,QAAAA,CAAS7mB,KAAK,EAAA,CAAA;iBACrC,MAAA;oBACL,IAAMI,cAAAA,GAAiB8xC,sBAAsB,CAACnzC,CAAE,CAAA,CAAA;AAChD,oBAAA,IAAIqB,cAAgB,EAAA;AAClBA,wBAAAA,cAAAA,CAAeC,QAAQ,CAACwmB,QAAAA,CAAAA,CAAAA;qBACnB,MAAA;AACLqrB,wBAAAA,sBAAsB,CAACnzC,CAAAA,CAAE,GAAG8nB,QAAAA,CAAS5H,KAAK,EAAA,CAAA;AAC5C,qBAAA;AACF,iBAAA;aACK,MAAA;gBACLizB,sBAAsB,CAACnzC,EAAE,GAAG8nB,QAAAA,CAAAA;AAC9B,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AAEA;;MAGA+oB,MAAAA,CAAAA,iBA0BC,GA1BDA,SAAAA,kBACE/oB,QAAiC,EACjCzoB,IAAwB,EACxBoE,KAAQ,EAAA;QAER,IAAI,OAAOqkB,aAAa,QAAU,EAAA;YAChCA,QAAWL,GAAAA,cAAAA,CAAezD,SAAS,CAAC8D,QAAAA,CAAAA,CAAAA;AACtC,SAAA;AAEA,QAAA,IAAIA,SAASK,MAAM,KAAK,IAAI,CAACA,MAAM,EAAE;YACnC,IAAIL,QAAAA,CAASK,MAAM,KAAK7nB,SAAW,EAAA;AACjCwnB,gBAAAA,QAAAA,CAASK,MAAM,GAAG,IAAI,CAACA,MAAM,CAAA;aACxB,MAAA;gBACL,MAAO,kBAAkBL,GAAAA,QAAAA,CAAStS,IAAI,GAAC,oBAAoBwf,GAAAA,eAAe,CAAClN,QAAAA,CAASK,MAAM,CAAC,GAAC,SAAA,CAAA;AAC9F,aAAA;AACF,SAAA;QAEA,IAAIL,QAAAA,CAASM,KAAK,KAAK/oB,IAAM,EAAA;YAC3B,IAAIyoB,QAAAA,CAASM,KAAK,KAAK9nB,SAAW,EAAA;AAChCwnB,gBAAAA,QAAAA,CAASM,KAAK,GAAG/oB,IAAAA,CAAAA;aACZ,MAAA;gBACL,MAAO,kBAAkByoB,GAAAA,QAAAA,CAAStS,IAAI,GAAC,oBAAoB2N,GAAAA,kBAAkB,CAAC2E,QAAAA,CAASM,KAAK,CAAC,GAAC,QAAA,CAAA;AAChG,aAAA;AACF,SAAA;AAEA,QAAA,IAAI,CAACwO,iBAAiB,CAAC9O,QAASJ,CAAAA,SAAS,CAAC,GAAGjkB,KAAAA,CAAAA;AAC/C,KAAA,CAAA;AAEA;;MAGAF,MAAAA,CAAAA,cAEC,GAFDA,SAAAA,cAAAA,GAAAA;QACE,OAAO,IAAI,CAACf,SAAS,CAAA;AACvB,KAAA,CAAA;AAEA;;AAEC,MACDgB,MAAAA,CAAAA,cAUC,GAVDA,SAAAA,eAAeC,KAAa,EAAA;QAC1B,IAAI,CAACjB,SAAS,IAAIiB,KAAAA,CAAAA;QAClB,IAAMsvC,UAAAA,GAAa,IAAI,CAACnc,iBAAiB,CAAA;QACzC,IAAK,IAAM52B,KAAK+yC,UAAY,CAAA;YAC1B,IAAMjrB,QAAAA,GAAWirB,UAAU,CAAC/yC,CAAE,CAAA,CAAA;;AAE9B,YAAA,IAAI8nB,QAAYA,IAAQ,WAARA,CAAAA,QAAAA,EAAoBpiB,OAAS,CAAA,EAAA;AAC3CoiB,gBAAAA,QAAAA,CAAStkB,cAAc,CAACC,KAAAA,CAAAA,CAAAA;AAC1B,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AApqBWgtC,IAAAA,OAAAA,UAAAA,CAAAA;AAqqBZ,CAAA,GAAA;;;;;;;;;;;;;;;;;AC/qBD;;IAGO,IAAM2C,UAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,UAAAA,GAAAA,EAAAA;AAAAA,IAAAA,UAAAA,CAGJC,cAmBN,GAnBD,SAAOA,cAAeC,CAAAA,QAA0B,EAAEC,QAA0B,EAAA;QAC1E,IAAIA,QAAAA,CAASC,YAAY,CAAC,CAAE,CAAA,CAACxiB,WAAW,CAACoiB,UAJhCA,CAI2CK,gBAAgB,CAAA,KAAM,IAAM,EAAA;YAC9E,OAAO,KAAA,CAAA;AACT,SAAA;QACA,IAAIH,QAAAA,CAASI,QAAQ,CAACC,KAAK,KAAKJ,QAASG,CAAAA,QAAQ,CAACC,KAAK,EAAE;YACvD,OAAO,KAAA,CAAA;AACT,SAAA;QAEA,IAAMC,SAAAA,GAA4BN,SAASO,SAAS,CAAA;QACpD,IAAMC,SAAAA,GAA4BP,SAASM,SAAS,CAAA;QACpD,IAAME,gBAAAA,GAAmBH,UAAUI,eAAe,CAAA;;QAGlD,OACED,gBAAAA,KAAqBD,SAAUE,CAAAA,eAAe,KAC7CD,gBAAqB99B,KAAAA,qBAAAA,CAAsBg+B,IAAI,IAAIL,SAAUM,CAAAA,SAAS,KAAKJ,SAAAA,CAAUI,SAAS,CAAD,IAC9FZ,QAAS11C,CAAAA,OAAO,KAAK21C,QAAAA,CAAS31C,OAAO,IACrC01C,QAASa,CAAAA,QAAQ,KAAKZ,QAAAA,CAASY,QAAQ,CAAA;AAE3C,KAAA,CAAA;AAtBWf,IAAAA,UAAAA,CAwBJgB,kBAaN,GAbD,SAAOA,kBAAmBd,CAAAA,QAA0B,EAAEC,QAA0B,EAAA;QAC9E,IAAID,QAAAA,CAASI,QAAQ,CAACC,KAAK,KAAKJ,QAASG,CAAAA,QAAQ,CAACC,KAAK,EAAE;YACvD,OAAO,KAAA,CAAA;AACT,SAAA;QAEA,IAAMU,mBAAAA,GAAsBC,WAAWC,oBAAoB,CAAA;;QAG3D,OACEjB,QAAAA,CAAS11C,OAAO,KAAK21C,QAAAA,CAAS31C,OAAO,IACxB01C,QAASO,CAAAA,SAAS,CAAErqB,UAAU,CAAC8X,QAAQ,CAAC+S,yBACnD,QAAad,CAASM,SAAS,CAAErqB,UAAU,CAAC8X,QAAQ,CAAC+S,mBAAAA,CAAAA,CAAAA;AAE3D,KAAA,CAAA;AArCWjB,IAAAA,UAAAA,CAuCJoB,UAwBN,GAxBD,SAAOA,UAAWlB,CAAAA,QAA0B,EAAEC,QAA2B,EAAA;AACvE,QAAA,IAAMG,WAAWH,QAAWA,GAAAA,QAAAA,CAASG,QAAQ,GAAGJ,SAASI,QAAQ,CAAA;AACjE,QAAA,IAAQC,KAAoCD,GAAAA,QAAAA,CAApCC,KAAOc,EAASC,kBAAoBhB,QAA7Be,CAAAA,OAAAA,CAAAA;QAEf,IAAMzzC,MAAAA,GAAS0zC,gBAAgB1zC,MAAM,CAAA;QACrC,IAAI2zC,UAAAA,GAAahB,MAAMiB,iBAAiB,CAAA;AACxC,QAAA,IAAIrB,QAAU,EAAA;AACZD,YAAAA,QAAAA,CAASI,QAAQ,CAACmB,OAAO,CAACluB,KAAK,IAAI3lB,MAAAA,CAAAA;SAC9B,MAAA;;YAEL,IAAM6zC,OAAAA,GAAUnB,SAASmB,OAAO,CAAA;AAChCA,YAAAA,OAAAA,CAAQhW,KAAK,GAAG8V,UAAAA,CAAAA;AAChBE,YAAAA,OAAAA,CAAQluB,KAAK,GAAG3lB,MAAAA,CAAAA;AAClB,SAAA;QAEA,IAAwB0yC,oBAAAA,GAAAA,SAASoB,UAAU,EAAnCjW,QAAgB6U,oBAAhB7U,CAAAA,KAAAA,EAAO53B,OAASysC,oBAATzsC,CAAAA,IAAAA,CAAAA;AACf,QAAA,IAAM8tC,eAAelW,KAAQ,GAAA,CAAA,CAAA;QAC7B,IAAM4V,OAAAA,GAAUd,MAAMc,OAAO,CAAA;AAC7B,QAAA,IAAK,IAAIrzC,CAAI,GAAA,CAAA,EAAGA,CAAIJ,GAAAA,MAAAA,EAAQ,EAAEI,CAAG,CAAA;AAC/BqzC,YAAAA,OAAO,CAACE,UAAa,EAAA,CAAA,GAAGI,YAAeL,GAAAA,eAAe,CAACtzC,CAAE,CAAA,CAAA;AAC3D,SAAA;AACAuyC,QAAAA,KAAAA,CAAMiB,iBAAiB,IAAI5zC,MAAAA,CAAAA;AAC3B2yC,QAAAA,KAAAA,CAAMqB,iBAAiB,GAAG9tC,IAAAA,CAAKoa,GAAG,CAACqyB,KAAAA,CAAMqB,iBAAiB,EAAEnW,KAAAA,CAAAA,CAAAA;QAC5D8U,KAAMsB,CAAAA,eAAe,GAAG/tC,IAAKI,CAAAA,GAAG,CAACqsC,KAAMsB,CAAAA,eAAe,EAAEpW,KAAQ53B,GAAAA,IAAAA,CAAAA,CAAAA;AAClE,KAAA,CAAA;AA/DWmsC,IAAAA,OAAAA,UAAAA,CAAAA;AAgEZ,CAAA,EAAA,CAAA;AAhEYA,UACMK,CAAAA,gBAAAA,GAAiCnjB,YAAatM,CAAAA,SAAS,CAAC,uBAAA,CAAA;;ACRpE,IAAA,gBAAKkxB,iBAAAA,SAAAA,gBAAAA,EAAAA;;;;;AAAAA,IAAAA,OAAAA,gBAAAA,CAAAA;AAKX,CAAA,CAAA,EAAA,CAAA;;ACED;;IAGO,IAAMC,SAAN,iBAAA,SAAA,YAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,SAAAA,EAAAA,YAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,SAAAA,CAqECC,MAAc,EAAA;;gBACxB,YAAMA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,CAAOzzC,MAAM,CAAA,IAAA,IAAA,mBAlEP,KAAA,CAEd0zC,OAAmB,GAAA,KAAA,EAAA,KAAA,CAGTC,oBAAgC,GAAA,KAAA,EAAA,KAAA,CAGlCC,aAAyB,GAAA,KAAA,EAAA,KAAA,CAEzBC,QAAoB,GAAA,IAAA,CAAA;AAyD1B,QAAA,KAAA,CAAKC,OAAO,GAAGL,MAAAA,CAAAA;;;AAvEND,IAAAA,IAAAA,MAAAA,GAAAA,SAAAA,CAAAA,SAAAA,CAAAA;AA0EX;;AAEC,MACDO,MAAAA,CAAAA,QAAmB,GAAnBA,SAAAA,QAAkB,GAAA,EAAA,CAAA;AAElB;;AAEC,MACDC,MAAAA,CAAAA,SAAoB,GAApBA,SAAAA,SAAmB,GAAA,EAAA,CAAA;AAEnB;;AAEC,MACDC,MAAAA,CAAAA,UAAqB,GAArBA,SAAAA,UAAoB,GAAA,EAAA,CAAA;AAEpB;;AAEC,MACDC,MAAAA,CAAAA,gBAA2B,GAA3BA,SAAAA,gBAA0B,GAAA,EAAA,CAAA;AAE1B;;AAEC,MACDC,MAAAA,CAAAA,iBAA4B,GAA5BA,SAAAA,iBAA2B,GAAA,EAAA,CAAA;AAE3B;;AAEC,MACDC,OAAAA,UAwCC,GAxCDA,SAAAA,UAAWtyC,CAAAA,KAAc,EAAEuyC,gBAAkC,EAAA;QAC3D,IAAMZ,MAAAA,GAAS,IAAI,CAACK,OAAO,CAAA;;QAG3B,IAAIO,gBAAAA,GAAmBd,gBAAiBvd,CAAAA,KAAK,EAAE;AAC7C,YAAA,IAAIl0B,KAAO,EAAA;gBACT,IAAI,CAAC,IAAI,CAAC6xC,oBAAoB,IAAIF,MAAOa,CAAAA,gBAAgB,IAAI,IAAI,CAACT,QAAQ,EAAE;oBAC1E,IAAI,CAACF,oBAAoB,GAAG,IAAA,CAAA;AAC5B,oBAAA,IAAI,CAACO,gBAAgB,EAAA,CAAA;AACvB,iBAAA;aACK,MAAA;AACL,gBAAA,IAAI,IAAI,CAACP,oBAAoB,IAAI,EAAEF,MAAOa,CAAAA,gBAAgB,IAAI,IAAI,CAACT,QAAQ,CAAG,EAAA;oBAC5E,IAAI,CAACF,oBAAoB,GAAG,KAAA,CAAA;AAC5B,oBAAA,IAAI,CAACQ,iBAAiB,EAAA,CAAA;AACxB,iBAAA;AACF,aAAA;AACF,SAAA;;QAGA,IAAIE,gBAAAA,GAAmBd,gBAAiBgB,CAAAA,SAAS,EAAE;AACjD,YAAA,IAAIzyC,KAAO,EAAA;;AAET,gBAAA,IAAI,CAAC,IAAI,CAAC4xC,OAAO,IAAID,MAAAA,CAAOe,oBAAoB,EAAE;oBAChD,IAAI,CAACd,OAAO,GAAG,IAAA,CAAA;AACf,oBAAA,IAAI,CAACK,QAAQ,EAAA,CAAA;AACf,iBAAA;;;gBAGA,IAAI,CAAC,IAAI,CAACH,aAAa,IAAIH,MAAOe,CAAAA,oBAAoB,IAAI,IAAI,CAACX,QAAQ,EAAE;oBACvE,IAAI,CAACD,aAAa,GAAG,IAAA,CAAA;AACrB,oBAAA,IAAI,CAACI,SAAS,EAAA,CAAA;AAChB,iBAAA;aACK,MAAA;;AAEL,gBAAA,IAAI,IAAI,CAACJ,aAAa,IAAI,EAAEH,MAAOe,CAAAA,oBAAoB,IAAI,IAAI,CAACX,QAAQ,CAAG,EAAA;oBACzE,IAAI,CAACD,aAAa,GAAG,KAAA,CAAA;AACrB,oBAAA,IAAI,CAACK,UAAU,EAAA,CAAA;AACjB,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AAEA,IAAA,MAAA,CAAUQ,sBAET,GAFD,SAAUA,sBAAuBryC,CAAAA,QAAoB,EAAE4iB,KAAa,EAAA;AAClE,QAAA,IAAI,CAAC8uB,OAAO,CAACY,WAAW,IAAItyC,QAAAA,CAASP,cAAc,CAACmjB,KAAAA,CAAAA,CAAAA;AACtD,KAAA,CAAA;AAEA;;MAGA,MAAA,CAAmB1kB,UAQlB,GARD,SAAmBA,UAAAA,GAAAA;AACjB,QAAA,YAAA,CAAA,SAAA,CAAMA,UAAD,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;QACL,IAAMmzC,MAAAA,GAAS,IAAI,CAACK,OAAO,CAAA;QAC3BL,MAAOkB,CAAAA,gBAAgB,CAAC,IAAI,CAAA,CAAA;QAC5B,IAAI,IAAI,CAACd,QAAQ,EAAE;AACjBJ,YAAAA,MAAAA,CAAOa,gBAAgB,IAAI,IAAI,CAACH,iBAAiB,EAAA,CAAA;AACjDV,YAAAA,MAAAA,CAAOe,oBAAoB,IAAI,IAAI,CAACP,UAAU,EAAA,CAAA;AAChD,SAAA;AACF,KAAA,CAAA;AA/JWT,IAAAA,aAAAA,CAAAA,SAAAA,EAAAA;;YAmBPlV,GAAAA,EAAAA,SAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACuV,QAAQ,CAAA;AACtB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAY/xC,KAAc,EAAA;AACxB,gBAAA,IAAIA,KAAU,KAAA,IAAI,CAAC+xC,QAAQ,EAAE;oBAC3B,IAAI,CAACA,QAAQ,GAAG/xC,KAAAA,CAAAA;AAChB,oBAAA,IAAI,IAAI,CAACgyC,OAAO,CAACQ,gBAAgB,EAAE;AACjC,wBAAA,IAAIxyC,KAAO,EAAA;AACT,4BAAA,IAAI,CAAC,IAAI,CAAC6xC,oBAAoB,EAAE;gCAC9B,IAAI,CAACA,oBAAoB,GAAG,IAAA,CAAA;AAC5B,gCAAA,IAAI,CAACO,gBAAgB,EAAA,CAAA;AACvB,6BAAA;yBACK,MAAA;4BACL,IAAI,IAAI,CAACP,oBAAoB,EAAE;gCAC7B,IAAI,CAACA,oBAAoB,GAAG,KAAA,CAAA;AAC5B,gCAAA,IAAI,CAACQ,iBAAiB,EAAA,CAAA;AACxB,6BAAA;AACF,yBAAA;AACF,qBAAA;AACA,oBAAA,IAAI,IAAI,CAACL,OAAO,CAACc,mBAAmB,EAAE;AACpC,wBAAA,IAAI9yC,KAAO,EAAA;AACT,4BAAA,IAAI,CAAC,IAAI,CAAC8xC,aAAa,EAAE;gCACvB,IAAI,CAACA,aAAa,GAAG,IAAA,CAAA;AACrB,gCAAA,IAAI,CAACI,SAAS,EAAA,CAAA;AAChB,6BAAA;yBACK,MAAA;4BACL,IAAI,IAAI,CAACJ,aAAa,EAAE;gCACtB,IAAI,CAACA,aAAa,GAAG,KAAA,CAAA;AACrB,gCAAA,IAAI,CAACK,UAAU,EAAA,CAAA;AACjB,6BAAA;AACF,yBAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;;;YAKIR,GAAAA,EAAAA,QAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACK,OAAO,CAAA;AACrB,aAAA;;;YAKIe,GAAAA,EAAAA,OAAAA;;;MAAJ,SAAA,GAAA,GAAA;AACE,gBAAA,OAAO,IAAI,CAACf,OAAO,CAACe,KAAK,CAAA;AAC3B,aAAA;;;AAnEWrB,IAAAA,OAAAA,SAAAA,CAAAA;EAAkBzzC,YAgK9B,EAAA;;;;;;;;;;;;;;;;;ACrKD;;;IAIO,IAAM+0C,sBAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,sBAAAA,GAAAA,EAAAA;AAKX;;MALWA,uBAQJC,SAkBN,GAlBD,SAAOA,SAAUtB,CAAAA,MAAc,EAAE/1C,IAA0B,EAAA;AACzD,QAAA,MAAOA,SAAS81C,SAAW,CAAA;AACzB,YAAA,IAAMwB,gBAAgBF,sBAVfA,CAUsCG,gBAAgB,CAAC73C,GAAG,CAACM,IAAAA,CAAAA,CAAAA;AAClE,YAAA,IAAIs3C,aAAe,EAAA;AACjB,gBAAA,IAAQE,UAAqBF,GAAAA,aAAAA,CAArBE,UAAYj4C,EAAAA,IAAAA,GAAS+3C,aAAT/3C,CAAAA,IAAAA,CAAAA;gBACpB,IAAK,IAAIwC,IAAI,CAAG0B,EAAAA,CAAAA,GAAI+zC,WAAW71C,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;oBACjD,IAAM01C,kBAAAA,GAAqBD,UAAU,CAACz1C,CAAE,CAAA,CAAA;AACxC,oBAAA,IAAI,CAACg0C,MAAAA,CAAO2B,YAAY,CAACD,kBAAqB,CAAA,EAAA;AAC5C,wBAAA,IAAIl4C,IAAgC,KAAA,CAAA,EAAA;AAClCw2C,4BAAAA,MAAAA,CAAO4B,YAAY,CAACF,kBAAAA,CAAAA,CAAAA;yBACf,MAAA;AACL,4BAAA,MAAM,aAAcA,GAAAA,kBAAAA,CAAmBthC,IAAI,GAAC,iBAAA,GAAiBnW,KAAKmW,IAAI,CAAA;AACxE,yBAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;YACAnW,IAAOJ,GAAAA,MAAAA,CAAOY,cAAc,CAACR,IAAAA,CAAAA,CAAAA;AAC/B,SAAA;AACF,KAAA,CAAA;AAEA;;MA5BWo3C,uBA+BJQ,YAYN,GAZD,SAAOA,YAAa7B,CAAAA,MAAc,EAAE/1C,IAA0B,EAAA;AAC5D,QAAA,MAAOA,SAAS81C,SAAW,CAAA;AACzB,YAAA,IAAM+B,kBAAkBT,sBAjCjBA,CAiCwCU,mBAAmB,CAACp4C,GAAG,CAACM,IAAAA,CAAAA,CAAAA;AACvE,YAAA,IAAI63C,eAAiB,EAAA;gBACnB,IAAK,IAAI91C,IAAI,CAAG4S,EAAAA,GAAAA,GAAMkjC,gBAAgBl2C,MAAM,EAAEI,CAAI4S,GAAAA,GAAAA,EAAK5S,CAAK,EAAA,CAAA;AAC1D,oBAAA,IAAIg0C,OAAO2B,YAAY,CAACG,eAAe,CAAC91C,EAAE,CAAG,EAAA;wBAC3C,MAAO,gBAAgB81C,GAAAA,eAAe,CAAC91C,CAAAA,CAAE,CAACoU,IAAI,GAAC,iBAAiBnW,GAAAA,IAAAA,CAAKmW,IAAI,CAAA;AAC3E,qBAAA;AACF,iBAAA;AACF,aAAA;YACAnW,IAAOJ,GAAAA,MAAAA,CAAOY,cAAc,CAACR,IAAAA,CAAAA,CAAAA;AAC/B,SAAA;AACF,KAAA,CAAA;AAEA;;MA7CWo3C,sBAgDJW,CAAAA,cAWN,GAXD,SAAOA,eACLC,UAAyB,EACzBP,kBAAwC,EACxCz+B,GAA+C,EAAA;QAE/C,IAAIw+B,UAAAA,GAAax+B,GAAItZ,CAAAA,GAAG,CAACs4C,UAAAA,CAAAA,CAAAA;AACzB,QAAA,IAAI,CAACR,UAAY,EAAA;YACfx+B,GAAIlZ,CAAAA,GAAG,CAACk4C,UAAY,EAAA;AAACP,gBAAAA,kBAAAA;AAAmB,aAAA,CAAA,CAAA;SACnC,MAAA;AACLD,YAAAA,UAAAA,CAAWS,QAAQ,CAACR,kBAAuBD,CAAAA,IAAAA,UAAAA,CAAW3zC,IAAI,CAAC4zC,kBAAAA,CAAAA,CAAAA;AAC7D,SAAA;AACF,KAAA,CAAA;AAEA;;MA7DWL,uBAgEJc,iBAQN,GARD,SAAOA,iBAAkBC,CAAAA,gBAAsC,EAAEV,kBAAwC,EAAA;QACvG,IAAMz+B,GAAAA,GAAM,IAAI,CAAC8+B,mBAAmB,CAAA;QACpC,IAAIN,UAAAA,GAAax+B,GAAItZ,CAAAA,GAAG,CAACy4C,gBAAAA,CAAAA,CAAAA;AACzB,QAAA,IAAI,CAACX,UAAY,EAAA;YACfx+B,GAAIlZ,CAAAA,GAAG,CAACq4C,gBAAkB,EAAA;AAACV,gBAAAA,kBAAAA;AAAmB,aAAA,CAAA,CAAA;SACzC,MAAA;AACLD,YAAAA,UAAAA,CAAWS,QAAQ,CAACR,kBAAuBD,CAAAA,IAAAA,UAAAA,CAAW3zC,IAAI,CAAC4zC,kBAAAA,CAAAA,CAAAA;AAC7D,SAAA;AACF,KAAA,CAAA;AAxEWL,IAAAA,OAAAA,sBAAAA,CAAAA;AA2EZ,CAAA,EAAA,CAAA;AA3EYA,sBAAAA,CACIU,sBAAsB,IAAI11C,GAAAA,EAAAA,CAAAA;AAD9Bg1C,sBAAAA,CAGJG,mBAAmB,IAAIn1C,GAAAA,EAAAA,CAAAA;AAwFzB,SAASg2C,mBAAAA,CACdC,qBAAoE,EACpEC,aAAsD,EAAA;AAAtDA,IAAAA,IAAAA,aAAAA,KAAAA,KAAAA,CAAAA,EAAAA,aAAAA,GAAAA,CAAAA,CAAAA;AAEA,IAAA,IAAMd,UAAa31C,GAAAA,KAAAA,CAAMwlB,OAAO,CAACgxB,yBAAyBA,qBAAwB,GAAA;AAACA,QAAAA,qBAAAA;AAAsB,KAAA,CAAA;AAEzG,IAAA,OAAO,SAA0Cz5C,MAAS,EAAA;AACxDw4C,QAAAA,sBAAAA,CAAuBG,gBAAgB,CAACz3C,GAAG,CAAClB,MAAQ,EAAA;YAAEW,IAAM+4C,EAAAA,aAAAA;YAAed,UAAAA,EAAAA,UAAAA;AAAW,SAAA,CAAA,CAAA;QACtFA,UAAW1mB,CAAAA,OAAO,CAAC,SAAC0jB,SAAAA,EAAAA;mBAAc4C,sBAAuBc,CAAAA,iBAAiB,CAAC1D,SAAW51C,EAAAA,MAAAA,CAAAA,CAAAA;;AACxF,KAAA,CAAA;AACF,CAAA;AAEA;;IAGO,IAAK25C,aAAAA,iBAAAA,SAAAA,aAAAA,EAAAA;yEACwD,aAAA,CAAA,aAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA,CAAA;0DAEf,aAAA,CAAA,aAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA;AAHzCA,IAAAA,OAAAA,aAAAA,CAAAA;AAKX,CAAA,CAAA,EAAA;;ACrHD;;IAGO,IAAeC,UAAf,iBAAA,WAAA;AAAeA,IAAAA,SAAAA,UAAAA,GAAAA;yBACN,IAAA,CACd/5B,gBAAqC,EAAE,CAAA;;AAFnB+5B,IAAAA,IAAAA,MAAAA,GAAAA,UAAAA,CAAAA,SAAAA,CAAAA;AAWpB;;MAGAC,MAAAA,CAAAA,iBAGC,GAHDA,SAAAA,iBAAAA,GAAAA;AACE,QAAA,IAAI,CAACC,mBAAmB,EAAA,CAAA;AACxB,QAAA,IAAI,CAACj6B,aAAa,CAAC9c,MAAM,GAAG,CAAA,CAAA;AAC9B,KAAA,CAAA;AAEA;;MAGAgB,MAAAA,CAAAA,OAGC,GAHDA,SAAAA,OAAAA,GAAAA;AACE,QAAA,IAAI,CAAC+1C,mBAAmB,EAAA,CAAA;QACxB,IAAI,CAACj6B,aAAa,GAAG,IAAA,CAAA;AACvB,KAAA,CAAA;IAEA,MAAQi6B,CAAAA,mBAKP,GALD,SAAQA,mBAAAA,GAAAA;QACN,IAAMC,YAAAA,GAAe,IAAI,CAACl6B,aAAa,CAAA;QACvC,IAAK,IAAI1c,IAAI,CAAG0B,EAAAA,CAAAA,GAAIk1C,aAAah3C,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;YACnD4V,KAAMC,CAAAA,eAAe,CAAC+gC,YAAY,CAAC52C,EAAE,CAACqc,YAAY,EAAE,IAAI,CAAA,CAAA;AAC1D,SAAA;AACF,KAAA,CAAA;AAhCoBo6B,IAAAA,OAAAA,UAAAA,CAAAA;AAiCrB,CAAA,EAAA;;ACrCD;;IAGO,IAAMI,cAAN,iBAAA,SAAA,UAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,cAAAA,EAAAA,UAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,cAAAA,GAAAA;;AACX,QAAA,KAAA,GAAA,UAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA,0BACAr6B,IAAgB,GAAA,IAAA,CAAA;;;AAFLq6B,IAAAA,IAAAA,MAAAA,GAAAA,cAAAA,CAAAA,SAAAA,CAAAA;AAIX;;MAGA75B,MAAAA,CAAAA,QAEC,GAFDA,SAAAA,QAAAA,GAAAA;QACE,IAAI,CAACR,IAAI,GAAG,IAAA,CAAA;AACd,KAAA,CAAA;AATWq6B,IAAAA,OAAAA,cAAAA,CAAAA;EAAuBJ,UAUnC;;ACRD;;IAGO,IAAMK,SAAN,iBAAA,SAAA,SAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,SAAAA,EAAAA,SAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,SAAAA,CA6SC9C,MAAc,EAAA;;gBACxB,SAAMA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,CAAAA,IAAAA,IAAAA,EAAAA,KAAAA,CAlSA+C,YAAqB,IAAIhe,kBAAAA,EAAAA,EAAAA,KAAAA,CAEzBie,YAAqB,IAAIje,kBAAAA,EAAAA,EAAAA,KAAAA,CAEzBke,mBAAkC,GAAA,IAAIC,qBAEtCC,EAAAA,EAAAA,KAAAA,CAAAA,MAAAA,GAAkB,IAAIpe,kBAAQ,CAAA,CAAA,EAAG,CAAG,EAAA,CAAA,CAAA,EAAA,KAAA,CAEpCqe,cAA0B,GAAA,IAAIre,4BAE9Bse,cAA0B,GAAA,IAAIte,kBAE9Bue,EAAAA,EAAAA,KAAAA,CAAAA,wBAAAA,GAAuC,IAAIJ,qBAAAA,EAAAA,EAAAA,KAAAA,CAE3CK,mBAA4B,IAAIxe,kBAAAA,CAAQ,CAAG,EAAA,CAAA,EAAG,CAE9Cye,CAAAA,EAAAA,KAAAA,CAAAA,YAAAA,GAAuB,IAAI7G,iBAE3B8G,EAAAA,EAAAA,KAAAA,CAAAA,YAAAA,GAAuB,IAAI9G,iBAAAA,EAAAA,EAAAA,KAAAA,CAE3B+G,aAAyB,GAAA,IAAA,EAAA,KAAA,CAEzBC,cAAuB,IAEvBC,EAAAA,KAAAA,CAAAA,QAAAA,GAAoB,IAGpBC,EAAAA,KAAAA,CAAAA,cAAAA,GAA0B,IAE1BC,EAAAA,KAAAA,CAAAA,qBAAAA,GAAmC,YACnCC,UAER,GAAA,GAAA,mBAEAt5B,KAAAA,CAAAA,kBAAAA,GAAwC,IAAIrC,iBAAAA,EAAAA,CAAAA;AAkQ1C,QAAA,KAAA,CAAK47B,kBAAkB,GAAG,KAAKA,CAAAA,kBAAkB,CAACl0C,IAAI,CAAA,KAAA,CAAA,CAAA;AACtD,QAAA,KAAA,CAAKm0C,uBAAuB,GAAG,KAAKA,CAAAA,uBAAuB,CAACn0C,IAAI,CAAA,KAAA,CAAA,CAAA;AAChE,QAAA,KAAA,CAAKo0C,kBAAkB,GAAG,KAAKA,CAAAA,kBAAkB,CAACp0C,IAAI,CAAA,KAAA,CAAA,CAAA;AACtD,QAAA,KAAA,CAAKq0C,uBAAuB,GAAG,KAAKA,CAAAA,uBAAuB,CAACr0C,IAAI,CAAA,KAAA,CAAA,CAAA;AAChE,QAAA,KAAA,CAAKs0C,4BAA4B,GAAG,KAAKA,CAAAA,4BAA4B,CAACt0C,IAAI,CAAA,KAAA,CAAA,CAAA;AAC1E,QAAA,KAAA,CAAKu0C,iCAAiC,GAAG,KAAKA,CAAAA,iCAAiC,CAACv0C,IAAI,CAAA,KAAA,CAAA,CAAA;AACpF,QAAA,KAAA,CAAKw0C,eAAe,GAAG,KAAKA,CAAAA,eAAe,CAACx0C,IAAI,CAAA,KAAA,CAAA,CAAA;;AAGhD,QAAA,KAAA,CAAKizC,SAAS,CAACl4B,eAAe,GAAG,MAAKm5B,kBAAkB,CAAA;;AAExD,QAAA,KAAA,CAAKZ,cAAc,CAACv4B,eAAe,GAAG,MAAKo5B,uBAAuB,CAAA;;AAElE,QAAA,KAAA,CAAKjB,SAAS,CAACn4B,eAAe,GAAG,MAAKq5B,kBAAkB,CAAA;;AAExD,QAAA,KAAA,CAAKb,cAAc,CAACx4B,eAAe,GAAG,MAAKs5B,uBAAuB,CAAA;;AAElE,QAAA,KAAA,CAAKlB,mBAAmB,CAACp4B,eAAe,GAAG,MAAKu5B,4BAA4B,CAAA;;AAE5E,QAAA,KAAA,CAAKd,wBAAwB,CAACz4B,eAAe,GAAG,MAAKw5B,iCAAiC,CAAA;;AAEtF,QAAA,KAAA,CAAKlB,MAAM,CAACt4B,eAAe,GAAG,MAAKy5B,eAAe,CAAA;;;AArUzCxB,IAAAA,IAAAA,MAAAA,GAAAA,SAAAA,CAAAA,SAAAA,CAAAA;AAwUX;;;;;MAMAyB,MAAAA,CAAAA,WAEC,GAFDA,SAAAA,YAAYhvC,CAAS,EAAEC,CAAS,EAAEgW,CAAS,EAAA;AACzC,QAAA,IAAI,CAACu3B,SAAS,CAACh5C,GAAG,CAACwL,GAAGC,CAAGgW,EAAAA,CAAAA,CAAAA,CAAAA;AAC3B,KAAA,CAAA;AAEA;;;;;;MAOAg5B,MAAAA,CAAAA,WAEC,GAFDA,SAAAA,YAAYjvC,CAAS,EAAEC,CAAS,EAAEgW,CAAS,EAAA;AACzC,QAAA,IAAI,CAACw3B,SAAS,CAACj5C,GAAG,CAACwL,GAAGC,CAAGgW,EAAAA,CAAAA,CAAAA,CAAAA;AAC3B,KAAA,CAAA;AAEA;;;;;;MAOAi5B,MAAAA,CAAAA,qBAEC,GAFDA,SAAAA,qBAAAA,CAAsBlvC,CAAS,EAAEC,CAAS,EAAEgW,CAAS,EAAEnU,CAAS,EAAA;AAC9D,QAAA,IAAI,CAAC4rC,mBAAmB,CAACl5C,GAAG,CAACwL,CAAAA,EAAGC,GAAGgW,CAAGnU,EAAAA,CAAAA,CAAAA,CAAAA;AACxC,KAAA,CAAA;AAEA;;;;;MAMAqtC,MAAAA,CAAAA,QAEC,GAFDA,SAAAA,SAASnvC,CAAS,EAAEC,CAAS,EAAEgW,CAAS,EAAA;AACtC,QAAA,IAAI,CAAC23B,MAAM,CAACp5C,GAAG,CAACwL,GAAGC,CAAGgW,EAAAA,CAAAA,CAAAA,CAAAA;AACxB,KAAA,CAAA;AAEA;;;;;MAMAm5B,MAAAA,CAAAA,gBAEC,GAFDA,SAAAA,iBAAiBpvC,CAAS,EAAEC,CAAS,EAAEgW,CAAS,EAAA;AAC9C,QAAA,IAAI,CAAC43B,cAAc,CAACr5C,GAAG,CAACwL,GAAGC,CAAGgW,EAAAA,CAAAA,CAAAA,CAAAA;AAChC,KAAA,CAAA;AAEA;;;;;MAMAo5B,MAAAA,CAAAA,gBAEC,GAFDA,SAAAA,iBAAiBrvC,CAAS,EAAEC,CAAS,EAAEgW,CAAS,EAAA;AAC9C,QAAA,IAAI,CAAC63B,cAAc,CAACt5C,GAAG,CAACwL,GAAGC,CAAGgW,EAAAA,CAAAA,CAAAA,CAAAA;AAChC,KAAA,CAAA;AAEA;;;;;;MAOAq5B,MAAAA,CAAAA,0BAEC,GAFDA,SAAAA,0BAAAA,CAA2BtvC,CAAS,EAAEC,CAAS,EAAEgW,CAAS,EAAEnU,CAAS,EAAA;AACnE,QAAA,IAAI,CAACisC,wBAAwB,CAACv5C,GAAG,CAACwL,CAAAA,EAAGC,GAAGgW,CAAGnU,EAAAA,CAAAA,CAAAA,CAAAA;AAC7C,KAAA,CAAA;IAgDAytC,MAAAA,CAAAA,SAaC,GAbDA,SAAAA,SACEC,CAAAA,cAAgC,EAChCC,kBAAqC,EACrCx5B,CAAU,EACVy5B,eAAyB,EAAA;QAEzB,IAAI,OAAOF,mBAAmB,QAAU,EAAA;YACtC,IAAMD,SAAAA,GAAYhC,SAtcXA,CAscqBoC,UAAU,CAAA;YACtCJ,SAAU/6C,CAAAA,GAAG,CAACg7C,cAAAA,EAAwBC,kBAAoBx5B,EAAAA,CAAAA,CAAAA,CAAAA;YAC1D,IAAI,CAAC25B,UAAU,CAACL,SAAWG,EAAAA,eAAAA,CAAAA,CAAAA;SACtB,MAAA;YACL,IAAI,CAACE,UAAU,CAACJ,cAAyBC,EAAAA,kBAAAA,CAAAA,CAAAA;AAC3C,SAAA;AACF,KAAA,CAAA;IAkBAI,MAAAA,CAAAA,MAWC,GAXDA,SAAAA,MACEC,CAAAA,WAA6B,EAC7BL,kBAAqC,EACrCx5B,CAAU,EACVy5B,eAAyB,EAAA;QAEzB,IAAI,OAAOI,gBAAgB,QAAU,EAAA;AACnC,YAAA,IAAI,CAACC,UAAU,CAACD,WAAAA,EAAqBL,oBAAoBx5B,CAAGy5B,EAAAA,eAAAA,CAAAA,CAAAA;SACvD,MAAA;YACL,IAAI,CAACK,UAAU,CAACD,WAAY9vC,CAAAA,CAAC,EAAE8vC,WAAAA,CAAY7vC,CAAC,EAAE6vC,WAAY75B,CAAAA,CAAC,EAAWw5B,kBAAAA,CAAAA,CAAAA;AACxE,SAAA;AACF,KAAA,CAAA;AAEA;;;;;MAMAO,MAAAA,CAAAA,YAIC,GAJDA,SAAAA,aAAaC,IAAa,EAAEC,KAAa,EAAER,eAA+B,EAAA;AAA/BA,QAAAA,IAAAA,4BAAAA,eAA2B,GAAA,IAAA,CAAA;QACpE,IAAMS,GAAAA,GAAMD,KAAQp4B,GAAAA,mBAAAA,CAASs4B,iBAAiB,CAAA;AAC9CzC,QAAAA,qBAAAA,CAAW0C,iBAAiB,CAACJ,IAAAA,EAAME,GAAK5C,EAnf/BA,UAmfyC+C,UAAU,CAAA,CAAA;AAC5D,QAAA,IAAI,CAACC,aAAa,CAAChD,SApfVA,CAofoB+C,UAAU,EAAEZ,eAAAA,CAAAA,CAAAA;AAC3C,KAAA,CAAA;AAEA;;;;AAIC,MACDc,OAAAA,MAgCC,GAhCDA,SAAAA,MAAOC,CAAAA,cAAuB,EAAEC,OAAiB,EAAA;QAC/C,IAAMC,KAAAA,GAAQpD,SA7fLA,CA6feoC,UAAU,CAAA;AAClCngB,QAAAA,kBAAAA,CAAQohB,QAAQ,CAAC,IAAI,CAACC,aAAa,EAAEJ,cAAgBE,EAAAA,KAAAA,CAAAA,CAAAA;QACrD,IAAIG,OAAAA,GAAUH,MAAMt6C,MAAM,EAAA,CAAA;QAC1B,IAAIy6C,OAAAA,IAAWh5B,mBAASi5B,CAAAA,aAAa,EAAE;;AAErC,YAAA,OAAA;AACF,SAAA;QACAJ,KAAMK,CAAAA,KAAK,CAAC,CAAIF,GAAAA,OAAAA,CAAAA,CAAAA;QAChB,IAAMG,KAAAA,GAAQ1D,SArgBLA,CAqgBe2D,UAAU,CAAA;AAClC,QAAA,IAAIR,OAAS,EAAA;YACXlhB,kBAAQ2hB,CAAAA,KAAK,CAACT,OAAAA,EAASC,KAAOM,EAAAA,KAAAA,CAAAA,CAAAA;SACzB,MAAA;YACLA,KAAMz8C,CAAAA,GAAG,CAACm8C,KAAM16B,CAAAA,CAAC,EAAE,CAAG,EAAA,CAAC06B,MAAM3wC,CAAC,CAAA,CAAA;AAChC,SAAA;AACA8wC,QAAAA,OAAAA,GAAUG,MAAM56C,MAAM,EAAA,CAAA;QACtB,IAAIy6C,OAAAA,IAAWh5B,mBAASi5B,CAAAA,aAAa,EAAE;;;;AAIrC,YAAA,OAAA;AACF,SAAA;QACAE,KAAMD,CAAAA,KAAK,CAAC,CAAIF,GAAAA,OAAAA,CAAAA,CAAAA;QAChB,IAAMM,KAAAA,GAAQ7D,SAnhBLA,CAmhBe8D,UAAU,CAAA;QAClC7hB,kBAAQ2hB,CAAAA,KAAK,CAACR,KAAAA,EAAOM,KAAOG,EAAAA,KAAAA,CAAAA,CAAAA;QAE5B,IAAME,MAAAA,GAAS/D,SAthBNA,CAshBgBgE,UAAU,CAAA;QACnC,IAAkB7rB,IAAM4rB,MAAhB7iC,CAAAA,QAAAA,CAAAA;AACPiX,QAAAA,CAAC,CAAC,CAAE,CAAA,GAAGurB,MAAMjxC,CAAC,EAAI0lB,CAAC,CAAC,CAAA,CAAE,GAAGurB,KAAAA,CAAMhxC,CAAC,EAAIylB,CAAC,CAAC,CAAE,CAAA,GAAGurB,MAAMh7B,CAAC,CAAA;AAClDyP,QAAAA,CAAC,CAAC,CAAE,CAAA,GAAG0rB,MAAMpxC,CAAC,EAAI0lB,CAAC,CAAC,CAAA,CAAE,GAAG0rB,KAAAA,CAAMnxC,CAAC,EAAIylB,CAAC,CAAC,CAAE,CAAA,GAAG0rB,MAAMn7B,CAAC,CAAA;AAClDyP,QAAAA,CAAC,CAAC,CAAE,CAAA,GAAGirB,MAAM3wC,CAAC,EAAI0lB,CAAC,CAAC,CAAA,CAAE,GAAGirB,KAAAA,CAAM1wC,CAAC,EAAIylB,CAAC,CAAC,EAAG,CAAA,GAAGirB,MAAM16B,CAAC,CAAA;AACpDq7B,QAAAA,MAAAA,CAAOE,WAAW,CAAC,IAAI,CAACzD,wBAAwB,CAAA,CAAA;AAClD,KAAA,CAAA;AAEA;;;MAIA0D,MAAAA,CAAAA,uBAEC,GAFDA,SAAAA,uBAAAA,GAAAA;AACE,QAAA,OAAO,IAAI,CAACv8B,kBAAkB,CAAClC,UAAU,CAACs6B,cAAAA,CAAAA,CAAAA;AAC5C,KAAA,CAAA;AAEA;;MAGAoE,MAAAA,CAAAA,aAGC,GAHDA,SAAAA,aAAAA,GAAAA;QACE,IAAI,CAACpD,cAAc,GAAG,IAAA,CAAA;AACtB,QAAA,IAAI,CAACqD,mBAAmB,EAAA,CAAA;AAC1B,KAAA,CAAA;AAEA;;MAGAC,MAAAA,CAAAA,kBAMC,GANDA,SAAAA,kBAAAA,GAAAA;QACE,IAAMZ,KAAAA,GAAQ,IAAI,CAACa,eAAe,CAAA;QAClC,IAAIC,QAAAA,GAAWd,KAAMhxC,CAAAA,CAAC,GAAG,CAAA,CAAA;AACzBgxC,QAAAA,KAAAA,CAAM/wC,CAAC,GAAG,CAAA,KAAM6xC,QAAAA,GAAW,CAACA,QAAO,CAAA,CAAA;AACnCd,QAAAA,KAAAA,CAAM/6B,CAAC,GAAG,CAAA,KAAM67B,QAAAA,GAAW,CAACA,QAAO,CAAA,CAAA;QACnC,OAAOA,QAAAA,CAAAA;AACT,KAAA,CAAA;IAEA,MAAmBx6C,CAAAA,UAgBlB,GAhBD,SAAmBA,UAAAA,GAAAA;AACjB,QAAA,SAAA,CAAA,SAAA,CAAMA,UAAD,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;;AAEL,QAAA,IAAI,CAACu2C,cAAc,CAACv4B,eAAe,GAAG,IAAA,CAAA;;AAEtC,QAAA,IAAI,CAACm4B,SAAS,CAACn4B,eAAe,GAAG,IAAA,CAAA;;AAEjC,QAAA,IAAI,CAACw4B,cAAc,CAACx4B,eAAe,GAAG,IAAA,CAAA;;AAEtC,QAAA,IAAI,CAACo4B,mBAAmB,CAACp4B,eAAe,GAAG,IAAA,CAAA;;AAE3C,QAAA,IAAI,CAACy4B,wBAAwB,CAACz4B,eAAe,GAAG,IAAA,CAAA;;AAEhD,QAAA,IAAI,CAACk4B,SAAS,CAACl4B,eAAe,GAAG,IAAA,CAAA;;AAEjC,QAAA,IAAI,CAACs4B,MAAM,CAACt4B,eAAe,GAAG,IAAA,CAAA;AAChC,KAAA,CAAA;AAEA;;;;MAKA,MAAA,CAAQy8B,wBAQP,GARD,SAAQA,wBAAAA,GAAAA;AACN,QAAA,IAAI,CAAC,IAAI,CAACC,oBAAoB,CAA6B,GAAA,CAAA,EAAA;AACzD,YAAA,IAAI,CAACC,sBAAsB,CAAA,GAAA,CAAA,CAAA;AAC3B,YAAA,IAAMC,YAAe,GAAA,IAAI,CAACpH,OAAO,CAACqH,SAAS,CAAA;YAC3C,IAAK,IAAI17C,IAAY,CAAG0B,EAAAA,CAAAA,GAAY+5C,aAAa77C,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;AACnEy7C,gBAAAA,IAAAA,yBAAAA,CAAAA;AAAAA,gBAAAA,CAAAA,yBAAAA,GAAAA,YAAY,CAACz7C,CAAAA,CAAE,CAAC27C,SAAS,KAAA,IAAA,GAAA,KAAA,CAAA,GAAzBF,0BAA2BH,wBAAwB,EAAA,CAAA;AACrD,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AAEA;;;;;;MAOA,MAAA,CAAQM,wBAQP,GARD,SAAQA,wBAAAA,GAAAA;AACN,QAAA,IAAI,CAAC,IAAI,CAACL,oBAAoB,CAA+B,GAAA,CAAA,EAAA;AAC3D,YAAA,IAAI,CAACC,sBAAsB,CAAA,GAAA,CAAA,CAAA;AAC3B,YAAA,IAAMC,YAAe,GAAA,IAAI,CAACpH,OAAO,CAACqH,SAAS,CAAA;YAC3C,IAAK,IAAI17C,IAAY,CAAG0B,EAAAA,CAAAA,GAAY+5C,aAAa77C,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;AACnEy7C,gBAAAA,IAAAA,yBAAAA,CAAAA;iBAAAA,yBAAAA,GAAAA,YAAY,CAACz7C,CAAE,CAAA,CAAC27C,SAAS,KAAzBF,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,yBAAAA,CAA2BI,mCAAmC,EAAA,CAAA;AAChE,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AAEA;;;;;;MAOA,MAAA,CAAQA,mCAQP,GARD,SAAQA,mCAAAA,GAAAA;AACN,QAAA,IAAI,CAAC,IAAI,CAACN,oBAAoB,CAAiC,GAAA,CAAA,EAAA;AAC7D,YAAA,IAAI,CAACC,sBAAsB,CAAA,GAAA,CAAA,CAAA;AAC3B,YAAA,IAAMC,YAAe,GAAA,IAAI,CAACpH,OAAO,CAACqH,SAAS,CAAA;YAC3C,IAAK,IAAI17C,IAAY,CAAG0B,EAAAA,CAAAA,GAAY+5C,aAAa77C,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;AACnEy7C,gBAAAA,IAAAA,yBAAAA,CAAAA;AAAAA,gBAAAA,CAAAA,yBAAAA,GAAAA,YAAY,CAACz7C,CAAAA,CAAE,CAAC27C,SAAS,KAAA,IAAA,GAAA,KAAA,CAAA,GAAzBF,0BAA2BI,mCAAmC,EAAA,CAAA;AAChE,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AAEA;;;;;MAMA,MAAA,CAAQC,qBAQP,GARD,SAAQA,qBAAAA,GAAAA;AACN,QAAA,IAAI,CAAC,IAAI,CAACP,oBAAoB,CAA6B,GAAA,CAAA,EAAA;AACzD,YAAA,IAAI,CAACC,sBAAsB,CAAA,GAAA,CAAA,CAAA;AAC3B,YAAA,IAAMC,YAAe,GAAA,IAAI,CAACpH,OAAO,CAACqH,SAAS,CAAA;YAC3C,IAAK,IAAI17C,IAAY,CAAG0B,EAAAA,CAAAA,GAAY+5C,aAAa77C,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;AACnEy7C,gBAAAA,IAAAA,yBAAAA,CAAAA;AAAAA,gBAAAA,CAAAA,yBAAAA,GAAAA,YAAY,CAACz7C,CAAAA,CAAE,CAAC27C,SAAS,KAAA,IAAA,GAAA,KAAA,CAAA,GAAzBF,0BAA2BM,gCAAgC,EAAA,CAAA;AAC7D,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AAEA;;;;;MAMA,MAAA,CAAQA,gCAQP,GARD,SAAQA,gCAAAA,GAAAA;AACN,QAAA,IAAI,CAAC,IAAI,CAACR,oBAAoB,CAA+B,GAAA,CAAA,EAAA;AAC3D,YAAA,IAAI,CAACC,sBAAsB,CAAA,GAAA,CAAA,CAAA;AAC3B,YAAA,IAAMC,YAAe,GAAA,IAAI,CAACpH,OAAO,CAACqH,SAAS,CAAA;YAC3C,IAAK,IAAI17C,IAAY,CAAG0B,EAAAA,CAAAA,GAAY+5C,aAAa77C,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;AACnEy7C,gBAAAA,IAAAA,yBAAAA,CAAAA;AAAAA,gBAAAA,CAAAA,yBAAAA,GAAAA,YAAY,CAACz7C,CAAAA,CAAE,CAAC27C,SAAS,KAAA,IAAA,GAAA,KAAA,CAAA,GAAzBF,0BAA2BM,gCAAgC,EAAA,CAAA;AAC7D,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AAEA;;MAGA,MAAA,CAAQb,mBAQP,GARD,SAAQA,mBAAAA,GAAAA;AACN,QAAA,IAAI,CAAC,IAAI,CAACK,oBAAoB,CAAmC,GAAA,CAAA,EAAA;AAC/D,YAAA,IAAI,CAACC,sBAAsB,CAAA,GAAA,CAAA,CAAA;AAC3B,YAAA,IAAMC,YAAe,GAAA,IAAI,CAACpH,OAAO,CAACqH,SAAS,CAAA;YAC3C,IAAK,IAAI17C,IAAY,CAAG0B,EAAAA,CAAAA,GAAY+5C,aAAa77C,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;AACnEy7C,gBAAAA,IAAAA,yBAAAA,CAAAA;AAAAA,gBAAAA,CAAAA,yBAAAA,GAAAA,YAAY,CAACz7C,CAAAA,CAAE,CAAC27C,SAAS,KAAA,IAAA,GAAA,KAAA,CAAA,GAAzBF,0BAA2BP,mBAAmB,EAAA,CAAA;AAChD,aAAA;AACF,SAAA;AACF,KAAA,CAAA;IAEA,MAAQc,CAAAA,mBAkBP,GAlBD,SAAQA,mBAAAA,GAAAA;AACN,QAAA,IAAI,CAAC,IAAI,CAACnE,cAAc,EAAE;YACxB,OAAO,IAAI,CAACC,qBAAqB,CAAA;AACnC,SAAA;AACA,QAAA,IAAImE,WAAyB,GAAA,IAAA,CAAA;AAC7B,QAAA,IAAIC,MAAS,GAAA,IAAI,CAAC7H,OAAO,CAAC6H,MAAM,CAAA;AAChC,QAAA,MAAOA,MAAQ,CAAA;YACb,IAAMP,SAAAA,GAAYO,OAAOP,SAAS,CAAA;AAClC,YAAA,IAAIA,SAAW,EAAA;gBACbM,WAAcN,GAAAA,SAAAA,CAAAA;AACd,gBAAA,MAAA;aACK,MAAA;AACLO,gBAAAA,MAAAA,GAASA,OAAOA,MAAM,CAAA;AACxB,aAAA;AACF,SAAA;QACA,IAAI,CAACpE,qBAAqB,GAAGmE,WAAAA,CAAAA;QAC7B,IAAI,CAACpE,cAAc,GAAG,KAAA,CAAA;QACtB,OAAOoE,WAAAA,CAAAA;AACT,KAAA,CAAA;IAEA,MAAQE,CAAAA,eAUP,GAVD,SAAQA,eAAAA,GAAAA;QACN,IAAMC,WAAAA,GAActF,SA9rBXA,CA8rBqB+C,UAAU,CAAA;QACxC,IAAMwC,cAAAA,GAAiBvF,SA/rBdA,CA+rBwBwF,UAAU,CAAA;QAC3C,IAAMC,cAAAA,GAAiBzF,SAhsBdA,CAgsBwB0F,UAAU,CAAA;QAC3C,IAAMC,MAAAA,GAAS3F,SAjsBNA,CAisBgB4F,UAAU,CAAA;AACnCH,QAAAA,cAAAA,CAAeI,cAAc,CAAC,IAAI,CAACC,WAAW,CAAA,CAAA;AAC9C1F,QAAAA,qBAAAA,CAAW2F,MAAM,CAAC,IAAI,CAACC,uBAAuB,EAAEV,WAAAA,CAAAA,CAAAA;QAChDW,oBAAUC,CAAAA,kBAAkB,CAACZ,WAAaC,EAAAA,cAAAA,CAAAA,CAAAA;QAC1CU,oBAAUE,CAAAA,QAAQ,CAACZ,cAAAA,EAAgBE,cAAgBE,EAAAA,MAAAA,CAAAA,CAAAA;QACnD,OAAOA,MAAAA,CAAAA;AACT,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQlB,oBAEP,GAFD,SAAQA,oBAAAA,CAAqB2B,gBAAwB,EAAA;AACnD,QAAA,OAAO,CAAC,IAAI,CAACnF,UAAU,GAAGmF,gBAAe,MAAOA,gBAAAA,CAAAA;AAClD,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQC,mBAEP,GAFD,SAAQA,mBAAAA,CAAoBl/C,IAAY,EAAA;AACtC,QAAA,OAAO,CAAC,IAAI,CAAC85C,UAAU,GAAG95C,IAAG,KAAM,CAAA,CAAA;AACrC,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQm/C,iBAEP,GAFD,SAAQA,iBAAAA,CAAkBn/C,IAAY,EAAA;QACpC,IAAI,CAAC85C,UAAU,IAAI95C,IAAAA,CAAAA;AACrB,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQo/C,kBAEP,GAFD,SAAQA,kBAAAA,CAAmBp/C,IAAY,EAAA;QACrC,IAAI,CAAC85C,UAAU,IAAI,CAAC95C,IAAAA,CAAAA;AACtB,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQu9C,sBAGP,GAHD,SAAQA,sBAAAA,CAAuBv9C,IAAY,EAAA;QACzC,IAAI,CAAC85C,UAAU,IAAI95C,IAAAA,CAAAA;QACnB,IAAI,CAACwgB,kBAAkB,CAACzB,QAAQ,CAAA,GAAA,CAAA,CAAA;AAClC,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQ88B,aAMP,GAND,SAAQA,aAAcwD,CAAAA,UAAsB,EAAErE,eAAwB,EAAA;AACpE,QAAA,IAAIA,eAAiB,EAAA;YACnB/B,qBAAW+F,CAAAA,QAAQ,CAAC,IAAI,CAACD,kBAAkB,EAAEM,UAAAA,EAAY,IAAI,CAACrG,mBAAmB,CAAA,CAAA;SAC5E,MAAA;YACLC,qBAAW+F,CAAAA,QAAQ,CAACK,UAAY,EAAA,IAAI,CAACR,uBAAuB,EAAE,IAAI,CAACxF,wBAAwB,CAAA,CAAA;AAC7F,SAAA;AACF,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQ6B,UAQP,GARD,SAAQA,UAAWoE,CAAAA,WAAoB,EAAEtE,eAA+B,EAAA;AAA/BA,QAAAA,IAAAA,4BAAAA,eAA2B,GAAA,IAAA,CAAA;AAClE,QAAA,IAAIA,eAAiB,EAAA;YACnB,IAAQC,aAxuBDpC,SAwuBCoC,CAAAA,UAAAA,CAAAA;AACRngB,YAAAA,kBAAAA,CAAQykB,eAAe,CAACD,WAAAA,EAAa,IAAI,CAACT,uBAAuB,EAAE5D,UAAAA,CAAAA,CAAAA;AACnE,YAAA,IAAI,CAACkB,aAAa,CAACtrB,GAAG,CAACoqB,UAAAA,CAAAA,CAAAA;SAClB,MAAA;AACL,YAAA,IAAI,CAACkB,aAAa,CAACtrB,GAAG,CAACyuB,WAAAA,CAAAA,CAAAA;AACzB,SAAA;AACF,KAAA,CAAA;IAEA,MAAQjE,CAAAA,UAKP,GALD,SAAQA,UAAW/vC,CAAAA,CAAS,EAAEC,CAAS,EAAEgW,CAAS,EAAEy5B,eAA+B,EAAA;AAA/BA,QAAAA,IAAAA,4BAAAA,eAA2B,GAAA,IAAA,CAAA;QAC7E,IAAMwE,SAAAA,GAAYp8B,oBAASs4B,iBAAiB,CAAA;QAC5C,IAAM+D,OAAAA,GAAU5G,SAlvBPA,CAkvBiB+C,UAAU,CAAA;AACpC3C,QAAAA,qBAAAA,CAAWyG,aAAa,CAACp0C,CAAAA,GAAIk0C,WAAWj0C,CAAIi0C,GAAAA,SAAAA,EAAWj+B,IAAIi+B,SAAWC,EAAAA,OAAAA,CAAAA,CAAAA;QACtE,IAAI,CAAC5D,aAAa,CAAC4D,OAASzE,EAAAA,eAAAA,CAAAA,CAAAA;AAC9B,KAAA,CAAA;IAEA,MACQjB,CAAAA,kBAGP,GAJD,SACQA,kBAAAA,GAAAA;AACN,QAAA,IAAI,CAACoF,iBAAiB,CAAA,EAAA,CAAA,CAAA;AACtB,QAAA,IAAI,CAAC9B,wBAAwB,EAAA,CAAA;AAC/B,KAAA,CAAA;IAEA,MACQrD,CAAAA,uBAUP,GAXD,SACQA,uBAAAA,GAAAA;QACN,IAAMmC,aAAAA,GAAgB,IAAI,CAAChD,cAAc,CAAA;QACzC,IAAM8E,MAAAA,GAAS,IAAI,CAACF,mBAAmB,EAAA,CAAA;AACvC,QAAA,IAAIE,MAAQ,EAAA;AACVvL,YAAAA,iBAAAA,CAAOkM,MAAM,CAACX,MAAAA,CAAOU,WAAW,EAlwBzB9F,UAkwBqCgE,UAAU,CAAA,CAAA;YACtD/hB,kBAAQ6kB,CAAAA,mBAAmB,CAACxD,aAAetD,EAnwBpCA,UAmwB8CgE,UAAU,EAAE,IAAI,CAAC/D,SAAS,CAAA,CAAA;SAC1E,MAAA;AACL,YAAA,IAAI,CAACA,SAAS,CAAC72C,QAAQ,CAACk6C,aAAAA,CAAAA,CAAAA;AAC1B,SAAA;AACA,QAAA,IAAI,CAACiD,kBAAkB,CAAA,CAAA,CAAA,CAAA;AACzB,KAAA,CAAA;IAEA,MACQnF,CAAAA,kBAIP,GALD,SACQA,kBAAAA,GAAAA;QACN,IAAI,CAACkF,iBAAiB,CAACS,EAAAA,GAAAA,CAAAA,CAAAA,CAAAA;AACvB,QAAA,IAAI,CAACR,kBAAkB,CAAA,CAAA,CAAA,CAAA;AACvB,QAAA,IAAI,CAACzB,wBAAwB,EAAA,CAAA;AAC/B,KAAA,CAAA;IAEA,MACQzD,CAAAA,uBASP,GAVD,SACQA,uBAAAA,GAAAA;QACN,IAAM2F,aAAAA,GAAgB,IAAI,CAACzG,cAAc,CAAA;QACzCH,qBAAWyG,CAAAA,aAAa,CACtBt8B,mBAAS08B,CAAAA,cAAc,CAACD,aAAcv0C,CAAAA,CAAC,CACvC8X,EAAAA,mBAAAA,CAAS08B,cAAc,CAACD,cAAct0C,CAAC,CAAA,EACvC6X,oBAAS08B,cAAc,CAACD,cAAct+B,CAAC,CAAA,EACvC,IAAI,CAAC83B,wBAAwB,CAAA,CAAA;AAE/B,QAAA,IAAI,CAAC+F,kBAAkB,CAAA,CAAA,CAAA,CAAA;AACzB,KAAA,CAAA;IAEA,MACQjF,CAAAA,4BAIP,GALD,SACQA,4BAAAA,GAAAA;QACN,IAAI,CAACgF,iBAAiB,CAACS,EAAAA,GAAAA,CAAAA,CAAAA,CAAAA;AACvB,QAAA,IAAI,CAACR,kBAAkB,CAAA,CAAA,CAAA,CAAA;AACvB,QAAA,IAAI,CAACzB,wBAAwB,EAAA,CAAA;AAC/B,KAAA,CAAA;IAEA,MACQvD,CAAAA,iCAWP,GAZD,SACQA,iCAAAA,GAAAA;QACN,IAAMyE,uBAAAA,GAA0B,IAAI,CAACxF,wBAAwB,CAAA;QAC7D,IAAM4E,MAAAA,GAAS,IAAI,CAACF,mBAAmB,EAAA,CAAA;AACvC,QAAA,IAAIE,MAAQ,EAAA;YACV,IAAM8B,mBAAAA,GAAsBlH,SAzyBrBA,CAyyB+B+C,UAAU,CAAA;AAChD3C,YAAAA,qBAAAA,CAAW2F,MAAM,CAACX,MAAOY,CAAAA,uBAAuB,EAAEkB,mBAAAA,CAAAA,CAAAA;AAClD9G,YAAAA,qBAAAA,CAAW+F,QAAQ,CAACe,mBAAAA,EAAqBlB,uBAAyB,EAAA,IAAI,CAAC7F,mBAAmB,CAAA,CAAA;SACrF,MAAA;AACL,YAAA,IAAI,CAACA,mBAAmB,CAAC/2C,QAAQ,CAAC48C,uBAAAA,CAAAA,CAAAA;AACpC,SAAA;AACA,QAAA,IAAI,CAACO,kBAAkB,CAAA,EAAA,CAAA,CAAA;AACzB,KAAA,CAAA;IAEA,MACQ/E,CAAAA,eAGP,GAJD,SACQA,eAAAA,GAAAA;AACN,QAAA,IAAI,CAAC8E,iBAAiB,CAAA,EAAA,CAAA,CAAA;AACtB,QAAA,IAAI,CAACtB,qBAAqB,EAAA,CAAA;AAC5B,KAAA,CAAA;AAtzBWhF,IAAAA,aAAAA,CAAAA,SAAAA,EAAAA;;YAmDPmH,GAAAA,EAAAA,UAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAAClH,SAAS,CAAA;AACvB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAa10C,KAAc,EAAA;AACzB,gBAAA,IAAI,IAAI,CAAC00C,SAAS,KAAK10C,KAAO,EAAA;AAC5B,oBAAA,IAAI,CAAC00C,SAAS,CAAC72C,QAAQ,CAACmC,KAAAA,CAAAA,CAAAA;AAC1B,iBAAA;AACF,aAAA;;;YAKI+3C,GAAAA,EAAAA,eAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,IAAMA,aAAAA,GAAgB,IAAI,CAAChD,cAAc,CAAA;gBACzC,IAAI,IAAI,CAAC+F,mBAAmB,CAAsC,CAAA,CAAA,EAAA;;AAEhE/C,oBAAAA,aAAAA,CAAcv7B,eAAe,GAAG,IAAA,CAAA;oBAChC,IAAI,IAAI,CAACm9B,mBAAmB,EAAI,EAAA;AAC9B,wBAAA,IAAI,CAACY,WAAW,CAACsB,cAAc,CAAC9D,aAAAA,CAAAA,CAAAA;qBAC3B,MAAA;AACLA,wBAAAA,aAAAA,CAAcl6C,QAAQ,CAAC,IAAI,CAAC62C,SAAS,CAAA,CAAA;AACvC,qBAAA;;AAEAqD,oBAAAA,aAAAA,CAAcv7B,eAAe,GAAG,IAAI,CAACo5B,uBAAuB,CAAA;AAC5D,oBAAA,IAAI,CAACoF,kBAAkB,CAAA,CAAA,CAAA,CAAA;AACzB,iBAAA;gBAEA,OAAOjD,aAAAA,CAAAA;AACT,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAkB/3C,KAAc,EAAA;AAC9B,gBAAA,IAAI,IAAI,CAAC+0C,cAAc,KAAK/0C,KAAO,EAAA;AACjC,oBAAA,IAAI,CAAC+0C,cAAc,CAACl3C,QAAQ,CAACmC,KAAAA,CAAAA,CAAAA;AAC/B,iBAAA;AACF,aAAA;;;YAMI87C,GAAAA,EAAAA,UAAAA;;;;MAAJ,SAAA,GAAA,GAAA;gBACE,IAAMA,QAAAA,GAAW,IAAI,CAACnH,SAAS,CAAA;gBAC/B,IAAI,IAAI,CAACmG,mBAAmB,CAAmC,CAAA,CAAA,EAAA;;AAE7DgB,oBAAAA,QAAAA,CAASt/B,eAAe,GAAG,IAAA,CAAA;AAC3B,oBAAA,IAAI,CAACo4B,mBAAmB,CAACmH,OAAO,CAACD,QAAAA,CAAAA,CAAAA;AACjCA,oBAAAA,QAAAA,CAAS5D,KAAK,CAACl5B,mBAASg9B,CAAAA,iBAAiB;;AAEzCF,oBAAAA,QAAAA,CAASt/B,eAAe,GAAG,IAAI,CAACq5B,kBAAkB,CAAA;AAClD,oBAAA,IAAI,CAACmF,kBAAkB,CAAA,CAAA,CAAA,CAAA;AACzB,iBAAA;gBAEA,OAAOc,QAAAA,CAAAA;AACT,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAa97C,KAAc,EAAA;AACzB,gBAAA,IAAI,IAAI,CAAC20C,SAAS,KAAK30C,KAAO,EAAA;AAC5B,oBAAA,IAAI,CAAC20C,SAAS,CAAC92C,QAAQ,CAACmC,KAAAA,CAAAA,CAAAA;AAC1B,iBAAA;AACF,aAAA;;;YAMIy7C,GAAAA,EAAAA,eAAAA;;;;MAAJ,SAAA,GAAA,GAAA;gBACE,IAAMA,aAAAA,GAAgB,IAAI,CAACzG,cAAc,CAAA;gBACzC,IAAI,IAAI,CAAC8F,mBAAmB,CAAmC,CAAA,CAAA,EAAA;;AAE7DW,oBAAAA,aAAAA,CAAcj/B,eAAe,GAAG,IAAA,CAAA;AAChC,oBAAA,IAAI,CAACi+B,uBAAuB,CAACsB,OAAO,CAACN,aAAAA,CAAAA,CAAAA;AACrCA,oBAAAA,aAAAA,CAAcvD,KAAK,CAACl5B,mBAASg9B,CAAAA,iBAAiB;;AAE9CP,oBAAAA,aAAAA,CAAcj/B,eAAe,GAAG,IAAI,CAACs5B,uBAAuB,CAAA;AAC5D,oBAAA,IAAI,CAACkF,kBAAkB,CAAA,CAAA,CAAA,CAAA;AACzB,iBAAA;gBACA,OAAOS,aAAAA,CAAAA;AACT,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAkBz7C,KAAc,EAAA;AAC9B,gBAAA,IAAI,IAAI,CAACg1C,cAAc,KAAKh1C,KAAO,EAAA;AACjC,oBAAA,IAAI,CAACg1C,cAAc,CAACn3C,QAAQ,CAACmC,KAAAA,CAAAA,CAAAA;AAC/B,iBAAA;AACF,aAAA;;;YAKI26C,GAAAA,EAAAA,oBAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,IAAMA,kBAAAA,GAAqB,IAAI,CAAC/F,mBAAmB,CAAA;gBACnD,IAAI,IAAI,CAACkG,mBAAmB,CAAkC,CAAA,CAAA,EAAA;;AAE5DH,oBAAAA,kBAAAA,CAAmBn+B,eAAe,GAAG,IAAA,CAAA;AACrCq4B,oBAAAA,qBAAAA,CAAWyG,aAAa,CACtBt8B,mBAAS08B,CAAAA,cAAc,CAAC,IAAI,CAAC/G,SAAS,CAACztC,CAAC,CACxC8X,EAAAA,mBAAAA,CAAS08B,cAAc,CAAC,IAAI,CAAC/G,SAAS,CAACxtC,CAAC,CAAA,EACxC6X,mBAAS08B,CAAAA,cAAc,CAAC,IAAI,CAAC/G,SAAS,CAACx3B,CAAC,CACxCw9B,EAAAA,kBAAAA,CAAAA,CAAAA;;AAGFA,oBAAAA,kBAAAA,CAAmBn+B,eAAe,GAAG,IAAI,CAACu5B,4BAA4B,CAAA;AACtE,oBAAA,IAAI,CAACiF,kBAAkB,CAAA,CAAA,CAAA,CAAA;AACzB,iBAAA;gBACA,OAAOL,kBAAAA,CAAAA;AACT,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAuB36C,KAAiB,EAAA;AACtC,gBAAA,IAAI,IAAI,CAAC40C,mBAAmB,KAAK50C,KAAO,EAAA;oBACtC,IAAIA,KAAAA,CAAMi8C,UAAU,EAAE;AACpB,wBAAA,IAAI,CAACrH,mBAAmB,CAAC/2C,QAAQ,CAACmC,KAAAA,CAAAA,CAAAA;qBAC7B,MAAA;AACL60C,wBAAAA,qBAAAA,CAAWqH,SAAS,CAACl8C,KAAO,EAAA,IAAI,CAAC40C,mBAAmB,CAAA,CAAA;AACtD,qBAAA;iBACK,MAAA;oBACL50C,KAAMi8C,CAAAA,UAAU,IAAIj8C,KAAAA,CAAMk8C,SAAS,EAAA,CAAA;AACrC,iBAAA;AACF,aAAA;;;YAKIzB,GAAAA,EAAAA,yBAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,IAAMA,uBAAAA,GAA0B,IAAI,CAACxF,wBAAwB,CAAA;gBAC7D,IAAI,IAAI,CAAC6F,mBAAmB,CAAkC,EAAA,CAAA,EAAA;;AAE5DL,oBAAAA,uBAAAA,CAAwBj+B,eAAe,GAAG,IAAA,CAAA;oBAC1C,IAAMq9B,MAAAA,GAAS,IAAI,CAACF,mBAAmB,EAAA,CAAA;AACvC,oBAAA,IAAIE,UAAU,IAAM,EAAA;wBAClBhF,qBAAW+F,CAAAA,QAAQ,CAACf,MAAOY,CAAAA,uBAAuB,EAAE,IAAI,CAACE,kBAAkB,EAAEF,uBAAAA,CAAAA,CAAAA;qBACxE,MAAA;AACLA,wBAAAA,uBAAAA,CAAwB58C,QAAQ,CAAC,IAAI,CAAC88C,kBAAkB,CAAA,CAAA;AAC1D,qBAAA;;AAEAF,oBAAAA,uBAAAA,CAAwBj+B,eAAe,GAAG,IAAI,CAACw5B,iCAAiC,CAAA;AAChF,oBAAA,IAAI,CAACgF,kBAAkB,CAAA,EAAA,CAAA,CAAA;AACzB,iBAAA;gBACA,OAAOP,uBAAAA,CAAAA;AACT,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAA4Bz6C,KAAiB,EAAA;AAC3C,gBAAA,IAAI,IAAI,CAACi1C,wBAAwB,KAAKj1C,KAAO,EAAA;oBAC3C,IAAIA,KAAAA,CAAMi8C,UAAU,EAAE;AACpB,wBAAA,IAAI,CAAChH,wBAAwB,CAACp3C,QAAQ,CAACmC,KAAAA,CAAAA,CAAAA;qBAClC,MAAA;AACL60C,wBAAAA,qBAAAA,CAAWqH,SAAS,CAACl8C,KAAO,EAAA,IAAI,CAACi1C,wBAAwB,CAAA,CAAA;AAC3D,qBAAA;AACF,iBAAA;gBACAj1C,KAAMi8C,CAAAA,UAAU,IAAIj8C,KAAAA,CAAMk8C,SAAS,EAAA,CAAA;AACrC,aAAA;;;YAKIhE,GAAAA,EAAAA,OAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACpD,MAAM,CAAA;AACpB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAU90C,KAAc,EAAA;AACtB,gBAAA,IAAI,IAAI,CAAC80C,MAAM,KAAK90C,KAAO,EAAA;AACzB,oBAAA,IAAI,CAAC80C,MAAM,CAACj3C,QAAQ,CAACmC,KAAAA,CAAAA,CAAAA;AACvB,iBAAA;AACF,aAAA;;;YAOI+4C,GAAAA,EAAAA,iBAAAA;;;;;MAAJ,SAAA,GAAA,GAAA;gBACE,IAAI,IAAI,CAAC+B,mBAAmB,CAAmC,EAAA,CAAA,EAAA;oBAC7D,IAAI,IAAI,CAACnB,mBAAmB,EAAI,EAAA;wBAC9B,IAAMwC,QAAAA,GAAW,IAAI,CAACrC,eAAe,EAAA,CAAA;wBACrC,IAAMltB,CAAAA,GAAIuvB,SAASxmC,QAAQ,CAAA;AAC3B,wBAAA,IAAI,CAACu/B,gBAAgB,CAACx5C,GAAG,CAACkxB,CAAC,CAAC,CAAE,CAAA,EAAEA,CAAC,CAAC,CAAA,CAAE,EAAEA,CAAC,CAAC,CAAE,CAAA,CAAA,CAAA;qBACrC,MAAA;AACL,wBAAA,IAAI,CAACsoB,gBAAgB,CAACr3C,QAAQ,CAAC,IAAI,CAACi3C,MAAM,CAAA,CAAA;AAC5C,qBAAA;AACA,oBAAA,IAAI,CAACkG,kBAAkB,CAAA,EAAA,CAAA,CAAA;AACzB,iBAAA;gBACA,OAAO,IAAI,CAAC9F,gBAAgB,CAAA;AAC9B,aAAA;;;YAMIkH,GAAAA,EAAAA,aAAAA;;;;MAAJ,SAAA,GAAA,GAAA;gBACE,IAAI,IAAI,CAACtB,mBAAmB,CAAoC,EAAA,CAAA,EAAA;AAC9DxM,oBAAAA,iBAAAA,CAAO+N,oBAAoB,CAAC,IAAI,CAACvH,MAAM,EAAE,IAAI,CAAC6F,kBAAkB,EAAE,IAAI,CAACjG,SAAS,EAAE,IAAI,CAACS,YAAY,CAAA,CAAA;AACnG,oBAAA,IAAI,CAAC6F,kBAAkB,CAAA,EAAA,CAAA,CAAA;AACzB,iBAAA;gBACA,OAAO,IAAI,CAAC7F,YAAY,CAAA;AAC1B,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAgBn1C,KAAa,EAAA;AAC3B,gBAAA,IAAI,IAAI,CAACm1C,YAAY,KAAKn1C,KAAO,EAAA;AAC/B,oBAAA,IAAI,CAACm1C,YAAY,CAACt3C,QAAQ,CAACmC,KAAAA,CAAAA,CAAAA;AAC7B,iBAAA;;AAGA,gBAAA,IAAI,CAAC00C,SAAS,CAACl4B,eAAe,GAAG,IAAI,CAACo4B,mBAAmB,CAACp4B,eAAe,GAAG,IAAI,CAACs4B,MAAM,CAACt4B,eAAe,GAAG,IAAA,CAAA;AAC1G,gBAAA,IAAI,CAAC24B,YAAY,CAACmH,SAAS,CAAC,IAAI,CAAC5H,SAAS,EAAE,IAAI,CAACE,mBAAmB,EAAE,IAAI,CAACE,MAAM,CAAA,CAAA;;AAEjF,gBAAA,IAAI,CAACJ,SAAS,CAACl4B,eAAe,GAAG,IAAI,CAACm5B,kBAAkB,CAAA;;AAExD,gBAAA,IAAI,CAACf,mBAAmB,CAACp4B,eAAe,GAAG,IAAI,CAACu5B,4BAA4B,CAAA;;AAE5E,gBAAA,IAAI,CAACjB,MAAM,CAACt4B,eAAe,GAAG,IAAI,CAACy5B,eAAe,CAAA;AAElD,gBAAA,IAAI,CAAC8E,iBAAiB,CAAA,CAAA,CAAA,CAAA;gBACtB,IAAI,CAACC,kBAAkB,CAACQ,EAAAA,GAAAA,CAAAA,CAAAA,CAAAA;AACxB,gBAAA,IAAI,CAAC3C,mBAAmB,EAAA,CAAA;AAC1B,aAAA;;;YAMI0B,GAAAA,EAAAA,aAAAA;;;;MAAJ,SAAA,GAAA,GAAA;gBACE,IAAI,IAAI,CAACO,mBAAmB,CAAoC,GAAA,CAAA,EAAA;oBAC9D,IAAMjB,MAAAA,GAAS,IAAI,CAACF,mBAAmB,EAAA,CAAA;AACvC,oBAAA,IAAIE,MAAQ,EAAA;wBACVvL,iBAAOsM,CAAAA,QAAQ,CAACf,MAAAA,CAAOU,WAAW,EAAE,IAAI,CAAC6B,WAAW,EAAE,IAAI,CAAChH,YAAY,CAAA,CAAA;qBAClE,MAAA;AACL,wBAAA,IAAI,CAACA,YAAY,CAACv3C,QAAQ,CAAC,IAAI,CAACu+C,WAAW,CAAA,CAAA;AAC7C,qBAAA;AACA,oBAAA,IAAI,CAACpB,kBAAkB,CAAA,GAAA,CAAA,CAAA;AACzB,iBAAA;gBACA,OAAO,IAAI,CAAC5F,YAAY,CAAA;AAC1B,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAgBp1C,KAAa,EAAA;AAC3B,gBAAA,IAAI,IAAI,CAACo1C,YAAY,KAAKp1C,KAAO,EAAA;AAC/B,oBAAA,IAAI,CAACo1C,YAAY,CAACv3C,QAAQ,CAACmC,KAAAA,CAAAA,CAAAA;AAC7B,iBAAA;gBACA,IAAM65C,MAAAA,GAAS,IAAI,CAACF,mBAAmB,EAAA,CAAA;AACvC,gBAAA,IAAIE,MAAQ,EAAA;AACVvL,oBAAAA,iBAAAA,CAAOkM,MAAM,CAACX,MAAAA,CAAOU,WAAW,EAjSzB9F,UAiSqC8H,UAAU,CAAA,CAAA;oBACtDjO,iBAAOsM,CAAAA,QAAQ,CAACnG,SAlSTA,CAkSmB8H,UAAU,EAAEv8C,KAAAA,EAAO,IAAI,CAACm1C,YAAY,CAAA,CAAA;iBACzD,MAAA;AACL,oBAAA,IAAI,CAACA,YAAY,CAACt3C,QAAQ,CAACmC,KAAAA,CAAAA,CAAAA;AAC7B,iBAAA;AACA,gBAAA,IAAI,CAACo8C,WAAW,GAAG,IAAI,CAACjH,YAAY,CAAA;AACpC,gBAAA,IAAI,CAAC6F,kBAAkB,CAAA,GAAA,CAAA,CAAA;AACzB,aAAA;;;YA4GIwB,GAAAA,EAAAA,cAAAA;;;MAAJ,SAAA,GAAA,GAAA;AACE,gBAAA,IAAMA,eAAgB,IAAI,CAACnH,kBAAL,IAAI,CAACA,gBAAkB,IAAI3e,kBAAAA,EAAAA,CAAAA,CAAAA;AACjD,gBAAA,IAAM9J,CAAI,GAAA,IAAI,CAAC2tB,WAAW,CAAC5kC,QAAQ,CAAA;AACnC6mC,gBAAAA,YAAAA,CAAa9gD,GAAG,CAAC,CAACkxB,CAAC,CAAC,CAAE,CAAA,EAAE,CAACA,CAAC,CAAC,CAAE,CAAA,EAAE,CAACA,CAAC,CAAC,EAAG,CAAA,CAAA,CAAA;AACrC,gBAAA,OAAO4vB,aAAaN,SAAS,EAAA,CAAA;AAC/B,aAAA;;;YAKIO,GAAAA,EAAAA,YAAAA;;;MAAJ,SAAA,GAAA,GAAA;AACE,gBAAA,IAAMA,aAAc,IAAI,CAACnH,gBAAL,IAAI,CAACA,cAAgB,IAAI5e,kBAAAA,EAAAA,CAAAA,CAAAA;AAC7C,gBAAA,IAAM9J,CAAI,GAAA,IAAI,CAAC2tB,WAAW,CAAC5kC,QAAQ,CAAA;AACnC8mC,gBAAAA,UAAAA,CAAW/gD,GAAG,CAACkxB,CAAC,CAAC,CAAE,CAAA,EAAEA,CAAC,CAAC,CAAE,CAAA,EAAEA,CAAC,CAAC,CAAE,CAAA,CAAA,CAAA;AAC/B,gBAAA,OAAO6vB,WAAWP,SAAS,EAAA,CAAA;AAC7B,aAAA;;;YAKItE,GAAAA,EAAAA,SAAAA;;;MAAJ,SAAA,GAAA,GAAA;AACE,gBAAA,IAAMA,UAAW,IAAI,CAACrC,aAAL,IAAI,CAACA,WAAa,IAAI7e,kBAAAA,EAAAA,CAAAA,CAAAA;AACvC,gBAAA,IAAM9J,CAAI,GAAA,IAAI,CAAC2tB,WAAW,CAAC5kC,QAAQ,CAAA;AACnCiiC,gBAAAA,OAAAA,CAAQl8C,GAAG,CAACkxB,CAAC,CAAC,CAAE,CAAA,EAAEA,CAAC,CAAC,CAAE,CAAA,EAAEA,CAAC,CAAC,CAAE,CAAA,CAAA,CAAA;AAC5B,gBAAA,OAAOgrB,QAAQsE,SAAS,EAAA,CAAA;AAC1B,aAAA;;;AA7aWzH,IAAAA,OAAAA,SAAAA,CAAAA;EAAkB/C,SAuzB9B,EAAA;AAvzBY+C,SAAAA,CACI+C,aAAyB,IAAI3C,qBAAAA,EAAAA,CAAAA;AADjCJ,SAAAA,CAEIoC,aAAsB,IAAIngB,kBAAAA,EAAAA,CAAAA;AAF9B+d,SAAAA,CAGI2D,aAAsB,IAAI1hB,kBAAAA,EAAAA,CAAAA;AAH9B+d,SAAAA,CAII8D,aAAsB,IAAI7hB,kBAAAA,EAAAA,CAAAA;AAJ9B+d,SAAAA,CAKIwF,aAAwB,IAAIS,oBAAAA,EAAAA,CAAAA;AALhCjG,SAAAA,CAMI0F,aAAwB,IAAIO,oBAAAA,EAAAA,CAAAA;AANhCjG,SAAAA,CAOI4F,aAAwB,IAAIK,oBAAAA,EAAAA,CAAAA;AAPhCjG,SAAAA,CAQIgE,aAAqB,IAAInK,iBAAAA,EAAAA,CAAAA;AAR7BmG,SAAAA,CASI8H,aAAqB,IAAIjO,iBAAAA,EAAAA,CAAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgzB1C;;IAGO,IAAKkN,oBAAAA,iBAAAA,SAAAA,oBAAAA,EAAAA;;;;;;;;;uCAUsB,oBAAA,CAAA,oBAAA,CAAA,MAAA,CAAA,GAAA,GAAA,CAAA,GAAA,MAAA,CAAA;gDAES,oBAAA,CAAA,oBAAA,CAAA,QAAA,CAAA,GAAA,GAAA,CAAA,GAAA,QAAA,CAAA;gEAEgB,oBAAA,CAAA,oBAAA,CAAA,UAAA,CAAA,GAAA,GAAA,CAAA,GAAA,UAAA,CAAA;oCAE5B,oBAAA,CAAA,oBAAA,CAAA,MAAA,CAAA,GAAA,GAAA,CAAA,GAAA,MAAA,CAAA;oDAEgB,oBAAA,CAAA,oBAAA,CAAA,QAAA,CAAA,GAAA,GAAA,CAAA,GAAA,QAAA,CAAA;6EAEyB,oBAAA,CAAA,oBAAA,CAAA,YAAA,CAAA,GAAA,GAAA,CAAA,GAAA,YAAA,CAAA;AApB5DA,IAAAA,OAAAA,oBAAAA,CAAAA;AAsBX,CAAA,CAAA,EAAA,CAAA;;AC51BD;;IAGO,IAAKkB,eAAAA,iBAAAA,SAAAA,eAAAA,EAAAA;yBACQ,eAAA,CAAA,eAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;yBAEA,eAAA,CAAA,eAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;yBAEA,eAAA,CAAA,eAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;yBAEA,eAAA,CAAA,eAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;yBAEA,eAAA,CAAA,eAAA,CAAA,QAAA,CAAA,GAAA,EAAA,CAAA,GAAA,QAAA,CAAA;yBAEA,eAAA,CAAA,eAAA,CAAA,QAAA,CAAA,GAAA,EAAA,CAAA,GAAA,QAAA,CAAA;yBAEA,eAAA,CAAA,eAAA,CAAA,QAAA,CAAA,GAAA,EAAA,CAAA,GAAA,QAAA,CAAA;yBAEA,eAAA,CAAA,eAAA,CAAA,QAAA,CAAA,GAAA,GAAA,CAAA,GAAA,QAAA,CAAA;yBAEA,eAAA,CAAA,eAAA,CAAA,QAAA,CAAA,GAAA,GAAA,CAAA,GAAA,QAAA,CAAA;yBAEA,eAAA,CAAA,eAAA,CAAA,QAAA,CAAA,GAAA,GAAA,CAAA,GAAA,QAAA,CAAA;0BAEC,eAAA,CAAA,eAAA,CAAA,SAAA,CAAA,GAAA,IAAA,CAAA,GAAA,SAAA,CAAA;0BAEA,eAAA,CAAA,eAAA,CAAA,SAAA,CAAA,GAAA,IAAA,CAAA,GAAA,SAAA,CAAA;0BAEA,eAAA,CAAA,eAAA,CAAA,SAAA,CAAA,GAAA,IAAA,CAAA,GAAA,SAAA,CAAA;0BAEA,eAAA,CAAA,eAAA,CAAA,SAAA,CAAA,GAAA,IAAA,CAAA,GAAA,SAAA,CAAA;0BAEA,eAAA,CAAA,eAAA,CAAA,SAAA,CAAA,GAAA,KAAA,CAAA,GAAA,SAAA,CAAA;0BAEA,eAAA,CAAA,eAAA,CAAA,SAAA,CAAA,GAAA,KAAA,CAAA,GAAA,SAAA,CAAA;0BAEA,eAAA,CAAA,eAAA,CAAA,SAAA,CAAA,GAAA,KAAA,CAAA,GAAA,SAAA,CAAA;0BAEA,eAAA,CAAA,eAAA,CAAA,SAAA,CAAA,GAAA,MAAA,CAAA,GAAA,SAAA,CAAA;0BAEA,eAAA,CAAA,eAAA,CAAA,SAAA,CAAA,GAAA,MAAA,CAAA,GAAA,SAAA,CAAA;0BAEA,eAAA,CAAA,eAAA,CAAA,SAAA,CAAA,GAAA,MAAA,CAAA,GAAA,SAAA,CAAA;0BAEA,eAAA,CAAA,eAAA,CAAA,SAAA,CAAA,GAAA,OAAA,CAAA,GAAA,SAAA,CAAA;0BAEA,eAAA,CAAA,eAAA,CAAA,SAAA,CAAA,GAAA,OAAA,CAAA,GAAA,SAAA,CAAA;0BAEA,eAAA,CAAA,eAAA,CAAA,SAAA,CAAA,GAAA,OAAA,CAAA,GAAA,SAAA,CAAA;0BAEA,eAAA,CAAA,eAAA,CAAA,SAAA,CAAA,GAAA,OAAA,CAAA,GAAA,SAAA,CAAA;0BAEA,eAAA,CAAA,eAAA,CAAA,SAAA,CAAA,GAAA,QAAA,CAAA,GAAA,SAAA,CAAA;0BAEA,eAAA,CAAA,eAAA,CAAA,SAAA,CAAA,GAAA,QAAA,CAAA,GAAA,SAAA,CAAA;0BAEA,eAAA,CAAA,eAAA,CAAA,SAAA,CAAA,GAAA,QAAA,CAAA,GAAA,SAAA,CAAA;0BAEA,eAAA,CAAA,eAAA,CAAA,SAAA,CAAA,GAAA,SAAA,CAAA,GAAA,SAAA,CAAA;0BAEA,eAAA,CAAA,eAAA,CAAA,SAAA,CAAA,GAAA,SAAA,CAAA,GAAA,SAAA,CAAA;0BAEA,eAAA,CAAA,eAAA,CAAA,SAAA,CAAA,GAAA,SAAA,CAAA,GAAA,SAAA,CAAA;0BAEA,eAAA,CAAA,eAAA,CAAA,SAAA,CAAA,GAAA,UAAA,CAAA,GAAA,SAAA,CAAA;0BAEA,eAAA,CAAA,eAAA,CAAA,SAAA,CAAA,GAAA,UAAA,CAAA,GAAA,SAAA,CAAA;4BAEE,eAAA,CAAA,eAAA,CAAA,YAAA,CAAA,GAAA,UAAA,CAAA,GAAA,YAAA,CAAA;4BAEA,eAAA,CAAA,eAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA;AAnEXA,IAAAA,OAAAA,eAAAA,CAAAA;AAqEX,CAAA,CAAA,EAAA;;ACxED;AAuBOtoB,gBAAA,iBAAA,SAAA,SAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,QAAAA,EAAAA,SAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,QAAAA,CA8ICud,MAAc,EAAA;;AACxB,QAAA,KAAA,GAAA,SAAA,CAAA,IAAA,CAAA,IAAA,EAAMA,MAhIR,CAAA,IAAA,IAAA,mBAEAgL,KAAAA,CAAAA,cAAAA,GAAyB,CAAC,CAC1B,mBAEAC,KAAAA,CAAAA,cAAAA,GAAyB,CAAC,CAC1B,mBAEAC,KAAAA,CAAAA,kBAAAA,GAA4C,IAAIx7B,qBAChD,EAAA,mBAEA5F,KAAAA,CAAAA,OAAAA,GAAuB,IAAIC,sBAG3B,EAAA,mBAEAohC,KAAAA,CAAAA,gBAAAA,GAA0CtqC,sBAAsBg+B,IAAI,mBACtD,KAAA,CAEduM,aAA8BL,eAAgBM,CAAAA,MAAM,yBAGpDC,2BAAuC,GAAA,KAAA,EAAA,KAAA,CAG7BC,eAA2B,GAAA,KAAA,EAAA,KAAA,CAE3BC,UAAyB,GAAA,EAAE,EAE3BhhC,KAAAA,CAAAA,gBAAAA,GAA2B,SAE3BihC,cAA0B,GAAA,IAAInjD,kBAKhCojD,EAAAA,EAAAA,KAAAA,CAAAA,WAAAA,GAA0B,IAAIrQ,UAAWzb,CAAAA,eAAAA,CAAgB6C,QAAQ,CAAA,EAAA,KAAA,CAEjEkpB,YAAoB,IAAIhP,iBAAAA,EAAAA,EAAAA,KAAAA,CAExBiP,UAAqB,GAAA,IAAIjP,2BAEzBkP,YAAuB,GAAA,IAAIlP,iBAE3BmP,EAAAA,EAAAA,KAAAA,CAAAA,aAAAA,GAAwB,IAAInP,iBAE5BoP,EAAAA,EAAAA,KAAAA,CAAAA,mBAAAA,GAAiC,EAAE,EAAA,KAAA,CAEnCC,YAAoB,CAEpBC,EAAAA,KAAAA,CAAAA,eAAAA,GAA2B,IAkCnC,oCACAC,WAAuB,GAAA,IAAA,CAAA;QA4CrB,IAAMC,SAAAA,GAAY1pB,QAhJTA,CAgJkB0pB,SAAS,CAAA;QACpC,IAAM/3B,UAAAA,GAAa,MAAKA,UAAU,CAAA;AAClC,QAAA,KAAA,CAAKm3B,eAAe,GAAG,KAAA,CAAKa,MAAM,KAAKD,UAAUC,MAAM,CAAA;AAEvD,QAAA,KAAA,CAAKpL,sBAAsB,CAAC,KAAK5sB,CAAAA,UAAU,EAAE,CAAA,CAAA,CAAA;AAE7C,QAAA,KAAA,CAAKi4B,mBAAmB,GAAG,KAAKA,CAAAA,mBAAmB,CAACv8C,IAAI,CAAA,KAAA,CAAA,CAAA;QACxD,KAAKw8C,CAAAA,aAAa,CAACtM,MAAAA,CAAO2H,SAAS,CAAA,CAAA;AAEnCvzB,QAAAA,UAAAA,CAAW+oB,WAAW,CAAC1a,QAzJdA,CAyJuB8pB,mBAAmB,CAAA,CAAA;AACnDn4B,QAAAA,UAAAA,CAAWM,UAAU,CA1JZ+N,SA0JsB+pB,sBAAsB,EAAE,MAAKf,cAAc,CAAA,CAAA;;;AA1JjEhpB,IAAAA,IAAAA,MAAAA,GAAAA,QAAAA,CAAAA,SAAAA,CAAAA;AA2KXgqB,IAAAA,MAAAA,CAAAA,mBAaC,GAbDA,SAAAA,mBAAAA,CAAoBz+C,KAAiB,EAAA;AAAjBA,QAAAA,IAAAA,kBAAAA,KAAgB,GAAA,CAAA,CAAA;QAClC,IAAM0+C,SAAAA,GAAY,IAAI,CAAClB,UAAU,CAAA;QACjC,IAAIkB,SAAAA,CAAU9gD,MAAM,GAAGoC,KAAO,EAAA;YAC5B,IAAM+wC,QAAAA,GAAW2N,SAAS,CAAC1+C,KAAM,CAAA,CAAA;AACjC,YAAA,IAAI+wC,QAAU,EAAA;AACZ,gBAAA,IAAI,IAAI,CAACgN,mBAAmB,CAAC/9C,MAAM,EAAE;oBACnC,OAAO+wC,QAAAA,CAAAA;iBACF,MAAA;AACL,oBAAA,OAAO,IAAI,CAAC4N,uBAAuB,CAAC5N,QAAU/wC,EAAAA,KAAAA,CAAAA,CAAAA;AAChD,iBAAA;AACF,aAAA;AACF,SAAA;QACA,OAAO,IAAA,CAAA;AACT,KAAA,CAAA;AAeA4+C,IAAAA,MAAAA,CAAAA,WAEC,GAFDA,SAAAA,WAAAA,CAAY5+C,KAAiB,EAAA;AAAjBA,QAAAA,IAAAA,kBAAAA,KAAgB,GAAA,CAAA,CAAA;AAC1B,QAAA,OAAO,IAAI,CAACw9C,UAAU,CAACx9C,MAAM,IAAI,IAAA,CAAA;AACnC,KAAA,CAAA;AAeA6+C,IAAAA,MAAAA,CAAAA,WAMC,GANDA,SAAAA,WAAYC,CAAAA,eAAkC,EAAE/N,QAAyB,EAAA;AAAzBA,QAAAA,IAAAA,qBAAAA,QAAqB,GAAA,IAAA,CAAA;QACnE,IAAI,OAAO+N,oBAAoB,QAAU,EAAA;YACvC,IAAI,CAACC,YAAY,CAACD,eAAiB/N,EAAAA,QAAAA,CAAAA,CAAAA;SAC9B,MAAA;YACL,IAAI,CAACgO,YAAY,CAAC,CAAGD,EAAAA,eAAAA,CAAAA,CAAAA;AACvB,SAAA;AACF,KAAA,CAAA;AAEA;;;;MAKAE,MAAAA,CAAAA,oBASC,GATDA,SAAAA,oBAAAA,GAAAA;QACE,IAAMN,SAAAA,GAAY,IAAI,CAAClB,UAAU,CAAA;QACjC,IAAMyB,iBAAAA,GAAoB,IAAI,CAAClB,mBAAmB,CAAA;QAClD,IAAK,IAAI//C,IAAI,CAAG0B,EAAAA,CAAAA,GAAIg/C,UAAU9gD,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;AAChD,YAAA,IAAI,CAACihD,iBAAiB,CAACjhD,CAAAA,CAAE,EAAE;gBACzB,IAAI,CAAC2gD,uBAAuB,CAAC,IAAI,CAACnB,UAAU,CAACx/C,EAAE,EAAEA,CAAAA,CAAAA,CAAAA;AACnD,aAAA;AACF,SAAA;QACA,OAAO0gD,SAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;MAIAQ,MAAAA,CAAAA,YAEC,GAFDA,SAAAA,YAAAA,GAAAA;QACE,OAAO,IAAI,CAAC1B,UAAU,CAAA;AACxB,KAAA,CAAA;AAEA;;;AAGC,MACD2B,MAAAA,CAAAA,YAsBC,GAtBDA,SAAAA,aAAaT,SAAqB,EAAA;QAChC,IAAMn7B,KAAAA,GAAQm7B,UAAU9gD,MAAM,CAAA;QAC9B,IAAMwhD,iBAAAA,GAAoB,IAAI,CAAC5B,UAAU,CAAA;QACzC,IAAM6B,kBAAAA,GAAqB,IAAI,CAACtB,mBAAmB,CAAA;QAEnD,IAAK,IAAI//C,IAAIulB,KAAO7jB,EAAAA,CAAAA,GAAI0/C,kBAAkBxhD,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;YAC5D,IAAMshD,gBAAAA,GAAmBF,iBAAiB,CAACphD,CAAE,CAAA,CAAA;AAC7CshD,YAAAA,gBAAAA,IAAoB,IAAI,CAACtM,sBAAsB,CAACsM,kBAAkB,CAAC,CAAA,CAAA,CAAA;AACrE,SAAA;AAEAF,QAAAA,iBAAAA,CAAkBxhD,MAAM,KAAK2lB,KAAAA,KAAU67B,iBAAkBxhD,CAAAA,MAAM,GAAG2lB,KAAI,CAAA,CAAA;AACtE87B,QAAAA,kBAAAA,CAAmBzhD,MAAM,KAAK,CAAA,KAAMyhD,kBAAmBzhD,CAAAA,MAAM,GAAG,CAAA,CAAA,CAAA;AAEhE,QAAA,IAAK,IAAII,EAAAA,GAAI,CAAGA,EAAAA,EAAAA,GAAIulB,OAAOvlB,EAAK,EAAA,CAAA;YAC9B,IAAMshD,iBAAAA,GAAmBF,iBAAiB,CAACphD,EAAE,CAAA,CAAA;YAC7C,IAAM+yC,QAAAA,GAAW2N,SAAS,CAAC1gD,EAAE,CAAA,CAAA;AAC7B,YAAA,IAAIshD,sBAAqBvO,QAAU,EAAA;gBACjCqO,iBAAiB,CAACphD,GAAE,GAAG+yC,QAAAA,CAAAA;AACvBuO,gBAAAA,iBAAAA,IAAoB,IAAI,CAACtM,sBAAsB,CAACsM,mBAAkB,CAAC,CAAA,CAAA,CAAA;AACnEvO,gBAAAA,QAAAA,IAAY,IAAI,CAACiC,sBAAsB,CAACjC,QAAU,EAAA,CAAA,CAAA,CAAA;AACpD,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AAEAqN,IAAAA,MAAAA,CAAAA,MAAkC,GAAlCA,SAAAA,MAAAA,CAAOl4B,SAAiB,EAAS,EAAA,CAAA;AAEjC;;MAGA,MAAA,CAASusB,gBAMR,GAND,SAASA,gBAAAA,GAAAA;AACP,QAAA,IAAM8M,iBAAoB,GAAA,IAAI,CAACnM,KAAK,CAACoM,kBAAkB,CAAA;QACvD,IAAI,IAAI,CAACjC,eAAe,EAAE;YACxBgC,iBAAkBE,CAAAA,oBAAoB,CAAC,IAAI,CAAA,CAAA;AAC7C,SAAA;QACAF,iBAAkBG,CAAAA,WAAW,CAAC,IAAI,CAAA,CAAA;AACpC,KAAA,CAAA;AAEA;;MAGA,MAAA,CAAShN,iBAMR,GAND,SAASA,iBAAAA,GAAAA;AACP,QAAA,IAAM6M,iBAAoB,GAAA,IAAI,CAACnM,KAAK,CAACoM,kBAAkB,CAAA;QACvD,IAAI,IAAI,CAACjC,eAAe,EAAE;YACxBgC,iBAAkBI,CAAAA,uBAAuB,CAAC,IAAI,CAAA,CAAA;AAChD,SAAA;QACAJ,iBAAkBK,CAAAA,cAAc,CAAC,IAAI,CAAA,CAAA;AACvC,KAAA,CAAA;AAEA;;AAEC,MACDC,MAAAA,CAAAA,cAwBC,GAxBDA,SAAAA,eAAe10C,OAAsB,EAAA;QACnC,IAAI,IAAI,CAAC20C,iBAAiB,KAAK,IAAI,CAACvhD,MAAM,CAACgoB,IAAI,CAACM,UAAU,EAAE;YAC1D,IAAI,CAACd,OAAO,CAAC5a,OAAAA,CAAAA,CAAAA;AACf,SAAA;QAEA,IAAM40C,aAAAA,GAAgB50C,QAAQ40C,aAAa,CAAA;QAC3C,IAAMC,cAAAA,GAAiBD,cAAc9D,QAAQ,CAAA;QAC7C,IAAMgE,YAAAA,GAAe,IAAI,CAACC,MAAM,CAACC,SAAS,CAAC1rB,QAtTlCA,CAsT2C2rB,YAAY,CAAA,CAAA;QAEhE,IAAIL,aAAAA,CAAcM,cAAc,EAAE;YAChCtpB,kBAAQohB,CAAAA,QAAQ,CAAC8H,YAAAA,EAAcD,cAAgBC,EAAAA,YAAAA,CAAAA,CAAAA;YAC/C,IAAI,CAACK,gBAAgB,GAAGvpB,kBAAAA,CAAQwpB,GAAG,CAACN,YAAAA,EAAcF,cAAcS,OAAO,CAAA,CAAA;SAClE,MAAA;AACL,YAAA,IAAI,CAACF,gBAAgB,GAAGvpB,kBAAQ0pB,CAAAA,eAAe,CAACR,YAAcD,EAAAA,cAAAA,CAAAA,CAAAA;AAChE,SAAA;QAEA,IAAI,CAACU,OAAO,CAACv1C,OAAAA,CAAAA,CAAAA;;AAGbuW,QAAAA,qBAAAA,CAAsBI,eAAe,CACnC3W,OAAQw1C,CAAAA,MAAM,CAACzD,kBAAkB,EACjC,IAAI,CAAC92B,UAAU,CAACknB,gBAAgB,EAChC,IAAI,CAAC4P,kBAAkB,CAAA,CAAA;AAE3B,KAAA,CAAA;AAEA;;MAGA/+C,MAAAA,CAAAA,QAKC,GALDA,SAAAA,SAAStD,MAAgB,EAAEiC,OAAe,EAAEC,UAAkB,EAAA;QAC5D,IAAM2hD,SAAAA,GAAY,IAAI,CAAClB,UAAU,CAAA;QACjC,IAAK,IAAIx/C,IAAI,CAAG0B,EAAAA,CAAAA,GAAIg/C,UAAU9gD,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;AAChDnD,YAAAA,MAAAA,CAAOkkD,YAAY,CAAC/gD,CAAG0gD,EAAAA,SAAS,CAAC1gD,CAAE,CAAA,CAAA,CAAA;AACrC,SAAA;AACF,KAAA,CAAA;AAEA;;MAGA,MAAA,CAAmBa,UAuBlB,GAvBD,SAAmBA,UAAAA,GAAAA;AACjB,QAAA,SAAA,CAAA,SAAA,CAAMA,UAAD,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;QAEL,IAAI,CAACy/C,aAAa,CAAC,IAAA,CAAA,CAAA;AACnB,QAAA,IAAI,CAACtL,sBAAsB,CAAC,IAAI,CAAC5sB,UAAU,EAAE,CAAC,CAAA,CAAA,CAAA;QAE9C,IAAMs4B,SAAAA,GAAY,IAAI,CAAClB,UAAU,CAAA;QACjC,IAAK,IAAIx/C,IAAI,CAAG0B,EAAAA,CAAAA,GAAIg/C,UAAU9gD,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;YAChD,IAAM+yC,QAAAA,GAAW2N,SAAS,CAAC1gD,CAAE,CAAA,CAAA;AAC7B+yC,YAAAA,QAAAA,IAAY,IAAI,CAACiC,sBAAsB,CAACjC,UAAU,CAAC,CAAA,CAAA,CAAA;AACrD,SAAA;QAEA,IAAI,CAACsB,OAAO,GAAG,IAAA,CAAA;QACf,IAAI,CAAC6K,kBAAkB,GAAG,IAAA,CAAA;QAC1B,IAAI,CAACphC,OAAO,GAAG,IAAA,CAAA;QACf,IAAI,CAAC0hC,UAAU,GAAG,IAAA,CAAA;QAClB,IAAI,CAACE,WAAW,GAAG,IAAA,CAAA;QACnB,IAAI,CAACC,SAAS,GAAG,IAAA,CAAA;QACjB,IAAI,CAACC,UAAU,GAAG,IAAA,CAAA;QAClB,IAAI,CAACC,YAAY,GAAG,IAAA,CAAA;QACpB,IAAI,CAACC,aAAa,GAAG,IAAA,CAAA;QACrB,IAAI,CAACC,mBAAmB,GAAG,IAAA,CAAA;QAC3B,IAAI,CAACN,cAAc,GAAG,IAAA,CAAA;AACxB,KAAA,CAAA;AAEA;;MAGAmD,MAAAA,CAAAA,0BAOC,GAPDA,SAAAA,2BAA2Bz1C,OAAsB,EAAE01C,OAAgB,EAAEC,OAAgB,EAAA;AACnF,QAAA,IAAMlG,WAAc,GAAA,IAAI,CAACmG,UAAU,CAACnG,WAAW,CAAA;AAC/C,QAAA,IAAIiG,OAAS,EAAA;AACX,YAAA,IAAI,CAACG,kCAAkC,CAAC71C,OAAAA,EAASyvC,WAAakG,EAAAA,OAAAA,CAAAA,CAAAA;SACzD,MAAA;AACL,YAAA,IAAI,CAACG,iCAAiC,CAAC91C,OAAAA,EAASyvC,WAAakG,EAAAA,OAAAA,CAAAA,CAAAA;AAC/D,SAAA;AACF,KAAA,CAAA;AAEA;;AAEC,MACDI,OAAAA,SAEC,GAFDA,SAAAA,SAAUhR,CAAAA,QAA0B,EAAEC,QAA0B,EAAA;QAC9D,OAAO,KAAA,CAAA;AACT,KAAA,CAAA;AAEA;;MAGAgR,MAAAA,CAAAA,MAAwE,GAAxEA,SAAAA,OAAOjR,QAA0B,EAAEC,QAA2B,EAAS,EAAA,CAAA;AAEvE;;AAEC,MACD,MAAUpqB,CAAAA,OAGT,GAHD,SAAUA,QAAQ5a,OAAsB,EAAA;AACtC,QAAA,IAAM,KAAEi2C,GAAU,IAAI,CAACpP,MAAM,CAArBoP,KAAAA,CAAAA;QACR,IAAI,CAAC3D,cAAc,CAAC1hD,GAAG,CAACqlD,KAAQ,GAAA,KAAA,EAAO,KAACA,KAAU,EAAM,GAAA,KAAA,EAAO,CAAG,EAAA,CAAA,CAAA,CAAA;AACpE,KAAA,CAAA;IAEA,MAAUH,CAAAA,iCA8BT,GA9BD,SAAUA,iCAAAA,CAAkC91C,OAAsB,EAAEyvC,WAAmB,EAAEkG,OAAgB,EAAA;QACvG,IAAkD,KAAA,GAAA,IAAI,EAA9C16B,UAAAA,GAA0C,MAA1CA,UAAYy3B,EAAcwD,cAAgB,KAA9BxD,CAAAA,YAAAA,CAAAA;AACpB,QAAA,IAAIiD,OAAS,EAAA;;YAEX,IAAMQ,cAAAA,GAAiB3S,kBAAO4S,SAAS,CAAA;AAEvC5S,YAAAA,iBAAAA,CAAOkM,MAAM,CAAC1vC,OAAQq2C,CAAAA,UAAU,EAAEH,WAAAA,CAAAA,CAAAA;AAElCj7B,YAAAA,UAAAA,CAAWsoB,SAAS,CAACja,QAvZdA,CAuZuBgtB,oBAAoB,EAAEH,cAAAA,CAAAA,CAAAA;AACpDl7B,YAAAA,UAAAA,CAAWsoB,SAAS,CAACja,QAxZdA,CAwZuBitB,oBAAoB,EAAEJ,cAAAA,CAAAA,CAAAA;AACpDl7B,YAAAA,UAAAA,CAAWsoB,SAAS,CAzZbja,SAyZuBktB,iBAAiB,EAAEx2C,QAAQq2C,UAAU,CAAA,CAAA;AACnEp7B,YAAAA,UAAAA,CAAWsoB,SAAS,CAACja,QA1ZdA,CA0ZuBmtB,oBAAoB,EAAEP,WAAAA,CAAAA,CAAAA;AACpDj7B,YAAAA,UAAAA,CAAWsoB,SAAS,CAACja,QA3ZdA,CA2ZuBotB,qBAAqB,EAAEP,cAAAA,CAAAA,CAAAA;SAChD,MAAA;YACL,IAAMQ,QAAAA,GAAW,IAAI,CAACnE,SAAS,CAAA;YAC/B,IAAMoE,YAAAA,GAAe,IAAI,CAACjE,aAAa,CAAA;AAEvCnP,YAAAA,iBAAAA,CAAOsM,QAAQ,CAAC9vC,OAAQq2C,CAAAA,UAAU,EAAE5G,WAAakH,EAAAA,QAAAA,CAAAA,CAAAA;YACjDnT,iBAAOkM,CAAAA,MAAM,CAACiH,QAAUT,EAAAA,WAAAA,CAAAA,CAAAA;YACxB1S,iBAAOkM,CAAAA,MAAM,CAACD,WAAamH,EAAAA,YAAAA,CAAAA,CAAAA;AAC3BA,YAAAA,YAAAA,CAAaC,SAAS,EAAA,CAAA;YAEtB57B,UAAWsoB,CAAAA,SAAS,CArabja,QAqauBgtB,CAAAA,oBAAoB,EAAE,IAAI,CAACV,UAAU,CAACtE,WAAW,CAAA,CAAA;AAC/Er2B,YAAAA,UAAAA,CAAWsoB,SAAS,CAACja,QAtadA,CAsauBitB,oBAAoB,EAAE9G,WAAAA,CAAAA,CAAAA;AACpDx0B,YAAAA,UAAAA,CAAWsoB,SAAS,CAACja,QAvadA,CAuauBktB,iBAAiB,EAAEG,QAAAA,CAAAA,CAAAA;AACjD17B,YAAAA,UAAAA,CAAWsoB,SAAS,CAACja,QAxadA,CAwauBmtB,oBAAoB,EAAEP,WAAAA,CAAAA,CAAAA;AACpDj7B,YAAAA,UAAAA,CAAWsoB,SAAS,CAACja,QAzadA,CAyauBotB,qBAAqB,EAAEE,YAAAA,CAAAA,CAAAA;AACvD,SAAA;AAEA,QAAA,IAAI,CAACf,kCAAkC,CAAC71C,OAAAA,EAASyvC,WAAakG,EAAAA,OAAAA,CAAAA,CAAAA;AAChE,KAAA,CAAA;IAEA,MAAUE,CAAAA,kCAQT,GARD,SAAUA,kCAAAA,CAAmC71C,OAAsB,EAAEyvC,WAAmB,EAAEkG,OAAgB,EAAA;AACxG,QAAA,IAAIA,OAAS,EAAA;YACX,IAAI,CAAC16B,UAAU,CAACsoB,SAAS,CAACja,QAASwtB,CAAAA,kBAAkB,EAAE92C,OAAAA,CAAQ+2C,oBAAoB,CAAA,CAAA;SAC9E,MAAA;YACL,IAAMC,SAAAA,GAAY,IAAI,CAACvE,UAAU,CAAA;AACjCjP,YAAAA,iBAAAA,CAAOsM,QAAQ,CAAC9vC,OAAQ+2C,CAAAA,oBAAoB,EAAEtH,WAAauH,EAAAA,SAAAA,CAAAA,CAAAA;YAC3D,IAAI,CAAC/7B,UAAU,CAACsoB,SAAS,CAACja,QArbnBA,CAqb4BwtB,kBAAkB,EAAEE,SAAAA,CAAAA,CAAAA;AACzD,SAAA;AACF,KAAA,CAAA;AAEA;;AAEC,MACD,MAAU7D,CAAAA,aAIT,GAJD,SAAUA,cAAc3E,SAAoB,EAAA;AAC1C,QAAA,IAAA,gBAAA,CAAA;SAAA,gBAAA,GAAA,IAAI,CAACoH,UAAU,KAAf,IAAA,GAAA,KAAA,CAAA,GAAA,gBAAA,CAAiBtkC,kBAAkB,CAAC1B,cAAc,CAAC,IAAI,CAACsjC,mBAAmB,CAAA,CAAA;AAC3E1E,QAAAA,SAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,UAAWl9B,kBAAkB,CAAC5B,WAAW,CAAC,IAAI,CAACwjC,mBAAmB,CAAA,CAAA;QAClE,IAAI,CAAC0C,UAAU,GAAGpH,SAAAA,CAAAA;AACpB,KAAA,CAAA;AAEA;;AAEC,MACD,OAAUyI,aAAgD,GAA1D,SAAUA,aAAAA,CAAcC,WAAwB,EAAS,EAAA,CAAA;AAEzD;;AAEC,MACD,MAAU3B,CAAAA,OAET,GAFD,SAAUA,QAAQv1C,OAAsB,EAAA;QACtC,MAAM,eAAA,CAAA;AACR,KAAA,CAAA;AAEA;;AAEC,MACD,OAAQwzC,uBAQP,GARD,SAAQA,uBAAwB5N,CAAAA,QAAkB,EAAE/wC,KAAa,EAAA;QAC/D,IAAMsiD,WAAAA,GAAwBvR,SAASj0B,KAAK,EAAA,CAAA;AAC5CwlC,QAAAA,WAAAA,CAAYlwC,IAAI,GAAGkwC,WAAYlwC,CAAAA,IAAI,GAAG,YAAA,CAAA;AACtC,QAAA,IAAI,CAAC4gC,sBAAsB,CAACjC,QAAAA,EAAU,CAAC,CAAA,CAAA,CAAA;QACvC,IAAI,CAACiC,sBAAsB,CAACsP,WAAa,EAAA,CAAA,CAAA,CAAA;AACzC,QAAA,IAAI,CAACvE,mBAAmB,CAAC/9C,KAAAA,CAAM,GAAG,IAAA,CAAA;AAClC,QAAA,IAAI,CAACw9C,UAAU,CAACx9C,KAAAA,CAAM,GAAGsiD,WAAAA,CAAAA;QACzB,OAAOA,WAAAA,CAAAA;AACT,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQvD,YAeP,GAfD,SAAQA,YAAa/+C,CAAAA,KAAa,EAAE+wC,QAAkB,EAAA;QACpD,IAAM2N,SAAAA,GAAY,IAAI,CAAClB,UAAU,CAAA;QACjC,IAAIx9C,KAAAA,IAAS0+C,SAAU9gD,CAAAA,MAAM,EAAE;YAC7B8gD,SAAU9gD,CAAAA,MAAM,GAAGoC,KAAQ,GAAA,CAAA,CAAA;AAC7B,SAAA;QAEA,IAAMs/C,gBAAAA,GAAmBZ,SAAS,CAAC1+C,KAAM,CAAA,CAAA;AACzC,QAAA,IAAIs/C,qBAAqBvO,QAAU,EAAA;YACjC,IAAMkO,iBAAAA,GAAoB,IAAI,CAAClB,mBAAmB,CAAA;YAClD/9C,KAAQi/C,GAAAA,iBAAAA,CAAkBrhD,MAAM,KAAKqhD,iBAAiB,CAACj/C,KAAAA,CAAM,GAAG,KAAI,CAAA,CAAA;AAEpEs/C,YAAAA,gBAAAA,IAAoB,IAAI,CAACtM,sBAAsB,CAACsM,kBAAkB,CAAC,CAAA,CAAA,CAAA;AACnEvO,YAAAA,QAAAA,IAAY,IAAI,CAACiC,sBAAsB,CAACjC,QAAU,EAAA,CAAA,CAAA,CAAA;YAClD2N,SAAS,CAAC1+C,MAAM,GAAG+wC,QAAAA,CAAAA;AACrB,SAAA;AACF,KAAA,CAAA;AAEA;;AAEC,MACD,MACUsN,CAAAA,mBAET,GAHD,SACUA,oBAAoBpiD,IAA0B,EAAA;AACtD,QAAA,IAAI,CAACugB,gBAAgB,IAAA,CAAA,CAAA;AACvB,KAAA,CAAA;AAlfWiY,IAAAA,aAAAA,CAAAA,QAAAA,EAAAA;;YAsEPrO,GAAAA,EAAAA,YAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACs3B,WAAW,CAAA;AACzB,aAAA;;;YAKI6E,GAAAA,EAAAA,UAAAA;;;MAAJ,SAAA,GAAA,GAAA;AACE,gBAAA,OAAO,EAAE,IAAI,CAACzC,iBAAiB,KAAK5iD,aAAa,IAAI,CAAC4iD,iBAAiB,KAAK,IAAI,CAACnhD,OAAO,CAAC4nB,IAAI,CAACM,UAAU,GAAG,CAAA,CAAA,CAAA;AAC7G,aAAA;;;YAKI27B,GAAAA,EAAAA,gBAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACvE,eAAe,CAAA;AAC7B,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAmB59C,KAAc,EAAA;AAC/B,gBAAA,IAAI,IAAI,CAAC49C,eAAe,KAAK59C,KAAO,EAAA;AAClC,oBAAA,IAAIA,KAAO,EAAA;AACT,wBAAA,IAAI,CAAC+lB,UAAU,CAAC+oB,WAAW,CA3FtB1a,SA2FgC8pB,mBAAmB,CAAA,CAAA;qBACnD,MAAA;AACL,wBAAA,IAAI,CAACn4B,UAAU,CAACipB,YAAY,CA7FvB5a,SA6FiC8pB,mBAAmB,CAAA,CAAA;AAC3D,qBAAA;oBACA,IAAI,CAACN,eAAe,GAAG59C,KAAAA,CAAAA;AACzB,iBAAA;AACF,aAAA;;;YAQIoiD,GAAAA,EAAAA,eAAAA;;;MAAJ,SAAA,GAAA,GAAA;AACE,gBAAA,OAAO,IAAI,CAACjF,UAAU,CAAC5/C,MAAM,CAAA;AAC/B,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAkByC,KAAa,EAAA;gBAC7B,IAAMq+C,SAAAA,GAAY,IAAI,CAAClB,UAAU,CAAA;gBACjC,IAAM6B,kBAAAA,GAAqB,IAAI,CAACtB,mBAAmB,CAAA;AAEnDW,gBAAAA,SAAAA,CAAU9gD,MAAM,KAAKyC,KAAAA,KAAUq+C,SAAU9gD,CAAAA,MAAM,GAAGyC,KAAI,CAAA,CAAA;AACtDg/C,gBAAAA,kBAAAA,CAAmBzhD,MAAM,GAAGyC,KAAAA,KAAUg/C,kBAAmBzhD,CAAAA,MAAM,GAAGyC,KAAI,CAAA,CAAA;AACxE,aAAA;;;YAKI6/C,GAAAA,EAAAA,QAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,IAAI,IAAI,CAAC1jC,gBAAgB,GAAoC,CAAA,EAAA;AAC3D,oBAAA,IAAI,CAAC4lC,aAAa,CAAC,IAAI,CAACtmC,OAAO,CAAA,CAAA;oBAC/B,IAAI,CAACU,gBAAgB,IAAI,CAAA,CAAA,CAAA;AAC3B,iBAAA;gBACA,OAAO,IAAI,CAACV,OAAO,CAAA;AACrB,aAAA;;;YAKI4mC,GAAAA,EAAAA,UAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAAC1E,SAAS,CAAA;AACvB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAa39C,KAAa,EAAA;gBACxB,IAAI,CAAC29C,SAAS,GAAG39C,KAAAA,CAAAA;AACnB,aAAA;;;AAzIWo0B,IAAAA,OAAAA,QAAAA,CAAAA;EAAiBsd,SAmf7B,EAAA;AAnfYtd,gBAAAA,CACI2rB,eAAe,IAAIrpB,kBAAAA,EAAAA,CAAAA;AADvBtC,gBAGI8pB,CAAAA,mBAAAA,GAAsBr+B,WAAYU,CAAAA,SAAS,CAAC,6BAAA,CAAA,CAAA;AAHhD6T,gBAIIgtB,CAAAA,oBAAAA,GAAuBp9B,cAAezD,CAAAA,SAAS,CAAC,mBAAA,CAAA,CAAA;AAJpD6T,gBAKIitB,CAAAA,oBAAAA,GAAuBr9B,cAAezD,CAAAA,SAAS,CAAC,mBAAA,CAAA,CAAA;AALpD6T,gBAMIktB,CAAAA,iBAAAA,GAAoBt9B,cAAezD,CAAAA,SAAS,CAAC,gBAAA,CAAA,CAAA;AANjD6T,gBAOIwtB,CAAAA,kBAAAA,GAAqB59B,cAAezD,CAAAA,SAAS,CAAC,iBAAA,CAAA,CAAA;AAPlD6T,gBAQImtB,CAAAA,oBAAAA,GAAuBv9B,cAAezD,CAAAA,SAAS,CAAC,mBAAA,CAAA,CAAA;AARpD6T,gBASIotB,CAAAA,qBAAAA,GAAwBx9B,cAAezD,CAAAA,SAAS,CAAC,oBAAA,CAAA,CAAA;AATrD6T,gBAUI+pB,CAAAA,sBAAAA,GAAyBn6B,cAAezD,CAAAA,SAAS,CAAC,gBAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAXrB+hC,IAAAA,mBAAAA,CAAAA,SAAAA,EAAAA,aAAAA,CAAAA,SAAAA,CAAAA;;AAsf9C;;IAGO,IAAKC,mBAAAA,iBAAAA,SAAAA,mBAAAA,EAAAA;oDACmC,mBAAA,CAAA,mBAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,GAAA,aAAA,CAAA;AADnCA,IAAAA,OAAAA,mBAAAA,CAAAA;AAGX,CAAA,CAAA,EAAA,CAAA;;AClhBD;;;AAGC,IACM,SAASC,wBAAAA,GAAAA;AACd,IAAA,OAAO,SAAcjnD,WAAAA,EAAAA;AAErB,KAAA,CAAA;AACF;;ACEO,IAAA,qBAAA,iBAAA,WAAA;AAAMknD,IAAAA,SAAAA,qBAAAA,GAAAA,EAAAA;AAAAA,IAAAA,qBAAAA,CAIJC,SAON,GAPD,SAAOA,SAAAA,CAAUx2C,QAAqC,EAAA;QACpD,IAAMy2C,OAAAA,GAAUz2C,SAAS02C,gBAAgB,EAAA,CAAA;QACzC,IAAMC,YAAAA,GAAe32C,SAAS42C,SAAS,CAAA;QACvCD,YAAgBF,IAAAA,OAAAA,CAAQI,YAAY,CAACF,YAAAA,CAAAA,CAAAA;QACrC,IAAM5S,QAAAA,GAAW0S,OAAQK,CAAAA,gBAAgB,CAAC,CAAA,CAAA,CAAA;AAC1C/S,QAAAA,QAAAA,CAASe,OAAO,GAAGyR,qBATVA,CASgCQ,mBAAmB,CAAA;AAC5D/2C,QAAAA,QAAAA,CAAS42C,SAAS,GAAG7S,QAAAA,CAAAA;AACvB,KAAA,CAAA;AAXWwS,IAAAA,qBAAAA,CAaJS,eAkCN,GAlCD,SAAOA,eAAAA,CAAgBh3C,QAAqC,EAAA;AAC1D,QAAA,IAAQ9H,QAA0B8H,QAA1B9H,CAAAA,KAAAA,EAAOC,SAAmB6H,QAAnB7H,CAAAA,MAAAA,EAAQ0O,SAAW7G,QAAX6G,CAAAA,MAAAA,CAAAA;QACvB,IAAiCA,aAAAA,GAAAA,MAAO6F,CAAAA,KAAK,EAAlCuqC,SAAsBpwC,aAAzB7L,CAAAA,CAAAA,EAAWC,MAAGi8C,GAAWrwC,aAAd5L,CAAAA,CAAAA,CAAAA;;QAEnB,IAAMozC,WAAAA,GAAckI,qBAjBXA,CAiBiCrN,YAAY,CAAA;QACtD,IAAkBiO,KAAO9I,WAAjB5kC,CAAAA,QAAAA,CAAAA;;QAER,IAA0BzJ,sCAAAA,GAAAA,QAASylC,CAAAA,MAAM,CAAC2H,SAAS,CAACiB,WAAW,EAAvD5kC,GAAU2tC,GAAQp3C,sCAAlByJ,CAAAA,QAAAA,CAAAA;AACR,QAAA,IAAM4tC,EAAKr3C,GAAAA,QAAAA,CAASs3C,KAAK,GAAG,CAACp/C,KAAQA,GAAAA,KAAAA,CAAAA;AACrC,QAAA,IAAMq/C,EAAKv3C,GAAAA,QAAAA,CAAS5E,KAAK,GAAG,CAACjD,MAASA,GAAAA,MAAAA,CAAAA;QACrCg/C,EAAE,CAAC,CAAE,CAAA,GAAGC,GAAG,CAAC,EAAE,GAAGC,EAAAA,EAAMF,EAAE,CAAC,CAAE,CAAA,GAAGC,GAAG,CAAC,CAAA,CAAE,GAAGC,EAAAA,EAAMF,EAAE,CAAC,EAAE,GAAGC,GAAG,CAAC,CAAA,CAAE,GAAGC,EAAAA,CAAAA;QAC/DF,EAAE,CAAC,CAAE,CAAA,GAAGC,GAAG,CAAC,EAAE,GAAGG,EAAAA,EAAMJ,EAAE,CAAC,CAAE,CAAA,GAAGC,GAAG,CAAC,CAAA,CAAE,GAAGG,EAAAA,EAAMJ,EAAE,CAAC,EAAE,GAAGC,GAAG,CAAC,CAAA,CAAE,GAAGG,EAAAA,CAAAA;QAC/DJ,EAAE,CAAC,EAAE,GAAGC,GAAG,CAAC,CAAE,CAAA,EAAID,EAAE,CAAC,CAAA,CAAE,GAAGC,GAAG,CAAC,EAAE,EAAID,EAAE,CAAC,EAAG,CAAA,GAAGC,GAAG,CAAC,EAAG,CAAA,CAAA;AACrDD,QAAAA,EAAE,CAAC,EAAA,CAAG,GAAGC,GAAG,CAAC,EAAG,CAAA,GAAGH,MAASE,GAAAA,EAAE,CAAC,CAAE,CAAA,GAAGD,MAASC,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;AAClDA,QAAAA,EAAE,CAAC,EAAA,CAAG,GAAGC,GAAG,CAAC,EAAG,CAAA,GAAGH,MAASE,GAAAA,EAAE,CAAC,CAAE,CAAA,GAAGD,MAASC,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;AAClDA,QAAAA,EAAE,CAAC,EAAA,CAAG,GAAGC,GAAG,CAAC,EAAG,CAAA,GAAGH,MAASE,GAAAA,EAAE,CAAC,CAAE,CAAA,GAAGD,MAASC,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;;;;;;;QAQlD,IAAMK,eAAAA,GAAkB3wC,OAAO4J,aAAa,EAAA,CAAA;QAC5C,IAAMszB,QAAAA,GAAW/jC,SAAS42C,SAAS,CAAA;AACnC,QAAA,IAAMa,QAAW1T,GAAAA,QAAAA,CAASC,KAAK,CAACyT,QAAQ,CAAA;AACxC,QAAA,IAAK,IAAIhmD,CAAAA,GAAI,CAAGimD,EAAAA,CAAAA,GAAI3T,SAASoB,UAAU,CAACjW,KAAK,EAAEz9B,CAAI,GAAA,CAAA,EAAG,EAAEA,CAAAA,EAAGimD,KAAK,CAAG,CAAA;YACjE,IAAiBF,kBAAAA,GAAAA,eAAe,CAAC/lD,CAAAA,CAAE,EAA3BuJ,CAASw8C,GAAAA,kBAAAA,CAATx8C,CAAGC,EAAAA,CAAAA,GAAMu8C,kBAANv8C,CAAAA,CAAAA,CAAAA;AACXw8C,YAAAA,QAAQ,CAACC,CAAAA,CAAE,GAAGP,EAAE,CAAC,CAAE,CAAA,GAAGn8C,CAAIm8C,GAAAA,EAAE,CAAC,CAAE,CAAA,GAAGl8C,CAAIk8C,GAAAA,EAAE,CAAC,EAAG,CAAA,CAAA;AAC5CM,YAAAA,QAAQ,CAACC,CAAI,GAAA,CAAA,CAAE,GAAGP,EAAE,CAAC,CAAE,CAAA,GAAGn8C,CAAIm8C,GAAAA,EAAE,CAAC,CAAE,CAAA,GAAGl8C,CAAIk8C,GAAAA,EAAE,CAAC,EAAG,CAAA,CAAA;AAChDM,YAAAA,QAAQ,CAACC,CAAI,GAAA,CAAA,CAAE,GAAGP,EAAE,CAAC,CAAE,CAAA,GAAGn8C,CAAIm8C,GAAAA,EAAE,CAAC,CAAE,CAAA,GAAGl8C,CAAIk8C,GAAAA,EAAE,CAAC,EAAG,CAAA,CAAA;AAClD,SAAA;AAEA3nC,QAAAA,sBAAAA,CAAY49B,SAAS,CAACvmC,MAAAA,CAAOgK,UAAU,EAAIw9B,EAAAA,WAAAA,EAAaruC,SAASuP,OAAO,CAAA,CAAA;AAC1E,KAAA,CAAA;AA/CWgnC,IAAAA,qBAAAA,CAiDJoB,SAeN,GAfD,SAAOA,SAAAA,CAAU33C,QAAqC,EAAA;AACpD,QAAA,IAAM43C,SAAY53C,GAAAA,QAAAA,CAAS6G,MAAM,CAAC8J,OAAO,EAAA,CAAA;QACzC,IAA+BinC,WAAAA,GAAAA,SAAS,CAAC,CAAE,CAAA,EAAnC58C,IAAGmO,GAAoByuC,WAAvB58C,CAAAA,CAAAA,EAASC,MAAGsJ,GAAWqzC,WAAd38C,CAAAA,CAAAA,CAAAA;QACjB,IAA6B28C,YAAAA,GAAAA,SAAS,CAAC,CAAE,CAAA,EAAjC58C,KAAGyW,GAAkBmmC,YAArB58C,CAAAA,CAAAA,EAAUC,GAAGqJ,GAAQszC,YAAX38C,CAAAA,CAAAA,CAAAA;QAClB,IAAM8oC,QAAAA,GAAW/jC,SAAS42C,SAAS,CAAA;AACnC,QAAA,IAAMa,QAAW1T,GAAAA,QAAAA,CAASC,KAAK,CAACyT,QAAQ,CAAA;AACxC,QAAA,IAAMluC,MAASw6B,GAAAA,QAAAA,CAASoB,UAAU,CAACjW,KAAK,GAAG,CAAA,CAAA;QAC3CuoB,QAAQ,CAACluC,OAAO,GAAGJ,IAAAA,CAAAA;QACnBsuC,QAAQ,CAACluC,MAAS,GAAA,CAAA,CAAE,GAAGhF,MAAAA,CAAAA;QACvBkzC,QAAQ,CAACluC,MAAS,GAAA,CAAA,CAAE,GAAGkI,KAAAA,CAAAA;QACvBgmC,QAAQ,CAACluC,MAAS,GAAA,EAAA,CAAG,GAAGhF,MAAAA,CAAAA;QACxBkzC,QAAQ,CAACluC,MAAS,GAAA,EAAA,CAAG,GAAGJ,IAAAA,CAAAA;QACxBsuC,QAAQ,CAACluC,MAAS,GAAA,EAAA,CAAG,GAAGjF,GAAAA,CAAAA;QACxBmzC,QAAQ,CAACluC,MAAS,GAAA,EAAA,CAAG,GAAGkI,KAAAA,CAAAA;QACxBgmC,QAAQ,CAACluC,MAAS,GAAA,EAAA,CAAG,GAAGjF,GAAAA,CAAAA;AAC1B,KAAA,CAAA;AAhEWiyC,IAAAA,qBAAAA,CAkEJsB,WAUN,GAVD,SAAOA,WAAAA,CAAY73C,QAAwB,EAAA;QACzC,IAAM+jC,QAAAA,GAAW/jC,SAAS42C,SAAS,CAAA;AACnC,QAAA,IAAuB52C,eAAAA,GAAAA,QAAAA,CAAS83C,KAAK,EAA7Bt1B,IAAexiB,eAAfwiB,CAAAA,CAAAA,EAAGC,CAAYziB,GAAAA,eAAAA,CAAZyiB,CAAGQ,EAAAA,CAAAA,GAASjjB,eAATijB,CAAAA,CAAAA,EAAGlX,IAAM/L,eAAN+L,CAAAA,CAAAA,CAAAA;AACjB,QAAA,IAAM0rC,QAAW1T,GAAAA,QAAAA,CAASC,KAAK,CAACyT,QAAQ,CAAA;AACxC,QAAA,IAAK,IAAIhmD,CAAAA,GAAI,CAAGimD,EAAAA,CAAAA,GAAI3T,SAASoB,UAAU,CAACjW,KAAK,GAAG,GAAGz9B,CAAI,GAAA,CAAA,EAAG,EAAEA,CAAAA,EAAGimD,KAAK,CAAG,CAAA;YACrED,QAAQ,CAACC,EAAE,GAAGl1B,CAAAA,CAAAA;YACdi1B,QAAQ,CAACC,CAAI,GAAA,CAAA,CAAE,GAAGj1B,CAAAA,CAAAA;YAClBg1B,QAAQ,CAACC,CAAI,GAAA,CAAA,CAAE,GAAGz0B,CAAAA,CAAAA;YAClBw0B,QAAQ,CAACC,CAAI,GAAA,CAAA,CAAE,GAAG3rC,CAAAA,CAAAA;AACpB,SAAA;AACF,KAAA,CAAA;AA5EWwqC,IAAAA,OAAAA,qBAAAA,CAAAA;AA6EZ,CAAA,EAAA,CAAA;AA7EYA,qBAAAA,CACJQ,mBAAsB,GAAA;AAAC,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAE,CAAA,CAAA;AADpCR,qBAAAA,CAEJrN,eAAe,IAAI9G,iBAAAA,EAAAA,CAAAA;;;;;ACHrB,IAAA,qBAAA,iBAAA,WAAA;AAAM2V,IAAAA,SAAAA,qBAAAA,GAAAA,EAAAA;AAAAA,IAAAA,qBAAAA,CAOJvB,SAON,GAPD,SAAOA,SAAAA,CAAUx2C,QAAwB,EAAA;QACvC,IAAMy2C,OAAAA,GAAUz2C,SAAS02C,gBAAgB,EAAA,CAAA;QACzC,IAAMC,YAAAA,GAAe32C,SAAS42C,SAAS,CAAA;QACvCD,YAAgBF,IAAAA,OAAAA,CAAQI,YAAY,CAACF,YAAAA,CAAAA,CAAAA;QACrC,IAAM5S,QAAAA,GAAW0S,OAAQK,CAAAA,gBAAgB,CAAC,EAAA,CAAA,CAAA;AAC1C/S,QAAAA,QAAAA,CAASe,OAAO,GAAGiT,qBAZVA,CAYgChB,mBAAmB,CAAA;AAC5D/2C,QAAAA,QAAAA,CAAS42C,SAAS,GAAG7S,QAAAA,CAAAA;AACvB,KAAA,CAAA;AAdWgU,IAAAA,qBAAAA,CAgBJf,eA6FN,GA7FD,SAAOA,eAAAA,CAAgBh3C,QAAwB,EAAA;AAC7C,QAAA,IAAQ9H,QAA0B8H,QAA1B9H,CAAAA,KAAAA,EAAOC,SAAmB6H,QAAnB7H,CAAAA,MAAAA,EAAQ0O,SAAW7G,QAAX6G,CAAAA,MAAAA,CAAAA;QACvB,IAAQmI,SAAWnI,MAAXmI,CAAAA,MAAAA,CAAAA;;QAER,IAAMwoC,eAAAA,GAAkB3wC,OAAO4J,aAAa,EAAA,CAAA;QAC5C,IAA+B+mC,iBAAAA,GAAAA,eAAe,CAAC,CAAE,CAAA,EAAzCx8C,IAAGmO,GAAoBquC,iBAAvBx8C,CAAAA,CAAAA,EAASC,MAAGsJ,GAAWizC,iBAAdv8C,CAAAA,CAAAA,CAAAA;QACjB,IAA6Bu8C,kBAAAA,GAAAA,eAAe,CAAC,CAAE,CAAA,EAAvCx8C,KAAGyW,GAAkB+lC,kBAArBx8C,CAAAA,CAAAA,EAAUC,GAAGqJ,GAAQkzC,kBAAXv8C,CAAAA,CAAAA,CAAAA;AAClB,QAAA,IAAQ/C,WAA6C2O,GAAAA,MAAAA,CAA7C3O,KAAoBC,EAAQ6/C,eAAiBnxC,MAAzB1O,CAAAA,MAAAA,CAAAA;QAC5B,IAAM8/C,SAAAA,GAAYC,WAAclpC,GAAAA,MAAAA,CAAOhU,CAAC,CAAA;QACxC,IAAMm9C,WAAAA,GAAcH,YAAehpC,GAAAA,MAAAA,CAAO/T,CAAC,CAAA;QAC3C,IAAMm9C,UAAAA,GAAaF,WAAclpC,GAAAA,MAAAA,CAAOiC,CAAC,CAAA;QACzC,IAAMonC,QAAAA,GAAWL,YAAehpC,GAAAA,MAAAA,CAAOlS,CAAC,CAAA;;;;;;;;;;;;AAaxC,QAAA,IAAIw7C,GAAeC,EAAAA,MAAAA,CAAAA;QACnB,IAAIN,SAAAA,GAAYG,aAAalgD,KAAO,EAAA;AAClC,YAAA,IAAMsgD,UAAatgD,GAAAA,KAAAA,IAAS+/C,SAAAA,GAAYG,UAAS,CAAA,CAAA;YACjDE,GAAM,GAAA;AACJJ,gBAAAA,WAAAA,GAAc/uC,IAAOqvC,GAAAA,UAAAA;gBACrBP,SAAYO,GAAAA,UAAAA;gBACZP,SAAYO,GAAAA,UAAAA;AACZtgD,gBAAAA,KAAAA,GAAQggD,WAAe,IAAA,CAAIzmC,GAAAA,KAAI,CAAK+mC,GAAAA,UAAAA;AACrC,aAAA,CAAA;SACI,MAAA;YACLF,GAAM,GAAA;gBAACJ,WAAc/uC,GAAAA,IAAAA;AAAM8uC,gBAAAA,SAAAA;gBAAW//C,KAAQkgD,GAAAA,UAAAA;gBAAYlgD,KAAQggD,GAAAA,WAAAA,IAAe,CAAA,GAAIzmC,KAAI,CAAA;AAAG,aAAA,CAAA;AAC9F,SAAA;QAEA,IAAI4mC,QAAAA,GAAWF,cAAchgD,MAAQ,EAAA;AACnC,YAAA,IAAMsgD,WAActgD,GAAAA,MAAAA,IAAUkgD,QAAAA,GAAWF,WAAU,CAAA,CAAA;YACnDI,MAAS,GAAA;AACPP,gBAAAA,YAAAA,GAAezzC,MAASk0C,GAAAA,WAAAA;gBACxBN,WAAcM,GAAAA,WAAAA;gBACdN,WAAcM,GAAAA,WAAAA;AACdtgD,gBAAAA,MAAAA,GAAS6/C,YAAgB,IAAA,CAAI1zC,GAAAA,GAAE,CAAKm0C,GAAAA,WAAAA;AACrC,aAAA,CAAA;SACI,MAAA;YACLF,MAAS,GAAA;gBAACP,YAAezzC,GAAAA,MAAAA;AAAQ4zC,gBAAAA,WAAAA;gBAAahgD,MAASkgD,GAAAA,QAAAA;gBAAUlgD,MAAS6/C,GAAAA,YAAAA,IAAgB,CAAA,GAAI1zC,GAAE,CAAA;AAAG,aAAA,CAAA;AACrG,SAAA;;AAGA,QAAA,IAAiCtE,sBAAAA,GAAAA,QAAAA,CAAS6G,MAAM,CAAC6F,KAAK,EAA9C1R,MAAGi8C,GAAsBj3C,sBAAzBhF,CAAAA,CAAAA,EAAWC,MAAGi8C,GAAWl3C,sBAAd/E,CAAAA,CAAAA,CAAAA;QACnB,IAAMy9C,WAAAA,GAAc14C,QAAS9H,CAAAA,KAAK,GAAG++C,MAAAA,CAAAA;QACrC,IAAM0B,WAAAA,GAAc34C,QAAS7H,CAAAA,MAAM,GAAG++C,MAAAA,CAAAA;;QAEtC,IAAM7I,WAAAA,GAAc0J,qBAtEXA,CAsEiC7O,YAAY,CAAA;QACtD,IAAkBiO,KAAO9I,WAAjB5kC,CAAAA,QAAAA,CAAAA;;QAER,IAA0BzJ,sCAAAA,GAAAA,QAASylC,CAAAA,MAAM,CAAC2H,SAAS,CAACiB,WAAW,EAAvD5kC,GAAU2tC,GAAQp3C,sCAAlByJ,CAAAA,QAAAA,CAAAA;AACR,QAAA,IAAM4tC,EAAKr3C,GAAAA,QAAAA,CAASs3C,KAAK,GAAG,CAAC,CAAI,GAAA,CAAA,CAAA;AACjC,QAAA,IAAMC,EAAKv3C,GAAAA,QAAAA,CAAS5E,KAAK,GAAG,CAAC,CAAI,GAAA,CAAA,CAAA;QAChC+7C,EAAE,CAAC,CAAE,CAAA,GAAGC,GAAG,CAAC,EAAE,GAAGC,EAAAA,EAAMF,EAAE,CAAC,CAAE,CAAA,GAAGC,GAAG,CAAC,CAAA,CAAE,GAAGC,EAAAA,EAAMF,EAAE,CAAC,EAAE,GAAGC,GAAG,CAAC,CAAA,CAAE,GAAGC,EAAAA,CAAAA;QAC/DF,EAAE,CAAC,CAAE,CAAA,GAAGC,GAAG,CAAC,EAAE,GAAGG,EAAAA,EAAMJ,EAAE,CAAC,CAAE,CAAA,GAAGC,GAAG,CAAC,CAAA,CAAE,GAAGG,EAAAA,EAAMJ,EAAE,CAAC,EAAE,GAAGC,GAAG,CAAC,CAAA,CAAE,GAAGG,EAAAA,CAAAA;QAC/DJ,EAAE,CAAC,EAAE,GAAGC,GAAG,CAAC,CAAE,CAAA,EAAID,EAAE,CAAC,CAAA,CAAE,GAAGC,GAAG,CAAC,EAAE,EAAID,EAAE,CAAC,EAAG,CAAA,GAAGC,GAAG,CAAC,EAAG,CAAA,CAAA;AACrDD,QAAAA,EAAE,CAAC,EAAA,CAAG,GAAGC,GAAG,CAAC,EAAG,CAAA,GAAGsB,WAAcvB,GAAAA,EAAE,CAAC,CAAE,CAAA,GAAGwB,WAAcxB,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;AAC5DA,QAAAA,EAAE,CAAC,EAAA,CAAG,GAAGC,GAAG,CAAC,EAAG,CAAA,GAAGsB,WAAcvB,GAAAA,EAAE,CAAC,CAAE,CAAA,GAAGwB,WAAcxB,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;AAC5DA,QAAAA,EAAE,CAAC,EAAA,CAAG,GAAGC,GAAG,CAAC,EAAG,CAAA,GAAGsB,WAAcvB,GAAAA,EAAE,CAAC,CAAE,CAAA,GAAGwB,WAAcxB,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;;;;;;;;;;;QAY5D,IAAMpT,QAAAA,GAAW/jC,SAAS42C,SAAS,CAAA;AACnC,QAAA,IAAMa,QAAW1T,GAAAA,QAAAA,CAASC,KAAK,CAACyT,QAAQ,CAAA;QACxC,IAAK,IAAIhmD,CAAI,GAAA,CAAA,EAAGimD,CAAI3T,GAAAA,QAAAA,CAASoB,UAAU,CAACjW,KAAK,EAAEz9B,CAAI,GAAA,CAAA,EAAGA,CAAK,EAAA,CAAA;YACzD,IAAMmnD,QAAAA,GAAWN,GAAG,CAAC7mD,CAAE,CAAA,CAAA;AACvB,YAAA,IAAK,IAAIoQ,CAAI,GAAA,CAAA,EAAGA,IAAI,CAAGA,EAAAA,CAAAA,EAAAA,EAAK61C,KAAK,CAAG,CAAA;gBAClC,IAAMmB,WAAAA,GAAcN,MAAM,CAAC12C,CAAE,CAAA,CAAA;AAC7B41C,gBAAAA,QAAQ,CAACC,CAAAA,CAAE,GAAGP,EAAE,CAAC,CAAE,CAAA,GAAGyB,QAAWzB,GAAAA,EAAE,CAAC,CAAE,CAAA,GAAG0B,WAAc1B,GAAAA,EAAE,CAAC,EAAG,CAAA,CAAA;AAC7DM,gBAAAA,QAAQ,CAACC,CAAI,GAAA,CAAA,CAAE,GAAGP,EAAE,CAAC,CAAE,CAAA,GAAGyB,QAAWzB,GAAAA,EAAE,CAAC,CAAE,CAAA,GAAG0B,WAAc1B,GAAAA,EAAE,CAAC,EAAG,CAAA,CAAA;AACjEM,gBAAAA,QAAQ,CAACC,CAAI,GAAA,CAAA,CAAE,GAAGP,EAAE,CAAC,CAAE,CAAA,GAAGyB,QAAWzB,GAAAA,EAAE,CAAC,CAAE,CAAA,GAAG0B,WAAc1B,GAAAA,EAAE,CAAC,EAAG,CAAA,CAAA;AACnE,aAAA;AACF,SAAA;QAEA,IAAqBn3C,iBAAAA,GAAAA,SAASuP,OAAO,EAA7BoC,MAAa3R,iBAAb2R,CAAAA,GAAAA,EAAKha,MAAQqI,iBAARrI,CAAAA,GAAAA,CAAAA;QACbga,GAAIniB,CAAAA,GAAG,CAAC8oD,GAAG,CAAC,EAAE,EAAEC,MAAM,CAAC,CAAA,CAAE,EAAE,CAAA,CAAA,CAAA;QAC3B5gD,GAAInI,CAAAA,GAAG,CAAC8oD,GAAG,CAAC,EAAE,EAAEC,MAAM,CAAC,CAAA,CAAE,EAAE,CAAA,CAAA,CAAA;QAC3Bv4C,QAASuP,CAAAA,OAAO,CAAC69B,SAAS,CAACiB,WAAAA,CAAAA,CAAAA;AAC7B,KAAA,CAAA;AA7GW0J,IAAAA,qBAAAA,CA+GJJ,SAWN,GAXD,SAAOA,SAAAA,CAAU33C,QAAwB,EAAA;QACvC,IAAM+jC,QAAAA,GAAW/jC,SAAS42C,SAAS,CAAA;AACnC,QAAA,IAAMa,QAAW1T,GAAAA,QAAAA,CAASC,KAAK,CAACyT,QAAQ,CAAA;AACxC,QAAA,IAAMG,SAAY53C,GAAAA,QAAAA,CAAS6G,MAAM,CAAC8J,OAAO,EAAA,CAAA;AACzC,QAAA,IAAK,IAAIlf,CAAAA,GAAI,CAAGimD,EAAAA,CAAAA,GAAI3T,QAASoB,CAAAA,UAAU,CAACjW,KAAK,GAAG,CAAA,EAAGz9B,CAAI,GAAA,CAAA,EAAGA,CAAK,EAAA,CAAA;AAC7D,YAAA,IAAMqnD,IAAOlB,GAAAA,SAAS,CAACnmD,CAAAA,CAAE,CAACuJ,CAAC,CAAA;AAC3B,YAAA,IAAK,IAAI6G,CAAI,GAAA,CAAA,EAAGA,IAAI,CAAGA,EAAAA,CAAAA,EAAAA,EAAK61C,KAAK,CAAG,CAAA;gBAClCD,QAAQ,CAACC,EAAE,GAAGoB,IAAAA,CAAAA;gBACdrB,QAAQ,CAACC,IAAI,CAAE,CAAA,GAAGE,SAAS,CAAC/1C,CAAAA,CAAE,CAAC5G,CAAC,CAAA;AAClC,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AA1HW88C,IAAAA,qBAAAA,CA4HJF,WAUN,GAVD,SAAOA,WAAAA,CAAY73C,QAAwB,EAAA;QACzC,IAAM+jC,QAAAA,GAAW/jC,SAAS42C,SAAS,CAAA;AACnC,QAAA,IAAuB52C,eAAAA,GAAAA,QAAAA,CAAS83C,KAAK,EAA7Bt1B,IAAexiB,eAAfwiB,CAAAA,CAAAA,EAAGC,CAAYziB,GAAAA,eAAAA,CAAZyiB,CAAGQ,EAAAA,CAAAA,GAASjjB,eAATijB,CAAAA,CAAAA,EAAGlX,IAAM/L,eAAN+L,CAAAA,CAAAA,CAAAA;AACjB,QAAA,IAAM0rC,QAAW1T,GAAAA,QAAAA,CAASC,KAAK,CAACyT,QAAQ,CAAA;AACxC,QAAA,IAAK,IAAIhmD,CAAAA,GAAI,CAAGimD,EAAAA,CAAAA,GAAI3T,SAASoB,UAAU,CAACjW,KAAK,GAAG,GAAGz9B,CAAI,GAAA,EAAA,EAAI,EAAEA,CAAAA,EAAGimD,KAAK,CAAG,CAAA;YACtED,QAAQ,CAACC,EAAE,GAAGl1B,CAAAA,CAAAA;YACdi1B,QAAQ,CAACC,CAAI,GAAA,CAAA,CAAE,GAAGj1B,CAAAA,CAAAA;YAClBg1B,QAAQ,CAACC,CAAI,GAAA,CAAA,CAAE,GAAGz0B,CAAAA,CAAAA;YAClBw0B,QAAQ,CAACC,CAAI,GAAA,CAAA,CAAE,GAAG3rC,CAAAA,CAAAA;AACpB,SAAA;AACF,KAAA,CAAA;AAtIWgsC,IAAAA,OAAAA,qBAAAA,CAAAA;AAuIZ,CAAA,EAAA,CAAA;AAvIYA,qBAAAA,CACJhB,mBAAsB,GAAA;AAC3B,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,EAAA;AAAI,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,EAAA;AAAI,IAAA,CAAA;AAAG,IAAA,EAAA;AAAI,IAAA,EAAA;AAAI,IAAA,CAAA;AAChH,IAAA,CAAA;AAAG,IAAA,EAAA;AAAI,IAAA,CAAA;AAAG,IAAA,EAAA;AAAI,IAAA,EAAA;AAAI,IAAA,CAAA;AAAG,IAAA,EAAA;AAAI,IAAA,EAAA;AAAI,IAAA,EAAA;AAAI,IAAA,EAAA;AAAI,IAAA,EAAA;AAAI,IAAA,EAAA;AAAI,IAAA,EAAA;AAAI,IAAA,EAAA;AAAI,IAAA,EAAA;AAAI,IAAA,EAAA;AAAI,IAAA,EAAA;AAC9D,CAAA,CAAA;AAJUgB,qBAAAA,CAKJ7O,eAAe,IAAI9G,iBAAAA,EAAAA,CAAAA;;;;;ACZ5B;;IAGO,IAAM2W,eAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,eAAAA,CAqBC/hC,KAAiB,EAAA;AAAjBA,QAAAA,IAAAA,kBAAAA,KAAgB,GAAA,CAAA,CAAA;AApB5B,6CACA3lB,MAAS,GAAA,CAAA,CAAA;AAKD2nD,QAAAA,IAAAA,CAAAA,YAAAA,GAAe;;aACfC,WAAc,GAAA,CAAA,CAAA;AAcpB,QAAA,IAAI,CAACC,SAAS,GAAG,IAAI3nD,KAASylB,CAAAA,KAAAA,CAAAA,CAAAA;;AAtBrB+hC,IAAAA,IAAAA,MAAAA,GAAAA,eAAAA,CAAAA,SAAAA,CAAAA;AAyBX;;;AAGC,MACDx4B,MAAAA,CAAAA,GAOC,GAPDA,SAAAA,IAAIzT,OAAU,EAAA;QACZ,IAAI,IAAI,CAACzb,MAAM,KAAK,IAAI,CAAC6nD,SAAS,CAAC7nD,MAAM,EAAE;AACzC,YAAA,IAAI,CAAC6nD,SAAS,CAAC3lD,IAAI,CAACuZ,OAAAA,CAAAA,CAAAA;SACf,MAAA;AACL,YAAA,IAAI,CAACosC,SAAS,CAAC,IAAI,CAAC7nD,MAAM,CAAC,GAAGyb,OAAAA,CAAAA;AAChC,SAAA;AACA,QAAA,IAAI,CAACzb,MAAM,EAAA,CAAA;AACb,KAAA,CAAA;AAEA;;;AAGC,MACD8nD,MAAAA,CAAAA,MAIC,GAJDA,SAAAA,QAAOrsC,OAAU,EAAA;;AAEf,QAAA,IAAMrZ,QAAQ,IAAI,CAACylD,SAAS,CAACxlD,OAAO,CAACoZ,OAAAA,CAAAA,CAAAA;QACrC,IAAI,CAACssC,aAAa,CAAC3lD,KAAAA,CAAAA,CAAAA;AACrB,KAAA,CAAA;AAEA;;;;AAIC,MACDjE,OAAAA,GAKC,GALDA,SAAAA,GAAIiE,CAAAA,KAAa,EAAEqZ,OAAU,EAAA;AAC3B,QAAA,IAAIrZ,KAAS,IAAA,IAAI,CAACpC,MAAM,EAAE;YACxB,MAAM,wBAAA,CAAA;AACR,SAAA;AACA,QAAA,IAAI,CAAC6nD,SAAS,CAACzlD,KAAAA,CAAM,GAAGqZ,OAAAA,CAAAA;AAC1B,KAAA,CAAA;AAEA;;;;AAIC,MACD1d,MAAAA,CAAAA,GAKC,GALDA,SAAAA,IAAIqE,KAAa,EAAA;AACf,QAAA,IAAIA,KAAS,IAAA,IAAI,CAACpC,MAAM,EAAE;YACxB,MAAM,wBAAA,CAAA;AACR,SAAA;AACA,QAAA,OAAO,IAAI,CAAC6nD,SAAS,CAACzlD,KAAM,CAAA,CAAA;AAC9B,KAAA,CAAA;AAEA;;;;AAIC,MACD2lD,MAAAA,CAAAA,aAiBC,GAjBDA,SAAAA,cAAc3lD,KAAa,EAAA;QACzB,IAAMgW,QAAAA,GAAW,IAAI,CAACyvC,SAAS,CAAA;QAC/B,IAAIxxC,GAAAA,CAAAA;AACJ,QAAA,IAAI,IAAI,CAACsxC,YAAY,GAAG,CAAG,EAAA;AACzB,YAAA,IAAI,CAACE,SAAS,CAACzlD,KAAAA,CAAM,GAAG,IAAA,CAAA;AACxB,YAAA,IAAI,CAACwlD,WAAW,EAAA,CAAA;SACX,MAAA;AACL,YAAA,IAAM5jC,QAAW,GAAA,IAAI,CAAChkB,MAAM,GAAG,CAAA,CAAA;AAC/B,YAAA,IAAIoC,UAAU4hB,QAAU,EAAA;gBACtB3N,GAAM+B,GAAAA,QAAQ,CAAC4L,QAAS,CAAA,CAAA;gBACxB5L,QAAQ,CAAChW,MAAM,GAAGiU,GAAAA,CAAAA;AACpB,aAAA;YACA+B,QAAQ,CAAC4L,SAAS,GAAG,IAAA,CAAA;AACrB,YAAA,IAAI,CAAChkB,MAAM,EAAA,CAAA;AACb,SAAA;QAEA,OAAOqW,GAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;AAIC,MACD8Y,OAAAA,OAQC,GARDA,SAAAA,OAAQ64B,CAAAA,UAA+C,EAAEC,MAA4C,EAAA;AACnG,QAAA,IAAI,CAACC,UAAU,EAAA,CAAA;QACf,IAAM9vC,QAAAA,GAAW,IAAI,CAACyvC,SAAS,CAAA;QAC/B,IAAK,IAAIznD,CAAI,GAAA,CAAA,EAAG0B,CAAI,GAAA,IAAI,CAAC9B,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;YAC3C,IAAMqb,OAAAA,GAAUrD,QAAQ,CAAChY,CAAE,CAAA,CAAA;AAC3Bqb,YAAAA,OAAAA,IAAWusC,WAAWvsC,OAASrb,EAAAA,CAAAA,CAAAA,CAAAA;AACjC,SAAA;QACA,IAAI,CAAC+nD,QAAQ,CAACF,MAAAA,CAAAA,CAAAA;AAChB,KAAA,CAAA;AAEA;;;;AAIC,MACDG,OAAAA,eASC,GATDA,SAAAA,eAAgBJ,CAAAA,UAA+C,EAAEC,MAA4C,EAAA;AAC3G,QAAA,IAAI,CAACC,UAAU,EAAA,CAAA;QACf,IAAMG,MAAAA,GAAS,IAAI,CAACroD,MAAM,CAAA;QAC1B,IAAMoY,QAAAA,GAAW,IAAI,CAACyvC,SAAS,CAAA;AAC/B,QAAA,IAAK,IAAIznD,CAAI,GAAA,CAAA,EAAG0B,IAAIumD,MAAQjoD,EAAAA,CAAAA,GAAI0B,GAAG1B,CAAK,EAAA,CAAA;YACtC,IAAMqb,OAAAA,GAAUrD,QAAQ,CAAChY,CAAE,CAAA,CAAA;AAC3Bqb,YAAAA,OAAAA,IAAWusC,WAAWvsC,OAASrb,EAAAA,CAAAA,CAAAA,CAAAA;AACjC,SAAA;AACA,QAAA,IAAI,CAACkoD,gBAAgB,CAACD,MAAAA,EAAQjwC,QAAU6vC,EAAAA,MAAAA,CAAAA,CAAAA;AAC1C,KAAA,CAAA;AAEA;;;AAGC,MACDM,MAAAA,CAAAA,IAEC,GAFDA,SAAAA,KAAKC,SAAiC,EAAA;QACpCxyC,KAAMyE,CAAAA,UAAU,CAAC,IAAI,CAACotC,SAAS,EAAE,CAAG,EAAA,IAAI,CAAC7nD,MAAM,EAAEwoD,SAAAA,CAAAA,CAAAA;AACnD,KAAA,CAAA;AAEA;;MAGAC,MAAAA,CAAAA,iBAEC,GAFDA,SAAAA,iBAAAA,GAAAA;AACE,QAAA,IAAI,CAACZ,SAAS,CAAC7nD,MAAM,GAAG,IAAI,CAACA,MAAM,CAAA;AACrC,KAAA,CAAA;IAEA,MAAQkoD,CAAAA,UAEP,GAFD,SAAQA,UAAAA,GAAAA;QACN,EAAE,IAAI,CAACP,YAAY,CAAA;AACrB,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQQ,QA6BP,GA7BD,SAAQA,QAAAA,CAASF,MAAmC,EAAA;AAClD,QAAA,IAAI,EAAE,IAAI,CAACN,YAAY,KAAK,CAAG,EAAA;AAC7B,YAAA,OAAA;AACF,SAAA;QAEA,IAAI,IAAI,CAACC,WAAW,EAAE;AACpB,YAAA,IAAIjtC,IAAO,GAAA,CAAA,CAAA;AACX,YAAA,IAAIC,EAAK,GAAA,IAAI,CAAC5a,MAAM,GAAG,CAAA,CAAA;YACvB,IAAMoY,QAAAA,GAAW,IAAI,CAACyvC,SAAS,CAAA;AAC/BrsC,YAAAA,SAAAA,EAAW,GAAG;AACZ,gBAAA,MAAOpD,QAAQ,CAACuC,IAAAA,CAAK,CACnB,IAAI,EAAEA,QAAQC,EAAI,EAAA;oBAChB,MAAMY,SAAAA,CAAAA;AACR,iBAAA;gBAEF,MAAO,CAACpD,QAAQ,CAACwC,EAAAA,CAAG,CAClB,IAAID,IAAAA,IAAQ,EAAEC,EAAI,EAAA;oBAChB,MAAMY,SAAAA,CAAAA;AACR,iBAAA;gBAEF,IAAMktC,WAAAA,GAActwC,QAAQ,CAACwC,EAAG,CAAA,CAAA;AAChCqtC,gBAAAA,MAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAASS,WAAa/tC,EAAAA,IAAAA,CAAAA,CAAAA;gBACtBvC,QAAQ,CAACuC,OAAO,GAAG+tC,WAAAA,CAAAA;gBACnBtwC,QAAQ,CAACwC,KAAK,GAAG,IAAA,CAAA;AACnB,aAAA,OAASD,OAAOC,EAAI,EAAA;AAEpB,YAAA,IAAI,CAAC5a,MAAM,IAAI,IAAI,CAAC4nD,WAAW,CAAA;YAC/B,IAAI,CAACA,WAAW,GAAG,CAAA,CAAA;AACrB,SAAA;AACF,KAAA,CAAA;IAEA,MAAQU,CAAAA,gBAeP,GAfD,SAAQA,gBAAAA,CAAiBD,MAAc,EAAEjwC,QAAa,EAAE6vC,MAA2C,EAAA;AACjG,QAAA,IAAI,EAAE,IAAI,CAACN,YAAY,KAAK,CAAG,EAAA;AAC7B,YAAA,OAAA;AACF,SAAA;AAEA,QAAA,IAAIvlD,KAAQ,GAAA,CAAA,CAAA;QACZ,IAAK,IAAIhC,CAAIioD,GAAAA,MAAAA,EAAQvmD,CAAI,GAAA,IAAI,CAAC9B,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;YAChD,IAAMqb,OAAAA,GAAUrD,QAAQ,CAAChY,CAAE,CAAA,CAAA;AAC3B,YAAA,IAAI,CAACqb,OAAS,EAAA,SAAA;YACdrD,QAAQ,CAAChW,MAAM,GAAGqZ,OAAAA,CAAAA;AAClBwsC,YAAAA,MAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAASxsC,OAASrZ,EAAAA,KAAAA,CAAAA,CAAAA;AAClBA,YAAAA,KAAAA,EAAAA,CAAAA;AACF,SAAA;QACA,IAAI,CAACpC,MAAM,GAAGoC,KAAAA,CAAAA;QACd,IAAI,CAACwlD,WAAW,GAAG,CAAA,CAAA;AACrB,KAAA,CAAA;AAhMWF,IAAAA,aAAAA,CAAAA,eAAAA,EAAAA;;YAaPiB,GAAAA,EAAAA,WAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAAChB,YAAY,GAAG,CAAA,CAAA;AAC7B,aAAA;;;AAfWD,IAAAA,OAAAA,eAAAA,CAAAA;AAiMZ,CAAA;;ACzLM,IAAA,oBAAA,iBAAA,WAAA;AAAMkB,IAAAA,SAAAA,oBAAAA,GAAAA,EAAAA;AAAAA,IAAAA,oBAAAA,CAOJzD,SAaN,GAbD,SAAOA,SAAUx2C,CAAAA,QAAwB,EAAEk6C,WAAmB,EAAA;AAC5D,QAAA,IAAIA,WAAa,EAAA;YACf,IAAMzD,OAAAA,GAAUz2C,SAAS02C,gBAAgB,EAAA,CAAA;YACzC,IAAMC,YAAAA,GAAe32C,SAAS42C,SAAS,CAAA;AACvC,YAAA,IAAMuD,cAAcxD,YAAgBA,IAAAA,YAAAA,CAAaxR,UAAU,CAAC7tC,IAAI,KAAK4iD,WAAc,GAAA,CAAA,CAAA;YACnFC,WAAe1D,IAAAA,OAAAA,CAAQI,YAAY,CAACF,YAAAA,CAAAA,CAAAA;YAEpC,IAAI,CAACA,gBAAgBwD,WAAa,EAAA;gBAChC,IAAMC,WAAAA,GAAc3D,OAAQK,CAAAA,gBAAgB,CAACoD,WAAAA,CAAAA,CAAAA;gBAC7CE,WAAYtV,CAAAA,OAAO,GAAG,EAAE,CAAA;AACxB9kC,gBAAAA,QAAAA,CAAS42C,SAAS,GAAGwD,WAAAA,CAAAA;AACvB,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AApBWH,IAAAA,oBAAAA,CAsBJjD,eAwGN,GAxGD,SAAOA,eAAAA,CAAgBh3C,QAAwB,EAAA;AAC7C,QAAA,IAAQ9H,KAAuE8H,GAAAA,QAAAA,CAAvE9H,KAAOC,EAAAA,MAAAA,GAAgE6H,SAAhE7H,MAAQ0O,EAAAA,MAAAA,GAAwD7G,QAAxD6G,CAAAA,MAAAA,EAAQwzC,QAAgDr6C,GAAAA,QAAAA,CAAhDq6C,QAAUC,EAAwBC,YAAcv6C,QAAtCs6C,CAAAA,sBAAAA,CAAAA;;AAEzC,QAAA,IAAQE,MAASC,GAzBRR,oBAyBDO,CAAAA,OAAAA,EAAiBE,SAzBhBT,GAAAA,oBAAAA,CAyBgBS,UAAuBC,EAAQC,KAzB/CX,GAAAA,oBAAAA,CAyBuCU,MAAeE,EAAWC,WAzBjEb,oBAyBsDY,CAAAA,SAAAA,CAAAA;AAC/D,QAAA,IAAME,cAAiB/6C,GAAAA,QAAAA,CAAS02C,gBAAgB,EAAA,CAAGqE,cAAc,CAAA;QACjEN,MAAOppD,CAAAA,MAAM,GAAG2pD,SAAAA,CAAU3pD,MAAM,GAAGupD,MAAMvpD,MAAM,GAAGypD,QAASzpD,CAAAA,MAAM,GAAG,CAAA,CAAA;AACpE,QAAA,IAAM6oD,WACJG,GAAAA,QAAAA,KAAajzC,cAAe6zC,CAAAA,QAAQ,GA7B7BhB,oBA8BkBiB,CAAAA,0BAA0B,CAC7Cr0C,MAAAA,EACA3O,KACAC,EAAAA,MAAAA,EACAoiD,SACAE,EAAAA,MAAAA,EACAO,SACAJ,EAAAA,KAAAA,EACAE,QACAC,EAAAA,cAAAA,CAAAA,GAEFd,oBAzCGA,CAyCkBkB,4BAA4B,CAC/Ct0C,MACA3O,EAAAA,KAAAA,EACAC,MACAsiD,EAAAA,MAAAA,EACAO,SACAJ,EAAAA,KAAAA,EACAE,QACAC,EAAAA,cAAAA,CAAAA,CAAAA;QAjDCd,oBAmDYzD,CAAAA,SAAS,CAACx2C,QAAUk6C,EAAAA,WAAAA,CAAAA,CAAAA;;AAEzC,QAAA,IAAiCl6C,sBAAAA,GAAAA,QAAAA,CAAS6G,MAAM,CAAC6F,KAAK,EAA9C1R,MAAGi8C,GAAsBj3C,sBAAzBhF,CAAAA,CAAAA,EAAWC,MAAGi8C,GAAWl3C,sBAAd/E,CAAAA,CAAAA,CAAAA;QACnB,IAAMy9C,WAAAA,GAAc14C,QAAS9H,CAAAA,KAAK,GAAG++C,MAAAA,CAAAA;QACrC,IAAM0B,WAAAA,GAAc34C,QAAS7H,CAAAA,MAAM,GAAG++C,MAAAA,CAAAA;;QAEtC,IAAsB7I,cAzDb4L,oBAyDD/Q,CAAAA,YAAAA,CAAAA;QACR,IAAkBiO,KAAO9I,WAAjB5kC,CAAAA,QAAAA,CAAAA;;QAER,IAA0BzJ,sCAAAA,GAAAA,QAASylC,CAAAA,MAAM,CAAC2H,SAAS,CAACiB,WAAW,EAAvD5kC,GAAU2tC,GAAQp3C,sCAAlByJ,CAAAA,QAAAA,CAAAA;AACR,QAAA,IAAM4tC,EAAKr3C,GAAAA,QAAAA,CAASs3C,KAAK,GAAG,CAAC,CAAI,GAAA,CAAA,CAAA;AACjC,QAAA,IAAMC,EAAKv3C,GAAAA,QAAAA,CAAS5E,KAAK,GAAG,CAAC,CAAI,GAAA,CAAA,CAAA;AACjC,QAAA,IAAIggD,KAAaC,GAAaC,EAAAA,GAAAA,CAAAA;AAC9B,QAAA,IAAIC,KAAaC,GAAaC,EAAAA,GAAAA,CAAAA;QAC7BL,GAAMjE,GAAAA,EAAE,CAAC,CAAA,CAAE,GAAGC,GAAG,CAAC,CAAA,CAAE,GAAGC,EAAAA,EAAMgE,GAAMlE,GAAAA,EAAE,CAAC,CAAA,CAAE,GAAGC,GAAG,CAAC,CAAA,CAAE,GAAGC,EAAAA,EAAMiE,GAAMnE,GAAAA,EAAE,CAAC,CAAA,CAAE,GAAGC,GAAG,CAAC,CAAA,CAAE,GAAGC,EAAAA,CAAAA;QACjFkE,GAAMpE,GAAAA,EAAE,CAAC,CAAA,CAAE,GAAGC,GAAG,CAAC,CAAA,CAAE,GAAGG,EAAAA,EAAMiE,GAAMrE,GAAAA,EAAE,CAAC,CAAA,CAAE,GAAGC,GAAG,CAAC,CAAA,CAAE,GAAGG,EAAAA,EAAMkE,GAAMtE,GAAAA,EAAE,CAAC,CAAA,CAAE,GAAGC,GAAG,CAAC,CAAA,CAAE,GAAGG,EAAAA,CAAAA;QACjFJ,EAAE,CAAC,EAAE,GAAGC,GAAG,CAAC,CAAE,CAAA,EAAID,EAAE,CAAC,CAAA,CAAE,GAAGC,GAAG,CAAC,EAAE,EAAID,EAAE,CAAC,EAAG,CAAA,GAAGC,GAAG,CAAC,EAAG,CAAA,CAAA;AACrD,QAAA,IAAMsE,OAAQvE,EAAE,CAAC,EAAG,CAAA,GAAGC,GAAG,CAAC,EAAA,CAAG,GAAGsB,WAAAA,GAAcvB,EAAE,CAAC,CAAA,CAAE,GAAGwB,WAAcxB,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;AAC1E,QAAA,IAAMwE,OAAQxE,EAAE,CAAC,EAAG,CAAA,GAAGC,GAAG,CAAC,EAAA,CAAG,GAAGsB,WAAAA,GAAcvB,EAAE,CAAC,CAAA,CAAE,GAAGwB,WAAcxB,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;AAC1E,QAAA,IAAMyE,OAAQzE,EAAE,CAAC,EAAG,CAAA,GAAGC,GAAG,CAAC,EAAA,CAAG,GAAGsB,WAAAA,GAAcvB,EAAE,CAAC,CAAA,CAAE,GAAGwB,WAAcxB,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;;QAE1E,IAAM0E,SAAAA,GAAYpB,MAAOppD,CAAAA,MAAM,GAAG,CAAA,CAAA;QAClC,IAAMyqD,YAAAA,GAAed,SAAU3pD,CAAAA,MAAM,GAAG,CAAA,CAAA;QAExC,IAAM0yC,QAAAA,GAAW/jC,SAAS42C,SAAS,CAAA;AACnC,QAAA,IAAMa,QAAW1T,GAAAA,QAAAA,CAASC,KAAK,CAACyT,QAAQ,CAAA;QACxC,IAAM3S,OAAAA,GAAUf,SAASe,OAAO,CAAA;AAChC,QAAA,IAAI9tB,KAAQ,GAAA,CAAA,CAAA;AACZ,QAAA,IAAI+kC,eAAkB,GAAA,CAAA,CAAA;QACtB,IAAK,IAAIl6C,CAAI,GAAA,CAAA,EAAG61C,CAAI3T,GAAAA,QAAAA,CAASoB,UAAU,CAACjW,KAAK,EAAErtB,CAAIi6C,GAAAA,YAAAA,EAAcj6C,CAAK,EAAA,CAAA;AACpE,YAAA,IAAMm6C,UAAU,CAAIn6C,GAAAA,CAAAA,CAAAA;AACpB,YAAA,IAAK,IAAIpQ,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAIoqD,WAAWpqD,CAAK,EAAA,CAAA;AAClC,gBAAA,IAAMwqD,GAAMrB,GAAAA,KAAAA,CAAMxrD,GAAG,CAAC,CAAIqC,GAAAA,CAAAA,CAAAA,CAAAA;AAC1B,gBAAA,IAAMyqD,GAAMtB,GAAAA,KAAAA,CAAMxrD,GAAG,CAAC,IAAIqC,CAAI,GAAA,CAAA,CAAA,CAAA;AAC9B,gBAAA,IAAM0qD,GAAMrB,GAAAA,QAAAA,CAAS1rD,GAAG,CAAC4sD,OAAU,GAAA,CAAA,CAAA,CAAA;AACnC,gBAAA,IAAII,KAAMH,CAAAA,GAAAA,CAAAA,IAAQG,KAAMF,CAAAA,GAAAA,CAAAA,IAAQE,MAAMD,GAAM,CAAA,EAAA;AAC1C,oBAAA,SAAA;AACF,iBAAA;gBAEArX,OAAO,CAACiX,kBAAkB,GAAG/kC,KAAAA,CAAAA;gBAC7B8tB,OAAO,CAACiX,eAAkB,EAAA,CAAA,GAAG/kC,KAAQ,GAAA,CAAA,CAAA;gBACrC8tB,OAAO,CAACiX,eAAkB,EAAA,CAAA,GAAG/kC,KAAQ,GAAA,CAAA,CAAA;gBACrC8tB,OAAO,CAACiX,eAAkB,EAAA,CAAA,GAAG/kC,KAAQ,GAAA,CAAA,CAAA;gBACrC8tB,OAAO,CAACiX,eAAkB,EAAA,CAAA,GAAG/kC,KAAQ,GAAA,CAAA,CAAA;gBACrC8tB,OAAO,CAACiX,eAAkB,EAAA,CAAA,GAAG/kC,KAAQ,GAAA,CAAA,CAAA;gBACrCA,KAAS,IAAA,CAAA,CAAA;gBACT,IAAMqlC,CAAAA,GAAI5B,MAAOrrD,CAAAA,GAAG,CAACqC,CAAAA,CAAAA,CAAAA;gBACrB,IAAMwxB,CAAAA,GAAI+3B,SAAU5rD,CAAAA,GAAG,CAACyS,CAAAA,CAAAA,CAAAA;AACxB,gBAAA,IAAM2gB,CAAIi4B,GAAAA,MAAAA,CAAOrrD,GAAG,CAACqC,CAAI,GAAA,CAAA,CAAA,CAAA;AACzB,gBAAA,IAAM6qD,CAAItB,GAAAA,SAAAA,CAAU5rD,GAAG,CAACyS,CAAI,GAAA,CAAA,CAAA,CAAA;;AAG5B41C,gBAAAA,QAAQ,CAACC,CAAE,CAAA,GAAG0D,GAAMiB,GAAAA,CAAAA,GAAId,MAAMt4B,CAAIy4B,GAAAA,IAAAA,CAAAA;AAClCjE,gBAAAA,QAAQ,CAACC,CAAI,GAAA,CAAA,CAAE,GAAG2D,GAAMgB,GAAAA,CAAAA,GAAIb,MAAMv4B,CAAI04B,GAAAA,IAAAA,CAAAA;AACtClE,gBAAAA,QAAQ,CAACC,CAAI,GAAA,CAAA,CAAE,GAAG4D,GAAMe,GAAAA,CAAAA,GAAIZ,MAAMx4B,CAAI24B,GAAAA,IAAAA,CAAAA;;AAEtCnE,gBAAAA,QAAQ,CAACC,CAAI,GAAA,CAAA,CAAE,GAAG0D,GAAM54B,GAAAA,CAAAA,GAAI+4B,MAAMt4B,CAAIy4B,GAAAA,IAAAA,CAAAA;AACtCjE,gBAAAA,QAAQ,CAACC,CAAI,GAAA,EAAA,CAAG,GAAG2D,GAAM74B,GAAAA,CAAAA,GAAIg5B,MAAMv4B,CAAI04B,GAAAA,IAAAA,CAAAA;AACvClE,gBAAAA,QAAQ,CAACC,CAAI,GAAA,EAAA,CAAG,GAAG4D,GAAM94B,GAAAA,CAAAA,GAAIi5B,MAAMx4B,CAAI24B,GAAAA,IAAAA,CAAAA;;AAEvCnE,gBAAAA,QAAQ,CAACC,CAAI,GAAA,EAAA,CAAG,GAAG0D,GAAMiB,GAAAA,CAAAA,GAAId,MAAMe,CAAIZ,GAAAA,IAAAA,CAAAA;AACvCjE,gBAAAA,QAAQ,CAACC,CAAI,GAAA,EAAA,CAAG,GAAG2D,GAAMgB,GAAAA,CAAAA,GAAIb,MAAMc,CAAIX,GAAAA,IAAAA,CAAAA;AACvClE,gBAAAA,QAAQ,CAACC,CAAI,GAAA,EAAA,CAAG,GAAG4D,GAAMe,GAAAA,CAAAA,GAAIZ,MAAMa,CAAIV,GAAAA,IAAAA,CAAAA;;AAEvCnE,gBAAAA,QAAQ,CAACC,CAAI,GAAA,EAAA,CAAG,GAAG0D,GAAM54B,GAAAA,CAAAA,GAAI+4B,MAAMe,CAAIZ,GAAAA,IAAAA,CAAAA;AACvCjE,gBAAAA,QAAQ,CAACC,CAAI,GAAA,EAAA,CAAG,GAAG2D,GAAM74B,GAAAA,CAAAA,GAAIg5B,MAAMc,CAAIX,GAAAA,IAAAA,CAAAA;AACvClE,gBAAAA,QAAQ,CAACC,CAAI,GAAA,EAAA,CAAG,GAAG4D,GAAM94B,GAAAA,CAAAA,GAAIi5B,MAAMa,CAAIV,GAAAA,IAAAA,CAAAA;gBACvClE,CAAK,IAAA,EAAA,CAAA;AACP,aAAA;AACF,SAAA;QAEA,IAAqB13C,iBAAAA,GAAAA,SAASuP,OAAO,EAA7BoC,MAAa3R,iBAAb2R,CAAAA,GAAAA,EAAKha,MAAQqI,iBAARrI,CAAAA,GAAAA,CAAAA;QACbga,GAAIniB,CAAAA,GAAG,CAACirD,MAAOrrD,CAAAA,GAAG,CAAC,CAAI4rD,CAAAA,EAAAA,SAAAA,CAAU5rD,GAAG,CAAC,CAAI,CAAA,EAAA,CAAA,CAAA,CAAA;QACzCuI,GAAInI,CAAAA,GAAG,CAACirD,MAAOrrD,CAAAA,GAAG,CAACysD,SAAYb,CAAAA,EAAAA,SAAAA,CAAU5rD,GAAG,CAAC0sD,YAAe,CAAA,EAAA,CAAA,CAAA,CAAA;QAC5D97C,QAASuP,CAAAA,OAAO,CAAC69B,SAAS,CAACiB,WAAAA,CAAAA,CAAAA;AAC7B,KAAA,CAAA;AA9HW4L,IAAAA,oBAAAA,CAgIJtC,SAgCN,GAhCD,SAAOA,SAAAA,CAAU33C,QAAwB,EAAA;AACvC,QAAA,IAAQw6C,MAASC,GAjIRR,oBAiIDO,CAAAA,OAAAA,EAAiBE,SAjIhBT,GAAAA,oBAAAA,CAiIgBS,UAAuBC,EAAQC,KAjI/CX,GAAAA,oBAAAA,CAiIuCU,MAAeE,EAAWC,WAjIjEb,oBAiIsDY,CAAAA,SAAAA,CAAAA;QAC/D,IAAMgB,SAAAA,GAAYpB,MAAOppD,CAAAA,MAAM,GAAG,CAAA,CAAA;QAClC,IAAMyqD,YAAAA,GAAed,SAAU3pD,CAAAA,MAAM,GAAG,CAAA,CAAA;QACxC,IAAM0yC,QAAAA,GAAW/jC,SAAS42C,SAAS,CAAA;AACnC,QAAA,IAAMa,QAAW1T,GAAAA,QAAAA,CAASC,KAAK,CAACyT,QAAQ,CAAA;AACxC,QAAA,IAAK,IAAI51C,CAAAA,GAAI,CAAG61C,EAAAA,CAAAA,GAAI3T,QAASoB,CAAAA,UAAU,CAACjW,KAAK,GAAG,CAAA,EAAGrtB,CAAIi6C,GAAAA,YAAAA,EAAcj6C,CAAK,EAAA,CAAA;AACxE,YAAA,IAAMm6C,UAAU,CAAIn6C,GAAAA,CAAAA,CAAAA;AACpB,YAAA,IAAK,IAAIpQ,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAIoqD,WAAWpqD,CAAK,EAAA,CAAA;AAClC,gBAAA,IAAMwqD,GAAMrB,GAAAA,KAAAA,CAAMxrD,GAAG,CAAC,CAAIqC,GAAAA,CAAAA,CAAAA,CAAAA;gBAC1B,IAAM8qD,GAAAA,GAAMzB,QAAS1rD,CAAAA,GAAG,CAAC4sD,OAAAA,CAAAA,CAAAA;AACzB,gBAAA,IAAME,GAAMtB,GAAAA,KAAAA,CAAMxrD,GAAG,CAAC,IAAIqC,CAAI,GAAA,CAAA,CAAA,CAAA;AAC9B,gBAAA,IAAM0qD,GAAMrB,GAAAA,QAAAA,CAAS1rD,GAAG,CAAC4sD,OAAU,GAAA,CAAA,CAAA,CAAA;AACnC,gBAAA,IAAII,MAAMH,GAAQG,CAAAA,IAAAA,KAAAA,CAAMG,QAAQH,KAAMF,CAAAA,GAAAA,CAAAA,IAAQE,MAAMD,GAAM,CAAA,EAAA;AACxD,oBAAA,SAAA;AACF,iBAAA;;gBAGA1E,QAAQ,CAACC,EAAE,GAAGuE,GAAAA,CAAAA;gBACdxE,QAAQ,CAACC,CAAI,GAAA,CAAA,CAAE,GAAG6E,GAAAA,CAAAA;;gBAElB9E,QAAQ,CAACC,CAAI,GAAA,CAAA,CAAE,GAAGwE,GAAAA,CAAAA;gBAClBzE,QAAQ,CAACC,CAAI,GAAA,EAAA,CAAG,GAAG6E,GAAAA,CAAAA;;gBAEnB9E,QAAQ,CAACC,CAAI,GAAA,EAAA,CAAG,GAAGuE,GAAAA,CAAAA;gBACnBxE,QAAQ,CAACC,CAAI,GAAA,EAAA,CAAG,GAAGyE,GAAAA,CAAAA;;gBAEnB1E,QAAQ,CAACC,CAAI,GAAA,EAAA,CAAG,GAAGwE,GAAAA,CAAAA;gBACnBzE,QAAQ,CAACC,CAAI,GAAA,EAAA,CAAG,GAAGyE,GAAAA,CAAAA;gBACnBzE,CAAK,IAAA,EAAA,CAAA;AACP,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AAhKWuC,IAAAA,oBAAAA,CAkKJpC,WAWN,GAXD,SAAOA,WAAAA,CAAY73C,QAAwB,EAAA;QACzC,IAAM+jC,QAAAA,GAAW/jC,SAAS42C,SAAS,CAAA;AACnC,QAAA,IAAuB52C,eAAAA,GAAAA,QAAAA,CAAS83C,KAAK,EAA7Bt1B,IAAexiB,eAAfwiB,CAAAA,CAAAA,EAAGC,CAAYziB,GAAAA,eAAAA,CAAZyiB,CAAGQ,EAAAA,CAAAA,GAASjjB,eAATijB,CAAAA,CAAAA,EAAGlX,IAAM/L,eAAN+L,CAAAA,CAAAA,CAAAA;AACjB,QAAA,IAAM0rC,QAAW1T,GAAAA,QAAAA,CAASC,KAAK,CAACyT,QAAQ,CAAA;QACxC,IAAMtS,UAAAA,GAAapB,SAASoB,UAAU,CAAA;AACtC,QAAA,IAAK,IAAI1zC,CAAI,GAAA,CAAA,EAAGimD,IAAIvS,UAAWjW,CAAAA,KAAK,GAAG,CAAG/7B,EAAAA,CAAAA,GAAIgyC,UAAW7tC,CAAAA,IAAI,GAAG,CAAG7F,EAAAA,CAAAA,GAAI0B,GAAG,EAAE1B,CAAAA,EAAGimD,KAAK,CAAG,CAAA;YACrFD,QAAQ,CAACC,EAAE,GAAGl1B,CAAAA,CAAAA;YACdi1B,QAAQ,CAACC,CAAI,GAAA,CAAA,CAAE,GAAGj1B,CAAAA,CAAAA;YAClBg1B,QAAQ,CAACC,CAAI,GAAA,CAAA,CAAE,GAAGz0B,CAAAA,CAAAA;YAClBw0B,QAAQ,CAACC,CAAI,GAAA,CAAA,CAAE,GAAG3rC,CAAAA,CAAAA;AACpB,SAAA;AACF,KAAA,CAAA;IA7KWkuC,oBA+KIiB,CAAAA,0BA4Id,GA5ID,SAAeA,0BAAAA,CACbr0C,MAAc,EACd3O,KAAa,EACbC,MAAc,EACdoiD,SAAiB,EACjBE,MAA+B,EAC/BO,SAAkC,EAClCJ,KAA8B,EAC9BE,QAAiC,EACjCC,cAAsB,EAAA;QAEtB,IAAQ/rC,SAAWnI,MAAXmI,CAAAA,MAAAA,CAAAA;QACR,IAAMwoC,eAAAA,GAAkB3wC,OAAO4J,aAAa,EAAA,CAAA;QAC5C,IAA+B+mC,iBAAAA,GAAAA,eAAe,CAAC,CAAE,CAAA,EAAzCx8C,IAAGmO,GAAoBquC,iBAAvBx8C,CAAAA,CAAAA,EAASC,MAAGsJ,GAAWizC,iBAAdv8C,CAAAA,CAAAA,CAAAA;QACjB,IAA6Bu8C,kBAAAA,GAAAA,eAAe,CAAC,CAAE,CAAA,EAAvCx8C,KAAGyW,GAAkB+lC,kBAArBx8C,CAAAA,CAAAA,EAAUC,GAAGqJ,GAAQkzC,kBAAXv8C,CAAAA,CAAAA,CAAAA;QAClB,IAAqD4L,eAAAA,GAAAA,MAAO8J,CAAAA,OAAO,EAA5D6rC,EAAAA,SAAAA,GAA8C31C,oBAAnC41C,SAAmC51C,GAAAA,eAAAA,CAAAA,CAAAA,CAAAA,EAAxB61C,SAAwB71C,GAAAA,eAAAA,CAAAA,CAAAA,CAAAA,EAAb81C,SAAa91C,GAAAA,eAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AACrD,QAAA,IAAQ3O,WAA6C2O,GAAAA,MAAAA,CAA7C3O,KAAoBC,EAAQ6/C,eAAiBnxC,MAAzB1O,CAAAA,MAAAA,CAAAA;QAC5B,IAAMykD,MAAAA,GAAS1E,WAAclpC,GAAAA,MAAAA,CAAOhU,CAAC,CAAA;QACrC,IAAM6hD,MAAAA,GAAS3E,WAAclpC,GAAAA,MAAAA,CAAOiC,CAAC,CAAA;AACrC,QAAA,IAAM6rC,UAAUF,MAASC,GAAAA,MAAAA,CAAAA;AACzB,QAAA,IAAME,UAAU7E,WAAc4E,GAAAA,OAAAA,CAAAA;QAC9B,IAAME,MAAAA,GAAShF,YAAehpC,GAAAA,MAAAA,CAAOlS,CAAC,CAAA;QACtC,IAAMmgD,MAAAA,GAASjF,YAAehpC,GAAAA,MAAAA,CAAO/T,CAAC,CAAA;AACtC,QAAA,IAAMiiD,UAAUF,MAASC,GAAAA,MAAAA,CAAAA;AACzB,QAAA,IAAME,UAAUnF,YAAekF,GAAAA,OAAAA,CAAAA;QAC/B,IAAIlR,KAAAA,CAAAA;AACJ,QAAA,IAAIoR,KAAkBC,EAAAA,KAAAA,CAAAA;AACtB,QAAA,IAAIC,UAAoBC,EAAAA,UAAAA,CAAAA;AACxB,QAAA,IAAIC,YAAsBC,EAAAA,YAAAA,CAAAA;AAC1B,QAAA,IAAIX,WAAW5kD,KAAO,EAAA;YACpBolD,UAAa,GAAA,CAAA,CAAA;AACbF,YAAAA,KAAAA,GAAAA,CAAAA,CAAAA;SACK,MAAA;YACL,IAAIL,OAAAA,GAAUjqC,mBAASi5B,CAAAA,aAAa,EAAE;AACpCyR,gBAAAA,YAAAA,GAAe,CAACtlD,KAAQ4kD,GAAAA,OAAM,IAAKC,OAAAA,CAAAA;gBACnCS,YAAeA,GAAAA,YAAAA,GAAe,KAAKjD,SAAYhjD,GAAAA,IAAAA,CAAKmM,IAAI,CAAC85C,YAAAA,CAAAA,GAAgBjmD,IAAKC,CAAAA,KAAK,CAACgmD,YAAAA,CAAAA,CAAAA;AACpFF,gBAAAA,UAAAA,GAAa,IAAIE,YAAe,GAAA,CAAA,CAAA;AAChCJ,gBAAAA,KAAAA,GAAAA,CAAAA,CAAAA;aACK,MAAA;gBACLE,UAAa,GAAA,CAAA,CAAA;AACbF,gBAAAA,KAAAA,GAAAA,CAAAA,CAAAA;AACF,aAAA;AACF,SAAA;AAEA,QAAA,IAAIF,WAAW/kD,MAAQ,EAAA;YACrBolD,UAAa,GAAA,CAAA,CAAA;AACbF,YAAAA,KAAAA,GAAAA,CAAAA,CAAAA;SACK,MAAA;YACL,IAAIF,OAAAA,GAAUrqC,mBAASi5B,CAAAA,aAAa,EAAE;AACpC0R,gBAAAA,YAAAA,GAAe,CAACtlD,MAAS+kD,GAAAA,OAAM,IAAKC,OAAAA,CAAAA;gBACpCM,YAAeA,GAAAA,YAAAA,GAAe,KAAKlD,SAAYhjD,GAAAA,IAAAA,CAAKmM,IAAI,CAAC+5C,YAAAA,CAAAA,GAAgBlmD,IAAKC,CAAAA,KAAK,CAACimD,YAAAA,CAAAA,CAAAA;AACpFF,gBAAAA,UAAAA,GAAa,IAAIE,YAAe,GAAA,CAAA,CAAA;AAChCJ,gBAAAA,KAAAA,GAAAA,CAAAA,CAAAA;aACK,MAAA;gBACLE,UAAa,GAAA,CAAA,CAAA;AACbF,gBAAAA,KAAAA,GAAAA,CAAAA,CAAAA;AACF,aAAA;AACF,SAAA;AAEA,QAAA,IAAIK,QAAW,GAAA,CAAA,CAAA;AACf,QAAA,IAAIC,WAAc,GAAA,CAAA,CAAA;QAElB,IAAKL,CAAAA,UAAAA,GAAa,CAAA,KAAMC,UAAa,GAAA,CAAA,CAAK,GAAA,CAAA,GAAIxC,cAAgB,EAAA;AAC5DN,YAAAA,MAAAA,CAAOl6B,GAAG,CAACroB,KAAAA,GAAQiR,OAAOsxC,MAAOl6B,CAAAA,GAAG,CAACroB,KAAQuZ,GAAAA,KAAAA,CAAAA,CAAAA;AAC7CupC,YAAAA,SAAAA,CAAUz6B,GAAG,CAACpoB,MAAAA,GAASoM,SAASy2C,SAAUz6B,CAAAA,GAAG,CAACpoB,MAASmM,GAAAA,GAAAA,CAAAA,CAAAA;YACvDs2C,KAAMr6B,CAAAA,GAAG,CAACi8B,SAAUxhD,CAAAA,CAAC,GAAG4/C,KAAMr6B,CAAAA,GAAG,CAACo8B,SAAAA,CAAU3hD,CAAC,CAAA,CAAA;YAC7C8/C,QAASv6B,CAAAA,GAAG,CAACi8B,SAAUvhD,CAAAA,CAAC,GAAG6/C,QAASv6B,CAAAA,GAAG,CAACo8B,SAAAA,CAAU1hD,CAAC,CAAA,CAAA;YACnDyiD,QAAY,IAAA,CAAA,CAAA;YACZC,WAAe,IAAA,CAAA,CAAA;AACfhoD,YAAAA,MAAAA,CAAOF,IAAI,CAAC,iDAAC,GAAiDslD,cAAe,GAAA,IAAA,CAAA,CAAA;AAC7E,YAAA,OAAO2C,QAAWC,GAAAA,WAAAA,CAAAA;AACpB,SAAA;QAEA,OAAQP,KAAAA;AACN,YAAA,KAAA,CAAA;AACEpR,gBAAAA,KAAAA,GAAQ9zC,KAAQ4kD,GAAAA,OAAAA,CAAAA;gBAChBrC,MAAOl6B,CAAAA,GAAG,CAAC23B,WAAc/uC,GAAAA,IAAAA,GAAO6iC,QAAQyO,MAAOl6B,CAAAA,GAAG,CAACq8B,MAAS5Q,GAAAA,KAAAA,CAAAA,CAAAA;AAC5DyO,gBAAAA,MAAAA,CAAOl6B,GAAG,CAACroB,KAAAA,GAAQggD,eAAe,CAAA,GAAIzmC,KAAI,CAAKu6B,GAAAA,KAAAA,CAAAA,CAAAA;gBAC/C4O,KAAMr6B,CAAAA,GAAG,CAACi8B,SAAUxhD,CAAAA,CAAC,GAAG4/C,KAAMr6B,CAAAA,GAAG,CAACk8B,SAAUzhD,CAAAA,CAAC,GAAG4/C,KAAMr6B,CAAAA,GAAG,CAACm8B,SAAU1hD,CAAAA,CAAC,GAAG4/C,KAAMr6B,CAAAA,GAAG,CAACo8B,SAAAA,CAAU3hD,CAAC,CAAA,CAAA;gBAC7F0iD,QAAY,IAAA,CAAA,CAAA;AACZ,gBAAA,MAAA;AACF,YAAA,KAAA,CAAA;gBACEjD,MAAOl6B,CAAAA,GAAG,CAAC23B,WAAAA,GAAc/uC,IAAOsxC,CAAAA,EAAAA,MAAAA,CAAOl6B,GAAG,CAACq8B,MAASnC,CAAAA,EAAAA,MAAAA,CAAOl6B,GAAG,CAACroB,KAAQ2kD,GAAAA,MAAAA,CAAAA,CAAAA;AACvEpC,gBAAAA,MAAAA,CAAOl6B,GAAG,CAACroB,KAAAA,GAAQggD,WAAe,IAAA,IAAIzmC,KAAI,CAAA,CAAA,CAAA;AAC1CmpC,gBAAAA,KAAAA,CAAMr6B,GAAG,CAACi8B,SAAAA,CAAUxhD,CAAC,CAAA,EAAG4/C,MAAMr6B,GAAG,CAACk8B,SAAUzhD,CAAAA,CAAC,GAAG4/C,KAAMr6B,CAAAA,GAAG,CAACq9B,GAAMhD,CAAAA,EAAAA,KAAAA,CAAMr6B,GAAG,CAACq9B,GAAAA,CAAAA,CAAAA;gBAC1EhD,KAAMr6B,CAAAA,GAAG,CAACm8B,SAAU1hD,CAAAA,CAAC,GAAG4/C,KAAMr6B,CAAAA,GAAG,CAACo8B,SAAAA,CAAU3hD,CAAC,CAAA,CAAA;gBAC7C0iD,QAAY,IAAA,CAAA,CAAA;AACZ,gBAAA,MAAA;AACF,YAAA,KAAA,CAAA;AACE1R,gBAAAA,KAAAA,GAAQ9zC,KAAS4kD,IAAAA,OAAUU,GAAAA,YAAAA,GAAeT,OAAM,CAAA,CAAA;gBAChDtC,MAAOl6B,CAAAA,GAAG,CAAC23B,WAAc/uC,GAAAA,IAAAA,GAAO6iC,QAAQyO,MAAOl6B,CAAAA,GAAG,CAACq8B,MAAS5Q,GAAAA,KAAAA,CAAAA,CAAAA;AAC5D4O,gBAAAA,KAAAA,CAAMr6B,GAAG,CAACi8B,SAAUxhD,CAAAA,CAAC,GAAG4/C,KAAMr6B,CAAAA,GAAG,CAACk8B,SAAAA,CAAUzhD,CAAC,CAAG4/C,EAAAA,KAAAA,CAAMr6B,GAAG,CAACk8B,UAAUzhD,CAAC,CAAA,CAAA;gBACrE0iD,QAAY,IAAA,CAAA,CAAA;gBACZ,IAAK,IAAIjsD,IAAI,CAAG4qD,EAAAA,CAAAA,GAAImB,eAAe,CAAG/rD,EAAAA,CAAAA,GAAI4qD,GAAG5qD,CAAK,EAAA,CAAA;oBAChDgpD,MAAOl6B,CAAAA,GAAG,CAACq8B,MAAS,GAACnrD,CAAAA,CAAI,GAAA,CAAA,IAAKsrD,OAAU/Q,GAAAA,KAAAA,CAAAA,CAAAA;oBACxC4O,KAAMr6B,CAAAA,GAAG,CAACm8B,SAAU1hD,CAAAA,CAAC,GAAG4/C,KAAMr6B,CAAAA,GAAG,CAACk8B,SAAAA,CAAUzhD,CAAC,CAAA,CAAA;oBAC7C0iD,QAAY,IAAA,CAAA,CAAA;AACd,iBAAA;AACAjD,gBAAAA,MAAAA,CAAOl6B,GAAG,CAACroB,KAAQ2kD,GAAAA,MAAAA,GAAS7Q,KAAQyO,CAAAA,EAAAA,MAAAA,CAAOl6B,GAAG,CAACroB,KAAQggD,GAAAA,WAAAA,IAAe,CAAA,GAAIzmC,KAAI,CAAKu6B,GAAAA,KAAAA,CAAAA,CAAAA;AACnF4O,gBAAAA,KAAAA,CAAMr6B,GAAG,CAACm8B,SAAU1hD,CAAAA,CAAC,GAAG4/C,KAAMr6B,CAAAA,GAAG,CAACm8B,SAAAA,CAAU1hD,CAAC,CAAG4/C,EAAAA,KAAAA,CAAMr6B,GAAG,CAACo8B,UAAU3hD,CAAC,CAAA,CAAA;gBACrE0iD,QAAY,IAAA,CAAA,CAAA;AACZ,gBAAA,MAAA;AAGJ,SAAA;QAEA,OAAQL,KAAAA;AACN,YAAA,KAAA,CAAA;AACErR,gBAAAA,KAAAA,GAAQ7zC,MAAS+kD,GAAAA,OAAAA,CAAAA;gBACjBlC,SAAUz6B,CAAAA,GAAG,CAACy3B,YAAezzC,GAAAA,MAAAA,GAASynC,QAAQgP,SAAUz6B,CAAAA,GAAG,CAAC08B,MAASjR,GAAAA,KAAAA,CAAAA,CAAAA;AACrEgP,gBAAAA,SAAAA,CAAUz6B,GAAG,CAACpoB,MAAAA,GAAS6/C,gBAAgB,CAAA,GAAI1zC,GAAE,CAAK0nC,GAAAA,KAAAA,CAAAA,CAAAA;gBAClD8O,QAASv6B,CAAAA,GAAG,CAACi8B,SAAUvhD,CAAAA,CAAC,GAAG6/C,QAASv6B,CAAAA,GAAG,CAACk8B,SAAUxhD,CAAAA,CAAC,GAAG6/C,QAASv6B,CAAAA,GAAG,CAACm8B,SAAUzhD,CAAAA,CAAC,GAAG6/C,QAASv6B,CAAAA,GAAG,CAACo8B,SAAAA,CAAU1hD,CAAC,CAAA,CAAA;gBACzG0iD,WAAe,IAAA,CAAA,CAAA;AACf,gBAAA,MAAA;AACF,YAAA,KAAA,CAAA;gBACE3C,SAAUz6B,CAAAA,GAAG,CAACy3B,YAAAA,GAAezzC,MAASy2C,CAAAA,EAAAA,SAAAA,CAAUz6B,GAAG,CAAC08B,MAASjC,CAAAA,EAAAA,SAAAA,CAAUz6B,GAAG,CAACpoB,MAAS6kD,GAAAA,MAAAA,CAAAA,CAAAA;AACpFhC,gBAAAA,SAAAA,CAAUz6B,GAAG,CAACpoB,MAAAA,GAAS6/C,YAAgB,IAAA,IAAI1zC,GAAE,CAAA,CAAA,CAAA;AAC7Cw2C,gBAAAA,QAAAA,CAASv6B,GAAG,CAACi8B,SAAAA,CAAUvhD,CAAC,CAAA,EAAG6/C,SAASv6B,GAAG,CAACk8B,SAAUxhD,CAAAA,CAAC,GAAG6/C,QAASv6B,CAAAA,GAAG,CAACq9B,GAAM9C,CAAAA,EAAAA,QAAAA,CAASv6B,GAAG,CAACq9B,GAAAA,CAAAA,CAAAA;gBACtF9C,QAASv6B,CAAAA,GAAG,CAACm8B,SAAUzhD,CAAAA,CAAC,GAAG6/C,QAASv6B,CAAAA,GAAG,CAACo8B,SAAAA,CAAU1hD,CAAC,CAAA,CAAA;gBACnD0iD,WAAe,IAAA,CAAA,CAAA;AACf,gBAAA,MAAA;AACF,YAAA,KAAA,CAAA;AACE3R,gBAAAA,KAAAA,GAAQ7zC,MAAU+kD,IAAAA,OAAUO,GAAAA,YAAAA,GAAeN,OAAM,CAAA,CAAA;gBACjDnC,SAAUz6B,CAAAA,GAAG,CAACy3B,YAAezzC,GAAAA,MAAAA,GAASynC,QAAQgP,SAAUz6B,CAAAA,GAAG,CAAC08B,MAASjR,GAAAA,KAAAA,CAAAA,CAAAA;AACrE8O,gBAAAA,QAAAA,CAASv6B,GAAG,CAACi8B,SAAUvhD,CAAAA,CAAC,GAAG6/C,QAASv6B,CAAAA,GAAG,CAACk8B,SAAAA,CAAUxhD,CAAC,CAAG6/C,EAAAA,QAAAA,CAASv6B,GAAG,CAACk8B,UAAUxhD,CAAC,CAAA,CAAA;gBAC9E0iD,WAAe,IAAA,CAAA,CAAA;gBACf,IAAK,IAAIlsD,KAAI,CAAG4qD,EAAAA,EAAAA,GAAIoB,eAAe,CAAGhsD,EAAAA,EAAAA,GAAI4qD,IAAG5qD,EAAK,EAAA,CAAA;oBAChDupD,SAAUz6B,CAAAA,GAAG,CAAC08B,MAAS,GAACxrD,CAAAA,EAAI,GAAA,CAAA,IAAK0rD,OAAUnR,GAAAA,KAAAA,CAAAA,CAAAA;oBAC3C8O,QAASv6B,CAAAA,GAAG,CAACm8B,SAAUzhD,CAAAA,CAAC,GAAG6/C,QAASv6B,CAAAA,GAAG,CAACk8B,SAAAA,CAAUxhD,CAAC,CAAA,CAAA;oBACnD0iD,WAAe,IAAA,CAAA,CAAA;AACjB,iBAAA;AACA3C,gBAAAA,SAAAA,CAAUz6B,GAAG,CAACpoB,MAAS6kD,GAAAA,MAAAA,GAAShR,KAAQgP,CAAAA,EAAAA,SAAAA,CAAUz6B,GAAG,CAACpoB,MAAS6/C,GAAAA,YAAAA,IAAgB,CAAA,GAAI1zC,GAAE,CAAK0nC,GAAAA,KAAAA,CAAAA,CAAAA;AAC1F8O,gBAAAA,QAAAA,CAASv6B,GAAG,CAACm8B,SAAUzhD,CAAAA,CAAC,GAAG6/C,QAASv6B,CAAAA,GAAG,CAACm8B,SAAAA,CAAUzhD,CAAC,CAAG6/C,EAAAA,QAAAA,CAASv6B,GAAG,CAACo8B,UAAU1hD,CAAC,CAAA,CAAA;gBAC9E0iD,WAAe,IAAA,CAAA,CAAA;AACf,gBAAA,MAAA;AAGJ,SAAA;AAEA,QAAA,OAAOD,QAAWC,GAAAA,WAAAA,CAAAA;AACpB,KAAA,CAAA;AA3TW1D,IAAAA,oBAAAA,CA6TIkB,4BAyId,GAzID,SAAeA,6BACbt0C,MAAc,EACd3O,KAAa,EACbC,MAAc,EACdsiD,MAA+B,EAC/BO,SAAkC,EAClCJ,KAA8B,EAC9BE,QAAiC,EACjCC,cAAsB,EAAA;QAEtB,IAAQ/rC,SAAWnI,MAAXmI,CAAAA,MAAAA,CAAAA;QACR,IAAMwoC,eAAAA,GAAkB3wC,OAAO4J,aAAa,EAAA,CAAA;QAC5C,IAA+B+mC,iBAAAA,GAAAA,eAAe,CAAC,CAAE,CAAA,EAAzCx8C,IAAGmO,GAAoBquC,iBAAvBx8C,CAAAA,CAAAA,EAASC,MAAGsJ,GAAWizC,iBAAdv8C,CAAAA,CAAAA,CAAAA;QACjB,IAA6Bu8C,kBAAAA,GAAAA,eAAe,CAAC,CAAE,CAAA,EAAvCx8C,KAAGyW,GAAkB+lC,kBAArBx8C,CAAAA,CAAAA,EAAUC,GAAGqJ,GAAQkzC,kBAAXv8C,CAAAA,CAAAA,CAAAA;QAClB,IAAqD4L,eAAAA,GAAAA,MAAO8J,CAAAA,OAAO,EAA5D6rC,EAAAA,SAAAA,GAA8C31C,oBAAnC41C,SAAmC51C,GAAAA,eAAAA,CAAAA,CAAAA,CAAAA,EAAxB61C,SAAwB71C,GAAAA,eAAAA,CAAAA,CAAAA,CAAAA,EAAb81C,SAAa91C,GAAAA,eAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AACrD,QAAA,IAAQ3O,WAA6C2O,GAAAA,MAAAA,CAA7C3O,KAAoBC,EAAQ6/C,eAAiBnxC,MAAzB1O,CAAAA,MAAAA,CAAAA;QAC5B,IAAMykD,MAAAA,GAAS1E,WAAclpC,GAAAA,MAAAA,CAAOhU,CAAC,CAAA;QACrC,IAAM6hD,MAAAA,GAAS3E,WAAclpC,GAAAA,MAAAA,CAAOiC,CAAC,CAAA;AACrC,QAAA,IAAM6rC,UAAUF,MAASC,GAAAA,MAAAA,CAAAA;AACzB,QAAA,IAAME,UAAU7E,WAAc4E,GAAAA,OAAAA,CAAAA;QAC9B,IAAME,MAAAA,GAAShF,YAAehpC,GAAAA,MAAAA,CAAOlS,CAAC,CAAA;QACtC,IAAMmgD,MAAAA,GAASjF,YAAehpC,GAAAA,MAAAA,CAAO/T,CAAC,CAAA;AACtC,QAAA,IAAMiiD,UAAUF,MAASC,GAAAA,MAAAA,CAAAA;AACzB,QAAA,IAAME,UAAUnF,YAAekF,GAAAA,OAAAA,CAAAA;AAC/B,QAAA,IAAIE,KAAkBC,EAAAA,KAAAA,CAAAA;AACtB,QAAA,IAAIC,UAAoBC,EAAAA,UAAAA,CAAAA;AACxB,QAAA,IAAIC,YAAsBC,EAAAA,YAAAA,CAAAA;AAC1B,QAAA,IAAIX,WAAW5kD,KAAO,EAAA;YACpBolD,UAAa,GAAA,CAAA,CAAA;AACbF,YAAAA,KAAAA,GAAAA,CAAAA,CAAAA;SACK,MAAA;YACL,IAAIL,OAAAA,GAAUjqC,mBAASi5B,CAAAA,aAAa,EAAE;AACpCyR,gBAAAA,YAAAA,GAAe,CAACtlD,KAAQ4kD,GAAAA,OAAM,IAAKC,OAAAA,CAAAA;gBACnCO,UAAa,GAAA,CAAA,IAAKE,YAAAA,GAAe,CAAA,CAAA,CAAA;AACjCJ,gBAAAA,KAAAA,GAAAA,CAAAA,CAAAA;aACK,MAAA;gBACLE,UAAa,GAAA,CAAA,CAAA;AACbF,gBAAAA,KAAAA,GAAAA,CAAAA,CAAAA;AACF,aAAA;AACF,SAAA;AAEA,QAAA,IAAIF,WAAW/kD,MAAQ,EAAA;YACrBolD,UAAa,GAAA,CAAA,CAAA;AACbF,YAAAA,KAAAA,GAAAA,CAAAA,CAAAA;SACK,MAAA;YACL,IAAIF,OAAAA,GAAUrqC,mBAASi5B,CAAAA,aAAa,EAAE;AACpC0R,gBAAAA,YAAAA,GAAe,CAACtlD,MAAS+kD,GAAAA,OAAM,IAAKC,OAAAA,CAAAA;gBACpCI,UAAa,GAAA,CAAA,IAAKE,YAAAA,GAAe,CAAA,CAAA,CAAA;AACjCJ,gBAAAA,KAAAA,GAAAA,CAAAA,CAAAA;aACK,MAAA;gBACLE,UAAa,GAAA,CAAA,CAAA;AACbF,gBAAAA,KAAAA,GAAAA,CAAAA,CAAAA;AACF,aAAA;AACF,SAAA;AAEA,QAAA,IAAIK,QAAW,GAAA,CAAA,CAAA;AACf,QAAA,IAAIC,WAAc,GAAA,CAAA,CAAA;QAElB,IAAKL,CAAAA,UAAAA,GAAa,CAAA,KAAMC,UAAa,GAAA,CAAA,CAAK,GAAA,CAAA,GAAIxC,cAAgB,EAAA;AAC5DN,YAAAA,MAAAA,CAAOl6B,GAAG,CAACroB,KAAAA,GAAQiR,OAAOsxC,MAAOl6B,CAAAA,GAAG,CAACroB,KAAQuZ,GAAAA,KAAAA,CAAAA,CAAAA;AAC7CupC,YAAAA,SAAAA,CAAUz6B,GAAG,CAACpoB,MAAAA,GAASoM,SAASy2C,SAAUz6B,CAAAA,GAAG,CAACpoB,MAASmM,GAAAA,GAAAA,CAAAA,CAAAA;YACvDs2C,KAAMr6B,CAAAA,GAAG,CAACi8B,SAAUxhD,CAAAA,CAAC,GAAG4/C,KAAMr6B,CAAAA,GAAG,CAACo8B,SAAAA,CAAU3hD,CAAC,CAAA,CAAA;YAC7C8/C,QAASv6B,CAAAA,GAAG,CAACi8B,SAAUvhD,CAAAA,CAAC,GAAG6/C,QAASv6B,CAAAA,GAAG,CAACo8B,SAAAA,CAAU1hD,CAAC,CAAA,CAAA;YACnDyiD,QAAY,IAAA,CAAA,CAAA;YACZC,WAAe,IAAA,CAAA,CAAA;AACfhoD,YAAAA,MAAAA,CAAOF,IAAI,CAAC,iDAAC,GAAiDslD,cAAe,GAAA,IAAA,CAAA,CAAA;AAC7E,YAAA,OAAO2C,QAAWC,GAAAA,WAAAA,CAAAA;AACpB,SAAA;QAEA,OAAQP,KAAAA;AACN,YAAA,KAAA,CAAA;AACE,gBAAA,IAAMpR,QAAQ9zC,KAAQ4kD,GAAAA,OAAAA,CAAAA;gBACtBrC,MAAOl6B,CAAAA,GAAG,CAAC23B,WAAc/uC,GAAAA,IAAAA,GAAO6iC,QAAQyO,MAAOl6B,CAAAA,GAAG,CAACq8B,MAAS5Q,GAAAA,KAAAA,CAAAA,CAAAA;AAC5DyO,gBAAAA,MAAAA,CAAOl6B,GAAG,CAACroB,KAAAA,GAAQggD,eAAe,CAAA,GAAIzmC,KAAI,CAAKu6B,GAAAA,KAAAA,CAAAA,CAAAA;gBAC/C4O,KAAMr6B,CAAAA,GAAG,CAACi8B,SAAUxhD,CAAAA,CAAC,GAAG4/C,KAAMr6B,CAAAA,GAAG,CAACk8B,SAAUzhD,CAAAA,CAAC,GAAG4/C,KAAMr6B,CAAAA,GAAG,CAACm8B,SAAU1hD,CAAAA,CAAC,GAAG4/C,KAAMr6B,CAAAA,GAAG,CAACo8B,SAAAA,CAAU3hD,CAAC,CAAA,CAAA;gBAC7F0iD,QAAY,IAAA,CAAA,CAAA;AACZ,gBAAA,MAAA;AACF,YAAA,KAAA,CAAA;gBACEjD,MAAOl6B,CAAAA,GAAG,CAAC23B,WAAAA,GAAc/uC,IAAOsxC,CAAAA,EAAAA,MAAAA,CAAOl6B,GAAG,CAACq8B,MAASnC,CAAAA,EAAAA,MAAAA,CAAOl6B,GAAG,CAACroB,KAAQ2kD,GAAAA,MAAAA,CAAAA,CAAAA;AACvEpC,gBAAAA,MAAAA,CAAOl6B,GAAG,CAACroB,KAAAA,GAAQggD,WAAe,IAAA,IAAIzmC,KAAI,CAAA,CAAA,CAAA;AAC1CmpC,gBAAAA,KAAAA,CAAMr6B,GAAG,CAACi8B,SAAAA,CAAUxhD,CAAC,CAAA,EAAG4/C,MAAMr6B,GAAG,CAACk8B,SAAUzhD,CAAAA,CAAC,GAAG4/C,KAAMr6B,CAAAA,GAAG,CAACq9B,GAAMhD,CAAAA,EAAAA,KAAAA,CAAMr6B,GAAG,CAACq9B,GAAAA,CAAAA,CAAAA;gBAC1EhD,KAAMr6B,CAAAA,GAAG,CAACm8B,SAAU1hD,CAAAA,CAAC,GAAG4/C,KAAMr6B,CAAAA,GAAG,CAACo8B,SAAAA,CAAU3hD,CAAC,CAAA,CAAA;gBAC7C0iD,QAAY,IAAA,CAAA,CAAA;AACZ,gBAAA,MAAA;AACF,YAAA,KAAA,CAAA;AACEjD,gBAAAA,MAAAA,CAAOl6B,GAAG,CAAC23B,WAAAA,GAAc/uC,IAAOsxC,CAAAA,EAAAA,MAAAA,CAAOl6B,GAAG,CAACq8B,MAAAA,CAAAA,CAAAA;AAC3ChC,gBAAAA,KAAAA,CAAMr6B,GAAG,CAACi8B,SAAUxhD,CAAAA,CAAC,GAAG4/C,KAAMr6B,CAAAA,GAAG,CAACk8B,SAAAA,CAAUzhD,CAAC,CAAG4/C,EAAAA,KAAAA,CAAMr6B,GAAG,CAACk8B,UAAUzhD,CAAC,CAAA,CAAA;gBACrE0iD,QAAY,IAAA,CAAA,CAAA;AACZ,gBAAA,IAAMG,eAAeL,YAAe,GAAA,CAAA,CAAA;AACpC,gBAAA,IAAK,IAAI/rD,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAIosD,cAAcpsD,CAAK,EAAA,CAAA;AACrCgpD,oBAAAA,MAAAA,CAAOl6B,GAAG,CAACq8B,MAAAA,GAAS,CAACnrD,CAAAA,GAAI,CAAA,IAAKsrD,OAAAA,CAAAA,CAAAA;oBAC9BnC,KAAMr6B,CAAAA,GAAG,CAACm8B,SAAU1hD,CAAAA,CAAC,GAAG4/C,KAAMr6B,CAAAA,GAAG,CAACk8B,SAAAA,CAAUzhD,CAAC,CAAA,CAAA;oBAC7C0iD,QAAY,IAAA,CAAA,CAAA;AACd,iBAAA;gBACAjD,MAAOl6B,CAAAA,GAAG,CAACroB,KAAAA,GAAQ2kD,MAASpC,CAAAA,EAAAA,MAAAA,CAAOl6B,GAAG,CAACroB,KAAQggD,GAAAA,WAAAA,IAAe,CAAA,GAAIzmC,KAAI,CAAA,CAAA,CAAA;AACtEmpC,gBAAAA,KAAAA,CAAMr6B,GAAG,CAAEm8B,CAAAA,SAAAA,CAAU1hD,CAAC,GAAGyhD,SAAAA,CAAUzhD,CAAAA,KAAMwiD,YAAAA,GAAeK,YAAW,CAAA,GAAKpB,UAAUzhD,CAAC,CAAA,CAAA;gBACnF4/C,KAAMr6B,CAAAA,GAAG,CAACm8B,SAAU1hD,CAAAA,CAAC,GAAG4/C,KAAMr6B,CAAAA,GAAG,CAACo8B,SAAAA,CAAU3hD,CAAC,CAAA,CAAA;gBAC7C0iD,QAAY,IAAA,CAAA,CAAA;AACZ,gBAAA,MAAA;AAGJ,SAAA;QAEA,OAAQL,KAAAA;AACN,YAAA,KAAA,CAAA;AACE,gBAAA,IAAMrR,SAAQ7zC,MAAS+kD,GAAAA,OAAAA,CAAAA;gBACvBlC,SAAUz6B,CAAAA,GAAG,CAACy3B,YAAezzC,GAAAA,MAAAA,GAASynC,SAAQgP,SAAUz6B,CAAAA,GAAG,CAAC08B,MAASjR,GAAAA,MAAAA,CAAAA,CAAAA;AACrEgP,gBAAAA,SAAAA,CAAUz6B,GAAG,CAACpoB,MAAAA,GAAS6/C,gBAAgB,CAAA,GAAI1zC,GAAE,CAAK0nC,GAAAA,MAAAA,CAAAA,CAAAA;gBAClD8O,QAASv6B,CAAAA,GAAG,CAACi8B,SAAUvhD,CAAAA,CAAC,GAAG6/C,QAASv6B,CAAAA,GAAG,CAACk8B,SAAUxhD,CAAAA,CAAC,GAAG6/C,QAASv6B,CAAAA,GAAG,CAACm8B,SAAUzhD,CAAAA,CAAC,GAAG6/C,QAASv6B,CAAAA,GAAG,CAACo8B,SAAAA,CAAU1hD,CAAC,CAAA,CAAA;gBACzG0iD,WAAe,IAAA,CAAA,CAAA;AACf,gBAAA,MAAA;AACF,YAAA,KAAA,CAAA;gBACE3C,SAAUz6B,CAAAA,GAAG,CAACy3B,YAAAA,GAAezzC,MAASy2C,CAAAA,EAAAA,SAAAA,CAAUz6B,GAAG,CAAC08B,MAASjC,CAAAA,EAAAA,SAAAA,CAAUz6B,GAAG,CAACpoB,MAAS6kD,GAAAA,MAAAA,CAAAA,CAAAA;AACpFhC,gBAAAA,SAAAA,CAAUz6B,GAAG,CAACpoB,MAAAA,GAAS6/C,YAAgB,IAAA,IAAI1zC,GAAE,CAAA,CAAA,CAAA;AAC7Cw2C,gBAAAA,QAAAA,CAASv6B,GAAG,CAACi8B,SAAAA,CAAUvhD,CAAC,CAAA,EAAG6/C,SAASv6B,GAAG,CAACk8B,SAAUxhD,CAAAA,CAAC,GAAG6/C,QAASv6B,CAAAA,GAAG,CAACq9B,GAAM9C,CAAAA,EAAAA,QAAAA,CAASv6B,GAAG,CAACq9B,GAAAA,CAAAA,CAAAA;gBACtF9C,QAASv6B,CAAAA,GAAG,CAACm8B,SAAUzhD,CAAAA,CAAC,GAAG6/C,QAASv6B,CAAAA,GAAG,CAACo8B,SAAAA,CAAU1hD,CAAC,CAAA,CAAA;gBACnD0iD,WAAe,IAAA,CAAA,CAAA;AACf,gBAAA,MAAA;AACF,YAAA,KAAA,CAAA;AACE3C,gBAAAA,SAAAA,CAAUz6B,GAAG,CAACy3B,YAAAA,GAAezzC,MAASy2C,CAAAA,EAAAA,SAAAA,CAAUz6B,GAAG,CAAC08B,MAAAA,CAAAA,CAAAA;AACpDnC,gBAAAA,QAAAA,CAASv6B,GAAG,CAACi8B,SAAUvhD,CAAAA,CAAC,GAAG6/C,QAASv6B,CAAAA,GAAG,CAACk8B,SAAAA,CAAUxhD,CAAC,CAAG6/C,EAAAA,QAAAA,CAASv6B,GAAG,CAACk8B,UAAUxhD,CAAC,CAAA,CAAA;gBAC9E0iD,WAAe,IAAA,CAAA,CAAA;AACf,gBAAA,IAAME,gBAAeJ,YAAe,GAAA,CAAA,CAAA;AACpC,gBAAA,IAAK,IAAIhsD,EAAAA,GAAI,CAAGA,EAAAA,EAAAA,GAAIosD,eAAcpsD,EAAK,EAAA,CAAA;AACrCupD,oBAAAA,SAAAA,CAAUz6B,GAAG,CAAC08B,MAAAA,GAAS,CAACxrD,EAAAA,GAAI,CAAA,IAAK0rD,OAAAA,CAAAA,CAAAA;oBACjCrC,QAASv6B,CAAAA,GAAG,CAACm8B,SAAUzhD,CAAAA,CAAC,GAAG6/C,QAASv6B,CAAAA,GAAG,CAACk8B,SAAAA,CAAUxhD,CAAC,CAAA,CAAA;oBACnD0iD,WAAe,IAAA,CAAA,CAAA;AACjB,iBAAA;gBACA3C,SAAUz6B,CAAAA,GAAG,CAACpoB,MAAAA,GAAS6kD,MAAShC,CAAAA,EAAAA,SAAAA,CAAUz6B,GAAG,CAACpoB,MAAS6/C,GAAAA,YAAAA,IAAgB,CAAA,GAAI1zC,GAAE,CAAA,CAAA,CAAA;AAC7Ew2C,gBAAAA,QAAAA,CAASv6B,GAAG,CAAEm8B,CAAAA,SAAAA,CAAUzhD,CAAC,GAAGwhD,SAAAA,CAAUxhD,CAAAA,KAAMwiD,YAAAA,GAAeI,aAAW,CAAA,GAAKpB,UAAUxhD,CAAC,CAAA,CAAA;gBACtF6/C,QAASv6B,CAAAA,GAAG,CAACm8B,SAAUzhD,CAAAA,CAAC,GAAG6/C,QAASv6B,CAAAA,GAAG,CAACo8B,SAAAA,CAAU1hD,CAAC,CAAA,CAAA;gBACnD0iD,WAAe,IAAA,CAAA,CAAA;AACf,gBAAA,MAAA;AAGJ,SAAA;AACA,QAAA,OAAOD,QAAWC,GAAAA,WAAAA,CAAAA;AACpB,KAAA,CAAA;AAtcW1D,IAAAA,OAAAA,oBAAAA,CAAAA;AAucZ,CAAA,EAAA,CAAA;AAvcYA,oBAAAA,CACJ/Q,eAAe,IAAI9G,iBAAAA,EAAAA,CAAAA;AADf6X,oBAAAA,CAEJO,UAAU,IAAIzB,eAAAA,EAAAA,CAAAA;AAFVkB,oBAAAA,CAGJS,aAAa,IAAI3B,eAAAA,EAAAA,CAAAA;AAHbkB,oBAAAA,CAIJU,SAAS,IAAI5B,eAAAA,EAAAA,CAAAA;AAJTkB,oBAAAA,CAKJY,YAAY,IAAI9B,eAAAA,EAAAA,CAAAA;;;;;ACEzB;;IAGO,IAAM+E,cAAN,iBAAA,SAAA,QAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,cAAAA,EAAAA,QAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,cAAAA,CAkPCrY,MAAc,EAAA;;gBACxB,QAAMA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,CAAAA,IAAAA,IAAAA,EAAAA,KAAAA,CAtOAsY,SAA4B32C,GAAAA,cAAAA,CAAe42C,UAAU,EAAA,KAAA,CAErDC,uBAAkC,GAAA,GAAA,EAAA,KAAA,CAGlCC,MAAgB,GAAA,IAAIt7B,gBAAM,CAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,UAEnCu7B,OAAkB,GAAA,IAAA,EAAA,KAAA,CAGlBlvC,eAA0B,GAAA,CAAA,EAAA,KAAA,CAE1BC,gBAA2B,GAAA,CAAA,EAAA,KAAA,CAE3BC,YAAuBxe,GAAAA,SAAAA,EAAAA,KAAAA,CAEvBye,aAAwBze,GAAAA,SAAAA,EAAAA,KAAAA,CAExBytD,MAAkB,GAAA,KAAA,EAAA,KAAA,CAElBC,MAAkB,GAAA,KAAA,CAAA;QAmNxB,KAAKC,CAAAA,QAAQ,GAAGn3C,cAAAA,CAAeo3C,MAAM,CAAA;AACrC,QAAA,KAAA,CAAKtuC,gBAAgB,IAAA,CAAA,CAAA;AACrB,QAAA,KAAA,CAAKqiC,WAAW,CAAC,KAAA,CAAKlgD,OAAO,CAAC83B,eAAe,CAACs0B,qBAAqB,CAAA,CAAA;AACnE,QAAA,KAAA,CAAKC,eAAe,GAAG,KAAKA,CAAAA,eAAe,CAAClpD,IAAI,CAAA,KAAA,CAAA,CAAA;;AAEhD,QAAA,KAAA,CAAK2oD,MAAM,CAAC5tC,eAAe,GAAG,KAAKouC,CAAAA,eAAe,CAACnpD,IAAI,CAAA,KAAA,CAAA,CAAA;;;AAzP9CuoD,IAAAA,IAAAA,MAAAA,GAAAA,cAAAA,CAAAA,SAAAA,CAAAA;AA4PX;;MAGA,MAAA,CAASzJ,0BAGR,GAHD,SAASA,2BAA2Bz1C,OAAsB,EAAE01C,OAAgB,EAAEC,OAAgB,EAAA;;QAE5F,QAAMF,CAAAA,SAAAA,CAAAA,0BAAD,CAA4Bz1C,IAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EAAS01C,OAAS,EAAA,IAAA,CAAA,CAAA;AACrD,KAAA,CAAA;AAEA;;MAGA,MAAA,CAAS1iD,QAKR,GALD,SAASA,SAAStD,MAAsB,EAAEiC,OAAe,EAAEC,UAAkB,EAAA;QAC3E,QAAMoB,CAAAA,SAAAA,CAAAA,QAAD,CAAUtD,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAAQiC,OAASC,EAAAA,UAAAA,CAAAA,CAAAA;QAChClC,MAAOqwD,CAAAA,UAAU,CAACnI,SAAS,CAACloD,MAAAA,CAAAA,CAAAA;AAC5BA,QAAAA,MAAAA,CAAOuY,MAAM,GAAG,IAAI,CAACs3C,OAAO,CAAA;AAC5B7vD,QAAAA,MAAAA,CAAOgwD,QAAQ,GAAG,IAAI,CAACM,SAAS,CAAA;AAClC,KAAA,CAAA;AAEA;;AAEC,MACD,OAASjK,SAER,GAFD,SAASA,SAAUhR,CAAAA,QAA0B,EAAEC,QAA0B,EAAA;QACvE,OAAOH,UAAAA,CAAWC,cAAc,CAACC,QAAUC,EAAAA,QAAAA,CAAAA,CAAAA;AAC7C,KAAA,CAAA;AAEA;;AAEC,MACD,OAASgR,MAER,GAFD,SAASA,MAAOjR,CAAAA,QAA0B,EAAEC,QAA2B,EAAA;QACrEH,UAAWoB,CAAAA,UAAU,CAAClB,QAAUC,EAAAA,QAAAA,CAAAA,CAAAA;AAClC,KAAA,CAAA;AAEA;;MAGA8S,MAAAA,CAAAA,gBAEC,GAFDA,SAAAA,gBAAAA,GAAAA;AACE,QAAA,OAAO,IAAI,CAAC1kD,MAAM,CAAC6sD,eAAe,CAACC,uBAAuB,CAAA;AAC5D,KAAA,CAAA;AAEA,IAAA,MAAA,CAAmBjJ,aAOlB,GAPD,SAAmBA,aAAAA,CAAcC,WAAwB,EAAA;QACvD,IAAI,IAAI,CAACjvC,MAAM,EAAE;AACf,YAAA,IAAI,CAAC83C,UAAU,CAAC3H,eAAe,CAAC,IAAI,CAAA,CAAA;SAC/B,MAAA;AACLlB,YAAAA,WAAAA,CAAYnkC,GAAG,CAACniB,GAAG,CAAC,GAAG,CAAG,EAAA,CAAA,CAAA,CAAA;AAC1BsmD,YAAAA,WAAAA,CAAYn+C,GAAG,CAACnI,GAAG,CAAC,GAAG,CAAG,EAAA,CAAA,CAAA,CAAA;AAC5B,SAAA;AACF,KAAA,CAAA;AAEA,IAAA,MAAA,CAAmB2kD,OA0ClB,GA1CD,SAAmBA,OAAAA,CAAQv1C,OAAsB,EAAA;AAC1C,QAAA,IAAA,YAAA,CAAA;AAAL,QAAA,IAAI,GAAC,YAAA,GAAA,IAAI,CAACiI,MAAM,KAAA,IAAA,GAAA,KAAA,CAAA,GAAX,aAAa5Y,OAAO,CAAA,IAAI,CAAC,IAAI,CAACiK,KAAK,IAAI,CAAC,IAAI,CAACC,MAAM,EAAE;AACxD,YAAA,OAAA;AACF,SAAA;QAEA,IAAIqsC,QAAAA,GAAW,IAAI,CAAC6N,WAAW,EAAA,CAAA;AAC/B,QAAA,IAAI,CAAC7N,QAAU,EAAA;AACb,YAAA,OAAA;AACF,SAAA;;QAEA,IAAIA,QAAAA,CAAS9xC,SAAS,EAAE;AACtB8xC,YAAAA,QAAAA,GAAW,IAAI,CAACpyC,OAAO,CAAC83B,eAAe,CAACs0B,qBAAqB,CAAA;AAC/D,SAAA;;AAGA,QAAA,IAAI,IAAI,CAACvuC,gBAAgB,GAAGomC,mBAAAA,CAAoB0I,WAAW,EAAE;AAC3D,YAAA,IAAI,CAACJ,UAAU,CAAC3H,eAAe,CAAC,IAAI,CAAA,CAAA;AACpC,YAAA,IAAI,CAAC/mC,gBAAgB,IAAI,CAAComC,oBAAoB0I,WAAW,CAAA;AAC3D,SAAA;;QAGA,IAAI,IAAI,CAAC9uC,gBAAgB,GAAiC,CAAA,EAAA;AACxD,YAAA,IAAI,CAAC0uC,UAAU,CAAChH,SAAS,CAAC,IAAI,CAAA,CAAA;YAC9B,IAAI,CAAC1nC,gBAAgB,IAAI,CAAA,CAAA,CAAA;AAC3B,SAAA;;QAGA,IAAI,IAAI,CAACA,gBAAgB,GAAoC,CAAA,EAAA;AAC3D,YAAA,IAAI,CAAC0uC,UAAU,CAAC9G,WAAW,CAAC,IAAI,CAAA,CAAA;YAChC,IAAI,CAAC5nC,gBAAgB,IAAI,CAAA,CAAA,CAAA;AAC3B,SAAA;;QAGA,IAAMmkC,MAAAA,GAASx1C,QAAQw1C,MAAM,CAAA;QAC7B,IAAMpiD,MAAAA,GAASoiD,OAAOpiD,MAAM,CAAA;AAC5B,QAAA,IAAMgtD,aAAgBhtD,GAAAA,MAAAA,CAAOitD,kBAAkB,CAAC7vD,GAAG,EAAA,CAAA;QACnD4vD,aAAcxvD,CAAAA,GAAG,CAAC,IAAI,CAAC2mD,QAAQ,EAAE,IAAI,CAACpC,gBAAgB,CAAA,CAAA;AACtD,QAAA,IAAMmL,gBAAmBltD,GAAAA,MAAAA,CAAOmtD,qBAAqB,CAAC/vD,GAAG,EAAA,CAAA;QACzD,IAAM20C,QAAAA,GAAW,IAAI,CAAC6S,SAAS,CAAA;AAC/BsI,QAAAA,gBAAAA,CAAiB1vD,GAAG,CAAC,IAAI,EAAEg1C,QAAUT,EAAAA,QAAAA,CAASC,KAAK,CAACob,SAAS,EAAErb,QAAAA,CAASmB,OAAO,EAAE,IAAI,CAACr+B,MAAM,CAAC5Y,OAAO,EAAE81C,QAAAA,CAAAA,CAAAA;AACtGib,QAAAA,aAAAA,CAAcK,mBAAmB,CAACH,gBAAAA,CAAAA,CAAAA;AAClC9K,QAAAA,MAAAA,CAAOkL,eAAe,CAACC,iBAAiB,CAAC3gD,OAASogD,EAAAA,aAAAA,CAAAA,CAAAA;AACpD,KAAA,CAAA;IAEA,MAAmB1sD,CAAAA,UAelB,GAfD,SAAmBA,UAAAA,GAAAA;QACjB,IAAMuU,MAAAA,GAAS,IAAI,CAACs3C,OAAO,CAAA;AAC3B,QAAA,IAAIt3C,MAAQ,EAAA;AACV,YAAA,IAAI,CAAC4/B,sBAAsB,CAAC5/B,MAAAA,EAAQ,CAAC,CAAA,CAAA,CAAA;AACrCA,YAAAA,MAAAA,CAAOqJ,kBAAkB,CAAC1B,cAAc,CAAC,IAAI,CAACiwC,eAAe,CAAA,CAAA;AAC/D,SAAA;AAEA,QAAA,QAAA,CAAA,SAAA,CAAMnsD,UAAD,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;QAEL,IAAI,CAAC6rD,OAAO,GAAG,IAAA,CAAA;QACf,IAAI,CAACQ,UAAU,GAAG,IAAA,CAAA;QAClB,IAAI,IAAI,CAAC/H,SAAS,EAAE;AAClB,YAAA,IAAI,CAACF,gBAAgB,EAAA,CAAGG,YAAY,CAAC,IAAI,CAACD,SAAS,CAAA,CAAA;YACnD,IAAI,CAACA,SAAS,GAAG,IAAA,CAAA;AACnB,SAAA;AACF,KAAA,CAAA;IAEA,MAAQ7lC,CAAAA,eASP,GATD,SAAQA,eAAAA,GAAAA;QACN,IAAMlK,MAAAA,GAAS,IAAI,CAACs3C,OAAO,CAAA;AAC3B,QAAA,IAAIt3C,MAAQ,EAAA;AACV,YAAA,IAAI,CAACoI,eAAe,GAAGpI,MAAAA,CAAO3O,KAAK,CAAA;AACnC,YAAA,IAAI,CAACgX,gBAAgB,GAAGrI,MAAAA,CAAO1O,MAAM,CAAA;SAChC,MAAA;AACL,YAAA,IAAI,CAAC8W,eAAe,GAAG,IAAI,CAACC,gBAAgB,GAAG,CAAA,CAAA;AACjD,SAAA;QACA,IAAI,CAACe,gBAAgB,IAAI,CAAA,CAAA,CAAA;AAC3B,KAAA,CAAA;AAEA,IAAA,MAAA,CACQwuC,eAsCP,GAvCD,SACQA,eAAAA,CAAgB/uD,IAAuB,EAAA;QAC7C,OAAQA,IAAAA;AACN,YAAA,KAAKmf,kBAAkB5gB,OAAO;AAC5B,gBAAA,IAAI,CAAC4rB,UAAU,CAAC0oB,UAAU,CAxXrBub,cAwXqC0B,CAAAA,gBAAgB,EAAE,IAAI,CAAC34C,MAAM,CAAC5Y,OAAO,CAAA,CAAA;AAC/E,gBAAA,MAAA;AACF,YAAA,KAAK4gB,kBAAkBvX,IAAI;AACzB,gBAAA,IAAgC,KAAA,GAAA,IAAI,EAAjBgnD,WAAa,KAAxBM,CAAAA,SAAAA,CAAAA;AACR,gBAAA,IAAI,CAAC3uC,gBAAgB,IAAA,CAAA,CAAA;AACrB,gBAAA,IAAI,IAAI,CAAC2uC,SAAS,KAAKz3C,cAAAA,CAAes4C,MAAM,EAAE;AAC5C,oBAAA,IAAI,CAACxvC,gBAAgB,IAAIomC,mBAAAA,CAAoB0I,WAAW,CAAA;AAC1D,iBAAA,MAAO,IAAIT,QAAAA,KAAan3C,cAAeu4C,CAAAA,KAAK,EAAE;AAC5C,oBAAA,IAAI,CAACzvC,gBAAgB,IAAI0vC,yBAAAA,CAA0BC,gBAAgB,CAAA;iBAC9D,MAAA;;;oBAGL,IAAI,IAAI,CAACzwC,YAAY,KAAKxe,aAAa,IAAI,CAACye,aAAa,KAAKze,SAAW,EAAA;AACvE,wBAAA,IAAI,CAACsf,gBAAgB,IAAIomC,mBAAAA,CAAoB0I,WAAW,CAAA;AAC1D,qBAAA;AACF,iBAAA;AACA,gBAAA,MAAA;AACF,YAAA,KAAKlwC,kBAAkBG,MAAM;AAC3B,gBAAA,IAAI,CAAC4vC,SAAS,KAAKz3C,cAAAA,CAAes4C,MAAM,KACrC,IAAI,CAACxvC,gBAAgB,IAAI0vC,yBAAAA,CAA0BC,gBAAgB,CAAD,CAAA;AACrE,gBAAA,MAAA;AACF,YAAA,KAAK/wC,kBAAkBE,MAAM,CAAA;AAC7B,YAAA,KAAKF,kBAAkBgD,iBAAiB;AACtC,gBAAA,IAAI,CAAC5B,gBAAgB,IAAI0vC,yBAAAA,CAA0BC,gBAAgB,CAAA;AACnE,gBAAA,MAAA;AACF,YAAA,KAAK/wC,kBAAkB+D,WAAW;AAChC,gBAAA,IAAI,CAAC3C,gBAAgB,IAAA,CAAA,CAAA;AACrB,gBAAA,MAAA;AACF,YAAA,KAAKpB,kBAAkBnC,KAAK;AAC1B,gBAAA,IAAI,CAACuD,gBAAgB,IAAIomC,mBAAAA,CAAoB0I,WAAW,CAAA;AACxD,gBAAA,MAAA;AACF,YAAA,KAAKlwC,kBAAkBxc,OAAO;gBAC5B,IAAI,CAACwU,MAAM,GAAG,IAAA,CAAA;AACd,gBAAA,MAAA;AACJ,SAAA;AACF,KAAA,CAAA;IAEA,MACQ63C,CAAAA,eAEP,GAHD,SACQA,eAAAA,GAAAA;AACN,QAAA,IAAI,CAACzuC,gBAAgB,IAAA,CAAA,CAAA;AACvB,KAAA,CAAA;AAhaW6tC,IAAAA,aAAAA,CAAAA,cAAAA,EAAAA;;YAsCPQ,GAAAA,EAAAA,UAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACM,SAAS,CAAA;AACvB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAa9qD,KAAqB,EAAA;AAChC,gBAAA,IAAI,IAAI,CAAC8qD,SAAS,KAAK9qD,KAAO,EAAA;oBAC5B,IAAI,CAAC8qD,SAAS,GAAG9qD,KAAAA,CAAAA;oBACjB,OAAQA,KAAAA;AACN,wBAAA,KAAKqT,eAAeo3C,MAAM;4BACxB,IAAI,CAACI,UAAU,GAAGpI,qBAAAA,CAAAA;AAClB,4BAAA,MAAA;AACF,wBAAA,KAAKpvC,eAAes4C,MAAM;4BACxB,IAAI,CAACd,UAAU,GAAG5G,qBAAAA,CAAAA;AAClB,4BAAA,MAAA;AACF,wBAAA,KAAK5wC,eAAeu4C,KAAK;4BACvB,IAAI,CAACf,UAAU,GAAG1E,oBAAAA,CAAAA;AAClB,4BAAA,MAAA;AAGJ,qBAAA;AACA,oBAAA,IAAI,CAAC0E,UAAU,CAACnI,SAAS,CAAC,IAAI,CAAA,CAAA;AAC9B,oBAAA,IAAI,CAACvmC,gBAAgB,IAAI0vC,yBAAAA,CAA0BE,UAAU,CAAA;AAC/D,iBAAA;AACF,aAAA;;;YAKIxF,GAAAA,EAAAA,UAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAAC0D,SAAS,CAAA;AACvB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAajqD,KAAqB,EAAA;AAChC,gBAAA,IAAI,IAAI,CAACiqD,SAAS,KAAKjqD,KAAO,EAAA;oBAC5B,IAAI,CAACiqD,SAAS,GAAGjqD,KAAAA,CAAAA;AACjB,oBAAA,IAAI,IAAI,CAACwqD,QAAQ,KAAKn3C,cAAAA,CAAeu4C,KAAK,EAAE;AAC1C,wBAAA,IAAI,CAACzvC,gBAAgB,IAAI0vC,yBAAAA,CAA0BE,UAAU,CAAA;AAC/D,qBAAA;AACF,iBAAA;AACF,aAAA;;;YAKIvF,GAAAA,EAAAA,wBAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAAC2D,uBAAuB,CAAA;AACrC,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAA2BnqD,KAAa,EAAA;AACtC,gBAAA,IAAIA,KAAU,KAAA,IAAI,CAACmqD,uBAAuB,EAAE;AAC1CnqD,oBAAAA,KAAAA,GAAQgf,mBAASC,CAAAA,KAAK,CAACjf,KAAAA,EAAO,CAAG,EAAA,CAAA,CAAA,CAAA;oBACjC,IAAI,CAACmqD,uBAAuB,GAAGnqD,KAAAA,CAAAA;AAC/B,oBAAA,IAAI,IAAI,CAACwqD,QAAQ,KAAKn3C,cAAAA,CAAeu4C,KAAK,EAAE;AAC1C,wBAAA,IAAI,CAACzvC,gBAAgB,IAAI0vC,yBAAAA,CAA0BE,UAAU,CAAA;AAC/D,qBAAA;AACF,iBAAA;AACF,aAAA;;;YAKIh5C,GAAAA,EAAAA,QAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACs3C,OAAO,CAAA;AACrB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAWrqD,KAAoB,EAAA;gBAC7B,IAAMgsD,UAAAA,GAAa,IAAI,CAAC3B,OAAO,CAAA;AAC/B,gBAAA,IAAI2B,eAAehsD,KAAO,EAAA;AACxB,oBAAA,IAAIgsD,UAAY,EAAA;AACd,wBAAA,IAAI,CAACrZ,sBAAsB,CAACqZ,UAAAA,EAAY,CAAC,CAAA,CAAA,CAAA;AACzCA,wBAAAA,UAAAA,CAAW5vC,kBAAkB,CAAC1B,cAAc,CAAC,IAAI,CAACiwC,eAAe,CAAA,CAAA;AACnE,qBAAA;AACA,oBAAA,IAAI,CAACxuC,gBAAgB,IAAA,EAAA,CAAA;AACrB,oBAAA,IAAInc,KAAO,EAAA;wBACT,IAAI,CAAC2yC,sBAAsB,CAAC3yC,KAAO,EAAA,CAAA,CAAA,CAAA;AACnCA,wBAAAA,KAAAA,CAAMoc,kBAAkB,CAAC5B,WAAW,CAAC,IAAI,CAACmwC,eAAe,CAAA,CAAA;wBACzD,IAAI,CAAC5kC,UAAU,CAAC0oB,UAAU,CAACub,cAAe0B,CAAAA,gBAAgB,EAAE1rD,KAAAA,CAAM7F,OAAO,CAAA,CAAA;qBACpE,MAAA;wBACL,IAAI,CAAC4rB,UAAU,CAAC0oB,UAAU,CAACub,cApHtBA,CAoHqC0B,gBAAgB,EAAE,IAAA,CAAA,CAAA;AAC9D,qBAAA;oBACA,IAAI,CAACrB,OAAO,GAAGrqD,KAAAA,CAAAA;AACjB,iBAAA;AACF,aAAA;;;YAKIgkD,GAAAA,EAAAA,OAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACoG,MAAM,CAAA;AACpB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAUpqD,KAAY,EAAA;AACpB,gBAAA,IAAI,IAAI,CAACoqD,MAAM,KAAKpqD,KAAO,EAAA;AACzB,oBAAA,IAAI,CAACoqD,MAAM,CAACvsD,QAAQ,CAACmC,KAAAA,CAAAA,CAAAA;AACvB,iBAAA;AACF,aAAA;;;YASIoE,GAAAA,EAAAA,OAAAA;;;;;;;MAAJ,SAAA,GAAA,GAAA;AACE,gBAAA,IAAI,IAAI,CAACiX,YAAY,KAAKxe,SAAW,EAAA;oBACnC,OAAO,IAAI,CAACwe,YAAY,CAAA;iBACnB,MAAA;AACL,oBAAA,IAAI,CAACc,gBAAgB,GAA8C,CAAA,IAAA,IAAI,CAACc,eAAe,EAAA,CAAA;oBACvF,OAAO,IAAI,CAAC9B,eAAe,CAAA;AAC7B,iBAAA;AACF,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAUnb,KAAa,EAAA;AACrB,gBAAA,IAAI,IAAI,CAACqb,YAAY,KAAKrb,KAAO,EAAA;oBAC/B,IAAI,CAACqb,YAAY,GAAGrb,KAAAA,CAAAA;AACpB,oBAAA,IAAI,CAACmc,gBAAgB,IACnB,IAAI,CAAC2uC,SAAS,KAAKz3C,cAAeu4C,CAAAA,KAAK,GACnCC,yBAAAA,CAA0BE,UAAU,GACpCxJ,oBAAoB0I,WAAW,CAAA;AACvC,iBAAA;AACF,aAAA;;;YASI5mD,GAAAA,EAAAA,QAAAA;;;;;;;MAAJ,SAAA,GAAA,GAAA;AACE,gBAAA,IAAI,IAAI,CAACiX,aAAa,KAAKze,SAAW,EAAA;oBACpC,OAAO,IAAI,CAACye,aAAa,CAAA;iBACpB,MAAA;AACL,oBAAA,IAAI,CAACa,gBAAgB,GAA8C,CAAA,IAAA,IAAI,CAACc,eAAe,EAAA,CAAA;oBACvF,OAAO,IAAI,CAAC7B,gBAAgB,CAAA;AAC9B,iBAAA;AACF,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAWpb,KAAa,EAAA;AACtB,gBAAA,IAAI,IAAI,CAACsb,aAAa,KAAKtb,KAAO,EAAA;oBAChC,IAAI,CAACsb,aAAa,GAAGtb,KAAAA,CAAAA;AACrB,oBAAA,IAAI,CAACmc,gBAAgB,IACnB,IAAI,CAAC2uC,SAAS,KAAKz3C,cAAeu4C,CAAAA,KAAK,GACnCC,yBAAAA,CAA0BE,UAAU,GACpCxJ,oBAAoB0I,WAAW,CAAA;AACvC,iBAAA;AACF,aAAA;;;YAKIzH,GAAAA,EAAAA,OAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAAC8G,MAAM,CAAA;AACpB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAUtqD,KAAc,EAAA;AACtB,gBAAA,IAAI,IAAI,CAACsqD,MAAM,KAAKtqD,KAAO,EAAA;oBACzB,IAAI,CAACsqD,MAAM,GAAGtqD,KAAAA,CAAAA;AACd,oBAAA,IAAI,CAACmc,gBAAgB,IAAIomC,mBAAAA,CAAoB0I,WAAW,CAAA;AAC1D,iBAAA;AACF,aAAA;;;YAKI3jD,GAAAA,EAAAA,OAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACijD,MAAM,CAAA;AACpB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAUvqD,KAAc,EAAA;AACtB,gBAAA,IAAI,IAAI,CAACuqD,MAAM,KAAKvqD,KAAO,EAAA;oBACzB,IAAI,CAACuqD,MAAM,GAAGvqD,KAAAA,CAAAA;AACd,oBAAA,IAAI,CAACmc,gBAAgB,IAAIomC,mBAAAA,CAAoB0I,WAAW,CAAA;AAC1D,iBAAA;AACF,aAAA;;;YAKIxa,GAAAA,EAAAA,WAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACsM,UAAU,CAAA;AACxB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAc/8C,KAAa,EAAA;gBACzB,IAAI,CAAC+8C,UAAU,GAAG/8C,KAAAA,CAAAA;AACpB,aAAA;;;YAKIuwC,GAAAA,EAAAA,iBAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACuM,gBAAgB,CAAA;AAC9B,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAoB98C,KAA4B,EAAA;AAC9C,gBAAA,IAAI,IAAI,CAAC88C,gBAAgB,KAAK98C,KAAO,EAAA;oBACnC,IAAI,CAAC88C,gBAAgB,GAAG98C,KAAAA,CAAAA;AAC1B,iBAAA;AACF,aAAA;;;AA7OWgqD,IAAAA,OAAAA,cAAAA,CAAAA;EAAuB51B,gBAianC,EAAA;AAhaC,iBADW41B,cAAAA,CAEJ0B,gBAAmC1nC,GAAAA,cAAAA,CAAezD,SAAS,CAAC,wBAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiarE;;IAGA,IAAA,yBAAKsrC,iBAAAA,SAAAA,yBAAAA,EAAAA;eACK,yBAAA,CAAA,yBAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,GAAA,IAAA,CAAA;kBAEG,yBAAA,CAAA,yBAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA,CAAA;2BAES,yBAAA,CAAA,yBAAA,CAAA,eAAA,CAAA,GAAA,CAAA,CAAA,GAAA,eAAA,CAAA;+BAEI,yBAAA,CAAA,yBAAA,CAAA,kBAAA,CAAA,GACLtJ,oBAAoB0I,WAAW,GAAA,CAAA,CAAA,GAAA,kBAAA,CAAA;uBAClC,yBAAA,CAAA,yBAAA,CAAA,YAAA,CAAA,GACHY,0BAA0BC,gBAAgB,GAAA,CAAA,CAAA,GAAA,YAAA,CAAA;gBAC9C,yBAAA,CAAA,yBAAA,CAAA,KAAA,CAAA,GAAA,EAAA,CAAA,GAAA,KAAA,CAAA;AAXND,IAAAA,OAAAA,yBAAAA,CAAAA;AAAAA,CAAAA,CAAAA,yBAAAA,IAAAA,EAAAA,CAAAA;;AC7bL;;IAGO,IAAKI,KAAAA,iBAAAA,SAAAA,KAAAA,EAAAA;oBACG,KAAA,CAAA,KAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;oBAEA,KAAA,CAAA,KAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;oBAEA,KAAA,CAAA,KAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;oBAEA,KAAA,CAAA,KAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;oBAEA,KAAA,CAAA,KAAA,CAAA,QAAA,CAAA,GAAA,EAAA,CAAA,GAAA,QAAA,CAAA;oBAEA,KAAA,CAAA,KAAA,CAAA,QAAA,CAAA,GAAA,EAAA,CAAA,GAAA,QAAA,CAAA;oBAEA,KAAA,CAAA,KAAA,CAAA,QAAA,CAAA,GAAA,EAAA,CAAA,GAAA,QAAA,CAAA;oBAEA,KAAA,CAAA,KAAA,CAAA,QAAA,CAAA,GAAA,GAAA,CAAA,GAAA,QAAA,CAAA;oBAEA,KAAA,CAAA,KAAA,CAAA,QAAA,CAAA,GAAA,GAAA,CAAA,GAAA,QAAA,CAAA;oBAEA,KAAA,CAAA,KAAA,CAAA,QAAA,CAAA,GAAA,GAAA,CAAA,GAAA,QAAA,CAAA;qBAEC,KAAA,CAAA,KAAA,CAAA,SAAA,CAAA,GAAA,IAAA,CAAA,GAAA,SAAA,CAAA;qBAEA,KAAA,CAAA,KAAA,CAAA,SAAA,CAAA,GAAA,IAAA,CAAA,GAAA,SAAA,CAAA;qBAEA,KAAA,CAAA,KAAA,CAAA,SAAA,CAAA,GAAA,IAAA,CAAA,GAAA,SAAA,CAAA;qBAEA,KAAA,CAAA,KAAA,CAAA,SAAA,CAAA,GAAA,IAAA,CAAA,GAAA,SAAA,CAAA;qBAEA,KAAA,CAAA,KAAA,CAAA,SAAA,CAAA,GAAA,KAAA,CAAA,GAAA,SAAA,CAAA;qBAEA,KAAA,CAAA,KAAA,CAAA,SAAA,CAAA,GAAA,KAAA,CAAA,GAAA,SAAA,CAAA;qBAEA,KAAA,CAAA,KAAA,CAAA,SAAA,CAAA,GAAA,KAAA,CAAA,GAAA,SAAA,CAAA;qBAEA,KAAA,CAAA,KAAA,CAAA,SAAA,CAAA,GAAA,MAAA,CAAA,GAAA,SAAA,CAAA;qBAEA,KAAA,CAAA,KAAA,CAAA,SAAA,CAAA,GAAA,MAAA,CAAA,GAAA,SAAA,CAAA;qBAEA,KAAA,CAAA,KAAA,CAAA,SAAA,CAAA,GAAA,MAAA,CAAA,GAAA,SAAA,CAAA;qBAEA,KAAA,CAAA,KAAA,CAAA,SAAA,CAAA,GAAA,OAAA,CAAA,GAAA,SAAA,CAAA;qBAEA,KAAA,CAAA,KAAA,CAAA,SAAA,CAAA,GAAA,OAAA,CAAA,GAAA,SAAA,CAAA;qBAEA,KAAA,CAAA,KAAA,CAAA,SAAA,CAAA,GAAA,OAAA,CAAA,GAAA,SAAA,CAAA;qBAEA,KAAA,CAAA,KAAA,CAAA,SAAA,CAAA,GAAA,OAAA,CAAA,GAAA,SAAA,CAAA;qBAEA,KAAA,CAAA,KAAA,CAAA,SAAA,CAAA,GAAA,QAAA,CAAA,GAAA,SAAA,CAAA;qBAEA,KAAA,CAAA,KAAA,CAAA,SAAA,CAAA,GAAA,QAAA,CAAA,GAAA,SAAA,CAAA;qBAEA,KAAA,CAAA,KAAA,CAAA,SAAA,CAAA,GAAA,QAAA,CAAA,GAAA,SAAA,CAAA;qBAEA,KAAA,CAAA,KAAA,CAAA,SAAA,CAAA,GAAA,SAAA,CAAA,GAAA,SAAA,CAAA;qBAEA,KAAA,CAAA,KAAA,CAAA,SAAA,CAAA,GAAA,SAAA,CAAA,GAAA,SAAA,CAAA;qBAEA,KAAA,CAAA,KAAA,CAAA,SAAA,CAAA,GAAA,SAAA,CAAA,GAAA,SAAA,CAAA;qBAEA,KAAA,CAAA,KAAA,CAAA,SAAA,CAAA,GAAA,UAAA,CAAA,GAAA,SAAA,CAAA;qBAEA,KAAA,CAAA,KAAA,CAAA,SAAA,CAAA,GAAA,UAAA,CAAA,GAAA,SAAA,CAAA;uBAEE,KAAA,CAAA,KAAA,CAAA,YAAA,CAAA,GAAA,UAAA,CAAA,GAAA,YAAA,CAAA;uBAEA,KAAA,CAAA,KAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA;AAnENA,IAAAA,OAAAA,KAAAA,CAAAA;AAqEX,CAAA,CAAA,EAAA;;AC9DD;;IAGO,IAAMC,aAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,aAAAA,GAAAA,EAAAA;AAUX;;;;;;;;;;;MAVWA,cAsBJC,uBA8BN,GA9BD,SAAOA,uBACLjuD,CAAAA,MAAc,EACdkuD,cAAgC,EAChChoD,KAAa,EACbC,MAAc,EACdF,MAAqB,EACrBgC,MAAe,EACfkmD,eAAgC,EAChCC,iBAAoC,EAAA;AAEpC,QAAA,IAAIF,cAAgB,EAAA;AAClB,YAAA,IACEA,eAAehoD,KAAK,KAAKA,KACzBgoD,IAAAA,cAAAA,CAAe/nD,MAAM,KAAKA,MAAAA,IAC1B+nD,cAAejoD,CAAAA,MAAM,KAAKA,MAC1BioD,IAAAA,cAAAA,CAAe5nD,WAAW,GAAG,MAAM2B,MACnC,EAAA;AACAimD,gBAAAA,cAAAA,CAAe7tD,OAAO,CAAC,IAAA,CAAA,CAAA;AACvB6tD,gBAAAA,cAAAA,GAAiB,IAAIlmD,SAAAA,CAAUhI,MAAQkG,EAAAA,KAAAA,EAAOC,QAAQF,MAAQgC,EAAAA,MAAAA,CAAAA,CAAAA;AAC9DimD,gBAAAA,cAAAA,CAAettD,WAAW,GAAG,IAAA,CAAA;AAC/B,aAAA;SACK,MAAA;AACLstD,YAAAA,cAAAA,GAAiB,IAAIlmD,SAAAA,CAAUhI,MAAQkG,EAAAA,KAAAA,EAAOC,QAAQF,MAAQgC,EAAAA,MAAAA,CAAAA,CAAAA;AAC9DimD,YAAAA,cAAAA,CAAettD,WAAW,GAAG,IAAA,CAAA;AAC/B,SAAA;AAEAstD,QAAAA,cAAAA,CAAexpD,SAAS,GAAGwpD,cAAetpD,CAAAA,SAAS,GAAGupD,eAAAA,CAAAA;AACtDD,QAAAA,cAAAA,CAAeppD,UAAU,GAAGspD,iBAAAA,CAAAA;QAE5B,OAAOF,cAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;;;;;;;;;;MAtDWF,aAoEJK,CAAAA,4BA4DN,GA5DD,SAAOA,4BACLruD,CAAAA,MAAc,EACdsuD,mBAAwC,EACxCpoD,KAAa,EACbC,MAAc,EACdooD,WAAiC,EACjCC,WAAiC,EACjCC,gBAAyB,EACzBxmD,MAAe,EACfnB,YAAoB,EACpBqnD,eAAgC,EAChCC,iBAAoC,EAAA;AAEpC,QAAA,IAAMM,mBAAiCJ,GAAAA,mBAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,mBAAqB5mD,CAAAA,eAAe,CAAC,CAAA,CAAA,CAAA;AAC5E,QAAA,IAAMJ,YAAeinD,GAAAA,WAAAA,GACjBP,aAnFKA,CAmFSC,uBAAuB,CACnCjuD,MACA0uD,EAAAA,mBAAAA,EACAxoD,KACAC,EAAAA,MAAAA,EACAooD,WACAtmD,EAAAA,MAAAA,EACAkmD,iBACAC,iBAEF,CAAA,GAAA,IAAA,CAAA;AAEJ,QAAA,IAAIK,gBAAkB,EAAA;YACpB,IAAME,mBAAAA,GAAiCL,mBAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,mBAAAA,CAAqBvmD,YAAY,CAAA;AACxE,YAAA,IAAM0mD,kBAAmBD,GAAAA,WAAAA,GACrBR,aAlGGA,CAkGWC,uBAAuB,CACnCjuD,MACA2uD,EAAAA,mBAAAA,EACAzoD,KACAC,EAAAA,MAAAA,EACAqoD,WACAvmD,EAAAA,MAAAA,EACAkmD,iBACAC,iBAEF,CAAA,GAAA,IAAA,CAAA;YAEJ,IAAIM,mBAAAA,KAAwBpnD,YAAgBqnD,IAAAA,mBAAAA,KAAwBF,kBAAkB,EAAA;gBACpFH,mBAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,mBAAAA,CAAqBjuD,OAAO,CAAC,IAAA,CAAA,CAAA;AAC7BiuD,gBAAAA,mBAAAA,GAAsB,IAAI3nD,YAAa3G,CAAAA,MAAAA,EAAQkG,KAAOC,EAAAA,MAAAA,EAAQmB,cAAcmnD,kBAAkB3nD,EAAAA,YAAAA,CAAAA,CAAAA;AAC9FwnD,gBAAAA,mBAAAA,CAAoB1tD,WAAW,GAAG,IAAA,CAAA;AACpC,aAAA;SACK,MAAA;YACL,IACE8tD,mBAAAA,KAAwBpnD,YACxBgnD,IAAAA,CAAAA,mBAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,mBAAAA,CAAqBtnD,YAAY,MAAKwnD,WACtCF,IAAAA,mBAAAA,CAAoBxnD,YAAY,KAAKA,YACrC,EAAA;gBACAwnD,mBAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,mBAAAA,CAAqBjuD,OAAO,CAAC,IAAA,CAAA,CAAA;AAC7BiuD,gBAAAA,mBAAAA,GAAsB,IAAI3nD,YAAa3G,CAAAA,MAAAA,EAAQkG,KAAOC,EAAAA,MAAAA,EAAQmB,cAAcknD,WAAa1nD,EAAAA,YAAAA,CAAAA,CAAAA;AACzFwnD,gBAAAA,mBAAAA,CAAoB1tD,WAAW,GAAG,IAAA,CAAA;AACpC,aAAA;AACF,SAAA;QAEA,OAAO0tD,mBAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;;;;;;AASC,MACD,aAAOM,CAAAA,WAmDN,GAnDD,SAAOA,WAAAA,CACL5uD,MAAc,EACd5B,MAAiB,EACjBywD,WAAgC,EAChC9lD,QAAoB,EACpB+lD,QAAiD,EACjDtc,QAAyB,EACzBuc,SAAa,EAAA;AAHbhmD,QAAAA,IAAAA,qBAAAA,QAAmB,GAAA,CAAA,CAAA;AACnB+lD,QAAAA,IAAAA,QAAAA,KAAAA,KAAAA,CAAAA,EAAAA,QAAAA,GAAoBd,aAjJXA,CAiJyBgB,eAAe,CAAA;AACjDxc,QAAAA,IAAAA,qBAAAA,QAAqB,GAAA,IAAA,CAAA;AACrBuc,QAAAA,IAAAA,sBAAAA,SAAY,GAAA,CAAA,CAAA;QAEZ,IAAM92B,cAAAA,GAAiBj4B,OAAOk4B,eAAe,CAAA;AAC7C,QAAA,IAAM+2B,WAAWJ,WAAc52B,GAAAA,cAAAA,CAAei3B,aAAa,GAAGj3B,eAAeg3B,QAAQ,CAAA;QACrF,IAAME,YAAAA,GAAe3c,QAAYva,IAAAA,cAAAA,CAAek3B,YAAY,CAAA;QAC5D,IAAM1/B,GAAAA,GAAMzvB,OAAOiF,iBAAiB,CAAA;QACpC,IAAM2H,OAAAA,GAAU5M,OAAO0sC,cAAc,CAAA;;QAGrC9/B,OAAQ+/B,CAAAA,cAAc,GAAG,CAAC,CAACkiB,WAAAA,CAAAA;AAE3Bp/B,QAAAA,GAAAA,CAAI2/B,kBAAkB,CAACP,WAAAA,EAAaC,QAAUliD,EAAAA,OAAAA,CAAQ+/B,cAAc,EAAE,CAAA,CAAA,CAAA;QAEtE,IAAM0iB,kBAAAA,GAAqBrB,aAhKlBA,CAgKgCsB,mBAAmB,CAAA;AAE5DD,QAAAA,kBAAAA,CAAmB9e,UAAU,CAACyd,aAlKrBA,CAkKmCuB,oBAAoB,EAAEnxD,MAAAA,CAAAA,CAAAA;AAClEixD,QAAAA,kBAAAA,CAAmBpgB,QAAQ,CAAC+e,aAnKnBA,CAmKiCwB,qBAAqB,EAAEzmD,QAAAA,CAAAA,CAAAA;AAnKxDilD,QAAAA,aAAAA,CAoKKyB,UAAU,CAACjyD,GAAG,CAAC,CAAA,GAAIY,OAAO8H,KAAK,EAAE,CAAI9H,GAAAA,MAAAA,CAAO+H,MAAM,EAAE/H,MAAAA,CAAO8H,KAAK,EAAE9H,OAAO+H,MAAM,CAAA,CAAA;QAC7FkpD,kBAAmBlnC,CAAAA,UAAU,CAAC6lC,aArKrBA,CAqKmC0B,sBAAsB,EArKzD1B,cAqKyEyB,UAAU,CAAA,CAAA;QAE5F,IAAMvhB,IAAAA,GAAOihB,YAAavhC,CAAAA,MAAM,CAACif,UAAU,CAAC,CAAE,CAAA,CAAC3O,MAAM,CAAC6wB,SAAU,CAAA,CAAA;QAChE,IAAM5hB,aAAAA,GAAgB/P,OAAOgQ,cAAc,CAAA;QAE3CjqB,qBAAsBI,CAAAA,eAAe,CACnC3W,OAAAA,CAAQw1C,MAAM,CAACzD,kBAAkB,EACjCwQ,YAAatnC,CAAAA,UAAU,CAACknB,gBAAgB,EACxC5B,aAAAA,CAAAA,CAAAA;AAEF,QAAA,IAAM1W,OAAUyX,GAAAA,IAAAA,CAAKhS,iBAAiB,CAACl8B,MAAQmtC,EAAAA,aAAAA,CAAAA,CAAAA;AAE/C1W,QAAAA,OAAAA,CAAQlzB,IAAI,EAAA,CAAA;AACZkzB,QAAAA,OAAAA,CAAQlB,yBAAyB,EAAA,CAAA;AACjCkB,QAAAA,OAAAA,CAAQ7B,SAAS,CAAC6B,OAAQ9C,CAAAA,oBAAoB,EAAE07B,kBAAAA,CAAAA,CAAAA;AAChD54B,QAAAA,OAAAA,CAAQ7B,SAAS,CAAC6B,OAAAA,CAAQ7C,oBAAoB,EAAEu7B,aAAatnC,UAAU,CAAA,CAAA;AACvE4O,QAAAA,OAAAA,CAAQnB,qBAAqB,EAAA,CAAA;AAE5B4Y,QAAAA,CAAAA,IAAKO,CAAAA,YAAY,IAAI0gB,YAAAA,CAAa3gB,WAAW,EAAElC,YAAY,CAC1DtsC,QACA,KACAkuC,EAAAA,IAAAA,CAAK9S,mBAAmB,EACxB+zB,aAAatnC,UAAU,CAAA,CAAA;AAGzB4H,QAAAA,GAAAA,CAAIkgC,aAAa,CAACV,QAAAA,CAASW,UAAU,EAAEX,QAAAA,CAAS/b,OAAO,EAAEzc,OAAAA,CAAAA,CAAAA;AAC3D,KAAA,CAAA;AA/LWu3B,IAAAA,OAAAA,aAAAA,CAAAA;AAgMZ,CAAA,EAAA,CAAA;AAhMYA,aACIuB,CAAAA,oBAAAA,GAAuBzpC,cAAezD,CAAAA,SAAS,CAAC,sBAAA,CAAA,CAAA;AADpD2rC,aAEIwB,CAAAA,qBAAAA,GAAwB1pC,cAAezD,CAAAA,SAAS,CAAC,uBAAA,CAAA,CAAA;AAFrD2rC,aAAAA,CAGI0B,sBAAyB5pC,GAAAA,cAAAA,CAAezD,SAAS,CAAC;;AAHtD2rC,aAAAA,CAKIsB,mBAAsB,GAAA,IAAIxgB,UAAWzb,CAAAA,eAAAA,CAAgB6C,QAAQ,CAAA,CAAA;AALjE83B,aAAAA,CAMIyB,aAAa,IAAI1zD,kBAAAA,EAAAA,CAAAA;AANrBiyD,aAAAA,CAQKgB,eAAkB,GAAA,IAAIjzD,kBAAQ,CAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,CAAA;;ACnBzD;;AAEC,IACM,IAAA,aAAM8zD,GAAN,SAAMA,aAAAA,GAAAA;AACXnS,IAAAA,IAAAA,CAAAA,QAAAA,GAAoB,IAAIllB,kBAAAA,EAAAA,CAAAA;SACxBspB,cAA0B,GAAA,KAAA,CAAA;AAC1BmB,IAAAA,IAAAA,CAAAA,UAAAA,GAAqB,IAAI7S,iBAAAA,EAAAA,CAAAA;AACzB0f,IAAAA,IAAAA,CAAAA,gBAAAA,GAA2B,IAAI1f,iBAAAA,EAAAA,CAAAA;AAC/BuT,IAAAA,IAAAA,CAAAA,oBAAAA,GAA+B,IAAIvT,iBAAAA,EAAAA,CAAAA;SACnC2f,aAAwB,GAAA,GAAA,CAAA;SACxBC,YAAuB,GAAA,GAAA,CAAA;+BACC,IAAA,CACxB/N,UAAmB,IAAIzpB,kBAAAA,EAAAA,CAAAA;AACxB,CAAA;;ACfD;;IAGO,IAAKy3B,gBAAAA,iBAAAA,SAAAA,gBAAAA,EAAAA;sBACK,gBAAA,CAAA,gBAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA,CAAA;6CAEuB,gBAAA,CAAA,gBAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA,CAAA;4BAEjB,gBAAA,CAAA,gBAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA,CAAA;4BAEA,gBAAA,CAAA,gBAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA;uDAG2B,gBAAA,CAAA,gBAAA,CAAA,YAAA,CAAA,GAAA,CAAA,CAAA,GAAA,YAAA,CAAA;yDAEE,gBAAA,CAAA,gBAAA,CAAA,cAAA,CAAA,GAAA,CAAA,CAAA,GAAA,cAAA,CAAA;mCAEtB,gBAAA,CAAA,gBAAA,CAAA,cAAA,CAAA,GAAA,CAAA,CAAA,GAAA,cAAA,CAAA;iEAG8B,gBAAA,CAAA,gBAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA,GAAA,KAAA,CAAA;AAjBhDA,IAAAA,OAAAA,gBAAAA,CAAAA;AAmBX,CAAA,CAAA,EAAA;;ACtBD;;IAGO,IAAKC,UAAAA,iBAAAA,SAAAA,UAAAA,EAAAA;;;;;AAAAA,IAAAA,OAAAA,UAAAA,CAAAA;AAKX,CAAA,CAAA,EAAA;;ACRD;;IAGO,IAAKC,gBAAAA,iBAAAA,SAAAA,gBAAAA,EAAAA;4BACW,gBAAA,CAAA,gBAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA,CAAA;wDAE4B,gBAAA,CAAA,gBAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA;AAHvCA,IAAAA,OAAAA,gBAAAA,CAAAA;AAOX,CAAA,CAAA,EAAA;;ACVD;;IAGO,IAAKC,YAAAA,iBAAAA,SAAAA,YAAAA,EAAAA;6BACY,YAAA,CAAA,YAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA,CAAA;0CAEa,YAAA,CAAA,YAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA,CAAA;6CAEG,YAAA,CAAA,YAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA,CAAA;AAL5BA,IAAAA,OAAAA,YAAAA,CAAAA;AAOX,CAAA,CAAA,EAAA;;ACVD;;IAGO,IAAKC,WAAAA,iBAAAA,SAAAA,WAAAA,EAAAA;0CACyB,WAAA,CAAA,WAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA,CAAA;sDAEY,WAAA,CAAA,WAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA,CAAA;sDAEA,WAAA,CAAA,WAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA,CAAA;sDAEA,WAAA,CAAA,WAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;AAPrCA,IAAAA,OAAAA,WAAAA,CAAAA;AASX,CAAA,CAAA,EAAA;;ACZD;;IAGO,IAAKC,0BAAAA,iBAAAA,SAAAA,0BAAAA,EAAAA;qCACoB,0BAAA,CAAA,0BAAA,CAAA,oBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,oBAAA,CAAA;0BAEX,0BAAA,CAAA,0BAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,GAAA,aAAA,CAAA;AAHTA,IAAAA,OAAAA,0BAAAA,CAAAA;AAKX,CAAA,CAAA,EAAA;;ACoBD,IAAMC,WAAN,SAAMA,QAAAA,GAAAA;;AAAAA,QAAAA,CACGC,WAAW,IAAIz0D,kBAAAA,EAAAA,CAAAA;AADlBw0D,QAAAA,CAEGE,WAAW,IAAIj4B,kBAAAA,EAAAA,CAAAA;AAFlB+3B,QAAAA,CAGGG,WAAW,IAAIjlD,kBAAAA,EAAAA,CAAAA;AAQjBwqB,cAAA,iBAAA,SAAA,SAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,MAAAA,EAAAA,SAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,MAAAA,CA2XCwd,MAAc,EAAA;;AACxB,QAAA,KAAA,GAAA,SAAA,CAAA,IAAA,CAAA,IAAA,EAAMA,MAhXR,CAAA,IAAA,IAAA,sEACAkd,KAAAA,CAAAA,oBAAAA,GAAgC,IAEhC;;;;MAKAC,KAAAA,CAAAA,UAAAA,GAA+BX,gBAAiBhxB,CAAAA,GAAG;;;MAMnD4xB,KAAAA,CAAAA,WAAAA,GAAqB9C,KAAM+C,CAAAA,UAAU;;;;;MAQrCC,KAAAA,CAAAA,gBAAAA,GAAqCZ,gBAAiB7d,CAAAA,IAAI;;;;MAO1D0e,KAAAA,CAAAA,yBAAAA,GAA0CZ,YAAaa,CAAAA,IAAI;;;;MAO3DC,KAAAA,CAAAA,WAAAA,GAA2Bb,YAAY/d,IAAI,mBAG3C6e,KAAAA,CAAAA,WAAAA,GAA0BjB,WAAWkB,MAAM,mBAE3CzS,KAAAA,CAAAA,kBAAAA,GAA4C,IAAIx7B,qBAChD,EAAA,yBAEAkuC,QAA4B,GAAA,IAAIC,+CAIlB,KAAA,CAEdC,iBAAgC,IAAI1B,aAAAA,EAAAA,mBAEpC2B,KAAAA,CAAAA,kBAAAA,GAA6B,uBACf,KAAA,CACdC,2BAAyC,IACzC,yBACAC,2BAA0D,GAAA,IAAA,mBAG1DC,KAAAA,CAAAA,YAAAA,GAAuB,CAAC,CAEhBlS,EAAAA,KAAAA,CAAAA,SAAAA,GAAoB,SACpBN,WAA0B,GAAA,IAAIrQ,WAAWzb,eAAgB4C,CAAAA,MAAM,SAC/D27B,mBAAsB,GAAA,KAAA,EAAA,KAAA,CACtBC,4BAA4B,KAC5BC,EAAAA,KAAAA,CAAAA,YAAAA,GAAuB,UACvBC,iBAA4B,GAAA,EAAA,EAAA,KAAA,CAC5BC,qBAAqB,IACrBC,EAAAA,KAAAA,CAAAA,kBAAAA,GAA8B,YAC9BC,kBAAyCvzD,GAAAA,SAAAA,EAAAA,KAAAA,CACzCwzD,gBAA8B,IAC9BC,EAAAA,KAAAA,CAAAA,kBAAAA,GAA8B,IAAIr2D,kBAClCs2D,EAAAA,EAAAA,KAAAA,CAAAA,qBAAAA,GAAiC,aACjCC,UAAa,GAAA,KAAA,EAAA,KAAA,CACbC,qBAAqB,KAWrBC,EAAAA,KAAAA,CAAAA,SAAAA,GAAqB,IAAIz2D,kBAAQ,CAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,CAAA,EAAA,KAAA,CAE1C02D,iBAAuB,IAAI70C,eAAAA,CAAK,GAAG,CAAG,EAAA,CAAA,EAAG,UAEzC80C,wBAAmC,GAAA,IAAItiB,iBAEvCuiB,EAAAA,EAAAA,KAAAA,CAAAA,eAAAA,GAA0B,IAAIviB,iBAAAA,EAAAA,CAAAA;AAuRpC,QAAA,IAAMgL,SAAY,GAAA,KAAA,CAAK3H,MAAM,CAAC2H,SAAS,CAAA;AACvC,QAAA,KAAA,CAAKoH,UAAU,GAAGpH,SAAAA,CAAAA;QAClB,KAAKwX,CAAAA,kBAAkB,GAAGxX,SAAAA,CAAUX,uBAAuB,EAAA,CAAA;QAC3D,KAAKoY,CAAAA,mBAAmB,GAAGzX,SAAAA,CAAUX,uBAAuB,EAAA,CAAA;QAC5D,KAAKqY,CAAAA,kBAAkB,GAAG1X,SAAAA,CAAUX,uBAAuB,EAAA,CAAA;QAC3D,KAAK6S,CAAAA,eAAe,GAAG,IAAIyF,mBAAAA,CAAAA,KAAAA,CAAAA,CAAAA;AAC3B,QAAA,KAAA,CAAKte,sBAAsB,CAAC,KAAK5sB,CAAAA,UAAU,EAAE,CAAA,CAAA,CAAA;AAC7C,QAAA,KAAA,CAAKmrC,oBAAoB,EAAA,CAAA;AAEzB,QAAA,KAAA,CAAKC,uBAAuB,GAAG,KAAKA,CAAAA,uBAAuB,CAAC1vD,IAAI,CAAA,KAAA,CAAA,CAAA;;AAEhE,QAAA,KAAA,CAAKivD,SAAS,CAACl0C,eAAe,GAAG,MAAK20C,uBAAuB,CAAA;QAC7D,KAAKjzD,CAAAA,MAAM,CAACwM,MAAM,CAAC0mD,sBAAsB,CAAC52C,WAAW,CAAC,KAAA,CAAK22C,uBAAuB,CAAA,CAAA;;;AA1YzEh9B,IAAAA,IAAAA,MAAAA,GAAAA,MAAAA,CAAAA,SAAAA,CAAAA;AA6YX;;MAGAk9B,MAAAA,CAAAA,eAGC,GAHDA,SAAAA,eAAAA,GAAAA;QACE,IAAI,CAACvB,mBAAmB,GAAG,KAAA,CAAA;AAC3B,QAAA,IAAI,CAACwB,iBAAiB,EAAA,CAAA;AACxB,KAAA,CAAA;AAEA;;MAGAC,MAAAA,CAAAA,qBAGC,GAHDA,SAAAA,qBAAAA,GAAAA;QACE,IAAI,CAACxB,yBAAyB,GAAG,KAAA,CAAA;AACjC,QAAA,IAAI,CAACyB,uBAAuB,EAAA,CAAA;AAC9B,KAAA,CAAA;AAEA;;MAGAC,MAAAA,CAAAA,gBAGC,GAHDA,SAAAA,gBAAAA,GAAAA;QACE,IAAI,CAACrB,kBAAkB,GAAGvzD,SAAAA,CAAAA;AAC1B,QAAA,IAAI,CAAC20D,uBAAuB,EAAA,CAAA;AAC9B,KAAA,CAAA;AAEA;;;;;AAKC,MACDE,OAAAA,oBAUC,GAVDA,SAAAA,oBAAqBC,CAAAA,KAAc,EAAE/pD,GAAY,EAAA;QAC/C,IAAMgqD,WAAAA,GAAcnD,SAASE,QAAQ,CAAA;QACrC,IAAMkD,aAAAA,GAAgBpD,SAASC,QAAQ,CAAA;AAEvCh4B,QAAAA,kBAAAA,CAAQ6kB,mBAAmB,CAACoW,KAAAA,EAAO,IAAI,CAACxQ,UAAU,EAAEyQ,WAAAA,CAAAA,CAAAA;AACpDl7B,QAAAA,kBAAAA,CAAQo7B,eAAe,CAACF,WAAAA,EAAa,IAAI,CAAC5D,gBAAgB,EAAE6D,aAAAA,CAAAA,CAAAA;QAE5D,IAAM7oD,CAAAA,GAAI6oD,cAAc7oD,CAAC,CAAA;QACzBpB,GAAIlM,CAAAA,GAAG,CAAC,CAACm2D,cAAc3qD,CAAC,GAAG8B,CAAI,GAAA,GAAE,IAAK,GAAA,EAAK,CAAC,GAAA,GAAM6oD,cAAc1qD,CAAC,GAAG6B,CAAAA,IAAK,GAAA,EAAK,CAAC4oD,WAAAA,CAAYz0C,CAAC,CAAA,CAAA;QAC5F,OAAOvV,GAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;;AAKC,MACDmqD,OAAAA,oBAiBC,GAjBDA,SAAAA,oBAAqBJ,CAAAA,KAAc,EAAE/pD,GAAY,EAAA;AAC/C,QAAA,IAAwC,QAAA,IAAI,EAApCqmD,gBAAgC,KAAhCA,CAAAA,aAAAA,EAAeC,eAAiB,KAAjBA,CAAAA,YAAAA,CAAAA;AACvB,QAAA,IAAM8D,EAAK,GAAA,CAAA,IAAK/D,aAAAA,GAAgBC,YAAW,CAAA,CAAA;QAE3C,IAAI/wC,CAAAA,CAAAA;QACJ,IAAI,IAAI,CAAC6iC,cAAc,EAAE;AACvB7iC,YAAAA,CAAAA,GAAI,CAACw0C,KAAAA,CAAMx0C,CAAC,GAAG,CAAI60C,GAAAA,EAAAA,CAAAA;AACnB70C,YAAAA,CAAAA,IAAK,CAAC+wC,YAAeD,GAAAA,aAAY,IAAK+D,EAAAA,CAAAA;SACjC,MAAA;YACL,IAAMC,MAAAA,GAASN,MAAMx0C,CAAC,CAAA;AACtBA,YAAAA,CAAAA,GAAI,CAAC80C,MAAAA,IAAUhE,aAAAA,GAAgBC,YAAW,CAAK8D,GAAAA,EAAAA,CAAAA;YAC/C70C,CAAK,IAAA,CAAA,GAAI8wC,gBAAgBC,YAAe8D,GAAAA,EAAAA,CAAAA;AACxC70C,YAAAA,CAAAA,GAAIA,CAAI80C,GAAAA,MAAAA,CAAAA;AACV,SAAA;AAEA,QAAA,IAAI,CAACC,0BAA0B,CAACP,MAAMzqD,CAAC,EAAEyqD,MAAMxqD,CAAC,EAAE,CAACgW,IAAI,GAAE,IAAK,KAAK,IAAI,CAACg1C,kBAAkB,EAAIvqD,EAAAA,GAAAA,CAAAA,CAAAA;QAC9F,OAAOA,GAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;;AAKC,MACDwqD,OAAAA,kBAeC,GAfDA,SAAAA,kBAAmBT,CAAAA,KAAc,EAAE/pD,GAAQ,EAAA;QACzC,IAAMyqD,cAAAA,GAAiB,IAAI,CAACF,kBAAkB,EAAA,CAAA;;AAE9C,QAAA,IAAMG,MAAS,GAAA,IAAI,CAACJ,0BAA0B,CAACP,KAAMzqD,CAAAA,CAAC,EAAEyqD,KAAAA,CAAMxqD,CAAC,EAAE,GAAKkrD,EAAAA,cAAAA,EAAgBzqD,IAAI0qD,MAAM,CAAA,CAAA;;AAEhG,QAAA,IAAMC,YAAY,IAAI,CAACL,0BAA0B,CAC/CP,MAAMzqD,CAAC,EACPyqD,KAAMxqD,CAAAA,CAAC,EACP,CAAI6X,GAAAA,mBAAAA,CAASi5B,aAAa,EAC1Boa,cAAAA,EACAzqD,IAAI2qD,SAAS,CAAA,CAAA;QAEf77B,kBAAQohB,CAAAA,QAAQ,CAACya,SAAAA,EAAWD,MAAQC,EAAAA,SAAAA,CAAAA,CAAAA;AACpCA,QAAAA,SAAAA,CAAUrW,SAAS,EAAA,CAAA;QACnB,OAAOt0C,GAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;;AAKC,MACD4qD,OAAAA,qBAOC,GAPDA,SAAAA,qBAAmDb,CAAAA,KAAwB,EAAE/pD,GAAM,EAAA;AACjF,QAAA,IAAM8C,MAAS,GAAA,IAAI,CAACxM,MAAM,CAACwM,MAAM,CAAA;QACjC,IAAMsiD,QAAAA,GAAW,IAAI,CAACA,QAAQ,CAAA;AAC9BplD,QAAAA,GAAAA,CAAIV,CAAC,GAAG,CAACyqD,MAAMzqD,CAAC,GAAGwD,MAAOtG,CAAAA,KAAK,GAAG4oD,QAAS9lD,CAAAA,CAAC,IAAI8lD,SAAS7vC,CAAC,CAAA;AAC1DvV,QAAAA,GAAAA,CAAIT,CAAC,GAAG,CAACwqD,MAAMxqD,CAAC,GAAGuD,MAAOrG,CAAAA,MAAM,GAAG2oD,QAAS7lD,CAAAA,CAAC,IAAI6lD,SAAShkD,CAAC,CAAA;QACjD2oD,KAAOx0C,CAAAA,CAAC,KAAKtgB,SAAAA,KAAwB+K,GAAKuV,CAAAA,CAAC,GAAaw0C,KAAOx0C,CAAAA,CAAC,CAADA,CAAAA;QACzE,OAAOvV,GAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;;AAKC,MACD6qD,OAAAA,qBAOC,GAPDA,SAAAA,qBAA6Dd,CAAAA,KAAQ,EAAE/pD,GAAM,EAAA;AAC3E,QAAA,IAAM8C,MAAS,GAAA,IAAI,CAACxM,MAAM,CAACwM,MAAM,CAAA;QACjC,IAAMsiD,QAAAA,GAAW,IAAI,CAACA,QAAQ,CAAA;AAC9BplD,QAAAA,GAAAA,CAAIV,CAAC,GAAG,CAAC8lD,SAAS9lD,CAAC,GAAGyqD,KAAMzqD,CAAAA,CAAC,GAAG8lD,QAAS7vC,CAAAA,CAAC,IAAIzS,OAAOtG,KAAK,CAAA;AAC1DwD,QAAAA,GAAAA,CAAIT,CAAC,GAAG,CAAC6lD,SAAS7lD,CAAC,GAAGwqD,KAAMxqD,CAAAA,CAAC,GAAG6lD,QAAShkD,CAAAA,CAAC,IAAI0B,OAAOrG,MAAM,CAAA;QACjDstD,KAAOx0C,CAAAA,CAAC,KAAKtgB,SAAAA,KAAwB+K,GAAKuV,CAAAA,CAAC,GAAaw0C,KAAOx0C,CAAAA,CAAC,CAADA,CAAAA;QACzE,OAAOvV,GAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;;;;;;AASC,MACD8qD,OAAAA,kBAGC,GAHDA,SAAAA,kBAAmBf,CAAAA,KAAc,EAAE/pD,GAAY,EAAA;QAC7C,IAAI,CAAC8pD,oBAAoB,CAACC,KAAO/pD,EAAAA,GAAAA,CAAAA,CAAAA;AACjC,QAAA,OAAO,IAAI,CAAC6qD,qBAAqB,CAAC7qD,GAAKA,EAAAA,GAAAA,CAAAA,CAAAA;AACzC,KAAA,CAAA;AAEA;;;;;;AAMC,MACD+qD,OAAAA,kBAGC,GAHDA,SAAAA,kBAAmBhB,CAAAA,KAAc,EAAE/pD,GAAY,EAAA;QAC7C,IAAI,CAAC4qD,qBAAqB,CAACb,KAAO/pD,EAAAA,GAAAA,CAAAA,CAAAA;AAClC,QAAA,OAAO,IAAI,CAACmqD,oBAAoB,CAACnqD,GAAKA,EAAAA,GAAAA,CAAAA,CAAAA;AACxC,KAAA,CAAA;AAEA;;;;;AAKC,MACDgrD,OAAAA,gBAIC,GAJDA,SAAAA,gBAAiBjB,CAAAA,KAAc,EAAE/pD,GAAQ,EAAA;QACvC,IAAMiqD,aAAAA,GAAgBpD,SAASG,QAAQ,CAAA;QACvC,IAAI,CAAC4D,qBAAqB,CAACb,KAAOE,EAAAA,aAAAA,CAAAA,CAAAA;AAClC,QAAA,OAAO,IAAI,CAACO,kBAAkB,CAACP,aAAejqD,EAAAA,GAAAA,CAAAA,CAAAA;AAChD,KAAA,CAAA;AAEA;;;;AAIC,MACDirD,OAAAA,MA2CC,GA3CDA,SAAAA,MAAOC,CAAAA,QAA0B,EAAE7rD,QAAoB,EAAA;AAApBA,QAAAA,IAAAA,qBAAAA,QAAmB,GAAA,CAAA,CAAA;QACpD,IAAM/I,MAAAA,GAAS,IAAI,CAACI,OAAO,CAAA;QAC3B,IAAMwM,OAAAA,GAAU5M,OAAO0sC,cAAc,CAAA;QACrC,IAAM8U,aAAAA,GAAgB,IAAI,CAAC+P,cAAc,CAAA;AAEzC,QAAA,IAAMnW,SAAY,GAAA,IAAI,CAAC3H,MAAM,CAAC2H,SAAS,CAAA;QACvChL,iBAAOsM,CAAAA,QAAQ,CAAC,IAAI,CAACoT,gBAAgB,EAAE,IAAI,CAAC7M,UAAU,EAAEzB,aAAAA,CAAcmC,oBAAoB,CAAA,CAAA;AAC1FnC,QAAAA,aAAAA,CAAc9D,QAAQ,CAAC/9C,QAAQ,CAACy7C,UAAUvB,aAAa,CAAA,CAAA;QACvD,IAAI2H,aAAAA,CAAcM,cAAc,EAAE;AAChCN,YAAAA,aAAAA,CAAcS,OAAO,CAACtiD,QAAQ,CAACy7C,UAAUkD,YAAY,CAAA,CAAA;AACvD,SAAA;QAEA1xC,OAAQw1C,CAAAA,MAAM,GAAG,IAAI,CAAA;AACrBx1C,QAAAA,OAAAA,CAAQ40C,aAAa,GAAGA,aAAAA,CAAAA;AACxB50C,QAAAA,OAAAA,CAAQioD,iBAAiB,GAAG,IAAI,CAACrD,kBAAkB,CAAA;AACnD5kD,QAAAA,OAAAA,CAAQkoD,cAAc,GAAG,IAAI,CAACrD,wBAAwB,CAAA;AACtD7kD,QAAAA,OAAAA,CAAQmoD,0BAA0B,GAAG,IAAI,CAACrD,2BAA2B,CAAA;;QAGrE,IAAI,IAAI,CAACf,oBAAoB,IAAI,IAAI,CAACmC,kBAAkB,CAAC72C,IAAI,EAAE;AAC7D,YAAA,IAAI,CAACo1C,QAAQ,CAAC2D,mBAAmB,CAACxT,cAAcmC,oBAAoB,CAAA,CAAA;AACpE,YAAA,IAAI,CAACmP,kBAAkB,CAAC72C,IAAI,GAAG,KAAA,CAAA;AACjC,SAAA;AAEA,QAAA,IAAI,CAACg5C,iBAAiB,EAAA,CAAA;;AAGtB9xC,QAAAA,qBAAAA,CAAsBI,eAAe,CACnC,IAAI,CAACsxB,KAAK,CAAC8J,kBAAkB,EAC7B,IAAI,CAAC92B,UAAU,CAACknB,gBAAgB,EAChC,IAAI,CAAC4P,kBAAkB,CAAA,CAAA;AAGzB,QAAA,IAAI51C,WAAW,CAAK,IAAA,CAAC/I,OAAOiF,iBAAiB,CAAC63B,QAAQ,EAAE;YACtD/zB,QAAW,GAAA,CAAA,CAAA;AACXpF,YAAAA,MAAAA,CAAOD,KAAK,CAAC,uCAAA,CAAA,CAAA;AACf,SAAA;QACA,IAAIwxD,gBAAAA,CAAAA;AACJ,QAAA,IAAI,IAAI,CAAC/D,WAAW,KAAKjB,UAAAA,CAAWkB,MAAM,IAAI,CAAC,IAAI,CAACe,aAAa,IAAI,CAAC,IAAI,CAACgD,wBAAwB,EAAE;AACnGD,YAAAA,gBAAAA,GAAmBl1D,OAAOo1D,SAAS,CAACC,0BAA0B,CAAC,IAAI,CAAClE,WAAW,CAAA,CAAA;AACjF,SAAA;AACA,QAAA,IAAI,CAAC7D,eAAe,CAACqH,MAAM,CAAC/nD,OAAAA,EAASgoD,UAAU7rD,QAAUmsD,EAAAA,gBAAAA,CAAAA,CAAAA;AACzDl1D,QAAAA,MAAAA,CAAOs1D,YAAY,EAAA,CAAA;AACrB,KAAA,CAAA;IA0BAC,MAAAA,CAAAA,oBASC,GATDA,SAAAA,oBAAAA,CACE3nC,MAAc,EACdknC,cAAsC,EACtCU,eAA2F,EAAA;QAA3FA,IAAAA,eAAAA,KAAAA,KAAAA,CAAAA,EAAAA,eAA8ClF,GAAAA,0BAAAA,CAA2BmF,kBAAkB,CAAA;QAE3F,IAAI,CAACjE,kBAAkB,GAAG5jC,MAAAA,CAAAA;QAC1B,IAAI,CAAC6jC,wBAAwB,GAC3B,OAAOqD,mBAAmB,QAAWnmC,GAAAA,YAAAA,CAAatM,SAAS,CAACyyC,cAAkBA,CAAAA,GAAAA,cAAAA,CAAAA;QAChF,IAAI,CAACpD,2BAA2B,GAAG8D,eAAAA,CAAAA;AACrC,KAAA,CAAA;AAEA;;MAGAE,MAAAA,CAAAA,sBAIC,GAJDA,SAAAA,sBAAAA,GAAAA;QACE,IAAI,CAAClE,kBAAkB,GAAG,IAAA,CAAA;QAC1B,IAAI,CAACC,wBAAwB,GAAG,IAAA,CAAA;QAChC,IAAI,CAACC,2BAA2B,GAAG,IAAA,CAAA;AACrC,KAAA,CAAA;AAEA;;MAGA,MAAA,CAASxd,gBAER,GAFD,SAASA,gBAAAA,GAAAA;AACP,QAAA,IAAI,CAACW,KAAK,CAACoM,kBAAkB,CAAC0U,SAAS,CAAC,IAAI,CAAA,CAAA;AAC9C,KAAA,CAAA;AAEA;;MAGA,MAAA,CAASxhB,iBAER,GAFD,SAASA,iBAAAA,GAAAA;AACP,QAAA,IAAI,CAACU,KAAK,CAACoM,kBAAkB,CAAC2U,YAAY,CAAC,IAAI,CAAA,CAAA;AACjD,KAAA,CAAA;AAEA;;MAGAC,MAAAA,CAAAA,8BAMC,GANDA,SAAAA,8BAAAA,GAAAA;AACE,QAAA,OAAO,IAAI,CAACvD,UAAU,GAClB,IAAI,CAACtyD,MAAM,CAACiF,iBAAiB,CAAC63B,QAAQ,GACpCr6B,cAAcqzD,gBAAgB,GAC9BrzD,cAAcszD,YAAY,GAC5BtzD,cAAcyF,QAAQ,CAAA;AAC5B,KAAA,CAAA;AAEA;;;MAIA,MAAA,CAAmB5H,UAwBlB,GAxBD,SAAmBA,UAAAA,GAAAA;AAEjB,QAAA,IAAA,qBAAA,CAAA;AADA,QAAA,SAAA,CAAA,SAAA,CAAMA,UAAD,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;AACL,QAAA,CAAA,qBAAA,GAAA,IAAI,CAACgtD,eAAe,KAAA,IAAA,GAAA,KAAA,CAAA,GAApB,sBAAsBjtD,OAAO,EAAA,CAAA;QAC7B,IAAI,CAACwyD,mBAAmB,CAACxyD,OAAO,EAAA,CAAA;QAChC,IAAI,CAACuyD,kBAAkB,CAACvyD,OAAO,EAAA,CAAA;AAC/B,QAAA,IAAI,CAACo0C,sBAAsB,CAAC,IAAI,CAAC5sB,UAAU,EAAE,CAAC,CAAA,CAAA,CAAA;;AAG9C,QAAA,IAAI,CAAC2qC,SAAS,CAACl0C,eAAe,GAAG,IAAA,CAAA;QACjC,IAAI,CAACte,MAAM,CAACwM,MAAM,CAAC0mD,sBAAsB,CAAC12C,cAAc,CAAC,IAAI,CAACy2C,uBAAuB,CAAA,CAAA;QAErF,IAAI,CAACnf,OAAO,GAAG,IAAA,CAAA;QACf,IAAI,CAAC6K,kBAAkB,GAAG,IAAA,CAAA;QAC1B,IAAI,CAAC0S,QAAQ,GAAG,IAAA,CAAA;QAChB,IAAI,CAAC/D,eAAe,GAAG,IAAA,CAAA;QACvB,IAAI,CAACiE,cAAc,GAAG,IAAA,CAAA;QACtB,IAAI,CAACpS,WAAW,GAAG,IAAA,CAAA;QACnB,IAAI,CAAC2T,kBAAkB,GAAG,IAAA,CAAA;QAC1B,IAAI,CAACtQ,UAAU,GAAG,IAAA,CAAA;QAClB,IAAI,CAACoQ,kBAAkB,GAAG,IAAA,CAAA;QAC1B,IAAI,CAACC,mBAAmB,GAAG,IAAA,CAAA;QAC3B,IAAI,CAACL,SAAS,GAAG,IAAA,CAAA;QACjB,IAAI,CAACE,wBAAwB,GAAG,IAAA,CAAA;QAChC,IAAI,CAACC,eAAe,GAAG,IAAA,CAAA;AACzB,KAAA,CAAA;IAEA,MAAQK,CAAAA,oBAeP,GAfD,SAAQA,oBAAAA,GAAAA;AACN,QAAA,IAAI9sD,KAAeC,EAAAA,MAAAA,CAAAA;QAEnB,IAAM6vD,YAAAA,GAAe,IAAI,CAAC7D,aAAa,CAAA;AACvC,QAAA,IAAI6D,YAAc,EAAA;AAChB9vD,YAAAA,KAAAA,GAAQ8vD,aAAa9vD,KAAK,CAAA;AAC1BC,YAAAA,MAAAA,GAAS6vD,aAAa7vD,MAAM,CAAA;SACvB,MAAA;AACL,YAAA,IAAMqG,MAAS,GAAA,IAAI,CAACxM,MAAM,CAACwM,MAAM,CAAA;AACjCtG,YAAAA,KAAAA,GAAQsG,OAAOtG,KAAK,CAAA;AACpBC,YAAAA,MAAAA,GAASqG,OAAOrG,MAAM,CAAA;AACxB,SAAA;QAEA,IAAM2oD,QAAAA,GAAW,IAAI,CAAC0D,SAAS,CAAA;AAC/B,QAAA,IAAI,CAACC,cAAc,CAACj1D,GAAG,CAACsxD,QAAAA,CAAS9lD,CAAC,GAAG9C,KAAAA,EAAO4oD,SAAS7lD,CAAC,GAAG9C,QAAQ2oD,QAAS7vC,CAAAA,CAAC,GAAG/Y,KAAO4oD,EAAAA,QAAAA,CAAShkD,CAAC,GAAG3E,MAAAA,CAAAA,CAAAA;AACpG,KAAA,CAAA;IAEA,MAAQitD,CAAAA,iBAIP,GAJD,SAAQA,iBAAAA,GAAAA;AACN,QAAA,IAAI,CAACR,kBAAkB,CAAC32C,IAAI,GAAG,IAAA,CAAA;AAC/B,QAAA,IAAI,CAAC42C,mBAAmB,CAAC52C,IAAI,GAAG,IAAA,CAAA;AAChC,QAAA,IAAI,CAAC62C,kBAAkB,CAAC72C,IAAI,GAAG,IAAA,CAAA;AACjC,KAAA,CAAA;IAEA,MAAQq3C,CAAAA,uBAKP,GALD,SAAQA,uBAAAA,GAAAA;QACN,IAAI,CAACtB,kBAAkB,GAAG,IAAA,CAAA;QAC1B,IAAI,CAACC,kBAAkB,GAAG,IAAA,CAAA;AAC1B,QAAA,IAAI,CAACY,mBAAmB,CAAC52C,IAAI,GAAG,IAAA,CAAA;AAChC,QAAA,IAAI,CAAC62C,kBAAkB,CAAC72C,IAAI,GAAG,IAAA,CAAA;AACjC,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQ+3C,0BAOP,GAPD,SAAQA,0BAAAA,CAA2BhrD,CAAS,EAAEC,CAAS,EAAEgW,CAAS,EAAEk1C,cAAsB,EAAEzqD,GAAY,EAAA;;;QAGtG,IAAMusD,SAAAA,GAAY1F,SAASE,QAAQ,CAAA;QACnCwF,SAAUz4D,CAAAA,GAAG,CAACwL,CAAI,GAAA,CAAA,GAAI,GAAG,CAAIC,GAAAA,CAAAA,GAAI,CAAGgW,EAAAA,CAAAA,GAAI,CAAI,GAAA,CAAA,CAAA,CAAA;QAC5CuZ,kBAAQ6kB,CAAAA,mBAAmB,CAAC4Y,SAAAA,EAAW9B,cAAgBzqD,EAAAA,GAAAA,CAAAA,CAAAA;QACvD,OAAOA,GAAAA,CAAAA;AACT,KAAA,CAAA;IAEA,MAAQurD,CAAAA,iBAaP,GAbD,SAAQA,iBAAAA,GAAAA;QACN,IAAMptC,UAAAA,GAAa,IAAI,CAACA,UAAU,CAAA;QAElC,IAAMuzB,SAAAA,GAAY,IAAI,CAACoH,UAAU,CAAA;AACjC36B,QAAAA,UAAAA,CAAWsoB,SAAS,CA5uBXla,OA4uBmBigC,0BAA0B,EAAE9a,UAAUiB,WAAW,CAAA,CAAA;AAC7Ex0B,QAAAA,UAAAA,CAAWmoB,UAAU,CA7uBZ/Z,OA6uBoBkgC,uBAAuB,EAAE/a,UAAUvB,aAAa,CAAA,CAAA;AAC7EhyB,QAAAA,UAAAA,CAAWmoB,UAAU,CA9uBZ/Z,OA8uBoBmgC,sBAAsB,EAAEhb,UAAUkD,YAAY,CAAA,CAAA;AAC3Ez2B,QAAAA,UAAAA,CAAWmoB,UAAU,CA/uBZ/Z,OA+uBoBogC,iBAAiB,EAAEjb,UAAU1B,OAAO,CAAA,CAAA;QAEjE,IAAM4c,iBAAAA,GAAoB,IAAI,CAAClE,kBAAkB,CAAA;AACjD,QAAA,IAAMmE,gBAAgB,IAAI,CAACvG,YAAY,GAAG,IAAI,CAACD,aAAa,CAAA;AAC5DuG,QAAAA,iBAAAA,CAAkB94D,GAAG,CAAC,GAAM+4D,GAAAA,aAAAA,EAAeA,eAAe,CAAG,EAAA,CAAA,CAAA,CAAA;AAC7D1uC,QAAAA,UAAAA,CAAWM,UAAU,CAAC8N,MApvBbA,CAovBoBugC,gCAAgC,EAAEF,iBAAAA,CAAAA,CAAAA;AACjE,KAAA,CAAA;AAEA;;MAGA,MAAA,CAAQrC,kBAMP,GAND,SAAQA,kBAAAA,GAAAA;AACN,QAAA,IAAI,IAAI,CAACpB,mBAAmB,CAAC52C,IAAI,EAAE;AACjC,YAAA,IAAI,CAAC42C,mBAAmB,CAAC52C,IAAI,GAAG,KAAA,CAAA;AAChCm0B,YAAAA,iBAAAA,CAAOsM,QAAQ,CAAC,IAAI,CAAC8F,UAAU,CAACnG,WAAW,EAAE,IAAI,CAACoa,2BAA2B,EAAI,EAAA,IAAI,CAAC9D,eAAe,CAAA,CAAA;AACvG,SAAA;QACA,OAAO,IAAI,CAACA,eAAe,CAAA;AAC7B,KAAA,CAAA;AAEA;;MAGA,MAAA,CAAQ8D,2BAMP,GAND,SAAQA,2BAAAA,GAAAA;QACN,IAAI,IAAI,CAACxE,kBAAkB,EAAE;YAC3B,IAAI,CAACA,kBAAkB,GAAG,KAAA,CAAA;YAC1B7hB,iBAAOkM,CAAAA,MAAM,CAAC,IAAI,CAACwT,gBAAgB,EAAE,IAAI,CAAC4C,wBAAwB,CAAA,CAAA;AACpE,SAAA;QACA,OAAO,IAAI,CAACA,wBAAwB,CAAA;AACtC,KAAA,CAAA;IAEA,MACQO,CAAAA,uBAIP,GALD,SACQA,uBAAAA,GAAAA;AACN,QAAA,IAAI,CAACD,oBAAoB,EAAA,CAAA;AACzB,QAAA,IAAA,wBAAA,CAAA;QAAA,CAAA,wBAAA,GAAA,IAAI,CAACd,kBAAkB,YAAvB,wBAA2B,GAAA,IAAI,CAACoB,uBAAuB,EAAA,CAAA;AACvD,QAAA,IAAI,CAACoD,8BAA8B,EAAA,CAAA;AACrC,KAAA,CAAA;IAEA,MAAQA,CAAAA,8BAUP,GAVD,SAAQA,8BAAAA,GAAAA;AACN,QAAA,IACE,IAAI,CAAC/iB,oBAAoB,IACzB,IAAI,CAACwhB,wBAAwB,IAC7Bp5D,kBAAQ6lC,CAAAA,MAAM,CAAC,IAAI,CAAC4wB,SAAS,EAAExE,aAAAA,CAAcgB,eAAe,CAC5D,EAAA;AACArrD,YAAAA,MAAAA,CAAOF,IAAI,CACT,iKAAA,CAAA,CAAA;AAEJ,SAAA;AACF,KAAA,CAAA;AA9xBWwyB,IAAAA,aAAAA,CAAAA,MAAAA,EAAAA;;YAgHP0gC,GAAAA,EAAAA,sBAAAA;;;;;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACtE,qBAAqB,CAAA;AACnC,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAyBvwD,KAAc,EAAA;AACrC,gBAAA,IAAI,IAAI,CAACuwD,qBAAqB,KAAKvwD,KAAO,EAAA;oBACxC,IAAI,CAACuwD,qBAAqB,GAAGvwD,KAAAA,CAAAA;AAC7B,oBAAA,IAAI,CAAC40D,8BAA8B,EAAA,CAAA;AACrC,iBAAA;AACF,aAAA;;;YAOIvB,GAAAA,EAAAA,0BAAAA;;;;;MAAJ,SAAA,GAAA,GAAA;AACE,gBAAA,IAAI,IAAI,CAACyB,SAAS,IAAK,IAAI,CAACC,iBAAiB,IAAI,IAAI,CAAChiB,KAAK,CAACiiB,mBAAmB,CAACC,eAAe,EAAG;oBAChG,OAAO,IAAA,CAAA;AACT,iBAAA;AAEA,gBAAA,OAAO,IAAI,CAACJ,oBAAoB,IAAI,CAAC,IAAI,CAACxE,aAAa,CAAA;AACzD,aAAA;;;YAKItqC,GAAAA,EAAAA,YAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACs3B,WAAW,CAAA;AACzB,aAAA;;;YAKI4Q,GAAAA,EAAAA,eAAAA;;;MAAJ,SAAA,GAAA,GAAA;AACE,gBAAA,OAAO,IAAI,CAACwB,cAAc,CAACxB,aAAa,CAAA;AAC1C,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAkBjuD,KAAa,EAAA;AAC7B,gBAAA,IAAI,CAACyvD,cAAc,CAACxB,aAAa,GAAGjuD,KAAAA,CAAAA;AACpC,gBAAA,IAAI,CAACwxD,uBAAuB,EAAA,CAAA;AAC9B,aAAA;;;YAKItD,GAAAA,EAAAA,cAAAA;;;MAAJ,SAAA,GAAA,GAAA;AACE,gBAAA,OAAO,IAAI,CAACuB,cAAc,CAACvB,YAAY,CAAA;AACzC,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAiBluD,KAAa,EAAA;AAC5B,gBAAA,IAAI,CAACyvD,cAAc,CAACvB,YAAY,GAAGluD,KAAAA,CAAAA;AACnC,gBAAA,IAAI,CAACwxD,uBAAuB,EAAA,CAAA;AAC9B,aAAA;;;YAKI0D,GAAAA,EAAAA,aAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAAClF,YAAY,CAAA;AAC1B,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAgBhwD,KAAa,EAAA;gBAC3B,IAAI,CAACgwD,YAAY,GAAGhwD,KAAAA,CAAAA;AACpB,gBAAA,IAAI,CAACwxD,uBAAuB,EAAA,CAAA;AAC9B,aAAA;;;YAMI2D,GAAAA,EAAAA,aAAAA;;;;MAAJ,SAAA,GAAA,GAAA;gBACE,IAAMC,aAAAA,GAAgB,IAAI,CAACA,aAAa,CAAA;AACjC,gBAAA,IAAA,wBAAA,CAAA;gBAAP,OAAO,CAAA,wBAAA,GAAA,IAAI,CAAChF,kBAAkB,KAAvB,IAAA,GAAA,wBAAA,GAA2BgF,aAAchxD,CAAAA,KAAK,GAAGgxD,aAAAA,CAAc/wD,MAAM,CAAA;AAC9E,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAgBrE,KAAa,EAAA;gBAC3B,IAAI,CAACowD,kBAAkB,GAAGpwD,KAAAA,CAAAA;AAC1B,gBAAA,IAAI,CAACwxD,uBAAuB,EAAA,CAAA;AAC9B,aAAA;;;YAOIxE,GAAAA,EAAAA,UAAAA;;;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAAC0D,SAAS,CAAA;AACvB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAa1wD,KAAc,EAAA;AACzB,gBAAA,IAAIA,KAAU,KAAA,IAAI,CAAC0wD,SAAS,EAAE;AAC5B,oBAAA,IAAI,CAACA,SAAS,CAAC7yD,QAAQ,CAACmC,KAAAA,CAAAA,CAAAA;AAC1B,iBAAA;AACF,aAAA;;;YAMIo1D,GAAAA,EAAAA,eAAAA;;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACzE,cAAc,CAAA;AAC5B,aAAA;;;YAKItO,GAAAA,EAAAA,UAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAAC1E,SAAS,CAAA;AACvB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAa39C,KAAa,EAAA;AACxB,gBAAA,IAAI,IAAI,CAAC29C,SAAS,KAAK39C,KAAO,EAAA;oBAC5B,IAAI,IAAI,CAAC6xC,oBAAoB,EAAE;AAC7B,wBAAA,IAAI,CAACkB,KAAK,CAACoM,kBAAkB,CAACkW,kBAAkB,GAAG,IAAA,CAAA;AACrD,qBAAA;oBACA,IAAI,CAAC1X,SAAS,GAAG39C,KAAAA,CAAAA;AACnB,iBAAA;AACF,aAAA;;;YAKIggD,GAAAA,EAAAA,gBAAAA;;;MAAJ,SAAA,GAAA,GAAA;AACE,gBAAA,OAAO,IAAI,CAACyP,cAAc,CAACzP,cAAc,CAAA;AAC3C,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAmBhgD,KAAc,EAAA;AAC/B,gBAAA,IAAI,CAACyvD,cAAc,CAACzP,cAAc,GAAGhgD,KAAAA,CAAAA;AACrC,gBAAA,IAAI,CAACwxD,uBAAuB,EAAA,CAAA;AAE5B,gBAAA,IAAIxxD,KAAO,EAAA;AACT,oBAAA,IAAI,CAAC+lB,UAAU,CAAC+oB,WAAW,CAAC,qBAAA,CAAA,CAAA;iBACvB,MAAA;AACL,oBAAA,IAAI,CAAC/oB,UAAU,CAACipB,YAAY,CAAC,qBAAA,CAAA,CAAA;AAC/B,iBAAA;AACF,aAAA;;;YAKIsmB,GAAAA,EAAAA,kBAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACrF,iBAAiB,CAAA;AAC/B,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAqBjwD,KAAa,EAAA;gBAChC,IAAI,CAACiwD,iBAAiB,GAAGjwD,KAAAA,CAAAA;AACzB,gBAAA,IAAI,CAACwxD,uBAAuB,EAAA,CAAA;AAC9B,aAAA;;;YAKIrQ,GAAAA,EAAAA,YAAAA;;;MAAJ,SAAA,GAAA,GAAA;AACE,gBAAA,IAAMA,UAAa,GAAA,IAAI,CAACsO,cAAc,CAACtO,UAAU,CAAA;gBAEjD,IAAI,CAAC,IAAI,CAAC2P,kBAAkB,CAAC32C,IAAI,IAAI,IAAI,CAAC21C,mBAAmB,EAAE;oBAC7D,OAAO3O,UAAAA,CAAAA;AACT,iBAAA;AACA,gBAAA,IAAI,CAAC2P,kBAAkB,CAAC32C,IAAI,GAAG,KAAA,CAAA;;gBAG/B,IAAMm/B,SAAAA,GAAY,IAAI,CAACoH,UAAU,CAAA;AACjCpS,gBAAAA,iBAAAA,CAAOinB,mBAAmB,CAACjc,SAAAA,CAAUmB,uBAAuB,EAAEnB,SAAAA,CAAUvB,aAAa,EAAEoJ,UAAAA,CAAAA,CAAAA;AACvFA,gBAAAA,UAAAA,CAAW3G,MAAM,EAAA,CAAA;gBACjB,OAAO2G,UAAAA,CAAAA;AACT,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAenhD,KAAa,EAAA;AAC1B,gBAAA,IAAI,CAACyvD,cAAc,CAACtO,UAAU,CAACtjD,QAAQ,CAACmC,KAAAA,CAAAA,CAAAA;gBACxC,IAAI,CAAC8vD,mBAAmB,GAAG,IAAA,CAAA;AAC3B,gBAAA,IAAI,CAACwB,iBAAiB,EAAA,CAAA;AACxB,aAAA;;;YAMItD,GAAAA,EAAAA,kBAAAA;;;;MAAJ,SAAA,GAAA,GAAA;gBACE,IAAMtO,aAAAA,GAAgB,IAAI,CAAC+P,cAAc,CAAA;gBACzC,IAAMzB,gBAAAA,GAAmBtO,cAAcsO,gBAAgB,CAAA;gBAEvD,IAAI,CAAC,IAAI,CAACkC,kBAAkB,IAAI,IAAI,CAACH,yBAAyB,EAAE;oBAC9D,OAAO/B,gBAAAA,CAAAA;AACT,iBAAA;gBACA,IAAI,CAACkC,kBAAkB,GAAG,KAAA,CAAA;gBAE1B,IAAMiF,WAAAA,GAAc,IAAI,CAACA,WAAW,CAAA;gBACpC,IAAI,CAACzV,aAAcM,CAAAA,cAAc,EAAE;AACjC1R,oBAAAA,iBAAAA,CAAOknB,WAAW,CAChBx2C,mBAAAA,CAAS08B,cAAc,CAAC,IAAI,CAACsU,YAAY,CACzCmF,EAAAA,WAAAA,EACA,IAAI,CAAClH,aAAa,EAClB,IAAI,CAACC,YAAY,EACjBF,gBAAAA,CAAAA,CAAAA;iBAEG,MAAA;AACL,oBAAA,IAAM5pD,KAAQ,GAAA,IAAI,CAAC6rD,iBAAiB,GAAGkF,WAAAA,CAAAA;oBACvC,IAAM9wD,MAAAA,GAAS,IAAI,CAAC4rD,iBAAiB,CAAA;AACrC3hB,oBAAAA,iBAAAA,CAAOmnB,KAAK,CAAC,CAACrxD,KAAAA,EAAOA,OAAO,CAACC,MAAAA,EAAQA,MAAQ,EAAA,IAAI,CAAC4pD,aAAa,EAAE,IAAI,CAACC,YAAY,EAAEF,gBAAAA,CAAAA,CAAAA;AACtF,iBAAA;gBACA,OAAOA,gBAAAA,CAAAA;AACT,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAqBhuD,KAAa,EAAA;AAChC,gBAAA,IAAI,CAACyvD,cAAc,CAACzB,gBAAgB,CAACnwD,QAAQ,CAACmC,KAAAA,CAAAA,CAAAA;gBAC9C,IAAI,CAAC+vD,yBAAyB,GAAG,IAAA,CAAA;AACjC,gBAAA,IAAI,CAACyB,uBAAuB,EAAA,CAAA;AAC9B,aAAA;;;YAOIsD,GAAAA,EAAAA,WAAAA;;;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACtE,UAAU,CAAA;AACxB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAcxwD,KAAc,EAAA;AAC1B,gBAAA,IAAI,IAAI,CAAC80D,SAAS,KAAK90D,KAAO,EAAA;AAC5B,oBAAA,IAAM2tB,GAAM,GAAA,IAAI,CAACzvB,MAAM,CAACiF,iBAAiB,CAAA;oBACzC,IAAMuyD,UAAAA,GAAa/nC,IAAIqN,QAAQ,IAAIrN,IAAIsN,OAAO,CAACrU,iBAAiB+uC,gBAAgB,CAAA,CAAA;oBAChF,IAAI31D,KAAAA,IAAS,CAAC01D,UAAY,EAAA;AACxB7zD,wBAAAA,MAAAA,CAAOF,IAAI,CAAC,kCAAA,CAAA,CAAA;AACZ,wBAAA,OAAA;AACF,qBAAA;oBACA,IAAI,CAAC6uD,UAAU,GAAGxwD,KAAAA,CAAAA;AAClB,oBAAA,IAAI,CAAC40D,8BAA8B,EAAA,CAAA;AACrC,iBAAA;AACF,aAAA;;;YAOIG,GAAAA,EAAAA,mBAAAA;;;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACtE,kBAAkB,CAAA;AAChC,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAsBzwD,KAAc,EAAA;AAClC,gBAAA,IAAI,IAAI,CAACywD,kBAAkB,KAAKzwD,KAAO,EAAA;oBACrC,IAAI,CAACywD,kBAAkB,GAAGzwD,KAAAA,CAAAA;AAC1B,oBAAA,IAAI,CAAC40D,8BAA8B,EAAA,CAAA;AACrC,iBAAA;AACF,aAAA;;;YAKIV,GAAAA,EAAAA,cAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAAC7D,aAAa,CAAA;AAC3B,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAiBrwD,KAA0B,EAAA;AACzC,gBAAA,IAAI,IAAI,CAACqwD,aAAa,KAAKrwD,KAAO,EAAA;oBAChC,IAAI,CAACqwD,aAAa,IAAI,IAAI,CAAC1d,sBAAsB,CAAC,IAAI,CAAC0d,aAAa,EAAE,CAAC,CAAA,CAAA,CAAA;AACvErwD,oBAAAA,KAAAA,IAAS,IAAI,CAAC2yC,sBAAsB,CAAC3yC,KAAO,EAAA,CAAA,CAAA,CAAA;oBAC5C,IAAI,CAACqwD,aAAa,GAAGrwD,KAAAA,CAAAA;AACrB,oBAAA,IAAI,CAACmxD,uBAAuB,EAAA,CAAA;AAC9B,iBAAA;AACF,aAAA;;;AAtXWh9B,IAAAA,OAAAA,MAAAA,CAAAA;EAAeud,SA+xB3B,EAAA;AA9xBC,iBADWvd,cAAAA,CAEJyhC,2BAA8B5xC,GAAAA,cAAAA,CAAezD,SAAS,CAAC,qBAAA,CAAA,CAAA;AAC9D,iBAHW4T,cAAAA,CAIJ0hC,4BAA+B7xC,GAAAA,cAAAA,CAAezD,SAAS,CAAC,sBAAA,CAAA,CAAA;AAJpD4T,cAMIigC,CAAAA,0BAAAA,GAA6BpwC,cAAezD,CAAAA,SAAS,CAAC,mBAAA,CAAA,CAAA;AAN1D4T,cAOIkgC,CAAAA,uBAAAA,GAA0BrwC,cAAezD,CAAAA,SAAS,CAAC,iBAAA,CAAA,CAAA;AAPvD4T,cAQImgC,CAAAA,sBAAAA,GAAyBtwC,cAAezD,CAAAA,SAAS,CAAC,gBAAA,CAAA,CAAA;AARtD4T,cASIogC,CAAAA,iBAAAA,GAAoBvwC,cAAezD,CAAAA,SAAS,CAAC,WAAA,CAAA,CAAA;AATjD4T,cAUIugC,CAAAA,gCAAAA,GAAmC1wC,cAAezD,CAAAA,SAAS,CAAC,0BAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAX/B+hC,IAAAA,mBAAAA,CAAAA,SAAAA,EAAAA,aAAAA,CAAAA,SAAAA,CAAAA;;;ACtC9C;;IAGO,IAAKwT,cAAAA,iBAAAA,SAAAA,cAAAA,EAAAA;uBACM,cAAA,CAAA,cAAA,CAAA,YAAA,CAAA,GAAA,CAAA,CAAA,GAAA,YAAA,CAAA;eAER,cAAA,CAAA,cAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA,GAAA,KAAA,CAAA;mBAEI,cAAA,CAAA,cAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA;AALFA,IAAAA,OAAAA,cAAAA,CAAAA;AAOX,CAAA,CAAA,EAAA;;ACVD;;IAGO,IAAKC,yBAAAA,iBAAAA,SAAAA,yBAAAA,EAAAA;0FACyE,yBAAA,CAAA,yBAAA,CAAA,gBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,gBAAA,CAAA;2FAEC,yBAAA,CAAA,yBAAA,CAAA,iBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,iBAAA,CAAA;oDAEvC,yBAAA,CAAA,yBAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA,CAAA;AALnCA,IAAAA,OAAAA,yBAAAA,CAAAA;AAOX,CAAA,CAAA,EAAA;;ACND;;AAEC,IACM,IAAeC,eAAf,SAAeA,YAAAA,CACR,MAA8B,EAAA;SAAd93D,MAAAA,GAAAA,MAAAA,CAAAA;AAQ7B,CAAA;;ACTD;;IAGO,IAAM+3D,aAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,aAAAA,GAAAA;AAaHC,QAAAA,IAAAA,CAAAA,iBAAAA,GAA6B,IAAIj8D,kBAAAA,EAAAA,CAAAA;aASzC4wC,cAAiB,GAAA,KAAA,CAAA;AAIjBsrB,QAAAA,IAAAA,CAAAA,kBAAAA,GAAAA,CAAAA,CAAAA;;AA1BWF,IAAAA,IAAAA,MAAAA,GAAAA,aAAAA,CAAAA,SAAAA,CAAAA;AA4BXG,IAAAA,MAAAA,CAAAA,kBA0BC,GA1BDA,SAAAA,kBAAmB1W,CAAAA,aAA4B,EAAE7U,cAAuB,EAAA;QACtE,IAAI,CAAC6U,aAAa,GAAGA,aAAAA,CAAAA;QACrB,IAAI,CAAC7U,cAAc,GAAGA,cAAAA,CAAAA;AAEtB,QAAA,IAAM9kB,UAAa,GAAA,IAAI,CAACu6B,MAAM,CAACv6B,UAAU,CAAA;AACzC,QAAA,IAAMo7B,aAAuDzB,aAAvDyB,CAAAA,UAAAA,EAAY6M,mBAA2CtO,aAA3CsO,CAAAA,gBAAAA,EAAkBnM,uBAAyBnC,aAAzBmC,CAAAA,oBAAAA,CAAAA;AAEpC,QAAA,IAAIhX,cAAgB,EAAA;YAClByD,iBAAOsM,CAAAA,QAAQ,CAACqb,aApCTA,CAoCuBI,YAAY,EAAErI,gBAAAA,EAAkBiI,aApCvDA,CAoCqEK,sBAAsB,CAAA,CAAA;YAClGhoB,iBAAOsM,CAAAA,QAAQ,CAACqb,aArCTA,CAqCuBK,sBAAsB,EAAEnV,UAAAA,EAAY8U,aArC3DA,CAqCyEM,0BAA0B,CAAA,CAAA;YAE1GvI,gBAAmBiI,GAvCZA,cAuC0BK,sBAAsB,CAAA;YACvDzU,oBAAuBoU,GAxChBA,cAwC8BM,0BAA0B,CAAA;AACjE,SAAA;QAEA,IAAI,CAACpV,UAAU,GAAGA,UAAAA,CAAAA;QAClB,IAAI,CAAC6M,gBAAgB,GAAGA,gBAAAA,CAAAA;QACxB,IAAI,CAACnM,oBAAoB,GAAGA,oBAAAA,CAAAA;AAE5B97B,QAAAA,UAAAA,CAAWsoB,SAAS,CAAC4nB,aA/CZA,CA+C0BO,mBAAmB,EAAErV,UAAAA,CAAAA,CAAAA;AACxDp7B,QAAAA,UAAAA,CAAWsoB,SAAS,CAAC4nB,aAhDZA,CAgD0BQ,yBAAyB,EAAEzI,gBAAAA,CAAAA,CAAAA;AAC9DjoC,QAAAA,UAAAA,CAAWsoB,SAAS,CAAC4nB,aAjDZA,CAiD0BS,gBAAgB,EAAE7U,oBAAAA,CAAAA,CAAAA;QAErD,IAAM8U,gBAAAA,GAAmB,IAAI,CAACT,iBAAiB,CAAA;QAC/CS,gBAAiBj7D,CAAAA,GAAG,CAACmvC,cAAAA,GAAiB,CAAC,CAAA,GAAI,CAAG6U,EAAAA,aAAAA,CAAcuO,aAAa,EAAEvO,aAAcwO,CAAAA,YAAY,EAAE,CAAA,CAAA,CAAA;AACvGnoC,QAAAA,UAAAA,CAAWM,UAAU,CAAC4vC,aArDbA,CAqD2BW,yBAAyB,EAAED,gBAAAA,CAAAA,CAAAA;AACjE,KAAA,CAAA;IAEA3Q,MAAAA,CAAAA,iBAEC,GAFDA,SAAAA,iBAAAA,GAAAA;QACE,IAAI,CAAC1F,MAAM,GAAG,IAAA,CAAA;AAChB,KAAA,CAAA;AA1DW2V,IAAAA,OAAAA,aAAAA,CAAAA;AA2DZ,CAAA,EAAA,CAAA;AA3DYA,aACJS,CAAAA,gBAAAA,GAAmB1yC,cAAezD,CAAAA,SAAS,CAAC,cAAA,CAAA,CAAA;AADxC01C,aAEJY,CAAAA,gBAAAA,GAAiChqC,YAAatM,CAAAA,SAAS,CAAC,eAAA,CAAA,CAAA;AAE/D,iBAJW01C,aAKJI,CAAAA,YAAAA,GAAe,IAAI/nB,iBAAAA,CAAO,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAC,CAAA,CAAA,CAAA;AALtC2nB,aAOIW,CAAAA,yBAAAA,GAA4B5yC,cAAezD,CAAAA,SAAS,CAAC,yBAAA,CAAA,CAAA;AAPzD01C,aAQIO,CAAAA,mBAAAA,GAAsBxyC,cAAezD,CAAAA,SAAS,CAAC,gBAAA,CAAA,CAAA;AARnD01C,aASIQ,CAAAA,yBAAAA,GAA4BzyC,cAAezD,CAAAA,SAAS,CAAC,gBAAA,CAAA,CAAA;AATzD01C,aAAAA,CAUIK,yBAAyB,IAAIhoB,iBAAAA,EAAAA,CAAAA;AAVjC2nB,aAAAA,CAWIM,6BAA6B,IAAIjoB,iBAAAA,EAAAA,CAAAA;AAkDlD;;IAGO,IAAKwoB,yBAAAA,iBAAAA,SAAAA,yBAAAA,EAAAA;;;;;;;;AAAAA,IAAAA,OAAAA,yBAAAA,CAAAA;AAQX,CAAA,CAAA,EAAA,CAAA;;AClFD;;;IAIO,IAAKC,mBAAAA,iBAAAA,SAAAA,mBAAAA,EAAAA;;;;AAAAA,IAAAA,OAAAA,mBAAAA,CAAAA;AAIX,CAAA,CAAA,EAAA,CAAA;;ACGD;;IAGO,IAAMC,WAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,WAAAA,CAYC,eAAuC,EAAA;aAAhC1sB,eAAAA,GAAAA,eAAAA,CAAAA;AAHV30B,QAAAA,IAAAA,CAAAA,QAAAA,GAAW,IAAIlY,KAAAA,EAAAA,CAAAA;AACfw5D,QAAAA,IAAAA,CAAAA,kBAAAA,GAAqB,IAAIx5D,KAAAA,EAAAA,CAAAA;;AAVvBu5D,IAAAA,IAAAA,MAAAA,GAAAA,WAAAA,CAAAA,SAAAA,CAAAA;AAcXvL,IAAAA,MAAAA,CAAAA,iBAEC,GAFDA,SAAAA,iBAAAA,CAAkBzyC,OAAsB,EAAA;AACtC,QAAA,IAAI,CAACrD,QAAQ,CAAClW,IAAI,CAACuZ,OAAAA,CAAAA,CAAAA;AACrB,KAAA,CAAA;AAEAk+C,IAAAA,MAAAA,CAAAA,SAGC,GAHDA,SAAAA,SAAU9+C,CAAAA,WAAqB,EAAE++C,cAA8B,EAAA;AAC7D5jD,QAAAA,KAAAA,CAAMyE,UAAU,CAAC,IAAI,CAACrC,QAAQ,EAAE,CAAG,EAAA,IAAI,CAACA,QAAQ,CAACpY,MAAM,EAAE6a,WAAAA,CAAAA,CAAAA;QACzD,IAAI,CAACg/C,KAAK,CAACD,cAAAA,CAAAA,CAAAA;AACb,KAAA,CAAA;AAEAC,IAAAA,MAAAA,CAAAA,KAEC,GAFDA,SAAAA,KAAAA,CAAMD,cAA8B,EAAA;QAClCA,cAAeC,CAAAA,KAAK,CAAC,IAAI,CAAA,CAAA;AAC3B,KAAA,CAAA;IAEAvE,MAAAA,CAAAA,MA+IC,GA/IDA,SAAAA,MAAAA,CACE/nD,OAAsB,EACtBusD,qBAA6B,EAC7BC,QAAsD,EAAA;QAAtDA,IAAAA,QAAAA,KAAAA,KAAAA,CAAAA,EAAAA,QAAgCP,GAAAA,mBAAAA,CAAoBQ,EAAE,CAAA;QAEtD,IAAMN,kBAAAA,GAAqB,IAAI,CAACA,kBAAkB,CAAA;QAClD,IAAM15D,MAAAA,GAAS05D,mBAAmB15D,MAAM,CAAA;AACxC,QAAA,IAAIA,WAAW,CAAG,EAAA;AAChB,YAAA,OAAA;AACF,SAAA;AAEA,QAAA,IAAQ44D,kBAA+BrrD,GAAAA,OAAAA,CAA/BqrD,kBAAoB7V,EAAAA,MAAAA,GAAWx1C,OAAXw1C,CAAAA,MAAAA,CAAAA;AAC5B,QAAA,IAAQpiD,MAAgEoiD,GAAAA,MAAAA,CAAhEpiD,MAAQ60C,EAAAA,KAAAA,GAAwDuN,MAAxDvN,CAAAA,KAAAA,EAAO50C,QAAYq5D,GAAqClX,MAAjDniD,CAAAA,UAAAA,EAAsB4nB,UAAY0xC,GAAenX,MAA3Bv6B,CAAAA,UAAAA,CAAAA;QAC7C,IAAoB2xC,OAA8D3kB,GAAAA,KAAAA,CAA1E50C,UAAqB4nB,EAAY4xC,YAAyC5kB,KAArDhtB,CAAAA,UAAAA,EAAuB6xC,WAAcC,GAAgB9kB,KAA9B6kB,CAAAA,YAAAA,CAAAA;QACpD,IAAME,WAAAA,GAAc55D,OAAOs1D,YAAY,CAAA;QACvC,IAAM7lC,GAAAA,GAAMzvB,OAAOiF,iBAAiB,CAAA;QACpC,IAAM0zD,gBAAAA,GAAmBZ,cAAcY,gBAAgB,CAAA;QACvD,IAAMvsB,eAAAA,GAAkB,IAAI,CAACA,eAAe,CAAA;AAE5C,QAAA,IAAK,IAAI3sC,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAIJ,QAAQI,CAAK,EAAA,CAAA;YAC/B,IAAMo6D,UAAAA,GAAad,kBAAkB,CAACt5D,CAAE,CAAA,CAAA;YACxC,IAAmBuO,WAAgC6rD,UAA3C3nB,CAAAA,SAAAA,EAAqBqQ,UAAsBsX,UAAtBtX,CAAAA,OAAAA,EAAS/P,WAAaqnB,UAAbrnB,CAAAA,QAAAA,CAAAA;;AAGtC,YAAA,IACEylB,qBAAqBW,yBAA0BkB,CAAAA,eAAe,IAC9D9rD,QAAS+wC,CAAAA,2BAA2B,IAAIwD,OACxC,EAAA;;gBAEAv0C,QAASq0C,CAAAA,0BAA0B,CAACz1C,OAAAA,EAAS,KAAO21C,EAAAA,OAAAA,CAAAA,CAAAA;AACpDv0C,gBAAAA,QAAAA,CAAS+wC,2BAA2B,GAAGwD,OAAAA,CAAAA;AACzC,aAAA,MAAO,IAAI0V,kBAAAA,GAAqBW,yBAA0BmB,CAAAA,gBAAgB,EAAE;;gBAE1E/rD,QAASq0C,CAAAA,0BAA0B,CAACz1C,OAAAA,EAAS,IAAM21C,EAAAA,OAAAA,CAAAA,CAAAA;AACrD,aAAA;YAEA,IAAMlQ,eAAAA,GAAkBrkC,SAAS4wC,gBAAgB,CAAA;YACjD,IAAMob,mBAAAA,GAAsB3nB,eAAoB/9B,KAAAA,qBAAAA,CAAsBg+B,IAAI,CAAA;YAC1E,IAAM2nB,YAAAA,GAAeb,QAAaP,KAAAA,mBAAAA,CAAoBQ,EAAE,CAAA;AACxD,YAAA,IAAIn4B,YAAsC,GAAA,IAAA,CAAA;AAE1C,YAAA,IAAI+4B,YAAc,EAAA;gBAChB/4B,YAAeg5B,GAAAA,cAAAA,CAAeC,uBAAuB,CAACf,QAAAA,CAAAA,CAAAA;aACjD,MAAA;AACL,gBAAA,IAAIY,mBAAqB,EAAA;AACvBL,oBAAAA,WAAAA,CAAYS,QAAQ,CAACxtD,OAAAA,EAASusD,uBAAuBU,UAAW3nB,CAAAA,SAAS,CAAC2M,UAAU,CAAA,CAAA;oBACpF3d,YAAeg5B,GAAAA,cAAAA,CAAeG,8BAA8B,CAAChoB,eAAAA,CAAAA,CAAAA;iBACxD,MAAA;AACLsnB,oBAAAA,WAAAA,CAAYW,aAAa,CAAC9nB,QAAAA,CAAAA,IAAamnB,WAAYY,CAAAA,SAAS,CAAC3tD,OAASusD,EAAAA,qBAAAA,CAAAA,CAAAA;AACxE,iBAAA;AACAQ,gBAAAA,WAAAA,CAAYa,gBAAgB,CAAChoB,QAAAA,CAAAA,KAAcmnB,WAAYc,CAAAA,iBAAiB,GAAG,IAAG,CAAA,CAAA;AAChF,aAAA;YAEA,IAAMttB,aAAAA,GAAgB/P,OAAOgQ,cAAc,CAAA;YAC3C,IAAQggB,SAAAA,GAAiEyM,WAAjEzM,SAAWvb,EAAAA,YAAAA,GAAsDgoB,WAAtDhoB,YAAchqB,EAAY6yC,0BAA4Bb,UAAxChyC,CAAAA,UAAAA,CAAAA;AACjC,YAAA,IAAQA,YAAqD7Z,GAAAA,QAAAA,CAArD6Z,UAA0B5nB,EAAY06D,aAAe3sD,QAA3B/N,CAAAA,UAAAA,CAAAA;YAClC,IAAoB26D,eAAuDpoB,QAAnE3qB,CAAAA,UAAAA,EAA0B5nB,UAAyCuyC,GAAAA,QAAAA,CAAzCvyC,UAAwBouC,EAAAA,YAAAA,GAAiBmE,QAAjBnE,CAAAA,YAAAA,CAAAA;;AAG1DlrB,YAAAA,qBAAAA,CAAsBI,eAAe,CAACvV,QAAAA,CAAS2wC,kBAAkB,EAAEic,YAAAA,CAAa7rB,gBAAgB,EAAE5B,aAAAA,CAAAA,CAAAA;YAElG,IAAK,IAAIt9B,IAAI,CAAGC,EAAAA,CAAAA,GAAI+hC,aAAaxyC,MAAM,EAAEwQ,CAAIC,GAAAA,CAAAA,EAAGD,CAAK,EAAA,CAAA;gBACnD,IAAMo9B,UAAAA,GAAa4E,YAAY,CAAChiC,CAAE,CAAA,CAAA;AAClC,gBAAA,IAAIo9B,UAAW5d,CAAAA,WAAW,CAACspC,gBAAAA,CAAAA,KAAsBQ,qBAAuB,EAAA;AACtE,oBAAA,SAAA;AACF,iBAAA;AAEA,gBAAA,IAAI,CAACc,YAAc,EAAA;AACZhtB,oBAAAA,IAAAA,wBAAAA,CAAAA;AAAL,oBAAA,IAAI,CAACA,CAAAA,wBAAAA,GAAAA,WAAWwB,YAAY,KAAA,IAAA,GAAvBxB,wBAA2BoB,GAAAA,YAAY,CAACx+B,CAAE,CAAD,EAAGu8B,eAAe,KAAKA,eAAiB,EAAA;AACpF,wBAAA,SAAA;AACF,qBAAA;AACF,iBAAA;AAEA,gBAAA,IAAM3V,OAAUwW,GAAAA,UAAAA,CAAW/Q,iBAAiB,CAACl8B,MAAQmtC,EAAAA,aAAAA,CAAAA,CAAAA;gBACrD,IAAI,CAAC1W,OAAQmE,CAAAA,OAAO,EAAE;AACpB,oBAAA,SAAA;AACF,iBAAA;gBAEA,IAAMigC,aAAAA,GAAgBpkC,QAAQlzB,IAAI,EAAA,CAAA;gBAClC,IAAMu3D,iBAAAA,GAAoBlB,WAAgBnjC,KAAAA,OAAAA,CAAQ1C,kBAAkB,CAAA;AAEpE,gBAAA,IAAI+mC,iBAAmB,EAAA;AACrBrkC,oBAAAA,OAAAA,CAAQlB,yBAAyB,EAAA,CAAA;AACjCkB,oBAAAA,OAAAA,CAAQ7B,SAAS,CAAC6B,OAAQhD,CAAAA,iBAAiB,EAAEgmC,SAAAA,CAAAA,CAAAA;AAC7ChjC,oBAAAA,OAAAA,CAAQ7B,SAAS,CAAC6B,OAAQ/C,CAAAA,kBAAkB,EAAE6lC,UAAAA,CAAAA,CAAAA;AAC9C9iC,oBAAAA,OAAAA,CAAQ7B,SAAS,CAAC6B,OAAQ9C,CAAAA,oBAAoB,EAAEonC,YAAAA,CAAAA,CAAAA;AAChDtkC,oBAAAA,OAAAA,CAAQ7B,SAAS,CAAC6B,OAAQ7C,CAAAA,oBAAoB,EAAEgnC,YAAAA,CAAAA,CAAAA;AAChDF,oBAAAA,uBAAAA,IAA2BjkC,OAAQ7B,CAAAA,SAAS,CAAC6B,OAAAA,CAAQ5C,yBAAyB,EAAE6mC,uBAAAA,CAAAA,CAAAA;;AAEhFjkC,oBAAAA,OAAAA,CAAQnB,qBAAqB,EAAA,CAAA;AAC7BmB,oBAAAA,OAAAA,CAAQzC,cAAc,GAAGwlC,OAAAA,CAAAA;AACzB/iC,oBAAAA,OAAAA,CAAQxC,eAAe,GAAGqlC,QAAAA,CAAAA;AAC1B7iC,oBAAAA,OAAAA,CAAQvC,iBAAiB,GAAGymC,UAAAA,CAAAA;AAC5BlkC,oBAAAA,OAAAA,CAAQtC,iBAAiB,GAAG6mC,UAAAA,CAAAA;AAC5BvkC,oBAAAA,OAAAA,CAAQ1C,kBAAkB,GAAG6lC,WAAAA,CAAAA;iBACxB,MAAA;oBACL,IAAInjC,OAAAA,CAAQzC,cAAc,KAAKwlC,OAAS,EAAA;AACtC/iC,wBAAAA,OAAAA,CAAQ7B,SAAS,CAAC6B,OAAQhD,CAAAA,iBAAiB,EAAEgmC,SAAAA,CAAAA,CAAAA;AAC7ChjC,wBAAAA,OAAAA,CAAQzC,cAAc,GAAGwlC,OAAAA,CAAAA;AAC3B,qBAAA,MAAO,IAAIqB,aAAe,EAAA;AACxBpkC,wBAAAA,OAAAA,CAAQ1B,cAAc,CAAC0B,OAAQhD,CAAAA,iBAAiB,EAAEgmC,SAAAA,CAAAA,CAAAA;AACpD,qBAAA;oBAEA,IAAIhjC,OAAAA,CAAQxC,eAAe,KAAKqlC,QAAU,EAAA;AACxC7iC,wBAAAA,OAAAA,CAAQ7B,SAAS,CAAC6B,OAAQ/C,CAAAA,kBAAkB,EAAE6lC,UAAAA,CAAAA,CAAAA;AAC9C9iC,wBAAAA,OAAAA,CAAQxC,eAAe,GAAGqlC,QAAAA,CAAAA;AAC5B,qBAAA,MAAO,IAAIuB,aAAe,EAAA;AACxBpkC,wBAAAA,OAAAA,CAAQ1B,cAAc,CAAC0B,OAAQ/C,CAAAA,kBAAkB,EAAE6lC,UAAAA,CAAAA,CAAAA;AACrD,qBAAA;oBAEA,IAAI9iC,OAAAA,CAAQvC,iBAAiB,KAAKymC,UAAY,EAAA;AAC5ClkC,wBAAAA,OAAAA,CAAQ7B,SAAS,CAAC6B,OAAQ9C,CAAAA,oBAAoB,EAAEonC,YAAAA,CAAAA,CAAAA;AAChDtkC,wBAAAA,OAAAA,CAAQvC,iBAAiB,GAAGymC,UAAAA,CAAAA;AAC9B,qBAAA,MAAO,IAAIE,aAAe,EAAA;AACxBpkC,wBAAAA,OAAAA,CAAQ1B,cAAc,CAAC0B,OAAQ9C,CAAAA,oBAAoB,EAAEonC,YAAAA,CAAAA,CAAAA;AACvD,qBAAA;oBAEA,IAAItkC,OAAAA,CAAQtC,iBAAiB,KAAK6mC,UAAY,EAAA;AAC5CvkC,wBAAAA,OAAAA,CAAQ7B,SAAS,CAAC6B,OAAQ7C,CAAAA,oBAAoB,EAAEgnC,YAAAA,CAAAA,CAAAA;AAChDnkC,wBAAAA,OAAAA,CAAQtC,iBAAiB,GAAG6mC,UAAAA,CAAAA;AAC9B,qBAAA,MAAO,IAAIH,aAAe,EAAA;AACxBpkC,wBAAAA,OAAAA,CAAQ1B,cAAc,CAAC0B,OAAQ7C,CAAAA,oBAAoB,EAAEgnC,YAAAA,CAAAA,CAAAA;AACvD,qBAAA;AAEAF,oBAAAA,uBAAAA,IAA2BjkC,OAAQ7B,CAAAA,SAAS,CAAC6B,OAAAA,CAAQ5C,yBAAyB,EAAE6mC,uBAAAA,CAAAA,CAAAA;;AAGhF,oBAAA,IAAIG,aAAe,EAAA;AACjBpkC,wBAAAA,OAAAA,CAAQnB,qBAAqB,EAAA,CAAA;AAC/B,qBAAA;AACF,iBAAA;AAEoB2X,gBAAAA,IAAAA,yBAAAA,CAAAA;gBAApB,IAAMuB,WAAAA,GAAcvB,CAAAA,yBAAAA,GAAAA,UAAAA,CAAWwB,YAAY,KAAvBxB,IAAAA,GAAAA,yBAAAA,GAA2BoB,YAAY,CAACx+B,CAAE,CAAA,CAAA;AAC9D2+B,gBAAAA,WAAAA,CAAYlC,YAAY,CACtBtsC,MACAgO,EAAAA,QAAAA,CAASylC,MAAM,CAAC2H,SAAS,CAACR,kBAAkB,IAC5C3N,UAAW7R,CAAAA,mBAAmB,EAC9BoX,QAAAA,CAAS3qB,UAAU,EACnBqZ,YAAAA,CAAAA,CAAAA;AAEFzR,gBAAAA,GAAAA,CAAIkgC,aAAa,CAACvC,SAAWyM,EAAAA,UAAAA,CAAWoB,YAAY,EAAExkC,OAAAA,CAAAA,CAAAA;AACxD,aAAA;AACF,SAAA;AACF,KAAA,CAAA;IAEAxS,MAAAA,CAAAA,KAGC,GAHDA,SAAAA,KAAAA,GAAAA;AACE,QAAA,IAAI,CAACxM,QAAQ,CAACpY,MAAM,GAAG,CAAA,CAAA;AACvB,QAAA,IAAI,CAAC05D,kBAAkB,CAAC15D,MAAM,GAAG,CAAA,CAAA;AACnC,KAAA,CAAA;IAEAgB,MAAAA,CAAAA,OAAkB,GAAlBA,SAAAA,OAAiB,GAAA,EAAA,CAAA;AAjLNy4D,IAAAA,WAAAA,CACJoC,gBAEN,GAFD,SAAOA,gBAAiBnhD,CAAAA,CAAgB,EAAEkX,CAAgB,EAAA;QACxD,OAAOlX,CAAAA,CAAEoqC,QAAQ,GAAGlzB,CAAEkzB,CAAAA,QAAQ,IAAIpqC,CAAEohD,CAAAA,eAAe,GAAGlqC,CAAAA,CAAEkqC,eAAe,CAAA;AACzE,KAAA,CAAA;AAHWrC,IAAAA,WAAAA,CAKJsC,qBAEN,GAFD,SAAOA,qBAAsBrhD,CAAAA,CAAgB,EAAEkX,CAAgB,EAAA;QAC7D,OAAOlX,CAAAA,CAAEoqC,QAAQ,GAAGlzB,CAAEkzB,CAAAA,QAAQ,IAAIlzB,CAAEkqC,CAAAA,eAAe,GAAGphD,CAAAA,CAAEohD,eAAe,CAAA;AACzE,KAAA,CAAA;AAPWrC,IAAAA,OAAAA,WAAAA,CAAAA;AAkLZ,CAAA;;AC7LD;;AAEC,IACM,IAAA,eAAMuC,GAAN,SAAMA,eAAAA,GAAAA;AAEX7Z,IAAAA,IAAAA,CAAAA,aAAAA,GAA+B,IAAIqO,aAAAA,EAAAA,CAAAA;SACnCyL,UAAsB,GAAA;AACpB,QAAA,IAAIC,iBAAM,IAAI/iC,kBAAAA,EAAAA,CAAAA;AACd,QAAA,IAAI+iC,iBAAM,IAAI/iC,kBAAAA,EAAAA,CAAAA;AACd,QAAA,IAAI+iC,iBAAM,IAAI/iC,kBAAAA,EAAAA,CAAAA;AACd,QAAA,IAAI+iC,iBAAM,IAAI/iC,kBAAAA,EAAAA,CAAAA;AACd,QAAA,IAAI+iC,iBAAM,IAAI/iC,kBAAAA,EAAAA,CAAAA;AACd,QAAA,IAAI+iC,iBAAM,IAAI/iC,kBAAAA,EAAAA,CAAAA;AACd,QAAA,IAAI+iC,iBAAM,IAAI/iC,kBAAAA,EAAAA,CAAAA;AACd,QAAA,IAAI+iC,iBAAM,IAAI/iC,kBAAAA,EAAAA,CAAAA;AACd,QAAA,IAAI+iC,iBAAM,IAAI/iC,kBAAAA,EAAAA,CAAAA;AACd,QAAA,IAAI+iC,iBAAM,IAAI/iC,kBAAAA,EAAAA,CAAAA;AACf,KAAA,CAAA;;SAIDgjC,gBAAmC,GAAA,IAAIC,yBAAe,CAAA,IAAIjjC,kBAAW,EAAA,EAAA,GAAA,CAAA,CAAA;AAEtE,CAAA;;AC1BD;;IAGO,IAAKkjC,gBAAAA,iBAAAA,SAAAA,gBAAAA,EAAAA;sCACqB,gBAAA,CAAA,gBAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA,GAAA,KAAA,CAAA;yCAEG,gBAAA,CAAA,gBAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;wCAED,gBAAA,CAAA,gBAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA,CAAA;4CAEI,gBAAA,CAAA,gBAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA,CAAA;AAP3BA,IAAAA,OAAAA,gBAAAA,CAAAA;AASX,CAAA,CAAA,EAAA;;ACZD;;IAGO,IAAKC,UAAAA,iBAAAA,SAAAA,UAAAA,EAAAA;4BACW,UAAA,CAAA,UAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA,CAAA;8BAEE,UAAA,CAAA,UAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA,CAAA;+CAEiB,UAAA,CAAA,UAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA;iDAEE,UAAA,CAAA,UAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA,CAAA;AAPhCA,IAAAA,OAAAA,UAAAA,CAAAA;AASX,CAAA,CAAA,EAAA;;ACyBD;;IAGO,IAAMC,WAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,WAAAA,GAAAA,EAAAA;AAAAA,IAAAA,WAAAA,CAiGJC,gBAWN,GAXD,SAAOA,gBAAAA,CAAiB/5D,KAAuB,EAAA;QAC7C,OAAQA,KAAAA;AACN,YAAA,KAAK45D,iBAAiBI,GAAG;gBACvB,OAAO,GAAA,CAAA;AACT,YAAA,KAAKJ,iBAAiBK,MAAM;gBAC1B,OAAO,IAAA,CAAA;AACT,YAAA,KAAKL,iBAAiBM,IAAI;gBACxB,OAAO,IAAA,CAAA;AACT,YAAA,KAAKN,iBAAiBO,QAAQ;gBAC5B,OAAO,IAAA,CAAA;AACX,SAAA;AACF,KAAA,CAAA;AA5GWL,IAAAA,WAAAA,CA8GJM,iBAMN,GAND,SAAOA,iBAAkBp6D,CAAAA,KAAuB,EAAEq6D,mBAA4B,EAAA;AAC5E,QAAA,IAAIA,mBAAqB,EAAA;AACvB,YAAA,OAAO15D,cAAc4F,OAAO,CAAA;SACvB,MAAA;AACL,YAAA,OAAO5F,cAAcyF,QAAQ,CAAA;AAC/B,SAAA;AACF,KAAA,CAAA;IApHW0zD,WAsHJQ,CAAAA,mBAgBN,GAhBD,SAAOA,mBAAAA,CAAoBza,MAAmB,EAAE0a,cAAsB,EAAEf,UAAmB,EAAA;AACzF,QAAA,IAAQ37C,GAAagiC,GAAAA,MAAAA,CAAbhiC,GAAKha,EAAAA,GAAAA,GAAQg8C,MAARh8C,CAAAA,GAAAA,CAAAA;AAEb,QAAA,IAAK,IAAIlG,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAI48D,gBAAgB58D,CAAK,EAAA,CAAA;YACvC,IAAM68D,KAAAA,GAAQhB,UAAU,CAAC77D,CAAE,CAAA,CAAA;YAC3B,IAAM88D,MAAAA,GAASD,MAAMC,MAAM,CAAA;YAC3B,IACEA,MAAAA,CAAOvzD,CAAC,IAAIuzD,OAAOvzD,CAAC,IAAI,GAAMrD,GAAAA,GAAAA,CAAIqD,CAAC,GAAG2W,IAAI3W,CAAAA,IACxCuzD,MAAOtzD,CAAAA,CAAC,IAAIszD,MAAAA,CAAOtzD,CAAC,IAAI,GAAMtD,GAAAA,GAAAA,CAAIsD,CAAC,GAAG0W,GAAAA,CAAI1W,CAAC,CAADA,GAC1CszD,OAAOt9C,CAAC,IAAIs9C,MAAAA,CAAOt9C,CAAC,IAAI,MAAMtZ,GAAIsZ,CAAAA,CAAC,GAAGU,GAAIV,CAAAA,CAAC,CAC7C,GAAA,CAACq9C,KAAME,CAAAA,QAAQ,EACf;gBACA,OAAO,KAAA,CAAA;AACT,aAAA;AACF,SAAA;QACA,OAAO,IAAA,CAAA;AACT,KAAA,CAAA;IAtIWZ,WAwIJa,CAAAA,iBAiBN,GAjBD,SAAOA,iBACL7vD,CAAAA,OAAsB,EACtB8vD,KAAY,EACZ1uD,QAAkB,EAClB2uD,eAAgC,EAAA;AAEhC,QAAA,IAAM9Z,KAAQ70C,GAAAA,QAAAA,CAAS8lC,OAAO,CAAC+O,KAAK,CAAA;;QAEpC,IAAIj2C,OAAAA,CAAQw1C,MAAM,CAACyO,WAAW,GAAGhO,KAAS6Z,IAAAA,KAAAA,CAAM7L,WAAW,GAAGhO,KAAO,EAAA;AACnE,YAAA,IACE70C,QAAS2xC,CAAAA,WAAW,IAlJfic,YAmJOQ,mBAAmB,CAACpuD,QAAS2zC,CAAAA,MAAM,EAAEgb,eAAgBN,CAAAA,cAAc,EAAEM,eAAAA,CAAgBrB,UAAU,CAC3G,EAAA;AACAttD,gBAAAA,QAAAA,CAASszC,cAAc,CAAC10C,OAAAA,CAAAA,CAAAA;AACxBoB,gBAAAA,QAAAA,CAASuzC,iBAAiB,GAAGvzC,QAAAA,CAAShO,MAAM,CAACgoB,IAAI,CAACM,UAAU,CAAA;AAC9D,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AAzJWszC,IAAAA,WAAAA,CA2JJgB,uBA8BN,GA9BD,SAAOA,uBAAAA,CACLC,IAAY,EACZC,GAAW,EACX1a,MAAc,EACdH,OAAgB,EAChB0a,eAAgC,EAAA;AAEhC,QAAA,IAAQ1F,WAA6B7U,GAAAA,MAAAA,CAA7B6U,WAAaD,EAAAA,WAAAA,GAAgB5U,MAAhB4U,CAAAA,WAAAA,CAAAA;;QAGrB,IAAI+F,OAAAA,CAAAA;QACJ,IAAIC,MAAAA,CAAAA;AACJ,QAAA,IAAM3+D,CAAIkH,GAAAA,IAAAA,CAAK03D,IAAI,CAAC,GAAMhG,GAAAA,WAAAA,GAAcA,WAAe1xD,CAAAA,GAAAA,IAAAA,CAAK23D,GAAG,CAACp8C,mBAAS08B,CAAAA,cAAc,CAACwZ,WAAe,CAAA,GAAA,GAAA,CAAA,CAAA;AACvG,QAAA,IAAMmG,KAAK9+D,CAAIA,GAAAA,CAAAA,CAAAA;AACf,QAAA,IAAM++D,WAAWN,GAAMD,GAAAA,IAAAA,CAAAA;AACvB,QAAA,IAAMQ,WAAWP,GAAMD,GAAAA,IAAAA,CAAAA;QACvB,IAAIM,EAAAA,GAAKC,WAAWC,QAAU,EAAA;YAC5BN,OAAUD,GAAAA,GAAAA,CAAAA;AACVE,YAAAA,MAAAA,GAASF,GAAMz+D,GAAAA,CAAAA,CAAAA;SACV,MAAA;AACL0+D,YAAAA,OAAAA,GAAU,GAAMM,GAAAA,QAAAA,IAAY,CAAA,GAAIF,EAAC,CAAA,CAAA;AACjCH,YAAAA,MAAAA,GACE,MAAMz3D,IAAK03D,CAAAA,IAAI,CAACG,QAAAA,GAAWA,WAAW,GAAON,IAAAA,GAAMA,GAAAA,GAAAA,GAAMD,OAAOA,IAAG,CAAA,GAAKM,EAAKE,GAAAA,QAAAA,GAAWA,WAAWF,EAAKA,GAAAA,EAAAA,CAAAA,CAAAA;AAC5G,SAAA;AAEA,QAAA,IAAMG,MAASX,GAAAA,eAAAA,CAAgBnB,gBAAgB,CAAC8B,MAAM,CAAA;QACtDX,eAAgBnB,CAAAA,gBAAgB,CAACwB,MAAM,GAAGA,MAAAA,CAAAA;QAC1CxkC,kBAAQwhB,CAAAA,KAAK,CAACiI,OAAAA,EAAS8a,OAASO,EAAAA,MAAAA,CAAAA,CAAAA;QAChC9kC,kBAAQjK,CAAAA,GAAG,CAAC6zB,MAAO3O,CAAAA,MAAM,CAAC2H,SAAS,CAACvB,aAAa,EAAEyjB,MAAQA,EAAAA,MAAAA,CAAAA,CAAAA;AAC3DX,QAAAA,eAAAA,CAAgBY,aAAa,GAAGR,OAAAA,CAAAA;AAClC,KAAA,CAAA;AAzLWnB,IAAAA,WAAAA,CA2LJ4B,iCAyFN,GAzFD,SAAOA,iCAAAA,CACLC,aAA8B,EAC9BC,aAAqB,EACrBC,UAAkB,EAClBtJ,SAAkB,EAClBsI,eAAgC,EAAA;;QAGhC,IAAMiB,cAAAA,GAAiBhC,WAnMdA,CAmM0BiC,eAAe,CAAA;QAClD,IAAMC,cAAAA,GAAiBlC,WApMdA,CAoM0BmC,eAAe,CAAA;QAClD,IAAMC,cAAAA,GAAiBpC,WArMdA,CAqM0BqC,sBAAsB,CAAA;QACzD,IAAMC,eAAAA,GAAkBtC,WAtMfA,CAsM2BuC,uBAAuB,CAAA;QAC3D,IAAMC,eAAAA,GAAkBxC,WAvMfA,CAuM2ByC,gBAAgB,CAAA;QACpD,IAAM30D,GAAAA,GAAMizD,gBAAgBrB,UAAU,CAAA;;AAGtC,QAAA,IAAMuB,IAAOY,GAAAA,aAAAA,CAAca,QAAQ,CAACC,uBAAYC,IAAI,CAAA,CAAA;AACpD,QAAA,IAAM1B,GAAMW,GAAAA,aAAAA,CAAca,QAAQ,CAACC,uBAAYE,GAAG,CAAA,CAAA;AAClD,QAAA,IAAMtnD,IAAOsmD,GAAAA,aAAAA,CAAca,QAAQ,CAACC,uBAAYG,IAAI,CAAA,CAAA;AACpD,QAAA,IAAMj/C,KAAQg+C,GAAAA,aAAAA,CAAca,QAAQ,CAACC,uBAAYI,KAAK,CAAA,CAAA;AACtD,QAAA,IAAMpsD,MAASkrD,GAAAA,aAAAA,CAAca,QAAQ,CAACC,uBAAYK,MAAM,CAAA,CAAA;AACxD,QAAA,IAAMtsD,GAAMmrD,GAAAA,aAAAA,CAAca,QAAQ,CAACC,uBAAYM,GAAG,CAAA,CAAA;;AAGlD,QAAA,IAAMC,oBAAoBpB,aAAgBC,GAAAA,UAAAA,CAAAA;QAC1C,IAAMoB,SAAAA,GAAYnD,WApNTA,CAoNqBoD,gBAAgB,CAAA;QAC9C,IAAMC,QAAAA,GAAWrD,WArNRA,CAqNoBsD,eAAe,CAAA;AAC5CH,QAAAA,SAAAA,CAAUxC,MAAM,CAAC58D,QAAQ,CAACk9D,KAAKN,MAAM,CAAA,CAAA;AACrC0C,QAAAA,QAAAA,CAAS1C,MAAM,CAAC58D,QAAQ,CAACm9D,IAAIP,MAAM,CAAA,CAAA;AACnCwC,QAAAA,SAAAA,CAAUvC,QAAQ,GAAGK,IAAKL,CAAAA,QAAQ,GAAGsC,iBAAAA,CAAAA;;AAErCG,QAAAA,QAAAA,CAASzC,QAAQ,GAAGj3D,IAAAA,CAAKoa,GAAG,CAC1B,CAACk9C,KAAKL,QAAQ,GAAGG,eAAgBY,CAAAA,aAAa,GAAGZ,eAAgBnB,CAAAA,gBAAgB,CAACwB,MAAM,EACxFF,IAAIN,QAAQ,CAAA,CAAA;AAGd2C,QAAAA,wBAAAA,CAAcC,4BAA4B,CAACL,SAAAA,EAAWxsD,MAAQkN,EAAAA,KAAAA,EAAOm+C,cAAc,CAA+B,CAAA,CAAA,CAAA,CAAA;AAClHuB,QAAAA,wBAAAA,CAAcC,4BAA4B,CAACL,SAAAA,EAAWzsD,GAAKmN,EAAAA,KAAAA,EAAOm+C,cAAc,CAA4B,CAAA,CAAA,CAAA,CAAA;AAC5GuB,QAAAA,wBAAAA,CAAcC,4BAA4B,CAACL,SAAAA,EAAWzsD,GAAK6E,EAAAA,IAAAA,EAAMymD,cAAc,CAA2B,CAAA,CAAA,CAAA,CAAA;AAC1GuB,QAAAA,wBAAAA,CAAcC,4BAA4B,CAACL,SAAAA,EAAWxsD,MAAQ4E,EAAAA,IAAAA,EAAMymD,cAAc,CAA8B,CAAA,CAAA,CAAA,CAAA;AAChHuB,QAAAA,wBAAAA,CAAcC,4BAA4B,CAACH,QAAAA,EAAU1sD,MAAQkN,EAAAA,KAAAA,EAAOm+C,cAAc,CAA8B,CAAA,CAAA,CAAA,CAAA;AAChHuB,QAAAA,wBAAAA,CAAcC,4BAA4B,CAACH,QAAAA,EAAU3sD,GAAKmN,EAAAA,KAAAA,EAAOm+C,cAAc,CAA2B,CAAA,CAAA,CAAA,CAAA;AAC1GuB,QAAAA,wBAAAA,CAAcC,4BAA4B,CAACH,QAAAA,EAAU3sD,GAAK6E,EAAAA,IAAAA,EAAMymD,cAAc,CAA0B,CAAA,CAAA,CAAA,CAAA;AACxGuB,QAAAA,wBAAAA,CAAcC,4BAA4B,CAACH,QAAAA,EAAU1sD,MAAQ4E,EAAAA,IAAAA,EAAMymD,cAAc,CAA6B,CAAA,CAAA,CAAA,CAAA;AAE9G,QAAA,IAAIyB,SAAY,GAAA,CAAA,CAAA;AAChB,QAAA,IAAK,IAAI5/D,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAI,GAAGA,CAAK,EAAA,CAAA;;AAE1B,YAAA,IAAI68D,QAAAA,KAAAA,CAAAA,CAAAA;YACJ,OAAQ78D,CAAAA;AACN,gBAAA,KAAK8+D,uBAAYC,IAAI;oBACnBlC,KAAQyC,GAAAA,SAAAA,CAAAA;AACR,oBAAA,MAAA;AACF,gBAAA,KAAKR,uBAAYE,GAAG;oBAClBnC,KAAQ2C,GAAAA,QAAAA,CAAAA;AACR,oBAAA,MAAA;AACF,gBAAA;oBACE3C,KAAQmB,GAAAA,aAAAA,CAAca,QAAQ,CAAC7+D,CAAAA,CAAAA,CAAAA;AAC/B,oBAAA,MAAA;AACJ,aAAA;AACA,YAAA,IAAI+4B,mBAAQwpB,GAAG,CAACsa,MAAMC,MAAM,EAAElI,aAAa,GAAK,EAAA;AAC9C3qD,gBAAAA,GAAG,CAAC21D,SAAAA,CAAU,CAAC1/D,QAAQ,CAAC28D,KAAAA,CAAAA,CAAAA;gBACxBwB,cAAc,CAACuB,UAAU,GAAG5/D,CAAAA,CAAAA;AAC5B4/D,gBAAAA,SAAAA,EAAAA,CAAAA;AACF,aAAA;AACF,SAAA;AAEA,QAAA,IAAIC,SAAYD,GAAAA,SAAAA,CAAAA;AAChB,QAAA,IAAK,IAAI5/D,EAAAA,GAAI,CAAGA,EAAAA,EAAAA,GAAI4/D,WAAW5/D,EAAK,EAAA,CAAA;YAClC,IAAM8/D,QAAAA,GAAWzB,cAAc,CAACr+D,EAAE,CAAA,CAAA;YAClC,IAAM+/D,aAAAA,GAAgBxB,cAAc,CAACuB,QAAS,CAAA,CAAA;AAC9C,YAAA,IAAK,IAAI1vD,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAI,GAAGA,CAAK,EAAA,CAAA;gBAC1B,IAAM4vD,YAAAA,GAAeD,aAAa,CAAC3vD,CAAE,CAAA,CAAA;AACrC,gBAAA,IAAI6vD,WAAc,GAAA,IAAA,CAAA;gBAClB,IAAK,IAAIrhE,CAAI,GAAA,CAAA,EAAGA,CAAIghE,GAAAA,SAAAA,EAAWhhE,CAC7B,EAAA,CAAA,IAAIohE,YAAgB3B,IAAAA,cAAc,CAACz/D,CAAAA,CAAE,EAAE;oBACrCqhE,WAAc,GAAA,KAAA,CAAA;AACd,oBAAA,MAAA;AACF,iBAAA;AACF,gBAAA,IAAIA,WAAa,EAAA;AACf,oBAAA,IAAMC,OAAUzB,GAAAA,eAAe,CAACqB,QAAAA,CAAS,CAACE,YAAa,CAAA,CAAA;AACvD,oBAAA,IAAMG,SAAShC,cAAc,CAAC+B,OAAO,CAAC,EAAE,CAAC,CAAA;AACzC,oBAAA,IAAME,SAASjC,cAAc,CAAC+B,OAAO,CAAC,EAAE,CAAC,CAAA;oBACzCnnC,kBAAQjK,CAAAA,GAAG,CAACqxC,MAAAA,EAAQvL,SAAW+J,EAAAA,eAAAA,CAAAA,CAAAA;AAC/B7C,oBAAAA,gBAAAA,CAAMuE,UAAU,CAACF,MAAAA,EAAQC,QAAQzB,eAAiB10D,EAAAA,GAAG,CAAC41D,SAAY,EAAA,CAAA,CAAA,CAAA;AACpE,iBAAA;AACF,aAAA;AACF,SAAA;AACA3C,QAAAA,eAAAA,CAAgBN,cAAc,GAAGiD,SAAAA,CAAAA;AACnC,KAAA,CAAA;AApRW1D,IAAAA,WAAAA,CAsRJmE,2BA0DN,GA1DD,SAAOA,4BACLC,OAAgB,EAChBC,SAAkB,EAClBC,YAAqB,EACrBC,YAAoB,EACpBC,SAAiB,EACjBvE,gBAAwB,EACxBc,eAAgC,EAChC0D,iBAA+B,EAAA;QAE/B,IAAMC,WAAAA,GAAc3D,gBAAgBnB,gBAAgB,CAAA;AACpDmB,QAAAA,eAAAA,CAAgB4D,UAAU,GAAG1E,gBAAAA,CAAAA;;QAG7B,IAAMyB,MAAAA,GAASgD,YAAYhD,MAAM,CAAA;QACjC,IAAMN,MAAAA,GAASsD,YAAYtD,MAAM,CAAA;AACjC,QAAA,IAAMwD,uBAAuB3E,gBAAmB,GAAA,CAAA,CAAA;;;QAGhD,IAAM4E,YAAAA,GAAe,MAAUD,GAAAA,oBAAAA,IAAyBA,oBAAuB5E,GAzStEA,WAySkF8E,CAAAA,eAAe,CAAD,CAAA;AACzG,QAAA,IAAMC,aAAaF,YAAe,GAAA,GAAA,CAAA;AAClC,QAAA,IAAMG,WAAW/E,gBAAmB8E,GAAAA,UAAAA,CAAAA;AACpC,QAAA,IAAME,aAAaF,UAAa9E,GAAAA,gBAAAA,CAAAA;QAChC,IAAMiF,KAAAA,GAAQv7D,KAAKmM,IAAI,CAAC8mB,mBAAQwpB,GAAG,CAACsb,MAAQ0C,EAAAA,OAAAA,CAAAA,GAAWY,QAAYC,CAAAA,GAAAA,UAAAA,CAAAA;QACnE,IAAME,OAAAA,GAAUx7D,KAAKmM,IAAI,CAAC8mB,mBAAQwpB,GAAG,CAACsb,MAAQ2C,EAAAA,SAAAA,CAAAA,GAAaW,QAAYC,CAAAA,GAAAA,UAAAA,CAAAA;AACvE,QAAA,IAAMG,UAAaxoC,GAAAA,kBAAAA,CAAQwpB,GAAG,CAACsb,MAAQ4C,EAAAA,YAAAA,CAAAA,CAAAA;AACvC5C,QAAAA,MAAAA,CAAOt0D,CAAC,GAAGg3D,OAAQh3D,CAAAA,CAAC,GAAG83D,KAAAA,GAAQb,SAAUj3D,CAAAA,CAAC,GAAG+3D,OAAAA,GAAUb,YAAal3D,CAAAA,CAAC,GAAGg4D,UAAAA,CAAAA;AACxE1D,QAAAA,MAAAA,CAAOr0D,CAAC,GAAG+2D,OAAQ/2D,CAAAA,CAAC,GAAG63D,KAAAA,GAAQb,SAAUh3D,CAAAA,CAAC,GAAG83D,OAAAA,GAAUb,YAAaj3D,CAAAA,CAAC,GAAG+3D,UAAAA,CAAAA;AACxE1D,QAAAA,MAAAA,CAAOr+C,CAAC,GAAG+gD,OAAQ/gD,CAAAA,CAAC,GAAG6hD,KAAAA,GAAQb,SAAUhhD,CAAAA,CAAC,GAAG8hD,OAAAA,GAAUb,YAAajhD,CAAAA,CAAC,GAAG+hD,UAAAA,CAAAA;;QAGxE,IAAMxf,aAAAA,GAAgBmb,gBAAgBnb,aAAa,CAAA;QACnD,IAAM9D,QAAAA,GAAW8D,cAAc9D,QAAQ,CAAA;QACvC,IAAMuF,UAAAA,GAAazB,cAAcyB,UAAU,CAAA;QAC3C,IAAMge,aAAAA,GAAgBzf,cAAcsO,gBAAgB,CAAA;AAEpDt3B,QAAAA,kBAAAA,CAAQwhB,KAAK,CAACkmB,YAAclD,EAAAA,MAAAA,GAASoD,SAAW1iB,EAAAA,QAAAA,CAAAA,CAAAA;QAChDllB,kBAAQohB,CAAAA,QAAQ,CAAC0jB,MAAAA,EAAQ5f,QAAUA,EAAAA,QAAAA,CAAAA,CAAAA;AACnCtN,QAAAA,iBAAAA,CAAOoJ,MAAM,CAACkE,QAAU4f,EAAAA,MAAAA,EAAQ0C,OAAS/c,EAAAA,UAAAA,CAAAA,CAAAA;QACzC7S,iBAAOmnB,CAAAA,KAAK,CACV,CAACkJ,YACDA,EAAAA,YAAAA,EACA,CAACA,YAAAA,EACDA,YACA,EAAA,GAAA,EACAzD,MAAS,GAAA,GAAA,GAAMoD,SACfa,EAAAA,aAAAA,CAAAA,CAAAA;QAGF,IAAMtd,oBAAAA,GAAuBnC,cAAcmC,oBAAoB,CAAA;QAC/DvT,iBAAOsM,CAAAA,QAAQ,CAACukB,aAAAA,EAAehe,UAAYU,EAAAA,oBAAAA,CAAAA,CAAAA;QAC3CtuC,KAAM6B,CAAAA,oBAAoB,CAzUjB0kD,WA0UKsF,CAAAA,qBAAqB,EACjCvd,oBAAAA,CAAqBlsC,QAAQ,EAC7B,CACA4oD,EAAAA,iBAAAA,EACAF,YAAe,GAAA,EAAA,CAAA,CAAA;AAEnB,KAAA,CAAA;IAhVWvE,WAkVJuF,CAAAA,2BAUN,GAVD,SAAOA,2BAAAA,CAA4BC,UAAkB,EAAEC,WAAmB,EAAEC,SAAiB,EAAA;AAC3F,QAAA,IAAIf,UAAah7D,GAAAA,IAAAA,CAAKoa,GAAG,CAACyhD,UAAYC,EAAAA,WAAAA,CAAAA,CAAAA;QAEtC,IAAIE,gBAAAA,GAAmBh8D,KAAKC,KAAK,CAAC47D,aAAab,UAAch7D,CAAAA,GAAAA,IAAAA,CAAKC,KAAK,CAAC67D,WAAcd,GAAAA,UAAAA,CAAAA,CAAAA;AAEtF,QAAA,MAAOgB,mBAAmBD,SAAW,CAAA;YACnCf,UAAah7D,GAAAA,IAAAA,CAAKC,KAAK,CAAC+6D,UAAc,IAAA,CAAA,CAAA,CAAA;YACtCgB,gBAAmBh8D,GAAAA,IAAAA,CAAKC,KAAK,CAAC47D,UAAAA,GAAab,cAAch7D,IAAKC,CAAAA,KAAK,CAAC67D,WAAcd,GAAAA,UAAAA,CAAAA,CAAAA;AACpF,SAAA;QACA,OAAOA,UAAAA,CAAAA;AACT,KAAA,CAAA;IA5VW3E,WA8VJ4F,CAAAA,aAqBN,GArBD,SAAOA,aAAc9E,CAAAA,KAAkB,EAAE5M,gBAAwB,EAAE+L,gBAAwB,EAAEnyD,GAAY,EAAA;;;AAGvG,QAAA,IAAM+3D,WAAc,GAAA,GAAA,GAAM3R,gBAAiBr4C,CAAAA,QAAQ,CAAC,CAAE,CAAA,CAAA;;AAGtD,QAAA,IAAMiqD,YAAYD,WAAc5F,GAAAA,gBAAAA,CAAAA;AAChC,QAAA,IAAIp1B,SAAY,GAAA,CAACi2B,KAAMiF,CAAAA,UAAU,GAAGD,SAAAA,CAAAA;AACpC,QAAA,IAAIE,UAAa,GAAA,CAAClF,KAAMmF,CAAAA,gBAAgB,GAAGH,SAAAA,CAAAA;AAE3C,QAAA,IAAIhF,KAAMoF,CAAAA,UAAU,IAAInG,UAAAA,CAAWoG,QAAQ,EAAE;;;;;;AAM3C,YAAA,IAAMC,YAAe,GAAA,GAAA,CAAA;YACrBv7B,SAAau7B,IAAAA,YAAAA,CAAAA;YACbJ,UAAcI,IAAAA,YAAAA,CAAAA;AAChB,SAAA;QACAt4D,GAAIlM,CAAAA,GAAG,CAACipC,SAAWm7B,EAAAA,UAAAA,CAAAA,CAAAA;AACrB,KAAA,CAAA;AAEA;;AAEC,MACD,WAAOK,CAAAA,mBAyBN,GAzBD,SAAOA,oBACLC,QAAgB,EAChBd,UAAkB,EAClBC,WAAmB,EACnBlB,YAAoB,EACpBgC,WAAoB,EACpB9B,iBAA+B,EAAA;QAE/B,IAAM+B,WAAAA,GAAcxG,WAhYXA,CAgYuByG,YAAY,CAAA;QAC5C,IAAM/iE,KAAAA,GAAQ8iE,YAAY3qD,QAAQ,CAAA;AAElC,QAAA,IAAM6qD,oBAAoB,GAAMlB,GAAAA,UAAAA,CAAAA;AAChC,QAAA,IAAMmB,qBAAqB,GAAMlB,GAAAA,WAAAA,CAAAA;AACjC,QAAA,IAAMmB,SAASN,QAAWI,GAAAA,iBAAAA,CAAAA;AAC1B,QAAA,IAAMG,SAASP,QAAWK,GAAAA,kBAAAA,CAAAA;QAC1B,IAAM1vD,OAAAA,GAAUsvD,WAAYn5D,CAAAA,CAAC,GAAGs5D,iBAAAA,CAAAA;QAChC,IAAMnyD,OAAAA,GAAUgyD,WAAYl5D,CAAAA,CAAC,GAAGs5D,kBAAAA,CAAAA;AAE/BjjE,QAAAA,KAAK,CAAC,CAAE,CAAA,GAAGkjE,MAAUljE,EAAAA,KAAK,CAAC,CAAE,CAAA,GAAG,CAAKA,EAAAA,KAAK,CAAC,CAAE,CAAA,GAAG,GAAKA,KAAK,CAAC,EAAE,GAAG,CAAA,CAAA;AAChEA,QAAAA,KAAK,CAAC,CAAE,CAAA,GAAG,CAAKA,EAAAA,KAAK,CAAC,CAAE,CAAA,GAAGmjE,MAAUnjE,EAAAA,KAAK,CAAC,CAAE,CAAA,GAAG,GAAKA,KAAK,CAAC,EAAE,GAAG,CAAA,CAAA;AAChEA,QAAAA,KAAK,CAAC,CAAE,CAAA,GAAG,CAAKA,EAAAA,KAAK,CAAC,CAAE,CAAA,GAAG,CAAKA,EAAAA,KAAK,CAAC,EAAG,CAAA,GAAG,GAAKA,KAAK,CAAC,GAAG,GAAG,CAAA,CAAA;AAC7DA,QAAAA,KAAK,CAAC,EAAG,CAAA,GAAGuT,OAAWvT,EAAAA,KAAK,CAAC,EAAG,CAAA,GAAG6Q,OAAW7Q,EAAAA,KAAK,CAAC,EAAG,CAAA,GAAG,GAAKA,KAAK,CAAC,GAAG,GAAG,CAAA,CAAA;AAE5E,QAAA,IAAMiY,SAAS4oD,YAAe,GAAA,EAAA,CAAA;AAC9B9qD,QAAAA,KAAAA,CAAM6B,oBAAoB,CAACkrD,WAAa/B,EAAAA,iBAAAA,EAAmB9oD,QAAQ8oD,iBAAmB9oD,EAAAA,MAAAA,CAAAA,CAAAA;AACxF,KAAA,CAAA;AAEA;;MAnZWqkD,WAsZJ8G,CAAAA,oCAoBN,GApBD,SAAOA,qCAAqCC,YAAoB,EAAE3lD,MAAc,EAAE4lD,OAAgB,EAAA;;;;AAKhG,QAAA,IAAI5lD,SAAS,MAAQ,EAAA;YACnB,IAAM6lD,UAAAA,GAAa;AACnBD,YAAAA,OAAAA,CAAQ3jD,CAAC,GAAG4jD,UAAAA,CAAAA;YACZD,OAAQ93D,CAAAA,CAAC,GAAG,CAAC63D,YAAeE,GAAAA,UAAAA,CAAAA;AAC5B,YAAA,OAAA;AACF,SAAA;AAEA7lD,QAAAA,MAAAA,GAAS,CAAIA,GAAAA,MAAAA,CAAAA;QACbA,MAAUA,IAAAA,MAAAA,CAAAA;;AAGV,QAAA,IAAM8lD,mBAAmB9lD,MAAS2lD,GAAAA,YAAAA,CAAAA;AAClC,QAAA,IAAMI,YAAYJ,YAAeG,GAAAA,gBAAAA,CAAAA;QACjCF,OAAQ3jD,CAAAA,CAAC,GAAG,GAAM8jD,GAAAA,SAAAA,CAAAA;QAClBH,OAAQ93D,CAAAA,CAAC,GAAG,CAACg4D,gBAAmBC,GAAAA,SAAAA,CAAAA;AAClC,KAAA,CAAA;AA1aWnH,IAAAA,OAAAA,WAAAA,CAAAA;AA2aZ,CAAA,EAAA,CAAA;AA3aYA,WAAAA,CACIyG,eAAuB,IAAIjyB,iBAAAA,EAAAA,CAAAA;AAE1C;AACA,iBAJWwrB,YAKIsF,qBAAgC,GAAA,IAAI9wB,kBACjD,GAAK,EAAA,GAAA,EAAK,KAAK,GACf,EAAA,GAAA,EAAK,CAAC,GAAK,EAAA,GAAA,EAAK,KAChB,GAAK,EAAA,GAAA,EAAK,KAAK,GACf,EAAA,GAAA,EAAK,KAAK,GAAK,EAAA,GAAA,CAAA,CAAA;AATNwrB,WAAAA,CAYIiC,eAA6B,GAAA;IAC1C,IAAIrlC,kBAAAA,EAAAA;IACJ,IAAIA,kBAAAA,EAAAA;IACJ,IAAIA,kBAAAA,EAAAA;IACJ,IAAIA,kBAAAA,EAAAA;IACJ,IAAIA,kBAAAA,EAAAA;IACJ,IAAIA,kBAAAA,EAAAA;IACJ,IAAIA,kBAAAA,EAAAA;IACJ,IAAIA,kBAAAA,EAAAA;AACL,CAAA,CAAA;AArBUojC,WAsBIoD,CAAAA,gBAAAA,GAA0B,IAAIzD,gBAAAA,CAAM,IAAI/iC,kBAAAA,EAAAA,CAAAA,CAAAA;AAtB5CojC,WAuBIsD,CAAAA,eAAAA,GAAyB,IAAI3D,gBAAAA,CAAM,IAAI/iC,kBAAAA,EAAAA,CAAAA,CAAAA;AAvB3CojC,WAwBImC,CAAAA,eAAAA,GAAiC,IAAIx+D,KAAM,CAAA,CAAA,CAAA,CAAA;AAxB/Cq8D,WAAAA,CAyBIyC,mBAA4B,IAAI7lC,kBAAAA,EAAAA,CAAAA;AAE/C,4CA3BWojC,YA4BIqC,sBAA0C,GAAA;AACvD,IAAA;AAACM,QAAAA,sBAAAA,CAAYG,IAAI;AAAEH,QAAAA,sBAAAA,CAAYI,KAAK;AAAEJ,QAAAA,sBAAAA,CAAYM,GAAG;AAAEN,QAAAA,sBAAAA,CAAYK,MAAM;AAAC,KAAA;AAC1E,IAAA;AAACL,QAAAA,sBAAAA,CAAYG,IAAI;AAAEH,QAAAA,sBAAAA,CAAYI,KAAK;AAAEJ,QAAAA,sBAAAA,CAAYM,GAAG;AAAEN,QAAAA,sBAAAA,CAAYK,MAAM;AAAC,KAAA;AAC1E,IAAA;AAACL,QAAAA,sBAAAA,CAAYC,IAAI;AAAED,QAAAA,sBAAAA,CAAYE,GAAG;AAAEF,QAAAA,sBAAAA,CAAYM,GAAG;AAAEN,QAAAA,sBAAAA,CAAYK,MAAM;AAAC,KAAA;AACxE,IAAA;AAACL,QAAAA,sBAAAA,CAAYC,IAAI;AAAED,QAAAA,sBAAAA,CAAYE,GAAG;AAAEF,QAAAA,sBAAAA,CAAYM,GAAG;AAAEN,QAAAA,sBAAAA,CAAYK,MAAM;AAAC,KAAA;AACxE,IAAA;AAACL,QAAAA,sBAAAA,CAAYC,IAAI;AAAED,QAAAA,sBAAAA,CAAYE,GAAG;AAAEF,QAAAA,sBAAAA,CAAYG,IAAI;AAAEH,QAAAA,sBAAAA,CAAYI,KAAK;AAAC,KAAA;AACxE,IAAA;AAACJ,QAAAA,sBAAAA,CAAYC,IAAI;AAAED,QAAAA,sBAAAA,CAAYE,GAAG;AAAEF,QAAAA,sBAAAA,CAAYG,IAAI;AAAEH,QAAAA,sBAAAA,CAAYI,KAAK;AAAC,KAAA;AACzE,CAAA,CAAA;AAED,4CArCW/C,YAsCIuC,uBAA+C,GAAA;AAC5D,IAAA;;AAEE,QAAA;;;AAA8C,SAAA;AAC9C,QAAA;;;AAA8C,SAAA;AAC9C,QAAA;;;AAAyD,SAAA;AACzD,QAAA;;;AAA2D,SAAA;AAC3D,QAAA;;;AAA6D,SAAA;AAC7D,QAAA;;;AAAuD,SAAA;AACxD,KAAA;AACD,IAAA;;AAEE,QAAA;;;AAA8C,SAAA;AAC9C,QAAA;;;AAA8C,SAAA;AAC9C,QAAA;;;AAAuD,SAAA;AACvD,QAAA;;;AAAyD,SAAA;AACzD,QAAA;;;AAA2D,SAAA;AAC3D,QAAA;;;AAAqD,SAAA;AACtD,KAAA;AACD,IAAA;;AAEE,QAAA;;;AAAyD,SAAA;AACzD,QAAA;;;AAAuD,SAAA;AACvD,QAAA;;;AAA8C,SAAA;AAC9C,QAAA;;;AAA8C,SAAA;AAC9C,QAAA;;;AAA2D,SAAA;AAC3D,QAAA;;;AAAqD,SAAA;AACtD,KAAA;AACD,IAAA;;AAEE,QAAA;;;AAA2D,SAAA;AAC3D,QAAA;;;AAAyD,SAAA;AACzD,QAAA;;;AAA8C,SAAA;AAC9C,QAAA;;;AAA8C,SAAA;AAC9C,QAAA;;;AAA6D,SAAA;AAC7D,QAAA;;;AAAuD,SAAA;AACxD,KAAA;AACD,IAAA;;AAEE,QAAA;;;AAA6D,SAAA;AAC7D,QAAA;;;AAA2D,SAAA;AAC3D,QAAA;;;AAA2D,SAAA;AAC3D,QAAA;;;AAA6D,SAAA;AAC7D,QAAA;;;AAA8C,SAAA;AAC9C,QAAA;;;AAA8C,SAAA;AAC/C,KAAA;AACD,IAAA;;AAEE,QAAA;;;AAAuD,SAAA;AACvD,QAAA;;;AAAqD,SAAA;AACrD,QAAA;;;AAAqD,SAAA;AACrD,QAAA;;;AAAuD,SAAA;AACvD,QAAA;;;AAA8C,SAAA;AAC9C,QAAA;;;AAA8C,SAAA;AAC/C,KAAA;AACF,CAAA,CAAA;AACD;AA9FWvC,WAAAA,CA+FK8E,eAA0B,GAAA,GAAA;;ACvI5C;;IAGO,IAAKsC,kBAAAA,iBAAAA,SAAAA,kBAAAA,EAAAA;uBACM,kBAAA,CAAA,kBAAA,CAAA,YAAA,CAAA,GAAA,CAAA,CAAA,GAAA,YAAA,CAAA;wBAEC,kBAAA,CAAA,kBAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,GAAA,aAAA,CAAA;yBAEC,kBAAA,CAAA,kBAAA,CAAA,cAAA,CAAA,GAAA,CAAA,CAAA,GAAA,cAAA,CAAA;AALRA,IAAAA,OAAAA,kBAAAA,CAAAA;AAOX,CAAA,CAAA,EAAA;;ACWD;;IAGO,IAAMC,wBAAN,iBAAA,SAAA,YAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,wBAAAA,EAAAA,YAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,wBAAAA,CAwCC7gB,MAAc,EAAA;;AACxB,QAAA,KAAA,GAAA,YAAA,CAAA,IAAA,CAAA,IAAA,EAAMA,OAAOpiD,MAAM,CAAA,IAAA,IAAA,EAAA,KAAA,CAnBbkjE,iBAA0B,IAAInnE,kBAAAA,EAAAA,EAAAA,KAAAA,CAE9BonE,cAAuB,IAAI13D,kBAAAA,EAAAA,EAAAA,KAAAA,CAG3B23D,gBAAoC,GAAA,IAAI/H,yBACxCgI,QAAoB,GAAA,IAAI7qC,4BACxB8qC,UAAsB,GAAA,IAAI9qC,4BAE1B+qC,kBAAqB,GAAA,IAAIrkE,YAAa+jE,CA/BnCA,yBA+B4DO,YAAY,GAAG,2DAClC,KAAA,CAC5CC,kBAAkB,IAAIvkE,YAAAA,CAAa,CAAC+jE,wBAAyBO,CAAAA,YAAY,GAAG,CAAA,IAAK;cAEjFE,YAAe,GAAA,IAAI3nE,4BAGnB4nE,gBAA8B,GAAA;YAAC,IAAIl4D,kBAAAA,EAAAA;YAAW,IAAIA,kBAAAA,EAAAA;YAAW,IAAIA,kBAAAA,EAAAA;YAAW,IAAIA,kBAAAA,EAAAA;AAAU,SAAA,CAAA;AAIhG,QAAA,KAAA,CAAKm4D,OAAO,GAAGxhB,MAAAA,CAAAA;QAEf,KAAKyhB,CAAAA,oBAAoB,GAAGzhB,MAAAA,CAAOpiD,MAAM,CAACiF,iBAAiB,CAAC83B,OAAO,CAACrU,gBAAAA,CAAiB3gB,YAAY,CAAA,CAAA;AACjG,QAAA,KAAA,CAAKq7D,gBAAgB,CAAC5hB,aAAa,CAACM,cAAc,GAAG,IAAA,CAAA;;;AA7C5CmhB,IAAAA,IAAAA,MAAAA,GAAAA,wBAAAA,CAAAA,SAAAA,CAAAA;AAgDX;;AAEC,MACD,MAASa,CAAAA,QAKR,GALD,SAASA,SAASl3D,OAAsB,EAAA;QACtC,IAAM8vD,KAAAA,GAAQ,IAAI,CAACkH,OAAO,CAAC/uB,KAAK,CAACkvB,aAAa,CAACC,SAAS,CAAA;AACxD,QAAA,IAAI,CAACC,qBAAqB,EAAA,CAAA;QAC1B,IAAI,CAACC,sBAAsB,CAACt3D,OAAS8vD,EAAAA,KAAAA,CAAAA,CAAAA;QACrC,IAAI,CAACyH,0BAA0B,CAACzH,KAAAA,CAAAA,CAAAA;AAClC,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQwH,sBAiKP,GAjKD,SAAQA,sBAAuBt3D,CAAAA,OAAsB,EAAE8vD,KAAkB,EAAA;QACvE,IAOI,KAAA,GAAA,IAAI,EANN18D,MAME,GAAA,KAAA,CANFA,QACA4jE,MAASxhB,GAKP,KALFwhB,CAAAA,OAAAA,EACAD,SAAkBS,GAIhB,MAJFT,gBACAP,EAAkBzG,eAGhB,GAAA,KAAA,CAHFyG,gBACAG,EAAoBc,oBAElB,KAFFd,CAAAA,kBAAAA,EACAE,cAAiBa,GACf,KADFb,CAAAA,eAAAA,CAAAA;QAGF,IAAwCrhB,uCAAAA,GAAAA,MAAOkL,CAAAA,eAAe,CAACiX,eAAe,EAAtEC,WAAgCpiB,GAAAA,uCAAAA,CAAhCoiB,WAAaC,EAAAA,cAAAA,GAAmBriB,uCAAnBqiB,CAAAA,cAAAA,CAAAA;QAErB,IAAM5vB,KAAAA,GAAQuN,OAAOvN,KAAK,CAAA;QAC1B,IAAMmM,iBAAAA,GAAoBnM,MAAMoM,kBAAkB,CAAA;QAClD,IAAMxxB,GAAAA,GAAMzvB,OAAOiF,iBAAiB,CAAA;QACpC,IAAMy/D,cAAAA,GAAiB7vB,MAAM6vB,cAAc,CAAA;QAC3C,IAAMhH,aAAAA,GAAgBuF,wBA1EbA,CA0EsC0B,sBAAsB,CAAA;QACrE,IAAMrE,WAAAA,GAAc3D,gBAAgBnB,gBAAgB,CAAA;QACpD,IAAMoJ,UAAAA,GAAa3B,wBA5EVA,CA4EmCZ,YAAY,CAAA;QACxD,IAAMwC,WAAAA,GAAcD,WAAWntD,QAAQ,CAAA;QACvC,IAAMuoD,OAAAA,GAAU,IAAI,CAACqD,QAAQ,CAAA;QAC7B,IAAMpD,SAAAA,GAAY,IAAI,CAACqD,UAAU,CAAA;AACjC,QAAA,IAAMpD,YAAevD,GAAAA,eAAAA,CAAgBnb,aAAa,CAACS,OAAO,CAAA;;QAG1D,IAAgC,oBAAA,GAAA,IAAI,CAACihB,cAAc,EAA3CjkD,KAAG/Y,GAAqB,oBAAxB+Y,CAAAA,CAAAA,EAAUnU,MAAG3E,GAAW,oBAAd2E,CAAAA,CAAAA,CAAAA;QAClB,IAAM7E,MAAAA,GAAS,IAAI,CAAC6+D,gBAAgB,CAAA;QACpC,IAAI9O,YAAAA,CAAAA;QACJ,IAAI+O,aAAAA,CAAAA;QACJ,IAAI,IAAI,CAAClB,oBAAoB,EAAE;AAC7B7N,YAAAA,YAAAA,GAAehI,cAAcK,4BAA4B,CACvDruD,QACA,IAAI,CAACmyD,aAAa,EAClBjsD,KAAAA,EACAC,QACA,IACAF,EAAAA,MAAAA,EACA,MACA,KACA,EAAA,CAAA,EACAtD,gBAAgByH,KAAK,EACrB5H,kBAAkBmG,QAAQ,CAAA,CAAA;AAE5Bo8D,YAAAA,aAAAA,GAA2B/O,aAAajuD,YAAY,CAAA;SAC/C,MAAA;AACLiuD,YAAAA,YAAAA,GAAehI,cAAcK,4BAA4B,CACvDruD,QACA,IAAI,CAACmyD,aAAa,EAClBjsD,KAAAA,EACAC,QACAF,MACA,EAAA,IAAA,EACA,OACA,KACA,EAAA,CAAA,EACAtD,gBAAgByH,KAAK,EACrB5H,kBAAkBmG,QAAQ,CAAA,CAAA;YAE5Bo8D,aAA2B/O,GAAAA,YAAAA,CAAatuD,eAAe,CAAC,CAAA,CAAA,CAAA;AAC1D,SAAA;AAEA,QAAA,IAAI1H,MAAOiF,CAAAA,iBAAiB,CAACC,SAAS,EAAE;YACtC6/D,aAAc5/D,CAAAA,oBAAoB,GAAG5C,2BAAAA,CAA4BkiC,IAAI,CAAA;AACvE,SAAA;QAEA,IAAI,CAAC0tB,aAAa,GAAG6D,YAAAA,CAAAA;QACrB,IAAI,CAAC9uD,aAAa,GAAG69D,aAAAA,CAAAA;;QAGrBt1C,GAAI2/B,CAAAA,kBAAkB,CAAC4G,YAAciN,EA/H5BA,yBA+HqDzQ,SAAS,EAAE5lD,OAAQ+/B,CAAAA,cAAc,EAAE,CAAA,CAAA,CAAA;QACjG,IAAI,IAAI,CAACk3B,oBAAoB,EAAE;AAC7Bp0C,YAAAA,GAAAA,CAAIu1C,iBAAiB,CAAChlE,MAAQiwD,EAAAA,gBAAAA,CAAiBlpD,KAAK,EAAE,IAAA,CAAA,CAAA;SACjD,MAAA;YACL0oB,GAAIu1C,CAAAA,iBAAiB,CAAChlE,MAAQiwD,EAAAA,gBAAAA,CAAiBhxB,GAAG,EAnI3CgkC,yBAmIsEgC,WAAW,CAAA,CAAA;AAC1F,SAAA;;QAGA70B,iBAAOqM,CAAAA,kBAAkB,CAACigB,KAAMjpB,CAAAA,MAAM,CAAC2H,SAAS,CAACmB,uBAAuB,EAAEqoB,UAAAA,CAAAA,CAAAA;AAC1E3E,QAAAA,SAAAA,CAAUziE,GAAG,CAACqnE,WAAW,CAAC,CAAE,CAAA,EAAEA,WAAW,CAAC,CAAE,CAAA,EAAEA,WAAW,CAAC,CAAE,CAAA,CAAA,CAAA;AAC5D7E,QAAAA,OAAAA,CAAQxiE,GAAG,CAACqnE,WAAW,CAAC,CAAE,CAAA,EAAEA,WAAW,CAAC,CAAE,CAAA,EAAEA,WAAW,CAAC,CAAE,CAAA,CAAA,CAAA;AAC1D3E,QAAAA,YAAAA,CAAa1iE,GAAG,CAAC,CAACqnE,WAAW,CAAC,CAAE,CAAA,EAAE,CAACA,WAAW,CAAC,CAAE,CAAA,EAAE,CAACA,WAAW,CAAC,EAAG,CAAA,CAAA,CAAA;QACnE,IAAMK,aAAAA,GAAgBjC,wBA3IbA,CA2IsCkC,WAAW,CAAA;AAC1DD,QAAAA,aAAAA,CAAcvlE,QAAQ,CAACyiD,MAAAA,CAAO3O,MAAM,CAAC2H,SAAS,CAACkD,YAAY,CAAA,CAAA;QAE3D,IAAM8mB,oBAAAA,GAAuB,IAAI,CAACC,qBAAqB,CAAA;AAEvD,QAAA,IAAK,IAAIx1D,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAI60D,gBAAgB70D,CAAK,EAAA,CAAA;AACvC+rD,YAAAA,WAAAA,CAAYgB,uBAAuB,CACjCc,aAAa,CAAC7tD,CAAE,CAAA,EAChB6tD,aAAa,CAAC7tD,CAAI,GAAA,CAAA,CAAE,EACpBuyC,MAAAA,EACA8iB,aACAvI,EAAAA,eAAAA,CAAAA,CAAAA;AAEFf,YAAAA,WAAAA,CAAY4B,iCAAiC,CAC3Cpb,MAAOiP,CAAAA,QAAQ,EACfqM,aAAa,CAAC7tD,CAAAA,CAAE,EAChBuyC,MAAAA,CAAO2N,aAAa,EACpBmQ,YACAvD,EAAAA,eAAAA,CAAAA,CAAAA;YAGFf,WAAYmE,CAAAA,2BAA2B,CACrCC,OAAAA,EACAC,SACAC,EAAAA,YAAAA,EACArwD,GACA6sD,KAAM4I,CAAAA,qBAAqB,EAC3BF,oBAAAA,EACAzI,eACA2H,EAAAA,cAAAA,CAAAA,CAAAA;AAEF,YAAA,IAAII,iBAAiB,CAAG,EAAA;gBACtB9I,WAAYqG,CAAAA,mBAAmB,CAC7BmD,oBAAAA,EACAl/D,KACAC,EAAAA,MAAAA,EACA0J,CACA,EAAA,IAAI,CAAC8zD,gBAAgB,CAAC9zD,CAAAA,CAAE,EACxBy0D,cAAAA,CAAAA,CAAAA;AAEJ,aAAA;AACA,YAAA,IAAI,CAACiB,mCAAmC,CAAC7I,KAAAA,EAAOC,eAAiB/vD,EAAAA,OAAAA,CAAAA,CAAAA;;YAGjE,IAAM0wD,MAAAA,GAASgD,YAAYhD,MAAM,CAAA;YACjC,IAAMN,MAAAA,GAASsD,YAAYtD,MAAM,CAAA;AACjC,YAAA,IAAMzlD,SAAS1H,CAAI,GAAA,CAAA,CAAA;AACnBw0D,YAAAA,iBAAiB,CAAC9sD,MAAAA,CAAO,GAAG+lD,MAAAA,CAAOt0D,CAAC,CAAA;AACpCq7D,YAAAA,iBAAiB,CAAC9sD,MAAAA,GAAS,CAAE,CAAA,GAAG+lD,OAAOr0D,CAAC,CAAA;AACxCo7D,YAAAA,iBAAiB,CAAC9sD,MAAAA,GAAS,CAAE,CAAA,GAAG+lD,OAAOr+C,CAAC,CAAA;AACxColD,YAAAA,iBAAiB,CAAC9sD,MAAAA,GAAS,CAAE,CAAA,GAAGylD,MAASA,GAAAA,MAAAA,CAAAA;AACzCwH,YAAAA,WAAAA,CAAYvgD,KAAK,EAAA,CAAA;AACjBwgD,YAAAA,cAAAA,CAAexgD,KAAK,EAAA,CAAA;YACpB,IAAMuhD,SAAAA,GAAYxkB,kBAAkBykB,UAAU,CAAA;YAC9C,IAAMhuD,QAAAA,GAAW+tD,UAAUte,SAAS,CAAA;YACpC,IAAK,IAAI7oD,IAAImnE,SAAUnmE,CAAAA,MAAM,GAAG,CAAGhB,EAAAA,CAAAA,IAAK,CAAG,EAAA,EAAEA,CAAG,CAAA;AAC9Cu9D,gBAAAA,WAAAA,CAAYa,iBAAiB,CAAC7vD,OAAAA,EAAS8vD,OAAOjlD,QAAQ,CAACpZ,EAAE,EAAEs+D,eAAAA,CAAAA,CAAAA;AAC7D,aAAA;YAEA,IAAI6H,WAAAA,CAAY/sD,QAAQ,CAACpY,MAAM,IAAIolE,cAAehtD,CAAAA,QAAQ,CAACpY,MAAM,EAAE;;AAEjEW,gBAAAA,MAAAA,CAAOs1D,YAAY,EAAA,CAAA;gBAEnB,IAAM2D,cAAAA,GAAiBj5D,OAAO6sD,eAAe,CAAA;AAC7C2X,gBAAAA,WAAAA,CAAYxL,SAAS,CAACF,WAAYoC,CAAAA,gBAAgB,EAAEjC,cAAAA,CAAAA,CAAAA;AACpDwL,gBAAAA,cAAAA,CAAezL,SAAS,CAACF,WAAYoC,CAAAA,gBAAgB,EAAEjC,cAAAA,CAAAA,CAAAA;gBAEvD,IAAiBmL,YAAAA,GAAAA,SAAS,CAACv0D,CAAAA,CAAE,EAArB7G,CAASo7D,GAAAA,YAAAA,CAATp7D,CAAGC,EAAAA,CAAAA,GAAMm7D,YAANn7D,CAAAA,CAAAA,CAAAA;gBAEXwmB,GAAIi2C,CAAAA,kBAAkB,CAAC,GAAK,EAAA,GAAA,CAAA,CAAA;AAE5Bj2C,gBAAAA,GAAAA,CAAIq/B,QAAQ,CAAC9lD,CAAGC,EAAAA,CAAAA,EAAGm8D,oBAAsBA,EAAAA,oBAAAA,CAAAA,CAAAA;;gBAEzC31C,GAAIk2C,CAAAA,OAAO,CAAC38D,CAAI,GAAA,CAAA,EAAGC,IAAI,CAAGm8D,EAAAA,oBAAAA,GAAuB,GAAGA,oBAAuB,GAAA,CAAA,CAAA,CAAA;AAE3EZ,gBAAAA,WAAAA,CAAY7P,MAAM,CAAC/nD,OAAS2X,EAAAA,aAAAA,CAAcqhD,YAAY,CAAA,CAAA;AACtDnB,gBAAAA,cAAAA,CAAe9P,MAAM,CAAC/nD,OAAS2X,EAAAA,aAAAA,CAAcqhD,YAAY,CAAA,CAAA;gBACzDn2C,GAAIi2C,CAAAA,kBAAkB,CAAC,CAAG,EAAA,CAAA,CAAA,CAAA;AAC5B,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQvB,0BA6BP,GA7BD,SAAQA,0BAAAA,CAA2BzH,KAAkB,EAAA;QACnD,IAAMta,MAAAA,GAAS,IAAI,CAACwhB,OAAO,CAAA;QAC3B,IAAM/uB,KAAAA,GAAQuN,OAAOvN,KAAK,CAAA;QAC1B,IAAMwvB,iBAAAA,GAAoB,IAAI,CAACd,kBAAkB,CAAA;QACjD,IAAMe,cAAAA,GAAiB,IAAI,CAACb,eAAe,CAAA;QAC3C,IAAMiB,cAAAA,GAAiB7vB,MAAM6vB,cAAc,CAAA;QAE3C,IAAMmB,SAAAA,GAAYtgE,KAAKoa,GAAG,CAACk1B,MAAMixB,cAAc,EAAE1jB,OAAO4N,YAAY,CAAA,CAAA;AACpE4L,QAAAA,WAAAA,CAAY8G,oCAAoC,CAACn9D,IAAKwgE,CAAAA,GAAG,CAACF,SAAAA,EAAW,CAAIhxB,CAAAA,EAAAA,KAAAA,CAAMmxB,gBAAgB,EAAE,IAAI,CAACtC,YAAY,CAAA,CAAA;AAClH,QAAA,IAAI,CAACA,YAAY,CAAC16D,CAAC,GAAG0zD,MAAMuJ,cAAc,CAAA;;AAG1C,QAAA,IAAIvB,iBAAiB,CAAG,EAAA;YACtB,IAAK,IAAIjlE,CAAIilE,GAAAA,cAAAA,GAAiB,CAAGvjE,EAAAA,CAAAA,GAAIkjE,kBAAkBhlE,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;gBACzE4kE,iBAAiB,CAAC5kE,EAAE,GAAG,GAAA,CAAA;AACzB,aAAA;AACF,SAAA;;QAGA,IAAK,IAAIA,EAAIilE,GAAAA,cAAAA,GAAiB,EAAIvjE,EAAAA,EAAAA,GAAImjE,eAAejlE,MAAM,EAAEI,EAAI0B,GAAAA,EAAAA,EAAG1B,EAAK,EAAA,CAAA;YACvE6kE,cAAc,CAAC7kE,GAAE,GAAG,GAAA,CAAA;AACtB,SAAA;QAEA,IAAMooB,UAAAA,GAAagtB,MAAMhtB,UAAU,CAAA;QACnCA,UAAW2nB,CAAAA,aAAa,CAACyzB,wBArPhBA,CAqPyCiD,uBAAuB,EAAE,IAAI,CAACzC,eAAe,CAAA,CAAA;QAC/F57C,UAAWM,CAAAA,UAAU,CAAC86C,wBAtPbA,CAsPsCkD,oBAAoB,EAAE,IAAI,CAACzC,YAAY,CAAA,CAAA;QACtF77C,UAAW0oB,CAAAA,UAAU,CAAC0yB,wBAvPbA,CAuPsCmD,mBAAmB,EAAE,IAAI,CAACl/D,aAAa,CAAA,CAAA;QACtF2gB,UAAW2nB,CAAAA,aAAa,CAACyzB,wBAxPhBA,CAwPyCoD,2BAA2B,EAAE,IAAI,CAAC9C,kBAAkB,CAAA,CAAA;QACtG17C,UAAWM,CAAAA,UAAU,CAAC86C,wBAzPbA,CAyPsCC,cAAc,EAAE,IAAI,CAACA,cAAc,CAAA,CAAA;AACpF,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQoD,yBAiCP,GAjCD,SAAQA,yBAAAA,CAA0BT,SAAiB,EAAA;QACjD,IAAMU,qBAAAA,GAAwBtD,wBA7PrBA,CA6P8C0B,sBAAsB,CAAA;AAC7E,QAAA,IAA4E,mBAAA,GAAA,IAAI,CAACf,OAAO,CAAC/uB,KAAK,EAAtF2xB,sBAAoE,GAAA,mBAAA,CAApEA,sBAAwBC,EAAAA,uBAAAA,GAA4C,mBAA5CA,CAAAA,uBAAAA,EAAyB/B,iBAAmB,mBAAnBA,CAAAA,cAAAA,CAAAA;AACzD,QAAA,IAAoD,aAAA,GAAA,IAAI,CAACd,OAAO,EAAxD7T,aAAAA,GAA4C,aAA5CA,CAAAA,aAAAA,EAAekH,WAA6B,GAAA,aAAA,CAA7BA,WAAaD,EAAAA,WAAAA,GAAgB,aAAhBA,CAAAA,WAAAA,CAAAA;QAEpCuP,qBAAqB,CAAC,EAAE,GAAGxW,aAAAA,CAAAA;AAC3B,QAAA,IAAM2W,QAAQb,SAAY9V,GAAAA,aAAAA,CAAAA;AAC1B,QAAA,IAAM4W,OAAOphE,IAAK23D,CAAAA,GAAG,CAACp8C,mBAAS08B,CAAAA,cAAc,CAACwZ,WAAe,CAAA,GAAA,GAAA,CAAA,CAAA;AAC7D,QAAA,IAAM4P,cAAc,GAAMD,GAAAA,IAAAA,GAAOA,QAAQ1P,WAAAA,GAAcA,cAAc,GAAE,CAAA,CAAA;QACvE,OAAQyN,cAAAA;AACN,YAAA,KAAK1B,mBAAmB6D,UAAU;AAChCN,gBAAAA,qBAAqB,CAAC,CAAE,CAAA,GAAG,IAAI,CAACO,iBAAiB,CAACjB,SAAWe,EAAAA,WAAAA,CAAAA,CAAAA;AAC7D,gBAAA,MAAA;AACF,YAAA,KAAK5D,mBAAmB+D,WAAW;gBACjCR,qBAAqB,CAAC,EAAE,GAAG,IAAI,CAACO,iBAAiB,CAAC/W,aAAgB2W,GAAAA,KAAAA,GAAQF,sBAAwBI,EAAAA,WAAAA,CAAAA,CAAAA;AAClGL,gBAAAA,qBAAqB,CAAC,CAAE,CAAA,GAAG,IAAI,CAACO,iBAAiB,CAACjB,SAAWe,EAAAA,WAAAA,CAAAA,CAAAA;AAC7D,gBAAA,MAAA;AACF,YAAA,KAAK5D,mBAAmBgE,YAAY;gBAClCT,qBAAqB,CAAC,CAAE,CAAA,GAAG,IAAI,CAACO,iBAAiB,CAC/C/W,aAAgB2W,GAAAA,KAAAA,GAAQD,uBAAwBz9D,CAAAA,CAAC,EACjD49D,WAAAA,CAAAA,CAAAA;gBAEFL,qBAAqB,CAAC,CAAE,CAAA,GAAG,IAAI,CAACO,iBAAiB,CAC/C/W,aAAgB2W,GAAAA,KAAAA,GAAQD,uBAAwBx9D,CAAAA,CAAC,EACjD29D,WAAAA,CAAAA,CAAAA;gBAEFL,qBAAqB,CAAC,CAAE,CAAA,GAAG,IAAI,CAACO,iBAAiB,CAC/C/W,aAAgB2W,GAAAA,KAAAA,GAAQD,uBAAwBxnD,CAAAA,CAAC,EACjD2nD,WAAAA,CAAAA,CAAAA;AAEFL,gBAAAA,qBAAqB,CAAC,CAAE,CAAA,GAAG,IAAI,CAACO,iBAAiB,CAACjB,SAAWe,EAAAA,WAAAA,CAAAA,CAAAA;AAC7D,gBAAA,MAAA;AACJ,SAAA;AACF,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQE,iBAKP,GALD,SAAQA,iBAAkB9J,CAAAA,MAAc,EAAE4J,WAAmB,EAAA;;;;AAI3D,QAAA,OAAOrhE,IAAK03D,CAAAA,IAAI,CAAED,SAASA,MAAU4J,GAAAA,WAAAA,CAAAA,CAAAA;AACvC,KAAA,CAAA;IAEA,MAAQ3C,CAAAA,qBAsDP,GAtDD,SAAQA,qBAAAA,GAAAA;QACN,IAAM7hB,MAAAA,GAAS,IAAI,CAACwhB,OAAO,CAAA;QAC3B,IAAM/uB,KAAAA,GAAQuN,OAAOvN,KAAK,CAAA;QAC1B,IAAMoyB,YAAAA,GAAerL,YAAYM,iBAAiB,CAACrnB,MAAMgnB,gBAAgB,EAAE,IAAI,CAACgI,oBAAoB,CAAA,CAAA;AACpG,QAAA,IAAMhI,gBAAmBD,GAAAA,WAAAA,CAAYC,gBAAgB,CAAChnB,MAAMgnB,gBAAgB,CAAA,CAAA;QAC5E,IAAM6I,cAAAA,GAAiB7vB,MAAM6vB,cAAc,CAAA;QAC3C,IAAMmB,SAAAA,GAAYtgE,KAAKoa,GAAG,CAACk1B,MAAMixB,cAAc,EAAE1jB,OAAO4N,YAAY,CAAA,CAAA;QAEpE,IAAI,CAACsW,yBAAyB,CAACT,SAAAA,CAAAA,CAAAA;AAE/B,QAAA,IACEoB,YAAiB,KAAA,IAAI,CAACnC,gBAAgB,IACtCjJ,gBAAqB,KAAA,IAAI,CAACqL,oBAAoB,IAC9CxC,cAAAA,KAAmB,IAAI,CAACyC,kBAAkB,EAC1C;YACA,IAAI,CAACrC,gBAAgB,GAAGmC,YAAAA,CAAAA;YACxB,IAAI,CAACC,oBAAoB,GAAGrL,gBAAAA,CAAAA;YAC5B,IAAI,CAACsL,kBAAkB,GAAGzC,cAAAA,CAAAA;YAE1B,IAAIA,cAAAA,IAAkB1B,kBAAmB6D,CAAAA,UAAU,EAAE;gBACnD,IAAI,CAACxB,qBAAqB,GAAGxJ,gBAAAA,CAAAA;gBAC7B,IAAI,CAACqH,cAAc,CAAC1lE,GAAG,CAAC,CAAIq+D,GAAAA,gBAAAA,EAAkB,CAAIA,GAAAA,gBAAAA,EAAkBA,gBAAkBA,EAAAA,gBAAAA,CAAAA,CAAAA;aACjF,MAAA;AACL,gBAAA,IAAMuJ,oBAAuBxJ,GAAAA,WAAAA,CAAYuF,2BAA2B,CAClEtF,kBACAA,gBACA6I,EAAAA,cAAAA,CAAAA,CAAAA;gBAEF,IAAI,CAACW,qBAAqB,GAAGD,oBAAAA,CAAAA;AAC7B,gBAAA,IAAMl/D,QAAQk/D,oBAAuB,GAAA,CAAA,CAAA;AACrC,gBAAA,IAAMj/D,SACJu+D,cAAkB1B,IAAAA,kBAAAA,CAAmB+D,WAAW,GAAG3B,uBAAuBA,oBAAuB,GAAA,CAAA,CAAA;gBACnG,IAAI,CAAClC,cAAc,CAAC1lE,GAAG,CAAC,GAAM0I,GAAAA,KAAAA,EAAO,GAAMC,GAAAA,MAAAA,EAAQD,KAAOC,EAAAA,MAAAA,CAAAA,CAAAA;AAC5D,aAAA;YAEA,IAAI,CAACgsD,aAAa,GAAG,IAAA,CAAA;YAErB,IAAMiV,cAAAA,GAAiB,IAAI,CAACzD,gBAAgB,CAAA;YAC5C,IAAMyB,qBAAAA,GAAuB,IAAI,CAACC,qBAAqB,CAAA;YACvD,OAAQX,cAAAA;AACN,gBAAA,KAAK1B,mBAAmB6D,UAAU;AAChCO,oBAAAA,cAAc,CAAC,CAAA,CAAE,CAAC5pE,GAAG,CAAC,CAAG,EAAA,CAAA,CAAA,CAAA;AACzB,oBAAA,MAAA;AACF,gBAAA,KAAKwlE,mBAAmB+D,WAAW;AACjCK,oBAAAA,cAAc,CAAC,CAAA,CAAE,CAAC5pE,GAAG,CAAC,CAAG,EAAA,CAAA,CAAA,CAAA;AACzB4pE,oBAAAA,cAAc,CAAC,CAAA,CAAE,CAAC5pE,GAAG,CAAC4nE,qBAAsB,EAAA,CAAA,CAAA,CAAA;AAC5C,oBAAA,MAAA;AACF,gBAAA,KAAKpC,mBAAmBgE,YAAY;AAClCI,oBAAAA,cAAc,CAAC,CAAA,CAAE,CAAC5pE,GAAG,CAAC,CAAG,EAAA,CAAA,CAAA,CAAA;AACzB4pE,oBAAAA,cAAc,CAAC,CAAA,CAAE,CAAC5pE,GAAG,CAAC4nE,qBAAsB,EAAA,CAAA,CAAA,CAAA;AAC5CgC,oBAAAA,cAAc,CAAC,CAAA,CAAE,CAAC5pE,GAAG,CAAC,CAAG4nE,EAAAA,qBAAAA,CAAAA,CAAAA;AACzBgC,oBAAAA,cAAc,CAAC,CAAA,CAAE,CAAC5pE,GAAG,CAAC4nE,qBAAsBA,EAAAA,qBAAAA,CAAAA,CAAAA;AAChD,aAAA;AACF,SAAA;AACF,KAAA,CAAA;IAEA,MAAQG,CAAAA,mCAeP,GAfD,SAAQA,mCAAAA,CACN7I,KAAkB,EAClBC,eAAgC,EAChC/vD,OAAsB,EAAA;QAEtB,IAAM40C,aAAAA,GAAgBmb,gBAAgBnb,aAAa,CAAA;AACnDoa,QAAAA,WAAAA,CAAY4F,aAAa,CAAC9E,KAAOlb,EAAAA,aAAAA,CAAcsO,gBAAgB,EAAE,IAAI,CAACuV,qBAAqB,EAAE,IAAI,CAAClC,WAAW,CAAA,CAAA;AAE7G,QAAA,IAAMkE,kBAAkB,IAAI,CAACzD,OAAO,CAAC/uB,KAAK,CAAChtB,UAAU,CAAA;QACrDw/C,eAAgBv3B,CAAAA,UAAU,CAACmzB,wBAvWlBA,CAuW2CqE,wBAAwB,EAAE,IAAI,CAACnE,WAAW,CAAA,CAAA;AAC9FkE,QAAAA,eAAAA,CAAgBr3B,UAAU,CAxWjBizB,yBAwW2CsE,uBAAuB,EAAE7K,MAAMrI,SAAS,CAAA,CAAA;;QAG5FznD,OAAQqrD,CAAAA,kBAAkB,IAAIW,yBAAAA,CAA0BjV,oBAAoB,CAAA;QAC5E/2C,OAAQsrD,CAAAA,kBAAkB,CAAC1W,aAAe,EAAA,IAAA,CAAA,CAAA;AAC5C,KAAA,CAAA;AA7WWyhB,IAAAA,OAAAA,wBAAAA,CAAAA;EAAiCnL,YA8W7C,CAAA,CAAA;AA9WYmL,wBACIqE,CAAAA,wBAAAA,GAA2BxhD,cAAezD,CAAAA,SAAS,CAAC,kBAAA,CAAA,CAAA;AADxD4gD,wBAEIsE,CAAAA,uBAAAA,GAA0BzhD,cAAezD,CAAAA,SAAS,CAAC,sBAAA,CAAA,CAAA;AAFvD4gD,wBAIIiD,CAAAA,uBAAAA,GAA0BpgD,cAAezD,CAAAA,SAAS,CAAC,sBAAA,CAAA,CAAA;AAJvD4gD,wBAKIC,CAAAA,cAAAA,GAAiBp9C,cAAezD,CAAAA,SAAS,CAAC,qBAAA,CAAA,CAAA;AAL9C4gD,wBAMIkD,CAAAA,oBAAAA,GAAuBrgD,cAAezD,CAAAA,SAAS,CAAC,kBAAA,CAAA,CAAA;AANpD4gD,wBAOImD,CAAAA,mBAAAA,GAAsBtgD,cAAezD,CAAAA,SAAS,CAAC,iBAAA,CAAA,CAAA;AAPnD4gD,wBAQIoD,CAAAA,2BAAAA,GAA8BvgD,cAAezD,CAAAA,SAAS,CAAC,0BAAA,CAAA,CAAA;AAR3D4gD,wBAAAA,CAUIO,YAAuB,GAAA,CAAA,CAAA;AAV3BP,wBAAAA,CAWI0B,sBAAmC,GAAA,IAAIplE,KAAM0jE,CAAAA,wBAAAA,CAAyBO,YAAY,GAAG,CAAA,CAAA,CAAA;AAXzFP,wBAAAA,CAaIzQ,SAAY,GAAA,IAAIz2D,kBAAQ,CAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,CAAA,CAAA;AAbrCknE,wBAAAA,CAcIgC,WAAc,GAAA,IAAIr0C,gBAAM,CAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,CAAA,CAAA;AAdrCqyC,wBAAAA,CAeIkC,cAAc,IAAI3sC,kBAAAA,EAAAA,CAAAA;AAftByqC,wBAAAA,CAgBIZ,eAAe,IAAIjyB,iBAAAA,EAAAA;;ACpCpC;;;IAIO,IAAMo3B,cAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,cAAAA,GAAAA;AAMT,QAAA,IAAI,CAAChD,WAAW,GAAG,IAAI1L,WAAAA,CAAYv3C,gBAAgB8qB,MAAM,CAAA,CAAA;AACzD,QAAA,IAAI,CAACo7B,gBAAgB,GAAG,IAAI3O,WAAAA,CAAYv3C,gBAAgBmmD,WAAW,CAAA,CAAA;AACnE,QAAA,IAAI,CAACjD,cAAc,GAAG,IAAI3L,WAAAA,CAAYv3C,gBAAgBomD,SAAS,CAAA,CAAA;;AARtDH,IAAAA,IAAAA,MAAAA,GAAAA,cAAAA,CAAAA,SAAAA,CAAAA;IAWXI,MAAAA,CAAAA,KAIC,GAJDA,SAAAA,KAAAA,GAAAA;QACE,IAAI,CAACpD,WAAW,CAACvgD,KAAK,EAAA,CAAA;QACtB,IAAI,CAACwjD,gBAAgB,CAACxjD,KAAK,EAAA,CAAA;QAC3B,IAAI,CAACwgD,cAAc,CAACxgD,KAAK,EAAA,CAAA;AAC3B,KAAA,CAAA;AAEA+0C,IAAAA,MAAAA,CAAAA,SAIC,GAJDA,SAAAA,SAAAA,CAAUC,cAA8B,EAAA;AACtC,QAAA,IAAI,CAACuL,WAAW,CAACxL,SAAS,CAACF,WAAAA,CAAYoC,gBAAgB,EAAEjC,cAAAA,CAAAA,CAAAA;AACzD,QAAA,IAAI,CAACwL,cAAc,CAACzL,SAAS,CAACF,WAAAA,CAAYoC,gBAAgB,EAAEjC,cAAAA,CAAAA,CAAAA;AAC5D,QAAA,IAAI,CAACwO,gBAAgB,CAACzO,SAAS,CAACF,WAAAA,CAAYsC,qBAAqB,EAAEnC,cAAAA,CAAAA,CAAAA;AACrE,KAAA,CAAA;IAEA54D,MAAAA,CAAAA,OAIC,GAJDA,SAAAA,OAAAA,GAAAA;QACE,IAAI,CAACmkE,WAAW,CAACnkE,OAAO,EAAA,CAAA;QACxB,IAAI,CAAConE,gBAAgB,CAACpnE,OAAO,EAAA,CAAA;QAC7B,IAAI,CAACokE,cAAc,CAACpkE,OAAO,EAAA,CAAA;AAC7B,KAAA,CAAA;AA3BWmnE,IAAAA,OAAAA,cAAAA,CAAAA;AA4BZ,CAAA,EAAA;;ACxBD;;;IAIO,IAAMK,aAAN,iBAAA,SAAA,YAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,aAAAA,EAAAA,YAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,aAAAA,CAKC7nE,MAAc,EAAA;;gBACxB,YAAMA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,CAAAA,IAAAA,IAAAA,CAAAA;QACN,KAAK6jE,CAAAA,oBAAoB,GAAG7jE,MAAOiF,CAAAA,iBAAiB,CAAC83B,OAAO,CAACrU,iBAAiB3gB,YAAY,CAAA,CAAA;;;AAPjF8/D,IAAAA,IAAAA,MAAAA,GAAAA,aAAAA,CAAAA,SAAAA,CAAAA;AAUXC,IAAAA,MAAAA,CAAAA,QAmBC,GAnBDA,SAAAA,QAAAA,CAAS1lB,MAAc,EAAA;QACrB,IAAMpiD,MAAAA,GAAS,IAAI,CAACA,MAAM,CAAA;QAC1B,IAA0BoiD,qBAAAA,GAAAA,OAAO8U,aAAa,EAAtChxD,QAAkBk8C,qBAAlBl8C,CAAAA,KAAAA,EAAOC,SAAWi8C,qBAAXj8C,CAAAA,MAAAA,CAAAA;QAEf,IAAM6vD,YAAAA,GAAehI,cAAcK,4BAA4B,CAC7DruD,QACA,IAAI,CAACmyD,aAAa,EAClBjsD,KACAC,EAAAA,MAAAA,EACA,MACA1D,aAAc4F,CAAAA,OAAO,EACrB,IACA,EAAA,KAAA,EACA,GACA1F,eAAgByH,CAAAA,KAAK,EACrB5H,iBAAAA,CAAkBgE,KAAK,CAAA,CAAA;QAGzB,IAAI,CAAC2rD,aAAa,GAAG6D,YAAAA,CAAAA;AACvB,KAAA,CAAA;AAEA,IAAA,MAAA,CAAS8N,QAaR,GAbD,SAASA,QAASl3D,CAAAA,OAAsB,EAAEm7D,cAA8B,EAAA;QACtE,IAAM/nE,MAAAA,GAAS,IAAI,CAACA,MAAM,CAAA;QAC1B,IAAMg2D,YAAAA,GAAe,IAAI,CAAC7D,aAAa,CAAA;QACvC,IAAM/P,MAAAA,GAASx1C,QAAQw1C,MAAM,CAAA;QAC7B,IAAM3yB,GAAAA,GAAMzvB,OAAOiF,iBAAiB,CAAA;QACpCwqB,GAAI2/B,CAAAA,kBAAkB,CAAC4G,YAAchI,EAAAA,aAAAA,CAAcgB,eAAe,EAAEpiD,OAAAA,CAAQ+/B,cAAc,EAAE,CAAA,CAAA,CAAA;AAC5Fld,QAAAA,GAAAA,CAAIu1C,iBAAiB,CAAChlE,MAAQiwD,EAAAA,gBAAAA,CAAiBlpD,KAAK,EAAE,IAAA,CAAA,CAAA;AAEtD/G,QAAAA,MAAAA,CAAOs1D,YAAY,EAAA,CAAA;AACnByS,QAAAA,cAAAA,CAAevD,WAAW,CAAC7P,MAAM,CAAC/nD,OAAAA,EAAS2X,cAAcyjD,SAAS,CAAA,CAAA;AAClED,QAAAA,cAAAA,CAAetD,cAAc,CAAC9P,MAAM,CAAC/nD,OAAAA,EAAS2X,cAAcyjD,SAAS,CAAA,CAAA;QAErE5lB,MAAOv6B,CAAAA,UAAU,CAAC0oB,UAAU,CAACta,cAAAA,CAAOyhC,2BAA2B,EAAE,IAAI,CAACvF,aAAa,CAACpqD,YAAY,CAAA,CAAA;AAClG,KAAA,CAAA;AA5CW8/D,IAAAA,OAAAA,aAAAA,CAAAA;EAAsB/P,YA6ClC,CAAA;;ACnDD;;;IAIO,IAAMmQ,iBAAN,iBAAA,SAAA,YAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,iBAAAA,EAAAA,YAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,iBAAAA,CAICjoE,MAAc,EAAA;AACxB,QAAA,OAAA,YAAMA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,CAAAA,IAAAA,IAAAA,CAAAA;;AALGioE,IAAAA,IAAAA,MAAAA,GAAAA,iBAAAA,CAAAA,SAAAA,CAAAA;AAQXH,IAAAA,MAAAA,CAAAA,QAuBC,GAvBDA,SAAAA,QAAS1lB,CAAAA,MAAc,EAAE8lB,kBAA2B,EAAA;QAClD,IAAI,CAACC,mBAAmB,GAAGD,kBAAAA,CAAAA;QAE3B,IAAME,YAAAA,GAAehmB,OAAO4O,yBAAyB,CAAA;QACrD,IAAMqX,gBAAAA,GAAmBD,YAAiBhY,KAAAA,YAAAA,CAAa9d,IAAI,CAAA;QAE3D,IAAMwc,QAAAA,GAAW1M,OAAO8U,aAAa,CAAA;AACrC,QAAA,IAAMoR,YAAYD,gBAAmB,GAAA,GAAA,GAAMD,iBAAiBhY,YAAaa,CAAAA,IAAI,GAAG,GAAM,GAAA,IAAA,CAAA;AACtF,QAAA,IAAMsX,kBAAqBva,GAAAA,aAAAA,CAAcK,4BAA4B,CACnE,IAAI,CAACruD,MAAM,EACX,IAAI,CAACmyD,aAAa,EAClBrD,QAAS5oD,CAAAA,KAAK,GAAGoiE,SACjBxZ,EAAAA,QAAAA,CAAS3oD,MAAM,GAAGmiE,WAClBlmB,MAAOyT,CAAAA,8BAA8B,EACrC,EAAA,IAAA,EACA,OACA,KACA,EAAA,CAAA,EACAlzD,eAAgByH,CAAAA,KAAK,EACrBi+D,gBAAmB7lE,GAAAA,iBAAAA,CAAkBgE,KAAK,GAAGhE,kBAAkBmG,QAAQ,CAAA,CAAA;QAGzE,IAAI,CAACwpD,aAAa,GAAGoW,kBAAAA,CAAAA;AACvB,KAAA,CAAA;AAEA,IAAA,MAAA,CAASzE,QAGR,GAHD,SAASA,QAAAA,CAASl3D,OAAsB,EAAA;AACtCohD,QAAAA,aAAAA,CAAcY,WAAW,CAAC,IAAI,CAAC5uD,MAAM,EAAa,IAAI,CAACmoE,mBAAmB,EAAE,IAAI,CAAChW,aAAa,CAAA,CAAA;AAC9FvlD,QAAAA,OAAAA,CAAQw1C,MAAM,CAACv6B,UAAU,CAAC0oB,UAAU,CAACta,cAAAA,CAAO0hC,4BAA4B,EAAE,IAAI,CAACxF,aAAa,CAACzqD,eAAe,CAAC,CAAA,CAAA,CAAA,CAAA;AAC/G,KAAA,CAAA;AApCWugE,IAAAA,OAAAA,iBAAAA,CAAAA;EAA0BnQ,YAqCtC,CAAA;;ACnBD;;IAGO,IAAM/E,mBAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,mBAAAA,CAgBC3Q,MAAc,EAAA;AAXlBomB,QAAAA,IAAAA,CAAAA,eAAAA,GAAkB,IAAI/8D,kBAAAA,EAAAA,CAAAA;aAEtBg9D,oBAAqC,GAAA,IAAA,CAAA;QAU3C,IAAI,CAAC7E,OAAO,GAAGxhB,MAAAA,CAAAA;QACf,IAAQpiD,SAAWoiD,MAAXpiD,CAAAA,MAAAA,CAAAA;QACR,IAAI,CAACukE,eAAe,GAAG,IAAIiD,cAAAA,EAAAA,CAAAA;AAC3B,QAAA,IAAI,CAACkB,yBAAyB,GAAG,IAAIzF,wBAAyB7gB,CAAAA,MAAAA,CAAAA,CAAAA;AAC9D,QAAA,IAAI,CAACumB,cAAc,GAAG,IAAId,aAAc7nE,CAAAA,MAAAA,CAAAA,CAAAA;AACxC,QAAA,IAAI,CAAC4oE,kBAAkB,GAAG,IAAIX,iBAAkBjoE,CAAAA,MAAAA,CAAAA,CAAAA;;AAtBvC+yD,IAAAA,IAAAA,MAAAA,GAAAA,mBAAAA,CAAAA,SAAAA,CAAAA;AAyBX;;MAGA1yD,MAAAA,CAAAA,OAGC,GAHDA,SAAAA,OAAAA,GAAAA;QACE,IAAI,CAACkkE,eAAe,CAAClkE,OAAO,EAAA,CAAA;QAC5B,IAAI,CAACujE,OAAO,GAAG,IAAA,CAAA;AACjB,KAAA,CAAA;AAEA;;;;;;MAOAjP,MAAAA,CAAAA,MA8DC,GA9DDA,SAAAA,MAAAA,CAAO/nD,OAAsB,EAAEgoD,QAA0B,EAAE7rD,QAAiB,EAAE8/D,WAA8B,EAAA;QAC1Gj8D,OAAQqrD,CAAAA,kBAAkB,GAAGW,yBAAAA,CAA0B35B,GAAG,CAAA;QAE1D,IAAMmjB,MAAAA,GAAS,IAAI,CAACwhB,OAAO,CAAA;AAC3B,QAAA,IAAQ/uB,KAAkBuN,GAAAA,MAAAA,CAAlBvN,KAAO70C,EAAAA,MAAAA,GAAWoiD,MAAXpiD,CAAAA,MAAAA,CAAAA;QACf,IAAM+nE,cAAAA,GAAiB,IAAI,CAACxD,eAAe,CAAA;AAC3C,QAAA,IAAMuE,QAAWj0B,GAAAA,KAAAA,CAAMkvB,aAAa,CAACC,SAAS,CAAA;QAC9C,IAAM+E,aAAAA,GAAgB,IAAI,CAACJ,cAAc,CAAA;QACzC,IAAMK,gBAAAA,GAAmB5mB,OAAO2O,gBAAgB,KAAKZ,iBAAiB8Y,OAAO,IAAIF,cAAclF,oBAAoB,CAAA;QAEnH,IAAIhvB,KAAAA,CAAM8K,WAAW,IAAImpB,QAAAA,IAAYA,SAAShH,UAAU,KAAKnG,UAAWrpB,CAAAA,IAAI,EAAE;AAC5E,YAAA,IAAI,CAACo2B,yBAAyB,CAAC5E,QAAQ,CAACl3D,OAAAA,CAAAA,CAAAA;YACxCA,OAAQqrD,CAAAA,kBAAkB,GAAGW,yBAAAA,CAA0BtmB,IAAI,CAAA;AAC7D,SAAA;QAEA,IAAM2mB,cAAAA,GAAiBj5D,OAAO6sD,eAAe,CAAA;AAC7Ckb,QAAAA,cAAAA,CAAeH,KAAK,EAAA,CAAA;;QAGpBh7D,OAAQqrD,CAAAA,kBAAkB,IAAIW,yBAAAA,CAA0BjV,oBAAoB,CAAA;AAC5E/2C,QAAAA,OAAAA,CAAQsrD,kBAAkB,CAAC9V,MAAOmP,CAAAA,cAAc,EAAEyX,gBAAAA,CAAAA,CAAAA;QAClD,IAAI,CAAC1nB,cAAc,CAAC10C,OAAAA,CAAAA,CAAAA;AAEpBm7D,QAAAA,cAAAA,CAAe/O,SAAS,CAACC,cAAAA,CAAAA,CAAAA;AACzBA,QAAAA,cAAAA,CAAeiQ,YAAY,EAAA,CAAA;AAE3B,QAAA,IAAIF,gBAAkB,EAAA;AACpBD,YAAAA,aAAAA,CAAcjB,QAAQ,CAAC1lB,MAAAA,CAAAA,CAAAA;YACvB2mB,aAAcjF,CAAAA,QAAQ,CAACl3D,OAASm7D,EAAAA,cAAAA,CAAAA,CAAAA;YAChCn7D,OAAQqrD,CAAAA,kBAAkB,GAAGW,yBAAAA,CAA0BtmB,IAAI,CAAA;SACtD,MAAA;YACL8P,MAAOv6B,CAAAA,UAAU,CAAC0oB,UAAU,CAACta,cAAAA,CAAOyhC,2BAA2B,EAAE13D,MAAAA,CAAOk4B,eAAe,CAACuB,cAAc,CAAA,CAAA;AACxG,SAAA;;QAGA,IAAM07B,wBAAAA,GAA2B/S,OAAO+S,wBAAwB,CAAA;AAChE,QAAA,IAAIA,wBAA0B,EAAA;YAC5B,IAAMrG,QAAAA,GAAW1M,OAAO8U,aAAa,CAAA;AACrC,YAAA,IAAMiS,mBAAsBnb,GAAAA,aAAAA,CAAcK,4BAA4B,CACpEruD,MACA,EAAA,IAAI,CAACyoE,oBAAoB,EACzB3Z,QAAAA,CAAS5oD,KAAK,EACd4oD,SAAS3oD,MAAM,EACfi8C,MAAOyT,CAAAA,8BAA8B,EACrCpzD,EAAAA,aAAAA,CAAc+F,eAAe,EAC7B,KACA,EAAA,KAAA,EACA45C,MAAO8O,CAAAA,WAAW,EAClBvuD,eAAAA,CAAgByH,KAAK,EACrB5H,kBAAkBmG,QAAQ,CAAA,CAAA;YAE5B,IAAI,CAAC8/D,oBAAoB,GAAGU,mBAAAA,CAAAA;SACvB,MAAA;YACL,IAAMA,oBAAAA,GAAsB,IAAI,CAACV,oBAAoB,CAAA;AACrD,YAAA,IAAIU,oBAAqB,EAAA;AACvBA,gBAAAA,IAAAA,oCAAAA,CAAAA;AAAAA,gBAAAA,CAAAA,oCAAAA,GAAAA,qBAAoBzhE,eAAe,CAAC,CAApCyhE,CAAAA,KAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,oCAAAA,CAAwC9oE,OAAO,CAAC,IAAA,CAAA,CAAA;AAChD8oE,gBAAAA,oBAAAA,CAAoB9oE,OAAO,CAAC,IAAA,CAAA,CAAA;gBAC5B,IAAI,CAACooE,oBAAoB,GAAG,IAAA,CAAA;AAC9B,aAAA;AACF,SAAA;AAEA,QAAA,IAAI,CAACW,eAAe,CAACx8D,OAASw1C,EAAAA,MAAAA,EAAQwS,UAAU7rD,QAAU8/D,EAAAA,WAAAA,CAAAA,CAAAA;AAC5D,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQO,eAmFP,GAnFD,SAAQA,eAAAA,CACNx8D,OAAsB,EACtBw1C,MAAc,EACdwS,QAA0B,EAC1B7rD,QAAiB,EACjB8/D,WAA8B,EAAA;QAE9B,IAAMd,cAAAA,GAAiB,IAAI,CAACxD,eAAe,CAAA;AAC3C,QAAA,IAAQC,cAAkDuD,cAAlDvD,CAAAA,WAAAA,EAAaC,iBAAqCsD,cAArCtD,CAAAA,cAAAA,EAAgBgD,mBAAqBM,cAArBN,CAAAA,gBAAAA,CAAAA;AAErC,QAAA,IAAQznE,MAAkBoiD,GAAAA,MAAAA,CAAlBpiD,MAAQ60C,EAAAA,KAAAA,GAAUuN,MAAVvN,CAAAA,KAAAA,CAAAA;QAChB,IAAQw0B,aAAex0B,KAAfw0B,CAAAA,UAAAA,CAAAA;QAER,IAAM55C,GAAAA,GAAMzvB,OAAOiF,iBAAiB,CAAA;QACpC,IAAMkkE,mBAAAA,GAAsB,IAAI,CAACV,oBAAoB,CAAA;QACrD,IAAMa,WAAAA,GAAcH,mBAAuB/mB,IAAAA,MAAAA,CAAO4T,YAAY,CAAA;AAC9D,QAAA,IAAMuT,gBAAgBJ,mBAAsBnb,GAAAA,aAAAA,CAAcgB,eAAe,GAAG5M,OAAO0M,QAAQ,CAAA;AAC3F,QAAA,IAAM0a,qBAAqB,CAAC,CAACL,uBAAwB/mB,MAAO4T,CAAAA,YAAY,IAAIpB,QAAYj2D,IAAAA,SAAAA,CAAAA;QAExF,IAAIiO,OAAAA,CAAQ+/B,cAAc,KAAK68B,kBAAoB,EAAA;;YAEjD58D,OAAQqrD,CAAAA,kBAAkB,IAAIW,yBAAAA,CAA0BmB,gBAAgB,CAAA;AACxEntD,YAAAA,OAAAA,CAAQsrD,kBAAkB,CAAC9V,MAAOmP,CAAAA,cAAc,EAAEiY,kBAAAA,CAAAA,CAAAA;AACpD,SAAA;AAEA/5C,QAAAA,GAAAA,CAAI2/B,kBAAkB,CAACka,WAAAA,EAAaC,eAAe38D,OAAQ+/B,CAAAA,cAAc,EAAE5jC,QAAU6rD,EAAAA,QAAAA,CAAAA,CAAAA;QACrF,IAAMhE,UAAAA,GAAaxO,MAAOwO,CAAAA,UAAU,GAAG,EAAEiY,WAAAA,IAAAA,IAAAA,GAAAA,WAAAA,GAAe5Y,gBAAiB3d,CAAAA,IAAI,CAAD,CAAA;QAC5E,IAAMwT,KAAAA,GAAQujB,WAAWI,UAAU,CAAA;QACnC,IAAI7Y,UAAAA,KAAeX,gBAAiB3d,CAAAA,IAAI,EAAE;YACxC7iB,GAAIu1C,CAAAA,iBAAiB,CAAChlE,MAAAA,EAAQ4wD,UAAY9K,EAAAA,KAAAA,CAAAA,CAAAA;AAC5C,SAAA;QAEA,IAAM6T,WAAAA,GAAc9kB,MAAM6kB,YAAY,CAAA;QACtC,IAAI9I,UAAAA,GAAaX,gBAAiByZ,CAAAA,OAAO,EAAE;AACzC/P,YAAAA,WAAAA,CAAYc,iBAAiB,GAAG,KAAA,CAAA;AAClC,SAAA;AAEA+J,QAAAA,WAAAA,CAAY7P,MAAM,CAAC/nD,OAAS2X,EAAAA,aAAAA,CAAcuX,OAAO,CAAA,CAAA;AACjD2oC,QAAAA,cAAAA,CAAe9P,MAAM,CAAC/nD,OAAS2X,EAAAA,aAAAA,CAAcuX,OAAO,CAAA,CAAA;QACpD,IAAI80B,UAAAA,GAAaX,gBAAiBr/B,CAAAA,KAAK,EAAE;AACvC,YAAA,IAAIy4C,UAAWpsE,CAAAA,IAAI,KAAK26D,cAAAA,CAAe+R,GAAG,EAAE;gBAC1CN,UAAWO,CAAAA,GAAG,CAACznB,OAAO,CAACv1C,OAAAA,CAAAA,CAAAA;aAClB,MAAA,IAAIy8D,WAAWpsE,IAAI,KAAK26D,eAAe7zD,OAAO,IAAIslE,UAAWptE,CAAAA,OAAO,EAAE;gBAC3E,IAAI,CAAC4tE,sBAAsB,CAACznB,MAAQinB,EAAAA,UAAAA,CAAAA,CAAAA;AACtC,aAAA;AACF,SAAA;;QAGA,IAAIjnB,MAAAA,CAAOuU,oBAAoB,EAAE;;AAE/B2S,YAAAA,WAAAA,CAAY3hE,iBAAiB,EAAA,CAAA;YAE7B,IAAMmiE,iBAAAA,GAAoB,IAAI,CAAClB,kBAAkB,CAAA;AACjDkB,YAAAA,iBAAAA,CAAkBhC,QAAQ,CAAC1lB,MAAQknB,EAAAA,WAAAA,CAAY5hE,eAAe,CAAC,CAAA,CAAA,CAAA,CAAA;AAC/DoiE,YAAAA,iBAAAA,CAAkBhG,QAAQ,CAACl3D,OAAAA,CAAAA,CAAAA;;AAG3B6iB,YAAAA,GAAAA,CAAI2/B,kBAAkB,CAACka,WAAAA,EAAaC,eAAe38D,OAAQ+/B,CAAAA,cAAc,EAAE5jC,QAAU6rD,EAAAA,QAAAA,CAAAA,CAAAA;SAChF,MAAA;AACLxS,YAAAA,MAAAA,CAAOv6B,UAAU,CAAC0oB,UAAU,CAACta,cAAAA,CAAO0hC,4BAA4B,EAAE,IAAA,CAAA,CAAA;AACpE,SAAA;AAEA8P,QAAAA,gBAAAA,CAAiB9S,MAAM,CAAC/nD,OAAS2X,EAAAA,aAAAA,CAAcuX,OAAO,CAAA,CAAA;;AAEtD69B,QAAAA,WAAAA,CAAYY,SAAS,CAAC3tD,OAAS2X,EAAAA,aAAAA,CAAcuX,OAAO,CAAA,CAAA;QAEpD,IAAMiuC,kBAAAA,GAAqBl1B,MAAMiiB,mBAAmB,CAAA;QACpD,IAAMkT,kBAAAA,GAAqB5nB,OAAO4T,YAAY,CAAA;AAC9C,QAAA,IAAI5T,MAAOyU,CAAAA,iBAAiB,IAAIkT,kBAAAA,CAAmBhT,eAAe,EAAE;YAClEgT,kBAAmB5nB,CAAAA,OAAO,CAACv1C,OAAAA,EAASu8D,mBAAqBa,EAAAA,kBAAAA,CAAAA,CAAAA;AAC3D,SAAA,MAAO,IAAIb,mBAAqB,EAAA;AAC9BA,YAAAA,mBAAAA,CAAoBxhE,iBAAiB,EAAA,CAAA;YACrCqmD,aAAcY,CAAAA,WAAW,CACvB5uD,MAAAA,EACWmpE,mBAAoBzhE,CAAAA,eAAe,CAAC,CAC/CsiE,CAAAA,EAAAA,kBAAAA,EACA,CACA5nB,EAAAA,MAAAA,CAAO0M,QAAQ,CAAA,CAAA;AAEnB,SAAA;AAEAkb,QAAAA,kBAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,mBAAoBriE,iBAAiB,EAAA,CAAA;AACrCqiE,QAAAA,kBAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,mBAAoB7lE,eAAe,EAAA,CAAA;AACrC,KAAA,CAAA;AAEA;;;;AAIC,MACDopD,OAAAA,iBAmCC,GAnCDA,SAAAA,iBAAkB3gD,CAAAA,OAAsB,EAAEogD,aAA4B,EAAA;AACpEA,QAAAA,aAAAA,CAAcid,gBAAgB,GAAA,CAAA,CAAA;QAC9B,IAAMC,iBAAAA,GAAoBld,cAAckd,iBAAiB,CAAA;QACzD,IAAK,IAAIzqE,CAAI,GAAA,CAAA,EAAG0B,CAAI+oE,GAAAA,iBAAAA,CAAkB7qE,MAAM,EAAEI,CAAAA,GAAI0B,CAAG,EAAA,EAAE1B,CAAG,CAAA;YACxD,IAAMytD,gBAAAA,GAAmBgd,iBAAiB,CAACzqE,CAAE,CAAA,CAAA;YAC7C,IAAQ+yC,WAAa0a,gBAAb1a,CAAAA,QAAAA,CAAAA;YACR,IAAQnE,eAAiBmE,QAAjBnE,CAAAA,YAAAA,CAAAA;AACR,YAAA,IAAM87B,oBAAoB33B,QAAS5kB,CAAAA,MAAM,CAACif,UAAU,CAAC,CAAE,CAAA,CAAA;YACvD,IAAMgoB,iBAAAA,GAAoBjoD,QAAQioD,iBAAiB,CAAA;AACnD,YAAA,IAAIA,iBAAmB,EAAA;gBACrB,IAAMuV,qBAAAA,GAAwBvV,kBAAkBhoB,UAAU,CAAA;gBAC1D,IAAQioB,iBAAmBloD,OAAnBkoD,CAAAA,cAAAA,CAAAA;AACR,gBAAA,IAAIA,cAAgB,EAAA;AAClB,oBAAA,IAAIuV,kBAAqB,GAAA,KAAA,CAAA;oBACzB,IAAK,IAAIx6D,IAAI,CAAGC,EAAAA,CAAAA,GAAIs6D,sBAAsB/qE,MAAM,EAAEwQ,CAAIC,GAAAA,CAAAA,EAAGD,CAAK,EAAA,CAAA;wBAC5D,IAAMm9B,SAAAA,GAAYo9B,qBAAqB,CAACv6D,CAAE,CAAA,CAAA;AAC1C,wBAAA,IAAIm9B,UAAU3d,WAAW,CAACylC,oBAAoBqV,iBAAkB96C,CAAAA,WAAW,CAACylC,cAAiB,CAAA,EAAA;AAC3F,4BAAA,IAAI,CAACwV,uBAAuB,CAACtd,eAAeE,gBAAkBlgB,EAAAA,SAAAA,CAAU9O,MAAM,EAAEmQ,YAAAA,CAAAA,CAAAA;4BAChFg8B,kBAAqB,GAAA,IAAA,CAAA;AACvB,yBAAA;AACF,qBAAA;AAEA,oBAAA,IACE,CAACA,kBACDz9D,IAAAA,OAAAA,CAAQmoD,0BAA0B,KAAKzE,0BAAAA,CAA2BmF,kBAAkB,EACpF;AACA,wBAAA,IAAI,CAAC6U,uBAAuB,CAACtd,eAAeE,gBAAkBid,EAAAA,iBAAAA,CAAkBjsC,MAAM,EAAEmQ,YAAAA,CAAAA,CAAAA;AAC1F,qBAAA;iBACK,MAAA;oBACL,IAAI,CAACi8B,uBAAuB,CAACtd,aAAeE,EAAAA,gBAAAA,EAAkBkd,qBAAqB,CAAC,CAAA,CAAE,CAAClsC,MAAM,EAAEmQ,YAAAA,CAAAA,CAAAA;AACjG,iBAAA;aACK,MAAA;AACL,gBAAA,IAAI,CAACi8B,uBAAuB,CAACtd,eAAeE,gBAAkBid,EAAAA,iBAAAA,CAAkBjsC,MAAM,EAAEmQ,YAAAA,CAAAA,CAAAA;AAC1F,aAAA;AACF,SAAA;AACF,KAAA,CAAA;IAEA,MAAQi8B,CAAAA,uBAyCP,GAzCD,SAAQA,uBACNtd,CAAAA,aAA4B,EAC5BE,gBAAkC,EAClCrb,YAAuC,EACvCxD,YAAwC,EAAA;QAExC,IAAM05B,cAAAA,GAAiB,IAAI,CAACxD,eAAe,CAAA;QAC3C,IAAK,IAAI9kE,IAAI,CAAG0B,EAAAA,CAAAA,GAAI0wC,aAAaxyC,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;;AAEnD,YAAA,IAAI2sC,kBAAAA,KAAAA,CAAAA,CAAAA;YACJ,IAAMa,UAAAA,GAAa4E,YAAY,CAACpyC,CAAE,CAAA,CAAA;YAClC,IAAM+uC,WAAAA,GAAcvB,WAAWwB,YAAY,CAAA;AAC3C,YAAA,IAAID,WAAa,EAAA;gBACfA,WAAY5B,CAAAA,6BAA6B,CAACK,UAAW7R,CAAAA,mBAAmB,EAAE8xB,gBAAiB1a,CAAAA,QAAQ,CAAC3qB,UAAU,CAAA,CAAA;AAC9GukB,gBAAAA,eAAAA,GAAkBoC,YAAYpC,eAAe,CAAA;aACxC,MAAA;AACLA,gBAAAA,eAAAA,GAAkBiC,YAAY,CAAC5uC,CAAE,CAAA,CAAC2sC,eAAe,CAAA;AACnD,aAAA;AAEA,YAAA,IAAMnwB,OAAO,CAAKmwB,IAAAA,eAAAA,CAAAA;AAElB8gB,YAAAA,gBAAAA,CAAiBrb,YAAY,GAAGA,YAAAA,CAAAA;AAChCqb,YAAAA,gBAAAA,CAAiB+c,gBAAgB,IAAIhuD,IAAAA,CAAAA;YAErC,IAAI+wC,aAAAA,CAAcid,gBAAgB,GAAGhuD,IAAM,EAAA;AACzC,gBAAA,SAAA;AACF,aAAA;YAEA,OAAQmwB,eAAAA;AACN,gBAAA,KAAK7qB,gBAAgB8qB,MAAM;oBACzB07B,cAAevD,CAAAA,WAAW,CAACjX,iBAAiB,CAACP,aAAAA,CAAAA,CAAAA;AAC7C,oBAAA,MAAA;AACF,gBAAA,KAAKzrC,gBAAgBomD,SAAS;oBAC5BI,cAAetD,CAAAA,cAAc,CAAClX,iBAAiB,CAACP,aAAAA,CAAAA,CAAAA;AAChD,oBAAA,MAAA;AACF,gBAAA,KAAKzrC,gBAAgBmmD,WAAW;oBAC9BK,cAAeN,CAAAA,gBAAgB,CAACla,iBAAiB,CAACP,aAAAA,CAAAA,CAAAA;AAClD,oBAAA,MAAA;AACJ,aAAA;AACAA,YAAAA,aAAAA,CAAcid,gBAAgB,IAAIhuD,IAAAA,CAAAA;AACpC,SAAA;AACF,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQ4tD,sBA4BP,GA5BD,SAAQA,sBAAuBznB,CAAAA,MAAc,EAAEinB,UAAsB,EAAA;QACnE,IAAMrpE,MAAAA,GAASoiD,OAAOpiD,MAAM,CAAA;QAC5B,IAAMyvB,GAAAA,GAAMzvB,OAAOiF,iBAAiB,CAAA;QACpC,IAAQuH,SAAWxM,MAAXwM,CAAAA,MAAAA,CAAAA;AACR,QAAA,IAAQ+9D,QAAqClB,GAAAA,UAAAA,CAArCkB,SAAqBC,EAAOC,OAASpB,UAAhBmB,CAAAA,KAAAA,CAAAA;QAE7B,IACG,CAAA,IAAI,CAAChC,eAAe,CAACx/D,CAAC,KAAKwD,MAAAA,CAAOtG,KAAK,IAAI,IAAI,CAACsiE,eAAe,CAACv/D,CAAC,KAAKuD,MAAAA,CAAOrG,MAAK,KACnFkjE,UAAAA,CAAWqB,gBAAgB,KAAK7S,yBAA0B8S,CAAAA,IAAI,EAC9D;YACA,IAAI,CAACnC,eAAe,CAAChrE,GAAG,CAACgP,MAAOtG,CAAAA,KAAK,EAAEsG,MAAAA,CAAOrG,MAAM,CAAA,CAAA;AACpDkjE,YAAAA,UAAAA,CAAWuB,wBAAwB,EAAA,CAAA;AACrC,SAAA;QAEA,IAAM18B,IAAAA,GAAOsE,QAAS5kB,CAAAA,MAAM,CAACif,UAAU,CAAC,CAAE,CAAA,CAAC3O,MAAM,CAAC,CAAE,CAAA,CAAA;AACpD,QAAA,IAAMzH,UAAUyX,IAAKhS,CAAAA,iBAAiB,CAACl8B,MAAAA,EAAQo9B,OAAOgQ,cAAc,CAAA,CAAA;AACpE3W,QAAAA,OAAAA,CAAQlzB,IAAI,EAAA,CAAA;AACZkzB,QAAAA,OAAAA,CAAQ7B,SAAS,CAAC6B,OAAAA,CAAQ7C,oBAAoB,EAAE4e,SAAS3qB,UAAU,CAAA,CAAA;AACnE4O,QAAAA,OAAAA,CAAQ7B,SAAS,CAAC6B,OAAAA,CAAQ/C,kBAAkB,EAAE0uB,OAAOv6B,UAAU,CAAA,CAAA;AAC/D4O,QAAAA,OAAAA,CAAQnB,qBAAqB,EAAA,CAAA;AAE5B4Y,QAAAA,CAAAA,IAAKO,CAAAA,YAAY,IAAI+D,QAAAA,CAAShE,WAAW,EAAElC,YAAY,CACtDtsC,QACA,KACAkuC,EAAAA,IAAAA,CAAK9S,mBAAmB,EACxBoX,SAAS3qB,UAAU,CAAA,CAAA;AAErB4H,QAAAA,GAAAA,CAAIkgC,aAAa,CAAC8a,IAAAA,CAAK7a,UAAU,EAAE6a,IAAAA,CAAKv3B,OAAO,EAAEzc,OAAAA,CAAAA,CAAAA;AACnD,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQ6qB,cAuBP,GAvBD,SAAQA,cAAAA,CAAe10C,OAAsB,EAAA;QAC3C,IAAMw1C,MAAAA,GAASx1C,QAAQw1C,MAAM,CAAA;QAC7B,IAAMpiD,MAAAA,GAASoiD,OAAOpiD,MAAM,CAAA;AAC5B,QAAA,IAAMwlE,YAAYpjB,MAAOvN,CAAAA,KAAK,CAACoM,kBAAkB,CAACwkB,UAAU,CAAA;QAE5D,IAAMhuD,QAAAA,GAAW+tD,UAAUte,SAAS,CAAA;QACpC,IAAK,IAAIznD,IAAI+lE,SAAUnmE,CAAAA,MAAM,GAAG,CAAGI,EAAAA,CAAAA,IAAK,CAAG,EAAA,EAAEA,CAAG,CAAA;YAC9C,IAAMuO,QAAAA,GAAWyJ,QAAQ,CAAChY,CAAE,CAAA,CAAA;;YAG5B,IAAI,EAAE2iD,MAAAA,CAAOyO,WAAW,GAAG7iD,SAAS8lC,OAAO,CAAC+O,KAAI,CAAI,EAAA;AAClD,gBAAA,SAAA;AACF,aAAA;;YAGA,IAAIT,MAAAA,CAAOuO,oBAAoB,EAAE;gBAC/B,IAAI,CAACvO,OAAOiP,QAAQ,CAACwZ,aAAa,CAAC78D,QAAAA,CAAS2zC,MAAM,CAAG,EAAA;AACnD,oBAAA,SAAA;AACF,iBAAA;AACF,aAAA;AACA3zC,YAAAA,QAAAA,CAASszC,cAAc,CAAC10C,OAAAA,CAAAA,CAAAA;AACxBoB,YAAAA,QAAAA,CAASuzC,iBAAiB,GAAGvhD,MAAOgoB,CAAAA,IAAI,CAACM,UAAU,CAAA;AACrD,SAAA;AACF,KAAA,CAAA;AAvUWyqC,IAAAA,OAAAA,mBAAAA,CAAAA;AAwUZ,CAAA,GAAA;AAEM,IAAA,gBAAK+X,iBAAAA,SAAAA,gBAAAA,EAAAA;;;;;;AAAAA,IAAAA,OAAAA,gBAAAA,CAAAA;AAMX,CAAA,CAAA,EAAA,CAAA;;AC/WM,IAAA,aAAA,iBAAA,WAAA;AAAM10C,IAAAA,SAAAA,aAAAA,GAAAA;aAGX8zC,iBAAoB3qE,GAAAA,KAAAA,EAAAA,CAAAA;;AAHT62B,IAAAA,IAAAA,MAAAA,GAAAA,aAAAA,CAAAA,SAAAA,CAAAA;AAMX54B,IAAAA,MAAAA,CAAAA,GAIC,GAJDA,SAAAA,GAAI2mD,CAAAA,QAAgB,EAAEgX,eAAuB,EAAA;QAC3C,IAAI,CAAChX,QAAQ,GAAGA,QAAAA,CAAAA;QAChB,IAAI,CAACgX,eAAe,GAAGA,eAAAA,CAAAA;AACvB,QAAA,IAAI,CAAC+O,iBAAiB,CAAC7qE,MAAM,GAAG,CAAA,CAAA;AAClC,KAAA,CAAA;AAEAguD,IAAAA,MAAAA,CAAAA,mBAEC,GAFDA,SAAAA,mBAAAA,CAAoBvyC,OAAyB,EAAA;AAC3C,QAAA,IAAI,CAACovD,iBAAiB,CAAC3oE,IAAI,CAACuZ,OAAAA,CAAAA,CAAAA;AAC9B,KAAA,CAAA;IAEA9e,MAAAA,CAAAA,OAEC,GAFDA,SAAAA,OAAAA,GAAAA;AACE,QAAA,IAAI,CAACkuE,iBAAiB,CAAC7qE,MAAM,GAAG,CAAA,CAAA;AAClC,KAAA,CAAA;AAlBW+2B,IAAAA,OAAAA,aAAAA,CAAAA;AAmBZ,CAAA,EAAA;;ACdM,IAAA,gBAAA,iBAAA,WAAA;AAAM20C,IAAAA,SAAAA,gBAAAA,GAAAA,EAAAA;AAAAA,IAAAA,IAAAA,MAAAA,GAAAA,gBAAAA,CAAAA,SAAAA,CAAAA;AAcXvtE,IAAAA,MAAAA,CAAAA,GAcC,GAdDA,SAAAA,GAAAA,CACE00C,SAAmB,EACnBM,QAAkB,EAClB4a,SAAoB,EACpB6N,YAAqB,EACrBh/D,OAAmB,EACnB81C,QAA4B,EAAA;QAE5B,IAAI,CAACG,SAAS,GAAGA,SAAAA,CAAAA;QACjB,IAAI,CAACM,QAAQ,GAAGA,QAAAA,CAAAA;QAChB,IAAI,CAAC4a,SAAS,GAAGA,SAAAA,CAAAA;QACjB,IAAI,CAAC6N,YAAY,GAAGA,YAAAA,CAAAA;QACpB,IAAI,CAACh/D,OAAO,GAAGA,OAAAA,CAAAA;QACf,IAAI,CAAC81C,QAAQ,GAAGA,QAAAA,CAAAA;AAClB,KAAA,CAAA;IAEA/1C,MAAAA,CAAAA,OAUC,GAVDA,SAAAA,OAAAA,GAAAA;QACE,IAAI,CAACk2C,SAAS,GAAG,IAAA,CAAA;QACjB,IAAI,CAACM,QAAQ,GAAG,IAAA,CAAA;QAChB,IAAI,CAAC4a,SAAS,GAAG,IAAA,CAAA;QACjB,IAAI,CAAC6N,YAAY,GAAG,IAAA,CAAA;QACpB,IAAI,CAACppB,YAAY,GAAG,IAAA,CAAA;QACpB,IAAI,CAAChqB,UAAU,KAAK,IAAI,CAACA,UAAU,GAAG,IAAG,CAAA,CAAA;QAEzC,IAAI,CAAC5rB,OAAO,KAAK,IAAI,CAACA,OAAO,GAAG,IAAG,CAAA,CAAA;QACnC,IAAI,CAAC81C,QAAQ,KAAK,IAAI,CAACA,QAAQ,GAAG,IAAG,CAAA,CAAA;AACvC,KAAA,CAAA;AAxCWg5B,IAAAA,OAAAA,gBAAAA,CAAAA;AAyCZ,CAAA,EAAA;;ACjCD;;IAGO,IAAMp4B,UAAN,iBAAA,SAAA,QAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,UAAAA,EAAAA,QAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,UAAAA,CA4JCc,MAAc,EAAA;;gBACxB,QAAMA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,CAAAA,IAAAA,IAAAA,uDAvJ0C,KAAA,CAElDu3B,eAAmCxsB,GAAAA,eAAAA,CAAgBsS,UAAU,mBAQ/C,KAAA,CAEdhvC,UAAqB,GAAA,CAAC,CAGdqqC,EAAAA,KAAAA,CAAAA,OAAAA,GAAkB,YAGlBlvC,eAA0B,GAAA,CAAA,EAAA,KAAA,CAE1BC,gBAA2B,GAAA,CAAA,EAAA,KAAA,CAE3BC,YAAuBxe,GAAAA,SAAAA,EAAAA,KAAAA,CAEvBye,aAAwBze,GAAAA,SAAAA,EAAAA,KAAAA,CAExBytD,MAAkB,GAAA,KAAA,EAAA,KAAA,CAElBC,MAAkB,GAAA,KAAA,EAAA,KAAA,CAGlB4e,YAAuB,GAAA,GAAA,CAAA;AAyH7B1mB,QAAAA,qBAAAA,CAAsBC,SAAS,CAAA,KAAA,CAAA,CAAA;AAC/B,QAAA,KAAA,CAAKlE,WAAW,CAAC,KAAA,CAAKlgD,OAAO,CAAC83B,eAAe,CAACgzC,yBAAyB,CAAA,CAAA;QACvE,KAAKrjD,CAAAA,UAAU,CAAConB,QAAQ,CAAC0D,UAAWC,CAAAA,oBAAoB,EAAE,KAAA,CAAKq4B,YAAY,CAAA,CAAA;QAC3E,KAAKE,CAAAA,cAAc,GAAG,IAAI/0C,aAAAA,EAAAA,CAAAA;AAC1B,QAAA,KAAA,CAAK+0C,cAAc,CAAC9d,mBAAmB,CAAC,IAAI0d,gBAAAA,EAAAA,CAAAA,CAAAA;AAC5C,QAAA,KAAA,CAAKte,eAAe,GAAG,KAAKA,CAAAA,eAAe,CAAClpD,IAAI,CAAA,KAAA,CAAA,CAAA;;;AAnKvCovC,IAAAA,IAAAA,MAAAA,GAAAA,UAAAA,CAAAA,SAAAA,CAAAA;AAsKX;;MAGA,MAAA,CAAS0P,0BAGR,GAHD,SAASA,2BAA2Bz1C,OAAsB,EAAE01C,OAAgB,EAAEC,OAAgB,EAAA;;QAE5F,QAAMF,CAAAA,SAAAA,CAAAA,0BAAD,CAA4Bz1C,IAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EAAS01C,OAAS,EAAA,IAAA,CAAA,CAAA;AACrD,KAAA,CAAA;AAEA;;MAGA,MAAA,CAAS1iD,QAGR,GAHD,SAASA,SAAStD,MAAkB,EAAEiC,OAAe,EAAEC,UAAkB,EAAA;QACvE,QAAMoB,CAAAA,SAAAA,CAAAA,QAAD,CAAUtD,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAAQiC,OAASC,EAAAA,UAAAA,CAAAA,CAAAA;AAChClC,QAAAA,MAAAA,CAAOuY,MAAM,GAAG,IAAI,CAACs3C,OAAO,CAAA;AAC9B,KAAA,CAAA;AAEA;;AAEC,MACD,OAASxJ,SAER,GAFD,SAASA,SAAUhR,CAAAA,QAA0B,EAAEC,QAA0B,EAAA;QACvE,OAAOH,UAAAA,CAAWgB,kBAAkB,CAACd,QAAUC,EAAAA,QAAAA,CAAAA,CAAAA;AACjD,KAAA,CAAA;AAEA;;AAEC,MACD,OAASgR,MAER,GAFD,SAASA,MAAOjR,CAAAA,QAA0B,EAAEC,QAA2B,EAAA;QACrEH,UAAWoB,CAAAA,UAAU,CAAClB,QAAUC,EAAAA,QAAAA,CAAAA,CAAAA;AAClC,KAAA,CAAA;AAEA;;MAGA,MAAA,CAASsC,gBAGR,GAHD,SAASA,gBAAAA,GAAAA;AACP,QAAA,QAAA,CAAA,SAAA,CAAMA,gBAAD,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;AACL,QAAA,IAAI,CAACW,KAAK,CAAC6kB,YAAY,CAAC0R,aAAa,CAAC,IAAI,CAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;MAGA,MAAA,CAASj3B,iBAGR,GAHD,SAASA,iBAAAA,GAAAA;AACP,QAAA,QAAA,CAAA,SAAA,CAAMA,iBAAD,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;AACL,QAAA,IAAI,CAACU,KAAK,CAAC6kB,YAAY,CAAC2R,gBAAgB,CAAC,IAAI,CAAA,CAAA;AAC/C,KAAA,CAAA;AAEA;;MAGA3mB,MAAAA,CAAAA,gBAEC,GAFDA,SAAAA,gBAAAA,GAAAA;AACE,QAAA,OAAO,IAAI,CAAC1kD,MAAM,CAAC6sD,eAAe,CAACye,yBAAyB,CAAA;AAC9D,KAAA,CAAA;AAEA,IAAA,MAAA,CAAmBznB,aAOlB,GAPD,SAAmBA,aAAAA,CAAcC,WAAwB,EAAA;QACvD,IAAI,IAAI,CAACjvC,MAAM,EAAE;YACf0vC,qBAAsBS,CAAAA,eAAe,CAAC,IAAI,CAAA,CAAA;SACrC,MAAA;AACLlB,YAAAA,WAAAA,CAAYnkC,GAAG,CAACniB,GAAG,CAAC,GAAG,CAAG,EAAA,CAAA,CAAA,CAAA;AAC1BsmD,YAAAA,WAAAA,CAAYn+C,GAAG,CAACnI,GAAG,CAAC,GAAG,CAAG,EAAA,CAAA,CAAA,CAAA;AAC5B,SAAA;AACF,KAAA,CAAA;AAEA;;AAEC,MACD,MAAmB2kD,CAAAA,OAoClB,GApCD,SAAmBA,QAAQv1C,OAAsB,EAAA;AAC1C,QAAA,IAAA,YAAA,CAAA;AAAL,QAAA,IAAI,GAAC,YAAA,GAAA,IAAI,CAACiI,MAAM,KAAA,IAAA,GAAA,KAAA,CAAA,GAAX,aAAa5Y,OAAO,CAAA,IAAI,CAAC,IAAI,CAACiK,KAAK,IAAI,CAAC,IAAI,CAACC,MAAM,EAAE;AACxD,YAAA,OAAA;AACF,SAAA;QAEA,IAAIqsC,QAAAA,GAAW,IAAI,CAAC6N,WAAW,EAAA,CAAA;AAC/B,QAAA,IAAI,CAAC7N,QAAU,EAAA;AACb,YAAA,OAAA;AACF,SAAA;AACA,QAAA,IAA4B,KAAA,GAAA,IAAI,EAAfxyC,SAAW,KAApBI,CAAAA,OAAAA,CAAAA;;QAER,IAAIoyC,QAAAA,CAAS9xC,SAAS,EAAE;YACtB8xC,QAAWxyC,GAAAA,MAAAA,CAAOk4B,eAAe,CAACgzC,yBAAyB,CAAA;AAC7D,SAAA;;AAGA,QAAA,IAAI,IAAI,CAACjtD,gBAAgB,GAAGomC,mBAAAA,CAAoB0I,WAAW,EAAE;YAC3DxI,qBAAsBS,CAAAA,eAAe,CAAC,IAAI,CAAA,CAAA;AAC1C,YAAA,IAAI,CAAC/mC,gBAAgB,IAAI,CAAComC,oBAAoB0I,WAAW,CAAA;AAC3D,SAAA;;QAGA,IAAI,IAAI,CAAC9uC,gBAAgB,GAA6B,CAAA,EAAA;YACpDsmC,qBAAsBoB,CAAAA,SAAS,CAAC,IAAI,CAAA,CAAA;YACpC,IAAI,CAAC1nC,gBAAgB,IAAI,CAAA,CAAA,CAAA;AAC3B,SAAA;QAEA,IAAM+uC,aAAAA,GAAgB,IAAI,CAACme,cAAc,CAAA;AACzC,QAAA,IAAMje,gBAAmBF,GAAAA,aAAAA,CAAckd,iBAAiB,CAAC,CAAE,CAAA,CAAA;QAC3Dld,aAAcxvD,CAAAA,GAAG,CAAC,IAAI,CAAC2mD,QAAQ,EAAE,IAAI,CAACpC,gBAAgB,CAAA,CAAA;QAEtD,IAAMhQ,QAAAA,GAAW,IAAI,CAAC6S,SAAS,CAAA;AAC/BsI,QAAAA,gBAAAA,CAAiB1vD,GAAG,CAAC,IAAI,EAAEg1C,QAAUT,EAAAA,QAAAA,CAASC,KAAK,CAACob,SAAS,EAAErb,QAAAA,CAASmB,OAAO,EAAE,IAAI,CAACr+B,MAAM,CAAC5Y,OAAO,EAAE81C,QAAAA,CAAAA,CAAAA;QACtGmb,gBAAiBrb,CAAAA,YAAY,GAAGW,QAAS5kB,CAAAA,MAAM,CAACif,UAAU,CAAC,CAAE,CAAA,CAAC3O,MAAM,CAAA;QACpEgvB,gBAAiB+c,CAAAA,gBAAgB,GAAGa,gBAAAA,CAAiB7rC,GAAG,CAAA;AACxD+tB,QAAAA,aAAAA,CAAcK,mBAAmB,CAACH,gBAAAA,CAAAA,CAAAA;AACpC,KAAA,CAAA;AAEA;;MAGA,MAAA,CAAmB5sD,UAgBlB,GAhBD,SAAmBA,UAAAA,GAAAA;QACjB,IAAMuU,MAAAA,GAAS,IAAI,CAACs3C,OAAO,CAAA;AAC3B,QAAA,IAAIt3C,MAAQ,EAAA;AACV,YAAA,IAAI,CAAC4/B,sBAAsB,CAAC5/B,MAAAA,EAAQ,CAAC,CAAA,CAAA,CAAA;AACrCA,YAAAA,MAAAA,CAAOqJ,kBAAkB,CAAC1B,cAAc,CAAC,IAAI,CAACiwC,eAAe,CAAA,CAAA;AAC/D,SAAA;AAEA,QAAA,QAAA,CAAA,SAAA,CAAMnsD,UAAD,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;QAEL,IAAI,CAAC6rD,OAAO,GAAG,IAAA,CAAA;QACf,IAAI,IAAI,CAACvH,SAAS,EAAE;AAClB,YAAA,IAAI,CAACF,gBAAgB,EAAA,CAAGG,YAAY,CAAC,IAAI,CAACD,SAAS,CAAA,CAAA;YACnD,IAAI,CAACA,SAAS,GAAG,IAAA,CAAA;AACnB,SAAA;QAEA,IAAI,CAACumB,cAAc,GAAG,IAAA,CAAA;AACxB,KAAA,CAAA;IAEA,MAAQpsD,CAAAA,eASP,GATD,SAAQA,eAAAA,GAAAA;QACN,IAAMlK,MAAAA,GAAS,IAAI,CAACs3C,OAAO,CAAA;AAC3B,QAAA,IAAIt3C,MAAQ,EAAA;AACV,YAAA,IAAI,CAACoI,eAAe,GAAGpI,MAAAA,CAAO3O,KAAK,CAAA;AACnC,YAAA,IAAI,CAACgX,gBAAgB,GAAGrI,MAAAA,CAAO1O,MAAM,CAAA;SAChC,MAAA;AACL,YAAA,IAAI,CAAC8W,eAAe,GAAG,IAAI,CAACC,gBAAgB,GAAG,CAAA,CAAA;AACjD,SAAA;QACA,IAAI,CAACe,gBAAgB,IAAI,CAAA,CAAA,CAAA;AAC3B,KAAA,CAAA;AAEA,IAAA,MAAA,CACQwuC,eA2BP,GA5BD,SACQA,eAAAA,CAAgB/uD,IAAuB,EAAA;QAC7C,OAAQA,IAAAA;AACN,YAAA,KAAKmf,kBAAkB5gB,OAAO;AAC5B,gBAAA,IAAI,CAAC4rB,UAAU,CAAC0oB,UAAU,CAjTrBoC,UAiTiC6a,CAAAA,gBAAgB,EAAE,IAAI,CAAC34C,MAAM,CAAC5Y,OAAO,CAAA,CAAA;AAC3E,gBAAA,MAAA;AACF,YAAA,KAAK4gB,kBAAkBvX,IAAI;AACzB,gBAAA,IAAI,CAAC2Y,gBAAgB,IAAA,CAAA,CAAA;gBACrB,IAAI,IAAI,CAACd,YAAY,KAAKxe,aAAa,IAAI,CAACye,aAAa,KAAKze,SAAW,EAAA;AACvE,oBAAA,IAAI,CAACsf,gBAAgB,IAAIomC,mBAAAA,CAAoB0I,WAAW,CAAA;AAC1D,iBAAA;AACA,gBAAA,MAAA;AACF,YAAA,KAAKlwC,kBAAkBE,MAAM,CAAA;AAC7B,YAAA,KAAKF,kBAAkBgD,iBAAiB;AACtC,gBAAA,IAAI,CAAC5B,gBAAgB,IAAA,CAAA,CAAA;AACrB,gBAAA,MAAA;AACF,YAAA,KAAKpB,kBAAkB+D,WAAW;AAChC,gBAAA,IAAI,CAAC3C,gBAAgB,IAAA,CAAA,CAAA;AACrB,gBAAA,MAAA;AACF,YAAA,KAAKpB,kBAAkBnC,KAAK;AAC1B,gBAAA,IAAI,CAACuD,gBAAgB,IAAIomC,mBAAAA,CAAoB0I,WAAW,CAAA;AACxD,gBAAA,MAAA;AACF,YAAA,KAAKlwC,kBAAkBxc,OAAO;gBAC5B,IAAI,CAACwU,MAAM,GAAG,IAAA,CAAA;AACd,gBAAA,MAAA;AAGJ,SAAA;AACF,KAAA,CAAA;AAzUW89B,IAAAA,aAAAA,CAAAA,UAAAA,EAAAA;;YA8CPzsC,GAAAA,EAAAA,OAAAA;;;;;;;MAAJ,SAAA,GAAA,GAAA;AACE,gBAAA,IAAI,IAAI,CAACiX,YAAY,KAAKxe,SAAW,EAAA;oBACnC,OAAO,IAAI,CAACwe,YAAY,CAAA;iBACnB,MAAA;AACL,oBAAA,IAAI,CAACc,gBAAgB,GAA0C,CAAA,IAAA,IAAI,CAACc,eAAe,EAAA,CAAA;oBACnF,OAAO,IAAI,CAAC9B,eAAe,CAAA;AAC7B,iBAAA;AACF,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAUnb,KAAa,EAAA;AACrB,gBAAA,IAAI,IAAI,CAACqb,YAAY,KAAKrb,KAAO,EAAA;oBAC/B,IAAI,CAACqb,YAAY,GAAGrb,KAAAA,CAAAA;AACpB,oBAAA,IAAI,CAACmc,gBAAgB,IAAIomC,mBAAAA,CAAoB0I,WAAW,CAAA;AAC1D,iBAAA;AACF,aAAA;;;YASI5mD,GAAAA,EAAAA,QAAAA;;;;;;;MAAJ,SAAA,GAAA,GAAA;AACE,gBAAA,IAAI,IAAI,CAACiX,aAAa,KAAKze,SAAW,EAAA;oBACpC,OAAO,IAAI,CAACye,aAAa,CAAA;iBACpB,MAAA;AACL,oBAAA,IAAI,CAACa,gBAAgB,GAA0C,CAAA,IAAA,IAAI,CAACc,eAAe,EAAA,CAAA;oBACnF,OAAO,IAAI,CAAC7B,gBAAgB,CAAA;AAC9B,iBAAA;AACF,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAWpb,KAAa,EAAA;AACtB,gBAAA,IAAI,IAAI,CAACsb,aAAa,KAAKtb,KAAO,EAAA;oBAChC,IAAI,CAACsb,aAAa,GAAGtb,KAAAA,CAAAA;AACrB,oBAAA,IAAI,CAACmc,gBAAgB,IAAIomC,mBAAAA,CAAoB0I,WAAW,CAAA;AAC1D,iBAAA;AACF,aAAA;;;YAKIzH,GAAAA,EAAAA,OAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAAC8G,MAAM,CAAA;AACpB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAUtqD,KAAc,EAAA;AACtB,gBAAA,IAAI,IAAI,CAACsqD,MAAM,KAAKtqD,KAAO,EAAA;oBACzB,IAAI,CAACsqD,MAAM,GAAGtqD,KAAAA,CAAAA;AACd,oBAAA,IAAI,CAACmc,gBAAgB,IAAIomC,mBAAAA,CAAoB0I,WAAW,CAAA;AAC1D,iBAAA;AACF,aAAA;;;YAKI3jD,GAAAA,EAAAA,OAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACijD,MAAM,CAAA;AACpB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAUvqD,KAAc,EAAA;AACtB,gBAAA,IAAI,IAAI,CAACuqD,MAAM,KAAKvqD,KAAO,EAAA;oBACzB,IAAI,CAACuqD,MAAM,GAAGvqD,KAAAA,CAAAA;AACd,oBAAA,IAAI,CAACmc,gBAAgB,IAAIomC,mBAAAA,CAAoB0I,WAAW,CAAA;AAC1D,iBAAA;AACF,aAAA;;;YAKIl4C,GAAAA,EAAAA,QAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACs3C,OAAO,CAAA;AACrB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAWrqD,KAAoB,EAAA;gBAC7B,IAAMgsD,UAAAA,GAAa,IAAI,CAAC3B,OAAO,CAAA;AAC/B,gBAAA,IAAI2B,eAAehsD,KAAO,EAAA;AACxB,oBAAA,IAAIgsD,UAAY,EAAA;AACd,wBAAA,IAAI,CAACrZ,sBAAsB,CAACqZ,UAAAA,EAAY,CAAC,CAAA,CAAA,CAAA;AACzCA,wBAAAA,UAAAA,CAAW5vC,kBAAkB,CAAC1B,cAAc,CAAC,IAAI,CAACiwC,eAAe,CAAA,CAAA;AACnE,qBAAA;AACA,oBAAA,IAAI,CAACxuC,gBAAgB,IAAA,CAAA,CAAA;AACrB,oBAAA,IAAInc,KAAO,EAAA;wBACT,IAAI,CAAC2yC,sBAAsB,CAAC3yC,KAAO,EAAA,CAAA,CAAA,CAAA;AACnCA,wBAAAA,KAAAA,CAAMoc,kBAAkB,CAAC5B,WAAW,CAAC,IAAI,CAACmwC,eAAe,CAAA,CAAA;wBACzD,IAAI,CAAC5kC,UAAU,CAAC0oB,UAAU,CAACoC,UAAW6a,CAAAA,gBAAgB,EAAE1rD,KAAAA,CAAM7F,OAAO,CAAA,CAAA;qBAChE,MAAA;wBACL,IAAI,CAAC4rB,UAAU,CAAC0oB,UAAU,CAACoC,UArItBA,CAqIiC6a,gBAAgB,EAAE,IAAA,CAAA,CAAA;AAC1D,qBAAA;oBACA,IAAI,CAACrB,OAAO,GAAGrqD,KAAAA,CAAAA;AACjB,iBAAA;AACF,aAAA;;;YAKIypE,GAAAA,EAAAA,aAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACN,YAAY,CAAA;AAC1B,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAgBnpE,KAAa,EAAA;AAC3B,gBAAA,IAAI,IAAI,CAACmpE,YAAY,KAAKnpE,KAAO,EAAA;oBAC/B,IAAI,CAACmpE,YAAY,GAAGnpE,KAAAA,CAAAA;oBACpB,IAAI,CAAC+lB,UAAU,CAAConB,QAAQ,CAAC0D,UArJlBA,CAqJ6BC,oBAAoB,EAAE9wC,KAAAA,CAAAA,CAAAA;AAC5D,iBAAA;AACF,aAAA;;;AAvJW6wC,IAAAA,OAAAA,UAAAA,CAAAA;EAAmBzc,gBA0U/B,EAAA;AAzUC,iBADWyc,UAAAA,CAEJ6a,gBAAmC1nC,GAAAA,cAAAA,CAAezD,SAAS,CAAC,sBAAA,CAAA,CAAA;AACnE,iBAHWswB,UAAAA,CAIJC,oBAAuC9sB,GAAAA,cAAAA,CAAezD,SAAS,CAAC,0BAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDzE;;IAGO,IAAMmpD,YAAN,iBAAA,SAAA,QAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,YAAAA,EAAAA,QAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,YAAAA,CAsQC/3B,MAAc,EAAA;;gBACxB,QAAMA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,CAAAA,IAAAA,IAAAA,mBA9PRg4B,KAAAA,CAAAA,WAAAA,GAAclsE,0BACA,KAAA,CAEdmsE,QAAoB,GAAA,IAAA,mBACN,KAAA,CAEdl0B,uBAGQ0U,MAAgB,GAAA,IAAIt7B,gBAAM,CAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,UAEnC+6C,KAAgB,GAAA,EAAA,EAAA,KAAA,CAEhB/lE,MAAiB,GAAA,CAAA,EAAA,KAAA,CAEjBC,OAAkB,GAAA,CAAA,EAAA,KAAA,CAElB+lE,eAA4B,IAAIpuD,sBAAAA,EAAAA,EAAAA,KAAAA,CAEhCquD,QAAc,IAEdC,EAAAA,KAAAA,CAAAA,SAAAA,GAAoB,UAEpBC,UAAwB5/D,GAAAA,SAAAA,CAAUmmC,IAAI,EAAA,KAAA,CAEtC05B,YAAuB,GAAA,CAAA,EAAA,KAAA,CAEvBC,uBAAgD13D,uBAAwB23D,CAAAA,MAAM,EAE9EC,KAAAA,CAAAA,kBAAAA,GAA4C33D,qBAAsB03D,CAAAA,MAAM,QAExEE,eAA2B,GAAA,KAAA,EAAA,KAAA,CAE3BC,aAA8BjgE,GAAAA,YAAAA,CAAaqE,QAAQ,CAAA;AA+NzD,QAAA,IAAM,MAAEzQ,GAAAA,KAAAA,CAAAA,MAAAA,CAAAA;QACR,KAAK6rE,CAAAA,KAAK,GAAG7rE,MAAAA,CAAOssE,gBAAgB,CAAA;AACpC,QAAA,KAAA,CAAK73B,sBAAsB,CAAC,KAAKo3B,CAAAA,KAAK,EAAE,CAAA,CAAA,CAAA;AACxC,QAAA,KAAA,CAAKvrB,WAAW,CAACtgD,MAAOk4B,CAAAA,eAAe,CAACq0C,mBAAmB,CAAA,CAAA;;AAE3D,QAAA,KAAA,CAAKrgB,MAAM,CAAC5tC,eAAe,GAAG,KAAKouC,CAAAA,eAAe,CAACnpD,IAAI,CAAA,KAAA,CAAA,CAAA;;;AA9Q9CioE,IAAAA,IAAAA,MAAAA,GAAAA,YAAAA,CAAAA,SAAAA,CAAAA;AAiRX;;MAGA,MAAA,CAAmBlrE,UAYlB,GAZD,SAAmBA,UAAAA,GAAAA;QACjB,IAAI,IAAI,CAACurE,KAAK,EAAE;AACd,YAAA,IAAI,CAACp3B,sBAAsB,CAAC,IAAI,CAACo3B,KAAK,EAAE,CAAC,CAAA,CAAA,CAAA;YACzC,IAAI,CAACA,KAAK,GAAG,IAAA,CAAA;AACf,SAAA;AAEA,QAAA,QAAA,CAAA,SAAA,CAAMvrE,UAAD,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;AAEL,QAAA,IAAI,CAACksE,eAAe,EAAA,CAAA;QACpB,IAAI,CAACf,WAAW,GAAG,IAAA,CAAA;QAEnB,IAAI,CAACC,QAAQ,KAAK,IAAI,CAACA,QAAQ,GAAG,IAAG,CAAA,CAAA;AACvC,KAAA,CAAA;AAEA;;MAGA,MAAA,CAAS9rE,QAIR,GAJD,SAASA,SAAStD,MAAoB,EAAEiC,OAAe,EAAEC,UAAkB,EAAA;QACzE,QAAMoB,CAAAA,SAAAA,CAAAA,QAAD,CAAUtD,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAAQiC,OAASC,EAAAA,UAAAA,CAAAA,CAAAA;AAChClC,QAAAA,MAAAA,CAAO4U,IAAI,GAAG,IAAI,CAAC26D,KAAK,CAAA;AACxBvvE,QAAAA,MAAAA,CAAOovE,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAAA;AACjC,KAAA,CAAA;AAEA;;AAEC,MACD9uB,MAAAA,CAAAA,mBAEC,GAFDA,SAAAA,oBAAoBl/C,IAAY,EAAA;AAC9B,QAAA,OAAO,CAAC,IAAI,CAAC85C,UAAU,GAAG95C,IAAG,KAAM,CAAA,CAAA;AACrC,KAAA,CAAA;AAEA;;AAEC,MACDm/C,MAAAA,CAAAA,iBAEC,GAFDA,SAAAA,kBAAkBn/C,IAAY,EAAA;QAC5B,IAAI,CAAC85C,UAAU,IAAI95C,IAAAA,CAAAA;AACrB,KAAA,CAAA;AAEA;;AAEC,MACDo/C,MAAAA,CAAAA,kBAEC,GAFDA,SAAAA,mBAAmBp/C,IAAY,EAAA;QAC7B,IAAI,CAAC85C,UAAU,IAAI,CAAC95C,IAAAA,CAAAA;AACtB,KAAA,CAAA;AAEA;;MAGAwQ,MAAAA,CAAAA,WAKC,GALDA,SAAAA,WAAAA,GAAAA;AACE,QAAA,IAAI,CAAC,IAAI,CAACw9D,QAAQ,EAAE;AAClB,YAAA,IAAI,CAACe,aAAa,EAAA,CAAA;AACpB,SAAA;QACA,OAAO,IAAI,CAACf,QAAQ,CAAA;AACtB,KAAA,CAAA;AAEA;;MAGA,MAAA,CAASrpB,0BAGR,GAHD,SAASA,2BAA2Bz1C,OAAsB,EAAE01C,OAAgB,EAAEC,OAAgB,EAAA;;QAE5F,QAAMF,CAAAA,SAAAA,CAAAA,0BAAD,CAA4Bz1C,IAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EAAS01C,OAAS,EAAA,IAAA,CAAA,CAAA;AACrD,KAAA,CAAA;AAEA;;AAEC,MACD,OAASK,SAER,GAFD,SAASA,SAAUhR,CAAAA,QAA0B,EAAEC,QAA0B,EAAA;QACvE,OAAOH,UAAAA,CAAWC,cAAc,CAACC,QAAUC,EAAAA,QAAAA,CAAAA,CAAAA;AAC7C,KAAA,CAAA;AAEA;;AAEC,MACD,OAASgR,MAER,GAFD,SAASA,MAAOjR,CAAAA,QAA0B,EAAEC,QAA2B,EAAA;QACrEH,UAAWoB,CAAAA,UAAU,CAAClB,QAAUC,EAAAA,QAAAA,CAAAA,CAAAA;AAClC,KAAA,CAAA;AAEA;;MAGA8S,MAAAA,CAAAA,gBAEC,GAFDA,SAAAA,gBAAAA,GAAAA;AACE,QAAA,OAAO,IAAI,CAAC1kD,MAAM,CAAC6sD,eAAe,CAACC,uBAAuB,CAAA;AAC5D,KAAA,CAAA;AAEA,IAAA,MAAA,CAAmBjJ,aAElB,GAFD,SAAmBA,aAAAA,CAAcC,WAAwB,EAAA;AACvDtmC,QAAAA,sBAAAA,CAAY49B,SAAS,CAAC,IAAI,CAACwwB,YAAY,EAAE,IAAI,CAAC93B,OAAO,CAACsH,SAAS,CAACiB,WAAW,EAAEyH,WAAAA,CAAAA,CAAAA;AAC/E,KAAA,CAAA;AAEA,IAAA,MAAA,CAAmB3B,OAyClB,GAzCD,SAAmBA,OAAAA,CAAQv1C,OAAsB,EAAA;QAC/C,IAAI,IAAI,CAAC8/D,gBAAgB,EAAI,EAAA;AAC3B,YAAA,OAAA;AACF,SAAA;QAEA,IAAI,IAAI,CAAC9vB,mBAAmB,CAAqB,CAAA,CAAA,EAAA;AAC/C,YAAA,IAAI,CAAC6vB,aAAa,EAAA,CAAA;AAClB,YAAA,IAAI,CAAC3vB,kBAAkB,CAAA,CAAA,CAAA,CAAA;AACzB,SAAA;QAEA,IAAI,IAAI,CAACF,mBAAmB,CAAiC,CAAA,CAAA,EAAA;AAC3D,YAAA,IAAI,CAAC+vB,gBAAgB,EAAA,CAAA;AACrB,YAAA,IAAI,CAAC7vB,kBAAkB,CAAA,CAAA,CAAA,CAAA;AACzB,SAAA;QAEA,IAAI,IAAI,CAACF,mBAAmB,CAA2B,CAAA,CAAA,EAAA;AACrD,YAAA,IAAI,CAACgwB,eAAe,EAAA,CAAA;AACpB,YAAA,IAAI,CAAC9vB,kBAAkB,CAAA,CAAA,CAAA,CAAA;AACzB,SAAA;QAEA,IAAI,IAAI,CAACF,mBAAmB,CAAmB,EAAA,CAAA,EAAA;AAC7C,YAAA,IAAI,CAACiwB,YAAY,EAAA,CAAA;AACjB,YAAA,IAAI,CAAC/vB,kBAAkB,CAAA,EAAA,CAAA,CAAA;AACzB,SAAA;QAEA,IAAMsF,MAAAA,GAASx1C,QAAQw1C,MAAM,CAAA;QAC7B,IAAMpiD,MAAAA,GAASoiD,OAAOpiD,MAAM,CAAA;QAC5B,IAAM8sE,wBAAAA,GAA2B9sE,OAAO+sE,yBAAyB,CAAA;QACjE,IAAMv6B,QAAAA,GAAW,IAAI,CAAC6N,WAAW,EAAA,CAAA;AACjC,QAAA,IAAM2M,aAAgBhtD,GAAAA,MAAAA,CAAOitD,kBAAkB,CAAC7vD,GAAG,EAAA,CAAA;QACnD4vD,aAAcxvD,CAAAA,GAAG,CAAC,IAAI,CAAC2mD,QAAQ,EAAE,IAAI,CAACpC,gBAAgB,CAAA,CAAA;QACtD,IAAMirB,UAAAA,GAAa,IAAI,CAACvB,WAAW,CAAA;QACnC,IAAK,IAAIhsE,CAAI,GAAA,CAAA,EAAG0B,CAAI6rE,GAAAA,UAAAA,CAAW3tE,MAAM,EAAEI,CAAAA,GAAI0B,CAAG,EAAA,EAAE1B,CAAG,CAAA;AAIjDytD,YAAAA,IAAAA,iBAAAA,CAAAA;YAHA,IAA8B8f,aAAAA,GAAAA,UAAU,CAACvtE,CAAAA,CAAE,EAAnCsyC,QAAsBi7B,GAAAA,aAAAA,CAAtBj7B,QAAU91C,EAAAA,OAAAA,GAAY+wE,aAAZ/wE,CAAAA,OAAAA,CAAAA;YAClB,IAAMixD,gBAAAA,GAAmB4f,yBAAyB1vE,GAAG,EAAA,CAAA;AACrD8vD,YAAAA,gBAAAA,CAAiB1vD,GAAG,CAAC,IAAI,EAAEg1C,QAAUT,EAAAA,QAAAA,CAASC,KAAK,CAACob,SAAS,EAAErb,QAASmB,CAAAA,OAAO,EAAEj3C,OAAS81C,EAAAA,QAAAA,CAAAA,CAAAA;YAC1Fmb,CAAAA,iBAAAA,GAAAA,kBAAiBrlC,UAAjBqlC,KAAAA,iBAAAA,CAAiBrlC,aAAe,IAAIinB,UAAAA,CAAWzb,gBAAgB+C,aAAa,CAAA,CAAA,CAAA;AAC5E82B,YAAAA,gBAAAA,CAAiBrlC,UAAU,CAAC0oB,UAAU,CAACi7B,YAhZhCA,CAgZ6Che,gBAAgB,EAAEvxD,OAAAA,CAAAA,CAAAA;AACtE+wD,YAAAA,aAAAA,CAAcK,mBAAmB,CAACH,gBAAAA,CAAAA,CAAAA;AACpC,SAAA;AACA9K,QAAAA,MAAAA,CAAOkL,eAAe,CAACC,iBAAiB,CAAC3gD,OAASogD,EAAAA,aAAAA,CAAAA,CAAAA;AACpD,KAAA,CAAA;IAEA,MAAQyf,CAAAA,aAIP,GAJD,SAAQA,aAAAA,GAAAA;QACN,IAAMv7D,IAAAA,GAAO,IAAI,CAAC26D,KAAK,CAAA;AACvB,QAAA,IAAI,CAACH,QAAQ,GAAGx6D,IAAAA,CAAKhD,WAAW,CAAC,IAAI,CAACX,QAAQ,EAAE,IAAI,CAACyG,SAAS,CAAA,CAAA;AAC9D,QAAA,IAAI,CAAC03D,QAAQ,CAACv9D,gBAAgB,GAAG9B,UAAUgB,mBAAmB,CAAC6D,IAAK2C,CAAAA,IAAI,EAAE,IAAI,CAACtG,QAAQ,EAAE,IAAI,CAACyG,SAAS,CAAA,CAAA;AACzG,KAAA,CAAA;IAEA,MAAQ44D,CAAAA,eAqDP,GArDD,SAAQA,eAAAA,GAAAA;AACN,QAAA,IAAM,SAAExxB,GAAc,IAAI,CAAC3H,MAAM,CAAzB2H,SAAAA,CAAAA;AACR,QAAA,IAAM1sB,CAAI0sB,GAAAA,SAAAA,CAAUiB,WAAW,CAAC5kC,QAAQ,CAAA;;AAGxC,QAAA,IAAMw1D,KAAKv+C,CAAC,CAAC,EAAE,EAAEw+C,EAAAA,GAAKx+C,CAAC,CAAC,CAAA,CAAE,EAAEy+C,EAAKz+C,GAAAA,CAAC,CAAC,CAAE,CAAA,EACrC0+C,KAAK1+C,CAAC,CAAC,EAAE,EAAE2+C,EAAAA,GAAK3+C,CAAC,CAAC,CAAA,CAAE,EAAE4+C,EAAK5+C,GAAAA,CAAC,CAAC,CAAE,CAAA,EAC/B6+C,MAAM7+C,CAAC,CAAC,GAAG,EAAE8+C,GAAAA,GAAM9+C,CAAC,CAAC,EAAA,CAAG,EAAE++C,GAAM/+C,GAAAA,CAAC,CAAC,EAAG,CAAA,CAAA;QAErC,IAAMg/C,EAAAA,GAAKlC,YAAatxB,CAAAA,UAAU,CAAC18C,GAAG,CAAC4vE,IAAIC,EAAIC,EAAAA,EAAAA,CAAAA,CAAAA;QAC/C,IAAM7tD,KAAAA,GAAQ+rD,YAAa7yB,CAAAA,UAAU,CAACn7C,GAAG,CAACyvE,IAAIC,EAAIC,EAAAA,EAAAA,CAAAA,CAAAA;QAElD,IAAMQ,cAAAA,GAAiBnC,YAxadA,CAwa2BoC,eAAe,CAAA;QACnD,IAAMC,cAAAA,GAAiBF,cAAc,CAAC,CAAE,CAAA,CAAA;QACxC,IAAMG,cAAAA,GAAiBH,cAAc,CAAC,CAAE,CAAA,CAAA;QACxC,IAAMI,cAAAA,GAAiBJ,cAAc,CAAC,CAAE,CAAA,CAAA;QACxC,IAAMK,cAAAA,GAAiBL,cAAc,CAAC,CAAE,CAAA,CAAA;QAExC,IAAMX,UAAAA,GAAa,IAAI,CAACvB,WAAW,CAAA;QACnC,IAAK,IAAIhsE,CAAI,GAAA,CAAA,EAAG0B,CAAI6rE,GAAAA,UAAAA,CAAW3tE,MAAM,EAAEI,CAAAA,GAAI0B,CAAG,EAAA,EAAE1B,CAAG,CAAA;YACjD,IAAsCutE,aAAAA,GAAAA,UAAU,CAACvtE,CAAAA,CAAE,EAA3CsyC,QAA8Bi7B,GAAAA,aAAAA,CAA9Bj7B,QAAUk8B,EAAAA,eAAAA,GAAoBjB,aAApBiB,CAAAA,eAAAA,CAAAA;YAClB,IAAK,IAAIp+D,CAAI,GAAA,CAAA,EAAGC,CAAIm+D,GAAAA,eAAAA,CAAgB5uE,MAAM,EAAEwQ,CAAAA,GAAIC,CAAG,EAAA,EAAED,CAAG,CAAA;gBACtD,IAAMq+D,cAAAA,GAAiBD,eAAe,CAACp+D,CAAE,CAAA,CAAA;gBACzC,IAAQ/T,iBAAmBoyE,cAAnBpyE,CAAAA,cAAAA,CAAAA;AACR,gBAAA,IAAQkN,QAA6BlN,GAAAA,cAAAA,CAA7BkN,CAAaC,EAAGklE,WAAaryE,cAAhBmN,CAAAA,CAAAA,CAAAA;;AAGrB4kE,gBAAAA,cAAAA,CAAerwE,GAAG,CAChB4wE,QAAWnB,GAAAA,EAAAA,GAAKkB,WAAWf,EAAKG,GAAAA,GAAAA,EAChCa,QAAWlB,GAAAA,EAAAA,GAAKiB,WAAWd,EAAKG,GAAAA,GAAAA,EAChCY,QAAWjB,GAAAA,EAAAA,GAAKgB,WAAWb,EAAKG,GAAAA,GAAAA,CAAAA,CAAAA;;AAIlCj1C,gBAAAA,kBAAAA,CAAQwhB,KAAK,CAACv6B,KAAAA,EAAO3jB,cAAemjB,CAAAA,CAAC,GAAGmvD,QAAUN,EAAAA,cAAAA,CAAAA,CAAAA;;gBAGlDt1C,kBAAQjK,CAAAA,GAAG,CAACs/C,cAAAA,EAAgBC,cAAgBA,EAAAA,cAAAA,CAAAA,CAAAA;;AAG5Ct1C,gBAAAA,kBAAAA,CAAQwhB,KAAK,CAAC0zB,EAAAA,EAAI5xE,cAAegP,CAAAA,CAAC,GAAGqjE,QAAUJ,EAAAA,cAAAA,CAAAA,CAAAA;;gBAG/Cv1C,kBAAQjK,CAAAA,GAAG,CAACs/C,cAAAA,EAAgBE,cAAgBC,EAAAA,cAAAA,CAAAA,CAAAA;;gBAE5Cx1C,kBAAQjK,CAAAA,GAAG,CAACu/C,cAAAA,EAAgBC,cAAgBA,EAAAA,cAAAA,CAAAA,CAAAA;AAE5C,gBAAA,IAAMtoB,QAAW1T,GAAAA,QAAAA,CAASC,KAAK,CAACyT,QAAQ,CAAA;AACxC,gBAAA,IAAK,IAAIpnD,CAAI,GAAA,CAAA,EAAGqnD,IAAI3T,QAASoB,CAAAA,UAAU,CAACjW,KAAK,GAAGgxC,cAAeG,CAAAA,YAAY,GAAG,EAAIhwE,EAAAA,CAAAA,GAAI,GAAG,EAAEA,CAAAA,EAAGqnD,KAAK,CAAG,CAAA;AACpGioB,oBAAAA,cAAc,CAACtvE,CAAAA,CAAE,CAACiwE,WAAW,CAAC7oB,QAAUC,EAAAA,CAAAA,CAAAA,CAAAA;AAC1C,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA,CAAA;IAEA,MAAQmnB,CAAAA,YAeP,GAfD,SAAQA,YAAAA,GAAAA;AACN,QAAA,IAAuB,YAAA,GAAA,IAAI,CAAC3gB,MAAM,EAA1B17B,CAAe,GAAA,YAAA,CAAfA,CAAGC,EAAAA,CAAAA,GAAY,aAAZA,CAAGQ,EAAAA,CAAAA,GAAS,YAATA,CAAAA,CAAAA,EAAGlX,IAAM,YAANA,CAAAA,CAAAA,CAAAA;QACjB,IAAMizD,UAAAA,GAAa,IAAI,CAACvB,WAAW,CAAA;QACnC,IAAK,IAAIhsE,CAAI,GAAA,CAAA,EAAG0B,CAAI6rE,GAAAA,UAAAA,CAAW3tE,MAAM,EAAEI,CAAAA,GAAI0B,CAAG,EAAA,EAAE1B,CAAG,CAAA;AACjD,YAAA,IAAMsyC,QAAWi7B,GAAAA,UAAU,CAACvtE,CAAAA,CAAE,CAACsyC,QAAQ,CAAA;YACvC,IAAMoB,UAAAA,GAAapB,SAASoB,UAAU,CAAA;YACtC,IAAM+U,WAAAA,GAAc/U,UAAW7tC,CAAAA,IAAI,GAAG,CAAA,CAAA;AACtC,YAAA,IAAMmgD,QAAW1T,GAAAA,QAAAA,CAASC,KAAK,CAACyT,QAAQ,CAAA;AACxC,YAAA,IAAK,IAAI51C,CAAAA,GAAI,CAAG61C,EAAAA,CAAAA,GAAIvS,UAAWjW,CAAAA,KAAK,GAAG,CAAA,EAAGrtB,CAAIq4C,GAAAA,WAAAA,EAAa,EAAEr4C,CAAAA,EAAG61C,KAAK,CAAG,CAAA;gBACtED,QAAQ,CAACC,EAAE,GAAGl1B,CAAAA,CAAAA;gBACdi1B,QAAQ,CAACC,CAAI,GAAA,CAAA,CAAE,GAAGj1B,CAAAA,CAAAA;gBAClBg1B,QAAQ,CAACC,CAAI,GAAA,CAAA,CAAE,GAAGz0B,CAAAA,CAAAA;gBAClBw0B,QAAQ,CAACC,CAAI,GAAA,CAAA,CAAE,GAAG3rC,CAAAA,CAAAA;AACpB,aAAA;AACF,SAAA;AACF,KAAA,CAAA;IAEA,MAAQ4yD,CAAAA,gBA2IP,GA3ID,SAAQA,gBAAAA,GAAAA;QACN,IAAqB,kBAAA,GAAA,IAAI,CAACf,YAAY,EAA9BjsD,GAAa,GAAA,kBAAA,CAAbA,GAAKha,EAAAA,GAAAA,GAAQ,kBAARA,CAAAA,GAAAA,CAAAA;QACb,IAAMsoE,eAAAA,GAAkBzC,YAtefA,CAse4B+C,gBAAgB,CAAA;QACrD,IAAMC,QAAAA,GAAW,IAAI,CAAC9C,QAAQ,CAAA;AAC9B,QAAA,IAAM+C,WAAc,GAAA,IAAI,CAACC,cAAc,GACnCriE,SAAAA,CAAU0B,mBAAmB,CAAC,IAAI,CAAA,GAClC1B,SAAUqE,CAAAA,sBAAsB,CAAC,IAAI,CAAA,CAAA;AACzC,QAAA,IAAQvK,MAAwDsoE,GAAAA,WAAAA,CAAxDtoE,MAAQqI,EAAAA,KAAAA,GAAgDigE,WAAhDjgE,CAAAA,KAAAA,EAAOC,UAAyCggE,GAAAA,WAAAA,CAAzChgE,UAAYK,EAAAA,UAAAA,GAA6B2/D,WAA7B3/D,CAAAA,UAAAA,EAAYJ,eAAiB+/D,WAAjB//D,CAAAA,YAAAA,CAAAA;AAC/C,QAAA,IAAMigE,kBAAqB,GAAA,IAAI,CAAC3uE,MAAM,CAAC4uE,mBAAmB,CAAA;QAC1D,IAAMC,QAAAA,GAAWrgE,MAAMnP,MAAM,CAAA;AAC7B,QAAA,IAAIyvE,kBAAqB,GAAA,CAAA,CAAA;AAEzB,QAAA,IAAID,WAAW,CAAG,EAAA;YAChB,IAAQhgE,iBAAmBD,MAAnBC,CAAAA,cAAAA,CAAAA;YACR,IAAQkgE,mBAAwB,GAAA,IAAI,CAA5BA,mBAAAA,CAAAA;AACR,YAAA,IAAM/vD,0BAA0B,GAAMnQ,GAAAA,cAAAA,CAAAA;AACtC,YAAA,IAAMmgE,aAAgB,GAAA,IAAI,CAAC9oE,KAAK,GAAG2I,cAAAA,CAAAA;AACnC,YAAA,IAAMogE,oBAAoBD,aAAgB,GAAA,GAAA,CAAA;AAC1C,YAAA,IAAME,cAAiB,GAAA,IAAI,CAAC/oE,MAAM,GAAG0I,cAAAA,CAAAA;AACrC,YAAA,IAAMsgE,iBAAiBrgE,UAAa,GAAA,GAAA,CAAA;AAEpC,YAAA,IAAIsgE,MAAS,GAAA,CAAA,CAAA;AACb,YAAA,IAAMC,UAAUvgE,UAAa,GAAA,GAAA,GAAMJ,YAAY,CAAC,CAAA,CAAE,CAAC2B,MAAM,CAAA;YACzD,IAAMi/D,UAAAA,GAAaxgE,aAAa,GAAMJ,GAAAA,YAAY,CAACmgE,QAAW,GAAA,CAAA,CAAE,CAACv+D,OAAO,GAAG,CAAA,CAAA;YAC3E,OAAQ,IAAI,CAACi/D,iBAAiB;AAC5B,gBAAA,KAAK/6D,sBAAsBqqD,GAAG;oBAC5BuQ,MAASF,GAAAA,cAAAA,GAAiB,MAAMC,cAAiBE,GAAAA,OAAAA,CAAAA;AACjD,oBAAA,MAAA;AACF,gBAAA,KAAK76D,sBAAsB03D,MAAM;AAC/BkD,oBAAAA,MAAAA,GAASjpE,SAAS,GAAMgpE,GAAAA,cAAAA,GAAiB,CAACG,UAAAA,GAAaD,OAAM,IAAK,GAAA,CAAA;AAClE,oBAAA,MAAA;AACF,gBAAA,KAAK76D,sBAAsBoqD,MAAM;oBAC/BwQ,MAASjpE,GAAAA,MAAAA,GAAS+oE,cAAiB,GAAA,GAAA,GAAMC,cAAiBG,GAAAA,UAAAA,CAAAA;AAC1D,oBAAA,MAAA;AACJ,aAAA;AAEA,YAAA,IAAIE,YAAY,CAAC,CAAA,CAAA;YACjB,IAAIC,IAAAA,GAAOC,OAAOC,gBAAgB,CAAA;YAClC,IAAIC,IAAAA,GAAOF,OAAOC,gBAAgB,CAAA;YAClC,IAAIE,IAAAA,GAAOH,OAAOI,gBAAgB,CAAA;YAClC,IAAIC,IAAAA,GAAOL,OAAOI,gBAAgB,CAAA;AAClC,YAAA,IAAK,IAAIrwE,CAAI,GAAA,CAAA,EAAGA,CAAIovE,GAAAA,QAAAA,EAAU,EAAEpvE,CAAG,CAAA;gBACjC,IAAMgQ,SAAAA,GAAYhB,UAAU,CAAChP,CAAE,CAAA,CAAA;AAC/B,gBAAA,IAAIgQ,YAAY,CAAG,EAAA;oBACjB,IAAMD,IAAAA,GAAOhB,KAAK,CAAC/O,CAAE,CAAA,CAAA;AACrB,oBAAA,IAAIuwE,MAAS,GAAA,CAAA,CAAA;AACb,oBAAA,IAAIC,WAAW,CAAC,CAAA,CAAA;AAChB,oBAAA,IAAIT,YAAY,CAAG,EAAA;wBACjBA,SAAY/vE,GAAAA,CAAAA,CAAAA;AACd,qBAAA;oBACA,OAAQsvE,mBAAAA;AACN,wBAAA,KAAKx6D,wBAAwBmqD,IAAI;AAC/BsR,4BAAAA,MAAAA,GAAS,CAACf,iBAAAA,CAAAA;AACV,4BAAA,MAAA;AACF,wBAAA,KAAK16D,wBAAwB23D,MAAM;AACjC8D,4BAAAA,MAAAA,GAAS,CAACvgE,SAAY,GAAA,GAAA,CAAA;AACtB,4BAAA,MAAA;AACF,wBAAA,KAAK8E,wBAAwBoqD,KAAK;AAChCqR,4BAAAA,MAAAA,GAASf,iBAAoBx/D,GAAAA,SAAAA,CAAAA;AAC7B,4BAAA,MAAA;AACJ,qBAAA;oBACA,IAAK,IAAII,CAAI,GAAA,CAAA,EAAG1O,CAAIqO,GAAAA,IAAAA,CAAKnQ,MAAM,EAAEwQ,CAAAA,GAAI1O,CAAG,EAAA,EAAE0O,CAAG,CAAA;wBAC3C,IAAM7D,IAAAA,GAAOwD,IAAI,CAACK,CAAE,CAAA,CAAA;wBACpB,IAAMhF,QAAAA,GAAW2jE,QAASz+D,CAAAA,YAAY,CAAC/D,IAAAA,CAAAA,CAAAA;wBACvC,IAAInB,QAAAA,CAASE,CAAC,GAAG,CAAG,EAAA;4BAClBklE,QAAW,GAAA,CAAA,KAAMA,QAAAA,GAAWpgE,CAAAA,CAAAA,CAAAA;AAC5B,4BAAA,IAAMq+D,iBAAkBD,eAAe,CAACa,kBAAqB,EAAA,CAAA,GAAGH,mBAAmBvxE,GAAG,EAAA,CAAA;4BACtF,IAAQtB,iBAAmBoyE,cAAnBpyE,CAAAA,cAAAA,CAAAA;AACRoyE,4BAAAA,cAAAA,CAAejyE,OAAO,GAAGuyE,QAAAA,CAASj7D,kBAAkB,CAAC1I,SAASpJ,KAAK,CAAA,CAAA;4BACnEysE,cAAehyE,CAAAA,GAAG,GAAG2O,QAAAA,CAAS3O,GAAG,CAAA;AACjC,4BAAA,IAAQ4O,IAAuBD,QAAvBC,CAAAA,CAAAA,EAAGuF,SAAoBxF,QAApBwF,CAAAA,MAAAA,EAAQC,UAAYzF,QAAZyF,CAAAA,OAAAA,CAAAA;AACnB,4BAAA,IAAM6G,OAAO64D,MAAShxD,GAAAA,uBAAAA,CAAAA;AACtB,4BAAA,IAAMS,KAAQ,GAACuwD,CAAAA,MAAAA,GAASllE,CAAAA,IAAKkU,uBAAAA,CAAAA;AAC7B,4BAAA,IAAM1M,GAAM,GAAC88D,CAAAA,MAAAA,GAAS/+D,MAAK,IAAK2O,uBAAAA,CAAAA;AAChC,4BAAA,IAAMzM,MAAS,GAAC68D,CAAAA,MAAAA,GAAS9+D,OAAM,IAAK0O,uBAAAA,CAAAA;AACpCljB,4BAAAA,cAAAA,CAAe0B,GAAG,CAAC2Z,IAAM7E,EAAAA,GAAAA,EAAKmN,KAAOlN,EAAAA,MAAAA,CAAAA,CAAAA;AACrC9S,4BAAAA,CAAAA,KAAM+vE,cAAcO,IAAAA,GAAOxqE,KAAKI,GAAG,CAACoqE,MAAMz9D,GAAG,CAAA,CAAA,CAAA;4BAC7Cs9D,IAAOrqE,GAAAA,IAAAA,CAAKoa,GAAG,CAACiwD,IAAMr9D,EAAAA,MAAAA,CAAAA,CAAAA;AACtB1C,4BAAAA,CAAAA,KAAMogE,aAAaR,IAAAA,GAAOlqE,KAAKoa,GAAG,CAAC8vD,MAAMt4D,IAAI,CAAA,CAAA,CAAA;4BAC7C04D,IAAOtqE,GAAAA,IAAAA,CAAKI,GAAG,CAACkqE,IAAMpwD,EAAAA,KAAAA,CAAAA,CAAAA;AACxB,yBAAA;AACAuwD,wBAAAA,MAAAA,IAAUnlE,QAAS0F,CAAAA,QAAQ,GAAG1F,QAAAA,CAASgI,OAAO,CAAA;AAChD,qBAAA;AACF,iBAAA;gBACAu8D,MAAUtgE,IAAAA,UAAAA,CAAAA;AACZ,aAAA;AACA,YAAA,IAAI0gE,YAAY,CAAG,EAAA;gBACjB7vD,GAAIniB,CAAAA,GAAG,CAAC,CAAA,EAAG,CAAG,EAAA,CAAA,CAAA,CAAA;gBACdmI,GAAInI,CAAAA,GAAG,CAAC,CAAA,EAAG,CAAG,EAAA,CAAA,CAAA,CAAA;aACT,MAAA;gBACLmiB,GAAIniB,CAAAA,GAAG,CAACiyE,IAAAA,EAAMG,IAAM,EAAA,CAAA,CAAA,CAAA;gBACpBjqE,GAAInI,CAAAA,GAAG,CAACqyE,IAAAA,EAAME,IAAM,EAAA,CAAA,CAAA,CAAA;AACtB,aAAA;SACK,MAAA;YACLpwD,GAAIniB,CAAAA,GAAG,CAAC,CAAA,EAAG,CAAG,EAAA,CAAA,CAAA,CAAA;YACdmI,GAAInI,CAAAA,GAAG,CAAC,CAAA,EAAG,CAAG,EAAA,CAAA,CAAA,CAAA;AAChB,SAAA;AAEAgxE,QAAAA,QAAAA,CAASh7D,aAAa,EAAK,GAAA,CAAA,IACzBy6D,gBAAgBrmB,IAAI,CAAC,SAAC7tC,CAAGkX,EAAAA,CAAAA,EAAAA;YACvB,OAAOlX,CAAAA,CAAE9d,OAAO,CAACgE,UAAU,GAAGgxB,CAAEh1B,CAAAA,OAAO,CAACgE,UAAU,CAAA;AACpD,SAAA,CAAA,CAAA;AAEF,QAAA,IAAI,CAACusE,eAAe,EAAA,CAAA;AAEpB,QAAA,IAAIsC,uBAAuB,CAAG,EAAA;AAC5B,YAAA,OAAA;AACF,SAAA;QAEA,IAAM9B,UAAAA,GAAa,IAAI,CAACvB,WAAW,CAAA;AACnC,QAAA,IAAIyE,eAAe,IAAIC,SAAAA,EAAAA,CAAAA;AACvBnD,QAAAA,UAAAA,CAAWzrE,IAAI,CAAC2uE,YAAAA,CAAAA,CAAAA;AAEhB,QAAA,IAAME,mBAAsB,GAAA,IAAI,CAAC1rB,gBAAgB,GAAGqE,cAAc,CAAA;QAClE,IAAMsnB,iBAAAA,GAAoBpC,eAAe,CAAC,CAAE,CAAA,CAAA;QAC5C,IAAIqC,UAAAA,GAAaD,kBAAkBp0E,OAAO,CAAA;AAC1Ci0E,QAAAA,YAAAA,CAAaj0E,OAAO,GAAGq0E,UAAAA,CAAAA;QACvB,IAAIC,YAAAA,GAAeL,aAAajC,eAAe,CAAA;AAC/CsC,QAAAA,YAAAA,CAAahvE,IAAI,CAAC8uE,iBAAAA,CAAAA,CAAAA;AAElB,QAAA,IAAK,IAAI5wE,EAAI,GAAA,CAAA,EAAGA,EAAIqvE,GAAAA,kBAAAA,EAAoB,EAAErvE,EAAG,CAAA;YAC3C,IAAMyuE,eAAAA,GAAiBD,eAAe,CAACxuE,EAAE,CAAA,CAAA;YACzC,IAAMxD,OAAAA,GAAUiyE,gBAAejyE,OAAO,CAAA;AACtC,YAAA,IAAIq0E,eAAer0E,OAAWs0E,IAAAA,YAAAA,CAAalxE,MAAM,GAAG,CAAA,GAAI,IAAI+wE,mBAAqB,EAAA;AAC/E,gBAAA,IAAI,CAACI,WAAW,CAACN,YAAAA,EAAcK,aAAalxE,MAAM,CAAA,CAAA;AAElD6wE,gBAAAA,YAAAA,GAAe,IAAIC,SAAAA,EAAAA,CAAAA;AACnBnD,gBAAAA,UAAAA,CAAWzrE,IAAI,CAAC2uE,YAAAA,CAAAA,CAAAA;gBAChBI,UAAar0E,GAAAA,OAAAA,CAAAA;AACbi0E,gBAAAA,YAAAA,CAAaj0E,OAAO,GAAGA,OAAAA,CAAAA;AACvBs0E,gBAAAA,YAAAA,GAAeL,aAAajC,eAAe,CAAA;AAC7C,aAAA;AACAsC,YAAAA,YAAAA,CAAahvE,IAAI,CAAC2sE,eAAAA,CAAAA,CAAAA;AACpB,SAAA;QACA,IAAMuC,UAAAA,GAAaF,aAAalxE,MAAM,CAAA;AACtC,QAAA,IAAIoxE,aAAa,CAAG,EAAA;YAClB,IAAI,CAACD,WAAW,CAACN,YAAcO,EAAAA,UAAAA,CAAAA,CAAAA;AACjC,SAAA;AACAxC,QAAAA,eAAAA,CAAgB5uE,MAAM,GAAG,CAAA,CAAA;AAC3B,KAAA,CAAA;AAEA;;AAEC,MACD,MAAmBygD,CAAAA,mBAGlB,GAHD,SAAmBA,oBAAoBl9B,GAAyB,EAAA;AAC9D,QAAA,QAAA,CAAA,SAAA,CAAMk9B,mBAAD,CAAqBl9B,IAAAA,CAAAA,IAAAA,EAAAA,GAAAA,CAAAA,CAAAA;QAC1B,IAAI,CAACi6B,iBAAiB,CAAC6zB,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA;AACzB,KAAA,CAAA;IAEA,MAAQhE,CAAAA,gBAOP,GAPD,SAAQA,gBAAAA,GAAAA;AACN,QAAA,OACE,IAAI,CAACf,KAAK,KAAK,EACf,IAAA,IAAI,CAACG,SAAS,KAAK,CAAA,IAClB,IAAI,CAAC4C,cAAc,IAAI,IAAI,CAACxoE,KAAK,IAAI,CACrC,IAAA,IAAI,CAACsK,YAAY,KAAKpE,YAAAA,CAAaukE,QAAQ,IAAI,IAAI,CAACxqE,MAAM,IAAI,CAAA,CAAA;AAEnE,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQqqE,WA6BP,GA7BD,SAAQA,WAAYI,CAAAA,SAAoB,EAAE5rD,KAAa,EAAA;AACrD,QAAA,IAAuB,WAAA,GAAA,IAAI,CAAC8gC,KAAK,EAAzBt1B,CAAe,GAAA,WAAA,CAAfA,CAAGC,EAAAA,CAAAA,GAAY,YAAZA,CAAGQ,EAAAA,CAAAA,GAAS,WAATA,CAAAA,CAAAA,EAAGlX,IAAM,WAANA,CAAAA,CAAAA,CAAAA;QACjB,IAAM82D,WAAAA,GAAch1E,eAAeM,SAAS,CAAA;QAC5C,IAAM20E,iBAAAA,GAAoBD,YAAYxxE,MAAM,CAAA;QAC5C,IAAM0yC,QAAAA,GAAY6+B,SAAU7+B,CAAAA,QAAQ,GAAG,IAAI,CAAC2S,gBAAgB,EAAA,CAAGI,gBAAgB,CAAC9/B,KAAQ,GAAA,CAAA,CAAA,CAAA;AACxF,QAAA,IAAMygC,QAAW1T,GAAAA,QAAAA,CAASC,KAAK,CAACyT,QAAQ,CAAA;AACxC,QAAA,IAAM3S,OAAWf,GAAAA,QAAAA,CAASe,OAAO,GAAG,EAAE,CAAA;QACtC,IAAMm7B,eAAAA,GAAkB2C,UAAU3C,eAAe,CAAA;AACjD,QAAA,IAAK,IAAIxuE,CAAI,GAAA,CAAA,EAAGsxE,KAAK,CAAGC,EAAAA,EAAAA,GAAK,GAAGC,EAAKl/B,GAAAA,QAAAA,CAASoB,UAAU,CAACjW,KAAK,GAAG,CAAGz9B,EAAAA,CAAAA,GAAIulB,OAAO,EAAEvlB,CAAAA,EAAGuxE,MAAM,CAAG,CAAA;YAC3F,IAAM9C,cAAAA,GAAiBD,eAAe,CAACxuE,CAAE,CAAA,CAAA;AACzCyuE,YAAAA,cAAAA,CAAeG,YAAY,GAAG5uE,CAAAA,CAAAA;;AAG9B,YAAA,IAAK,IAAIoQ,CAAI,GAAA,CAAA,EAAGA,CAAIihE,GAAAA,iBAAAA,EAAmB,EAAEjhE,CAAG,CAAA;AAC1CijC,gBAAAA,OAAO,CAACi+B,EAAK,EAAA,CAAA,GAAGF,WAAW,CAAChhE,EAAE,GAAGmhE,EAAAA,CAAAA;AACnC,aAAA;;YAGA,IAAK,IAAInhE,KAAI,CAAGA,EAAAA,EAAAA,GAAI,GAAG,EAAEA,EAAAA,EAAGohE,MAAM,CAAG,CAAA;AACnC,gBAAA,IAAMrxD,EAAKsuD,GAAAA,cAAAA,CAAehyE,GAAG,CAAC2T,EAAE,CAAA,CAAA;gBAChC+P,EAAG0uD,CAAAA,WAAW,CAAC7oB,QAAUwrB,EAAAA,EAAAA,CAAAA,CAAAA;gBACzBxrB,QAAQ,CAACwrB,EAAK,GAAA,CAAA,CAAE,GAAGzgD,CAAAA,CAAAA;gBACnBi1B,QAAQ,CAACwrB,EAAK,GAAA,CAAA,CAAE,GAAGxgD,CAAAA,CAAAA;gBACnBg1B,QAAQ,CAACwrB,EAAK,GAAA,CAAA,CAAE,GAAGhgD,CAAAA,CAAAA;gBACnBw0B,QAAQ,CAACwrB,EAAK,GAAA,CAAA,CAAE,GAAGl3D,CAAAA,CAAAA;AACrB,aAAA;AACF,SAAA;QAEA,OAAOg4B,QAAAA,CAAAA;AACT,KAAA,CAAA;IAEA,MAAQy6B,CAAAA,eAgBP,GAhBD,SAAQA,eAAAA,GAAAA;QACN,IAAMQ,UAAAA,GAAa,IAAI,CAACvB,WAAW,CAAA;AACnC,QAAA,IAAMkD,kBAAqB,GAAA,IAAI,CAAC3uE,MAAM,CAAC4uE,mBAAmB,CAAA;QAC1D,IAAMnqB,OAAAA,GAAU,IAAI,CAACC,gBAAgB,EAAA,CAAA;QACrC,IAAK,IAAIjlD,CAAI,GAAA,CAAA,EAAG0B,CAAI6rE,GAAAA,UAAAA,CAAW3tE,MAAM,EAAEI,CAAAA,GAAI0B,CAAG,EAAA,EAAE1B,CAAG,CAAA;YACjD,IAAMmxE,SAAAA,GAAY5D,UAAU,CAACvtE,CAAE,CAAA,CAAA;YAC/B,IAAQwuE,kBAAoB2C,SAApB3C,CAAAA,eAAAA,CAAAA;YACR,IAAK,IAAIp+D,CAAI,GAAA,CAAA,EAAGC,CAAIm+D,GAAAA,eAAAA,CAAgB5uE,MAAM,EAAEwQ,CAAAA,GAAIC,CAAG,EAAA,EAAED,CAAG,CAAA;AACtD8+D,gBAAAA,kBAAAA,CAAmBuC,MAAM,CAACjD,eAAe,CAACp+D,CAAE,CAAA,CAAA,CAAA;AAC9C,aAAA;AACAo+D,YAAAA,eAAAA,CAAgB5uE,MAAM,GAAG,CAAA,CAAA;YACzBolD,OAAQI,CAAAA,YAAY,CAAC+rB,SAAAA,CAAU7+B,QAAQ,CAAA,CAAA;AACvC6+B,YAAAA,SAAAA,CAAU7+B,QAAQ,GAAG,IAAA,CAAA;AACrB6+B,YAAAA,SAAAA,CAAU30E,OAAO,GAAG,IAAA,CAAA;AACtB,SAAA;AACA+wE,QAAAA,UAAAA,CAAW3tE,MAAM,GAAG,CAAA,CAAA;AACtB,KAAA,CAAA;IAEA,MACQqtD,CAAAA,eAEP,GAHD,SACQA,eAAAA,GAAAA;AACN,QAAA,IAAI,CAAC7P,iBAAiB,CAAA,EAAA,CAAA,CAAA;AACxB,KAAA,CAAA;AAtrBW2uB,IAAAA,aAAAA,CAAAA,YAAAA,EAAAA;;YA+CP1lB,GAAAA,EAAAA,OAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACoG,MAAM,CAAA;AACpB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAUpqD,KAAY,EAAA;AACpB,gBAAA,IAAI,IAAI,CAACoqD,MAAM,KAAKpqD,KAAO,EAAA;AACzB,oBAAA,IAAI,CAACoqD,MAAM,CAACvsD,QAAQ,CAACmC,KAAAA,CAAAA,CAAAA;AACvB,iBAAA;AACF,aAAA;;;YAKIwM,GAAAA,EAAAA,MAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACq9D,KAAK,CAAA;AACnB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAS7pE,KAAa,EAAA;AACpBA,gBAAAA,KAAAA,GAAQA,KAAS,IAAA,EAAA,CAAA;AACjB,gBAAA,IAAI,IAAI,CAAC6pE,KAAK,KAAK7pE,KAAO,EAAA;oBACxB,IAAI,CAAC6pE,KAAK,GAAG7pE,KAAAA,CAAAA;AACb,oBAAA,IAAI,CAAC+6C,iBAAiB,CAAA,EAAA,CAAA,CAAA;AACxB,iBAAA;AACF,aAAA;;;YAKI32C,GAAAA,EAAAA,OAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACN,MAAM,CAAA;AACpB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAU9D,KAAa,EAAA;AACrB,gBAAA,IAAI,IAAI,CAAC8D,MAAM,KAAK9D,KAAO,EAAA;oBACzB,IAAI,CAAC8D,MAAM,GAAG9D,KAAAA,CAAAA;AACd,oBAAA,IAAI,CAAC+6C,iBAAiB,CAAA,EAAA,CAAA,CAAA;AACxB,iBAAA;AACF,aAAA;;;YAKI12C,GAAAA,EAAAA,QAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACN,OAAO,CAAA;AACrB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAW/D,KAAa,EAAA;AACtB,gBAAA,IAAI,IAAI,CAAC+D,OAAO,KAAK/D,KAAO,EAAA;oBAC1B,IAAI,CAAC+D,OAAO,GAAG/D,KAAAA,CAAAA;AACf,oBAAA,IAAI,CAAC+6C,iBAAiB,CAAA,EAAA,CAAA,CAAA;AACxB,iBAAA;AACF,aAAA;;;YAKI3rC,GAAAA,EAAAA,MAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAAC26D,KAAK,CAAA;AACnB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAS/pE,KAAW,EAAA;gBAClB,IAAMqvE,QAAAA,GAAW,IAAI,CAACtF,KAAK,CAAA;AAC3B,gBAAA,IAAIsF,aAAarvE,KAAO,EAAA;AACtBqvE,oBAAAA,QAAAA,IAAY,IAAI,CAAC18B,sBAAsB,CAAC08B,UAAU,CAAC,CAAA,CAAA,CAAA;AACnDrvE,oBAAAA,KAAAA,IAAS,IAAI,CAAC2yC,sBAAsB,CAAC3yC,KAAO,EAAA,CAAA,CAAA,CAAA;oBAC5C,IAAI,CAAC+pE,KAAK,GAAG/pE,KAAAA,CAAAA;AACb,oBAAA,IAAI,CAAC+6C,iBAAiB,CAAA,EAAA,CAAA,CAAA;AACxB,iBAAA;AACF,aAAA;;;YAKItvC,GAAAA,EAAAA,UAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACu+D,SAAS,CAAA;AACvB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAahqE,KAAa,EAAA;AACxB,gBAAA,IAAI,IAAI,CAACgqE,SAAS,KAAKhqE,KAAO,EAAA;oBAC5B,IAAI,CAACgqE,SAAS,GAAGhqE,KAAAA,CAAAA;AACjB,oBAAA,IAAI,CAAC+6C,iBAAiB,CAAA,EAAA,CAAA,CAAA;AACxB,iBAAA;AACF,aAAA;;;YAKI7oC,GAAAA,EAAAA,WAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAAC+3D,UAAU,CAAA;AACxB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAcjqE,KAAgB,EAAA;AAC5B,gBAAA,IAAI,IAAI,CAACkS,SAAS,KAAKlS,KAAO,EAAA;oBAC5B,IAAI,CAACiqE,UAAU,GAAGjqE,KAAAA,CAAAA;AAClB,oBAAA,IAAI,CAAC+6C,iBAAiB,CAAA,EAAA,CAAA,CAAA;AACxB,iBAAA;AACF,aAAA;;;YAKI9tC,GAAAA,EAAAA,aAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACi9D,YAAY,CAAA;AAC1B,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAgBlqE,KAAa,EAAA;AAC3B,gBAAA,IAAI,IAAI,CAACkqE,YAAY,KAAKlqE,KAAO,EAAA;oBAC/B,IAAI,CAACkqE,YAAY,GAAGlqE,KAAAA,CAAAA;AACpB,oBAAA,IAAI,CAAC+6C,iBAAiB,CAAA,EAAA,CAAA,CAAA;AACxB,iBAAA;AACF,aAAA;;;YAKIkyB,GAAAA,EAAAA,qBAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAAC9C,oBAAoB,CAAA;AAClC,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAwBnqE,KAA8B,EAAA;AACpD,gBAAA,IAAI,IAAI,CAACmqE,oBAAoB,KAAKnqE,KAAO,EAAA;oBACvC,IAAI,CAACmqE,oBAAoB,GAAGnqE,KAAAA,CAAAA;AAC5B,oBAAA,IAAI,CAAC+6C,iBAAiB,CAAA,EAAA,CAAA,CAAA;AACxB,iBAAA;AACF,aAAA;;;YAKI0yB,GAAAA,EAAAA,mBAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACpD,kBAAkB,CAAA;AAChC,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAsBrqE,KAA4B,EAAA;AAChD,gBAAA,IAAI,IAAI,CAACqqE,kBAAkB,KAAKrqE,KAAO,EAAA;oBACrC,IAAI,CAACqqE,kBAAkB,GAAGrqE,KAAAA,CAAAA;AAC1B,oBAAA,IAAI,CAAC+6C,iBAAiB,CAAA,EAAA,CAAA,CAAA;AACxB,iBAAA;AACF,aAAA;;;YAKI6xB,GAAAA,EAAAA,gBAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACtC,eAAe,CAAA;AAC7B,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAmBtqE,KAAc,EAAA;AAC/B,gBAAA,IAAI,IAAI,CAACsqE,eAAe,KAAKtqE,KAAO,EAAA;oBAClC,IAAI,CAACsqE,eAAe,GAAGtqE,KAAAA,CAAAA;AACvB,oBAAA,IAAI,CAAC+6C,iBAAiB,CAAA,EAAA,CAAA,CAAA;AACxB,iBAAA;AACF,aAAA;;;YAKIrsC,GAAAA,EAAAA,cAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAAC67D,aAAa,CAAA;AAC3B,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAiBvqE,KAAmB,EAAA;AAClC,gBAAA,IAAI,IAAI,CAACuqE,aAAa,KAAKvqE,KAAO,EAAA;oBAChC,IAAI,CAACuqE,aAAa,GAAGvqE,KAAAA,CAAAA;AACrB,oBAAA,IAAI,CAAC+6C,iBAAiB,CAAA,EAAA,CAAA,CAAA;AACxB,iBAAA;AACF,aAAA;;;YAKIxK,GAAAA,EAAAA,iBAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACuM,gBAAgB,CAAA;AAC9B,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAoB98C,KAA4B,EAAA;AAC9C,gBAAA,IAAI,IAAI,CAAC88C,gBAAgB,KAAK98C,KAAO,EAAA;oBACnC,IAAI,CAAC88C,gBAAgB,GAAG98C,KAAAA,CAAAA;AAC1B,iBAAA;AACF,aAAA;;;YAKIywC,GAAAA,EAAAA,WAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACsM,UAAU,CAAA;AACxB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAc/8C,KAAa,EAAA;gBACzB,IAAI,CAAC+8C,UAAU,GAAG/8C,KAAAA,CAAAA;AACpB,aAAA;;;YAKa6/C,GAAAA,EAAAA,QAAAA;;;MAAb,SAAA,GAAA,GAAA;gBACE,IAAI,IAAI,CAAC+qB,gBAAgB,EAAI,EAAA;oBAC3B,IAAI,IAAI,CAAC9vB,mBAAmB,CAAyB,CAAA,CAAA,EAAA;wBACnD,IAAMw0B,WAAAA,GAAc,IAAI,CAACxF,YAAY,CAAA;AACrCwF,wBAAAA,WAAAA,CAAYzxD,GAAG,CAACniB,GAAG,CAAC,GAAG,CAAG,EAAA,CAAA,CAAA,CAAA;AAC1B4zE,wBAAAA,WAAAA,CAAYzrE,GAAG,CAACnI,GAAG,CAAC,GAAG,CAAG,EAAA,CAAA,CAAA,CAAA;AAC1B,wBAAA,IAAI,CAACqmD,aAAa,CAAC,IAAI,CAACtmC,OAAO,CAAA,CAAA;AAC/B,wBAAA,IAAI,CAACu/B,kBAAkB,CAAA,CAAA,CAAA,CAAA;AACzB,qBAAA;oBACA,OAAO,IAAI,CAACv/B,OAAO,CAAA;AACrB,iBAAA;AACA,gBAAA,IAAI,CAACq/B,mBAAmB,CAAuB,CAAA,CAAA,IAAA,IAAI,CAAC6vB,aAAa,EAAA,CAAA;AACjE,gBAAA,IAAI,CAAC7vB,mBAAmB,CAAmC,CAAA,CAAA,IAAA,IAAI,CAAC+vB,gBAAgB,EAAA,CAAA;AAChF,gBAAA,IAAI,CAAC/vB,mBAAmB,CAA6B,CAAA,CAAA,IAAA,IAAI,CAACgwB,eAAe,EAAA,CAAA;gBACzE,IAAI,CAAChwB,mBAAmB,CAA2B,CAAA,CAAA,IAAA,IAAI,CAACiH,aAAa,CAAC,IAAI,CAACtmC,OAAO,CAAA,CAAA;AAClF,gBAAA,IAAI,CAACu/B,kBAAkB,CAAA,EAAA,CAAA,CAAA;gBAEvB,OAAO,IAAI,CAACv/B,OAAO,CAAA;AACrB,aAAA;;;AApQWiuD,IAAAA,OAAAA,YAAAA,CAAAA;EAAqBt1C,gBAurBjC,EAAA;AAvrBYs1C,YACIhe,CAAAA,gBAAAA,GAAmB1nC,cAAezD,CAAAA,SAAS,CAAC,2BAAA,CAAA,CAAA;AADhDmpD,YAAAA,CAEI7yB,aAAa,IAAIngB,kBAAAA,EAAAA,CAAAA;AAFrBgzC,YAAAA,CAGItxB,aAAa,IAAI1hB,kBAAAA,EAAAA,CAAAA;AAHrBgzC,YAAAA,CAIIoC,eAAkB,GAAA;IAAC,IAAIp1C,kBAAAA,EAAAA;IAAW,IAAIA,kBAAAA,EAAAA;IAAW,IAAIA,kBAAAA,EAAAA;IAAW,IAAIA,kBAAAA,EAAAA;AAAU,CAAA,CAAA;AAJlFgzC,YAAAA,CAKI+C,mBAAqC,EAAE,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAorBxD,IAAM4B,YAAN,SAAMA,SAAAA,GAAAA;AACJlC,IAAAA,IAAAA,CAAAA,eAAAA,GAAkB,IAAI1uE,KAAAA,EAAAA,CAAAA;;;ACptBxB;;IAGO,IAAK8xE,WAAAA,iBAAAA,SAAAA,WAAAA,EAAAA;qFACoE,WAAA,CAAA,WAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;8FAES,WAAA,CAAA,WAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA;+FAEC,WAAA,CAAA,WAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;AAL9EA,IAAAA,OAAAA,WAAAA,CAAAA;AAOX,CAAA,CAAA,EAAA;;ACVD;;IAGO,IAAKC,cAAAA,iBAAAA,SAAAA,cAAAA,EAAAA;+EAC8D,cAAA,CAAA,cAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA,CAAA;+FAEgB,cAAA,CAAA,cAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA;AAH9EA,IAAAA,OAAAA,cAAAA,CAAAA;AAOX,CAAA,CAAA,EAAA;;ACDD;;IAGO,IAAMC,MAAN,iBAAA,SAAA,gBAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,MAAAA,EAAAA,gBAAAA,CAAAA,CAAAA;aAAAA,MAiFTvxE,CAAAA,MAAc,EACdtC,IAAoB,EACpB8zE,gBAAwD,EACxDC,WAA6C,EAC7CC,QAAyB,EAAA;QADzBD,IAAAA,WAAAA,KAAAA,KAAAA,CAAAA,EAAAA,WAA2BJ,GAAAA,WAAAA,CAAYlpE,MAAM,CAAA;AAC7CupE,QAAAA,IAAAA,qBAAAA,QAAoB,GAAA,KAAA,CAAA;;AAEpB,QAAA,KAAA,GAAA,gBAAA,CAAA,IAAA,CAAA,IAAA,EAAM1xE,MAtFR,CAAA,IAAA,IAAA,mBACA2xE,KAAAA,CAAAA,kBAAAA,GAAwC,IAAI91D,iBAAAA,EAAAA,CAAAA;AAsF1C,QAAA,KAAA,CAAKzb,OAAO,GAAGJ,MAAAA,CAAAA;AACf,QAAA,KAAA,CAAKymB,KAAK,GAAG/oB,IAAAA,CAAAA;AACb,QAAA,KAAA,CAAKk0E,YAAY,GAAGH,WAAAA,CAAAA;AACpB,QAAA,KAAA,CAAKI,SAAS,GAAGH,QAAAA,CAAAA;QAEjB,IAAI,OAAOF,qBAAqB,QAAU,EAAA;AACxC,YAAA,KAAA,CAAKM,WAAW,GAAGN,gBAAAA,CAAAA;YACnB,KAAKO,CAAAA,eAAe,GAAG/xE,MAAOiF,CAAAA,iBAAiB,CAAC+sE,oBAAoB,CAACt0E,MAAM8zE,gBAAkBC,EAAAA,WAAAA,CAAAA,CAAAA;AAC7F,YAAA,IAAIC,QAAU,EAAA;gBACZ,KAAKO,CAAAA,KAAK,GAAG,IAAIrzE,UAAW4yE,CAAAA,gBAAAA,CAAAA,CAAAA;AAC9B,aAAA;SACK,MAAA;AACL,YAAA,IAAMxmE,IAAOwmE,GAAAA,gBAAAA,CAAAA;YACb,IAAMU,UAAAA,GAAalnE,KAAKknE,UAAU,CAAA;AAClC,YAAA,KAAA,CAAKJ,WAAW,GAAGI,UAAAA,CAAAA;YACnB,KAAKH,CAAAA,eAAe,GAAG/xE,MAAOiF,CAAAA,iBAAiB,CAAC+sE,oBAAoB,CAACt0E,IAAMw0E,EAAAA,UAAAA,EAAYT,WAAazmE,EAAAA,IAAAA,CAAAA,CAAAA;AACpG,YAAA,IAAI0mE,QAAU,EAAA;gBACZ,IAAM9+D,MAAAA,GACJ5H,KAAK3N,WAAW,KAAK80E,cACjBnnE,IAAK1L,CAAAA,KAAK,CAAC,CAAA,CAAA,GACX,IAAkB0L,CAAM4H,MAAM,CAACtT,KAAK,CAClC,IAAkB0L,CAAMonE,UAAU,EAChBpnE,IAAMonE,CAAAA,UAAU,GAAGF,UAAAA,CAAAA,CAAAA;gBAE7C,KAAKD,CAAAA,KAAK,GAAG,IAAIrzE,UAAWgU,CAAAA,MAAAA,CAAAA,CAAAA;AAC9B,aAAA;AACF,SAAA;;;AAlHS2+D,IAAAA,IAAAA,MAAAA,GAAAA,MAAAA,CAAAA,SAAAA,CAAAA;AAqHX;;MAGAhuE,MAAAA,CAAAA,IAEC,GAFDA,SAAAA,IAAAA,GAAAA;QACE,IAAI,CAACwuE,eAAe,CAACxuE,IAAI,EAAA,CAAA;AAC3B,KAAA,CAAA;AAwCA8uE,IAAAA,MAAAA,CAAAA,OAuBC,GAvBDA,SAAAA,OAAAA,CACErnE,IAAmC,EACnCsnE,gBAA4B,EAC5BC,UAAsB,EACtBC,UAAmB,EACnBC,OAA6C,EAAA;AAH7CH,QAAAA,IAAAA,6BAAAA,gBAA2B,GAAA,CAAA,CAAA;AAC3BC,QAAAA,IAAAA,uBAAAA,UAAqB,GAAA,CAAA,CAAA;QAErBE,IAAAA,OAAAA,KAAAA,KAAAA,CAAAA,EAAAA,OAA0BnB,GAAAA,cAAAA,CAAeh/B,IAAI,CAAA;AAE7C,QAAA,IAAI,CAACy/B,eAAe,CAACM,OAAO,CAAC,IAAI,CAACP,WAAW,EAAE9mE,IAAAA,EAAMsnE,gBAAkBC,EAAAA,UAAAA,EAAYC,UAAYC,EAAAA,OAAAA,CAAAA,CAAAA;QAE/F,IAAI,IAAI,CAACZ,SAAS,EAAE;YAClB,IAAMa,WAAAA,GAAc1nE,KAAK3N,WAAW,KAAK80E,cAAcnnE,IAAO,GAAkBA,KAAM4H,MAAM,CAAA;AAE5F,YAAA,IAAI,IAAI,CAACq/D,KAAK,CAACr/D,MAAM,KAAK8/D,WAAa,EAAA;AACrC,gBAAA,IAAMC,WAAW,IAAa3nE,CAAM4nE,iBAAiB,IAAI;AACzD,gBAAA,IAAMC,cAAiBL,GAAAA,UAAAA,GAAaG,QAAWH,GAAAA,UAAAA,GAAaxnE,KAAKknE,UAAU,CAAA;AAC3E,gBAAA,IAAMY,iBAAoB,GAAkB9nE,IAAMonE,CAAAA,UAAU,KAAKzzE,SAAAA,CAAAA;AACjE,gBAAA,IAAMyzE,aAAaU,iBAAoB,GAAkB9nE,KAAMonE,UAAU,GAAGG,aAAaI,QAAWJ,GAAAA,UAAAA,CAAAA;AACpG,gBAAA,IAAMQ,OAAU,GAAA,IAAIn0E,UAAW8zE,CAAAA,WAAAA,EAAaN,UAAYS,EAAAA,cAAAA,CAAAA,CAAAA;AACxD,gBAAA,IAAI,CAACZ,KAAK,CAACz0E,GAAG,CAACu1E,OAAST,EAAAA,gBAAAA,CAAAA,CAAAA;AAC1B,aAAA;AACF,SAAA;QACA,IAAI,CAACzvE,cAAc,GAAG,KAAA,CAAA;QACtB,IAAI,CAAC8uE,kBAAkB,CAACl1D,QAAQ,EAAA,CAAA;AAClC,KAAA,CAAA;IAwBAu2D,MAAAA,CAAAA,OAEC,GAFDA,SAAAA,OAAQhoE,CAAAA,IAAqB,EAAEsnE,gBAA4B,EAAEC,UAAsB,EAAEC,UAAmB,EAAA;AAAzEF,QAAAA,IAAAA,6BAAAA,gBAA2B,GAAA,CAAA,CAAA;AAAGC,QAAAA,IAAAA,uBAAAA,UAAqB,GAAA,CAAA,CAAA;AAChF,QAAA,IAAI,CAACR,eAAe,CAACiB,OAAO,CAAChoE,IAAAA,EAAMsnE,kBAAkBC,UAAYC,EAAAA,UAAAA,CAAAA,CAAAA;AACnE,KAAA,CAAA;AAEA;;MAGAS,MAAAA,CAAAA,gBAGC,GAHDA,SAAAA,gBAAAA,GAAAA;QACE,IAAI,CAAChB,KAAK,GAAG,IAAA,CAAA;QACb,IAAI,CAACJ,SAAS,GAAG,KAAA,CAAA;AACnB,KAAA,CAAA;IAEA,MAASrtE,CAAAA,QAOR,GAPD,SAASA,QAAAA,GAAAA;AACP,QAAA,IAAM0uE,iBAAiB,IAAI,CAAC9yE,OAAO,CAAC6E,iBAAiB,CAAC+sE,oBAAoB,CACxE,IAAI,CAACvrD,KAAK,EACV,IAAI,CAACqrD,WAAW,EAChB,IAAI,CAACF,YAAY,CAAA,CAAA;QAEnB,IAAI,CAACG,eAAe,GAAGmB,cAAAA,CAAAA;AACzB,KAAA,CAAA;AAEA;;MAGA,MAAA,CAAmB5yE,UAGlB,GAHD,SAAmBA,UAAAA,GAAAA;AACjB,QAAA,gBAAA,CAAA,SAAA,CAAMA,UAAD,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;QACL,IAAI,CAACyxE,eAAe,CAAC1xE,OAAO,EAAA,CAAA;AAC9B,KAAA,CAAA;AA5OWkxE,IAAAA,aAAAA,CAAAA,MAAAA,EAAAA;;YAcP7zE,GAAAA,EAAAA,MAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAAC+oB,KAAK,CAAA;AACnB,aAAA;;;YAKIyrD,GAAAA,EAAAA,YAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACJ,WAAW,CAAA;AACzB,aAAA;;;YAKIL,GAAAA,EAAAA,aAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACG,YAAY,CAAA;AAC1B,aAAA;;;YAKIF,GAAAA,EAAAA,UAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACG,SAAS,CAAA;AACvB,aAAA;;;YASI7mE,GAAAA,EAAAA,MAAAA;;;;;;;MAAJ,SAAA,GAAA,GAAA;gBACE,IAAI,IAAI,CAAC6mE,SAAS,EAAE;oBAClB,OAAO,IAAI,CAACI,KAAK,CAAA;iBACZ,MAAA;oBACL,MAAM,yBAAA,CAAA;AACR,iBAAA;AACF,aAAA;;;AApDWV,IAAAA,OAAAA,MAAAA,CAAAA;EAAe3uE,gBA6O3B;;ACzPD;;IAGO,IAAKuwE,WAAAA,iBAAAA,SAAAA,WAAAA,EAAAA;iBACA,WAAA,CAAA,WAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA,CAAA;kBAEC,WAAA,CAAA,WAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;kBAEA,WAAA,CAAA,WAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;AALDA,IAAAA,OAAAA,WAAAA,CAAAA;AAOX,CAAA,CAAA,EAAA;;ACVD;;IAGO,IAAKC,mBAAAA,iBAAAA,SAAAA,mBAAAA,EAAAA;wBACO,mBAAA,CAAA,mBAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA,CAAA;wCAEgB,mBAAA,CAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA;0CAEE,mBAAA,CAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA;yCAED,mBAAA,CAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA;8DAEqB,mBAAA,CAAA,mBAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA,CAAA;qEAEO,mBAAA,CAAA,mBAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;sEAEC,mBAAA,CAAA,mBAAA,CAAA,iBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,iBAAA,CAAA;8EAEQ,mBAAA,CAAA,mBAAA,CAAA,kBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,kBAAA,CAAA;mEAEX,mBAAA,CAAA,mBAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;wEAEK,mBAAA,CAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA;qEAEH,mBAAA,CAAA,mBAAA,CAAA,kBAAA,CAAA,GAAA,EAAA,CAAA,GAAA,kBAAA,CAAA;+EAEU,mBAAA,CAAA,mBAAA,CAAA,mBAAA,CAAA,GAAA,EAAA,CAAA,GAAA,mBAAA,CAAA;qEAEV,mBAAA,CAAA,mBAAA,CAAA,QAAA,CAAA,GAAA,EAAA,CAAA,GAAA,QAAA,CAAA;yEAEI,mBAAA,CAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,EAAA,CAAA,GAAA,SAAA,CAAA;uEAEF,mBAAA,CAAA,mBAAA,CAAA,kBAAA,CAAA,GAAA,EAAA,CAAA,GAAA,kBAAA,CAAA;gFAES,mBAAA,CAAA,mBAAA,CAAA,mBAAA,CAAA,GAAA,EAAA,CAAA,GAAA,mBAAA,CAAA;AA/B/DA,IAAAA,OAAAA,mBAAAA,CAAAA;AAiCX,CAAA,CAAA,EAAA;;ACzBM,IAAA,UAAA,iBAAA,WAAA;AAAMC,IAAAA,SAAAA,UAAAA,GAAAA,EAAAA;AAAAA,IAAAA,UAAAA,CACJC,eASN,GATD,SAAOA,eAAAA,CAAgBC,WAAwB,EAAA;QAC7C,OAAQA,WAAAA;AACN,YAAA,KAAKJ,YAAYK,KAAK;AACpB,gBAAA,OAAO/qD,SAASgrD,aAAa,CAAA;AAC/B,YAAA,KAAKN,YAAYO,MAAM;AACrB,gBAAA,OAAOjrD,SAASkrD,cAAc,CAAA;AAChC,YAAA,KAAKR,YAAYS,MAAM;AACrB,gBAAA,OAAOnrD,SAASorD,YAAY,CAAA;AAChC,SAAA;AACF,KAAA,CAAA;AAVWR,IAAAA,UAAAA,CAYJS,oBASN,GATD,SAAOA,oBAAAA,CAAqBP,WAAwB,EAAA;QAClD,OAAQA,WAAAA;AACN,YAAA,KAAKJ,YAAYK,KAAK;gBACpB,OAAO,CAAA,CAAA;AACT,YAAA,KAAKL,YAAYO,MAAM;gBACrB,OAAO,CAAA,CAAA;AACT,YAAA,KAAKP,YAAYS,MAAM;gBACrB,OAAO,CAAA,CAAA;AACX,SAAA;AACF,KAAA,CAAA;AAEA;;AAEC,MACD,UAAOG,CAAAA,eAuFN,GAvFD,SAAOA,gBAAgB9tE,MAA2B,EAAA;QAChD,IAAIX,IAAAA,CAAAA;QACJ,IAAI5H,IAAAA,CAAAA;AACJ,QAAA,IAAIqgD,UAAsB,GAAA,KAAA,CAAA;QAC1B,IAAIi2B,qBAAAA,CAAAA;QAEJ,OAAQ/tE,MAAAA;AACN,YAAA,KAAKmtE,oBAAoBjkC,KAAK;gBAC5B7pC,IAAO,GAAA,CAAA,CAAA;AACP5H,gBAAAA,IAAAA,GAAO+qB,SAAS4P,KAAK,CAAA;AACrB,gBAAA,MAAA;AACF,YAAA,KAAK+6C,oBAAoB3nE,OAAO;gBAC9BnG,IAAO,GAAA,CAAA,CAAA;AACP5H,gBAAAA,IAAAA,GAAO+qB,SAAS4P,KAAK,CAAA;AACrB,gBAAA,MAAA;AACF,YAAA,KAAK+6C,oBAAoB56C,OAAO;gBAC9BlzB,IAAO,GAAA,CAAA,CAAA;AACP5H,gBAAAA,IAAAA,GAAO+qB,SAAS4P,KAAK,CAAA;AACrB,gBAAA,MAAA;AACF,YAAA,KAAK+6C,oBAAoBr3E,OAAO;gBAC9BuJ,IAAO,GAAA,CAAA,CAAA;AACP5H,gBAAAA,IAAAA,GAAO+qB,SAAS4P,KAAK,CAAA;AACrB,gBAAA,MAAA;AACF,YAAA,KAAK+6C,oBAAoBa,KAAK;gBAC5B3uE,IAAO,GAAA,CAAA,CAAA;AACP5H,gBAAAA,IAAAA,GAAO+qB,SAASyrD,IAAI,CAAA;AACpB,gBAAA,MAAA;AACF,YAAA,KAAKd,oBAAoBe,MAAM;gBAC7B7uE,IAAO,GAAA,CAAA,CAAA;AACP5H,gBAAAA,IAAAA,GAAO+qB,SAASgrD,aAAa,CAAA;AAC7B,gBAAA,MAAA;AACF,YAAA,KAAKL,oBAAoBgB,eAAe;gBACtC9uE,IAAO,GAAA,CAAA,CAAA;AACP5H,gBAAAA,IAAAA,GAAO+qB,SAASyrD,IAAI,CAAA;gBACpBn2B,UAAa,GAAA,IAAA,CAAA;AACbi2B,gBAAAA,qBAAAA,GAAwB,CAAI,GAAA,GAAA,CAAA;AAC5B,gBAAA,MAAA;AACF,YAAA,KAAKZ,oBAAoBiB,gBAAgB;gBACvC/uE,IAAO,GAAA,CAAA,CAAA;AACP5H,gBAAAA,IAAAA,GAAO+qB,SAASgrD,aAAa,CAAA;gBAC7B11B,UAAa,GAAA,IAAA,CAAA;AACbi2B,gBAAAA,qBAAAA,GAAwB,CAAI,GAAA,GAAA,CAAA;AAC5B,gBAAA,MAAA;AACF,YAAA,KAAKZ,oBAAoBkB,MAAM;gBAC7BhvE,IAAO,GAAA,CAAA,CAAA;AACP5H,gBAAAA,IAAAA,GAAO+qB,SAAS8rD,KAAK,CAAA;AACrB,gBAAA,MAAA;AACF,YAAA,KAAKnB,oBAAoBoB,OAAO;gBAC9BlvE,IAAO,GAAA,CAAA,CAAA;AACP5H,gBAAAA,IAAAA,GAAO+qB,SAASkrD,cAAc,CAAA;AAC9B,gBAAA,MAAA;AACF,YAAA,KAAKP,oBAAoBqB,gBAAgB;gBACvCnvE,IAAO,GAAA,CAAA,CAAA;AACP5H,gBAAAA,IAAAA,GAAO+qB,SAAS8rD,KAAK,CAAA;gBACrBx2B,UAAa,GAAA,IAAA,CAAA;AACbi2B,gBAAAA,qBAAAA,GAAwB,CAAI,GAAA,KAAA,CAAA;AAC5B,gBAAA,MAAA;AACF,YAAA,KAAKZ,oBAAoBsB,iBAAiB;gBACxCpvE,IAAO,GAAA,CAAA,CAAA;AACP5H,gBAAAA,IAAAA,GAAO+qB,SAASkrD,cAAc,CAAA;gBAC9B51B,UAAa,GAAA,IAAA,CAAA;AACbi2B,gBAAAA,qBAAAA,GAAwB,CAAI,GAAA,KAAA,CAAA;AAC5B,gBAAA,MAAA;AACF,YAAA,KAAKZ,oBAAoBuB,MAAM;gBAC7BrvE,IAAO,GAAA,CAAA,CAAA;AACP5H,gBAAAA,IAAAA,GAAO+qB,SAAS8rD,KAAK,CAAA;AACrB,gBAAA,MAAA;AACF,YAAA,KAAKnB,oBAAoBwB,OAAO;gBAC9BtvE,IAAO,GAAA,CAAA,CAAA;AACP5H,gBAAAA,IAAAA,GAAO+qB,SAASkrD,cAAc,CAAA;AAC9B,gBAAA,MAAA;AACF,YAAA,KAAKP,oBAAoByB,gBAAgB;gBACvCvvE,IAAO,GAAA,CAAA,CAAA;AACP5H,gBAAAA,IAAAA,GAAO+qB,SAAS8rD,KAAK,CAAA;gBACrBx2B,UAAa,GAAA,IAAA,CAAA;AACbi2B,gBAAAA,qBAAAA,GAAwB,CAAI,GAAA,KAAA,CAAA;AAC5B,gBAAA,MAAA;AACF,YAAA,KAAKZ,oBAAoB0B,iBAAiB;gBACxCxvE,IAAO,GAAA,CAAA,CAAA;AACP5H,gBAAAA,IAAAA,GAAO+qB,SAASkrD,cAAc,CAAA;gBAC9B51B,UAAa,GAAA,IAAA,CAAA;AACbi2B,gBAAAA,qBAAAA,GAAwB,CAAI,GAAA,KAAA,CAAA;AAC5B,gBAAA,MAAA;AAGJ,SAAA;QACA,OAAO;YAAE1uE,IAAAA,EAAAA,IAAAA;YAAM5H,IAAAA,EAAAA,IAAAA;YAAMqgD,UAAAA,EAAAA,UAAAA;YAAYi2B,qBAAAA,EAAAA,qBAAAA;AAAsB,SAAA,CAAA;AACzD,KAAA,CAAA;AAjHWX,IAAAA,OAAAA,UAAAA,CAAAA;AAkHZ,CAAA;;AC1HD;;IAGO,IAAM0B,aAAN,iBAAA,WAAA;aAAMA,aA6DTC,CAAAA,SAAiB,EACjBz9D,MAAc,EACdtR,MAA2B,EAC3BgvE,YAAoB,EACpBC,gBAA4B,EAAA;AAA5BA,QAAAA,IAAAA,6BAAAA,gBAA2B,GAAA,CAAA,CAAA;QAE3B,IAAI,CAACC,cAAc,GAAGH,SAAAA,CAAAA;QACtB,IAAI,CAACI,OAAO,GAAG79D,MAAAA,CAAAA;QACf,IAAI,CAACvR,OAAO,GAAGC,MAAAA,CAAAA;QACf,IAAI,CAACovE,aAAa,GAAGJ,YAAAA,CAAAA;QACrB,IAAI,CAACK,eAAe,GAAGjC,UAAAA,CAAWU,eAAe,CAAC,IAAI,CAAC9tE,MAAM,CAAA,CAAA;AAC7D,QAAA,IAAI,CAACsvE,iBAAiB,GAAGhwE,IAAAA,CAAKC,KAAK,CAAC0vE,gBAAAA,CAAAA,CAAAA;;AAxE3BH,IAAAA,aAAAA,CAAAA,aAAAA,EAAAA;;YAYPC,GAAAA,EAAAA,WAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACG,cAAc,CAAA;AAC5B,aAAA;;;YAKI59D,GAAAA,EAAAA,QAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAAC69D,OAAO,CAAA;AACrB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAWtzE,KAAa,EAAA;gBACtB,IAAI,CAACszE,OAAO,GAAGtzE,KAAAA,CAAAA;AACjB,aAAA;;;YAKImE,GAAAA,EAAAA,QAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACD,OAAO,CAAA;AACrB,aAAA;;;YAKIivE,GAAAA,EAAAA,cAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACI,aAAa,CAAA;AAC3B,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAiBvzE,KAAa,EAAA;gBAC5B,IAAI,CAACuzE,aAAa,GAAGvzE,KAAAA,CAAAA;AACvB,aAAA;;;YAKIozE,GAAAA,EAAAA,kBAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACK,iBAAiB,CAAA;AAC/B,aAAA;;;YA4BIC,GAAAA,EAAAA,UAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACR,SAAS,CAAA;AACvB,aAAA;;;AAhFWD,IAAAA,OAAAA,aAAAA,CAAAA;AAiFZ,CAAA;;ACvFD;;IAGO,IAAKU,cAAAA,iBAAAA,SAAAA,cAAAA,EAAAA;sCACqB,cAAA,CAAA,cAAA,CAAA,cAAA,CAAA,GAAA,CAAA,CAAA,GAAA,cAAA,CAAA;qCAED,cAAA,CAAA,cAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,GAAA,aAAA,CAAA;AAHpBA,IAAAA,OAAAA,cAAAA,CAAAA;AAKX,CAAA,CAAA,EAAA;;ACRD;;IAGO,IAAKC,YAAAA,iBAAAA,SAAAA,YAAAA,EAAAA;8BACa,YAAA,CAAA,YAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;mDAEqB,YAAA,CAAA,YAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA,CAAA;oGAEiD,YAAA,CAAA,YAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA,CAAA;qDAE/C,YAAA,CAAA,YAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA,CAAA;0DAEK,YAAA,CAAA,YAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA,CAAA;kCAExB,YAAA,CAAA,YAAA,CAAA,eAAA,CAAA,GAAA,CAAA,CAAA,GAAA,eAAA,CAAA;gCAEF,YAAA,CAAA,YAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,GAAA,aAAA,CAAA;AAbfA,IAAAA,OAAAA,YAAAA,CAAAA;AAeX,CAAA,CAAA,EAAA;;AClBD;;IAGO,IAAKC,SAAAA,iBAAAA,SAAAA,SAAAA,EAAAA;oDACmC,SAAA,CAAA,SAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;wCAEZ,SAAA,CAAA,SAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA,CAAA;AAHvBA,IAAAA,OAAAA,SAAAA,CAAAA;AAKX,CAAA,CAAA,EAAA;;ACRD;;IAGO,IAAKC,UAAAA,iBAAAA,SAAAA,UAAAA,EAAAA;8BACa,UAAA,CAAA,UAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA,CAAA;6BAED,UAAA,CAAA,UAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA,CAAA;+BAEE,UAAA,CAAA,UAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;AALdA,IAAAA,OAAAA,UAAAA,CAAAA;AAOX,CAAA,CAAA,EAAA;;ACDD;;IAGO,IAAMz/C,QAAN,iBAAA,SAAA,aAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,QAAAA,EAAAA,aAAAA,CAAAA,CAAAA;aAAAA,QAuECn2B,CAAAA,MAAc,EAAE4tB,MAAc,EAAA;;AACxC,QAAA,KAAA,GAAA,aAAA,CAAA,IAAA,CAAA,IAAA,EAAM5tB,kCAlEM,KAAA,CACd61E,aAA+B,GAAA,EAAE;gBAEzB12B,WAA0B,GAAA,IAAIrQ,UAAWzb,CAAAA,eAAAA,CAAgB8C,QAAQ,CAAA,CAAA;AAgEvE,QAAA,KAAA,CAAKvI,MAAM,GAAGA,MAAAA,CAAAA;;;AAzELuI,IAAAA,IAAAA,MAAAA,GAAAA,QAAAA,CAAAA,SAAAA,CAAAA;AA4EX;;MAGA5X,MAAAA,CAAAA,KAIC,GAJDA,SAAAA,KAAAA,GAAAA;QACE,IAAMu3D,IAAAA,GAAO,IAhFJ3/C,QAgFiB,CAAA,IAAI,CAAC/1B,OAAO,EAAE,IAAI,CAACwtB,MAAM,CAAA,CAAA;QACnD,IAAI,CAAC0jB,OAAO,CAACwkC,IAAAA,CAAAA,CAAAA;QACb,OAAOA,IAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;AAGC,MACDxkC,MAAAA,CAAAA,OAIC,GAJDA,SAAAA,QAAQh1C,MAAgB,EAAA;AACtBA,QAAAA,MAAAA,CAAOsxB,MAAM,GAAG,IAAI,CAACA,MAAM,CAAA;AAC3B,QAAA,IAAI,CAAC/F,UAAU,CAACypB,OAAO,CAACh1C,OAAOurB,UAAU,CAAA,CAAA;QACzCrrB,YAAaqD,CAAAA,eAAe,CAAC,IAAI,CAACwuC,YAAY,EAAE/xC,MAAAA,CAAO+xC,YAAY,EAAE,IAAIvuC,GAAAA,EAAAA,CAAAA,CAAAA;AAC3E,KAAA,CAAA;AAEA,IAAA,MAAA,CAAS+B,cAKR,GALD,SAASA,cAAAA,CAAeC,KAAa,EAAA;QACnC,IAAI,IAAI,CAAC3B,UAAU,EAAE,OAAA;AACrB,QAAA,aAAA,CAAA,SAAA,CAAM0B,cAAD,CAAgBC,IAAAA,CAAAA,IAAAA,EAAAA,KAAAA,CAAAA,CAAAA;AACrB,QAAA,IAAI,CAAC+lB,UAAU,CAAChmB,cAAc,CAACC,KAAAA,CAAAA,CAAAA;AAC/B,QAAA,IAAI,CAACi0E,OAAO,CAACl0E,cAAc,CAACC,KAAAA,CAAAA,CAAAA;AAC9B,KAAA,CAAA;AAEA;;MAGA,MAAA,CAAmBxB,UAMlB,GAND,SAAmBA,UAAAA,GAAAA;AACjB,QAAA,aAAA,CAAA,SAAA,CAAMA,UAAD,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;QACL,IAAI,CAACy1E,OAAO,GAAG,IAAA,CAAA;QACf,IAAI,CAAC52B,WAAW,GAAG,IAAA,CAAA;AACnB,QAAA,IAAI,CAAC02B,aAAa,CAACx2E,MAAM,GAAG,CAAA,CAAA;QAC5B,IAAI,CAACw2E,aAAa,GAAG,IAAA,CAAA;AACvB,KAAA,CAAA;AA/GW1/C,IAAAA,aAAAA,CAAAA,QAAAA,EAAAA;;YAcPtO,GAAAA,EAAAA,YAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACs3B,WAAW,CAAA;AACzB,aAAA;;;YAKIvxB,GAAAA,EAAAA,QAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACmoD,OAAO,CAAA;AACrB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAWj0E,KAAa,EAAA;gBACtB,IAAMV,QAAAA,GAAW,IAAI,CAACQ,cAAc,EAAA,CAAA;AACpC,gBAAA,IAAIR,WAAW,CAAG,EAAA;AAChB,oBAAA,IAAA,aAAA,CAAA;AAAA,oBAAA,CAAA,aAAA,GAAA,IAAI,CAAC20E,OAAO,qBAAZ,aAAcl0E,CAAAA,cAAc,CAAC,CAACT,QAAAA,CAAAA,CAAAA;AAC9BU,oBAAAA,KAAAA,CAAMD,cAAc,CAACT,QAAAA,CAAAA,CAAAA;AACvB,iBAAA;gBAEA,IAAI,CAAC20E,OAAO,GAAGj0E,KAAAA,CAAAA;gBAEf,IAAMusC,YAAAA,GAAe,IAAI,CAACwnC,aAAa,CAAA;gBACvC,IAAMG,eAAAA,GAAkB3nC,aAAahvC,MAAM,CAAA;AAE3C,gBAAA,IAAI42E,YAAe,GAAA,CAAA,CAAA;gBACnB,IAAMppC,UAAAA,GAAa/qC,MAAM+qC,UAAU,CAAA;AACnC,gBAAA,IAAK,IAAIptC,CAAI,GAAA,CAAA,EAAGA,IAAIotC,UAAWxtC,CAAAA,MAAM,EAAEI,CAAK,EAAA,CAAA;oBAC1Cw2E,YAAe1wE,GAAAA,IAAAA,CAAKI,GAAG,CAACknC,UAAU,CAACptC,EAAE,CAACy+B,MAAM,CAAC7+B,MAAM,EAAE42E,YAAAA,CAAAA,CAAAA;AACvD,iBAAA;AAEA,gBAAA,IAAID,kBAAkBC,YAAc,EAAA;AAClC,oBAAA,IAAK,IAAIx2E,EAAAA,GAAIu2E,eAAiBv2E,EAAAA,EAAAA,GAAIw2E,cAAcx2E,EAAK,EAAA,CAAA;wBACnD4uC,YAAa9sC,CAAAA,IAAI,CAAC,IAAI4qC,WAAAA,EAAAA,CAAAA,CAAAA;AACxB,qBAAA;iBACK,MAAA;AACLkC,oBAAAA,YAAAA,CAAahvC,MAAM,GAAG42E,YAAAA,CAAAA;AACxB,iBAAA;AACF,aAAA;;;YAKIznC,GAAAA,EAAAA,aAAAA;;;MAAJ,SAAA,GAAA,GAAA;AACE,gBAAA,OAAO,IAAI,CAACqnC,aAAa,CAAC,CAAE,CAAA,CAAA;AAC9B,aAAA;;;YAKIxnC,GAAAA,EAAAA,cAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACwnC,aAAa,CAAA;AAC3B,aAAA;;;AAhEW1/C,IAAAA,OAAAA,QAAAA,CAAAA;EAAiBx1B,aAgH7B;;ACnHM,IAAA,YAAA,iBAAA,SAAA,QAAA,EAAA;AAAMu1E,IAAAA,SAAAA,CAAAA,YAAAA,EAAAA,QAAAA,CAAAA,CAAAA;aAAAA,YAkKCl2E,CAAAA,MAAc,EAAE4tB,MAAc,EAAA;;gBACxC,QAAM5tB,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAAQ4tB,MA/IRuoD,CAAAA,IAAAA,IAAAA,EAAAA,KAAAA,CAAAA,WAAAA,GAA0BP,UAAWQ,CAAAA,KAAK,QAC1CC,cAA0B,GAAA,KAAA,EAAA,KAAA,CAC1BC,UAAwBX,GAAAA,SAAAA,CAAUvkB,MAAM,CAAA;AA+I9C,QAAA,IAAM,UAAEvpC,GAAAA,KAAAA,CAAAA,UAAAA,CAAAA;AACRA,QAAAA,UAAAA,CAAWonB,QAAQ,CAACinC,YAtKXA,CAsKwBK,gBAAgB,EAAE,CAAA,CAAA,CAAA;AACnD1uD,QAAAA,UAAAA,CAAWonB,QAAQ,CAvKVinC,aAuKwBM,4BAA4B,EAAEj1D,gBAAgB8qB,MAAM,CAAA,CAAA;;;AAvK5E6pC,IAAAA,IAAAA,MAAAA,GAAAA,YAAAA,CAAAA,SAAAA,CAAAA;AA0KX;;;;AAIC,MACDO,OAAAA,gBAsBC,GAtBDA,SAAAA,gBAAiB1nB,CAAAA,SAAiB,EAAE2nB,aAAsB,EAAA;QACxD,IAAQroC,YAAiB,GAAA,IAAI,CAArBA,YAAAA,CAAAA;QACR,IAAIA,YAAAA,CAAahvC,MAAM,GAAG0vD,SAAW,EAAA;YACnC,MAAM,mCAAA,CAAA;AACR,SAAA;QACA,IAAMvgB,WAAAA,GAAcH,YAAY,CAAC0gB,SAAU,CAAA,CAAA;QAC3C,IAAQlnC,UAAe,GAAA,IAAI,CAAnBA,UAAAA,CAAAA;AAER,QAAA,IAAI6uD,aAAe,EAAA;AACjBloC,YAAAA,WAAAA,CAAYhP,UAAU,CAACL,gBAAgB,CAACb,OAAO,GAAG,IAAA,CAAA;YAClDkQ,WAAYvJ,CAAAA,UAAU,CAACP,YAAY,GAAG,KAAA,CAAA;YACtC8J,WAAYpC,CAAAA,eAAe,GAAG7qB,eAAAA,CAAgBmmD,WAAW,CAAA;AACzD7/C,YAAAA,UAAAA,CAAW+oB,WAAW,CAACslC,YA3LhBA,CA2L6BS,iBAAiB,CAAA,CAAA;SAChD,MAAA;AACLnoC,YAAAA,WAAAA,CAAYhP,UAAU,CAACL,gBAAgB,CAACb,OAAO,GAAG,KAAA,CAAA;YAClDkQ,WAAYvJ,CAAAA,UAAU,CAACP,YAAY,GAAG,IAAA,CAAA;AAEtC8J,YAAAA,WAAAA,CAAYpC,eAAe,GAAGvkB,UAAW8X,CAAAA,QAAQ,CAhM1Cu2C,YAgMwDK,CAAAA,gBAAgB,CAC3Eh1D,GAAAA,eAAAA,CAAgBomD,SAAS,GACzBpmD,gBAAgB8qB,MAAM,CAAA;AAC1BxkB,YAAAA,UAAAA,CAAWipB,YAAY,CAAColC,YAnMjBA,CAmM8BS,iBAAiB,CAAA,CAAA;AACxD,SAAA;AACF,KAAA,CAAA;AAEA;;;;AAIC,MACDC,OAAAA,YAuBC,GAvBDA,SAAAA,YAAa7nB,CAAAA,SAAiB,EAAE8nB,SAAoB,EAAA;QAClD,IAAQxoC,YAAiB,GAAA,IAAI,CAArBA,YAAAA,CAAAA;QACR,IAAIA,YAAAA,CAAahvC,MAAM,GAAG0vD,SAAW,EAAA;YACnC,MAAM,mCAAA,CAAA;AACR,SAAA;QACA,IAAqC1gB,kCAAAA,GAAAA,YAAY,CAAC0gB,SAAAA,CAAU,CAACvvB,UAAU,EAA/DL,MAAkB7iC,GAAW+xC,kCAA7BlP,CAAAA,gBAAAA,CAAAA;QAER,OAAQ03C,SAAAA;AACN,YAAA,KAAKlB,UAAUvkB,MAAM;gBACnB90D,MAAOoiC,CAAAA,sBAAsB,GAAGzd,WAAAA,CAAY6hB,WAAW,CAAA;gBACvDxmC,MAAOuiC,CAAAA,2BAA2B,GAAG5d,WAAAA,CAAY+hB,mBAAmB,CAAA;gBACpE1mC,MAAOsiC,CAAAA,sBAAsB,GAAG3d,WAAAA,CAAY0d,GAAG,CAAA;gBAC/CriC,MAAOyiC,CAAAA,2BAA2B,GAAG9d,WAAAA,CAAY+hB,mBAAmB,CAAA;AACpE1mC,gBAAAA,MAAAA,CAAOiiC,mBAAmB,GAAGjiC,MAAAA,CAAOmiC,mBAAmB,GAAGvd,eAAesd,GAAG,CAAA;AAC5E,gBAAA,MAAA;AACF,YAAA,KAAKm3C,UAAUmB,QAAQ;gBACrBx6E,MAAOoiC,CAAAA,sBAAsB,GAAGzd,WAAAA,CAAY6hB,WAAW,CAAA;gBACvDxmC,MAAOuiC,CAAAA,2BAA2B,GAAG5d,WAAAA,CAAY0d,GAAG,CAAA;gBACpDriC,MAAOsiC,CAAAA,sBAAsB,GAAG3d,WAAAA,CAAY0d,GAAG,CAAA;gBAC/CriC,MAAOyiC,CAAAA,2BAA2B,GAAG9d,WAAAA,CAAY+hB,mBAAmB,CAAA;AACpE1mC,gBAAAA,MAAAA,CAAOiiC,mBAAmB,GAAGjiC,MAAAA,CAAOmiC,mBAAmB,GAAGvd,eAAesd,GAAG,CAAA;AAC5E,gBAAA,MAAA;AACJ,SAAA;AACF,KAAA,CAAA;AAEA;;;;AAIC,MACDu4C,OAAAA,aAiBC,GAjBDA,SAAAA,aAAchoB,CAAAA,SAAiB,EAAEioB,UAAsB,EAAA;QACrD,IAAQ3oC,YAAiB,GAAA,IAAI,CAArBA,YAAAA,CAAAA;QACR,IAAIA,YAAAA,CAAahvC,MAAM,GAAG0vD,SAAW,EAAA;YACnC,MAAM,mCAAA,CAAA;AACR,SAAA;QAEA,OAAQioB,UAAAA;AACN,YAAA,KAAKpB,WAAWQ,KAAK;gBACnB/nC,YAAY,CAAC0gB,UAAU,CAAC3nB,WAAW,CAACb,QAAQ,GAAGllB,SAASmlB,IAAI,CAAA;AAC5D,gBAAA,MAAA;AACF,YAAA,KAAKovC,WAAWpvC,IAAI;gBAClB6H,YAAY,CAAC0gB,UAAU,CAAC3nB,WAAW,CAACb,QAAQ,GAAGllB,SAAS+0D,KAAK,CAAA;AAC7D,gBAAA,MAAA;AACF,YAAA,KAAKR,WAAWqB,MAAM;gBACpB5oC,YAAY,CAAC0gB,UAAU,CAAC3nB,WAAW,CAACb,QAAQ,GAAGllB,SAASkmB,GAAG,CAAA;AAC3D,gBAAA,MAAA;AACJ,SAAA;AACF,KAAA,CAAA;AAEA;;MAGA,MAAA,CAAShpB,KAIR,GAJD,SAASA,KAAAA,GAAAA;QACP,IAAMu3D,IAAAA,GAAO,IAjQJI,YAiQqB,CAAA,IAAI,CAAC91E,OAAO,EAAE,IAAI,CAACwtB,MAAM,CAAA,CAAA;QACvD,IAAI,CAAC0jB,OAAO,CAACwkC,IAAAA,CAAAA,CAAAA;QACb,OAAOA,IAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;AAGC,MACD,MAASxkC,CAAAA,OAKR,GALD,SAASA,QAAQh1C,MAAoB,EAAA;AACnC,QAAA,QAAA,CAAA,SAAA,CAAMg1C,OAAD,CAASh1C,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,CAAAA,CAAAA;AACdA,QAAAA,MAAAA,CAAO65E,WAAW,GAAG,IAAI,CAACA,WAAW,CAAA;AACrC75E,QAAAA,MAAAA,CAAO+5E,cAAc,GAAG,IAAI,CAACA,cAAc,CAAA;AAC3C/5E,QAAAA,MAAAA,CAAOg6E,UAAU,GAAG,IAAI,CAACA,UAAU,CAAA;AACrC,KAAA,CAAA;AA/QWJ,IAAAA,aAAAA,CAAAA,YAAAA,EAAAA;;YA2BEtoD,GAAAA,EAAAA,QAAAA;;;MAAb,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACmoD,OAAO,CAAA;AACrB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAoBj0E,KAAa,EAAA;gBAC/B,IAAMV,QAAAA,GAAW,IAAI,CAACQ,cAAc,EAAA,CAAA;AACpC,gBAAA,IAAIR,WAAW,CAAG,EAAA;AAChB,oBAAA,IAAA,aAAA,CAAA;AAAA,oBAAA,CAAA,aAAA,GAAA,IAAI,CAAC20E,OAAO,qBAAZ,aAAcl0E,CAAAA,cAAc,CAAC,CAACT,QAAAA,CAAAA,CAAAA;AAC9BU,oBAAAA,KAAAA,CAAMD,cAAc,CAACT,QAAAA,CAAAA,CAAAA;AACvB,iBAAA;gBAEA,IAAI,CAAC20E,OAAO,GAAGj0E,KAAAA,CAAAA;gBACf,IAAMusC,YAAAA,GAAe,IAAI,CAACwnC,aAAa,CAAA;gBACvC,IAAMG,eAAAA,GAAkB3nC,aAAahvC,MAAM,CAAA;AAE3C,gBAAA,IAAI42E,YAAe,GAAA,CAAA,CAAA;gBACnB,IAAMppC,UAAAA,GAAa/qC,MAAM+qC,UAAU,CAAA;AACnC,gBAAA,IAAK,IAAIptC,CAAI,GAAA,CAAA,EAAGA,IAAIotC,UAAWxtC,CAAAA,MAAM,EAAEI,CAAK,EAAA,CAAA;oBAC1Cw2E,YAAe1wE,GAAAA,IAAAA,CAAKI,GAAG,CAACknC,UAAU,CAACptC,EAAE,CAACy+B,MAAM,CAAC7+B,MAAM,EAAE42E,YAAAA,CAAAA,CAAAA;AACvD,iBAAA;AAEA,gBAAA,IAAID,kBAAkBC,YAAc,EAAA;AAClC,oBAAA,IAAK,IAAIx2E,EAAAA,GAAIu2E,eAAiBv2E,EAAAA,EAAAA,GAAIw2E,cAAcx2E,EAAK,EAAA,CAAA;wBACnD4uC,YAAa9sC,CAAAA,IAAI,CAAC,IAAI4qC,WAAAA,EAAAA,CAAAA,CAAAA;AACtB,wBAAA,IAAI,CAACyqC,YAAY,CAACn3E,EAAAA,EAAGk2E,UAAUvkB,MAAM,CAAA,CAAA;AACvC,qBAAA;iBACK,MAAA;AACL/iB,oBAAAA,YAAAA,CAAahvC,MAAM,GAAG42E,YAAAA,CAAAA;AACxB,iBAAA;AACF,aAAA;;;YAKIS,GAAAA,EAAAA,eAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACL,cAAc,CAAA;AAC5B,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAkBv0E,KAAc,EAAA;AAC9B,gBAAA,IAAIA,KAAU,KAAA,IAAI,CAACu0E,cAAc,EAAE;oBACjC,IAAI,CAACI,gBAAgB,CAAC,CAAG30E,EAAAA,KAAAA,CAAAA,CAAAA;oBAEzB,IAAQ+lB,UAAe,GAAA,IAAI,CAAnBA,UAAAA,CAAAA;AACR,oBAAA,IAAI/lB,KAAO,EAAA;;AAET+lB,wBAAAA,UAAAA,CAAWonB,QAAQ,CAxEdinC,aAwE4BM,4BAA4B,EAAEj1D,gBAAgBomD,SAAS,CAAA,CAAA;qBACnF,MAAA;AACL,wBAAA,IAAM4D,cAAc1jD,UAAW8X,CAAAA,QAAQ,CA1ElCu2C,aA0EgDK,gBAAgB,CAAA,CAAA;AACrE,wBAAA,IAAIhL,WAAa,EAAA;AACf1jD,4BAAAA,UAAAA,CAAWonB,QAAQ,CA5EhBinC,aA4E8BM,4BAA4B,EAAEj1D,gBAAgBomD,SAAS,CAAA,CAAA;yBACnF,MAAA;AACL9/C,4BAAAA,UAAAA,CAAWonB,QAAQ,CA9EhBinC,aA8E8BM,4BAA4B,EAAEj1D,gBAAgB8qB,MAAM,CAAA,CAAA;AACvF,yBAAA;AACF,qBAAA;oBAEA,IAAI,CAACgqC,cAAc,GAAGv0E,KAAAA,CAAAA;AACxB,iBAAA;AACF,aAAA;;;YAMI+0E,GAAAA,EAAAA,WAAAA;;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACP,UAAU,CAAA;AACxB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAcx0E,KAAgB,EAAA;AAC5B,gBAAA,IAAIA,KAAU,KAAA,IAAI,CAACw0E,UAAU,EAAE;oBAC7B,IAAI,CAACM,YAAY,CAAC,CAAG90E,EAAAA,KAAAA,CAAAA,CAAAA;oBACrB,IAAI,CAACw0E,UAAU,GAAGx0E,KAAAA,CAAAA;AACpB,iBAAA;AACF,aAAA;;;YAQIypE,GAAAA,EAAAA,aAAAA;;;;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAAC1jD,UAAU,CAAC8X,QAAQ,CA5GtBu2C,aA4GoCK,gBAAgB,CAAA,CAAA;AAC/D,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAgBz0E,KAAa,EAAA;gBAC3B,IAAQ+lB,UAAe,GAAA,IAAI,CAAnBA,UAAAA,CAAAA;AACR,gBAAA,IAAIA,WAAW8X,QAAQ,CAACu2C,YAAaK,CAAAA,gBAAgB,MAAMz0E,KAAO,EAAA;AAChE,oBAAA,IAAIA,KAAO,EAAA;AACT+lB,wBAAAA,UAAAA,CAAW+oB,WAAW,CAACslC,YAnHlBA,CAmH+BgB,iBAAiB,CAAA,CAAA;AACrDrvD,wBAAAA,UAAAA,CAAWonB,QAAQ,CApHdinC,aAoH4BM,4BAA4B,EAAEj1D,gBAAgBomD,SAAS,CAAA,CAAA;qBACnF,MAAA;AACL9/C,wBAAAA,UAAAA,CAAWipB,YAAY,CAAColC,YAtHnBA,CAsHgCgB,iBAAiB,CAAA,CAAA;wBACtD,IAAI,IAAI,CAACb,cAAc,EAAE;AACvBxuD,4BAAAA,UAAAA,CAAWonB,QAAQ,CAxHhBinC,aAwH8BM,4BAA4B,EAAEj1D,gBAAgBomD,SAAS,CAAA,CAAA;yBACnF,MAAA;AACL9/C,4BAAAA,UAAAA,CAAWonB,QAAQ,CA1HhBinC,aA0H8BM,4BAA4B,EAAEj1D,gBAAgB8qB,MAAM,CAAA,CAAA;AACvF,yBAAA;AACF,qBAAA;oBAEA,IAAQgC,YAAiB,GAAA,IAAI,CAArBA,YAAAA,CAAAA;oBACR,IAAK,IAAI5uC,IAAI,CAAG0B,EAAAA,CAAAA,GAAIktC,aAAahvC,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;wBACnD,IAAM+uC,WAAAA,GAAcH,YAAY,CAAC5uC,CAAE,CAAA,CAAA;AACnC,wBAAA,IAAIqC,QAAQ,CAAG,EAAA;AACb0sC,4BAAAA,WAAAA,CAAYpC,eAAe,GAAGoC,WAAYhP,CAAAA,UAAU,CAACL,gBAAgB,CAACb,OAAO,GACzE/c,eAAAA,CAAgBmmD,WAAW,GAC3BnmD,gBAAgBomD,SAAS,CAAA;yBACxB,MAAA;AACLn5B,4BAAAA,WAAAA,CAAYpC,eAAe,GAAGoC,WAAYhP,CAAAA,UAAU,CAACL,gBAAgB,CAACb,OAAO,GACzE/c,eAAAA,CAAgBmmD,WAAW,GAC3BnmD,gBAAgB8qB,MAAM,CAAA;AAC5B,yBAAA;AACF,qBAAA;AACAxkB,oBAAAA,UAAAA,CAAWonB,QAAQ,CAACinC,YA3IbA,CA2I0BK,gBAAgB,EAAEz0E,KAAAA,CAAAA,CAAAA;AACrD,iBAAA;AACF,aAAA;;;YAKIk1E,GAAAA,EAAAA,YAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACb,WAAW,CAAA;AACzB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAer0E,KAAiB,EAAA;AAC9B,gBAAA,IAAIA,KAAU,KAAA,IAAI,CAACq0E,WAAW,EAAE;oBAC9B,IAAI,CAACY,aAAa,CAAC,CAAGj1E,EAAAA,KAAAA,CAAAA,CAAAA;oBACtB,IAAI,CAACq0E,WAAW,GAAGr0E,KAAAA,CAAAA;AACrB,iBAAA;AACF,aAAA;;;AA3JWo0E,IAAAA,OAAAA,YAAAA,CAAAA;EAAqB//C,QAgRjC,EAAA;AA/QC,iBADW+/C,YAAAA,CAEJM,4BAA+B1wD,GAAAA,cAAAA,CAAezD,SAAS,CAAC,kCAAA,CAAA,CAAA;AAFpD6zD,YAIMiB,CAAAA,iBAAAA,GAAiCx1D,WAAYU,CAAAA,SAAS,CAAC,0BAAA,CAAA,CAAA;AAJ7D6zD,YAKMkB,CAAAA,mBAAAA,GAAmCz1D,WAAYU,CAAAA,SAAS,CAAC,4BAAA,CAAA,CAAA;AAL/D6zD,YAMMmB,CAAAA,qBAAAA,GAAqC11D,WAAYU,CAAAA,SAAS,CAAC,8BAAA,CAAA,CAAA;AANjE6zD,YAOMS,CAAAA,iBAAAA,GAAiCh1D,WAAYU,CAAAA,SAAS,CAAC,yBAAA,CAAA,CAAA;AAP7D6zD,YASMoB,CAAAA,cAAAA,GAAiCxxD,cAAezD,CAAAA,SAAS,CAAC,oBAAA,CAAA,CAAA;AAThE6zD,YAUMqB,CAAAA,gBAAAA,GAAmCzxD,cAAezD,CAAAA,SAAS,CAAC,sBAAA,CAAA,CAAA;AAVlE6zD,YAWMsB,CAAAA,iBAAAA,GAAoC1xD,cAAezD,CAAAA,SAAS,CAAC,uBAAA,CAAA,CAAA;AAXnE6zD,YAYMuB,CAAAA,kBAAAA,GAAqC3xD,cAAezD,CAAAA,SAAS,CAAC,wBAAA,CAAA,CAAA;AAZpE6zD,YAaMwB,CAAAA,oBAAAA,GAAuC5xD,cAAezD,CAAAA,SAAS,CAAC,0BAAA,CAAA,CAAA;AAbtE6zD,YAcMyB,CAAAA,kBAAAA,GAAqC7xD,cAAezD,CAAAA,SAAS,CAAC,wBAAA,CAAA,CAAA;AAdpE6zD,YAeM0B,CAAAA,oBAAAA,GAAuC9xD,cAAezD,CAAAA,SAAS,CAAC,0BAAA,CAAA,CAAA;AAftE6zD,YAiBIK,CAAAA,gBAAAA,GAAmCzwD,cAAezD,CAAAA,SAAS,CAAC,sBAAA,CAAA,CAAA;AAjBhE6zD,YAkBIgB,CAAAA,iBAAAA,GAAiCv1D,WAAYU,CAAAA,SAAS,CAAC,0BAAA,CAAA;;ACpBxE;;IAGO,IAAMw1D,kBAAN,iBAAA,SAAA,YAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,kBAAAA,EAAAA,YAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,kBAAAA,CAuJC73E,MAAc,EAAA;;gBACxB,YAAMA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAAQo9B,MAAO6Q,CAAAA,IAAI,CAAC,aAAA,CAAA,CAAA,IAAA,IAAA,CAAA;QAE1B,IAAMpmB,UAAAA,GAAa,MAAKA,UAAU,CAAA;AAElCA,QAAAA,UAAAA,CAAW+oB,WAAW,CAAC,yBAAA,CAAA,CAAA;AACvB/oB,QAAAA,UAAAA,CAAW+oB,WAAW,CAAC,6BAAA,CAAA,CAAA;QAEvB/oB,UAAWwoB,CAAAA,QAAQ,CA/JVwnC,kBA+J8BP,CAAAA,cAAc,EAAE,IAAI1mD,gBAAAA,CAAM,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,CAAA,CAAA,CAAA;QAC1E/I,UAAWwoB,CAAAA,QAAQ,CAhKVwnC,kBAgK8BC,CAAAA,kBAAkB,EAAE,IAAIlnD,gBAAAA,CAAM,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,CAAA,CAAA,CAAA;QAC9E/I,UAAWwoB,CAAAA,QAAQ,CAjKVwnC,kBAiK8BF,CAAAA,kBAAkB,EAAE,IAAI/mD,gBAAAA,CAAM,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,CAAA,CAAA,CAAA;QAC9E/I,UAAWM,CAAAA,UAAU,CAlKZ0vD,kBAkKgCL,CAAAA,iBAAiB,EAAE,IAAIz7E,kBAAAA,CAAQ,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,CAAA,CAAA,CAAA;AACjF8rB,QAAAA,UAAAA,CAAWonB,QAAQ,CAAC4oC,kBAnKXA,CAmK8BE,cAAc,EAAE,EAAA,CAAA,CAAA;AACvDlwD,QAAAA,UAAAA,CAAWonB,QAAQ,CAAC4oC,kBApKXA,CAoK8BH,oBAAoB,EAAE,CAAA,CAAA,CAAA;;;AApKpDG,IAAAA,IAAAA,MAAAA,GAAAA,kBAAAA,CAAAA,SAAAA,CAAAA;IAuKX,MAASt5D,CAAAA,KAIR,GAJD,SAASA,KAAAA,GAAAA;AACP,QAAA,IAAIu3D,IAA2B,GAAA,IAxKtB+B,kBAwK6C,CAAA,IAAI,CAACz3E,OAAO,CAAA,CAAA;QAClE,IAAI,CAACkxC,OAAO,CAACwkC,IAAAA,CAAAA,CAAAA;QACb,OAAOA,IAAAA,CAAAA;AACT,KAAA,CAAA;AA3KW+B,IAAAA,aAAAA,CAAAA,kBAAAA,EAAAA;;YAQPG,GAAAA,EAAAA,WAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACnwD,UAAU,CAAC+Y,QAAQ,CATtBi3C,mBAS0CP,cAAc,CAAA,CAAA;AACnE,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAcx1E,KAAY,EAAA;gBACxB,IAAMk2E,SAAAA,GAAY,IAAI,CAACnwD,UAAU,CAAC+Y,QAAQ,CAACi3C,kBAblCA,CAaqDP,cAAc,CAAA,CAAA;AAC5E,gBAAA,IAAIx1E,UAAUk2E,SAAW,EAAA;AACvBA,oBAAAA,SAAAA,CAAUr4E,QAAQ,CAACmC,KAAAA,CAAAA,CAAAA;AACrB,iBAAA;AACF,aAAA;;;YAKIm2E,GAAAA,EAAAA,aAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAkB,IAAI,CAACpwD,UAAU,CAACyoB,UAAU,CAvBnCunC,mBAuBuDN,gBAAgB,CAAA,CAAA;AAClF,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAgBz1E,KAAgB,EAAA;gBAC9B,IAAI,CAAC+lB,UAAU,CAAC0oB,UAAU,CAACsnC,kBA3BlBA,CA2BqCN,gBAAgB,EAAEz1E,KAAAA,CAAAA,CAAAA;AAChE,gBAAA,IAAIA,KAAO,EAAA;AACT,oBAAA,IAAI,CAAC+lB,UAAU,CAAC+oB,WAAW,CA7BpBinC,mBA6BwCV,iBAAiB,CAAA,CAAA;iBAC3D,MAAA;AACL,oBAAA,IAAI,CAACtvD,UAAU,CAACipB,YAAY,CA/BrB+mC,mBA+ByCV,iBAAiB,CAAA,CAAA;AACnE,iBAAA;AACF,aAAA;;;YAKIe,GAAAA,EAAAA,eAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACrwD,UAAU,CAAC+Y,QAAQ,CAvCtBi3C,mBAuC0CC,kBAAkB,CAAA,CAAA;AACvE,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAkBh2E,KAAY,EAAA;gBAC5B,IAAMo2E,aAAAA,GAAgB,IAAI,CAACrwD,UAAU,CAAC+Y,QAAQ,CAACi3C,kBA3CtCA,CA2CyDC,kBAAkB,CAAA,CAAA;AACpF,gBAAA,IAAIh2E,UAAUo2E,aAAe,EAAA;AAC3BA,oBAAAA,aAAAA,CAAcv4E,QAAQ,CAACmC,KAAAA,CAAAA,CAAAA;AACzB,iBAAA;AACF,aAAA;;;YAKIq2E,GAAAA,EAAAA,iBAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAkB,IAAI,CAACtwD,UAAU,CAACyoB,UAAU,CArDnCunC,mBAqDuDO,oBAAoB,CAAA,CAAA;AACtF,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAoBt2E,KAAgB,EAAA;gBAClC,IAAI,CAAC+lB,UAAU,CAAC0oB,UAAU,CAACsnC,kBAzDlBA,CAyDqCO,oBAAoB,EAAEt2E,KAAAA,CAAAA,CAAAA;AACpE,gBAAA,IAAIA,KAAO,EAAA;AACT,oBAAA,IAAI,CAAC+lB,UAAU,CAAC+oB,WAAW,CAAC,+BAAA,CAAA,CAAA;iBACvB,MAAA;AACL,oBAAA,IAAI,CAAC/oB,UAAU,CAACipB,YAAY,CAAC,+BAAA,CAAA,CAAA;AAC/B,iBAAA;AACF,aAAA;;;YAKIunC,GAAAA,EAAAA,eAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACxwD,UAAU,CAAC+Y,QAAQ,CArEtBi3C,mBAqE0CF,kBAAkB,CAAA,CAAA;AACvE,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAkB71E,KAAY,EAAA;gBAC5B,IAAMu2E,aAAAA,GAAgB,IAAI,CAACxwD,UAAU,CAAC+Y,QAAQ,CAACi3C,kBAzEtCA,CAyEyDF,kBAAkB,CAAA,CAAA;AACpF,gBAAA,IAAI71E,UAAUu2E,aAAe,EAAA;AAC3BA,oBAAAA,aAAAA,CAAc14E,QAAQ,CAACmC,KAAAA,CAAAA,CAAAA;AACzB,iBAAA;AACF,aAAA;;;YAKIw2E,GAAAA,EAAAA,iBAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAkB,IAAI,CAACzwD,UAAU,CAACyoB,UAAU,CAnFnCunC,mBAmFuDD,oBAAoB,CAAA,CAAA;AACtF,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAoB91E,KAAgB,EAAA;gBAClC,IAAI,CAAC+lB,UAAU,CAAC0oB,UAAU,CAACsnC,kBAvFlBA,CAuFqCD,oBAAoB,EAAE91E,KAAAA,CAAAA,CAAAA;AACpE,gBAAA,IAAIA,KAAO,EAAA;AACT,oBAAA,IAAI,CAAC+lB,UAAU,CAAC+oB,WAAW,CAzFpBinC,mBAyFwCR,qBAAqB,CAAA,CAAA;iBAC/D,MAAA;AACL,oBAAA,IAAI,CAACxvD,UAAU,CAACipB,YAAY,CA3FrB+mC,mBA2FyCR,qBAAqB,CAAA,CAAA;AACvE,iBAAA;AACF,aAAA;;;YAKIkB,GAAAA,EAAAA,eAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAkB,IAAI,CAAC1wD,UAAU,CAACyoB,UAAU,CAnGnCunC,mBAmGuDJ,kBAAkB,CAAA,CAAA;AACpF,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAkB31E,KAAgB,EAAA;gBAChC,IAAI,CAAC+lB,UAAU,CAAC0oB,UAAU,CAACsnC,kBAvGlBA,CAuGqCJ,kBAAkB,EAAE31E,KAAAA,CAAAA,CAAAA;AAClE,gBAAA,IAAIA,KAAO,EAAA;AACT,oBAAA,IAAI,CAAC+lB,UAAU,CAAC+oB,WAAW,CAzGpBinC,mBAyGwCT,mBAAmB,CAAA,CAAA;iBAC7D,MAAA;AACL,oBAAA,IAAI,CAACvvD,UAAU,CAACipB,YAAY,CA3GrB+mC,mBA2GyCT,mBAAmB,CAAA,CAAA;AACrE,iBAAA;AACF,aAAA;;;YAKIoB,GAAAA,EAAAA,iBAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAAC3wD,UAAU,CAAC8X,QAAQ,CAnHtBk4C,mBAmH0CH,oBAAoB,CAAA,CAAA;AACzE,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAoB51E,KAAa,EAAA;gBAC/B,IAAI,CAAC+lB,UAAU,CAAConB,QAAQ,CAAC4oC,kBAvHhBA,CAuHmCH,oBAAoB,EAAE51E,KAAAA,CAAAA,CAAAA;AACpE,aAAA;;;YAKI22E,GAAAA,EAAAA,WAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAAC5wD,UAAU,CAAC8X,QAAQ,CA9HtBk4C,mBA8H0CE,cAAc,CAAA,CAAA;AACnE,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAcj2E,KAAa,EAAA;AACzB,gBAAA,IAAI,CAAC+lB,UAAU,CAAConB,QAAQ,CAlIf4oC,kBAkImCE,CAAAA,cAAc,EAAExyE,IAAAA,CAAKI,GAAG,CAAC7D,KAAO,EAAA,IAAA,CAAA,CAAA,CAAA;AAC9E,aAAA;;;YAKI42E,GAAAA,EAAAA,cAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAAC7wD,UAAU,CAACooB,UAAU,CAzIxB4nC,mBAyI4CL,iBAAiB,CAAA,CAAA;AACxE,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAiB11E,KAAc,EAAA;gBAC7B,IAAM42E,YAAAA,GAAe,IAAI,CAAC7wD,UAAU,CAACooB,UAAU,CAAC4nC,kBA7IvCA,CA6I0DL,iBAAiB,CAAA,CAAA;AACpF,gBAAA,IAAI11E,UAAU42E,YAAc,EAAA;AAC1BA,oBAAAA,YAAAA,CAAa/4E,QAAQ,CAACmC,KAAAA,CAAAA,CAAAA;AACxB,iBAAA;AACF,aAAA;;;AAjJW+1E,IAAAA,OAAAA,kBAAAA,CAAAA;EAA2B3B,YA4KvC,EAAA;AA5KY2B,kBACIC,CAAAA,kBAAAA,GAAqBhyD,cAAezD,CAAAA,SAAS,CAAC,wBAAA,CAAA,CAAA;AADlDw1D,kBAEIE,CAAAA,cAAAA,GAAiBjyD,cAAezD,CAAAA,SAAS,CAAC,oBAAA,CAAA,CAAA;AAF9Cw1D,kBAGIO,CAAAA,oBAAAA,GAAuBtyD,cAAezD,CAAAA,SAAS,CAAC,0BAAA,CAAA;;ACbjE;;IAGO,IAAKs2D,iBAAAA,iBAAAA,SAAAA,iBAAAA,EAAAA;;;;;;;;;AAAAA,IAAAA,OAAAA,iBAAAA,CAAAA;AASX,CAAA,CAAA,EAAA;;ACJD;;IAGO,IAAeC,eAAf,iBAAA,SAAA,YAAA,EAAA;AAAeA,IAAAA,SAAAA,CAAAA,eAAAA,EAAAA,YAAAA,CAAAA,CAAAA;aAAAA,eA+OE54E,CAAAA,MAAc,EAAE4tB,MAAc,EAAA;;AAClD,QAAA,KAAA,GAAA,YAAA,CAAA,IAAA,CAAA,IAAA,EAAM5tB,MAAQ4tB,EAAAA,MAAAA,CAAAA,IAAAA,IAAAA,CAAAA;QAEd,IAAM/F,UAAAA,GAAa,MAAKA,UAAU,CAAA;AAElCA,QAAAA,UAAAA,CAAW+oB,WAAW,CAAC,yBAAA,CAAA,CAAA;AACvB/oB,QAAAA,UAAAA,CAAW+oB,WAAW,CAAC,6BAAA,CAAA,CAAA;QAEvB/oB,UAAWwoB,CAAAA,QAAQ,CAvPDuoC,eAuPkBtB,CAAAA,cAAc,EAAE,IAAI1mD,gBAAAA,CAAM,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,CAAA,CAAA,CAAA;QACvE/I,UAAWwoB,CAAAA,QAAQ,CAxPDuoC,eAwPkBjB,CAAAA,kBAAkB,EAAE,IAAI/mD,gBAAAA,CAAM,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,CAAA,CAAA,CAAA;QAC3E/I,UAAWM,CAAAA,UAAU,CAzPHywD,eAyPoBpB,CAAAA,iBAAiB,EAAE,IAAIz7E,kBAAAA,CAAQ,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,CAAA,CAAA,CAAA;AAE9E8rB,QAAAA,UAAAA,CAAWonB,QAAQ,CAAC2pC,eA3PFA,CA2PkBlB,oBAAoB,EAAE,CAAA,CAAA,CAAA;AAC1D7vD,QAAAA,UAAAA,CAAWonB,QAAQ,CAAC2pC,eA5PFA,CA4PkBC,8BAA8B,EAAE,CAAA,CAAA,CAAA;AACpEhxD,QAAAA,UAAAA,CAAWonB,QAAQ,CA7PD2pC,gBA6PkBE,0BAA0B,EAAEH,kBAAkBI,GAAG,CAAA,CAAA;AAErFlxD,QAAAA,UAAAA,CAAWonB,QAAQ,CAAC2pC,eA/PFA,CA+PkBI,cAAc,EAAE,CAAA,CAAA,CAAA;AACpDnxD,QAAAA,UAAAA,CAAWonB,QAAQ,CAAC2pC,eAhQFA,CAgQkBK,uBAAuB,EAAE,CAAA,CAAA,CAAA;;;AAhQ3CL,IAAAA,aAAAA,CAAAA,eAAAA,EAAAA;;YAchBZ,GAAAA,EAAAA,WAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACnwD,UAAU,CAAC+Y,QAAQ,CAfbg4C,gBAe8BtB,cAAc,CAAA,CAAA;AAChE,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAcx1E,KAAY,EAAA;gBACxB,IAAMk2E,SAAAA,GAAY,IAAI,CAACnwD,UAAU,CAAC+Y,QAAQ,CAACg4C,eAnBzBA,CAmByCtB,cAAc,CAAA,CAAA;AACzE,gBAAA,IAAIx1E,UAAUk2E,SAAW,EAAA;AACvBA,oBAAAA,SAAAA,CAAUr4E,QAAQ,CAACmC,KAAAA,CAAAA,CAAAA;AACrB,iBAAA;AACF,aAAA;;;YAKIm2E,GAAAA,EAAAA,aAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAkB,IAAI,CAACpwD,UAAU,CAACyoB,UAAU,CA7B1BsoC,gBA6B2CrB,gBAAgB,CAAA,CAAA;AAC/E,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAgBz1E,KAAgB,EAAA;gBAC9B,IAAI,CAAC+lB,UAAU,CAAC0oB,UAAU,CAACqoC,eAjCTA,CAiCyBrB,gBAAgB,EAAEz1E,KAAAA,CAAAA,CAAAA;AAC7D,gBAAA,IAAIA,KAAO,EAAA;AACT,oBAAA,IAAI,CAAC+lB,UAAU,CAAC+oB,WAAW,CAnCXgoC,gBAmC4BzB,iBAAiB,CAAA,CAAA;iBACxD,MAAA;AACL,oBAAA,IAAI,CAACtvD,UAAU,CAACipB,YAAY,CArCZ8nC,gBAqC6BzB,iBAAiB,CAAA,CAAA;AAChE,iBAAA;AACF,aAAA;;;YAKIoB,GAAAA,EAAAA,eAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAkB,IAAI,CAAC1wD,UAAU,CAACyoB,UAAU,CA7C1BsoC,gBA6C2CnB,kBAAkB,CAAA,CAAA;AACjF,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAkB31E,KAAgB,EAAA;gBAChC,IAAI,CAAC+lB,UAAU,CAAC0oB,UAAU,CAACqoC,eAjDTA,CAiDyBnB,kBAAkB,EAAE31E,KAAAA,CAAAA,CAAAA;AAC/D,gBAAA,IAAIA,KAAO,EAAA;AACT,oBAAA,IAAI,CAAC+lB,UAAU,CAAC+oB,WAAW,CAnDXgoC,gBAmD4BxB,mBAAmB,CAAA,CAAA;iBAC1D,MAAA;AACL,oBAAA,IAAI,CAACvvD,UAAU,CAACipB,YAAY,CArDZ8nC,gBAqD6BxB,mBAAmB,CAAA,CAAA;AAClE,iBAAA;AACF,aAAA;;;YAKI8B,GAAAA,EAAAA,wBAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACrxD,UAAU,CAAC8X,QAAQ,CA7Dbi5C,gBA6D8BlB,oBAAoB,CAAA,CAAA;AACtE,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAA2B51E,KAAa,EAAA;gBACtC,IAAI,CAAC+lB,UAAU,CAAConB,QAAQ,CAAC2pC,eAjEPA,CAiEuBlB,oBAAoB,EAAE51E,KAAAA,CAAAA,CAAAA;AACjE,aAAA;;;YAKIu2E,GAAAA,EAAAA,eAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACxwD,UAAU,CAAC+Y,QAAQ,CAxEbg4C,gBAwE8BjB,kBAAkB,CAAA,CAAA;AACpE,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAkB71E,KAAY,EAAA;gBAC5B,IAAMu2E,aAAAA,GAAgB,IAAI,CAACxwD,UAAU,CAAC+Y,QAAQ,CAACg4C,eA5E7BA,CA4E6CjB,kBAAkB,CAAA,CAAA;AACjF,gBAAA,IAAI71E,UAAUu2E,aAAe,EAAA;AAC3BA,oBAAAA,aAAAA,CAAc14E,QAAQ,CAACmC,KAAAA,CAAAA,CAAAA;AACzB,iBAAA;AACF,aAAA;;;YAKIw2E,GAAAA,EAAAA,iBAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAkB,IAAI,CAACzwD,UAAU,CAACyoB,UAAU,CAtF1BsoC,gBAsF2ChB,oBAAoB,CAAA,CAAA;AACnF,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAoB91E,KAAgB,EAAA;gBAClC,IAAI,CAAC+lB,UAAU,CAAC0oB,UAAU,CAACqoC,eA1FTA,CA0FyBhB,oBAAoB,EAAE91E,KAAAA,CAAAA,CAAAA;AACjE,gBAAA,IAAIA,KAAO,EAAA;AACT,oBAAA,IAAI,CAAC+lB,UAAU,CAAC+oB,WAAW,CA5FXgoC,gBA4F4BvB,qBAAqB,CAAA,CAAA;iBAC5D,MAAA;AACL,oBAAA,IAAI,CAACxvD,UAAU,CAACipB,YAAY,CA9FZ8nC,gBA8F6BvB,qBAAqB,CAAA,CAAA;AACpE,iBAAA;AACF,aAAA;;;YAKI8B,GAAAA,EAAAA,kBAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAkB,IAAI,CAACtxD,UAAU,CAACyoB,UAAU,CAtG1BsoC,gBAsG2CQ,qBAAqB,CAAA,CAAA;AACpF,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAqBt3E,KAAgB,EAAA;gBACnC,IAAI,CAAC+lB,UAAU,CAAC0oB,UAAU,CAACqoC,eA1GTA,CA0GyBQ,qBAAqB,EAAEt3E,KAAAA,CAAAA,CAAAA;AAClE,gBAAA,IAAIA,KAAO,EAAA;AACT,oBAAA,IAAI,CAAC+lB,UAAU,CAAC+oB,WAAW,CAAC,gCAAA,CAAA,CAAA;iBACvB,MAAA;AACL,oBAAA,IAAI,CAAC/oB,UAAU,CAACipB,YAAY,CAAC,gCAAA,CAAA,CAAA;AAC/B,iBAAA;AACF,aAAA;;;YAKIuoC,GAAAA,EAAAA,2BAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACxxD,UAAU,CAAC8X,QAAQ,CAtHbi5C,gBAsH8BC,8BAA8B,CAAA,CAAA;AAChF,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAA8B/2E,KAAa,EAAA;gBACzC,IAAI,CAAC+lB,UAAU,CAAConB,QAAQ,CAAC2pC,eA1HPA,CA0HuBC,8BAA8B,EAAE/2E,KAAAA,CAAAA,CAAAA;AAC3E,aAAA;;;YAMIw3E,GAAAA,EAAAA,uBAAAA;;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACzxD,UAAU,CAAC8X,QAAQ,CAlIbi5C,gBAkI8BE,0BAA0B,CAAA,CAAA;AAC5E,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAA0Bh3E,KAAwB,EAAA;gBAChD,IAAIA,KAAAA,GAAQ62E,iBAAkBY,CAAAA,GAAG,EAAE;AACjC51E,oBAAAA,MAAAA,CAAOF,IAAI,CAAC,qDAAA,CAAA,CAAA;AACd,iBAAA;gBACA,IAAI,CAACokB,UAAU,CAAConB,QAAQ,CAAC2pC,eAzIPA,CAyIuBE,0BAA0B,EAAEh3E,KAAAA,CAAAA,CAAAA;AACvE,aAAA;;;YAKI42E,GAAAA,EAAAA,cAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAAC7wD,UAAU,CAACooB,UAAU,CAhJf2oC,gBAgJgCpB,iBAAiB,CAAA,CAAA;AACrE,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAiB11E,KAAc,EAAA;gBAC7B,IAAM42E,YAAAA,GAAe,IAAI,CAAC7wD,UAAU,CAACooB,UAAU,CAAC2oC,eApJ9BA,CAoJ8CpB,iBAAiB,CAAA,CAAA;AACjF,gBAAA,IAAI11E,UAAU42E,YAAc,EAAA;AAC1BA,oBAAAA,YAAAA,CAAa/4E,QAAQ,CAACmC,KAAAA,CAAAA,CAAAA;AACxB,iBAAA;AACF,aAAA;;;YAKI03E,GAAAA,EAAAA,WAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAAC3xD,UAAU,CAAC8X,QAAQ,CA9Jbi5C,gBA8J8BI,cAAc,CAAA,CAAA;AAChE,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAcl3E,KAAa,EAAA;AACzB,gBAAA,IAAI,CAAC,CAAC,IAAI,CAAC+lB,UAAU,CAAC8X,QAAQ,CAlKZi5C,eAkK6BI,CAAAA,cAAc,CAAM,KAAA,CAAC,CAACl3E,KAAO,EAAA;AAC1E,oBAAA,IAAIA,UAAU,CAAG,EAAA;AACf,wBAAA,IAAI,CAAC+lB,UAAU,CAACipB,YAAY,CAAC,4BAAA,CAAA,CAAA;qBACxB,MAAA;AACL,wBAAA,IAAI,CAACjpB,UAAU,CAAC+oB,WAAW,CAAC,4BAAA,CAAA,CAAA;AAC9B,qBAAA;AACF,iBAAA;gBACA,IAAI,CAAC/oB,UAAU,CAAConB,QAAQ,CAAC2pC,eAzKPA,CAyKuBI,cAAc,EAAEl3E,KAAAA,CAAAA,CAAAA;AAC3D,aAAA;;;YAKI23E,GAAAA,EAAAA,kBAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAkB,IAAI,CAAC5xD,UAAU,CAACyoB,UAAU,CAhL1BsoC,gBAgL2Cc,qBAAqB,CAAA,CAAA;AACpF,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAqB53E,KAAgB,EAAA;gBACnC,IAAI,CAAC+lB,UAAU,CAAC0oB,UAAU,CAACqoC,eApLTA,CAoLyBc,qBAAqB,EAAE53E,KAAAA,CAAAA,CAAAA;AAElE,gBAAA,IAAIA,KAAO,EAAA;AACT,oBAAA,IAAI,CAAC+lB,UAAU,CAAC+oB,WAAW,CAAC,iCAAA,CAAA,CAAA;iBACvB,MAAA;AACL,oBAAA,IAAI,CAAC/oB,UAAU,CAACipB,YAAY,CAAC,iCAAA,CAAA,CAAA;AAC/B,iBAAA;AACF,aAAA;;;YAKI6oC,GAAAA,EAAAA,oBAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAAC9xD,UAAU,CAAC8X,QAAQ,CAjMbi5C,gBAiM8BK,uBAAuB,CAAA,CAAA;AACzE,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAuBn3E,KAAa,EAAA;gBAClC,IAAI,CAAC+lB,UAAU,CAAConB,QAAQ,CAAC2pC,eArMPA,CAqMuBK,uBAAuB,EAAEn3E,KAAAA,CAAAA,CAAAA;AACpE,aAAA;;;YAKI83E,GAAAA,EAAAA,2BAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAkB,IAAI,CAAC/xD,UAAU,CAACyoB,UAAU,CA5M1BsoC,gBA4M2CiB,8BAA8B,CAAA,CAAA;AAC7F,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAA8B/3E,KAAgB,EAAA;gBAC5C,IAAI,CAAC+lB,UAAU,CAAC0oB,UAAU,CAACqoC,eAhNTA,CAgNyBiB,8BAA8B,EAAE/3E,KAAAA,CAAAA,CAAAA;AAE3E,gBAAA,IAAIA,KAAO,EAAA;AACT,oBAAA,IAAI,CAAC+lB,UAAU,CAAC+oB,WAAW,CAAC,2CAAA,CAAA,CAAA;iBACvB,MAAA;AACL,oBAAA,IAAI,CAAC/oB,UAAU,CAACipB,YAAY,CAAC,2CAAA,CAAA,CAAA;AAC/B,iBAAA;AACF,aAAA;;;YAKIgpC,GAAAA,EAAAA,wBAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAkB,IAAI,CAACjyD,UAAU,CAACyoB,UAAU,CA7N1BsoC,gBA6N2CmB,2BAA2B,CAAA,CAAA;AAC1F,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAA2Bj4E,KAAgB,EAAA;gBACzC,IAAI,CAAC+lB,UAAU,CAAC0oB,UAAU,CAACqoC,eAjOTA,CAiOyBmB,2BAA2B,EAAEj4E,KAAAA,CAAAA,CAAAA;AAExE,gBAAA,IAAIA,KAAO,EAAA;AACT,oBAAA,IAAI,CAAC+lB,UAAU,CAAC+oB,WAAW,CAAC,wCAAA,CAAA,CAAA;iBACvB,MAAA;AACL,oBAAA,IAAI,CAAC/oB,UAAU,CAACipB,YAAY,CAAC,wCAAA,CAAA,CAAA;AAC/B,iBAAA;AACF,aAAA;;;AAxOoB8nC,IAAAA,OAAAA,eAAAA,CAAAA;EAAwB1C,YAkQ7C,EAAA;AAlQqB0C,eACLC,CAAAA,8BAAAA,GAAiC/yD,cAAezD,CAAAA,SAAS,CAAC,6BAAA,CAAA,CAAA;AADrDu2D,eAELE,CAAAA,0BAAAA,GAA6BhzD,cAAezD,CAAAA,SAAS,CAAC,gCAAA,CAAA,CAAA;AAFjDu2D,eAGLQ,CAAAA,qBAAAA,GAAwBtzD,cAAezD,CAAAA,SAAS,CAAC,2BAAA,CAAA,CAAA;AAH5Cu2D,eAKLI,CAAAA,cAAAA,GAAiBlzD,cAAezD,CAAAA,SAAS,CAAC,oBAAA,CAAA,CAAA;AALrCu2D,eAMLc,CAAAA,qBAAAA,GAAwB5zD,cAAezD,CAAAA,SAAS,CAAC,2BAAA,CAAA,CAAA;AAN5Cu2D,eAOLK,CAAAA,uBAAAA,GAA0BnzD,cAAezD,CAAAA,SAAS,CAAC,6BAAA,CAAA,CAAA;AAP9Cu2D,eAQLiB,CAAAA,8BAAAA,GAAiC/zD,cAAezD,CAAAA,SAAS,CAAC,oCAAA,CAAA,CAAA;AARrDu2D,eASLmB,CAAAA,2BAAAA,GAA8Bj0D,cAAezD,CAAAA,SAAS,CAAC,iCAAA,CAAA;;ACbxE;;IAGO,IAAM23D,WAAN,iBAAA,SAAA,eAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,WAAAA,EAAAA,eAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,WAAAA,CA0NCh6E,MAAc,EAAA;;gBACxB,eAAMA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAAQo9B,MAAO6Q,CAAAA,IAAI,CAAC,KAAA,CAAA,CAAA,IAAA,IAAA,EAAA,KAAA,CAjNpBgsC,sBAA8B,CAK9BC,EAAAA,KAAAA,CAAAA,iBAAAA,GAAoB,IAAIzuE,kBAAAA,CAAQ,GAAK,EAAA,GAAA,CAAA,CAAA;QA8M3C,IAAMoc,UAAAA,GAAa,MAAKA,UAAU,CAAA;AAClCA,QAAAA,UAAAA,CAAWonB,QAAQ,CAAC+qC,WA9NXA,CA8NuBG,aAAa,EAAE,CAAA,CAAA,CAAA;AAC/CtyD,QAAAA,UAAAA,CAAWonB,QAAQ,CAAC+qC,WA/NXA,CA+NuBI,cAAc,EAAE,CAAA,CAAA,CAAA;AAChDvyD,QAAAA,UAAAA,CAAWonB,QAAQ,CAAC+qC,WAhOXA,CAgOuBK,QAAQ,EAAE,GAAA,CAAA,CAAA;QAC1CxyD,UAAWmoB,CAAAA,UAAU,CAACgqC,WAjObA,CAiOyBM,mBAAmB,EAAE,IAAI9hD,kBAAQ,CAAA,CAAA,EAAG,CAAG,EAAA,CAAA,CAAA,CAAA,CAAA;QACzE3Q,UAAWM,CAAAA,UAAU,CAlOZ6xD,WAkOyBO,CAAAA,oBAAoB,EAAE,IAAIx+E,kBAAAA,CAAQ,CAAG,EAAA,GAAA,EAAK,GAAK,EAAA,GAAA,CAAA,CAAA,CAAA;;AAEjF,QAAA,KAAA,CAAKm+E,iBAAiB,CAAC57D,eAAe,GAAG,KAAKk8D,CAAAA,0BAA0B,CAACj3E,IAAI,CAAA,KAAA,CAAA,CAAA;;;AApOpEy2E,IAAAA,IAAAA,MAAAA,GAAAA,WAAAA,CAAAA,SAAAA,CAAAA;IAuOX,MAAQQ,CAAAA,0BAIP,GAJD,SAAQA,0BAAAA,GAAAA;QACN,IAAMC,eAAAA,GAAkB,IAAI,CAAC5yD,UAAU,CAACooB,UAAU,CAAC+pC,WAxO1CA,CAwOsDO,oBAAoB,CAAA,CAAA;AACnFE,QAAAA,eAAAA,CAAgBx7D,CAAC,GAAG,IAAI,CAACi7D,iBAAiB,CAAClxE,CAAC,CAAA;AAC5CyxE,QAAAA,eAAAA,CAAgB3vE,CAAC,GAAG,IAAI,CAACovE,iBAAiB,CAACjxE,CAAC,CAAA;AAC9C,KAAA,CAAA;AAEA;;MAGA,MAAA,CAASsV,KAIR,GAJD,SAASA,KAAAA,GAAAA;AACP,QAAA,IAAMu3D,IAAO,GAAA,IAjPJkE,WAiPoB,CAAA,IAAI,CAAC55E,OAAO,CAAA,CAAA;QACzC,IAAI,CAACkxC,OAAO,CAACwkC,IAAAA,CAAAA,CAAAA;QACb,OAAOA,IAAAA,CAAAA;AACT,KAAA,CAAA;AApPWkE,IAAAA,aAAAA,CAAAA,WAAAA,EAAAA;;YAqBPU,GAAAA,EAAAA,KAAAA;;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAAC7yD,UAAU,CAAC8X,QAAQ,CAtBtBq6C,YAsBmCK,QAAQ,CAAA,CAAA;AACtD,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAQM,CAAS,EAAA;AACf,gBAAA,IAAI,CAAC9yD,UAAU,CAAConB,QAAQ,CA1Bf+qC,WA0B4BK,CAAAA,QAAQ,EAAE90E,IAAAA,CAAKI,GAAG,CAACg1E,CAAG,EAAA,CAAA,CAAA,CAAA,CAAA;AAC7D,aAAA;;;YAMIC,GAAAA,EAAAA,UAAAA;;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAAC/yD,UAAU,CAAC8X,QAAQ,CAlCtBq6C,YAkCmCG,aAAa,CAAA,CAAA;AAC3D,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAar4E,KAAa,EAAA;gBACxB,IAAI,CAAC+lB,UAAU,CAAConB,QAAQ,CAAC+qC,WAtChBA,CAsC4BG,aAAa,EAAEr4E,KAAAA,CAAAA,CAAAA;AACtD,aAAA;;;YAMI+4E,GAAAA,EAAAA,WAAAA;;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAAChzD,UAAU,CAAC8X,QAAQ,CA9CtBq6C,YA8CmCI,cAAc,CAAA,CAAA;AAC5D,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAct4E,KAAa,EAAA;gBACzB,IAAI,CAAC+lB,UAAU,CAAConB,QAAQ,CAAC+qC,WAlDhBA,CAkD4BI,cAAc,EAAEt4E,KAAAA,CAAAA,CAAAA;AACvD,aAAA;;;YAMIg5E,GAAAA,EAAAA,0BAAAA;;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAkB,IAAI,CAACjzD,UAAU,CAACyoB,UAAU,CA1DnC0pC,YA0DgDe,6BAA6B,CAAA,CAAA;AACxF,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAA6Bj5E,KAAgB,EAAA;gBAC3C,IAAI,CAAC+lB,UAAU,CAAC0oB,UAAU,CAACypC,WA9DlBA,CA8D8Be,6BAA6B,EAAEj5E,KAAAA,CAAAA,CAAAA;AACtE,gBAAA,IAAIA,KAAO,EAAA;AACT,oBAAA,IAAI,CAAC+lB,UAAU,CAAC+oB,WAAW,CAAC,yCAAA,CAAA,CAAA;iBACvB,MAAA;AACL,oBAAA,IAAI,CAAC/oB,UAAU,CAACipB,YAAY,CAAC,yCAAA,CAAA,CAAA;AAC/B,iBAAA;AACF,aAAA;;;YAMIkqC,GAAAA,EAAAA,YAAAA;;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACnzD,UAAU,CAACkoB,UAAU,CAACiqC,WA3EzBA,CA2EqCM,mBAAmB,CAAA,CAAEr7D,CAAC,CAAA;AACtE,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAend,KAAa,EAAA;gBAC1B,IAAMm5E,cAAAA,GAAiB,IAAI,CAACpzD,UAAU,CAACkoB,UAAU,CAACiqC,WA/EzCA,CA+EqDM,mBAAmB,CAAA,CAAA;AACjF,gBAAA,IAAI,CAAC,CAACW,cAAAA,CAAeh8D,CAAC,KAAK,CAAC,CAACnd,KAAO,EAAA;AAClC,oBAAA,IAAIA,UAAU,CAAG,EAAA;AACf,wBAAA,IAAI,CAAC+lB,UAAU,CAACipB,YAAY,CAAC,4BAAA,CAAA,CAAA;qBACxB,MAAA;AACL,wBAAA,IAAI,CAACjpB,UAAU,CAAC+oB,WAAW,CAAC,4BAAA,CAAA,CAAA;AAC9B,qBAAA;AACF,iBAAA;AACAqqC,gBAAAA,cAAAA,CAAeh8D,CAAC,GAAGnd,KAAAA,CAAAA;AACrB,aAAA;;;YAMIo5E,GAAAA,EAAAA,oBAAAA;;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACjB,mBAAmB,CAAA;AACjC,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAuBn4E,KAAa,EAAA;AAClC,gBAAA,IAAI,IAAI,CAACm4E,mBAAmB,KAAKn4E,KAAO,EAAA;oBACtC,IAAI,CAACm4E,mBAAmB,GAAGn4E,KAAAA,CAAAA;oBAE3B,IAAMm5E,cAAAA,GAAiB,IAAI,CAACpzD,UAAU,CAACkoB,UAAU,CAACiqC,WAtG3CA,CAsGuDM,mBAAmB,CAAA,CAAA;oBACjF,IAAMnhC,GAAAA,GAAMr4B,mBAASs4B,CAAAA,iBAAiB,GAAGt3C,KAAAA,CAAAA;AACzCm5E,oBAAAA,cAAAA,CAAejyE,CAAC,GAAGzD,IAAK2iB,CAAAA,GAAG,CAACixB,GAAAA,CAAAA,CAAAA;AAC5B8hC,oBAAAA,cAAAA,CAAehyE,CAAC,GAAG1D,IAAK0iB,CAAAA,GAAG,CAACkxB,GAAAA,CAAAA,CAAAA;AAC9B,iBAAA;AACF,aAAA;;;YAQIgiC,GAAAA,EAAAA,mBAAAA;;;;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAkB,IAAI,CAACtzD,UAAU,CAACyoB,UAAU,CApHnC0pC,YAoHgDoB,sBAAsB,CAAA,CAAA;AACjF,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAsBt5E,KAAgB,EAAA;gBACpC,IAAI,CAAC+lB,UAAU,CAAC0oB,UAAU,CAACypC,WAxHlBA,CAwH8BoB,sBAAsB,EAAEt5E,KAAAA,CAAAA,CAAAA;AAE/D,gBAAA,IAAIA,KAAO,EAAA;AACT,oBAAA,IAAI,CAAC+lB,UAAU,CAAC+oB,WAAW,CAAC,iCAAA,CAAA,CAAA;iBACvB,MAAA;AACL,oBAAA,IAAI,CAAC/oB,UAAU,CAACipB,YAAY,CAAC,iCAAA,CAAA,CAAA;AAC/B,iBAAA;AACF,aAAA;;;YAMIuqC,GAAAA,EAAAA,aAAAA;;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACxzD,UAAU,CAACooB,UAAU,CAAC+pC,WAtIzBA,CAsIqCO,oBAAoB,CAAA,CAAEvxE,CAAC,CAAA;AACvE,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAgBlH,KAAa,EAAA;AAC3BA,gBAAAA,KAAAA,GAAQyD,KAAKI,GAAG,CAAC,GAAGJ,IAAKoa,CAAAA,GAAG,CAAC,CAAG7d,EAAAA,KAAAA,CAAAA,CAAAA,CAAAA;gBAChC,IAAM24E,eAAAA,GAAkB,IAAI,CAAC5yD,UAAU,CAACooB,UAAU,CAAC+pC,WA3I1CA,CA2IsDO,oBAAoB,CAAA,CAAA;AACnF,gBAAA,IAAI,CAAC,CAACE,eAAAA,CAAgBzxE,CAAC,KAAK,CAAC,CAAClH,KAAO,EAAA;AACnC,oBAAA,IAAIA,UAAU,CAAG,EAAA;AACf,wBAAA,IAAI,CAAC+lB,UAAU,CAACipB,YAAY,CAAC,6BAAA,CAAA,CAAA;qBACxB,MAAA;AACL,wBAAA,IAAI,CAACjpB,UAAU,CAAC+oB,WAAW,CAAC,6BAAA,CAAA,CAAA;AAC9B,qBAAA;AACF,iBAAA;AACA6pC,gBAAAA,eAAAA,CAAgBzxE,CAAC,GAAGlH,KAAAA,CAAAA;AACtB,aAAA;;;YAKIw5E,GAAAA,EAAAA,oBAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAkB,IAAI,CAACzzD,UAAU,CAACyoB,UAAU,CA1JnC0pC,YA0JgDuB,uBAAuB,CAAA,CAAA;AAClF,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAuBz5E,KAAgB,EAAA;gBACrC,IAAI,CAAC+lB,UAAU,CAAC0oB,UAAU,CAACypC,WA9JlBA,CA8J8BuB,uBAAuB,EAAEz5E,KAAAA,CAAAA,CAAAA;AAEhE,gBAAA,IAAIA,KAAO,EAAA;AACT,oBAAA,IAAI,CAAC+lB,UAAU,CAAC+oB,WAAW,CAAC,kCAAA,CAAA,CAAA;iBACvB,MAAA;AACL,oBAAA,IAAI,CAAC/oB,UAAU,CAACipB,YAAY,CAAC,kCAAA,CAAA,CAAA;AAC/B,iBAAA;AACF,aAAA;;;YAMI0qC,GAAAA,EAAAA,gBAAAA;;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAAC3zD,UAAU,CAACooB,UAAU,CAAC+pC,WA5KzBA,CA4KqCO,oBAAoB,CAAA,CAAEtxE,CAAC,CAAA;AACvE,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAmBnH,KAAa,EAAA;gBAC9B,IAAM24E,eAAAA,GAAkB,IAAI,CAAC5yD,UAAU,CAACooB,UAAU,CAAC+pC,WAhL1CA,CAgLsDO,oBAAoB,CAAA,CAAA;AACnFE,gBAAAA,eAAAA,CAAgBxxE,CAAC,GAAG1D,IAAKI,CAAAA,GAAG,CAAC7D,KAAO,EAAA,GAAA,CAAA,CAAA;AACtC,aAAA;;;YAMI25E,GAAAA,EAAAA,2BAAAA;;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACvB,iBAAiB,CAAA;AAC/B,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAA8Bp4E,KAAc,EAAA;AAC1C,gBAAA,IAAI,IAAI,CAACo4E,iBAAiB,KAAKp4E,KAAO,EAAA;AACpC,oBAAA,IAAI,CAACo4E,iBAAiB,CAACv6E,QAAQ,CAACmC,KAAAA,CAAAA,CAAAA;AAClC,iBAAA;AACF,aAAA;;;YAQI45E,GAAAA,EAAAA,6BAAAA;;;;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAkB,IAAI,CAAC7zD,UAAU,CAACyoB,UAAU,CAzMnC0pC,YAyMgD2B,gCAAgC,CAAA,CAAA;AAC3F,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAgC75E,KAAgB,EAAA;gBAC9C,IAAI,CAAC+lB,UAAU,CAAC0oB,UAAU,CAACypC,WA7MlBA,CA6M8B2B,gCAAgC,EAAE75E,KAAAA,CAAAA,CAAAA;AAEzE,gBAAA,IAAIA,KAAO,EAAA;AACT,oBAAA,IAAI,CAAC+lB,UAAU,CAAC+oB,WAAW,CAAC,4CAAA,CAAA,CAAA;iBACvB,MAAA;AACL,oBAAA,IAAI,CAAC/oB,UAAU,CAACipB,YAAY,CAAC,4CAAA,CAAA,CAAA;AAC/B,iBAAA;AACF,aAAA;;;AApNWkpC,IAAAA,OAAAA,WAAAA,CAAAA;EAAoBpB,eAqPhC,EAAA;AArPYoB,WACIG,CAAAA,aAAAA,GAAgBr0D,cAAezD,CAAAA,SAAS,CAAC,gBAAA,CAAA,CAAA;AAD7C23D,WAEII,CAAAA,cAAAA,GAAiBt0D,cAAezD,CAAAA,SAAS,CAAC,oBAAA,CAAA,CAAA;AAF9C23D,WAGIe,CAAAA,6BAAAA,GAAgCj1D,cAAezD,CAAAA,SAAS,CAAC,mCAAA,CAAA,CAAA;AAH7D23D,WAKIK,CAAAA,QAAAA,GAAWv0D,cAAezD,CAAAA,SAAS,CAAC,cAAA,CAAA,CAAA;AALxC23D,WAOIM,CAAAA,mBAAAA,GAAsBx0D,cAAezD,CAAAA,SAAS,CAAC,yBAAA,CAAA,CAAA;AAPnD23D,WAQIoB,CAAAA,sBAAAA,GAAyBt1D,cAAezD,CAAAA,SAAS,CAAC,4BAAA,CAAA,CAAA;AARtD23D,WAYIO,CAAAA,oBAAAA,GAAuBz0D,cAAezD,CAAAA,SAAS,CAAC,0BAAA,CAAA,CAAA;AAZpD23D,WAaI2B,CAAAA,gCAAAA,GAAmC71D,cAAezD,CAAAA,SAAS,CAAC,sCAAA,CAAA,CAAA;AAbhE23D,WAcIuB,CAAAA,uBAAAA,GAA0Bz1D,cAAezD,CAAAA,SAAS,CAAC,6BAAA,CAAA;;AChBpE;;IAGO,IAAMu5D,mBAAN,iBAAA,SAAA,eAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,mBAAAA,EAAAA,eAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,mBAAAA,CAsDC57E,MAAc,EAAA;;gBACxB,eAAMA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAAQo9B,MAAO6Q,CAAAA,IAAI,CAAC,cAAA,CAAA,CAAA,IAAA,IAAA,CAAA;AAE1B,QAAA,KAAA,CAAKpmB,UAAU,CAACwoB,QAAQ,CAACurC,mBAzDhBA,CAyDoC9D,kBAAkB,EAAE,IAAIlnD,gBAAAA,CAAM,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,CAAA,CAAA,CAAA;AACpF,QAAA,KAAA,CAAK/I,UAAU,CAAConB,QAAQ,CAAC2sC,mBA1DhBA,CA0DoCC,eAAe,EAAE,GAAA,CAAA,CAAA;;;AA1DrDD,IAAAA,IAAAA,MAAAA,GAAAA,mBAAAA,CAAAA,SAAAA,CAAAA;AA6DX;;MAGA,MAAA,CAASr9D,KAIR,GAJD,SAASA,KAAAA,GAAAA;AACP,QAAA,IAAMu3D,IAAO,GAAA,IAjEJ8F,mBAiE4B,CAAA,IAAI,CAACx7E,OAAO,CAAA,CAAA;QACjD,IAAI,CAACkxC,OAAO,CAACwkC,IAAAA,CAAAA,CAAAA;QACb,OAAOA,IAAAA,CAAAA;AACT,KAAA,CAAA;AApEW8F,IAAAA,aAAAA,CAAAA,mBAAAA,EAAAA;;YAWP1D,GAAAA,EAAAA,eAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACrwD,UAAU,CAAC+Y,QAAQ,CAZtBg7C,oBAY2C9D,kBAAkB,CAAA,CAAA;AACxE,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAkBh2E,KAAY,EAAA;gBAC5B,IAAMo2E,aAAAA,GAAgB,IAAI,CAACrwD,UAAU,CAAC+Y,QAAQ,CAACg7C,mBAhBtCA,CAgB0D9D,kBAAkB,CAAA,CAAA;AACrF,gBAAA,IAAIh2E,UAAUo2E,aAAe,EAAA;AAC3BA,oBAAAA,aAAAA,CAAcv4E,QAAQ,CAACmC,KAAAA,CAAAA,CAAAA;AACzB,iBAAA;AACF,aAAA;;;YAKIg6E,GAAAA,EAAAA,YAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACj0D,UAAU,CAAC8X,QAAQ,CA1BtBi8C,oBA0B2CC,eAAe,CAAA,CAAA;AACrE,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAe/5E,KAAa,EAAA;gBAC1B,IAAI,CAAC+lB,UAAU,CAAConB,QAAQ,CAAC2sC,mBA9BhBA,CA8BoCC,eAAe,EAAE/5E,KAAAA,CAAAA,CAAAA;AAChE,aAAA;;;YAMIi6E,GAAAA,EAAAA,2BAAAA;;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAkB,IAAI,CAACl0D,UAAU,CAACyoB,UAAU,CAtCnCsrC,oBAsCwDI,8BAA8B,CAAA,CAAA;AACjG,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAA8Bl6E,KAAgB,EAAA;gBAC5C,IAAI,CAAC+lB,UAAU,CAAC0oB,UAAU,CAACqrC,mBA1ClBA,CA0CsCI,8BAA8B,EAAEl6E,KAAAA,CAAAA,CAAAA;AAC/E,gBAAA,IAAIA,KAAO,EAAA;AACT,oBAAA,IAAI,CAAC+lB,UAAU,CAAC+oB,WAAW,CA5CpBgrC,oBA4CyCK,+BAA+B,CAAA,CAAA;iBAC1E,MAAA;AACL,oBAAA,IAAI,CAACp0D,UAAU,CAACipB,YAAY,CA9CrB8qC,oBA8C0CK,+BAA+B,CAAA,CAAA;AAClF,iBAAA;AACF,aAAA;;;AAhDWL,IAAAA,OAAAA,mBAAAA,CAAAA;EAA4BhD,eAqExC,EAAA;AArEYgD,mBACI9D,CAAAA,kBAAAA,GAAqBhyD,cAAezD,CAAAA,SAAS,CAAC,2BAAA,CAAA,CAAA;AADlDu5D,mBAEIC,CAAAA,eAAAA,GAAkB/1D,cAAezD,CAAAA,SAAS,CAAC,qBAAA,CAAA,CAAA;AAF/Cu5D,mBAGII,CAAAA,8BAAAA,GAAiCl2D,cAAezD,CAAAA,SAAS,CAAC,oCAAA,CAAA,CAAA;AAH9Du5D,mBAIIK,CAAAA,+BAAAA,GAA+Ct6D,WAAYU,CAAAA,SAAS,CACjF,0CAAA,CAAA;;ACVJ;;IAGO,IAAM65D,aAAN,iBAAA,SAAA,YAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,aAAAA,EAAAA,YAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,aAAAA,CAiDCl8E,MAAc,EAAA;;gBACxB,YAAMA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAAQo9B,MAAO6Q,CAAAA,IAAI,CAAC,OAAA,CAAA,CAAA,IAAA,IAAA,CAAA;QAE1B,IAAMpmB,UAAAA,GAAa,MAAKA,UAAU,CAAA;AAElCA,QAAAA,UAAAA,CAAW+oB,WAAW,CAAC,sBAAA,CAAA,CAAA;AACvB/oB,QAAAA,UAAAA,CAAW+oB,WAAW,CAAC,6BAAA,CAAA,CAAA;QAEvB/oB,UAAWwoB,CAAAA,QAAQ,CAzDV6rC,aAyDyB5E,CAAAA,cAAc,EAAE,IAAI1mD,gBAAAA,CAAM,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,CAAA,CAAA,CAAA;QACrE/I,UAAWM,CAAAA,UAAU,CA1DZ+zD,aA0D2B1E,CAAAA,iBAAiB,EAAE,IAAIz7E,kBAAAA,CAAQ,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,CAAA,CAAA,CAAA;;;AA1DnEmgF,IAAAA,IAAAA,MAAAA,GAAAA,aAAAA,CAAAA,SAAAA,CAAAA;AA6DX;;MAGA,MAAA,CAAS39D,KAIR,GAJD,SAASA,KAAAA,GAAAA;AACP,QAAA,IAAMu3D,IAAO,GAAA,IAjEJoG,aAiEsB,CAAA,IAAI,CAAC97E,OAAO,CAAA,CAAA;QAC3C,IAAI,CAACkxC,OAAO,CAACwkC,IAAAA,CAAAA,CAAAA;QACb,OAAOA,IAAAA,CAAAA;AACT,KAAA,CAAA;AApEWoG,IAAAA,aAAAA,CAAAA,aAAAA,EAAAA;;YAIPlE,GAAAA,EAAAA,WAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACnwD,UAAU,CAAC+Y,QAAQ,CALtBs7C,cAKqC5E,cAAc,CAAA,CAAA;AAC9D,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAcx1E,KAAY,EAAA;gBACxB,IAAMk2E,SAAAA,GAAY,IAAI,CAACnwD,UAAU,CAAC+Y,QAAQ,CAACs7C,aATlCA,CASgD5E,cAAc,CAAA,CAAA;AACvE,gBAAA,IAAIx1E,UAAUk2E,SAAW,EAAA;AACvBA,oBAAAA,SAAAA,CAAUr4E,QAAQ,CAACmC,KAAAA,CAAAA,CAAAA;AACrB,iBAAA;AACF,aAAA;;;YAKIm2E,GAAAA,EAAAA,aAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAkB,IAAI,CAACpwD,UAAU,CAACyoB,UAAU,CAnBnC4rC,cAmBkD3E,gBAAgB,CAAA,CAAA;AAC7E,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAgBz1E,KAAgB,EAAA;gBAC9B,IAAI,CAAC+lB,UAAU,CAAC0oB,UAAU,CAAC2rC,aAvBlBA,CAuBgC3E,gBAAgB,EAAEz1E,KAAAA,CAAAA,CAAAA;AAC3D,gBAAA,IAAIA,KAAO,EAAA;AACT,oBAAA,IAAI,CAAC+lB,UAAU,CAAC+oB,WAAW,CAzBpBsrC,cAyBmC/E,iBAAiB,CAAA,CAAA;iBACtD,MAAA;AACL,oBAAA,IAAI,CAACtvD,UAAU,CAACipB,YAAY,CA3BrBorC,cA2BoC/E,iBAAiB,CAAA,CAAA;AAC9D,iBAAA;AACF,aAAA;;;YAKIuB,GAAAA,EAAAA,cAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAAC7wD,UAAU,CAACooB,UAAU,CAnCxBisC,cAmCuC1E,iBAAiB,CAAA,CAAA;AACnE,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAiB11E,KAAc,EAAA;gBAC7B,IAAM42E,YAAAA,GAAe,IAAI,CAAC7wD,UAAU,CAACooB,UAAU,CAACisC,aAvCvCA,CAuCqD1E,iBAAiB,CAAA,CAAA;AAC/E,gBAAA,IAAI11E,UAAU42E,YAAc,EAAA;AAC1BA,oBAAAA,YAAAA,CAAa/4E,QAAQ,CAACmC,KAAAA,CAAAA,CAAAA;AACxB,iBAAA;AACF,aAAA;;;AA3CWo6E,IAAAA,OAAAA,aAAAA,CAAAA;EAAsBhG,YAqElC;;AC3ED;;IAGO,IAAMiG,eAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,eAAAA,CA8DTC,MAAc,EACdC,cAAyB,EACzBC,YAA8B,EAC9BC,aAA+B,EAAA;AAD/BD,QAAAA,IAAAA,yBAAAA,YAA0B,GAAA,IAAA,CAAA;AAC1BC,QAAAA,IAAAA,0BAAAA,aAA2B,GAAA,IAAA,CAAA;yBA7Df,IAAA,CACdC,qBAAwC,IAAI3gE,iBAAAA,EAAAA,CAAAA;AAEpC4gE,QAAAA,IAAAA,CAAAA,MAAAA,GAAAA,CAAAA,CAAAA;AA4DN,QAAA,IAAIH,gBAAgBA,YAAaj9E,CAAAA,MAAM,KAAKg9E,cAAAA,CAAeh9E,MAAM,EAAE;YACjE,MAAM,2DAAA,CAAA;AACR,SAAA;AAEA,QAAA,IAAIk9E,iBAAiBA,aAAcl9E,CAAAA,MAAM,KAAKg9E,cAAAA,CAAeh9E,MAAM,EAAE;YACnE,MAAM,4DAAA,CAAA;AACR,SAAA;QAEA,IAAI,CAAC+8E,MAAM,GAAGA,MAAAA,CAAAA;QACd,IAAI,CAACM,eAAe,GAAGL,cAAAA,CAAAA;QACvB,IAAI,CAACM,aAAa,GAAGL,YAAAA,CAAAA;QACrB,IAAI,CAACM,cAAc,GAAGL,aAAAA,CAAAA;;AA9EbJ,IAAAA,IAAAA,MAAAA,GAAAA,eAAAA,CAAAA,SAAAA,CAAAA;AAiFX;;MAGAU,MAAAA,CAAAA,YAIC,GAJDA,SAAAA,YAAAA,GAAAA;QACE,IAAI,CAACH,eAAe,GAAG,IAAA,CAAA;QACvB,IAAI,CAACC,aAAa,GAAG,IAAA,CAAA;QACrB,IAAI,CAACC,cAAc,GAAG,IAAA,CAAA;AACxB,KAAA,CAAA;AAxFWT,IAAAA,aAAAA,CAAAA,eAAAA,EAAAA;;YAgBPE,GAAAA,EAAAA,gBAAAA;;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACK,eAAe,CAAA;AAC7B,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAmB56E,KAAgB,EAAA;gBACjC,IAAI,CAAC46E,eAAe,GAAG56E,KAAAA,CAAAA;AACvB,gBAAA,IAAI,CAAC26E,MAAM,IAAA,CAAA,CAAA;gBACX,IAAI,CAACD,kBAAkB,CAAC//D,QAAQ,CAAC,IAAI,CAACggE,MAAM,EAAE,IAAI,CAAA,CAAA;AACpD,aAAA;;;YAMIH,GAAAA,EAAAA,cAAAA;;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACK,aAAa,CAAA;AAC3B,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAiB76E,KAAgB,EAAA;gBAC/B,IAAI,CAAC66E,aAAa,GAAG76E,KAAAA,CAAAA;AACrB,gBAAA,IAAI,CAAC26E,MAAM,IAAA,CAAA,CAAA;gBACX,IAAI,CAACD,kBAAkB,CAAC//D,QAAQ,CAAC,IAAI,CAACggE,MAAM,EAAE,IAAI,CAAA,CAAA;AACpD,aAAA;;;YAMIF,GAAAA,EAAAA,eAAAA;;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACK,cAAc,CAAA;AAC5B,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAkB96E,KAAgB,EAAA;gBAChC,IAAI,CAAC86E,cAAc,GAAG96E,KAAAA,CAAAA;AACtB,gBAAA,IAAI,CAAC26E,MAAM,IAAA,CAAA,CAAA;gBACX,IAAI,CAACD,kBAAkB,CAAC//D,QAAQ,CAAC,IAAI,CAACggE,MAAM,EAAE,IAAI,CAAA,CAAA;AACpD,aAAA;;;AApDWN,IAAAA,OAAAA,eAAAA,CAAAA;AAyFZ,CAAA,GAAA;AAEM,IAAA,oBAAKW,iBAAAA,SAAAA,oBAAAA,EAAAA;;;;;AAAAA,IAAAA,OAAAA,oBAAAA,CAAAA;AAKX,CAAA,CAAA,EAAA,CAAA;;AClGD;;IAGO,IAAMC,UAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,UAAAA,CA0BClpE,IAAY,EAAA;AAtBxB,8BACAmpE,oBAAgC,GAAA,IAAA,CAAA;AAChC,8BACAC,qBAAiC,GAAA,IAAA,CAAA;yBACnB,IAAA,CACdC,uBAA0C,IAAIrhE,iBAAAA,EAAAA,CAAAA;yBAChC,IAAA,CACd2gE,qBAAwC,IAAI3gE,iBAAAA,EAAAA,CAAAA;AAEpCshE,QAAAA,IAAAA,CAAAA,OAAAA,GAA6B,EAAE,CAAA;QAcrC,IAAI,CAACtpE,IAAI,GAAGA,IAAAA,CAAAA;QACZ,IAAI,CAACupE,wBAAwB,GAAG,IAAI,CAACA,wBAAwB,CAAC75E,IAAI,CAAC,IAAI,CAAA,CAAA;;AA5B9Dw5E,IAAAA,IAAAA,MAAAA,GAAAA,UAAAA,CAAAA,SAAAA,CAAAA;IAmDXM,MAAAA,CAAAA,QAaC,GAbDA,SAAAA,QACEC,CAAAA,aAAuC,EACvCjB,cAA0B,EAC1BC,YAAwB,EACxBC,aAAyB,EAAA;QAEzB,IAAI,OAAOe,kBAAkB,QAAU,EAAA;AACrC,YAAA,IAAMC,KAAQ,GAAA,IAAIpB,eAAgBmB,CAAAA,aAAAA,EAAejB,gBAAgBC,YAAcC,EAAAA,aAAAA,CAAAA,CAAAA;YAC/E,IAAI,CAACiB,SAAS,CAACD,KAAAA,CAAAA,CAAAA;YACf,OAAOA,KAAAA,CAAAA;SACF,MAAA;YACL,IAAI,CAACC,SAAS,CAACF,aAAAA,CAAAA,CAAAA;AACjB,SAAA;AACF,KAAA,CAAA;AAEA;;MAGAG,MAAAA,CAAAA,WASC,GATDA,SAAAA,WAAAA,GAAAA;QACE,IAAMC,MAAAA,GAAS,IAAI,CAACP,OAAO,CAAA;QAE3B,IAAK,IAAI19E,IAAI,CAAG0B,EAAAA,CAAAA,GAAIu8E,OAAOr+E,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;YAC7Ci+E,MAAM,CAACj+E,EAAE,CAAC+8E,kBAAkB,CAAChgE,cAAc,CAAC,IAAI,CAAC4gE,wBAAwB,CAAA,CAAA;AAC3E,SAAA;AACAM,QAAAA,MAAAA,CAAOr+E,MAAM,GAAG,CAAA,CAAA;QAChB,IAAI,CAACs+E,0BAA0B,CAAC,IAAM,EAAA,IAAA,CAAA,CAAA;QACtC,IAAI,CAACnB,kBAAkB,CAAC//D,QAAQ,EAAA,CAAA;AAClC,KAAA,CAAA;AAEA;;MAGAogE,MAAAA,CAAAA,YAKC,GALDA,SAAAA,YAAAA,GAAAA;QACE,IAAMa,MAAAA,GAAS,IAAI,CAACP,OAAO,CAAA;QAC3B,IAAK,IAAI19E,IAAI,CAAG0B,EAAAA,CAAAA,GAAIu8E,OAAOr+E,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;YAC7Ci+E,MAAM,CAACj+E,CAAE,CAAA,CAACo9E,YAAY,EAAA,CAAA;AACxB,SAAA;AACF,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQW,SAUP,GAVD,SAAQA,SAAAA,CAAUD,KAAsB,EAAA;QACtC,IAAMG,MAAAA,GAAS,IAAI,CAACP,OAAO,CAAA;QAC3B,IAAM70D,UAAAA,GAAao1D,OAAOr+E,MAAM,CAAA;AAChC,QAAA,IAAIipB,UAAa,GAAA,CAAA,IAAKi1D,KAAMlB,CAAAA,cAAc,CAACh9E,MAAM,KAAKq+E,MAAM,CAACp1D,aAAa,CAAE,CAAA,CAAC+zD,cAAc,CAACh9E,MAAM,EAAE;YAClG,MAAM,kFAAA,CAAA;AACR,SAAA;AACA,QAAA,IAAI,CAAC89E,OAAO,CAAC57E,IAAI,CAACg8E,KAAAA,CAAAA,CAAAA;AAElB,QAAA,IAAI,CAACH,wBAAwB,CAACN,oBAAAA,CAAqB79C,GAAG,EAAEs+C,KAAAA,CAAAA,CAAAA;AACxDA,QAAAA,KAAAA,CAAMf,kBAAkB,CAAClgE,WAAW,CAAC,IAAI,CAAC8gE,wBAAwB,CAAA,CAAA;AACpE,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQO,0BAQP,GARD,SAAQA,0BAA2BC,CAAAA,SAAkB,EAAEC,UAAmB,EAAA;AACxE,QAAA,IAAMC,mBAAsB,GAAA,IAAI,CAACd,oBAAoB,IAAIY,SAAAA,CAAAA;AACzD,QAAA,IAAMG,oBAAuB,GAAA,IAAI,CAACd,qBAAqB,IAAIY,UAAAA,CAAAA;QAC3D,IAAI,IAAI,CAACb,oBAAoB,KAAKc,uBAAuB,IAAI,CAACb,qBAAqB,KAAKc,oBAAsB,EAAA;YAC5G,IAAI,CAACf,oBAAoB,GAAGc,mBAAAA,CAAAA;YAC5B,IAAI,CAACb,qBAAqB,GAAGc,oBAAAA,CAAAA;AAC7B,YAAA,IAAI,CAACb,oBAAoB,CAACzgE,QAAQ,CAAC,GAAG,IAAI,CAAA,CAAA;AAC5C,SAAA;AACF,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQ2gE,wBAGP,GAHD,SAAQA,wBAAyB1/E,CAAAA,IAA0B,EAAE6/E,KAAsB,EAAA;QACjF,IAAI,CAACI,0BAA0B,CAAC,CAAC,CAACJ,KAAMjB,CAAAA,YAAY,EAAE,CAAC,CAACiB,KAAAA,CAAMhB,aAAa,CAAA,CAAA;QAC3E,IAAI,CAACC,kBAAkB,CAAC//D,QAAQ,EAAA,CAAA;AAClC,KAAA,CAAA;AAnHWsgE,IAAAA,aAAAA,CAAAA,UAAAA,EAAAA;;YAkBPW,GAAAA,EAAAA,QAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACP,OAAO,CAAA;AACrB,aAAA;;;AApBWJ,IAAAA,OAAAA,UAAAA,CAAAA;AAoHZ,CAAA;;ACxHD;;IAGO,IAAMiB,kBAAN,iBAAA,WAAA;aAAMA,kBAyBCprE,CAAAA,MAAc,EAAE3M,MAAmB,EAAA;QAC7C,IAAI,CAACg4E,OAAO,GAAGrrE,MAAAA,CAAAA;QACf,IAAI,CAAC5M,OAAO,GAAGC,MAAAA,CAAAA;;AA3BN+3E,IAAAA,aAAAA,CAAAA,kBAAAA,EAAAA;;YASPprE,GAAAA,EAAAA,QAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACqrE,OAAO,CAAA;AACrB,aAAA;;;YAKIh4E,GAAAA,EAAAA,QAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACD,OAAO,CAAA;AACrB,aAAA;;;AAlBWg4E,IAAAA,OAAAA,kBAAAA,CAAAA;AA6BZ,CAAA;;ACjCD;;IAGO,IAAME,YAAN,GAAA,SAAMA,aAaChhD,KAAiB,EAAElY,KAAiB,EAAEm5D,QAA+C,EAAA;AAArFjhD,IAAAA,IAAAA,kBAAAA,KAAgB,GAAA,CAAA,CAAA;AAAGlY,IAAAA,IAAAA,kBAAAA,KAAgB,GAAA,CAAA,CAAA;IAAGm5D,IAAAA,QAAAA,KAAAA,KAAAA,CAAAA,EAAAA,QAAyBzI,GAAAA,YAAAA,CAAa0I,SAAS,CAAA;IAC/F,IAAI,CAAClhD,KAAK,GAAGA,KAAAA,CAAAA;IACb,IAAI,CAAClY,KAAK,GAAGA,KAAAA,CAAAA;IACb,IAAI,CAACm5D,QAAQ,GAAGA,QAAAA,CAAAA;AAEnB;;ACpBD;;IAGO,IAAME,OAAN,iBAAA,SAAA,YAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,OAAAA,EAAAA,YAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,OAAAA,GAAAA;;;AAAAA,IAAAA,IAAAA,MAAAA,GAAAA,OAAAA,CAAAA,SAAAA,CAAAA;IACXriF,MAAAA,CAAAA,OAAmB,GAAnBA,SAAAA,OAAkB,GAAA,EAAA,CAAA;AADPqiF,IAAAA,OAAAA,OAAAA,CAAAA;EAAgBH,YAE5B;;ACED;;;IAIO,IAAMI,SAAN,iBAAA,SAAA,gBAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,SAAAA,EAAAA,gBAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,SAAAA,CA0BCt+E,MAAc,EAAA;;AACxB,QAAA,KAAA,GAAA,gBAAA,CAAA,IAAA,CAAA,IAAA,EAAMA,uBA1BRu+E,SAAqB,GAAA,IAAA,EAAA,KAAA,CACrBC,gBAAwB,CACxBC,EAAAA,KAAAA,CAAAA,oBAAAA,GAA8C,EAAE,mBAGhDC,KAAAA,CAAAA,iBAAAA,GAAmD,EAKnD,yBACAC,oBAAgC,GAAA,KAAA,EAAA,KAAA,CAExBC,kBAAmC,EAAE,CAAA;AAc3C,QAAA,KAAA,CAAKC,kBAAkB,GAAG7+E,MAAOiF,CAAAA,iBAAiB,CAAC65E,uBAAuB,CAAA,KAAA,CAAA,CAAA;;;AA5BjER,IAAAA,IAAAA,MAAAA,GAAAA,SAAAA,CAAAA,SAAAA,CAAAA;AA+BXS,IAAAA,MAAAA,CAAAA,gBAaC,GAbDA,SAAAA,gBAAAA,CAAiBjkE,OAAsB,EAAA;QACrC,IAAMkkE,gBAAAA,GAAmB,IAAI,CAACN,iBAAiB,CAAA;QAC/C,IAAMO,cAAAA,GAAiB,IAAI,CAACL,eAAe,CAAA;QAE3C,IAAMpJ,QAAAA,GAAW16D,QAAQk6D,SAAS,CAAA;QAClC,IAAMkK,gBAAAA,GAAmBF,gBAAgB,CAACxJ,QAAS,CAAA,CAAA;AACnD,QAAA,IAAI0J,gBAAkB,EAAA;AACpB77E,YAAAA,OAAAA,CAAQI,IAAI,CAAC,gBAAC,GAAgB+xE,QAAS,GAAA,kBAAA,CAAA,CAAA;AACvCyJ,YAAAA,cAAAA,CAAet9E,MAAM,CAACs9E,cAAev9E,CAAAA,OAAO,CAACw9E,gBAAmB,CAAA,EAAA,CAAA,CAAA,CAAA;AAClE,SAAA;QACAF,gBAAgB,CAACxJ,SAAS,GAAG16D,OAAAA,CAAAA;AAC7BmkE,QAAAA,cAAAA,CAAe19E,IAAI,CAACuZ,OAAAA,CAAAA,CAAAA;QACpB,IAAI,CAAC6jE,oBAAoB,GAAG,IAAA,CAAA;AAC9B,KAAA,CAAA;AAEAQ,IAAAA,MAAAA,CAAAA,mBAOC,GAPDA,SAAAA,mBAAAA,CAAoB19E,KAAa,EAAA;QAC/B,IAAMw9E,cAAAA,GAAiB,IAAI,CAACL,eAAe,CAAA;;QAE3C,IAAMQ,aAAAA,GAAgBH,cAAc,CAACx9E,KAAM,CAAA,CAAA;QAC3Cw9E,cAAet9E,CAAAA,MAAM,CAACF,KAAO,EAAA,CAAA,CAAA,CAAA;AAC7B,QAAA,OAAO,IAAI,CAACi9E,iBAAiB,CAACU,aAAAA,CAAcpK,SAAS,CAAC,CAAA;QACtD,IAAI,CAAC2J,oBAAoB,GAAG,IAAA,CAAA;AAC9B,KAAA,CAAA;IAEAU,MAAAA,CAAAA,mBAOC,GAPDA,SAAAA,mBAAAA,GAAAA;AACE,QAAA,IAAI,CAACT,eAAe,CAACv/E,MAAM,GAAG,CAAA,CAAA;QAC9B,IAAM2/E,gBAAAA,GAAmB,IAAI,CAACN,iBAAiB,CAAA;QAC/C,IAAK,IAAMrgF,KAAK2gF,gBAAkB,CAAA;YAChC,OAAOA,gBAAgB,CAAC3gF,CAAE,CAAA,CAAA;AAC5B,SAAA;QACA,IAAI,CAACsgF,oBAAoB,GAAG,IAAA,CAAA;AAC9B,KAAA,CAAA;AAEA;;AAEC,MACDW,OAAAA,gBAWC,GAXDA,SAAAA,gBAAiB79E,CAAAA,KAAa,EAAEqZ,OAAsB,EAAA;QACpD,IAAMkkE,gBAAAA,GAAmB,IAAI,CAACN,iBAAiB,CAAA;QAC/C,IAAMO,cAAAA,GAAiB,IAAI,CAACL,eAAe,CAAA;;QAG3C,IAAMM,gBAAAA,GAAmBD,cAAc,CAACx9E,KAAM,CAAA,CAAA;AAC9Cy9E,QAAAA,gBAAAA,IAAoB,OAAOF,gBAAgB,CAACE,gBAAAA,CAAiBlK,SAAS,CAAC,CAAA;AAEvEgK,QAAAA,gBAAgB,CAAClkE,OAAAA,CAAQk6D,SAAS,CAAC,GAAGl6D,OAAAA,CAAAA;QACtCmkE,cAAc,CAACx9E,MAAM,GAAGqZ,OAAAA,CAAAA;QACxB,IAAI,CAAC6jE,oBAAoB,GAAG,IAAA,CAAA;AAC9B,KAAA,CAAA;AAEAY,IAAAA,MAAAA,CAAAA,uBASC,GATDA,SAAAA,uBAAAA,CAAwBlgF,MAAc,EAAA;QACpC,IAAM2/E,gBAAAA,GAAmB,IAAI,CAACN,iBAAiB,CAAA;QAC/C,IAAMO,cAAAA,GAAiB,IAAI,CAACL,eAAe,CAAA;QAE3C,IAAK,IAAIn/E,IAAIJ,MAAQ8B,EAAAA,CAAAA,GAAI89E,eAAe5/E,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;YAC1D,IAAMqb,OAAAA,GAAUmkE,cAAc,CAACx/E,CAAE,CAAA,CAAA;AACjC,YAAA,OAAOu/E,gBAAgB,CAAClkE,OAAQk6D,CAAAA,SAAS,CAAC,CAAA;AAC5C,SAAA;AACAiK,QAAAA,cAAAA,CAAe5/E,MAAM,GAAGA,MAAAA,CAAAA;AAC1B,KAAA,CAAA;AAEAmgF,IAAAA,MAAAA,CAAAA,sBASC,GATDA,SAAAA,sBAAuB/9E,CAAAA,KAAa,EAAEg+E,OAA4B,EAAA;QAChE,IAAMluC,UAAAA,GAAa,IAAI,CAAC3vC,cAAc,EAAA,CAAA;QACtC,IAAM68E,oBAAAA,GAAuB,IAAI,CAACA,oBAAoB,CAAA;AACtD,QAAA,IAAIltC,aAAa,CAAG,EAAA;AAClBktC,YAAAA,IAAAA,2BAAAA,CAAAA;aAAAA,2BAAAA,GAAAA,oBAAoB,CAACh9E,KAAM,CAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAA3Bg9E,4BAA6B7rE,MAAM,CAAC/Q,cAAc,CAAC,CAAC0vC,UAAAA,CAAAA,CAAAA;AACpDkuC,YAAAA,OAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAAS7sE,CAAAA,MAAM,CAAC/Q,cAAc,CAAC0vC,UAAAA,CAAAA,CAAAA;AACjC,SAAA;QACAktC,oBAAoB,CAACh9E,MAAM,GAAGg+E,OAAAA,CAAAA;QAC9B,IAAI,CAACd,oBAAoB,GAAG,IAAA,CAAA;AAC9B,KAAA,CAAA;AAEA;;;;AAIC,MACDe,OAAAA,uBAQC,GARDA,SAAAA,uBAAwBjB,CAAAA,oBAA2C,EAAEkB,UAAsB,EAAA;AAAtBA,QAAAA,IAAAA,uBAAAA,UAAqB,GAAA,CAAA,CAAA;QACxF,IAAMC,QAAAA,GAAW,IAAI,CAACnB,oBAAoB,CAAA;QAC1C,IAAMz5D,KAAAA,GAAQy5D,qBAAqBp/E,MAAM,CAAA;AACzC,QAAA,IAAMwgF,aAAaF,UAAa36D,GAAAA,KAAAA,CAAAA;AAChC46D,QAAAA,QAAAA,CAASvgF,MAAM,GAAGwgF,UAAAA,KAAeD,QAASvgF,CAAAA,MAAM,GAAGwgF,UAAS,CAAA,CAAA;AAC5D,QAAA,IAAK,IAAIpgF,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAIulB,OAAOvlB,CAAK,EAAA,CAAA;AAC9B,YAAA,IAAI,CAAC+/E,sBAAsB,CAACG,aAAalgF,CAAGg/E,EAAAA,oBAAoB,CAACh/E,CAAE,CAAA,CAAA,CAAA;AACrE,SAAA;AACF,KAAA,CAAA;AAEAqgF,IAAAA,MAAAA,CAAAA,qBAgBC,GAhBDA,SAAAA,qBAAAA,CAAsBL,OAAkC,EAAA;QACtD,IAAMM,WAAAA,GAAc,IAAI,CAACC,kBAAkB,CAAA;QAC3C,IAAMzuC,UAAAA,GAAa,IAAI,CAAC3vC,cAAc,EAAA,CAAA;AAEtC,QAAA,IAAIm+E,gBAAgBN,OAAS,EAAA;YAC3B,IAAI,CAACQ,mBAAmB,GAAGR,OAAAA,CAAAA;AAC3BluC,YAAAA,UAAAA,GAAa,MAAKwuC,WAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,WAAAA,CAAantE,MAAM,CAAC/Q,cAAc,CAAC,CAAC0vC,UAAAA,CAAAA,CAAAA,CAAAA;AACtD,YAAA,IAAIkuC,OAAS,EAAA;AACXluC,gBAAAA,UAAAA,GAAa,CAAKkuC,IAAAA,OAAAA,CAAQ7sE,MAAM,CAAC/Q,cAAc,CAAC0vC,UAAAA,CAAAA,CAAAA;AAChD,gBAAA,IAAI,CAAC2uC,YAAY,GAAG7M,WAAWC,eAAe,CAACmM,QAAQx5E,MAAM,CAAA,CAAA;AAC7D,gBAAA,IAAI,CAACk6E,iBAAiB,GAAG9M,WAAWS,oBAAoB,CAAC2L,QAAQx5E,MAAM,CAAA,CAAA;aAClE,MAAA;gBACL,IAAI,CAACi6E,YAAY,GAAGvhF,SAAAA,CAAAA;AACtB,aAAA;YACA,IAAI,CAACggF,oBAAoB,GAAGoB,CAAAA,WAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,YAAantE,MAAM,OAAK6sE,OAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAAAA,CAAS7sE,MAAM,CAAA,CAAA;AACrE,SAAA;AACF,KAAA,CAAA;AAEAwtE,IAAAA,MAAAA,CAAAA,IAGC,GAHDA,SAAAA,IAAK/jD,CAAAA,aAA4B,EAAE6W,OAAqB,EAAA;AACtD,QAAA,IAAI,CAAC2rC,kBAAkB,CAACuB,IAAI,CAAC/jD,aAAe6W,EAAAA,OAAAA,CAAAA,CAAAA;QAC5C,IAAI,CAACyrC,oBAAoB,GAAG,KAAA,CAAA;AAC9B,KAAA,CAAA;AAEA,IAAA,MAAA,CAAS98E,cAOR,GAPD,SAASA,cAAAA,CAAeC,KAAa,EAAA;AAMnC,QAAA,IAAA,wBAAA,CAAA;AALA,QAAA,gBAAA,CAAA,SAAA,CAAMD,cAAD,CAAgBC,IAAAA,CAAAA,IAAAA,EAAAA,KAAAA,CAAAA,CAAAA;QACrB,IAAM28E,oBAAAA,GAAuB,IAAI,CAACA,oBAAoB,CAAA;QACtD,IAAK,IAAIh/E,IAAI,CAAG0B,EAAAA,CAAAA,GAAIs9E,qBAAqBp/E,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;AAC3Dg/E,YAAAA,IAAAA,uBAAAA,CAAAA;aAAAA,uBAAAA,GAAAA,oBAAoB,CAACh/E,CAAE,CAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAvBg/E,wBAAyB7rE,MAAM,CAAC/Q,cAAc,CAACC,KAAAA,CAAAA,CAAAA;AACjD,SAAA;SACA,wBAAA,GAAA,IAAI,CAACk+E,kBAAkB,KAAA,IAAA,GAAA,KAAA,CAAA,GAAvB,yBAAyB/B,OAAO,CAACp8E,cAAc,CAACC,KAAAA,CAAAA,CAAAA;AAClD,KAAA,CAAA;IAEA,MAAS0C,CAAAA,QAGR,GAHD,SAASA,QAAAA,GAAAA;AACP,QAAA,IAAI,CAACpE,OAAO,CAAC6E,iBAAiB,CAAC65E,uBAAuB,CAAC,IAAI,CAAA,CAAA;QAC3D,IAAI,CAACj8E,cAAc,GAAG,KAAA,CAAA;AACxB,KAAA,CAAA;IAEA,MAAmBvC,CAAAA,UAIlB,GAJD,SAAmBA,UAAAA,GAAAA;AACjB,QAAA,gBAAA,CAAA,SAAA,CAAMA,UAAD,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;QACL,IAAI,CAACu+E,kBAAkB,CAACx+E,OAAO,EAAA,CAAA;QAC/B,IAAI,CAACq+E,iBAAiB,GAAG,IAAA,CAAA;AAC3B,KAAA,CAAA;AA9JWJ,IAAAA,aAAAA,CAAAA,SAAAA,EAAAA;;YAkBPW,GAAAA,EAAAA,gBAAAA;AAAJ,YAAA,GAAA,EAAA,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACL,eAAe,CAAA;AAC7B,aAAA;;;YAEIoB,GAAAA,EAAAA,oBAAAA;AAAJ,YAAA,GAAA,EAAA,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACC,mBAAmB,CAAA;AACjC,aAAA;;;AAxBW3B,IAAAA,OAAAA,SAAAA,CAAAA;EAAkB17E,gBA+J9B;;AClKD;;IAGO,IAAey9E,IAAf,iBAAA,SAAA,aAAA,EAAA;AAAeA,IAAAA,SAAAA,CAAAA,IAAAA,EAAAA,aAAAA,CAAAA,CAAAA;aAAAA,IA6CRrgF,CAAAA,MAAc,EAAE6T,IAAa,EAAA;;gBACvC,aAAM7T,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,CAAAA,IAAAA,IAAAA,mBAvCM,KAAA,CACdke,kBAAwC,GAAA,IAAIrC,2BAEpC0B,OAAuB,GAAA,IAAIC,sBAC3B8iE,EAAAA,EAAAA,KAAAA,CAAAA,UAAAA,GAAwB,EAAE,CAAA;AAoChC,QAAA,KAAA,CAAKzsE,IAAI,GAAGA,IAAAA,CAAAA;QACZ,KAAK+7C,CAAAA,UAAU,GAAG,IAAI0uB,SAAUt+E,CAAAA,MAAAA,CAAAA,CAAAA;AAChC,QAAA,KAAA,CAAKugF,gBAAgB,GAAG,KAAKA,CAAAA,gBAAgB,CAACh9E,IAAI,CAAA,KAAA,CAAA,CAAA;QAElD,IAAMo+C,MAAAA,GAAS,MAAKpkC,OAAO,CAAA;;AAE3BokC,QAAAA,MAAAA,CAAOhiC,GAAG,CAACrB,eAAe,GAAG,MAAKiiE,gBAAgB,CAAA;;AAElD5+B,QAAAA,MAAAA,CAAOh8C,GAAG,CAAC2Y,eAAe,GAAG,MAAKiiE,gBAAgB,CAAA;;;AAvDhCF,IAAAA,IAAAA,MAAAA,GAAAA,IAAAA,CAAAA,SAAAA,CAAAA;IA0EpBG,MAAAA,CAAAA,UAUC,GAVDA,SAAAA,UAAAA,CACEC,cAAgC,EAChCz7D,KAAc,EACdm5D,QAA+C,EAAA;QAA/CA,IAAAA,QAAAA,KAAAA,KAAAA,CAAAA,EAAAA,QAAyBzI,GAAAA,YAAAA,CAAa0I,SAAS,CAAA;QAE/C,IAAI,OAAOqC,mBAAmB,QAAU,EAAA;YACtCA,cAAiB,GAAA,IAAIpC,OAAQoC,CAAAA,cAAAA,EAAgBz7D,KAAOm5D,EAAAA,QAAAA,CAAAA,CAAAA;AACtD,SAAA;AACA,QAAA,IAAI,CAACmC,UAAU,CAAC/+E,IAAI,CAACk/E,cAAAA,CAAAA,CAAAA;QACrB,OAAOA,cAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;AAGC,MACDC,MAAAA,CAAAA,aAMC,GANDA,SAAAA,cAAcxtC,OAAgB,EAAA;QAC5B,IAAMytC,SAAAA,GAAY,IAAI,CAACL,UAAU,CAAA;QACjC,IAAM7+E,KAAAA,GAAQk/E,SAAUj/E,CAAAA,OAAO,CAACwxC,OAAAA,CAAAA,CAAAA;QAChC,IAAIzxC,KAAAA,KAAU,CAAC,CAAG,EAAA;YAChBk/E,SAAUh/E,CAAAA,MAAM,CAACF,KAAO,EAAA,CAAA,CAAA,CAAA;AAC1B,SAAA;AACF,KAAA,CAAA;AAEA;;MAGAm/E,MAAAA,CAAAA,YAEC,GAFDA,SAAAA,YAAAA,GAAAA;AACE,QAAA,IAAI,CAACN,UAAU,CAACjhF,MAAM,GAAG,CAAA,CAAA;AAC3B,KAAA,CAAA;AAEA;;MAGAwhF,MAAAA,CAAAA,oBAGC,GAHDA,SAAAA,oBAAAA,GAAAA;QACE,IAAI,CAACjxB,UAAU,CAACyvB,mBAAmB,EAAA,CAAA;QACnC,IAAI,CAACnhE,kBAAkB,CAACzB,QAAQ,CAAA,CAAA,CAAA,CAAA;AAClC,KAAA,CAAA;AAEA;;AAEC,MACDqkE,MAAAA,CAAAA,iBAGC,GAHDA,SAAAA,kBAAkBhmE,OAAsB,EAAA;AACtC,QAAA,IAAI,CAAC80C,UAAU,CAACmvB,gBAAgB,CAACjkE,OAAAA,CAAAA,CAAAA;QACjC,IAAI,CAACoD,kBAAkB,CAACzB,QAAQ,CAAA,CAAA,CAAA,CAAA;AAClC,KAAA,CAAA;AAEA;;AAEC,MACDskE,MAAAA,CAAAA,oBAGC,GAHDA,SAAAA,qBAAqBt/E,KAAa,EAAA;AAChC,QAAA,IAAI,CAACmuD,UAAU,CAACuvB,mBAAmB,CAAC19E,KAAAA,CAAAA,CAAAA;QACpC,IAAI,CAACyc,kBAAkB,CAACzB,QAAQ,CAAA,CAAA,CAAA,CAAA;AAClC,KAAA,CAAA;AAEA;;;AAGC,MACDukE,OAAAA,iBAGC,GAHDA,SAAAA,iBAAkBv/E,CAAAA,KAAa,EAAEqZ,OAAsB,EAAA;AACrD,QAAA,IAAI,CAAC80C,UAAU,CAAC0vB,gBAAgB,CAAC79E,KAAOqZ,EAAAA,OAAAA,CAAAA,CAAAA;QACxC,IAAI,CAACoD,kBAAkB,CAACzB,QAAQ,CAAA,CAAA,CAAA,CAAA;AAClC,KAAA,CAAA;AAEA;;;AAGC,MACDwkE,MAAAA,CAAAA,wBAEC,GAFDA,SAAAA,yBAAyB5hF,MAAc,EAAA;AACrC,QAAA,IAAI,CAACuwD,UAAU,CAAC2vB,uBAAuB,CAAClgF,MAAAA,CAAAA,CAAAA;AAC1C,KAAA,CAAA;AAEA;;AAEC,MACD6hF,OAAAA,uBAEC,GAFDA,SAAAA,uBAAwBz/E,CAAAA,KAAa,EAAEg+E,OAA4B,EAAA;AACjE,QAAA,IAAI,CAAC7vB,UAAU,CAAC4vB,sBAAsB,CAAC/9E,KAAOg+E,EAAAA,OAAAA,CAAAA,CAAAA;AAChD,KAAA,CAAA;AAEA,IAAA,MAAA,CAAS59E,cAGR,GAHD,SAASA,cAAAA,CAAeC,KAAa,EAAA;AACnC,QAAA,aAAA,CAAA,SAAA,CAAMD,cAAD,CAAgBC,IAAAA,CAAAA,IAAAA,EAAAA,KAAAA,CAAAA,CAAAA;AACrB,QAAA,IAAI,CAAC8tD,UAAU,CAAC/tD,cAAc,CAACC,KAAAA,CAAAA,CAAAA;AACjC,KAAA,CAAA;AAEA;;MAGA,MAAA,CAAmBxB,UAGlB,GAHD,SAAmBA,UAAAA,GAAAA;AACjB,QAAA,aAAA,CAAA,SAAA,CAAMA,UAAD,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;QACL,IAAI,CAACsvD,UAAU,CAACvvD,OAAO,EAAA,CAAA;AACzB,KAAA,CAAA;AAEA;;AAEC,MACD,MAAU8gF,CAAAA,kBAKT,GALD,SAAUA,mBAAmB1pE,QAAyB,EAAA;AACpD,QAAA,IAAI,CAACopE,oBAAoB,EAAA,CAAA;QACzB,IAAK,IAAIphF,IAAI,CAAG0B,EAAAA,CAAAA,GAAIsW,SAASpY,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;AAC/C,YAAA,IAAI,CAACqhF,iBAAiB,CAACrpE,QAAQ,CAAChY,CAAE,CAAA,CAAA,CAAA;AACpC,SAAA;AACF,KAAA,CAAA;AAEA;;AAEC,MACD,MAAU2hF,CAAAA,sBAET,GAFD,SAAUA,uBAAuB3B,OAAkC,EAAA;AACjE,QAAA,IAAI,CAAC7vB,UAAU,CAACkwB,qBAAqB,CAACL,OAAAA,CAAAA,CAAAA;AACxC,KAAA,CAAA;IAEA,MAAQc,CAAAA,gBAEP,GAFD,SAAQA,gBAAAA,GAAAA;QACN,IAAI,CAACriE,kBAAkB,CAACzB,QAAQ,CAAA,CAAA,CAAA,CAAA;AAClC,KAAA,CAAA;AAzLoB4jE,IAAAA,aAAAA,CAAAA,IAAAA,EAAAA;;YAgBhB1+B,GAAAA,EAAAA,QAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACpkC,OAAO,CAAA;AACrB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAWzb,KAAkB,EAAA;AAC3B,gBAAA,IAAI,IAAI,CAACyb,OAAO,KAAKzb,KAAO,EAAA;AAC1B,oBAAA,IAAI,CAACyb,OAAO,CAAC5d,QAAQ,CAACmC,KAAAA,CAAAA,CAAAA;AACxB,iBAAA;AACF,aAAA;;;YAKIoxC,GAAAA,EAAAA,SAAAA;;;MAAJ,SAAA,GAAA,GAAA;AACE,gBAAA,OAAO,IAAI,CAACotC,UAAU,CAAC,EAAE,IAAI,IAAA,CAAA;AAC/B,aAAA;;;YAKIK,GAAAA,EAAAA,WAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACL,UAAU,CAAA;AACxB,aAAA;;;AAtCoBD,IAAAA,OAAAA,IAAAA,CAAAA;EAAa1/E,aA0LlC,EAAA;AAED;;IAGO,IAAK0gF,eAAAA,iBAAAA,SAAAA,eAAAA,EAAAA;;;AAAAA,IAAAA,OAAAA,eAAAA,CAAAA;AAGX,CAAA,CAAA,EAAA,CAAA;;AC9MD;;IAGO,IAAMC,mBAAN,iBAAA,WAAA;aAAMA,mBAyBC1uE,CAAAA,MAAc,EAAE2uE,MAAc,EAAA;QACxC,IAAI,CAACtD,OAAO,GAAGrrE,MAAAA,CAAAA;QACf,IAAI,CAAC4uE,OAAO,GAAGD,MAAAA,CAAAA;;AA3BND,IAAAA,aAAAA,CAAAA,mBAAAA,EAAAA;;YASP1uE,GAAAA,EAAAA,QAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACqrE,OAAO,CAAA;AACrB,aAAA;;;YAKIsD,GAAAA,EAAAA,QAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACC,OAAO,CAAA;AACrB,aAAA;;;AAlBWF,IAAAA,OAAAA,mBAAAA,CAAAA;AA6BZ,CAAA;;AChCD;;IAGO,IAAMG,UAAN,iBAAA,SAAA,IAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,UAAAA,EAAAA,IAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,UAAAA,GAAAA;;;AAAAA,IAAAA,IAAAA,MAAAA,GAAAA,UAAAA,CAAAA,SAAAA,CAAAA;AAiCX;;;AAGC,MACDC,MAAAA,CAAAA,iBAEC,GAFDA,SAAAA,kBAAkBjqE,QAAyB,EAAA;QACzC,IAAI,CAAC0pE,kBAAkB,CAAC1pE,QAAAA,CAAAA,CAAAA;AAC1B,KAAA,CAAA;IAiBA+nE,MAAAA,CAAAA,sBAYC,GAZDA,SAAAA,sBAAAA,CACEmC,eAA6C,EAC7CC,kBAA8B,EAC9BngF,KAAiB,EAAA;AADjBmgF,QAAAA,IAAAA,+BAAAA,kBAA6B,GAAA,CAAA,CAAA;AAC7BngF,QAAAA,IAAAA,kBAAAA,KAAgB,GAAA,CAAA,CAAA;AAEhB,QAAA,IAAIg+E,OAA+BkC,GAAAA,eAAAA,CAAAA;QACnC,IAAME,SAAAA,GAAYpC,OAAQ7sE,CAAAA,MAAM,KAAKjU,SAAAA,CAAAA;AACrCkjF,QAAAA,SAAAA,KAAcpC,OAAAA,GAAU,IAAI6B,mBAAAA,CAA4BK,iBAAiBC,kBAAkB,CAAA,CAAA,CAAA;AAE3F,QAAA,IAAMhC,QAAW,GAAA,IAAI,CAAChwB,UAAU,CAAC6uB,oBAAoB,CAAA;QACrDmB,QAASvgF,CAAAA,MAAM,IAAIoC,KAAUm+E,KAAAA,SAASvgF,MAAM,GAAGoC,QAAQ,CAAA,CAAA,CAAA;AACvD,QAAA,IAAI,CAACy/E,uBAAuB,CAACW,SAAAA,GAAYD,qBAAqBngF,KAAOg+E,EAAAA,OAAAA,CAAAA,CAAAA;AACvE,KAAA,CAAA;AAEA;;;;AAIC,MACDC,OAAAA,uBAQC,GARDA,SAAAA,uBAAwBjB,CAAAA,oBAA2C,EAAEkB,UAAsB,EAAA;AAAtBA,QAAAA,IAAAA,uBAAAA,UAAqB,GAAA,CAAA,CAAA;AACxF,QAAA,IAAMC,QAAW,GAAA,IAAI,CAAChwB,UAAU,CAAC6uB,oBAAoB,CAAA;QACrD,IAAMz5D,KAAAA,GAAQy5D,qBAAqBp/E,MAAM,CAAA;AACzC,QAAA,IAAMwgF,aAAaF,UAAa36D,GAAAA,KAAAA,CAAAA;AAChC46D,QAAAA,QAAAA,CAASvgF,MAAM,GAAGwgF,UAAAA,KAAeD,QAASvgF,CAAAA,MAAM,GAAGwgF,UAAS,CAAA,CAAA;AAC5D,QAAA,IAAK,IAAIpgF,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAIulB,OAAOvlB,CAAK,EAAA,CAAA;AAC9B,YAAA,IAAI,CAACyhF,uBAAuB,CAACvB,aAAalgF,CAAGg/E,EAAAA,oBAAoB,CAACh/E,CAAE,CAAA,CAAA,CAAA;AACtE,SAAA;AACF,KAAA,CAAA;AAgBAqgF,IAAAA,MAAAA,CAAAA,qBAOC,GAPDA,SAAAA,qBAAsB6B,CAAAA,eAAmD,EAAE17E,MAAoB,EAAA;AAC7F,QAAA,IAAIw5E,OAA8BkC,GAAAA,eAAAA,CAAAA;AAClC,QAAA,IAAIlC,OAAS,EAAA;YACX,IAAMoC,SAAAA,GAAYpC,OAAQ7sE,CAAAA,MAAM,KAAKjU,SAAAA,CAAAA;AACrCkjF,YAAAA,SAAAA,KAAcpC,OAAAA,GAAU,IAAIzB,kBAAAA,CAA2B2D,iBAAiB17E,MAAM,CAAA,CAAA,CAAA;AAChF,SAAA;QACA,IAAI,CAACm7E,sBAAsB,CAAC3B,OAAAA,CAAAA,CAAAA;AAC9B,KAAA,CAAA;AA1GWgC,IAAAA,aAAAA,CAAAA,UAAAA,EAAAA;;YAIPjD,GAAAA,EAAAA,eAAAA;;;MAAJ,SAAA,GAAA,GAAA;AACE,gBAAA,OAAO,IAAI,CAAC5uB,UAAU,CAAC4uB,aAAa,CAAA;AACtC,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAkB18E,KAAa,EAAA;AAC7B,gBAAA,IAAI,CAAC8tD,UAAU,CAAC4uB,aAAa,GAAG18E,KAAAA,CAAAA;AAClC,aAAA;;;YAKI28E,GAAAA,EAAAA,sBAAAA;;;MAAJ,SAAA,GAAA,GAAA;AACE,gBAAA,OAAO,IAAI,CAAC7uB,UAAU,CAAC6uB,oBAAoB,CAAA;AAC7C,aAAA;;;YAKIuB,GAAAA,EAAAA,oBAAAA;;;MAAJ,SAAA,GAAA,GAAA;AACE,gBAAA,OAAO,IAAI,CAACpwB,UAAU,CAACowB,kBAAkB,CAAA;AAC3C,aAAA;;;YAKIf,GAAAA,EAAAA,gBAAAA;;;MAAJ,SAAA,GAAA,GAAA;AACE,gBAAA,OAAO,IAAI,CAACrvB,UAAU,CAACqvB,cAAc,CAAA;AACvC,aAAA;;;AA/BWwC,IAAAA,OAAAA,UAAAA,CAAAA;EAAmBpB,IA2G/B;;ACvGD;;IAGO,IAAMyB,YAAN,iBAAA,SAAA,QAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,YAAAA,EAAAA,QAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,YAAAA,CA2CCruC,MAAc,EAAA;;AACxB,QAAA,KAAA,GAAA,QAAA,CAAA,IAAA,CAAA,IAAA,EAAMA,uBArCAsuC,kBAA8B,GAAA,KAAA,CAAA;AAsCpC,QAAA,KAAA,CAAKC,cAAc,GAAG,KAAKA,CAAAA,cAAc,CAACz+E,IAAI,CAAA,KAAA,CAAA,CAAA;;;AA7CrCu+E,IAAAA,IAAAA,MAAAA,GAAAA,YAAAA,CAAAA,SAAAA,CAAAA;AAgDX;;MAGA,MAAA,CAAmBxhF,UASlB,GATD,SAAmBA,UAAAA,GAAAA;QACjB,IAAMmqE,IAAAA,GAAO,IAAI,CAACD,KAAK,CAAA;AACvB,QAAA,IAAIC,IAAM,EAAA;AACRA,YAAAA,IAAAA,CAAK/pE,SAAS,IAAI,IAAI,CAAC+zC,sBAAsB,CAACg2B,MAAM,CAAC,CAAA,CAAA,CAAA;AACrDA,YAAAA,IAAAA,CAAKvsD,kBAAkB,CAAC1B,cAAc,CAAC,IAAI,CAACwlE,cAAc,CAAA,CAAA;YAC1D,IAAI,CAACxX,KAAK,GAAG,IAAA,CAAA;AACf,SAAA;AAEA,QAAA,QAAA,CAAA,SAAA,CAAMlqE,UAAD,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;AACP,KAAA,CAAA;AAEA;;MAGA,MAAA,CAASV,QAGR,GAHD,SAASA,SAAStD,MAAoB,EAAEiC,OAAe,EAAEC,UAAkB,EAAA;QACzE,QAAMoB,CAAAA,SAAAA,CAAAA,QAAD,CAAUtD,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAAQiC,OAASC,EAAAA,UAAAA,CAAAA,CAAAA;AAChClC,QAAAA,MAAAA,CAAOmuE,IAAI,GAAG,IAAI,CAACD,KAAK,CAAA;AAC1B,KAAA,CAAA;AAEA;;AAEC,MACD,MAASlpB,CAAAA,cAUR,GAVD,SAASA,eAAe10C,OAAsB,EAAA;AAC5C,QAAA,IAAI,CAAC,IAAI,CAAC49D,KAAK,EAAE;AACf7mE,YAAAA,MAAAA,CAAOD,KAAK,CAAC,eAAA,CAAA,CAAA;AACb,YAAA,OAAA;AACF,SAAA;AACA,QAAA,IAAI,IAAI,CAAC8mE,KAAK,CAAC9pE,SAAS,EAAE;AACxBiD,YAAAA,MAAAA,CAAOD,KAAK,CAAC,oBAAA,CAAA,CAAA;AACb,YAAA,OAAA;AACF,SAAA;AACA,QAAA,QAAA,CAAA,SAAA,CAAM49C,cAAD,CAAgB10C,IAAAA,CAAAA,IAAAA,EAAAA,OAAAA,CAAAA,CAAAA;AACvB,KAAA,CAAA;AAEA;;AAEC,MACD,MAAmBi3C,CAAAA,aAUlB,GAVD,SAAmBA,cAAcC,WAAwB,EAAA;QACvD,IAAM2mB,IAAAA,GAAO,IAAI,CAACD,KAAK,CAAA;AACvB,QAAA,IAAIC,IAAM,EAAA;YACR,IAAM2G,WAAAA,GAAc3G,KAAK9oB,MAAM,CAAA;AAC/B,YAAA,IAAMtF,cAAc,IAAI,CAACvI,OAAO,CAACsH,SAAS,CAACiB,WAAW,CAAA;YACtD7+B,sBAAY49B,CAAAA,SAAS,CAACg2B,WAAAA,EAAa/0B,WAAayH,EAAAA,WAAAA,CAAAA,CAAAA;SAC3C,MAAA;AACLA,YAAAA,WAAAA,CAAYnkC,GAAG,CAACniB,GAAG,CAAC,GAAG,CAAG,EAAA,CAAA,CAAA,CAAA;AAC1BsmD,YAAAA,WAAAA,CAAYn+C,GAAG,CAACnI,GAAG,CAAC,GAAG,CAAG,EAAA,CAAA,CAAA,CAAA;AAC5B,SAAA;AACF,KAAA,CAAA;AAEA;;AAEC,MACD,MAAmB2kD,CAAAA,OAqDlB,GArDD,SAAmBA,QAAQv1C,OAAsB,EAAA;QAC/C,IAAM69D,IAAAA,GAAO,IAAI,CAACD,KAAK,CAAA;QACvB,IAAI,IAAI,CAACvsD,gBAAgB,GAA+C,CAAA,EAAA;YACtE,IAAM4J,UAAAA,GAAa,IAAI,CAACA,UAAU,CAAA;AAClC,YAAA,IAAMo3D,cAAiBxU,GAAAA,IAAAA,CAAK7a,UAAU,CAACqvB,cAAc,CAAA;AAErDp3D,YAAAA,UAAAA,CAAWipB,YAAY,CAACgxC,YA7GjBA,CA6G8BG,QAAQ,CAAA,CAAA;AAC7Cp6D,YAAAA,UAAAA,CAAWipB,YAAY,CAACgxC,YA9GjBA,CA8G8BI,SAAS,CAAA,CAAA;AAC9Cr6D,YAAAA,UAAAA,CAAWipB,YAAY,CAACgxC,YA/GjBA,CA+G8BK,YAAY,CAAA,CAAA;AACjDt6D,YAAAA,UAAAA,CAAWipB,YAAY,CAACgxC,YAhHjBA,CAgH8BM,aAAa,CAAA,CAAA;AAClDv6D,YAAAA,UAAAA,CAAWipB,YAAY,CAACgxC,YAjHjBA,CAiH8BO,uBAAuB,CAAA,CAAA;YAE5D,IAAK,IAAI5iF,IAAI,CAAG0B,EAAAA,CAAAA,GAAI89E,eAAe5/E,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;AACrD,gBAAA,OAAQw/E,cAAc,CAACx/E,CAAE,CAAA,CAACu1E,SAAS;oBACjC,KAAK,YAAA;AACHntD,wBAAAA,UAAAA,CAAW+oB,WAAW,CAACkxC,YAtHtBA,CAsHmCG,QAAQ,CAAA,CAAA;AAC5C,wBAAA,MAAA;oBACF,KAAK,YAAA;AACHp6D,wBAAAA,UAAAA,CAAW+oB,WAAW,CAACkxC,YAzHtBA,CAyHmCI,SAAS,CAAA,CAAA;AAC7C,wBAAA,MAAA;oBACF,KAAK,QAAA;AACHr6D,wBAAAA,UAAAA,CAAW+oB,WAAW,CAACkxC,YA5HtBA,CA4HmCK,YAAY,CAAA,CAAA;AAChD,wBAAA,MAAA;oBACF,KAAK,SAAA;AACHt6D,wBAAAA,UAAAA,CAAW+oB,WAAW,CAACkxC,YA/HtBA,CA+HmCM,aAAa,CAAA,CAAA;AACjD,wBAAA,MAAA;oBACF,KAAK,SAAA;wBACH,IAAI,CAACL,kBAAkB,IAAIl6D,UAAAA,CAAW+oB,WAAW,CAlIhDkxC,aAkI8DO,uBAAuB,CAAA,CAAA;AACtF,wBAAA,MAAA;AACJ,iBAAA;AACF,aAAA;YACA,IAAI,CAACpkE,gBAAgB,IAAI,CAAA,CAAA,CAAA;AAC3B,SAAA;QAEA,IAAmD,KAAA,GAAA,IAAI,EAAnCkiC,YAA+B,KAA3ClB,CAAAA,UAAAA,EAAuB7+C,MAASJ,GAAW,KAApBI,CAAAA,OAAAA,CAAAA;QAC/B,IAAMugF,SAAAA,GAAYlW,KAAKkW,SAAS,CAAA;AAChC,QAAA,IAAM3zB,aAAgBhtD,GAAAA,MAAAA,CAAOitD,kBAAkB,CAAC7vD,GAAG,EAAA,CAAA;QACnD4vD,aAAcxvD,CAAAA,GAAG,CAAC,IAAI,CAAC2mD,QAAQ,EAAE,IAAI,CAACpC,gBAAgB,CAAA,CAAA;QACtD,IAAMugC,oBAAAA,GAAuBtiF,OAAOmtD,qBAAqB,CAAA;QACzD,IAAK,IAAI1tD,KAAI,CAAG0B,EAAAA,EAAAA,GAAIw/E,UAAUthF,MAAM,EAAEI,EAAI0B,GAAAA,EAAAA,EAAG1B,EAAK,EAAA,CAAA;YAChD,IAAI+yC,QAAAA,GAAW2N,SAAS,CAAC1gD,EAAE,CAAA,CAAA;AAC3B,YAAA,IAAI,CAAC+yC,QAAU,EAAA;AACb,gBAAA,SAAA;AACF,aAAA;AACA,YAAA,IAAIA,SAAS9xC,SAAS,IAAI8xC,SAAS5kB,MAAM,CAACltB,SAAS,EAAE;AACnD8xC,gBAAAA,QAAAA,GAAW,IAAI,CAACxyC,MAAM,CAACuiF,oBAAoB,CAAA;AAC7C,aAAA;YAEA,IAAMr1B,gBAAAA,GAAmBo1B,qBAAqBllF,GAAG,EAAA,CAAA;YACjD8vD,gBAAiB1vD,CAAAA,GAAG,CAAC,IAAI,EAAEg1C,QAAAA,EAAUi4B,KAAK7a,UAAU,EAAE+wB,SAAS,CAAClhF,EAAE,CAAA,CAAA,CAAA;AAClEutD,YAAAA,aAAAA,CAAcK,mBAAmB,CAACH,gBAAAA,CAAAA,CAAAA;AACpC,SAAA;AACAtgD,QAAAA,OAAAA,CAAQw1C,MAAM,CAACkL,eAAe,CAACC,iBAAiB,CAAC3gD,OAASogD,EAAAA,aAAAA,CAAAA,CAAAA;AAC5D,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQw1B,QAYP,GAZD,SAAQA,QAAAA,CAAS/X,IAAU,EAAA;QACzB,IAAMgY,QAAAA,GAAW,IAAI,CAACjY,KAAK,CAAA;AAC3B,QAAA,IAAIiY,QAAU,EAAA;AACZ,YAAA,IAAI,CAAChuC,sBAAsB,CAACguC,QAAAA,EAAU,CAAC,CAAA,CAAA,CAAA;AACvCA,YAAAA,QAAAA,CAASvkE,kBAAkB,CAAC1B,cAAc,CAAC,IAAI,CAACwlE,cAAc,CAAA,CAAA;AAChE,SAAA;AACA,QAAA,IAAIvX,IAAM,EAAA;YACR,IAAI,CAACh2B,sBAAsB,CAACg2B,IAAM,EAAA,CAAA,CAAA,CAAA;AAClCA,YAAAA,IAAAA,CAAKvsD,kBAAkB,CAAC5B,WAAW,CAAC,IAAI,CAAC0lE,cAAc,CAAA,CAAA;AACvD,YAAA,IAAI,CAAC/jE,gBAAgB,IAAA,CAAA,CAAA;AACvB,SAAA;QACA,IAAI,CAACusD,KAAK,GAAGC,IAAAA,CAAAA;AACf,KAAA,CAAA;AAEA,IAAA,MAAA,CACQuX,cAGP,GAJD,SACQA,cAAAA,CAAetkF,IAAqB,EAAA;QAC1CA,IAAO2jF,GAAAA,eAAAA,CAAgBqB,MAAM,KAAK,IAAI,CAACzkE,gBAAgB,IAAIomC,mBAAoB0I,CAAAA,WAAW,CAAD,CAAA;AACzFrvD,QAAAA,IAAAA,GAAO2jF,gBAAgBsB,cAAc,KAAK,IAAI,CAAC1kE,gBAAgB,IAA6C,CAAA,CAAA,CAAA;AAC9G,KAAA,CAAA;AAhLW6jE,IAAAA,aAAAA,CAAAA,YAAAA,EAAAA;;YAgBPrX,GAAAA,EAAAA,MAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACD,KAAK,CAAA;AACnB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAS1oE,KAAW,EAAA;AAClB,gBAAA,IAAI,IAAI,CAAC0oE,KAAK,KAAK1oE,KAAO,EAAA;oBACxB,IAAI,CAAC0gF,QAAQ,CAAC1gF,KAAAA,CAAAA,CAAAA;AAChB,iBAAA;AACF,aAAA;;;YAKI8gF,GAAAA,EAAAA,mBAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACb,kBAAkB,CAAA;AAChC,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAsBjgF,KAAc,EAAA;AAClC,gBAAA,IAAIA,KAAU,KAAA,IAAI,CAACigF,kBAAkB,EAAE;AACrC,oBAAA,IAAI,CAAC9jE,gBAAgB,IAAA,CAAA,CAAA;oBACrB,IAAI,CAAC8jE,kBAAkB,GAAGjgF,KAAAA,CAAAA;AAC5B,iBAAA;AACF,aAAA;;;AAtCWggF,IAAAA,OAAAA,YAAAA,CAAAA;EAAqB5rD,gBAiLjC,EAAA;AAjLY4rD,YACIG,CAAAA,QAAAA,GAAWtgE,WAAYU,CAAAA,SAAS,CAAC,iBAAA,CAAA,CAAA;AADrCy/D,YAEII,CAAAA,SAAAA,GAAYvgE,WAAYU,CAAAA,SAAS,CAAC,kBAAA,CAAA,CAAA;AAFtCy/D,YAGIK,CAAAA,YAAAA,GAAexgE,WAAYU,CAAAA,SAAS,CAAC,qBAAA,CAAA,CAAA;AAHzCy/D,YAIIM,CAAAA,aAAAA,GAAgBzgE,WAAYU,CAAAA,SAAS,CAAC,sBAAA,CAAA,CAAA;AAJ1Cy/D,YAKIO,CAAAA,uBAAAA,GAA0B1gE,WAAYU,CAAAA,SAAS,CAAC,6BAAA,CAAA,CAAA;;;;;;;;ACAjE;;IAGO,IAAMwgE,iBAAN,iBAAA,WAAA;aAAMA,iBAwCC7iF,CAAAA,MAAc,EAAE8iF,SAAoB,EAAA;AA9BhD,8BACAC,gBAA2B,GAAA,CAAA,CAAA;yBACb,IAAA,CACdC,eAA6B,EAAE,CAAA;yBACjB,IAAA,CACdC,qBAAuC,EAAE,CAAA;yBAG3B,IAAA,CACdC,iBAA2B,EAAE,CAAA;AAG7B,8BACAC,qBAAgC,GAAA,CAAA,CAAA;yBAClB,IAAA,CACdC,uBAA+B,CAAC,CAAA,CAAA;AAChC,8BACAC,oBAA+B,GAAA,CAAA,CAAA;aAEvBC,eAA2B,GAAA,KAAA,CAAA;aAC3BC,gBAA4B,GAAA,KAAA,CAAA;aAC5BC,mBAA8B,GAAA,CAAA,CAAA;AAC9BC,QAAAA,IAAAA,CAAAA,wBAAAA,GAAsC,EAAE,CAAA;aACxCC,2BAAsC,GAAA,CAAA,CAAA;aAG7BC,oBAAgC,GAAA,IAAI5nF;;aACpC6nF,uBAAmC,GAAA,IAAA,CAAA;AACnCC,QAAAA,IAAAA,CAAAA,gBAAAA,GAA4B,IAAIrrD,kBAAAA,EAAAA,CAAAA;QAG/C,IAAI,CAACp4B,OAAO,GAAGJ,MAAAA,CAAAA;QACf,IAAI,CAAC8jF,UAAU,GAAGhB,SAAAA,CAAAA;QAClB,IAAI,CAACc,uBAAuB,GAAG,IAAI,CAACxjF,OAAO,CAAC6E,iBAAiB,CAACwB,UAAU,CAACs9E,4BAA4B,CAAA;QACrG,IAAI,CAACC,mBAAmB,GAAG,IAAI,CAACA,mBAAmB,CAACzgF,IAAI,CAAC,IAAI,CAAA,CAAA;;AA5CpDs/E,IAAAA,IAAAA,MAAAA,GAAAA,iBAAAA,CAAAA,SAAAA,CAAAA;AA+CX;;AAEC,MACDoB,MAAAA,CAAAA,cAQC,GARDA,SAAAA,eAAeC,UAAsB,EAAA;AACnC,QAAA,IAAI,CAAClB,YAAY,CAACzhF,IAAI,CAAC2iF,UAAAA,CAAAA,CAAAA;AACvB,QAAA,IAAI,CAACnB,gBAAgB,EAAA,CAAA;AAErBmB,QAAAA,UAAAA,CAAWhH,oBAAoB,CAAC5gE,WAAW,CAAC,IAAI,CAAC0nE,mBAAmB,CAAA,CAAA;QACpE,IAAI,CAACA,mBAAmB,CAAC,CAAGE,EAAAA,UAAAA,CAAAA,CAAAA;QAE5B,IAAI,CAACjB,kBAAkB,CAAC1hF,IAAI,CAAC2iF,UAAW1H,CAAAA,kBAAkB,CAACxgE,UAAU,CAACs6B,cAAAA,CAAAA,CAAAA,CAAAA;AACxE,KAAA,CAAA;AAEA;;MAGA6tC,MAAAA,CAAAA,iBAgBC,GAhBDA,SAAAA,iBAAAA,GAAAA;QACE,IAAMC,WAAAA,GAAc,IAAI,CAACpB,YAAY,CAAA;QACrC,IAAK,IAAIvjF,IAAI,CAAG0B,EAAAA,CAAAA,GAAIijF,YAAY/kF,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;YAClD2kF,WAAW,CAAC3kF,EAAE,CAACy9E,oBAAoB,CAAC1gE,cAAc,CAAC,IAAI,CAACwnE,mBAAmB,CAAA,CAAA;AAC7E,SAAA;QACA,IAAI,CAACV,eAAe,GAAG,KAAA,CAAA;QACvB,IAAI,CAACC,gBAAgB,GAAG,KAAA,CAAA;QACxB,IAAI,CAACC,mBAAmB,GAAG,CAAA,CAAA;AAC3B,QAAA,IAAI,CAACR,YAAY,CAAC3jF,MAAM,GAAG,CAAA,CAAA;QAC3B,IAAI,CAAC0jF,gBAAgB,GAAG,CAAA,CAAA;QAExB,IAAMsB,iBAAAA,GAAoB,IAAI,CAACpB,kBAAkB,CAAA;QACjD,IAAK,IAAIxjF,KAAI,CAAG0B,EAAAA,EAAAA,GAAIkjF,kBAAkBhlF,MAAM,EAAEI,EAAI0B,GAAAA,EAAAA,EAAG1B,EAAK,EAAA,CAAA;YACxD4kF,iBAAiB,CAAC5kF,EAAE,CAAA,CAACY,OAAO,EAAA,CAAA;AAC9B,SAAA;AACAgkF,QAAAA,iBAAAA,CAAkBhlF,MAAM,GAAG,CAAA,CAAA;AAC7B,KAAA,CAAA;AAEA;;AAEC,MACD41D,OAAAA,iBA8CC,GA9CDA,SAAAA,iBAAkBptC,CAAAA,UAAsB,EAAEy8D,mBAAwC,EAAA;QAChF,IAAIC,eAAAA,GAAkB,IAAI,CAACxB,gBAAgB,CAAA;AAC3C,QAAA,IAAIwB,kBAAkB,CAAG,EAAA;AACvB18D,YAAAA,UAAAA,CAAW+oB,WAAW,CAACiyC,iBAvFhBA,CAuFkC2B,gBAAgB,CAAA,CAAA;YACzD,IAAI,IAAI,CAACC,eAAe,EAAI,EAAA;AAC1B58D,gBAAAA,UAAAA,CAAW+oB,WAAW,CAACiyC,iBAzFlBA,CAyFoC6B,uBAAuB,CAAA,CAAA;gBAChE78D,UAAW0oB,CAAAA,UAAU,CAACsyC,iBA1FjBA,CA0FmC8B,0BAA0B,EAAE,IAAI,CAACC,cAAc,CAAA,CAAA;gBACvF/8D,UAAWmoB,CAAAA,UAAU,CAAC6yC,iBA3FjBA,CA2FmCgC,8BAA8B,EAAE,IAAI,CAAChB,gBAAgB,CAAA,CAAA;AAC7Fh8D,gBAAAA,UAAAA,CAAW2nB,aAAa,CA5FnBqzC,kBA4FsCiC,0BAA0B,EAAER,oBAAoBS,iBAAiB,CAAA,CAAA;AAC5Gl9D,gBAAAA,UAAAA,CAAW+oB,WAAW,CAAC,2BAA6B2zC,EAAAA,eAAAA,CAAgB7pD,QAAQ,EAAA,CAAA,CAAA;gBAC5E,IAAI,CAACyoD,qBAAqB,GAAGoB,eAAkB,GAAA,CAAA,CAAA;aAC1C,MAAA;gBACL,IAAMS,aAAAA,GAAgB,IAAI,CAACC,gCAAgC,EAAA,CAAA;AAC3D,gBAAA,IAAIV,kBAAkBS,aAAe,EAAA;oBACnC,IAAIE,0BAAAA,GAA6BZ,oBAAoBa,2BAA2B,CAAA;AAChF,oBAAA,IAAI,CAACD,0BAA4B,EAAA;AAC/BA,wBAAAA,0BAAAA,GAA6B,IAAIhmF,YAAa8lF,CAAAA,aAAAA,CAAAA,CAAAA;AAC9CV,wBAAAA,mBAAAA,CAAoBa,2BAA2B,GAAGD,0BAAAA,CAAAA;AACpD,qBAAA;AACA,oBAAA,IAAI,CAACE,iCAAiC,CAACd,mBAAAA,CAAoBS,iBAAiB,EAAEG,0BAAAA,CAAAA,CAAAA;AAC9Er9D,oBAAAA,UAAAA,CAAW2nB,aAAa,CAACqzC,iBAxGtBA,CAwGwCiC,0BAA0B,EAAEI,0BAAAA,CAAAA,CAAAA;AACvE,oBAAA,IAAI,CAACpB,UAAU,CAACl0B,UAAU,CAAC2uB,SAAS,GAAG,KAAA,CAAA;oBACvCgG,eAAkBS,GAAAA,aAAAA,CAAAA;iBACb,MAAA;AACLn9D,oBAAAA,UAAAA,CAAW2nB,aAAa,CA5GrBqzC,kBA4GwCiC,0BAA0B,EAAER,oBAAoBS,iBAAiB,CAAA,CAAA;AAC5G,oBAAA,IAAI,CAACjB,UAAU,CAACl0B,UAAU,CAAC2uB,SAAS,GAAG,IAAA,CAAA;AACzC,iBAAA;AACA12D,gBAAAA,UAAAA,CAAWipB,YAAY,CAAC+xC,iBA/GnBA,CA+GqC6B,uBAAuB,CAAA,CAAA;AACjE78D,gBAAAA,UAAAA,CAAWipB,YAAY,CAAC,2BAAA,CAAA,CAAA;gBACxB,IAAI,CAACqyC,qBAAqB,GAAGoB,eAAAA,CAAAA;AAC/B,aAAA;YAEA,IAAI,IAAI,CAACjB,eAAe,EAAE;AACxBz7D,gBAAAA,UAAAA,CAAW+oB,WAAW,CAACiyC,iBArHlBA,CAqHoCwC,sBAAsB,CAAA,CAAA;aAC1D,MAAA;AACLx9D,gBAAAA,UAAAA,CAAWipB,YAAY,CAAC+xC,iBAvHnBA,CAuHqCwC,sBAAsB,CAAA,CAAA;AAClE,aAAA;YACA,IAAI,IAAI,CAAC9B,gBAAgB,EAAE;AACzB17D,gBAAAA,UAAAA,CAAW+oB,WAAW,CAACiyC,iBA1HlBA,CA0HoCyC,uBAAuB,CAAA,CAAA;aAC3D,MAAA;AACLz9D,gBAAAA,UAAAA,CAAWipB,YAAY,CAAC+xC,iBA5HnBA,CA4HqCyC,uBAAuB,CAAA,CAAA;AACnE,aAAA;SACK,MAAA;AACLz9D,YAAAA,UAAAA,CAAWipB,YAAY,CAAC+xC,iBA/HjBA,CA+HmC2B,gBAAgB,CAAA,CAAA;AAC1D38D,YAAAA,UAAAA,CAAWipB,YAAY,CAAC,2BAAA,CAAA,CAAA;AAC1B,SAAA;AACF,KAAA,CAAA;AAEA;;MAGA2zC,MAAAA,CAAAA,eAKC,GALDA,SAAAA,eAAAA,GAAAA;AACE,QAAA,IAAI,CAAC,IAAI,CAACb,uBAAuB,EAAE;YACjC,OAAO,KAAA,CAAA;AACT,SAAA;AACA,QAAA,OAAO,IAAI,CAACb,gBAAgB,GAAG,IAAI,CAACkC,gCAAgC,EAAA,CAAA;AACtE,KAAA,CAAA;AAEA;;AAEC,MACDM,MAAAA,CAAAA,aAQC,GARDA,SAAAA,cAAcr9B,WAAmB,EAAA;QAC/B,IAAMs9B,WAAAA,GAAc,IAAI,CAAC7B,oBAAoB,CAAA;QAC7C,OACE6B,WAAAA,CAAYx8E,CAAC,KAAK,IAAI,CAAC+5E,gBAAgB,IACvC,CAAC,CAACyC,WAAYv8E,CAAAA,CAAC,KAAK,IAAI,CAACq6E,eAAe,IACxC,CAAC,CAACkC,WAAAA,CAAYvmE,CAAC,KAAK,IAAI,CAACskE,gBAAgB,IACzCiC,WAAY16E,CAAAA,CAAC,KAAKo9C,WAAAA,CAAAA;AAEtB,KAAA,CAAA;AAEA;;MAGAu9B,MAAAA,CAAAA,yBAQC,GARDA,SAAAA,yBAAAA,GAAAA;QACE,IAAMC,eAAAA,GAAkB,IAAI,CAACT,gCAAgC,EAAA,CAAA;QAC7D,IAAMzhF,IAAAA,GAAO,IAAI,CAACmgF,oBAAoB,CAAA;AACtC,QAAA,OACEp+E,IAAKoa,CAAAA,GAAG,CAACnc,IAAAA,CAAKwF,CAAC,EAAE08E,eAAqBngF,CAAAA,KAAAA,IAAAA,CAAKoa,GAAG,CAAC,IAAI,CAACojE,gBAAgB,EAAE2C,eAAAA,CAAAA,IACtE,CAAC,CAACliF,IAAKyF,CAAAA,CAAC,KAAK,IAAI,CAACq6E,eAAe,IACjC,CAAC,CAAC9/E,IAAKyb,CAAAA,CAAC,KAAK,IAAI,CAACskE,gBAAgB,CAAA;AAEtC,KAAA,CAAA;AAEA;;MAGAoC,MAAAA,CAAAA,eAQC,GARDA,SAAAA,eAAAA,GAAAA;QACE,IAAMtB,iBAAAA,GAAoB,IAAI,CAACpB,kBAAkB,CAAA;QACjD,IAAK,IAAIxjF,IAAI,CAAG0B,EAAAA,CAAAA,GAAIkjF,kBAAkBhlF,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;AACxD,YAAA,IAAI4kF,iBAAiB,CAAC5kF,CAAE,CAAA,CAACwc,IAAI,EAAE;gBAC7B,OAAO,IAAA,CAAA;AACT,aAAA;AACF,SAAA;QACA,OAAO,KAAA,CAAA;AACT,KAAA,CAAA;IAEA,MAAQ2pE,CAAAA,wBAgBP,GAhBD,SAAQA,wBAAAA,GAAAA;AACN,QAAA,IAAI,IAAI,CAACxC,oBAAoB,KAAK,CAAC,CAAG,EAAA;AACpC,YAAA,OAAA;AACF,SAAA;QAEA,IAAMN,SAAAA,GAAY,IAAI,CAACgB,UAAU,CAAA;QACjC,IAAM+B,yBAAAA,GAA4B/C,UAAUgD,0BAA0B,CAAA;AACtE,QAAA,IAAMrH,oBAAuBqE,GAAAA,SAAAA,CAAUlzB,UAAU,CAAC6uB,oBAAoB,CAAA;AACtE,QAAA,IAAIh/E,CAAI,GAAA,CAAA,CAAA;AACR,QAAA,IAAM0B,IAAIoE,IAAKI,CAAAA,GAAG,CAAC84E,oBAAqBp/E,CAAAA,MAAM,EAAEwmF,yBAA4B,GAAA,CAAA,CAAA,CAAA;QAC5E,MAAOpmF,CAAAA,GAAI0B,GAAG1B,CAAK,EAAA,CAAA;AACjB,YAAA,IAAI,CAACg/E,oBAAoB,CAACh/E,CAAE,CAAA,IAAIA,MAAMomF,yBAA2B,EAAA;AAC/D,gBAAA,MAAA;AACF,aAAA;AACF,SAAA;QACA,IAAI,CAACzC,oBAAoB,GAAG3jF,CAAAA,CAAAA;AAC9B,KAAA,CAAA;AAEA;;AAEC,MACDsmF,MAAAA,CAAAA,kBA6BC,GA7BDA,SAAAA,mBAAmBjD,SAAoB,EAAA;AACrC,QAAA,IAAI,CAAC8C,wBAAwB,EAAA,CAAA;QAE7B,IAAI37E,YAAAA,GAAe,IAAI,CAACo5E,oBAAoB,CAAA;QAC5C,IAAM2C,aAAAA,GAAgB,IAAI,CAAC5C,oBAAoB,CAAA;AAE/C,QAAA,IAAI7rE,MAAS,GAAA,CAAA,CAAA;AACb,QAAA,IAAK,IAAI9X,CAAI,GAAA,CAAA,EAAG0B,CAAIoE,GAAAA,IAAAA,CAAKoa,GAAG,CAAC,IAAI,CAACojE,gBAAgB,EAAE,IAAI,CAACkC,gCAAgC,EAAKxlF,CAAAA,EAAAA,CAAAA,GAAI0B,GAAG1B,CAAK,EAAA,CAAA;YACxGqjF,SAAU9B,CAAAA,iBAAiB,CACzB/2E,YAAAA,EAAAA,EACA,IAAI8qE,aAAAA,CAAc,aAAC,GAAat1E,CAAK8X,EAAAA,MAAAA,EAAQ67D,mBAAoB56C,CAAAA,OAAO,EAAEwtD,aAAAA,CAAAA,CAAAA,CAAAA;YAE5EzuE,MAAU,IAAA,EAAA,CAAA;YACV,IAAI,IAAI,CAAC+rE,eAAe,EAAE;gBACxBR,SAAU9B,CAAAA,iBAAiB,CACzB/2E,YAAAA,EAAAA,EACA,IAAI8qE,aAAAA,CAAc,WAAC,GAAWt1E,CAAK8X,EAAAA,MAAAA,EAAQ67D,mBAAoB56C,CAAAA,OAAO,EAAEwtD,aAAAA,CAAAA,CAAAA,CAAAA;gBAE1EzuE,MAAU,IAAA,EAAA,CAAA;AACZ,aAAA;YACA,IAAI,IAAI,CAACgsE,gBAAgB,EAAE;gBACzBT,SAAU9B,CAAAA,iBAAiB,CACzB/2E,YAAAA,EAAAA,EACA,IAAI8qE,aAAAA,CAAc,YAAC,GAAYt1E,CAAK8X,EAAAA,MAAAA,EAAQ67D,mBAAoB56C,CAAAA,OAAO,EAAEwtD,aAAAA,CAAAA,CAAAA,CAAAA;gBAE3EzuE,MAAU,IAAA,EAAA,CAAA;AACZ,aAAA;AACF,SAAA;QACA,OAAOtN,YAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;AAEC,MACDud,MAAAA,CAAAA,OAoBC,GApBDA,SAAAA,QAAQy+D,gBAAyB,EAAA;AAC/B,QAAA,IAAM,WAAE/9B,GAAgB,IAAI,CAAC47B,UAAU,CAA/B57B,WAAAA,CAAAA;QACR,IAAMg+B,UAAAA,GAAa,IAAI,CAACzB,eAAe,EAAA,CAAA;AACvC,QAAA,IAAM0B,UAAa,GAAA,IAAI,CAACZ,aAAa,CAACr9B,WAAAA,CAAAA,CAAAA;AAEtC,QAAA,IAAIi+B,UAAY,EAAA;AACd,YAAA,IAAID,UAAY,EAAA;gBACd,IAAI,CAACE,mBAAmB,CAACl+B,WAAAA,CAAAA,CAAAA;aACpB,MAAA;gBACL,IAAI,CAACm+B,oBAAoB,CAACn+B,WAAa+9B,EAAAA,gBAAAA,CAAAA,CAAAA;AACzC,aAAA;AACA,YAAA,IAAI,CAACtC,oBAAoB,CAACnmF,GAAG,CAAC,IAAI,CAACulF,gBAAgB,EAAE,CAAC,IAAI,CAACO,eAAe,EAAE,CAAC,IAAI,CAACC,gBAAgB,EAAEr7B,WAAAA,CAAAA,CAAAA;AACtG,SAAA;QACA,IAAI,IAAI,CAACy9B,eAAe,EAAI,EAAA;AAC1B,YAAA,IAAIO,UAAY,EAAA;gBACd,IAAI,CAACI,mBAAmB,CAACp+B,WAAai+B,EAAAA,UAAAA,CAAAA,CAAAA;aACjC,MAAA;gBACL,IAAI,CAACI,oBAAoB,CAACr+B,WAAai+B,EAAAA,UAAAA,CAAAA,CAAAA;AACzC,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AAEA;;MAGAK,MAAAA,CAAAA,mBAOC,GAPDA,SAAAA,mBAAAA,GAAAA;QACE,IAAMpC,WAAAA,GAAc,IAAI,CAACpB,YAAY,CAAA;QACrC,IAAK,IAAIvjF,IAAI,CAAG0B,EAAAA,CAAAA,GAAIijF,YAAY/kF,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;YAClD2kF,WAAW,CAAC3kF,CAAE,CAAA,CAACo9E,YAAY,EAAA,CAAA;AAC7B,SAAA;QAEA,IAAI,CAAC4J,SAAS,GAAG,IAAA,CAAA;AACnB,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQJ,oBA8BP,GA9BD,SAAQA,oBAAqBn+B,CAAAA,WAAmB,EAAEw+B,kBAA2B,EAAA;AAC3E,QAAA,IAKI,QAAA,IAAI,EAJNtmF,MAASJ,GAIP,MAJFI,OACA0jF,EAAYhB,SAGV,GAAA,KAAA,CAHFgB,YACAf,eAAkBwB,GAEhB,MAFFxB,gBACAG,EAAgByD,gBACd,KADFzD,CAAAA,cAAAA,CAAAA;AAEF,QAAA,IAAM0D,gBAAmB,GAAA,IAAI,CAACpD,mBAAmB,GAAG,CAAA,CAAA;AACpD,QAAA,IAAMqD,kBAAkBD,gBAAmB,GAAA,CAAA,CAAA;AAC3C,QAAA,IAAME,uBAAuBvhF,IAAKC,CAAAA,KAAK,CAAC,GAAA,GAAMqhF;AAC9C,QAAA,IAAME,WAAcxhF,GAAAA,IAAAA,CAAKmM,IAAI,CAAC6yE,eAAkBuC,GAAAA,oBAAAA,CAAAA,CAAAA;AAChD,QAAA,IAAME,aAAaJ,gBAAmB1+B,GAAAA,WAAAA,GAAc3iD,IAAKoa,CAAAA,GAAG,CAACmnE,oBAAsBvC,EAAAA,eAAAA,CAAAA,CAAAA;AAEnFoC,QAAAA,aAAAA,CAActnF,MAAM,GAAG0nF,WAAAA,CAAAA;AACvB,QAAA,IAAI,CAACN,SAAS,GAAG,IAAIvnF,YAAa8nF,CAAAA,UAAAA,CAAAA,CAAAA;QAClC,IAAI,CAACtD,2BAA2B,GAAGoD,oBAAAA,CAAAA;AACnC,QAAA,IAAI,CAACrD,wBAAwB,CAACpkF,MAAM,GAAGklF,eAAAA,CAAAA;QAEvC,IAAM0C,mBAAAA,GAAsB,IAAI,CAAC7D,oBAAoB,CAAA;AACrD,QAAA,IAAK,IAAI3jF,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAIsnF,aAAatnF,CAAK,EAAA,CAAA;AACpC,YAAA,IAAM2T,YAAY2zE,WAAc,GAAA,CAAA,CAAA;AAChC,YAAA,IAAMG,YAAeznF,GAAAA,CAAAA,KAAM2T,SAAYmxE,GAAAA,eAAAA,GAAkBnxE,YAAY0zE,oBAAuBA,GAAAA,oBAAAA,CAAAA;AAC5F,YAAA,IAAMvF,SAAS2F,YAAeL,GAAAA,eAAAA,CAAAA;AAC9B,YAAA,IAAM3U,aAAaqP,MAASr5B,GAAAA,WAAAA,CAAAA;AAE5B,YAAA,IAAM9hD,QAAQsgF,kBAAqBrV,GAAAA,WAAAA,CAAYlpE,MAAM,GAAGkpE,YAAY8V,OAAO,CAAA;AAC3E,YAAA,IAAMC,mBAAmB,IAAI7V,MAAAA,CAAOvxE,QAAQy1E,cAAe4R,CAAAA,YAAY,EAAEnV,UAAY9rE,EAAAA,KAAAA,CAAAA,CAAAA;AACrF08E,YAAAA,SAAAA,CAAU5B,uBAAuB,CAAC+F,mBAAAA,GAAsBxnF,CAAG,EAAA,IAAI6hF,oBAAoB8F,gBAAkB7F,EAAAA,MAAAA,CAAAA,CAAAA,CAAAA;YACrGoF,aAAa,CAAClnF,EAAE,GAAG2nF,gBAAAA,CAAAA;AACrB,SAAA;AACF,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQhB,mBA6BP,GA7BD,SAAQA,mBAAAA,CAAoBl+B,WAAmB,EAAA;QAC7C,IAAMo/B,cAAAA,GAAiB,IAAI,CAAClnF,OAAO,CAAC6E,iBAAiB,CAACwB,UAAU,CAAC6gF,cAAc,CAAA;QAC/E,IAAMC,iBAAAA,GAAoB,IAAI,CAAC/D,mBAAmB,CAAA;AAElD,QAAA,IAAIgE,eAAeD,iBAAoBr/B,GAAAA,WAAAA,CAAAA;AACvC,QAAA,IAAIu/B,aAAgB,GAAA,CAAA,CAAA;AACpB,QAAA,IAAID,eAAeF,cAAgB,EAAA;YACjCG,aAAgBliF,GAAAA,IAAAA,CAAKmM,IAAI,CAAC81E,YAAeF,GAAAA,cAAAA,CAAAA,CAAAA;YACzCE,YAAeF,GAAAA,cAAAA,CAAAA;AACjB,SAAA;QAEA,IAAII,qBAAAA,GAAwB,IAAI,CAAC9C,cAAc,CAAA;AAC/C,QAAA,IAAML,eAAkB,GAAA,IAAI,CAACvB,YAAY,CAAC3jF,MAAM,CAAA;AAEhDqoF,QAAAA,qBAAAA,IAAyBA,sBAAsBrnF,OAAO,EAAA,CAAA;QAEtDqnF,qBAAwB,GAAA,IAAI79E,cAC1B,CAAA,IAAI,CAACzJ,OAAO,EACZonF,YAAAA,EACAC,aACAlD,EAAAA,eAAAA,EACA9hF,aAAcklF,CAAAA,YAAY,EAC1B,KAAA,CAAA,CAAA;QAEFD,qBAAsB5iF,CAAAA,UAAU,GAAGtC,iBAAAA,CAAkBgE,KAAK,CAAA;AAE1D,QAAA,IAAI,CAACigF,SAAS,GAAG,IAAIvnF,YAAaqlF,CAAAA,eAAAA,GAAkBiD,eAAeC,aAAgB,GAAA,CAAA,CAAA,CAAA;QACnF,IAAI,CAAC7C,cAAc,GAAG8C,qBAAAA,CAAAA;AACtB,QAAA,IAAI,CAAC7D,gBAAgB,CAACrmF,GAAG,CAAC+pF,mBAAmBC,YAAcC,EAAAA,aAAAA,CAAAA,CAAAA;AAC7D,KAAA,CAAA;AAEA;;AAEC,MACDlB,OAAAA,oBAmFC,GAnFDA,SAAAA,oBAAqBr+B,CAAAA,WAAmB,EAAElnD,KAAc,EAAA;QACtD,IAAyF,KAAA,GAAA,IAAI,EAAvEojF,cAAmE,KAAjFpB,CAAAA,YAAAA,EAA2BU,oBAA6BoD,GAAyB,KAAtDpD,CAAAA,2BAAAA,CAAAA;AACnC,QAAA,IAAqG,MAAA,GAAA,IAAI,EAAtFj+B,QAAkF,GAAA,MAAA,CAA7FghC,SAAqBvD,EAAgByD,aAAwD,GAAA,MAAA,CAAxEzD,cAA+BO,EAA0BmE,aAAe,MAAzCnE,CAAAA,wBAAAA,CAAAA;QAE5D,IAAMY,iBAAAA,GAAoB,IAAI,CAACpB,kBAAkB,CAAA;AACjD,QAAA,IAAM4E,qBAAwB,GAAA,IAAI,CAACrE,mBAAmB,GAAG,CAAA,CAAA;AACzD,QAAA,IAAMsE,uBAAuBD,qBAAwB,GAAA,CAAA,CAAA;QACrD,IAAMr8E,YAAAA,GAAe,IAAI,CAAC43E,oBAAoB,CAAA;;QAG9C,IAAK,IAAI3jF,IAAI,CAAG0B,EAAAA,CAAAA,GAAIijF,YAAY/kF,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;YAClD,IAAMsoF,eAAAA,GAAkB1D,iBAAiB,CAAC5kF,CAAE,CAAA,CAAA;YAC5C,IAAIuB,KAAAA,IAAS+mF,eAAgB9rE,CAAAA,IAAI,EAAE;AACjC,gBAAA,IAAM,MAAEyhE,GAAW0G,WAAW,CAAC3kF,EAAE,CAAzBi+E,MAAAA,CAAAA;gBACR,IAAMp1D,UAAAA,GAAao1D,OAAOr+E,MAAM,CAAA;AAChC,gBAAA,IAAM2oF,QAAWtK,GAAAA,MAAM,CAACp1D,UAAAA,GAAa,CAAE,CAAA,CAAA;AACvC,gBAAA,IAAIA,aAAa,CAAK0/D,IAAAA,QAAAA,CAAS3L,cAAc,CAACh9E,MAAM,KAAK6oD,WAAa,EAAA;oBACpE,MAAM,yEAAA,CAAA;AACR,iBAAA;AAEA,gBAAA,IAAM+/B,WAAc1iF,GAAAA,IAAAA,CAAKC,KAAK,CAAC/F,CAAIqnF,GAAAA,oBAAAA,CAAAA,CAAAA;AACnC,gBAAA,IAAMoB,gBAAgBzoF,CAAIqnF,GAAAA,oBAAAA,CAAAA;gBAC1B,IAAMl0E,MAAAA,GAAS+zE,aAAa,CAACsB,WAAY,CAAA,CAAA;AACzC,gBAAA,IAAME,oBAAoBv1E,MAAOs/D,CAAAA,UAAU,IAAIhqB,cAAc,CAAA,CAAA,CAAA;AAE7D,gBAAA,IAAI3wC,SAAS2wE,aAAgBL,GAAAA,qBAAAA,CAAAA;gBAE7B,IAAIO,SAAAA,GAAYR,UAAU,CAACnoF,CAAE,CAAA,CAAA;AAC7B2oF,gBAAAA,SAAAA,KAAcR,UAAU,CAACnoF,EAAE,GAAG2oF,SAAAA,GAAY,IAAI38E,kBAAQ,EAAA,CAAA,CAAA;AACtD28E,gBAAAA,SAAAA,CAAU5qF,GAAG,CAACgO,YAAAA,GAAey8E,WAAaC,EAAAA,aAAAA,GAAgBJ;gBAE1D,IAAQzL,iBAAmB2L,QAAnB3L,CAAAA,cAAAA,CAAAA;AACR,gBAAA,IAAK,IAAIxsE,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAIq4C,aAAar4C,CAAK,EAAA,CAAA;oBACpC,IAAMqtB,KAAAA,GAAQ3lB,SAAS4wE,iBAAoBt4E,GAAAA,CAAAA,CAAAA;oBAC3C,IAAMw4E,aAAAA,GAAgBhM,cAAc,CAACxsE,CAAE,CAAA,CAAA;AACvC,oBAAA,IAAIw4E,aAAe,EAAA;AACjB5iC,wBAAAA,QAAQ,CAACvoB,KAAAA,CAAM,GAAGmrD,aAAAA,CAAcr/E,CAAC,CAAA;AACjCy8C,wBAAAA,QAAQ,CAACvoB,KAAAA,GAAQ,CAAE,CAAA,GAAGmrD,cAAcp/E,CAAC,CAAA;AACrCw8C,wBAAAA,QAAQ,CAACvoB,KAAAA,GAAQ,CAAE,CAAA,GAAGmrD,cAAcppE,CAAC,CAAA;AACvC,qBAAA;AACF,iBAAA;gBACA1H,MAAU,IAAA,CAAA,CAAA;gBAEV,IAAI,IAAI,CAAC+rE,eAAe,EAAE;oBACxB,IAAQhH,eAAiB0L,QAAjB1L,CAAAA,YAAAA,CAAAA;AACR,oBAAA,IAAIA,YAAc,EAAA;AAChB,wBAAA,IAAK,IAAIzsE,EAAAA,GAAI,CAAGA,EAAAA,EAAAA,GAAIq4C,aAAar4C,EAAK,EAAA,CAAA;4BACpC,IAAMqtB,MAAAA,GAAQ3lB,SAAS4wE,iBAAoBt4E,GAAAA,EAAAA,CAAAA;4BAC3C,IAAMy4E,WAAAA,GAAchM,YAAY,CAACzsE,EAAE,CAAA,CAAA;AACnC,4BAAA,IAAIy4E,WAAa,EAAA;AACf7iC,gCAAAA,QAAQ,CAACvoB,MAAAA,CAAM,GAAGorD,WAAAA,CAAYt/E,CAAC,CAAA;AAC/By8C,gCAAAA,QAAQ,CAACvoB,MAAAA,GAAQ,CAAE,CAAA,GAAGorD,YAAYr/E,CAAC,CAAA;AACnCw8C,gCAAAA,QAAQ,CAACvoB,MAAAA,GAAQ,CAAE,CAAA,GAAGorD,YAAYrpE,CAAC,CAAA;AACrC,6BAAA;AACF,yBAAA;AACF,qBAAA;oBACA1H,MAAU,IAAA,CAAA,CAAA;AACZ,iBAAA;gBAEA,IAAI,IAAI,CAACgsE,gBAAgB,EAAE;oBACzB,IAAQhH,gBAAkByL,QAAlBzL,CAAAA,aAAAA,CAAAA;AACR,oBAAA,IAAIA,aAAe,EAAA;AACjB,wBAAA,IAAK,IAAI1sE,EAAAA,GAAI,CAAGA,EAAAA,EAAAA,GAAIq4C,aAAar4C,EAAK,EAAA,CAAA;4BACpC,IAAMqtB,MAAAA,GAAQ3lB,SAAS4wE,iBAAoBt4E,GAAAA,EAAAA,CAAAA;4BAC3C,IAAM04E,YAAAA,GAAehM,aAAa,CAAC1sE,EAAE,CAAA,CAAA;AACrC,4BAAA,IAAI04E,YAAc,EAAA;AAChB9iC,gCAAAA,QAAQ,CAACvoB,MAAAA,CAAM,GAAGqrD,YAAAA,CAAav/E,CAAC,CAAA;AAChCy8C,gCAAAA,QAAQ,CAACvoB,MAAAA,GAAQ,CAAE,CAAA,GAAGqrD,aAAat/E,CAAC,CAAA;AACpCw8C,gCAAAA,QAAQ,CAACvoB,MAAAA,GAAQ,CAAE,CAAA,GAAGqrD,aAAatpE,CAAC,CAAA;AACtC,6BAAA;AACF,yBAAA;AACF,qBAAA;oBACA1H,MAAU,IAAA,CAAA,CAAA;AACZ,iBAAA;AAEA,gBAAA,IAAI2wE,aAAkBpB,KAAAA,oBAAAA,GAAuB,CAAKrnF,IAAAA,CAAAA,KAAM0B,IAAI,CAAG,EAAA;;AAE7DyR,oBAAAA,MAAAA,CAAOy/D,OAAO,CAAC5sB,QAAAA,EAAU,GAAG,CAAG7yC,EAAAA,MAAAA,CAAOs/D,UAAU,GAAG,CAAA,CAAA,CAAA;AACrD,iBAAA;AAEA6V,gBAAAA,eAAAA,CAAgB9rE,IAAI,GAAG,KAAA,CAAA;AACzB,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQqqE,mBAgDP,GAhDD,SAAQA,mBAAoBp+B,CAAAA,WAAmB,EAAElnD,KAAc,EAAA;AAC7D,QAAA,IAKI,QAAA,IAAI,EAJNgiF,WAAcoB,GAIZ,MAJFpB,YACA4B,EAAgB4D,aAGd,GAAA,KAAA,CAHF5D,gBACA6B,QAAWhhC,GAET,MAFFghC,SACAxD,EAAoBoB,oBAClB,KADFpB,CAAAA,kBAAAA,CAAAA;QAGF,IAAK,IAAIxjF,IAAI,CAAG0B,EAAAA,CAAAA,GAAIijF,YAAY/kF,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;YAClD,IAAMgpF,YAAAA,GAAepE,iBAAiB,CAAC5kF,CAAE,CAAA,CAAA;AACzC,YAAA,IAAMipF,0BAA0BF,aAActiF,CAAAA,KAAK,GAAGsiF,aAAAA,CAAcriF,MAAM,GAAG,CAAA,CAAA;YAC7E,IAAInF,KAAAA,IAASynF,YAAaxsE,CAAAA,IAAI,EAAE;AAC9B,gBAAA,IAAM,MAAEyhE,GAAW0G,WAAW,CAAC3kF,EAAE,CAAzBi+E,MAAAA,CAAAA;gBACR,IAAMp1D,UAAAA,GAAao1D,OAAOr+E,MAAM,CAAA;AAChC,gBAAA,IAAM2oF,QAAWtK,GAAAA,MAAM,CAACp1D,UAAAA,GAAa,CAAE,CAAA,CAAA;AACvC,gBAAA,IAAIA,aAAa,CAAK0/D,IAAAA,QAAAA,CAAS3L,cAAc,CAACh9E,MAAM,KAAK6oD,WAAa,EAAA;oBACpE,MAAM,yEAAA,CAAA;AACR,iBAAA;AAEA,gBAAA,IAAQm0B,iBAAgD2L,QAAhD3L,CAAAA,cAAAA,EAAgBC,eAAgC0L,QAAhC1L,CAAAA,YAAAA,EAAcC,gBAAkByL,QAAlBzL,CAAAA,aAAAA,CAAAA;AACtC,gBAAA,IAAIhlE,SAAS9X,CAAIipF,GAAAA,uBAAAA,CAAAA;AACjB,gBAAA,IAAK,IAAI74E,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAIq4C,aAAar4C,CAAK,EAAA,CAAA;oBACpC,IAAM6tC,QAAAA,GAAW2+B,cAAc,CAACxsE,CAAE,CAAA,CAAA;AAClC41C,oBAAAA,QAAQ,CAACluC,MAAAA,CAAO,GAAGmmC,QAAAA,CAAS10C,CAAC,CAAA;AAC7By8C,oBAAAA,QAAQ,CAACluC,MAAAA,GAAS,CAAE,CAAA,GAAGmmC,SAASz0C,CAAC,CAAA;AACjCw8C,oBAAAA,QAAQ,CAACluC,MAAAA,GAAS,CAAE,CAAA,GAAGmmC,SAASz+B,CAAC,CAAA;oBACjC1H,MAAU,IAAA,CAAA,CAAA;AAEV,oBAAA,IAAI+kE,YAAc,EAAA;wBAChB,IAAM/f,MAAAA,GAAS+f,YAAY,CAACzsE,CAAE,CAAA,CAAA;AAC9B41C,wBAAAA,QAAQ,CAACluC,MAAAA,CAAO,GAAGglD,MAAAA,CAAOvzD,CAAC,CAAA;AAC3By8C,wBAAAA,QAAQ,CAACluC,MAAAA,GAAS,CAAE,CAAA,GAAGglD,OAAOtzD,CAAC,CAAA;AAC/Bw8C,wBAAAA,QAAQ,CAACluC,MAAAA,GAAS,CAAE,CAAA,GAAGglD,OAAOt9C,CAAC,CAAA;wBAC/B1H,MAAU,IAAA,CAAA,CAAA;AACZ,qBAAA;AAEA,oBAAA,IAAIglE,aAAe,EAAA;wBACjB,IAAMoM,OAAAA,GAAUpM,aAAa,CAAC1sE,CAAE,CAAA,CAAA;AAChC41C,wBAAAA,QAAQ,CAACluC,MAAAA,CAAO,GAAGoxE,OAAAA,CAAQ3/E,CAAC,CAAA;AAC5By8C,wBAAAA,QAAQ,CAACluC,MAAAA,GAAS,CAAE,CAAA,GAAGoxE,QAAQ1/E,CAAC,CAAA;AAChCw8C,wBAAAA,QAAQ,CAACluC,MAAAA,GAAS,CAAE,CAAA,GAAGoxE,QAAQ1pE,CAAC,CAAA;wBAChC1H,MAAU,IAAA,CAAA,CAAA;AACZ,qBAAA;AACF,iBAAA;AACAkxE,gBAAAA,YAAAA,CAAaxsE,IAAI,GAAG,KAAA,CAAA;AACtB,aAAA;AACF,SAAA;QACAusE,aAAc3/E,CAAAA,cAAc,CAAC,CAAG48C,EAAAA,QAAAA,CAAAA,CAAAA;AAClC,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQu+B,mBAgBP,GAhBD,SAAQA,mBAAoBtmF,CAAAA,IAAY,EAAEwmF,UAAsB,EAAA;AAC9D,QAAA,IAAM0E,QAAW,GAAA,IAAI,CAAC7F,gBAAgB,GAAG,CAAA,CAAA;AACzC,QAAA,IAAI8F,kBAAqB,GAAA,CAAA,CAAA;QACzB,IAAIC,cAAAA,GAAiB5E,WAAWlH,oBAAoB,CAAA;QACpD,IAAI+L,eAAAA,GAAkB7E,WAAWjH,qBAAqB,CAAA;AACtD,QAAA,IAAI2L,QAAU,EAAA;YACZE,cAAAA,KAAAA,cAAAA,GAAmB,IAAI,CAACxF,eAAe,CAAA,CAAA;YACvCyF,eAAAA,KAAAA,eAAAA,GAAoB,IAAI,CAACxF,gBAAgB,CAAA,CAAA;AAC3C,SAAA;QAEAuF,cAAkBD,IAAAA,kBAAAA,EAAAA,CAAAA;QAClBE,eAAmBF,IAAAA,kBAAAA,EAAAA,CAAAA;QAEnB,IAAI,CAACvF,eAAe,GAAGwF,cAAAA,CAAAA;QACvB,IAAI,CAACvF,gBAAgB,GAAGwF,eAAAA,CAAAA;QACxB,IAAI,CAACvF,mBAAmB,GAAGqF,kBAAAA,CAAAA;AAC7B,KAAA,CAAA;IAEA,MAAQG,CAAAA,iCAwBP,GAxBD,SAAQA,iCACN/J,CAAAA,cAA+B,EAC/BgK,qBAAgC,EAChCxnF,KAAa,EACbynF,cAAsB,EAAA;QAEtB,IAAIC,aAAAA,GAAgB,IAAI,CAAC9F,oBAAoB,GAAG,IAAI,CAACG,mBAAmB,GAAG0F,cAAAA,CAAAA;QAE3E,IAAoCD,4BAAAA,GAAAA,qBAAqB,CAACxnF,KAAM,CAAA,EAA1DuH,WAAGi/E,GAA2BgB,4BAA9BjgF,CAAAA,CAAAA,EAAgBC,MAAGsO,GAAW0xE,4BAAdhgF,CAAAA,CAAAA,CAAAA;QACtB,IAAMm2E,aAAAA,GAAgBH,cAAc,CAACkK,aAAc,CAAA,CAAA;AACnD/J,QAAAA,aAAAA,CAAcnK,YAAY,GAAGgT,WAAAA,CAAAA;AAC7B7I,QAAAA,aAAAA,CAAc7nE,MAAM,GAAGA,MAAAA,CAAAA;QACvB,IAAI,IAAI,CAAC+rE,eAAe,EAAE;AACxB,YAAA,IAAMlE,cAAgBH,GAAAA,cAAc,CAAC,EAAEkK,aAAc,CAAA,CAAA;YACrD5xE,MAAU,IAAA,EAAA,CAAA;AACV6nE,YAAAA,cAAAA,CAAcnK,YAAY,GAAGgT,WAAAA,CAAAA;AAC7B7I,YAAAA,cAAAA,CAAc7nE,MAAM,GAAGA,MAAAA,CAAAA;AACzB,SAAA;QACA,IAAI,IAAI,CAACgsE,gBAAgB,EAAE;AACzB,YAAA,IAAMnE,cAAgBH,GAAAA,cAAc,CAAC,EAAEkK,aAAc,CAAA,CAAA;YACrD5xE,MAAU,IAAA,EAAA,CAAA;AACV6nE,YAAAA,cAAAA,CAAcnK,YAAY,GAAGgT,WAAAA,CAAAA;AAC7B7I,YAAAA,cAAAA,CAAc7nE,MAAM,GAAGA,MAAAA,CAAAA;AACzB,SAAA;AACF,KAAA,CAAA;IAEA,MAAQ0tE,CAAAA,gCAMP,GAND,SAAQA,gCAAAA,GAAAA;AACN,QAAA,IAAI,IAAI,CAAC3B,eAAe,IAAI,IAAI,CAACC,gBAAgB,EAAE;YACjD,OAAO,CAAA,CAAA;SACF,MAAA;YACL,OAAO,IAAI,CAACD,eAAe,IAAI,IAAI,CAACC,gBAAgB,GAAG,CAAI,GAAA,CAAA,CAAA;AAC7D,SAAA;AACF,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQ6B,iCAgCP,GAhCD,SAAQA,iCACNL,CAAAA,iBAA+B,EAC/BG,0BAAwC,EAAA;QAExC,IAAMkE,qBAAAA,GAAwBlE,2BAA2B7lF,MAAM,CAAA;AAC/D,QAAA,IAAM4/E,iBAAiB,IAAI,CAAC6E,UAAU,CAACl0B,UAAU,CAACqvB,cAAc,CAAA;QAChE,IAAMgK,qBAAAA,GAAwB,IAAI,CAACxF,wBAAwB,CAAA;QAC3D,IAAI4F,eAAAA,GAAkB3Z,OAAO4Z,iBAAiB,CAAA;QAC9C,IAAIC,cAAAA,CAAAA;AACJ,QAAA,IAAK,IAAI9pF,CAAI,GAAA,CAAA,EAAG0B,CAAIoE,GAAAA,IAAAA,CAAKoa,GAAG,CAAColE,iBAAAA,CAAkB1lF,MAAM,EAAE,IAAI,CAAC0jF,gBAAgB,CAAGtjF,EAAAA,CAAAA,GAAI0B,GAAG1B,CAAK,EAAA,CAAA;YACzF,IAAM28E,MAAAA,GAAS2I,iBAAiB,CAACtlF,CAAE,CAAA,CAAA;AACnC,YAAA,IAAIA,IAAI2pF,qBAAuB,EAAA;AAC7B,gBAAA,IAAI,CAACJ,iCAAiC,CAAC/J,cAAAA,EAAgBgK,uBAAuBxpF,CAAGA,EAAAA,CAAAA,CAAAA,CAAAA;gBACjFylF,0BAA0B,CAACzlF,EAAE,GAAG28E,MAAAA,CAAAA;AAChC,gBAAA,IAAIA,SAASiN,eAAiB,EAAA;oBAC5BA,eAAkBjN,GAAAA,MAAAA,CAAAA;oBAClBmN,cAAiB9pF,GAAAA,CAAAA,CAAAA;AACnB,iBAAA;aACK,MAAA,IAAI28E,SAASiN,eAAiB,EAAA;AACnC,gBAAA,IAAI,CAACL,iCAAiC,CAAC/J,cAAAA,EAAgBgK,uBAAuBxpF,CAAG8pF,EAAAA,cAAAA,CAAAA,CAAAA;gBACjFrE,0BAA0B,CAACqE,eAAe,GAAGnN,MAAAA,CAAAA;AAE7CiN,gBAAAA,eAAAA,GAAkB3Z,OAAO4Z,iBAAiB,CAAA;AAC1C,gBAAA,IAAK,IAAIz5E,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAIu5E,uBAAuBv5E,CAAK,EAAA,CAAA;oBAC9C,IAAM25E,eAAAA,GAAkBtE,0BAA0B,CAACr1E,CAAE,CAAA,CAAA;AACrD,oBAAA,IAAI25E,kBAAkBH,eAAiB,EAAA;wBACrCA,eAAkBG,GAAAA,eAAAA,CAAAA;wBAClBD,cAAiB15E,GAAAA,CAAAA,CAAAA;AACnB,qBAAA;AACF,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AA3iBWgzE,IAAAA,OAAAA,iBAAAA,CAAAA;AA4iBZ,CAAA,EAAA,CAAA;AA5iBYA,iBACI2B,CAAAA,gBAAAA,GAAmB7iE,WAAYU,CAAAA,SAAS,CAAC,yBAAA,CAAA,CAAA;AAD7CwgE,iBAEI6B,CAAAA,uBAAAA,GAA0B/iE,WAAYU,CAAAA,SAAS,CAAC,iCAAA,CAAA,CAAA;AAFpDwgE,iBAGIwC,CAAAA,sBAAAA,GAAyB1jE,WAAYU,CAAAA,SAAS,CAAC,gCAAA,CAAA,CAAA;AAHnDwgE,iBAIIyC,CAAAA,uBAAAA,GAA0B3jE,WAAYU,CAAAA,SAAS,CAAC,iCAAA,CAAA,CAAA;AAJpDwgE,iBAMIiC,CAAAA,0BAAAA,GAA6Bh/D,cAAezD,CAAAA,SAAS,CAAC,4BAAA,CAAA,CAAA;AAN1DwgE,iBAOI8B,CAAAA,0BAAAA,GAA6B7+D,cAAezD,CAAAA,SAAS,CAAC,4BAAA,CAAA,CAAA;AAP1DwgE,iBAQIgC,CAAAA,8BAAAA,GAAiC/+D,cAAezD,CAAAA,SAAS,CAAC,gCAAA,CAAA;;AC5B3E;;IAGO,IAAKonE,eAAAA,iBAAAA,SAAAA,eAAAA,EAAAA;4BACW,eAAA,CAAA,UAAA,CAAA,GAAA,UAAA,CAAA;0BAEF,eAAA,CAAA,QAAA,CAAA,GAAA,QAAA,CAAA;yBAED,eAAA,CAAA,OAAA,CAAA,GAAA,SAAA,CAAA;2BAEE,eAAA,CAAA,SAAA,CAAA,GAAA,SAAA,CAAA;+BAEI,eAAA,CAAA,YAAA,CAAA,GAAA,WAAA,CAAA;8BAED,eAAA,CAAA,WAAA,CAAA,GAAA,UAAA,CAAA;sBAER,eAAA,CAAA,IAAA,CAAA,GAAA,YAAA,CAAA;uBAEC,eAAA,CAAA,KAAA,CAAA,GAAA,YAAA,CAAA;uBAEA,eAAA,CAAA,KAAA,CAAA,GAAA,YAAA,CAAA;uBAEA,eAAA,CAAA,KAAA,CAAA,GAAA,YAAA,CAAA;uBAEA,eAAA,CAAA,KAAA,CAAA,GAAA,YAAA,CAAA;uBAEA,eAAA,CAAA,KAAA,CAAA,GAAA,YAAA,CAAA;uBAEA,eAAA,CAAA,KAAA,CAAA,GAAA,YAAA,CAAA;uBAEA,eAAA,CAAA,KAAA,CAAA,GAAA,YAAA,CAAA;AA3BNA,IAAAA,OAAAA,eAAAA,CAAAA;AA6BX,CAAA,CAAA,EAAA;;AChBD;;IAGO,IAAMC,SAAN,iBAAA,SAAA,IAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,CAAAA;aAAAA,SAoGC1pF,CAAAA,MAAc,EAAE6T,IAAa,EAAA;;gBACvC,IAAM7T,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,CAAAA,IAAAA,IAAAA,mBA3FR8lF,KAAAA,CAAAA,0BAAAA,GAAqC,CAAC,CAE9B6D,EAAAA,KAAAA,CAAAA,YAAAA,GAAuB,SACvBC,iBAA6B,GAAA,KAAA,EAAA,KAAA,CAC7BC,sBAA8B,CAE9BxsE,EAAAA,KAAAA,CAAAA,UAAAA,GAA+B,YAC/BysE,QAA6B,GAAA,IAAA,EAAA,KAAA,CAC7BC,UAA0B,IAC1BC,EAAAA,KAAAA,CAAAA,SAAAA,GAA8B,IAC9BC,EAAAA,KAAAA,CAAAA,GAAAA,GAAwB,IACxBC,EAAAA,KAAAA,CAAAA,IAAAA,GAAyB,YACzBC,IAAyB,GAAA,IAAA,EAAA,KAAA,CACzBC,OAAyB,IACzBC,EAAAA,KAAAA,CAAAA,IAAAA,GAAyB,YACzBC,IAAyB,GAAA,IAAA,EAAA,KAAA,CACzBC,OAAyB,IACzBC,EAAAA,KAAAA,CAAAA,IAAAA,GAAyB,YACzBC,YAAiC,GAAA,IAAA,EAAA,KAAA,CACjCC,eAAiC,IACjCC,EAAAA,KAAAA,CAAAA,0BAAAA,GAAAA,CAAAA,EAAAA,KAAAA,CACAC,mCACAC,2BAAwC,GAAA,IAAItrF,KAAc,CAAA,EAAA,CAAA;gBAC1DurF,yBAAqC,GAAA,KAAA,EAAA,KAAA,CAErCC,2BAAsC,GAAA,CAAA,EAAA,KAAA,CACtCC,gCAA4C,GAAA,IAAIxyD,mBAAQ,CAAG,EAAA,CAAA,EAAG,CAAC,CAAA,CAAA;AAC/DyyD,UAAAA,KAAAA,CAAAA,6BAAAA,GAAwC,CACxCC,EAAAA,KAAAA,CAAAA,4BAAAA,GAAAA,CAAAA,EAAAA,KAAAA,CAEAC,kBAAyC,GAAA,EAAE,EAE3CC,KAAAA,CAAAA,QAAAA,GAA0D,IAC1DC,EAAAA,KAAAA,CAAAA,cAAAA,GAA8B,IAC9BC,EAAAA,KAAAA,CAAAA,kBAAAA,GAA8B,KA2uCtC,2BACQC,WAAuB,GAAA,IAAA,CAAA;AAlrC7B,QAAA,KAAA,CAAK13E,IAAI,GAAGA,IAAAA,CAAAA;QACZ,KAAK23E,CAAAA,kBAAkB,GAAG,IAAI3I,iBAAkB7iF,CAAAA,MAAAA,EAAAA,KAAAA,CAAAA,CAAAA;;;AAvGvC0pF,IAAAA,IAAAA,MAAAA,GAAAA,SAAAA,CAAAA,SAAAA,CAAAA;AA0GX;;;AAGC,MACD+B,MAAAA,CAAAA,YAUC,GAVDA,SAAAA,aAAa/rE,SAA2B,EAAA;AACtC,QAAA,IAAI,CAAC,IAAI,CAACrC,UAAU,IAAI,CAACqC,SAAW,EAAA;AAClC,YAAA,OAAA;AACF,SAAA;AAEA,QAAA,IAAI,CAACgsE,8BAA8B,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA;QACnC,IAAI,CAACruE,UAAU,GAAGqC,SAAAA,CAAAA;AAEEA,QAAAA,IAAAA,iBAAAA,CAAAA;QAApB,IAAI,CAACiqE,YAAY,GAAGjqE,CAAAA,oBAAAA,SAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,SAAAA,CAAWrgB,MAAM,KAAA,IAAA,GAAjBqgB,iBAAqB,GAAA,CAAA,CAAA;QACzC,IAAI,CAACkqE,iBAAiB,GAAG,KAAA,CAAA;AAC3B,KAAA,CAAA;AAEA;;;MAIA+B,MAAAA,CAAAA,YASC,GATDA,SAAAA,YAAAA,GAAAA;AACE,QAAA,IAAMjsE,SAAY,GAAA,IAAI,CAACksE,qBAAqB,CAC1C,IAAI,CAACvuE,UAAU,EACfosE,eAAgBoC,CAAAA,QAAQ,EAExB,CAAA,EAAA,IAAI,CAACC,sBAAsB,CAAA,CAAA;QAE7B,IAAI,CAACzuE,UAAU,GAAGqC,SAAAA,CAAAA;QAClB,OAAOA,SAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;AAGC,MACDqsE,MAAAA,CAAAA,UAGC,GAHDA,SAAAA,WAAWC,OAAyB,EAAA;QAClC,IAAI,CAACC,4BAA4B,CAACD,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA;QAClC,IAAI,CAAClC,QAAQ,GAAGkC,OAAAA,CAAAA;AAClB,KAAA,CAAA;AAEA;;;MAIAE,MAAAA,CAAAA,UASC,GATDA,SAAAA,UAAAA,GAAAA;AACE,QAAA,IAAMF,OAAU,GAAA,IAAI,CAACJ,qBAAqB,CACxC,IAAI,CAAC9B,QAAQ,EACbL,eAAgBr4B,CAAAA,MAAM,EAEtB,CAAA,EAAA,IAAI,CAAC06B,sBAAsB,CAAA,CAAA;QAE7B,IAAI,CAAChC,QAAQ,GAAGkC,OAAAA,CAAAA;QAChB,OAAOA,OAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;AAGC,MACDG,MAAAA,CAAAA,SAGC,GAHDA,SAAAA,UAAUC,MAAsB,EAAA;QAC9B,IAAI,CAACH,4BAA4B,CAACG,MAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA;QAClC,IAAI,CAACrC,OAAO,GAAGqC,MAAAA,CAAAA;AACjB,KAAA,CAAA;AAEA;;;MAIAC,MAAAA,CAAAA,SASC,GATDA,SAAAA,SAAAA,GAAAA;AACE,QAAA,IAAMD,MAAS,GAAA,IAAI,CAACR,qBAAqB,CACvC,IAAI,CAAC7B,OAAO,EACZN,eAAgB74D,CAAAA,KAAK,EAErB,CAAA,EAAA,IAAI,CAAC07D,oBAAoB,CAAA,CAAA;QAE3B,IAAI,CAACvC,OAAO,GAAGqC,MAAAA,CAAAA;QACf,OAAOA,MAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;AAGC,MACDG,MAAAA,CAAAA,cAGC,GAHDA,SAAAA,eAAeC,WAA6B,EAAA;QAC1C,IAAI,CAACP,4BAA4B,CAACO,WAAAA,EAAAA,EAAAA,EAAAA,CAAAA,CAAAA,CAAAA;QAClC,IAAI,CAAC/B,YAAY,GAAG+B,WAAAA,CAAAA;AACtB,KAAA,CAAA;AAEA;;;MAIAC,MAAAA,CAAAA,cASC,GATDA,SAAAA,cAAAA,GAAAA;AACE,QAAA,IAAMD,WAAc,GAAA,IAAI,CAACZ,qBAAqB,CAC5C,IAAI,CAACnB,YAAY,EACjBhB,eAAgBiD,CAAAA,UAAU,EAE1B,CAAA,EAAA,IAAI,CAACC,sBAAsB,CAAA,CAAA;QAE7B,IAAI,CAAClC,YAAY,GAAG+B,WAAAA,CAAAA;QACpB,OAAOA,WAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;AAGC,MACDI,MAAAA,CAAAA,cAGC,GAHDA,SAAAA,eAAeC,WAA6B,EAAA;QAC1C,IAAI,CAACZ,4BAA4B,CAACY,WAAAA,EAAAA,EAAAA,EAAAA,CAAAA,CAAAA,CAAAA;QAClC,IAAI,CAACnC,YAAY,GAAGmC,WAAAA,CAAAA;AACtB,KAAA,CAAA;AAEA;;;MAIAC,MAAAA,CAAAA,cASC,GATDA,SAAAA,cAAAA,GAAAA;AACE,QAAA,IAAMD,WAAc,GAAA,IAAI,CAACjB,qBAAqB,CAC5C,IAAI,CAAClB,YAAY,EACjBjB,eAAgBsD,CAAAA,SAAS,EAEzB,CAAA,EAAA,IAAI,CAACJ,sBAAsB,CAAA,CAAA;QAE7B,IAAI,CAACjC,YAAY,GAAGmC,WAAAA,CAAAA;QACpB,OAAOA,WAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;AAGC,MACDG,MAAAA,CAAAA,WAGC,GAHDA,SAAAA,YAAYC,QAA0B,EAAA;QACpC,IAAI,CAAChB,4BAA4B,CAACgB,QAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA;QAClC,IAAI,CAACjD,SAAS,GAAGiD,QAAAA,CAAAA;AACnB,KAAA,CAAA;AAEA;;;MAIAC,MAAAA,CAAAA,WASC,GATDA,SAAAA,WAAAA,GAAAA;AACE,QAAA,IAAMD,QAAW,GAAA,IAAI,CAACrB,qBAAqB,CACzC,IAAI,CAAC5B,SAAS,EACdP,eAAgB0D,CAAAA,OAAO,EAEvB,CAAA,EAAA,IAAI,CAACR,sBAAsB,CAAA,CAAA;QAE7B,IAAI,CAAC3C,SAAS,GAAGiD,QAAAA,CAAAA;QACjB,OAAOA,QAAAA,CAAAA;AACT,KAAA,CAAA;AAaAG,IAAAA,MAAAA,CAAAA,MAsCC,GAtCDA,SAAAA,MAAOxtE,CAAAA,EAAoB,EAAEytE,YAAqB,EAAA;AAChDA,QAAAA,YAAAA,GAAeA,uBAAAA,YAAgB,GAAA,CAAA,CAAA;QAC/B,OAAQA,YAAAA;YACN,KAAK,CAAA;gBACH,IAAI,CAACpB,4BAA4B,CAACrsE,EAAAA,EAAAA,EAAAA,EAAAA,CAAAA,CAAAA,CAAAA;gBAClC,IAAI,CAACqqE,GAAG,GAAGrqE,EAAAA,CAAAA;AACX,gBAAA,MAAA;YACF,KAAK,CAAA;gBACH,IAAI,CAACqsE,4BAA4B,CAACrsE,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,CAAAA;gBAClC,IAAI,CAACsqE,IAAI,GAAGtqE,EAAAA,CAAAA;AACZ,gBAAA,MAAA;YACF,KAAK,CAAA;gBACH,IAAI,CAACqsE,4BAA4B,CAACrsE,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,CAAAA;gBAClC,IAAI,CAACuqE,IAAI,GAAGvqE,EAAAA,CAAAA;AACZ,gBAAA,MAAA;YACF,KAAK,CAAA;gBACH,IAAI,CAACqsE,4BAA4B,CAACrsE,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,CAAAA;gBAClC,IAAI,CAACwqE,IAAI,GAAGxqE,EAAAA,CAAAA;AACZ,gBAAA,MAAA;YACF,KAAK,CAAA;gBACH,IAAI,CAACqsE,4BAA4B,CAACrsE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,CAAAA,CAAAA;gBAClC,IAAI,CAACyqE,IAAI,GAAGzqE,EAAAA,CAAAA;AACZ,gBAAA,MAAA;YACF,KAAK,CAAA;gBACH,IAAI,CAACqsE,4BAA4B,CAACrsE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,CAAAA,CAAAA;gBAClC,IAAI,CAAC0qE,IAAI,GAAG1qE,EAAAA,CAAAA;AACZ,gBAAA,MAAA;YACF,KAAK,CAAA;gBACH,IAAI,CAACqsE,4BAA4B,CAACrsE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,CAAAA,CAAAA;gBAClC,IAAI,CAAC2qE,IAAI,GAAG3qE,EAAAA,CAAAA;AACZ,gBAAA,MAAA;YACF,KAAK,CAAA;gBACH,IAAI,CAACqsE,4BAA4B,CAACrsE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,CAAAA,CAAAA;gBAClC,IAAI,CAAC4qE,IAAI,GAAG5qE,EAAAA,CAAAA;AACZ,gBAAA,MAAA;AACF,YAAA;gBACE,MAAM,oDAAA,CAAA;AACV,SAAA;AACF,KAAA,CAAA;AAeA0tE,IAAAA,MAAAA,CAAAA,MA6EC,GA7EDA,SAAAA,MAAAA,CAAOD,YAAqB,EAAA;AAC1BA,QAAAA,YAAAA,GAAeA,uBAAAA,YAAgB,GAAA,CAAA,CAAA;QAC/B,OAAQA,YAAAA;YACN,KAAK,CAAA;AACH,gBAAA,IAAMnxF,GAAM,GAAA,IAAI,CAAC0vF,qBAAqB,CACpC,IAAI,CAAC3B,GAAG,EACRR,eAAgB8D,CAAAA,EAAE,EAElB,CAAA,EAAA,IAAI,CAACC,sBAAsB,CAAA,CAAA;gBAE7B,IAAI,CAACvD,GAAG,GAAG/tF,GAAAA,CAAAA;gBACX,OAAOA,GAAAA,CAAAA;YACT,KAAK,CAAA;AACH,gBAAA,IAAMuxF,IAAO,GAAA,IAAI,CAAC7B,qBAAqB,CACrC,IAAI,CAAC1B,IAAI,EACTT,eAAgBlQ,CAAAA,GAAG,EAEnB,CAAA,EAAA,IAAI,CAACiU,sBAAsB,CAAA,CAAA;gBAE7B,IAAI,CAACtD,IAAI,GAAGuD,IAAAA,CAAAA;gBACZ,OAAOA,IAAAA,CAAAA;YACT,KAAK,CAAA;AACH,gBAAA,IAAMC,IAAO,GAAA,IAAI,CAAC9B,qBAAqB,CACrC,IAAI,CAACzB,IAAI,EACTV,eAAgBkE,CAAAA,GAAG,EAEnB,CAAA,EAAA,IAAI,CAACH,sBAAsB,CAAA,CAAA;gBAE7B,IAAI,CAACrD,IAAI,GAAGuD,IAAAA,CAAAA;gBACZ,OAAOA,IAAAA,CAAAA;YACT,KAAK,CAAA;AACH,gBAAA,IAAME,IAAO,GAAA,IAAI,CAAChC,qBAAqB,CACrC,IAAI,CAACxB,IAAI,EACTX,eAAgBoE,CAAAA,GAAG,EAEnB,CAAA,EAAA,IAAI,CAACL,sBAAsB,CAAA,CAAA;gBAE7B,IAAI,CAACpD,IAAI,GAAGwD,IAAAA,CAAAA;gBACZ,OAAOA,IAAAA,CAAAA;YACT,KAAK,CAAA;AACH,gBAAA,IAAME,IAAO,GAAA,IAAI,CAAClC,qBAAqB,CACrC,IAAI,CAACvB,IAAI,EACTZ,eAAgBsE,CAAAA,GAAG,EAEnB,EAAA,EAAA,IAAI,CAACP,sBAAsB,CAAA,CAAA;gBAE7B,IAAI,CAACnD,IAAI,GAAGyD,IAAAA,CAAAA;gBACZ,OAAOA,IAAAA,CAAAA;YACT,KAAK,CAAA;AACH,gBAAA,IAAME,IAAO,GAAA,IAAI,CAACpC,qBAAqB,CACrC,IAAI,CAACtB,IAAI,EACTb,eAAgBwE,CAAAA,GAAG,EAEnB,EAAA,EAAA,IAAI,CAACT,sBAAsB,CAAA,CAAA;gBAE7B,IAAI,CAAClD,IAAI,GAAG0D,IAAAA,CAAAA;gBACZ,OAAOA,IAAAA,CAAAA;YACT,KAAK,CAAA;AACH,gBAAA,IAAME,IAAO,GAAA,IAAI,CAACtC,qBAAqB,CACrC,IAAI,CAACrB,IAAI,EACTd,eAAgB0E,CAAAA,GAAG,EAEnB,EAAA,EAAA,IAAI,CAACX,sBAAsB,CAAA,CAAA;gBAE7B,IAAI,CAACjD,IAAI,GAAG2D,IAAAA,CAAAA;gBACZ,OAAOA,IAAAA,CAAAA;YACT,KAAK,CAAA;AACH,gBAAA,IAAME,IAAO,GAAA,IAAI,CAACxC,qBAAqB,CACrC,IAAI,CAACpB,IAAI,EACTf,eAAgB4E,CAAAA,GAAG,EAEnB,EAAA,EAAA,IAAI,CAACb,sBAAsB,CAAA,CAAA;gBAE7B,IAAI,CAAChD,IAAI,GAAG4D,IAAAA,CAAAA;gBACZ,OAAOA,IAAAA,CAAAA;AACX,SAAA;QACA,MAAM,oDAAA,CAAA;AACR,KAAA,CAAA;AAEA;;;AAGC,MACDE,MAAAA,CAAAA,UAaC,GAbDA,SAAAA,WAAWx7C,OAA+C,EAAA;AACxD,QAAA,IAAI,IAAI,CAACs4C,QAAQ,KAAKt4C,OAAS,EAAA;YAC7B,IAAI,CAACs4C,QAAQ,GAAGt4C,OAAAA,CAAAA;YAChB,IAAW,WAAPA,CAAAA,OAAAA,EAAmBl0C,UAAY,CAAA,EAAA;AACjC,gBAAA,IAAI,CAACysF,cAAc,GAAGlY,WAAAA,CAAYK,KAAK,CAAA;AACzC,aAAA,MAAO,IAAW,WAAP1gC,CAAAA,OAAAA,EAAmBj0C,WAAa,CAAA,EAAA;AACzC,gBAAA,IAAI,CAACwsF,cAAc,GAAGlY,WAAAA,CAAYO,MAAM,CAAA;AAC1C,aAAA,MAAO,IAAW,WAAP5gC,CAAAA,OAAAA,EAAmBh0C,WAAa,CAAA,EAAA;AACzC,gBAAA,IAAI,CAACusF,cAAc,GAAGlY,WAAAA,CAAYS,MAAM,CAAA;AAC1C,aAAA;AACF,SAAA;QAEA,IAAI,CAAC0X,kBAAkB,GAAG,IAAA,CAAA;AAC5B,KAAA,CAAA;AAEA;;MAGAiD,MAAAA,CAAAA,UAKC,GALDA,SAAAA,UAAAA,GAAAA;AACE,QAAA,IAAI,CAAC,IAAI,CAAChD,WAAW,EAAE;YACrB,MAAM,uDAAA,CAAA;AACR,SAAA;QACA,OAAO,IAAI,CAACH,QAAQ,CAAA;AACtB,KAAA,CAAA;AAEA;;;;;;AAMC,MACD1J,MAAAA,CAAAA,iBAuCC,GAvCDA,SAAAA,kBAAkBjqE,QAAyB,EAAA;AACzC,QAAA,IAAI,CAACopE,oBAAoB,EAAA,CAAA;QAEzB,IAAM77D,KAAAA,GAAQvN,SAASpY,MAAM,CAAA;AAC7B,QAAA,IAAK,IAAII,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAIulB,OAAOvlB,CAAK,EAAA,CAAA;AAC9B,YAAA,IAAI,CAACqhF,iBAAiB,CAACrpE,QAAQ,CAAChY,CAAE,CAAA,CAAA,CAAA;AACpC,SAAA;;AAGA,QAAA,IAAMu/E,gBAAmB,GAAA,IAAI,CAACpvB,UAAU,CAAC8uB,iBAAiB,CAAA;QAC1DM,gBAAgB,CAACyK,gBAAgBoC,QAAQ,CAAC,IAAI,IAAI,CAACJ,YAAY,CAAC,IAAA,CAAA,CAAA;QAChEzM,gBAAgB,CAACyK,gBAAgBr4B,MAAM,CAAC,IAAI,IAAI,CAAC26B,UAAU,CAAC,IAAA,CAAA,CAAA;QAC5D/M,gBAAgB,CAACyK,gBAAgB74D,KAAK,CAAC,IAAI,IAAI,CAACu7D,SAAS,CAAC,IAAA,CAAA,CAAA;QAC1DnN,gBAAgB,CAACyK,gBAAgBiD,UAAU,CAAC,IAAI,IAAI,CAACH,cAAc,CAAC,IAAA,CAAA,CAAA;QACpEvN,gBAAgB,CAACyK,gBAAgBsD,SAAS,CAAC,IAAI,IAAI,CAACH,cAAc,CAAC,IAAA,CAAA,CAAA;QACnE5N,gBAAgB,CAACyK,gBAAgB0D,OAAO,CAAC,IAAI,IAAI,CAACH,WAAW,CAAC,IAAA,CAAA,CAAA;QAC9DhO,gBAAgB,CAACyK,gBAAgB8D,EAAE,CAAC,IAAI,IAAI,CAACH,MAAM,CAAC,IAAM,EAAA,CAAA,CAAA,CAAA;QAC1DpO,gBAAgB,CAACyK,gBAAgBlQ,GAAG,CAAC,IAAI,IAAI,CAAC6T,MAAM,CAAC,IAAM,EAAA,CAAA,CAAA,CAAA;QAC3DpO,gBAAgB,CAACyK,gBAAgBkE,GAAG,CAAC,IAAI,IAAI,CAACP,MAAM,CAAC,IAAM,EAAA,CAAA,CAAA,CAAA;QAC3DpO,gBAAgB,CAACyK,gBAAgBoE,GAAG,CAAC,IAAI,IAAI,CAACT,MAAM,CAAC,IAAM,EAAA,CAAA,CAAA,CAAA;QAC3DpO,gBAAgB,CAACyK,gBAAgBsE,GAAG,CAAC,IAAI,IAAI,CAACX,MAAM,CAAC,IAAM,EAAA,CAAA,CAAA,CAAA;QAC3DpO,gBAAgB,CAACyK,gBAAgBwE,GAAG,CAAC,IAAI,IAAI,CAACb,MAAM,CAAC,IAAM,EAAA,CAAA,CAAA,CAAA;QAC3DpO,gBAAgB,CAACyK,gBAAgB0E,GAAG,CAAC,IAAI,IAAI,CAACf,MAAM,CAAC,IAAM,EAAA,CAAA,CAAA,CAAA;QAC3DpO,gBAAgB,CAACyK,gBAAgB4E,GAAG,CAAC,IAAI,IAAI,CAACjB,MAAM,CAAC,IAAM,EAAA,CAAA,CAAA,CAAA;;AAG3D,QAAA,IAAMvH,yBAA4B,GAAA,IAAI,CAACmF,gCAAgC,CAAC/rE,CAAC,CAAA;QACzE,IAAI4mE,yBAAAA,KAA8B,CAAC,CAAG,EAAA;AACpC,YAAA,IAAA,+DAAA,CAAA;aAAA,+DAAA,GAAA,IAAI,CAACj2B,UAAU,CAAC6uB,oBAAoB,CAACoH,yBAAAA,CAA0B,KAA/D,IAAA,GAAA,KAAA,CAAA,GAAA,+DAAA,CAAiEjzE,MAAM,CAACvS,OAAO,EAAA,CAAA;YAC/E,IAAI,CAAC6gF,uBAAuB,CAAC2E,yBAA2B,EAAA,IAAA,CAAA,CAAA;AACxD,YAAA,IAAI,CAACmF,gCAAgC,CAAC/rE,CAAC,GAAG,CAAC,CAAA,CAAA;AAC7C,SAAA;QAEA,IAAI,CAAC8rE,2BAA2B,GAAG,CAAA,CAAA;QACnC,IAAI,CAACE,6BAA6B,GAAGjmE,KAAAA,CAAAA;AACrC,QAAA,IAAI,CAAC2lE,0BAA0B,GAAA,CAAA,CAAA;QAC/B,IAAI,CAACf,iBAAiB,GAAG,IAAA,CAAA;AACzB,QAAA,IAAI,CAAC4B,kBAAkB,CAACpI,oBAAoB,GAAG,CAAC,CAAA,CAAA;AAChD,QAAA,IAAI,CAACoI,kBAAkB,CAACnI,oBAAoB,GAAGr+D,KAAAA,CAAAA;AACjD,KAAA,CAAA;IAiBAw6D,MAAAA,CAAAA,sBA8BC,GA9BDA,SAAAA,sBAAAA,CACEmC,eAA6C,EAC7C6M,aAAyB,EACzBC,WAAuB,EAAA;AADvBD,QAAAA,IAAAA,0BAAAA,aAAwB,GAAA,CAAA,CAAA;AACxBC,QAAAA,IAAAA,wBAAAA,WAAsB,GAAA,CAAA,CAAA;AAEtB,QAAA,IAAIhP,OAA+BkC,GAAAA,eAAAA,CAAAA;QACnC,IAAME,SAAAA,GAAYpC,OAAQ7sE,CAAAA,MAAM,KAAKjU,SAAAA,CAAAA;AACrCkjF,QAAAA,SAAAA,KAAcpC,OAAAA,GAAU,IAAI6B,mBAAAA,CAA4BK,iBAAiB6M,aAAa,CAAA,CAAA,CAAA;QACtF,IAAM/sF,KAAAA,GAAQogF,YAAY2M,aAAgBC,GAAAA,WAAAA,CAAAA;AAE1C,QAAA,IAAM7O,QAAW,GAAA,IAAI,CAAChwB,UAAU,CAAC6uB,oBAAoB,CAAA;QACrD,IAAMiQ,WAAAA,GAAc,IAAI,CAACvD,kBAAkB,CAAA;AAE3C,QAAA,IAAMtL,aAAap+E,KAAQ,GAAA,CAAA,CAAA;QAC3B,IAAIm+E,QAAAA,CAASvgF,MAAM,GAAGwgF,UAAY,EAAA;AAChCD,YAAAA,QAAAA,CAASvgF,MAAM,GAAGwgF,UAAAA,CAAAA;AAClB6O,YAAAA,WAAAA,CAAYrvF,MAAM,GAAGwgF,UAAAA,CAAAA;AACvB,SAAA;QAEA,IAAI,CAACqB,uBAAuB,CAACz/E,KAAOg+E,EAAAA,OAAAA,CAAAA,CAAAA;;AAGpC,QAAA,IAAIh+E,KAAU,KAAA,IAAI,CAACqkF,0BAA0B,EAAE;YAC7C,IAAI,CAACA,0BAA0B,GAAG,CAAC,CAAA,CAAA;AACrC,SAAA;;AAEA,QAAA,IAAIrkF,UAAU,IAAI,CAAC+pF,kBAAkB,CAACpI,oBAAoB,EAAE;AAC1D,YAAA,IAAI,CAACoI,kBAAkB,CAACpI,oBAAoB,GAAG,CAAC,CAAA,CAAA;AAClD,SAAA;QACA,IAAI,CAACwG,iBAAiB,GAAG,IAAA,CAAA;AAC3B,KAAA,CAAA;AAEA;;;;AAIC,MACDlK,OAAAA,uBAwBC,GAxBDA,SAAAA,uBAAwBjB,CAAAA,oBAA2C,EAAEkB,UAAsB,EAAA;AAAtBA,QAAAA,IAAAA,uBAAAA,UAAqB,GAAA,CAAA,CAAA;QACxF,IAAM36D,KAAAA,GAAQy5D,qBAAqBp/E,MAAM,CAAA;AACzC,QAAA,IAAMugF,QAAW,GAAA,IAAI,CAAChwB,UAAU,CAAC6uB,oBAAoB,CAAA;QACrD,IAAMiQ,WAAAA,GAAc,IAAI,CAACvD,kBAAkB,CAAA;AAE3C,QAAA,IAAMtL,aAAaF,UAAa36D,GAAAA,KAAAA,CAAAA;QAChC,IAAI46D,QAAAA,CAASvgF,MAAM,GAAGwgF,UAAY,EAAA;AAChCD,YAAAA,QAAAA,CAASvgF,MAAM,GAAGwgF,UAAAA,CAAAA;AAClB6O,YAAAA,WAAAA,CAAYrvF,MAAM,GAAGwgF,UAAAA,CAAAA;AACvB,SAAA;AAEA,QAAA,IAAK,IAAIpgF,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAIulB,OAAOvlB,CAAK,EAAA,CAAA;AAC9B,YAAA,IAAMgC,QAAQk+E,UAAalgF,GAAAA,CAAAA,CAAAA;AAC3B,YAAA,IAAI,CAACyhF,uBAAuB,CAACz/E,KAAOg9E,EAAAA,oBAAoB,CAACh/E,CAAE,CAAA,CAAA,CAAA;;AAE3D,YAAA,IAAIgC,KAAU,KAAA,IAAI,CAACqkF,0BAA0B,EAAE;gBAC7C,IAAI,CAACA,0BAA0B,GAAG,CAAC,CAAA,CAAA;AACrC,aAAA;;AAEA,YAAA,IAAIrkF,UAAU,IAAI,CAAC+pF,kBAAkB,CAACpI,oBAAoB,EAAE;AAC1D,gBAAA,IAAI,CAACoI,kBAAkB,CAACpI,oBAAoB,GAAG,CAAC,CAAA,CAAA;AAClD,aAAA;AACF,SAAA;QACA,IAAI,CAACwG,iBAAiB,GAAG,IAAA,CAAA;AAC3B,KAAA,CAAA;AAEA;;;;AAIC,MACD+E,MAAAA,CAAAA,gBAGC,GAHDA,SAAAA,iBAAiB3Z,SAA0B,EAAA;AACzC,QAAA,IAAI,CAAC4Z,qBAAqB,EAAA,CAAA;AAC1B,QAAA,OAAO,IAAI,CAACh/B,UAAU,CAAC8uB,iBAAiB,CAAC1J,SAAU,CAAA,CAAA;AACrD,KAAA,CAAA;AAEA;;;AAGC,MACD6Z,MAAAA,CAAAA,aAEC,GAFDA,SAAAA,cAAc3K,UAAsB,EAAA;AAClC,QAAA,IAAI,CAACsH,kBAAkB,CAACvH,cAAc,CAACC,UAAAA,CAAAA,CAAAA;AACzC,KAAA,CAAA;AAEA;;MAGA4K,MAAAA,CAAAA,gBAEC,GAFDA,SAAAA,gBAAAA,GAAAA;QACE,IAAI,CAACtD,kBAAkB,CAACrH,iBAAiB,EAAA,CAAA;AAC3C,KAAA,CAAA;AAEA;;;;AAIC,MACD4K,MAAAA,CAAAA,iBAGC,GAHDA,SAAAA,kBAAkBttF,KAAa,EAAA;AAC7B,QAAA,IAAM2iF,WAAc,GAAA,IAAI,CAACoH,kBAAkB,CAACxI,YAAY,CAAA;AACxD,QAAA,OAAOoB,WAAW,CAAC3iF,KAAM,CAAA,CAACoS,IAAI,CAAA;AAChC,KAAA,CAAA;AAEA;;;;;AAKC,MACDm7E,MAAAA,CAAAA,UAwDC,GAxDDA,SAAAA,WAAWC,WAAoB,EAAA;AAC7B,QAAA,IAAI,CAACL,qBAAqB,EAAA,CAAA;;QAG1B,IAAI,CAAC9D,yBAAyB,GAAG,IAAA,CAAA;;QAGjC,IAAI,CAACoE,2BAA2B,CAACD,WAAAA,CAAAA,CAAAA;;QAGjC,IAAI,IAAI,CAACrE,uBAAuB,GAA2B,KAAA,EAAA;AACzD,YAAA,IAAI,CAACuE,uBAAuB,EAAA,CAAA;YAE5B,IAAMC,iBAAAA,GAAoB,IAAI,CAACjE,kBAAkB,CAAA;AACjD,YAAA,IAAM1M,oBAAuB,GAAA,IAAI,CAAC7uB,UAAU,CAAC6uB,oBAAoB,CAAA;YACjE,IAAK,IAAIh/E,IAAI,CAAG0B,EAAAA,CAAAA,GAAIs9E,qBAAqBp/E,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;gBAC3D,IAAM4vF,gBAAAA,GAAmBD,iBAAiB,CAAC3vF,CAAE,CAAA,CAAA;;gBAE7C,IAAI4vF,gBAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,gBAAkBC,CAAAA,kBAAkB,EAAE;AACzB7Q,oBAAAA,IAAAA,uBAAAA,CAAAA;AAAf,oBAAA,IAAM7rE,UAAS6rE,uBAAAA,GAAAA,oBAAoB,CAACh/E,CAAE,CAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAvBg/E,wBAAyB7rE,MAAM,CAAA;oBAC9CA,MAAOy/D,CAAAA,OAAO,CAACz/D,MAAAA,CAAO5H,IAAI,CAAA,CAAA;AAC1BqkF,oBAAAA,gBAAAA,CAAiBC,kBAAkB,GAAG,KAAA,CAAA;AACxC,iBAAA;AACF,aAAA;AACF,SAAA;QACA,IAAI,CAACxE,yBAAyB,GAAG,KAAA,CAAA;QAEjC,IAAI,IAAI,CAACQ,kBAAkB,EAAE;AAEP,YAAA,IAAA,mCAAA,CAAA;AADpB,YAAA,IAA8B,KAAA,GAAA,IAAI,EAAhBx4C,UAAY,KAAtBs4C,CAAAA,QAAAA,CAAAA;YACR,IAAMmE,WAAAA,GAAAA,CAAc,sCAAA,IAAI,CAAC3/B,UAAU,CAACowB,kBAAkB,KAAlC,IAAA,GAAA,KAAA,CAAA,GAAA,mCAAA,CAAoC/B,OAAO,CAAA;AAC/D,YAAA,IAAInrC,OAAS,EAAA;AACX,gBAAA,IAAI,CAACy8C,WAAez8C,IAAAA,OAAAA,CAAQo/B,UAAU,IAAIqd,WAAAA,CAAYrd,UAAU,EAAE;AAChEqd,oBAAAA,WAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,YAAalvF,OAAO,EAAA,CAAA;oBACpB,IAAMmvF,cAAAA,GAAiB,IAAIje,MAAO,CAAA,IAAI,CAACnxE,OAAO,EAAEq1E,cAAega,CAAAA,WAAW,EAAE38C,OAAAA,CAAAA,CAAAA;oBAC5E,IAAI,CAACsuC,sBAAsB,CAAC,IAAIpD,mBAAmBwR,cAAgB,EAAA,IAAI,CAACnE,cAAc,CAAA,CAAA,CAAA;iBACjF,MAAA;AACLkE,oBAAAA,WAAAA,CAAYld,OAAO,CAACv/B,OAAAA,CAAAA,CAAAA;oBACpB,IAAI,IAAI,CAAC8c,UAAU,CAACowB,kBAAkB,CAACh6E,OAAO,KAAK,IAAI,CAACqlF,cAAc,EAAE;wBACtE,IAAI,CAACjK,sBAAsB,CAAC,IAAIpD,mBAAmBuR,WAAa,EAAA,IAAI,CAAClE,cAAc,CAAA,CAAA,CAAA;AACrF,qBAAA;AACF,iBAAA;AACF,aAAA,MAAO,IAAIkE,WAAa,EAAA;AACtBA,gBAAAA,WAAAA,CAAYlvF,OAAO,EAAA,CAAA;gBACnB,IAAI,CAAC+gF,sBAAsB,CAAC,IAAA,CAAA,CAAA;AAC9B,aAAA;YAEA,IAAI,CAACkK,kBAAkB,GAAG,KAAA,CAAA;AAC5B,SAAA;QAEA,IAAMoE,iBAAAA,GAAoB,IAAI,CAAClE,kBAAkB,CAAA;AACjDkE,QAAAA,iBAAAA,CAAkB3M,gBAAgB,GAAG,CAAK2M,IAAAA,iBAAAA,CAAkBloE,OAAO,CAACynE,WAAAA,CAAAA,CAAAA;AAEpE,QAAA,IAAIA,WAAa,EAAA;YACf,IAAI,CAAC1D,WAAW,GAAG,KAAA,CAAA;YACnB,IAAI,CAACoE,aAAa,CAAC,KAAA,CAAA,CAAA;AACrB,SAAA;AACF,KAAA,CAAA;AAEA;;;;MAKAC,MAAAA,CAAAA,iBAiFC,GAjFDA,SAAAA,iBAAAA,GAAAA;QACE,IAAMlwE,SAAAA,GAAY,IAAI,CAACisE,YAAY,EAAA,CAAA;QACnC,IAAMK,OAAAA,GAAU,IAAI,CAACE,UAAU,EAAA,CAAA;QAC/B,IAAMhwF,GAAAA,GAAM,IAAI,CAACoxF,MAAM,EAAA,CAAA;QAEvB,IAAI,CAACtB,OAAW,IAAA,CAAC9vF,GAAK,EAAA;YACpB,MAAM,uCAAA,CAAA;AACR,SAAA;QAEA,IAA2C,KAAA,GAAA,IAAI,EAA7B42C,UAAyB,KAAnCs4C,CAAAA,QAAAA,EAAmBljC,cAAgB,KAAhBA,CAAAA,WAAAA,CAAAA;AAC3B,QAAA,IAAQ2nC,EA7pBCnG,GAAAA,SAAAA,CA6pBDmG,WAAeC,EAAW3iB,GA7pBzBuc,UA6pBcoG,SAAeC,EAAWzlC,CA7pBxCo/B,GAAAA,SAAAA,CA6pB6BqG,WAAcC,CAAW/+D,GA7pBtDy4D,UA6pB2CsG,SAAcC,EAAWC,OA7pBpExG,SA6pByDuG,CAAAA,SAAAA,CAAAA;QAClE,IAAME,aAAAA,GAAgBr9C,UAAUA,OAAQzzC,CAAAA,MAAM,GAAG,CAAIqgB,GAAAA,SAAAA,CAAUrgB,MAAM,GAAG,CAAA,CAAA;QACxE,IAAM4tF,QAAAA,GAAW,IAAI1tF,KAAe2oD,CAAAA,WAAAA,CAAAA,CAAAA;QACpC,IAAMkoC,UAAAA,GAAa,IAAI7wF,KAAe2oD,CAAAA,WAAAA,CAAAA,CAAAA;AACtC,QAAA,IAAK,IAAIzoD,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAIyoD,aAAazoD,CAAK,EAAA,CAAA;YACpCwtF,QAAQ,CAACxtF,CAAE,CAAA,GAAG,IAAI1D,kBAAAA,EAAAA,CAAAA;YAClBq0F,UAAU,CAAC3wF,CAAE,CAAA,GAAG,IAAI+4B,kBAAAA,EAAAA,CAAAA;AACtB,SAAA;;AAGA,QAAA,IAAK,IAAIn6B,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAI8xF,eAAe9xF,CAAK,EAAA,CAAA;AACtC,YAAA,IAAIgyF,KAAK,CAAIhyF,GAAAA,CAAAA,CAAAA;YACb,IAAIiyF,EAAAA,GAAK,IAAIjyF,CAAI,GAAA,CAAA,CAAA;YACjB,IAAIkyF,EAAAA,GAAK,IAAIlyF,CAAI,GAAA,CAAA,CAAA;AACjB,YAAA,IAAIy0C,OAAS,EAAA;gBACXu9C,EAAKv9C,GAAAA,OAAO,CAACu9C,EAAG,CAAA,CAAA;gBAChBC,EAAKx9C,GAAAA,OAAO,CAACw9C,EAAG,CAAA,CAAA;gBAChBC,EAAKz9C,GAAAA,OAAO,CAACy9C,EAAG,CAAA,CAAA;AAClB,aAAA;YAEA,IAAMC,EAAAA,GAAK9wE,SAAS,CAAC2wE,EAAG,CAAA,CAAA;YACxB,IAAMI,EAAAA,GAAK/wE,SAAS,CAAC4wE,EAAG,CAAA,CAAA;YACxB,IAAMI,EAAAA,GAAKhxE,SAAS,CAAC6wE,EAAG,CAAA,CAAA;YACxB,IAAMI,EAAAA,GAAKz0F,GAAG,CAACm0F,EAAG,CAAA,CAAA;YAClB,IAAMO,EAAAA,GAAK10F,GAAG,CAACo0F,EAAG,CAAA,CAAA;YAClB,IAAMO,EAAAA,GAAK30F,GAAG,CAACq0F,EAAG,CAAA,CAAA;YAElB/3D,kBAAQohB,CAAAA,QAAQ,CAAC62C,EAAAA,EAAID,EAAItjB,EAAAA,EAAAA,CAAAA,CAAAA;YACzB10C,kBAAQohB,CAAAA,QAAQ,CAAC82C,EAAAA,EAAIF,EAAIrjB,EAAAA,EAAAA,CAAAA,CAAAA;AACzB,YAAA,IAAM2jB,EAAKF,GAAAA,EAAAA,CAAG5nF,CAAC,GAAG2nF,GAAG3nF,CAAC,CAAA;AACtB,YAAA,IAAM+nF,EAAKF,GAAAA,EAAAA,CAAG7nF,CAAC,GAAG2nF,GAAG3nF,CAAC,CAAA;AACtB,YAAA,IAAMgoF,EAAKJ,GAAAA,EAAAA,CAAG3nF,CAAC,GAAG0nF,GAAG1nF,CAAC,CAAA;AACtB,YAAA,IAAMgoF,EAAKJ,GAAAA,EAAAA,CAAG5nF,CAAC,GAAG0nF,GAAG1nF,CAAC,CAAA;AACtB,YAAA,IAAMunB,IAAI,GAAOsgE,IAAAA,EAAKG,GAAAA,EAAAA,GAAKF,KAAKC,EAAC,CAAA,CAAA;AAEjCx4D,YAAAA,kBAAAA,CAAQwhB,KAAK,CAACkzB,EAAI+jB,EAAAA,EAAAA,GAAKzgE,CAAG85B,EAAAA,CAAAA,CAAAA,CAAAA;AAC1B9xB,YAAAA,kBAAAA,CAAQwhB,KAAK,CAACmzB,EAAI6jB,EAAAA,EAAAA,GAAKxgE,CAAG0/D,EAAAA,IAAAA,CAAAA,CAAAA;YAC1B13D,kBAAQohB,CAAAA,QAAQ,CAAC0Q,CAAAA,EAAG4lC,IAAM5lC,EAAAA,CAAAA,CAAAA,CAAAA;AAC1B9xB,YAAAA,kBAAAA,CAAQwhB,KAAK,CAACmzB,EAAI2jB,EAAAA,EAAAA,GAAKtgE,CAAGS,EAAAA,CAAAA,CAAAA,CAAAA;AAC1BuH,YAAAA,kBAAAA,CAAQwhB,KAAK,CAACkzB,EAAI6jB,EAAAA,EAAAA,GAAKvgE,CAAG0/D,EAAAA,IAAAA,CAAAA,CAAAA;YAC1B13D,kBAAQohB,CAAAA,QAAQ,CAAC3oB,CAAAA,EAAGi/D,IAAMj/D,EAAAA,CAAAA,CAAAA,CAAAA;YAE1B,IAAI03D,OAAAA,GAAUsE,QAAQ,CAACoD,EAAG,CAAA,CAAA;AAC1B1H,YAAAA,OAAAA,CAAQnrF,GAAG,CAACmrF,OAAAA,CAAQ3/E,CAAC,GAAGshD,CAAAA,CAAEthD,CAAC,EAAE2/E,OAAAA,CAAQ1/E,CAAC,GAAGqhD,CAAAA,CAAErhD,CAAC,EAAE0/E,OAAAA,CAAQ1pE,CAAC,GAAGqrC,CAAAA,CAAErrC,CAAC,EAAE,GAAA,CAAA,CAAA;YAE/D0pE,OAAUsE,GAAAA,QAAQ,CAACqD,EAAG,CAAA,CAAA;AACtB3H,YAAAA,OAAAA,CAAQnrF,GAAG,CAACmrF,OAAAA,CAAQ3/E,CAAC,GAAGshD,CAAAA,CAAEthD,CAAC,EAAE2/E,OAAAA,CAAQ1/E,CAAC,GAAGqhD,CAAAA,CAAErhD,CAAC,EAAE0/E,OAAAA,CAAQ1pE,CAAC,GAAGqrC,CAAAA,CAAErrC,CAAC,EAAE,GAAA,CAAA,CAAA;YAE/D0pE,OAAUsE,GAAAA,QAAQ,CAACsD,EAAG,CAAA,CAAA;AACtB5H,YAAAA,OAAAA,CAAQnrF,GAAG,CAACmrF,OAAAA,CAAQ3/E,CAAC,GAAGshD,CAAAA,CAAEthD,CAAC,EAAE2/E,OAAAA,CAAQ1/E,CAAC,GAAGqhD,CAAAA,CAAErhD,CAAC,EAAE0/E,OAAAA,CAAQ1pE,CAAC,GAAGqrC,CAAAA,CAAErrC,CAAC,EAAE,GAAA,CAAA,CAAA;AAE/DmxE,YAAAA,UAAU,CAACC,EAAAA,CAAG,CAAC9hE,GAAG,CAAC0C,CAAAA,CAAAA,CAAAA;AACnBm/D,YAAAA,UAAU,CAACE,EAAAA,CAAG,CAAC/hE,GAAG,CAAC0C,CAAAA,CAAAA,CAAAA;AACnBm/D,YAAAA,UAAU,CAACG,EAAAA,CAAG,CAAChiE,GAAG,CAAC0C,CAAAA,CAAAA,CAAAA;AACrB,SAAA;;AAGA,QAAA,IAAK,IAAIxxB,EAAAA,GAAI,CAAGA,EAAAA,EAAAA,GAAIyoD,aAAazoD,EAAK,EAAA,CAAA;YACpC,IAAM0B,CAAAA,GAAI6qF,OAAO,CAACvsF,EAAE,CAAA,CAAA;YACpB,IAAMwxB,EAAAA,GAAIm/D,UAAU,CAAC3wF,EAAE,CAAA,CAAA;YACvB,IAAMkpF,QAAAA,GAAUsE,QAAQ,CAACxtF,EAAE,CAAA,CAAA;YAC3B6qD,CAAE9sD,CAAAA,GAAG,CAACmrF,QAAQ3/E,CAAAA,CAAC,EAAE2/E,QAAQ1/E,CAAAA,CAAC,EAAE0/E,QAAAA,CAAQ1pE,CAAC,CAAA,CAAA;YAErCuZ,kBAAQ2hB,CAAAA,KAAK,CAACmQ,CAAAA,EAAGr5B,EAAGi/D,EAAAA,IAAAA,CAAAA,CAAAA;YACpB,IAAMplF,CAAAA,GAAI0tB,mBAAQwpB,GAAG,CAACkuC,MAAM/uF,CAAK,CAAA,GAAA,GAAA,GAAM,IAAI,CAAC,CAAA,CAAA;AAC5Cq3B,YAAAA,kBAAAA,CAAQwhB,KAAK,CAAC74C,CAAAA,EAAGq3B,mBAAQwpB,GAAG,CAACsI,GAAGnpD,CAAI+uF,CAAAA,EAAAA,IAAAA,CAAAA,CAAAA;YACpC13D,kBAAQohB,CAAAA,QAAQ,CAAC0Q,CAAAA,EAAG4lC,IAAM5lC,EAAAA,CAAAA,CAAAA,CAAAA;AAC1BA,YAAAA,CAAAA,CAAEtM,SAAS,EAAA,CAAA;YACX2qC,QAAQnrF,CAAAA,GAAG,CAAC8sD,CAAAA,CAAEthD,CAAC,EAAEshD,EAAErhD,CAAC,EAAEqhD,CAAErrC,CAAAA,CAAC,EAAEnU,CAAAA,CAAAA,CAAAA;AAC7B,SAAA;QACA,IAAI,CAACkiF,WAAW,CAACC,QAAAA,CAAAA,CAAAA;AACnB,KAAA,CAAA;AAEA;;AAEC,MACD,OAAS/L,uBAyBR,GAzBD,SAASA,uBAAwBz/E,CAAAA,KAAa,EAAEg+E,OAA4B,EAAA;;AAC1E,QAAA,IAAMhB,oBAAuB,GAAA,IAAI,CAAC7uB,UAAU,CAAC6uB,oBAAoB,CAAA;QACjE,IAAMiQ,WAAAA,GAAc,IAAI,CAACvD,kBAAkB,CAAA;AAC3C,QAAA,IAAM+F,qBAAwB,GAAA,WAAA;YAC5B,IAAI,CAAC,KAAKpG,CAAAA,yBAAyB,EAAE;AACnC4D,gBAAAA,WAAW,CAACjtF,KAAM,CAAA,CAAC0vF,WAAW,GAAG,MAAKtH,mBAAmB,EAAA,CAAA;AAC3D,aAAA;AACF,SAAA,CAAA;;QAGA,IAAMuH,eAAAA,GAAkB3S,oBAAoB,CAACh9E,KAAM,CAAA,CAAA;AACnD2vF,QAAAA,eAAAA,IAAmBA,gBAAgBx+E,MAAM,CAAC++D,kBAAkB,CAACn1D,cAAc,CAAC00E,qBAAAA,CAAAA,CAAAA;QAE5E,IAAMhQ,CAAAA,SAAAA,CAAAA,uBAAD,YAAyBz/E,KAAOg+E,EAAAA,OAAAA,CAAAA,CAAAA;;AAGrC,QAAA,IAAIA,OAAS,EAAA;gBAEViP,YAAYjtF,EAAAA,MAAAA,CAAAA;AADbg+E,YAAAA,OAAAA,CAAQ7sE,MAAM,CAAC++D,kBAAkB,CAACr1D,WAAW,CAAC40E,qBAAAA,CAAAA,CAAAA;AAC7CxC,YAAAA,CAAAA,CAAAA,YAAAA,GAAAA,WAAW,EAACjtF,SAAAA,KAAM,CAAA,KAAlBitF,YAAW,CAACjtF,MAAM,CAAA,GAAK,IAAI4vF,gBAAAA,EAAAA,CAAiB,EAAGzpB,KAAK,EAAA,CAAA;AACrDspB,YAAAA,qBAAAA,EAAAA,CAAAA;SACK,MAAA;AACL,YAAA,IAAIzvF,KAAQ,GAAA,CAAA,IAAKg9E,oBAAqBp/E,CAAAA,MAAM,EAAE;AAC5Co/E,gBAAAA,oBAAAA,CAAqBp/E,MAAM,EAAA,CAAA;AAC7B,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AAEA;;AAEC,MACDiyF,OAAAA,oBAaC,GAbDA,SAAAA,oBAAqBC,CAAAA,gBAA6B,EAAEC,QAAkB,EAAA;QACpE,OAAQA,QAAAA;AACN,YAAA,KAAK/oE,SAASyrD,IAAI;AAChB,gBAAA,OAAO,IAAIn1E,SAAUwyF,CAAAA,gBAAAA,CAAAA,CAAAA;AACvB,YAAA,KAAK9oE,SAASgrD,aAAa;AACzB,gBAAA,OAAO,IAAI70E,UAAW2yF,CAAAA,gBAAAA,CAAAA,CAAAA;AACxB,YAAA,KAAK9oE,SAAS8rD,KAAK;AACjB,gBAAA,OAAO,IAAIv1E,UAAWuyF,CAAAA,gBAAAA,CAAAA,CAAAA;AACxB,YAAA,KAAK9oE,SAASkrD,cAAc;AAC1B,gBAAA,OAAO,IAAI90E,WAAY0yF,CAAAA,gBAAAA,CAAAA,CAAAA;AACzB,YAAA,KAAK9oE,SAAS4P,KAAK;AACjB,gBAAA,OAAO,IAAIn5B,YAAaqyF,CAAAA,gBAAAA,CAAAA,CAAAA;AAC5B,SAAA;AACF,KAAA,CAAA;AAEA;;MAGA,MAAA,CAAmBjxF,UAGlB,GAHD,SAAmBA,UAAAA,GAAAA;AACjB,QAAA,IAAA,CAAA,SAAA,CAAMA,UAAD,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;QACL,IAAI,CAACqvF,aAAa,CAAC,IAAA,CAAA,CAAA;AACrB,KAAA,CAAA;IAEA,MAAQ/D,CAAAA,qBAgBP,GAhBD,SAAQA,qBACNnmC,CAAAA,QAAa,EACbgsC,eAAgC,EAChCC,kBAAsC,EACtCC,cAAyD,EAAA;QAEzD,IAAMC,0BAAAA,GAA6B,IAAI,CAAC/G,2BAA2B,CAAA;AACvC+G,QAAAA,IAAAA,8CAAAA,CAAAA;QAA5B,IAAMC,mBAAAA,GAAsBD,CAAAA,8CAAAA,GAAAA,0BAA0B,CAACF,kBAAmB,CAAA,KAAA,IAAA,GAA9CE,iDAAkD,CAAC,CAAA,CAAA;AAC/E,QAAA,IAAMxS,gBAAgB,IAAI,CAACxvB,UAAU,CAAC8uB,iBAAiB,CAAC+S,eAAgB,CAAA,CAAA;AACxE,QAAA,IAAMK,iBAAoB1S,GAAAA,aAAAA,GAAgB,IAAI,CAAC+L,kBAAkB,CAAC/L,aAAcnK,CAAAA,YAAY,CAAC,CAACkc,WAAW,GAAG,CAAC,CAAA,CAAA;AAC7G,QAAA,IAAIU,uBAAuBC,iBAAmB,EAAA;YAC5C,OAAOrsC,QAAAA,CAAAA;SACF,MAAA;YACLmsC,0BAA0B,CAACF,mBAAmB,GAAGI,iBAAAA,CAAAA;AACjD,YAAA,OAAOH,cAAeI,CAAAA,IAAI,CAAC,IAAI,EAAEN,eAAAA,CAAAA,CAAAA;AACnC,SAAA;AACF,KAAA,CAAA;IAEA,MAAQxF,CAAAA,4BAYP,GAZD,SAAQA,4BAAAA,CACNxmC,QAAa,EACbusC,iBAAqC,EACrC/nF,YAAgC,EAAA;AAEhC,QAAA,IAAIw7C,QAAU,EAAA;AACZ,YAAA,IAAIA,SAASpmD,MAAM,KAAK,IAAI,CAACsqF,YAAY,EAAE;gBACzC,MAAM,+DAAA,CAAA;AACR,aAAA;AACF,SAAA;QAEA,IAAI,CAAC+B,8BAA8B,CAACsG,iBAAmB/nF,EAAAA,YAAAA,CAAAA,CAAAA;AACzD,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQyhF,8BAOP,GAPD,SAAQA,8BACNsG,CAAAA,iBAAqC,EACrC/nF,YAAgC,EAAA;QAEhC,IAAI,CAAC0gF,0BAA0B,IAAIqH,iBAAAA,CAAAA;QACnC,IAAI,CAACpH,uBAAuB,IAAIoH,iBAAAA,CAAAA;AAChC,QAAA,IAAI,CAACnH,2BAA2B,CAAC5gF,aAAa,GAAG,IAAI,CAAC4/E,mBAAmB,EAAA,CAAA;AAC3E,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQqF,2BA2BP,GA3BD,SAAQA,2BAAAA,CAA4BD,WAAoB,EAAA;QACtD,IAAMgD,YAAAA,GAAe,IAAI,CAAClH,2BAA2B,CAAA;QACrD,IAAM7iC,WAAAA,GAAc,IAAI,CAACA,WAAW,CAAA;QACpC,IAAMgqC,iBAAAA,GAAoB,IAAI,CAAClH,gCAAgC,CAAA;;AAG/D,QAAA,IAAMmH,iBAAiBF,YAAe/pC,GAAAA,WAAAA,CAAAA;AACtC,QAAA,IAAIgqC,kBAAkBlpF,CAAC,GAAGkpF,iBAAkBjpF,CAAAA,CAAC,KAAKkpF,cAAgB,EAAA;;YAEhE,IAAMC,0BAAAA,GAA6BF,kBAAkBjzE,CAAC,CAAA;YACtD,IAAImzE,0BAAAA,KAA+B,CAAC,CAAG,EAAA;AACrC,gBAAA,IAAA,gEAAA,CAAA;iBAAA,gEAAA,GAAA,IAAI,CAACxiC,UAAU,CAAC6uB,oBAAoB,CAAC2T,0BAAAA,CAA2B,KAAhE,IAAA,GAAA,KAAA,CAAA,GAAA,gEAAA,CAAkEx/E,MAAM,CAACvS,OAAO,EAAA,CAAA;gBAChF,IAAI,CAAC6gF,uBAAuB,CAACkR,0BAA4B,EAAA,IAAA,CAAA,CAAA;AAC3D,aAAA;YAEA,IAAMC,iBAAAA,GAAoB,IAAI,CAACvM,0BAA0B,CAAA;AACzD,YAAA,IAAMwM,QAAWL,GAAAA,YAAAA,GAAe,IAAI,CAAC/pC,WAAW,GAAG,CAAA,CAAA;AACnD,YAAA,IAAIoqC,QAAU,EAAA;;AAEZ,gBAAA,IAAI,CAAC1H,uBAAuB,IAAI,IAAI,CAACM,4BAA4B,CAAA;AAEjE,gBAAA,IAAMzZ,cAAcwd,WAAc5d,GAAAA,WAAAA,CAAYlpE,MAAM,GAAGkpE,YAAY8V,OAAO,CAAA;gBAC1E,IAAMoL,YAAAA,GAAe,IAAIhhB,MAAAA,CAAO,IAAI,CAACnxE,OAAO,EAAEq1E,cAAe4R,CAAAA,YAAY,EAAE8K,cAAAA,EAAgB1gB,WAAa,EAAA,IAAA,CAAA,CAAA;AACxG,gBAAA,IAAI,CAACyP,uBAAuB,CAACmR,iBAAmB,EAAA,IAAI/Q,oBAAoBiR,YAAcN,EAAAA,YAAAA,CAAAA,CAAAA,CAAAA;AACxF,aAAA;AACAC,YAAAA,iBAAAA,CAAkB10F,GAAG,CAACy0F,YAAAA,EAAc/pC,WAAaoqC,EAAAA,QAAAA,GAAWD,oBAAoB,CAAC,CAAA,CAAA,CAAA;AACnF,SAAA;AACF,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQ7E,sBAIP,GAJD,SAAQA,sBAAAA,CAAuBgF,aAAqB,EAAA;AAClD,QAAA,OAAO,IAAI,CAACC,eAAe,CAAUD,aAAAA,EAAe,SAACE,UAAwBn7E,EAAAA,MAAAA,EAAAA;YAC3E,OAAO,IAAI9L,mBAAQinF,UAAU,CAACn7E,OAAO,EAAEm7E,UAAU,CAACn7E,MAAAA,GAAS,CAAE,CAAA,CAAA,CAAA;AAC/D,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQu0E,sBAIP,GAJD,SAAQA,sBAAAA,CAAuB0G,aAAqB,EAAA;AAClD,QAAA,OAAO,IAAI,CAACC,eAAe,CAAUD,aAAAA,EAAe,SAACE,UAAwBn7E,EAAAA,MAAAA,EAAAA;AAC3E,YAAA,OAAO,IAAIihB,kBAAAA,CAAQk6D,UAAU,CAACn7E,OAAO,EAAEm7E,UAAU,CAACn7E,MAAAA,GAAS,CAAE,CAAA,EAAEm7E,UAAU,CAACn7E,SAAS,CAAE,CAAA,CAAA,CAAA;AACvF,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQo1E,sBAIP,GAJD,SAAQA,sBAAAA,CAAuB6F,aAAqB,EAAA;AAClD,QAAA,OAAO,IAAI,CAACC,eAAe,CAAUD,aAAAA,EAAe,SAACE,UAAwBn7E,EAAAA,MAAAA,EAAAA;AAC3E,YAAA,OAAO,IAAIxb,kBAAQ22F,CAAAA,UAAU,CAACn7E,MAAO,CAAA,EAAEm7E,UAAU,CAACn7E,MAAAA,GAAS,EAAE,EAAEm7E,UAAU,CAACn7E,MAAS,GAAA,CAAA,CAAE,EAAEm7E,UAAU,CAACn7E,SAAS,CAAE,CAAA,CAAA,CAAA;AAC/G,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQ+0E,oBAIP,GAJD,SAAQA,oBAAAA,CAAqBkG,aAAqB,EAAA;AAChD,QAAA,OAAO,IAAI,CAACC,eAAe,CAAQD,aAAAA,EAAe,SAACE,UAAwBn7E,EAAAA,MAAAA,EAAAA;AACzE,YAAA,OAAO,IAAIqZ,gBAAM8hE,CAAAA,UAAU,CAACn7E,MAAO,CAAA,EAAEm7E,UAAU,CAACn7E,MAAAA,GAAS,EAAE,EAAEm7E,UAAU,CAACn7E,MAAS,GAAA,CAAA,CAAE,EAAEm7E,UAAU,CAACn7E,SAAS,CAAE,CAAA,CAAA,CAAA;AAC7G,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQk7E,eAkCP,GAlCD,SAAQA,eACND,CAAAA,aAAqB,EACrBG,aAA4D,EAAA;QAE5D,IAAMvlC,SAAAA,GAAY,IAAI,CAACwC,UAAU,CAAA;AACjC,QAAA,IAAMwvB,aAAgBhyB,GAAAA,SAAAA,CAAUsxB,iBAAiB,CAAC8T,aAAc,CAAA,CAAA;AAChE,QAAA,IAAI,CAACpT,aAAe,EAAA;YAClB,OAAO,IAAA,CAAA;AACT,SAAA;AAEA,QAAA,IAAMwT,gBAAgBxlC,SAAUqxB,CAAAA,oBAAoB,CAACW,aAAAA,CAAcnK,YAAY,CAAC,CAAA;QAChF,IAAMriE,MAAAA,GAASggF,aAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,aAAAA,CAAehgF,MAAM,CAAA;AACpC,QAAA,IAAI,CAACA,MAAQ,EAAA;YACX,OAAO,IAAA,CAAA;AACT,SAAA;QACA,IAAI,CAACA,MAAO8+D,CAAAA,QAAQ,EAAE;YACpB,MAAM,mEAAA,CAAA;AACR,SAAA;QAEA,IAAMxpB,WAAAA,GAAc,IAAI,CAACA,WAAW,CAAA;QACpC,IAAM2qC,cAAAA,GAAiBzT,cAAc9J,eAAe,CAAA;QACpD,IAAM7vB,QAAAA,GAAW,IAAIlmD,KAAS2oD,CAAAA,WAAAA,CAAAA,CAAAA;QAC9B,IAAMwqC,UAAAA,GAAa,IAAI,CAACpB,oBAAoB,CAAC1+E,MAAO5H,CAAAA,IAAI,CAAC4H,MAAM,EAAEigF,cAAAA,CAAen1F,IAAI,CAAA,CAAA;QACpF,IAAM00E,UAAAA,GAAagN,cAAc7nE,MAAM,CAAA;QACvC,IAAMu7E,UAAAA,GAAaF,cAAcrR,MAAM,CAAA;AAEvC,QAAA,IAAK,IAAI9hF,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAIyoD,aAAazoD,CAAK,EAAA,CAAA;YACpC,IAAM8X,MAAAA,GAAS,CAAC9X,CAAAA,GAAIqzF,aAAa1gB,UAAS,IAAKsgB,WAAW9f,iBAAiB,CAAA;YAC3E,IAAMl1C,MAAAA,GAASi1D,cAAcD,UAAYn7E,EAAAA,MAAAA,CAAAA,CAAAA;AACzCs7E,YAAAA,cAAAA,CAAe90C,UAAU,IAAIrgB,MAAAA,CAAOsc,KAAK,CAAC64C,eAAe7e,qBAAqB,CAAA,CAAA;YAC9EvuB,QAAQ,CAAChmD,EAAE,GAAGi+B,MAAAA,CAAAA;AAChB,SAAA;QAEA,OAAO+nB,QAAAA,CAAAA;AACT,KAAA,CAAA;IAEA,MAAQstC,CAAAA,4BAmCP,GAnCD,SAAQA,4BAAAA,CACNttC,QAAsB,EACtBuvB,SAA0B,EAC1B/4D,IAAwB,EAAA;QAExB,IAAMmxC,SAAAA,GAAY,IAAI,CAACwC,UAAU,CAAA;QACjC,IAAMovB,gBAAAA,GAAmB5xB,UAAUsxB,iBAAiB,CAAA;AAEpD,QAAA,IAAIj5B,QAAU,EAAA;AACZ,YAAA,IAAI,CAACu5B,gBAAgB,CAAChK,SAAAA,CAAU,EAAE;AAChC,gBAAA,IAAM/uE,MAAS,GAAA,IAAI,CAAC+sF,mBAAmB,CAAChe,SAAAA,CAAAA,CAAAA;gBACxC,IAAMz9D,MAAAA,GAAS,IAAI,CAACwzE,2BAA2B,CAAA;gBAC/C,IAAM9C,WAAAA,GAAc,IAAI,CAACgL,6BAA6B,EAAA,CAAA;AACtD,gBAAA,IAAI,CAACnS,iBAAiB,CAAC,IAAI/L,aAAcC,CAAAA,SAAAA,EAAWz9D,QAAQtR,MAAQgiF,EAAAA,WAAAA,CAAAA,CAAAA,CAAAA;AAEpE,gBAAA,IAAI,CAAC8C,2BAA2B,IAAI,IAAI,CAACmI,uBAAuB,CAACle,SAAAA,CAAAA,CAAAA;gBACjE,IAAI,CAACkW,4BAA4B,IAAIjvE,IAAAA,CAAAA;gBACrC,IAAI,CAACuvE,kBAAkB,CAACnI,oBAAoB,EAAA,CAAA;AAC9C,aAAA;SACK,MAAA;YACL,IAAMjE,aAAAA,GAAgBJ,gBAAgB,CAAChK,SAAU,CAAA,CAAA;AACjD,YAAA,IAAIoK,aAAe,EAAA;gBACjB,IAAM39E,KAAAA,GAAQ,IAAI,CAACmuD,UAAU,CAACqvB,cAAc,CAACv9E,OAAO,CAAC09E,aAAAA,CAAAA,CAAAA;AACrD,gBAAA,IAAI39E,KAAS,IAAA,IAAI,CAACwpF,6BAA6B,EAAE;AAC/C,oBAAA,IAAI,CAACF,2BAA2B,IAAI,IAAI,CAACmI,uBAAuB,CAACle,SAAAA,CAAAA,CAAAA;oBACjE,IAAI,CAACkW,4BAA4B,IAAI,CAACjvE,IAAAA,CAAAA;iBACjC,MAAA;;AAEL,oBAAA,IAAI,CAACgvE,6BAA6B,EAAA,CAAA;AACpC,iBAAA;gBAEA,IAAI,CAACO,kBAAkB,CAACnI,oBAAoB,EAAA,CAAA;gBAC5C,IAAI,CAACtC,oBAAoB,CAACt/E,KAAAA,CAAAA,CAAAA;AAC5B,aAAA;AACF,SAAA;AACF,KAAA,CAAA;IAEA,MAAQ0xF,CAAAA,6BA0DP,GA1DD,SAAQA,6BAAAA,GAAAA;QACN,IAAMC,yBAAAA,GAA4B,IAAI,CAACzI,0BAA0B,CAAA;AAEjE,QAAA,IAAIyI,yBAAyD,GAAA,CAAA,EAAA;YAC3D,IAAI,CAACL,4BAA4B,CAAC,IAAI,CAAC11E,UAAU,EAAEosE,gBAAgBoC,QAAQ,EAAA,CAAA,CAAA,CAAA;AAC7E,SAAA;AAEA,QAAA,IAAIuH,yBAAuD,GAAA,CAAA,EAAA;YACzD,IAAI,CAACL,4BAA4B,CAAC,IAAI,CAACjJ,QAAQ,EAAEL,gBAAgBr4B,MAAM,EAAA,CAAA,CAAA,CAAA;AACzE,SAAA;AAEA,QAAA,IAAIgiC,yBAAsD,GAAA,CAAA,EAAA;YACxD,IAAI,CAACL,4BAA4B,CAAC,IAAI,CAAChJ,OAAO,EAAEN,gBAAgB74D,KAAK,EAAA,CAAA,CAAA,CAAA;AACvE,SAAA;AAEA,QAAA,IAAIwiE,yBAA2D,GAAA,EAAA,EAAA;YAC7D,IAAI,CAACL,4BAA4B,CAAC,IAAI,CAACtI,YAAY,EAAEhB,gBAAgBiD,UAAU,EAAA,EAAA,CAAA,CAAA;AACjF,SAAA;AAEA,QAAA,IAAI0G,yBAA0D,GAAA,EAAA,EAAA;YAC5D,IAAI,CAACL,4BAA4B,CAAC,IAAI,CAACrI,YAAY,EAAEjB,gBAAgBsD,SAAS,EAAA,EAAA,CAAA,CAAA;AAChF,SAAA;AAEA,QAAA,IAAIqG,yBAAwD,GAAA,CAAA,EAAA;YAC1D,IAAI,CAACL,4BAA4B,CAAC,IAAI,CAAC/I,SAAS,EAAEP,gBAAgB0D,OAAO,EAAA,CAAA,CAAA,CAAA;AAC3E,SAAA;AAEA,QAAA,IAAIiG,yBAAmD,GAAA,EAAA,EAAA;YACrD,IAAI,CAACL,4BAA4B,CAAC,IAAI,CAAC9I,GAAG,EAAER,gBAAgB8D,EAAE,EAAA,EAAA,CAAA,CAAA;AAChE,SAAA;AAEA,QAAA,IAAI6F,yBAAoD,GAAA,GAAA,EAAA;YACtD,IAAI,CAACL,4BAA4B,CAAC,IAAI,CAAC7I,IAAI,EAAET,gBAAgBlQ,GAAG,EAAA,GAAA,CAAA,CAAA;AAClE,SAAA;AAEA,QAAA,IAAI6Z,yBAAoD,GAAA,GAAA,EAAA;YACtD,IAAI,CAACL,4BAA4B,CAAC,IAAI,CAAC5I,IAAI,EAAEV,gBAAgBkE,GAAG,EAAA,GAAA,CAAA,CAAA;AAClE,SAAA;AAEA,QAAA,IAAIyF,yBAAoD,GAAA,GAAA,EAAA;YACtD,IAAI,CAACL,4BAA4B,CAAC,IAAI,CAAC3I,IAAI,EAAEX,gBAAgBoE,GAAG,EAAA,GAAA,CAAA,CAAA;AAClE,SAAA;AAEA,QAAA,IAAIuF,yBAAoD,GAAA,IAAA,EAAA;YACtD,IAAI,CAACL,4BAA4B,CAAC,IAAI,CAAC1I,IAAI,EAAEZ,gBAAgBsE,GAAG,EAAA,IAAA,CAAA,CAAA;AAClE,SAAA;AAEA,QAAA,IAAIqF,yBAAoD,GAAA,IAAA,EAAA;YACtD,IAAI,CAACL,4BAA4B,CAAC,IAAI,CAACzI,IAAI,EAAEb,gBAAgBwE,GAAG,EAAA,IAAA,CAAA,CAAA;AAClE,SAAA;AAEA,QAAA,IAAImF,yBAAoD,GAAA,IAAA,EAAA;YACtD,IAAI,CAACL,4BAA4B,CAAC,IAAI,CAACxI,IAAI,EAAEd,gBAAgB0E,GAAG,EAAA,IAAA,CAAA,CAAA;AAClE,SAAA;AAEA,QAAA,IAAIiF,yBAAoD,GAAA,IAAA,EAAA;YACtD,IAAI,CAACL,4BAA4B,CAAC,IAAI,CAACvI,IAAI,EAAEf,gBAAgB4E,GAAG,EAAA,IAAA,CAAA,CAAA;AAClE,SAAA;AACF,KAAA,CAAA;IAEA,MAAQO,CAAAA,qBAkBP,GAlBD,SAAQA,qBAAAA,GAAAA;AACN,QAAA,IAAM3P,cAAiB,GAAA,IAAI,CAACrvB,UAAU,CAACqvB,cAAc,CAAA;QACrD,IAAMoU,SAAAA,GAAY,IAAI,CAAC7H,kBAAkB,CAAA;QACzC,IAAM8H,aAAAA,GAAgBrU,eAAe5/E,MAAM,CAAA;QAC3C,IAAMk0F,gBAAAA,GAAmBF,UAAUhQ,oBAAoB,CAAA;QAEvD,IAAI,IAAI,CAACsH,0BAA0B,GAA2B,KAAA,EAAA;AAC5D,YAAA,IAAI,CAACwI,6BAA6B,EAAA,CAAA;AAClC,YAAA,IAAI,CAACxI,0BAA0B,GAAA,CAAA,CAAA;AACjC,SAAA;AAEA,QAAA,IAAM6I,WAAW,CAACH,SAAAA,CAAU5O,eAAe,EAAA,IAAM4O,UAAU5N,yBAAyB,EAAA,CAAA;QACpF,IAAI8N,gBAAAA,KAAqBF,UAAUhQ,oBAAoB,IAAKmQ,YAAYH,SAAUtQ,CAAAA,gBAAgB,GAAG,CAAI,EAAA;AACvG,YAAA,IAAM1jF,MAASg0F,GAAAA,SAAAA,CAAUtN,kBAAkB,CAAC,IAAI,CAAA,CAAA;AAChD,YAAA,IAAI1mF,SAASi0F,aAAe,EAAA;gBAC1B,IAAI,CAACrS,wBAAwB,CAAC5hF,MAAAA,CAAAA,CAAAA;AAChC,aAAA;AACF,SAAA;AACF,KAAA,CAAA;IAEA,MAAQo0F,CAAAA,+BAYP,GAZD,SAAQA,+BAAAA,CACNze,SAA0B,EAC1B/qE,YAAgC,EAChCw7C,QAAmB,EAAA;AAEnB,QAAA,IAAI,CAACiuC,wBAAwB,CAAC1e,WAAW/qE,YAAc,EAAA,SAAC0pF,YAAwBp8E,MAAgB9V,EAAAA,KAAAA,EAAAA;AAC9F,YAAA,IAAMi8B,MAAS+nB,GAAAA,QAAQ,CAAChkD,KAAAA,CAAM;AAC9B,YAAA,IAAIi8B,MAAQ,EAAA;AACVi2D,gBAAAA,UAAU,CAACp8E,MAAAA,CAAO,GAAGmmB,MAAAA,CAAO10B,CAAC,CAAA;AAC7B2qF,gBAAAA,UAAU,CAACp8E,MAAAA,GAAS,CAAE,CAAA,GAAGmmB,OAAOz0B,CAAC,CAAA;AACnC,aAAA;AACF,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;IAEA,MAAQ2qF,CAAAA,+BAaP,GAbD,SAAQA,+BAAAA,CACN5e,SAA0B,EAC1B/qE,YAAgC,EAChCw7C,QAAmB,EAAA;AAEnB,QAAA,IAAI,CAACiuC,wBAAwB,CAAC1e,WAAW/qE,YAAc,EAAA,SAAC0pF,YAAwBp8E,MAAgB9V,EAAAA,KAAAA,EAAAA;YAC9F,IAAMi8B,MAAAA,GAAS+nB,QAAQ,CAAChkD,KAAM,CAAA,CAAA;AAC9B,YAAA,IAAIi8B,MAAQ,EAAA;AACVi2D,gBAAAA,UAAU,CAACp8E,MAAAA,CAAO,GAAGmmB,MAAAA,CAAO10B,CAAC,CAAA;AAC7B2qF,gBAAAA,UAAU,CAACp8E,MAAAA,GAAS,CAAE,CAAA,GAAGmmB,OAAOz0B,CAAC,CAAA;AACjC0qF,gBAAAA,UAAU,CAACp8E,MAAAA,GAAS,CAAE,CAAA,GAAGmmB,OAAOze,CAAC,CAAA;AACnC,aAAA;AACF,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;IAEA,MAAQ40E,CAAAA,+BAcP,GAdD,SAAQA,+BAAAA,CACN7e,SAA0B,EAC1B/qE,YAAgC,EAChCw7C,QAAmB,EAAA;AAEnB,QAAA,IAAI,CAACiuC,wBAAwB,CAAC1e,WAAW/qE,YAAc,EAAA,SAAC0pF,YAAwBp8E,MAAgB9V,EAAAA,KAAAA,EAAAA;YAC9F,IAAMi8B,MAAAA,GAAS+nB,QAAQ,CAAChkD,KAAM,CAAA,CAAA;AAC9B,YAAA,IAAIi8B,MAAQ,EAAA;AACVi2D,gBAAAA,UAAU,CAACp8E,MAAAA,CAAO,GAAGmmB,MAAAA,CAAO10B,CAAC,CAAA;AAC7B2qF,gBAAAA,UAAU,CAACp8E,MAAAA,GAAS,CAAE,CAAA,GAAGmmB,OAAOz0B,CAAC,CAAA;AACjC0qF,gBAAAA,UAAU,CAACp8E,MAAAA,GAAS,CAAE,CAAA,GAAGmmB,OAAOze,CAAC,CAAA;AACjC00E,gBAAAA,UAAU,CAACp8E,MAAAA,GAAS,CAAE,CAAA,GAAGmmB,OAAO5yB,CAAC,CAAA;AACnC,aAAA;AACF,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;IAEA,MAAQgpF,CAAAA,6BAcP,GAdD,SAAQA,6BAAAA,CACN9e,SAA0B,EAC1B/qE,YAAgC,EAChCw7C,QAAiB,EAAA;AAEjB,QAAA,IAAI,CAACiuC,wBAAwB,CAAC1e,WAAW/qE,YAAc,EAAA,SAAC0pF,YAAwBp8E,MAAgB9V,EAAAA,KAAAA,EAAAA;YAC9F,IAAMi8B,MAAAA,GAAS+nB,QAAQ,CAAChkD,KAAM,CAAA,CAAA;AAC9B,YAAA,IAAIi8B,MAAQ,EAAA;AACVi2D,gBAAAA,UAAU,CAACp8E,MAAAA,CAAO,GAAGmmB,MAAAA,CAAOlN,CAAC,CAAA;AAC7BmjE,gBAAAA,UAAU,CAACp8E,MAAAA,GAAS,CAAE,CAAA,GAAGmmB,OAAOjN,CAAC,CAAA;AACjCkjE,gBAAAA,UAAU,CAACp8E,MAAAA,GAAS,CAAE,CAAA,GAAGmmB,OAAOzM,CAAC,CAAA;AACjC0iE,gBAAAA,UAAU,CAACp8E,MAAAA,GAAS,CAAE,CAAA,GAAGmmB,OAAO3jB,CAAC,CAAA;AACnC,aAAA;AACF,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;IAEA,MAAQ25E,CAAAA,wBAsCP,GAtCD,SAAQA,wBAAAA,CACN1e,SAA0B,EAC1B/qE,YAAgC,EAChC8pF,aAA8E,EAAA;QAE9E,IAAM3mC,SAAAA,GAAY,IAAI,CAACwC,UAAU,CAAA;AACjC,QAAA,IAAMwvB,aAAgBhyB,GAAAA,SAAAA,CAAUsxB,iBAAiB,CAAC1J,SAAU,CAAA,CAAA;QAC5D,IAAMC,YAAAA,GAAemK,cAAcnK,YAAY,CAAA;AAC/C,QAAA,IAAM2d,aAAgBxlC,GAAAA,SAAAA,CAAUqxB,oBAAoB,CAACxJ,YAAa,CAAA,CAAA;QAClE,IAAMriE,MAAAA,GAASggF,aAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,aAAAA,CAAehgF,MAAM,CAAA;AACpC,QAAA,IAAI,CAACA,MAAQ,EAAA;AACX,YAAA,OAAA;AACF,SAAA;QACA,IAAI,CAACA,MAAO8+D,CAAAA,QAAQ,EAAE;YACpB,MAAM,yDAAA,CAAA;AACR,SAAA;AAE4B,QAAA,IAAA,8CAAA,CAAA;QAA5B,IAAMmgB,mBAAAA,GAAsB,CAAA,8CAAA,GAAA,IAAI,CAAChH,2BAA2B,CAAC5gF,YAAAA,CAAa,KAA9C,IAAA,GAAA,8CAAA,GAAkD,CAAC,CAAA,CAAA;AAC/E,QAAA,IAAMolF,gBAAmB,GAAA,IAAI,CAAClE,kBAAkB,CAAClW,YAAa,CAAA,CAAA;QAC9D,IAAI4c,mBAAAA,GAAsBxC,gBAAiB8B,CAAAA,WAAW,EAAE;YACtD,IAAM0B,cAAAA,GAAiBzT,cAAc9J,eAAe,CAAA;YACpD,IAAMqe,UAAAA,GAAa,IAAI,CAACrC,oBAAoB,CAAC1+E,MAAO5H,CAAAA,IAAI,CAAC4H,MAAM,EAAEigF,cAAAA,CAAen1F,IAAI,CAAA,CAAA;YACpF,IAAM00E,UAAAA,GAAagN,cAAc7nE,MAAM,CAAA;YACvC,IAAMu7E,UAAAA,GAAaF,cAAcrR,MAAM,CAAA;YACvC,IAAQ3O,oBAAsB+gB,UAAtB/gB,CAAAA,iBAAAA,CAAAA;AAER,YAAA,IAAQ70B,aAA4C80C,cAA5C90C,CAAAA,UAAAA,EAAYz4C,OAAgCutF,cAAhCvtF,CAAAA,IAAAA,EAAM0uE,wBAA0B6e,cAA1B7e,CAAAA,qBAAAA,CAAAA;YAC1B,IAAK,IAAIv0E,CAAI,GAAA,CAAA,EAAG0B,CAAI,GAAA,IAAI,CAACwoF,YAAY,EAAElqF,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;AACjD,gBAAA,IAAM8X,SAAS,CAAC9X,CAAIqzF,GAAAA,UAAAA,GAAa1gB,UAAS,IAAKQ,iBAAAA,CAAAA;AAC/CmhB,gBAAAA,aAAAA,CAAcJ,YAAYp8E,MAAQ9X,EAAAA,CAAAA,CAAAA,CAAAA;AAClC,gBAAA,IAAIs+C,UAAY,EAAA;AACd,oBAAA,IAAK,IAAIluC,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAIvK,MAAMuK,CAAK,EAAA,CAAA;wBAC7B8jF,UAAU,CAACp8E,MAAS1H,GAAAA,CAAAA,CAAE,IAAImkE,qBAAAA,CAAAA;AAC5B,qBAAA;AACF,iBAAA;AACF,aAAA;AACAqb,YAAAA,gBAAAA,CAAiBC,kBAAkB,GAAG,IAAA,CAAA;AACxC,SAAA;AACF,KAAA,CAAA;IAEA,MAAQH,CAAAA,uBA6DP,GA7DD,SAAQA,uBAAAA,GAAAA;;QAEN,IAAyJ,KAAA,GAAA,IAAI,EAArJ9xE,UAAAA,GAAiJ,MAAjJA,UAAYysE,EAAAA,QAAAA,GAAqI,MAArIA,QAAUC,EAAAA,OAAAA,GAA2H,MAA3HA,OAASa,EAAAA,uBAAAA,GAAkH,MAAlHA,uBAAyBH,EAAAA,YAAAA,GAAyF,MAAzFA,YAAcC,EAAAA,YAAAA,GAA2E,KAA3EA,CAAAA,YAAAA,EAAcV,SAA6D,GAAA,KAAA,CAA7DA,WAAWC,GAAkD,GAAA,KAAA,CAAlDA,KAAKC,IAA6C,GAAA,KAAA,CAA7CA,MAAMC,IAAuC,GAAA,KAAA,CAAvCA,MAAMC,IAAiC,GAAA,KAAA,CAAjCA,MAAMC,IAA2B,GAAA,KAAA,CAA3BA,MAAMC,IAAqB,GAAA,KAAA,CAArBA,MAAMC,IAAe,GAAA,KAAA,CAAfA,IAAMC,EAAAA,IAAAA,GAAS,KAATA,CAAAA,IAAAA,CAAAA;AAEhJ,QAAA,IAAII,uBAAuD,GAAA,CAAA,EAAA;AACzD,YAAA,IAAI,CAACgJ,+BAA+B,CAACnK,eAAAA,CAAgBoC,QAAQ,EAA+BxuE,CAAAA,EAAAA,UAAAA,CAAAA,CAAAA;AAC9F,SAAA;AAEA,QAAA,IAAIysE,YAAYc,uBAAqD,GAAA,CAAA,EAAA;AACnE,YAAA,IAAI,CAACgJ,+BAA+B,CAACnK,eAAAA,CAAgBr4B,MAAM,EAA6B04B,CAAAA,EAAAA,QAAAA,CAAAA,CAAAA;AAC1F,SAAA;AAEA,QAAA,IAAIC,WAAWa,uBAAoD,GAAA,CAAA,EAAA;AACjE,YAAA,IAAI,CAACkJ,6BAA6B,CAACrK,eAAAA,CAAgB74D,KAAK,EAA4Bm5D,CAAAA,EAAAA,OAAAA,CAAAA,CAAAA;AACtF,SAAA;AAEA,QAAA,IAAIU,gBAAgBG,uBAAyD,GAAA,EAAA,EAAA;AAC3E,YAAA,IAAI,CAACiJ,+BAA+B,CAACpK,eAAAA,CAAgBiD,UAAU,EAAiCjC,CAAAA,EAAAA,YAAAA,CAAAA,CAAAA;AAClG,SAAA;AAEA,QAAA,IAAIC,gBAAgBE,uBAAwD,GAAA,EAAA,EAAA;AAC1E,YAAA,IAAI,CAACiJ,+BAA+B,CAACpK,eAAAA,CAAgBsD,SAAS,EAAgCrC,CAAAA,EAAAA,YAAAA,CAAAA,CAAAA;AAChG,SAAA;AAEA,QAAA,IAAIV,aAAaY,uBAAsD,GAAA,CAAA,EAAA;AACrE,YAAA,IAAI,CAACiJ,+BAA+B,CAACpK,eAAAA,CAAgB0D,OAAO,EAA8BnD,CAAAA,EAAAA,SAAAA,CAAAA,CAAAA;AAC5F,SAAA;AAEA,QAAA,IAAIC,OAAOW,uBAAiD,GAAA,EAAA,EAAA;AAC1D,YAAA,IAAI,CAAC6I,+BAA+B,CAAChK,eAAAA,CAAgB8D,EAAE,EAAyBtD,CAAAA,EAAAA,GAAAA,CAAAA,CAAAA;AAClF,SAAA;AAEA,QAAA,IAAIC,QAAQU,uBAAkD,GAAA,GAAA,EAAA;AAC5D,YAAA,IAAI,CAAC6I,+BAA+B,CAAChK,eAAAA,CAAgBlQ,GAAG,EAA0B2Q,CAAAA,EAAAA,IAAAA,CAAAA,CAAAA;AACpF,SAAA;AAEA,QAAA,IAAIC,QAAQS,uBAAkD,GAAA,GAAA,EAAA;AAC5D,YAAA,IAAI,CAAC6I,+BAA+B,CAAChK,eAAAA,CAAgBkE,GAAG,EAA0BxD,CAAAA,EAAAA,IAAAA,CAAAA,CAAAA;AACpF,SAAA;AAEA,QAAA,IAAIC,QAAQQ,uBAAkD,GAAA,GAAA,EAAA;AAC5D,YAAA,IAAI,CAAC6I,+BAA+B,CAAChK,eAAAA,CAAgBoE,GAAG,EAA0BzD,CAAAA,EAAAA,IAAAA,CAAAA,CAAAA;AACpF,SAAA;AAEA,QAAA,IAAIC,QAAQO,uBAAkD,GAAA,IAAA,EAAA;AAC5D,YAAA,IAAI,CAAC6I,+BAA+B,CAAChK,eAAAA,CAAgBsE,GAAG,EAA0B1D,EAAAA,EAAAA,IAAAA,CAAAA,CAAAA;AACpF,SAAA;AAEA,QAAA,IAAIC,QAAQM,uBAAkD,GAAA,IAAA,EAAA;AAC5D,YAAA,IAAI,CAAC6I,+BAA+B,CAAChK,eAAAA,CAAgBwE,GAAG,EAA0B3D,EAAAA,EAAAA,IAAAA,CAAAA,CAAAA;AACpF,SAAA;AAEA,QAAA,IAAIC,QAAQK,uBAAkD,GAAA,IAAA,EAAA;AAC5D,YAAA,IAAI,CAAC6I,+BAA+B,CAAChK,eAAAA,CAAgB0E,GAAG,EAA0B5D,EAAAA,EAAAA,IAAAA,CAAAA,CAAAA;AACpF,SAAA;AAEA,QAAA,IAAIC,QAAQI,uBAAkD,GAAA,IAAA,EAAA;AAC5D,YAAA,IAAI,CAAC6I,+BAA+B,CAAChK,eAAAA,CAAgB4E,GAAG,EAA0B7D,EAAAA,EAAAA,IAAAA,CAAAA,CAAAA;AACpF,SAAA;QAEA,IAAI,CAACI,uBAAuB,GAAG,CAAA,CAAA;AACjC,KAAA,CAAA;IAEA,MAAQqI,CAAAA,6BAeP,GAfD,SAAQA,6BAAAA,GAAAA;QACN,IAAMpN,yBAAAA,GAA4B,IAAI,CAACC,0BAA0B,CAAA;QACjE,IAAID,yBAAAA,KAA8B,CAAC,CAAG,EAAA;YACpC,OAAOA,yBAAAA,CAAAA;AACT,SAAA;AAEA,QAAA,IAAIpmF,CAAI,GAAA,CAAA,CAAA;AACR,QAAA,IAAMg/E,oBAAuB,GAAA,IAAI,CAAC7uB,UAAU,CAAC6uB,oBAAoB,CAAA;AACjE,QAAA,IAAK,IAAIt9E,CAAIs9E,GAAAA,oBAAAA,CAAqBp/E,MAAM,EAAEI,CAAAA,GAAI0B,GAAG1B,CAAK,EAAA,CAAA;AACpD,YAAA,IAAI,CAACg/E,oBAAoB,CAACh/E,CAAAA,CAAE,EAAE;AAC5B,gBAAA,MAAA;AACF,aAAA;AACF,SAAA;QACA,IAAI,CAACqmF,0BAA0B,GAAGrmF,CAAAA,CAAAA;QAClC,OAAOA,CAAAA,CAAAA;AACT,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQuzF,mBAqBP,GArBD,SAAQA,mBAAAA,CAAoBhe,SAA0B,EAAA;QACpD,OAAQA,SAAAA;AACN,YAAA,KAAKyU,gBAAgBoC,QAAQ,CAAA;AAC7B,YAAA,KAAKpC,gBAAgBr4B,MAAM;AACzB,gBAAA,OAAOgiB,oBAAoB56C,OAAO,CAAA;AACpC,YAAA,KAAKixD,gBAAgB74D,KAAK,CAAA;AAC1B,YAAA,KAAK64D,gBAAgBiD,UAAU,CAAA;AAC/B,YAAA,KAAKjD,gBAAgB0D,OAAO;AAC1B,gBAAA,OAAO/Z,oBAAoBr3E,OAAO,CAAA;AACpC,YAAA,KAAK0tF,gBAAgBsD,SAAS;AAC5B,gBAAA,OAAO3Z,oBAAoBe,MAAM,CAAA;AACnC,YAAA,KAAKsV,gBAAgB8D,EAAE,CAAA;AACvB,YAAA,KAAK9D,gBAAgBlQ,GAAG,CAAA;AACxB,YAAA,KAAKkQ,gBAAgBkE,GAAG,CAAA;AACxB,YAAA,KAAKlE,gBAAgBoE,GAAG,CAAA;AACxB,YAAA,KAAKpE,gBAAgBsE,GAAG,CAAA;AACxB,YAAA,KAAKtE,gBAAgBwE,GAAG,CAAA;AACxB,YAAA,KAAKxE,gBAAgB0E,GAAG,CAAA;AACxB,YAAA,KAAK1E,gBAAgB4E,GAAG;AACtB,gBAAA,OAAOjb,oBAAoB3nE,OAAO,CAAA;AACtC,SAAA;AACF,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQynF,uBAqBP,GArBD,SAAQA,uBAAAA,CAAwBle,SAA0B,EAAA;QACxD,OAAQA,SAAAA;AACN,YAAA,KAAKyU,gBAAgBoC,QAAQ,CAAA;AAC7B,YAAA,KAAKpC,gBAAgBr4B,MAAM;gBACzB,OAAO,EAAA,CAAA;AACT,YAAA,KAAKq4B,gBAAgB74D,KAAK,CAAA;AAC1B,YAAA,KAAK64D,gBAAgBiD,UAAU,CAAA;AAC/B,YAAA,KAAKjD,gBAAgB0D,OAAO;gBAC1B,OAAO,EAAA,CAAA;AACT,YAAA,KAAK1D,gBAAgBsD,SAAS;gBAC5B,OAAO,CAAA,CAAA;AACT,YAAA,KAAKtD,gBAAgB8D,EAAE,CAAA;AACvB,YAAA,KAAK9D,gBAAgBlQ,GAAG,CAAA;AACxB,YAAA,KAAKkQ,gBAAgBkE,GAAG,CAAA;AACxB,YAAA,KAAKlE,gBAAgBoE,GAAG,CAAA;AACxB,YAAA,KAAKpE,gBAAgBsE,GAAG,CAAA;AACxB,YAAA,KAAKtE,gBAAgBwE,GAAG,CAAA;AACxB,YAAA,KAAKxE,gBAAgB0E,GAAG,CAAA;AACxB,YAAA,KAAK1E,gBAAgB4E,GAAG;gBACtB,OAAO,CAAA,CAAA;AACX,SAAA;AACF,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQsB,aA6BP,GA7BD,SAAQA,aAAAA,CAAcqE,SAAkB,EAAA;QACtC,IAAI,CAAC32E,UAAU,GAAG,IAAA,CAAA;QAClB,IAAI,CAAC2sE,SAAS,GAAG,IAAA,CAAA;QACjB,IAAI,CAACF,QAAQ,GAAG,IAAA,CAAA;QAChB,IAAI,CAACC,OAAO,GAAG,IAAA,CAAA;QACf,IAAI,CAACW,YAAY,GAAG,IAAA,CAAA;QACpB,IAAI,CAACD,YAAY,GAAG,IAAA,CAAA;QACpB,IAAI,CAACR,GAAG,GAAG,IAAA,CAAA;QACX,IAAI,CAACC,IAAI,GAAG,IAAA,CAAA;QACZ,IAAI,CAACC,IAAI,GAAG,IAAA,CAAA;QACZ,IAAI,CAACC,IAAI,GAAG,IAAA,CAAA;QACZ,IAAI,CAACC,IAAI,GAAG,IAAA,CAAA;QACZ,IAAI,CAACC,IAAI,GAAG,IAAA,CAAA;QACZ,IAAI,CAACC,IAAI,GAAG,IAAA,CAAA;QACZ,IAAI,CAACC,IAAI,GAAG,IAAA,CAAA;QACZ,IAAI,CAACY,QAAQ,GAAG,IAAA,CAAA;QAChB,IAAI,CAACI,kBAAkB,CAAChF,mBAAmB,EAAA,CAAA;AAE3C,QAAA,IAAI,CAACwN,SAAW,EAAA;AACd,YAAA,IAAA,qEAAA,CAAA;AAAA,YAAA,CAAA,qEAAA,GAAA,IAAI,CAACpkC,UAAU,CAAC6uB,oBAAoB,CAAC,IAAI,CAACqH,0BAA0B,CAAC,KAAA,IAAA,GAAA,KAAA,CAAA,GAArE,qEAAuElzE,CAAAA,MAAM,CAACqgE,gBAAgB,EAAA,CAAA;;YAG9F,IAAMke,WAAAA,GAAc,IAAI,CAACtH,mBAAmB,EAAA,CAAA;YAC5C,IAAMuF,iBAAAA,GAAoB,IAAI,CAACjE,kBAAkB,CAAA;YACjD,IAAK,IAAI1rF,IAAI,CAAG0B,EAAAA,CAAAA,GAAIiuF,kBAAkB/vF,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;gBACxD,IAAM4vF,gBAAAA,GAAmBD,iBAAiB,CAAC3vF,CAAE,CAAA,CAAA;AAC7C4vF,gBAAAA,gBAAAA,KAAqBA,gBAAAA,CAAiB8B,WAAW,GAAGA,WAAU,CAAA,CAAA;AAChE,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AArxCWzH,IAAAA,aAAAA,CAAAA,SAAAA,EAAAA;;YAiDPxhC,GAAAA,EAAAA,aAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,IAAI,IAAI,CAAC0hC,iBAAiB,EAAE;AAC1B,oBAAA,IAAI1hC,WAAc,GAAA,CAAA,CAAA;oBAClB,IAAM+rC,eAAAA,GAAkB,IAAI,CAACrkC,UAAU,CAAC8uB,iBAAiB,CAAC+K,eAAgBoC,CAAAA,QAAQ,CAAC,CAAA;AACnF,oBAAA,IAAIoI,eAAiB,EAAA;wBACnB,IAAMC,qBAAAA,GAAwB,IAAI,CAACtkC,UAAU,CAAC6uB,oBAAoB,CAACwV,eAAgBhf,CAAAA,YAAY,CAAC,CAAA;AAChG,wBAAA,IAAIif,qBAAuB,EAAA;AACzBhsC,4BAAAA,WAAAA,GAAcgsC,sBAAsBthF,MAAM,CAACs/D,UAAU,GAAGgiB,sBAAsB3S,MAAM,CAAA;AACtF,yBAAA;AACF,qBAAA;oBACA,IAAI,CAACoI,YAAY,GAAGzhC,WAAAA,CAAAA;oBACpB,IAAI,CAAC0hC,iBAAiB,GAAG,KAAA,CAAA;AAC3B,iBAAA;gBACA,OAAO,IAAI,CAACD,YAAY,CAAA;AAC1B,aAAA;;;YAKI1K,GAAAA,EAAAA,gBAAAA;;;MAAJ,SAAA,GAAA,GAAA;AACE,gBAAA,IAAI,CAAC2P,qBAAqB,EAAA,CAAA;AAC1B,gBAAA,OAAO,IAAI,CAACh/B,UAAU,CAACqvB,cAAc,CAAA;AACvC,aAAA;;;YAKIR,GAAAA,EAAAA,sBAAAA;;;MAAJ,SAAA,GAAA,GAAA;;AAEE,gBAAA,OAAO,IAAI,CAAC7uB,UAAU,CAAC6uB,oBAAoB,CAAA;AAC7C,aAAA;;;YAKI2F,GAAAA,EAAAA,aAAAA;;;MAAJ,SAAA,GAAA,GAAA;AACE,gBAAA,OAAO,IAAI,CAACoH,kBAAkB,CAACxI,YAAY,CAAA;AAC7C,aAAA;;;YAKIuB,GAAAA,EAAAA,iBAAAA;;;MAAJ,SAAA,GAAA,GAAA;AACE,gBAAA,OAAO,IAAI,CAACiH,kBAAkB,CAACzI,gBAAgB,CAAA;AACjD,aAAA;;;YAisCIoR,GAAAA,EAAAA,YAAAA;;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAAC5I,WAAW,CAAA;AACzB,aAAA;;;AAhyCW7B,IAAAA,OAAAA,SAAAA,CAAAA;EAAkBrJ,IAiyC9B,EAAA;AAjyCYqJ,SAAAA,CACImG,YAAY,IAAIr3D,kBAAAA,EAAAA,CAAAA;AADpBkxD,SAAAA,CAEIoG,YAAY,IAAIt3D,kBAAAA,EAAAA,CAAAA;AAFpBkxD,SAAAA,CAGIqG,YAAY,IAAIv3D,kBAAAA,EAAAA,CAAAA;AAHpBkxD,SAAAA,CAIIsG,YAAY,IAAIx3D,kBAAAA,EAAAA,CAAAA;AAJpBkxD,SAAAA,CAKIuG,YAAY,IAAIz3D,kBAAAA,EAAAA,CAAAA;AA8xCjC,IAAA,gBAAA,iBAAA,WAAA;AAAM64D,IAAAA,SAAAA,gBAAAA,GAAAA;AACJF,QAAAA,IAAAA,CAAAA,WAAAA,GAAsB,CAAC,CAAA,CAAA;aACvB7B,kBAA8B,GAAA,KAAA,CAAA;;AAF1B+B,IAAAA,IAAAA,MAAAA,GAAAA,gBAAAA,CAAAA,SAAAA,CAAAA;IAIJzpB,MAAAA,CAAAA,KAEC,GAFDA,SAAAA,KAAAA,GAAAA;QACE,IAAI,CAAC0nB,kBAAkB,GAAG,KAAA,CAAA;AAC5B,KAAA,CAAA;AANI+B,IAAAA,OAAAA,gBAAAA,CAAAA;;;ACjzCN;;IAGO,IAAM+C,qBAAN,iBAAA,SAAA,eAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,qBAAAA,EAAAA,eAAAA,CAAAA,CAAAA;aAAAA,qBAEThyF,CAAAA,QAAmB,EACZiyF,aAAmC,EAAA;;AAE1C,QAAA,KAAA,GAAA,eAAA,CAAA,IAAA,CAAA,IAAA,EAAMjyF,yBAFCiyF,aAAAA,GAAAA,aAAAA,CAAAA;;;AAHED,IAAAA,IAAAA,MAAAA,GAAAA,qBAAAA,CAAAA,SAAAA,CAAAA;IAQX,MAAS1gF,CAAAA,cA2GR,GA3GD,SAASA,cAAAA,GAAAA;QACP,IAAM2gF,aAAAA,GAAgB,IAAI,CAACA,aAAa,CAAA;AACxC,QAAA,OAAQA,cAAc32F,IAAI;AACxB,YAAA,KAAA,CAAA;AACE,gBAAA,IAAM42F,UAAgCD,GAAAA,aAAAA,CAAAA;AACtCE,gBAAAA,aAAAA,CAAcC,cAAc,CAC1B,IAAI,CAACpyF,QAAQ,EACbkyF,UAAWt3B,CAAAA,MAAM,EACjBs3B,UAAAA,CAAWG,QAAQ,EACnBH,UAAAA,CAAW5N,kBAAkB,EAC7B,IAAA,EACA4N,WAAW/B,YAAY,CAAA,CAAA;AAEzB,gBAAA,MAAA;AAEF,YAAA,KAAA,CAAA;AACE,gBAAA,IAAMmC,YAAoDL,GAAAA,aAAAA,CAAAA;AAC1DE,gBAAAA,aAAAA,CAAcI,gCAAgC,CAC5C,IAAI,CAACvyF,QAAQ,EACbsyF,YAAa13B,CAAAA,MAAM,EACnB03B,YAAAA,CAAaE,IAAI,EACjBF,YAAAA,CAAahO,kBAAkB,EAC/B,IAAA,EACAgO,aAAanC,YAAY,CAAA,CAAA;AAE3B,gBAAA,MAAA;AAEF,YAAA,KAAA,CAAA;AACE,gBAAA,IAAMsC,UAAgCR,GAAAA,aAAAA,CAAAA;gBACtCE,aAAcO,CAAAA,cAAc,CAC1B,IAAI,CAAC1yF,QAAQ,EACbyyF,UAAAA,CAAW3uF,KAAK,EAChB2uF,UAAAA,CAAW1uF,MAAM,EACjB0uF,UAAAA,CAAWhuF,KAAK,EAChBguF,UAAAA,CAAWnO,kBAAkB,EAC7B,IAAA,EACAmO,WAAWtC,YAAY,CAAA,CAAA;AAEzB,gBAAA,MAAA;AACF,YAAA,KAAA,CAAA;AACE,gBAAA,IAAMwC,SAA8BV,GAAAA,aAAAA,CAAAA;gBACpCE,aAAcS,CAAAA,aAAa,CACzB,IAAI,CAAC5yF,QAAQ,EACb2yF,SAAAA,CAAU7uF,KAAK,EACf6uF,SAAU5uF,CAAAA,MAAM,EAChB4uF,SAAUE,CAAAA,kBAAkB,EAC5BF,SAAAA,CAAUG,gBAAgB,EAC1BH,UAAUrO,kBAAkB,EAC5B,IACAqO,EAAAA,SAAAA,CAAUxC,YAAY,CAAA,CAAA;AAExB,gBAAA,MAAA;AACF,YAAA,KAAA,CAAA;AACE,gBAAA,IAAM4C,YAAoCd,GAAAA,aAAAA,CAAAA;gBAC1CE,aAAca,CAAAA,gBAAgB,CAC5B,IAAI,CAAChzF,QAAQ,EACb+yF,YAAAA,CAAaE,SAAS,EACtBF,YAAaG,CAAAA,YAAY,EACzBH,YAAAA,CAAahvF,MAAM,EACnBgvF,YAAAA,CAAaI,cAAc,EAC3BJ,YAAaK,CAAAA,cAAc,EAC3BL,YAAAA,CAAazO,kBAAkB,EAC/B,IACAyO,EAAAA,YAAAA,CAAa5C,YAAY,CAAA,CAAA;AAE3B,gBAAA,MAAA;AACF,YAAA,KAAA,CAAA;AACE,gBAAA,IAAMkD,SAA8BpB,GAAAA,aAAAA,CAAAA;gBACpCE,aAAcmB,CAAAA,aAAa,CACzB,IAAI,CAACtzF,QAAQ,EACbqzF,SAAAA,CAAUz4B,MAAM,EAChBy4B,SAAUE,CAAAA,UAAU,EACpBF,SAAAA,CAAUF,cAAc,EACxBE,SAAAA,CAAUG,eAAe,EACzBH,SAAUI,CAAAA,GAAG,EACbJ,SAAAA,CAAU/O,kBAAkB,EAC5B,IACA+O,EAAAA,SAAAA,CAAUlD,YAAY,CAAA,CAAA;AAExB,gBAAA,MAAA;AACF,YAAA,KAAA,CAAA;AACE,gBAAA,IAAMuD,QAA4BzB,GAAAA,aAAAA,CAAAA;gBAClCE,aAAcwB,CAAAA,YAAY,CACxB,IAAI,CAAC3zF,QAAQ,EACb0zF,QAAAA,CAAS94B,MAAM,EACf84B,QAAS3vF,CAAAA,MAAM,EACf2vF,QAASP,CAAAA,cAAc,EACvBO,QAAAA,CAASN,cAAc,EACvBM,SAASpP,kBAAkB,EAC3B,IACAoP,EAAAA,QAAAA,CAASvD,YAAY,CAAA,CAAA;AAEvB,gBAAA,MAAA;AACF,YAAA,KAAA,CAAA;AACE,gBAAA,IAAMyD,WAAkC3B,GAAAA,aAAAA,CAAAA;gBACxCE,aAAc0B,CAAAA,eAAe,CAC3B,IAAI,CAAC7zF,QAAQ,EACb4zF,WAAAA,CAAYh5B,MAAM,EAClBg5B,WAAY7vF,CAAAA,MAAM,EAClB6vF,WAAYT,CAAAA,cAAc,EAC1BS,WAAAA,CAAYR,cAAc,EAC1BQ,YAAYtP,kBAAkB,EAC9B,IACAsP,EAAAA,WAAAA,CAAYzD,YAAY,CAAA,CAAA;AAE1B,gBAAA,MAAA;AACJ,SAAA;AACF,KAAA,CAAA;AAnHW6B,IAAAA,OAAAA,qBAAAA,CAAAA;EAA8BjyF,eAoH1C,CAAA,CAAA;AAaD;;AAEC,IACM,IAAA,oBAAM+zF,GAAN,SAAMA,oBAAAA,CAET,IAA0B,EACnB3D,YAAoB,EAC3B,kBAAkC,EAAA;SAF3B70F,IAAAA,GAAAA,IAAAA,CAAAA;SACA60F,YAAAA,GAAAA,YAAAA,CAAAA;SACA7L,kBAAAA,GAAAA,kBAAAA,CAAAA;AAEV,CAAA,CAAA;AAED;;IAGO,IAAMyP,iBAAN,iBAAA,SAAA,oBAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,iBAAAA,EAAAA,oBAAAA,CAAAA,CAAAA;aAAAA,iBAET,CAAOn5B,MAAc,EACdy3B,QAAgB,EACvBlC,YAAoB,EACpB7L,kBAA2B,EAAA;;AAE3B,QAAA,KAAA,GAAA,oBAAA,CAAA,IAAA,CAAA,IAAA,EAAA,CAAA,EAA4B6L,YAAc7L,EAAAA,kBAAAA,CAAAA,IAAAA,IAAAA,EAAAA,KAAAA,CALnC1pB,MAAAA,GAAAA,MAAAA,EAAAA,KAAAA,CACAy3B,QAAAA,GAAAA,QAAAA,CAAAA;;;AAHE0B,IAAAA,OAAAA,iBAAAA,CAAAA;EAA0BD,oBAStC,CAAA,CAAA;AAED;;IAGO,IAAME,mCAAN,iBAAA,SAAA,oBAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,mCAAAA,EAAAA,oBAAAA,CAAAA,CAAAA;aAAAA,mCAET,CAAOp5B,MAAc,EACd43B,IAAY,EACnBrC,YAAoB,EACpB7L,kBAA2B,EAAA;;AAE3B,QAAA,KAAA,GAAA,oBAAA,CAAA,IAAA,CAAA,IAAA,EAAA,CAAA,EAA8B6L,YAAc7L,EAAAA,kBAAAA,CAAAA,IAAAA,IAAAA,EAAAA,KAAAA,CALrC1pB,MAAAA,GAAAA,MAAAA,EAAAA,KAAAA,CACA43B,IAAAA,GAAAA,IAAAA,CAAAA;;;AAHEwB,IAAAA,OAAAA,mCAAAA,CAAAA;EAA4CF,oBASxD,CAAA,CAAA;AAED;;IAGO,IAAMG,iBAAN,iBAAA,SAAA,oBAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,iBAAAA,EAAAA,oBAAAA,CAAAA,CAAAA;aAAAA,iBAET,CAAOnwF,KAAa,EACpB,MAAqB,EACdW,KAAa,EACpB0rF,YAAoB,EACpB7L,kBAA2B,EAAA;;AAE3B,QAAA,KAAA,GAAA,oBAAA,CAAA,IAAA,CAAA,IAAA,EAAA,CAAA,EAA4B6L,cAAc7L,kBANnCxgF,CAAAA,IAAAA,IAAAA,EAAAA,KAAAA,CAAAA,KAAAA,GAAAA,KACAC,EAAAA,KAAAA,CAAAA,MAAAA,GAAAA,cACAU,KAAAA,GAAAA,KAAAA,CAAAA;;;AAJEwvF,IAAAA,OAAAA,iBAAAA,CAAAA;EAA0BH,oBAUtC,CAAA,CAAA;AAED;;IAGO,IAAMI,gBAAN,iBAAA,SAAA,oBAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,gBAAAA,EAAAA,oBAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,gBAAAA,CAET,KAAoB,EACbnwF,MAAc,EACd8uF,kBAA0B,EACjC,gBAA+B,EAC/B1C,YAAoB,EACpB7L,kBAA2B,EAAA;;gBAE3B,oBAA2B6L,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,CAAAA,EAAAA,YAAAA,EAAc7L,mCAPlCxgF,KAAAA,GAAAA,KAAAA,EAAAA,KAAAA,CACAC,SAAAA,MACA8uF,EAAAA,KAAAA,CAAAA,kBAAAA,GAAAA,0BACAC,gBAAAA,GAAAA,gBAAAA,CAAAA;;;AALEoB,IAAAA,OAAAA,gBAAAA,CAAAA;EAAyBJ,oBAWrC,CAAA,CAAA;AAED;;IAGO,IAAMK,mBAAN,iBAAA,SAAA,oBAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,mBAAAA,EAAAA,oBAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,mBAAAA,CAET,SAAwB,EACxB,YAA2B,EAC3B,MAAqB,EACdhB,cAAsB,EACtBC,cAAsB,EAC7BjD,YAAoB,EACpB7L,kBAA2B,EAAA;;gBAE3B,oBAA8B6L,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,CAAAA,EAAAA,YAAAA,EAAc7L,kBARrC2O,CAAAA,IAAAA,IAAAA,EAAAA,KAAAA,CAAAA,SAAAA,GAAAA,SACAC,EAAAA,KAAAA,CAAAA,YAAAA,GAAAA,oBACAnvF,MAAAA,GAAAA,MAAAA,EAAAA,KAAAA,CACAovF,cAAAA,GAAAA,cAAAA,EAAAA,KAAAA,CACAC,cAAAA,GAAAA,cAAAA,CAAAA;;;AANEe,IAAAA,OAAAA,mBAAAA,CAAAA;EAA4BL,oBAYxC,CAAA,CAAA;AAED;;IAGO,IAAMM,gBAAN,iBAAA,SAAA,oBAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,gBAAAA,EAAAA,oBAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,gBAAAA,CAET,MAAqB,EACrB,UAAyB,EACzB,cAA6B,EACtBZ,eAAuB,EACvBC,GAAW,EAClBtD,YAAoB,EACpB7L,kBAA2B,EAAA;;gBAE3B,oBAA2B6L,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,CAAAA,EAAAA,YAAAA,EAAc7L,kBARlC1pB,CAAAA,IAAAA,IAAAA,EAAAA,KAAAA,CAAAA,MAAAA,GAAAA,MACA24B,EAAAA,KAAAA,CAAAA,UAAAA,GAAAA,kBACAJ,cAAAA,GAAAA,cAAAA,EAAAA,KAAAA,CACAK,eAAAA,GAAAA,eAAAA,EAAAA,KAAAA,CACAC,GAAAA,GAAAA,GAAAA,CAAAA;;;AANEW,IAAAA,OAAAA,gBAAAA,CAAAA;EAAyBN,oBAYrC,CAAA,CAAA;AAED;;IAGO,IAAMO,eAAN,iBAAA,SAAA,oBAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,eAAAA,EAAAA,oBAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,eAAAA,CAET,MAAqB,EACdtwF,MAAc,EACdovF,cAAsB,EAC7B,cAA6B,EAC7BhD,YAAoB,EACpB7L,kBAA2B,EAAA;;gBAE3B,oBAA0B6L,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,CAAAA,EAAAA,YAAAA,EAAc7L,mCAPjC1pB,MAAAA,GAAAA,MAAAA,EAAAA,KAAAA,CACA72D,SAAAA,MACAovF,EAAAA,KAAAA,CAAAA,cAAAA,GAAAA,sBACAC,cAAAA,GAAAA,cAAAA,CAAAA;;;AALEiB,IAAAA,OAAAA,eAAAA,CAAAA;EAAwBP,oBAWpC,CAAA,CAAA;AAED;;IAGO,IAAMQ,kBAAN,iBAAA,SAAA,oBAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,kBAAAA,EAAAA,oBAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,kBAAAA,CAET,MAAqB,EACdvwF,MAAc,EACdovF,cAAsB,EAC7B,cAA6B,EAC7BhD,YAAoB,EACpB7L,kBAA2B,EAAA;;gBAE3B,oBAA6B6L,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,CAAAA,EAAAA,YAAAA,EAAc7L,mCAPpC1pB,MAAAA,GAAAA,MAAAA,EAAAA,KAAAA,CACA72D,SAAAA,MACAovF,EAAAA,KAAAA,CAAAA,cAAAA,GAAAA,sBACAC,cAAAA,GAAAA,cAAAA,CAAAA;;;AALEkB,IAAAA,OAAAA,kBAAAA,CAAAA;EAA2BR,oBAWvC,CAAA;;AC5PD;;IAGO,IAAM3B,aAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,aAAAA,GAAAA,EAAAA;AAcX;;;;;;;AAOC,MACD,aAtBWA,CAsBJoC,YAcN,GAdD,SAAOA,YAAAA,CACL32F,MAAc,EACdg9D,MAAoB,EACpBy3B,QAAqB,EACrB/N,kBAAkC,EAAA;AAFlC1pB,QAAAA,IAAAA,mBAAAA,MAAiB,GAAA,GAAA,CAAA;AACjBy3B,QAAAA,IAAAA,qBAAAA,QAAmB,GAAA,EAAA,CAAA;AACnB/N,QAAAA,IAAAA,+BAAAA,kBAA8B,GAAA,IAAA,CAAA;QAE9B,IAAMkQ,UAAAA,GAAa,IAAIlN,SAAU1pF,CAAAA,MAAAA,CAAAA,CAAAA;AA5BxBu0F,QAAAA,aAAAA,CA6BKC,cAAc,CAACoC,UAAY55B,EAAAA,MAAAA,EAAQy3B,UAAU/N,kBAAoB,EAAA,KAAA,CAAA,CAAA;AAE/E,QAAA,IAAM6L,eAAeqE,UAAWnY,CAAAA,oBAAoB,CAAC,CAAA,CAAE,CAAC7rE,MAAM,CAAA;QAC9D5S,MAAOO,CAAAA,eAAe,CAACkT,kBAAkB,CACvC,IAAI2gF,qBAAsBwC,CAAAA,UAAAA,EAAY,IAAIT,iBAAAA,CAAkBn5B,MAAQy3B,EAAAA,QAAAA,EAAUlC,YAAc7L,EAAAA,kBAAAA,CAAAA,CAAAA,CAAAA,CAAAA;QAE9F,OAAOkQ,UAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;;;;;AAQC,MACD,aA/CWrC,CA+CJsC,8BAiBN,GAjBD,SAAOA,8BAAAA,CACL72F,MAAc,EACdg9D,MAAoB,EACpB43B,IAAgB,EAChBlO,kBAAkC,EAAA;AAFlC1pB,QAAAA,IAAAA,mBAAAA,MAAiB,GAAA,GAAA,CAAA;AACjB43B,QAAAA,IAAAA,iBAAAA,IAAe,GAAA,CAAA,CAAA;AACflO,QAAAA,IAAAA,+BAAAA,kBAA8B,GAAA,IAAA,CAAA;QAE9B,IAAMkQ,UAAAA,GAAa,IAAIlN,SAAU1pF,CAAAA,MAAAA,CAAAA,CAAAA;AArDxBu0F,QAAAA,aAAAA,CAsDKI,gCAAgC,CAACiC,UAAY55B,EAAAA,MAAAA,EAAQ43B,MAAMlO,kBAAoB,EAAA,KAAA,CAAA,CAAA;AAE7F,QAAA,IAAM6L,eAAeqE,UAAWnY,CAAAA,oBAAoB,CAAC,CAAA,CAAE,CAAC7rE,MAAM,CAAA;QAC9D5S,MAAOO,CAAAA,eAAe,CAACkT,kBAAkB,CACvC,IAAI2gF,qBACFwC,CAAAA,UAAAA,EACA,IAAIR,mCAAAA,CAAoCp5B,MAAQ43B,EAAAA,IAAAA,EAAMrC,YAAc7L,EAAAA,kBAAAA,CAAAA,CAAAA,CAAAA,CAAAA;QAGxE,OAAOkQ,UAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;;;;;AAQC,MACD,aA3EWrC,CA2EJuC,YAeN,GAfD,SAAOA,YACL92F,CAAAA,MAAc,EACdkG,KAAiB,EACjBC,MAAkB,EAClBU,KAAiB,EACjB6/E,kBAAkC,EAAA;AAHlCxgF,QAAAA,IAAAA,kBAAAA,KAAgB,GAAA,CAAA,CAAA;AAChBC,QAAAA,IAAAA,mBAAAA,MAAiB,GAAA,CAAA,CAAA;AACjBU,QAAAA,IAAAA,kBAAAA,KAAgB,GAAA,CAAA,CAAA;AAChB6/E,QAAAA,IAAAA,+BAAAA,kBAA8B,GAAA,IAAA,CAAA;QAE9B,IAAMjc,IAAAA,GAAO,IAAIif,SAAU1pF,CAAAA,MAAAA,CAAAA,CAAAA;AAlFlBu0F,QAAAA,aAAAA,CAmFKO,cAAc,CAACrqB,IAAAA,EAAMvkE,KAAOC,EAAAA,MAAAA,EAAQU,OAAO6/E,kBAAoB,EAAA,KAAA,CAAA,CAAA;AAE7E,QAAA,IAAM6L,eAAe9nB,IAAKgU,CAAAA,oBAAoB,CAAC,CAAA,CAAE,CAAC7rE,MAAM,CAAA;AACxD5S,QAAAA,MAAAA,CAAOO,eAAe,CAACkT,kBAAkB,CACvC,IAAI2gF,qBAAAA,CAAsB3pB,IAAM,EAAA,IAAI4rB,iBAAkBnwF,CAAAA,KAAAA,EAAOC,MAAQU,EAAAA,KAAAA,EAAO0rF,YAAc7L,EAAAA,kBAAAA,CAAAA,CAAAA,CAAAA,CAAAA;QAE5F,OAAOjc,IAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;;;;;;AASC,MACD,aAAOssB,CAAAA,WAmBN,GAnBD,SAAOA,YACL/2F,MAAc,EACdkG,KAAiB,EACjBC,MAAkB,EAClB8uF,kBAA8B,EAC9BC,gBAA4B,EAC5BxO,kBAAkC,EAAA;AAJlCxgF,QAAAA,IAAAA,kBAAAA,KAAgB,GAAA,CAAA,CAAA;AAChBC,QAAAA,IAAAA,mBAAAA,MAAiB,GAAA,CAAA,CAAA;AACjB8uF,QAAAA,IAAAA,+BAAAA,kBAA6B,GAAA,CAAA,CAAA;AAC7BC,QAAAA,IAAAA,6BAAAA,gBAA2B,GAAA,CAAA,CAAA;AAC3BxO,QAAAA,IAAAA,+BAAAA,kBAA8B,GAAA,IAAA,CAAA;QAE9B,IAAMjc,IAAAA,GAAO,IAAIif,SAAU1pF,CAAAA,MAAAA,CAAAA,CAAAA;AA9GlBu0F,QAAAA,aAAAA,CA+GKS,aAAa,CAACvqB,IAAAA,EAAMvkE,OAAOC,MAAQ8uF,EAAAA,kBAAAA,EAAoBC,kBAAkBxO,kBAAoB,EAAA,KAAA,CAAA,CAAA;AAE3G,QAAA,IAAM6L,eAAe9nB,IAAKgU,CAAAA,oBAAoB,CAAC,CAAA,CAAE,CAAC7rE,MAAM,CAAA;AACxD5S,QAAAA,MAAAA,CAAOO,eAAe,CAACkT,kBAAkB,CACvC,IAAI2gF,qBAAAA,CACF3pB,IACA,EAAA,IAAI6rB,gBAAiBpwF,CAAAA,KAAAA,EAAOC,MAAQ8uF,EAAAA,kBAAAA,EAAoBC,kBAAkB3C,YAAc7L,EAAAA,kBAAAA,CAAAA,CAAAA,CAAAA,CAAAA;QAG5F,OAAOjc,IAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;;;;;;;AAUC,MACD,aAAOusB,CAAAA,cAqCN,GArCD,SAAOA,cAAAA,CACLh3F,MAAc,EACdq1F,SAAuB,EACvBC,YAA0B,EAC1BnvF,MAAkB,EAClBovF,cAA2B,EAC3BC,cAA0B,EAC1B9O,kBAAkC,EAAA;AALlC2O,QAAAA,IAAAA,sBAAAA,SAAoB,GAAA,GAAA,CAAA;AACpBC,QAAAA,IAAAA,yBAAAA,YAAuB,GAAA,GAAA,CAAA;AACvBnvF,QAAAA,IAAAA,mBAAAA,MAAiB,GAAA,CAAA,CAAA;AACjBovF,QAAAA,IAAAA,2BAAAA,cAAyB,GAAA,EAAA,CAAA;AACzBC,QAAAA,IAAAA,2BAAAA,cAAyB,GAAA,CAAA,CAAA;AACzB9O,QAAAA,IAAAA,+BAAAA,kBAA8B,GAAA,IAAA,CAAA;QAE9B,IAAMjc,IAAAA,GAAO,IAAIif,SAAU1pF,CAAAA,MAAAA,CAAAA,CAAAA;QA/IlBu0F,aAgJKa,CAAAA,gBAAgB,CAC5B3qB,IACA4qB,EAAAA,SAAAA,EACAC,cACAnvF,MACAovF,EAAAA,cAAAA,EACAC,gBACA9O,kBACA,EAAA,KAAA,CAAA,CAAA;AAGF,QAAA,IAAM6L,eAAe9nB,IAAKgU,CAAAA,oBAAoB,CAAC,CAAA,CAAE,CAAC7rE,MAAM,CAAA;AACxD5S,QAAAA,MAAAA,CAAOO,eAAe,CAACkT,kBAAkB,CACvC,IAAI2gF,qBACF3pB,CAAAA,IAAAA,EACA,IAAI8rB,mBAAAA,CACFlB,SACAC,EAAAA,YAAAA,EACAnvF,MACAovF,EAAAA,cAAAA,EACAC,gBACAjD,YACA7L,EAAAA,kBAAAA,CAAAA,CAAAA,CAAAA,CAAAA;QAIN,OAAOjc,IAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;;;;;;;AAUC,MACD,aAAOwsB,CAAAA,WA6BN,GA7BD,SAAOA,WAAAA,CACLj3F,MAAc,EACdg9D,MAAoB,EACpB24B,UAAwB,EACxBJ,cAA2B,EAC3BK,eAA4B,EAC5BC,GAAiB,EACjBnP,kBAAkC,EAAA;AALlC1pB,QAAAA,IAAAA,mBAAAA,MAAiB,GAAA,GAAA,CAAA;AACjB24B,QAAAA,IAAAA,uBAAAA,UAAqB,GAAA,GAAA,CAAA;AACrBJ,QAAAA,IAAAA,2BAAAA,cAAyB,GAAA,EAAA,CAAA;AACzBK,QAAAA,IAAAA,4BAAAA,eAA0B,GAAA,EAAA,CAAA;AAC1BC,QAAAA,IAAAA,gBAAAA,GAAc,GAAA,GAAA,CAAA;AACdnP,QAAAA,IAAAA,+BAAAA,kBAA8B,GAAA,IAAA,CAAA;QAE9B,IAAMjc,IAAAA,GAAO,IAAIif,SAAU1pF,CAAAA,MAAAA,CAAAA,CAAAA;QAjMlBu0F,aAkMKmB,CAAAA,aAAa,CACzBjrB,IACAzN,EAAAA,MAAAA,EACA24B,YACAJ,cACAK,EAAAA,eAAAA,EACAC,KACAnP,kBACA,EAAA,KAAA,CAAA,CAAA;AAGF,QAAA,IAAM6L,eAAe9nB,IAAKgU,CAAAA,oBAAoB,CAAC,CAAA,CAAE,CAAC7rE,MAAM,CAAA;AACxD5S,QAAAA,MAAAA,CAAOO,eAAe,CAACkT,kBAAkB,CACvC,IAAI2gF,qBACF3pB,CAAAA,IAAAA,EACA,IAAI+rB,gBAAAA,CAAiBx5B,MAAQ24B,EAAAA,UAAAA,EAAYJ,cAAgBK,EAAAA,eAAAA,EAAiBC,KAAKtD,YAAc7L,EAAAA,kBAAAA,CAAAA,CAAAA,CAAAA,CAAAA;QAGjG,OAAOjc,IAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;;;;;;AASC,MACD,aAAOysB,CAAAA,UAmBN,GAnBD,SAAOA,WACLl3F,MAAc,EACdg9D,MAAoB,EACpB72D,MAAkB,EAClBovF,cAA2B,EAC3BC,cAA0B,EAC1B9O,kBAAkC,EAAA;AAJlC1pB,QAAAA,IAAAA,mBAAAA,MAAiB,GAAA,GAAA,CAAA;AACjB72D,QAAAA,IAAAA,mBAAAA,MAAiB,GAAA,CAAA,CAAA;AACjBovF,QAAAA,IAAAA,2BAAAA,cAAyB,GAAA,EAAA,CAAA;AACzBC,QAAAA,IAAAA,2BAAAA,cAAyB,GAAA,CAAA,CAAA;AACzB9O,QAAAA,IAAAA,+BAAAA,kBAA8B,GAAA,IAAA,CAAA;QAE9B,IAAMjc,IAAAA,GAAO,IAAIif,SAAU1pF,CAAAA,MAAAA,CAAAA,CAAAA;AAzOlBu0F,QAAAA,aAAAA,CA0OKwB,YAAY,CAACtrB,IAAAA,EAAMzN,QAAQ72D,MAAQovF,EAAAA,cAAAA,EAAgBC,gBAAgB9O,kBAAoB,EAAA,KAAA,CAAA,CAAA;AAErG,QAAA,IAAM6L,eAAe9nB,IAAKgU,CAAAA,oBAAoB,CAAC,CAAA,CAAE,CAAC7rE,MAAM,CAAA;AACxD5S,QAAAA,MAAAA,CAAOO,eAAe,CAACkT,kBAAkB,CACvC,IAAI2gF,qBAAAA,CACF3pB,IACA,EAAA,IAAIgsB,eAAgBz5B,CAAAA,MAAAA,EAAQ72D,MAAQovF,EAAAA,cAAAA,EAAgBC,gBAAgBjD,YAAc7L,EAAAA,kBAAAA,CAAAA,CAAAA,CAAAA,CAAAA;QAGtF,OAAOjc,IAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;;;;;;AASC,MACD,aAAO0sB,CAAAA,aAmBN,GAnBD,SAAOA,cACLn3F,MAAc,EACdg9D,MAAoB,EACpB72D,MAAkB,EAClBovF,cAA0B,EAC1BC,cAA0B,EAC1B9O,kBAAkC,EAAA;AAJlC1pB,QAAAA,IAAAA,mBAAAA,MAAiB,GAAA,GAAA,CAAA;AACjB72D,QAAAA,IAAAA,mBAAAA,MAAiB,GAAA,CAAA,CAAA;AACjBovF,QAAAA,IAAAA,2BAAAA,cAAyB,GAAA,CAAA,CAAA;AACzBC,QAAAA,IAAAA,2BAAAA,cAAyB,GAAA,CAAA,CAAA;AACzB9O,QAAAA,IAAAA,+BAAAA,kBAA8B,GAAA,IAAA,CAAA;QAE9B,IAAMjc,IAAAA,GAAO,IAAIif,SAAU1pF,CAAAA,MAAAA,CAAAA,CAAAA;AAxQlBu0F,QAAAA,aAAAA,CAyQK0B,eAAe,CAACxrB,IAAAA,EAAMzN,QAAQ72D,MAAQovF,EAAAA,cAAAA,EAAgBC,gBAAgB9O,kBAAoB,EAAA,KAAA,CAAA,CAAA;AAExG,QAAA,IAAM6L,eAAe9nB,IAAKgU,CAAAA,oBAAoB,CAAC,CAAA,CAAE,CAAC7rE,MAAM,CAAA;AACxD5S,QAAAA,MAAAA,CAAOO,eAAe,CAACkT,kBAAkB,CACvC,IAAI2gF,qBAAAA,CACF3pB,IACA,EAAA,IAAIisB,kBAAmB15B,CAAAA,MAAAA,EAAQ72D,MAAQovF,EAAAA,cAAAA,EAAgBC,gBAAgBjD,YAAc7L,EAAAA,kBAAAA,CAAAA,CAAAA,CAAAA,CAAAA;QAGzF,OAAOjc,IAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;AAEC,MACD,aAAOkqB,CAAAA,gCA8GN,GA9GD,SAAOA,iCACLiC,UAAqB,EACrB55B,MAAc,EACd43B,IAAY,EACZlO,kBAA2B,EAC3B0Q,aAAsB,EACtBC,mBAA4B,EAAA;;AAG5BzC,QAAAA,IAAAA,GAAO9zE,oBAASC,KAAK,CAACxb,KAAKC,KAAK,CAACovF,OAAO,CAAG,EAAA,CAAA,CAAA,CAAA;QAE3C,IAAMl1E,SAAAA,GAAY,IAAIxgB,YAAAA,CAAa,CAAK,IAAA,CAAIqG,GAAAA,IAAAA,CAAKwgE,GAAG,CAAC,CAAG6uB,EAAAA,IAAAA,CAAAA,GAAQ,CAAA,CAAA,CAAA,CAAA;AAChE,QAAA,IAAM0C,QAAQ,IAAIp4F,YAAAA,CAAa,KAAKqG,IAAKwgE,CAAAA,GAAG,CAAC,CAAG6uB,EAAAA,IAAAA,CAAAA,CAAAA,CAAAA;QApSvCL,aAqSKgD,CAAAA,oBAAoB,CAAC3C,IAAAA,EAAMl1E,SAAW43E,EAAAA,KAAAA,CAAAA,CAAAA;QAEpD,IAAME,aAAAA,GAAgB93E,SAAUrgB,CAAAA,MAAM,GAAG,CAAA,CAAA;QACzC,IAAMo4F,UAAAA,GAAaH,KAAMj4F,CAAAA,MAAM,GAAG,CAAA,CAAA;AAClC,QAAA,IAAMq4F,aAAaF,aAAgBjyF,GAAAA,IAAAA,CAAKwgE,GAAG,CAAC,CAAA,EAAG6uB,OAAO,CAAK,CAAA,GAAA,CAAA,CAAA;;;AAG3D,QAAA,IAAM1sC,cAAcwvC,UAAa,GAAA,EAAA,CAAA;QAEjC,IAAMjyC,QAAAA,GAAW,IAAIvmD,YAAAA,CAAagpD,WAAc,GAAA,CAAA,CAAA,CAAA;QAChD,IAAMpV,OAAAA,GAAUyhD,aAAcoD,CAAAA,gBAAgB,CAACf,UAAW52F,CAAAA,MAAM,EAAEw3F,aAAAA,EAAeC,UAAa,GAAA,CAAA,CAAA,CAAA;AAE9F,QAAA,IAAIG,SAAY,GAAA,CAAA,CAAA;AAChB,QAAA,IAAMC,eAAuC,EAAC,CAAA;;AAG9C,QAAA,IAAK,IAAIp4F,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAI+3F,eAAe/3F,CAAK,EAAA,CAAA;AACtC,YAAA,IAAI8X,SAAS,CAAI9X,GAAAA,CAAAA,CAAAA;YAEjB,IAAIuJ,CAAAA,GAAI0W,SAAS,CAACnI,MAAO,CAAA,CAAA;AACzB,YAAA,IAAItO,CAAIyW,GAAAA,SAAS,CAACnI,MAAAA,GAAS,CAAE,CAAA,CAAA;AAC7B,YAAA,IAAI0H,CAAIS,GAAAA,SAAS,CAACnI,MAAAA,GAAS,CAAE,CAAA,CAAA;YAE7B,IAAMugF,gBAAAA,GAAmB,IAAIvyF,IAAK03D,CAAAA,IAAI,CAACj0D,CAAIA,GAAAA,CAAAA,GAAIC,CAAIA,GAAAA,CAAAA,GAAIgW,CAAIA,GAAAA,CAAAA,CAAAA,CAAAA;YAC3DjW,CAAK8uF,IAAAA,gBAAAA,CAAAA;YACL7uF,CAAK6uF,IAAAA,gBAAAA,CAAAA;YACL74E,CAAK64E,IAAAA,gBAAAA,CAAAA;AAELvgF,YAAAA,MAAAA,GAAS,CAAI9X,GAAAA,CAAAA,CAAAA;YACbgmD,QAAQ,CAACluC,MAAO,CAAA,GAAGvO,CAAIg0D,GAAAA,MAAAA,CAAAA;AACvBvX,YAAAA,QAAQ,CAACluC,MAAAA,GAAS,CAAE,CAAA,GAAGtO,CAAI+zD,GAAAA,MAAAA,CAAAA;AAC3BvX,YAAAA,QAAQ,CAACluC,MAAAA,GAAS,CAAE,CAAA,GAAG0H,CAAI+9C,GAAAA,MAAAA,CAAAA;YAE3BvX,QAAQ,CAACluC,MAAS,GAAA,CAAA,CAAE,GAAGvO,CAAAA,CAAAA;YACvBy8C,QAAQ,CAACluC,MAAS,GAAA,CAAA,CAAE,GAAGtO,CAAAA,CAAAA;YACvBw8C,QAAQ,CAACluC,MAAS,GAAA,CAAA,CAAE,GAAG0H,CAAAA,CAAAA;AAEvBwmC,YAAAA,QAAQ,CAACluC,MAAS,GAAA,CAAA,CAAE,GAAG,CAAChS,KAAKwyF,EAAE,GAAGxyF,KAAKyyF,KAAK,CAAC/4E,GAAGjW,CAAC,CAAA,KAAM,CAAIzD,GAAAA,IAAAA,CAAKwyF,EAAE,CAAD,CAAA;YACjEtyC,QAAQ,CAACluC,SAAS,CAAE,CAAA,GAAGhS,KAAK0yF,IAAI,CAAChvF,CAAK1D,CAAAA,GAAAA,IAAAA,CAAKwyF,EAAE,CAAA;AAE7C,YAAA,IAAItyC,QAAQ,CAACluC,MAAS,GAAA,CAAA,CAAE,KAAK,CAAG,EAAA;;AAE9B,gBAAA,IAAM2gF,UAAa,GAAA,CAAA,IAAKV,aAAAA,GAAgBI,SAAU,EAAA,CAAA,CAAA;AAElDnyC,gBAAAA,QAAAA,CAASjoD,GAAG,CAACioD,QAAAA,CAAS0yC,QAAQ,CAAC5gF,MAAAA,EAAQA,SAAS,CAAI2gF,CAAAA,EAAAA,UAAAA,CAAAA,CAAAA;gBACpDzyC,QAAQ,CAACyyC,UAAa,GAAA,CAAA,CAAE,GAAG,GAAA,CAAA;;AAG3BL,gBAAAA,YAAY,CAACtgF,MAAAA,GAAS,CAAE,CAAA,GAAG2gF,UAAa,GAAA,CAAA,CAAA;AAC1C,aAAA;AACF,SAAA;;AAGA,QAAA,IAAI3gF,OAAS,GAAA,CAAA,CAAA;QACb,IAAI,CAAC6gF,cAAc,GAAG,CAAA,CAAA;AACtB,QAAA,IAAK,IAAI34F,EAAAA,GAAI,CAAGA,EAAAA,EAAAA,GAAIg4F,YAAYh4F,EAAK,EAAA,CAAA;AACnC,YAAA,IAAMiT,MAAM,CAAIjT,GAAAA,EAAAA,CAAAA;YAEhB,IAAI44F,MAAAA,GAASf,KAAK,CAAC5kF,GAAI,CAAA,CAAA;AACvB,YAAA,IAAI4lF,MAAShB,GAAAA,KAAK,CAAC5kF,GAAAA,GAAM,CAAE,CAAA,CAAA;AAC3B,YAAA,IAAI6lF,MAASjB,GAAAA,KAAK,CAAC5kF,GAAAA,GAAM,CAAE,CAAA,CAAA;AAC3B,YAAA,IAAI8lF,MAASlB,GAAAA,KAAK,CAAC5kF,GAAAA,GAAM,CAAE,CAAA,CAAA;;AAG3B,YAAA,IAAM+lF,cAAc,CAAIJ,GAAAA,MAAAA,CAAAA;AACxB,YAAA,IAAMK,cAAc,CAAIJ,GAAAA,MAAAA,CAAAA;AACxB,YAAA,IAAMK,cAAc,CAAIJ,GAAAA,MAAAA,CAAAA;AACxB,YAAA,IAAMK,cAAc,CAAIJ,GAAAA,MAAAA,CAAAA;;AAGxB,YAAA,IAAI/yC,QAAQ,CAACgzC,WAAc,GAAA,CAAA,CAAE,GAAGhzC,QAAQ,CAACizC,WAAc,GAAA,CAAA,CAAE,GAAGjzC,QAAQ,CAACkzC,WAAc,GAAA,CAAA,CAAE,GAAG,CAAG,EAAA;gBACzFlzC,QAAQ,CAACgzC,WAAc,GAAA,CAAA,CAAE,KAAK,CAAA,KAAMJ,MAASR,GAAAA,YAAY,CAACQ,MAAAA,CAAO,CAAD,CAAA;gBAChE5yC,QAAQ,CAACizC,WAAc,GAAA,CAAA,CAAE,KAAK,CAAA,KAAMJ,MAAST,GAAAA,YAAY,CAACS,MAAAA,CAAO,CAAD,CAAA;gBAChE7yC,QAAQ,CAACkzC,WAAc,GAAA,CAAA,CAAE,KAAK,CAAA,KAAMJ,MAASV,GAAAA,YAAY,CAACU,MAAAA,CAAO,CAAD,CAAA;gBAChE9yC,QAAQ,CAACmzC,WAAc,GAAA,CAAA,CAAE,KAAK,CAAA,KAAMJ,MAASX,GAAAA,YAAY,CAACW,MAAAA,CAAO,CAAD,CAAA;AAClE,aAAA;YAEA1lD,OAAO,CAACv7B,QAAO,GAAG8gF,MAAAA,CAAAA;YAClBvlD,OAAO,CAACv7B,OAAS,GAAA,CAAA,CAAE,GAAG+gF,MAAAA,CAAAA;YACtBxlD,OAAO,CAACv7B,OAAS,GAAA,CAAA,CAAE,GAAGghF,MAAAA,CAAAA;AAEtB,YAAA,IAAI,CAACM,yBAAyB,CAAC/lD,OAAAA,EAAS2S,UAAUluC,OAAQmgF,EAAAA,UAAAA,CAAAA,CAAAA;YAE1D5kD,OAAO,CAACv7B,OAAS,GAAA,CAAA,CAAE,GAAG8gF,MAAAA,CAAAA;YACtBvlD,OAAO,CAACv7B,OAAS,GAAA,CAAA,CAAE,GAAGghF,MAAAA,CAAAA;YACtBzlD,OAAO,CAACv7B,OAAS,GAAA,CAAA,CAAE,GAAGihF,MAAAA,CAAAA;AAEtB,YAAA,IAAI,CAACK,yBAAyB,CAAC/lD,OAAS2S,EAAAA,QAAAA,EAAUluC,UAAS,CAAGmgF,EAAAA,UAAAA,CAAAA,CAAAA;YAE9DngF,OAAU,IAAA,CAAA,CAAA;AACZ,SAAA;AACA,QAAA,IAAI,CAAC6/E,aAAe,EAAA;YAClB,IAAQz1C,SAAWi1C,UAAXj1C,CAAAA,MAAAA,CAAAA;YACRA,MAAOhiC,CAAAA,GAAG,CAACniB,GAAG,CAAC,CAACw/D,MAAQ,EAAA,CAACA,QAAQ,CAACA,MAAAA,CAAAA,CAAAA;AAClCrb,YAAAA,MAAAA,CAAOh8C,GAAG,CAACnI,GAAG,CAACw/D,QAAQA,MAAQA,EAAAA,MAAAA,CAAAA,CAAAA;AACjC,SAAA;AApYSu3B,QAAAA,aAAAA,CAqYKuE,WAAW,CAAClC,UAAAA,EAAYnxC,QAAU3S,EAAAA,OAAAA,EAAS4zC,oBAAoB0Q,aAAeC,EAAAA,mBAAAA,CAAAA,CAAAA;AAC9F,KAAA,CAAA;AAEA;;AAEC,MACD,aAAO7C,CAAAA,cA0EN,GA1ED,SAAOA,eACLoC,UAAqB,EACrB55B,MAAc,EACdy3B,QAAgB,EAChB/N,kBAA2B,EAC3B0Q,aAAsB,EACtBC,mBAA4B,EAAA;AAE5B5C,QAAAA,QAAAA,GAAWlvF,KAAKI,GAAG,CAAC,CAAGJ,EAAAA,IAAAA,CAAKC,KAAK,CAACivF,QAAAA,CAAAA,CAAAA,CAAAA;AAElC,QAAA,IAAMzvE,QAAQyvE,QAAW,GAAA,CAAA,CAAA;AACzB,QAAA,IAAMvsC,cAAcljC,KAAQA,GAAAA,KAAAA,CAAAA;AAC5B,QAAA,IAAM+zE,iBAAiBtE,QAAWA,GAAAA,QAAAA,CAAAA;QAClC,IAAM3hD,OAAAA,GAAUyhD,aAAcoD,CAAAA,gBAAgB,CAACf,UAAW52F,CAAAA,MAAM,EAAEkoD,WAAAA,EAAa6wC,cAAiB,GAAA,CAAA,CAAA,CAAA;QAChG,IAAMC,UAAAA,GAAazzF,KAAKwyF,EAAE,CAAA;AAC1B,QAAA,IAAMkB,aAAaD,UAAa,GAAA,CAAA,CAAA;AAChC,QAAA,IAAME,kBAAkB,GAAMl0E,GAAAA,KAAAA,CAAAA;AAC9B,QAAA,IAAMm0E,qBAAqB,GAAM1E,GAAAA,QAAAA,CAAAA;AAEjC,QAAA,IAAM7N,gBAAmB,GAAA,CAAA,CAAA;QACzB,IAAMnhC,QAAAA,GAAW,IAAIvmD,YAAAA,CAAagpD,WAAc0+B,GAAAA,gBAAAA,CAAAA,CAAAA;AAEhD,QAAA,IAAK,IAAInnF,CAAI,GAAA,CAAA,EAAGA,CAAIyoD,GAAAA,WAAAA,EAAa,EAAEzoD,CAAG,CAAA;AACpC,YAAA,IAAMuJ,IAAIvJ,CAAIulB,GAAAA,KAAAA,CAAAA;YACd,IAAM/b,CAAAA,GAAI,CAACxJ,GAAIy5F,eAAmB,GAAA,CAAA,CAAA;AAClC,YAAA,IAAME,IAAIpwF,CAAImwF,GAAAA,kBAAAA,CAAAA;AACd,YAAA,IAAMxe,IAAI1xE,CAAIkwF,GAAAA,kBAAAA,CAAAA;AACd,YAAA,IAAME,aAAaD,CAAIH,GAAAA,UAAAA,CAAAA;AACvB,YAAA,IAAMK,aAAa3e,CAAIqe,GAAAA,UAAAA,CAAAA;YACvB,IAAMO,QAAAA,GAAWh0F,IAAK0iB,CAAAA,GAAG,CAACqxE,UAAAA,CAAAA,CAAAA;AAE1B,YAAA,IAAIE,OAAO,CAACx8B,MAAAA,GAASz3D,IAAK2iB,CAAAA,GAAG,CAACmxE,UAAcE,CAAAA,GAAAA,QAAAA,CAAAA;AAC5C,YAAA,IAAIE,IAAOz8B,GAAAA,MAAAA,GAASz3D,IAAK2iB,CAAAA,GAAG,CAACoxE,UAAAA,CAAAA,CAAAA;AAC7B,YAAA,IAAII,IAAO18B,GAAAA,MAAAA,GAASz3D,IAAK0iB,CAAAA,GAAG,CAACoxE,UAAcE,CAAAA,GAAAA,QAAAA,CAAAA;AAE3C,YAAA,IAAIhiF,SAAS9X,CAAImnF,GAAAA,gBAAAA,CAAAA;;YAEjBnhC,QAAQ,CAACluC,SAAS,GAAGiiF,IAAAA,CAAAA;YACrB/zC,QAAQ,CAACluC,SAAS,GAAGkiF,IAAAA,CAAAA;YACrBh0C,QAAQ,CAACluC,SAAS,GAAGmiF,IAAAA,CAAAA;;YAErBj0C,QAAQ,CAACluC,SAAS,GAAGiiF,IAAAA,CAAAA;YACrB/zC,QAAQ,CAACluC,SAAS,GAAGkiF,IAAAA,CAAAA;YACrBh0C,QAAQ,CAACluC,SAAS,GAAGmiF,IAAAA,CAAAA;;YAErBj0C,QAAQ,CAACluC,SAAS,GAAG6hF,CAAAA,CAAAA;YACrB3zC,QAAQ,CAACluC,SAAS,GAAGojE,CAAAA,CAAAA;AACvB,SAAA;AAEA,QAAA,IAAIpjE,OAAS,GAAA,CAAA,CAAA;AACb,QAAA,IAAK,IAAI9X,EAAI,GAAA,CAAA,EAAGA,EAAIs5F,GAAAA,cAAAA,EAAgB,EAAEt5F,EAAG,CAAA;AACvC,YAAA,IAAMuJ,KAAIvJ,EAAIg1F,GAAAA,QAAAA,CAAAA;YACd,IAAMxrF,EAAAA,GAAI,EAACxJ,GAAI05F,kBAAsB,GAAA,CAAA,CAAA;YAErC,IAAMp/E,CAAAA,GAAI9Q,KAAI+b,KAAQhc,GAAAA,EAAAA,CAAAA;AACtB,YAAA,IAAMioB,IAAIlX,CAAI,GAAA,CAAA,CAAA;AACd,YAAA,IAAM4/E,IAAI5/E,CAAIiL,GAAAA,KAAAA,CAAAA;AACd,YAAA,IAAM40E,IAAID,CAAI,GAAA,CAAA,CAAA;YAEd7mD,OAAO,CAACv7B,UAAS,GAAG0Z,CAAAA,CAAAA;YACpB6hB,OAAO,CAACv7B,UAAS,GAAGwC,CAAAA,CAAAA;YACpB+4B,OAAO,CAACv7B,UAAS,GAAGqiF,CAAAA,CAAAA;YACpB9mD,OAAO,CAACv7B,UAAS,GAAGwC,CAAAA,CAAAA;YACpB+4B,OAAO,CAACv7B,UAAS,GAAGoiF,CAAAA,CAAAA;YACpB7mD,OAAO,CAACv7B,UAAS,GAAGqiF,CAAAA,CAAAA;AACtB,SAAA;AAEA,QAAA,IAAI,CAACxC,aAAe,EAAA;YAClB,IAAQz1C,SAAWi1C,UAAXj1C,CAAAA,MAAAA,CAAAA;YACRA,MAAOhiC,CAAAA,GAAG,CAACniB,GAAG,CAAC,CAACw/D,MAAQ,EAAA,CAACA,QAAQ,CAACA,MAAAA,CAAAA,CAAAA;AAClCrb,YAAAA,MAAAA,CAAOh8C,GAAG,CAACnI,GAAG,CAACw/D,QAAQA,MAAQA,EAAAA,MAAAA,CAAAA,CAAAA;AACjC,SAAA;AAldSu3B,QAAAA,aAAAA,CAodKuE,WAAW,CAAClC,UAAAA,EAAYnxC,QAAU3S,EAAAA,OAAAA,EAAS4zC,oBAAoB0Q,aAAeC,EAAAA,mBAAAA,CAAAA,CAAAA;AAC9F,KAAA,CAAA;AAEA;;MAvdW9C,aA0dJgD,CAAAA,oBA6HN,GA7HD,SAAOA,qBAAqB3C,IAAY,EAAEl1E,SAAuB,EAAE43E,KAAmB,EAAA;AACpF,QAAA,IAAMuC,QAAQ,IAAI/5F,GAAAA,EAAAA,CAAAA;AAClB,QAAA,IAAMg6F,QAAQ,IAAIv6F,KAAAA,EAAAA,CAAAA;AAElBmgB,QAAAA,SAAAA,CAAUliB,GAAG,CAAC+2F,aA9dLA,CA8dmBwF,oBAAoB,CAAA,CAAA;AAChDzC,QAAAA,KAAAA,CAAM95F,GAAG,CAAC+2F,aA/dDA,CA+deyF,gBAAgB,CAAA,CAAA;AAExC,QAAA,IAAK,IAAIv6F,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAIm1F,MAAMn1F,CAAK,EAAA,CAAA;AAC7B,YAAA,IAAMw6F,SAAY,GAAA,CAAA,GAAI10F,IAAKwgE,CAAAA,GAAG,CAAC,CAAGtmE,EAAAA,CAAAA,CAAAA,CAAAA;YAClC,IAAM+3F,aAAAA,GAAgB,IAAIyC,SAAY,GAAA,CAAA,CAAA;AAEtCJ,YAAAA,KAAAA,CAAM51E,KAAK,EAAA,CAAA;AACX61E,YAAAA,KAAAA,CAAMz6F,MAAM,GAAG,CAAA,CAAA;;AAGf,YAAA,IAAK,IAAIwQ,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAIoqF,WAAWpqF,CAAK,EAAA,CAAA;AAClC,gBAAA,IAAMxF,IAAQyvF,GAAAA,KAAK,CAACjqF,CAAAA,CAAE,GAAG;AACvBqqF,oBAAAA,SAAAA,EAAW,IAAI1hE,kBAAAA,EAAAA;AACf2hE,oBAAAA,aAAAA,EAAe,IAAI56F,KAAa,CAAA,CAAA,CAAA;AAClC,iBAAA,CAAA;;AAGA,gBAAA,IAAK,IAAIlB,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAI,GAAGA,CAAK,EAAA,CAAA;AAC1B,oBAAA,IAAMkZ,SAAS,CAAI+/E,GAAAA,KAAK,CAAC,CAAA,GAAIznF,IAAIxR,CAAE,CAAA,CAAA;AACnCgM,oBAAAA,IAAAA,CAAK6vF,SAAS,CAAClxF,CAAC,IAAI,IAAO0W,GAAAA,SAAS,CAACnI,MAAO,CAAA,CAAA;oBAC5ClN,IAAK6vF,CAAAA,SAAS,CAACjxF,CAAC,IAAI,OAAOyW,SAAS,CAACnI,SAAS,CAAE,CAAA,CAAA;oBAChDlN,IAAK6vF,CAAAA,SAAS,CAACj7E,CAAC,IAAI,OAAOS,SAAS,CAACnI,SAAS,CAAE,CAAA,CAAA;AAClD,iBAAA;;AAGA,gBAAA,IAAK,IAAIlZ,EAAAA,GAAI,CAAGA,EAAAA,EAAAA,GAAI,GAAGA,EAAK,EAAA,CAAA;AAC1B,oBAAA,IAAM+7F,UAAa9C,GAAAA,KAAK,CAAC,CAAA,GAAIznF,IAAIxR,EAAE,CAAA,CAAA;oBACnC,IAAMg8F,UAAAA,GAAa/C,KAAK,CAAC,CAAIznF,GAAAA,CAAAA,GAAK,CAACxR,EAAAA,GAAI,CAAA,IAAK,CAAG,CAAA,CAAA;oBAE/C,IAAMi8F,UAAAA,GAAa/0F,IAAKoa,CAAAA,GAAG,CAACy6E,UAAAA,EAAYC,cAAc7C,aAAgBjyF,GAAAA,IAAAA,CAAKI,GAAG,CAACy0F,UAAYC,EAAAA,UAAAA,CAAAA,CAAAA;AAE3F,oBAAA,IAAI,CAACR,KAAAA,CAAMU,GAAG,CAACD,UAAa,CAAA,EAAA;AAC1B,wBAAA,IAAME,IAAc,GAAA;AAClBC,4BAAAA,SAAAA,EAAW,IAAIjiE,kBAAAA,EAAAA;4BACfkiE,cAAgB/7F,EAAAA,SAAAA;AAClB,yBAAA,CAAA;AAEA,wBAAA,IAAMg8F,UAAU,CAAIP,GAAAA,UAAAA,CAAAA;AACpB,wBAAA,IAAMQ,UAAU,CAAIP,GAAAA,UAAAA,CAAAA;AAEpBG,wBAAAA,IAAAA,CAAKC,SAAS,CAACj9F,GAAG,CAChB,IAAA,IAAQkiB,SAAS,CAACi7E,OAAQ,CAAA,GAAGj7E,SAAS,CAACk7E,OAAAA,CAAQ,CAC/C,EAAA,IAAA,IAAQl7E,SAAS,CAACi7E,OAAU,GAAA,CAAA,CAAE,GAAGj7E,SAAS,CAACk7E,UAAU,CAAE,CAAD,GACtD,IAAQl7E,IAAAA,SAAS,CAACi7E,UAAU,CAAE,CAAA,GAAGj7E,SAAS,CAACk7E,OAAAA,GAAU,EAAE,CAAD,CAAA,CAAA;wBAGxDf,KAAMr8F,CAAAA,GAAG,CAAC88F,UAAYE,EAAAA,IAAAA,CAAAA,CAAAA;AACxB,qBAAA;oBACA,IAAMA,KAAAA,GAAOX,KAAMz8F,CAAAA,GAAG,CAACk9F,UAAAA,CAAAA,CAAAA;oBAEvBjwF,IAAK8vF,CAAAA,aAAa,CAAC97F,EAAAA,CAAE,GAAGm8F,KAAAA,CAAAA;oBAExB,IAAMC,SAAAA,GAAYD,MAAKC,SAAS,CAAA;oBAChC,IAAMP,SAAAA,GAAY7vF,KAAK6vF,SAAS,CAAA;AAEhCO,oBAAAA,SAAAA,CAAUzxF,CAAC,IAAI,IAAOkxF,GAAAA,SAAAA,CAAUlxF,CAAC,CAAA;AACjCyxF,oBAAAA,SAAAA,CAAUxxF,CAAC,IAAI,IAAOixF,GAAAA,SAAAA,CAAUjxF,CAAC,CAAA;AACjCwxF,oBAAAA,SAAAA,CAAUx7E,CAAC,IAAI,IAAOi7E,GAAAA,SAAAA,CAAUj7E,CAAC,CAAA;AACnC,iBAAA;AACF,aAAA;AAEA,YAAA,IAAM47E,gBAAgBZ,SAAY,GAAA,CAAA,CAAA;AAClC,YAAA,IAAMa,kBAAkBD,aAAgBZ,GAAAA,SAAAA,CAAAA;AAExC,YAAA,IAAIc,QAAW,GAAA,CAAA,CAAA;YACf,IAAI,CAACC,cAAc,GAAG,CAAA,CAAA;AACtB,YAAA,IAAMC,QAAW3D,GAAAA,KAAAA,CAAMh4F,KAAK,CAAC,GAAG,CAAI26F,GAAAA,SAAAA,CAAAA,CAAAA;;AAGpC,YAAA,IAAK,IAAIpqF,EAAAA,GAAI,CAAGA,EAAAA,EAAAA,GAAIoqF,WAAWpqF,EAAK,EAAA,CAAA;;gBAElC,IAAMxF,KAAAA,GAAOyvF,KAAK,CAACjqF,EAAE,CAAA,CAAA;gBACrBxF,KAAK6vF,CAAAA,SAAS,CAAC5rB,WAAW,CAAC5uD,WAAW,CAAKm7E,IAAAA,gBAAgBhrF,EAAAA,CAAAA,CAAAA,CAAAA;;AAG3D,gBAAA,IAAMqrF,KAAKL,aAAgBhrF,GAAAA,EAAAA,CAAAA;AAE3B,gBAAA,IAAI6kB,KAAAA,KAAAA,CAAAA,EAAYymE,KAAAA,KAAAA,CAAAA,EAAYjL,OAAAA,KAAAA,CAAAA,CAAAA;;;;;;AAO5B,gBAAA,IAAK,IAAI7xF,EAAAA,GAAI,CAAGA,EAAAA,EAAAA,GAAI,GAAGA,EAAK,EAAA,CAAA;;oBAE1B,IAAM+8F,EAAAA,GAAKH,QAAQ,CAACF,QAAW,EAAA,CAAA,CAAA;;oBAG/B,OAAQ18F,EAAAA;wBACN,KAAK,CAAA;AAAG,4BAAA;AACN,gCAAA,IAAMg9F,KAAQhxF,GAAAA,KAAAA,CAAK8vF,aAAa,CAAC97F,KAAI,CAAE,CAAA,CAAA;gCACvC,IAAMi9F,KAAAA,GAAQjxF,MAAK8vF,aAAa,CAAC,CAAC97F,EAAAA,GAAI,CAAA,IAAK,CAAE,CAAA,CAAA;AAC7C88F,gCAAAA,EAAAA,GAAK,IAAI,CAACI,mBAAmB,CAAC77E,WAAW27E,KAAOP,EAAAA,eAAAA,CAAAA,CAAAA;AAChDpmE,gCAAAA,EAAAA,GAAK,IAAI,CAAC6mE,mBAAmB,CAAC77E,WAAW47E,KAAOR,EAAAA,eAAAA,CAAAA,CAAAA;gCAChD5K,IAAOx7D,GAAAA,EAAAA,CAAAA;AACP,gCAAA,MAAA;AACF,6BAAA;wBACA,KAAK,CAAA,CAAA;wBACL,KAAK,CAAA;AAAG,4BAAA;AACN,gCAAA,IAAM2mE,MAAQhxF,GAAAA,KAAAA,CAAK8vF,aAAa,CAAC97F,KAAI,CAAE,CAAA,CAAA;gCACvCq2B,EAAKymE,GAAAA,EAAAA,CAAAA;AACLA,gCAAAA,EAAAA,GAAK,IAAI,CAACI,mBAAmB,CAAC77E,WAAW27E,MAAOP,EAAAA,eAAAA,CAAAA,CAAAA;AAChD,gCAAA,MAAA;AACF,6BAAA;wBACA,KAAK,CAAA;AAAG,4BAAA;gCACNpmE,EAAKymE,GAAAA,EAAAA,CAAAA;gCACLA,EAAKjL,GAAAA,IAAAA,CAAAA;AACL,gCAAA,MAAA;AACF,6BAAA;AACF,qBAAA;AAEA,oBAAA,IAAMx9E,GAAM,GAAA,CAAA,IAAK,CAAA,GAAI7C,KAAIxR,EAAAA,CAAAA,CAAAA;oBACzBi5F,KAAK,CAAC5kF,IAAI,GAAG0oF,EAAAA,CAAAA;oBACb9D,KAAK,CAAC5kF,GAAM,GAAA,CAAA,CAAE,GAAGyoF,EAAAA,CAAAA;oBACjB7D,KAAK,CAAC5kF,GAAM,GAAA,CAAA,CAAE,GAAGwoF,EAAAA,CAAAA;oBACjB5D,KAAK,CAAC5kF,GAAM,GAAA,CAAA,CAAE,GAAGgiB,EAAAA,CAAAA;AACnB,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AAEA;;AAEC,MACD,aA5lBW6/D,CA4lBIsE,yBAiBd,GAjBD,SAAeA,yBAAAA,CACb/lD,OAAkC,EAClC2S,QAAsB,EACtB/yC,GAAW,EACXglF,UAAkB,EAAA;QAElB,IAAM/c,CAAAA,GAAIl1B,QAAQ,CAAC,CAAA,GAAI3S,OAAO,CAACpgC,GAAAA,CAAI,GAAG,CAAE,CAAA,CAAA;QAExC,IAAIioE,CAAAA,KAAM,CAAKA,IAAAA,CAAAA,KAAM,CAAG,EAAA;AACtB,YAAA,IAAMpjE,MAAS,GAAA,CAAA,GAAIu7B,OAAO,CAACpgC,GAAI,CAAA,CAAA;AAC/B,YAAA,IAAM8oF,cAAc,CAAK9D,IAAAA,aAAa,IAAI,CAACU,cAAc,CAAD,CAAA;AACxD3yC,YAAAA,QAAAA,CAASjoD,GAAG,CAACioD,QAAAA,CAAS0yC,QAAQ,CAAC5gF,MAAAA,EAAQA,SAAS,CAAIikF,CAAAA,EAAAA,WAAAA,CAAAA,CAAAA;AACpD/1C,YAAAA,QAAQ,CAAC+1C,WAAAA,GAAc,CAAE,CAAA,GACvB,GAAO/1C,IAAAA,QAAQ,CAACluC,MAAS,GAAA,CAAA,CAAE,GAAGkuC,QAAQ,CAAC,CAAI3S,GAAAA,OAAO,CAACpgC,GAAAA,GAAM,CAAE,CAAA,GAAG,CAAE,CAAA,GAAG+yC,QAAQ,CAAC,CAAA,GAAI3S,OAAO,CAACpgC,GAAM,GAAA,CAAA,CAAE,GAAG,CAAA,CAAE,GAAG,GAAE,CAAA,CAAA;AAE5GogC,YAAAA,OAAO,CAACpgC,GAAI,CAAA,GAAGglF,UAAa,GAAA,IAAI,CAACU,cAAc,EAAA,CAAA;AACjD,SAAA;AACF,KAAA,CAAA;AACA;;MA9mBW7D,aAinBIgH,CAAAA,mBAUd,GAVD,SAAeA,oBAAoB77E,SAAuB,EAAE86E,IAAW,EAAEjjF,MAAc,EAAA;QACrF,IAAIijF,IAAAA,CAAKE,cAAc,KAAK/7F,SAAW,EAAA;AACrC,YAAA,OAAO67F,KAAKE,cAAc,CAAA;SACrB,MAAA;YACLF,IAAKC,CAAAA,SAAS,CAACnsB,WAAW,CAAC5uD,SAAAA,EAAW,CAAKnI,IAAAA,MAASg9E,GArnB7CA,aAqnB2DyG,CAAAA,cAAc,CAAD,CAAA,CAAA;AAE/E,YAAA,IAAMv5F,KAAQ8V,GAAAA,MAAAA,GAASg9E,aAvnBhBA,CAunB8ByG,cAAc,EAAA,CAAA;AACnDR,YAAAA,IAAAA,CAAKE,cAAc,GAAGj5F,KAAAA,CAAAA;YACtB,OAAOA,KAAAA,CAAAA;AACT,SAAA;AACF,KAAA,CAAA;AAEA;;AAEC,MACD,aAAOqzF,CAAAA,cA0HN,GA1HD,SAAOA,cAAAA,CACL2G,UAAqB,EACrBv1F,KAAa,EACbC,MAAc,EACdU,KAAa,EACb6/E,kBAA2B,EAC3B0Q,aAAsB,EACtBC,mBAA4B,EAAA;AAE5B,QAAA,IAAMqE,YAAYx1F,KAAQ,GAAA,CAAA,CAAA;AAC1B,QAAA,IAAMy1F,aAAax1F,MAAS,GAAA,CAAA,CAAA;AAC5B,QAAA,IAAMy1F,YAAY/0F,KAAQ,GAAA,CAAA,CAAA;AAE1B,QAAA,IAAM+/E,gBAAmB,GAAA,CAAA,CAAA;QACzB,IAAMnhC,QAAAA,GAAW,IAAIvmD,YAAAA,CAAa,EAAK0nF,GAAAA,gBAAAA,CAAAA,CAAAA;;AAGtCnhC,QAAAA,QAAQ,CAAC,CAAA,CAAE,GAAG,CAACi2C,WAAaj2C,QAAQ,CAAC,CAAE,CAAA,GAAGk2C,UAAcl2C,EAAAA,QAAQ,CAAC,CAAA,CAAE,GAAG,CAACm2C,SAAAA,CAAAA;AACvEn2C,QAAAA,QAAQ,CAAC,CAAE,CAAA,GAAG,GAAKA,QAAQ,CAAC,EAAE,GAAG,CAAA,CAAA;AACjCA,QAAAA,QAAQ,CAAC,CAAA,CAAE,GAAGi2C,SAAAA,EAAaj2C,QAAQ,CAAC,CAAE,CAAA,GAAGk2C,UAAcl2C,EAAAA,QAAQ,CAAC,EAAA,CAAG,GAAG,CAACm2C,SAAAA,CAAAA;AACvEn2C,QAAAA,QAAQ,CAAC,EAAG,CAAA,GAAG,GAAKA,QAAQ,CAAC,GAAG,GAAG,CAAA,CAAA;AACnCA,QAAAA,QAAQ,CAAC,EAAA,CAAG,GAAGi2C,SAAAA,EAAaj2C,QAAQ,CAAC,EAAG,CAAA,GAAGk2C,UAAcl2C,EAAAA,QAAQ,CAAC,EAAA,CAAG,GAAGm2C,SAAAA,CAAAA;AACxEn2C,QAAAA,QAAQ,CAAC,EAAG,CAAA,GAAG,GAAKA,QAAQ,CAAC,GAAG,GAAG,CAAA,CAAA;AACnCA,QAAAA,QAAQ,CAAC,EAAA,CAAG,GAAG,CAACi2C,SAAaj2C,EAAAA,QAAQ,CAAC,EAAA,CAAG,GAAGk2C,UAAAA,EAAcl2C,QAAQ,CAAC,GAAG,GAAGm2C,SAAAA,CAAAA;AACzEn2C,QAAAA,QAAQ,CAAC,EAAG,CAAA,GAAG,GAAKA,QAAQ,CAAC,GAAG,GAAG,CAAA,CAAA;AACpC,QAAA,IAAK,IAAIhmD,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAI,GAAGA,CAAK,EAAA,CAAA;YAC1B,IAAIo8F,YAAAA,GAAejV,mBAAmBnnF,CAAI,GAAA,CAAA,CAAA;AACzCgmD,YAAAA,QAAQ,CAACo2C,YAAAA,EAAAA,CAAe,GAAG,CAAA,EAAKp2C,QAAQ,CAACo2C,YAAe,EAAA,CAAA,GAAG,CAAKp2C,EAAAA,QAAQ,CAACo2C,YAAAA,EAAAA,CAAe,GAAG,CAAA,CAAA;AAC9F,SAAA;;AAGCp2C,QAAAA,QAAQ,CAAC,EAAA,CAAG,GAAG,CAACi2C,WAAaj2C,QAAQ,CAAC,EAAG,CAAA,GAAG,CAACk2C,UAAcl2C,EAAAA,QAAQ,CAAC,EAAA,CAAG,GAAG,CAACm2C,SAAAA,CAAAA;AAC3En2C,QAAAA,QAAQ,CAAC,EAAG,CAAA,GAAG,GAAKA,QAAQ,CAAC,GAAG,GAAG,CAAA,CAAA;AACnCA,QAAAA,QAAQ,CAAC,EAAA,CAAG,GAAGi2C,SAAAA,EAAaj2C,QAAQ,CAAC,EAAA,CAAG,GAAG,CAACk2C,UAAcl2C,EAAAA,QAAQ,CAAC,EAAA,CAAG,GAAG,CAACm2C,SAAAA,CAAAA;AAC1En2C,QAAAA,QAAQ,CAAC,EAAG,CAAA,GAAG,GAAKA,QAAQ,CAAC,GAAG,GAAG,CAAA,CAAA;AACnCA,QAAAA,QAAQ,CAAC,EAAA,CAAG,GAAGi2C,SAAAA,EAAaj2C,QAAQ,CAAC,EAAG,CAAA,GAAG,CAACk2C,UAAAA,EAAcl2C,QAAQ,CAAC,GAAG,GAAGm2C,SAAAA,CAAAA;AACzEn2C,QAAAA,QAAQ,CAAC,EAAG,CAAA,GAAG,GAAKA,QAAQ,CAAC,GAAG,GAAG,CAAA,CAAA;AACnCA,QAAAA,QAAQ,CAAC,EAAA,CAAG,GAAG,CAACi2C,WAAaj2C,QAAQ,CAAC,EAAG,CAAA,GAAG,CAACk2C,UAAAA,EAAcl2C,QAAQ,CAAC,GAAG,GAAGm2C,SAAAA,CAAAA;AAC1En2C,QAAAA,QAAQ,CAAC,EAAG,CAAA,GAAG,GAAKA,QAAQ,CAAC,GAAG,GAAG,CAAA,CAAA;AACpC,QAAA,IAAK,IAAIhmD,EAAAA,GAAI,CAAGA,EAAAA,EAAAA,GAAI,GAAGA,EAAK,EAAA,CAAA;YAC1B,IAAIo8F,aAAAA,GAAejV,mBAAmBnnF,EAAI,GAAA,EAAA,CAAA;AACzCgmD,YAAAA,QAAQ,CAACo2C,aAAAA,EAAAA,CAAe,GAAG,CAAA,EAAKp2C,QAAQ,CAACo2C,aAAe,EAAA,CAAA,GAAG,CAAC,CAAA,EAAKp2C,QAAQ,CAACo2C,gBAAe,GAAG,CAAA,CAAA;AAC/F,SAAA;;AAGCp2C,QAAAA,QAAQ,CAAC,EAAA,CAAG,GAAG,CAACi2C,WAAaj2C,QAAQ,CAAC,EAAG,CAAA,GAAGk2C,UAAcl2C,EAAAA,QAAQ,CAAC,EAAA,CAAG,GAAG,CAACm2C,SAAAA,CAAAA;AAC1En2C,QAAAA,QAAQ,CAAC,EAAG,CAAA,GAAG,GAAKA,QAAQ,CAAC,GAAG,GAAG,CAAA,CAAA;AACnCA,QAAAA,QAAQ,CAAC,EAAA,CAAG,GAAG,CAACi2C,SAAaj2C,EAAAA,QAAQ,CAAC,EAAA,CAAG,GAAGk2C,UAAAA,EAAcl2C,QAAQ,CAAC,GAAG,GAAGm2C,SAAAA,CAAAA;AACzEn2C,QAAAA,QAAQ,CAAC,EAAG,CAAA,GAAG,GAAKA,QAAQ,CAAC,GAAG,GAAG,CAAA,CAAA;AACnCA,QAAAA,QAAQ,CAAC,EAAA,CAAG,GAAG,CAACi2C,WAAaj2C,QAAQ,CAAC,EAAG,CAAA,GAAG,CAACk2C,UAAAA,EAAcl2C,QAAQ,CAAC,GAAG,GAAGm2C,SAAAA,CAAAA;AAC1En2C,QAAAA,QAAQ,CAAC,EAAG,CAAA,GAAG,GAAKA,QAAQ,CAAC,GAAG,GAAG,CAAA,CAAA;AACnCA,QAAAA,QAAQ,CAAC,EAAA,CAAG,GAAG,CAACi2C,WAAaj2C,QAAQ,CAAC,EAAG,CAAA,GAAG,CAACk2C,UAAcl2C,EAAAA,QAAQ,CAAC,EAAA,CAAG,GAAG,CAACm2C,SAAAA,CAAAA;AAC3En2C,QAAAA,QAAQ,CAAC,EAAG,CAAA,GAAG,GAAKA,QAAQ,CAAC,GAAG,GAAG,CAAA,CAAA;AACpC,QAAA,IAAK,IAAIhmD,EAAAA,GAAI,CAAGA,EAAAA,EAAAA,GAAI,GAAGA,EAAK,EAAA,CAAA;YAC1B,IAAIo8F,aAAAA,GAAejV,mBAAmBnnF,EAAI,GAAA,EAAA,CAAA;AACzCgmD,YAAAA,QAAQ,CAACo2C,aAAAA,EAAAA,CAAe,GAAG,CAAC,CAAKp2C,EAAAA,QAAQ,CAACo2C,aAAAA,EAAAA,CAAe,GAAG,CAAA,EAAKp2C,QAAQ,CAACo2C,gBAAe,GAAG,CAAA,CAAA;AAC/F,SAAA;;AAGCp2C,QAAAA,QAAQ,CAAC,EAAA,CAAG,GAAGi2C,SAAAA,EAAaj2C,QAAQ,CAAC,EAAG,CAAA,GAAGk2C,UAAcl2C,EAAAA,QAAQ,CAAC,EAAA,CAAG,GAAG,CAACm2C,SAAAA,CAAAA;AACzEn2C,QAAAA,QAAQ,CAAC,GAAI,CAAA,GAAG,GAAKA,QAAQ,CAAC,IAAI,GAAG,CAAA,CAAA;AACrCA,QAAAA,QAAQ,CAAC,GAAA,CAAI,GAAGi2C,SAAAA,EAAaj2C,QAAQ,CAAC,GAAI,CAAA,GAAGk2C,UAAcl2C,EAAAA,QAAQ,CAAC,GAAA,CAAI,GAAGm2C,SAAAA,CAAAA;AAC3En2C,QAAAA,QAAQ,CAAC,GAAI,CAAA,GAAG,GAAKA,QAAQ,CAAC,IAAI,GAAG,CAAA,CAAA;AACrCA,QAAAA,QAAQ,CAAC,GAAA,CAAI,GAAGi2C,SAAAA,EAAaj2C,QAAQ,CAAC,GAAI,CAAA,GAAG,CAACk2C,UAAAA,EAAcl2C,QAAQ,CAAC,IAAI,GAAGm2C,SAAAA,CAAAA;AAC5En2C,QAAAA,QAAQ,CAAC,GAAI,CAAA,GAAG,GAAKA,QAAQ,CAAC,IAAI,GAAG,CAAA,CAAA;AACrCA,QAAAA,QAAQ,CAAC,GAAA,CAAI,GAAGi2C,SAAAA,EAAaj2C,QAAQ,CAAC,GAAA,CAAI,GAAG,CAACk2C,UAAcl2C,EAAAA,QAAQ,CAAC,GAAA,CAAI,GAAG,CAACm2C,SAAAA,CAAAA;AAC7En2C,QAAAA,QAAQ,CAAC,GAAI,CAAA,GAAG,GAAKA,QAAQ,CAAC,IAAI,GAAG,CAAA,CAAA;AACtC,QAAA,IAAK,IAAIhmD,EAAAA,GAAI,CAAGA,EAAAA,EAAAA,GAAI,GAAGA,EAAK,EAAA,CAAA;YAC1B,IAAIo8F,aAAAA,GAAejV,mBAAmBnnF,EAAI,GAAA,EAAA,CAAA;AACzCgmD,YAAAA,QAAQ,CAACo2C,aAAAA,EAAAA,CAAe,GAAG,CAAA,EAAKp2C,QAAQ,CAACo2C,aAAe,EAAA,CAAA,GAAG,CAAKp2C,EAAAA,QAAQ,CAACo2C,aAAAA,EAAAA,CAAe,GAAG,CAAA,CAAA;AAC9F,SAAA;;AAGCp2C,QAAAA,QAAQ,CAAC,GAAA,CAAI,GAAG,CAACi2C,SAAaj2C,EAAAA,QAAQ,CAAC,GAAA,CAAI,GAAGk2C,UAAAA,EAAcl2C,QAAQ,CAAC,IAAI,GAAGm2C,SAAAA,CAAAA;AAC5En2C,QAAAA,QAAQ,CAAC,GAAI,CAAA,GAAG,GAAKA,QAAQ,CAAC,IAAI,GAAG,CAAA,CAAA;AACrCA,QAAAA,QAAQ,CAAC,GAAA,CAAI,GAAGi2C,SAAAA,EAAaj2C,QAAQ,CAAC,GAAI,CAAA,GAAGk2C,UAAcl2C,EAAAA,QAAQ,CAAC,GAAA,CAAI,GAAGm2C,SAAAA,CAAAA;AAC3En2C,QAAAA,QAAQ,CAAC,GAAI,CAAA,GAAG,GAAKA,QAAQ,CAAC,IAAI,GAAG,CAAA,CAAA;AACrCA,QAAAA,QAAQ,CAAC,GAAA,CAAI,GAAGi2C,SAAAA,EAAaj2C,QAAQ,CAAC,GAAI,CAAA,GAAG,CAACk2C,UAAAA,EAAcl2C,QAAQ,CAAC,IAAI,GAAGm2C,SAAAA,CAAAA;AAC5En2C,QAAAA,QAAQ,CAAC,GAAI,CAAA,GAAG,GAAKA,QAAQ,CAAC,IAAI,GAAG,CAAA,CAAA;AACrCA,QAAAA,QAAQ,CAAC,GAAA,CAAI,GAAG,CAACi2C,WAAaj2C,QAAQ,CAAC,GAAI,CAAA,GAAG,CAACk2C,UAAAA,EAAcl2C,QAAQ,CAAC,IAAI,GAAGm2C,SAAAA,CAAAA;AAC7En2C,QAAAA,QAAQ,CAAC,GAAI,CAAA,GAAG,GAAKA,QAAQ,CAAC,IAAI,GAAG,CAAA,CAAA;AACtC,QAAA,IAAK,IAAIhmD,EAAAA,GAAI,CAAGA,EAAAA,EAAAA,GAAI,GAAGA,EAAK,EAAA,CAAA;YAC1B,IAAIo8F,aAAAA,GAAejV,mBAAmBnnF,EAAI,GAAA,GAAA,CAAA;AACzCgmD,YAAAA,QAAQ,CAACo2C,aAAAA,EAAAA,CAAe,GAAG,CAAA,EAAKp2C,QAAQ,CAACo2C,aAAe,EAAA,CAAA,GAAG,CAAKp2C,EAAAA,QAAQ,CAACo2C,aAAAA,EAAAA,CAAe,GAAG,CAAA,CAAA;AAC9F,SAAA;;AAGCp2C,QAAAA,QAAQ,CAAC,GAAA,CAAI,GAAG,CAACi2C,WAAaj2C,QAAQ,CAAC,GAAI,CAAA,GAAGk2C,UAAcl2C,EAAAA,QAAQ,CAAC,GAAA,CAAI,GAAG,CAACm2C,SAAAA,CAAAA;AAC7En2C,QAAAA,QAAQ,CAAC,GAAI,CAAA,GAAG,GAAKA,QAAQ,CAAC,IAAI,GAAG,CAAA,CAAA;AACrCA,QAAAA,QAAQ,CAAC,GAAA,CAAI,GAAGi2C,SAAAA,EAAaj2C,QAAQ,CAAC,GAAI,CAAA,GAAGk2C,UAAcl2C,EAAAA,QAAQ,CAAC,GAAA,CAAI,GAAG,CAACm2C,SAAAA,CAAAA;AAC5En2C,QAAAA,QAAQ,CAAC,GAAI,CAAA,GAAG,GAAKA,QAAQ,CAAC,IAAI,GAAG,CAAA,CAAA;AACrCA,QAAAA,QAAQ,CAAC,GAAA,CAAI,GAAGi2C,SAAAA,EAAaj2C,QAAQ,CAAC,GAAA,CAAI,GAAG,CAACk2C,UAAcl2C,EAAAA,QAAQ,CAAC,GAAA,CAAI,GAAG,CAACm2C,SAAAA,CAAAA;AAC7En2C,QAAAA,QAAQ,CAAC,GAAI,CAAA,GAAG,GAAKA,QAAQ,CAAC,IAAI,GAAG,CAAA,CAAA;AACrCA,QAAAA,QAAQ,CAAC,GAAA,CAAI,GAAG,CAACi2C,WAAaj2C,QAAQ,CAAC,GAAI,CAAA,GAAG,CAACk2C,UAAcl2C,EAAAA,QAAQ,CAAC,GAAA,CAAI,GAAG,CAACm2C,SAAAA,CAAAA;AAC9En2C,QAAAA,QAAQ,CAAC,GAAI,CAAA,GAAG,GAAKA,QAAQ,CAAC,IAAI,GAAG,CAAA,CAAA;AACtC,QAAA,IAAK,IAAIhmD,EAAAA,GAAI,CAAGA,EAAAA,EAAAA,GAAI,GAAGA,EAAK,EAAA,CAAA;YAC1B,IAAIo8F,aAAAA,GAAejV,mBAAmBnnF,EAAI,GAAA,GAAA,CAAA;AACzCgmD,YAAAA,QAAQ,CAACo2C,aAAAA,EAAAA,CAAe,GAAG,CAAA,EAAKp2C,QAAQ,CAACo2C,aAAe,EAAA,CAAA,GAAG,CAAKp2C,EAAAA,QAAQ,CAACo2C,aAAAA,EAAAA,CAAe,GAAG,CAAC,CAAA,CAAA;AAC/F,SAAA;QAEA,IAAM/oD,OAAAA,GAAU,IAAIj0C,WAAY,CAAA,EAAA,CAAA,CAAA;;;AAIhCi0C,QAAAA,OAAO,CAAC,CAAA,CAAE,GAAG,CAAA,EAAGA,OAAO,CAAC,CAAE,CAAA,GAAG,CAAGA,EAAAA,OAAO,CAAC,CAAA,CAAE,GAAG,CAAA,EAAGA,OAAO,CAAC,CAAE,CAAA,GAAG,CAAGA,EAAAA,OAAO,CAAC,CAAA,CAAE,GAAG,CAAA,EAAGA,OAAO,CAAC,CAAE,CAAA,GAAG;AAE7FA,QAAAA,OAAO,CAAC,CAAA,CAAE,GAAG,CAAA,EAAGA,OAAO,CAAC,CAAE,CAAA,GAAG,CAAGA,EAAAA,OAAO,CAAC,CAAA,CAAE,GAAG,CAAA,EAAGA,OAAO,CAAC,CAAE,CAAA,GAAG,CAAGA,EAAAA,OAAO,CAAC,EAAA,CAAG,GAAG,CAAA,EAAGA,OAAO,CAAC,EAAG,CAAA,GAAG;AAE/FA,QAAAA,OAAO,CAAC,EAAA,CAAG,GAAG,CAAA,EAAGA,OAAO,CAAC,EAAG,CAAA,GAAG,EAAIA,EAAAA,OAAO,CAAC,EAAA,CAAG,GAAG,CAAA,EAAGA,OAAO,CAAC,EAAG,CAAA,GAAG,EAAIA,EAAAA,OAAO,CAAC,EAAA,CAAG,GAAG,CAAA,EAAGA,OAAO,CAAC,EAAG,CAAA,GAAG;AAErGA,QAAAA,OAAO,CAAC,EAAA,CAAG,GAAG,EAAA,EAAIA,OAAO,CAAC,EAAG,CAAA,GAAG,EAAIA,EAAAA,OAAO,CAAC,EAAA,CAAG,GAAG,EAAA,EAAIA,OAAO,CAAC,EAAG,CAAA,GAAG,EAAIA,EAAAA,OAAO,CAAC,EAAA,CAAG,GAAG,EAAA,EAAIA,OAAO,CAAC,EAAG,CAAA,GAAG;AAExGA,QAAAA,OAAO,CAAC,EAAA,CAAG,GAAG,EAAA,EAAIA,OAAO,CAAC,EAAG,CAAA,GAAG,EAAIA,EAAAA,OAAO,CAAC,EAAA,CAAG,GAAG,EAAA,EAAIA,OAAO,CAAC,EAAG,CAAA,GAAG,EAAIA,EAAAA,OAAO,CAAC,EAAA,CAAG,GAAG,EAAA,EAAIA,OAAO,CAAC,EAAG,CAAA,GAAG;QAExGA,OAAO,CAAC,EAAG,CAAA,GAAG,EAAIA,EAAAA,OAAO,CAAC,EAAA,CAAG,GAAG,EAAA,EAAIA,OAAO,CAAC,EAAG,CAAA,GAAG,EAAIA,EAAAA,OAAO,CAAC,EAAA,CAAG,GAAG,EAAA,EAAIA,OAAO,CAAC,EAAG,CAAA,GAAG,EAAIA,EAAAA,OAAO,CAAC,EAAA,CAAG,GAAG,EAAA,CAAA;AAExG,QAAA,IAAI,CAACskD,aAAe,EAAA;YAClB,IAAQz1C,SAAW85C,UAAX95C,CAAAA,MAAAA,CAAAA;YACRA,MAAOhiC,CAAAA,GAAG,CAACniB,GAAG,CAAC,CAACk+F,SAAW,EAAA,CAACC,YAAY,CAACC,SAAAA,CAAAA,CAAAA;AACzCj6C,YAAAA,MAAAA,CAAOh8C,GAAG,CAACnI,GAAG,CAACk+F,WAAWC,UAAYC,EAAAA,SAAAA,CAAAA,CAAAA;AACxC,SAAA;AAxvBSrH,QAAAA,aAAAA,CAyvBKuE,WAAW,CAAC2C,UAAAA,EAAYh2C,QAAU3S,EAAAA,OAAAA,EAAS4zC,oBAAoB0Q,aAAeC,EAAAA,mBAAAA,CAAAA,CAAAA;AAC9F,KAAA,CAAA;AAEA;;MA5vBW9C,cA+vBJS,aAwEN,GAxED,SAAOA,aACL8G,CAAAA,SAAoB,EACpB51F,KAAa,EACbC,MAAc,EACd8uF,kBAA0B,EAC1BC,gBAAwB,EACxBxO,kBAA2B,EAC3B0Q,aAAsB,EACtBC,mBAA4B,EAAA;AAE5BpC,QAAAA,kBAAAA,GAAqB1vF,KAAKI,GAAG,CAAC,CAAGJ,EAAAA,IAAAA,CAAKC,KAAK,CAACyvF,kBAAAA,CAAAA,CAAAA,CAAAA;AAC5CC,QAAAA,gBAAAA,GAAmB3vF,KAAKI,GAAG,CAAC,CAAGJ,EAAAA,IAAAA,CAAKC,KAAK,CAAC0vF,gBAAAA,CAAAA,CAAAA,CAAAA;AAE1C,QAAA,IAAM6G,kBAAkB9G,kBAAqB,GAAA,CAAA,CAAA;AAC7C,QAAA,IAAM+G,gBAAgB9G,gBAAmB,GAAA,CAAA,CAAA;AACzC,QAAA,IAAMwG,YAAYx1F,KAAQ,GAAA,CAAA,CAAA;AAC1B,QAAA,IAAMy1F,aAAax1F,MAAS,GAAA,CAAA,CAAA;AAC5B,QAAA,IAAM81F,YAAY/1F,KAAQ+uF,GAAAA,kBAAAA,CAAAA;AAC1B,QAAA,IAAMiH,aAAa/1F,MAAS+uF,GAAAA,gBAAAA,CAAAA;AAC5B,QAAA,IAAMhtC,cAAc6zC,eAAkBC,GAAAA,aAAAA,CAAAA;AACtC,QAAA,IAAMjD,iBAAiB7D,gBAAmBD,GAAAA,kBAAAA,CAAAA;QAC1C,IAAMniD,OAAAA,GAAUyhD,aAAcoD,CAAAA,gBAAgB,CAACmE,SAAU97F,CAAAA,MAAM,EAAEkoD,WAAAA,EAAa6wC,cAAiB,GAAA,CAAA,CAAA,CAAA;AAC/F,QAAA,IAAMoD,4BAA4B,GAAMJ,GAAAA,eAAAA,CAAAA;AACxC,QAAA,IAAMK,+BAA+B,GAAMnH,GAAAA,kBAAAA,CAAAA;AAC3C,QAAA,IAAMoH,6BAA6B,GAAMnH,GAAAA,gBAAAA,CAAAA;AAEzC,QAAA,IAAMtO,gBAAmB,GAAA,CAAA,CAAA;QACzB,IAAMnhC,QAAAA,GAAW,IAAIvmD,YAAAA,CAAagpD,WAAc0+B,GAAAA,gBAAAA,CAAAA,CAAAA;AAEhD,QAAA,IAAK,IAAInnF,CAAI,GAAA,CAAA,EAAGA,CAAIyoD,GAAAA,WAAAA,EAAa,EAAEzoD,CAAG,CAAA;AACpC,YAAA,IAAMuJ,IAAIvJ,CAAIs8F,GAAAA,eAAAA,CAAAA;YACd,IAAM98E,CAAAA,GAAI,CAACxf,GAAI08F,yBAA6B,GAAA,CAAA,CAAA;AAE5C,YAAA,IAAI5kF,SAAS9X,CAAImnF,GAAAA,gBAAAA,CAAAA;;AAEjBnhC,YAAAA,QAAQ,CAACluC,MAAAA,EAAAA,CAAS,GAAGvO,CAAAA,GAAIizF,SAAYP,GAAAA,SAAAA,CAAAA;YACrCj2C,QAAQ,CAACluC,SAAS,GAAG,CAAA,CAAA;AACrBkuC,YAAAA,QAAQ,CAACluC,MAAAA,EAAAA,CAAS,GAAG0H,CAAAA,GAAIi9E,UAAaP,GAAAA,UAAAA,CAAAA;;YAEtCl2C,QAAQ,CAACluC,SAAS,GAAG,CAAA,CAAA;YACrBkuC,QAAQ,CAACluC,SAAS,GAAG,CAAA,CAAA;YACrBkuC,QAAQ,CAACluC,SAAS,GAAG,CAAA,CAAA;;YAErBkuC,QAAQ,CAACluC,MAAS,EAAA,CAAA,GAAGvO,CAAIozF,GAAAA,4BAAAA,CAAAA;YACzB32C,QAAQ,CAACluC,MAAS,EAAA,CAAA,GAAG0H,CAAIo9E,GAAAA,0BAAAA,CAAAA;AAC3B,SAAA;AAEA,QAAA,IAAI9kF,OAAS,GAAA,CAAA,CAAA;AACb,QAAA,IAAK,IAAI9X,EAAI,GAAA,CAAA,EAAGA,EAAIs5F,GAAAA,cAAAA,EAAgB,EAAEt5F,EAAG,CAAA;AACvC,YAAA,IAAMuJ,KAAIvJ,EAAIw1F,GAAAA,kBAAAA,CAAAA;YACd,IAAMhsF,CAAAA,GAAI,EAACxJ,GAAI28F,4BAAgC,GAAA,CAAA,CAAA;YAE/C,IAAMriF,CAAAA,GAAI9Q,IAAI8yF,eAAkB/yF,GAAAA,EAAAA,CAAAA;AAChC,YAAA,IAAMioB,IAAIlX,CAAI,GAAA,CAAA,CAAA;AACd,YAAA,IAAM4/E,IAAI5/E,CAAIgiF,GAAAA,eAAAA,CAAAA;AACd,YAAA,IAAMnC,IAAID,CAAI,GAAA,CAAA,CAAA;YAEd7mD,OAAO,CAACv7B,UAAS,GAAGwC,CAAAA,CAAAA;YACpB+4B,OAAO,CAACv7B,UAAS,GAAGoiF,CAAAA,CAAAA;YACpB7mD,OAAO,CAACv7B,UAAS,GAAG0Z,CAAAA,CAAAA;YACpB6hB,OAAO,CAACv7B,UAAS,GAAGoiF,CAAAA,CAAAA;YACpB7mD,OAAO,CAACv7B,UAAS,GAAGqiF,CAAAA,CAAAA;YACpB9mD,OAAO,CAACv7B,UAAS,GAAG0Z,CAAAA,CAAAA;AACtB,SAAA;AAEA,QAAA,IAAI,CAACmmE,aAAe,EAAA;YAClB,IAAQz1C,SAAWm6C,SAAXn6C,CAAAA,MAAAA,CAAAA;AACRA,YAAAA,MAAAA,CAAOhiC,GAAG,CAACniB,GAAG,CAAC,CAACk+F,SAAAA,EAAW,GAAG,CAACC,UAAAA,CAAAA,CAAAA;AAC/Bh6C,YAAAA,MAAAA,CAAOh8C,GAAG,CAACnI,GAAG,CAACk+F,WAAW,CAAGC,EAAAA,UAAAA,CAAAA,CAAAA;AAC/B,SAAA;AAp0BSpH,QAAAA,aAAAA,CAs0BKuE,WAAW,CAACgD,SAAAA,EAAWr2C,QAAU3S,EAAAA,OAAAA,EAAS4zC,oBAAoB0Q,aAAeC,EAAAA,mBAAAA,CAAAA,CAAAA;AAC7F,KAAA,CAAA;IAv0BW9C,aAy0BJa,CAAAA,gBAmLN,GAnLD,SAAOA,gBAAAA,CACLkH,YAAuB,EACvBjH,SAAuB,EACvBC,YAA0B,EAC1BnvF,MAAkB,EAClBovF,cAA2B,EAC3BC,cAA0B,EAC1B9O,kBAA2B,EAC3B0Q,aAAsB,EACtBC,mBAA4B,EAAA;AAP5BhC,QAAAA,IAAAA,sBAAAA,SAAoB,GAAA,GAAA,CAAA;AACpBC,QAAAA,IAAAA,yBAAAA,YAAuB,GAAA,GAAA,CAAA;AACvBnvF,QAAAA,IAAAA,mBAAAA,MAAiB,GAAA,CAAA,CAAA;AACjBovF,QAAAA,IAAAA,2BAAAA,cAAyB,GAAA,EAAA,CAAA;AACzBC,QAAAA,IAAAA,2BAAAA,cAAyB,GAAA,CAAA,CAAA;QAKzBD,cAAiBhwF,GAAAA,IAAAA,CAAKC,KAAK,CAAC+vF,cAAAA,CAAAA,CAAAA;QAC5BC,cAAiBjwF,GAAAA,IAAAA,CAAKC,KAAK,CAACgwF,cAAAA,CAAAA,CAAAA;AAE5B,QAAA,IAAM+G,cAAchH,cAAiB,GAAA,CAAA,CAAA;AACrC,QAAA,IAAMyG,gBAAgBxG,cAAiB,GAAA,CAAA,CAAA;AACvC,QAAA,IAAMmG,aAAax1F,MAAS,GAAA,GAAA,CAAA;AAC5B,QAAA,IAAMq2F,aAAar2F,MAASqvF,GAAAA,cAAAA,CAAAA;AAC5B,QAAA,IAAMiH,mBAAmBF,WAAcP,GAAAA,aAAAA,CAAAA;AACvC,QAAA,IAAMU,sBAAsBnH,cAAiBC,GAAAA,cAAAA,CAAAA;AAC7C,QAAA,IAAMmH,mBAAmBpH,cAAiB,GAAA,CAAA,CAAA;QAC1C,IAAMqH,gBAAAA,GAAmBH,mBAAmB,CAAIE,GAAAA,gBAAAA,CAAAA;QAChD,IAAM7pD,OAAAA,GAAUyhD,aA/1BPA,CA+1BqBoD,gBAAgB,CAC5C2E,YAAat8F,CAAAA,MAAM,EACnB48F,gBAAAA,EACAF,mBAAsB,GAAA,CAAA,GAAIC,gBAAmB,GAAA,CAAA,CAAA,CAAA;AAE/C,QAAA,IAAME,wBAAwB,GAAMN,GAAAA,WAAAA,CAAAA;AACpC,QAAA,IAAMO,2BAA2B,GAAMvH,GAAAA,cAAAA,CAAAA;AACvC,QAAA,IAAMwH,2BAA2B,GAAMvH,GAAAA,cAAAA,CAAAA;AAEvC,QAAA,IAAM5O,gBAAmB,GAAA,CAAA,CAAA;QACzB,IAAMnhC,QAAAA,GAAW,IAAIvmD,YAAAA,CAAa09F,gBAAmBhW,GAAAA,gBAAAA,CAAAA,CAAAA;AAErD,QAAA,IAAIoW,aAAgB,GAAA,CAAA,CAAA;;QAGpB,IAAMC,UAAAA,GAAa13F,KAAKwyF,EAAE,CAAA;QAC1B,IAAMiB,UAAAA,GAAazzF,IAAKwyF,CAAAA,EAAE,GAAG,CAAA,CAAA;AAC7B,QAAA,IAAMmF,aAAa5H,YAAeD,GAAAA,SAAAA,CAAAA;AAClC,QAAA,IAAM8H,QAAQD,UAAa/2F,GAAAA,MAAAA,CAAAA;AAC3B,QAAA,IAAMi3F,cAAcF,UAAa1H,GAAAA,cAAAA,CAAAA;AAEjC,QAAA,IAAK,IAAI/1F,CAAI,GAAA,CAAA,EAAGA,CAAIg9F,GAAAA,gBAAAA,EAAkB,EAAEh9F,CAAG,CAAA;AACzC,YAAA,IAAMuJ,IAAIvJ,CAAI88F,GAAAA,WAAAA,CAAAA;YACd,IAAMtzF,CAAAA,GAAI,CAACxJ,GAAIo9F,qBAAyB,GAAA,CAAA,CAAA;AACxC,YAAA,IAAMzD,IAAIpwF,CAAI8zF,GAAAA,wBAAAA,CAAAA;AACd,YAAA,IAAMniB,IAAI1xE,CAAI8zF,GAAAA,wBAAAA,CAAAA;YACd,IAAMM,KAAAA,GAAQJ,aAAa7D,CAAIJ,GAAAA,UAAAA,CAAAA;YAC/B,IAAMO,QAAAA,GAAWh0F,IAAK0iB,CAAAA,GAAG,CAACo1E,KAAAA,CAAAA,CAAAA;YAC1B,IAAMC,QAAAA,GAAW/3F,IAAK2iB,CAAAA,GAAG,CAACm1E,KAAAA,CAAAA,CAAAA;YAC1B,IAAMrgC,MAAAA,GAASs4B,eAAersF,CAAIm0F,GAAAA,WAAAA,CAAAA;AAElC,YAAA,IAAI5D,OAAOx8B,MAASu8B,GAAAA,QAAAA,CAAAA;YACpB,IAAIE,IAAAA,GAAOxwF,IAAIuzF,UAAab,GAAAA,UAAAA,CAAAA;AAC5B,YAAA,IAAIjC,OAAO18B,MAASsgC,GAAAA,QAAAA,CAAAA;AAEpB,YAAA,IAAI/lF,SAAS9X,CAAImnF,GAAAA,gBAAAA,CAAAA;;YAEjBnhC,QAAQ,CAACluC,SAAS,GAAGiiF,IAAAA,CAAAA;YACrB/zC,QAAQ,CAACluC,SAAS,GAAGkiF,IAAAA,CAAAA;YACrBh0C,QAAQ,CAACluC,SAAS,GAAGmiF,IAAAA,CAAAA;;YAErBj0C,QAAQ,CAACluC,SAAS,GAAGgiF,QAAAA,CAAAA;YACrB9zC,QAAQ,CAACluC,SAAS,GAAG4lF,KAAAA,CAAAA;YACrB13C,QAAQ,CAACluC,SAAS,GAAG+lF,QAAAA,CAAAA;;YAErB73C,QAAQ,CAACluC,SAAS,GAAG6hF,CAAAA,CAAAA;YACrB3zC,QAAQ,CAACluC,MAAS,EAAA,CAAA,GAAG,CAAIojE,GAAAA,CAAAA,CAAAA;AAC3B,SAAA;AAEA,QAAA,IAAK,IAAIl7E,EAAI,GAAA,CAAA,EAAGA,EAAIi9F,GAAAA,mBAAAA,EAAqB,EAAEj9F,EAAG,CAAA;AAC5C,YAAA,IAAMuJ,KAAIvJ,EAAI81F,GAAAA,cAAAA,CAAAA;YACd,IAAMtsF,EAAAA,GAAI,EAACxJ,GAAIq9F,wBAA4B,GAAA,CAAA,CAAA;YAE3C,IAAM/iF,CAAAA,GAAI9Q,KAAIszF,WAAcvzF,GAAAA,EAAAA,CAAAA;AAC5B,YAAA,IAAMioB,IAAIlX,CAAI,GAAA,CAAA,CAAA;AACd,YAAA,IAAM4/E,IAAI5/E,CAAIwiF,GAAAA,WAAAA,CAAAA;AACd,YAAA,IAAM3C,IAAID,CAAI,GAAA,CAAA,CAAA;YAEd7mD,OAAO,CAACkqD,gBAAgB,GAAG/rE,CAAAA,CAAAA;YAC3B6hB,OAAO,CAACkqD,gBAAgB,GAAGrD,CAAAA,CAAAA;YAC3B7mD,OAAO,CAACkqD,gBAAgB,GAAGjjF,CAAAA,CAAAA;YAC3B+4B,OAAO,CAACkqD,gBAAgB,GAAG/rE,CAAAA,CAAAA;YAC3B6hB,OAAO,CAACkqD,gBAAgB,GAAGpD,CAAAA,CAAAA;YAC3B9mD,OAAO,CAACkqD,gBAAgB,GAAGrD,CAAAA,CAAAA;AAC7B,SAAA;AAEA,QAAA,IAAIpiF,UAASklF,gBAAmB7V,GAAAA,gBAAAA,CAAAA;;QAEhCnhC,QAAQ,CAACluC,UAAS,GAAG,CAAA,CAAA;QACrBkuC,QAAQ,CAACluC,OAAS,EAAA,CAAA,GAAG,CAACokF,UAAAA,CAAAA;QACtBl2C,QAAQ,CAACluC,UAAS,GAAG,CAAA,CAAA;;QAErBkuC,QAAQ,CAACluC,UAAS,GAAG,CAAA,CAAA;QACrBkuC,QAAQ,CAACluC,OAAS,EAAA,CAAA,GAAG,CAAC,CAAA,CAAA;QACtBkuC,QAAQ,CAACluC,UAAS,GAAG,CAAA,CAAA;;QAErBkuC,QAAQ,CAACluC,UAAS,GAAG,GAAA,CAAA;QACrBkuC,QAAQ,CAACluC,UAAS,GAAG,GAAA,CAAA;;QAGrBkuC,QAAQ,CAACluC,UAAS,GAAG,CAAA,CAAA;QACrBkuC,QAAQ,CAACluC,UAAS,GAAGokF,UAAAA,CAAAA;QACrBl2C,QAAQ,CAACluC,UAAS,GAAG,CAAA,CAAA;;QAErBkuC,QAAQ,CAACluC,UAAS,GAAG,CAAA,CAAA;QACrBkuC,QAAQ,CAACluC,UAAS,GAAG,CAAA,CAAA;QACrBkuC,QAAQ,CAACluC,UAAS,GAAG,CAAA,CAAA;;QAErBkuC,QAAQ,CAACluC,UAAS,GAAG,GAAA,CAAA;QACrBkuC,QAAQ,CAACluC,UAAS,GAAG,GAAA,CAAA;;AAGrBA,QAAAA,OAAAA,GAAS,CAACklF,gBAAmB,GAAA,CAAA,IAAK7V,gBAAAA,CAAAA;AAElC,QAAA,IAAM2W,qBAAwB,GAAA,GAAA,IAAOlI,SAAAA,GAAY,CAAA,CAAA,CAAA;AACjD,QAAA,IAAMmI,wBAA2B,GAAA,GAAA,IAAOlI,YAAAA,GAAe,CAAA,CAAA,CAAA;AACvD,QAAA,IAAMmI,iBAAiBlB,WAAc/G,GAAAA,cAAAA,CAAAA;AACrC,QAAA,IAAK,IAAI/1F,EAAI,GAAA,CAAA,EAAGA,EAAI81F,GAAAA,cAAAA,EAAgB,EAAE91F,EAAG,CAAA;AACvC,YAAA,IAAMi+F,qBAAqBj+F,EAAImnF,GAAAA,gBAAAA,CAAAA;YAC/B,IAAI+W,OAAAA,GAAUl4C,QAAQ,CAACi4C,kBAAmB,CAAA,CAAA;AAC1C,YAAA,IAAIE,OAAUn4C,GAAAA,QAAQ,CAACi4C,kBAAAA,GAAqB,CAAE,CAAA,CAAA;;YAG9Cj4C,QAAQ,CAACluC,UAAS,GAAGomF,OAAAA,CAAAA;YACrBl4C,QAAQ,CAACluC,OAAS,EAAA,CAAA,GAAG,CAACokF,UAAAA,CAAAA;YACtBl2C,QAAQ,CAACluC,UAAS,GAAGqmF,OAAAA,CAAAA;;YAErBn4C,QAAQ,CAACluC,UAAS,GAAG,CAAA,CAAA;YACrBkuC,QAAQ,CAACluC,OAAS,EAAA,CAAA,GAAG,CAAC,CAAA,CAAA;YACtBkuC,QAAQ,CAACluC,UAAS,GAAG,CAAA,CAAA;;AAErBkuC,YAAAA,QAAQ,CAACluC,OAAAA,EAAAA,CAAS,GAAGomF,OAAAA,GAAUH,wBAA2B,GAAA,GAAA,CAAA;AAC1D/3C,YAAAA,QAAQ,CAACluC,OAAAA,EAAAA,CAAS,GAAG,GAAA,GAAMqmF,OAAUJ,GAAAA,wBAAAA,CAAAA;AAErC,YAAA,IAAMK,eAAkB,GAACp+F,CAAAA,EAAAA,GAAIg+F,cAAa,IAAK7W,gBAAAA,CAAAA;YAC/C+W,OAAUl4C,GAAAA,QAAQ,CAACo4C,eAAgB,CAAA,CAAA;YACnCD,OAAUn4C,GAAAA,QAAQ,CAACo4C,eAAAA,GAAkB,CAAE,CAAA,CAAA;;YAGvCp4C,QAAQ,CAACluC,UAAS,GAAGomF,OAAAA,CAAAA;YACrBl4C,QAAQ,CAACluC,UAAS,GAAGokF,UAAAA,CAAAA;YACrBl2C,QAAQ,CAACluC,UAAS,GAAGqmF,OAAAA,CAAAA;;YAErBn4C,QAAQ,CAACluC,UAAS,GAAG,CAAA,CAAA;YACrBkuC,QAAQ,CAACluC,UAAS,GAAG,CAAA,CAAA;YACrBkuC,QAAQ,CAACluC,UAAS,GAAG,CAAA,CAAA;;AAErBkuC,YAAAA,QAAQ,CAACluC,OAAAA,EAAAA,CAAS,GAAGomF,OAAAA,GAAUJ,qBAAwB,GAAA,GAAA,CAAA;AACvD93C,YAAAA,QAAQ,CAACluC,OAAAA,EAAAA,CAAS,GAAG,GAAA,GAAMqmF,OAAUL,GAAAA,qBAAAA,CAAAA;AACvC,SAAA;;AAGA,QAAA,IAAMO,cAAcrB,gBAAmB,GAAA,CAAA,CAAA;AACvC,QAAA,IAAMsB,oBAAoBtB,gBAAmB,GAAA,CAAA,CAAA;AAC7C,QAAA,IAAMuB,iBAAiBD,iBAAoB,GAAA,CAAA,CAAA;AAC3C,QAAA,IAAK,IAAIt+F,EAAI,GAAA,CAAA,EAAGA,EAAI81F,GAAAA,cAAAA,EAAgB,EAAE91F,EAAG,CAAA;AACvC,YAAA,IAAMw+F,cAAcx+F,EAAI,GAAA,CAAA,CAAA;AACxB,YAAA,IAAMy+F,YAAez+F,GAAAA,EAAAA,KAAM81F,cAAiB,GAAA,CAAA,GAAI,IAAI0I,WAAc,GAAA,CAAA,CAAA;;YAGlEnrD,OAAO,CAACkqD,gBAAgB,GAAGP,gBAAAA,CAAAA;YAC3B3pD,OAAO,CAACkqD,aAAgB,EAAA,CAAA,GAAGe,iBAAoBG,GAAAA,YAAAA,CAAAA;YAC/CprD,OAAO,CAACkqD,aAAgB,EAAA,CAAA,GAAGe,iBAAoBE,GAAAA,WAAAA,CAAAA;;YAG/CnrD,OAAO,CAACkqD,gBAAgB,GAAGc,WAAAA,CAAAA;YAC3BhrD,OAAO,CAACkqD,aAAgB,EAAA,CAAA,GAAGgB,cAAiBC,GAAAA,WAAAA,CAAAA;YAC5CnrD,OAAO,CAACkqD,aAAgB,EAAA,CAAA,GAAGgB,cAAiBE,GAAAA,YAAAA,CAAAA;AAC9C,SAAA;AAEA,QAAA,IAAI,CAAC9G,aAAe,EAAA;YAClB,IAAQz1C,SAAW26C,YAAX36C,CAAAA,MAAAA,CAAAA;AACR,YAAA,IAAMw8C,SAAY54F,GAAAA,IAAAA,CAAKI,GAAG,CAAC0vF,SAAWC,EAAAA,YAAAA,CAAAA,CAAAA;YACtC3zC,MAAOhiC,CAAAA,GAAG,CAACniB,GAAG,CAAC,CAAC2gG,SAAW,EAAA,CAACxC,YAAY,CAACwC,SAAAA,CAAAA,CAAAA;AACzCx8C,YAAAA,MAAAA,CAAOh8C,GAAG,CAACnI,GAAG,CAAC2gG,WAAWxC,UAAYwC,EAAAA,SAAAA,CAAAA,CAAAA;AACxC,SAAA;AA1/BS5J,QAAAA,aAAAA,CA2/BKuE,WAAW,CAACwD,YAAAA,EAAc72C,QAAU3S,EAAAA,OAAAA,EAAS4zC,oBAAoB0Q,aAAeC,EAAAA,mBAAAA,CAAAA,CAAAA;AAChG,KAAA,CAAA;AAEA;;MA9/BW9C,cAigCJmB,aAmFN,GAnFD,SAAOA,aACL0I,CAAAA,SAAoB,EACpBphC,MAAc,EACd24B,UAAkB,EAClBJ,cAAsB,EACtBK,eAAuB,EACvBC,GAAW,EACXnP,kBAA2B,EAC3B0Q,aAAsB,EACtBC,mBAA4B,EAAA;QAE5B9B,cAAiBhwF,GAAAA,IAAAA,CAAKC,KAAK,CAAC+vF,cAAAA,CAAAA,CAAAA;QAC5BK,eAAkBrwF,GAAAA,IAAAA,CAAKC,KAAK,CAACowF,eAAAA,CAAAA,CAAAA;QAE7B,IAAM1tC,WAAAA,GAAc,CAACqtC,cAAAA,GAAiB,CAAA,KAAMK,kBAAkB,CAAA,CAAA,CAAA;AAC9D,QAAA,IAAMmD,iBAAiBxD,cAAiBK,GAAAA,eAAAA,CAAAA;QACxC,IAAM9iD,OAAAA,GAAUyhD,aAAcoD,CAAAA,gBAAgB,CAACyG,SAAUp+F,CAAAA,MAAM,EAAEkoD,WAAAA,EAAa6wC,cAAiB,GAAA,CAAA,CAAA,CAAA;AAE/F,QAAA,IAAMnS,gBAAmB,GAAA,CAAA,CAAA;QACzB,IAAMnhC,QAAAA,GAAW,IAAIvmD,YAAAA,CAAagpD,WAAc0+B,GAAAA,gBAAAA,CAAAA,CAAAA;AAEhDiP,QAAAA,GAAAA,GAAM,GAACA,GAAM,GAAOtwF,GAAAA,IAAAA,CAAKwyF,EAAE,CAAA;AAE3B,QAAA,IAAIxgF,MAAS,GAAA,CAAA,CAAA;QAEb,IAAMglD,MAAAA,GAASg4B,aA1hCNA,CA0hCoB57C,UAAU,CAAA;AACvC,QAAA,IAAK,IAAIl5C,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,IAAK81F,gBAAgB91F,CAAK,EAAA,CAAA;AACxC,YAAA,IAAK,IAAIoQ,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,IAAK+lF,iBAAiB/lF,CAAK,EAAA,CAAA;gBACzC,IAAMupF,CAAAA,GAAI,CAACvpF,GAAI+lF,eAAmBC,GAAAA,GAAAA,CAAAA;AAClC,gBAAA,IAAMlb,IAAI,CAACl7E,GAAI81F,cAAkBhwF,GAAAA,IAAAA,CAAKwyF,EAAE,GAAG,CAAA,CAAA;gBAC3C,IAAMsG,IAAAA,GAAO94F,IAAK2iB,CAAAA,GAAG,CAACyyD,CAAAA,CAAAA,CAAAA;gBACtB,IAAM2jB,IAAAA,GAAO/4F,IAAK0iB,CAAAA,GAAG,CAAC0yD,CAAAA,CAAAA,CAAAA;gBACtB,IAAM4jB,IAAAA,GAAOh5F,IAAK2iB,CAAAA,GAAG,CAACkxE,CAAAA,CAAAA,CAAAA;gBACtB,IAAMoF,IAAAA,GAAOj5F,IAAK0iB,CAAAA,GAAG,CAACmxE,CAAAA,CAAAA,CAAAA;;AAGtB,gBAAA,IAAMqF,YAAY,CAACzhC,MAAS24B,GAAAA,UAAAA,GAAa0I,IAAG,IAAKE,IAAAA,CAAAA;AACjD,gBAAA,IAAMG,YAAY,CAAC1hC,MAAS24B,GAAAA,UAAAA,GAAa0I,IAAG,IAAKG,IAAAA,CAAAA;AACjD,gBAAA,IAAMG,YAAYhJ,UAAa2I,GAAAA,IAAAA,CAAAA;gBAC/B74C,QAAQ,CAACluC,SAAS,GAAGknF,SAAAA,CAAAA;gBACrBh5C,QAAQ,CAACluC,SAAS,GAAGmnF,SAAAA,CAAAA;gBACrBj5C,QAAQ,CAACluC,SAAS,GAAGonF,SAAAA,CAAAA;;AAGrB,gBAAA,IAAMC,UAAU5hC,MAASuhC,GAAAA,IAAAA,CAAAA;AACzB,gBAAA,IAAMM,UAAU7hC,MAASwhC,GAAAA,IAAAA,CAAAA;AACzBjiC,gBAAAA,MAAAA,CAAO/+D,GAAG,CAACihG,SAAAA,GAAYG,SAASF,SAAYG,GAAAA,OAAAA,EAASF,WAAW3gD,SAAS,EAAA,CAAA;AACzEyH,gBAAAA,QAAQ,CAACluC,MAAAA,EAAAA,CAAS,GAAGglD,MAAAA,CAAOvzD,CAAC,CAAA;AAC7By8C,gBAAAA,QAAQ,CAACluC,MAAAA,EAAAA,CAAS,GAAGglD,MAAAA,CAAOtzD,CAAC,CAAA;AAC7Bw8C,gBAAAA,QAAQ,CAACluC,MAAAA,EAAAA,CAAS,GAAGglD,MAAAA,CAAOt9C,CAAC,CAAA;;gBAG7BwmC,QAAQ,CAACluC,MAAS,EAAA,CAAA,GAAG1H,CAAI+lF,GAAAA,eAAAA,CAAAA;gBACzBnwC,QAAQ,CAACluC,MAAS,EAAA,CAAA,GAAG9X,CAAI81F,GAAAA,cAAAA,CAAAA;AAC3B,aAAA;AACF,SAAA;QAEAh+E,MAAS,GAAA,CAAA,CAAA;AACT,QAAA,IAAK,IAAI9X,EAAAA,GAAI,CAAGA,EAAAA,EAAAA,IAAK81F,gBAAgB91F,EAAK,EAAA,CAAA;AACxC,YAAA,IAAK,IAAIoQ,EAAAA,GAAI,CAAGA,EAAAA,EAAAA,IAAK+lF,iBAAiB/lF,EAAK,EAAA,CAAA;AACzC,gBAAA,IAAMkK,IAAI,CAAC67E,kBAAkB,CAAA,IAAKn2F,KAAIoQ,EAAI,GAAA,CAAA,CAAA;gBAC1C,IAAMohB,CAAAA,GAAI,CAAC2kE,eAAkB,GAAA,CAAA,KAAMn2F,EAAAA,GAAI,CAAA,CAAA,GAAKoQ,EAAI,GAAA,CAAA,CAAA;gBAChD,IAAM8pF,CAAAA,GAAI,CAAC/D,eAAAA,GAAkB,CAAA,KAAMn2F,EAAI,GAAA,CAAA,CAAKoQ,GAAAA,EAAAA,CAAAA;AAC5C,gBAAA,IAAM+pF,IAAI,CAAChE,eAAkB,GAAA,CAAA,IAAKn2F,EAAIoQ,GAAAA,EAAAA,CAAAA;gBAEtCijC,OAAO,CAACv7B,SAAS,GAAGwC,CAAAA,CAAAA;gBACpB+4B,OAAO,CAACv7B,SAAS,GAAG0Z,CAAAA,CAAAA;gBACpB6hB,OAAO,CAACv7B,SAAS,GAAGqiF,CAAAA,CAAAA;gBAEpB9mD,OAAO,CAACv7B,SAAS,GAAG0Z,CAAAA,CAAAA;gBACpB6hB,OAAO,CAACv7B,SAAS,GAAGoiF,CAAAA,CAAAA;gBACpB7mD,OAAO,CAACv7B,SAAS,GAAGqiF,CAAAA,CAAAA;AACtB,aAAA;AACF,SAAA;AAEA,QAAA,IAAI,CAACxC,aAAe,EAAA;YAClB,IAAQz1C,SAAWy8C,SAAXz8C,CAAAA,MAAAA,CAAAA;AACR,YAAA,IAAMm9C,cAAc9hC,MAAS24B,GAAAA,UAAAA,CAAAA;YAC7Bh0C,MAAOhiC,CAAAA,GAAG,CAACniB,GAAG,CAAC,CAACshG,WAAa,EAAA,CAACA,aAAa,CAACnJ,UAAAA,CAAAA,CAAAA;AAC5Ch0C,YAAAA,MAAAA,CAAOh8C,GAAG,CAACnI,GAAG,CAACshG,aAAaA,WAAanJ,EAAAA,UAAAA,CAAAA,CAAAA;AAC3C,SAAA;AAjlCSpB,QAAAA,aAAAA,CAmlCKuE,WAAW,CAACsF,SAAAA,EAAW34C,QAAU3S,EAAAA,OAAAA,EAAS4zC,oBAAoB0Q,aAAeC,EAAAA,mBAAAA,CAAAA,CAAAA;AAC7F,KAAA,CAAA;AAEA;;MAtlCW9C,cAylCJwB,YAuIN,GAvID,SAAOA,YACLgJ,CAAAA,QAAmB,EACnB/hC,MAAc,EACd72D,MAAc,EACdovF,cAAsB,EACtBC,cAAsB,EACtB9O,kBAA2B,EAC3B0Q,aAAsB,EACtBC,mBAA4B,EAAA;QAE5B9B,cAAiBhwF,GAAAA,IAAAA,CAAKC,KAAK,CAAC+vF,cAAAA,CAAAA,CAAAA;QAC5BC,cAAiBjwF,GAAAA,IAAAA,CAAKC,KAAK,CAACgwF,cAAAA,CAAAA,CAAAA;AAE5B,QAAA,IAAM+G,cAAchH,cAAiB,GAAA,CAAA,CAAA;AACrC,QAAA,IAAMyG,gBAAgBxG,cAAiB,GAAA,CAAA,CAAA;AACvC,QAAA,IAAMmG,aAAax1F,MAAS,GAAA,GAAA,CAAA;AAC5B,QAAA,IAAMq2F,aAAar2F,MAASqvF,GAAAA,cAAAA,CAAAA;AAC5B,QAAA,IAAMiH,mBAAmBF,WAAcP,GAAAA,aAAAA,CAAAA;AACvC,QAAA,IAAMU,sBAAsBnH,cAAiBC,GAAAA,cAAAA,CAAAA;QAC7C,IAAMoH,gBAAAA,GAAmBH,mBAAmB,CAAIlH,GAAAA,cAAAA,CAAAA;QAChD,IAAMziD,OAAAA,GAAUyhD,aA7mCPA,CA6mCqBoD,gBAAgB,CAC5CoH,QAAS/+F,CAAAA,MAAM,EACf48F,gBAAAA,EACAF,mBAAsB,GAAA,CAAA,GAAInH,cAAiB,GAAA,CAAA,CAAA,CAAA;AAE7C,QAAA,IAAMsH,wBAAwB,GAAMN,GAAAA,WAAAA,CAAAA;AACpC,QAAA,IAAMO,2BAA2B,GAAMvH,GAAAA,cAAAA,CAAAA;AACvC,QAAA,IAAMwH,2BAA2B,GAAMvH,GAAAA,cAAAA,CAAAA;AAEvC,QAAA,IAAM5O,gBAAmB,GAAA,CAAA,CAAA;QACzB,IAAMnhC,QAAAA,GAAW,IAAIvmD,YAAAA,CAAa09F,gBAAmB,GAAA,CAAA,CAAA,CAAA;AAErD,QAAA,IAAII,aAAgB,GAAA,CAAA,CAAA;;QAGpB,IAAMC,UAAAA,GAAa13F,KAAKwyF,EAAE,CAAA;QAC1B,IAAMiB,UAAAA,GAAazzF,IAAKwyF,CAAAA,EAAE,GAAG,CAAA,CAAA;AAC7B,QAAA,IAAMoF,QAAQngC,MAAS72D,GAAAA,MAAAA,CAAAA;AAEvB,QAAA,IAAK,IAAI1G,CAAI,GAAA,CAAA,EAAGA,CAAIg9F,GAAAA,gBAAAA,EAAkB,EAAEh9F,CAAG,CAAA;AACzC,YAAA,IAAMuJ,IAAIvJ,CAAI88F,GAAAA,WAAAA,CAAAA;YACd,IAAMtzF,CAAAA,GAAI,CAACxJ,GAAIo9F,qBAAyB,GAAA,CAAA,CAAA;AACxC,YAAA,IAAMzD,IAAIpwF,CAAI8zF,GAAAA,wBAAAA,CAAAA;AACd,YAAA,IAAMniB,IAAI1xE,CAAI8zF,GAAAA,wBAAAA,CAAAA;YACd,IAAMM,KAAAA,GAAQJ,aAAa7D,CAAIJ,GAAAA,UAAAA,CAAAA;YAC/B,IAAMO,QAAAA,GAAWh0F,IAAK0iB,CAAAA,GAAG,CAACo1E,KAAAA,CAAAA,CAAAA;YAC1B,IAAMC,QAAAA,GAAW/3F,IAAK2iB,CAAAA,GAAG,CAACm1E,KAAAA,CAAAA,CAAAA;YAC1B,IAAM2B,SAAAA,GAAYhiC,SAAS2d,CAAI3d,GAAAA,MAAAA,CAAAA;AAE/B,YAAA,IAAIw8B,OAAOwF,SAAYzF,GAAAA,QAAAA,CAAAA;YACvB,IAAIE,IAAAA,GAAOxwF,IAAIuzF,UAAab,GAAAA,UAAAA,CAAAA;AAC5B,YAAA,IAAIjC,OAAOsF,SAAY1B,GAAAA,QAAAA,CAAAA;AAEvB,YAAA,IAAI/lF,SAAS9X,CAAImnF,GAAAA,gBAAAA,CAAAA;;YAEjBnhC,QAAQ,CAACluC,SAAS,GAAGiiF,IAAAA,CAAAA;YACrB/zC,QAAQ,CAACluC,SAAS,GAAGkiF,IAAAA,CAAAA;YACrBh0C,QAAQ,CAACluC,SAAS,GAAGmiF,IAAAA,CAAAA;;YAErBj0C,QAAQ,CAACluC,SAAS,GAAGgiF,QAAAA,CAAAA;YACrB9zC,QAAQ,CAACluC,SAAS,GAAG4lF,KAAAA,CAAAA;YACrB13C,QAAQ,CAACluC,SAAS,GAAG+lF,QAAAA,CAAAA;;YAErB73C,QAAQ,CAACluC,SAAS,GAAG6hF,CAAAA,CAAAA;YACrB3zC,QAAQ,CAACluC,MAAS,EAAA,CAAA,GAAG,CAAIojE,GAAAA,CAAAA,CAAAA;AAC3B,SAAA;AAEA,QAAA,IAAK,IAAIl7E,EAAI,GAAA,CAAA,EAAGA,EAAIi9F,GAAAA,mBAAAA,EAAqB,EAAEj9F,EAAG,CAAA;AAC5C,YAAA,IAAMuJ,KAAIvJ,EAAI81F,GAAAA,cAAAA,CAAAA;YACd,IAAMtsF,EAAAA,GAAI,EAACxJ,GAAIq9F,wBAA4B,GAAA,CAAA,CAAA;YAE3C,IAAM/iF,CAAAA,GAAI9Q,KAAIszF,WAAcvzF,GAAAA,EAAAA,CAAAA;AAC5B,YAAA,IAAMioB,IAAIlX,CAAI,GAAA,CAAA,CAAA;AACd,YAAA,IAAM4/E,IAAI5/E,CAAIwiF,GAAAA,WAAAA,CAAAA;AACd,YAAA,IAAM3C,IAAID,CAAI,GAAA,CAAA,CAAA;YAEd7mD,OAAO,CAACkqD,gBAAgB,GAAG/rE,CAAAA,CAAAA;YAC3B6hB,OAAO,CAACkqD,gBAAgB,GAAGrD,CAAAA,CAAAA;YAC3B7mD,OAAO,CAACkqD,gBAAgB,GAAGjjF,CAAAA,CAAAA;YAC3B+4B,OAAO,CAACkqD,gBAAgB,GAAG/rE,CAAAA,CAAAA;YAC3B6hB,OAAO,CAACkqD,gBAAgB,GAAGpD,CAAAA,CAAAA;YAC3B9mD,OAAO,CAACkqD,gBAAgB,GAAGrD,CAAAA,CAAAA;AAC7B,SAAA;AAEA,QAAA,IAAIpiF,UAASklF,gBAAmB7V,GAAAA,gBAAAA,CAAAA;;QAEhCnhC,QAAQ,CAACluC,UAAS,GAAG,CAAA,CAAA;QACrBkuC,QAAQ,CAACluC,OAAS,EAAA,CAAA,GAAG,CAACokF,UAAAA,CAAAA;QACtBl2C,QAAQ,CAACluC,UAAS,GAAG,CAAA,CAAA;;QAErBkuC,QAAQ,CAACluC,UAAS,GAAG,CAAA,CAAA;QACrBkuC,QAAQ,CAACluC,OAAS,EAAA,CAAA,GAAG,CAAC,CAAA,CAAA;QACtBkuC,QAAQ,CAACluC,UAAS,GAAG,CAAA,CAAA;;QAErBkuC,QAAQ,CAACluC,UAAS,GAAG,GAAA,CAAA;QACrBkuC,QAAQ,CAACluC,UAAS,GAAG,GAAA,CAAA;;AAGrBA,QAAAA,OAAAA,GAAS,CAACklF,gBAAmB,GAAA,CAAA,IAAK7V,gBAAAA,CAAAA;AAClC,QAAA,IAAM4W,wBAA2B,GAAA,GAAA,IAAOxgC,MAAAA,GAAS,CAAA,CAAA,CAAA;AACjD,QAAA,IAAK,IAAIv9D,EAAI,GAAA,CAAA,EAAGA,EAAI81F,GAAAA,cAAAA,EAAgB,EAAE91F,EAAG,CAAA;AACvC,YAAA,IAAIk+F,OAAUl4C,GAAAA,QAAQ,CAAChmD,EAAAA,GAAImnF,gBAAiB,CAAA,CAAA;AAC5C,YAAA,IAAIgX,OAAUn4C,GAAAA,QAAQ,CAAChmD,EAAAA,GAAImnF,mBAAmB,CAAE,CAAA,CAAA;;YAGhDnhC,QAAQ,CAACluC,UAAS,GAAGomF,OAAAA,CAAAA;YACrBl4C,QAAQ,CAACluC,OAAS,EAAA,CAAA,GAAG,CAACokF,UAAAA,CAAAA;YACtBl2C,QAAQ,CAACluC,UAAS,GAAGqmF,OAAAA,CAAAA;;YAErBn4C,QAAQ,CAACluC,UAAS,GAAG,CAAA,CAAA;YACrBkuC,QAAQ,CAACluC,OAAS,EAAA,CAAA,GAAG,CAAC,CAAA,CAAA;YACtBkuC,QAAQ,CAACluC,UAAS,GAAG,CAAA,CAAA;;AAErBkuC,YAAAA,QAAQ,CAACluC,OAAAA,EAAAA,CAAS,GAAGomF,OAAAA,GAAUH,wBAA2B,GAAA,GAAA,CAAA;AAC1D/3C,YAAAA,QAAQ,CAACluC,OAAAA,EAAAA,CAAS,GAAG,GAAA,GAAMqmF,OAAUJ,GAAAA,wBAAAA,CAAAA;AACvC,SAAA;AAEA,QAAA,IAAMO,oBAAoBtB,gBAAmB,GAAA,CAAA,CAAA;AAC7C,QAAA,IAAK,IAAIh9F,EAAI,GAAA,CAAA,EAAGA,EAAI81F,GAAAA,cAAAA,EAAgB,EAAE91F,EAAG,CAAA;AACvC,YAAA,IAAMw+F,WAAcx+F,GAAAA,EAAAA,CAAAA;AACpB,YAAA,IAAMy+F,YAAez+F,GAAAA,EAAAA,KAAM81F,cAAiB,GAAA,CAAA,GAAI,IAAI0I,WAAc,GAAA,CAAA,CAAA;;YAGlEnrD,OAAO,CAACkqD,gBAAgB,GAAGP,gBAAAA,CAAAA;YAC3B3pD,OAAO,CAACkqD,aAAgB,EAAA,CAAA,GAAGe,iBAAoBG,GAAAA,YAAAA,CAAAA;YAC/CprD,OAAO,CAACkqD,aAAgB,EAAA,CAAA,GAAGe,iBAAoBE,GAAAA,WAAAA,CAAAA;AACjD,SAAA;AAEA,QAAA,IAAI,CAAC7G,aAAe,EAAA;YAClB,IAAQz1C,SAAWo9C,QAAXp9C,CAAAA,MAAAA,CAAAA;YACRA,MAAOhiC,CAAAA,GAAG,CAACniB,GAAG,CAAC,CAACw/D,MAAQ,EAAA,CAAC2+B,YAAY,CAAC3+B,MAAAA,CAAAA,CAAAA;AACtCrb,YAAAA,MAAAA,CAAOh8C,GAAG,CAACnI,GAAG,CAACw/D,QAAQ2+B,UAAY3+B,EAAAA,MAAAA,CAAAA,CAAAA;AACrC,SAAA;AA7tCSu3B,QAAAA,aAAAA,CA+tCKuE,WAAW,CAACiG,QAAAA,EAAUt5C,QAAU3S,EAAAA,OAAAA,EAAS4zC,oBAAoB0Q,aAAeC,EAAAA,mBAAAA,CAAAA,CAAAA;AAC5F,KAAA,CAAA;AAhuCW9C,IAAAA,aAAAA,CAkuCJ0B,eAuHN,GAvHD,SAAOA,gBACLgJ,WAAsB,EACtBjiC,MAAc,EACd72D,MAAc,EACdovF,cAAsB,EACtBC,cAAsB,EACtB9O,kBAA2B,EAC3B0Q,aAAsB,EACtBC,mBAA4B,EAAA;AAE5B9B,QAAAA,cAAAA,GAAiBhwF,KAAKI,GAAG,CAAC,CAAGJ,EAAAA,IAAAA,CAAKC,KAAK,CAAC+vF,cAAAA,CAAAA,CAAAA,CAAAA;QACxCC,cAAiBjwF,GAAAA,IAAAA,CAAKC,KAAK,CAACgwF,cAAAA,CAAAA,CAAAA;AAE5B,QAAA,IAAM+G,cAAchH,cAAiB,GAAA,CAAA,CAAA;AACrC,QAAA,IAAMyG,gBAAgBxG,cAAiB,GAAA,CAAA,CAAA;AACvC,QAAA,IAAMmG,aAAax1F,MAAS,GAAA,GAAA,CAAA;AAC5B,QAAA,IAAMq2F,aAAar2F,MAASqvF,GAAAA,cAAAA,CAAAA;AAC5B,QAAA,IAAMiH,mBAAmBF,WAAcP,GAAAA,aAAAA,CAAAA;AACvC,QAAA,IAAMU,sBAAsBnH,cAAiBC,GAAAA,cAAAA,CAAAA;AAE7C,QAAA,IAAM0J,iBAAiB3C,WAAcA,GAAAA,WAAAA,CAAAA;AACrC,QAAA,IAAM4C,oBAAoB5J,cAAiBA,GAAAA,cAAAA,CAAAA;QAE3C,IAAMqH,gBAAAA,GAAmBH,mBAAmB,CAAIyC,GAAAA,cAAAA,CAAAA;AAChD,QAAA,IAAMpsD,OAAUyhD,GA1vCPA,aA0vCqBoD,CAAAA,gBAAgB,CAC5CsH,WAAYj/F,CAAAA,MAAM,EAClB48F,gBAAAA,EACA,CAACF,mBAAsB,GAAA,CAAA,GAAIyC,iBAAgB,IAAK,CAAA,CAAA,CAAA;AAGlD,QAAA,IAAMtC,wBAAwB,GAAMN,GAAAA,WAAAA,CAAAA;AACpC,QAAA,IAAMO,2BAA2B,GAAMvH,GAAAA,cAAAA,CAAAA;AACvC,QAAA,IAAMwH,2BAA2B,GAAMvH,GAAAA,cAAAA,CAAAA;QAEvC,IAAMyH,UAAAA,GAAa13F,KAAKwyF,EAAE,CAAA;QAC1B,IAAMiB,UAAAA,GAAazzF,IAAKwyF,CAAAA,EAAE,GAAG,CAAA,CAAA;AAE7B,QAAA,IAAMnR,gBAAmB,GAAA,CAAA,CAAA;QACzB,IAAMnhC,QAAAA,GAAW,IAAIvmD,YAAAA,CAAa09F,gBAAmBhW,GAAAA,gBAAAA,CAAAA,CAAAA;AAErD,QAAA,IAAIoW,aAAgB,GAAA,CAAA,CAAA;;AAGpB,QAAA,IAAK,IAAIv9F,CAAI,GAAA,CAAA,EAAGA,CAAIg9F,GAAAA,gBAAAA,EAAkB,EAAEh9F,CAAG,CAAA;AACzC,YAAA,IAAMuJ,IAAIvJ,CAAI88F,GAAAA,WAAAA,CAAAA;YACd,IAAMtzF,CAAAA,GAAI,CAACxJ,GAAIo9F,qBAAyB,GAAA,CAAA,CAAA;AACxC,YAAA,IAAMzD,IAAIpwF,CAAI8zF,GAAAA,wBAAAA,CAAAA;AACd,YAAA,IAAMniB,IAAI1xE,CAAI8zF,GAAAA,wBAAAA,CAAAA;YACd,IAAMM,KAAAA,GAAQJ,aAAa7D,CAAIJ,GAAAA,UAAAA,CAAAA;YAC/B,IAAMO,QAAAA,GAAWh0F,IAAK0iB,CAAAA,GAAG,CAACo1E,KAAAA,CAAAA,CAAAA;YAC1B,IAAMC,QAAAA,GAAW/3F,IAAK2iB,CAAAA,GAAG,CAACm1E,KAAAA,CAAAA,CAAAA;AAE1B,YAAA,IAAI9lF,SAAS9X,CAAImnF,GAAAA,gBAAAA,CAAAA;;YAGjBnhC,QAAQ,CAACluC,MAAS,EAAA,CAAA,GAAGylD,MAASu8B,GAAAA,QAAAA,CAAAA;AAC9B9zC,YAAAA,QAAQ,CAACluC,MAAAA,EAAAA,CAAS,GAAGtO,CAAAA,GAAIuzF,UAAab,GAAAA,UAAAA,CAAAA;YACtCl2C,QAAQ,CAACluC,MAAS,EAAA,CAAA,GAAGylD,MAASsgC,GAAAA,QAAAA,CAAAA;;YAG9B73C,QAAQ,CAACluC,SAAS,GAAGgiF,QAAAA,CAAAA;YACrB9zC,QAAQ,CAACluC,SAAS,GAAG,CAAA,CAAA;YACrBkuC,QAAQ,CAACluC,SAAS,GAAG+lF,QAAAA,CAAAA;;YAGrB73C,QAAQ,CAACluC,SAAS,GAAG6hF,CAAAA,CAAAA;YACrB3zC,QAAQ,CAACluC,MAAS,EAAA,CAAA,GAAG,CAAIojE,GAAAA,CAAAA,CAAAA;AAC3B,SAAA;AAEA,QAAA,IAAK,IAAIl7E,EAAI,GAAA,CAAA,EAAGA,EAAIi9F,GAAAA,mBAAAA,EAAqB,EAAEj9F,EAAG,CAAA;AAC5C,YAAA,IAAMuJ,KAAIvJ,EAAI81F,GAAAA,cAAAA,CAAAA;YACd,IAAMtsF,EAAAA,GAAI,EAACxJ,GAAIq9F,wBAA4B,GAAA,CAAA,CAAA;YAE3C,IAAM/iF,CAAAA,GAAI9Q,KAAIszF,WAAcvzF,GAAAA,EAAAA,CAAAA;AAC5B,YAAA,IAAMioB,IAAIlX,CAAI,GAAA,CAAA,CAAA;AACd,YAAA,IAAM4/E,IAAI5/E,CAAIwiF,GAAAA,WAAAA,CAAAA;AACd,YAAA,IAAM3C,IAAID,CAAI,GAAA,CAAA,CAAA;YAEd7mD,OAAO,CAACkqD,gBAAgB,GAAG/rE,CAAAA,CAAAA;YAC3B6hB,OAAO,CAACkqD,gBAAgB,GAAGrD,CAAAA,CAAAA;YAC3B7mD,OAAO,CAACkqD,gBAAgB,GAAGjjF,CAAAA,CAAAA;YAC3B+4B,OAAO,CAACkqD,gBAAgB,GAAG/rE,CAAAA,CAAAA;YAC3B6hB,OAAO,CAACkqD,gBAAgB,GAAGpD,CAAAA,CAAAA;YAC3B9mD,OAAO,CAACkqD,gBAAgB,GAAGrD,CAAAA,CAAAA;AAC7B,SAAA;QAtzCSpF,aAwzCK6K,CAAAA,iBAAiB,CAC7BpiC,MAAAA,EACA72D,MACAovF,EAAAA,cAAAA,EACA0H,YACAjE,UACAyD,EAAAA,gBAAAA,EACA,CACAh3C,EAAAA,QAAAA,EACA3S,OACAkqD,EAAAA,aAAAA,CAAAA,CAAAA;AAl0COzI,QAAAA,aAAAA,CAq0CK6K,iBAAiB,CAC7BpiC,MACA72D,EAAAA,MAAAA,EACAovF,gBACA0H,UACA,EAAA,CAACjE,UACDyD,EAAAA,gBAAAA,GAAmByC,gBACnB,CAAC,CAAA,EACDz5C,QACA3S,EAAAA,OAAAA,EACAkqD,gBAAgB,CAAImC,GAAAA,iBAAAA,CAAAA,CAAAA;AAGtB,QAAA,IAAI,CAAC/H,aAAe,EAAA;YAClB,IAAQz1C,SAAWs9C,WAAXt9C,CAAAA,MAAAA,CAAAA;YACRA,MAAOhiC,CAAAA,GAAG,CAACniB,GAAG,CAAC,CAACw/D,MAAQ,EAAA,CAACA,MAAS2+B,GAAAA,UAAAA,EAAY,CAAC3+B,MAAAA,CAAAA,CAAAA;AAC/Crb,YAAAA,MAAAA,CAAOh8C,GAAG,CAACnI,GAAG,CAACw/D,MAAAA,EAAQA,SAAS2+B,UAAY3+B,EAAAA,MAAAA,CAAAA,CAAAA;AAC9C,SAAA;AAt1CSu3B,QAAAA,aAAAA,CAw1CKuE,WAAW,CAACmG,WAAAA,EAAax5C,QAAU3S,EAAAA,OAAAA,EAAS4zC,oBAAoB0Q,aAAeC,EAAAA,mBAAAA,CAAAA,CAAAA;AAC/F,KAAA,CAAA;AAz1CW9C,IAAAA,aAAAA,CA21CIuE,WA8Bd,GA9BD,SAAeA,WAAAA,CACbruB,IAAe,EACfhlB,QAAsB,EACtB3S,OAAkC,EAClC4zC,kBAA2B,EAC3B0Q,aAAsB,EACtBC,mBAA4B,EAAA;AAE5B,QAAA,IAAID,aAAe,EAAA;AACjBC,YAAAA,mBAAAA,CAAoBhlB,OAAO,CAAC5sB,QAAAA,CAAAA,CAAAA;AAC5BglB,YAAAA,IAAAA,CAAK6jB,UAAU,CAACx7C,OAAAA,CAAAA,CAAAA;AAChB23B,YAAAA,IAAAA,CAAKukB,UAAU,CAACtI,kBAAAA,CAAAA,CAAAA;SACX,MAAA;AACL,YAAA,IAAMzH,cAAiB,GAAA;AACrB,gBAAA,IAAIlK,cAAc0U,eAAgBoC,CAAAA,QAAQ,EAAE,CAAGzY,EAAAA,mBAAAA,CAAoB56C,OAAO,EAAE,CAAA,CAAA;AAC5E,gBAAA,IAAIu8C,cAAc0U,eAAgBr4B,CAAAA,MAAM,EAAE,EAAIgiB,EAAAA,mBAAAA,CAAoB56C,OAAO,EAAE,CAAA,CAAA;AAC3E,gBAAA,IAAIu8C,cAAc0U,eAAgB8D,CAAAA,EAAE,EAAE,EAAIna,EAAAA,mBAAAA,CAAoB3nE,OAAO,EAAE,CAAA,CAAA;AACxE,aAAA,CAAA;AACDg/D,YAAAA,IAAAA,CAAKiX,iBAAiB,CAACzC,cAAAA,CAAAA,CAAAA;AAEvB,YAAA,IAAMsT,YAAe,GAAA,IAAIhhB,MAAO9G,CAAAA,IAAAA,CAAKzqE,MAAM,EAAEy1E,cAAe4R,CAAAA,YAAY,EAAE5hC,QAAAA,EAAU4rB,WAAYlpE,CAAAA,MAAM,EAAE,IAAA,CAAA,CAAA;YACxGsiE,IAAK+U,CAAAA,sBAAsB,CAAC+S,YAAAA,EAAc,EAAI,EAAA,CAAA,CAAA,CAAA;AAE9C9nB,YAAAA,IAAAA,CAAK6jB,UAAU,CAACx7C,OAAAA,CAAAA,CAAAA;AAChB23B,YAAAA,IAAAA,CAAKmlB,iBAAiB,EAAA,CAAA;AAEtBnlB,YAAAA,IAAAA,CAAKukB,UAAU,CAACtI,kBAAAA,CAAAA,CAAAA;AAEhBjc,YAAAA,IAAAA,CAAK+V,UAAU,CAAC,CAAG1tC,EAAAA,OAAAA,CAAQzzC,MAAM,CAAA,CAAA;AACnC,SAAA;AACF,KAAA,CAAA;IAz3CWk1F,aA23CIoD,CAAAA,gBAYd,GAZD,SAAeA,gBAAAA,CAAiB33F,MAAc,EAAEkoD,WAAmB,EAAEm3C,UAAkB,EAAA;AACrF,QAAA,IAAIvsD,OAAqC,GAAA,IAAA,CAAA;AACzC,QAAA,IAAIoV,cAAc,KAAO,EAAA;AACvB,YAAA,IAAIloD,OAAOiF,iBAAiB,CAAC83B,OAAO,CAACrU,gBAAAA,CAAiB42E,gBAAgB,CAAG,EAAA;AACvExsD,gBAAAA,OAAAA,GAAU,IAAIh0C,WAAYugG,CAAAA,UAAAA,CAAAA,CAAAA;aACrB,MAAA;AACL,gBAAA,MAAMh0F,KAAM,CAAA,iCAAA,CAAA,CAAA;AACd,aAAA;SACK,MAAA;AACLynC,YAAAA,OAAAA,GAAU,IAAIj0C,WAAYwgG,CAAAA,UAAAA,CAAAA,CAAAA;AAC5B,SAAA;QACA,OAAOvsD,OAAAA,CAAAA;AACT,KAAA,CAAA;IAv4CWyhD,aAy4CI6K,CAAAA,iBAiEd,GAjED,SAAeA,iBAAAA,CACbpiC,MAAc,EACd72D,MAAc,EACdovF,cAAsB,EACtB0H,UAAkB,EAClBjE,UAAkB,EAClBzhF,MAAc,EACdgoF,QAAgB,EAChB95C,QAAsB,EACtB3S,OAAkC,EAClCkqD,aAAqB,EAAA;AAErB,QAAA,IAAMT,cAAchH,cAAiB,GAAA,CAAA,CAAA;QACrC,IAAMoG,UAAAA,GAAax1F,SAAS,GAAMo5F,GAAAA,QAAAA,CAAAA;AAClC,QAAA,IAAML,iBAAiB3C,WAAcA,GAAAA,WAAAA,CAAAA;AACrC,QAAA,IAAM4C,oBAAoB5J,cAAiBA,GAAAA,cAAAA,CAAAA;AAC3C,QAAA,IAAMsH,wBAAwB,GAAMN,GAAAA,WAAAA,CAAAA;AACpC,QAAA,IAAMO,2BAA2B,GAAMvH,GAAAA,cAAAA,CAAAA;AACvC,QAAA,IAAM3O,gBAAmB,GAAA,CAAA,CAAA;AAEzB,QAAA,IAAK,IAAInnF,CAAI,GAAA,CAAA,EAAGA,CAAIy/F,GAAAA,cAAAA,EAAgB,EAAEz/F,CAAG,CAAA;AACvC,YAAA,IAAMuJ,IAAIvJ,CAAI88F,GAAAA,WAAAA,CAAAA;YACd,IAAMtzF,CAAAA,GAAI,CAACxJ,GAAIo9F,qBAAyB,GAAA,CAAA,CAAA;AACxC,YAAA,IAAMzD,IAAIpwF,CAAI8zF,GAAAA,wBAAAA,CAAAA;AACd,YAAA,IAAMniB,IAAI1xE,CAAI6zF,GAAAA,wBAAAA,CAAAA;YACd,IAAMO,KAAAA,GAAQJ,aAAa7D,CAAIJ,GAAAA,UAAAA,CAAAA;AAC/B,YAAA,IAAMwG,KAAQ7kB,GAAAA,CAAAA,GAAIp1E,IAAKwyF,CAAAA,EAAE,GAAG,GAAA,CAAA;YAC5B,IAAM0H,QAAAA,GAAWl6F,IAAK0iB,CAAAA,GAAG,CAACu3E,KAAAA,CAAAA,CAAAA;AAE1B,YAAA,IAAMhG,IAAOx8B,GAAAA,MAAAA,GAASz3D,IAAK0iB,CAAAA,GAAG,CAACo1E,KAASoC,CAAAA,GAAAA,QAAAA,CAAAA;AACxC,YAAA,IAAMhG,OAAOz8B,MAASz3D,GAAAA,IAAAA,CAAK2iB,GAAG,CAACs3E,SAASD,QAAW5D,GAAAA,UAAAA,CAAAA;AACnD,YAAA,IAAMjC,IAAO18B,GAAAA,MAAAA,GAASz3D,IAAK2iB,CAAAA,GAAG,CAACm1E,KAASoC,CAAAA,GAAAA,QAAAA,CAAAA;AAExC,YAAA,IAAIh+F,KAAQ,GAAChC,CAAAA,CAAAA,GAAI8X,MAAK,IAAKqvE,gBAAAA,CAAAA;;YAE3BnhC,QAAQ,CAAChkD,QAAQ,GAAG+3F,IAAAA,CAAAA;YACpB/zC,QAAQ,CAAChkD,QAAQ,GAAGg4F,IAAAA,CAAAA;YACpBh0C,QAAQ,CAAChkD,QAAQ,GAAGi4F,IAAAA,CAAAA;;YAGpBj0C,QAAQ,CAAChkD,QAAQ,GAAG+3F,IAAAA,CAAAA;YACpB/zC,QAAQ,CAAChkD,KAAQ,EAAA,CAAA,GAAGg4F,IAAOkC,GAAAA,UAAAA,CAAAA;YAC3Bl2C,QAAQ,CAAChkD,QAAQ,GAAGi4F,IAAAA,CAAAA;;YAGpBj0C,QAAQ,CAAChkD,QAAQ,GAAG23F,CAAAA,CAAAA;YACpB3zC,QAAQ,CAAChkD,QAAQ,GAAGk5E,CAAAA,CAAAA;AACtB,SAAA;AAEA,QAAA,IAAK,IAAIl7E,EAAI,GAAA,CAAA,EAAGA,EAAI0/F,GAAAA,iBAAAA,EAAmB,EAAE1/F,EAAG,CAAA;AAC1C,YAAA,IAAMuJ,KAAIvJ,EAAI81F,GAAAA,cAAAA,CAAAA;YACd,IAAMtsF,EAAAA,GAAI,EAACxJ,GAAIq9F,wBAA4B,GAAA,CAAA,CAAA;YAE3C,IAAM/iF,CAAAA,GAAI9Q,EAAIszF,GAAAA,WAAAA,GAAcvzF,EAAIuO,GAAAA,MAAAA,CAAAA;AAChC,YAAA,IAAM0Z,IAAIlX,CAAI,GAAA,CAAA,CAAA;AACd,YAAA,IAAM4/E,IAAI5/E,CAAIwiF,GAAAA,WAAAA,CAAAA;AACd,YAAA,IAAM3C,IAAID,CAAI,GAAA,CAAA,CAAA;YAEd7mD,OAAO,CAACkqD,gBAAgB,GAAG/rE,CAAAA,CAAAA;YAC3B6hB,OAAO,CAACkqD,gBAAgB,GAAGjjF,CAAAA,CAAAA;YAC3B+4B,OAAO,CAACkqD,gBAAgB,GAAGpD,CAAAA,CAAAA;YAC3B9mD,OAAO,CAACkqD,gBAAgB,GAAGjjF,CAAAA,CAAAA;YAC3B+4B,OAAO,CAACkqD,gBAAgB,GAAGrD,CAAAA,CAAAA;YAC3B7mD,OAAO,CAACkqD,gBAAgB,GAAGpD,CAAAA,CAAAA;AAC7B,SAAA;AACF,KAAA,CAAA;AA18CWrF,IAAAA,OAAAA,aAAAA,CAAAA;AA28CZ,CAAA,GAAA;AA38CYA,aAAAA,CACI57C,aAAsB,IAAIngB,kBAAAA,EAAAA,CAAAA;AAD9B+7D,aAGawF,CAAAA,oBAAAA,GAAuB,IAAI76F,YAAa,CAAA;IAC9D,CAAC,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;IAAG,CAAC,CAAA;IAAG,CAAC,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;IAAG,CAAC,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;IAAG,CAAC,CAAA;IAAG,CAAC,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;IAAG,CAAC,CAAA;IAAG,CAAC,CAAA;IAAG,CAAC,CAAA;IAAG,CAAC,CAAA;IAAG,CAAC,CAAA;AAAG,IAAA,CAAA;IAAG,CAAC,CAAA;AAClF,CAAA,CAAA,CAAA;AALUq1F,aAOayF,CAAAA,gBAAAA,GAAmB,IAAI96F,YAAa,CAAA;AAC1D,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AAAG,IAAA,CAAA;AACtE,CAAA,CAAA,CAAA;AATUq1F,aAAAA,CAWIyG,cAAyB,GAAA,CAAA,CAAA;AAX7BzG,aAAAA,CAYI6D,cAAyB,GAAA,CAAA;;AClC1C,SAAS,4BAA4B,GAAG;AACxC;AACA;AACA;AACA;AACA,IAAI,IAAI;AACR;AACA;AACA,QAAQ,IAAI,MAAM,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,EAAE,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC;AACpG,KAAK,CAAC,OAAO,CAAC,EAAE,EAAE;AAClB,IAAI,OAAO,CAAC,4BAA4B,GAAG,WAAW;AACtD,QAAQ,OAAO,CAAC,CAAC,MAAM,CAAC;AACxB,KAAK,GAAG,CAAC;AACT;;ACXA,SAAS,UAAU,CAAC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE;AACzC,IAAI,IAAI,4BAA4B,EAAE,EAAE,UAAU,GAAG,OAAO,CAAC,SAAS,CAAC;AACvE,SAAS;AACT,QAAQ,UAAU,GAAG,SAAS,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE;AAC7D,YAAY,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC3B,YAAY,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;AAClC,YAAY,IAAI,WAAW,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;AAC7D,YAAY,IAAI,QAAQ,GAAG,IAAI,WAAW,EAAE,CAAC;AAC7C;AACA,YAAY,IAAI,KAAK,EAAE,iBAAiB,CAAC,QAAQ,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC;AACpE;AACA,YAAY,OAAO,QAAQ,CAAC;AAC5B,SAAS,CAAC;AACV,KAAK;AACL;AACA,IAAI,OAAO,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AAC7C;;ACOO,IAAA,eAAA,iBAAA,WAAA;AAAMsH,IAAAA,SAAAA,eAAAA,GAAAA,EAAAA;AACX;;;;AAIC,MACD,eANWA,CAMJC,cAoBN,GApBD,SAAOA,cACLvhG,CAAAA,MAAiB,EACjB9B,MAAiB,EACjBiC,OAAe,EACfC,UAAkB,EAClBC,eAAoC,EAAA;AAEpC,QAAA,IAAMd,UAAanB,GAAAA,YAAAA,CAAaiB,YAAY,CAACW,OAAOf,WAAW,CAAA,CAAA;QAE/D,IAAK,IAAIgB,KAAKD,MAAQ,CAAA;YACpB5B,YAAa2B,CAAAA,aAAa,CAACC,MAAAA,EAAQ9B,MAAQ+B,EAAAA,CAAAA,EAAGV,UAAU,CAACU,CAAAA,CAAE,EAAEE,OAAAA,EAASC,UAAYC,EAAAA,eAAAA,CAAAA,CAAAA;AACpF,SAAA;QAEA,IAA6BL,MAAoBwB,CAAAA,QAAQ,EAAE;YAChCxB,MAAoBwB,CAAAA,QAAQ,CAC3BtD,MAAAA,EACxBiC,OACAC,EAAAA,UAAAA,CAAAA,CAAAA;AAEJ,SAAA;AACF,KAAA,CAAA;AA1BWkhG,IAAAA,OAAAA,eAAAA,CAAAA;AA2BZ,CAAA,EAAA;;ACrCD;;IAGO,IAAME,MAAN,iBAAA,SAAA,YAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,MAAAA,EAAAA,YAAAA,CAAAA,CAAAA;aAAAA,MAiLC5/F,CAAAA,MAAc,EAAE6T,IAAa,EAAA;;gBACvC,YAAM7T,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,CAAAA,IAAAA,IAAAA,0CA1HR6iD,KAAAA,CAAAA,KAAAA,GAAekL,MAAMjP,MAAM,mBAIb,KAAA,CACdtK,oBAAgC,GAAA,KAAA,mBAEhCF,KAAAA,CAAAA,gBAAAA,GAA4B,wBACd,KAAA,CACdurD,cAA2B,EAAE,mBACf,KAAA,CACdC,QAAoC,GAAA,IAAI/4C,oCAC1B,KAAA,CACd5L,YAAsB,EAAE,mBAIxB4kD,KAAAA,CAAAA,OAAAA,GAAmB,KACnB,mBACAC,KAAAA,CAAAA,SAAAA,GAAqB,uBACP,KAAA,CACdC,aAAwB,GAAA,CAAC,CAEzB,yBACAvrD,WAAuB,GAAA,KAAA,EAAA,KAAA,CAGfwrD,OAAkB,GAAA,IAAA;AAqoBlBC,QAAAA,KAAAA,CAAAA,eAAAA,GAA0B,IAAI/vD,iBAAAA,EAAAA,CAAAA;AAriBpC,QAAA,KAAA,CAAKv8B,IAAI,GAAGA,IAAAA,CAAAA;AACZ,QAAA,KAAA,CAAKunC,SAAS,GAAG,KAAK/F,CAAAA,YAAY,CAACkB,SAAAA,CAAAA,CAAAA;AACnC,QAAA,KAAA,CAAK6pD,oBAAoB,GAAG,KAAKhlD,CAAAA,SAAS,CAACX,uBAAuB,EAAA,CAAA;;;AArLzDmlD,IAAAA,IAAAA,MAAAA,GAAAA,MAAAA,CAAAA,SAAAA,CAAAA;AAwLX;;;;;AAKC,MACDvqD,MAAAA,CAAAA,YASC,GATDA,SAAAA,aACE33C,IAAO,EAAA;AACP,QAAA,IAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAA,IAAA,GAAA,IAAA,KAAA,CAAA,IAAA,GAAA,CAAA,GAAA,IAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,OAAA,IAAA,EAAA,IAAA,EAAA,CAAA;AAAG2iG,YAAAA,IAAAA,CAAH,IAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,IAA8B,CAAA,CAAA;;QAE9BvrD,sBAAuBC,CAAAA,SAAS,CAAC,IAAI,EAAEr3C,IAAAA,CAAAA,CAAAA;AACvC,QAAA,IAAMw0C,YAAY,UAAIx0C,CAAAA,IAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA;YAAK,IAAI;AAAK2iG,SAAAA,EAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AACpC,QAAA,IAAI,CAACR,WAAW,CAACt+F,IAAI,CAAC2wC,SAAAA,CAAAA,CAAAA;AACtBA,QAAAA,SAAAA,CAAUkC,UAAU,CAAC,IAAMb,EAAAA,gBAAAA,CAAiBtU,GAAG,CAAA,CAAA;QAC/C,OAAOiT,SAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;AAIC,MACDkD,MAAAA,CAAAA,YASC,GATDA,SAAAA,aAAkC13C,IAA+B,EAAA;QAC/D,IAAMw3C,UAAAA,GAAa,IAAI,CAAC2qD,WAAW,CAAA;QACnC,IAAK,IAAIpgG,IAAI,CAAG0B,EAAAA,CAAAA,GAAI+zC,WAAW71C,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;YACjD,IAAMyyC,SAAAA,GAAYgD,UAAU,CAACz1C,CAAE,CAAA,CAAA;YAC/B,IAAa,WAATyyC,CAAAA,SAAAA,EAAqBx0C,IAAM,CAAA,EAAA;gBAC7B,OAAOw0C,SAAAA,CAAAA;AACT,aAAA;AACF,SAAA;QACA,OAAO,IAAA,CAAA;AACT,KAAA,CAAA;AAEA;;;;;AAKC,MACDouD,OAAAA,aAUC,GAVDA,SAAAA,aAAmC5iG,CAAAA,IAA+B,EAAE6iG,OAAY,EAAA;AAC9EA,QAAAA,OAAAA,CAAQlhG,MAAM,GAAG,CAAA,CAAA;QACjB,IAAM61C,UAAAA,GAAa,IAAI,CAAC2qD,WAAW,CAAA;QACnC,IAAK,IAAIpgG,IAAI,CAAG0B,EAAAA,CAAAA,GAAI+zC,WAAW71C,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;YACjD,IAAMyyC,SAAAA,GAAYgD,UAAU,CAACz1C,CAAE,CAAA,CAAA;YAC/B,IAAa,WAATyyC,CAAAA,SAAAA,EAAqBx0C,IAAM,CAAA,EAAA;AAC7B6iG,gBAAAA,OAAAA,CAAQh/F,IAAI,CAAC2wC,SAAAA,CAAAA,CAAAA;AACf,aAAA;AACF,SAAA;QACA,OAAOquD,OAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;;AAKC,MACDC,OAAAA,4BAIC,GAJDA,SAAAA,4BAAkD9iG,CAAAA,IAA+B,EAAE6iG,OAAY,EAAA;AAC7FA,QAAAA,OAAAA,CAAQlhG,MAAM,GAAG,CAAA,CAAA;QACjB,IAAI,CAACohG,wBAAwB,CAAI/iG,IAAM6iG,EAAAA,OAAAA,CAAAA,CAAAA;QACvC,OAAOA,OAAAA,CAAAA;AACT,KAAA,CAAA;AAeAG,IAAAA,MAAAA,CAAAA,QAqDC,GArDDA,SAAAA,QAASC,CAAAA,YAA6B,EAAEC,KAAc,EAAA;QACpD,IAAIn/F,KAAAA,CAAAA;QACJ,IAAI,OAAOk/F,iBAAiB,QAAU,EAAA;YACpCl/F,KAAQk/F,GAAAA,YAAAA,CAAAA;SACH,MAAA;YACLl/F,KAAQ9C,GAAAA,SAAAA,CAAAA;YACRiiG,KAAQD,GAAAA,YAAAA,CAAAA;AACV,SAAA;QAEA,IAAIC,KAAAA,CAAMb,OAAO,EAAE;YACjBa,KAAMC,CAAAA,MAAM,CAACC,qBAAqB,CAACF,KAAAA,CAAAA,CAAAA;AACnCA,YAAAA,KAAAA,CAAMb,OAAO,GAAG,KAAA,CAAA;YAEhB,IAAI,CAACgB,kBAAkB,CAACt/F,KAAOm/F,EAAAA,KAAAA,CAAAA,CAAAA;YAC/BA,KAAMV,CAAAA,OAAO,GAAG,IAAI,CAAA;YAEpB,IAAMc,QAAAA,GAAWJ,MAAMC,MAAM,CAAA;YAC7B,IAAMI,QAAAA,GAAW,IAAI,CAACJ,MAAM,CAAA;YAE5B,IAAIK,kBAAAA,GAAqB3tD,iBAAiBjB,IAAI,CAAA;AAC9C,YAAA,IAAI,CAAC,IAAI,CAACkC,oBAAoB,EAAE;AAC9BosD,gBAAAA,KAAAA,CAAMpsD,oBAAoB,KAAK0sD,kBAAsB3tD,IAAAA,gBAAAA,CAAiBgB,SAAS,CAAD,CAAA;AAChF,aAAA;YACA,IAAIqsD,KAAAA,CAAMtsD,gBAAgB,EAAE;gBAC1B,IAAI,IAAI,CAACA,gBAAgB,EAAE;;AAEzB0sD,oBAAAA,QAAAA,KAAaC,QAAaC,KAAAA,kBAAsB3tD,IAAAA,gBAAAA,CAAiBvd,KAAK,CAAD,CAAA;iBAChE,MAAA;AACLkrE,oBAAAA,kBAAAA,IAAsB3tD,iBAAiBvd,KAAK,CAAA;AAC9C,iBAAA;AACF,aAAA;YAEAkrE,kBAAsBN,IAAAA,KAAAA,CAAMO,gBAAgB,CAACD,kBAAAA,CAAAA,CAAAA;YAE7C,IAAIN,KAAAA,CAAMC,MAAM,KAAKI,QAAU,EAAA;gBAtSxBrB,MAuSEwB,CAAAA,sBAAsB,CAACR,KAAOK,EAAAA,QAAAA,CAAAA,CAAAA;AACvC,aAAA;YAEA,IAAI5sD,gBAAAA,GAAmBd,iBAAiBjB,IAAI,CAAA;YAC5C,IAAIsuD,KAAAA,CAAMZ,SAAS,EAAE;gBACnB,IAAI,IAAI,CAACxrD,oBAAoB,EAAE;AAC7B,oBAAA,CAACosD,MAAMpsD,oBAAoB,KAAKH,gBAAoBd,IAAAA,gBAAAA,CAAiBgB,SAAS,CAAD,CAAA;AAC/E,iBAAA;gBACA,IAAI,IAAI,CAACD,gBAAgB,EAAE;oBACxB,CAAA,CAACssD,KAAMtsD,CAAAA,gBAAgB,IAAI0sD,QAAAA,KAAaC,QAAO,MAAO5sD,gBAAAA,IAAoBd,gBAAiBvd,CAAAA,KAAK,CAAD,CAAA;AAClG,iBAAA;AACF,aAAA;YACAqe,gBAAoBusD,IAAAA,KAAAA,CAAMS,cAAc,CAAChtD,gBAAAA,CAAAA,CAAAA;AAEzCusD,YAAAA,KAAAA,CAAMU,kBAAkB,EAAA,CAAA;SACnB,MAAA;YACLV,KAAMW,CAAAA,UAAU,CAAC,IAAI,EAAE9/F,KAAAA,CAAAA,CAAAA;AACzB,SAAA;AACF,KAAA,CAAA;AAEA;;;AAGC,MACD+/F,MAAAA,CAAAA,WAEC,GAFDA,SAAAA,YAAYZ,KAAa,EAAA;AACvBA,QAAAA,KAAAA,CAAMW,UAAU,CAAC,IAAA,CAAA,CAAA;AACnB,KAAA,CAAA;AAEA;;;;;AAKC,MACDE,MAAAA,CAAAA,QAEC,GAFDA,SAAAA,SAAShgG,KAAa,EAAA;AACpB,QAAA,OAAO,IAAI,CAAC05C,SAAS,CAAC15C,KAAM,CAAA,CAAA;AAC9B,KAAA,CAAA;AAEA;;;;AAIC,MACDigG,MAAAA,CAAAA,UAYC,GAZDA,SAAAA,WAAW7tF,IAAY,EAAA;AACrB,QAAA,IAAIA,IAAS,KAAA,IAAI,CAACA,IAAI,EAAE;AACtB,YAAA,OAAO,IAAI,CAAA;AACb,SAAA;QACA,IAAM8tF,QAAAA,GAAW,IAAI,CAACxmD,SAAS,CAAA;QAC/B,IAAK,IAAI17C,IAAI,CAAG0B,EAAAA,CAAAA,GAAIwgG,SAAStiG,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;AAC/C,YAAA,IAAMnD,SAASqlG,QAAQ,CAACliG,CAAE,CAAA,CAACiiG,UAAU,CAAC7tF,IAAAA,CAAAA,CAAAA;AACtC,YAAA,IAAIvX,MAAQ,EAAA;gBACV,OAAOA,MAAAA,CAAAA;AACT,aAAA;AACF,SAAA;QACA,OAAO,IAAA,CAAA;AACT,KAAA,CAAA;AAEA;;;;AAIC,MACDslG,MAAAA,CAAAA,UAaC,GAbDA,SAAAA,WAAW5/F,IAAY,EAAA;QACrB,IAAM6/F,MAAAA,GAAS7/F,IAAKuM,CAAAA,KAAK,CAAC,GAAA,CAAA,CAAA;AAC1B,QAAA,IAAIklC,SAAiB,IAAI,CAAA;QACzB,IAAK,IAAIh0C,CAAI,GAAA,CAAA,EAAGJ,MAASwiG,GAAAA,MAAAA,CAAOxiG,MAAM,EAAEI,CAAAA,GAAIJ,MAAQ,EAAA,EAAEI,CAAG,CAAA;YACvD,IAAM8O,KAAAA,GAAQszF,MAAM,CAACpiG,CAAE,CAAA,CAAA;AACvB,YAAA,IAAI8O,KAAO,EAAA;AACTklC,gBAAAA,MAAAA,GAASmsD,MA3WJA,CA2WWkC,gBAAgB,CAACruD,MAAQllC,EAAAA,KAAAA,CAAAA,CAAAA;AACzC,gBAAA,IAAI,CAACklC,MAAQ,EAAA;oBACX,OAAO,IAAA,CAAA;AACT,iBAAA;AACF,aAAA;AACF,SAAA;QACA,OAAOA,MAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;AAIC,MACDsuD,MAAAA,CAAAA,WAKC,GALDA,SAAAA,YAAYluF,IAAa,EAAA;AACvB,QAAA,IAAM+sF,QAAQ,IA1XLhB,MAAAA,CA0XgB,IAAI,CAAC5/F,MAAM,EAAE6T,IAAAA,CAAAA,CAAAA;AACtC+sF,QAAAA,KAAAA,CAAM/9C,KAAK,GAAG,IAAI,CAACA,KAAK,CAAA;QACxB+9C,KAAMjlD,CAAAA,MAAM,GAAG,IAAI,CAAA;QACnB,OAAOilD,KAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;MAGAoB,MAAAA,CAAAA,aAcC,GAdDA,SAAAA,aAAAA,GAAAA;QACE,IAAML,QAAAA,GAAW,IAAI,CAACxmD,SAAS,CAAA;QAC/B,IAAK,IAAI17C,IAAIkiG,QAAStiG,CAAAA,MAAM,GAAG,CAAGI,EAAAA,CAAAA,IAAK,GAAGA,CAAK,EAAA,CAAA;YAC7C,IAAMmhG,KAAAA,GAAQe,QAAQ,CAACliG,CAAE,CAAA,CAAA;AACzBmhG,YAAAA,KAAAA,CAAMV,OAAO,GAAG,IAAA,CAAA;YAEhB,IAAI7rD,gBAAAA,GAAmBd,iBAAiBjB,IAAI,CAAA;AAC5CsuD,YAAAA,KAAAA,CAAMpsD,oBAAoB,KAAKH,gBAAoBd,IAAAA,gBAAAA,CAAiBgB,SAAS,CAAD,CAAA;AAC5EqsD,YAAAA,KAAAA,CAAMtsD,gBAAgB,KAAKD,gBAAoBd,IAAAA,gBAAAA,CAAiBvd,KAAK,CAAD,CAAA;YACpEqe,gBAAoBusD,IAAAA,KAAAA,CAAMO,gBAAgB,CAAC9sD,gBAAAA,CAAAA,CAAAA;AA5YpCurD,YAAAA,MAAAA,CA8YAwB,sBAAsB,CAACR,KAAO,EAAA,IAAA,CAAA,CAAA;AACvC,SAAA;AACAe,QAAAA,QAAAA,CAAStiG,MAAM,GAAG,CAAA,CAAA;AACpB,KAAA,CAAA;AAEA;;;MAIAkf,MAAAA,CAAAA,KAIC,GAJDA,SAAAA,KAAAA,GAAAA;QACE,IAAM0jF,WAAAA,GAAc,IAAI,CAACC,kBAAkB,EAAA,CAAA;QAC3C,IAAI,CAACC,iBAAiB,CAAC,IAAI,EAAEF,WAAa,EAAA,IAAI,EAAEA,WAAAA,EAAa,IAAIniG,GAAAA,EAAAA,CAAAA,CAAAA;QACjE,OAAOmiG,WAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;AAEC,MACDG,MAAAA,CAAAA,eAGC,GAHDA,SAAAA,gBAAgBC,gBAA+B,EAAA;QAC7C,IAAI,CAAC3tD,WAAW,GAAG,IAAA,CAAA;QACnB,IAAI,CAAC4tD,iBAAiB,GAAGD,gBAAAA,CAAAA;AAC3B,KAAA,CAAA;IAEA,MAAQH,CAAAA,kBAsBP,GAtBD,SAAQA,kBAAAA,GAAAA;QACN,IAAMD,WAAAA,GAAc,IAtaXrC,MAsasB,CAAA,IAAI,CAACx/F,OAAO,EAAE,IAAI,CAACyT,IAAI,CAAA,CAAA;QAEtD,IAAMwuF,gBAAAA,GAAmB,IAAI,CAACC,iBAAiB,CAAA;AAC/C,QAAA,IAAID,gBAAkB,EAAA;AACpBJ,YAAAA,WAAAA,CAAYK,iBAAiB,GAAGD,gBAAAA,CAAAA;AAChCA,YAAAA,gBAAAA,CAAiBxgG,cAAc,CAAC,CAAA,CAAA,CAAA;AAClC,SAAA;AAEAogG,QAAAA,WAAAA,CAAYp/C,KAAK,GAAG,IAAI,CAACA,KAAK,CAAA;AAC9Bo/C,QAAAA,WAAAA,CAAYjC,SAAS,GAAG,IAAI,CAACA,SAAS,CAAA;QACtC,IAAmBuC,iBAAmBN,WAA9B7mD,CAAAA,SAAAA,CAAAA;AACR,QAAA,IAAoC,KAAA,GAAA,IAAI,EAArBonD,eAAiB,KAA5BpnD,CAAAA,SAAAA,CAAAA;QACRmnD,cAAe7kD,CAAAA,QAAQ,GAAG8kD,YAAAA,CAAa9kD,QAAQ,CAAA;QAC/C6kD,cAAe3kD,CAAAA,QAAQ,GAAG4kD,YAAAA,CAAa5kD,QAAQ,CAAA;QAC/C2kD,cAAevoD,CAAAA,KAAK,GAAGwoD,YAAAA,CAAaxoD,KAAK,CAAA;QAEzC,IAAMyoD,WAAAA,GAAc,IAAI,CAACtnD,SAAS,CAAA;QAClC,IAAK,IAAI17C,IAAI,CAAG0B,EAAAA,CAAAA,GAAIshG,YAAYpjG,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;AAClDwiG,YAAAA,WAAAA,CAAYvB,QAAQ,CAAC+B,WAAW,CAAChjG,CAAAA,CAAE,CAACyiG,kBAAkB,EAAA,CAAA,CAAA;AACxD,SAAA;QACA,OAAOD,WAAAA,CAAAA;AACT,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQE,iBAqBP,GArBD,SAAQA,iBAAAA,CACN10E,GAAW,EACXnxB,MAAc,EACdiC,OAAe,EACfC,UAAkB,EAClBC,eAAoC,EAAA;QAEpC,IAAMgkG,WAAAA,GAAch1E,IAAI0tB,SAAS,CAAA;QACjC,IAAMunD,cAAAA,GAAiBpmG,OAAO6+C,SAAS,CAAA;QACvC,IAAK,IAAI17C,IAAI,CAAG0B,EAAAA,CAAAA,GAAIshG,YAAYpjG,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;AAClD,YAAA,IAAI,CAAC0iG,iBAAiB,CAACM,WAAW,CAAChjG,CAAAA,CAAE,EAAEijG,cAAc,CAACjjG,CAAAA,CAAE,EAAElB,OAAAA,EAASC,UAAYC,EAAAA,eAAAA,CAAAA,CAAAA;AACjF,SAAA;QAEA,IAAMy2C,UAAAA,GAAaznB,IAAIoyE,WAAW,CAAA;QAClC,IAAK,IAAIpgG,KAAI,CAAG0B,EAAAA,EAAAA,GAAI+zC,WAAW71C,MAAM,EAAEI,EAAI0B,GAAAA,EAAAA,EAAG1B,EAAK,EAAA,CAAA;YACjD,IAAMkjG,UAAAA,GAAaztD,UAAU,CAACz1C,EAAE,CAAA,CAAA;AAChC,YAAA,IAAI,CAAY,WAAVkjG,CAAAA,UAAAA,EAAsBpsD,SAAY,CAAA,EAAA;AACtC,gBAAA,IAAMqsD,UAAatmG,GAAAA,MAAAA,CAAO+4C,YAAY,CAAoCstD,WAAWtlG,WAAW,CAAA,CAAA;AAChGqiG,gBAAAA,eAAAA,CAAgBC,cAAc,CAACgD,UAAYC,EAAAA,UAAAA,EAAYrkG,SAASC,UAAYC,EAAAA,eAAAA,CAAAA,CAAAA;AAC9E,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AAEA;;MAGA,MAAA,CAAS4B,OA8BR,GA9BD,SAASA,OAAAA,GAAAA;QACP,IAAI,IAAI,CAACF,UAAU,EAAE;AACnB,YAAA,OAAA;AACF,SAAA;AAEA,QAAA,YAAA,CAAA,SAAA,CAAME,OAAD,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;QAEL,IAAI,IAAI,CAACiiG,iBAAiB,EAAE;YAC1B,IAAI,CAAC5tD,WAAW,IAAI,IAAI,CAAC4tD,iBAAiB,CAACzgG,cAAc,CAAC,CAAC,CAAA,CAAA,CAAA;YAC3D,IAAI,CAACygG,iBAAiB,GAAG,IAAA,CAAA;AAC3B,SAAA;QAEA,IAAMptD,UAAAA,GAAa,IAAI,CAAC2qD,WAAW,CAAA;QACnC,IAAK,IAAIpgG,IAAIy1C,UAAW71C,CAAAA,MAAM,GAAG,CAAGI,EAAAA,CAAAA,IAAK,GAAGA,CAAK,EAAA,CAAA;YAC/Cy1C,UAAU,CAACz1C,CAAE,CAAA,CAACY,OAAO,EAAA,CAAA;AACvB,SAAA;AACA,QAAA,IAAI,CAACw/F,WAAW,CAACxgG,MAAM,GAAG,CAAA,CAAA;QAE1B,IAAMsiG,QAAAA,GAAW,IAAI,CAACxmD,SAAS,CAAA;QAC/B,MAAOwmD,QAAAA,CAAStiG,MAAM,GAAG,CAAG,CAAA;YAC1BsiG,QAAQ,CAAC,CAAE,CAAA,CAACthG,OAAO,EAAA,CAAA;AACrB,SAAA;QAEA,IAAI,IAAI,CAAC0/F,OAAO,EAAE;AAChB,YAAA,IAAI,CAACc,MAAM,CAACgC,gBAAgB,CAAC,IAAI,CAAA,CAAA;SAC5B,MAAA;YACL,IAAI,CAACtB,UAAU,CAAC,IAAA,CAAA,CAAA;AAClB,SAAA;QAEA,IAAI,CAACuB,QAAQ,GAAG,KAAA,CAAA;AAClB,KAAA,CAAA;AAEA;;AAEC,MACDnuD,MAAAA,CAAAA,gBAIC,GAJDA,SAAAA,iBAAiBzC,SAAoB,EAAA;AACnC4C,QAAAA,sBAAAA,CAAuBQ,YAAY,CAAC,IAAI,EAAEpD,UAAU70C,WAAW,CAAA,CAAA;QAC/D,IAAM63C,UAAAA,GAAa,IAAI,CAAC2qD,WAAW,CAAA;AACnC3qD,QAAAA,UAAAA,CAAWvzC,MAAM,CAACuzC,UAAWxzC,CAAAA,OAAO,CAACwwC,SAAY,CAAA,EAAA,CAAA,CAAA,CAAA;AACnD,KAAA,CAAA;AAEA;;AAEC,MACD6wD,MAAAA,CAAAA,UAGC,GAHDA,SAAAA,WAAWC,MAAc,EAAA;AACvBA,QAAAA,MAAAA,CAAOC,mBAAmB,GAAG,IAAI,CAACnD,QAAQ,CAACzgG,MAAM,CAAA;AACjD,QAAA,IAAI,CAACygG,QAAQ,CAACvxE,GAAG,CAACy0E,MAAAA,CAAAA,CAAAA;AACpB,KAAA,CAAA;AAEA;;AAEC,MACDE,MAAAA,CAAAA,aAIC,GAJDA,SAAAA,cAAcF,MAAc,EAAA;QAC1B,IAAMG,QAAAA,GAAW,IAAI,CAACrD,QAAQ,CAAC14C,aAAa,CAAC47C,OAAOC,mBAAmB,CAAA,CAAA;AACvEE,QAAAA,QAAAA,KAAaA,QAASF,CAAAA,mBAAmB,GAAGD,MAAAA,CAAOC,mBAAmB,CAAD,CAAA;QACrED,MAAOC,CAAAA,mBAAmB,GAAG,CAAC,CAAA,CAAA;AAChC,KAAA,CAAA;AAEA;;MAGAG,MAAAA,CAAAA,iBAYC,GAZDA,SAAAA,iBAAAA,GAAAA;QACE,IAAMC,SAAAA,GAAY,IAAI,CAACnD,OAAO,CAAA;AAC9B,QAAA,IAAImD,aAAa,IAAM,EAAA;YACrB,IAAMC,UAAAA,GAAaD,UAAUloD,SAAS,CAAA;YACtC,IAAI15C,KAAAA,GAAQ,IAAI,CAACw+F,aAAa,CAAA;YAC9BqD,UAAW3hG,CAAAA,MAAM,CAACF,KAAO,EAAA,CAAA,CAAA,CAAA;AACzB,YAAA,IAAK,IAAIN,CAAImiG,GAAAA,UAAAA,CAAWjkG,MAAM,EAAEoC,KAAAA,GAAQN,GAAGM,KAAS,EAAA,CAAA;gBAClD6hG,UAAU,CAAC7hG,KAAM,CAAA,CAACw+F,aAAa,EAAA,CAAA;AACjC,aAAA;YACA,IAAI,CAACC,OAAO,GAAG,IAAA,CAAA;YACf,IAAI,CAACD,aAAa,GAAG,CAAC,CAAA,CAAA;AACxB,SAAA;AACF,KAAA,CAAA;AAEA;;AAEC,MACDoB,MAAAA,CAAAA,cAOC,GAPDA,SAAAA,eAAehtD,gBAAkC,EAAA;QAC/C,IAAI,IAAI,CAACkvD,wBAAwB,EAAE;YACjC,MAAM,wJAAA,CAAA;AACR,SAAA;QACA,IAAI,CAACA,wBAAwB,GAAG,IAAI,CAAC1C,MAAM,CAAC5/C,kBAAkB,CAACuiD,wBAAwB,EAAA,CAAA;AACvF,QAAA,IAAI,CAACC,qBAAqB,CAAC,IAAI,CAACF,wBAAwB,EAAElvD,gBAAAA,CAAAA,CAAAA;QAC1D,IAAI,CAACqvD,oBAAoB,CAAC,IAAMrvD,EAAAA,gBAAAA,CAAAA,CAAAA;AAClC,KAAA,CAAA;AAEA;;AAEC,MACD8sD,MAAAA,CAAAA,gBAOC,GAPDA,SAAAA,iBAAiB9sD,gBAAkC,EAAA;QACjD,IAAI,IAAI,CAACkvD,wBAAwB,EAAE;YACjC,MAAM,qJAAA,CAAA;AACR,SAAA;QACA,IAAI,CAACA,wBAAwB,GAAG,IAAI,CAAC1C,MAAM,CAAC5/C,kBAAkB,CAACuiD,wBAAwB,EAAA,CAAA;AACvF,QAAA,IAAI,CAACG,uBAAuB,CAAC,IAAI,CAACJ,wBAAwB,EAAElvD,gBAAAA,CAAAA,CAAAA;QAC5D,IAAI,CAACqvD,oBAAoB,CAAC,KAAOrvD,EAAAA,gBAAAA,CAAAA,CAAAA;AACnC,KAAA,CAAA;AAEA;;MAGAitD,MAAAA,CAAAA,kBAQC,GARDA,SAAAA,kBAAAA,GAAAA;QACE,IAAI,IAAI,CAAClmD,SAAS,EAAE;YAClB,IAAI,CAACA,SAAS,CAACV,aAAa,EAAA,CAAA;SACvB,MAAA;AACL,YAAA,IAAK,IAAIj7C,CAAAA,GAAI,CAAG4S,EAAAA,GAAAA,GAAM,IAAI,CAAC8oC,SAAS,CAAC97C,MAAM,EAAEI,CAAI4S,GAAAA,GAAAA,EAAK5S,CAAK,EAAA,CAAA;AACzD,gBAAA,IAAI,CAAC07C,SAAS,CAAC17C,CAAAA,CAAE,CAAC6hG,kBAAkB,EAAA,CAAA;AACtC,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQP,kBAgBP,GAhBD,SAAQA,kBAAmBt/F,CAAAA,KAAa,EAAEm/F,KAAa,EAAA;QACrD,IAAMe,QAAAA,GAAW,IAAI,CAACxmD,SAAS,CAAA;QAC/B,IAAMyoD,UAAAA,GAAajC,SAAStiG,MAAM,CAAA;AAClC,QAAA,IAAIoC,UAAU9C,SAAW,EAAA;AACvBiiG,YAAAA,KAAAA,CAAMX,aAAa,GAAG2D,UAAAA,CAAAA;AACtBjC,YAAAA,QAAAA,CAASpgG,IAAI,CAACq/F,KAAAA,CAAAA,CAAAA;SACT,MAAA;YACL,IAAIn/F,KAAAA,GAAQ,CAAKA,IAAAA,KAAAA,GAAQmiG,UAAY,EAAA;gBACnC,MAAO,YAAYniG,GAAAA,KAAAA,GAAM,+BAA+BmiG,GAAAA,UAAAA,CAAAA;AAC1D,aAAA;AACAhD,YAAAA,KAAAA,CAAMX,aAAa,GAAGx+F,KAAAA,CAAAA;YACtBkgG,QAAShgG,CAAAA,MAAM,CAACF,KAAAA,EAAO,CAAGm/F,EAAAA,KAAAA,CAAAA,CAAAA;YAC1B,IAAK,IAAInhG,IAAIgC,KAAQ,GAAA,CAAA,EAAGN,IAAIyiG,UAAa,GAAA,CAAA,EAAGnkG,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;gBACtDkiG,QAAQ,CAACliG,CAAE,CAAA,CAACwgG,aAAa,EAAA,CAAA;AAC3B,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQsB,UAkDP,GAlDD,SAAQA,UAAW5lD,CAAAA,MAAc,EAAEkoD,YAAqB,EAAA;QACtD,IAAMR,SAAAA,GAAY,IAAI,CAACnD,OAAO,CAAA;AAC9B,QAAA,IAAIvkD,WAAW0nD,SAAW,EAAA;AACxB,YAAA,IAAI,CAACD,iBAAiB,EAAA,CAAA;YACtB,IAAI,CAAClD,OAAO,GAAGvkD,MAAAA,CAAAA;AACf,YAAA,IAAIA,MAAQ,EAAA;gBACVA,MAAOolD,CAAAA,kBAAkB,CAAC8C,YAAAA,EAAc,IAAI,CAAA,CAAA;gBAE5C,IAAM7C,QAAAA,GAAW,IAAI,CAACH,MAAM,CAAA;gBAC5B,IAAMiD,WAAAA,GAAcnoD,OAAOklD,MAAM,CAAA;gBAEjC,IAAIK,kBAAAA,GAAqB3tD,iBAAiBjB,IAAI,CAAA;gBAC9C,IAAI,CAACqJ,MAAOnH,CAAAA,oBAAoB,EAAE;AAChC,oBAAA,IAAI,CAACA,oBAAoB,KAAK0sD,kBAAsB3tD,IAAAA,gBAAAA,CAAiBgB,SAAS,CAAD,CAAA;AAC/E,iBAAA;gBACA,IAAIoH,MAAAA,CAAOrH,gBAAgB,EAAE;;oBAE3B,IAAI,CAACA,gBAAgB,IAAI0sD,QAAAA,KAAa8C,gBAAgB5C,kBAAAA,IAAsB3tD,gBAAiBvd,CAAAA,KAAK,CAAD,CAAA;iBAC5F,MAAA;AACL,oBAAA,IAAI,CAACse,gBAAgB,KAAK4sD,kBAAsB3tD,IAAAA,gBAAAA,CAAiBvd,KAAK,CAAD,CAAA;AACvE,iBAAA;gBACAkrE,kBAAsB,IAAA,IAAI,CAACC,gBAAgB,CAACD,kBAAAA,CAAAA,CAAAA;AAE5C,gBAAA,IAAIF,aAAa8C,WAAa,EAAA;oBAhnBzBlE,MAinBIwB,CAAAA,sBAAsB,CAAC,IAAI,EAAE0C,WAAAA,CAAAA,CAAAA;AACtC,iBAAA;gBAEA,IAAIzvD,gBAAAA,GAAmBd,iBAAiBjB,IAAI,CAAA;gBAE5C,IAAI,IAAI,CAAC0tD,SAAS,EAAE;oBAClB,IAAIrkD,MAAAA,CAAOnH,oBAAoB,EAAE;wBAC/B,CAAC,IAAI,CAACA,oBAAoB,KAAKH,gBAAoBd,IAAAA,gBAAAA,CAAiBgB,SAAS,CAAD,CAAA;AAC9E,qBAAA;oBACA,IAAIoH,MAAAA,CAAOrH,gBAAgB,EAAE;AAC1B,wBAAA,CAAA,CAAC,IAAI,CAACA,gBAAgB,IAAI0sD,QAAAA,KAAa8C,WAAU,MAAOzvD,gBAAAA,IAAoBd,gBAAiBvd,CAAAA,KAAK,CAAD,CAAA;AACpG,qBAAA;AACF,iBAAA;gBAEAqe,gBAAoB,IAAA,IAAI,CAACgtD,cAAc,CAAChtD,gBAAAA,CAAAA,CAAAA;aACnC,MAAA;gBACL,IAAI6sD,mBAAAA,GAAqB3tD,iBAAiBjB,IAAI,CAAA;AAC9C,gBAAA,IAAI,CAACkC,oBAAoB,KAAK0sD,mBAAsB3tD,IAAAA,gBAAAA,CAAiBgB,SAAS,CAAD,CAAA;AAC7E,gBAAA,IAAI,CAACD,gBAAgB,KAAK4sD,mBAAsB3tD,IAAAA,gBAAAA,CAAiBvd,KAAK,CAAD,CAAA;gBACrEkrE,mBAAsB,IAAA,IAAI,CAACC,gBAAgB,CAACD,mBAAAA,CAAAA,CAAAA;AAC5C,gBAAA,IAAImC,SAAW,EAAA;oBAroBVzD,MAsoBIwB,CAAAA,sBAAsB,CAAC,IAAI,EAAE,IAAA,CAAA,CAAA;AACtC,iBAAA;AACF,aAAA;AACA,YAAA,IAAI,CAACE,kBAAkB,EAAA,CAAA;AACzB,SAAA;AACF,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQb,wBAUP,GAVD,SAAQA,wBAA8C/iG,CAAAA,IAA+B,EAAE6iG,OAAY,EAAA;QACjG,IAAK,IAAI9gG,CAAI,GAAA,IAAI,CAACogG,WAAW,CAACxgG,MAAM,GAAG,CAAA,EAAGI,CAAK,IAAA,CAAA,EAAGA,CAAK,EAAA,CAAA;AACrD,YAAA,IAAMyyC,SAAY,GAAA,IAAI,CAAC2tD,WAAW,CAACpgG,CAAE,CAAA,CAAA;YACrC,IAAa,WAATyyC,CAAAA,SAAAA,EAAqBx0C,IAAM,CAAA,EAAA;AAC7B6iG,gBAAAA,OAAAA,CAAQh/F,IAAI,CAAC2wC,SAAAA,CAAAA,CAAAA;AACf,aAAA;AACF,SAAA;QACA,IAAK,IAAIzyC,EAAI,GAAA,IAAI,CAAC07C,SAAS,CAAC97C,MAAM,GAAG,CAAA,EAAGI,EAAK,IAAA,CAAA,EAAGA,EAAK,EAAA,CAAA;AACnD,YAAA,IAAI,CAAC07C,SAAS,CAAC17C,GAAE,CAACghG,wBAAwB,CAAI/iG,IAAM6iG,EAAAA,OAAAA,CAAAA,CAAAA;AACtD,SAAA;AACF,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQmD,oBAOP,GAPD,SAAQA,oBAAqBZ,CAAAA,QAAiB,EAAEzuD,gBAAkC,EAAA;QAChF,IAAM0vD,uBAAAA,GAA0B,IAAI,CAACR,wBAAwB,CAAA;QAC7D,IAAK,IAAI9jG,CAAI,GAAA,CAAA,EAAGJ,MAAS0kG,GAAAA,uBAAAA,CAAwB1kG,MAAM,EAAEI,CAAAA,GAAIJ,MAAQ,EAAA,EAAEI,CAAG,CAAA;AACxEskG,YAAAA,uBAAuB,CAACtkG,CAAAA,CAAE,CAAC20C,UAAU,CAAC0uD,QAAUzuD,EAAAA,gBAAAA,CAAAA,CAAAA;AAClD,SAAA;AACA,QAAA,IAAI,CAACwsD,MAAM,CAAC5/C,kBAAkB,CAAC+iD,wBAAwB,CAACD,uBAAAA,CAAAA,CAAAA;QACxD,IAAI,CAACR,wBAAwB,GAAG,IAAA,CAAA;AAClC,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQE,qBAaP,GAbD,SAAQA,qBAAsBM,CAAAA,uBAAoC,EAAE1vD,gBAAkC,EAAA;QACpGA,gBAAmBd,GAAAA,gBAAAA,CAAiBgB,SAAS,KAAK,IAAI,CAACC,oBAAoB,GAAG,IAAG,CAAA,CAAA;QACjFH,gBAAmBd,GAAAA,gBAAAA,CAAiBvd,KAAK,KAAK,IAAI,CAACse,gBAAgB,GAAG,IAAG,CAAA,CAAA;QACzE,IAAMY,UAAAA,GAAa,IAAI,CAAC2qD,WAAW,CAAA;QACnC,IAAK,IAAIpgG,IAAI,CAAG0B,EAAAA,CAAAA,GAAI+zC,WAAW71C,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;YACjD,IAAMyyC,SAAAA,GAAYgD,UAAU,CAACz1C,CAAE,CAAA,CAAA;YAC9ByyC,CAAAA,SAAAA,CAAU5T,OAAO,IAAI,CAAC4T,SAAAA,CAAUwB,OAAO,KAAKqwD,uBAAwBxiG,CAAAA,IAAI,CAAC2wC,SAAAA,CAAAA,CAAAA;AAC5E,SAAA;QACA,IAAMyvD,QAAAA,GAAW,IAAI,CAACxmD,SAAS,CAAA;QAC/B,IAAK,IAAI17C,KAAI,CAAG0B,EAAAA,EAAAA,GAAIwgG,SAAStiG,MAAM,EAAEI,EAAI0B,GAAAA,EAAAA,EAAG1B,EAAK,EAAA,CAAA;YAC/C,IAAMmhG,KAAAA,GAAQe,QAAQ,CAACliG,EAAE,CAAA,CAAA;AACzBmhG,YAAAA,KAAAA,CAAMkC,QAAQ,IAAIlC,KAAM6C,CAAAA,qBAAqB,CAACM,uBAAyB1vD,EAAAA,gBAAAA,CAAAA,CAAAA;AACzE,SAAA;AACF,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQsvD,uBAaP,GAbD,SAAQA,uBAAwBI,CAAAA,uBAAoC,EAAE1vD,gBAAkC,EAAA;QACtGA,gBAAmBd,GAAAA,gBAAAA,CAAiBgB,SAAS,KAAK,IAAI,CAACC,oBAAoB,GAAG,KAAI,CAAA,CAAA;QAClFH,gBAAmBd,GAAAA,gBAAAA,CAAiBvd,KAAK,KAAK,IAAI,CAACse,gBAAgB,GAAG,KAAI,CAAA,CAAA;QAC1E,IAAMY,UAAAA,GAAa,IAAI,CAAC2qD,WAAW,CAAA;QACnC,IAAK,IAAIpgG,IAAI,CAAG0B,EAAAA,CAAAA,GAAI+zC,WAAW71C,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;YACjD,IAAMyyC,SAAAA,GAAYgD,UAAU,CAACz1C,CAAE,CAAA,CAAA;AAC/ByyC,YAAAA,SAAAA,CAAU5T,OAAO,IAAIylE,uBAAwBxiG,CAAAA,IAAI,CAAC2wC,SAAAA,CAAAA,CAAAA;AACpD,SAAA;QACA,IAAMyvD,QAAAA,GAAW,IAAI,CAACxmD,SAAS,CAAA;QAC/B,IAAK,IAAI17C,KAAI,CAAG0B,EAAAA,EAAAA,GAAIwgG,SAAStiG,MAAM,EAAEI,EAAI0B,GAAAA,EAAAA,EAAG1B,EAAK,EAAA,CAAA;YAC/C,IAAMmhG,KAAAA,GAAQe,QAAQ,CAACliG,EAAE,CAAA,CAAA;AACzBmhG,YAAAA,KAAAA,CAAMkC,QAAQ,IAAIlC,KAAM+C,CAAAA,uBAAuB,CAACI,uBAAyB1vD,EAAAA,gBAAAA,CAAAA,CAAAA;AAC3E,SAAA;AACF,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQ4vD,gBAqBP,GArBD,SAAQA,gBAAiBC,CAAAA,OAAiB,EAAE5nG,MAAc,EAAA;AACxDA,QAAAA,MAAAA,GAASiJ,KAAKoa,GAAG,CAACrjB,MAAQ4nG,EAAAA,OAAAA,CAAQ7kG,MAAM,GAAG,CAAA,CAAA,CAAA;AAC3C,QAAA,IAAI/C,SAAS,CAAG,EAAA;YACd,MAAO,mBAAgBA,MAAO,GAAA,sBAAA,CAAA;AAChC,SAAA;AACA,QAAA,IAAI,IAAI,CAAC2jG,aAAa,KAAK3jG,MAAQ,EAAA;YACjC,IAAM6nG,QAAAA,GAAW,IAAI,CAAClE,aAAa,CAAA;AACnC,YAAA,IAAI3jG,SAAS6nG,QAAU,EAAA;AACrB,gBAAA,IAAK,IAAI1kG,CAAAA,GAAI0kG,QAAU1kG,EAAAA,CAAAA,IAAKnD,QAAQmD,CAAK,EAAA,CAAA;oBACvC,IAAMmhG,KAAAA,GAAQnhG,KAAKnD,MAAS,GAAA,IAAI,GAAG4nG,OAAO,CAACzkG,IAAI,CAAE,CAAA,CAAA;oBACjDykG,OAAO,CAACzkG,EAAE,GAAGmhG,KAAAA,CAAAA;AACbA,oBAAAA,KAAAA,CAAMX,aAAa,GAAGxgG,CAAAA,CAAAA;AACxB,iBAAA;aACK,MAAA;AACL,gBAAA,IAAK,IAAIA,EAAAA,GAAI0kG,QAAU1kG,EAAAA,EAAAA,IAAKnD,QAAQmD,EAAK,EAAA,CAAA;oBACvC,IAAMmhG,MAAAA,GAAQnhG,MAAKnD,MAAS,GAAA,IAAI,GAAG4nG,OAAO,CAACzkG,KAAI,CAAE,CAAA,CAAA;oBACjDykG,OAAO,CAACzkG,GAAE,GAAGmhG,MAAAA,CAAAA;AACbA,oBAAAA,MAAAA,CAAMX,aAAa,GAAGxgG,EAAAA,CAAAA;AACxB,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AAMA;;MAGA2kG,MAAAA,CAAAA,iBAMC,GANDA,SAAAA,iBAAAA,GAAAA;AACE,QAAA,IAAI,IAAI,CAAChE,oBAAoB,CAACnkF,IAAI,EAAE;YAClCm0B,iBAAOkM,CAAAA,MAAM,CAAC,IAAI,CAAClB,SAAS,CAACiB,WAAW,EAAE,IAAI,CAAC8jD,eAAe,CAAA,CAAA;AAC9D,YAAA,IAAI,CAACC,oBAAoB,CAACnkF,IAAI,GAAG,KAAA,CAAA;AACnC,SAAA;QACA,OAAO,IAAI,CAACkkF,eAAe,CAAA;AAC7B,KAAA,CAAA;AAnuBA;;MADWP,OAIJkC,gBASN,GATD,SAAOA,gBAAiBuC,CAAAA,IAAY,EAAExwF,IAAY,EAAA;QAChD,IAAM8tF,QAAAA,GAAW0C,KAAKlpD,SAAS,CAAA;QAC/B,IAAK,IAAI17C,IAAIkiG,QAAStiG,CAAAA,MAAM,GAAG,CAAGI,EAAAA,CAAAA,IAAK,GAAGA,CAAK,EAAA,CAAA;YAC7C,IAAMmhG,KAAAA,GAAQe,QAAQ,CAACliG,CAAE,CAAA,CAAA;YACzB,IAAImhG,KAAAA,CAAM/sF,IAAI,KAAKA,IAAM,EAAA;gBACvB,OAAO+sF,KAAAA,CAAAA;AACT,aAAA;AACF,SAAA;QACA,OAAO,IAAA,CAAA;AACT,KAAA,CAAA;AAEA;;MAfWhB,OAkBJwB,sBAMN,GAND,SAAOA,sBAAuB3tD,CAAAA,MAAc,EAAEoB,KAAY,EAAA;AACxDpB,QAAAA,MAAAA,CAAOotD,MAAM,GAAGhsD,KAAAA,CAAAA;QAChB,IAAM8sD,QAAAA,GAAWluD,OAAO0H,SAAS,CAAA;QACjC,IAAK,IAAI17C,IAAIkiG,QAAStiG,CAAAA,MAAM,GAAG,CAAGI,EAAAA,CAAAA,IAAK,GAAGA,CAAK,EAAA,CAAA;AAC7C,YAAA,IAAI,CAAC2hG,sBAAsB,CAACO,QAAQ,CAACliG,EAAE,EAAEo1C,KAAAA,CAAAA,CAAAA;AAC3C,SAAA;AACF,KAAA,CAAA;AAEA;;MA1BW+qD,MA6BJ0E,CAAAA,uBAWN,GAXD,SAAOA,wBAAwBC,UAAkB,EAAEC,YAAoB,EAAEC,WAAqB,EAAA;AAC5FA,QAAAA,WAAAA,CAAYplG,MAAM,GAAG,CAAA,CAAA;AACrB,QAAA,MAAOmlG,iBAAiBD,UAAY,CAAA;YAClC,IAAM5oD,MAAAA,GAAS6oD,aAAa7oD,MAAM,CAAA;AAClC,YAAA,IAAI,CAACA,MAAQ,EAAA;gBACX,OAAO,KAAA,CAAA;AACT,aAAA;YACA8oD,WAAYljG,CAAAA,IAAI,CAACijG,YAAAA,CAAaX,YAAY,CAAA,CAAA;YAC1CW,YAAe7oD,GAAAA,MAAAA,CAAAA;AACjB,SAAA;QACA,OAAO,IAAA,CAAA;AACT,KAAA,CAAA;AAEA;;MA1CWikD,OA6CJ8E,yBAMN,GAND,SAAOA,yBAA0BH,CAAAA,UAAkB,EAAEE,WAAqB,EAAA;AACxE,QAAA,IAAIhxD,MAAS8wD,GAAAA,UAAAA,CAAAA;QACb,IAAK,IAAI9kG,IAAIglG,WAAYplG,CAAAA,MAAM,GAAG,CAAGI,EAAAA,CAAAA,IAAK,GAAGA,CAAK,EAAA,CAAA;AAChDg0C,YAAAA,MAAAA,GAASA,OAAOkuD,QAAQ,CAAC8C,WAAW,CAAChlG,EAAE,CAAC,CAAA;AAC1C,SAAA;QACA,OAAOg0C,MAAAA,CAAAA;AACT,KAAA,CAAA;AAnDWmsD,IAAAA,aAAAA,CAAAA,MAAAA,EAAAA;;YAyFPkD,GAAAA,EAAAA,UAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAAC9C,SAAS,CAAA;AACvB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAal+F,KAAc,EAAA;AACzB,gBAAA,IAAIA,KAAU,KAAA,IAAI,CAACk+F,SAAS,EAAE;oBAC5B,IAAI,CAACA,SAAS,GAAGl+F,KAAAA,CAAAA;AACjB,oBAAA,IAAIA,KAAO,EAAA;wBACT,IAAM65C,MAAAA,GAAS,IAAI,CAACukD,OAAO,CAAA;wBAE3B,IAAI7rD,gBAAAA,GAAmBd,iBAAiBjB,IAAI,CAAA;wBAC5C,IAAI,IAAI,CAACytD,OAAO,IAAI,IAAI,CAACc,MAAM,CAAC8D,iBAAiB,EAAE;AACjDtwD,4BAAAA,gBAAAA,IAAoBd,iBAAiBtU,GAAG,CAAA;yBACnC,MAAA;4BACL0c,CAAAA,MAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAAQnH,oBAAoB,MAAKH,gBAAoBd,IAAAA,gBAAAA,CAAiBgB,SAAS,CAAD,CAAA;4BAC9EoH,CAAAA,MAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAAQrH,gBAAgB,MAAKD,gBAAoBd,IAAAA,gBAAAA,CAAiBvd,KAAK,CAAD,CAAA;AACxE,yBAAA;wBAEAqe,gBAAoB,IAAA,IAAI,CAACgtD,cAAc,CAAChtD,gBAAAA,CAAAA,CAAAA;qBACnC,MAAA;wBACL,IAAIA,iBAAAA,GAAmBd,iBAAiBjB,IAAI,CAAA;AAC5C,wBAAA,IAAI,CAACkC,oBAAoB,KAAKH,iBAAoBd,IAAAA,gBAAAA,CAAiBgB,SAAS,CAAD,CAAA;AAC3E,wBAAA,IAAI,CAACD,gBAAgB,KAAKD,iBAAoBd,IAAAA,gBAAAA,CAAiBvd,KAAK,CAAD,CAAA;wBAEnEqe,iBAAoB,IAAA,IAAI,CAAC8sD,gBAAgB,CAAC9sD,iBAAAA,CAAAA,CAAAA;AAC5C,qBAAA;AACF,iBAAA;AACF,aAAA;;;YAKIO,GAAAA,EAAAA,qBAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACJ,oBAAoB,CAAA;AAClC,aAAA;;;YAKImH,GAAAA,EAAAA,QAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACukD,OAAO,CAAA;AACrB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAWp+F,KAAa,EAAA;gBACtB,IAAI,CAACy/F,UAAU,CAACz/F,KAAAA,CAAAA,CAAAA;AAClB,aAAA;;;YAKI6/F,GAAAA,EAAAA,UAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACxmD,SAAS,CAAA;AACvB,aAAA;;;YAMIyoD,GAAAA,EAAAA,YAAAA;;;;MAAJ,SAAA,GAAA,GAAA;AACE,gBAAA,OAAO,IAAI,CAACzoD,SAAS,CAAC97C,MAAM,CAAA;AAC9B,aAAA;;;YAKIw1C,GAAAA,EAAAA,OAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACgsD,MAAM,CAAA;AACpB,aAAA;;;YAKIgD,GAAAA,EAAAA,cAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAAC5D,aAAa,CAAA;AAC3B,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAiBn+F,KAAa,EAAA;AAC5B,gBAAA,IAAI,IAAI,CAACm+F,aAAa,KAAK,CAAC,CAAG,EAAA;AAC7B,oBAAA,MAAM,aAAC,GAAa,IAAI,CAACpsF,IAAI,GAAC,0BAAA,CAAA;AAChC,iBAAA;AAEA,gBAAA,IAAI,CAACowF,gBAAgB,CAAC,IAAI,CAAClE,OAAO,GAAG,IAAI,CAACc,MAAM,CAAC+D,aAAa,GAAG,IAAI,CAAC1E,OAAO,CAAC/kD,SAAS,EAAEr5C,KAAAA,CAAAA,CAAAA;AAC3F,aAAA;;;AA3KW89F,IAAAA,OAAAA,MAAAA,CAAAA;EAAe7/F,YAquB3B;;AC9uBD;;IAGO,IAAM8kG,IAAN,iBAAA,SAAA,YAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,IAAAA,EAAAA,YAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,IAAAA,CAwDC,IAAmB,EAAA;;AAC7B,QAAA,KAAA,GAAA,YAAA,CAAA,IAAA,CAAA,IAAA,EAAM,qBADWhxF,IAAAA,GAAAA,IAAAA,EAAAA,KAAAA,CArDnBixF,mBAAsB,GAAA,IAAIvlG,eAO1BwlG,eAAkB,GAAA,IAAIlpF,iBAKdmpF,EAAAA,EAAAA,KAAAA,CAAAA,MAAAA,GAAS,IAAIzlG,KAEb0lG,EAAAA,EAAAA,KAAAA,CAAAA,WAAAA,GAAc,CAAC,CAAA,EAAA,KAAA,CA+FhBC,SAAmB,EAAE,CAAA;;;AAhHjBL,IAAAA,IAAAA,MAAAA,GAAAA,IAAAA,CAAAA,SAAAA,CAAAA;AA4DX;;AAEC,MACDM,MAAAA,CAAAA,mBAmBC,GAnBDA,SAAAA,oBAAoBn3F,QAA6B,EAAA;QAC/C,IAAI,IAAI,CAACi3F,WAAW,KAAKj3F,QAAAA,CAAShO,MAAM,CAACgoB,IAAI,CAACM,UAAU,EAAE;AACxD,YAAA,OAAA;AACF,SAAA;AAEA,QAAA,IAAkF,KAAA,GAAA,IAAI,EAA9E88E,KAAAA,GAA0E,KAA1EA,CAAAA,KAAAA,EAAON,YAAqBO,GAA8C,KAAnEP,CAAAA,mBAAAA,EAAmCQ,YAAeC,GAAiB,KAAhCD,CAAAA,aAAAA,CAAAA;AAC5B,QAAA,IAAA,cAAA,CAAA;AAAtB,QAAA,IAAME,YAAe,GAAC,CAAA,CAAA,iBAAA,IAAI,CAACC,QAAQ,KAAA,IAAA,GAAb,cAAiBz3F,GAAAA,QAAAA,CAASylC,MAAK,EAAG2wD,iBAAiB,EAAA,CAAA;QACzE,IAAK,IAAI3kG,IAAI2lG,KAAM/lG,CAAAA,MAAM,GAAG,CAAGI,EAAAA,CAAAA,IAAK,GAAGA,CAAK,EAAA,CAAA;YAC1C,IAAMimG,IAAAA,GAAON,KAAK,CAAC3lG,CAAE,CAAA,CAAA;AACrB,YAAA,IAAM8X,SAAS9X,CAAI,GAAA,EAAA,CAAA;AACnB,YAAA,IAAIimG,IAAM,EAAA;AACRrwF,gBAAAA,KAAAA,CAAM6B,oBAAoB,CAACwuF,IAAKtqD,CAAAA,SAAS,CAACiB,WAAW,EAAEgpD,YAAY,CAAC5lG,CAAE,CAAA,CAACgY,QAAQ,EAAE,GAAG8tF,YAAchuF,EAAAA,MAAAA,CAAAA,CAAAA;aAC7F,MAAA;AACLguF,gBAAAA,YAAAA,CAAa/nG,GAAG,CAAC6nG,YAAY,CAAC5lG,CAAE,CAAA,CAACgY,QAAQ,EAAEF,MAAAA,CAAAA,CAAAA;AAC7C,aAAA;AACAlC,YAAAA,KAAAA,CAAM6B,oBAAoB,CAACsuF,YAAcD,EAAAA,YAAAA,EAAchuF,QAAQguF,YAAchuF,EAAAA,MAAAA,CAAAA,CAAAA;AAC/E,SAAA;QAEA,IAAI,CAAC0tF,WAAW,GAAGj3F,QAAAA,CAAShO,MAAM,CAACgoB,IAAI,CAACM,UAAU,CAAA;AACpD,KAAA,CAAA;AAEA;;MAGA1oB,MAAAA,CAAAA,QAsBC,GAtBDA,SAAAA,SAAStD,MAAY,EAAEiC,OAAe,EAAEC,UAAkB,EAAA;AACxD,QAAA,IAAMwvC,QAAQ,IAAIzuC,KAAAA,EAAAA,CAAAA;;QAGlB,IAAMkmG,QAAAA,GAAW,IAAI,CAACA,QAAQ,CAAA;AAC9B,QAAA,IAAIA,QAAU,EAAA;AACZ,YAAA,IAAMppF,OAAUujF,GAAAA,MAAAA,CAAO0E,uBAAuB,CAAC/lG,SAASknG,QAAUz3D,EAAAA,KAAAA,CAAAA,CAAAA;AAClE1xC,YAAAA,MAAAA,CAAOmpG,QAAQ,GAAGppF,OAAAA,GAAUujF,OAAO8E,yBAAyB,CAAClmG,YAAYwvC,KAASy3D,CAAAA,GAAAA,QAAAA,CAAAA;AACpF,SAAA;;QAGA,IAAML,KAAAA,GAAQ,IAAI,CAACA,KAAK,CAAA;QACxB,IAAIA,KAAAA,CAAM/lG,MAAM,GAAG,CAAG,EAAA;YACpB,IAAMsmG,SAAAA,GAAYP,MAAM/lG,MAAM,CAAA;YAC9B,IAAMumG,SAAAA,GAAY,IAAIrmG,KAAcomG,CAAAA,SAAAA,CAAAA,CAAAA;AACpC,YAAA,IAAK,IAAIlmG,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAIkmG,WAAWlmG,CAAK,EAAA,CAAA;gBAClC,IAAMimG,IAAAA,GAAON,KAAK,CAAC3lG,CAAE,CAAA,CAAA;AACrB,gBAAA,IAAM4c,QAAUujF,GAAAA,MAAAA,CAAO0E,uBAAuB,CAAC/lG,SAASmnG,IAAM13D,EAAAA,KAAAA,CAAAA,CAAAA;gBAC9D43D,SAAS,CAACnmG,EAAE,GAAG4c,QAAAA,GAAUujF,OAAO8E,yBAAyB,CAAClmG,YAAYwvC,KAAS03D,CAAAA,GAAAA,IAAAA,CAAAA;AACjF,aAAA;AACAppG,YAAAA,MAAAA,CAAO8oG,KAAK,GAAGQ,SAAAA,CAAAA;AACjB,SAAA;AACF,KAAA,CAAA;AA7GWf,IAAAA,aAAAA,CAAAA,IAAAA,EAAAA;;YAsBPY,GAAAA,EAAAA,UAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACI,SAAS,CAAA;AACvB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAa/jG,KAAa,EAAA;AACxB,gBAAA,IAAI,IAAI,CAAC+jG,SAAS,KAAK/jG,KAAO,EAAA;AAC5B,oBAAA,IAAI,CAACijG,eAAe,CAACtoF,QAAQ,CAAiC3a,CAAAA,EAAAA,KAAAA,CAAAA,CAAAA;oBAC9D,IAAI,CAAC+jG,SAAS,GAAG/jG,KAAAA,CAAAA;AACnB,iBAAA;AACF,aAAA;;;YAKIsjG,GAAAA,EAAAA,OAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACJ,MAAM,CAAA;AACpB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAUljG,KAA4B,EAAA;gBACpC,IAAMsjG,KAAAA,GAAQ,IAAI,CAACJ,MAAM,CAAA;AACPljG,gBAAAA,IAAAA,aAAAA,CAAAA;AAAlB,gBAAA,IAAM6jG,YAAY7jG,CAAAA,aAAAA,GAAAA,yBAAAA,KAAOzC,CAAAA,MAAM,YAAbyC,aAAiB,GAAA,CAAA,CAAA;gBACnC,IAAMgkG,aAAAA,GAAgBV,MAAM/lG,MAAM,CAAA;AAElC+lG,gBAAAA,KAAAA,CAAM/lG,MAAM,GAAGsmG,SAAAA,CAAAA;AACf,gBAAA,IAAK,IAAIlmG,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAIkmG,WAAWlmG,CAAK,EAAA,CAAA;AAClC2lG,oBAAAA,KAAK,CAAC3lG,CAAAA,CAAE,GAAGqC,KAAK,CAACrC,CAAE,CAAA,CAAA;AACrB,iBAAA;AAEA,gBAAA,IAAIqmG,kBAAkBH,SAAW,EAAA;AAC/B,oBAAA,IAAI,CAACL,aAAa,GAAG,IAAIpmG,aAAaymG,SAAY,GAAA,EAAA,CAAA,CAAA;AAClD,oBAAA,IAAI,CAACZ,eAAe,CAACtoF,QAAQ,CAAkCkpF,CAAAA,EAAAA,SAAAA,CAAAA,CAAAA;AACjE,iBAAA;AACF,aAAA;;;YA6DII,GAAAA,EAAAA,UAAAA;AAAJ,YAAA,GAAA,oDAAA,SAAA,GAAA,GAAA;AACS,gBAAA,IAAA,cAAA,CAAA;AAAP,gBAAA,OAAA,CAAO,iBAAA,IAAI,CAACN,QAAQ,KAAA,IAAA,GAAA,KAAA,CAAA,GAAb,eAAe5xF,IAAI,CAAA;AAC5B,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAa/R,KAAa,EAAA;gBACxB,IAAM2jG,QAAAA,GAAW,IAAI,CAACI,SAAS,CAAA;AAC/B,gBAAA,IAAIJ,QAAU,EAAA;AACZA,oBAAAA,QAAAA,CAAS5xF,IAAI,GAAG/R,KAAAA,CAAAA;AAClB,iBAAA;AACF,aAAA;;;AA5HW+iG,IAAAA,OAAAA,IAAAA,CAAAA;EAAa9kG,YA6HzB,EAAA;;;;;;;;;;;;;;;;;;;AAEM,IAAA,cAAKimG,iBAAAA,SAAAA,cAAAA,EAAAA;;;AAAAA,IAAAA,OAAAA,cAAAA,CAAAA;AAGX,CAAA,CAAA,EAAA,CAAA;;AChID;;IAGO,IAAMC,mBAAN,iBAAA,SAAA,YAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,mBAAAA,EAAAA,YAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,mBAAAA,CA6ECxyD,MAAc,EAAA;;gBACxB,YAAMA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,CAAAA,IAAAA,IAAAA,EAAAA,KAAAA,CApEAm4B,eAA4B,IAAIpuD,sBAAAA,EAAAA,EAAAA,KAAAA,CAGhC0oF,wBAAiC,IAAIz6F,kBAAAA,CAAQ,CAAC,CAAA,EAAG,CAAC,CAAA,CAAA,CAAA;AAkExD,QAAA,KAAA,CAAK06F,KAAK,GAAG,IAAA,CAAA;AAEb,QAAA,IAAM12E,MAAM,KAAKgkB,CAAAA,MAAM,CAACzzC,MAAM,CAACiF,iBAAiB,CAAA;QAChD,IAAImhG,uBAAAA,GAA0B32E,IAAI4e,YAAY,CAACg4D,YAAY,CAAC52E,GAAAA,CAAIG,EAAE,CAAC02E,0BAA0B,CAAA,CAAA;;;;AAK7FF,QAAAA,uBAAAA,GAA0B7gG,KAAKoa,GAAG,CAACymF,yBAAyB32E,GAAI82E,CAAAA,QAAQ,CAACC,+BAA+B,CAAA,CAAA;AAExG,QAAA,KAAA,CAAKC,wBAAwB,GAAGL,uBAAAA,CAAAA;AAEhC,QAAA,KAAA,CAAKM,qBAAqB,GAAG,KAAKA,CAAAA,qBAAqB,CAACnjG,IAAI,CAAA,KAAA,CAAA,CAAA;AAC5D,QAAA,KAAA,CAAKojG,cAAc,GAAG,KAAKA,CAAAA,cAAc,CAACpjG,IAAI,CAAA,KAAA,CAAA,CAAA;QAE9C,IAAM6tE,WAAAA,GAAc,MAAKxF,YAAY,CAAA;;AAErCwF,QAAAA,WAAAA,CAAYzxD,GAAG,CAACrB,eAAe,GAAG,MAAKooF,qBAAqB,CAAA;;AAE5Dt1B,QAAAA,WAAAA,CAAYzrE,GAAG,CAAC2Y,eAAe,GAAG,MAAKooF,qBAAqB,CAAA;;;AAlGnDT,IAAAA,IAAAA,MAAAA,GAAAA,mBAAAA,CAAAA,SAAAA,CAAAA;AAqGX;;MAGA,MAAA,CAAS5jD,0BAOR,GAPD,SAASA,2BAA2Bz1C,OAAsB,EAAE01C,OAAgB,EAAEC,OAAgB,EAAA;AAC5F,QAAA,IAAMlG,WAAc,GAAA,IAAI,CAACmG,UAAU,CAACnG,WAAW,CAAA;AAC/C,QAAA,IAAIiG,OAAS,EAAA;AACX,YAAA,IAAI,CAACG,kCAAkC,CAAC71C,OAAAA,EAASyvC,WAAakG,EAAAA,OAAAA,CAAAA,CAAAA;SACzD,MAAA;AACL,YAAA,IAAI,CAACG,iCAAiC,CAAC91C,OAAAA,EAASyvC,WAAakG,EAAAA,OAAAA,CAAAA,CAAAA;AAC/D,SAAA;AACF,KAAA,CAAA;AAEA;;MAGA,MAAA,CAASjiD,UAQR,GARD,SAASA,UAAAA,GAAAA;AAMP,QAAA,IAAA,mBAAA,CAAA;AALA,QAAA,YAAA,CAAA,SAAA,CAAMA,UAAD,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;QACL,IAAI,CAAC4lG,qBAAqB,GAAG,IAAA,CAAA;QAC7B,IAAI,CAACC,KAAK,GAAG,IAAA,CAAA;QACb,IAAI,CAACS,kBAAkB,GAAG,IAAA,CAAA;QAC1B,IAAI,CAACh7B,YAAY,GAAG,IAAA,CAAA;AACpB,QAAA,CAAA,mBAAA,GAAA,IAAI,CAACi7B,aAAa,KAAA,IAAA,GAAA,KAAA,CAAA,GAAlB,oBAAoBxmG,OAAO,EAAA,CAAA;QAC3B,IAAI,CAACwmG,aAAa,GAAG,IAAA,CAAA;AACvB,KAAA,CAAA;AAEA;;MAGA,MAAA,CAASjnG,QAQR,GARD,SAASA,SAAStD,MAA2B,EAAEiC,OAAe,EAAEC,UAAkB,EAAA;QAChF,YAAMoB,CAAAA,SAAAA,CAAAA,QAAD,CAAUtD,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAAQiC,OAASC,EAAAA,UAAAA,CAAAA,CAAAA;QAEhC,IAAI,IAAI,CAACsoG,IAAI,EAAE;AACbxqG,YAAAA,MAAAA,CAAOyqG,UAAU,CAAC,IAAMzqG,EAAAA,MAAAA,CAAOwqG,IAAI,CAAA,CAAA;AACrC,SAAA;AAEA,QAAA,IAAI,CAACF,kBAAkB,KAAKtqG,MAAOsqG,CAAAA,kBAAkB,GAAG,IAAI,CAACA,kBAAkB,CAACtnG,KAAK,EAAC,CAAA,CAAA;AACxF,KAAA,CAAA;AAEA,IAAA,MAAA,CAAmBkoB,OAyDlB,GAzDD,SAAmBA,OAAAA,CAAQ5a,OAAsB,EAAA;QAC/C,IAAQk6F,IAAS,GAAA,IAAI,CAAbA,IAAAA,CAAAA;AACR,QAAA,IAAIA,CAAAA,IAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,IAAAA,CAAM1B,KAAK,CAAC/lG,MAAM,IAAG,CAAG,EAAA;YAC1BynG,IAAK3B,CAAAA,mBAAmB,CAAC,IAAI,CAAA,CAAA;AAC/B,SAAA;QAEA,IAAMt9E,UAAAA,GAAa,IAAI,CAACA,UAAU,CAAA;QAClC,IAAM4iD,IAAAA,GAAkB,IAAI,CAACA,IAAI,CAAA;QAEjC,IAAMilB,iBAAAA,GAAoBjlB,KAAK+gB,kBAAkB,CAAA;QACjDkE,iBAAkBz6B,CAAAA,iBAAiB,CAACptC,UAAAA,EAAY,IAAI,CAAA,CAAA;QAEpD,IAAMu9E,KAAAA,GAAQ0B,IAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,IAAAA,CAAM1B,KAAK,CAAA;AACzB,QAAA,IAAIA,KAAO,EAAA;YACT,IAAM4B,sBAAAA,GAAyBtX,kBAAkBvM,qBAAqB,CAAA;YACtE,IAAMwiB,SAAAA,GAAYP,MAAM/lG,MAAM,CAAA;YAC9B,IAAM4nG,mBAAAA,GAAsB,IAAI,CAACf,qBAAqB,CAAA;YACtD,IAAMgB,eAAAA,GAAkBvB,SAAcsB,KAAAA,mBAAAA,CAAoBj+F,CAAC,CAAA;AAE3D,YAAA,IAAIk+F,eAAmBF,IAAAA,sBAAAA,KAA2BC,mBAAoBh+F,CAAAA,CAAC,EAAE;;;AAGvE,gBAAA,IAAMk+F,uBAA0B5hG,GAAAA,IAAAA,CAAKmM,IAAI,CAAC,CAAC,IAAI,CAAC+0F,wBAAwB,IAAI,EAAKO,GAAAA,sBAAqB,CAAC,IAAK,CAAA,CAAA,CAAA;AAE5G,gBAAA,IAAIrB,YAAYwB,uBAAyB,EAAA;oBACvC,IAAMnnG,MAAAA,GAAS,IAAI,CAACA,MAAM,CAAA;AAC1B,oBAAA,IAAIA,MAAOiF,CAAAA,iBAAiB,CAACmiG,iBAAiB,EAAE;AAC9C,wBAAA,IAAIF,eAAiB,EAAA;AACnB,4BAAA,IAAA,mBAAA,CAAA;AAAA,4BAAA,CAAA,mBAAA,GAAA,IAAI,CAACL,aAAa,KAAA,IAAA,GAAA,KAAA,CAAA,GAAlB,oBAAoBxmG,OAAO,EAAA,CAAA;4BAC3B,IAAI,CAACwmG,aAAa,GAAG,IAAI7+F,SAAAA,CAAUhI,QAAQ,CAAG2lG,EAAAA,SAAAA,EAAWljG,aAAcklF,CAAAA,YAAY,EAAE,KAAA,CAAA,CAAA;AACrF,4BAAA,IAAI,CAACkf,aAAa,CAAC/hG,UAAU,GAAGtC,kBAAkBgE,KAAK,CAAA;AACvD,4BAAA,IAAI,CAACqgG,aAAa,CAACjmG,WAAW,GAAG,IAAA,CAAA;AACnC,yBAAA;AACAinB,wBAAAA,UAAAA,CAAWipB,YAAY,CAAC,qBAAA,CAAA,CAAA;AACxBjpB,wBAAAA,UAAAA,CAAW+oB,WAAW,CAAC,4BAAA,CAAA,CAAA;wBACvB/oB,UAAW0oB,CAAAA,UAAU,CAAC01D,mBA9KrBA,CA8KyCoB,qBAAqB,EAAE,IAAI,CAACR,aAAa,CAAA,CAAA;qBAC9E,MAAA;AACLljG,wBAAAA,MAAAA,CAAOD,KAAK,CACV,2BAAC,GAA2BiiG,SAAU,GAAA,4DAAA,GAA4D,IAAI,CAACc,wBAAwB,GAAC,iFAAiFU,GAAAA,uBAAAA,GAAwB,KACzO,IAAI,CAAA,CAAA;AAER,qBAAA;iBACK,MAAA;AACL,oBAAA,IAAA,oBAAA,CAAA;AAAA,oBAAA,CAAA,oBAAA,GAAA,IAAI,CAACN,aAAa,KAAA,IAAA,GAAA,KAAA,CAAA,GAAlB,qBAAoBxmG,OAAO,EAAA,CAAA;AAC3BwnB,oBAAAA,UAAAA,CAAWipB,YAAY,CAAC,4BAAA,CAAA,CAAA;AACxBjpB,oBAAAA,UAAAA,CAAW+oB,WAAW,CAAC,qBAAuBu2D,EAAAA,uBAAAA,CAAwBzsE,QAAQ,EAAA,CAAA,CAAA;AAC9E7S,oBAAAA,UAAAA,CAAW2nB,aAAa,CAzLrBy2D,oBAyL0CqB,oBAAoB,EAAER,KAAKxB,aAAa,CAAA,CAAA;AACvF,iBAAA;gBACA2B,mBAAoBzpG,CAAAA,GAAG,CAACmoG,SAAWqB,EAAAA,sBAAAA,CAAAA,CAAAA;AACrC,aAAA;YAEA,IAAI,IAAI,CAACH,aAAa,EAAE;AACtB,gBAAA,IAAI,CAACA,aAAa,CAACh+F,cAAc,CAACi+F,KAAKxB,aAAa,CAAA,CAAA;AACtD,aAAA;AACF,SAAA;AAEA,QAAA,YAAA,CAAA,SAAA,CAAM99E,OAAD,CAAS5a,IAAAA,CAAAA,IAAAA,EAAAA,OAAAA,CAAAA,CAAAA;AAChB,KAAA,CAAA;AAEA;;AAEC,MACD,MAAmBi3C,CAAAA,aAOlB,GAPD,SAAmBA,cAAcC,WAAwB,EAAA;AACtC,QAAA,IAAA,UAAA,CAAA;AAAjB,QAAA,IAAM2hD,YAAW,UAAA,GAAA,IAAI,CAACqB,IAAI,KAAA,IAAA,GAAA,KAAA,CAAA,GAAT,WAAWrB,QAAQ,CAAA;AACpC,QAAA,IAAIA,QAAU,EAAA;YACZjoF,sBAAY49B,CAAAA,SAAS,CAAC,IAAI,CAACwwB,YAAY,EAAE,IAAI,CAACppB,UAAU,CAACnG,WAAW,EAAEyH,WAAAA,CAAAA,CAAAA;SACjE,MAAA;AACL,YAAA,YAAA,CAAA,SAAA,CAAMD,aAAD,CAAeC,IAAAA,CAAAA,IAAAA,EAAAA,WAAAA,CAAAA,CAAAA;AACtB,SAAA;AACF,KAAA,CAAA;IAEA,MAAQyjD,CAAAA,4BAoBP,GApBD,SAAQA,4BAAAA,GAAAA;QACN,IAAM98B,IAAAA,GAAkB,IAAI,CAACD,KAAK,CAAA;AAClC,QAAA,IAAMg9B,kBAAqB/8B,GAAAA,IAAAA,GAAOA,IAAK8Z,CAAAA,eAAe,GAAG,CAAA,CAAA;QACzD,IAAMkjB,qBAAAA,GAAwB,IAAI,CAACb,kBAAkB,CAAA;AACrD,QAAA,IAAIa,qBAAuB,EAAA;YACzB,IAAMC,0BAAAA,GAA6BD,sBAAsBpoG,MAAM,CAAA;AAC/D,YAAA,IAAIqoG,+BAA+BF,kBAAoB,EAAA;gBACrD,IAAMG,oBAAAA,GAAuB,IAAIzoG,YAAasoG,CAAAA,kBAAAA,CAAAA,CAAAA;AAC9C,gBAAA,IAAIA,qBAAqBE,0BAA4B,EAAA;AACnDC,oBAAAA,oBAAAA,CAAqBnqG,GAAG,CAACiqG,qBAAAA,CAAAA,CAAAA;iBACpB,MAAA;AACL,oBAAA,IAAK,IAAIhoG,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAI+nG,oBAAoB/nG,CAAK,EAAA,CAAA;AAC3CkoG,wBAAAA,oBAAoB,CAACloG,CAAAA,CAAE,GAAGgoG,qBAAqB,CAAChoG,CAAE,CAAA,CAAA;AACpD,qBAAA;AACF,iBAAA;gBACA,IAAI,CAACmnG,kBAAkB,GAAGe,oBAAAA,CAAAA;AAC5B,aAAA;SACK,MAAA;AACL,YAAA,IAAI,CAACf,kBAAkB,GAAG,IAAI1nG,YAAasoG,CAAAA,kBAAAA,CAAAA,CAAAA;AAC7C,SAAA;AACF,KAAA,CAAA;IAEA,MACQd,CAAAA,qBAEP,GAHD,SACQA,qBAAAA,GAAAA;AACN,QAAA,IAAI,CAACzoF,gBAAgB,IAAIomC,mBAAAA,CAAoB0I,WAAW,CAAA;AAC1D,KAAA,CAAA;AAEA,IAAA,MAAA,CACQ45C,cAgBP,GAjBD,SACQA,cAAejpG,CAAAA,IAAoB,EAAEoE,KAAa,EAAA;QACxD,OAAQpE,IAAAA;AACN,YAAA,KAAKsoG,eAAe4B,gBAAgB;gBAClC,IAAM//E,UAAAA,GAAa,IAAI,CAACA,UAAU,CAAA;gBAClC,IAAY/lB,QAAQ,CAAG,EAAA;AACrB+lB,oBAAAA,UAAAA,CAAW+oB,WAAW,CAAC,mBAAA,CAAA,CAAA;AACvB/oB,oBAAAA,UAAAA,CAAWwnB,MAAM,CAAC42D,mBApPfA,CAoPmC4B,mBAAmB,EAAU/lG,KAAAA,CAAAA,CAAAA;iBAC9D,MAAA;AACL+lB,oBAAAA,UAAAA,CAAWipB,YAAY,CAAC,mBAAA,CAAA,CAAA;AAC1B,iBAAA;AACA,gBAAA,MAAA;AACF,YAAA,KAAKk1D,eAAe8B,eAAe;AACjC,gBAAA,IAAI,CAAC/nD,aAAa,CAAUj+C,MAAOs5C,SAAS,CAAA,CAAA;AAC5C,gBAAA,IAAI,CAACn9B,gBAAgB,IAAIomC,mBAAAA,CAAoB0I,WAAW,CAAA;AACxD,gBAAA,MAAA;AACJ,SAAA;AACF,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQg6C,UAeP,GAfD,SAAQA,UAAWgB,CAAAA,QAAc,EAAEjmG,KAAW,EAAA;YAClBimG,eAIJjmG,EAAAA,YAAAA,CAAAA;AAJIimG,QAAAA,IAAAA,sBAAAA,CAAAA;QAA1B,IAAMC,iBAAAA,GAAoBD,CAAAA,sBAAAA,GAAAA,QAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,CAAAA,eAAAA,GAAAA,QAAU3C,CAAAA,KAAK,KAAf2C,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,eAAAA,CAAiB1oG,MAAM,KAAA,IAAA,GAAvB0oG,sBAA2B,GAAA,CAAA,CAAA;AAChCA,QAAAA,IAAAA,kBAAAA,CAAAA;QAArB,IAAME,YAAAA,GAAeF,CAAAA,kBAAAA,GAAAA,QAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,QAAAA,CAAUtC,QAAQ,KAAlBsC,IAAAA,GAAAA,kBAAAA,GAAsB,IAAI,CAACt0D,MAAM,CAAA;AACtDs0D,QAAAA,QAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,SAAUhD,eAAe,CAACvoF,cAAc,CAAC,IAAI,CAACmqF,cAAc,CAAA,CAAA;AAEtC7kG,QAAAA,IAAAA,mBAAAA,CAAAA;QAAtB,IAAMomG,aAAAA,GAAgBpmG,CAAAA,mBAAAA,GAAAA,KAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,CAAAA,YAAAA,GAAAA,KAAOsjG,CAAAA,KAAK,KAAZtjG,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,YAAAA,CAAczC,MAAM,KAAA,IAAA,GAApByC,mBAAwB,GAAA,CAAA,CAAA;AAC7BA,QAAAA,IAAAA,eAAAA,CAAAA;QAAjB,IAAM2jG,QAAAA,GAAW3jG,CAAAA,eAAAA,GAAAA,KAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,KAAAA,CAAO2jG,QAAQ,KAAf3jG,IAAAA,GAAAA,eAAAA,GAAmB,IAAI,CAAC2xC,MAAM,CAAA;AAC/C3xC,QAAAA,KAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,MAAOijG,eAAe,CAACzoF,WAAW,CAAC,IAAI,CAACqqF,cAAc,CAAA,CAAA;AAEtD,QAAA,IAAIqB,sBAAsBE,aAAe,EAAA;AACvC,YAAA,IAAI,CAACvB,cAAc,CAACX,cAAAA,CAAe4B,gBAAgB,EAAEM,aAAAA,CAAAA,CAAAA;AACvD,SAAA;AACA,QAAA,IAAID,iBAAiBxC,QAAU,EAAA;AAC7B,YAAA,IAAI,CAACkB,cAAc,CAACX,cAAAA,CAAe8B,eAAe,EAAErC,QAAAA,CAAAA,CAAAA;AACtD,SAAA;AACF,KAAA,CAAA;AA/QWQ,IAAAA,aAAAA,CAAAA,mBAAAA,EAAAA;;YA4BPa,GAAAA,EAAAA,MAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACX,KAAK,CAAA;AACnB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAASrkG,KAAW,EAAA;gBAClB,IAAMimG,QAAAA,GAAW,IAAI,CAAC5B,KAAK,CAAA;AAC3B,gBAAA,IAAI4B,aAAajmG,KAAO,EAAA;oBACtB,IAAI,CAACilG,UAAU,CAACgB,QAAUjmG,EAAAA,KAAAA,CAAAA,CAAAA;oBAC1B,IAAI,CAACqkG,KAAK,GAAGrkG,KAAAA,CAAAA;AACf,iBAAA;AACF,aAAA;;;YAMIijF,GAAAA,EAAAA,mBAAAA;;;;MAAJ,SAAA,GAAA,GAAA;AACE,gBAAA,IAAI,CAACwiB,4BAA4B,EAAA,CAAA;gBACjC,OAAO,IAAI,CAACX,kBAAkB,CAAA;AAChC,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAsB9kG,KAAmB,EAAA;AACvC,gBAAA,IAAI,CAACylG,4BAA4B,EAAA,CAAA;gBACjC,IAAMxiB,iBAAAA,GAAoB,IAAI,CAAC6hB,kBAAkB,CAAA;AACjD,gBAAA,IAAI9kG,KAAMzC,CAAAA,MAAM,IAAI0lF,iBAAAA,CAAkB1lF,MAAM,EAAE;AAC5C0lF,oBAAAA,iBAAAA,CAAkBvnF,GAAG,CAACsE,KAAAA,CAAAA,CAAAA;iBACjB,MAAA;oBACL,IAAK,IAAIrC,IAAI,CAAG0B,EAAAA,CAAAA,GAAI4jF,kBAAkB1lF,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;AACxDslF,wBAAAA,iBAAiB,CAACtlF,CAAAA,CAAE,GAAGqC,KAAK,CAACrC,CAAE,CAAA,CAAA;AACjC,qBAAA;AACF,iBAAA;AACF,aAAA;;;YAKI2xE,GAAAA,EAAAA,aAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACxF,YAAY,CAAA;AAC1B,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAgB9pE,KAAkB,EAAA;AAChC,gBAAA,IAAI,IAAI,CAAC8pE,YAAY,KAAK9pE,KAAO,EAAA;AAC/B,oBAAA,IAAI,CAAC8pE,YAAY,CAACjsE,QAAQ,CAACmC,KAAAA,CAAAA,CAAAA;AAC7B,iBAAA;AACF,aAAA;;;YA4MI2jG,GAAAA,EAAAA,UAAAA;;;MAAJ,SAAA,GAAA,GAAA;AACE,gBAAA,OAAO,IAAI,CAACqB,IAAI,CAACrB,QAAQ,CAAA;AAC3B,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAa3jG,KAAa,EAAA;AACxB,gBAAA,IAAI,CAACglG,IAAI,CAACrB,QAAQ,GAAG3jG,KAAAA,CAAAA;AACvB,aAAA;;;YAKIsjG,GAAAA,EAAAA,OAAAA;;;MAAJ,SAAA,GAAA,GAAA;AACE,gBAAA,OAAO,IAAI,CAAC0B,IAAI,CAAC1B,KAAK,CAAA;AACxB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAUtjG,KAAyB,EAAA;AACjC,gBAAA,IAAI,CAACglG,IAAI,CAAC1B,KAAK,GAAGtjG,KAAAA,CAAAA;AACpB,aAAA;;;AArSWmkG,IAAAA,OAAAA,mBAAAA,CAAAA;EAA4BnkB,YAsSxC,EAAA;AAtSYmkB,mBACI4B,CAAAA,mBAAAA,GAAsB/hF,cAAezD,CAAAA,SAAS,CAAC,qBAAA,CAAA,CAAA;AADnD4jF,mBAEIoB,CAAAA,qBAAAA,GAAwBvhF,cAAezD,CAAAA,SAAS,CAAC,uBAAA,CAAA,CAAA;AAFrD4jF,mBAGIqB,CAAAA,oBAAAA,GAAuBxhF,cAAezD,CAAAA,SAAS,CAAC,sBAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACKjE;;IAGO,IAAM63C,cAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,cAAAA,CA0FCl6D,MAAc,EAAA;;QAExB,IAAMylD,QAAAA,GAAW,IAAIvmD,YAAa,CAAA;YAChC,CAAC,CAAA;YAAG,CAAC,CAAA;AAAG,YAAA,CAAA;AAAG,YAAA,CAAA;AACX,YAAA,CAAA;YAAG,CAAC,CAAA;AAAG,YAAA,CAAA;AAAG,YAAA,CAAA;YACV,CAAC,CAAA;AAAG,YAAA,CAAA;AAAG,YAAA,CAAA;YAAG,CAAC,CAAA;AAAG,SAAA,CAAA,CAAA;;QAGhB,IAAMipG,aAAAA,GAAgB,IAAIjpG,YAAa,CAAA;AACrC,YAAA,CAAA;YAAG,CAAC,CAAA;AAAG,YAAA,CAAA;AAAG,YAAA,CAAA;YACV,CAAC,CAAA;YAAG,CAAC,CAAA;AAAG,YAAA,CAAA;AAAG,YAAA,CAAA;YACX,CAAC,CAAA;AAAG,YAAA,CAAA;AAAG,YAAA,CAAA;AAAG,YAAA,CAAA;AAAE,SAAA,CAAA,CAAA;AAEd,QAAA,IAAMiwD,eAAe,IAAIh5B,QAAAA,CAASn2B,MAAQo9B,EAAAA,MAAAA,CAAO6Q,IAAI,CAAC,MAAA,CAAA,CAAA,CAAA;AACtDkhB,QAAAA,YAAAA,CAAattD,cAAc,CAAC,CAAA,CAAA,CAAA;AAC5BstD,QAAAA,YAAAA,CAAa3gB,WAAW,CAACvJ,UAAU,CAAC3G,OAAO,GAAG,KAAA,CAAA;AAC9C6wB,QAAAA,YAAAA,CAAa3gB,WAAW,CAACvJ,UAAU,CAACP,YAAY,GAAG,KAAA,CAAA;AAEnD,QAAA,IAAI,CAACuqB,QAAQ,GAAG,IAAI,CAACm5C,eAAe,CAACpoG,MAAQylD,EAAAA,QAAAA,CAAAA,CAAAA;AAC7C,QAAA,IAAI,CAACyJ,aAAa,GAAG,IAAI,CAACk5C,eAAe,CAACpoG,MAAQmoG,EAAAA,aAAAA,CAAAA,CAAAA;QAClD,IAAI,CAACh5C,YAAY,GAAGA,YAAAA,CAAAA;;QAGpB,IAAMk5C,UAAAA,GAAa,IAAIzpG,UAAW,CAAA;AAAC,YAAA,GAAA;AAAK,YAAA,GAAA;AAAK,YAAA,GAAA;AAAK,YAAA,GAAA;AAAI,SAAA,CAAA,CAAA;QAEtD,IAAI,CAAC66B,cAAc,GAAG,IAAI,CAAC6uE,iBAAiB,CAACtoG,MAAAA,EAAAA,CAAAA,EAA+ByC,aAAcyF,CAAAA,QAAQ,EAAEmgG,UAAAA,CAAAA,CAAAA;QACpG,IAAI,CAAC3uE,gBAAgB,GAAG,IAAI,CAAC4uE,iBAAiB,CAACtoG,MAAAA,EAAAA,CAAAA,EAAiCyC,aAAcyF,CAAAA,QAAQ,EAAEmgG,UAAAA,CAAAA,CAAAA;AAExG,QAAA,IAAMvrE,QAAW98B,GAAAA,MAAAA,CAAOiF,iBAAiB,CAAC63B,QAAQ,CAAA;AAClD,QAAA,IAAIA,QAAU,EAAA;YACZ,IAAI,CAAClD,mBAAmB,GAAG,IAAI,CAAC0uE,iBAAiB,CAC/CtoG,MAAAA,EAAAA,CAAAA,EAEAyC,aAAcyF,CAAAA,QAAQ,EACtBmgG,UAAAA,CAAAA,CAAAA;YAGF,IAAME,YAAAA,GAAe,IAAIzpG,WAAY,CAAA;AAAC,gBAAA,GAAA;AAAK,gBAAA,GAAA;AAAK,gBAAA,GAAA;AAAK,gBAAA,GAAA;AAAI,aAAA,CAAA,CAAA;YACzD,IAAI,CAAC66B,kBAAkB,GAAG,IAAI,CAAC2uE,iBAAiB,CAC9CtoG,MAAAA,EAAAA,CAAAA,EAEAyC,aAAcsD,CAAAA,iBAAiB,EAC/BwiG,YAAAA,CAAAA,CAAAA;AAEJ,SAAA;QAEA,IAAI,CAAC/7C,qBAAqB,GAAG,IAAI,CAACg8C,iBAAiB,CAACxoG,MAAAA,EAAQo9B,MAAO6Q,CAAAA,IAAI,CAAC,QAAA,CAAA,CAAA,CAAA;QACxE,IAAI,CAACs+B,mBAAmB,GAAG,IAAI,CAACi8B,iBAAiB,CAACxoG,MAAAA,EAAQo9B,MAAO6Q,CAAAA,IAAI,CAAC,MAAA,CAAA,CAAA,CAAA;AACtE,QAAA,IAAI,CAACi9B,yBAAyB,GAAG,IAAI,CAACu9B,yBAAyB,CAACzoG,MAAAA,CAAAA,CAAAA;;AA1IvDk6D,IAAAA,IAAAA,MAAAA,GAAAA,cAAAA,CAAAA,SAAAA,CAAAA;AA6IX,IAAA,MAAA,CAAQkuC,eAkBP,GAlBD,SAAQA,eAAgBpoG,CAAAA,MAAc,EAAEylD,QAAsB,EAAA;QAC5D,IAAMglB,IAAAA,GAAO,IAAIif,SAAU1pF,CAAAA,MAAAA,CAAAA,CAAAA;AAC3ByqE,QAAAA,IAAAA,CAAK5oE,cAAc,CAAC,CAAA,CAAA,CAAA;AACpB4oE,QAAAA,IAAAA,CAAKiX,iBAAiB,CAAC;AAAC,YAAA,IAAI3M,aAAc,CAAA,aAAA,EAAe,CAAG3B,EAAAA,mBAAAA,CAAoBr3E,OAAO,EAAE,CAAA,CAAA;AAAG,SAAA,CAAA,CAAA;QAC5F,IAAM6W,MAAAA,GAAS,IAAI2+D,MAAAA,CAAOvxE,MAAQy1E,EAAAA,cAAAA,CAAe4R,YAAY,EAAE5hC,QAAAA,EAAU4rB,WAAYlpE,CAAAA,MAAM,EAAE,IAAA,CAAA,CAAA;QAC7FsiE,IAAK+U,CAAAA,sBAAsB,CAAC5sE,MAAQ,EAAA,EAAA,CAAA,CAAA;AACpC63D,QAAAA,IAAAA,CAAK+V,UAAU,CAAC,CAAG,EAAA,CAAA,EAAG9K,aAAa0I,SAAS,CAAA,CAAA;AAC5Cp+E,QAAAA,MAAAA,CAAOO,eAAe,CAACkT,kBAAkB,CACvC,mBAAK,SAAA,eAAA,EAAA;;;AAED,gBAAA,OAAA,eAAMg3D,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,IAAAA,CAAAA,IAAAA,IAAAA,CAAAA;;;YAER/2D,MAAAA,CAAAA,cAEC,GAFDA,SAAAA,cAAAA,GAAAA;gBACEd,MAAOy/D,CAAAA,OAAO,CAACz/D,MAAAA,CAAO5H,IAAI,CAAA,CAAA;AAC5B,aAAA,CAAA;;AANiB7I,SAAAA,CAAAA,eAAAA,CAAAA,GAAAA,CAAAA,CAAAA;QASrB,OAAOsoE,IAAAA,CAAAA;AACT,KAAA,CAAA;IAEA,MAAQ69B,CAAAA,iBAsDP,GAtDD,SAAQA,iBACNtoG,CAAAA,MAAc,EACdtC,IAAiB,EACjBuI,MAAqB,EACrByiG,KAA+B,EAAA;QAE/B,IAAIzsG,OAAAA,CAAAA;QAEJ,OAAQyB,IAAAA;AACN,YAAA,KAAA,CAAA;AACE,gBAAA,IAAMirG,YAAY,IAAI3gG,SAAAA,CAAUhI,MAAQ,EAAA,CAAA,EAAG,GAAGiG,MAAQ,EAAA,KAAA,CAAA,CAAA;AACtD0iG,gBAAAA,SAAAA,CAAU9/F,cAAc,CAAC6/F,KAAAA,CAAAA,CAAAA;gBACzBzsG,OAAU0sG,GAAAA,SAAAA,CAAAA;AACV,gBAAA,MAAA;AACF,YAAA,KAAA,CAAA;AACE,gBAAA,IAAMC,iBAAiB,IAAI/+F,cAAAA,CAAe7J,QAAQ,CAAG,EAAA,CAAA,EAAG,GAAGiG,MAAQ,EAAA,KAAA,CAAA,CAAA;gBACnE2iG,cAAe//F,CAAAA,cAAc,CAAC,CAAG6/F,EAAAA,KAAAA,CAAAA,CAAAA;gBACjCzsG,OAAU2sG,GAAAA,cAAAA,CAAAA;AACV,gBAAA,MAAA;AACF,YAAA,KAAA,CAAA;AACE,gBAAA,IAAMC,WAAc,GAAA,IAAI3+F,WAAYlK,CAAAA,MAAAA,EAAQ,GAAGiG,MAAQ,EAAA,KAAA,CAAA,CAAA;AACvD,gBAAA,IAAK,IAAIxG,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAI,GAAGA,CAAK,EAAA,CAAA;AAC1BopG,oBAAAA,WAAAA,CAAYhgG,cAAc,CAACvG,eAAgBwmG,CAAAA,SAAS,GAAGrpG,CAAGipG,EAAAA,KAAAA,CAAAA,CAAAA;AAC5D,iBAAA;gBACAzsG,OAAU4sG,GAAAA,WAAAA,CAAAA;AACV,gBAAA,MAAA;AACF,YAAA;gBACE,MAAM,sBAAA,CAAA;AACV,SAAA;AAEA5sG,QAAAA,OAAAA,CAAQ2E,WAAW,GAAG,IAAA,CAAA;AACtBZ,QAAAA,MAAAA,CAAOO,eAAe,CAACkT,kBAAkB,CACvC,mBAAK,SAAA,eAAA,EAAA;;;AAED,gBAAA,OAAA,eAAMxX,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,OAAAA,CAAAA,IAAAA,IAAAA,CAAAA;;;YAERyX,MAAAA,CAAAA,cAcC,GAdDA,SAAAA,cAAAA,GAAAA;gBACE,OAAQhW,IAAAA;AACN,oBAAA,KAAA,CAAA;AACc,wBAAA,IAAI,CAAC0E,QAAQ,CAAEyG,cAAc,CAAC6/F,KAAAA,CAAAA,CAAAA;AAC1C,wBAAA,MAAA;AACF,oBAAA,KAAA,CAAA;AACmB,wBAAA,IAAI,CAACtmG,QAAQ,CAAEyG,cAAc,CAAC,CAAG6/F,EAAAA,KAAAA,CAAAA,CAAAA;AAClD,wBAAA,MAAA;AACF,oBAAA,KAAA,CAAA;AACE,wBAAA,IAAK,IAAIjpG,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAI,GAAGA,CAAK,EAAA,CAAA;4BACZ,IAAI,CAAC2C,QAAQ,CAAEyG,cAAc,CAACvG,eAAgBwmG,CAAAA,SAAS,GAAGrpG,CAAGipG,EAAAA,KAAAA,CAAAA,CAAAA;AAC7E,yBAAA;AACA,wBAAA,MAAA;AACJ,iBAAA;AACF,aAAA,CAAA;;AAlBiBvmG,SAAAA,CAAAA,eAAAA,CAAAA,GAAAA,CAAAA,CAAAA;QAqBrB,OAAOlG,OAAAA,CAAAA;AACT,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQusG,iBAeP,GAfD,SAAQA,iBAAkBxoG,CAAAA,MAAc,EAAE4tB,MAAc,EAAA;QACtD,IAAM4kB,QAAAA,GAAW,IAAIrc,QAAAA,CAASn2B,MAAQ4tB,EAAAA,MAAAA,CAAAA,CAAAA;QACtC,IAAM4gB,WAAAA,GAAcgE,SAAShE,WAAW,CAAA;AACxC,QAAA,IAAMlyC,MAASkyC,GAAAA,WAAAA,CAAYhP,UAAU,CAACL,gBAAgB,CAAA;AACtD7iC,QAAAA,MAAAA,CAAOgiC,OAAO,GAAG,IAAA,CAAA;QACjBhiC,MAAOoiC,CAAAA,sBAAsB,GAAGzd,WAAAA,CAAY6hB,WAAW,CAAA;QACvDxmC,MAAOuiC,CAAAA,2BAA2B,GAAG5d,WAAAA,CAAY+hB,mBAAmB,CAAA;QACpE1mC,MAAOsiC,CAAAA,sBAAsB,GAAG3d,WAAAA,CAAY0d,GAAG,CAAA;QAC/CriC,MAAOyiC,CAAAA,2BAA2B,GAAG9d,WAAAA,CAAY+hB,mBAAmB,CAAA;AACpE1mC,QAAAA,MAAAA,CAAOiiC,mBAAmB,GAAGjiC,MAAAA,CAAOmiC,mBAAmB,GAAGvd,eAAesd,GAAG,CAAA;QAC5EgQ,WAAYvJ,CAAAA,UAAU,CAACP,YAAY,GAAG,KAAA,CAAA;AACtC8J,QAAAA,WAAAA,CAAYpH,WAAW,CAACb,QAAQ,GAAGllB,SAASkmB,GAAG,CAAA;QAC/CiH,WAAYpC,CAAAA,eAAe,GAAG7qB,eAAAA,CAAgBmmD,WAAW,CAAA;AACzDl1B,QAAAA,QAAAA,CAAS5xC,WAAW,GAAG,IAAA,CAAA;QACvB,OAAO4xC,QAAAA,CAAAA;AACT,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQi2D,yBAIP,GAJD,SAAQA,yBAAAA,CAA0BzoG,MAAc,EAAA;AAC9C,QAAA,IAAMwyC,WAAW,IAAIrc,QAAAA,CAASn2B,MAAQo9B,EAAAA,MAAAA,CAAO6Q,IAAI,CAAC,YAAA,CAAA,CAAA,CAAA;AAClDuE,QAAAA,QAAAA,CAAS5xC,WAAW,GAAG,IAAA,CAAA;QACvB,OAAO4xC,QAAAA,CAAAA;AACT,KAAA,CAAA;AA9OW0nB,IAAAA,cAAAA,CAMJG,8BA4BN,GA5BD,SAAOA,8BAAAA,CAA+BhoB,eAAsC,EAAA;QAC1E,IAAM02D,iBAAAA,GAAoB12D,eAAoB/9B,KAAAA,qBAAAA,CAAsB00F,iBAAiB,CAAA;QACrF,IAAI36D,YAAAA,CAAAA;QACJ,IAAI7J,eAAAA,CAAAA;AAEJ,QAAA,IAAIukE,iBAAmB,EAAA;YACrB16D,YAAe6rB,GAZRA,eAYuB+uC,2BAA2B,CAAA;AACzD,YAAA,IAAI56D,YAAc,EAAA;gBAChB,OAAOA,YAAAA,CAAAA;AACT,aAAA;YAfO6rB,cAgBQ+uC,CAAAA,2BAA2B,GAAG56D,YAAAA,GAAsC,EAAC,CAAA;AACpF7J,YAAAA,eAAAA,GAAkBpjB,gBAAgBwkB,SAAS,CAAA;SACtC,MAAA;YACLyI,YAAe6rB,GAnBRA,eAmBuBgvC,4BAA4B,CAAA;AAC1D,YAAA,IAAI76D,YAAc,EAAA;gBAChB,OAAOA,YAAAA,CAAAA;AACT,aAAA;YAtBO6rB,cAuBQgvC,CAAAA,4BAA4B,GAAG76D,YAAAA,GAAsC,EAAC,CAAA;AACrF7J,YAAAA,eAAAA,GAAkBpjB,gBAAgB0kB,OAAO,CAAA;AAC3C,SAAA;AAEAuI,QAAAA,YAAY,CAAC/sB,qBAAAA,CAAsBwnB,mBAAmB,CAAC,GAAG,IAAA,CAAA;AAC1DuF,QAAAA,YAAY,CAAC/sB,qBAAAA,CAAsB8nB,qBAAqB,CAAC,GAAG,IAAA,CAAA;AAC5DiF,QAAAA,YAAY,CAAC/sB,qBAAAA,CAAsB0nB,0BAA0B,CAAC,GAAG,CAAA,CAAA;AACjEqF,QAAAA,YAAY,CAAC/sB,qBAAAA,CAAsBgoB,gCAAgC,CAAC,GAAG9E,eAAAA,CAAAA;AACvE6J,QAAAA,YAAY,CAAC/sB,qBAAAA,CAAsBkoB,+BAA+B,CAAC,GAAGhF,eAAAA,CAAAA;QAEtE,OAAO6J,YAAAA,CAAAA;AACT,KAAA,CAAA;AAlCW6rB,IAAAA,cAAAA,CAoCJC,uBAoCN,GApCD,SAAOA,uBAAAA,CAAwBf,QAA6B,EAAA;QAC1D,IAAM+vC,WAAAA,GAAc/vC,QAAaP,KAAAA,mBAAAA,CAAoBuwC,SAAS,CAAA;QAC9D,IAAI/6D,YAAAA,CAAAA;QACJ,IAAIg7D,aAAAA,CAAAA;AAEJ,QAAA,IAAIF,WAAa,EAAA;YACf96D,YAAe6rB,GA1CRA,eA0CuBovC,+BAA+B,CAAA;AAC7D,YAAA,IAAIj7D,YAAc,EAAA;gBAChB,OAAOA,YAAAA,CAAAA;AACT,aAAA;YA7CO6rB,cA8CQovC,CAAAA,+BAA+B,GAAGj7D,YAAAA,GAAsC,EAAC,CAAA;AACxFg7D,YAAAA,aAAAA,GAAgB5nF,iBAAiBgqB,iBAAiB,CAAA;SAC7C,MAAA;YACL4C,YAAe6rB,GAjDRA,eAiDuBqvC,+BAA+B,CAAA;AAC7D,YAAA,IAAIl7D,YAAc,EAAA;gBAChB,OAAOA,YAAAA,CAAAA;AACT,aAAA;YApDO6rB,cAqDQqvC,CAAAA,+BAA+B,GAAGl7D,YAAAA,GAAsC,EAAC,CAAA;AACxFg7D,YAAAA,aAAAA,GAAgB5nF,iBAAiBkqB,iBAAiB,CAAA;AACpD,SAAA;AAEA0C,QAAAA,YAAY,CAAC/sB,qBAAAA,CAAsBwnB,mBAAmB,CAAC,GAAG,IAAA,CAAA;AAC1DuF,QAAAA,YAAY,CAAC/sB,qBAAAA,CAAsBooB,8BAA8B,CAAC,GAAG2/D,aAAAA,CAAAA;AACrEh7D,QAAAA,YAAY,CAAC/sB,qBAAAA,CAAsBsoB,6BAA6B,CAAC,GAAGy/D,aAAAA,CAAAA;AACpEh7D,QAAAA,YAAY,CAAC/sB,qBAAsBgoB,CAAAA,gCAAgC,CAAC,GAAGloB,gBAAgBglB,MAAM,CAAA;AAC7FiI,QAAAA,YAAY,CAAC/sB,qBAAsBkoB,CAAAA,+BAA+B,CAAC,GAAGpoB,gBAAgBglB,MAAM,CAAA;QAC5F,IAAMojE,oBAAAA,GAAuB/nF,iBAAiB+mB,IAAI,CAAA;AAClD6F,QAAAA,YAAY,CAAC/sB,qBAAAA,CAAsBwoB,8BAA8B,CAAC,GAAG0/D,oBAAAA,CAAAA;AACrEn7D,QAAAA,YAAY,CAAC/sB,qBAAAA,CAAsB0oB,6BAA6B,CAAC,GAAGw/D,oBAAAA,CAAAA;AACpEn7D,QAAAA,YAAY,CAAC/sB,qBAAAA,CAAsB4oB,+BAA+B,CAAC,GAAGs/D,oBAAAA,CAAAA;AACtEn7D,QAAAA,YAAY,CAAC/sB,qBAAAA,CAAsB8oB,8BAA8B,CAAC,GAAGo/D,oBAAAA,CAAAA;AACrEn7D,QAAAA,YAAY,CAAC/sB,qBAAsBmf,CAAAA,yBAAyB,CAAC,GAAGtf,eAAemxB,IAAI,CAAA;AACnFjE,QAAAA,YAAY,CAAC/sB,qBAAAA,CAAsBsjB,iBAAiB,CAAC,GAAG,KAAA,CAAA;AACxDyJ,QAAAA,YAAY,CAAC/sB,qBAAsBwlB,CAAAA,mBAAmB,CAAC,GAAGzlB,SAASkmB,GAAG,CAAA;QAEtE,OAAO8G,YAAAA,CAAAA;AACT,KAAA,CAAA;AAxEW6rB,IAAAA,OAAAA,cAAAA,CAAAA;AA+OZ,CAAA,EAAA,CAAA;AA/OYA,cAAAA,CACI+uC,2BAAqD,GAAA,IAAA,CAAA;AADzD/uC,cAAAA,CAEIgvC,4BAAsD,GAAA,IAAA,CAAA;AAF1DhvC,cAAAA,CAGIovC,+BAAyD,GAAA,IAAA,CAAA;AAH7DpvC,cAAAA,CAIIqvC,+BAAyD,GAAA,IAAA;;AChCnE,IAAA,UAAA,iBAAA,WAAA;AAAeE,IAAAA,SAAAA,UAAAA,CAIR/rG,IAAiB,EAAA;QAC3B,IAAI,CAAC+oB,KAAK,GAAG/oB,IAAAA,CAAAA;;AALK+rG,IAAAA,IAAAA,MAAAA,GAAAA,UAAAA,CAAAA,SAAAA,CAAAA;IAQpB3hD,MAAAA,CAAAA,iBAMC,GANDA,SAAAA,iBAAAA,GAAAA;QACE,IAAMrwC,QAAAA,GAAW,IAAI,CAACyvC,SAAS,CAAA;QAC/B,IAAK,IAAIznD,IAAIgY,QAASpY,CAAAA,MAAM,GAAG,CAAGI,EAAAA,CAAAA,IAAK,GAAGA,CAAK,EAAA,CAAA;YAC7CgY,QAAQ,CAAChY,EAAE,CAACzD,OAAO,IAAIyb,QAAQ,CAAChY,CAAE,CAAA,CAACzD,OAAO,EAAA,CAAA;AAC5C,SAAA;AACAyb,QAAAA,QAAAA,CAASpY,MAAM,GAAG,CAAA,CAAA;AACpB,KAAA,CAAA;AAdoBoqG,IAAAA,OAAAA,UAAAA,CAAAA;AAiBrB,CAAA,EAAA;;ACfD;;IAGO,IAAMC,oBAAN,iBAAA,SAAA,UAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,oBAAAA,EAAAA,UAAAA,CAAAA,CAAAA;aAAAA,oBAGChsG,CAAAA,IAAiB,EAAEisG,eAA2B,EAAA;AAA3BA,QAAAA,IAAAA,4BAAAA,eAA0B,GAAA,CAAA,CAAA;;gBACvD,UAAMjsG,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,IAAAA,CAAAA,IAAAA,IAAAA,CAAAA;QACN,KAAKksG,CAAAA,iBAAiB,GAAGD,eAAkB,GAAA,CAAA,CAAA;AAC3C,QAAA,IAAMlyF,QAAY,GAAA,KAAA,CAAKyvC,SAAS,GAAG,IAAI3nD,KAASoqG,CAAAA,eAAAA,CAAAA,CAAAA;AAChD,QAAA,IAAK,IAAIlqG,CAAI,GAAA,CAAA,EAAGA,CAAIkqG,GAAAA,eAAAA,EAAiB,EAAElqG,CAAG,CAAA;YACxCgY,QAAQ,CAAChY,CAAE,CAAA,GAAG,IAAI/B,IAAAA,EAAAA,CAAAA;AACpB,SAAA;;;AATSgsG,IAAAA,IAAAA,MAAAA,GAAAA,oBAAAA,CAAAA,SAAAA,CAAAA;AAYX;;MAGAtsG,MAAAA,CAAAA,GAKC,GALDA,SAAAA,GAAAA,GAAAA;AACE,QAAA,IAAI,IAAI,CAACwsG,iBAAiB,GAAG,CAAG,EAAA;YAC9B,OAAO,IAAI,IAAI,CAACnjF,KAAK,EAAA,CAAA;AACvB,SAAA;AACA,QAAA,OAAO,IAAI,CAACygC,SAAS,CAAC,IAAI,CAAC0iD,iBAAiB,EAAG,CAAA,CAAA;AACjD,KAAA,CAAA;AAEA;;AAEC,MACD14B,MAAAA,CAAAA,MAEC,GAFDA,SAAAA,QAAOp2D,OAAU,EAAA;QACf,IAAI,CAACosC,SAAS,CAAC,EAAE,IAAI,CAAC0iD,iBAAiB,CAAC,GAAG9uF,OAAAA,CAAAA;AAC7C,KAAA,CAAA;AA3BW4uF,IAAAA,OAAAA,oBAAAA,CAAAA;EAAqDD,UA4BjE;;AC5BD;;IAGO,IAAMI,iBAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,iBAAAA,GAAAA,EAAAA;AAAAA,IAAAA,IAAAA,MAAAA,GAAAA,iBAAAA,CAAAA,SAAAA,CAAAA;IAMX7tG,MAAAA,CAAAA,OAKC,GALDA,SAAAA,OAAAA,GAAAA;QACE,IAAI,CAACg2C,KAAK,GAAG,IAAA,CAAA;QACb,IAAI,CAACmB,UAAU,GAAG,IAAA,CAAA;QAClB,IAAI,CAACD,OAAO,GAAG,IAAA,CAAA;QACf,IAAI,CAACJ,OAAO,GAAG,IAAA,CAAA;AACjB,KAAA,CAAA;AAXW+2D,IAAAA,OAAAA,iBAAAA,CAAAA;AAYZ,CAAA,EAAA;;AClBD;;IAGO,IAAMC,UAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,UAAAA,CAET,KAAqB,EACdxkG,IAAa,EAAA;aADb43B,KAAAA,GAAAA,KAAAA,CAAAA;aACA53B,IAAAA,GAAAA,IAAAA,CAAAA;;AAHEwkG,IAAAA,IAAAA,MAAAA,GAAAA,UAAAA,CAAAA,SAAAA,CAAAA;IAMX9tG,MAAAA,CAAAA,OAAmB,GAAnBA,SAAAA,OAAkB,GAAA,EAAA,CAAA;AANP8tG,IAAAA,OAAAA,UAAAA,CAAAA;AAOZ,CAAA,EAAA;;ACOD;;IAGO,IAAMC,cAAN,iBAAA,WAAA;aAAMA,cAeC/pG,CAAAA,MAAc,EAAE+oD,cAAsB,EAAA;AANlD1V,QAAAA,IAAAA,CAAAA,iBAAAA,GAAoBq8B,OAAOC,gBAAgB,CAAA;AAC3Cr8B,QAAAA,IAAAA,CAAAA,eAAAA,GAAkBo8B,OAAOI,gBAAgB,CAAA;aACzC78B,iBAAoB,GAAA,CAAA,CAAA;QAKlB,IAAMma,SAAAA,GAAY,IAAIkxB,SAAUt+E,CAAAA,MAAAA,CAAAA,CAAAA;;QAGhCotD,SAAU2xB,CAAAA,gBAAgB,CAAC,IAAIhK,aAAAA,CAAc,YAAY,CAAG3B,EAAAA,mBAAAA,CAAoB56C,OAAO,EAAE,CAAA,CAAA,CAAA,CAAA;QACzF40B,SAAU2xB,CAAAA,gBAAgB,CAAC,IAAIhK,aAAAA,CAAc,cAAc,EAAI3B,EAAAA,mBAAAA,CAAoB3nE,OAAO,EAAE,CAAA,CAAA,CAAA,CAAA;QAC5F2hD,SAAU2xB,CAAAA,gBAAgB,CAAC,IAAIhK,aAAAA,CAAc,WAAW,EAAI3B,EAAAA,mBAAAA,CAAoBr3E,OAAO,EAAE,CAAA,CAAA,CAAA,CAAA;AACzFqxD,QAAAA,SAAAA,CAAUvrD,cAAc,CAAC,CAAA,CAAA,CAAA;;AAGzB,QAAA,IAAMmoG,YAAe,GAAA,EAAA,CAAA;QACrB,IAAMzX,YAAAA,GAAe,IAAIhhB,MAAAA,CACvBvxE,MACAy1E,EAAAA,cAAAA,CAAe4R,YAAY,EAC3Bt+B,cAAiBihD,GAAAA,YAAAA,EACjB34B,WAAY8V,CAAAA,OAAO,EACnB,IAAA,CAAA,CAAA;AAEF/5B,QAAAA,SAAAA,CAAUoyB,sBAAsB,CAAC,CAAG,EAAA,IAAI8B,oBAAoBiR,YAAcyX,EAAAA,YAAAA,CAAAA,CAAAA,CAAAA;;QAG1E,IAAMza,WAAAA,GAAc,IAAIhe,MAAAA,CAAOvxE,MAAQy1E,EAAAA,cAAAA,CAAega,WAAW,EAAE1mC,cAAiB,GAAA,CAAA,EAAGsoB,WAAY8V,CAAAA,OAAO,EAAE,IAAA,CAAA,CAAA;AAC5G/5B,QAAAA,SAAAA,CAAU0yB,qBAAqB,CAAC,IAAI9B,kBAAmBuR,CAAAA,WAAAA,EAAapc,YAAYO,MAAM,CAAA,CAAA,CAAA;QAEtF,IAAI,CAACtmB,SAAS,GAAGA,SAAAA,CAAAA;QACjB,IAAI,CAAC3H,QAAQ,GAAG,IAAIvmD,aAAaqzF,YAAavnF,CAAAA,IAAI,CAAC4H,MAAM,CAAA,CAAA;QACzD,IAAI,CAACkgC,OAAO,GAAG,IAAIj0C,YAAY0wF,WAAYvkF,CAAAA,IAAI,CAAC4H,MAAM,CAAA,CAAA;QACtD,IAAI,CAACq3F,eAAe,GAAG;YAAC,IAAIH,UAAAA,CAAW,GAAG/gD,cAAiB,GAAA,CAAA,CAAA;AAAG,SAAA,CAAA;;AA1CrDghD,IAAAA,IAAAA,MAAAA,GAAAA,cAAAA,CAAAA,SAAAA,CAAAA;AA6CXjlD,IAAAA,MAAAA,CAAAA,gBAcC,GAdDA,SAAAA,gBAAAA,CAAiBoD,WAAmB,EAAA;AAClC,QAAA,IAAMgiD,IAAO,GAAA,IAAI,CAACC,aAAa,CAACjiD,WAAc,GAAA,CAAA,CAAA,CAAA;AAC9C,QAAA,IAAIgiD,IAAM,EAAA;AACR,YAAA,IAAMn4D,QAAWg4D,GAhDVA,cAgDyBK,CAAAA,YAAY,CAAChtG,GAAG,EAAA,CAAA;YAChD20C,QAASC,CAAAA,KAAK,GAAG,IAAI,CAAA;AACrBD,YAAAA,QAAAA,CAASoB,UAAU,GAAG+2D,IAAAA,CAAAA;AAEtB,YAAA,IAAMh3D,OAAU62D,GApDTA,cAoDwBM,CAAAA,WAAW,CAACjtG,GAAG,EAAA,CAAA;YAC9C81C,OAAQirC,CAAAA,QAAQ,GAAGzI,YAAAA,CAAa0I,SAAS,CAAA;AACzCrsC,YAAAA,QAAAA,CAASmB,OAAO,GAAGA,OAAAA,CAAAA;YACnB,OAAOnB,QAAAA,CAAAA;AACT,SAAA;QAEA,OAAO,IAAA,CAAA;AACT,KAAA,CAAA;AAEA8S,IAAAA,MAAAA,CAAAA,YAIC,GAJDA,SAAAA,YAAAA,CAAa9S,QAA2B,EAAA;AACtC,QAAA,IAAI,CAACu4D,SAAS,CAACv4D,QAAAA,CAASoB,UAAU,CAAA,CAAA;AA9DzB42D,QAAAA,cAAAA,CA+DMM,WAAW,CAACn5B,MAAM,CAACn/B,SAASmB,OAAO,CAAA,CAAA;QA/DzC62D,cAgEMK,CAAAA,YAAY,CAACl5B,MAAM,CAACn/B,QAAAA,CAAAA,CAAAA;AACrC,KAAA,CAAA;IAEAm3B,MAAAA,CAAAA,YAmBC,GAnBDA,SAAAA,YAAAA,GAAAA;;;QAGE,IAA0D,KAAA,GAAA,IAAI,EAAtD9b,SAAkD,GAAA,KAAA,CAAlDA,WAAW/Z,iBAAuC,GAAA,KAAA,CAAvCA,iBAAmBC,EAAAA,eAAAA,GAAoB,KAApBA,CAAAA,eAAAA,CAAAA;AACtC,QAAA,IAAID,sBAAsBq8B,MAAOC,CAAAA,gBAAgB,IAAIr8B,eAAoBo8B,KAAAA,MAAAA,CAAOI,gBAAgB,EAAE;AAChG1iB,YAAAA,SAAAA,CAAUqxB,oBAAoB,CAAC,CAAA,CAAE,CAAC7rE,MAAM,CAACy/D,OAAO,CAC9C,IAAI,CAAC5sB,QAAQ,EACbpS,iBAAoB,GAAA,CAAA,EACpBA,mBACAC,eAAkBD,GAAAA,iBAAAA,EAClBi+B,eAAei5B,OAAO,CAAA,CAAA;AAGxB,YAAA,IAAI,CAACl3D,iBAAiB,GAAGq8B,MAAAA,CAAOC,gBAAgB,CAAA;AAChD,YAAA,IAAI,CAACr8B,eAAe,GAAGo8B,MAAAA,CAAOI,gBAAgB,CAAA;AAChD,SAAA;AAEA1iB,QAAAA,SAAAA,CAAU4yB,kBAAkB,CAACptE,MAAM,CAACy/D,OAAO,CAAC,IAAI,CAACv/B,OAAO,EAAE,GAAG,CAAG,EAAA,IAAI,CAACG,iBAAiB,EAAEq+B,eAAei5B,OAAO,CAAA,CAAA;QAC9G,IAAI,CAACt3D,iBAAiB,GAAG,CAAA,CAAA;AAC3B,KAAA,CAAA;IAEA5yC,MAAAA,CAAAA,OAMC,GANDA,SAAAA,OAAAA,GAAAA;AACE,QAAA,IAAI,CAAC+sD,SAAS,CAACvrD,cAAc,CAAC,CAAC,CAAA,CAAA,CAAA;QAC/B,IAAI,CAACurD,SAAS,CAAC/sD,OAAO,EAAA,CAAA;QACtB,IAAI,CAAC+sD,SAAS,GAAG,IAAA,CAAA;QACjB,IAAI,CAAC3H,QAAQ,GAAG,IAAA,CAAA;QAChB,IAAI,CAAC3S,OAAO,GAAG,IAAA,CAAA;AACjB,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQq3D,aAmBP,GAnBD,SAAQA,aAAAA,CAAcK,QAAgB,EAAA;QACpC,IAAMC,KAAAA,GAAQ,IAAI,CAACR,eAAe,CAAA;QAClC,IAAMhlF,IAAAA,GAAO8kF,cAlGJA,CAkGmBW,QAAQ,CAAA;QACpC,IAAK,IAAIjrG,CAAI,GAAA,CAAA,EAAG0B,CAAIspG,GAAAA,KAAAA,CAAMprG,MAAM,EAAEI,CAAAA,GAAI0B,CAAG,EAAA,EAAE1B,CAAG,CAAA;YAC5C,IAAMyqG,IAAAA,GAAOO,KAAK,CAAChrG,CAAE,CAAA,CAAA;YACrB,IAAM6F,IAAAA,GAAO4kG,KAAK5kG,IAAI,CAAA;AACtB,YAAA,IAAIA,OAAOklG,QAAU,EAAA;gBACnB,IAAMG,OAAAA,GAAU1lF,KAAK7nB,GAAG,EAAA,CAAA;gBACxButG,OAAQztE,CAAAA,KAAK,GAAGgtE,IAAAA,CAAKhtE,KAAK,CAAA;AAC1BytE,gBAAAA,OAAAA,CAAQrlG,IAAI,GAAGklG,QAAAA,CAAAA;AACfN,gBAAAA,IAAAA,CAAKhtE,KAAK,IAAIstE,QAAAA,CAAAA;AACdN,gBAAAA,IAAAA,CAAK5kG,IAAI,IAAIklG,QAAAA,CAAAA;gBACb,OAAOG,OAAAA,CAAAA;aACF,MAAA,IAAIrlG,SAASklG,QAAU,EAAA;gBAC5BC,KAAM9oG,CAAAA,MAAM,CAAClC,CAAG,EAAA,CAAA,CAAA,CAAA;gBAChB,OAAOyqG,IAAAA,CAAAA;AACT,aAAA;AACF,SAAA;QACA,OAAO,IAAA,CAAA;AACT,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQI,SAwCP,GAxCD,SAAQA,SAAAA,CAAUJ,IAAgB,EAAA;AAChC,QAAA,IAAQhtE,KAAgBgtE,GAAAA,IAAAA,CAAhBhtE,KAAO53B,EAAAA,IAAAA,GAAS4kG,IAAT5kG,CAAAA,IAAAA,CAAAA;QACf,IAAMslG,SAAAA,GAAY,IAAI,CAACX,eAAe,CAAA;AACtC,QAAA,IAAMv0F,MAAMwnB,KAAQ53B,GAAAA,IAAAA,CAAAA;QACpB,IAAM2f,IAAAA,GAAO8kF,cAzHJA,CAyHmBW,QAAQ,CAAA;QACpC,IAAK,IAAIjrG,CAAI,GAAA,CAAA,EAAGorG,OAAUD,GAAAA,SAAAA,CAAUvrG,MAAM,EAAEI,CAAAA,GAAIorG,OAAS,EAAA,EAAEprG,CAAG,CAAA;YAC5D,IAAMqrG,WAAAA,GAAcF,SAAS,CAACnrG,CAAE,CAAA,CAAA;YAChC,IAAMsrG,QAAAA,GAAWD,YAAY5tE,KAAK,CAAA;YAClC,IAAM8tE,MAAAA,GAASD,QAAWD,GAAAA,WAAAA,CAAYxlG,IAAI,CAAA;AAE1C,YAAA,IAAIoQ,MAAMq1F,QAAU,EAAA;;gBAElBH,SAAUjpG,CAAAA,MAAM,CAAClC,CAAAA,EAAG,CAAGyqG,EAAAA,IAAAA,CAAAA,CAAAA;AACvB,gBAAA,OAAA;aACK,MAAA,IAAIx0F,QAAQq1F,QAAU,EAAA;;AAE3BD,gBAAAA,WAAAA,CAAY5tE,KAAK,GAAGA,KAAAA,CAAAA;AACpB4tE,gBAAAA,WAAAA,CAAYxlG,IAAI,IAAIA,IAAAA,CAAAA;AACpB2f,gBAAAA,IAAAA,CAAKisD,MAAM,CAACg5B,IAAAA,CAAAA,CAAAA;AACZ,gBAAA,OAAA;aACK,MAAA,IAAIhtE,UAAU8tE,MAAQ,EAAA;;AAE3BF,gBAAAA,WAAAA,CAAYxlG,IAAI,IAAIA,IAAAA,CAAAA;AACpB2f,gBAAAA,IAAAA,CAAKisD,MAAM,CAACg5B,IAAAA,CAAAA,CAAAA;AACZ,gBAAA,IAAMe,YAAYxrG,CAAI,GAAA,CAAA,CAAA;AACtB,gBAAA,IAAIwrG,YAAYJ,OAAS,EAAA;oBACvB,IAAMK,YAAAA,GAAeN,SAAS,CAACK,SAAU,CAAA,CAAA;oBACzC,IAAIv1F,GAAAA,KAAQw1F,YAAahuE,CAAAA,KAAK,EAAE;;wBAE9B4tE,WAAYxlG,CAAAA,IAAI,IAAI4lG,YAAAA,CAAa5lG,IAAI,CAAA;wBACrCslG,SAAUjpG,CAAAA,MAAM,CAACspG,SAAW,EAAA,CAAA,CAAA,CAAA;AAC5BhmF,wBAAAA,IAAAA,CAAKisD,MAAM,CAACg6B,YAAAA,CAAAA,CAAAA;AACd,qBAAA;AACF,iBAAA;AACA,gBAAA,OAAA;AACF,aAAA;AACF,SAAA;;AAGAN,QAAAA,SAAAA,CAAUrpG,IAAI,CAAC2oG,IAAAA,CAAAA,CAAAA;AACjB,KAAA,CAAA;AA7JWH,IAAAA,OAAAA,cAAAA,CAAAA;AA8JZ,CAAA,EAAA,CAAA;AA9JYA,cACJW,CAAAA,QAAAA,GAAW,IAAIhB,oBAAAA,CAAqBI,UAAY,EAAA,EAAA,CAAA,CAAA;AAD5CC,cAEJK,CAAAA,YAAAA,GAAe,IAAIV,oBAAAA,CAAqBG,iBAAmB,EAAA,EAAA,CAAA,CAAA;AAFvDE,cAGJM,CAAAA,WAAAA,GAAc,IAAIX,oBAAAA,CAAqBrrB,OAAS,EAAA,EAAA,CAAA;;ACrBzD;;IAGO,IAAM8sB,qBAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,qBAAAA,CAIT,MAAqB,EACdpiD,cAAqB,EAAA;AAA5B,QAAA,IAAOA,2BAAAA,cAAiB,GAAA,IAAA,CAAA;aADjB/oD,MAAAA,GAAAA,MAAAA,CAAAA;aACA+oD,cAAAA,GAAAA,cAAAA,CAAAA;AAJTqiD,QAAAA,IAAAA,CAAAA,eAAAA,GAAkB,IAAI7rG,KAAAA,EAAAA,CAAAA;;AADX4rG,IAAAA,IAAAA,MAAAA,GAAAA,qBAAAA,CAAAA,SAAAA,CAAAA;AAQXrmD,IAAAA,MAAAA,CAAAA,gBAcC,GAdDA,SAAAA,gBAAAA,CAAiBoD,WAAmB,EAAA;YAWpBkjD,gBAAgB/rG,EAAAA,OAAAA,CAAAA;QAV9B,IAAM+rG,eAAAA,GAAkB,IAAI,CAACA,eAAe,CAAA;QAC5C,IAAM/rG,MAAAA,GAAS+rG,gBAAgB/rG,MAAM,CAAA;AACrC,QAAA,IAAI0yC,QAA8B,GAAA,IAAA,CAAA;AAClC,QAAA,IAAK,IAAItyC,CAAI,GAAA,CAAA,EAAGA,CAAIJ,GAAAA,MAAAA,EAAQ,EAAEI,CAAG,CAAA;AAC/BsyC,YAAAA,QAAAA,GAAWq5D,eAAe,CAAC3rG,CAAE,CAAA,CAACqlD,gBAAgB,CAACoD,WAAAA,CAAAA,CAAAA;AAC/C,YAAA,IAAInW,QAAU,EAAA;gBACZ,OAAOA,QAAAA,CAAAA;AACT,aAAA;AACF,SAAA;QAEA,IAAM/mC,IAAAA,GAAQogG,CAAAA,gBAAAA,GAAAA,eAAAA,EAAgB/rG,OAAAA,GAAAA,MAAAA,CAAO,KAAvB+rG,gBAAe,CAAC/rG,QAAO,GAAK,IAAI0qG,eAAe,IAAI,CAAC/pG,MAAM,EAAE,IAAI,CAAC+oD,cAAc,CAAA,CAAA,CAAA;QAC7FhX,QAAW/mC,GAAAA,IAAAA,CAAK85C,gBAAgB,CAACoD,WAAAA,CAAAA,CAAAA;QACjC,OAAOnW,QAAAA,CAAAA;AACT,KAAA,CAAA;AAEA8S,IAAAA,MAAAA,CAAAA,YAEC,GAFDA,SAAAA,YAAAA,CAAa9S,QAA2B,EAAA;QACtCA,QAASC,CAAAA,KAAK,CAAC6S,YAAY,CAAC9S,QAAAA,CAAAA,CAAAA;AAC9B,KAAA,CAAA;IAEAm3B,MAAAA,CAAAA,YAKC,GALDA,SAAAA,YAAAA,GAAAA;QACE,IAAQkiC,eAAoB,GAAA,IAAI,CAAxBA,eAAAA,CAAAA;QACR,IAAK,IAAI3rG,CAAI,GAAA,CAAA,EAAG0B,CAAIiqG,GAAAA,eAAAA,CAAgB/rG,MAAM,EAAEI,CAAAA,GAAI0B,CAAG,EAAA,EAAE1B,CAAG,CAAA;YACtD2rG,eAAe,CAAC3rG,CAAE,CAAA,CAACypE,YAAY,EAAA,CAAA;AACjC,SAAA;AACF,KAAA,CAAA;IAEA7oE,MAAAA,CAAAA,OAQC,GARDA,SAAAA,OAAAA,GAAAA;QACE,IAAQ+qG,eAAoB,GAAA,IAAI,CAAxBA,eAAAA,CAAAA;QACR,IAAK,IAAI3rG,CAAI,GAAA,CAAA,EAAG0B,CAAIiqG,GAAAA,eAAAA,CAAgB/rG,MAAM,EAAEI,CAAAA,GAAI0B,CAAG,EAAA,EAAE1B,CAAG,CAAA;YACtD2rG,eAAe,CAAC3rG,CAAE,CAAA,CAACY,OAAO,EAAA,CAAA;AAC5B,SAAA;AACA+qG,QAAAA,eAAAA,CAAgB/rG,MAAM,GAAG,CAAA,CAAA;QACzB,IAAI,CAAC+rG,eAAe,GAAG,IAAA,CAAA;QACvB,IAAI,CAACprG,MAAM,GAAG,IAAA,CAAA;AAChB,KAAA,CAAA;AA3CWmrG,IAAAA,OAAAA,qBAAAA,CAAAA;AA4CZ,CAAA,EAAA;;AC7CD;;IAGO,IAAME,cAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,cAAAA,CAICrrG,MAAc,EAAA;AACxB,QAAA,IAAI,CAAC8sD,uBAAuB,GAAG,IAAIq+C,qBAAsBnrG,CAAAA,MAAAA,CAAAA,CAAAA;AACzD,QAAA,IAAI,CAACsrE,yBAAyB,GAAG,IAAI6/B,sBAAsBnrG,MAAQ,EAAA,GAAA,CAAA,CAAA;;AAN1DqrG,IAAAA,IAAAA,MAAAA,GAAAA,cAAAA,CAAAA,SAAAA,CAAAA;IASXhrG,MAAAA,CAAAA,OAKC,GALDA,SAAAA,OAAAA,GAAAA;QACE,IAAI,CAACysD,uBAAuB,CAACzsD,OAAO,EAAA,CAAA;QACpC,IAAI,CAACirE,yBAAyB,CAACjrE,OAAO,EAAA,CAAA;QACtC,IAAI,CAACysD,uBAAuB,GAAG,IAAA,CAAA;QAC/B,IAAI,CAACwe,yBAAyB,GAAG,IAAA,CAAA;AACnC,KAAA,CAAA;AAEApS,IAAAA,MAAAA,CAAAA,KAuCC,GAvCDA,SAAAA,KAAAA,CAAMoyC,WAAwB,EAAA;AAC5B,QAAA,IAAQ7zF,WAAkD6zF,WAAlD7zF,CAAAA,QAAAA,EAAUshD,qBAAwCuyC,WAAxCvyC,CAAAA,kBAAAA,EAAoB3sB,kBAAoBk/D,WAApBl/D,CAAAA,eAAAA,CAAAA;QACtC,IAAIm/D,aAAAA,CAAAA;QACJ,IAAIC,WAAAA,CAAAA;QACJ,IAAIC,cAAAA,CAAAA;QACJ,IAAK,IAAIhsG,CAAI,GAAA,CAAA,EAAG0B,CAAIsW,GAAAA,QAAAA,CAASpY,MAAM,EAAEI,CAAAA,GAAI0B,CAAG,EAAA,EAAE1B,CAAG,CAAA;AAC/C,YAAA,IAAMisG,WAAcj0F,GAAAA,QAAQ,CAAChY,CAAAA,CAAE,CAACyqE,iBAAiB,CAAA;YACjD,IAAK,IAAIr6D,CAAI,GAAA,CAAA,EAAGC,CAAI47F,GAAAA,WAAAA,CAAYrsG,MAAM,EAAEwQ,CAAAA,GAAIC,CAAG,EAAA,EAAED,CAAG,CAAA;gBAClD,IAAMgqD,UAAAA,GAAa6xC,WAAW,CAAC77F,CAAE,CAAA,CAAA;;AAGjC,gBAAA,IAAI,EAAEgqD,UAAAA,CAAWoQ,gBAAgB,GAAI,CAAA,IAAK79B,eAAe,CAAI,EAAA;AAC3D,oBAAA,SAAA;AACF,iBAAA;gBAEA,IAAMp+B,QAAAA,GAAW6rD,WAAW3nB,SAAS,CAAA;gBACrC,IAAM70C,WAAAA,GAAc2Q,SAAS3Q,WAAW,CAAA;AACxC,gBAAA,IAAIkuG,aAAe,EAAA;AACjB,oBAAA,IAAIE,mBAAmBpuG,WAAemuG,IAAAA,WAAAA,CAAY7oD,SAAS,CAAC4oD,eAAe1xC,UAAa,CAAA,EAAA;wBACtF2xC,WAAY5oD,CAAAA,MAAM,CAAC2oD,aAAe1xC,EAAAA,UAAAA,CAAAA,CAAAA;AAClC0xC,wBAAAA,aAAAA,CAAchpD,OAAO,GAAG,IAAA,CAAA;qBACnB,MAAA;AACLwW,wBAAAA,kBAAAA,CAAmBx3D,IAAI,CAACgqG,aAAAA,CAAAA,CAAAA;wBACxBA,aAAgB1xC,GAAAA,UAAAA,CAAAA;wBAChB2xC,WAAcx9F,GAAAA,QAAAA,CAAAA;wBACdy9F,cAAiBpuG,GAAAA,WAAAA,CAAAA;AACjB2Q,wBAAAA,QAAAA,CAAS40C,MAAM,CAACiX,UAAAA,CAAAA,CAAAA;AAChBA,wBAAAA,UAAAA,CAAWtX,OAAO,GAAG,KAAA,CAAA;AACvB,qBAAA;iBACK,MAAA;oBACLgpD,aAAgB1xC,GAAAA,UAAAA,CAAAA;oBAChB2xC,WAAcx9F,GAAAA,QAAAA,CAAAA;oBACdy9F,cAAiBpuG,GAAAA,WAAAA,CAAAA;AACjB2Q,oBAAAA,QAAAA,CAAS40C,MAAM,CAACiX,UAAAA,CAAAA,CAAAA;AAChBA,oBAAAA,UAAAA,CAAWtX,OAAO,GAAG,KAAA,CAAA;AACvB,iBAAA;AACF,aAAA;AACF,SAAA;QACAgpD,aAAiBxyC,IAAAA,kBAAAA,CAAmBx3D,IAAI,CAACgqG,aAAAA,CAAAA,CAAAA;AAC3C,KAAA,CAAA;IAEAriC,MAAAA,CAAAA,YAGC,GAHDA,SAAAA,YAAAA,GAAAA;QACE,IAAI,CAACpc,uBAAuB,CAACoc,YAAY,EAAA,CAAA;QACzC,IAAI,CAACoC,yBAAyB,CAACpC,YAAY,EAAA,CAAA;AAC7C,KAAA,CAAA;AA5DWmiC,IAAAA,OAAAA,cAAAA,CAAAA;AA6DZ,CAAA,EAAA;;ACtED;;IAGO,IAAKM,SAAAA,iBAAAA,SAAAA,SAAAA,EAAAA;AACV;;;AAGC,MAAA,SAAA,CAAA,MAAA,CAAA,GAAA,MAAA,CAAA;AAED;;;AAGC,MAAA,SAAA,CAAA,MAAA,CAAA,GAAA,MAAA,CAAA;AAED;;;AAGC,MAAA,SAAA,CAAA,QAAA,CAAA,GAAA,QAAA,CAAA;uBAEe,SAAA,CAAA,WAAA,CAAA,GAAA,WAAA,CAAA;yBAEE,SAAA,CAAA,aAAA,CAAA,GAAA,aAAA,CAAA;qBAEJ,SAAA,CAAA,UAAA,CAAA,GAAA,UAAA,CAAA;mBAEF,SAAA,CAAA,QAAA,CAAA,GAAA,QAAA,CAAA;iBAEF,SAAA,CAAA,MAAA,CAAA,GAAA,MAAA,CAAA;0BAES,SAAA,CAAA,eAAA,CAAA,GAAA,eAAA,CAAA;+BAEK,SAAA,CAAA,oBAAA,CAAA,GAAA,oBAAA,CAAA;kBAEb,SAAA,CAAA,QAAA,CAAA,GAAA,QAAA,CAAA;gBAEF,SAAA,CAAA,MAAA,CAAA,GAAA,MAAA,CAAA;6BAEa,SAAA,CAAA,KAAA,CAAA,GAAA,KAAA,CAAA;kCAEK,SAAA,CAAA,SAAA,CAAA,GAAA,SAAA,CAAA;iCAED,SAAA,CAAA,MAAA,CAAA,GAAA,MAAA,CAAA;mBAEd,SAAA,CAAA,QAAA,CAAA,GAAA,QAAA,CAAA;0BAEO,SAAA,CAAA,eAAA,CAAA,GAAA,eAAA,CAAA;yBAED,SAAA,CAAA,aAAA,CAAA,GAAA,aAAA,CAAA;0BAEC,SAAA,CAAA,KAAA,CAAA,GAAA,aAAA,CAAA;kBAER,SAAA,CAAA,OAAA,CAAA,GAAA,OAAA,CAAA;wBAEM,SAAA,CAAA,KAAA,CAAA,GAAA,KAAA,CAAA;iBAEP,SAAA,CAAA,MAAA,CAAA,GAAA,MAAA,CAAA;mDAEkC,SAAA,CAAA,YAAA,CAAA,GAAA,YAAA,CAAA;0BAEzB,SAAA,CAAA,SAAA,CAAA,GAAA,SAAA,CAAA;AAxDTA,IAAAA,OAAAA,SAAAA,CAAAA;AA0DX,CAAA,CAAA,EAAA;;AC7DM,IAAA,aAAA,iBAAA,WAAA;AAAMC,IAAAA,SAAAA,aAAAA,GAAAA;AACHC,QAAAA,IAAAA,CAAAA,MAAAA,GAAc,EAAE,CAAA;AAChBC,QAAAA,IAAAA,CAAAA,UAAAA,GAAkB,EAAE,CAAA;aACpBC,eAA2B,GAAA,KAAA,CAAA;;AAHxBH,IAAAA,IAAAA,MAAAA,GAAAA,aAAAA,CAAAA,SAAAA,CAAAA;AAYX;;;AAGC,MACDrqG,MAAAA,CAAAA,IAGC,GAHDA,SAAAA,KAAKiU,IAAO,EAAA;AACV,QAAA,IAAI,CAACq2F,MAAM,CAACtqG,IAAI,CAACiU,IAAAA,CAAAA,CAAAA;QACjB,IAAI,CAACu2F,eAAe,GAAG,IAAA,CAAA;AACzB,KAAA,CAAA;AAEA;;;;AAIC,MACDx9E,OAAAA,GAGC,GAHDA,SAAAA,GAAI9sB,CAAAA,KAAa,EAAE+T,IAAO,EAAA;AACxB,QAAA,IAAI,CAACq2F,MAAM,CAAClqG,MAAM,CAACF,OAAO,CAAG+T,EAAAA,IAAAA,CAAAA,CAAAA;QAC7B,IAAI,CAACu2F,eAAe,GAAG,IAAA,CAAA;AACzB,KAAA,CAAA;AAEA;;;AAGC,MACDC,MAAAA,CAAAA,aAGC,GAHDA,SAAAA,cAAcvqG,KAAa,EAAA;AACzB,QAAA,IAAI,CAACoqG,MAAM,CAAClqG,MAAM,CAACF,KAAO,EAAA,CAAA,CAAA,CAAA;QAC1B,IAAI,CAACsqG,eAAe,GAAG,IAAA,CAAA;AACzB,KAAA,CAAA;AAEA;;;AAGC,MACDE,MAAAA,CAAAA,aAKC,GALDA,SAAAA,cAAcC,MAA6B,EAAA;QACzC,IAAM32F,KAAAA,GAAQ,IAAI,CAACs2F,MAAM,CAAA;QACzB,IAAK,IAAIpsG,IAAI8V,KAAMlW,CAAAA,MAAM,GAAG,CAAGI,EAAAA,CAAAA,IAAK,GAAGA,CAAK,EAAA,CAAA;AAC1CysG,YAAAA,MAAAA,CAAO32F,KAAK,CAAC9V,CAAAA,CAAE,KAAK,IAAI,CAACusG,aAAa,CAACvsG,CAAAA,CAAAA,CAAAA;AACzC,SAAA;AACF,KAAA,CAAA;AAEA;;;;AAIC,MACDiC,MAAAA,CAAAA,OAEC,GAFDA,SAAAA,QAAQ8T,IAAO,EAAA;AACb,QAAA,OAAO,IAAI,CAACq2F,MAAM,CAACnqG,OAAO,CAAC8T,IAAAA,CAAAA,CAAAA;AAC7B,KAAA,CAAA;AAEA;;;MAIA22F,MAAAA,CAAAA,QAEC,GAFDA,SAAAA,QAAAA,GAAAA;QACE,OAAO,IAAI,CAACN,MAAM,CAAA;AACpB,KAAA,CAAA;AAEA;;;MAIAO,MAAAA,CAAAA,YAYC,GAZDA,SAAAA,YAAAA,GAAAA;QACE,IAAMC,SAAAA,GAAY,IAAI,CAACP,UAAU,CAAA;QACjC,IAAI,IAAI,CAACC,eAAe,EAAE;YACxB,IAAMx2F,KAAAA,GAAQ,IAAI,CAACs2F,MAAM,CAAA;YACzB,IAAM7mF,KAAAA,GAAQzP,MAAMlW,MAAM,CAAA;AAC1BgtG,YAAAA,SAAAA,CAAUhtG,MAAM,GAAG2lB,KAAAA,CAAAA;AACnB,YAAA,IAAK,IAAIvlB,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAIulB,OAAOvlB,CAAK,EAAA,CAAA;AAC9B4sG,gBAAAA,SAAS,CAAC5sG,CAAAA,CAAE,GAAG8V,KAAK,CAAC9V,CAAE,CAAA,CAAA;AACzB,aAAA;YACA,IAAI,CAACssG,eAAe,GAAG,KAAA,CAAA;AACzB,SAAA;QACA,OAAOM,SAAAA,CAAAA;AACT,KAAA,CAAA;AApFWT,IAAAA,aAAAA,CAAAA,aAAAA,EAAAA;;YAQPvsG,GAAAA,EAAAA,QAAAA;;;MAAJ,SAAA,GAAA,GAAA;AACE,gBAAA,OAAO,IAAI,CAACwsG,MAAM,CAACxsG,MAAM,CAAA;AAC3B,aAAA;;;AAVWusG,IAAAA,OAAAA,aAAAA,CAAAA;AAqFZ,CAAA;;AC/ED;;IAGO,IAAMU,YAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,YAAAA,CAgBC,MAA8B,EAAA;aAAdtsG,MAAAA,GAAAA,MAAAA,CAAAA;8BAd5BusG,oBAA6B,EAAE,CAAA;8BAE/BC,UAAgC,IAAIZ,aAAAA,EAAAA,CAAAA;;AAJzBU,IAAAA,IAAAA,MAAAA,GAAAA,YAAAA,CAAAA,SAAAA,CAAAA;AA+BXG,IAAAA,MAAAA,CAAAA,QA6BC,GA7BDA,SAAAA,QAASC,CAAAA,YAA4B,EAAE73D,KAAa,EAAA;QAClD,IAAM83D,MAAAA,GAAS,IAAI,CAACH,OAAO,CAAA;QAE3B,IAAI/qG,KAAAA,CAAAA;QACJ,IAAI,OAAOirG,iBAAiB,QAAU,EAAA;AACpC,YAAA,IAAIA,YAAe,GAAA,CAAA,IAAKA,YAAeC,GAAAA,MAAAA,CAAOttG,MAAM,EAAE;gBACpD,MAAM,4BAAA,CAAA;AACR,aAAA;YACAoC,KAAQirG,GAAAA,YAAAA,CAAAA;SACH,MAAA;AACLjrG,YAAAA,KAAAA,GAAQkrG,OAAOttG,MAAM,CAAA;YACrBw1C,KAAQ63D,GAAAA,YAAAA,CAAAA;AACV,SAAA;AAEA,QAAA,IAAI73D,MAAM70C,MAAM,KAAK,IAAI,CAACA,MAAM,EAAE;YAChC,MAAM,yCAAA,CAAA;AACR,SAAA;QAEA,IAAI60C,KAAAA,CAAM+3D,aAAa,EAAE;YACvB,IAAMC,YAAAA,GAAeF,MAAOjrG,CAAAA,OAAO,CAACmzC,KAAAA,CAAAA,CAAAA;AACpC,YAAA,IAAIg4D,iBAAiBprG,KAAO,EAAA;AAC1BkrG,gBAAAA,MAAAA,CAAOX,aAAa,CAACa,YAAAA,CAAAA,CAAAA;gBACrBF,MAAOp+E,CAAAA,GAAG,CAAC9sB,KAAOozC,EAAAA,KAAAA,CAAAA,CAAAA;AACpB,aAAA;SACK,MAAA;YACLA,KAAM+3D,CAAAA,aAAa,GAAG,IAAI,CAAA;YAC1BD,MAAOp+E,CAAAA,GAAG,CAAC9sB,KAAOozC,EAAAA,KAAAA,CAAAA,CAAAA;AAClBA,YAAAA,KAAAA,CAAMiuD,QAAQ,IAAIjuD,KAAMwsD,CAAAA,cAAc,CAAC,IAAA,CAAA,CAAA;AACzC,SAAA;AACF,KAAA,CAAA;AAEA;;;AAGC,MACDyL,MAAAA,CAAAA,WASC,GATDA,SAAAA,YAAYj4D,KAAY,EAAA;QACtB,IAAM83D,MAAAA,GAAS,IAAI,CAACH,OAAO,CAAA;QAC3B,IAAM/qG,KAAAA,GAAQkrG,MAAOjrG,CAAAA,OAAO,CAACmzC,KAAAA,CAAAA,CAAAA;QAC7B,IAAIpzC,KAAAA,KAAU,CAAC,CAAG,EAAA;AAChB,YAAA,IAAMsrG,YAAeJ,GAAAA,MAAAA,CAAOR,QAAQ,EAAE,CAAC1qG,KAAM,CAAA,CAAA;AAC7CkrG,YAAAA,MAAAA,CAAOX,aAAa,CAACvqG,KAAAA,CAAAA,CAAAA;AACrBozC,YAAAA,KAAAA,CAAM+3D,aAAa,GAAG,IAAA,CAAA;AACtBG,YAAAA,YAAAA,CAAajK,QAAQ,IAAIiK,YAAa1L,CAAAA,cAAc,CAAC,KAAA,CAAA,CAAA;AACvD,SAAA;AACF,KAAA,CAAA;AAEA;;;;;AAKC,MACD2L,OAAAA,SAYC,GAZDA,SAAAA,SAAU32F,CAAAA,GAAW,EAAE42F,eAA+B,EAAA;;AAA/BA,QAAAA,IAAAA,4BAAAA,eAA2B,GAAA,IAAA,CAAA;QAChD,IAAMC,YAAAA,GAAe,IAAI,CAACltG,MAAM,CAACO,eAAe,CAAC4sG,IAAI,CAAQ;YAAE92F,GAAAA,EAAAA,GAAAA;AAAK3Y,YAAAA,IAAAA,EAAMiuG,UAAU31E,KAAK;AAAC,SAAA,CAAA,CAAA;QAC1Fk3E,YAAaE,CAAAA,IAAI,CAAC,SAACv4D,KAAAA,EAAAA;AACjB,YAAA,IAAIo4D,eAAiB,EAAA;AACnB,gBAAA,IAAMN,MAAS,GAAA,KAAA,CAAKH,OAAO,CAACL,QAAQ,EAAA,CAAA;gBACpC,IAAK,IAAI1sG,IAAI,CAAG0B,EAAAA,CAAAA,GAAIwrG,OAAOttG,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;oBAC7CktG,MAAM,CAACltG,CAAE,CAAA,CAACY,OAAO,EAAA,CAAA;AACnB,iBAAA;AACF,aAAA;AACA,YAAA,KAAA,CAAKosG,QAAQ,CAAC53D,KAAAA,CAAAA,CAAAA;AAChB,SAAA,CAAA,CAAA;QACA,OAAOq4D,YAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;;AAKC,MACDG,OAAAA,WAKC,GALDA,SAAAA,WAAYC,CAAAA,WAAkB,EAAEC,SAAgB,EAAA;QAC9C,IAAMC,eAAAA,GAAkBF,YAAYG,YAAY,CAAA;QAChD,MAAOD,eAAAA,CAAgBnuG,MAAM,GAAG,CAAG,CAAA;AACjCkuG,YAAAA,SAAAA,CAAUG,aAAa,CAACF,eAAe,CAAC,CAAE,CAAA,CAAA,CAAA;AAC5C,SAAA;AACF,KAAA,CAAA;AAEA;;MAGAG,MAAAA,CAAAA,gBAKC,GALDA,SAAAA,gBAAAA,GAAAA;QACE,IAAMC,gBAAAA,GAAmB,IAAI,CAACrB,iBAAiB,CAAA;QAC/C,MAAOqB,gBAAAA,CAAiBvuG,MAAM,GAAG,CAAG,CAAA;YAClCuuG,gBAAgB,CAAC,CAAE,CAAA,CAACvtG,OAAO,EAAA,CAAA;AAC7B,SAAA;AACF,KAAA,CAAA;AAtHWisG,IAAAA,aAAAA,CAAAA,YAAAA,EAAAA;;YASPK,GAAAA,EAAAA,QAAAA;;;MAAJ,SAAA,GAAA,GAAA;AACE,gBAAA,OAAO,IAAI,CAACH,OAAO,CAACL,QAAQ,EAAA,CAAA;AAC9B,aAAA;;;YAmHI0B,GAAAA,EAAAA,aAAAA;;;;;;MAAJ,SAAA,GAAA,GAAA;AACE,gBAAA,OAAO,IAAI,CAACrB,OAAO,CAACL,QAAQ,EAAE,CAAC,CAAE,CAAA,CAAA;AACnC,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAgBt3D,KAAY,EAAA;AAC1B,gBAAA,IAAMi5D,UAAa,GAAA,IAAI,CAACnB,MAAM,CAAC,CAAE,CAAA,CAAA;AACjC,gBAAA,IAAImB,UAAY,EAAA;oBACd,IAAI,CAAChB,WAAW,CAACgB,UAAAA,CAAAA,CAAAA;AACnB,iBAAA;AACAj5D,gBAAAA,KAAAA,IAAS,IAAI,CAAC43D,QAAQ,CAAC,CAAG53D,EAAAA,KAAAA,CAAAA,CAAAA;AAC5B,aAAA;;;AAxIWy3D,IAAAA,OAAAA,YAAAA,CAAAA;AAyIZ,CAAA;;AC/IM,IAAA,YAAA,iBAAA,WAAA;AAAMyB,IAAAA,SAAAA,YAAAA,CAkECC,QAAiC,EAAA;;AAfrCC,QAAAA,IAAAA,CAAAA,MAAAA,GAAAA,SAAAA,CAAAA;AAGAC,QAAAA,IAAAA,CAAAA,wBAAAA,GAAmD,EAAE,CAAA;AACrDC,QAAAA,IAAAA,CAAAA,sBAAAA,GAA+C,EAAE,CAAA;AAYvD,QAAA,IAAI,CAACC,QAAQ,GAAG,IAAIC,OAAAA,CAAQ,SAACC,OAASC,EAAAA,MAAAA,EAAAA;AACpC,YAAA,KAAA,CAAKC,OAAO,GAAGD,MAAAA,CAAAA;AACf,YAAA,IAAME,YAAY,SAAC3sG,KAAAA,EAAAA;gBACjB,IAAI,KAAA,CAAKmsG,MAAM,KAA2B,SAAA,EAAA;oBACxCK,OAAQxsG,CAAAA,KAAAA,CAAAA,CAAAA;AACR,oBAAA,KAAA,CAAKmsG,MAAM,GAAA,WAAA,CAAA;AACX,oBAAA,KAAA,CAAKC,wBAAwB,GAAGvvG,SAAAA,CAAAA;AAChC,oBAAA,KAAA,CAAKwvG,sBAAsB,GAAGxvG,SAAAA,CAAAA;AAChC,iBAAA;AACF,aAAA,CAAA;AACA,YAAA,IAAM+vG,WAAW,SAACC,MAAAA,EAAAA;gBAChB,IAAI,KAAA,CAAKV,MAAM,KAA2B,SAAA,EAAA;oBACxCM,MAAOI,CAAAA,MAAAA,CAAAA,CAAAA;AACP,oBAAA,KAAA,CAAKV,MAAM,GAAA,UAAA,CAAA;AACX,oBAAA,KAAA,CAAKC,wBAAwB,GAAGvvG,SAAAA,CAAAA;AAChC,oBAAA,KAAA,CAAKwvG,sBAAsB,GAAGxvG,SAAAA,CAAAA;AAChC,iBAAA;AACF,aAAA,CAAA;AACA,YAAA,IAAMiwG,WAAW,SAACC,QAAAA,EAAAA;gBAChB,IAAI,KAAA,CAAKZ,MAAM,KAA2B,SAAA,EAAA;AACxC,oBAAA,KAAA,CAAKa,gBAAgB,GAAGD,QAAAA,CAAAA;AAC1B,iBAAA;AACF,aAAA,CAAA;YACA,IAAME,uBAAAA,GAA0B,SAACC,MAAgBC,EAAAA,KAAAA,EAAAA;gBAC/C,IAAI,KAAA,CAAKhB,MAAM,KAA2B,SAAA,EAAA;oBACxC,IAAMiB,QAAAA,GAAY,KAAKC,CAAAA,qBAAAA,KAAAA,KAAAA,CAAAA,qBAA0B,GAAA;wBAAEH,MAAAA,EAAAA,MAAAA;wBAAQC,KAAAA,EAAAA,KAAAA;AAAM,qBAAA,CAAA,CAAA;AAEjEC,oBAAAA,QAAAA,CAASF,MAAM,GAAGA,MAAAA,CAAAA;AAClBE,oBAAAA,QAAAA,CAASD,KAAK,GAAGA,KAAAA,CAAAA;AAEjB,oBAAA,KAAA,CAAKf,wBAAwB,CAAC1/E,OAAO,CAAC,SAACqgF,QAAAA,EAAAA;AAAaA,wBAAAA,OAAAA,QAAAA,CAASG,MAAQC,EAAAA,KAAAA,CAAAA,CAAAA;;AACvE,iBAAA;AACF,aAAA,CAAA;YACA,IAAMG,qBAAAA,GAAwB,SAAC/4F,GAAAA,EAAa24F,MAAgBC,EAAAA,KAAAA,EAAAA;gBAC1D,IAAI,KAAA,CAAKhB,MAAM,KAA2B,SAAA,EAAA;wBAEtB,yBAAyB53F,EAAAA,IAAAA,CAAAA;oBAD3C,KAAKg5F,CAAAA,mBAAAA,KAAAA,KAAAA,CAAAA,sBAAwB,EAAC,CAAA,CAAA;AAC9B,oBAAA,IAAMH,QAAY,GAAA,CAAA,yBAAA,GAAA,KAAA,CAAKG,mBAAmB,EAACh5F,IAAAA,GAAAA,GAAI,CAAA,KAA7B,yBAAwB,CAACA,KAAI,GAAK;wBAAE24F,MAAAA,EAAAA,MAAAA;wBAAQC,KAAAA,EAAAA,KAAAA;AAAM,qBAAA,CAAA,CAAA;AACpEC,oBAAAA,QAAAA,CAASF,MAAM,GAAGA,MAAAA,CAAAA;AAClBE,oBAAAA,QAAAA,CAASD,KAAK,GAAGA,KAAAA,CAAAA;AACjB,oBAAA,KAAA,CAAKd,sBAAsB,CAAC3/E,OAAO,CAAC,SAACqgF,QAAAA,EAAAA;AAAaA,wBAAAA,OAAAA,QAAAA,CAASx4F,KAAK24F,MAAQC,EAAAA,KAAAA,CAAAA,CAAAA;;AAC1E,iBAAA;AACF,aAAA,CAAA;YAEAjB,QAASS,CAAAA,SAAAA,EAAWC,QAAUK,EAAAA,uBAAAA,EAAyBK,qBAAuBR,EAAAA,QAAAA,CAAAA,CAAAA;AAChF,SAAA,CAAA,CAAA;;AA/GSb,IAAAA,IAAAA,MAAAA,GAAAA,YAAAA,CAAAA,SAAAA,CAAAA;AAkHX;;;;;AAKC,MACDuB,OAAAA,UAuBC,GAvBDA,SAAAA,UACEC,CAAAA,cAAuD,EACvDC,YAA0E,EAAA;QAE1E,IAAMC,gBAAAA,GAAmB,IAAI,CAACN,qBAAqB,CAAA;QACnD,IAAMO,cAAAA,GAAiB,IAAI,CAACL,mBAAmB,CAAA;AAC/C,QAAA,IAAII,gBAAkB,EAAA;AACpBF,YAAAA,cAAAA,CAAeE,gBAAiBT,CAAAA,MAAM,EAAES,gBAAAA,CAAiBR,KAAK,CAAA,CAAA;AAChE,SAAA;AAEA,QAAA,IAAIS,cAAgB,EAAA;YAClB,IAAK,IAAIr5F,OAAOq5F,cAAgB,CAAA;gBAC9B,IAA0BA,mBAAAA,GAAAA,cAAc,CAACr5F,GAAAA,CAAI,EAArC24F,MAAkBU,GAAAA,mBAAAA,CAAlBV,MAAQC,EAAAA,KAAAA,GAAUS,mBAAVT,CAAAA,KAAAA,CAAAA;AAChBO,gBAAAA,YAAAA,CAAan5F,KAAK24F,MAAQC,EAAAA,KAAAA,CAAAA,CAAAA;AAC5B,aAAA;AACF,SAAA;QAEA,IAAI,IAAI,CAAChB,MAAM,KAA2B,SAAA,EAAA;AACxCsB,YAAAA,cAAAA,IAAkB,IAAI,CAACrB,wBAAwB,CAAC3sG,IAAI,CAACguG,cAAAA,CAAAA,CAAAA;AACrDC,YAAAA,YAAAA,IAAgB,IAAI,CAACrB,sBAAsB,CAAC5sG,IAAI,CAACiuG,YAAAA,CAAAA,CAAAA;AACnD,SAAA;AAEA,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEApC,IAAAA,MAAAA,CAAAA,IAOC,GAPDA,SAAAA,IACEuC,CAAAA,WAA4D,EAC5DC,UAA8D,EAAA;;QAE9D,OAAO,IArJE7B,YAqJoC,CAAA,SAACO,OAASC,EAAAA,MAAAA,EAAAA;YACrD,KAAKH,CAAAA,QAAQ,CAAChB,IAAI,CAACuC,WAAAA,EAAaC,YAAYxC,IAAI,CAACkB,OAASuB,CAAAA,CAAAA,KAAK,CAACtB,MAAAA,CAAAA,CAAAA;AAClE,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;AAEA;;;;AAIC,MACDsB,MAAAA,CAAAA,KAIC,GAJDA,SAAAA,OAAMC,UAAgC,EAAA;;QACpC,OAAO,IAhKE/B,YAgKkB,CAAA,SAACO,OAASC,EAAAA,MAAAA,EAAAA;YACnC,KAAKH,CAAAA,QAAQ,CAACyB,KAAK,CAACC,YAAY1C,IAAI,CAACkB,OAASuB,CAAAA,CAAAA,KAAK,CAACtB,MAAAA,CAAAA,CAAAA;AACtD,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;AAEA;;;;;AAKC,MACDwB,MAAAA,CAAAA,OAEC,GAFDA,SAAAA,SAAQC,SAAsB,EAAA;AAC5B,QAAA,OAAO,IAAI,CAAC5B,QAAQ,CAAC2B,OAAO,CAACC,SAAAA,CAAAA,CAAAA;AAC/B,KAAA,CAAA;AAEA;;;MAIAC,MAAAA,CAAAA,MAQC,GARDA,SAAAA,MAAAA,GAAAA;QACE,IAAI,IAAI,CAAChC,MAAM,KAA2B,SAAA,EAAA;AACxC,YAAA,OAAA;AACF,SAAA;AACA,QAAA,IAAI,CAACA,MAAM,GAAA,UAAA,CAAA;QACX,IAAI,CAACO,OAAO,CAAC,UAAA,CAAA,CAAA;AACb,QAAA,IAAI,CAACM,gBAAgB,IAAI,IAAI,CAACA,gBAAgB,EAAA,CAAA;AAC9C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AA1LA;;;;;AAKC,MACD,YAAOoB,CAAAA,GAoCN,GApCD,SAAOA,IAAaC,QAAgC,EAAA;AAClD,QAAA,OAAO,IAREpC,YAAAA,CAQoB,SAACO,OAAAA,EAASC,MAAQQ,EAAAA,uBAAAA,EAAAA;AASpCqB,YAAAA,IAAAA,UAAAA,GAAT,SAASA,UAAAA,CAAW3uG,KAAa,EAAE4uG,WAAc,EAAA;AAC/CC,gBAAAA,SAAAA,EAAAA,CAAAA;gBACA/P,OAAO,CAAC9+F,MAAM,GAAG4uG,WAAAA,CAAAA;AAEjBtB,gBAAAA,uBAAAA,CAAwBuB,SAAWtrF,EAAAA,KAAAA,CAAAA,CAAAA;AACnC,gBAAA,IAAIsrF,cAActrF,KAAO,EAAA;oBACvBspF,OAAQ/N,CAAAA,OAAAA,CAAAA,CAAAA;AACV,iBAAA;AACF,aAAA,CAAA;AAES+O,YAAAA,IAAAA,UAAAA,GAAT,SAASA,UAAAA,CAAWiB,OAA2B,EAAE9uG,KAAa,EAAA;AAC5D,gBAAA,IAAI8uG,WAAAA,CAAAA,OAAAA,EAAmBlC,YAAWkC,WAAO,CAAPA,SA5B7BxC,YA4B8D,CAAA,EAAA;oBACjEwC,OAAQnD,CAAAA,IAAI,CAAC,SAAUtrG,KAAK,EAAA;AAC1BsuG,wBAAAA,UAAAA,CAAW3uG,KAAOK,EAAAA,KAAAA,CAAAA,CAAAA;qBACjBysG,EAAAA,MAAAA,CAAAA,CAAAA;iBACE,MAAA;oBACLF,OAAQC,CAAAA,OAAO,EAAGlB,CAAAA,IAAI,CAAC,WAAA;AACrBgD,wBAAAA,UAAAA,CAAW3uG,KAAO8uG,EAAAA,OAAAA,CAAAA,CAAAA;AACpB,qBAAA,CAAA,CAAA;AACF,iBAAA;AACF,aAAA,CAAA;YA5BA,IAAMvrF,KAAAA,GAAQmrF,SAAS9wG,MAAM,CAAA;YAC7B,IAAMkhG,OAAAA,GAAe,IAAIhhG,KAAMylB,CAAAA,KAAAA,CAAAA,CAAAA;AAC/B,YAAA,IAAIsrF,SAAY,GAAA,CAAA,CAAA;AAEhB,YAAA,IAAItrF,UAAU,CAAG,EAAA;AACf,gBAAA,OAAOspF,OAAQ/N,CAAAA,OAAAA,CAAAA,CAAAA;AACjB,aAAA;AAwBA,YAAA,IAAK,IAAI9gG,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAIulB,OAAOvlB,CAAK,EAAA,CAAA;gBAC9B6vG,UAAWa,CAAAA,QAAQ,CAAC1wG,CAAAA,CAAE,EAAEA,CAAAA,CAAAA,CAAAA;AAC1B,aAAA;AACF,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;AA3CWsuG,IAAAA,aAAAA,CAAAA,YAAAA,EAAAA;;AA8CP,YAAA,GAAA,EAACyC,OAAOC,WAAW;AAAvB,YAAA,GAAA,iCAAA,SAAA,GAAA,GAAA;gBACE,OAAO,cAAA,CAAA;AACT,aAAA;;;AAhDW1C,IAAAA,OAAAA,YAAAA,CAAAA;AA4LZ,CAAA;;AC7LD,IAAM2C,QAAW,GAAA;IACfC,IAAM,EAAA,MAAA;IACNC,IAAM,EAAA,MAAA;IACNC,GAAK,EAAA,MAAA;IACLC,MAAQ,EAAA,MAAA;IACRC,GAAK,EAAA,MAAA;IACLC,GAAK,EAAA,aAAA;IACLC,GAAK,EAAA,OAAA;IACLC,IAAM,EAAA,OAAA;IACNC,GAAK,EAAA,OAAA;AACP,CAAA,CAAA;AAEA,IAAMC,iBAAoB,GAAA,CAAA,CAAA;AAC1B,IAAMC,cAAiBC,GAAAA,QAAAA,CAAAA;AACvB,IAAMC,eAAkB,GAAA,GAAA,CAAA;AASxB;;;;AAIC,IACM,SAASC,OAAWn7F,CAAAA,GAAW,EAAEo7F,MAA0B,EAAA;IAA1BA,IAAAA,MAAAA,KAAAA,KAAAA,CAAAA,EAAAA,SAAwB,EAAC,CAAA;AAC/D,IAAA,OAAO,IAAI1D,YAAAA,CAAa,SAACO,OAAAA,EAASC,QAAQQ,uBAAyBK,EAAAA,qBAAAA,EAAAA;AAC9CqC,QAAAA,IAAAA,kBAAAA,CAAAA;AAAnB,QAAA,IAAMC,aAAaD,CAAAA,kBAAAA,GAAAA,MAAOC,CAAAA,UAAU,YAAjBD,kBAAqBL,GAAAA,iBAAAA,CAAAA;AAClBK,QAAAA,IAAAA,qBAAAA,CAAAA;AAAtB,QAAA,IAAME,gBAAgBF,CAAAA,qBAAAA,GAAAA,MAAOE,CAAAA,aAAa,YAApBF,qBAAwBF,GAAAA,eAAAA,CAAAA;AAC7BE,QAAAA,IAAAA,eAAAA,CAAAA;AAAjBA,QAAAA,MAAAA,CAAOG,OAAO,GAAGH,CAAAA,kBAAAA,MAAOG,CAAAA,OAAO,YAAdH,eAAkBJ,GAAAA,cAAAA,CAAAA;AACrBI,QAAAA,IAAAA,YAAAA,CAAAA;QAAdA,MAAO/zG,CAAAA,IAAI,GAAG+zG,CAAAA,YAAAA,GAAAA,OAAO/zG,IAAI,KAAA,IAAA,GAAX+zG,eAAeI,kBAAmBx7F,CAAAA,GAAAA,CAAAA,CAAAA;QAChD,IAAM23F,QAAAA,GAAW,IAAI8D,aACnB,CAAA,WAAA;AAAMC,YAAAA,OAAAA,UAAAA,CAAc17F,GAAKo7F,EAAAA,MAAAA,CAAAA,CAAQnC,UAAU,CAACP,uBAAyBK,EAAAA,qBAAAA,CAAAA,CAAAA;WACrEsC,UACAC,EAAAA,aAAAA,CAAAA,CAAAA;AAEF3D,QAAAA,QAAAA,CAAS9wE,KAAK,EAAG80E,CAAAA,OAAO,CAACzD,MAAAA,CAAAA,CAAQ6B,UAAU,CAAC9B,OAAAA,CAAAA,CAAAA;AAC9C,KAAA,CAAA,CAAA;AACF,CAAA;AAEA,SAASyD,UAAAA,CAAc17F,GAAW,EAAEo7F,MAAqB,EAAA;AACvD,IAAA,OAAO,IAAI1D,YAAAA,CAAa,SAACO,OAAAA,EAASC,QAAQQ,uBAAyBK,EAAAA,qBAAAA,EAAAA;AACjE,QAAA,IAAM6C,MAAM,IAAIC,cAAAA,EAAAA,CAAAA;QAChB,IAAMC,KAAAA,GAAQV,MAAO/zG,CAAAA,IAAI,KAAK,OAAA,CAAA;QAE9Bu0G,GAAIL,CAAAA,OAAO,GAAGH,MAAAA,CAAOG,OAAO,CAAA;AACZH,QAAAA,IAAAA,cAAAA,CAAAA;AAAhBA,QAAAA,MAAAA,CAAOW,MAAM,GAAGX,CAAAA,iBAAAA,MAAOW,CAAAA,MAAM,YAAbX,cAAiB,GAAA,KAAA,CAAA;AAEjCQ,QAAAA,GAAAA,CAAII,MAAM,GAAG,WAAA;AACX,YAAA,IAAIJ,IAAIK,MAAM,GAAG,OAAOL,GAAIK,CAAAA,MAAM,IAAI,GAAK,EAAA;gBACzC/D,MAAO,CAAA,IAAIljG,KAAM,CAAC,uBAAuBgL,GAAAA,GAAAA,CAAAA,CAAAA,CAAAA;AACzC,gBAAA,OAAA;AACF,aAAA;AACe47F,YAAAA,IAAAA,aAAAA,CAAAA;YAAf,IAAM/2F,MAAAA,GAAS+2F,CAAAA,aAAAA,GAAAA,GAAAA,CAAIM,QAAQ,KAAZN,IAAAA,GAAAA,aAAAA,GAAgBA,IAAIO,YAAY,CAAA;AAC/C,YAAA,IAAIL,KAAO,EAAA;AACT,gBAAA,IAAMM,MAAM,IAAIC,KAAAA,EAAAA,CAAAA;AAEhBD,gBAAAA,GAAAA,CAAIJ,MAAM,GAAG,WAAA;;oBAEXM,qBAAsB,CAAA,WAAA;AACpB5D,wBAAAA,uBAAAA,CAAwB,CAAG,EAAA,CAAA,CAAA,CAAA;;wBAE3BT,OAAQmE,CAAAA,GAAAA,CAAAA,CAAAA;AAERA,wBAAAA,GAAAA,CAAIJ,MAAM,GAAG,IAAA,CAAA;AACbI,wBAAAA,GAAAA,CAAIG,OAAO,GAAG,IAAA,CAAA;AACdH,wBAAAA,GAAAA,CAAII,OAAO,GAAG,IAAA,CAAA;wBACd97F,GAAI+7F,CAAAA,eAAe,CAACL,GAAAA,CAAIhlF,GAAG,CAAA,CAAA;AAC7B,qBAAA,CAAA,CAAA;AACF,iBAAA,CAAA;AAEAglF,gBAAAA,GAAAA,CAAIG,OAAO,GAAGH,GAAII,CAAAA,OAAO,GAAG,WAAA;AAC1BtE,oBAAAA,MAAAA,CAAO,IAAIljG,KAAM,CAAC,UAAUonG,GAAAA,GAAAA,CAAIhlF,GAAG,GAAC,OAAA,CAAA,CAAA,CAAA;oBACpC1W,GAAI+7F,CAAAA,eAAe,CAACL,GAAAA,CAAIhlF,GAAG,CAAA,CAAA;AAC7B,iBAAA,CAAA;AAEAglF,gBAAAA,GAAAA,CAAIM,WAAW,GAAG,WAAA,CAAA;AAClBN,gBAAAA,GAAAA,CAAIhlF,GAAG,GAAG1W,GAAIi8F,CAAAA,eAAe,CAAC93F,MAAAA,CAAAA,CAAAA;aACzB,MAAA;AACL6zF,gBAAAA,uBAAAA,CAAwB,CAAG,EAAA,CAAA,CAAA,CAAA;gBAC3BT,OAAQpzF,CAAAA,MAAAA,CAAAA,CAAAA;AACV,aAAA;AACF,SAAA,CAAA;AACA+2F,QAAAA,GAAAA,CAAIW,OAAO,GAAG,WAAA;YACZrE,MAAO,CAAA,IAAIljG,KAAM,CAAC,uBAAuBgL,GAAAA,GAAAA,CAAAA,CAAAA,CAAAA;AAC3C,SAAA,CAAA;AACA47F,QAAAA,GAAAA,CAAIgB,SAAS,GAAG,WAAA;YACd1E,MAAO,CAAA,IAAIljG,KAAM,CAAC,wBAAwBgL,GAAAA,GAAAA,CAAAA,CAAAA,CAAAA;AAC5C,SAAA,CAAA;QACA47F,GAAIiB,CAAAA,UAAU,GAAG,SAACxkF,CAAAA,EAAAA;YAChB,IAAIA,CAAAA,CAAEykF,gBAAgB,EAAE;AACtB/D,gBAAAA,qBAAAA,CAAsB/4F,GAAKqY,EAAAA,CAAAA,CAAEsgF,MAAM,EAAEtgF,EAAEugF,KAAK,CAAA,CAAA;AAC9C,aAAA;AACF,SAAA,CAAA;AACAgD,QAAAA,GAAAA,CAAImB,IAAI,CAAC3B,MAAOW,CAAAA,MAAM,EAAE/7F,GAAK,EAAA,IAAA,CAAA,CAAA;AAC7B47F,QAAAA,GAAAA,CAAIoB,eAAe,GAAG5B,MAAO6B,CAAAA,WAAW,KAAK,SAAA,CAAA;;AAE7CrB,QAAAA,GAAAA,CAAIsB,YAAY,GAAGpB,KAAQ,GAAA,MAAA,GAASV,OAAO/zG,IAAI,CAAA;QAC/C,IAAM81G,OAAAA,GAAU/B,OAAO+B,OAAO,CAAA;AAC9B,QAAA,IAAIA,OAAS,EAAA;AACXl2G,YAAAA,MAAAA,CAAOmZ,IAAI,CAAC+8F,OAAShlF,CAAAA,CAAAA,OAAO,CAAC,SAAC3a,IAAAA,EAAAA;AAC5Bo+F,gBAAAA,GAAAA,CAAIwB,gBAAgB,CAAC5/F,IAAM2/F,EAAAA,OAAO,CAAC3/F,IAAK,CAAA,CAAA,CAAA;AAC1C,aAAA,CAAA,CAAA;AACF,SAAA;;QAEAo+F,GAAIyB,CAAAA,IAAI,CAACjC,MAAAA,CAAOkC,IAAI,CAAA,CAAA;AACtB,KAAA,CAAA,CAAA;AACF,CAAA;AAEA,SAAS9B,mBAAmBx7F,GAAW,EAAA;AACrC,IAAA,IAAMu9F,UAAUv9F,GAAIY,CAAAA,SAAS,CAACZ,GAAIw9F,CAAAA,WAAW,CAAC,GAAO,CAAA,GAAA,CAAA,CAAA,CAAA;IACrD,OAAOnD,QAAQ,CAACkD,OAAQ,CAAA,CAAA;AAC1B,CAAA;AAEO,IAAA,aAAA,iBAAA,WAAA;AAAM9B,IAAAA,SAAAA,aAAAA,CAOT,QAAkD,EAClD,UAA0B,EAC1B,QAAwB,EAAA;aAFhBgC,QAAAA,GAAAA,QAAAA,CAAAA;aACAC,UAAAA,GAAAA,UAAAA,CAAAA;aACAC,QAAAA,GAAAA,QAAAA,CAAAA;AARFC,QAAAA,IAAAA,CAAAA,UAAAA,GAAqB,CAAC,GAAA,CAAA;aACtBC,aAAgB,GAAA,CAAA,CAAA;QAStB,IAAI,CAACC,IAAI,GAAG,IAAI,CAACA,IAAI,CAAC5wG,IAAI,CAAC,IAAI,CAAA,CAAA;;AAXtBuuG,IAAAA,IAAAA,MAAAA,GAAAA,aAAAA,CAAAA,SAAAA,CAAAA;IAcX50E,MAAAA,CAAAA,KAGC,GAHDA,SAAAA,KAAAA,GAAAA;AACE,QAAA,IAAI,CAACi3E,IAAI,EAAA,CAAA;AACT,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA/D,IAAAA,MAAAA,CAAAA,UAGC,GAHDA,SAAAA,UAAAA,CAAWgE,IAAc,EAAA;QACvB,IAAI,CAACC,WAAW,GAAGD,IAAAA,CAAAA;AACnB,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEApC,IAAAA,MAAAA,CAAAA,OAGC,GAHDA,SAAAA,OAAAA,CAAQoC,IAAc,EAAA;QACpB,IAAI,CAACE,QAAQ,GAAGF,IAAAA,CAAAA;AAChB,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;IAEAnE,MAAAA,CAAAA,MAEC,GAFDA,SAAAA,MAAAA,GAAAA;AACEsE,QAAAA,MAAAA,CAAOC,YAAY,CAAC,IAAI,CAACP,UAAU,CAAA,CAAA;AACrC,KAAA,CAAA;IAEA,MAAQE,CAAAA,IAYP,GAZD,SAAQA,IAAAA,GAAAA;;AACN,QAAA,IAAI,IAAI,CAACD,aAAa,IAAI,IAAI,CAACH,UAAU,EAAE;YACzC,IAAI,CAACO,QAAQ,IAAI,IAAI,CAACA,QAAQ,CAAC,IAAI,CAACG,MAAM,CAAA,CAAA;AAC1C,YAAA,OAAA;AACF,SAAA;AACA,QAAA,IAAI,CAACP,aAAa,EAAA,CAAA;QAClB,IAAI,CAACJ,QAAQ,CAAC,IAAI,CAACI,aAAa,CAAA,CAC7B9G,IAAI,CAAC,SAAClyF,MAAAA,EAAAA;AAAW,YAAA,OAAA,KAAA,CAAKm5F,WAAW,IAAI,KAAKA,CAAAA,WAAW,CAACn5F,MAAAA,CAAAA,CAAAA;AACtD20F,SAAAA,CAAAA,CAAAA,KAAK,CAAC,SAACnhF,CAAAA,EAAAA;AACN,YAAA,KAAA,CAAK+lF,MAAM,GAAG/lF,CAAAA,CAAAA;YACd,KAAKulF,CAAAA,UAAU,GAAGM,MAAOG,CAAAA,UAAU,CAAC,KAAKP,CAAAA,IAAI,EAAE,KAAA,CAAKH,QAAQ,CAAA,CAAA;AAC9D,SAAA,CAAA,CAAA;AACJ,KAAA,CAAA;AA7CWlC,IAAAA,OAAAA,aAAAA,CAAAA;AA8CZ,CAAA,EAAA;;AC7JD;;IAGO,IAAM6C,eAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,eAAAA,CAgDC,MAA8B,EAAA;aAAd30G,MAAAA,GAAAA,MAAAA,CAAAA;AA5B5B,QAAA,IAAA,4DACA0xG,UAAqB,GAAA,CAAA,CAAA;AACrB,QAAA,IAAA,uEACAC,aAAwB,GAAA,CAAA,CAAA;AACxB,QAAA,IAAA,wEACAC,OAAkBN,GAAAA,QAAAA,CAAAA;AAClB,QAAA,IAAA,qCACA16F,OAAyB,GAAA,IAAA,CAAA;AAEjBg+F,QAAAA,IAAAA,CAAAA,gBAAAA,GAAsD,EAAC,CAAA;aAGvDC,UAAqCv3G,GAAAA,MAAAA,CAAOC,MAAM,CAAC,IAAA,CAAA,CAAA;aAEnDu3G,aAAwCx3G,GAAAA,MAAAA,CAAOC,MAAM,CAAC,IAAA,CAAA,CAAA;aAGtDw3G,kBAAoDz3G,GAAAA,MAAAA,CAAOC,MAAM,CAAC,IAAA,CAAA,CAAA;aAElEy3G,oBAAyD13G,GAAAA,MAAAA,CAAOC,MAAM,CAAC,IAAA,CAAA,CAAA;aAEvE03G,oBAA6D33G,GAAAA,MAAAA,CAAOC,MAAM,CAAC,IAAA,CAAA,CAAA;AAC3E23G,QAAAA,IAAAA,CAAAA,yBAAAA,GAA2D,EAAC,CAAA;;AAmfpE,yBACAC,WAAAA,GAAsC73G,MAAOC,CAAAA,MAAM,CAAC,IAAA,CAAA,CAAA;AACpD,QAAA,IAAA,kBACA63G,qBAAAA,GAA8C93G,MAAOC,CAAAA,MAAM,CAAC,IAAA,CAAA,CAAA;AAC5D,QAAA,IAAA,kBACA83G,eAAAA,GAA0C/3G,MAAOC,CAAAA,MAAM,CAAC,IAAA,CAAA,CAAA;;AAliB7Co3G,IAAAA,IAAAA,MAAAA,GAAAA,eAAAA,CAAAA,SAAAA,CAAAA;AA8EXxH,IAAAA,MAAAA,CAAAA,IAQC,GARDA,SAAAA,IAAAA,CAAQmI,SAAoD,EAAA;;;AAE1D,QAAA,IAAI,CAAC/1G,KAAAA,CAAMwlB,OAAO,CAACuwF,SAAY,CAAA,EAAA;YAC7B,OAAO,IAAI,CAACC,eAAe,CAACD,SAAAA,CAAAA,CAAAA;AAC9B,SAAA;;AAEA,QAAA,IAAMnF,QAAWmF,GAAAA,SAAAA,CAAU5+F,GAAG,CAAC,SAAClB,IAAAA,EAAAA;AAAS,YAAA,OAAA,KAAA,CAAK+/F,eAAe,CAAI//F,IAAAA,CAAAA,CAAAA;;QACjE,OAAOu4F,YAAAA,CAAamC,GAAG,CAACC,QAAAA,CAAAA,CAAAA;AAC1B,KAAA,CAAA;AAEA;;;;AAIC,MACDqF,MAAAA,CAAAA,YAEC,GAFDA,SAAAA,aAAgBn/F,GAAW,EAAA;AACjB,QAAA,IAAA,uBAAA,CAAA;QAAR,OAAO,CAAC,0BAAA,IAAI,CAACy+F,aAAa,CAACz+F,GAAAA,CAAI,YAAvB,uBAAiC,GAAA,IAAA,CAAA;AAC3C,KAAA,CAAA;AAEA;;;;AAIC,MACDo/F,MAAAA,CAAAA,mBAUC,GAVDA,SAAAA,oBAA4C/3G,IAAwB,EAAA;AAClE,QAAA,IAAMg4G,YAAY,IAAIn2G,KAAAA,EAAAA,CAAAA;QACtB,IAAMo2G,iBAAAA,GAAoB,IAAI,CAACZ,kBAAkB,CAAA;QACjD,IAAK,IAAM12G,KAAKs3G,iBAAmB,CAAA;YACjC,IAAMvzG,QAAAA,GAAWuzG,iBAAiB,CAACt3G,CAAE,CAAA,CAAA;YACrC,IAAY,WAAR+D,CAAAA,QAAAA,EAAoB1E,IAAM,CAAA,EAAA;AAC5Bg4G,gBAAAA,SAAAA,CAAUn0G,IAAI,CAACa,QAAAA,CAAAA,CAAAA;AACjB,aAAA;AACF,SAAA;QACA,OAAOszG,SAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;AAIC,MACDE,MAAAA,CAAAA,YAEC,GAFDA,SAAAA,aAAa31G,UAAkB,EAAA;AAC7B,QAAA,OAAO,IAAI,CAAC40G,UAAU,CAAC50G,UAAW,CAAA,CAAA;AACpC,KAAA,CAAA;AAmBA41G,IAAAA,MAAAA,CAAAA,eAYC,GAZDA,SAAAA,eAAAA,CAAgBx/F,GAAuB,EAAA;;AACrC,QAAA,IAAI,CAACA,GAAK,EAAA;YACRhB,KAAMkB,CAAAA,YAAY,CAAC,IAAI,CAACq+F,gBAAgB,CAAEpmF,CAAAA,OAAO,CAAC,SAAC+hF,OAAAA,EAAAA;AACjDA,gBAAAA,OAAAA,CAAQN,MAAM,EAAA,CAAA;AAChB,aAAA,CAAA,CAAA;SACK,MAAA,IAAI,OAAO55F,GAAAA,KAAQ,QAAU,EAAA;AAClC,YAAA,IAAA,0BAAA,CAAA;AAAA,YAAA,CAAA,0BAAA,GAAA,IAAI,CAACu+F,gBAAgB,CAACv+F,GAAI,CAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAA1B,2BAA4B45F,MAAM,EAAA,CAAA;SAC7B,MAAA;YACL55F,GAAImY,CAAAA,OAAO,CAAC,SAACsnF,CAAAA,EAAAA;AACX,gBAAA,IAAA,wBAAA,CAAA;AAAA,gBAAA,CAAA,wBAAA,GAAA,MAAKlB,gBAAgB,CAACkB,CAAE,CAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAxB,yBAA0B7F,MAAM,EAAA,CAAA;AAClC,aAAA,CAAA,CAAA;AACF,SAAA;AACF,KAAA,CAAA;AAEA;;;MAIA8F,MAAAA,CAAAA,EAGC,GAHDA,SAAAA,EAAAA,GAAAA;QACE,IAAI,CAACC,GAAG,CAAC,KAAA,CAAA,CAAA;QACT,IAAI,CAACh2G,MAAM,CAACi2G,UAAU,EAAA,CAAA;AACxB,KAAA,CAAA;AAEA;;;AAGC,MACDxiG,MAAAA,CAAAA,kBAEC,GAFDA,SAAAA,mBAA2CyiG,QAA4B,EAAA;QACrE,IAAI,CAACjB,oBAAoB,CAACiB,QAAAA,CAAS9zG,QAAQ,CAACnC,UAAU,CAAC,GAAGi2G,QAAAA,CAAAA;AAC5D,KAAA,CAAA;AAEA;;AAEC,MACDC,MAAAA,CAAAA,aAEC,GAFDA,SAAAA,cAAc9/F,GAAW,EAAA;AAChB,QAAA,IAAA,yBAAA,CAAA;QAAP,OAAO,CAAA,4BAAA,IAAI,CAACg/F,eAAe,CAACh/F,GAAAA,CAAI,YAAzB,yBAA6BA,GAAAA,GAAAA,CAAAA;AACtC,KAAA,CAAA;AAEA;;AAEC,MACD+/F,OAAAA,mBAEC,GAFDA,SAAAA,mBAAuB//F,CAAAA,GAAW,EAAEo7F,MAAqB,EAAA;AACvD,QAAA,OAAOD,QAAQn7F,GAAKo7F,EAAAA,MAAAA,CAAAA,CAAAA;AACtB,KAAA,CAAA;AAEA;;AAEC,MACD4E,OAAAA,QAGC,GAHDA,SAAAA,QAAYhgG,CAAAA,GAAW,EAAEo7F,MAAqB,EAAA;AAC5C,QAAA,IAAM6E,SAAY,GAAA,IAAI,CAACH,aAAa,CAAC9/F,GAAAA,CAAAA,CAAAA;AACrC,QAAA,OAAO,IAAI,CAAC+/F,mBAAmB,CAACE,SAAW7E,EAAAA,MAAAA,CAAAA,CAAAA;AAC7C,KAAA,CAAA;AAEA;;MAGA8E,MAAAA,CAAAA,kBAYC,GAZDA,SAAAA,mBAAsBC,YAAoB,EAAEC,YAAoB,EAAE30G,KAAQ,EAAA;AAG7C,QAAA,IAAA,kDAAA,CAAA;AAFA,QAAA,IAAA,kCAAA,CAAA;QAA3B,IAAM40G,kBAAAA,GAAqB,CAAA,kCAAA,GAAA,IAAI,CAACrB,eAAe,CAACmB,YAAa,CAAA,KAAA,IAAA,GAAlC,kCAAsCA,GAAAA,YAAAA,CAAAA;QAEjE,IAAMG,kBAAAA,GAAAA,CAAqB,kDAAA,GAAA,IAAI,CAACzB,yBAAyB,CAACwB,kBAAmB,CAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAlD,kDAAoD,CAACD,YAAa,CAAA,CAAA;AAC7F,QAAA,IAAIE,kBAAoB,EAAA;AACtBA,YAAAA,kBAAAA,CAAmBrI,OAAO,CAACxsG,KAAAA,CAAAA,CAAAA;SACtB,MAAA;;YAEJ,+BAA+B40G,EAAAA,mBAAAA,CAAAA;AAA/B,YAAA,CAAA,CAAA,+BAAA,GAAA,IAAI,CAACxB,yBAAyB,EAACwB,mBAAAA,GAAAA,kBAAAA,CAAmB,KAAlD,+BAA8B,CAACA,oBAAmB,GAAK,GAAC,EAAGD,aAAa,GAAG;gBAC1EG,aAAe90G,EAAAA,KAAAA;AACjB,aAAA,CAAA;AACF,SAAA;AACF,KAAA,CAAA;AAEA;;MAGA+0G,MAAAA,CAAAA,eAUC,GAVDA,SAAAA,gBAAgBL,YAAoB,EAAEC,YAAoB,EAAE30G,KAAY,EAAA;AAC3C,QAAA,IAAA,4CAAA,CAAA;QAA3B,IAAM60G,kBAAAA,GAAAA,CAAqB,4CAAA,GAAA,IAAI,CAACzB,yBAAyB,CAACsB,YAAa,CAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAA5C,4CAA8C,CAACC,YAAa,CAAA,CAAA;AACvF,QAAA,IAAIE,kBAAoB,EAAA;AACtBA,YAAAA,kBAAAA,CAAmBpI,MAAM,CAACzsG,KAAAA,CAAAA,CAAAA;SACrB,MAAA;;YAEJ,+BAA+B00G,EAAAA,aAAAA,CAAAA;AAA/B,YAAA,CAAA,CAAA,+BAAA,GAAA,IAAI,CAACtB,yBAAyB,EAACsB,aAAAA,GAAAA,YAAAA,CAAa,KAA5C,+BAA8B,CAACA,cAAa,GAAK,GAAC,EAAGC,aAAa,GAAG;gBACpEK,aAAeh1G,EAAAA,KAAAA;AACjB,aAAA,CAAA;AACF,SAAA;AACF,KAAA,CAAA;AAEA;;AAEC,MACDG,OAAAA,SAGC,GAHDA,SAAAA,SAAUD,CAAAA,IAAY,EAAE+0G,KAAmB,EAAA;AACzC,QAAA,IAAI,CAAClC,UAAU,CAACkC,KAAM92G,CAAAA,UAAU,CAAC,GAAG+B,IAAAA,CAAAA;AACpC,QAAA,IAAI,CAAC8yG,aAAa,CAAC9yG,IAAAA,CAAK,GAAG+0G,KAAAA,CAAAA;AAC7B,KAAA,CAAA;AAEA;;AAEC,MACDv2G,MAAAA,CAAAA,YAOC,GAPDA,SAAAA,aAAau2G,KAAmB,EAAA;QAC9B,IAAMriF,EAAAA,GAAKqiF,MAAM92G,UAAU,CAAA;AAC3B,QAAA,IAAM+B,IAAO,GAAA,IAAI,CAAC6yG,UAAU,CAACngF,EAAG,CAAA,CAAA;AAChC,QAAA,IAAI1yB,IAAM,EAAA;AACR,YAAA,OAAO,IAAI,CAAC6yG,UAAU,CAACngF,EAAG,CAAA,CAAA;AAC1B,YAAA,OAAO,IAAI,CAACogF,aAAa,CAAC9yG,IAAK,CAAA,CAAA;AACjC,SAAA;AACF,KAAA,CAAA;AAEA;;AAEC,MACDjB,MAAAA,CAAAA,iBAEC,GAFDA,SAAAA,kBAAkBqB,QAAuB,EAAA;AACvC,QAAA,IAAI,CAAC2yG,kBAAkB,CAAC3yG,QAASnC,CAAAA,UAAU,CAAC,GAAGmC,QAAAA,CAAAA;AACjD,KAAA,CAAA;AAEA;;AAEC,MACDF,MAAAA,CAAAA,oBAEC,GAFDA,SAAAA,qBAAqBE,QAAsB,EAAA;AACzC,QAAA,OAAO,IAAI,CAAC2yG,kBAAkB,CAAC3yG,QAAAA,CAASnC,UAAU,CAAC,CAAA;AACrD,KAAA,CAAA;AAEA;;AAEC,MACD6C,MAAAA,CAAAA,mBAEC,GAFDA,SAAAA,oBAAoBV,QAA0B,EAAA;AAC5C,QAAA,IAAI,CAAC4yG,oBAAoB,CAAC5yG,QAASnC,CAAAA,UAAU,CAAC,GAAGmC,QAAAA,CAAAA;AACnD,KAAA,CAAA;AAEA;;AAEC,MACDW,MAAAA,CAAAA,sBAEC,GAFDA,SAAAA,uBAAuBX,QAAsB,EAAA;AAC3C,QAAA,OAAO,IAAI,CAAC4yG,oBAAoB,CAAC5yG,QAAAA,CAASnC,UAAU,CAAC,CAAA;AACvD,KAAA,CAAA;AAEA;;AAEC,MACDQ,MAAAA,CAAAA,sBAEC,GAFDA,SAAAA,uBAAuB2B,QAAsB,EAAA;AAC3C,QAAA,OAAO,IAAI,CAAC6yG,oBAAoB,CAAC7yG,QAAAA,CAASnC,UAAU,CAAC,CAAA;AACvD,KAAA,CAAA;AAEA;;MAGA+2G,MAAAA,CAAAA,wBAKC,GALDA,SAAAA,wBAAAA,GAAAA;QACE,IAAMC,mBAAAA,GAAsB,IAAI,CAACjC,oBAAoB,CAAA;QACrD,IAAK,IAAMtgF,MAAMuiF,mBAAqB,CAAA;YACpCA,mBAAmB,CAACviF,EAAG,CAAA,CAAClwB,QAAQ,EAAA,CAAA;AAClC,SAAA;AACF,KAAA,CAAA;AAEA;;MAGA0yG,MAAAA,CAAAA,qBAKC,GALDA,SAAAA,qBAAAA,GAAAA;QACE,IAAMD,mBAAAA,GAAsB,IAAI,CAACjC,oBAAoB,CAAA;QACrD,IAAK,IAAMtgF,MAAMuiF,mBAAqB,CAAA;AACpCA,YAAAA,mBAAmB,CAACviF,EAAAA,CAAG,CAAC7xB,cAAc,GAAG,IAAA,CAAA;AAC3C,SAAA;AACF,KAAA,CAAA;AAEA;;MAGAs0G,MAAAA,CAAAA,wBASC,GATDA,SAAAA,wBAAAA,GAAAA;QACE,IAAMC,sBAAAA,GAAyB,IAAI,CAACnC,oBAAoB,CAAA;AACxD,QAAA,IAAMoC,kBAAkB,IAAI93G,KAAAA,EAAAA,CAAAA;QAC5B,IAAK,IAAMlB,KAAK+4G,sBAAwB,CAAA;YACtC,IAAME,WAAAA,GAAcF,sBAAsB,CAAC/4G,CAAE,CAAA,CAAA;YAC7C,IAAMkyG,OAAAA,GAAU+G,YAAY5jG,cAAc,EAAA,CAAA;YAC1C68F,OAAW8G,IAAAA,eAAAA,CAAgB91G,IAAI,CAACgvG,OAAAA,CAAAA,CAAAA;AAClC,SAAA;QACA,OAAOlC,OAAAA,CAAQ6B,GAAG,CAACmH,eAAAA,CAAAA,CAAAA;AACrB,KAAA,CAAA;AAEA;;MAGA56E,MAAAA,CAAAA,QASC,GATDA,SAAAA,QAAAA,GAAAA;AACE,QAAA,IAAI,CAACo5E,eAAe,EAAA,CAAA;QACpB,IAAI,CAACG,GAAG,CAAC,IAAA,CAAA,CAAA;QACT,IAAI,CAACnB,UAAU,GAAG,IAAA,CAAA;QAClB,IAAI,CAACC,aAAa,GAAG,IAAA,CAAA;QACrB,IAAI,CAACC,kBAAkB,GAAG,IAAA,CAAA;QAC1B,IAAI,CAACC,oBAAoB,GAAG,IAAA,CAAA;QAC5B,IAAI,CAACC,oBAAoB,GAAG,IAAA,CAAA;QAC5B,IAAI,CAACL,gBAAgB,GAAG,IAAA,CAAA;AAC1B,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQ2C,qBAUP,GAVD,SAAQA,qBAAAA,CAAsBjC,SAAmB,EAAA;AAC9BA,QAAAA,IAAAA,eAAAA,CAAAA;AAAjBA,QAAAA,SAAAA,CAAU53G,IAAI,GAAG43G,CAAAA,eAAAA,GAAAA,SAAU53G,CAAAA,IAAI,KAAd43G,IAAAA,GAAAA,eAAAA,GAAkBX,eAzU1BA,CAyU0C6C,aAAa,CAAClC,UAAUj/F,GAAG,CAAA,CAAA;QAC9E,IAAIi/F,SAAAA,CAAU53G,IAAI,KAAKiB,SAAW,EAAA;YAChC,MAAO,kCAAkC22G,GAAAA,SAAAA,CAAUj/F,GAAG,CAAA;AACxD,SAAA;AACuBi/F,QAAAA,IAAAA,qBAAAA,CAAAA;QAAvBA,SAAU5D,CAAAA,UAAU,GAAG4D,CAAAA,qBAAAA,GAAAA,SAAAA,CAAU5D,UAAU,KAApB4D,IAAAA,GAAAA,qBAAAA,GAAwB,IAAI,CAAC5D,UAAU,CAAA;AAC1C4D,QAAAA,IAAAA,kBAAAA,CAAAA;QAApBA,SAAU1D,CAAAA,OAAO,GAAG0D,CAAAA,kBAAAA,GAAAA,SAAAA,CAAU1D,OAAO,KAAjB0D,IAAAA,GAAAA,kBAAAA,GAAqB,IAAI,CAAC1D,OAAO,CAAA;AAC3B0D,QAAAA,IAAAA,wBAAAA,CAAAA;QAA1BA,SAAU3D,CAAAA,aAAa,GAAG2D,CAAAA,wBAAAA,GAAAA,SAAAA,CAAU3D,aAAa,KAAvB2D,IAAAA,GAAAA,wBAAAA,GAA2B,IAAI,CAAC3D,aAAa,CAAA;AACvD2D,QAAAA,IAAAA,cAAAA,CAAAA;AAAhBA,QAAAA,SAAAA,CAAUj/F,GAAG,GAAGi/F,CAAAA,cAAAA,GAAAA,SAAUj/F,CAAAA,GAAG,KAAbi/F,IAAAA,GAAAA,cAAAA,GAAiBA,SAAUmC,CAAAA,IAAI,CAACtqF,IAAI,CAAC,GAAA,CAAA,CAAA;QACrD,OAAOmoF,SAAAA,CAAAA;AACT,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQC,eAmEP,GAnED,SAAQA,eAAAA,CAAmBmC,SAA4B,EAAA;;AACrD,QAAA,IAAMliG,OAAO,IAAI,CAAC+hG,qBAAqB,CAAC,OAAOG,cAAc,QAAW,GAAA;YAAErhG,GAAKqhG,EAAAA,SAAAA;SAAcA,GAAAA,SAAAA,CAAAA,CAAAA;QAC7F,IAAMrhG,MAAQb,IAARa,CAAAA,GAAAA,CAAAA;;AAGN,QAAA,IAAI,CAAChB,KAAMe,CAAAA,aAAa,CAACC,GAAAA,CAAAA,IAAQ,IAAI,CAACO,OAAO,EAAEP,GAAAA,GAAMhB,MAAMsB,kBAAkB,CAAC,IAAI,CAACC,OAAO,EAAEP,GAAAA,CAAAA,CAAAA;;QAG5F,IAAoC,eAAA,GAAA,IAAI,CAACshG,SAAS,CAACthG,MAA3CmgG,YAA4B,GAAA,eAAA,CAA5BA,YAAcoB,EAAAA,SAAAA,GAAc,eAAdA,CAAAA,SAAAA,CAAAA;AACtB,QAAA,IAAM5pE,QAAQ4pE,SAAY,GAAA,IAAI,CAACC,eAAe,CAACD,aAAa,EAAE,CAAA;AAGnC,QAAA,IAAA,kCAAA,CAAA;;QAA3B,IAAMlB,kBAAAA,GAAqB,CAAA,kCAAA,GAAA,IAAI,CAACrB,eAAe,CAACmB,YAAa,CAAA,KAAA,IAAA,GAAlC,kCAAsCA,GAAAA,YAAAA,CAAAA;;AAGjE,QAAA,IAAMsB,WAAc,GAAA,IAAI,CAAChD,aAAa,CAAC4B,kBAAmB,CAAA,CAAA;AAC1D,QAAA,IAAIoB,WAAa,EAAA;YACf,OAAO,IAAI/J,aAAa,SAACO,OAAAA,EAAAA;gBACvBA,OAAQ,CAAA,KAAA,CAAKyJ,mBAAmB,CAACD,WAAa9pE,EAAAA,KAAAA,CAAAA,CAAAA,CAAAA;AAChD,aAAA,CAAA,CAAA;AACF,SAAA;;AAGA,QAAA,IAAIgqE,cAAiBtB,GAAAA,kBAAAA,CAAAA;AACrB,QAAA,IAAIkB,SAAW,EAAA;YACbI,cAAkB,IAAA,KAAA,GAAQhqE,MAAMiqE,KAAK,EAAA,CAAA;YACrC,IAAIx2G,KAAAA,CAAAA;YACJ,MAAQA,KAAAA,GAAQusC,KAAMiqE,CAAAA,KAAK,EAAK,CAAA;gBAC9BD,cAAkB,IAAC,MAAGv2G,KAAM,GAAA,GAAA,CAAA;AAC9B,aAAA;AACF,SAAA;;QAGA,IAAMy2G,eAAAA,GAAkB,IAAI,CAACtD,gBAAgB,CAAA;QAC7C,IAAMuD,cAAAA,GAAiBD,eAAe,CAACF,cAAe,CAAA,CAAA;AACtD,QAAA,IAAIG,cAAgB,EAAA;AAClB,YAAA,OAAO,IAAIpK,YAAAA,CAAa,SAACO,OAAAA,EAASC,QAAQQ,uBAAyBK,EAAAA,qBAAAA,EAAAA;AACjE+I,gBAAAA,cAAAA,CACG7I,UAAU,CAACP,uBAAAA,EAAyBK,qBACpChC,CAAAA,CAAAA,IAAI,CAAC,SAAChrG,QAAAA,EAAAA;oBACLksG,OAAQlsG,CAAAA,QAAAA,CAAAA,CAAAA;iBAETytG,CAAAA,CAAAA,KAAK,CAAC,SAACnsG,KAAAA,EAAAA;oBACN6qG,MAAO7qG,CAAAA,KAAAA,CAAAA,CAAAA;AACT,iBAAA,CAAA,CAAA;AACJ,aAAA,CAAA,CAAA;AACF,SAAA;;AAGA,QAAA,IAAM00G,SAAoBzD,eArYjBA,CAqYiC0D,QAAQ,CAAC7iG,IAAAA,CAAK9X,IAAI,CAAC,CAAA;AAC7D,QAAA,IAAI,CAAC06G,MAAQ,EAAA;YACX,MAAO,oBAAoB5iG,GAAAA,IAAAA,CAAK9X,IAAI,CAAA;AACtC,SAAA;;AAGA,QAAA,IAAIk6G,SAAW,EAAA;;YAEb,IAAMU,WAAAA,GACJJ,eAAe,CAACxB,kBAAmB,CAAA,IAAI,IAAI,CAAC6B,cAAc,CAACH,MAAQ5iG,EAAAA,IAAAA,EAAMkhG,kBAAoBF,EAAAA,YAAAA,CAAAA,CAAAA;YAC/F8B,WAAYzI,CAAAA,KAAK,CAAC,SAACnhF,CAAAA,EAAAA;gBACjB,KAAKmoF,CAAAA,eAAe,CAACH,kBAAAA,EAAoBkB,SAAWlpF,EAAAA,CAAAA,CAAAA,CAAAA;AACtD,aAAA,CAAA,CAAA;AAEA,YAAA,OAAO,IAAI,CAAC8pF,8BAA8B,CAAI9B,oBAAoBsB,cAAgBJ,EAAAA,SAAAA,CAAAA,CAAAA;AACpF,SAAA;AAEA,QAAA,OAAO,IAAI,CAACW,cAAc,CAACH,MAAAA,EAAQ5iG,MAAMkhG,kBAAoBF,EAAAA,YAAAA,CAAAA,CAAAA;AAC/D,KAAA,CAAA;IAEA,MAAQ+B,CAAAA,cA0BP,GA1BD,SAAQA,cACNH,CAAAA,MAAiB,EACjB5iG,IAAc,EACdkhG,kBAA0B,EAC1BF,YAAoB,EAAA;;AAEpBhhG,QAAAA,IAAAA,CAAKa,GAAG,GAAGmgG,YAAAA,CAAAA;QACX,IAAM0B,eAAAA,GAAkB,IAAI,CAACtD,gBAAgB,CAAA;AAC7C,QAAA,IAAMrE,OAAU6H,GAAAA,MAAAA,CAAOjL,IAAI,CAAC33F,MAAM,IAAI,CAAA,CAAA;QACtC0iG,eAAe,CAACxB,mBAAmB,GAAGnG,OAAAA,CAAAA;QAEtCA,OAAQnD,CAAAA,IAAI,CACV,SAAChrG,QAAAA,EAAAA;YACC,IAAIg2G,MAAAA,CAAOK,QAAQ,EAAE;gBACnB,KAAKx2G,CAAAA,SAAS,CAACy0G,kBAAoBt0G,EAAAA,QAAAA,CAAAA,CAAAA;AACrC,aAAA;YACA,OAAO81G,eAAe,CAACxB,kBAAmB,CAAA,CAAA;AAC1C,YAAA,KAAA,CAAKgC,+BAA+B,CAAChC,kBAAAA,CAAAA,CAAAA;SAEvC,EAAA,WAAA;YACE,OAAOwB,eAAe,CAACxB,kBAAmB,CAAA,CAAA;AAC1C,YAAA,KAAA,CAAKgC,+BAA+B,CAAChC,kBAAAA,CAAAA,CAAAA;AACvC,SAAA,CAAA,CAAA;QAGF,OAAOnG,OAAAA,CAAAA;AACT,KAAA,CAAA;IAEA,MAAQiI,CAAAA,8BAuCP,GAvCD,SAAQA,8BAAAA,CACN9B,kBAA0B,EAC1BsB,cAAsB,EACtBvB,YAAoB,EAAA;;AAGO,QAAA,IAAA,kDAAA,CAAA;QAD3B,IAAMyB,eAAAA,GAAkB,IAAI,CAACtD,gBAAgB,CAAA;QAC7C,IAAM+B,kBAAAA,GAAAA,CAAqB,kDAAA,GAAA,IAAI,CAACzB,yBAAyB,CAACwB,kBAAmB,CAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAlD,kDAAoD,CAACD,YAAa,CAAA,CAAA;QAC7F,IAAMG,aAAAA,GAAgBD,kBAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,kBAAAA,CAAoBC,aAAa,CAAA;QACvD,IAAME,aAAAA,GAAgBH,kBAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,kBAAAA,CAAoBG,aAAa,CAAA;;AAGvD,QAAA,IAAIF,iBAAiBE,aAAe,EAAA;YAClC,OAAO,IAAI/I,YAAgB,CAAA,SAACO,OAASC,EAAAA,MAAAA,EAAAA;AACnC,gBAAA,IAAIqI,aAAe,EAAA;oBACjBtI,OAAQsI,CAAAA,aAAAA,CAAAA,CAAAA;AACV,iBAAA,MAAO,IAAIE,aAAe,EAAA;oBACxBvI,MAAOuI,CAAAA,aAAAA,CAAAA,CAAAA;AACT,iBAAA;AACF,aAAA,CAAA,CAAA;AACF,SAAA;;AAGA,QAAA,IAAMvG,OAAU,GAAA,IAAIxC,YAAgB,CAAA,SAACO,OAASC,EAAAA,MAAAA,EAAAA;gBAC3C,+BAA+BmI,EAAAA,mBAAAA,CAAAA;AAA/B,YAAA,CAAA,CAAA,+BAAA,GAAA,KAAA,CAAKxB,yBAAyB,EAACwB,sBAAAA,kBAAmB,CAAA,KAAlD,+BAA8B,CAACA,oBAAmB,GAAK,GAAC,EAAGD,aAAa,GAAG;gBAC1EnI,OAAAA,EAAAA,OAAAA;gBACAC,MAAAA,EAAAA,MAAAA;AACF,aAAA,CAAA;AACF,SAAA,CAAA,CAAA;QAEA2J,eAAe,CAACF,eAAe,GAAGzH,OAAAA,CAAAA;AAElCA,QAAAA,OAAAA,CAAQnD,IAAI,CACV,WAAA;YACE,OAAO8K,eAAe,CAACF,cAAe,CAAA,CAAA;SAExC,EAAA,WAAA;mBAAM,OAAOE,eAAe,CAACF,cAAe,CAAA,CAAA;;QAG9C,OAAOzH,OAAAA,CAAAA;AACT,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQyF,GAQP,GARD,SAAQA,GAAAA,CAAI2C,YAAqB,EAAA;AAC/B,QAAA,IAAMC,UAA2BvjG,KAAMkB,CAAAA,YAAY,CAAC,IAAI,CAACw+F,kBAAkB,CAAA,CAAA;QAC3E,IAAK,IAAIt1G,IAAI,CAAG0B,EAAAA,CAAAA,GAAIy3G,QAAQv5G,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;YAC9C,IAAMoa,MAAAA,GAAS++F,OAAO,CAACn5G,CAAE,CAAA,CAAA;AACzB,YAAA,IAAI,CAACoa,MAAAA,CAAOjZ,WAAW,IAAI+3G,YAAc,EAAA;gBACvC9+F,MAAOxZ,CAAAA,OAAO,CAACs4G,YAAc,EAAA,IAAA,CAAA,CAAA;AAC/B,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQZ,mBASP,GATD,SAAQA,mBAAoB31G,CAAAA,QAAa,EAAE4rC,KAAe,EAAA;AACxD,QAAA,IAAI6qE,WAAcz2G,GAAAA,QAAAA,CAAAA;AAClB,QAAA,IAAI4rC,KAAO,EAAA;YACT,IAAK,IAAIvuC,IAAI,CAAG0B,EAAAA,CAAAA,GAAI6sC,MAAM3uC,MAAM,EAAEI,CAAI0B,GAAAA,CAAAA,EAAG1B,CAAK,EAAA,CAAA;gBAC5C,IAAMuC,IAAAA,GAAOgsC,KAAK,CAACvuC,CAAE,CAAA,CAAA;gBACrBo5G,WAAcA,GAAAA,WAAW,CAAC72G,IAAK,CAAA,CAAA;AACjC,aAAA;AACF,SAAA;QACA,OAAO62G,WAAAA,CAAAA;AACT,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQlB,SAiBP,GAjBD,SAAQA,SAAAA,CAAU31G,IAAY,EAAA;AAC5B,QAAA,IAA6BA,cAAAA,IAAKuM,CAAAA,KAAK,CAAC,GAAjCqI,CAAAA,EAAAA,OAAAA,GAAsB5U,gBAAb82G,SAAa92G,GAAAA,WAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAC7B,QAAA,IAAI41G,SAAYj5G,GAAAA,SAAAA,CAAAA;AAChB,QAAA,IAAI63G,YAAe5/F,GAAAA,OAAAA,CAAAA;AACnB,QAAA,IAAIkiG,SAAW,EAAA;YACb,IAAMC,MAAAA,GAASD,SAAUvqG,CAAAA,KAAK,CAAC,GAAA,CAAA,CAAA;AAC/B,YAAA,IAAK,IAAI9O,CAAI,GAAA,CAAA,EAAGA,IAAIs5G,MAAO15G,CAAAA,MAAM,EAAEI,CAAK,EAAA,CAAA;gBACtC,IAAMid,KAAAA,GAAQq8F,MAAM,CAACt5G,CAAE,CAAA,CAAA;gBACvB,IAAIid,KAAAA,CAAMs8F,UAAU,CAAE,IAAM,CAAA,EAAA;AAC1BpB,oBAAAA,SAAAA,GAAY1hG,mBAAmBwG,KAAMnO,CAAAA,KAAK,CAAC,GAAA,CAAI,CAAC,CAAE,CAAA,CAAA,CAAA;oBAClDwqG,MAAOp3G,CAAAA,MAAM,CAAClC,CAAG,EAAA,CAAA,CAAA,CAAA;AACjB,oBAAA,MAAA;AACF,iBAAA;AACF,aAAA;YACA+2G,YAAeuC,GAAAA,MAAAA,CAAO15G,MAAM,GAAG,CAAA,GAAIuX,UAAU,GAAMmiG,GAAAA,MAAAA,CAAO5rF,IAAI,CAAC,GAAOvW,CAAAA,GAAAA,OAAAA,CAAAA;AACxE,SAAA;QACA,OAAO;YAAE4/F,YAAAA,EAAAA,YAAAA;YAAcoB,SAAAA,EAAAA,SAAAA;AAAU,SAAA,CAAA;AACnC,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQC,eAeP,GAfD,SAAQA,eAAAA,CAAgB58F,MAAM,EAAA;AAC5B,QAAA,IAAMC,SAAS,EAAE,CAAA;AACjB,QAAA,IAAID,MAAOhP,CAAAA,UAAU,CAAC,CAAA,CAAA,KAAOkP,aAAe,EAAA;AAC1CD,YAAAA,MAAAA,CAAO3Z,IAAI,CAAC,EAAA,CAAA,CAAA;AACd,SAAA;AACA0Z,QAAAA,MAAAA,CAAOG,OAAO,CAACC,UAAAA,EAAY,SAACC,KAAAA,EAAOC,YAAYC,KAAOC,EAAAA,SAAAA,EAAAA;AACpD,YAAA,IAAIxH,GAAMqH,GAAAA,KAAAA,CAAAA;AACV,YAAA,IAAIE,KAAO,EAAA;gBACTvH,GAAMwH,GAAAA,SAAAA,CAAUL,OAAO,CAACM,YAAc,EAAA,IAAA,CAAA,CAAA;AACxC,aAAA,MAAO,IAAIH,UAAY,EAAA;AACrBtH,gBAAAA,GAAAA,GAAMsH,WAAWI,IAAI,EAAA,CAAA;AACvB,aAAA;AACAT,YAAAA,MAAAA,CAAO3Z,IAAI,CAAC0S,GAAAA,CAAAA,CAAAA;AACd,SAAA,CAAA,CAAA;QACA,OAAOiH,MAAAA,CAAAA;AACT,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQw9F,+BAEP,GAFD,SAAQA,+BAAAA,CAAgClC,YAAoB,EAAA;AAC1D,QAAA,OAAO,IAAI,CAACtB,yBAAyB,CAACsB,YAAa,CAAA,CAAA;AACrD,KAAA,CAAA;AAWA;;;AAGC,MACDyC,MAAAA,CAAAA,gBAyBC,GAzBDA,SAAAA,iBAAoBC,GAAuD,EAAA;AACzE,QAAA,IAAQC,QAAwBD,GAAxBC,CAAAA,KAAAA,EAAOllG,MAAiBilG,GAAjBjlG,CAAAA,GAAAA,EAAKmlG,UAAYF,GAAZE,CAAAA,OAAAA,CAAAA;AACpB,QAAA,IAAM5iG,GAAM,GAAA,IAAI,CAAC2+F,WAAW,CAACgE,KAAM,CAAA,CAAA;QACnC,IAAI5I,OAAAA,CAAAA;AACJ,QAAA,IAAI/5F,GAAK,EAAA;YACP+5F,OAAUlC,GAAAA,OAAAA,CAAQC,OAAO,CAAC93F,GAAAA,CAAAA,CAAAA;SACrB,MAAA;AACL,YAAA,IAAM6iG,cAAiB,GAAA,IAAI,CAACjE,qBAAqB,CAAC+D,KAAM,CAAA,CAAA;AACxD,YAAA,IAAI,CAACE,cAAgB,EAAA;AACnB11G,gBAAAA,MAAAA,CAAOF,IAAI,CAAC,QAAC,GAAQ01G,KAAM,GAAA,6CAAA,CAAA,CAAA;gBAC3B,OAAO9K,OAAAA,CAAQC,OAAO,CAAC,IAAA,CAAA,CAAA;AACzB,aAAA;YACA,IAAMgI,SAAAA,GAAY+C,eAAer3G,IAAI,CAAA;AACrC,YAAA,IAAM41G,SAAY,GAAA,IAAI7gG,GAAIu/F,CAAAA,SAAAA,CAAAA,CAAWgD,MAAM,CAAA;YAC3C,IAAIjjG,GAAAA,GAAMgjG,cAAeE,CAAAA,WAAW,GAAG3B,SAAAA,CAAAA;AACvC,YAAA,IAAI3jG,GAAK,EAAA;gBACPoC,GAAO,IAACA,CAAAA,GAAAA,CAAI3U,OAAO,CAAC,GAAO,CAAA,GAAA,CAAC,CAAI,GAAA,GAAA,GAAM,GAAE,IAAK,IAAOuS,GAAAA,GAAAA,CAAAA;AACtD,aAAA;YAEAs8F,OAAU,GAAA,IAAI,CAACpD,IAAI,CAAM;gBACvB92F,GAAAA,EAAAA,GAAAA;AACA3Y,gBAAAA,IAAAA,EAAM27G,eAAe37G,IAAI;AAC3B,aAAA,CAAA,CAAA;AACF,SAAA;QACA,OAAO6yG,OAAAA,CAAQnD,IAAI,CAAC,SAAC53F,IAAAA,EAAAA;mBAAU4jG,OAAU5jG,GAAAA,IAAAA,CAAK+I,KAAK,EAAK/I,GAAAA,IAAAA,CAAAA;;AAC1D,KAAA,CAAA;AAEA;;;AAGC,MACDgkG,MAAAA,CAAAA,oBAKC,GALDA,SAAAA,qBAAqB/H,MAA4B,EAAA;;QAC/CA,MAAOjjF,CAAAA,OAAO,CAAC,SAAC1T,OAAAA,EAAAA;AACd,YAAA,KAAA,CAAKu6F,eAAe,CAACv6F,OAAAA,CAAQy+F,WAAW,CAAC,GAAGz+F,QAAQ9Y,IAAI,CAAA;AACxD,YAAA,KAAA,CAAKozG,qBAAqB,CAACt6F,OAAQ4Z,CAAAA,EAAE,CAAC,GAAG5Z,OAAAA,CAAAA;AAC3C,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;AAvkBA;;MALW65F,eAQJ8E,CAAAA,UAKN,GALD,SAAOA,WAAW/7G,IAAY,EAAE06G,MAAmB,EAAEsB,QAAkB,EAAA;AACrE,QAAA,IAAI,CAACrB,QAAQ,CAAC36G,IAAAA,CAAK,GAAG06G,MAAAA,CAAAA;QACtB,IAAK,IAAI34G,IAAI,CAAG4S,EAAAA,GAAAA,GAAMqnG,SAASr6G,MAAM,EAAEI,CAAI4S,GAAAA,GAAAA,EAAK5S,CAAK,EAAA,CAAA;YACnD,IAAI,CAACk6G,eAAe,CAACD,QAAQ,CAACj6G,CAAE,CAAA,CAACm6G,WAAW,EAAA,CAAG,GAAGl8G,IAAAA,CAAAA;AACpD,SAAA;AACF,KAAA,CAAA;AAbWi3G,IAAAA,eAAAA,CAeI6C,aAGd,GAHD,SAAeA,aAAAA,CAAcnhG,GAAW,EAAA;AACtC,QAAA,IAAMrU,OAAOqU,GAAI9H,CAAAA,KAAK,CAAC,GAAA,CAAI,CAAC,CAAE,CAAA,CAAA;AAC9B,QAAA,OAAO,IAAI,CAACorG,eAAe,CAAC33G,IAAKiV,CAAAA,SAAS,CAACjV,IAAAA,CAAK6xG,WAAW,CAAC,GAAO,CAAA,GAAA,CAAA,CAAA,CAAG+F,WAAW,EAAG,CAAA,CAAA;AACtF,KAAA,CAAA;AAlBWjF,IAAAA,OAAAA,eAAAA,CAAAA;AA8kBZ,CAAA,GAAA;AA7kBC,iBADWA,eAEJ0D,CAAAA,QAAAA,GAA2C,EAAC,CAAA;AAFxC1D,eAAAA,CAGIgF,kBAA6C,EAAC,CAAA;AA6kB/D;;;;AAIC,IACM,SAASE,cAAAA,CAAeC,SAAiB,EAAEJ,QAAkB,EAAEjB,QAAwB,EAAA;AAAxBA,IAAAA,IAAAA,qBAAAA,QAAoB,GAAA,IAAA,CAAA;AACxF,IAAA,OAAO,SAAwBsB,MAAAA,EAAAA;QAC7B,IAAM3B,MAAAA,GAAS,IAAI2B,MAAOtB,CAAAA,QAAAA,CAAAA,CAAAA;QAC1B9D,eAAgB8E,CAAAA,UAAU,CAACK,SAAAA,EAAW1B,MAAQsB,EAAAA,QAAAA,CAAAA,CAAAA;AAChD,KAAA,CAAA;AACF,CAAA;AAEA,IAAMv+F,aAAAA,GAAgB,GAAIlP,CAAAA,UAAU,CAAC,CAAA,CAAA,CAAA;AACrC,IAAMyP,YAAe,GAAA,UAAA,CAAA;AACrB,IAAML,UAAAA,GAAaO;AAEjB,WAAA,GACE;AAEA,QAAA;AAEA,eAAA,GACA;AAEA,wCACA,GAAA,MAAA,GACA;AAEA,oCACF,EAAA,GAAA,CAAA;;ACxnBF;;IAGO,IAAKo+F,YAAAA,iBAAAA,SAAAA,YAAAA,EAAAA;4CAC2B,YAAA,CAAA,YAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA,CAAA;0CAEF,YAAA,CAAA,YAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA,CAAA;6DAEmB,YAAA,CAAA,YAAA,CAAA,YAAA,CAAA,GAAA,CAAA,CAAA,GAAA,YAAA,CAAA;iDAEZ,YAAA,CAAA,YAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,GAAA,IAAA,CAAA;0DAES,YAAA,CAAA,YAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA,CAAA;AATzCA,IAAAA,OAAAA,YAAAA,CAAAA;AAWX,CAAA,CAAA,EAAA;;ACPD;;IAGO,IAAMC,OAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,OAAAA,CAqHCvlF,EAAU,EAAA;qCA/GI,IAAA,CAC1BwlF,KAAsBF,GAAAA,YAAAA,CAAaG,KAAK,CAAA;8EAK2B,IAAA,CACnEz8D,WAAoB,IAAIjyC,kBAAAA,EAAAA,CAAAA;0CACO,IAAA,CAC/B48E,gBAAyB,IAAI58E,kBAAAA,EAAAA,CAAAA;yBACf,IAAA,CACdgZ,UAA0B,EAAE,CAAA;yBAGd,IAAA,CACd21F,SAAmB,EAAE,CAAA;yBACP,IAAA,CACdC,WAAqB,EAAE,CAAA;yBACT,IAAA,CACdC,UAA0C,IAAIvzD,eAAAA,EAAAA,CAAAA;yBAChC,IAAA,CACdwzD,YAA4C,IAAIxzD,eAAAA,EAAAA,CAAAA;QA2F9C,IAAI,CAACryB,EAAE,GAAGA,EAAAA,CAAAA;;AAtHDulF,IAAAA,IAAAA,MAAAA,GAAAA,OAAAA,CAAAA,SAAAA,CAAAA;AAgCX;;AAEC,MACDO,MAAAA,CAAAA,wBAwBC,GAxBDA,SAAAA,yBAAyBC,aAAqB,EAAA;;AAC5C,QAAA,IAAI,IAAI,CAACC,qBAAqB,KAAKD,aAAe,EAAA;YAChD,IAAI,IAAI,CAACC,qBAAqB,EAAE;AAC9B,gBAAA,IAAI,CAACA,qBAAqB,CAAC5a,QAAQ,CAACtxE,OAAO,CACzC,SAAC1T,OAAAA,EAAAA;AACCA,oBAAAA,OAAAA,CAAQ6/F,aAAa,CAAA,KAAA,CAAA,CAAA;AACvB,iBAAA,EACA,SAAC7/F,OAAiBrZ,EAAAA,KAAAA,EAAAA;AAChBqZ,oBAAAA,OAAAA,CAAQmoF,mBAAmB,GAAGxhG,KAAAA,CAAAA;AAChC,iBAAA,CAAA,CAAA;AAEJ,aAAA;AACA,YAAA,IAAIg5G,aAAe,EAAA;AACjBA,gBAAAA,aAAAA,CAAc3a,QAAQ,CAACtxE,OAAO,CAC5B,SAAC1T,OAAAA,EAAAA;AACCA,oBAAAA,OAAAA,CAAQ8/F,cAAc,CAAA,KAAA,CAAA,CAAA;AACxB,iBAAA,EACA,SAAC9/F,OAAiBrZ,EAAAA,KAAAA,EAAAA;AAChBqZ,oBAAAA,OAAAA,CAAQmoF,mBAAmB,GAAGxhG,KAAAA,CAAAA;AAChC,iBAAA,CAAA,CAAA;AAEJ,aAAA;YACA,IAAI,CAACi5G,qBAAqB,GAAGD,aAAAA,CAAAA;AAC/B,SAAA;AACF,KAAA,CAAA;AAEA;;AAEC,MACDI,MAAAA,CAAAA,gBAYC,GAZDA,SAAAA,iBAAiBJ,aAAqB,EAAA;;AACpC,QAAA,IAAIA,aAAe,EAAA;AACjBA,YAAAA,aAAAA,CAAc3a,QAAQ,CAACtxE,OAAO,CAC5B,SAAC1T,OAAAA,EAAAA;AACCA,gBAAAA,OAAAA,CAAQggG,aAAa,CAAA,KAAA,CAAA,CAAA;AACvB,aAAA,EACA,SAAChgG,OAAiBrZ,EAAAA,KAAAA,EAAAA;AAChBqZ,gBAAAA,OAAAA,CAAQmoF,mBAAmB,GAAGxhG,KAAAA,CAAAA;AAChC,aAAA,CAAA,CAAA;AAEJ,SAAA;QACA,IAAI,CAACs5G,qBAAqB,GAAGN,aAAAA,CAAAA;AAC/B,KAAA,CAAA;AAEA;;MAGAO,MAAAA,CAAAA,gBAWC,GAXDA,SAAAA,gBAAAA,GAAAA;;QACE,IAAI,IAAI,CAACD,qBAAqB,EAAE;AAC9B,YAAA,IAAI,CAACA,qBAAqB,CAACjb,QAAQ,CAACtxE,OAAO,CACzC,SAAC1T,OAAAA,EAAAA;AACCA,gBAAAA,OAAAA,CAAQmgG,aAAa,CAAA,KAAA,CAAA,CAAA;AACvB,aAAA,EACA,SAACngG,OAAiBrZ,EAAAA,KAAAA,EAAAA;AAChBqZ,gBAAAA,OAAAA,CAAQmoF,mBAAmB,GAAGxhG,KAAAA,CAAAA;AAChC,aAAA,CAAA,CAAA;AAEJ,SAAA;AACF,KAAA,CAAA;AAEA;;AAEC,MACDy5G,MAAAA,CAAAA,sBAeC,GAfDA,SAAAA,uBAAuBT,aAAqB,EAAA;;AAC1C,QAAA,IAAiD,MAAA,GAAA,IAAI,EAAtBU,gBAAkB,MAAzCJ,CAAAA,qBAAAA,CAAAA;AACR,QAAA,IAAII,aAAe,EAAA;AACjB,YAAA,IAAMC,aAAaD,aAAkBV,KAAAA,aAAAA,CAAAA;AACrCU,YAAAA,aAAAA,CAAcrb,QAAQ,CAACtxE,OAAO,CAC5B,SAAC1T,OAAAA,EAAAA;AACCsgG,gBAAAA,UAAAA,IAActgG,QAAQugG,cAAc,CAAA,KAAA,CAAA,CAAA;AACpCvgG,gBAAAA,OAAAA,CAAQwgG,WAAW,CAAA,KAAA,CAAA,CAAA;AACrB,aAAA,EACA,SAACxgG,OAAiBrZ,EAAAA,KAAAA,EAAAA;AAChBqZ,gBAAAA,OAAAA,CAAQmoF,mBAAmB,GAAGxhG,KAAAA,CAAAA;AAChC,aAAA,CAAA,CAAA;YAEF,IAAI,CAACs5G,qBAAqB,GAAG,IAAA,CAAA;AAC/B,SAAA;AACF,KAAA,CAAA;AAhHWd,IAAAA,OAAAA,OAAAA,CAAAA;AAwHZ,CAAA;;AClID;;;;;;IAOO,IAAKsB,aAAAA,iBAAAA,SAAAA,aAAAA,EAAAA;sBACK,aAAA,CAAA,aAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA,CAAA;uNAEiM,aAAA,CAAA,aAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA;gHAEvG,aAAA,CAAA,aAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA,CAAA;8GAEF,aAAA,CAAA,aAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA,CAAA;2CAEnE,aAAA,CAAA,aAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA,CAAA;8CAEG,aAAA,CAAA,aAAA,CAAA,UAAA,CAAA,GAAA,EAAA,CAAA,GAAA,UAAA,CAAA;oCAEV,aAAA,CAAA,aAAA,CAAA,UAAA,CAAA,GAAA,EAAA,CAAA,GAAA,UAAA,CAAA;oCAEA,aAAA,CAAA,aAAA,CAAA,UAAA,CAAA,GAAA,EAAA,CAAA,GAAA,UAAA,CAAA;oCAEA,aAAA,CAAA,aAAA,CAAA,UAAA,CAAA,GAAA,GAAA,CAAA,GAAA,UAAA,CAAA;oCAEA,aAAA,CAAA,aAAA,CAAA,UAAA,CAAA,GAAA,GAAA,CAAA,GAAA,UAAA,CAAA;oCAEA,aAAA,CAAA,aAAA,CAAA,UAAA,CAAA,GAAA,GAAA,CAAA,GAAA,UAAA,CAAA;oCAEA,aAAA,CAAA,aAAA,CAAA,UAAA,CAAA,GAAA,IAAA,CAAA,GAAA,UAAA,CAAA;AAvBnBA,IAAAA,OAAAA,aAAAA,CAAAA;AAyBX,CAAA,CAAA,EAAA,EAAA;AAED;;IAGO,IAAMC,kBAAqB,GAAA;;;;;;;;;;;;CAYjC,CAAC;AAEF;;IAGO,IAAMC,kBAA6C,GAAA;AACxD,mBACA,GAAK,EAAA,CAAA;AACL,qBACA,GAAK,EAAA,CAAA;AACL,qBACA,GAAK,EAAA,CAAA;AACL,oBACA,GAAK,EAAA,CAAA;AACL,oBACA,IAAM,EAAA,CAAA;AACN,oBACA,IAAM,EAAA,CAAA;AACN,oBACA,IAAM,EAAA,CAAA;AACN,oBACA,IAAM,EAAA,CAAA;AACN,oBACA,KAAO,EAAA,CAAA;AACP,oBACA,KAAO,EAAA,CAAA;AACP,oBACA,KAAO,EAAA,EAAA;AACT,CAAE;;AC3EF;;IAGO,IAAMC,UAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,UAAAA,GAAAA,EAAAA;AAmBX;;AAEC,MACD,UAtBWA,CAsBJ5iB,WAuCN,GAvCD,SAAOA,WAAAA,GAAAA;AACL,QAAA;YACE,IAAI,OAAO6iB,aAAa,WAAa,EAAA;AAxB9BD,gBAAAA,UAAAA,CAyBME,UAAU,GAAG,KAAA,CAAA;AACxB,gBAAA,OAAA;AACF,aAAA;YAEA,IAAMC,SAAAA,GAAYF,UAAUE,SAAS,CAAA;YAErC,IAAI,SAAA,CAAUjuG,IAAI,CAACiuG,SAAY,CAAA,EAAA;gBA/BxBH,UAgCMI,CAAAA,QAAQ,GAAGlgH,QAAAA,CAASmgH,MAAM,CAAA;AACvC,aAAA,MAAO,IAAI,OAAA,CAAQnuG,IAAI,CAACiuG,SAAY,CAAA,EAAA;gBAjC7BH,UAkCMI,CAAAA,QAAQ,GAAGlgH,QAAAA,CAASogH,IAAI,CAAA;AACrC,aAAA,MAAO,IAAI,UAAA,CAAWpuG,IAAI,CAACiuG,SAAY,CAAA,EAAA;gBAnChCH,UAoCMI,CAAAA,QAAQ,GAAGlgH,QAAAA,CAASqgH,OAAO,CAAA;AACxC,aAAA,MAAO,IAAI,YAAA,CAAaruG,IAAI,CAACiuG,SAAY,CAAA,EAAA;gBArClCH,UAsCMI,CAAAA,QAAQ,GAAGlgH,QAAAA,CAASsgH,GAAG,CAAA;AACpC,aAAA;YAEA,IAAIvhC,CAAAA,CAAAA;YACJ,OA1CO+gC,WA0CYI,QAAQ;AACzB,gBAAA,KAAKlgH,SAASmgH,MAAM;oBAClBphC,CAAIkhC,GAAAA,SAAAA,CAAUvgG,KAAK,CAAC,0BAAA,CAAA,CAAA;oBACpB,IAAI,CAAC6gG,eAAe,GAAGxhC,CAAI,GAAC,eAAYA,CAAC,CAAC,CAAE,CAAA,GAAC,GAAGA,IAAAA,CAAC,CAAC,CAAA,CAAE,IAAI,CAAA,CAAE,GAAA,GAAA,IAAGA,CAAC,CAAC,CAAA,CAAE,IAAI,CAAA,CAAM,GAAA,WAAA,CAAA;AAC3E,oBAAA,MAAA;AACF,gBAAA,KAAK/+E,SAASogH,IAAI;oBAChBrhC,CAAIkhC,GAAAA,SAAAA,CAAUvgG,KAAK,CAAC,0BAAA,CAAA,CAAA;oBACpB,IAAI,CAAC6gG,eAAe,GAAGxhC,CAAI,GAAC,aAAUA,CAAC,CAAC,CAAE,CAAA,GAAC,GAAGA,IAAAA,CAAC,CAAC,CAAA,CAAE,IAAI,CAAA,CAAE,GAAA,GAAA,IAAGA,CAAC,CAAC,CAAA,CAAE,IAAI,CAAA,CAAM,GAAA,SAAA,CAAA;AACzE,oBAAA,MAAA;AACF,gBAAA,KAAK/+E,SAASqgH,OAAO;oBACnBthC,CAAIkhC,GAAAA,SAAAA,CAAUvgG,KAAK,CAAC,+BAAA,CAAA,CAAA;oBACpB,IAAI,CAAC6gG,eAAe,GAAGxhC,CAAI,GAAC,aAAUA,CAAC,CAAC,CAAE,CAAA,GAAC,GAAGA,IAAAA,CAAC,CAAC,CAAA,CAAE,IAAI,CAAA,CAAE,GAAA,GAAA,IAAGA,CAAC,CAAC,CAAA,CAAE,IAAI,CAAA,CAAM,GAAA,SAAA,CAAA;AACzE,oBAAA,MAAA;AACF,gBAAA,KAAK/+E,SAASsgH,GAAG;oBACfvhC,CAAIkhC,GAAAA,SAAAA,CAAUvgG,KAAK,CAAC,gCAAA,CAAA,CAAA;oBACpB,IAAI,CAAC6gG,eAAe,GAAGxhC,CAAI,GAAC,cAAWA,CAAC,CAAC,CAAE,CAAA,GAAC,GAAGA,IAAAA,CAAC,CAAC,CAAA,CAAE,IAAI,CAAA,CAAE,GAAA,GAAA,IAAGA,CAAC,CAAC,CAAA,CAAE,IAAI,CAAA,CAAM,GAAA,UAAA,CAAA;AAC1E,oBAAA,MAAA;AACJ,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AAEA;;AAEC,MACD,UAlEW+gC,CAkEJU,oBAUN,GAVD,SAAOA,oBAAAA,GAAAA;AACL,QAAA,IAAI,IAAI,CAACC,cAAc,KAAK,IAAM,EAAA;AAChC,YAAA,IAAI,CAACA,cAAc,GAAGC,YAAYC,QAAQ,CACxC,IAAI39G,UAAW,CAAA;AACb,gBAAA,CAAA;AAAG,gBAAA,EAAA;AAAI,gBAAA,GAAA;AAAK,gBAAA,GAAA;AAAK,gBAAA,CAAA;AAAG,gBAAA,CAAA;AAAG,gBAAA,CAAA;AAAG,gBAAA,CAAA;AAAG,gBAAA,CAAA;AAAG,gBAAA,CAAA;AAAG,gBAAA,CAAA;AAAG,gBAAA,EAAA;AAAI,gBAAA,CAAA;AAAG,gBAAA,CAAA;AAAG,gBAAA,CAAA;AAAG,gBAAA,CAAA;AAAG,gBAAA,CAAA;AAAG,gBAAA,CAAA;AAAG,gBAAA,CAAA;AAAG,gBAAA,CAAA;AAAG,gBAAA,CAAA;AAAG,gBAAA,CAAA;AAAG,gBAAA,CAAA;AAAG,gBAAA,CAAA;AAAG,gBAAA,EAAA;AAAI,gBAAA,CAAA;AAAG,gBAAA,CAAA;AAAG,gBAAA,EAAA;AAAI,gBAAA,EAAA;AAAI,gBAAA,CAAA;AAAG,gBAAA,EAAA;AAAI,gBAAA,CAAA;AAAG,gBAAA,EAAA;AAC1G,gBAAA,CAAA;AAAG,gBAAA,EAAA;AAAI,gBAAA,CAAA;AAAG,gBAAA,EAAA;AAAI,gBAAA,CAAA;AAAG,gBAAA,GAAA;AAAK,gBAAA,EAAA;AAAI,gBAAA,CAAA;AAAG,gBAAA,CAAA;AAAG,gBAAA,EAAA;AAAI,gBAAA,CAAA;AAAG,gBAAA,CAAA;AAAG,gBAAA,EAAA;AAAI,gBAAA,CAAA;AAAG,gBAAA,GAAA;AAAK,gBAAA,EAAA;AAAI,gBAAA,EAAA;AAAI,gBAAA,EAAA;AAC/D,aAAA,CAAA,CAAA,CAAA;AAEL,SAAA;QACA,OAAO,IAAI,CAACy9G,cAAc,CAAA;AAC5B,KAAA,CAAA;AA5EWX,IAAAA,aAAAA,CAAAA,UAAAA,EAAAA,IAAAA,EAAAA;;YAeAc,GAAAA,EAAAA,kBAAAA;;;MAAX,SAAA,GAAA,GAAA;AACE,gBAAA,OAAOjI,OAAOiI,gBAAgB,CAAA;AAChC,aAAA;;;AAjBWd,IAAAA,OAAAA,UAAAA,CAAAA;AA6EZ,CAAA,GAAA;AA5EC,mCADWA,UAAAA,CAEJI,QAAqBlgH,GAAAA,QAAAA,CAAS6gH,OAAO,CAAA;AAC5C,2CAHWf,WAIJS,eAA0B,GAAA,EAAA,CAAA;AAEjC,iBANWT,WAOJE,UAAa,GAAA,IAAA,CAAA;AAEpB,wCATWF,WAUIW,cAAiC,GAAA,IAAA,CAAA;AAqElDX,UAAAA,CAAW5iB,WAAW,EAAA;;ACpFtB;;;IAIO,IAAK4jB,IAAAA,iBAAAA,SAAAA,IAAAA,EAAAA;wGACuF,IAAA,CAAA,IAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA,CAAA;yMAEiG,IAAA,CAAA,IAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA,CAAA;+DAE1I,IAAA,CAAA,IAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA,CAAA;gCAE/B,IAAA,CAAA,IAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,GAAA,aAAA,CAAA;gCAEA,IAAA,CAAA,IAAA,CAAA,cAAA,CAAA,GAAA,CAAA,CAAA,GAAA,cAAA,CAAA;gCAEA,IAAA,CAAA,IAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA,CAAA;gCAEA,IAAA,CAAA,IAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;gCAEA,IAAA,CAAA,IAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;gCAEA,IAAA,CAAA,IAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;gCAEA,IAAA,CAAA,IAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;gCAEA,IAAA,CAAA,IAAA,CAAA,QAAA,CAAA,GAAA,EAAA,CAAA,GAAA,QAAA,CAAA;gCAEA,IAAA,CAAA,IAAA,CAAA,QAAA,CAAA,GAAA,EAAA,CAAA,GAAA,QAAA,CAAA;gCAEA,IAAA,CAAA,IAAA,CAAA,QAAA,CAAA,GAAA,EAAA,CAAA,GAAA,QAAA,CAAA;gCAEA,IAAA,CAAA,IAAA,CAAA,QAAA,CAAA,GAAA,EAAA,CAAA,GAAA,QAAA,CAAA;gCAEA,IAAA,CAAA,IAAA,CAAA,QAAA,CAAA,GAAA,EAAA,CAAA,GAAA,QAAA,CAAA;gCAEA,IAAA,CAAA,IAAA,CAAA,QAAA,CAAA,GAAA,EAAA,CAAA,GAAA,QAAA,CAAA;gCAEA,IAAA,CAAA,IAAA,CAAA,OAAA,CAAA,GAAA,EAAA,CAAA,GAAA,OAAA,CAAA;oFAEoD,IAAA,CAAA,IAAA,CAAA,eAAA,CAAA,GAAA,EAAA,CAAA,GAAA,eAAA,CAAA;gGAEY,IAAA,CAAA,IAAA,CAAA,QAAA,CAAA,GAAA,EAAA,CAAA,GAAA,QAAA,CAAA;wHAEwB,IAAA,CAAA,IAAA,CAAA,SAAA,CAAA,GAAA,EAAA,CAAA,GAAA,SAAA,CAAA;gFAExC,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;+BAEjD,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;+BAEA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;+BAEA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;+BAEA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;+BAEA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;+BAEA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;+BAEA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;+BAEA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;+BAEA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;+BAEA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;+BAEA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;+BAEA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;+BAEA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;+BAEA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;+BAEA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;gFAEiD,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;+BAEjD,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;+BAEA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;+BAEA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;+BAEA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;+BAEA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;gFAEiD,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;+BAEjD,IAAA,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"}