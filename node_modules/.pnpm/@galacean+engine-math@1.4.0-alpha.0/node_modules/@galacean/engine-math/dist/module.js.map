{"version":3,"file":"module.js","sources":["../src/enums/ContainmentType.ts","../src/enums/PlaneIntersectionType.ts","../src/enums/FrustumFace.ts","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_create_class.js","../src/MathUtil.ts","../src/Vector3.ts","../src/BoundingSphere.ts","../src/BoundingBox.ts","../src/CollisionUtil.ts","../src/Plane.ts","../src/BoundingFrustum.ts","../src/Matrix3x3.ts","../src/Quaternion.ts","../src/Matrix.ts","../src/Ray.ts","../src/Vector2.ts","../src/Vector4.ts","../src/Color.ts","../src/Rect.ts","../src/SphericalHarmonics3.ts","../src/Rand.ts"],"sourcesContent":["/**\n * Defines how the bounding volumes intersects or contain one another.\n */\nexport enum ContainmentType {\n  /** Indicates that there is no overlap between two bounding volumes. */\n  Disjoint,\n  /** Indicates that one bounding volume completely contains another volume. */\n  Contains,\n  /** Indicates that bounding volumes partially overlap one another. */\n  Intersects\n}\n","/**\n * Defines the intersection between a plane and a bounding volume.\n */\nexport enum PlaneIntersectionType {\n  /** There is no intersection, the bounding volume is in the back of the plane. */\n  Back,\n  /** There is no intersection, the bounding volume is in the front of the plane. */\n  Front,\n  /** The plane is intersected. */\n  Intersecting\n}\n","/**\n * Frustum face\n */\nexport enum FrustumFace {\n  /** Near face */\n  Near,\n  /** Far face */\n  Far,\n  /** Left face */\n  Left,\n  /** Right face */\n  Right,\n  /** Bottom face */\n  Bottom,\n  /** Top face */\n  Top\n}\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","/**\n * Common utility methods for math operations.\n */\nexport class MathUtil {\n  /** The value for which all absolute numbers smaller than are considered equal to zero. */\n  static readonly zeroTolerance: number = 1e-6;\n  /** The conversion factor that radian to degree. */\n  static readonly radToDegreeFactor: number = 180 / Math.PI;\n  /** The conversion factor that degree to radian. */\n  static readonly degreeToRadFactor: number = Math.PI / 180;\n\n  /**\n   * Clamps the specified value.\n   * @param v - The specified value\n   * @param min - The min value\n   * @param max - The max value\n   * @returns The result of clamping a value between min and max\n   */\n  static clamp(v: number, min: number, max: number): number {\n    return Math.max(min, Math.min(max, v));\n  }\n\n  /**\n   * Checks if a and b are almost equals.\n   * The absolute value of the difference between a and b is close to zero.\n   * @param a - The left value to compare\n   * @param b - The right value to compare\n   * @returns True if a almost equal to b, false otherwise\n   */\n  static equals(a: number, b: number): boolean {\n    return Math.abs(a - b) <= MathUtil.zeroTolerance;\n  }\n\n  /**\n   * Determines whether the specified v is pow2.\n   * @param v - The specified v\n   * @returns True if the specified v is pow2, false otherwise\n   */\n  static isPowerOf2(v: number): boolean {\n    return (v & (v - 1)) === 0;\n  }\n\n  /**\n   * Modify the specified r from radian to degree.\n   * @param r - The specified r\n   * @returns The degree value\n   */\n  static radianToDegree(r: number): number {\n    return r * MathUtil.radToDegreeFactor;\n  }\n\n  /**\n   * Modify the specified d from degree to radian.\n   * @param d - The specified d\n   * @returns The radian value\n   */\n  static degreeToRadian(d: number): number {\n    return d * MathUtil.degreeToRadFactor;\n  }\n\n  /**\n   * Linearly interpolate between two values\n   * @param start - Specify the start of the range in which to interpolate\n   * @param end - Specify the end of the range in which to interpolate\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @returns The result of linear blending between start and end\n   */\n  static lerp(start: number, end: number, t: number): number {\n    return start + (end - start) * t;\n  }\n}\n","import { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Matrix } from \"./Matrix\";\nimport { Quaternion } from \"./Quaternion\";\nimport { Vector4 } from \"./Vector4\";\n\n/**\n * Describes a 3D-vector.\n */\nexport class Vector3 implements IClone<Vector3>, ICopy<Vector3Like, Vector3> {\n  /** @internal */\n  static readonly _zero = new Vector3(0.0, 0.0, 0.0);\n  /** @internal */\n  static readonly _one = new Vector3(1.0, 1.0, 1.0);\n\n  /**\n   * Determines the sum of two vectors.\n   * @param left - The first vector to add\n   * @param right - The second vector to add\n   * @param out - The sum of two vectors\n   */\n  static add(left: Vector3, right: Vector3, out: Vector3): void {\n    out._x = left._x + right._x;\n    out._y = left._y + right._y;\n    out._z = left._z + right._z;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the difference between two vectors.\n   * @param left - The first vector to subtract\n   * @param right - The second vector to subtract\n   * @param out - The difference between two vectors\n   */\n  static subtract(left: Vector3, right: Vector3, out: Vector3): void {\n    out._x = left._x - right._x;\n    out._y = left._y - right._y;\n    out._z = left._z - right._z;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the product of two vectors.\n   * @param left - The first vector to multiply\n   * @param right - The second vector to multiply\n   * @param out - The product of two vectors\n   */\n  static multiply(left: Vector3, right: Vector3, out: Vector3): void {\n    out._x = left._x * right._x;\n    out._y = left._y * right._y;\n    out._z = left._z * right._z;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the divisor of two vectors.\n   * @param left - The first vector to divide\n   * @param right - The second vector to divide\n   * @param out - The divisor of two vectors\n   */\n  static divide(left: Vector3, right: Vector3, out: Vector3): void {\n    out._x = left._x / right._x;\n    out._y = left._y / right._y;\n    out._z = left._z / right._z;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the dot product of two vectors.\n   * @param left - The first vector to dot\n   * @param right - The second vector to dot\n   * @returns The dot product of two vectors\n   */\n  static dot(left: Vector3, right: Vector3): number {\n    return left._x * right._x + left._y * right._y + left._z * right._z;\n  }\n\n  /**\n   * Determines the cross product of two vectors.\n   * @param left - The first vector to cross\n   * @param right - The second vector to cross\n   * @param out - The cross product of two vectors\n   */\n  static cross(left: Vector3, right: Vector3, out: Vector3): void {\n    const ax = left._x;\n    const ay = left._y;\n    const az = left._z;\n    const bx = right._x;\n    const by = right._y;\n    const bz = right._z;\n\n    out.set(ay * bz - az * by, az * bx - ax * bz, ax * by - ay * bx);\n  }\n\n  /**\n   * Determines the distance of two vectors.\n   * @param a - The first vector\n   * @param b - The second vector\n   * @returns The distance of two vectors\n   */\n  static distance(a: Vector3, b: Vector3): number {\n    const x = b._x - a._x;\n    const y = b._y - a._y;\n    const z = b._z - a._z;\n    return Math.sqrt(x * x + y * y + z * z);\n  }\n\n  /**\n   * Determines the squared distance of two vectors.\n   * @param a - The first vector\n   * @param b - The second vector\n   * @returns The squared distance of two vectors\n   */\n  static distanceSquared(a: Vector3, b: Vector3): number {\n    const x = b._x - a._x;\n    const y = b._y - a._y;\n    const z = b._z - a._z;\n    return x * x + y * y + z * z;\n  }\n\n  /**\n   * Determines whether the specified vectors are equals.\n   * @param left - The first vector to compare\n   * @param right - The second vector to compare\n   * @returns True if the specified vectors are equals, false otherwise\n   */\n  static equals(left: Vector3, right: Vector3): boolean {\n    return (\n      MathUtil.equals(left._x, right._x) && MathUtil.equals(left._y, right._y) && MathUtil.equals(left._z, right._z)\n    );\n  }\n\n  /**\n   * Performs a linear interpolation between two vectors.\n   * @param start - The first vector\n   * @param end - The second vector\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @param out - The result of linear blending between two vectors\n   */\n  static lerp(start: Vector3, end: Vector3, t: number, out: Vector3): void {\n    const { _x, _y, _z } = start;\n    out._x = _x + (end._x - _x) * t;\n    out._y = _y + (end._y - _y) * t;\n    out._z = _z + (end._z - _z) * t;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a vector containing the largest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the largest components of the specified vectors\n   */\n  static max(left: Vector3, right: Vector3, out: Vector3): void {\n    out._x = Math.max(left._x, right._x);\n    out._y = Math.max(left._y, right._y);\n    out._z = Math.max(left._z, right._z);\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a vector containing the smallest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the smallest components of the specified vectors\n   */\n  static min(left: Vector3, right: Vector3, out: Vector3): void {\n    out._x = Math.min(left._x, right._x);\n    out._y = Math.min(left._y, right._y);\n    out._z = Math.min(left._z, right._z);\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Reverses the direction of a given vector.\n   * @param a - The vector to negate\n   * @param out - The vector facing in the opposite direction\n   */\n  static negate(a: Vector3, out: Vector3): void {\n    out._x = -a._x;\n    out._y = -a._y;\n    out._z = -a._z;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Converts the vector into a unit vector.\n   * @param a - The vector to normalize\n   * @param out - The normalized vector\n   */\n  static normalize(a: Vector3, out: Vector3): void {\n    const { _x, _y, _z } = a;\n    let len = Math.sqrt(_x * _x + _y * _y + _z * _z);\n    if (len > MathUtil.zeroTolerance) {\n      len = 1 / len;\n      out.set(_x * len, _y * len, _z * len);\n    }\n  }\n\n  /**\n   * Scale a vector by the given value.\n   * @param a - The vector to scale\n   * @param s - The amount by which to scale the vector\n   * @param out - The scaled vector\n   */\n  static scale(a: Vector3, s: number, out: Vector3): void {\n    out._x = a._x * s;\n    out._y = a._y * s;\n    out._z = a._z * s;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Performs a normal transformation using the given 4x4 matrix.\n   * @remarks\n   * A normal transform performs the transformation with the assumption that the w component\n   * is zero. This causes the fourth row and fourth column of the matrix to be unused. The\n   * end result is a vector that is not translated, but all other transformation properties\n   * apply. This is often preferred for normal vectors as normals purely represent direction\n   * rather than location because normal vectors should not be translated.\n   * @param v - The normal vector to transform\n   * @param m - The transform matrix\n   * @param out - The transformed normal\n   */\n  static transformNormal(v: Vector3, m: Matrix, out: Vector3): void {\n    const { _x, _y, _z } = v;\n    const e = m.elements;\n    out._x = _x * e[0] + _y * e[4] + _z * e[8];\n    out._y = _x * e[1] + _y * e[5] + _z * e[9];\n    out._z = _x * e[2] + _y * e[6] + _z * e[10];\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Performs a transformation using the given 4x4 matrix.\n   * @param v - The vector to transform\n   * @param m - The transform matrix\n   * @param out - The transformed vector3\n   */\n  static transformToVec3(v: Vector3, m: Matrix, out: Vector3): void {\n    const { _x, _y, _z } = v;\n    const e = m.elements;\n\n    out._x = _x * e[0] + _y * e[4] + _z * e[8] + e[12];\n    out._y = _x * e[1] + _y * e[5] + _z * e[9] + e[13];\n    out._z = _x * e[2] + _y * e[6] + _z * e[10] + e[14];\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Performs a transformation from vector3 to vector4 using the given 4x4 matrix.\n   * @param v - The vector to transform\n   * @param m - The transform matrix\n   * @param out - The transformed vector4\n   */\n  static transformToVec4(v: Vector3, m: Matrix, out: Vector4): void {\n    const { _x, _y, _z } = v;\n    const e = m.elements;\n    out._x = _x * e[0] + _y * e[4] + _z * e[8] + e[12];\n    out._y = _x * e[1] + _y * e[5] + _z * e[9] + e[13];\n    out._z = _x * e[2] + _y * e[6] + _z * e[10] + e[14];\n    out._w = _x * e[3] + _y * e[7] + _z * e[11] + e[15];\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Performs a coordinate transformation using the given 4x4 matrix.\n   *\n   * @remarks\n   * A coordinate transform performs the transformation with the assumption that the w component\n   * is one. The four dimensional vector obtained from the transformation operation has each\n   * component in the vector divided by the w component. This forces the w-component to be one and\n   * therefore makes the vector homogeneous. The homogeneous vector is often preferred when working\n   * with coordinates as the w component can safely be ignored.\n   * @param v - The coordinate vector to transform\n   * @param m - The transform matrix\n   * @param out - The transformed coordinates\n   */\n  static transformCoordinate(v: Vector3, m: Matrix, out: Vector3): void {\n    const { _x, _y, _z } = v;\n    const e = m.elements;\n    let w = _x * e[3] + _y * e[7] + _z * e[11] + e[15];\n    w = 1.0 / w;\n\n    out._x = (_x * e[0] + _y * e[4] + _z * e[8] + e[12]) * w;\n    out._y = (_x * e[1] + _y * e[5] + _z * e[9] + e[13]) * w;\n    out._z = (_x * e[2] + _y * e[6] + _z * e[10] + e[14]) * w;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Performs a transformation using the given quaternion.\n   * @param v - The vector to transform\n   * @param quaternion - The transform quaternion\n   * @param out - The transformed vector\n   */\n  static transformByQuat(v: Vector3, quaternion: Quaternion, out: Vector3): void {\n    const { _x, _y, _z } = v;\n    const { _x: qx, _y: qy, _z: qz, _w: qw } = quaternion;\n\n    // calculate quat * vec\n    const ix = qw * _x + qy * _z - qz * _y;\n    const iy = qw * _y + qz * _x - qx * _z;\n    const iz = qw * _z + qx * _y - qy * _x;\n    const iw = -qx * _x - qy * _y - qz * _z;\n\n    // calculate result * inverse quat\n    out._x = ix * qw - iw * qx - iy * qz + iz * qy;\n    out._y = iy * qw - iw * qy - iz * qx + ix * qz;\n    out._z = iz * qw - iw * qz - ix * qy + iy * qx;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /** @internal */\n  _x: number;\n  /** @internal */\n  _y: number;\n  /** @internal */\n  _z: number;\n  /** @internal */\n  _onValueChanged: () => void = null;\n\n  /**\n   * The x component of the vector.\n   */\n  public get x(): number {\n    return this._x;\n  }\n\n  public set x(value: number) {\n    this._x = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The y component of the vector.\n   */\n  public get y(): number {\n    return this._y;\n  }\n\n  public set y(value: number) {\n    this._y = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The z component of the vector.\n   */\n  public get z(): number {\n    return this._z;\n  }\n\n  public set z(value: number) {\n    this._z = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * Constructor of Vector3.\n   * @param x - The x component of the vector, default 0\n   * @param y - The y component of the vector, default 0\n   * @param z - The z component of the vector, default 0\n   */\n  constructor(x: number = 0, y: number = 0, z: number = 0) {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n  }\n\n  /**\n   * Set the value of this vector.\n   * @param x - The x component of the vector\n   * @param y - The y component of the vector\n   * @param z - The z component of the vector\n   * @returns This vector\n   */\n  set(x: number, y: number, z: number): Vector3 {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the sum of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  add(right: Vector3): Vector3 {\n    this._x += right._x;\n    this._y += right._y;\n    this._z += right._z;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the difference of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  subtract(right: Vector3): Vector3 {\n    this._x -= right._x;\n    this._y -= right._y;\n    this._z -= right._z;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the product of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  multiply(right: Vector3): Vector3 {\n    this._x *= right._x;\n    this._y *= right._y;\n    this._z *= right._z;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the divisor of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  divide(right: Vector3): Vector3 {\n    this._x /= right._x;\n    this._y /= right._y;\n    this._z /= right._z;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Calculate the length of this vector.\n   * @returns The length of this vector\n   */\n  length(): number {\n    const { _x, _y, _z } = this;\n    return Math.sqrt(_x * _x + _y * _y + _z * _z);\n  }\n\n  /**\n   * Calculate the squared length of this vector.\n   * @returns The squared length of this vector\n   */\n  lengthSquared(): number {\n    const { _x, _y, _z } = this;\n    return _x * _x + _y * _y + _z * _z;\n  }\n\n  /**\n   * Reverses the direction of this vector.\n   * @returns This vector\n   */\n  negate(): Vector3 {\n    this._x = -this._x;\n    this._y = -this._y;\n    this._z = -this._z;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Converts this vector into a unit vector.\n   * @returns This vector\n   */\n  normalize(): Vector3 {\n    Vector3.normalize(this, this);\n    return this;\n  }\n\n  /**\n   * Scale this vector by the given value.\n   * @param s - The amount by which to scale the vector\n   * @returns This vector\n   */\n  scale(s: number): Vector3 {\n    this._x *= s;\n    this._y *= s;\n    this._z *= s;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * This vector performs a normal transformation using the given 4x4 matrix.\n   * @remarks\n   * A normal transform performs the transformation with the assumption that the w component\n   * is zero. This causes the fourth row and fourth column of the matrix to be unused. The\n   * end result is a vector that is not translated, but all other transformation properties\n   * apply. This is often preferred for normal vectors as normals purely represent direction\n   * rather than location because normal vectors should not be translated.\n   * @param m - The transform matrix\n   * @returns This vector\n   */\n  transformNormal(m: Matrix): Vector3 {\n    Vector3.transformNormal(this, m, this);\n    return this;\n  }\n\n  /**\n   * This vector performs a transformation using the given 4x4 matrix.\n   * @param m - The transform matrix\n   * @returns This vector\n   */\n  transformToVec3(m: Matrix): Vector3 {\n    Vector3.transformToVec3(this, m, this);\n    return this;\n  }\n\n  /**\n   * This vector performs a coordinate transformation using the given 4x4 matrix.\n   * @remarks\n   * A coordinate transform performs the transformation with the assumption that the w component\n   * is one. The four dimensional vector obtained from the transformation operation has each\n   * component in the vector divided by the w component. This forces the w-component to be one and\n   * therefore makes the vector homogeneous. The homogeneous vector is often preferred when working\n   * with coordinates as the w component can safely be ignored.\n   * @param m - The transform matrix\n   * @returns This vector\n   */\n  transformCoordinate(m: Matrix): Vector3 {\n    Vector3.transformCoordinate(this, m, this);\n    return this;\n  }\n\n  /**\n   * This vector performs a transformation using the given quaternion.\n   * @param quaternion - The transform quaternion\n   * @returns This vector\n   */\n  transformByQuat(quaternion: Quaternion): Vector3 {\n    Vector3.transformByQuat(this, quaternion, this);\n    return this;\n  }\n\n  /**\n   * Creates a clone of this vector.\n   * @returns A clone of this vector\n   */\n  clone(): Vector3 {\n    return new Vector3(this._x, this._y, this._z);\n  }\n\n  /**\n   * Copy from vector3 like object.\n   * @param source - Vector3 like object.\n   * @returns This vector\n   */\n  copyFrom(source: Vector3Like): Vector3 {\n    this._x = source.x;\n    this._y = source.y;\n    this._z = source.z;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Copy to vector3 like object.\n   * @param target - Vector3 like object\n   * @returns This Vector3 like object\n   */\n  copyTo(target: Vector3Like): Vector3Like {\n    target.x = this._x;\n    target.y = this._y;\n    target.z = this._z;\n    return target;\n  }\n\n  /**\n   * Copy the value of this vector from an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This vector\n   */\n  copyFromArray(array: ArrayLike<number>, offset: number = 0): Vector3 {\n    this._x = array[offset];\n    this._y = array[offset + 1];\n    this._z = array[offset + 2];\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Copy the value of this vector to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  copyToArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    out[outOffset] = this._x;\n    out[outOffset + 1] = this._y;\n    out[outOffset + 2] = this._z;\n  }\n\n  /**\n   * Serialize this vector to a JSON representation.\n   * @returns A JSON representation of this vector\n   */\n  toJSON(): Vector3Like {\n    return {\n      x: this._x,\n      y: this._y,\n      z: this._z\n    };\n  }\n}\n\ninterface Vector3Like {\n  /** {@inheritDoc Vector3.x} */\n  x: number;\n  /** {@inheritDoc Vector3.y} */\n  y: number;\n  /** {@inheritDoc Vector3.z} */\n  z: number;\n}\n","import { BoundingBox } from \"./BoundingBox\";\nimport { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * A bounding sphere.\n * */\nexport class BoundingSphere implements IClone<BoundingSphere>, ICopy<BoundingSphere, BoundingSphere> {\n  private static _tempVec30: Vector3 = new Vector3();\n\n  /**\n   * Calculate a bounding sphere that fully contains the given points.\n   * @param points - The given points\n   * @param out - The calculated bounding sphere\n   */\n  static fromPoints(points: Vector3[], out: BoundingSphere): void {\n    if (!points || points.length === 0) {\n      throw new Error(\"points must be array and length must > 0\");\n    }\n\n    const len = points.length;\n    const center = BoundingSphere._tempVec30;\n    center.x = center.y = center.z = 0;\n\n    // Calculate the center of the sphere.\n    for (let i = 0; i < len; ++i) {\n      Vector3.add(points[i], center, center);\n    }\n\n    // The center of the sphere.\n    Vector3.scale(center, 1 / len, out.center);\n\n    // Calculate the radius of the sphere.\n    let radius = 0.0;\n    for (let i = 0; i < len; ++i) {\n      const distance = Vector3.distanceSquared(center, points[i]);\n      distance > radius && (radius = distance);\n    }\n    // The radius of the sphere.\n    out.radius = Math.sqrt(radius);\n  }\n\n  /**\n   * Calculate a bounding sphere from a given box.\n   * @param box - The given box\n   * @param out - The calculated bounding sphere\n   */\n  static fromBox(box: BoundingBox, out: BoundingSphere): void {\n    const { center } = out;\n    const { min, max } = box;\n\n    center.x = (min.x + max.x) * 0.5;\n    center.y = (min.y + max.y) * 0.5;\n    center.z = (min.z + max.z) * 0.5;\n    out.radius = Vector3.distance(center, max);\n  }\n\n  /** The center point of the sphere. */\n  public readonly center: Vector3 = new Vector3();\n  /** The radius of the sphere. */\n  public radius: number = 0;\n\n  /**\n   * Constructor of BoundingSphere.\n   * @param center - The center point of the sphere\n   * @param radius - The radius of the sphere\n   */\n  constructor(center: Vector3 = null, radius: number = 0) {\n    center && this.center.copyFrom(center);\n    this.radius = radius;\n  }\n\n  /**\n   * Creates a clone of this sphere.\n   * @returns A clone of this sphere\n   */\n  clone(): BoundingSphere {\n    return new BoundingSphere(this.center, this.radius);\n  }\n\n  /**\n   * Copy this sphere from the specified sphere.\n   * @param source - The specified sphere\n   * @returns This sphere\n   */\n  copyFrom(source: BoundingSphere): BoundingSphere {\n    this.center.copyFrom(source.center);\n    this.radius = source.radius;\n    return this;\n  }\n}\n","import { BoundingSphere } from \"./BoundingSphere\";\nimport { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { Matrix } from \"./Matrix\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Axis Aligned Bound Box (AABB).\n */\nexport class BoundingBox implements IClone<BoundingBox>, ICopy<BoundingBox, BoundingBox> {\n  private static _tempVec30: Vector3 = new Vector3();\n  private static _tempVec31: Vector3 = new Vector3();\n\n  /**\n   * Calculate a bounding box from the center point and the extent of the bounding box.\n   * @param center - The center point\n   * @param extent - The extent of the bounding box\n   * @param out - The calculated bounding box\n   */\n  static fromCenterAndExtent(center: Vector3, extent: Vector3, out: BoundingBox): void {\n    Vector3.subtract(center, extent, out.min);\n    Vector3.add(center, extent, out.max);\n  }\n\n  /**\n   * Calculate a bounding box that fully contains the given points.\n   * @param points - The given points\n   * @param out - The calculated bounding box\n   */\n  static fromPoints(points: Vector3[], out: BoundingBox): void {\n    if (!points || points.length === 0) {\n      throw new Error(\"points must be array and length must > 0\");\n    }\n\n    const { min, max } = out;\n    min.x = min.y = min.z = Number.MAX_VALUE;\n    max.x = max.y = max.z = -Number.MAX_VALUE;\n\n    for (let i = 0, l = points.length; i < l; ++i) {\n      const point = points[i];\n      Vector3.min(min, point, min);\n      Vector3.max(max, point, max);\n    }\n  }\n\n  /**\n   * Calculate a bounding box from a given sphere.\n   * @param sphere - The given sphere\n   * @param out - The calculated bounding box\n   */\n  static fromSphere(sphere: BoundingSphere, out: BoundingBox): void {\n    const { center, radius } = sphere;\n    const { min, max } = out;\n\n    min.x = center.x - radius;\n    min.y = center.y - radius;\n    min.z = center.z - radius;\n    max.x = center.x + radius;\n    max.y = center.y + radius;\n    max.z = center.z + radius;\n  }\n\n  /**\n   * Transform a bounding box.\n   * @param source - The original bounding box\n   * @param matrix - The transform to apply to the bounding box\n   * @param out - The transformed bounding box\n   */\n  static transform(source: BoundingBox, matrix: Matrix, out: BoundingBox): void {\n    // https://zeux.io/2010/10/17/aabb-from-obb-with-component-wise-abs/\n    const center = BoundingBox._tempVec30;\n    const extent = BoundingBox._tempVec31;\n    source.getCenter(center);\n    source.getExtent(extent);\n    Vector3.transformCoordinate(center, matrix, center);\n    const { x, y, z } = extent;\n    const e = matrix.elements;\n    // prettier-ignore\n    const e0 = e[0], e1 = e[1], e2 = e[2],\n    e4 = e[4], e5 = e[5], e6 = e[6],\n    e8 = e[8], e9 = e[9], e10 = e[10];\n    extent.set(\n      (e0 === 0 ? 0 : Math.abs(x * e0)) + (e4 === 0 ? 0 : Math.abs(y * e4)) + (e8 === 0 ? 0 : Math.abs(z * e8)),\n      (e1 === 0 ? 0 : Math.abs(x * e1)) + (e5 === 0 ? 0 : Math.abs(y * e5)) + (e9 === 0 ? 0 : Math.abs(z * e9)),\n      (e2 === 0 ? 0 : Math.abs(x * e2)) + (e6 === 0 ? 0 : Math.abs(y * e6)) + (e10 === 0 ? 0 : Math.abs(z * e10))\n    );\n    // set min、max\n    Vector3.subtract(center, extent, out.min);\n    Vector3.add(center, extent, out.max);\n  }\n\n  /**\n   * Calculate a bounding box that is as large as the total combined area of the two specified boxes.\n   * @param box1 - The first box to merge\n   * @param box2 - The second box to merge\n   * @param out - The merged bounding box\n   * @returns The merged bounding box\n   */\n  static merge(box1: BoundingBox, box2: BoundingBox, out: BoundingBox): BoundingBox {\n    Vector3.min(box1.min, box2.min, out.min);\n    Vector3.max(box1.max, box2.max, out.max);\n    return out;\n  }\n\n  /** The minimum point of the box. */\n  public readonly min: Vector3 = new Vector3();\n  /** The maximum point of the box. */\n  public readonly max: Vector3 = new Vector3();\n\n  /**\n   * Constructor of BoundingBox.\n   * @param min - The minimum point of the box\n   * @param max - The maximum point of the box\n   */\n  constructor(min: Vector3 = null, max: Vector3 = null) {\n    min && this.min.copyFrom(min);\n    max && this.max.copyFrom(max);\n  }\n\n  /**\n   * Get the center point of this bounding box.\n   * @param out - The center point of this bounding box\n   * @returns The center point of this bounding box\n   */\n  getCenter(out: Vector3): Vector3 {\n    const { min, max } = this;\n    const centerX = max._x + min._x;\n    const centerY = max._y + min._y;\n    const centerZ = max._z + min._z;\n    out.set(isNaN(centerX) ? 0 : centerX * 0.5, isNaN(centerY) ? 0 : centerY * 0.5, isNaN(centerZ) ? 0 : centerZ * 0.5);\n    return out;\n  }\n\n  /**\n   * Get the extent of this bounding box.\n   * @param out - The extent of this bounding box\n   * @returns The extent of this bounding box\n   */\n  getExtent(out: Vector3): Vector3 {\n    const { min, max } = this;\n    const extentX = max._x - min._x;\n    const extentY = max._y - min._y;\n    const extentZ = max._z - min._z;\n    out.set(isNaN(extentX) ? 0 : extentX * 0.5, isNaN(extentY) ? 0 : extentY * 0.5, isNaN(extentZ) ? 0 : extentZ * 0.5);\n    return out;\n  }\n\n  /**\n   * Get the eight corners of this bounding box.\n   * @param out - An array of points representing the eight corners of this bounding box\n   * @returns An array of points representing the eight corners of this bounding box\n   */\n  getCorners(out: Vector3[] = []): Vector3[] {\n    const { min, max } = this;\n    const minX = min.x;\n    const minY = min.y;\n    const minZ = min.z;\n    const maxX = max.x;\n    const maxY = max.y;\n    const maxZ = max.z;\n    const len = out.length;\n\n    // The array length is less than 8 to make up\n    if (len < 8) {\n      for (let i = 0, l = 8 - len; i < l; ++i) {\n        out[len + i] = new Vector3();\n      }\n    }\n\n    out[0].set(minX, maxY, maxZ);\n    out[1].set(maxX, maxY, maxZ);\n    out[2].set(maxX, minY, maxZ);\n    out[3].set(minX, minY, maxZ);\n    out[4].set(minX, maxY, minZ);\n    out[5].set(maxX, maxY, minZ);\n    out[6].set(maxX, minY, minZ);\n    out[7].set(minX, minY, minZ);\n\n    return out;\n  }\n\n  /**\n   * Transform a bounding box.\n   * @param matrix - The transform to apply to the bounding box\n   * @returns The transformed bounding box\n   */\n  public transform(matrix: Matrix): BoundingBox {\n    BoundingBox.transform(this, matrix, this);\n    return this;\n  }\n\n  /**\n   * Creates a clone of this box.\n   * @returns A clone of this box\n   */\n  clone(): BoundingBox {\n    return new BoundingBox(this.min, this.max);\n  }\n\n  /**\n   * Copy this bounding box from the specified box.\n   * @param source - The specified box\n   * @returns This bounding box\n   */\n  copyFrom(source: BoundingBox): BoundingBox {\n    this.min.copyFrom(source.min);\n    this.max.copyFrom(source.max);\n    return this;\n  }\n}\n","import { BoundingBox } from \"./BoundingBox\";\nimport { BoundingFrustum } from \"./BoundingFrustum\";\nimport { BoundingSphere } from \"./BoundingSphere\";\nimport { ContainmentType } from \"./enums/ContainmentType\";\nimport { PlaneIntersectionType } from \"./enums/PlaneIntersectionType\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Plane } from \"./Plane\";\nimport { Ray } from \"./Ray\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Contains static methods to help in determining intersections, containment, etc.\n */\nexport class CollisionUtil {\n  private static _tempVec30: Vector3 = new Vector3();\n  private static _tempVec31: Vector3 = new Vector3();\n  private static _tempVec32: Vector3 = new Vector3();\n\n  /**\n   * Calculate the intersection point of three plane.\n   * @param  p1 - Plane 1\n   * @param  p2 - Plane 2\n   * @param  p3 - Plane 3\n   * @param out - intersection point\n   */\n  static intersectionPointThreePlanes(p1: Plane, p2: Plane, p3: Plane, out: Vector3): void {\n    const p1Nor = p1.normal;\n    const p2Nor = p2.normal;\n    const p3Nor = p3.normal;\n\n    Vector3.cross(p2Nor, p3Nor, CollisionUtil._tempVec30);\n    Vector3.cross(p3Nor, p1Nor, CollisionUtil._tempVec31);\n    Vector3.cross(p1Nor, p2Nor, CollisionUtil._tempVec32);\n\n    const a = -Vector3.dot(p1Nor, CollisionUtil._tempVec30);\n    const b = -Vector3.dot(p2Nor, CollisionUtil._tempVec31);\n    const c = -Vector3.dot(p3Nor, CollisionUtil._tempVec32);\n\n    Vector3.scale(CollisionUtil._tempVec30, p1.distance / a, CollisionUtil._tempVec30);\n    Vector3.scale(CollisionUtil._tempVec31, p2.distance / b, CollisionUtil._tempVec31);\n    Vector3.scale(CollisionUtil._tempVec32, p3.distance / c, CollisionUtil._tempVec32);\n\n    Vector3.add(CollisionUtil._tempVec30, CollisionUtil._tempVec31, out);\n    Vector3.add(out, CollisionUtil._tempVec32, out);\n  }\n\n  /**\n   * Calculate the distance from a point to a plane.\n   * @param plane - The plane\n   * @param point - The point\n   * @returns The distance from a point to a plane\n   */\n  static distancePlaneAndPoint(plane: Plane, point: Vector3): number {\n    return Vector3.dot(plane.normal, point) + plane.distance;\n  }\n\n  /**\n   * Get the intersection type between a plane and a point.\n   * @param plane - The plane\n   * @param point - The point\n   * @returns The intersection type\n   */\n  static intersectsPlaneAndPoint(plane: Plane, point: Vector3): PlaneIntersectionType {\n    const distance = CollisionUtil.distancePlaneAndPoint(plane, point);\n    if (distance > 0) {\n      return PlaneIntersectionType.Front;\n    }\n    if (distance < 0) {\n      return PlaneIntersectionType.Back;\n    }\n    return PlaneIntersectionType.Intersecting;\n  }\n\n  /**\n   * Get the intersection type between a plane and a box (AABB).\n   * @param plane - The plane\n   * @param box - The box\n   * @returns The intersection type\n   */\n  static intersectsPlaneAndBox(plane: Plane, box: BoundingBox): PlaneIntersectionType {\n    const { min, max } = box;\n    const { normal } = plane;\n    const front = CollisionUtil._tempVec30;\n    const back = CollisionUtil._tempVec31;\n\n    if (normal.x >= 0) {\n      front.x = max.x;\n      back.x = min.x;\n    } else {\n      front.x = min.x;\n      back.x = max.x;\n    }\n    if (normal.y >= 0) {\n      front.y = max.y;\n      back.y = min.y;\n    } else {\n      front.y = min.y;\n      back.y = max.y;\n    }\n    if (normal.z >= 0) {\n      front.z = max.z;\n      back.z = min.z;\n    } else {\n      front.z = min.z;\n      back.z = max.z;\n    }\n\n    if (CollisionUtil.distancePlaneAndPoint(plane, front) < 0) {\n      return PlaneIntersectionType.Back;\n    }\n\n    if (CollisionUtil.distancePlaneAndPoint(plane, back) > 0) {\n      return PlaneIntersectionType.Front;\n    }\n\n    return PlaneIntersectionType.Intersecting;\n  }\n\n  /**\n   * Get the intersection type between a plane and a sphere.\n   * @param plane - The plane\n   * @param sphere - The sphere\n   * @returns The intersection type\n   */\n  static intersectsPlaneAndSphere(plane: Plane, sphere: BoundingSphere): PlaneIntersectionType {\n    const { center, radius } = sphere;\n    const distance = CollisionUtil.distancePlaneAndPoint(plane, center);\n    if (distance > radius) {\n      return PlaneIntersectionType.Front;\n    }\n    if (distance < -radius) {\n      return PlaneIntersectionType.Back;\n    }\n    return PlaneIntersectionType.Intersecting;\n  }\n\n  /**\n   * Get the intersection type between a ray and a plane.\n   * @param ray - The ray\n   * @param plane - The plane\n   * @returns The distance from ray to plane if intersecting, -1 otherwise\n   */\n  static intersectsRayAndPlane(ray: Ray, plane: Plane): number {\n    const { normal } = plane;\n    const { zeroTolerance } = MathUtil;\n\n    const dir = Vector3.dot(normal, ray.direction);\n    // Parallel\n    if (Math.abs(dir) < zeroTolerance) {\n      return -1;\n    }\n\n    const position = Vector3.dot(normal, ray.origin);\n    let distance = (-plane.distance - position) / dir;\n\n    if (distance < 0) {\n      if (distance < -zeroTolerance) {\n        return -1;\n      }\n\n      distance = 0;\n    }\n\n    return distance;\n  }\n\n  /**\n   * Get the intersection type between a ray and a box (AABB).\n   * @param ray - The ray\n   * @param box - The box\n   * @returns The distance from ray to box if intersecting, -1 otherwise\n   */\n  static intersectsRayAndBox(ray: Ray, box: BoundingBox): number {\n    const { zeroTolerance } = MathUtil;\n    const { origin, direction } = ray;\n    const { min, max } = box;\n    const dirX = direction.x;\n    const dirY = direction.y;\n    const dirZ = direction.z;\n    const oriX = origin.x;\n    const oriY = origin.y;\n    const oriZ = origin.z;\n    let distance = 0;\n    let tmax = Number.MAX_VALUE;\n\n    if (Math.abs(dirX) < zeroTolerance) {\n      if (oriX < min.x || oriX > max.x) {\n        return -1;\n      }\n    } else {\n      const inverse = 1.0 / dirX;\n      let t1 = (min.x - oriX) * inverse;\n      let t2 = (max.x - oriX) * inverse;\n\n      if (t1 > t2) {\n        const temp = t1;\n        t1 = t2;\n        t2 = temp;\n      }\n\n      distance = Math.max(t1, distance);\n      tmax = Math.min(t2, tmax);\n\n      if (distance > tmax) {\n        return -1;\n      }\n    }\n\n    if (Math.abs(dirY) < zeroTolerance) {\n      if (oriY < min.y || oriY > max.y) {\n        return -1;\n      }\n    } else {\n      const inverse = 1.0 / dirY;\n      let t1 = (min.y - oriY) * inverse;\n      let t2 = (max.y - oriY) * inverse;\n\n      if (t1 > t2) {\n        const temp = t1;\n        t1 = t2;\n        t2 = temp;\n      }\n\n      distance = Math.max(t1, distance);\n      tmax = Math.min(t2, tmax);\n\n      if (distance > tmax) {\n        return -1;\n      }\n    }\n\n    if (Math.abs(dirZ) < zeroTolerance) {\n      if (oriZ < min.z || oriZ > max.z) {\n        return -1;\n      }\n    } else {\n      const inverse = 1.0 / dirZ;\n      let t1 = (min.z - oriZ) * inverse;\n      let t2 = (max.z - oriZ) * inverse;\n\n      if (t1 > t2) {\n        const temp = t1;\n        t1 = t2;\n        t2 = temp;\n      }\n\n      distance = Math.max(t1, distance);\n      tmax = Math.min(t2, tmax);\n\n      if (distance > tmax) {\n        return -1;\n      }\n    }\n\n    return distance;\n  }\n\n  /**\n   * Get the intersection type between a ray and a sphere.\n   * @param ray - The ray\n   * @param sphere - The sphere\n   * @returns The distance from ray to sphere if intersecting, -1 otherwise\n   */\n  static intersectsRayAndSphere(ray: Ray, sphere: BoundingSphere): number {\n    const { origin, direction } = ray;\n    const { center, radius } = sphere;\n\n    const m = CollisionUtil._tempVec30;\n    Vector3.subtract(origin, center, m);\n    const b = Vector3.dot(m, direction);\n    const c = Vector3.dot(m, m) - radius * radius;\n\n    if (b > 0 && c > 0) {\n      return -1;\n    }\n\n    let discriminant = b * b - c;\n    if (discriminant < 0) {\n      return -1;\n    }\n\n    let distance = -b - Math.sqrt(discriminant);\n    if (distance < 0) {\n      distance = 0;\n    }\n\n    return distance;\n  }\n\n  /**\n   * Check whether the boxes intersect.\n   * @param boxA - The first box to check\n   * @param boxB - The second box to check\n   * @returns True if the boxes intersect, false otherwise\n   */\n  static intersectsBoxAndBox(boxA: BoundingBox, boxB: BoundingBox): boolean {\n    if (boxA.min.x > boxB.max.x || boxB.min.x > boxA.max.x) {\n      return false;\n    }\n\n    if (boxA.min.y > boxB.max.y || boxB.min.y > boxA.max.y) {\n      return false;\n    }\n\n    return !(boxA.min.z > boxB.max.z || boxB.min.z > boxA.max.z);\n  }\n\n  /**\n   * Check whether the spheres intersect.\n   * @param sphereA - The first sphere to check\n   * @param sphereB - The second sphere to check\n   * @returns True if the spheres intersect, false otherwise\n   */\n  static intersectsSphereAndSphere(sphereA: BoundingSphere, sphereB: BoundingSphere): boolean {\n    const radiisum = sphereA.radius + sphereB.radius;\n    return Vector3.distanceSquared(sphereA.center, sphereB.center) < radiisum * radiisum;\n  }\n\n  /**\n   * Check whether the sphere and the box intersect.\n   * @param sphere - The sphere to check\n   * @param box - The box to check\n   * @returns True if the sphere and the box intersect, false otherwise\n   */\n  static intersectsSphereAndBox(sphere: BoundingSphere, box: BoundingBox): boolean {\n    const center = sphere.center;\n    const max = box.max;\n    const min = box.min;\n\n    const closestPoint = CollisionUtil._tempVec30;\n    closestPoint.set(\n      Math.max(min.x, Math.min(center.x, max.x)),\n      Math.max(min.y, Math.min(center.y, max.y)),\n      Math.max(min.z, Math.min(center.z, max.z))\n    );\n\n    const distance = Vector3.distanceSquared(center, closestPoint);\n    return distance <= sphere.radius * sphere.radius;\n  }\n\n  /**\n   * Get whether or not a specified bounding box intersects with this frustum (Contains or Intersects).\n   * @param frustum - The frustum\n   * @param box - The box\n   * @returns True if bounding box intersects with this frustum, false otherwise\n   */\n  static intersectsFrustumAndBox(frustum: BoundingFrustum, box: BoundingBox): boolean {\n    const { min, max } = box;\n    const p = CollisionUtil._tempVec30;\n\n    for (let i = 0; i < 6; ++i) {\n      const plane = frustum.getPlane(i);\n      const normal = plane.normal;\n\n      p.set(normal.x >= 0 ? max.x : min.x, normal.y >= 0 ? max.y : min.y, normal.z >= 0 ? max.z : min.z);\n      if (Vector3.dot(normal, p) < -plane.distance) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Get the containment type between a frustum and a point.\n   * @param frustum - The frustum\n   * @param point - The point\n   * @returns The containment type\n   */\n  static frustumContainsPoint(frustum: BoundingFrustum, point: Vector3): ContainmentType {\n    let distance = CollisionUtil.distancePlaneAndPoint(frustum.near, point);\n    if (Math.abs(distance) < MathUtil.zeroTolerance) {\n      return ContainmentType.Intersects;\n    } else if (distance < 0) {\n      return ContainmentType.Disjoint;\n    }\n    distance = CollisionUtil.distancePlaneAndPoint(frustum.far, point);\n    if (Math.abs(distance) < MathUtil.zeroTolerance) {\n      return ContainmentType.Intersects;\n    } else if (distance < 0) {\n      return ContainmentType.Disjoint;\n    }\n    distance = CollisionUtil.distancePlaneAndPoint(frustum.left, point);\n    if (Math.abs(distance) < MathUtil.zeroTolerance) {\n      return ContainmentType.Intersects;\n    } else if (distance < 0) {\n      return ContainmentType.Disjoint;\n    }\n    distance = CollisionUtil.distancePlaneAndPoint(frustum.right, point);\n    if (Math.abs(distance) < MathUtil.zeroTolerance) {\n      return ContainmentType.Intersects;\n    } else if (distance < 0) {\n      return ContainmentType.Disjoint;\n    }\n    distance = CollisionUtil.distancePlaneAndPoint(frustum.top, point);\n    if (Math.abs(distance) < MathUtil.zeroTolerance) {\n      return ContainmentType.Intersects;\n    } else if (distance < 0) {\n      return ContainmentType.Disjoint;\n    }\n    distance = CollisionUtil.distancePlaneAndPoint(frustum.bottom, point);\n    if (Math.abs(distance) < MathUtil.zeroTolerance) {\n      return ContainmentType.Intersects;\n    } else if (distance < 0) {\n      return ContainmentType.Disjoint;\n    }\n    return ContainmentType.Contains;\n  }\n\n  /**\n   * Get the containment type between a frustum and a box (AABB).\n   * @param frustum - The frustum\n   * @param box - The box\n   * @returns The containment type\n   */\n  static frustumContainsBox(frustum: BoundingFrustum, box: BoundingBox): ContainmentType {\n    const { min, max } = box;\n    const p = CollisionUtil._tempVec30;\n    const n = CollisionUtil._tempVec31;\n    let result = ContainmentType.Contains;\n\n    for (let i = 0; i < 6; ++i) {\n      const plane = frustum.getPlane(i);\n      const normal = plane.normal;\n\n      if (normal.x >= 0) {\n        p.x = max.x;\n        n.x = min.x;\n      } else {\n        p.x = min.x;\n        n.x = max.x;\n      }\n      if (normal.y >= 0) {\n        p.y = max.y;\n        n.y = min.y;\n      } else {\n        p.y = min.y;\n        n.y = max.y;\n      }\n      if (normal.z >= 0) {\n        p.z = max.z;\n        n.z = min.z;\n      } else {\n        p.z = min.z;\n        n.z = max.z;\n      }\n\n      if (CollisionUtil.intersectsPlaneAndPoint(plane, p) === PlaneIntersectionType.Back) {\n        return ContainmentType.Disjoint;\n      }\n\n      if (CollisionUtil.intersectsPlaneAndPoint(plane, n) === PlaneIntersectionType.Back) {\n        result = ContainmentType.Intersects;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Get the containment type between a frustum and a sphere.\n   * @param frustum - The frustum\n   * @param sphere - The sphere\n   * @returns The containment type\n   */\n  static frustumContainsSphere(frustum: BoundingFrustum, sphere: BoundingSphere): ContainmentType {\n    let result = ContainmentType.Contains;\n\n    for (let i = 0; i < 6; ++i) {\n      const plane = frustum.getPlane(i);\n      const intersectionType = CollisionUtil.intersectsPlaneAndSphere(plane, sphere);\n      if (intersectionType === PlaneIntersectionType.Back) {\n        return ContainmentType.Disjoint;\n      } else if (intersectionType === PlaneIntersectionType.Intersecting) {\n        result = ContainmentType.Intersects;\n        break;\n      }\n    }\n\n    return result;\n  }\n}\n","import { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Represents a plane in three-dimensional space.\n */\nexport class Plane implements IClone<Plane>, ICopy<Plane, Plane> {\n  /**\n   * Normalize the normal vector of the specified plane.\n   * @param p - The specified plane\n   * @param out - A normalized version of the specified plane\n   */\n  static normalize(p: Plane, out: Plane): void {\n    const { normal } = p;\n\n    const factor = 1.0 / normal.length();\n    Vector3.scale(normal, factor, out.normal);\n    out.distance = p.distance * factor;\n  }\n\n  /**\n   * Calculate the plane that contains the three specified points.\n   * @param point0 - The first point\n   * @param point1 - The second point\n   * @param point2 - The third point\n   * @param out - The calculated plane\n   */\n  static fromPoints(point0: Vector3, point1: Vector3, point2: Vector3, out: Plane): void {\n    const x0 = point0.x;\n    const y0 = point0.y;\n    const z0 = point0.z;\n    const x1 = point1.x - x0;\n    const y1 = point1.y - y0;\n    const z1 = point1.z - z0;\n    const x2 = point2.x - x0;\n    const y2 = point2.y - y0;\n    const z2 = point2.z - z0;\n    const yz = y1 * z2 - z1 * y2;\n    const xz = z1 * x2 - x1 * z2;\n    const xy = x1 * y2 - y1 * x2;\n    const invPyth = 1.0 / Math.sqrt(yz * yz + xz * xz + xy * xy);\n\n    const x = yz * invPyth;\n    const y = xz * invPyth;\n    const z = xy * invPyth;\n\n    const { normal } = out;\n    normal.x = x;\n    normal.y = y;\n    normal.z = z;\n\n    out.distance = -(x * x0 + y * y0 + z * z0);\n  }\n\n  /** The normal of the plane. */\n  public readonly normal: Vector3 = new Vector3();\n  /** The distance of the plane along its normal to the origin. */\n  public distance: number = 0;\n\n  /**\n   * Constructor of Plane.\n   * @param normal - The normal vector\n   * @param distance - The distance of the plane along its normal to the origin\n   */\n  constructor(normal: Vector3 = null, distance: number = 0) {\n    normal && this.normal.copyFrom(normal);\n    this.distance = distance;\n  }\n\n  /**\n   * Normalize the normal vector of this plane.\n   * @returns The plane after normalize\n   */\n  normalize(): Plane {\n    Plane.normalize(this, this);\n    return this;\n  }\n\n  /**\n   * Creates a clone of this plane.\n   * @returns A clone of this plane\n   */\n  clone(): Plane {\n    const out = new Plane();\n    out.copyFrom(this);\n    return out;\n  }\n\n  /**\n   * Copy this plane from the specified plane.\n   * @param source - The specified plane\n   * @returns This plane\n   */\n  copyFrom(source: Plane): Plane {\n    this.normal.copyFrom(source.normal);\n    this.distance = source.distance;\n    return this;\n  }\n}\n","import { BoundingBox } from \"./BoundingBox\";\nimport { BoundingSphere } from \"./BoundingSphere\";\nimport { CollisionUtil } from \"./CollisionUtil\";\nimport { ContainmentType } from \"./enums/ContainmentType\";\nimport { FrustumFace } from \"./enums/FrustumFace\";\nimport { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { Matrix } from \"./Matrix\";\nimport { Plane } from \"./Plane\";\n\n/**\n * A bounding frustum.\n */\nexport class BoundingFrustum implements IClone<BoundingFrustum>, ICopy<BoundingFrustum, BoundingFrustum> {\n  /** The near plane of this frustum. */\n  public near: Plane;\n  /** The far plane of this frustum. */\n  public far: Plane;\n  /** The left plane of this frustum. */\n  public left: Plane;\n  /** The right plane of this frustum. */\n  public right: Plane;\n  /** The bottom plane of this frustum. */\n  public bottom: Plane;\n  /** The top plane of this frustum. */\n  public top: Plane;\n\n  /**\n   * Constructor of BoundingFrustum.\n   * @param matrix - The view-projection matrix\n   */\n  constructor(matrix: Matrix = null) {\n    this.near = new Plane();\n    this.far = new Plane();\n    this.left = new Plane();\n    this.right = new Plane();\n    this.top = new Plane();\n    this.bottom = new Plane();\n\n    matrix && this.calculateFromMatrix(matrix);\n  }\n\n  /**\n   * Get the plane by the given frustum face.\n   * @param face - The frustum face\n   * @returns The plane get\n   */\n  getPlane(face: FrustumFace): Plane {\n    switch (face) {\n      case FrustumFace.Near:\n        return this.near;\n      case FrustumFace.Far:\n        return this.far;\n      case FrustumFace.Left:\n        return this.left;\n      case FrustumFace.Right:\n        return this.right;\n      case FrustumFace.Bottom:\n        return this.bottom;\n      case FrustumFace.Top:\n        return this.top;\n      default:\n        return null;\n    }\n  }\n\n  /**\n   * Update all planes from the given matrix.\n   * @param matrix - The given view-projection matrix\n   */\n  public calculateFromMatrix(matrix: Matrix): void {\n    const me = matrix.elements;\n    const m11 = me[0];\n    const m12 = me[1];\n    const m13 = me[2];\n    const m14 = me[3];\n    const m21 = me[4];\n    const m22 = me[5];\n    const m23 = me[6];\n    const m24 = me[7];\n    const m31 = me[8];\n    const m32 = me[9];\n    const m33 = me[10];\n    const m34 = me[11];\n    const m41 = me[12];\n    const m42 = me[13];\n    const m43 = me[14];\n    const m44 = me[15];\n\n    // near\n    const nearNormal = this.near.normal;\n    nearNormal.set(m14 + m13, m24 + m23, m34 + m33);\n    this.near.distance = m44 + m43;\n    this.near.normalize();\n\n    // far\n    const farNormal = this.far.normal;\n    farNormal.set(m14 - m13, m24 - m23, m34 - m33);\n    this.far.distance = m44 - m43;\n\n    this.far.normalize();\n\n    // left\n    const leftNormal = this.left.normal;\n    leftNormal.set(m14 + m11, m24 + m21, m34 + m31);\n    this.left.distance = m44 + m41;\n    this.left.normalize();\n\n    // right\n    const rightNormal = this.right.normal;\n    rightNormal.set(m14 - m11, m24 - m21, m34 - m31);\n    this.right.distance = m44 - m41;\n    this.right.normalize();\n\n    // bottom\n    const bottomNormal = this.bottom.normal;\n    bottomNormal.set(m14 + m12, m24 + m22, m34 + m32);\n    this.bottom.distance = m44 + m42;\n    this.bottom.normalize();\n\n    // top\n    const topNormal = this.top.normal;\n    topNormal.set(m14 - m12, m24 - m22, m34 - m32);\n    this.top.distance = m44 - m42;\n    this.top.normalize();\n  }\n\n  /**\n   * Get whether or not a specified bounding box intersects with this frustum (Contains or Intersects).\n   * @param box - The box for testing\n   * @returns True if bounding box intersects with this frustum, false otherwise\n   */\n  public intersectsBox(box: BoundingBox): boolean {\n    return CollisionUtil.intersectsFrustumAndBox(this, box);\n  }\n\n  /**\n   * Get whether or not a specified bounding sphere intersects with this frustum (Contains or Intersects).\n   * @param sphere - The sphere for testing\n   * @returns True if bounding sphere intersects with this frustum, false otherwise\n   */\n  public intersectsSphere(sphere: BoundingSphere): boolean {\n    return CollisionUtil.frustumContainsSphere(this, sphere) !== ContainmentType.Disjoint;\n  }\n\n  /**\n   * Creates a clone of this frustum.\n   * @returns A clone of this frustum\n   */\n  clone(): BoundingFrustum {\n    const out = new BoundingFrustum();\n    out.copyFrom(this);\n    return out;\n  }\n\n  /**\n   * Copy this frustum from the specified frustum.\n   * @param source - The specified frustum\n   * @returns This frustum\n   */\n  copyFrom(source: BoundingFrustum): BoundingFrustum {\n    this.near.copyFrom(source.near);\n    this.far.copyFrom(source.far);\n    this.left.copyFrom(source.left);\n    this.right.copyFrom(source.right);\n    this.bottom.copyFrom(source.bottom);\n    this.top.copyFrom(source.top);\n    return this;\n  }\n}\n","import { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Matrix } from \"./Matrix\";\nimport { Quaternion } from \"./Quaternion\";\nimport { Vector2 } from \"./Vector2\";\n\n/**\n * Represents a 3x3 mathematical matrix.\n */\nexport class Matrix3x3 implements IClone<Matrix3x3>, ICopy<Matrix3x3, Matrix3x3> {\n  /**\n   * Determines the sum of two matrices.\n   * @param left - The first matrix to add\n   * @param right - The second matrix to add\n   * @param out - The sum of two matrices\n   */\n  static add(left: Matrix3x3, right: Matrix3x3, out: Matrix3x3): void {\n    const le = left.elements;\n    const re = right.elements;\n    const oe = out.elements;\n\n    oe[0] = le[0] + re[0];\n    oe[1] = le[1] + re[1];\n    oe[2] = le[2] + re[2];\n\n    oe[3] = le[3] + re[3];\n    oe[4] = le[4] + re[4];\n    oe[5] = le[5] + re[5];\n\n    oe[6] = le[6] + re[6];\n    oe[7] = le[7] + re[7];\n    oe[8] = le[8] + re[8];\n  }\n\n  /**\n   * Determines the difference between two matrices.\n   * @param left - The first matrix to subtract\n   * @param right - The second matrix to subtract\n   * @param out - The difference between two matrices\n   */\n  static subtract(left: Matrix3x3, right: Matrix3x3, out: Matrix3x3): void {\n    const le = left.elements;\n    const re = right.elements;\n    const oe = out.elements;\n\n    oe[0] = le[0] - re[0];\n    oe[1] = le[1] - re[1];\n    oe[2] = le[2] - re[2];\n\n    oe[3] = le[3] - re[3];\n    oe[4] = le[4] - re[4];\n    oe[5] = le[5] - re[5];\n\n    oe[6] = le[6] - re[6];\n    oe[7] = le[7] - re[7];\n    oe[8] = le[8] - re[8];\n  }\n\n  /**\n   * Determines the product of two matrices.\n   * @param left - The first matrix to multiply\n   * @param right - The second matrix to multiply\n   * @param out - The product of two matrices\n   */\n  static multiply(left: Matrix3x3, right: Matrix3x3, out: Matrix3x3): void {\n    const le = left.elements;\n    const re = right.elements;\n    const oe = out.elements;\n\n    const l11 = le[0],\n      l12 = le[1],\n      l13 = le[2];\n    const l21 = le[3],\n      l22 = le[4],\n      l23 = le[5];\n    const l31 = le[6],\n      l32 = le[7],\n      l33 = le[8];\n\n    const r11 = re[0],\n      r12 = re[1],\n      r13 = re[2];\n    const r21 = re[3],\n      r22 = re[4],\n      r23 = re[5];\n    const r31 = re[6],\n      r32 = re[7],\n      r33 = re[8];\n\n    oe[0] = l11 * r11 + l21 * r12 + l31 * r13;\n    oe[1] = l12 * r11 + l22 * r12 + l32 * r13;\n    oe[2] = l13 * r11 + l23 * r12 + l33 * r13;\n\n    oe[3] = l11 * r21 + l21 * r22 + l31 * r23;\n    oe[4] = l12 * r21 + l22 * r22 + l32 * r23;\n    oe[5] = l13 * r21 + l23 * r22 + l33 * r23;\n\n    oe[6] = l11 * r31 + l21 * r32 + l31 * r33;\n    oe[7] = l12 * r31 + l22 * r32 + l32 * r33;\n    oe[8] = l13 * r31 + l23 * r32 + l33 * r33;\n  }\n\n  /**\n   * Determines whether the specified matrices are equals.\n   * @param left - The first matrix to compare\n   * @param right - The second matrix to compare\n   * @returns True if the specified matrices are equals, false otherwise\n   */\n  static equals(left: Matrix3x3, right: Matrix3x3): boolean {\n    const le = left.elements;\n    const re = right.elements;\n\n    return (\n      MathUtil.equals(le[0], re[0]) &&\n      MathUtil.equals(le[1], re[1]) &&\n      MathUtil.equals(le[2], re[2]) &&\n      MathUtil.equals(le[3], re[3]) &&\n      MathUtil.equals(le[4], re[4]) &&\n      MathUtil.equals(le[5], re[5]) &&\n      MathUtil.equals(le[6], re[6]) &&\n      MathUtil.equals(le[7], re[7]) &&\n      MathUtil.equals(le[8], re[8])\n    );\n  }\n\n  /**\n   * Performs a linear interpolation between two matrices.\n   * @param start - The first matrix\n   * @param end - The second matrix\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @param out - The result of linear blending between two matrices\n   */\n  static lerp(start: Matrix3x3, end: Matrix3x3, t: number, out: Matrix3x3): void {\n    const se = start.elements;\n    const ee = end.elements;\n    const oe = out.elements;\n    const inv = 1.0 - t;\n\n    oe[0] = se[0] * inv + ee[0] * t;\n    oe[1] = se[1] * inv + ee[1] * t;\n    oe[2] = se[2] * inv + ee[2] * t;\n\n    oe[3] = se[3] * inv + ee[3] * t;\n    oe[4] = se[4] * inv + ee[4] * t;\n    oe[5] = se[5] * inv + ee[5] * t;\n\n    oe[6] = se[6] * inv + ee[6] * t;\n    oe[7] = se[7] * inv + ee[7] * t;\n    oe[8] = se[8] * inv + ee[8] * t;\n  }\n\n  /**\n   * Calculate a rotation matrix from a quaternion.\n   * @param quaternion - The quaternion used to calculate the matrix\n   * @param out - The calculated rotation matrix\n   */\n  static rotationQuaternion(quaternion: Quaternion, out: Matrix3x3): void {\n    const oe = out.elements;\n    const { _x: x, _y: y, _z: z, _w: w } = quaternion;\n    const x2 = x + x;\n    const y2 = y + y;\n    const z2 = z + z;\n    const xx = x * x2;\n    const yx = y * x2;\n    const yy = y * y2;\n    const zx = z * x2;\n    const zy = z * y2;\n    const zz = z * z2;\n    const wx = w * x2;\n    const wy = w * y2;\n    const wz = w * z2;\n\n    oe[0] = 1 - yy - zz;\n    oe[3] = yx - wz;\n    oe[6] = zx + wy;\n\n    oe[1] = yx + wz;\n    oe[4] = 1 - xx - zz;\n    oe[7] = zy - wx;\n\n    oe[2] = zx - wy;\n    oe[5] = zy + wx;\n    oe[8] = 1 - xx - yy;\n  }\n\n  /**\n   * Calculate a matrix from scale vector.\n   * @param s - The scale vector\n   * @param out - The calculated matrix\n   */\n  static scaling(s: Vector2, out: Matrix3x3): void {\n    const oe = out.elements;\n\n    oe[0] = s._x;\n    oe[1] = 0;\n    oe[2] = 0;\n\n    oe[3] = 0;\n    oe[4] = s._y;\n    oe[5] = 0;\n\n    oe[6] = 0;\n    oe[7] = 0;\n    oe[8] = 1;\n  }\n\n  /**\n   * Calculate a matrix from translation vector.\n   * @param translation - The translation vector\n   * @param out - The calculated matrix\n   */\n  static translation(translation: Vector2, out: Matrix3x3): void {\n    const oe = out.elements;\n\n    oe[0] = 1;\n    oe[1] = 0;\n    oe[2] = 0;\n\n    oe[3] = 0;\n    oe[4] = 1;\n    oe[5] = 0;\n\n    oe[6] = translation._x;\n    oe[7] = translation._y;\n    oe[8] = 1;\n  }\n\n  /**\n   * Calculate the inverse of the specified matrix.\n   * @param a - The matrix whose inverse is to be calculated\n   * @param out - The inverse of the specified matrix\n   */\n  static invert(a: Matrix3x3, out: Matrix3x3): void {\n    const ae = a.elements;\n    const oe = out.elements;\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2];\n    const a21 = ae[3],\n      a22 = ae[4],\n      a23 = ae[5];\n    const a31 = ae[6],\n      a32 = ae[7],\n      a33 = ae[8];\n\n    const b12 = a33 * a22 - a23 * a32;\n    const b22 = -a33 * a21 + a23 * a31;\n    const b32 = a32 * a21 - a22 * a31;\n\n    let det = a11 * b12 + a12 * b22 + a13 * b32;\n    if (!det) {\n      return;\n    }\n    det = 1.0 / det;\n\n    oe[0] = b12 * det;\n    oe[1] = (-a33 * a12 + a13 * a32) * det;\n    oe[2] = (a23 * a12 - a13 * a22) * det;\n\n    oe[3] = b22 * det;\n    oe[4] = (a33 * a11 - a13 * a31) * det;\n    oe[5] = (-a23 * a11 + a13 * a21) * det;\n\n    oe[6] = b32 * det;\n    oe[7] = (-a32 * a11 + a12 * a31) * det;\n    oe[8] = (a22 * a11 - a12 * a21) * det;\n  }\n\n  /**\n   * Calculate a 3x3 normal matrix from a 4x4 matrix.\n   * @remarks The calculation process is the transpose matrix of the inverse matrix.\n   * @param mat4 - The 4x4 matrix\n   * @param out - THe 3x3 normal matrix\n   */\n  static normalMatrix(mat4: Matrix, out: Matrix3x3): void {\n    const ae = mat4.elements;\n    const oe = out.elements;\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2],\n      a14 = ae[3];\n    const a21 = ae[4],\n      a22 = ae[5],\n      a23 = ae[6],\n      a24 = ae[7];\n    const a31 = ae[8],\n      a32 = ae[9],\n      a33 = ae[10],\n      a34 = ae[11];\n    const a41 = ae[12],\n      a42 = ae[13],\n      a43 = ae[14],\n      a44 = ae[15];\n\n    const b00 = a11 * a22 - a12 * a21;\n    const b01 = a11 * a23 - a13 * a21;\n    const b02 = a11 * a24 - a14 * a21;\n    const b03 = a12 * a23 - a13 * a22;\n    const b04 = a12 * a24 - a14 * a22;\n    const b05 = a13 * a24 - a14 * a23;\n    const b06 = a31 * a42 - a32 * a41;\n    const b07 = a31 * a43 - a33 * a41;\n    const b08 = a31 * a44 - a34 * a41;\n    const b09 = a32 * a43 - a33 * a42;\n    const b10 = a32 * a44 - a34 * a42;\n    const b11 = a33 * a44 - a34 * a43;\n\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n    if (!det) {\n      return null;\n    }\n    det = 1.0 / det;\n\n    oe[0] = (a22 * b11 - a23 * b10 + a24 * b09) * det;\n    oe[1] = (a23 * b08 - a21 * b11 - a24 * b07) * det;\n    oe[2] = (a21 * b10 - a22 * b08 + a24 * b06) * det;\n\n    oe[3] = (a13 * b10 - a12 * b11 - a14 * b09) * det;\n    oe[4] = (a11 * b11 - a13 * b08 + a14 * b07) * det;\n    oe[5] = (a12 * b08 - a11 * b10 - a14 * b06) * det;\n\n    oe[6] = (a42 * b05 - a43 * b04 + a44 * b03) * det;\n    oe[7] = (a43 * b02 - a41 * b05 - a44 * b01) * det;\n    oe[8] = (a41 * b04 - a42 * b02 + a44 * b00) * det;\n  }\n\n  /**\n   * The specified matrix rotates around an angle.\n   * @param a - The specified matrix\n   * @param r - The rotation angle in radians\n   * @param out - The rotated matrix\n   */\n  static rotate(a: Matrix3x3, r: number, out: Matrix3x3): void {\n    const ae = a.elements;\n    const oe = out.elements;\n    const s = Math.sin(r);\n    const c = Math.cos(r);\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2];\n    const a21 = ae[3],\n      a22 = ae[4],\n      a23 = ae[5];\n    const a31 = ae[6],\n      a32 = ae[7],\n      a33 = ae[8];\n\n    oe[0] = c * a11 + s * a21;\n    oe[1] = c * a12 + s * a22;\n    oe[2] = c * a13 + s * a23;\n\n    oe[3] = c * a21 - s * a11;\n    oe[4] = c * a22 - s * a12;\n    oe[5] = c * a23 - s * a13;\n\n    oe[6] = a31;\n    oe[7] = a32;\n    oe[8] = a33;\n  }\n\n  /**\n   * Scale a matrix by a given vector.\n   * @param m - The matrix\n   * @param s - The given vector\n   * @param out - The scaled matrix\n   */\n  static scale(m: Matrix3x3, s: Vector2, out: Matrix3x3): void {\n    const { _x: x, _y: y } = s;\n    const ae = m.elements;\n    const oe = out.elements;\n\n    oe[0] = x * ae[0];\n    oe[1] = x * ae[1];\n    oe[2] = x * ae[2];\n\n    oe[3] = y * ae[3];\n    oe[4] = y * ae[4];\n    oe[5] = y * ae[5];\n\n    oe[6] = ae[6];\n    oe[7] = ae[7];\n    oe[8] = ae[8];\n  }\n\n  /**\n   * Translate a matrix by a given vector.\n   * @param m - The matrix\n   * @param translation - The given vector\n   * @param out - The translated matrix\n   */\n  static translate(m: Matrix3x3, translation: Vector2, out: Matrix3x3): void {\n    const { _x: x, _y: y } = translation;\n    const ae = m.elements;\n    const oe = out.elements;\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2];\n    const a21 = ae[3],\n      a22 = ae[4],\n      a23 = ae[5];\n    const a31 = ae[6],\n      a32 = ae[7],\n      a33 = ae[8];\n\n    oe[0] = a11;\n    oe[1] = a12;\n    oe[2] = a13;\n\n    oe[3] = a21;\n    oe[4] = a22;\n    oe[5] = a23;\n\n    oe[6] = x * a11 + y * a21 + a31;\n    oe[7] = x * a12 + y * a22 + a32;\n    oe[8] = x * a13 + y * a23 + a33;\n  }\n\n  /**\n   * Calculate the transpose of the specified matrix.\n   * @param a - The specified matrix\n   * @param out - The transpose of the specified matrix\n   */\n  static transpose(a: Matrix3x3, out: Matrix3x3): void {\n    const ae = a.elements;\n    const oe = out.elements;\n\n    if (out === a) {\n      const a12 = ae[1];\n      const a13 = ae[2];\n      const a23 = ae[5];\n      oe[1] = ae[3];\n      oe[2] = ae[6];\n      oe[3] = a12;\n      oe[5] = ae[7];\n      oe[6] = a13;\n      oe[7] = a23;\n    } else {\n      oe[0] = ae[0];\n      oe[1] = ae[3];\n      oe[2] = ae[6];\n\n      oe[3] = ae[1];\n      oe[4] = ae[4];\n      oe[5] = ae[7];\n\n      oe[6] = ae[2];\n      oe[7] = ae[5];\n      oe[8] = ae[8];\n    }\n  }\n\n  /**\n   * An array containing the elements of the matrix (column matrix).\n   * @remarks\n   * elements[0] first column and first row value m11\n   * elements[1] first column and second row value m12\n   * elements[2] first column and third row value m13\n   * elements[3] second column and first row value m21\n   * and so on\n   */\n  elements: Float32Array = new Float32Array(9);\n\n  /**\n   * Constructor of 3*3 matrix.\n   * @param m11 - Default 1 column 1, row 1\n   * @param m12 - Default 0 column 1, row 2\n   * @param m13 - Default 0 column 1, row 3\n   * @param m21 - Default 0 column 2, row 1\n   * @param m22 - Default 1 column 2, row 2\n   * @param m23 - Default 0 column 2, row 3\n   * @param m31 - Default 0 column 3, row 1\n   * @param m32 - Default 0 column 3, row 2\n   * @param m33 - Default 1 column 3, row 3\n   */\n  constructor(\n    m11: number = 1,\n    m12: number = 0,\n    m13: number = 0,\n    m21: number = 0,\n    m22: number = 1,\n    m23: number = 0,\n    m31: number = 0,\n    m32: number = 0,\n    m33: number = 1\n  ) {\n    const e: Float32Array = this.elements;\n\n    e[0] = m11;\n    e[1] = m12;\n    e[2] = m13;\n\n    e[3] = m21;\n    e[4] = m22;\n    e[5] = m23;\n\n    e[6] = m31;\n    e[7] = m32;\n    e[8] = m33;\n  }\n\n  /**\n   * Set the value of this matrix, and return this matrix.\n   * @param m11\n   * @param m12\n   * @param m13\n   * @param m21\n   * @param m22\n   * @param m23\n   * @param m31\n   * @param m32\n   * @param m33\n   * @returns This matrix\n   */\n  set(\n    m11: number,\n    m12: number,\n    m13: number,\n    m21: number,\n    m22: number,\n    m23: number,\n    m31: number,\n    m32: number,\n    m33: number\n  ): Matrix3x3 {\n    const e: Float32Array = this.elements;\n\n    e[0] = m11;\n    e[1] = m12;\n    e[2] = m13;\n\n    e[3] = m21;\n    e[4] = m22;\n    e[5] = m23;\n\n    e[6] = m31;\n    e[7] = m32;\n    e[8] = m33;\n\n    return this;\n  }\n\n  /**\n   * Determines the sum of this matrix and the specified matrix.\n   * @param right - The specified matrix\n   * @returns This matrix that store the sum of the two matrices\n   */\n  add(right: Matrix3x3): Matrix3x3 {\n    Matrix3x3.add(this, right, this);\n    return this;\n  }\n\n  /**\n   * Determines the difference between this matrix and the specified matrix.\n   * @param right - The specified matrix\n   * @returns This matrix that store the difference between the two matrices\n   */\n  subtract(right: Matrix3x3): Matrix3x3 {\n    Matrix3x3.subtract(this, right, this);\n    return this;\n  }\n\n  /**\n   * Determines the product of this matrix and the specified matrix.\n   * @param right - The specified matrix\n   * @returns This matrix that store the product of the two matrices\n   */\n  multiply(right: Matrix3x3): Matrix3x3 {\n    Matrix3x3.multiply(this, right, this);\n    return this;\n  }\n\n  /**\n   * Calculate a determinant of this matrix.\n   * @returns The determinant of this matrix\n   */\n  determinant(): number {\n    const e = this.elements;\n\n    const a11 = e[0],\n      a12 = e[1],\n      a13 = e[2];\n    const a21 = e[3],\n      a22 = e[4],\n      a23 = e[5];\n    const a31 = e[6],\n      a32 = e[7],\n      a33 = e[8];\n\n    const b12 = a33 * a22 - a23 * a32;\n    const b22 = -a33 * a21 + a23 * a31;\n    const b32 = a32 * a21 - a22 * a31;\n\n    return a11 * b12 + a12 * b22 + a13 * b32;\n  }\n\n  /**\n   * Identity this matrix.\n   * @returns This matrix after identity\n   */\n  identity(): Matrix3x3 {\n    const e = this.elements;\n\n    e[0] = 1;\n    e[1] = 0;\n    e[2] = 0;\n\n    e[3] = 0;\n    e[4] = 1;\n    e[5] = 0;\n\n    e[6] = 0;\n    e[7] = 0;\n    e[8] = 1;\n\n    return this;\n  }\n\n  /**\n   * Invert the matrix.\n   * @returns The matrix after invert\n   */\n  invert(): Matrix3x3 {\n    Matrix3x3.invert(this, this);\n    return this;\n  }\n\n  /**\n   * This matrix rotates around an angle.\n   * @param r - The rotation angle in radians\n   * @returns This matrix after rotate\n   */\n  rotate(r: number): Matrix3x3 {\n    Matrix3x3.rotate(this, r, this);\n    return this;\n  }\n\n  /**\n   * Scale this matrix by a given vector.\n   * @param s - The given vector\n   * @returns This matrix after scale\n   */\n  scale(s: Vector2): Matrix3x3 {\n    Matrix3x3.scale(this, s, this);\n    return this;\n  }\n\n  /**\n   * Translate this matrix by a given vector.\n   * @param translation - The given vector\n   * @returns This matrix after translate\n   */\n  translate(translation: Vector2): Matrix3x3 {\n    Matrix3x3.translate(this, translation, this);\n    return this;\n  }\n\n  /**\n   * Calculate the transpose of this matrix.\n   * @returns This matrix after transpose\n   */\n  transpose(): Matrix3x3 {\n    Matrix3x3.transpose(this, this);\n    return this;\n  }\n\n  /**\n   * Creates a clone of this matrix.\n   * @returns A clone of this matrix\n   */\n  clone(): Matrix3x3 {\n    const e = this.elements;\n    let ret = new Matrix3x3(e[0], e[1], e[2], e[3], e[4], e[5], e[6], e[7], e[8]);\n    return ret;\n  }\n\n  /**\n   * Copy this matrix from the specified matrix.\n   * @param source - The specified matrix\n   * @returns This matrix\n   */\n  copyFrom(source: Matrix3x3): Matrix3x3 {\n    const e = this.elements;\n    const se = source.elements;\n\n    e[0] = se[0];\n    e[1] = se[1];\n    e[2] = se[2];\n\n    e[3] = se[3];\n    e[4] = se[4];\n    e[5] = se[5];\n\n    e[6] = se[6];\n    e[7] = se[7];\n    e[8] = se[8];\n\n    return this;\n  }\n\n  /**\n   * Copy the value of this matrix from an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This matrix\n   */\n  copyFromArray(array: ArrayLike<number>, offset: number = 0): Matrix3x3 {\n    const srce = this.elements;\n    for (let i = 0; i < 12; i++) {\n      srce[i] = array[i + offset];\n    }\n    return this;\n  }\n\n  /**\n   * Copy the value of this matrix to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  copyToArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0): void {\n    const e = this.elements;\n\n    out[outOffset] = e[0];\n    out[outOffset + 1] = e[1];\n    out[outOffset + 2] = e[2];\n    out[outOffset + 3] = e[3];\n    out[outOffset + 4] = e[4];\n    out[outOffset + 5] = e[5];\n    out[outOffset + 6] = e[6];\n    out[outOffset + 7] = e[7];\n    out[outOffset + 8] = e[8];\n  }\n\n  /**\n   * Copy the value of this 3x3 matrix from the specified 4x4 matrix.\n   * upper-left principle\n   * @param source - The specified 4x4 matrix\n   * @returns This 3x3 matrix\n   */\n  copyFromMatrix(source: Matrix): Matrix3x3 {\n    const ae = source.elements;\n    const e = this.elements;\n\n    e[0] = ae[0];\n    e[1] = ae[1];\n    e[2] = ae[2];\n\n    e[3] = ae[4];\n    e[4] = ae[5];\n    e[5] = ae[6];\n\n    e[6] = ae[8];\n    e[7] = ae[9];\n    e[8] = ae[10];\n\n    return this;\n  }\n}\n","import { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Matrix3x3 } from \"./Matrix3x3\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Represents a four dimensional mathematical quaternion.\n */\nexport class Quaternion implements IClone<Quaternion>, ICopy<QuaternionLike, Quaternion> {\n  /** @internal */\n  static readonly _tempVector3 = new Vector3();\n  /** @internal */\n  static readonly _tempQuat1 = new Quaternion();\n\n  /**\n   * Determines the sum of two quaternions.\n   * @param left - The first quaternion to add\n   * @param right - The second quaternion to add\n   * @param out - The sum of two quaternions\n   */\n  static add(left: Quaternion, right: Quaternion, out: Quaternion): void {\n    out._x = left._x + right._x;\n    out._y = left._y + right._y;\n    out._z = left._z + right._z;\n    out._w = left._w + right._w;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the product of two quaternions.\n   * @param left - The first quaternion to multiply\n   * @param right - The second quaternion to multiply\n   * @param out - The product of two quaternions\n   */\n  static multiply(left: Quaternion, right: Quaternion, out: Quaternion): void {\n    const ax = left._x,\n      ay = left._y,\n      az = left._z,\n      aw = left._w;\n    const bx = right._x,\n      by = right._y,\n      bz = right._z,\n      bw = right._w;\n\n    out._x = ax * bw + aw * bx + ay * bz - az * by;\n    out._y = ay * bw + aw * by + az * bx - ax * bz;\n    out._z = az * bw + aw * bz + ax * by - ay * bx;\n    out._w = aw * bw - ax * bx - ay * by - az * bz;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate quaternion that contains conjugated version of the specified quaternion.\n   * @param a - The specified quaternion\n   * @param out - The conjugate version of the specified quaternion\n   */\n  static conjugate(a: Quaternion, out: Quaternion): void {\n    out._x = -a._x;\n    out._y = -a._y;\n    out._z = -a._z;\n    out._w = a._w;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the dot product of two quaternions.\n   * @param left - The first quaternion to dot\n   * @param right - The second quaternion to dot\n   * @returns The dot product of two quaternions\n   */\n  static dot(left: Quaternion, right: Quaternion): number {\n    return left._x * right._x + left._y * right._y + left._z * right._z + left._w * right._w;\n  }\n\n  /**\n   * Determines whether the specified quaternions are equals.\n   * @param left - The first quaternion to compare\n   * @param right - The second quaternion to compare\n   * @returns True if the specified quaternions are equals, false otherwise\n   */\n  static equals(left: Quaternion, right: Quaternion): boolean {\n    return (\n      MathUtil.equals(left._x, right._x) &&\n      MathUtil.equals(left._y, right._y) &&\n      MathUtil.equals(left._z, right._z) &&\n      MathUtil.equals(left._w, right._w)\n    );\n  }\n\n  /**\n   * Calculate a quaternion rotates around an arbitrary axis.\n   * @param axis - The axis\n   * @param rad - The rotation angle in radians\n   * @param out - The quaternion after rotate\n   */\n  static rotationAxisAngle(axis: Vector3, rad: number, out: Quaternion): void {\n    const normalAxis = Quaternion._tempVector3;\n    Vector3.normalize(axis, normalAxis);\n    rad *= 0.5;\n    const s = Math.sin(rad);\n    out._x = normalAxis._x * s;\n    out._y = normalAxis._y * s;\n    out._z = normalAxis._z * s;\n    out._w = Math.cos(rad);\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a quaternion rotates around x, y, z axis (pitch/yaw/roll).\n   * @param x - The radian of rotation around X (pitch)\n   * @param y - The radian of rotation around Y (yaw)\n   * @param z - The radian of rotation around Z (roll)\n   * @param out - The calculated quaternion\n   */\n  static rotationEuler(x: number, y: number, z: number, out: Quaternion): void {\n    Quaternion.rotationYawPitchRoll(y, x, z, out);\n  }\n\n  /**\n   * Calculate a quaternion from the specified yaw, pitch and roll angles.\n   * @param yaw - Yaw around the y axis in radians\n   * @param pitch - Pitch around the x axis in radians\n   * @param roll - Roll around the z axis in radians\n   * @param out - The calculated quaternion\n   */\n  static rotationYawPitchRoll(yaw: number, pitch: number, roll: number, out: Quaternion): void {\n    const halfRoll = roll * 0.5;\n    const halfPitch = pitch * 0.5;\n    const halfYaw = yaw * 0.5;\n\n    const sinRoll = Math.sin(halfRoll);\n    const cosRoll = Math.cos(halfRoll);\n    const sinPitch = Math.sin(halfPitch);\n    const cosPitch = Math.cos(halfPitch);\n    const sinYaw = Math.sin(halfYaw);\n    const cosYaw = Math.cos(halfYaw);\n\n    const cosYawPitch = cosYaw * cosPitch;\n    const sinYawPitch = sinYaw * sinPitch;\n\n    out._x = cosYaw * sinPitch * cosRoll + sinYaw * cosPitch * sinRoll;\n    out._y = sinYaw * cosPitch * cosRoll - cosYaw * sinPitch * sinRoll;\n    out._z = cosYawPitch * sinRoll - sinYawPitch * cosRoll;\n    out._w = cosYawPitch * cosRoll + sinYawPitch * sinRoll;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a quaternion from the specified 3x3 matrix.\n   * @param m - The specified 3x3 matrix\n   * @param out - The calculated quaternion\n   */\n  static rotationMatrix3x3(m: Matrix3x3, out: Quaternion): void {\n    const me = m.elements;\n    const m11 = me[0],\n      m12 = me[1],\n      m13 = me[2];\n    const m21 = me[3],\n      m22 = me[4],\n      m23 = me[5];\n    const m31 = me[6],\n      m32 = me[7],\n      m33 = me[8];\n    const scale = m11 + m22 + m33;\n    let sqrt, half;\n\n    if (scale > 0) {\n      sqrt = Math.sqrt(scale + 1.0);\n      out._w = sqrt * 0.5;\n      sqrt = 0.5 / sqrt;\n\n      out._x = (m23 - m32) * sqrt;\n      out._y = (m31 - m13) * sqrt;\n      out._z = (m12 - m21) * sqrt;\n    } else if (m11 >= m22 && m11 >= m33) {\n      sqrt = Math.sqrt(1.0 + m11 - m22 - m33);\n      half = 0.5 / sqrt;\n\n      out._x = 0.5 * sqrt;\n      out._y = (m12 + m21) * half;\n      out._z = (m13 + m31) * half;\n      out._w = (m23 - m32) * half;\n    } else if (m22 > m33) {\n      sqrt = Math.sqrt(1.0 + m22 - m11 - m33);\n      half = 0.5 / sqrt;\n\n      out._x = (m21 + m12) * half;\n      out._y = 0.5 * sqrt;\n      out._z = (m32 + m23) * half;\n      out._w = (m31 - m13) * half;\n    } else {\n      sqrt = Math.sqrt(1.0 + m33 - m11 - m22);\n      half = 0.5 / sqrt;\n\n      out._x = (m13 + m31) * half;\n      out._y = (m23 + m32) * half;\n      out._z = 0.5 * sqrt;\n      out._w = (m12 - m21) * half;\n    }\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate the inverse of the specified quaternion.\n   * @param a - The quaternion whose inverse is to be calculated\n   * @param out - The inverse of the specified quaternion\n   */\n  static invert(a: Quaternion, out: Quaternion): void {\n    const { _x: x, _y: y, _z: z, _w: w } = a;\n    const dot = x * x + y * y + z * z + w * w;\n    if (dot > MathUtil.zeroTolerance) {\n      const invDot = 1.0 / dot;\n      out._x = -x * invDot;\n      out._y = -y * invDot;\n      out._z = -z * invDot;\n      out._w = w * invDot;\n      out._onValueChanged && out._onValueChanged();\n    }\n  }\n\n  /**\n   * Performs a linear blend between two quaternions.\n   * @param start - The first quaternion\n   * @param end - The second quaternion\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @param out - The result of linear blending between two quaternions\n   */\n  static lerp(start: Quaternion, end: Quaternion, t: number, out: Quaternion): void {\n    const inv = 1.0 - t;\n    if (Quaternion.dot(start, end) >= 0) {\n      out._x = start._x * inv + end._x * t;\n      out._y = start._y * inv + end._y * t;\n      out._z = start._z * inv + end._z * t;\n      out._w = start._w * inv + end._w * t;\n    } else {\n      out._x = start._x * inv - end._x * t;\n      out._y = start._y * inv - end._y * t;\n      out._z = start._z * inv - end._z * t;\n      out._w = start._w * inv - end._w * t;\n    }\n\n    out.normalize();\n  }\n\n  /**\n   * Performs a spherical linear blend between two quaternions.\n   * @param start - The first quaternion\n   * @param end - The second quaternion\n   * @param amount - The blend amount where 0 returns start and 1 end\n   * @param out - The result of spherical linear blending between two quaternions\n   */\n  static slerp(start: Quaternion, end: Quaternion, amount: number, out: Quaternion): void {\n    let opposite: number;\n    let inverse: number;\n    const dot = Quaternion.dot(start, end);\n\n    if (Math.abs(dot) > 1.0 - MathUtil.zeroTolerance) {\n      inverse = 1.0 - amount;\n      opposite = amount * Math.sign(dot);\n    } else {\n      const acos = Math.acos(Math.abs(dot));\n      const invSin = 1.0 / Math.sin(acos);\n\n      inverse = Math.sin((1.0 - amount) * acos) * invSin;\n      opposite = Math.sin(amount * acos) * invSin * Math.sign(dot);\n    }\n\n    out.x = inverse * start.x + opposite * end.x;\n    out.y = inverse * start.y + opposite * end.y;\n    out.z = inverse * start.z + opposite * end.z;\n    out.w = inverse * start.w + opposite * end.w;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Scales the specified quaternion magnitude to unit length.\n   * @param a - The specified quaternion\n   * @param out - The normalized quaternion\n   */\n  static normalize(a: Quaternion, out: Quaternion): void {\n    const { _x, _y, _z, _w } = a;\n    let len = Math.sqrt(_x * _x + _y * _y + _z * _z + _w * _w);\n    if (len > MathUtil.zeroTolerance) {\n      len = 1 / len;\n      out._x = _x * len;\n      out._y = _y * len;\n      out._z = _z * len;\n      out._w = _w * len;\n      out._onValueChanged && out._onValueChanged();\n    }\n  }\n\n  /**\n   * Calculate a quaternion rotate around X axis.\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotationX(rad: number, out: Quaternion): void {\n    rad *= 0.5;\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n\n    out._x = s;\n    out._y = 0;\n    out._z = 0;\n    out._w = c;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a quaternion rotate around Y axis.\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotationY(rad: number, out: Quaternion): void {\n    rad *= 0.5;\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n\n    out._x = 0;\n    out._y = s;\n    out._z = 0;\n    out._w = c;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a quaternion rotate around Z axis.\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotationZ(rad: number, out: Quaternion): void {\n    rad *= 0.5;\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n\n    out._x = 0;\n    out._y = 0;\n    out._z = s;\n    out._w = c;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a quaternion that the specified quaternion rotate around X axis.\n   * @param quaternion - The specified quaternion\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotateX(quaternion: Quaternion, rad: number, out: Quaternion): void {\n    const { _x, _y, _z, _w } = quaternion;\n    rad *= 0.5;\n    const bx = Math.sin(rad);\n    const bw = Math.cos(rad);\n\n    out._x = _x * bw + _w * bx;\n    out._y = _y * bw + _z * bx;\n    out._z = _z * bw - _y * bx;\n    out._w = _w * bw - _x * bx;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a quaternion that the specified quaternion rotate around Y axis.\n   * @param quaternion - The specified quaternion\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotateY(quaternion: Quaternion, rad: number, out: Quaternion): void {\n    const { _x, _y, _z, _w } = quaternion;\n    rad *= 0.5;\n    const by = Math.sin(rad);\n    const bw = Math.cos(rad);\n\n    out._x = _x * bw - _z * by;\n    out._y = _y * bw + _w * by;\n    out._z = _z * bw + _x * by;\n    out._w = _w * bw - _y * by;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a quaternion that the specified quaternion rotate around Z axis.\n   * @param quaternion - The specified quaternion\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotateZ(quaternion: Quaternion, rad: number, out: Quaternion): void {\n    const { _x, _y, _z, _w } = quaternion;\n    rad *= 0.5;\n    const bz = Math.sin(rad);\n    const bw = Math.cos(rad);\n\n    out._x = _x * bw + _y * bz;\n    out._y = _y * bw - _x * bz;\n    out._z = _z * bw + _w * bz;\n    out._w = _w * bw - _z * bz;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Scale a quaternion by a given number.\n   * @param a - The quaternion\n   * @param s - The given number\n   * @param out - The scaled quaternion\n   */\n  static scale(a: Quaternion, s: number, out: Quaternion): void {\n    out._x = a._x * s;\n    out._y = a._y * s;\n    out._z = a._z * s;\n    out._w = a._w * s;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /** @internal */\n  _x: number;\n  /** @internal */\n  _y: number;\n  /** @internal */\n  _z: number;\n  /** @internal */\n  _w: number;\n  /** @internal */\n  _onValueChanged: () => void = null;\n\n  /**\n   * The x component of the quaternion.\n   */\n  public get x(): number {\n    return this._x;\n  }\n\n  public set x(value: number) {\n    this._x = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The y component of the quaternion.\n   */\n  public get y(): number {\n    return this._y;\n  }\n\n  public set y(value: number) {\n    this._y = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The z component of the quaternion.\n   */\n  public get z(): number {\n    return this._z;\n  }\n\n  public set z(value: number) {\n    this._z = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * Indicting whether this instance is normalized.\n   */\n  public get normalized(): boolean {\n    return (\n      Math.abs(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w - 1) <\n      MathUtil.zeroTolerance\n    );\n  }\n\n  /**\n   * The w component of the quaternion.\n   */\n  public get w() {\n    return this._w;\n  }\n\n  public set w(value: number) {\n    this._w = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * Constructor of Quaternion.\n   * @param x - The x component of the quaternion, default 0\n   * @param y - The y component of the quaternion, default 0\n   * @param z - The z component of the quaternion, default 0\n   * @param w - The w component of the quaternion, default 1\n   */\n  constructor(x: number = 0, y: number = 0, z: number = 0, w: number = 1) {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._w = w;\n  }\n\n  /**\n   * Set the value of this quaternion, and return this quaternion.\n   * @param x - The x component of the quaternion\n   * @param y - The y component of the quaternion\n   * @param z - The z component of the quaternion\n   * @param w - The w component of the quaternion\n   * @returns This quaternion\n   */\n  set(x: number, y: number, z: number, w: number): Quaternion {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._w = w;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Transforms this quaternion into its conjugated version.\n   * @returns This quaternion\n   */\n  conjugate(): Quaternion {\n    this._x *= -1;\n    this._y *= -1;\n    this._z *= -1;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Get the rotation axis and rotation angle of the quaternion (unit: radians).\n   * @param out - The axis as an output parameter\n   * @returns The rotation angle (unit: radians)\n   */\n  getAxisAngle(out: Vector3): number {\n    const { _x, _y, _z } = this;\n    const length = _x * _x + _y * _y + _z * _z;\n\n    if (length < MathUtil.zeroTolerance) {\n      out._x = 1;\n      out._y = 0;\n      out._z = 0;\n\n      return 0;\n    } else {\n      const inv = 1.0 / length;\n      out._x = this._x * inv;\n      out._y = this._y * inv;\n      out._z = this._z * inv;\n\n      return Math.acos(this._w) * 2.0;\n    }\n  }\n\n  /**\n   * Identity this quaternion.\n   * @returns This quaternion after identity\n   */\n  identity(): Quaternion {\n    this._x = 0;\n    this._y = 0;\n    this._z = 0;\n    this._w = 1;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Calculate the length of this quaternion.\n   * @returns The length of this quaternion\n   */\n  length(): number {\n    const { _x, _y, _z, _w } = this;\n    return Math.sqrt(_x * _x + _y * _y + _z * _z + _w * _w);\n  }\n\n  /**\n   * Calculates the squared length of this quaternion.\n   * @returns The squared length of this quaternion\n   */\n  lengthSquared(): number {\n    const { _x, _y, _z, _w } = this;\n    return _x * _x + _y * _y + _z * _z + _w * _w;\n  }\n\n  /**\n   * Converts this quaternion into a unit quaternion.\n   * @returns This quaternion\n   */\n  normalize(): Quaternion {\n    Quaternion.normalize(this, this);\n    return this;\n  }\n\n  /**\n   * Get the euler of this quaternion.\n   * @param out - The euler (in radians) as an output parameter\n   * @returns Euler x->pitch y->yaw z->roll\n   */\n  toEuler(out: Vector3): Vector3 {\n    this._toYawPitchRoll(out);\n\n    const t = out._x;\n    out._x = out._y;\n    out._y = t;\n    out._onValueChanged && out._onValueChanged();\n    return out;\n  }\n\n  /**\n   * Get the euler of this quaternion.\n   * @param out - The euler (in radians) as an output parameter\n   * @returns Euler x->yaw y->pitch z->roll\n   */\n  toYawPitchRoll(out: Vector3): Vector3 {\n    this._toYawPitchRoll(out);\n    out._onValueChanged && out._onValueChanged();\n    return out;\n  }\n\n  /**\n   * Calculate this quaternion rotate around X axis.\n   * @param rad - The rotation angle in radians\n   * @returns This quaternion\n   */\n  rotateX(rad: number): Quaternion {\n    Quaternion.rotateX(this, rad, this);\n    return this;\n  }\n\n  /**\n   * Calculate this quaternion rotate around Y axis.\n   * @param rad - The rotation angle in radians\n   * @returns This quaternion\n   */\n  rotateY(rad: number): Quaternion {\n    Quaternion.rotateY(this, rad, this);\n    return this;\n  }\n\n  /**\n   * Calculate this quaternion rotate around Z axis.\n   * @param rad - The rotation angle in radians\n   * @returns This quaternion\n   */\n  rotateZ(rad: number): Quaternion {\n    Quaternion.rotateZ(this, rad, this);\n    return this;\n  }\n\n  /**\n   * Calculate this quaternion rotates around an arbitrary axis.\n   * @param axis - The axis\n   * @param rad - The rotation angle in radians\n   * @returns This quaternion\n   */\n  rotationAxisAngle(axis: Vector3, rad: number): Quaternion {\n    Quaternion.rotationAxisAngle(axis, rad, this);\n    return this;\n  }\n\n  /**\n   * Determines the product of this quaternion and the specified quaternion.\n   * @param quat - The specified quaternion\n   * @returns The product of the two quaternions\n   */\n  multiply(quat: Quaternion): Quaternion {\n    Quaternion.multiply(this, quat, this);\n    return this;\n  }\n\n  /**\n   * Invert this quaternion.\n   * @returns This quaternion after invert\n   */\n  invert(): Quaternion {\n    Quaternion.invert(this, this);\n    return this;\n  }\n\n  /**\n   * Determines the dot product of this quaternion and the specified quaternion.\n   * @param quat - The specified quaternion\n   * @returns The dot product of two quaternions\n   */\n  dot(quat: Quaternion): number {\n    return Quaternion.dot(this, quat);\n  }\n\n  /**\n   * Performs a linear blend between this quaternion and the specified quaternion.\n   * @param quat - The specified quaternion\n   * @param t - The blend amount where 0 returns this and 1 quat\n   * @returns - The result of linear blending between two quaternions\n   */\n  lerp(quat: Quaternion, t: number): Quaternion {\n    Quaternion.lerp(this, quat, t, this);\n    return this;\n  }\n\n  /**\n   * Calculate this quaternion rotation around an arbitrary axis.\n   * @param axis - The axis\n   * @param rad - The rotation angle in radians\n   * @returns This quaternion\n   */\n  rotateAxisAngle(axis: Vector3, rad: number): Quaternion {\n    Quaternion._tempQuat1.rotationAxisAngle(axis, rad);\n    this.multiply(Quaternion._tempQuat1);\n    return this;\n  }\n\n  /**\n   * Creates a clone of this quaternion.\n   * @returns A clone of this quaternion\n   */\n  clone(): Quaternion {\n    return new Quaternion(this._x, this._y, this._z, this._w);\n  }\n\n  /**\n   * Copy this quaternion from the specified quaternion.\n   * @param source - The specified quaternion\n   * @returns This quaternion\n   */\n  copyFrom(source: QuaternionLike): Quaternion {\n    this._x = source.x;\n    this._y = source.y;\n    this._z = source.z;\n    this._w = source.w;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Copy this quaternion to the specified quaternion.\n   * @param target - The specified quaternion\n   * @returns This specified quaternion\n   */\n  copyTo(target: QuaternionLike): QuaternionLike {\n    target.x = this._x;\n    target.y = this._y;\n    target.z = this._z;\n    target.w = this._w;\n    return target;\n  }\n\n  /**\n   * Copy the value of this quaternion from an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This quaternion\n   */\n  copyFromArray(array: ArrayLike<number>, offset: number = 0): Quaternion {\n    this._x = array[offset];\n    this._y = array[offset + 1];\n    this._z = array[offset + 2];\n    this._w = array[offset + 3];\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Copy the value of this quaternion to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  copyToArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    out[outOffset] = this._x;\n    out[outOffset + 1] = this._y;\n    out[outOffset + 2] = this._z;\n    out[outOffset + 3] = this._w;\n  }\n\n  /**\n   * Serialize this quaternion to a JSON representation.\n   * @returns A JSON Object representation of this quaternion\n   */\n  toJSON(): QuaternionLike {\n    return {\n      x: this._x,\n      y: this._y,\n      z: this._z,\n      w: this._w\n    };\n  }\n\n  private _toYawPitchRoll(out: Vector3): void {\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToEuler/\n    const { _x: x, _y: y, _z: z, _w: w } = this;\n    const xx = x * x;\n    const yy = y * y;\n    const zz = z * z;\n    const ww = w * w;\n    const unit = xx + yy + zz + ww;\n    const test = 2 * (x * w - y * z);\n    if (test > (1 - MathUtil.zeroTolerance) * unit) {\n      out._x = Math.atan2(2.0 * (w * y - x * z), xx + ww - yy - zz);\n      out._y = Math.PI / 2;\n      out._z = 0;\n    } else if (test < -(1 - MathUtil.zeroTolerance) * unit) {\n      out._x = Math.atan2(2.0 * (w * y - x * z), xx + ww - yy - zz);\n      out._y = -Math.PI / 2;\n      out._z = 0;\n    } else {\n      out._x = Math.atan2(2.0 * (z * x + y * w), zz + ww - yy - xx);\n      out._y = Math.asin(test / unit);\n      out._z = Math.atan2(2.0 * (x * y + z * w), yy + ww - zz - xx);\n    }\n  }\n}\n\ninterface QuaternionLike {\n  /** {@inheritDoc Quaternion.x} */\n  x: number;\n  /** {@inheritDoc Quaternion.y} */\n  y: number;\n  /** {@inheritDoc Quaternion.z} */\n  z: number;\n  /** {@inheritDoc Quaternion.w} */\n  w: number;\n}\n","import { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Matrix3x3 } from \"./Matrix3x3\";\nimport { Quaternion } from \"./Quaternion\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Represents a 4x4 mathematical matrix.\n */\nexport class Matrix implements IClone<Matrix>, ICopy<Matrix, Matrix> {\n  private static readonly _tempVec30: Vector3 = new Vector3();\n  private static readonly _tempVec31: Vector3 = new Vector3();\n  private static readonly _tempVec32: Vector3 = new Vector3();\n  private static readonly _tempMat30: Matrix3x3 = new Matrix3x3();\n\n  /** @internal Identity matrix. */\n  static readonly _identity: Matrix = new Matrix(\n    1.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    1.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    1.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    1.0\n  );\n\n  /**\n   * Determines the product of two matrices.\n   * @param left - The first matrix to multiply\n   * @param right - The second matrix to multiply\n   * @param out - The product of the two matrices\n   */\n  static multiply(left: Matrix, right: Matrix, out: Matrix): void {\n    const le = left.elements;\n    const re = right.elements;\n    const oe = out.elements;\n\n    // prettier-ignore\n    const l11 = le[0], l12 = le[1], l13 = le[2], l14 = le[3],\n    l21 = le[4], l22 = le[5], l23 = le[6], l24 = le[7],\n    l31 = le[8], l32 = le[9], l33 = le[10], l34 = le[11],\n    l41 = le[12], l42 = le[13], l43 = le[14], l44 = le[15];\n\n    // prettier-ignore\n    const r11 = re[0], r12 = re[1], r13 = re[2], r14 = re[3],\n    r21 = re[4], r22 = re[5], r23 = re[6], r24 = re[7],\n    r31 = re[8], r32 = re[9], r33 = re[10], r34 = re[11],\n    r41 = re[12], r42 = re[13], r43 = re[14], r44 = re[15];\n\n    oe[0] = l11 * r11 + l21 * r12 + l31 * r13 + l41 * r14;\n    oe[1] = l12 * r11 + l22 * r12 + l32 * r13 + l42 * r14;\n    oe[2] = l13 * r11 + l23 * r12 + l33 * r13 + l43 * r14;\n    oe[3] = l14 * r11 + l24 * r12 + l34 * r13 + l44 * r14;\n\n    oe[4] = l11 * r21 + l21 * r22 + l31 * r23 + l41 * r24;\n    oe[5] = l12 * r21 + l22 * r22 + l32 * r23 + l42 * r24;\n    oe[6] = l13 * r21 + l23 * r22 + l33 * r23 + l43 * r24;\n    oe[7] = l14 * r21 + l24 * r22 + l34 * r23 + l44 * r24;\n\n    oe[8] = l11 * r31 + l21 * r32 + l31 * r33 + l41 * r34;\n    oe[9] = l12 * r31 + l22 * r32 + l32 * r33 + l42 * r34;\n    oe[10] = l13 * r31 + l23 * r32 + l33 * r33 + l43 * r34;\n    oe[11] = l14 * r31 + l24 * r32 + l34 * r33 + l44 * r34;\n\n    oe[12] = l11 * r41 + l21 * r42 + l31 * r43 + l41 * r44;\n    oe[13] = l12 * r41 + l22 * r42 + l32 * r43 + l42 * r44;\n    oe[14] = l13 * r41 + l23 * r42 + l33 * r43 + l43 * r44;\n    oe[15] = l14 * r41 + l24 * r42 + l34 * r43 + l44 * r44;\n  }\n\n  /**\n   * Determines whether the specified matrices are equals.\n   * @param left - The first matrix to compare\n   * @param right - The second matrix to compare\n   * @returns True if the specified matrices are equals, false otherwise\n   */\n  static equals(left: Matrix, right: Matrix): boolean {\n    const le = left.elements;\n    const re = right.elements;\n\n    return (\n      MathUtil.equals(le[0], re[0]) &&\n      MathUtil.equals(le[1], re[1]) &&\n      MathUtil.equals(le[2], re[2]) &&\n      MathUtil.equals(le[3], re[3]) &&\n      MathUtil.equals(le[4], re[4]) &&\n      MathUtil.equals(le[5], re[5]) &&\n      MathUtil.equals(le[6], re[6]) &&\n      MathUtil.equals(le[7], re[7]) &&\n      MathUtil.equals(le[8], re[8]) &&\n      MathUtil.equals(le[9], re[9]) &&\n      MathUtil.equals(le[10], re[10]) &&\n      MathUtil.equals(le[11], re[11]) &&\n      MathUtil.equals(le[12], re[12]) &&\n      MathUtil.equals(le[13], re[13]) &&\n      MathUtil.equals(le[14], re[14]) &&\n      MathUtil.equals(le[15], re[15])\n    );\n  }\n\n  /**\n   * Performs a linear interpolation between two matrices.\n   * @param start - The first matrix\n   * @param end - The second matrix\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @param out - The result of linear blending between two matrices\n   */\n  static lerp(start: Matrix, end: Matrix, t: number, out: Matrix): void {\n    const se = start.elements;\n    const ee = end.elements;\n    const oe = out.elements;\n    const inv = 1.0 - t;\n\n    oe[0] = se[0] * inv + ee[0] * t;\n    oe[1] = se[1] * inv + ee[1] * t;\n    oe[2] = se[2] * inv + ee[2] * t;\n    oe[3] = se[3] * inv + ee[3] * t;\n\n    oe[4] = se[4] * inv + ee[4] * t;\n    oe[5] = se[5] * inv + ee[5] * t;\n    oe[6] = se[6] * inv + ee[6] * t;\n    oe[7] = se[7] * inv + ee[7] * t;\n\n    oe[8] = se[8] * inv + ee[8] * t;\n    oe[9] = se[9] * inv + ee[9] * t;\n    oe[10] = se[10] * inv + ee[10] * t;\n    oe[11] = se[11] * inv + ee[11] * t;\n\n    oe[12] = se[12] * inv + ee[12] * t;\n    oe[13] = se[13] * inv + ee[13] * t;\n    oe[14] = se[14] * inv + ee[14] * t;\n    oe[15] = se[15] * inv + ee[15] * t;\n  }\n\n  /**\n   * Determines the sum of two matrices.\n   * @param left - The first matrix to add\n   * @param right - The second matrix to add\n   * @param out - The sum of two matrices\n   */\n  static add(left: Matrix, right: Matrix, out: Matrix): void {\n    const le = left.elements;\n    const re = right.elements;\n    const oe = out.elements;\n    oe[0] = le[0] + re[0];\n    oe[1] = le[1] + re[1];\n    oe[2] = le[2] + re[2];\n    oe[3] = le[3] + re[3];\n    oe[4] = le[4] + re[4];\n    oe[5] = le[5] + re[5];\n    oe[6] = le[6] + re[6];\n    oe[7] = le[7] + re[7];\n    oe[8] = le[8] + re[8];\n    oe[9] = le[9] + re[9];\n    oe[10] = le[10] + re[10];\n    oe[11] = le[11] + re[11];\n    oe[12] = le[12] + re[12];\n    oe[13] = le[13] + re[13];\n    oe[14] = le[14] + re[14];\n    oe[15] = le[15] + re[15];\n  }\n\n  /**\n   * Multiplies a matrix by a scalar.\n   * @param source - The matrix to multiply\n   * @param scalar - The scalar to multiply\n   * @param out - The result of multiplying a matrix by a scalar\n   */\n  static multiplyScalar(source: Matrix, scalar: number, out: Matrix): void {\n    const se = source.elements;\n    const oe = out.elements;\n\n    oe[0] = se[0] * scalar;\n    oe[1] = se[1] * scalar;\n    oe[2] = se[2] * scalar;\n    oe[3] = se[3] * scalar;\n    oe[4] = se[4] * scalar;\n    oe[5] = se[5] * scalar;\n    oe[6] = se[6] * scalar;\n    oe[7] = se[7] * scalar;\n    oe[8] = se[8] * scalar;\n    oe[9] = se[9] * scalar;\n    oe[10] = se[10] * scalar;\n    oe[11] = se[11] * scalar;\n    oe[12] = se[12] * scalar;\n    oe[13] = se[13] * scalar;\n    oe[14] = se[14] * scalar;\n    oe[15] = se[15] * scalar;\n  }\n\n  /**\n   * Calculate a rotation matrix from a quaternion.\n   * @param quaternion - The quaternion used to calculate the matrix\n   * @param out - The calculated rotation matrix\n   */\n  static rotationQuaternion(quaternion: Quaternion, out: Matrix): void {\n    const oe = out.elements;\n    const { _x: x, _y: y, _z: z, _w: w } = quaternion;\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let yx = y * x2;\n    let yy = y * y2;\n    let zx = z * x2;\n    let zy = z * y2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n\n    oe[0] = 1 - yy - zz;\n    oe[1] = yx + wz;\n    oe[2] = zx - wy;\n    oe[3] = 0;\n\n    oe[4] = yx - wz;\n    oe[5] = 1 - xx - zz;\n    oe[6] = zy + wx;\n    oe[7] = 0;\n\n    oe[8] = zx + wy;\n    oe[9] = zy - wx;\n    oe[10] = 1 - xx - yy;\n    oe[11] = 0;\n\n    oe[12] = 0;\n    oe[13] = 0;\n    oe[14] = 0;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate a matrix rotates around an arbitrary axis.\n   * @param axis - The axis\n   * @param r - The rotation angle in radians\n   * @param out - The matrix after rotate\n   */\n  static rotationAxisAngle(axis: Vector3, r: number, out: Matrix): void {\n    const oe = out.elements;\n    let { _x: x, _y: y, _z: z } = axis;\n    let len = Math.sqrt(x * x + y * y + z * z);\n    let s, c, t;\n\n    if (Math.abs(len) < MathUtil.zeroTolerance) {\n      return;\n    }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(r);\n    c = Math.cos(r);\n    t = 1 - c;\n\n    // Perform rotation-specific matrix multiplication\n    oe[0] = x * x * t + c;\n    oe[1] = y * x * t + z * s;\n    oe[2] = z * x * t - y * s;\n    oe[3] = 0;\n\n    oe[4] = x * y * t - z * s;\n    oe[5] = y * y * t + c;\n    oe[6] = z * y * t + x * s;\n    oe[7] = 0;\n\n    oe[8] = x * z * t + y * s;\n    oe[9] = y * z * t - x * s;\n    oe[10] = z * z * t + c;\n    oe[11] = 0;\n\n    oe[12] = 0;\n    oe[13] = 0;\n    oe[14] = 0;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate a matrix from a quaternion and a translation.\n   * @param quaternion - The quaternion used to calculate the matrix\n   * @param translation - The translation used to calculate the matrix\n   * @param out - The calculated matrix\n   */\n  static rotationTranslation(quaternion: Quaternion, translation: Vector3, out: Matrix): void {\n    Matrix.rotationQuaternion(quaternion, out);\n\n    const oe = out.elements;\n    oe[12] = translation._x;\n    oe[13] = translation._y;\n    oe[14] = translation._z;\n  }\n\n  /**\n   * Calculate an affine matrix.\n   * @param scale - The scale used to calculate matrix\n   * @param rotation - The rotation used to calculate matrix\n   * @param translation - The translation used to calculate matrix\n   * @param out - The calculated matrix\n   */\n  static affineTransformation(scale: Vector3, rotation: Quaternion, translation: Vector3, out: Matrix): void {\n    const oe = out.elements;\n    const { _x: x, _y: y, _z: z, _w: w } = rotation;\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let xy = x * y2;\n    let xz = x * z2;\n    let yy = y * y2;\n    let yz = y * z2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n    let sx = scale._x;\n    let sy = scale._y;\n    let sz = scale._z;\n\n    oe[0] = (1 - (yy + zz)) * sx;\n    oe[1] = (xy + wz) * sx;\n    oe[2] = (xz - wy) * sx;\n    oe[3] = 0;\n\n    oe[4] = (xy - wz) * sy;\n    oe[5] = (1 - (xx + zz)) * sy;\n    oe[6] = (yz + wx) * sy;\n    oe[7] = 0;\n\n    oe[8] = (xz + wy) * sz;\n    oe[9] = (yz - wx) * sz;\n    oe[10] = (1 - (xx + yy)) * sz;\n    oe[11] = 0;\n\n    oe[12] = translation._x;\n    oe[13] = translation._y;\n    oe[14] = translation._z;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate a matrix from scale vector.\n   * @param s - The scale vector\n   * @param out - The calculated matrix\n   */\n  static scaling(s: Vector3, out: Matrix): void {\n    const oe = out.elements;\n    oe[0] = s._x;\n    oe[1] = 0;\n    oe[2] = 0;\n    oe[3] = 0;\n\n    oe[4] = 0;\n    oe[5] = s._y;\n    oe[6] = 0;\n    oe[7] = 0;\n\n    oe[8] = 0;\n    oe[9] = 0;\n    oe[10] = s._z;\n    oe[11] = 0;\n\n    oe[12] = 0;\n    oe[13] = 0;\n    oe[14] = 0;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate a matrix from translation vector.\n   * @param translation - The translation vector\n   * @param out - The calculated matrix\n   */\n  static translation(translation: Vector3, out: Matrix): void {\n    const oe = out.elements;\n    oe[0] = 1;\n    oe[1] = 0;\n    oe[2] = 0;\n    oe[3] = 0;\n\n    oe[4] = 0;\n    oe[5] = 1;\n    oe[6] = 0;\n    oe[7] = 0;\n\n    oe[8] = 0;\n    oe[9] = 0;\n    oe[10] = 1;\n    oe[11] = 0;\n\n    oe[12] = translation._x;\n    oe[13] = translation._y;\n    oe[14] = translation._z;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate the inverse of the specified matrix.\n   * @param a - The matrix whose inverse is to be calculated\n   * @param out - The inverse of the specified matrix\n   */\n  static invert(a: Matrix, out: Matrix): void {\n    const ae = a.elements;\n    const oe = out.elements;\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2],\n      a14 = ae[3];\n    const a21 = ae[4],\n      a22 = ae[5],\n      a23 = ae[6],\n      a24 = ae[7];\n    const a31 = ae[8],\n      a32 = ae[9],\n      a33 = ae[10],\n      a34 = ae[11];\n    const a41 = ae[12],\n      a42 = ae[13],\n      a43 = ae[14],\n      a44 = ae[15];\n\n    const b00 = a11 * a22 - a12 * a21;\n    const b01 = a11 * a23 - a13 * a21;\n    const b02 = a11 * a24 - a14 * a21;\n    const b03 = a12 * a23 - a13 * a22;\n    const b04 = a12 * a24 - a14 * a22;\n    const b05 = a13 * a24 - a14 * a23;\n    const b06 = a31 * a42 - a32 * a41;\n    const b07 = a31 * a43 - a33 * a41;\n    const b08 = a31 * a44 - a34 * a41;\n    const b09 = a32 * a43 - a33 * a42;\n    const b10 = a32 * a44 - a34 * a42;\n    const b11 = a33 * a44 - a34 * a43;\n\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n    if (!det) {\n      return null;\n    }\n    det = 1.0 / det;\n\n    oe[0] = (a22 * b11 - a23 * b10 + a24 * b09) * det;\n    oe[1] = (a13 * b10 - a12 * b11 - a14 * b09) * det;\n    oe[2] = (a42 * b05 - a43 * b04 + a44 * b03) * det;\n    oe[3] = (a33 * b04 - a32 * b05 - a34 * b03) * det;\n\n    oe[4] = (a23 * b08 - a21 * b11 - a24 * b07) * det;\n    oe[5] = (a11 * b11 - a13 * b08 + a14 * b07) * det;\n    oe[6] = (a43 * b02 - a41 * b05 - a44 * b01) * det;\n    oe[7] = (a31 * b05 - a33 * b02 + a34 * b01) * det;\n\n    oe[8] = (a21 * b10 - a22 * b08 + a24 * b06) * det;\n    oe[9] = (a12 * b08 - a11 * b10 - a14 * b06) * det;\n    oe[10] = (a41 * b04 - a42 * b02 + a44 * b00) * det;\n    oe[11] = (a32 * b02 - a31 * b04 - a34 * b00) * det;\n\n    oe[12] = (a22 * b07 - a21 * b09 - a23 * b06) * det;\n    oe[13] = (a11 * b09 - a12 * b07 + a13 * b06) * det;\n    oe[14] = (a42 * b01 - a41 * b03 - a43 * b00) * det;\n    oe[15] = (a31 * b03 - a32 * b01 + a33 * b00) * det;\n  }\n\n  /**\n   * Calculate a right-handed look-at matrix.\n   * @param eye - The position of the viewer's eye\n   * @param target - The camera look-at target\n   * @param up - The camera's up vector\n   * @param out - The calculated look-at matrix\n   */\n  static lookAt(eye: Vector3, target: Vector3, up: Vector3, out: Matrix): void {\n    const oe = out.elements;\n    const xAxis: Vector3 = Matrix._tempVec30;\n    const yAxis: Vector3 = Matrix._tempVec31;\n    const zAxis: Vector3 = Matrix._tempVec32;\n\n    Vector3.subtract(eye, target, zAxis);\n    zAxis.normalize();\n    Vector3.cross(up, zAxis, xAxis);\n    xAxis.normalize();\n    Vector3.cross(zAxis, xAxis, yAxis);\n\n    oe[0] = xAxis._x;\n    oe[1] = yAxis._x;\n    oe[2] = zAxis._x;\n    oe[3] = 0;\n\n    oe[4] = xAxis._y;\n    oe[5] = yAxis._y;\n    oe[6] = zAxis._y;\n    oe[7] = 0;\n\n    oe[8] = xAxis._z;\n    oe[9] = yAxis._z;\n    oe[10] = zAxis._z;\n    oe[11] = 0;\n\n    oe[12] = -Vector3.dot(xAxis, eye);\n    oe[13] = -Vector3.dot(yAxis, eye);\n    oe[14] = -Vector3.dot(zAxis, eye);\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate an orthographic projection matrix.\n   * @param left - The left edge of the viewing\n   * @param right - The right edge of the viewing\n   * @param bottom - The bottom edge of the viewing\n   * @param top - The top edge of the viewing\n   * @param near - The depth of the near plane\n   * @param far - The depth of the far plane\n   * @param out - The calculated orthographic projection matrix\n   */\n  static ortho(left: number, right: number, bottom: number, top: number, near: number, far: number, out: Matrix): void {\n    const oe = out.elements;\n    const lr = 1 / (left - right);\n    const bt = 1 / (bottom - top);\n    const nf = 1 / (near - far);\n\n    oe[0] = -2 * lr;\n    oe[1] = 0;\n    oe[2] = 0;\n    oe[3] = 0;\n\n    oe[4] = 0;\n    oe[5] = -2 * bt;\n    oe[6] = 0;\n    oe[7] = 0;\n\n    oe[8] = 0;\n    oe[9] = 0;\n    oe[10] = 2 * nf;\n    oe[11] = 0;\n\n    oe[12] = (left + right) * lr;\n    oe[13] = (top + bottom) * bt;\n    oe[14] = (far + near) * nf;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate a perspective projection matrix.\n   * @param fovY - Field of view in the y direction, in radians\n   * @param aspect - Aspect ratio, defined as view space width divided by height\n   * @param near - The depth of the near plane\n   * @param far - The depth of the far plane\n   * @param out - The calculated perspective projection matrix\n   */\n  static perspective(fovY: number, aspect: number, near: number, far: number, out: Matrix): void {\n    const oe = out.elements;\n    const f = 1.0 / Math.tan(fovY / 2);\n    const nf = 1 / (near - far);\n\n    oe[0] = f / aspect;\n    oe[1] = 0;\n    oe[2] = 0;\n    oe[3] = 0;\n\n    oe[4] = 0;\n    oe[5] = f;\n    oe[6] = 0;\n    oe[7] = 0;\n\n    oe[8] = 0;\n    oe[9] = 0;\n    oe[10] = (far + near) * nf;\n    oe[11] = -1;\n\n    oe[12] = 0;\n    oe[13] = 0;\n    oe[14] = 2 * far * near * nf;\n    oe[15] = 0;\n  }\n\n  /**\n   * The specified matrix rotates around an arbitrary axis.\n   * @param m - The specified matrix\n   * @param axis - The axis\n   * @param r - The rotation angle in radians\n   * @param out - The rotated matrix\n   */\n  static rotateAxisAngle(m: Matrix, axis: Vector3, r: number, out: Matrix): void {\n    let { _x: x, _y: y, _z: z } = axis;\n    let len = Math.sqrt(x * x + y * y + z * z);\n\n    if (Math.abs(len) < MathUtil.zeroTolerance) {\n      return;\n    }\n\n    const me = m.elements;\n    const oe = out.elements;\n    let s, c, t;\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(r);\n    c = Math.cos(r);\n    t = 1 - c;\n\n    let a11 = me[0],\n      a12 = me[1],\n      a13 = me[2],\n      a14 = me[3];\n    let a21 = me[4],\n      a22 = me[5],\n      a23 = me[6],\n      a24 = me[7];\n    let a31 = me[8],\n      a32 = me[9],\n      a33 = me[10],\n      a34 = me[11];\n\n    // Construct the elements of the rotation matrix\n    let b11 = x * x * t + c;\n    let b12 = y * x * t + z * s;\n    let b13 = z * x * t - y * s;\n    let b21 = x * y * t - z * s;\n    let b22 = y * y * t + c;\n    let b23 = z * y * t + x * s;\n    let b31 = x * z * t + y * s;\n    let b32 = y * z * t - x * s;\n    let b33 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    oe[0] = a11 * b11 + a21 * b12 + a31 * b13;\n    oe[1] = a12 * b11 + a22 * b12 + a32 * b13;\n    oe[2] = a13 * b11 + a23 * b12 + a33 * b13;\n    oe[3] = a14 * b11 + a24 * b12 + a34 * b13;\n\n    oe[4] = a11 * b21 + a21 * b22 + a31 * b23;\n    oe[5] = a12 * b21 + a22 * b22 + a32 * b23;\n    oe[6] = a13 * b21 + a23 * b22 + a33 * b23;\n    oe[7] = a14 * b21 + a24 * b22 + a34 * b23;\n\n    oe[8] = a11 * b31 + a21 * b32 + a31 * b33;\n    oe[9] = a12 * b31 + a22 * b32 + a32 * b33;\n    oe[10] = a13 * b31 + a23 * b32 + a33 * b33;\n    oe[11] = a14 * b31 + a24 * b32 + a34 * b33;\n\n    if (m !== out) {\n      // If the source and destination differ, copy the unchanged last row\n      oe[12] = me[12];\n      oe[13] = me[13];\n      oe[14] = me[14];\n      oe[15] = me[15];\n    }\n  }\n\n  /**\n   * Scale a matrix by a given vector.\n   * @param m - The matrix\n   * @param s - The given vector\n   * @param out - The scaled matrix\n   */\n  static scale(m: Matrix, s: Vector3, out: Matrix): void {\n    const me = m.elements;\n    const oe = out.elements;\n    const { _x: x, _y: y, _z: z } = s;\n\n    oe[0] = me[0] * x;\n    oe[1] = me[1] * x;\n    oe[2] = me[2] * x;\n    oe[3] = me[3] * x;\n\n    oe[4] = me[4] * y;\n    oe[5] = me[5] * y;\n    oe[6] = me[6] * y;\n    oe[7] = me[7] * y;\n\n    oe[8] = me[8] * z;\n    oe[9] = me[9] * z;\n    oe[10] = me[10] * z;\n    oe[11] = me[11] * z;\n\n    oe[12] = me[12];\n    oe[13] = me[13];\n    oe[14] = me[14];\n    oe[15] = me[15];\n  }\n\n  /**\n   * Translate a matrix by a given vector.\n   * @param m - The matrix\n   * @param v - The given vector\n   * @param out - The translated matrix\n   */\n  static translate(m: Matrix, v: Vector3, out: Matrix): void {\n    const me = m.elements;\n    const oe = out.elements;\n    const { _x: x, _y: y, _z: z } = v;\n\n    if (m === out) {\n      oe[12] = me[0] * x + me[4] * y + me[8] * z + me[12];\n      oe[13] = me[1] * x + me[5] * y + me[9] * z + me[13];\n      oe[14] = me[2] * x + me[6] * y + me[10] * z + me[14];\n      oe[15] = me[3] * x + me[7] * y + me[11] * z + me[15];\n    } else {\n      const a11 = me[0],\n        a12 = me[1],\n        a13 = me[2],\n        a14 = me[3];\n      const a21 = me[4],\n        a22 = me[5],\n        a23 = me[6],\n        a24 = me[7];\n      const a31 = me[8],\n        a32 = me[9],\n        a33 = me[10],\n        a34 = me[11];\n\n      (oe[0] = a11), (oe[1] = a12), (oe[2] = a13), (oe[3] = a14);\n      (oe[4] = a21), (oe[5] = a22), (oe[6] = a23), (oe[7] = a24);\n      (oe[8] = a31), (oe[9] = a32), (oe[10] = a33), (oe[11] = a34);\n\n      oe[12] = a11 * x + a21 * y + a31 * z + me[12];\n      oe[13] = a12 * x + a22 * y + a32 * z + me[13];\n      oe[14] = a13 * x + a23 * y + a33 * z + me[14];\n      oe[15] = a14 * x + a24 * y + a34 * z + me[15];\n    }\n  }\n\n  /**\n   * Calculate the transpose of the specified matrix.\n   * @param a - The specified matrix\n   * @param out - The transpose of the specified matrix\n   */\n  static transpose(a: Matrix, out: Matrix): void {\n    const ae = a.elements;\n    const oe = out.elements;\n\n    if (out === a) {\n      const a12 = ae[1];\n      const a13 = ae[2];\n      const a14 = ae[3];\n      const a23 = ae[6];\n      const a24 = ae[7];\n      const a34 = ae[11];\n\n      oe[1] = ae[4];\n      oe[2] = ae[8];\n      oe[3] = ae[12];\n\n      oe[4] = a12;\n      oe[6] = ae[9];\n      oe[7] = ae[13];\n\n      oe[8] = a13;\n      oe[9] = a23;\n      oe[11] = ae[14];\n\n      oe[12] = a14;\n      oe[13] = a24;\n      oe[14] = a34;\n    } else {\n      oe[0] = ae[0];\n      oe[1] = ae[4];\n      oe[2] = ae[8];\n      oe[3] = ae[12];\n\n      oe[4] = ae[1];\n      oe[5] = ae[5];\n      oe[6] = ae[9];\n      oe[7] = ae[13];\n\n      oe[8] = ae[2];\n      oe[9] = ae[6];\n      oe[10] = ae[10];\n      oe[11] = ae[14];\n\n      oe[12] = ae[3];\n      oe[13] = ae[7];\n      oe[14] = ae[11];\n      oe[15] = ae[15];\n    }\n  }\n\n  /**\n   * An array containing the elements of the matrix (column matrix).\n   * @remarks\n   * elements[0] first column and first row value m11\n   * elements[1] first column and second row value m12\n   * elements[2] first column and third row value m13\n   * elements[3] first column and fourth row value m14\n   * elements[4] second column and first row value m21\n   * and so on\n   */\n  elements: Float32Array = new Float32Array(16);\n\n  /**\n   * Constructor of 4x4 Matrix.\n   * @param m11 - default 1, column 1, row 1\n   * @param m12 - default 0, column 1, row 2\n   * @param m13 - default 0, column 1, row 3\n   * @param m14 - default 0, column 1, row 4\n   * @param m21 - default 0, column 2, row 1\n   * @param m22 - default 1, column 2, row 2\n   * @param m23 - default 0, column 2, row 3\n   * @param m24 - default 0, column 2, row 4\n   * @param m31 - default 0, column 3, row 1\n   * @param m32 - default 0, column 3, row 2\n   * @param m33 - default 1, column 3, row 3\n   * @param m34 - default 0, column 3, row 4\n   * @param m41 - default 0, column 4, row 1\n   * @param m42 - default 0, column 4, row 2\n   * @param m43 - default 0, column 4, row 3\n   * @param m44 - default 1, column 4, row 4\n   */\n  constructor(\n    m11: number = 1,\n    m12: number = 0,\n    m13: number = 0,\n    m14: number = 0,\n    m21: number = 0,\n    m22: number = 1,\n    m23: number = 0,\n    m24: number = 0,\n    m31: number = 0,\n    m32: number = 0,\n    m33: number = 1,\n    m34: number = 0,\n    m41: number = 0,\n    m42: number = 0,\n    m43: number = 0,\n    m44: number = 1\n  ) {\n    const e: Float32Array = this.elements;\n\n    e[0] = m11;\n    e[1] = m12;\n    e[2] = m13;\n    e[3] = m14;\n\n    e[4] = m21;\n    e[5] = m22;\n    e[6] = m23;\n    e[7] = m24;\n\n    e[8] = m31;\n    e[9] = m32;\n    e[10] = m33;\n    e[11] = m34;\n\n    e[12] = m41;\n    e[13] = m42;\n    e[14] = m43;\n    e[15] = m44;\n  }\n\n  /**\n   * Set the value of this matrix, and return this matrix.\n   * @param m11 - column 1, row 1\n   * @param m12 - column 1, row 2\n   * @param m13 - column 1, row 3\n   * @param m14 - column 1, row 4\n   * @param m21 - column 2, row 1\n   * @param m22 - column 2, row 2\n   * @param m23 - column 2, row 3\n   * @param m24 - column 2, row 4\n   * @param m31 - column 3, row 1\n   * @param m32 - column 3, row 2\n   * @param m33 - column 3, row 3\n   * @param m34 - column 3, row 4\n   * @param m41 - column 4, row 1\n   * @param m42 - column 4, row 2\n   * @param m43 - column 4, row 3\n   * @param m44 - column 4, row 4\n   * @returns This matrix\n   */\n  set(\n    m11: number,\n    m12: number,\n    m13: number,\n    m14: number,\n    m21: number,\n    m22: number,\n    m23: number,\n    m24: number,\n    m31: number,\n    m32: number,\n    m33: number,\n    m34: number,\n    m41: number,\n    m42: number,\n    m43: number,\n    m44: number\n  ): Matrix {\n    const e = this.elements;\n\n    e[0] = m11;\n    e[1] = m12;\n    e[2] = m13;\n    e[3] = m14;\n\n    e[4] = m21;\n    e[5] = m22;\n    e[6] = m23;\n    e[7] = m24;\n\n    e[8] = m31;\n    e[9] = m32;\n    e[10] = m33;\n    e[11] = m34;\n\n    e[12] = m41;\n    e[13] = m42;\n    e[14] = m43;\n    e[15] = m44;\n\n    return this;\n  }\n\n  /**\n   * Determines the product of this matrix and the specified matrix.\n   * @param right - The specified matrix\n   * @returns This matrix that store the product of the two matrices\n   */\n  multiply(right: Matrix): Matrix {\n    Matrix.multiply(this, right, this);\n    return this;\n  }\n\n  /**\n   * Calculate a determinant of this matrix.\n   * @returns The determinant of this matrix\n   */\n  determinant(): number {\n    const e = this.elements;\n\n    const a11 = e[0],\n      a12 = e[1],\n      a13 = e[2],\n      a14 = e[3];\n    const a21 = e[4],\n      a22 = e[5],\n      a23 = e[6],\n      a24 = e[7];\n    const a31 = e[8],\n      a32 = e[9],\n      a33 = e[10],\n      a34 = e[11];\n    const a41 = e[12],\n      a42 = e[13],\n      a43 = e[14],\n      a44 = e[15];\n\n    const b00 = a11 * a22 - a12 * a21;\n    const b01 = a11 * a23 - a13 * a21;\n    const b02 = a11 * a24 - a14 * a21;\n    const b03 = a12 * a23 - a13 * a22;\n    const b04 = a12 * a24 - a14 * a22;\n    const b05 = a13 * a24 - a14 * a23;\n    const b06 = a31 * a42 - a32 * a41;\n    const b07 = a31 * a43 - a33 * a41;\n    const b08 = a31 * a44 - a34 * a41;\n    const b09 = a32 * a43 - a33 * a42;\n    const b10 = a32 * a44 - a34 * a42;\n    const b11 = a33 * a44 - a34 * a43;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n  }\n\n  /**\n   * Decompose this matrix to translation, rotation and scale elements.\n   * @param translation - Translation vector as an output parameter\n   * @param rotation - Rotation quaternion as an output parameter\n   * @param scale - Scale vector as an output parameter\n   * @returns True if this matrix can be decomposed, false otherwise\n   */\n  decompose(translation: Vector3, rotation: Quaternion, scale: Vector3): boolean {\n    const rm: Matrix3x3 = Matrix._tempMat30;\n\n    const e = this.elements;\n    const rme = rm.elements;\n\n    const m11 = e[0];\n    const m12 = e[1];\n    const m13 = e[2];\n    const m21 = e[4];\n    const m22 = e[5];\n    const m23 = e[6];\n    const m31 = e[8];\n    const m32 = e[9];\n    const m33 = e[10];\n    translation.set(e[12], e[13], e[14]);\n\n    let sx = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n    const sy = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n    const sz = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n    if (this.determinant() < 0) sx = -sx;\n    scale.set(sx, sy, sz);\n\n    if (\n      Math.abs(sx) < MathUtil.zeroTolerance ||\n      Math.abs(sy) < MathUtil.zeroTolerance ||\n      Math.abs(sz) < MathUtil.zeroTolerance\n    ) {\n      rotation.identity();\n      return false;\n    } else {\n      const invSX = 1 / sx;\n      const invSY = 1 / sy;\n      const invSZ = 1 / sz;\n\n      rme[0] = m11 * invSX;\n      rme[1] = m12 * invSX;\n      rme[2] = m13 * invSX;\n      rme[3] = m21 * invSY;\n      rme[4] = m22 * invSY;\n      rme[5] = m23 * invSY;\n      rme[6] = m31 * invSZ;\n      rme[7] = m32 * invSZ;\n      rme[8] = m33 * invSZ;\n      Quaternion.rotationMatrix3x3(rm, rotation);\n      return true;\n    }\n  }\n\n  /**\n   * Get rotation from this matrix.\n   * @param out - Rotation quaternion as an output parameter\n   * @returns The out\n   */\n  getRotation(out: Quaternion): Quaternion {\n    const e = this.elements;\n    let trace = e[0] + e[5] + e[10];\n\n    if (trace > MathUtil.zeroTolerance) {\n      let s = Math.sqrt(trace + 1.0) * 2;\n      out._w = 0.25 * s;\n      out._x = (e[6] - e[9]) / s;\n      out._y = (e[8] - e[2]) / s;\n      out._z = (e[1] - e[4]) / s;\n    } else if (e[0] > e[5] && e[0] > e[10]) {\n      let s = Math.sqrt(1.0 + e[0] - e[5] - e[10]) * 2;\n      out._w = (e[6] - e[9]) / s;\n      out._x = 0.25 * s;\n      out._y = (e[1] + e[4]) / s;\n      out._z = (e[8] + e[2]) / s;\n    } else if (e[5] > e[10]) {\n      let s = Math.sqrt(1.0 + e[5] - e[0] - e[10]) * 2;\n      out._w = (e[8] - e[2]) / s;\n      out._x = (e[1] + e[4]) / s;\n      out._y = 0.25 * s;\n      out._z = (e[6] + e[9]) / s;\n    } else {\n      let s = Math.sqrt(1.0 + e[10] - e[0] - e[5]) * 2;\n      out._w = (e[1] - e[4]) / s;\n      out._x = (e[8] + e[2]) / s;\n      out._y = (e[6] + e[9]) / s;\n      out._z = 0.25 * s;\n    }\n\n    out._onValueChanged && out._onValueChanged();\n    return out;\n  }\n\n  /**\n   * Get scale from this matrix.\n   * @param out - Scale vector as an output parameter\n   * @returns The out\n   */\n  getScaling(out: Vector3): Vector3 {\n    //getScale()\n    const e = this.elements;\n    const m11 = e[0],\n      m12 = e[1],\n      m13 = e[2];\n    const m21 = e[4],\n      m22 = e[5],\n      m23 = e[6];\n    const m31 = e[8],\n      m32 = e[9],\n      m33 = e[10];\n\n    out.set(\n      Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13),\n      Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23),\n      Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33)\n    );\n\n    return out;\n  }\n\n  /**\n   * Get translation from this matrix.\n   * @param out - Translation vector as an output parameter\n   * @returns The out\n   */\n  getTranslation(out: Vector3): Vector3 {\n    const e = this.elements;\n    out.set(e[12], e[13], e[14]);\n    return out;\n  }\n\n  /**\n   * Identity this matrix.\n   * @returns This matrix after identity\n   */\n  identity(): Matrix {\n    const e = this.elements;\n\n    e[0] = 1;\n    e[1] = 0;\n    e[2] = 0;\n    e[3] = 0;\n\n    e[4] = 0;\n    e[5] = 1;\n    e[6] = 0;\n    e[7] = 0;\n\n    e[8] = 0;\n    e[9] = 0;\n    e[10] = 1;\n    e[11] = 0;\n\n    e[12] = 0;\n    e[13] = 0;\n    e[14] = 0;\n    e[15] = 1;\n\n    return this;\n  }\n\n  /**\n   * Invert the matrix.\n   * @returns The matrix after invert\n   */\n  invert(): Matrix {\n    Matrix.invert(this, this);\n    return this;\n  }\n\n  /**\n   * This matrix rotates around an arbitrary axis.\n   * @param axis - The axis\n   * @param r - The rotation angle in radians\n   * @returns This matrix after rotate\n   */\n  rotateAxisAngle(axis: Vector3, r: number): Matrix {\n    Matrix.rotateAxisAngle(this, axis, r, this);\n    return this;\n  }\n\n  /**\n   * Scale this matrix by a given vector.\n   * @param s - The given vector\n   * @returns This matrix after scale\n   */\n  scale(s: Vector3): Matrix {\n    Matrix.scale(this, s, this);\n    return this;\n  }\n\n  /**\n   * Translate this matrix by a given vector.\n   * @param v - The given vector\n   * @returns This matrix after translate\n   */\n  translate(v: Vector3): Matrix {\n    Matrix.translate(this, v, this);\n    return this;\n  }\n\n  /**\n   * Calculate the transpose of this matrix.\n   * @returns This matrix after transpose\n   */\n  transpose(): Matrix {\n    Matrix.transpose(this, this);\n    return this;\n  }\n\n  /**\n   * Creates a clone of this matrix.\n   * @returns A clone of this matrix\n   */\n  clone(): Matrix {\n    const e = this.elements;\n    let ret = new Matrix(\n      e[0],\n      e[1],\n      e[2],\n      e[3],\n      e[4],\n      e[5],\n      e[6],\n      e[7],\n      e[8],\n      e[9],\n      e[10],\n      e[11],\n      e[12],\n      e[13],\n      e[14],\n      e[15]\n    );\n    return ret;\n  }\n\n  /**\n   * Copy this matrix from the specified matrix.\n   * @param source - The specified matrix\n   * @returns This matrix\n   */\n  copyFrom(source: Matrix): Matrix {\n    const e = this.elements;\n    const se = source.elements;\n\n    e[0] = se[0];\n    e[1] = se[1];\n    e[2] = se[2];\n    e[3] = se[3];\n\n    e[4] = se[4];\n    e[5] = se[5];\n    e[6] = se[6];\n    e[7] = se[7];\n\n    e[8] = se[8];\n    e[9] = se[9];\n    e[10] = se[10];\n    e[11] = se[11];\n\n    e[12] = se[12];\n    e[13] = se[13];\n    e[14] = se[14];\n    e[15] = se[15];\n\n    return this;\n  }\n\n  /**\n   * Copy the value of this matrix from an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This matrix\n   */\n  copyFromArray(array: ArrayLike<number>, offset: number = 0): Matrix {\n    const srce = this.elements;\n    for (let i = 0; i < 16; i++) {\n      srce[i] = array[i + offset];\n    }\n    return this;\n  }\n\n  /**\n   * Copy the value of this matrix to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  copyToArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0): void {\n    const e = this.elements;\n\n    out[outOffset] = e[0];\n    out[outOffset + 1] = e[1];\n    out[outOffset + 2] = e[2];\n    out[outOffset + 3] = e[3];\n    out[outOffset + 4] = e[4];\n    out[outOffset + 5] = e[5];\n    out[outOffset + 6] = e[6];\n    out[outOffset + 7] = e[7];\n    out[outOffset + 8] = e[8];\n    out[outOffset + 9] = e[9];\n    out[outOffset + 10] = e[10];\n    out[outOffset + 11] = e[11];\n    out[outOffset + 12] = e[12];\n    out[outOffset + 13] = e[13];\n    out[outOffset + 14] = e[14];\n    out[outOffset + 15] = e[15];\n  }\n}\n","import { BoundingBox } from \"./BoundingBox\";\nimport { BoundingSphere } from \"./BoundingSphere\";\nimport { CollisionUtil } from \"./CollisionUtil\";\nimport { Plane } from \"./Plane\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Represents a ray with an origin and a direction in 3D space.\n */\nexport class Ray {\n  /** The origin of the ray. */\n  readonly origin: Vector3 = new Vector3();\n  /** The normalized direction of the ray. */\n  readonly direction: Vector3 = new Vector3();\n\n  /**\n   * Constructor of Ray.\n   * @param origin - The origin vector\n   * @param direction - The direction vector\n   */\n  constructor(origin: Vector3 = null, direction: Vector3 = null) {\n    origin && this.origin.copyFrom(origin);\n    direction && this.direction.copyFrom(direction);\n  }\n\n  /**\n   * Check if this ray intersects the specified plane.\n   * @param plane - The specified plane\n   * @returns The distance from this ray to the specified plane if intersecting, -1 otherwise\n   */\n  intersectPlane(plane: Plane): number {\n    return CollisionUtil.intersectsRayAndPlane(this, plane);\n  }\n\n  /**\n   * Check if this ray intersects the specified sphere.\n   * @param sphere - The specified sphere\n   * @returns The distance from this ray to the specified sphere if intersecting, -1 otherwise\n   */\n  intersectSphere(sphere: BoundingSphere): number {\n    return CollisionUtil.intersectsRayAndSphere(this, sphere);\n  }\n\n  /**\n   * Check if this ray intersects the specified box (AABB).\n   * @param box - The specified box\n   * @returns The distance from this ray to the specified box if intersecting, -1 otherwise\n   */\n  intersectBox(box: BoundingBox): number {\n    return CollisionUtil.intersectsRayAndBox(this, box);\n  }\n\n  /**\n   * The coordinates of the specified distance from the origin in the ray direction.\n   * @param distance - The specified distance\n   * @param out - The coordinates as an output parameter\n   * @returns The out\n   */\n  getPoint(distance: number, out: Vector3): Vector3 {\n    Vector3.scale(this.direction, distance, out);\n    return out.add(this.origin);\n  }\n}\n","import { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { MathUtil } from \"./MathUtil\";\n\n/**\n * Describes a 2D-vector.\n */\nexport class Vector2 implements IClone<Vector2>, ICopy<Vector2Like, Vector2> {\n  /** @internal */\n  static readonly _zero = new Vector2(0.0, 0.0);\n  /** @internal */\n  static readonly _one = new Vector2(1.0, 1.0);\n\n  /**\n   * Determines the sum of two vectors.\n   * @param left - The first vector to add\n   * @param right - The second vector to add\n   * @param out - The sum of two vectors\n   */\n  static add(left: Vector2, right: Vector2, out: Vector2): void {\n    out._x = left._x + right._x;\n    out._y = left._y + right._y;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the difference between two vectors.\n   * @param left - The first vector to subtract\n   * @param right - The second vector to subtract\n   * @param out - The difference between two vectors\n   */\n  static subtract(left: Vector2, right: Vector2, out: Vector2): void {\n    out._x = left._x - right._x;\n    out._y = left._y - right._y;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the product of two vectors.\n   * @param left - The first vector to multiply\n   * @param right - The second vector to multiply\n   * @param out - The product of two vectors\n   */\n  static multiply(left: Vector2, right: Vector2, out: Vector2): void {\n    out._x = left._x * right._x;\n    out._y = left._y * right._y;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the divisor of two vectors.\n   * @param left - The first vector to divide\n   * @param right - The second vector to divide\n   * @param out - The divisor of two vectors\n   */\n  static divide(left: Vector2, right: Vector2, out: Vector2): void {\n    out._x = left._x / right._x;\n    out._y = left._y / right._y;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the dot product of two vectors.\n   * @param left - The first vector to dot\n   * @param right - The second vector to dot\n   * @returns The dot product of two vectors\n   */\n  static dot(left: Vector2, right: Vector2): number {\n    return left._x * right._x + left._y * right._y;\n  }\n\n  /**\n   * Determines the distance of two vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @returns The distance of two vectors\n   */\n  static distance(left: Vector2, right: Vector2): number {\n    const x = right._x - left._x;\n    const y = right._y - left._y;\n    return Math.sqrt(x * x + y * y);\n  }\n\n  /**\n   * Determines the squared distance of two vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @returns The squared distance of two vectors\n   */\n  static distanceSquared(left: Vector2, right: Vector2): number {\n    const x = right._x - left._x;\n    const y = right._y - left._y;\n    return x * x + y * y;\n  }\n\n  /**\n   * Determines whether the specified vectors are equals.\n   * @param left - The first vector to compare\n   * @param right - The second vector to compare\n   * @returns True if the specified vectors are equals, false otherwise\n   */\n  static equals(left: Vector2, right: Vector2): boolean {\n    return MathUtil.equals(left._x, right._x) && MathUtil.equals(left._y, right._y);\n  }\n\n  /**\n   * Performs a linear interpolation between two vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param t - The blend amount where 0 returns left and 1 right\n   * @param out - The result of linear blending between two vectors\n   */\n  static lerp(left: Vector2, right: Vector2, t: number, out: Vector2): void {\n    const { _x, _y } = left;\n    out._x = _x + (right._x - _x) * t;\n    out._y = _y + (right._y - _y) * t;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a vector containing the largest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the largest components of the specified vectors\n   */\n  static max(left: Vector2, right: Vector2, out: Vector2): void {\n    out._x = Math.max(left._x, right._x);\n    out._y = Math.max(left._y, right._y);\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a vector containing the smallest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the smallest components of the specified vectors\n   */\n  static min(left: Vector2, right: Vector2, out: Vector2): void {\n    out._x = Math.min(left._x, right._x);\n    out._y = Math.min(left._y, right._y);\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Reverses the direction of a given vector.\n   * @param left - The vector to negate\n   * @param out - The vector facing in the opposite direction\n   */\n  static negate(left: Vector2, out: Vector2): void {\n    out._x = -left._x;\n    out._y = -left._y;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Converts the vector into a unit vector.\n   * @param left - The vector to normalize\n   * @param out - The normalized vector\n   */\n  static normalize(left: Vector2, out: Vector2): void {\n    const { _x, _y } = left;\n    let len = Math.sqrt(_x * _x + _y * _y);\n    if (len > MathUtil.zeroTolerance) {\n      len = 1 / len;\n      out._x = _x * len;\n      out._y = _y * len;\n      out._onValueChanged && out._onValueChanged();\n    }\n  }\n\n  /**\n   * Scale a vector by the given value.\n   * @param left - The vector to scale\n   * @param s - The amount by which to scale the vector\n   * @param out - The scaled vector\n   */\n  static scale(left: Vector2, s: number, out: Vector2): void {\n    out._x = left._x * s;\n    out._y = left._y * s;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /** @internal */\n  _x: number;\n  /** @internal */\n  _y: number;\n  /** @internal */\n  _onValueChanged: () => void = null;\n\n  /**\n   * The x component of the vector.\n   */\n  public get x(): number {\n    return this._x;\n  }\n\n  public set x(value: number) {\n    this._x = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The y component of the vector.\n   */\n  public get y(): number {\n    return this._y;\n  }\n\n  public set y(value: number) {\n    this._y = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * Constructor of Vector2.\n   * @param x - The x component of the vector, default 0\n   * @param y - The y component of the vector, default 0\n   */\n  constructor(x: number = 0, y: number = 0) {\n    this._x = x;\n    this._y = y;\n  }\n\n  /**\n   * Set the value of this vector.\n   * @param x - The x component of the vector\n   * @param y - The y component of the vector\n   * @returns This vector\n   */\n  set(x: number, y: number): Vector2 {\n    this._x = x;\n    this._y = y;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the sum of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  add(right: Vector2): Vector2 {\n    this._x += right._x;\n    this._y += right._y;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the difference of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  subtract(right: Vector2): Vector2 {\n    this._x -= right._x;\n    this._y -= right._y;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the product of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  multiply(right: Vector2): Vector2 {\n    this._x *= right._x;\n    this._y *= right._y;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the divisor of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  divide(right: Vector2): Vector2 {\n    this._x /= right._x;\n    this._y /= right._y;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Calculate the length of this vector.\n   * @returns The length of this vector\n   */\n  length(): number {\n    const { _x, _y } = this;\n    return Math.sqrt(_x * _x + _y * _y);\n  }\n\n  /**\n   * Calculate the squared length of this vector.\n   * @returns The squared length of this vector\n   */\n  lengthSquared(): number {\n    const { _x, _y } = this;\n    return _x * _x + _y * _y;\n  }\n\n  /**\n   * Reverses the direction of this vector.\n   * @returns This vector\n   */\n  negate(): Vector2 {\n    this._x = -this._x;\n    this._y = -this._y;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Converts this vector into a unit vector.\n   * @returns This vector\n   */\n  normalize(): Vector2 {\n    Vector2.normalize(this, this);\n    return this;\n  }\n\n  /**\n   * Scale this vector by the given value.\n   * @param s - The amount by which to scale the vector\n   * @returns This vector\n   */\n  scale(s: number): Vector2 {\n    this._x *= s;\n    this._y *= s;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Creates a clone of this vector.\n   * @returns A clone of this vector\n   */\n  clone(): Vector2 {\n    return new Vector2(this._x, this._y);\n  }\n\n  /**\n   * Copy from vector2 like object.\n   * @param source - Vector2 like object\n   * @returns This vector\n   */\n  copyFrom(source: Vector2Like): Vector2 {\n    this._x = source.x;\n    this._y = source.y;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Copy to vector2 like object.\n   * @param target - Vector2 like object\n   * @returns This Vector2 like object\n   */\n  copyTo(target: Vector2Like): Vector2Like {\n    target.x = this._x;\n    target.y = this._y;\n    return target;\n  }\n\n  /**\n   * Copy the value of this vector from an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This vector\n   */\n  copyFromArray(array: ArrayLike<number>, offset: number = 0): Vector2 {\n    this._x = array[offset];\n    this._y = array[offset + 1];\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Copy the value of this vector to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  copyToArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    out[outOffset] = this._x;\n    out[outOffset + 1] = this._y;\n  }\n\n  /**\n   * Serialize this vector to a JSON representation.\n   * @returns A JSON representation of this vector\n   */\n  toJSON(): Vector2Like {\n    return {\n      x: this._x,\n      y: this._y\n    };\n  }\n}\n\ninterface Vector2Like {\n  /** {@inheritDoc Vector2.x} */\n  x: number;\n  /** {@inheritDoc Vector2.y} */\n  y: number;\n}\n","import { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Matrix } from \"./Matrix\";\nimport { Quaternion } from \"./Quaternion\";\n\n/**\n * Describes a 4D-vector.\n */\nexport class Vector4 implements IClone<Vector4>, ICopy<Vector4Like, Vector4> {\n  /** @internal */\n  static readonly _zero = new Vector4(0.0, 0.0, 0.0, 0.0);\n  /** @internal */\n  static readonly _one = new Vector4(1.0, 1.0, 1.0, 1.0);\n\n  /**\n   * Determines the sum of two vectors.\n   * @param left - The first vector to add\n   * @param right - The second vector to add\n   * @param out - The sum of two vectors\n   */\n  static add(left: Vector4, right: Vector4, out: Vector4): void {\n    out._x = left._x + right._x;\n    out._y = left._y + right._y;\n    out._z = left._z + right._z;\n    out._w = left._w + right._w;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the difference between two vectors.\n   * @param left - The first vector to subtract\n   * @param right - The second vector to subtract\n   * @param out - The difference between two vectors\n   */\n  static subtract(left: Vector4, right: Vector4, out: Vector4): void {\n    out._x = left._x - right._x;\n    out._y = left._y - right._y;\n    out._z = left._z - right._z;\n    out._w = left._w - right._w;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the product of two vectors.\n   * @param left - The first vector to multiply\n   * @param right - The second vector to multiply\n   * @param out - The product of two vectors\n   */\n  static multiply(left: Vector4, right: Vector4, out: Vector4): void {\n    out._x = left._x * right._x;\n    out._y = left._y * right._y;\n    out._z = left._z * right._z;\n    out._w = left._w * right._w;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the divisor of two vectors.\n   * @param left - The first vector to divide\n   * @param right - The second vector to divide\n   * @param out - The divisor of two vectors\n   */\n  static divide(left: Vector4, right: Vector4, out: Vector4): void {\n    out._x = left._x / right._x;\n    out._y = left._y / right._y;\n    out._z = left._z / right._z;\n    out._w = left._w / right._w;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the dot product of two vectors.\n   * @param left - The first vector to dot\n   * @param right - The second vector to dot\n   * @returns The dot product of two vectors\n   */\n  static dot(left: Vector4, right: Vector4): number {\n    return left._x * right._x + left._y * right._y + left._z * right._z + left._w * right._w;\n  }\n\n  /**\n   * Determines the distance of two vectors.\n   * @param a - The first vector\n   * @param b - The second vector\n   * @returns The distance of two vectors\n   */\n  static distance(a: Vector4, b: Vector4): number {\n    const x = b._x - a._x;\n    const y = b._y - a._y;\n    const z = b._z - a._z;\n    const w = b._w - a._w;\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n  }\n\n  /**\n   * Determines the squared distance of two vectors.\n   * @param a - The first vector\n   * @param b - The second vector\n   * @returns The squared distance of two vectors\n   */\n  static distanceSquared(a: Vector4, b: Vector4): number {\n    const x = b._x - a._x;\n    const y = b._y - a._y;\n    const z = b._z - a._z;\n    const w = b._w - a._w;\n    return x * x + y * y + z * z + w * w;\n  }\n\n  /**\n   * Determines whether the specified vectors are equals.\n   * @param left - The first vector to compare\n   * @param right - The second vector to compare\n   * @returns True if the specified vectors are equals, false otherwise\n   */\n  static equals(left: Vector4, right: Vector4): boolean {\n    return (\n      MathUtil.equals(left._x, right._x) &&\n      MathUtil.equals(left._y, right._y) &&\n      MathUtil.equals(left._z, right._z) &&\n      MathUtil.equals(left._w, right._w)\n    );\n  }\n\n  /**\n   * Performs a linear interpolation between two vectors.\n   * @param start - The first vector\n   * @param end - The second vector\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @param out - The result of linear blending between two vectors\n   */\n  static lerp(start: Vector4, end: Vector4, t: number, out: Vector4): void {\n    const { _x, _y, _z, _w } = start;\n    out._x = _x + (end._x - _x) * t;\n    out._y = _y + (end._y - _y) * t;\n    out._z = _z + (end._z - _z) * t;\n    out._w = _w + (end._w - _w) * t;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a vector containing the largest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the largest components of the specified vectors\n   */\n  static max(left: Vector4, right: Vector4, out: Vector4): void {\n    out._x = Math.max(left._x, right._x);\n    out._y = Math.max(left._y, right._y);\n    out._z = Math.max(left._z, right._z);\n    out._w = Math.max(left._w, right._w);\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a vector containing the smallest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the smallest components of the specified vectors\n   */\n  static min(left: Vector4, right: Vector4, out: Vector4): void {\n    out._x = Math.min(left._x, right._x);\n    out._y = Math.min(left._y, right._y);\n    out._z = Math.min(left._z, right._z);\n    out._w = Math.min(left._w, right._w);\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Reverses the direction of a given vector.\n   * @param a - The vector to negate\n   * @param out - The vector facing in the opposite direction\n   */\n  static negate(a: Vector4, out: Vector4): void {\n    out._x = -a._x;\n    out._y = -a._y;\n    out._z = -a._z;\n    out._w = -a._w;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Converts the vector into a unit vector.\n   * @param a - The vector to normalize\n   * @param out - The normalized vector\n   */\n  static normalize(a: Vector4, out: Vector4): void {\n    const { _x, _y, _z, _w } = a;\n    let len = Math.sqrt(_x * _x + _y * _y + _z * _z + _w * _w);\n    if (len > MathUtil.zeroTolerance) {\n      len = 1 / len;\n      out._x = _x * len;\n      out._y = _y * len;\n      out._z = _z * len;\n      out._w = _w * len;\n      out._onValueChanged && out._onValueChanged();\n    }\n  }\n\n  /**\n   * Scale a vector by the given value.\n   * @param a - The vector to scale\n   * @param s - The amount by which to scale the vector\n   * @param out - The scaled vector\n   */\n  static scale(a: Vector4, s: number, out: Vector4): void {\n    out._x = a._x * s;\n    out._y = a._y * s;\n    out._z = a._z * s;\n    out._w = a._w * s;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Performs a transformation using the given 4x4 matrix.\n   * @param v - The vector to transform\n   * @param m - The transform matrix\n   * @param out - The transformed vector3\n   */\n  static transform(v: Vector4, m: Matrix, out: Vector4): void {\n    const { _x, _y, _z, _w } = v;\n    const e = m.elements;\n    out._x = _x * e[0] + _y * e[4] + _z * e[8] + _w * e[12];\n    out._y = _x * e[1] + _y * e[5] + _z * e[9] + _w * e[13];\n    out._z = _x * e[2] + _y * e[6] + _z * e[10] + _w * e[14];\n    out._w = _x * e[3] + _y * e[7] + _z * e[11] + _w * e[15];\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Performs a transformation using the given quaternion.\n   * @param v - The vector to transform\n   * @param q - The transform quaternion\n   * @param out - The transformed vector\n   */\n  static transformByQuat(v: Vector4, q: Quaternion, out: Vector4): void {\n    const { _x: x, _y: y, _z: z, _w: w } = v;\n    const qx = q._x;\n    const qy = q._y;\n    const qz = q._z;\n    const qw = q._w;\n\n    // calculate quat * vec\n    const ix = qw * x + qy * z - qz * y;\n    const iy = qw * y + qz * x - qx * z;\n    const iz = qw * z + qx * y - qy * x;\n    const iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out._x = ix * qw - iw * qx - iy * qz + iz * qy;\n    out._y = iy * qw - iw * qy - iz * qx + ix * qz;\n    out._z = iz * qw - iw * qz - ix * qy + iy * qx;\n    out._w = w;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /** @internal */\n  _x: number;\n  /** @internal */\n  _y: number;\n  /** @internal */\n  _z: number;\n  /** @internal */\n  _w: number;\n  /** @internal */\n  _onValueChanged: () => void = null;\n\n  /**\n   * The x component of the vector.\n   */\n  public get x(): number {\n    return this._x;\n  }\n\n  public set x(value: number) {\n    this._x = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The y component of the vector.\n   */\n  public get y(): number {\n    return this._y;\n  }\n\n  public set y(value: number) {\n    this._y = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The z component of the vector.\n   */\n  public get z(): number {\n    return this._z;\n  }\n\n  public set z(value: number) {\n    this._z = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The w component of the vector.\n   */\n  public get w(): number {\n    return this._w;\n  }\n\n  public set w(value: number) {\n    this._w = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * Constructor of Vector4.\n   * @param x - The x component of the vector, default 0\n   * @param y - The y component of the vector, default 0\n   * @param z - The z component of the vector, default 0\n   * @param w - The w component of the vector, default 0\n   */\n  constructor(x: number = 0, y: number = 0, z: number = 0, w: number = 0) {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._w = w;\n  }\n\n  /**\n   * Set the value of this vector.\n   * @param x - The x component of the vector\n   * @param y - The y component of the vector\n   * @param z - The z component of the vector\n   * @param w - The w component of the vector\n   * @returns This vector\n   */\n  set(x: number, y: number, z: number, w: number): Vector4 {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._w = w;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the sum of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  add(right: Vector4): Vector4 {\n    this._x += right._x;\n    this._y += right._y;\n    this._z += right._z;\n    this._w += right._w;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the difference of this vector and the specified vector.\n   * @param right - the specified vector\n   * @returns This vector\n   */\n  subtract(right: Vector4): Vector4 {\n    this._x -= right._x;\n    this._y -= right._y;\n    this._z -= right._z;\n    this._w -= right._w;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the product of this vector and the specified vector.\n   * @param right - the specified vector\n   * @returns This vector\n   */\n  multiply(right: Vector4): Vector4 {\n    this._x *= right._x;\n    this._y *= right._y;\n    this._z *= right._z;\n    this._w *= right._w;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the divisor of this vector and the specified vector.\n   * @param right - the specified vector\n   * @returns This vector\n   */\n  divide(right: Vector4): Vector4 {\n    this._x /= right._x;\n    this._y /= right._y;\n    this._z /= right._z;\n    this._w /= right._w;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Calculate the length of this vector.\n   * @returns The length of this vector\n   */\n  length(): number {\n    const { _x, _y, _z, _w } = this;\n    return Math.sqrt(_x * _x + _y * _y + _z * _z + _w * _w);\n  }\n\n  /**\n   * Calculate the squared length of this vector.\n   * @returns The squared length of this vector\n   */\n  lengthSquared(): number {\n    const { _x, _y, _z, _w } = this;\n    return _x * _x + _y * _y + _z * _z + _w * _w;\n  }\n\n  /**\n   * Reverses the direction of this vector.\n   * @returns This vector\n   */\n  negate(): Vector4 {\n    this._x = -this._x;\n    this._y = -this._y;\n    this._z = -this._z;\n    this._w = -this._w;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Converts this vector into a unit vector.\n   * @returns This vector\n   */\n  normalize(): Vector4 {\n    Vector4.normalize(this, this);\n    return this;\n  }\n\n  /**\n   * Scale this vector by the given value.\n   * @param s - The amount by which to scale the vector\n   * @returns This vector\n   */\n  scale(s: number): Vector4 {\n    this._x *= s;\n    this._y *= s;\n    this._z *= s;\n    this._w *= s;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Creates a clone of this vector.\n   * @returns A clone of this vector\n   */\n  clone(): Vector4 {\n    let ret = new Vector4(this._x, this._y, this._z, this._w);\n    return ret;\n  }\n\n  /**\n   * Copy from vector3 like object.\n   * @param source - Vector3 like object.\n   * @returns This vector\n   */\n  copyFrom(source: Vector4Like): Vector4 {\n    this._x = source.x;\n    this._y = source.y;\n    this._z = source.z;\n    this._w = source.w;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Copy to vector4 like object.\n   * @param target - Vector4 like object\n   * @returns This Vector4 like object\n   */\n  copyTo(target: Vector4Like): Vector4Like {\n    target.x = this._x;\n    target.y = this._y;\n    target.z = this._z;\n    target.w = this._w;\n    return target;\n  }\n\n  /**\n   * Copy the value of this vector by an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This vector\n   */\n  copyFromArray(array: ArrayLike<number>, offset: number = 0): Vector4 {\n    this._x = array[offset];\n    this._y = array[offset + 1];\n    this._z = array[offset + 2];\n    this._w = array[offset + 3];\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Copy the value of this vector to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  copyToArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    out[outOffset] = this._x;\n    out[outOffset + 1] = this._y;\n    out[outOffset + 2] = this._z;\n    out[outOffset + 3] = this._w;\n  }\n\n  /**\n   * Serialize this vector to a JSON representation.\n   * @returns A JSON representation of this vector\n   */\n  toJSON(): Vector4Like {\n    return {\n      x: this._x,\n      y: this._y,\n      z: this._z,\n      w: this._w\n    };\n  }\n}\n\ninterface Vector4Like {\n  /** {@inheritDoc Vector4.x} */\n  x: number;\n  /** {@inheritDoc Vector4.y} */\n  y: number;\n  /** {@inheritDoc Vector4.z} */\n  z: number;\n  /** {@inheritDoc Vector4.w} */\n  w: number;\n}\n","import { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { MathUtil } from \"./MathUtil\";\n\n/**\n * Describes a color in the from of RGBA (in order: R, G, B, A).\n */\nexport class Color implements IClone<Color>, ICopy<ColorLike, Color> {\n  /**\n   * Modify a value from the gamma space to the linear space.\n   * @param value - The value in gamma space\n   * @returns The value in linear space\n   */\n  static gammaToLinearSpace(value: number): number {\n    // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_framebuffer_sRGB.txt\n    // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_texture_sRGB_decode.txt\n\n    if (value <= 0.0) return 0.0;\n    else if (value <= 0.04045) return value / 12.92;\n    else if (value < 1.0) return Math.pow((value + 0.055) / 1.055, 2.4);\n    else return Math.pow(value, 2.4);\n  }\n\n  /**\n   * Modify a value from the linear space to the gamma space.\n   * @param value - The value in linear space\n   * @returns The value in gamma space\n   */\n  static linearToGammaSpace(value: number): number {\n    // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_framebuffer_sRGB.txt\n    // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_texture_sRGB_decode.txt\n\n    if (value <= 0.0) return 0.0;\n    else if (value < 0.0031308) return 12.92 * value;\n    else if (value < 1.0) return 1.055 * Math.pow(value, 0.41666) - 0.055;\n    else return Math.pow(value, 0.41666);\n  }\n\n  /**\n   * Determines whether the specified colors are equals.\n   * @param left - The first color to compare\n   * @param right - The second color to compare\n   * @returns True if the specified colors are equals, false otherwise\n   */\n  static equals(left: Color, right: Color): boolean {\n    return (\n      MathUtil.equals(left._r, right._r) &&\n      MathUtil.equals(left._g, right._g) &&\n      MathUtil.equals(left._b, right._b) &&\n      MathUtil.equals(left._a, right._a)\n    );\n  }\n\n  /**\n   * Determines the sum of two colors.\n   * @param left - The first color to add\n   * @param right - The second color to add\n   * @param out - The sum of two colors\n   * @returns The added color\n   */\n  static add(left: Color, right: Color, out: Color): Color {\n    out._r = left._r + right._r;\n    out._g = left._g + right._g;\n    out._b = left._b + right._b;\n    out._a = left._a + right._a;\n    out._onValueChanged && out._onValueChanged();\n\n    return out;\n  }\n\n  /**\n   * Determines the difference between two colors.\n   * @param left - The first color to subtract\n   * @param right - The second color to subtract\n   * @param out - The difference between two colors\n   */\n  static subtract(left: Color, right: Color, out: Color): void {\n    out._r = left._r - right._r;\n    out._g = left._g - right._g;\n    out._b = left._b - right._b;\n    out._a = left._a - right._a;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Scale a color by the given value.\n   * @param left - The color to scale\n   * @param s - The amount by which to scale the color\n   * @param out - The scaled color\n   * @returns The scaled color\n   */\n  static scale(left: Color, s: number, out: Color): Color {\n    out._r = left._r * s;\n    out._g = left._g * s;\n    out._b = left._b * s;\n    out._a = left._a * s;\n    out._onValueChanged && out._onValueChanged();\n\n    return out;\n  }\n\n  /**\n   * Performs a linear interpolation between two color.\n   * @param start - The first color\n   * @param end - The second color\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @param out - The result of linear blending between two color\n   */\n  static lerp(start: Color, end: Color, t: number, out: Color): Color {\n    const { _r, _g, _b, _a } = start;\n    out._r = _r + (end._r - _r) * t;\n    out._g = _g + (end._g - _g) * t;\n    out._b = _b + (end._b - _b) * t;\n    out._a = _a + (end._a - _a) * t;\n    out._onValueChanged && out._onValueChanged();\n\n    return out;\n  }\n\n  /** @internal */\n  _r: number;\n  /** @internal */\n  _g: number;\n  /** @internal */\n  _b: number;\n  /** @internal */\n  _a: number;\n  /** @internal */\n  _onValueChanged: () => void = null;\n\n  /**\n   * The red component of the color, 0~1.\n   */\n  public get r(): number {\n    return this._r;\n  }\n\n  public set r(value: number) {\n    this._r = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The green component of the color, 0~1.\n   */\n  public get g(): number {\n    return this._g;\n  }\n\n  public set g(value: number) {\n    this._g = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The blue component of the color, 0~1.\n   */\n  public get b(): number {\n    return this._b;\n  }\n\n  public set b(value: number) {\n    this._b = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The alpha component of the color, 0~1.\n   */\n  public get a(): number {\n    return this._a;\n  }\n\n  public set a(value: number) {\n    this._a = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * Constructor of Color.\n   * @param r - The red component of the color\n   * @param g - The green component of the color\n   * @param b - The blue component of the color\n   * @param a - The alpha component of the color\n   */\n  constructor(r: number = 1, g: number = 1, b: number = 1, a: number = 1) {\n    this._r = r;\n    this._g = g;\n    this._b = b;\n    this._a = a;\n  }\n\n  /**\n   * Set the value of this color.\n   * @param r - The red component of the color\n   * @param g - The green component of the color\n   * @param b - The blue component of the color\n   * @param a - The alpha component of the color\n   * @returns This color.\n   */\n  set(r: number, g: number, b: number, a: number): Color {\n    this._r = r;\n    this._g = g;\n    this._b = b;\n    this._a = a;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the sum of this color and the specified color.\n   * @param color - The specified color\n   * @returns The added color\n   */\n  add(color: Color): Color {\n    this._r += color._r;\n    this._g += color._g;\n    this._b += color._b;\n    this._a += color._a;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Scale this color by the given value.\n   * @param s - The amount by which to scale the color\n   * @returns The scaled color\n   */\n  scale(s: number): Color {\n    this._r *= s;\n    this._g *= s;\n    this._b *= s;\n    this._a *= s;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Creates a clone of this color.\n   * @returns A clone of this color\n   */\n  clone(): Color {\n    const ret = new Color(this._r, this._g, this._b, this._a);\n    return ret;\n  }\n\n  /**\n   * Copy from color like object.\n   * @param source - Color like object.\n   * @returns This vector\n   */\n  copyFrom(source: ColorLike): Color {\n    this._r = source.r;\n    this._g = source.g;\n    this._b = source.b;\n    this._a = source.a;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Copy to color like object.\n   * @param target - Color like object.\n   * @returns This Color like object\n   */\n  copyTo(target: ColorLike): ColorLike {\n    target.r = this._r;\n    target.g = this._g;\n    target.b = this._b;\n    target.a = this._a;\n    return target;\n  }\n\n  /**\n   * Copy from array like object.\n   * @param source - Array like object\n   * @param offset - The start offset\n   * @returns This color\n   */\n  copyFromArray(source: ArrayLike<number>, offset: number = 0): Color {\n    this._r = source[offset];\n    this._g = source[offset + 1];\n    this._b = source[offset + 2];\n    this._a = source[offset + 3];\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Copy the value of this color to an array.\n   * @param out - The color\n   * @param outOffset - The start offset\n   */\n  copyToArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0): void {\n    out[outOffset] = this._r;\n    out[outOffset + 1] = this._g;\n    out[outOffset + 2] = this._b;\n    out[outOffset + 3] = this._a;\n  }\n\n  /**\n   * Modify components (r, g, b) of this color from gamma space to linear space.\n   * @param out - The color in linear space\n   * @returns The color in linear space\n   */\n  toLinear(out: Color): Color {\n    out._r = Color.gammaToLinearSpace(this._r);\n    out._g = Color.gammaToLinearSpace(this._g);\n    out._b = Color.gammaToLinearSpace(this._b);\n    out._onValueChanged && out._onValueChanged();\n    return out;\n  }\n\n  /**\n   * Modify components (r, g, b) of this color from linear space to gamma space.\n   * @param out - The color in gamma space\n   * @returns The color in gamma space\n   */\n  toGamma(out: Color): Color {\n    out._r = Color.linearToGammaSpace(this._r);\n    out._g = Color.linearToGammaSpace(this._g);\n    out._b = Color.linearToGammaSpace(this._b);\n    out._onValueChanged && out._onValueChanged();\n    return out;\n  }\n\n  /**\n   * Gets the brightness.\n   * @returns The Hue-Saturation-Brightness (HSB) saturation for this\n   */\n  getBrightness(): number {\n    const r = this.r;\n    const g = this.g;\n    const b = this.b;\n\n    let max = r;\n    let min = r;\n    if (g > max) max = g;\n    if (b > max) max = b;\n\n    if (g < min) min = g;\n    if (b < min) min = b;\n\n    return (max + min) / 2;\n  }\n\n  /**\n   * Serialize this color to a JSON representation.\n   * @return A JSON representation of this color\n   */\n  toJSON(): ColorLike {\n    return {\n      r: this._r,\n      g: this._g,\n      b: this._b,\n      a: this._a\n    };\n  }\n}\n\ninterface ColorLike {\n  /** {@inheritDoc Color._r} */\n  r: number;\n  /** {@inheritDoc Color._g} */\n  g: number;\n  /** {@inheritDoc Color._b} */\n  b: number;\n  /** {@inheritDoc Color._a} */\n  a: number;\n}\n","import { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\n\n// A 2d rectangle defined by x and y position, width and height.\nexport class Rect implements IClone<Rect>, ICopy<Rect, Rect> {\n  /** @internal */\n  _x: number;\n  /** @internal */\n  _y: number;\n  /** @internal */\n  _width: number;\n  /** @internal */\n  _height: number;\n  /** @internal */\n  _onValueChanged: () => void = null;\n\n  /**\n   *  The x coordinate of the rectangle.\n   */\n  get x(): number {\n    return this._x;\n  }\n\n  set x(value: number) {\n    this._x = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   *  The y coordinate of the rectangle.\n   */\n  get y(): number {\n    return this._y;\n  }\n\n  set y(value: number) {\n    this._y = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The width of the rectangle, measured from the x position.\n   */\n  get width(): number {\n    return this._width;\n  }\n\n  set width(value: number) {\n    this._width = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The height of the rectangle, measured from the y position.\n   */\n  get height(): number {\n    return this._height;\n  }\n\n  set height(value: number) {\n    this._height = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * Constructor of Rect.\n   * @param x - The x coordinate of the rectangle, default 0\n   * @param y - The y coordinate of the rectangle, default 0\n   * @param width - The width of the rectangle, measured from the x position, default 0\n   * @param height - The height of the rectangle, measured from the y position, default 0\n   */\n  constructor(x: number = 0, y: number = 0, width: number = 0, height: number = 0) {\n    this._x = x;\n    this._y = y;\n    this._width = width;\n    this._height = height;\n  }\n\n  /**\n   * Set the value of this rectangle.\n   * @param x - The x coordinate of the rectangle\n   * @param y - The y coordinate of the rectangle\n   * @param width - The width of the rectangle, measured from the x position\n   * @param height - The height of the rectangle, measured from the y position\n   * @returns This rectangle\n   */\n  set(x: number, y: number, width: number, height: number): Rect {\n    this._x = x;\n    this._y = y;\n    this._width = width;\n    this._height = height;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Creates a clone of this rect.\n   * @returns A clone of this rect\n   */\n  clone(): Rect {\n    return new Rect(this.x, this.y, this.width, this.height);\n  }\n\n  /**\n   * Copy this rect from the specified rect.\n   * @param source - The specified rect\n   * @returns This rect\n   */\n  copyFrom(source: Rect): Rect {\n    this._x = source.x;\n    this._y = source.y;\n    this._width = source.width;\n    this._height = source.height;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n}\n","import { Color } from \"./Color\";\nimport { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Use SH3 to represent irradiance environment maps efficiently, allowing for interactive rendering of diffuse objects under distant illumination.\n * @remarks\n * https://graphics.stanford.edu/papers/envmap/envmap.pdf\n * http://www.ppsloan.org/publications/StupidSH36.pdf\n * https://google.github.io/filament/Filament.md.html#annex/sphericalharmonics\n */\nexport class SphericalHarmonics3\n  implements IClone<SphericalHarmonics3>, ICopy<SphericalHarmonics3, SphericalHarmonics3>\n{\n  /** The coefficients of SphericalHarmonics3. */\n  coefficients: Float32Array = new Float32Array(27);\n\n  /**\n   * Add light to SphericalHarmonics3.\n   * @param direction - Light direction\n   * @param color - Light color\n   * @param deltaSolidAngle - The delta solid angle of the light\n   */\n  addLight(direction: Vector3, color: Color, deltaSolidAngle: number): void {\n    /**\n     * Implements `EvalSHBasis` from [Projection from Cube maps] in http://www.ppsloan.org/publications/StupidSH36.pdf.\n     *\n     * Basis constants\n     * 0: Math.sqrt(1/(4 * Math.PI))\n     *\n     * 1: -Math.sqrt(3 / (4 * Math.PI))\n     * 2: Math.sqrt(3 / (4 * Math.PI))\n     * 3: -Math.sqrt(3 / (4 * Math.PI))\n     *\n     * 4: Math.sqrt(15 / (4 * Math.PI))\n     * 5: -Math.sqrt(15 / (4 * Math.PI))\n     * 6: Math.sqrt(5 / (16 * Math.PI))\n     * 7: -Math.sqrt(15 / (4 * Math.PI)）\n     * 8: Math.sqrt(15 / (16 * Math.PI))\n     */\n\n    color.scale(deltaSolidAngle);\n\n    const coe = this.coefficients;\n\n    const { _x: x, _y: y, _z: z } = direction;\n    const { r, g, b } = color;\n\n    const bv0 = 0.282095; // basis0 = 0.886227\n    const bv1 = -0.488603 * y; // basis1 = -0.488603\n    const bv2 = 0.488603 * z; // basis2 = 0.488603\n    const bv3 = -0.488603 * x; // basis3 = -0.488603\n    const bv4 = 1.092548 * (x * y); // basis4 = 1.092548\n    const bv5 = -1.092548 * (y * z); // basis5 = -1.092548\n    const bv6 = 0.315392 * (3 * z * z - 1); // basis6 = 0.315392\n    const bv7 = -1.092548 * (x * z); // basis7 = -1.092548\n    const bv8 = 0.546274 * (x * x - y * y); // basis8 = 0.546274\n\n    (coe[0] += r * bv0), (coe[1] += g * bv0), (coe[2] += b * bv0);\n\n    (coe[3] += r * bv1), (coe[4] += g * bv1), (coe[5] += b * bv1);\n    (coe[6] += r * bv2), (coe[7] += g * bv2), (coe[8] += b * bv2);\n    (coe[9] += r * bv3), (coe[10] += g * bv3), (coe[11] += b * bv3);\n\n    (coe[12] += r * bv4), (coe[13] += g * bv4), (coe[14] += b * bv4);\n    (coe[15] += r * bv5), (coe[16] += g * bv5), (coe[17] += b * bv5);\n    (coe[18] += r * bv6), (coe[19] += g * bv6), (coe[20] += b * bv6);\n    (coe[21] += r * bv7), (coe[22] += g * bv7), (coe[23] += b * bv7);\n    (coe[24] += r * bv8), (coe[25] += g * bv8), (coe[26] += b * bv8);\n  }\n\n  /**\n   * Evaluates the color for the specified direction.\n   * @param direction - Specified direction\n   * @param out - Out color\n   */\n  evaluate(direction: Vector3, out: Color): Color {\n    /**\n     * Equations based on data from: http://ppsloan.org/publications/StupidSH36.pdf\n     *\n     *\n     * Basis constants\n     * 0: Math.sqrt(1/(4 * Math.PI))\n     *\n     * 1: -Math.sqrt(3 / (4 * Math.PI))\n     * 2: Math.sqrt(3 / (4 * Math.PI))\n     * 3: -Math.sqrt(3 / (4 * Math.PI))\n     *\n     * 4: Math.sqrt(15 / (4 * Math.PI)）\n     * 5: -Math.sqrt(15 / (4 * Math.PI))\n     * 6: Math.sqrt(5 / (16 * Math.PI)）\n     * 7: -Math.sqrt(15 / (4 * Math.PI)）\n     * 8: Math.sqrt(15 / (16 * Math.PI)）\n     *\n     *\n     * Convolution kernel\n     * 0: Math.PI\n     * 1: (2 * Math.PI) / 3\n     * 2: Math.PI / 4\n     */\n\n    const coe = this.coefficients;\n    const { _x: x, _y: y, _z: z } = direction;\n\n    const bv0 = 0.886227; // kernel0 * basis0 = 0.886227\n    const bv1 = -1.023327 * y; // kernel1 * basis1 = -1.023327\n    const bv2 = 1.023327 * z; // kernel1 * basis2 = 1.023327\n    const bv3 = -1.023327 * x; // kernel1 * basis3 = -1.023327\n    const bv4 = 0.858086 * y * x; // kernel2 * basis4 = 0.858086\n    const bv5 = -0.858086 * y * z; // kernel2 * basis5 = -0.858086\n    const bv6 = 0.247708 * (3 * z * z - 1); // kernel2 * basis6 = 0.247708\n    const bv7 = -0.858086 * z * x; // kernel2 * basis7 = -0.858086\n    const bv8 = 0.429042 * (x * x - y * y); // kernel2 * basis8 = 0.429042\n\n    // l0\n    let r = coe[0] * bv0;\n    let g = coe[1] * bv0;\n    let b = coe[2] * bv0;\n\n    // l1\n    r += coe[3] * bv1 + coe[6] * bv2 + coe[9] * bv3;\n    g += coe[4] * bv1 + coe[7] * bv2 + coe[10] * bv3;\n    b += coe[5] * bv1 + coe[8] * bv2 + coe[11] * bv3;\n\n    // l2\n    r += coe[12] * bv4 + coe[15] * bv5 + coe[18] * bv6 + coe[21] * bv7 + coe[24] * bv8;\n    g += coe[13] * bv4 + coe[16] * bv5 + coe[19] * bv6 + coe[22] * bv7 + coe[25] * bv8;\n    b += coe[14] * bv4 + coe[17] * bv5 + coe[20] * bv6 + coe[23] * bv7 + coe[26] * bv8;\n\n    out.set(r, g, b, 1.0);\n    return out;\n  }\n\n  /**\n   * Scale the coefficients.\n   * @param s - The amount by which to scale the SphericalHarmonics3\n   */\n  scale(s: number): void {\n    const src = this.coefficients;\n\n    (src[0] *= s), (src[1] *= s), (src[2] *= s);\n    (src[3] *= s), (src[4] *= s), (src[5] *= s);\n    (src[6] *= s), (src[7] *= s), (src[8] *= s);\n    (src[9] *= s), (src[10] *= s), (src[11] *= s);\n    (src[12] *= s), (src[13] *= s), (src[14] *= s);\n    (src[15] *= s), (src[16] *= s), (src[17] *= s);\n    (src[18] *= s), (src[19] *= s), (src[20] *= s);\n    (src[21] *= s), (src[22] *= s), (src[23] *= s);\n    (src[24] *= s), (src[25] *= s), (src[26] *= s);\n  }\n\n  /**\n   * Creates a clone of this SphericalHarmonics3.\n   * @returns A clone of this SphericalHarmonics3\n   */\n  clone(): SphericalHarmonics3 {\n    const sh = new SphericalHarmonics3();\n    sh.copyFrom(this);\n    return sh;\n  }\n\n  /**\n   * Copy this SphericalHarmonics3 from the specified SphericalHarmonics3.\n   * @param source - The specified SphericalHarmonics3\n   * @returns This SphericalHarmonics3\n   */\n  copyFrom(source: SphericalHarmonics3): SphericalHarmonics3 {\n    source.copyToArray(this.coefficients);\n    return this;\n  }\n\n  /**\n   * Copy the value of this spherical harmonics from an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   */\n  copyFromArray(array: ArrayLike<number>, offset: number = 0): void {\n    const s = this.coefficients;\n\n    (s[0] = array[offset]), (s[1] = array[1 + offset]), (s[2] = array[2 + offset]);\n    (s[3] = array[3 + offset]), (s[4] = array[4 + offset]), (s[5] = array[5 + offset]);\n    (s[6] = array[6 + offset]), (s[7] = array[7 + offset]), (s[8] = array[8 + offset]);\n    (s[9] = array[9 + offset]), (s[10] = array[10 + offset]), (s[11] = array[11 + offset]);\n    (s[12] = array[12 + offset]), (s[13] = array[13 + offset]), (s[14] = array[14 + offset]);\n    (s[15] = array[15 + offset]), (s[16] = array[16 + offset]), (s[17] = array[17 + offset]);\n    (s[18] = array[18 + offset]), (s[19] = array[19 + offset]), (s[20] = array[20 + offset]);\n    (s[21] = array[21 + offset]), (s[22] = array[22 + offset]), (s[23] = array[23 + offset]);\n    (s[24] = array[24 + offset]), (s[25] = array[25 + offset]), (s[26] = array[26 + offset]);\n  }\n\n  /**\n   * Copy the value of this spherical harmonics to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  copyToArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0): void {\n    const s = this.coefficients;\n\n    (out[0 + outOffset] = s[0]), (out[1 + outOffset] = s[1]), (out[2 + outOffset] = s[2]);\n\n    (out[3 + outOffset] = s[3]), (out[4 + outOffset] = s[4]), (out[5 + outOffset] = s[5]);\n    (out[6 + outOffset] = s[6]), (out[7 + outOffset] = s[7]), (out[8 + outOffset] = s[8]);\n    (out[9 + outOffset] = s[9]), (out[10 + outOffset] = s[10]), (out[11 + outOffset] = s[11]);\n\n    (out[12 + outOffset] = s[12]), (out[13 + outOffset] = s[13]), (out[14 + outOffset] = s[14]);\n    (out[15 + outOffset] = s[15]), (out[16 + outOffset] = s[16]), (out[17 + outOffset] = s[17]);\n    (out[18 + outOffset] = s[18]), (out[19 + outOffset] = s[19]), (out[20 + outOffset] = s[20]);\n    (out[21 + outOffset] = s[21]), (out[22 + outOffset] = s[22]), (out[23 + outOffset] = s[23]);\n    (out[24 + outOffset] = s[24]), (out[25 + outOffset] = s[25]), (out[26 + outOffset] = s[26]);\n  }\n}\n","/**\n * Random number generator based on the xorshift128+ algorithm.\n * https://vigna.di.unimi.it/ftp/papers/xorshiftplus.pdf\n */\nexport class Rand {\n  private _state0: number;\n  private _state1: number;\n\n  /**\n   * Create a random number generator.\n   * @param seed0 - Seed 0 used to initialize the generator\n   * @param seed1 - Seed 1 used to initialize the generator\n   */\n  constructor(seed0: number, seed1: number) {\n    this.reset(seed0, seed1);\n  }\n\n  /**\n   * Generate a integer 32bit random number.\n   * @returns - A random number\n   */\n  randomInt32(): number {\n    let x = this._state0;\n    const y = this._state1;\n    this._state0 = y;\n    x ^= x << 23;\n    x ^= x >>> 17;\n    x ^= y ^ (y >>> 26);\n    this._state1 = x;\n    return (this._state0 + this._state1) >>> 0;\n  }\n\n  /**\n   * Generate a number between 0 and 1.\n   * @returns - A random number\n   */\n  random(): number {\n    return this.randomInt32() / 0xffffffff; // 2^32 - 1\n  }\n\n  /**\n   * Reset the generator by new seeds.\n   * @param seed0 - Random seed0\n   * @param seed1 - Random seed1\n   */\n  reset(seed0: number, seed1: number): void {\n    this._state0 = seed0 >>> 0;\n    this._state1 = seed1 >>> 0;\n  }\n}\n"],"names":["ContainmentType","PlaneIntersectionType","FrustumFace","MathUtil","clamp","v","min","max","Math","equals","a","b","abs","zeroTolerance","isPowerOf2","radianToDegree","r","radToDegreeFactor","degreeToRadian","d","degreeToRadFactor","lerp","start","end","t","PI","Vector3","x","y","z","_onValueChanged","_x","_y","_z","set","add","right","subtract","multiply","divide","length","sqrt","lengthSquared","negate","normalize","scale","s","transformNormal","m","transformToVec3","transformCoordinate","transformByQuat","quaternion","clone","copyFrom","source","copyTo","target","copyFromArray","array","offset","copyToArray","out","outOffset","toJSON","left","dot","cross","ax","ay","az","bx","by","bz","distance","distanceSquared","len","e","elements","transformToVec4","_w","w","qx","qz","qw","ix","qy","iy","iz","iw","value","_zero","_one","BoundingSphere","center","radius","fromPoints","points","Error","_tempVec30","i","fromBox","box","BoundingBox","getCenter","centerX","centerY","centerZ","isNaN","getExtent","extentX","extentY","extentZ","getCorners","minX","minY","minZ","maxX","maxY","maxZ","l","transform","matrix","fromCenterAndExtent","extent","Number","MAX_VALUE","point","fromSphere","sphere","_tempVec31","e0","e1","e2","e4","e5","e6","e8","e9","e10","merge","box1","box2","CollisionUtil","intersectionPointThreePlanes","p1","p2","p3","p1Nor","normal","p2Nor","p3Nor","_tempVec32","c","distancePlaneAndPoint","plane","intersectsPlaneAndPoint","Front","Back","Intersecting","intersectsPlaneAndBox","front","back","intersectsPlaneAndSphere","intersectsRayAndPlane","ray","dir","direction","position","origin","intersectsRayAndBox","dirX","dirY","dirZ","oriX","oriY","oriZ","tmax","inverse","t1","t2","temp","intersectsRayAndSphere","discriminant","intersectsBoxAndBox","boxA","boxB","intersectsSphereAndSphere","sphereA","sphereB","radiisum","intersectsSphereAndBox","closestPoint","intersectsFrustumAndBox","frustum","p","getPlane","frustumContainsPoint","near","Intersects","Disjoint","far","top","bottom","Contains","frustumContainsBox","n","result","frustumContainsSphere","intersectionType","Plane","factor","point0","point1","point2","x0","y0","z0","x1","y1","z1","x2","y2","z2","yz","xz","xy","invPyth","BoundingFrustum","calculateFromMatrix","face","Near","Far","Left","Right","Bottom","Top","me","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","nearNormal","farNormal","leftNormal","rightNormal","bottomNormal","topNormal","intersectsBox","intersectsSphere","Matrix3x3","Float32Array","determinant","a11","a12","a13","a21","a22","a23","a31","a32","a33","b12","b22","b32","identity","invert","rotate","translate","translation","transpose","ret","se","srce","copyFromMatrix","ae","le","re","oe","l11","l12","l13","l21","l22","l23","l31","l32","l33","r11","r12","r13","r21","r22","r23","r31","r32","r33","ee","inv","rotationQuaternion","xx","yx","yy","zx","zy","zz","wx","wy","wz","scaling","det","normalMatrix","mat4","a14","a24","a34","a41","a42","a43","a44","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","sin","cos","Quaternion","conjugate","getAxisAngle","acos","toEuler","_toYawPitchRoll","toYawPitchRoll","rotateX","rad","rotateY","rotateZ","rotationAxisAngle","axis","quat","rotateAxisAngle","_tempQuat1","ww","unit","test","atan2","asin","aw","bw","normalAxis","_tempVector3","rotationEuler","rotationYawPitchRoll","yaw","pitch","roll","halfRoll","halfPitch","halfYaw","sinRoll","cosRoll","sinPitch","cosPitch","sinYaw","cosYaw","cosYawPitch","sinYawPitch","rotationMatrix3x3","half","invDot","slerp","amount","opposite","sign","invSin","rotationX","rotationY","rotationZ","normalized","Matrix","decompose","rotation","rm","_tempMat30","rme","sx","sy","sz","invSX","invSY","invSZ","getRotation","trace","getScaling","getTranslation","l14","l24","l34","l41","l42","l43","l44","r14","r24","r34","r41","r42","r43","r44","multiplyScalar","scalar","rotationTranslation","affineTransformation","lookAt","eye","up","xAxis","yAxis","zAxis","ortho","lr","bt","nf","perspective","fovY","aspect","f","tan","b13","b21","b23","b31","b33","_identity","Ray","intersectPlane","intersectSphere","intersectBox","getPoint","Vector2","Vector4","q","Color","g","_r","_g","_b","_a","color","toLinear","gammaToLinearSpace","toGamma","linearToGammaSpace","getBrightness","pow","Rect","width","height","_width","_height","SphericalHarmonics3","coefficients","addLight","deltaSolidAngle","coe","bv0","bv1","bv2","bv3","bv4","bv5","bv6","bv7","bv8","evaluate","src","sh","Rand","seed0","seed1","reset","randomInt32","_state0","_state1","random"],"mappings":"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"}