{"version":3,"file":"DashLine.js","sources":["../../../src/line/DashLine.ts"],"sourcesContent":["import { Color, Vector2, Texture2D } from \"@galacean/engine\";\nimport { DashMaterial } from \"./material/DashMaterial\";\nimport { Line } from \"./Line\";\nimport { LineVertexBuilder } from \"./vertexBuilder\";\n\n/**\n * Dash Line.\n */\nexport class DashLine extends Line {\n  protected override _material: DashMaterial = null;\n  private _dash: Vector2;\n\n  /**\n   * The dash sequence is a series of on/off lengths in points. e.g. [3, 1] would be 3pt long lines separated by 1pt spaces.\n   */\n  get dash(): Vector2 {\n    return this._dash;\n  }\n\n  set dash(val: Vector2) {\n    this._dash = val;\n    this._renderer?.shaderData.setVector2(\"u_dash\", val);\n    const texture = new Texture2D(this.engine, 1, Math.ceil((val.x + val.y) * 10));\n    texture.setPixelBuffer(this._generateDashTexture(val));\n    this._renderer?.shaderData.setTexture(\"u_texture\", texture);\n  }\n\n  constructor(entity) {\n    super(entity);\n  }\n\n  protected override async _generateData() {\n    return await LineVertexBuilder.instance.dashLine(this._flattenPoints, this._join, this._cap, 0, -1);\n  }\n\n  protected override _initMaterial() {\n    const material = new DashMaterial(this.engine);\n    this._renderer.setMaterial(material);\n    this._material = material;\n  }\n\n  private _generateDashTexture(dash) {\n    const pixels: number[] = [];\n    const length = Math.ceil((dash.x + dash.y) * 10);\n    for (let index = 0; index < length; index++) {\n      if (index < dash.x * 10) {\n        pixels.push(255, 255, 255, 255);\n      } else {\n        pixels.push(255, 255, 255, 0);\n      }\n    }\n    return new Uint8Array(pixels);\n  }\n}\n"],"names":["DashLine","entity","_material","_generateData","LineVertexBuilder","instance","dashLine","_flattenPoints","_join","_cap","_initMaterial","material","DashMaterial","engine","_renderer","setMaterial","_generateDashTexture","dash","pixels","length","Math","ceil","x","y","index","push","Uint8Array","_dash","val","shaderData","setVector2","texture","Texture2D","setPixelBuffer","setTexture","Line"],"mappings":"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"}