import { Shader, CullMode, RenderQueueType, BlendFactor, BlendOperation, Material } from '@galacean/engine';
import './line/material/lineShader.js';

function _set_prototype_of(o, p) {
    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;

        return o;
    };

    return _set_prototype_of(o, p);
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });

    if (superClass) _set_prototype_of(subClass, superClass);
}

var LineMaterial = /*#__PURE__*/ function(Material) {
    _inherits(LineMaterial, Material);
    function LineMaterial(engine) {
        var _this;
        _this = Material.call(this, engine, Shader.find("line")) || this;
        var _this_renderState = _this.renderState, depthState = _this_renderState.depthState, targetBlendState = _this_renderState.blendState.targetBlendState, rasterState = _this_renderState.rasterState;
        rasterState.cullMode = CullMode.Off;
        depthState.writeEnabled = false;
        _this.renderState.renderQueueType = RenderQueueType.Transparent;
        targetBlendState.enabled = true;
        targetBlendState.sourceColorBlendFactor = BlendFactor.SourceAlpha;
        targetBlendState.destinationColorBlendFactor = BlendFactor.OneMinusSourceAlpha;
        targetBlendState.sourceAlphaBlendFactor = BlendFactor.SourceAlpha;
        targetBlendState.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;
        targetBlendState.colorBlendOperation = BlendOperation.Add;
        targetBlendState.alphaBlendOperation = BlendOperation.Add;
        return _this;
    }
    return LineMaterial;
}(Material);

export { LineMaterial as L, _inherits as _ };
//# sourceMappingURL=LineMaterial-1723f22c.js.map
