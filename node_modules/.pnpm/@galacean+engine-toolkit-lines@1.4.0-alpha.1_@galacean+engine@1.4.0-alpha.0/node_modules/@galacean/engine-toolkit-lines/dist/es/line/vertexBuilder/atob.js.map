{"version":3,"file":"atob.js","sources":["../../../../src/line/vertexBuilder/atob.ts"],"sourcesContent":["const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\nfunction InvalidCharacterError(message) {\n  this.message = message;\n}\n\nInvalidCharacterError.prototype = new Error();\nInvalidCharacterError.prototype.name = \"InvalidCharacterError\";\n\nexport function atob(input: string) {\n  let str = String(input).replace(/=+$/, \"\");\n  if (str.length % 4 === 1) {\n    throw new InvalidCharacterError(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n  }\n  let output = \"\";\n  for (\n    // initialize result and counters\n    let bc = 0, bs, buffer, idx = 0;\n    // get next character\n    (buffer = str.charAt(idx++));\n    // character found in table? initialize bit storage and add its ascii value;\n    ~buffer &&\n    ((bs = bc % 4 ? bs * 64 + buffer : buffer),\n    // and if not first of each 4 characters,\n    // convert the first 8 bits to one ascii character\n    bc++ % 4)\n      ? (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6))))\n      : 0\n  ) {\n    // try to find character in table (0-63, not found => -1)\n    buffer = chars.indexOf(buffer);\n  }\n  return output;\n}\n\nexport function btoa(string: string) {\n  string = String(string);\n  let bitmap,\n    a,\n    b,\n    c,\n    result = \"\",\n    i = 0,\n    rest = string.length % 3; // To determine the final padding\n\n  for (; i < string.length; ) {\n    if ((a = string.charCodeAt(i++)) > 255 || (b = string.charCodeAt(i++)) > 255 || (c = string.charCodeAt(i++)) > 255)\n      throw new TypeError(\n        \"Failed to execute 'btoa' on 'Window': The string to be encoded contains characters outside of the Latin1 range.\"\n      );\n\n    bitmap = (a << 16) | (b << 8) | c;\n    result +=\n      chars.charAt((bitmap >> 18) & 63) +\n      chars.charAt((bitmap >> 12) & 63) +\n      chars.charAt((bitmap >> 6) & 63) +\n      chars.charAt(bitmap & 63);\n  }\n\n  // If there's need of padding, replace the last 'A's with equal signs\n  return rest ? result.slice(0, rest - 3) + \"===\".substring(rest) : result;\n}\n"],"names":["chars","InvalidCharacterError","message","prototype","Error","name","atob","input","str","String","replace","length","output","bc","bs","buffer","idx","charAt","fromCharCode","indexOf","btoa","string","bitmap","a","b","c","result","i","rest","charCodeAt","TypeError","slice","substring"],"mappings":"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"}