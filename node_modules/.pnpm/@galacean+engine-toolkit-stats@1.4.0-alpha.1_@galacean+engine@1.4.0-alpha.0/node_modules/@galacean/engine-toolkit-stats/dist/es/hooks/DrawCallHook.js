import { _ as _instanceof } from '../_instanceof-feaa1efa.js';
import { errorLog, log } from '../log.js';
import '@galacean/engine';

var DrawCallHook = /*#__PURE__*/ function() {
    function DrawCallHook(gl) {
        this.drawCall = 0;
        this.triangles = 0;
        this.lines = 0;
        this.points = 0;
        this.realDrawElements = gl.drawElements;
        this.realDrawArrays = gl.drawArrays;
        gl.drawElements = this.hookedDrawElements.bind(this);
        gl.drawArrays = this.hookedDrawArrays.bind(this);
        var hasInstancedFunc = this.hasInstancedFunction(gl);
        if (hasInstancedFunc) {
            // @ts-ignore
            this.realDrawElementsInstanced = gl.drawElementsInstanced;
            // @ts-ignore
            this.realDrawArraysInstanced = gl.drawArraysInstanced;
            // @ts-ignore
            gl.drawElementsInstanced = this.hookedDrawElementsInstanced.bind(this);
            // @ts-ignore
            gl.drawArraysInstanced = this.hookedDrawArraysInstanced.bind(this);
        } else {
            var extAngleInstancedArrays = gl.getExtension("ANGLE_instanced_arrays");
            if (extAngleInstancedArrays) {
                this.realDrawElementsInstanced = extAngleInstancedArrays.drawElementsInstancedANGLE;
                this.realDrawArraysInstanced = extAngleInstancedArrays.drawArraysInstancedANGLE;
                extAngleInstancedArrays.drawElementsInstancedANGLE = this.hookedDrawElementsInstanced.bind(this);
                extAngleInstancedArrays.drawArraysInstancedANGLE = this.hookedDrawArraysInstanced.bind(this);
            } else {
                errorLog("GPU Instancing is not supported.");
            }
        }
        this.hooked = true;
        this.gl = gl;
        log("DrawCall is hooked.");
    }
    var _proto = DrawCallHook.prototype;
    _proto.hasInstancedFunction = function hasInstancedFunction(gl) {
        return _instanceof(gl, WebGL2RenderingContext) || gl.hasOwnProperty("drawElementsInstanced") && gl.hasOwnProperty("drawArraysInstanced");
    };
    _proto.hookedDrawElements = function hookedDrawElements(mode, count, type, offset) {
        this.realDrawElements.call(this.gl, mode, count, type, offset);
        this.update(count, mode);
    };
    _proto.hookedDrawArrays = function hookedDrawArrays(mode, first, count) {
        this.realDrawArrays.call(this.gl, mode, first, count);
        this.update(count, mode);
    };
    _proto.hookedDrawElementsInstanced = function hookedDrawElementsInstanced(mode, count, type, offset, primcount) {
        this.realDrawElementsInstanced.call(this.gl, mode, count, type, offset, primcount);
        this.update(count, mode);
    };
    _proto.hookedDrawArraysInstanced = function hookedDrawArraysInstanced(mode, first, count, primcount) {
        this.realDrawArraysInstanced.call(this.gl, mode, first, count, primcount);
        this.update(count, mode);
    };
    _proto.update = function update(count, mode) {
        var gl = this.gl;
        this.drawCall++;
        switch(mode){
            case gl.TRIANGLES:
                this.triangles += count / 3;
                break;
            case gl.TRIANGLE_STRIP:
            case gl.TRIANGLE_FAN:
                this.triangles += count - 2;
                break;
            case gl.LINES:
                this.lines += count / 2;
                break;
            case gl.LINE_STRIP:
                this.lines += count - 1;
                break;
            case gl.LINE_LOOP:
                this.lines += count;
                break;
            case gl.POINTS:
                this.points += count;
                break;
            default:
                errorLog("Unknown draw mode: " + mode);
                break;
        }
    };
    _proto.reset = function reset() {
        this.drawCall = 0;
        this.triangles = 0;
        this.lines = 0;
        this.points = 0;
    };
    _proto.release = function release() {
        if (this.hooked) {
            var gl = this.gl;
            gl.drawElements = this.realDrawElements;
            gl.drawArrays = this.realDrawArrays;
            var hasInstancedFunc = this.hasInstancedFunction(gl);
            if (hasInstancedFunc) {
                // @ts-ignore
                gl.drawElementsInstanced = this.realDrawElementsInstanced;
                // @ts-ignore
                gl.drawArraysInstanced = this.realDrawArraysInstanced;
            } else {
                var extAngleInstancedArrays = gl.getExtension("ANGLE_instanced_arrays");
                if (extAngleInstancedArrays) {
                    extAngleInstancedArrays.drawElementsInstancedANGLE = this.realDrawElementsInstanced;
                    extAngleInstancedArrays.drawArraysInstancedANGLE = this.realDrawArraysInstanced;
                }
            }
        }
        this.hooked = false;
    };
    return DrawCallHook;
}();

export { DrawCallHook as default };
//# sourceMappingURL=DrawCallHook.js.map
