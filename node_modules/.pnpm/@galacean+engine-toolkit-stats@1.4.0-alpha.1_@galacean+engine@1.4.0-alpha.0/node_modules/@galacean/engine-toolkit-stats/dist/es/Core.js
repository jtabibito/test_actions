import { _ as _instanceof } from './_instanceof-feaa1efa.js';
import DrawCallHook from './hooks/DrawCallHook.js';
import { R as RequestHook } from './RequestHook-17580c86.js';
import ShaderHook from './hooks/ShaderHook.js';
import TextureHook from './hooks/TextureHook.js';
import './log.js';
import '@galacean/engine';

/**
 * Hook gl to calculate stats
 */ var Core = /*#__PURE__*/ function() {
    function Core(gl) {
        this.samplingFrames = 60;
        this.samplingIndex = 0;
        this.updateCounter = 0;
        this.updateTime = 0;
        this.gl = gl;
        this.hook(gl);
    }
    var _proto = Core.prototype;
    _proto.hook = function hook(gl) {
        this.drawCallHook = new DrawCallHook(gl);
        this.textureHook = new TextureHook(gl);
        this.shaderHook = new ShaderHook(gl);
        this.requestHook = new RequestHook();
    };
    /**
   * reset draw call hook
   */ _proto.reset = function reset() {
        this.drawCallHook && this.drawCallHook.reset();
    };
    /**
   * release hook
   */ _proto.release = function release() {
        this.drawCallHook && this.drawCallHook.release();
        this.textureHook && this.textureHook.release();
        this.shaderHook && this.shaderHook.release();
    };
    /**
   * update performance data
   */ _proto.update = function update() {
        this.updateCounter++;
        var now = performance.now();
        if (now - this.updateTime < 1000) {
            return;
        }
        if (this.samplingIndex !== this.samplingFrames) {
            this.reset();
            this.samplingIndex++;
            return;
        }
        this.samplingIndex = 0;
        var data = {
            fps: Math.round(this.updateCounter * 1000 / (now - this.updateTime)),
            memory: performance.memory && performance.memory.usedJSHeapSize / 1048576 >> 0,
            drawCall: this.drawCallHook.drawCall,
            triangles: this.drawCallHook.triangles,
            lines: this.drawCallHook.lines,
            points: this.drawCallHook.points,
            textures: this.textureHook.textures,
            size: this.requestHook.size,
            shaders: this.shaderHook.shaders,
            webglContext: window.hasOwnProperty("WebGL2RenderingContext") && _instanceof(this.gl, WebGL2RenderingContext) ? "2.0" : "1.0"
        };
        this.reset();
        this.updateCounter = 0;
        this.updateTime = now;
        return data;
    };
    return Core;
}();

export { Core };
//# sourceMappingURL=Core.js.map
