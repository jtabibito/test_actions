import { _ as _instanceof } from './_instanceof-feaa1efa.js';

function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;

        if ("value" in descriptor) descriptor.writable = true;

        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);

    return Constructor;
}

var requestSize = 0;
function hookRequest() {
    var originalSend = XMLHttpRequest.prototype.send;
    var cacheMap = new Map();
    function addRequestSize(url, size) {
        if (cacheMap.get(url) == undefined) {
            cacheMap.set(url, size);
            requestSize += size;
        }
    }
    XMLHttpRequest.prototype.send = function(body) {
        this.addEventListener("load", function() {
            var size = 0;
            if (this.responseType === "" || this.responseType === "text") {
                size = new Blob([
                    JSON.stringify(this.responseText)
                ]).size;
            } else if (_instanceof(this.response, Blob)) {
                size = this.response.size;
            } else if (_instanceof(this.response, ArrayBuffer)) {
                size = this.response.byteLength;
            } else if (this.responseType === "json") {
                size = new Blob([
                    JSON.stringify(this.response)
                ]).size;
            }
            addRequestSize(this.responseURL, size);
        }, false);
        originalSend.call(this, body);
        var originalImageSrc = Object.getOwnPropertyDescriptor(Image.prototype, "src").set;
        this.originalImageSrc = originalImageSrc;
        Object.defineProperty(Image.prototype, "src", {
            set: function set(value) {
                var _this = this;
                fetch(value).then(function(response) {
                    if (response.ok) {
                        response.blob().then(function(blob) {
                            addRequestSize(_this.responseURL, blob.size);
                        });
                    }
                });
                originalImageSrc.call(this, value);
            }
        });
    };
}
var RequestHook = /*#__PURE__*/ function() {
    function RequestHook() {
        this._hooked = false;
        this._hooked = true;
    }
    var _proto = RequestHook.prototype;
    _proto.reset = function reset() {
        requestSize = 0;
    };
    _proto.release = function release() {
        if (this._hooked) {
            XMLHttpRequest.prototype.send = this._originalSend;
            Object.defineProperty(Image.prototype, "src", {
                set: function set(value) {
                    this.src.call(this, value);
                }
            });
        }
        this._hooked = false;
    };
    _create_class(RequestHook, [
        {
            key: "size",
            get: function get() {
                return formatNumber(requestSize / 1024 / 1024);
            }
        }
    ]);
    return RequestHook;
}();
function formatNumber(num) {
    return Number(num).toFixed(Math.max(6 - num.toString().split(".")[0].length, 0));
}

export { RequestHook as R, _create_class as _, hookRequest as h };
//# sourceMappingURL=RequestHook-17580c86.js.map
