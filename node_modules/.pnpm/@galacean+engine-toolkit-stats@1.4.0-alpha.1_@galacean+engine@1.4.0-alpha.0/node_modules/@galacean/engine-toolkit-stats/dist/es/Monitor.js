import { Core } from './Core.js';
import './_instanceof-feaa1efa.js';
import './hooks/DrawCallHook.js';
import './log.js';
import '@galacean/engine';
import './RequestHook-17580c86.js';
import './hooks/ShaderHook.js';
import './hooks/TextureHook.js';

var tpl = '\n  <dl>\n    <dt>FPS</dt>\n    <dd>0</dd>\n    <dt>Memory <span class="unit">(MB)</span></dt>\n    <dd>0</dd>\n    <dt>DrawCall</dt>\n    <dd>0</dd>\n    <dt>Triangles</dt>\n    <dd>0</dd>\n    <dt>Textures</dt>\n    <dd>0</dd>\n    <dt>Shaders</dt>\n    <dd>0</dd>\n    <dt>Network Size <span class="unit">(MB)</span></dt>\n    <dd>0</dd>\n    <dt>WebGL</dt>\n    <dd></dd>\n  </dl>\n';
var css = "\n  .gl-perf {\n    pointer-events: none;\n    user-select: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    padding: " + 10 / 7.5 + "vh " + 10 / 7.5 + "vh 0 " + 10 / 7.5 + "vh;\n    background: rgba(0, 0, 0, 0.3);\n    color: #fff;\n    font: " + 10 / 7.5 + "vh arial;\n  }\n\n  .gl-perf dl,\n  .gl-perf dt,\n  .gl-perf dd {\n    padding: 0;\n    margin: 0;\n  }\n\n  .gl-perf dt {\n    color: #fff;\n    text-shadow: #000 0 0 1px;\n  }\n\n  .gl-perf dt .unit{\n    font-size: " + 10 / 7.5 + "vh;\n  }\n\n  .gl-perf dd {\n    font-size: " + 20 / 7.5 + "vh;\n    padding: " + 10 / 7.5 + "vh 0 " + 10 / 7.5 + "vh;\n  }\n";
var Monitor = /*#__PURE__*/ function() {
    function Monitor(gl) {
        this.core = new Core(gl);
        this.items = [];
        this.items = [
            "fps",
            "memory",
            "drawCall",
            "triangles",
            "textures",
            "shaders",
            "size",
            "webglContext"
        ];
        this.createContainer();
        this.update = this.update.bind(this);
    }
    var _proto = Monitor.prototype;
    _proto.createContainer = function createContainer() {
        var container = document.createElement("div");
        container.classList.add("gl-perf");
        container.innerHTML = tpl;
        container.appendChild(this.createStyle());
        document.body.appendChild(container);
        this.doms = Array.prototype.slice.apply(container.querySelectorAll("dd"));
        this.container = container;
    };
    _proto.createStyle = function createStyle() {
        var style = document.createElement("style");
        style.type = "text/css";
        style.appendChild(document.createTextNode(css));
        return style;
    };
    /**
   * Update per frame
   */ _proto.update = function update() {
        var data = this.core.update();
        if (data) {
            var _this, _loop = function(i, l) {
                var dom = _this.doms[i];
                var item = _this.items[i];
                var value = data[item] || 0;
                // see: http://wilsonpage.co.uk/preventing-layout-thrashing/
                requestAnimationFrame(function() {
                    dom.innerText = value;
                });
            };
            for(var i = 0, l = this.items.length; i < l; i++)_this = this, _loop(i, l);
        }
    };
    /**
   * reset all hooks
   */ _proto.reset = function reset() {
        this.core.reset();
    };
    /**
   * release all hooks
   */ _proto.release = function release() {
        this.core.release();
    };
    /**
   * destroy the instance
   */ _proto.destroy = function destroy() {
        this.release();
        document.body.removeChild(this.container);
    };
    return Monitor;
}();

export { Monitor as default };
//# sourceMappingURL=Monitor.js.map
