import { h as hookRequest, _ as _create_class } from './RequestHook-17580c86.js';
import { Script } from '@galacean/engine';
import Monitor from './Monitor.js';
import './Core.js';
import './_instanceof-feaa1efa.js';
import './hooks/DrawCallHook.js';
import './log.js';
import './hooks/ShaderHook.js';
import './hooks/TextureHook.js';

function _set_prototype_of(o, p) {
    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;

        return o;
    };

    return _set_prototype_of(o, p);
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });

    if (superClass) _set_prototype_of(subClass, superClass);
}

/**
 * Display engine status data such as FPS.
 */ var Stats = /*#__PURE__*/ function(Script) {
    _inherits(Stats, Script);
    function Stats() {
        return Script.apply(this, arguments);
    }
    var _proto = Stats.prototype;
    _proto.onBeginRender = function onBeginRender(camera) {
        this.camera = camera;
        if (!this.monitor) {
            this._setupMonitor();
        }
    };
    _proto.onEndRender = function onEndRender(camera) {
        if (this.monitor) {
            this.monitor.update();
        }
    };
    _proto._setupMonitor = function _setupMonitor() {
        // @ts-ignore
        var gl = this.camera.engine._hardwareRenderer.gl;
        if (gl) {
            this.monitor = new Monitor(gl);
        }
    };
    Stats.hookRequest = function hookRequest1() {
        hookRequest();
    };
    _create_class(Stats, [
        {
            key: "enabled",
            set: function set(value) {
                value ? this._setupMonitor() : this.monitor.destroy();
            }
        }
    ]);
    return Stats;
}(Script);

export { Stats };
//# sourceMappingURL=Stats.js.map
