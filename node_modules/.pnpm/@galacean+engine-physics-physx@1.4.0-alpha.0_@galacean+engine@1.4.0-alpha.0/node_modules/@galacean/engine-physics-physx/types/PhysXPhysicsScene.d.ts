import { Ray, Vector3 } from "@galacean/engine";
import { IPhysicsScene } from "@galacean/engine-design";
import { PhysXCharacterController } from "./PhysXCharacterController";
import { PhysXCollider } from "./PhysXCollider";
import { PhysXPhysics } from "./PhysXPhysics";
import { PhysXPhysicsManager } from "./PhysXPhysicsManager";
import { PhysXColliderShape } from "./shape/PhysXColliderShape";
/**
 * A manager is a collection of colliders and constraints which can interact.
 */
export declare class PhysXPhysicsScene implements IPhysicsScene {
    private static _tempPosition;
    private static _tempNormal;
    private _physXPhysics;
    private _physXManager;
    private _pxRaycastHit;
    private _pxFilterData;
    private _pxScene;
    private readonly _onContactEnter?;
    private readonly _onContactExit?;
    private readonly _onContactStay?;
    private readonly _onTriggerEnter?;
    private readonly _onTriggerExit?;
    private readonly _onTriggerStay?;
    private _currentEvents;
    private _eventPool;
    constructor(physXPhysics: PhysXPhysics, physicsManager: PhysXPhysicsManager, onContactEnter?: (obj1: number, obj2: number) => void, onContactExit?: (obj1: number, obj2: number) => void, onContactStay?: (obj1: number, obj2: number) => void, onTriggerEnter?: (obj1: number, obj2: number) => void, onTriggerExit?: (obj1: number, obj2: number) => void, onTriggerStay?: (obj1: number, obj2: number) => void);
    /**
     * {@inheritDoc IPhysicsManager.setGravity }
     */
    setGravity(value: Vector3): void;
    /**
     * {@inheritDoc IPhysicsManager.addColliderShape }
     */
    addColliderShape(colliderShape: PhysXColliderShape): void;
    /**
     * {@inheritDoc IPhysicsManager.removeColliderShape }
     */
    removeColliderShape(colliderShape: PhysXColliderShape): void;
    /**
     * {@inheritDoc IPhysicsManager.addCollider }
     */
    addCollider(collider: PhysXCollider): void;
    /**
     * {@inheritDoc IPhysicsManager.removeCollider }
     */
    removeCollider(collider: PhysXCollider): void;
    /**
     * {@inheritDoc IPhysicsManager.addCharacterController }
     */
    addCharacterController(characterController: PhysXCharacterController): void;
    /**
     * {@inheritDoc IPhysicsManager.removeCharacterController }
     */
    removeCharacterController(characterController: PhysXCharacterController): void;
    /**
     * {@inheritDoc IPhysicsManager.update }
     */
    update(elapsedTime: number): void;
    /**
     * {@inheritDoc IPhysicsManager.raycast }
     */
    raycast(ray: Ray, distance: number, onRaycast: (obj: number) => boolean, hit?: (shapeUniqueID: number, distance: number, position: Vector3, normal: Vector3) => void): boolean;
    private _simulate;
    private _fetchResults;
    private _getTrigger;
    private _fireEvent;
}
/**
 * Physics state
 */
declare enum TriggerEventState {
    Enter = 0,
    Stay = 1,
    Exit = 2
}
/**
 * Trigger event to store interactive object ids and state.
 */
export declare class TriggerEvent {
    state: TriggerEventState;
    index1: number;
    index2: number;
    constructor(index1: number, index2: number);
}
export {};
