import { IHingeJoint } from "@galacean/engine-design";
import { Vector3 } from "@galacean/engine";
import { PhysXCollider } from "../PhysXCollider";
import { PhysXPhysics } from "../PhysXPhysics";
import { PhysXJoint } from "./PhysXJoint";
/**
 * A joint which behaves in a similar way to a hinge or axle.
 */
export declare class PhysXHingeJoint extends PhysXJoint implements IHingeJoint {
    private _axisRotationQuaternion;
    private _swingOffset;
    constructor(physXPhysics: PhysXPhysics, collider: PhysXCollider);
    /**
     * {@inheritDoc IHingeJoint.setAxis }
     */
    setAxis(value: Vector3): void;
    /**
     * {@inheritDoc IHingeJoint.setSwingOffset }
     */
    setSwingOffset(value: Vector3): void;
    /**
     * {@inheritDoc IHingeJoint.getAngle }
     */
    getAngle(): number;
    /**
     * {@inheritDoc IHingeJoint.getVelocity }
     */
    getVelocity(): Readonly<number>;
    /**
     * {@inheritDoc IHingeJoint.setHardLimitCone }
     */
    setHardLimit(lowerLimit: number, upperLimit: number, contactDist: number): void;
    /**
     * {@inheritDoc IHingeJoint.setHardLimitCone }
     */
    setSoftLimit(lowerLimit: number, upperLimit: number, stiffness: number, damping: number): void;
    /**
     * {@inheritDoc IHingeJoint.setDriveVelocity }
     */
    setDriveVelocity(velocity: number, autowake?: boolean): void;
    /**
     * {@inheritDoc IHingeJoint.setDriveForceLimit }
     */
    setDriveForceLimit(limit: number): void;
    /**
     * {@inheritDoc IHingeJoint.setDriveGearRatio }
     */
    setDriveGearRatio(ratio: number): void;
    /**
     * {@inheritDoc IHingeJoint.setHingeJointFlag }
     */
    setHingeJointFlag(flag: number, value: boolean): void;
}
