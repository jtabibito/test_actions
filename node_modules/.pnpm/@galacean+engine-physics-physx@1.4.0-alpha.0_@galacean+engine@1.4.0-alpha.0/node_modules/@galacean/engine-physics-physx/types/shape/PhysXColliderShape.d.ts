import { Quaternion, Vector3 } from "@galacean/engine";
import { IColliderShape } from "@galacean/engine-design";
import { PhysXPhysics } from "../PhysXPhysics";
import { PhysXPhysicsMaterial } from "../PhysXPhysicsMaterial";
/**
 * Flags which affect the behavior of Shapes.
 */
export declare enum ShapeFlag {
    /** The shape will partake in collision in the physical simulation. */
    SIMULATION_SHAPE = 1,
    /** The shape will partake in scene queries (ray casts, overlap tests, sweeps, ...). */
    SCENE_QUERY_SHAPE = 2,
    /** The shape is a trigger which can send reports whenever other shapes enter/leave its volume. */
    TRIGGER_SHAPE = 4
}
/**
 * Abstract class for collider shapes.
 */
export declare abstract class PhysXColliderShape implements IColliderShape {
    static readonly halfSqrt: number;
    static transform: {
        translation: Vector3;
        rotation: any;
    };
    protected _physXPhysics: PhysXPhysics;
    protected _worldScale: Vector3;
    protected _position: Vector3;
    protected _rotation: Vector3;
    protected _axis: Quaternion;
    protected _physXRotation: Quaternion;
    private _shapeFlags;
    constructor(physXPhysics: PhysXPhysics);
    /**
     * {@inheritDoc IColliderShape.setRotation }
     */
    setRotation(value: Vector3): void;
    /**
     * {@inheritDoc IColliderShape.setPosition }
     */
    setPosition(value: Vector3): void;
    /**
     * {@inheritDoc IColliderShape.setWorldScale }
     */
    setWorldScale(scale: Vector3): void;
    /**
     * {@inheritDoc IColliderShape.setContactOffset }
     * @default 0.02f * PxTolerancesScale::length
     */
    setContactOffset(offset: number): void;
    /**
     * {@inheritDoc IColliderShape.setMaterial }
     */
    setMaterial(value: PhysXPhysicsMaterial): void;
    /**
     * {@inheritDoc IColliderShape.setIsTrigger }
     */
    setIsTrigger(value: boolean): void;
    /**
     * {@inheritDoc IColliderShape.destroy }
     */
    destroy(): void;
    protected _setLocalPose(): void;
    protected _initialize(material: PhysXPhysicsMaterial, id: number): void;
    private _modifyFlag;
}
