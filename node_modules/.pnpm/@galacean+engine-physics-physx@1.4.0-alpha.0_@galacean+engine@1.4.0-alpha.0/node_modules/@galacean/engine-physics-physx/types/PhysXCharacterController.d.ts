import { ICharacterController } from "@galacean/engine-design";
import { Vector3 } from "@galacean/engine";
import { PhysXPhysics } from "./PhysXPhysics";
import { PhysXColliderShape } from "./shape/PhysXColliderShape";
/**
 * Base class for character controllers.
 */
export declare class PhysXCharacterController implements ICharacterController {
    private static _tempVec;
    private _shapeScaledPosition;
    private _worldPosition;
    private _physXPhysics;
    constructor(physXPhysics: PhysXPhysics);
    /**
     * {@inheritDoc ICharacterController.move }
     */
    move(disp: Vector3, minDist: number, elapsedTime: number): number;
    /**
     * {@inheritDoc ICharacterController.setWorldPosition }
     */
    setWorldPosition(position: Vector3): void;
    /**
     * {@inheritDoc ICharacterController.getWorldPosition }
     */
    getWorldPosition(position: Vector3): void;
    /**
     * {@inheritDoc ICharacterController.setStepOffset }
     */
    setStepOffset(offset: number): void;
    /**
     * {@inheritDoc ICharacterController.setNonWalkableMode }
     */
    setNonWalkableMode(flag: number): void;
    /**
     * {@inheritDoc ICharacterController.setUpDirection }
     */
    setUpDirection(up: Vector3): void;
    /**
     * {@inheritDoc ICharacterController.setSlopeLimit }
     */
    setSlopeLimit(slopeLimit: number): void;
    /**
     * {@inheritDoc ICharacterController.addShape }
     */
    addShape(shape: PhysXColliderShape): void;
    /**
     * {@inheritDoc ICharacterController.removeShape }
     */
    removeShape(shape: PhysXColliderShape): void;
    /**
     * {@inheritDoc ICharacterController.destroy }
     */
    destroy(): void;
    private _updateNativePosition;
}
