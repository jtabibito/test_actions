import { IPhysicsMaterial } from "@galacean/engine-design";
import { PhysXPhysics } from "./PhysXPhysics";
/**
 * Physics material describes how to handle colliding objects (friction, bounciness).
 */
export declare class PhysXPhysicsMaterial implements IPhysicsMaterial {
    protected _physXPhysics: PhysXPhysics;
    constructor(physXPhysics: PhysXPhysics, staticFriction: number, dynamicFriction: number, bounciness: number, frictionCombine: CombineMode, bounceCombine: CombineMode);
    /**
     * {@inheritDoc IPhysicsMaterial.setBounciness }
     */
    setBounciness(value: number): void;
    /**
     * {@inheritDoc IPhysicsMaterial.setDynamicFriction }
     */
    setDynamicFriction(value: number): void;
    /**
     * {@inheritDoc IPhysicsMaterial.setStaticFriction }
     */
    setStaticFriction(value: number): void;
    /**
     * {@inheritDoc IPhysicsMaterial.setBounceCombine }
     */
    setBounceCombine(value: CombineMode): void;
    /**
     * {@inheritDoc IPhysicsMaterial.setFrictionCombine }
     */
    setFrictionCombine(value: CombineMode): void;
    /**
     * {@inheritDoc IPhysicsMaterial.destroy }
     */
    destroy(): void;
}
/**
 * Describes how physics materials of the colliding objects are combined.
 */
declare enum CombineMode {
    /** Averages the friction/bounce of the two colliding materials. */
    Average = 0,
    /** Uses the smaller friction/bounce of the two colliding materials. */
    Minimum = 1,
    /** Multiplies the friction/bounce of the two colliding materials. */
    Multiply = 2,
    /** Uses the larger friction/bounce of the two colliding materials. */
    Maximum = 3
}
export {};
