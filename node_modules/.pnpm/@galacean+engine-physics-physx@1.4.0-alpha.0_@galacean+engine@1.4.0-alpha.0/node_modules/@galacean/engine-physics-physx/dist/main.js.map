{"version":3,"file":"main.js","sources":["../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_instanceof.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_type_of.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_set_prototype_of.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_inherits.js","../src/shape/PhysXColliderShape.ts","../src/shape/PhysXBoxColliderShape.ts","../src/shape/PhysXCapsuleColliderShape.ts","../src/PhysXCharacterController.ts","../src/PhysXCollider.ts","../src/PhysXDynamicCollider.ts","../src/PhysXPhysicsManager.ts","../src/PhysXPhysicsMaterial.ts","../src/PhysXPhysicsScene.ts","../src/PhysXStaticCollider.ts","../src/enum/PhysXRuntimeMode.ts","../src/joint/PhysXJoint.ts","../src/joint/PhysXFixedJoint.ts","../src/joint/PhysXHingeJoint.ts","../src/joint/PhysXSpringJoint.ts","../src/shape/PhysXPlaneColliderShape.ts","../src/shape/PhysXSphereColliderShape.ts","../src/PhysXPhysics.ts","../src/index.ts"],"sourcesContent":["function _instanceof(left, right) {\n    if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n        return !!right[Symbol.hasInstance](left);\n    } else return left instanceof right;\n}\nexport { _instanceof as _ };\n","function _type_of(obj) {\n    \"@swc/helpers - typeof\";\n\n    return obj && typeof Symbol !== \"undefined\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n}\nexport { _type_of as _ };\n","function _set_prototype_of(o, p) {\n    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {\n        o.__proto__ = p;\n\n        return o;\n    };\n\n    return _set_prototype_of(o, p);\n}\nexport { _set_prototype_of as _ };\n","import { _ as _set_prototype_of } from \"./_set_prototype_of.js\";\n\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });\n\n    if (superClass) _set_prototype_of(subClass, superClass);\n}\nexport { _inherits as _ };\n","import { Quaternion, Vector3, DisorderedArray } from \"@galacean/engine\";\nimport { IColliderShape } from \"@galacean/engine-design\";\nimport { PhysXCharacterController } from \"../PhysXCharacterController\";\nimport { PhysXPhysics } from \"../PhysXPhysics\";\nimport { PhysXPhysicsMaterial } from \"../PhysXPhysicsMaterial\";\n\n/**\n * Flags which affect the behavior of Shapes.\n */\nexport enum ShapeFlag {\n  /** The shape will partake in collision in the physical simulation. */\n  SIMULATION_SHAPE = 1 << 0,\n  /** The shape will partake in scene queries (ray casts, overlap tests, sweeps, ...). */\n  SCENE_QUERY_SHAPE = 1 << 1,\n  /** The shape is a trigger which can send reports whenever other shapes enter/leave its volume. */\n  TRIGGER_SHAPE = 1 << 2\n}\n\n/**\n * Abstract class for collider shapes.\n */\nexport abstract class PhysXColliderShape implements IColliderShape {\n  static readonly halfSqrt: number = 0.70710678118655;\n  static transform = {\n    translation: new Vector3(),\n    rotation: null\n  };\n\n  /** @internal */\n  _controllers: DisorderedArray<PhysXCharacterController> = new DisorderedArray<PhysXCharacterController>();\n\n  protected _physXPhysics: PhysXPhysics;\n  protected _worldScale: Vector3 = new Vector3(1, 1, 1);\n  protected _position: Vector3 = new Vector3();\n  protected _rotation: Vector3 = null;\n  protected _axis: Quaternion = null;\n  protected _physXRotation: Quaternion = new Quaternion();\n\n  private _shapeFlags: ShapeFlag = ShapeFlag.SCENE_QUERY_SHAPE | ShapeFlag.SIMULATION_SHAPE;\n\n  /** @internal */\n  _pxMaterial: any;\n  /** @internal */\n  _pxShape: any;\n  /** @internal */\n  _pxGeometry: any;\n  /** @internal */\n  _id: number;\n\n  constructor(physXPhysics: PhysXPhysics) {\n    this._physXPhysics = physXPhysics;\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.setRotation }\n   */\n  setRotation(value: Vector3): void {\n    this._rotation = value;\n    Quaternion.rotationYawPitchRoll(value.x, value.y, value.z, this._physXRotation);\n    this._axis && Quaternion.multiply(this._physXRotation, this._axis, this._physXRotation);\n    this._physXRotation.normalize();\n    this._setLocalPose();\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.setPosition }\n   */\n  setPosition(value: Vector3): void {\n    if (value !== this._position) {\n      this._position.copyFrom(value);\n    }\n    const controllers = this._controllers;\n    for (let i = 0, n = controllers.length; i < n; i++) {\n      controllers.get(i)._updateShapePosition(this._position, this._worldScale);\n    }\n\n    this._setLocalPose();\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.setWorldScale }\n   */\n  setWorldScale(scale: Vector3): void {\n    this._worldScale.copyFrom(scale);\n    this._setLocalPose();\n\n    const controllers = this._controllers;\n    for (let i = 0, n = controllers.length; i < n; i++) {\n      controllers.get(i)._updateShapePosition(this._position, this._worldScale);\n    }\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.setContactOffset }\n   * @default 0.02f * PxTolerancesScale::length\n   */\n  setContactOffset(offset: number): void {\n    this._pxShape.setContactOffset(offset);\n\n    const controllers = this._controllers;\n    for (let i = 0, n = controllers.length; i < n; i++) {\n      controllers.get(i)._pxController?.setContactOffset(offset);\n    }\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.setMaterial }\n   */\n  setMaterial(value: PhysXPhysicsMaterial): void {\n    this._pxMaterial = value._pxMaterial;\n    this._pxShape.setMaterial(this._pxMaterial);\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.setIsTrigger }\n   */\n  setIsTrigger(value: boolean): void {\n    this._modifyFlag(ShapeFlag.SIMULATION_SHAPE, !value);\n    this._modifyFlag(ShapeFlag.TRIGGER_SHAPE, value);\n    this._setShapeFlags(this._shapeFlags);\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.destroy }\n   */\n  destroy(): void {\n    this._pxShape.release();\n  }\n\n  /**\n   *  @internal\n   */\n  _setShapeFlags(flags: ShapeFlag) {\n    this._shapeFlags = flags;\n    this._pxShape.setFlags(new this._physXPhysics._physX.PxShapeFlags(this._shapeFlags));\n  }\n\n  protected _setLocalPose(): void {\n    const transform = PhysXColliderShape.transform;\n    Vector3.multiply(this._position, this._worldScale, transform.translation);\n    transform.rotation = this._physXRotation;\n    this._pxShape.setLocalPose(transform);\n  }\n\n  protected _initialize(material: PhysXPhysicsMaterial, id: number): void {\n    this._id = id;\n    this._pxMaterial = material._pxMaterial;\n    this._pxShape = this._physXPhysics._pxPhysics.createShape(\n      this._pxGeometry,\n      material._pxMaterial,\n      true,\n      new this._physXPhysics._physX.PxShapeFlags(this._shapeFlags)\n    );\n    this._pxShape.setUUID(id);\n  }\n\n  private _modifyFlag(flag: ShapeFlag, value: boolean): void {\n    this._shapeFlags = value ? this._shapeFlags | flag : this._shapeFlags & ~flag;\n  }\n}\n","import { Vector3 } from \"@galacean/engine\";\nimport { IBoxColliderShape } from \"@galacean/engine-design\";\nimport { PhysXPhysics } from \"../PhysXPhysics\";\nimport { PhysXPhysicsMaterial } from \"../PhysXPhysicsMaterial\";\nimport { PhysXColliderShape } from \"./PhysXColliderShape\";\n\n/**\n * Box collider shape in PhysX.\n */\nexport class PhysXBoxColliderShape extends PhysXColliderShape implements IBoxColliderShape {\n  private static _tempHalfExtents = new Vector3();\n  /** @internal */\n  _halfSize: Vector3 = new Vector3();\n  private _sizeScale: Vector3 = new Vector3(1, 1, 1);\n\n  constructor(physXPhysics: PhysXPhysics, uniqueID: number, size: Vector3, material: PhysXPhysicsMaterial) {\n    super(physXPhysics);\n    const halfSize = this._halfSize;\n    halfSize.set(size.x * 0.5, size.y * 0.5, size.z * 0.5);\n    this._pxGeometry = new physXPhysics._physX.PxBoxGeometry(halfSize.x, halfSize.y, halfSize.z);\n    this._initialize(material, uniqueID);\n    this._setLocalPose();\n  }\n\n  /**\n   * {@inheritDoc IBoxColliderShape.setSize }\n   */\n  setSize(value: Vector3): void {\n    const halfSize = this._halfSize;\n    const tempExtents = PhysXBoxColliderShape._tempHalfExtents;\n    halfSize.set(value.x * 0.5, value.y * 0.5, value.z * 0.5);\n    Vector3.multiply(halfSize, this._sizeScale, tempExtents);\n    this._pxGeometry.halfExtents = tempExtents;\n    this._pxShape.setGeometry(this._pxGeometry);\n\n    this._updateController(tempExtents);\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.setWorldScale }\n   */\n  override setWorldScale(scale: Vector3): void {\n    super.setWorldScale(scale);\n    this._sizeScale.set(Math.abs(scale.x), Math.abs(scale.y), Math.abs(scale.z));\n    const tempExtents = PhysXBoxColliderShape._tempHalfExtents;\n    Vector3.multiply(this._halfSize, this._sizeScale, tempExtents);\n    this._pxGeometry.halfExtents = tempExtents;\n    this._pxShape.setGeometry(this._pxGeometry);\n\n    this._updateController(tempExtents);\n  }\n\n  private _updateController(extents: Vector3) {\n    const controllers = this._controllers;\n    for (let i = 0, n = controllers.length; i < n; i++) {\n      const pxController = controllers.get(i)._pxController;\n\n      if (pxController) {\n        pxController.setHalfHeight(extents.x);\n        pxController.setHalfSideExtent(extents.y);\n        pxController.setHalfForwardExtent(extents.z);\n      }\n    }\n  }\n}\n","import { ICapsuleColliderShape } from \"@galacean/engine-design\";\nimport { Quaternion, Vector3 } from \"@galacean/engine\";\nimport { PhysXPhysics } from \"../PhysXPhysics\";\nimport { PhysXPhysicsMaterial } from \"../PhysXPhysicsMaterial\";\nimport { PhysXColliderShape } from \"./PhysXColliderShape\";\n\n/**\n * Capsule collider shape in PhysX.\n */\nexport class PhysXCapsuleColliderShape extends PhysXColliderShape implements ICapsuleColliderShape {\n  /** @internal */\n  _radius: number;\n  /** @internal */\n  _halfHeight: number;\n  private _upAxis: ColliderShapeUpAxis = ColliderShapeUpAxis.Y;\n  private _sizeScale: Vector3 = new Vector3(1, 1, 1);\n\n  constructor(\n    physXPhysics: PhysXPhysics,\n    uniqueID: number,\n    radius: number,\n    height: number,\n    material: PhysXPhysicsMaterial\n  ) {\n    super(physXPhysics);\n\n    this._radius = radius;\n    this._halfHeight = height * 0.5;\n    this._axis = new Quaternion(0, 0, PhysXColliderShape.halfSqrt, PhysXColliderShape.halfSqrt);\n    this._physXRotation.copyFrom(this._axis);\n\n    this._pxGeometry = new physXPhysics._physX.PxCapsuleGeometry(this._radius, this._halfHeight);\n    this._initialize(material, uniqueID);\n    this._setLocalPose();\n  }\n\n  /**\n   * {@inheritDoc ICapsuleColliderShape.setRadius }\n   */\n  setRadius(value: number): void {\n    this._radius = value;\n    const sizeScale = this._sizeScale;\n    switch (this._upAxis) {\n      case ColliderShapeUpAxis.X:\n        this._pxGeometry.radius = this._radius * Math.max(sizeScale.y, sizeScale.z);\n        break;\n      case ColliderShapeUpAxis.Y:\n        this._pxGeometry.radius = this._radius * Math.max(sizeScale.x, sizeScale.z);\n        break;\n      case ColliderShapeUpAxis.Z:\n        this._pxGeometry.radius = this._radius * Math.max(sizeScale.x, sizeScale.y);\n        break;\n    }\n    this._pxShape.setGeometry(this._pxGeometry);\n\n    const radius = this._pxGeometry.radius;\n    const controllers = this._controllers;\n    for (let i = 0, n = controllers.length; i < n; i++) {\n      controllers.get(i)._pxController?.setRadius(radius);\n    }\n  }\n\n  /**\n   * {@inheritDoc ICapsuleColliderShape.setHeight }\n   */\n  setHeight(value: number): void {\n    this._halfHeight = value * 0.5;\n    const sizeScale = this._sizeScale;\n    switch (this._upAxis) {\n      case ColliderShapeUpAxis.X:\n        this._pxGeometry.halfHeight = this._halfHeight * sizeScale.x;\n        break;\n      case ColliderShapeUpAxis.Y:\n        this._pxGeometry.halfHeight = this._halfHeight * sizeScale.y;\n        break;\n      case ColliderShapeUpAxis.Z:\n        this._pxGeometry.halfHeight = this._halfHeight * sizeScale.z;\n        break;\n    }\n    this._pxShape.setGeometry(this._pxGeometry);\n\n    const height = this._pxGeometry.halfHeight * 2;\n    const controllers = this._controllers;\n    for (let i = 0, n = controllers.length; i < n; i++) {\n      controllers.get(i)._pxController?.setHeight(height);\n    }\n  }\n\n  /**\n   * {@inheritDoc ICapsuleColliderShape.setUpAxis }\n   */\n  setUpAxis(upAxis: ColliderShapeUpAxis): void {\n    const { _rotation: rotation, _axis: axis, _physXRotation: physXRotation } = this;\n\n    this._upAxis = upAxis;\n    switch (this._upAxis) {\n      case ColliderShapeUpAxis.X:\n        axis.set(0, 0, 0, 1);\n        break;\n      case ColliderShapeUpAxis.Y:\n        axis.set(0, 0, PhysXColliderShape.halfSqrt, PhysXColliderShape.halfSqrt);\n        break;\n      case ColliderShapeUpAxis.Z:\n        axis.set(0, PhysXColliderShape.halfSqrt, 0, PhysXColliderShape.halfSqrt);\n        break;\n    }\n    if (rotation) {\n      Quaternion.rotationYawPitchRoll(rotation.x, rotation.y, rotation.z, physXRotation);\n      Quaternion.multiply(physXRotation, axis, physXRotation);\n    } else {\n      physXRotation.copyFrom(axis);\n    }\n    this._setLocalPose();\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.setWorldScale }\n   */\n  override setWorldScale(scale: Vector3): void {\n    super.setWorldScale(scale);\n\n    const sizeScale = this._sizeScale.set(Math.abs(scale.x), Math.abs(scale.y), Math.abs(scale.z));\n    const geometry = this._pxGeometry;\n    switch (this._upAxis) {\n      case ColliderShapeUpAxis.X:\n        geometry.radius = this._radius * Math.max(sizeScale.y, sizeScale.z);\n        geometry.halfHeight = this._halfHeight * sizeScale.x;\n        break;\n      case ColliderShapeUpAxis.Y:\n        geometry.radius = this._radius * Math.max(sizeScale.x, sizeScale.z);\n        geometry.halfHeight = this._halfHeight * sizeScale.y;\n        break;\n      case ColliderShapeUpAxis.Z:\n        geometry.radius = this._radius * Math.max(sizeScale.x, sizeScale.y);\n        geometry.halfHeight = this._halfHeight * sizeScale.z;\n        break;\n    }\n    this._pxShape.setGeometry(geometry);\n\n    const radius = geometry.radius;\n    const height = geometry.halfHeight * 2;\n    const controllers = this._controllers;\n    for (let i = 0, n = controllers.length; i < n; i++) {\n      const pxController = controllers.get(i)._pxController;\n      if (pxController) {\n        pxController.setRadius(radius);\n        pxController.setHeight(height);\n      }\n    }\n  }\n}\n\n/**\n * The up axis of the collider shape.\n */\nenum ColliderShapeUpAxis {\n  /** Up axis is X. */\n  X,\n  /** Up axis is Y. */\n  Y,\n  /** Up axis is Z. */\n  Z\n}\n","import { ICharacterController } from \"@galacean/engine-design\";\nimport { Vector3 } from \"@galacean/engine\";\nimport { PhysXPhysics } from \"./PhysXPhysics\";\nimport { PhysXPhysicsScene } from \"./PhysXPhysicsScene\";\nimport { PhysXBoxColliderShape } from \"./shape/PhysXBoxColliderShape\";\nimport { PhysXCapsuleColliderShape } from \"./shape/PhysXCapsuleColliderShape\";\nimport { PhysXColliderShape } from \"./shape/PhysXColliderShape\";\n\n/**\n * Base class for character controllers.\n */\nexport class PhysXCharacterController implements ICharacterController {\n  private static _tempVec = new Vector3();\n\n  /** @internal */\n  _id: number;\n  /** @internal */\n  _pxController: any;\n  /** @internal */\n  _pxManager: PhysXPhysicsScene;\n  /** @internal */\n  _shape: PhysXColliderShape;\n  private _shapeScaledPosition = new Vector3();\n  private _worldPosition: Vector3 = null;\n\n  private _physXPhysics: PhysXPhysics;\n\n  constructor(physXPhysics: PhysXPhysics) {\n    this._physXPhysics = physXPhysics;\n  }\n\n  /**\n   * {@inheritDoc ICharacterController.move }\n   */\n  move(disp: Vector3, minDist: number, elapsedTime: number): number {\n    return this._pxController?.move(disp, minDist, elapsedTime) ?? 0;\n  }\n\n  /**\n   * {@inheritDoc ICharacterController.setWorldPosition }\n   */\n  setWorldPosition(position: Vector3): void {\n    this._worldPosition = position;\n    this._updateNativePosition();\n  }\n\n  /**\n   * {@inheritDoc ICharacterController.getWorldPosition }\n   */\n  getWorldPosition(position: Vector3): void {\n    if (this._pxController) {\n      position.copyFrom(this._pxController.getPosition());\n      position.subtract(this._shapeScaledPosition);\n    }\n  }\n\n  /**\n   * {@inheritDoc ICharacterController.setStepOffset }\n   */\n  setStepOffset(offset: number): void {\n    this._pxController?.setStepOffset(offset);\n  }\n\n  /**\n   * {@inheritDoc ICharacterController.setNonWalkableMode }\n   */\n  setNonWalkableMode(flag: number): void {\n    this._pxController?.setNonWalkableMode(flag);\n  }\n\n  /**\n   * {@inheritDoc ICharacterController.setUpDirection }\n   */\n  setUpDirection(up: Vector3): void {\n    this._pxController?.setUpDirection(up);\n  }\n\n  /**\n   * {@inheritDoc ICharacterController.setSlopeLimit }\n   */\n  setSlopeLimit(slopeLimit: number): void {\n    this._pxController?.setSlopeLimit(slopeLimit);\n  }\n\n  /**\n   * {@inheritDoc ICharacterController.addShape }\n   */\n  addShape(shape: PhysXColliderShape): void {\n    // When CharacterController is disabled, set shape property need check pxController whether exist because of this._pxManager is null and won't create pxController\n    this._pxManager && this._createPXController(this._pxManager, shape);\n    this._shape = shape;\n    shape._controllers.add(this);\n  }\n\n  /**\n   * {@inheritDoc ICharacterController.removeShape }\n   */\n  removeShape(shape: PhysXColliderShape): void {\n    this._destroyPXController();\n    this._shape = null;\n    shape._controllers.delete(this);\n  }\n\n  /**\n   * {@inheritDoc ICharacterController.destroy }\n   */\n  destroy(): void {\n    this._destroyPXController();\n  }\n\n  /**\n   * @internal\n   */\n  _createPXController(pxManager: PhysXPhysicsScene, shape: PhysXColliderShape): void {\n    let desc: any;\n    if (shape instanceof PhysXBoxColliderShape) {\n      desc = new this._physXPhysics._physX.PxBoxControllerDesc();\n      desc.halfHeight = shape._halfSize.x;\n      desc.halfSideExtent = shape._halfSize.y;\n      desc.halfForwardExtent = shape._halfSize.z;\n    } else if (shape instanceof PhysXCapsuleColliderShape) {\n      desc = new this._physXPhysics._physX.PxCapsuleControllerDesc();\n      desc.radius = shape._radius;\n      desc.height = shape._halfHeight * 2;\n      desc.climbingMode = 1; // constraint mode\n    } else {\n      throw \"unsupported shape type\";\n    }\n\n    desc.setMaterial(shape._pxMaterial);\n\n    this._pxController = pxManager._getControllerManager().createController(desc);\n    this._pxController.setUUID(shape._id);\n  }\n\n  /**\n   * @internal\n   */\n  _destroyPXController(): void {\n    if (this._pxController) {\n      this._pxController.release();\n      this._pxController = null;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _updateShapePosition(shapePosition: Vector3, worldScale: Vector3): void {\n    Vector3.multiply(shapePosition, worldScale, this._shapeScaledPosition);\n    this._updateNativePosition();\n  }\n\n  private _updateNativePosition() {\n    const worldPosition = this._worldPosition;\n    if (this._pxController && worldPosition) {\n      Vector3.add(worldPosition, this._shapeScaledPosition, PhysXCharacterController._tempVec);\n      this._pxController.setPosition(PhysXCharacterController._tempVec);\n    }\n  }\n}\n","import { ICollider } from \"@galacean/engine-design\";\nimport { Quaternion, Vector3 } from \"@galacean/engine\";\nimport { PhysXPhysics } from \"./PhysXPhysics\";\nimport { PhysXColliderShape } from \"./shape/PhysXColliderShape\";\n\n/**\n * Abstract class of physical collider.\n */\nexport abstract class PhysXCollider implements ICollider {\n  private static _tempTransform: {\n    translation: Vector3;\n    rotation: Quaternion;\n  } = { translation: null, rotation: null };\n\n  /** @internal */\n  _pxActor: any;\n\n  protected _physXPhysics: PhysXPhysics;\n\n  constructor(physXPhysics: PhysXPhysics) {\n    this._physXPhysics = physXPhysics;\n  }\n\n  /**\n   * {@inheritDoc ICollider.addShape }\n   */\n  addShape(shape: PhysXColliderShape): void {\n    this._pxActor.attachShape(shape._pxShape);\n  }\n\n  /**\n   * {@inheritDoc ICollider.removeShape }\n   */\n  removeShape(shape: PhysXColliderShape): void {\n    this._pxActor.detachShape(shape._pxShape, true);\n  }\n\n  /**\n   * {@inheritDoc ICollider.setWorldTransform }\n   */\n  setWorldTransform(position: Vector3, rotation: Quaternion): void {\n    this._pxActor.setGlobalPose(this._transform(position, rotation), true);\n  }\n\n  /**\n   * {@inheritDoc ICollider.getWorldTransform }\n   */\n  getWorldTransform(outPosition: Vector3, outRotation: Quaternion): void {\n    const transform = this._pxActor.getGlobalPose();\n    outPosition.set(transform.translation.x, transform.translation.y, transform.translation.z);\n    outRotation.set(transform.rotation.x, transform.rotation.y, transform.rotation.z, transform.rotation.w);\n  }\n\n  /**\n   * {@inheritDoc ICollider.destroy }\n   */\n  destroy(): void {\n    this._pxActor.release();\n  }\n\n  /**\n   * @internal\n   */\n  _transform(pos: Vector3, rot: Quaternion): { translation: Vector3; rotation: Quaternion } {\n    const transform = PhysXCollider._tempTransform;\n    transform.translation = pos;\n    transform.rotation = rot.normalize();\n    return transform;\n  }\n}\n","import { IDynamicCollider } from \"@galacean/engine-design\";\nimport { Quaternion, Vector3 } from \"@galacean/engine\";\nimport { PhysXCollider } from \"./PhysXCollider\";\nimport { PhysXPhysics } from \"./PhysXPhysics\";\n\n/**\n * The collision detection mode constants used for PhysXDynamicCollider.collisionDetectionMode.\n * */\nexport enum CollisionDetectionMode {\n  /** Continuous collision detection is off for this dynamic collider. */\n  Discrete,\n  /** Continuous collision detection is on for colliding with static mesh geometry. */\n  Continuous,\n  /** Continuous collision detection is on for colliding with static and dynamic geometry. */\n  ContinuousDynamic,\n  /** Speculative continuous collision detection is on for static and dynamic geometries */\n  ContinuousSpeculative\n}\n\n/**\n * A dynamic collider can act with self-defined movement or physical force\n */\nexport class PhysXDynamicCollider extends PhysXCollider implements IDynamicCollider {\n  private static _tempTranslation = new Vector3();\n  private static _tempRotation = new Quaternion();\n\n  constructor(physXPhysics: PhysXPhysics, position: Vector3, rotation: Quaternion) {\n    super(physXPhysics);\n    const transform = this._transform(position, rotation);\n    this._pxActor = physXPhysics._pxPhysics.createRigidDynamic(transform);\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setLinearDamping }\n   */\n  setLinearDamping(value: number): void {\n    this._pxActor.setLinearDamping(value);\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setAngularDamping }\n   */\n  setAngularDamping(value: number): void {\n    this._pxActor.setAngularDamping(value);\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setLinearVelocity }\n   */\n  setLinearVelocity(value: Vector3): void {\n    this._pxActor.setLinearVelocity(value, true);\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setAngularVelocity }\n   */\n  setAngularVelocity(value: Vector3): void {\n    this._pxActor.setAngularVelocity(value, true);\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setMass }\n   */\n  setMass(value: number): void {\n    this._pxActor.setMass(value);\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setCenterOfMass }\n   */\n  setCenterOfMass(position: Vector3): void {\n    this._pxActor.setCMassLocalPose(position);\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setInertiaTensor }\n   */\n  setInertiaTensor(value: Vector3): void {\n    this._pxActor.setMassSpaceInertiaTensor(value);\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setMaxAngularVelocity }\n   */\n  setMaxAngularVelocity(value: number): void {\n    this._pxActor.setMaxAngularVelocity(value);\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setMaxDepenetrationVelocity }\n   */\n  setMaxDepenetrationVelocity(value: number): void {\n    this._pxActor.setMaxDepenetrationVelocity(value);\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setSleepThreshold }\n   * @default 1e-5f * PxTolerancesScale::speed * PxTolerancesScale::speed\n   */\n  setSleepThreshold(value: number): void {\n    this._pxActor.setSleepThreshold(value);\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setSolverIterations }\n   */\n  setSolverIterations(value: number): void {\n    this._pxActor.setSolverIterationCounts(value, 1);\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setCollisionDetectionMode }\n   */\n  setCollisionDetectionMode(value: number): void {\n    switch (value) {\n      case CollisionDetectionMode.Continuous:\n        this._pxActor.setRigidBodyFlag(this._physXPhysics._physX.PxRigidBodyFlag.eENABLE_CCD, true);\n        break;\n      case CollisionDetectionMode.ContinuousDynamic:\n        this._pxActor.setRigidBodyFlag(this._physXPhysics._physX.PxRigidBodyFlag.eENABLE_CCD_FRICTION, true);\n        break;\n      case CollisionDetectionMode.ContinuousSpeculative:\n        this._pxActor.setRigidBodyFlag(this._physXPhysics._physX.PxRigidBodyFlag.eENABLE_SPECULATIVE_CCD, true);\n        break;\n      case CollisionDetectionMode.Discrete:\n        const physX = this._physXPhysics._physX;\n        this._pxActor.setRigidBodyFlag(physX.PxRigidBodyFlag.eENABLE_CCD, false);\n        this._pxActor.setRigidBodyFlag(physX.PxRigidBodyFlag.eENABLE_CCD_FRICTION, false);\n        this._pxActor.setRigidBodyFlag(physX.PxRigidBodyFlag.eENABLE_SPECULATIVE_CCD, false);\n        break;\n    }\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setIsKinematic }\n   */\n  setIsKinematic(value: boolean): void {\n    if (value) {\n      this._pxActor.setRigidBodyFlag(this._physXPhysics._physX.PxRigidBodyFlag.eKINEMATIC, true);\n    } else {\n      this._pxActor.setRigidBodyFlag(this._physXPhysics._physX.PxRigidBodyFlag.eKINEMATIC, false);\n    }\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setConstraints }\n   */\n  setConstraints(flags: number): void {\n    this._pxActor.setRigidDynamicLockFlags(flags);\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.addForce }\n   */\n  addForce(force: Vector3) {\n    this._pxActor.addForce({ x: force.x, y: force.y, z: force.z });\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.addTorque }\n   */\n  addTorque(torque: Vector3) {\n    this._pxActor.addTorque({ x: torque.x, y: torque.y, z: torque.z });\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.move }\n   */\n  move(positionOrRotation: Vector3 | Quaternion, rotation?: Quaternion): void {\n    if (rotation) {\n      this._pxActor.setKinematicTarget(positionOrRotation, rotation);\n      return;\n    }\n\n    const tempTranslation = PhysXDynamicCollider._tempTranslation;\n    const tempRotation = PhysXDynamicCollider._tempRotation;\n    this.getWorldTransform(tempTranslation, tempRotation);\n    if (positionOrRotation instanceof Vector3) {\n      this._pxActor.setKinematicTarget(positionOrRotation, tempRotation);\n    } else {\n      this._pxActor.setKinematicTarget(tempTranslation, positionOrRotation);\n    }\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.sleep }\n   */\n  sleep(): void {\n    return this._pxActor.putToSleep();\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.wakeUp }\n   */\n  wakeUp(): void {\n    return this._pxActor.wakeUp();\n  }\n}\n","import { IPhysicsManager } from \"@galacean/engine-design\";\nimport { TriggerEvent } from \"./PhysXPhysicsScene\";\n\nexport class PhysXPhysicsManager implements IPhysicsManager {\n  /** @internal */\n  _eventMap: Record<number, Record<number, TriggerEvent>> = {};\n}\n","import { IPhysicsMaterial } from \"@galacean/engine-design\";\nimport { PhysXPhysics } from \"./PhysXPhysics\";\n\n/**\n * Physics material describes how to handle colliding objects (friction, bounciness).\n */\nexport class PhysXPhysicsMaterial implements IPhysicsMaterial {\n  /** @internal */\n  _pxMaterial: any;\n\n  protected _physXPhysics: PhysXPhysics;\n\n  constructor(\n    physXPhysics: PhysXPhysics,\n    staticFriction: number,\n    dynamicFriction: number,\n    bounciness: number,\n    frictionCombine: CombineMode,\n    bounceCombine: CombineMode\n  ) {\n    this._physXPhysics = physXPhysics;\n    const pxMaterial = physXPhysics._pxPhysics.createMaterial(staticFriction, dynamicFriction, bounciness);\n    pxMaterial.setFrictionCombineMode(frictionCombine);\n    pxMaterial.setRestitutionCombineMode(bounceCombine);\n    this._pxMaterial = pxMaterial;\n  }\n\n  /**\n   * {@inheritDoc IPhysicsMaterial.setBounciness }\n   */\n  setBounciness(value: number) {\n    this._pxMaterial.setRestitution(value);\n  }\n\n  /**\n   * {@inheritDoc IPhysicsMaterial.setDynamicFriction }\n   */\n  setDynamicFriction(value: number) {\n    this._pxMaterial.setDynamicFriction(value);\n  }\n\n  /**\n   * {@inheritDoc IPhysicsMaterial.setStaticFriction }\n   */\n  setStaticFriction(value: number) {\n    this._pxMaterial.setStaticFriction(value);\n  }\n\n  /**\n   * {@inheritDoc IPhysicsMaterial.setBounceCombine }\n   */\n  setBounceCombine(value: CombineMode) {\n    this._pxMaterial.setRestitutionCombineMode(value);\n  }\n\n  /**\n   * {@inheritDoc IPhysicsMaterial.setFrictionCombine }\n   */\n  setFrictionCombine(value: CombineMode) {\n    this._pxMaterial.setFrictionCombineMode(value);\n  }\n\n  /**\n   * {@inheritDoc IPhysicsMaterial.destroy }\n   */\n  destroy(): void {\n    this._pxMaterial.release();\n  }\n}\n\n/**\n * Describes how physics materials of the colliding objects are combined.\n */\nenum CombineMode {\n  /** Averages the friction/bounce of the two colliding materials. */\n  Average,\n  /** Uses the smaller friction/bounce of the two colliding materials. */\n  Minimum,\n  /** Multiplies the friction/bounce of the two colliding materials. */\n  Multiply,\n  /** Uses the larger friction/bounce of the two colliding materials. */\n  Maximum\n}\n","import { Ray, Vector3, DisorderedArray } from \"@galacean/engine\";\nimport { IPhysicsScene } from \"@galacean/engine-design\";\nimport { PhysXCharacterController } from \"./PhysXCharacterController\";\nimport { PhysXCollider } from \"./PhysXCollider\";\nimport { PhysXPhysics } from \"./PhysXPhysics\";\nimport { PhysXPhysicsManager } from \"./PhysXPhysicsManager\";\nimport { PhysXColliderShape } from \"./shape/PhysXColliderShape\";\n\n/**\n * A manager is a collection of colliders and constraints which can interact.\n */\nexport class PhysXPhysicsScene implements IPhysicsScene {\n  /** @internal */\n  _pxControllerManager: any = null;\n\n  private static _tempPosition: Vector3 = new Vector3();\n  private static _tempNormal: Vector3 = new Vector3();\n\n  private _physXPhysics: PhysXPhysics;\n  private _physXManager: PhysXPhysicsManager;\n  private _pxRaycastHit: any;\n  private _pxFilterData: any;\n\n  private _pxScene: any;\n\n  private readonly _onContactEnter?: (obj1: number, obj2: number) => void;\n  private readonly _onContactExit?: (obj1: number, obj2: number) => void;\n  private readonly _onContactStay?: (obj1: number, obj2: number) => void;\n  private readonly _onTriggerEnter?: (obj1: number, obj2: number) => void;\n  private readonly _onTriggerExit?: (obj1: number, obj2: number) => void;\n  private readonly _onTriggerStay?: (obj1: number, obj2: number) => void;\n\n  private _currentEvents: DisorderedArray<TriggerEvent> = new DisorderedArray<TriggerEvent>();\n\n  private _eventPool: TriggerEvent[] = [];\n\n  constructor(\n    physXPhysics: PhysXPhysics,\n    physicsManager: PhysXPhysicsManager,\n    onContactEnter?: (obj1: number, obj2: number) => void,\n    onContactExit?: (obj1: number, obj2: number) => void,\n    onContactStay?: (obj1: number, obj2: number) => void,\n    onTriggerEnter?: (obj1: number, obj2: number) => void,\n    onTriggerExit?: (obj1: number, obj2: number) => void,\n    onTriggerStay?: (obj1: number, obj2: number) => void\n  ) {\n    this._physXPhysics = physXPhysics;\n    this._physXManager = physicsManager;\n\n    const physX = physXPhysics._physX;\n\n    this._pxRaycastHit = new physX.PxRaycastHit();\n    this._pxFilterData = new physX.PxQueryFilterData();\n    this._pxFilterData.flags = new physX.PxQueryFlags(QueryFlag.STATIC | QueryFlag.DYNAMIC | QueryFlag.PRE_FILTER);\n\n    this._onContactEnter = onContactEnter;\n    this._onContactExit = onContactExit;\n    this._onContactStay = onContactStay;\n    this._onTriggerEnter = onTriggerEnter;\n    this._onTriggerExit = onTriggerExit;\n    this._onTriggerStay = onTriggerStay;\n\n    const triggerCallback = {\n      onContactBegin: (index1, index2) => {\n        this._onContactEnter(index1, index2);\n      },\n      onContactEnd: (index1, index2) => {\n        this._onContactExit(index1, index2);\n      },\n      onContactPersist: (index1, index2) => {\n        this._onContactStay(index1, index2);\n      },\n      onTriggerBegin: (index1, index2) => {\n        const event = index1 < index2 ? this._getTrigger(index1, index2) : this._getTrigger(index2, index1);\n        event.state = TriggerEventState.Enter;\n        this._currentEvents.add(event);\n      },\n      onTriggerEnd: (index1, index2) => {\n        let event: TriggerEvent;\n        if (index1 < index2) {\n          const subMap = this._physXManager._eventMap[index1];\n          event = subMap[index2];\n          subMap[index2] = undefined;\n        } else {\n          const subMap = this._physXManager._eventMap[index2];\n          event = subMap[index1];\n          subMap[index1] = undefined;\n        }\n        event.state = TriggerEventState.Exit;\n      }\n    };\n\n    const pxPhysics = physXPhysics._pxPhysics;\n    const physXSimulationCallbackInstance = physX.PxSimulationEventCallback.implement(triggerCallback);\n    const sceneDesc = physX.getDefaultSceneDesc(pxPhysics.getTolerancesScale(), 0, physXSimulationCallbackInstance);\n    this._pxScene = pxPhysics.createScene(sceneDesc);\n  }\n\n  /**\n   * {@inheritDoc IPhysicsManager.setGravity }\n   */\n  setGravity(value: Vector3) {\n    this._pxScene.setGravity(value);\n  }\n\n  /**\n   * {@inheritDoc IPhysicsManager.addColliderShape }\n   */\n  addColliderShape(colliderShape: PhysXColliderShape) {\n    this._physXManager._eventMap[colliderShape._id] = {};\n  }\n\n  /**\n   * {@inheritDoc IPhysicsManager.removeColliderShape }\n   */\n  removeColliderShape(colliderShape: PhysXColliderShape) {\n    const { _eventPool: eventPool, _currentEvents: currentEvents } = this;\n    const { _id: id } = colliderShape;\n    const { _eventMap: eventMap } = this._physXManager;\n    currentEvents.forEach((event, i) => {\n      if (event.index1 == id) {\n        currentEvents.deleteByIndex(i);\n        eventPool.push(event);\n      } else if (event.index2 == id) {\n        currentEvents.deleteByIndex(i);\n        eventPool.push(event);\n        // If the shape is big index, should clear from the small index shape subMap\n        eventMap[event.index1][id] = undefined;\n      }\n    });\n    delete eventMap[id];\n  }\n\n  /**\n   * {@inheritDoc IPhysicsManager.addCollider }\n   */\n  addCollider(collider: PhysXCollider): void {\n    this._pxScene.addActor(collider._pxActor, null);\n  }\n\n  /**\n   * {@inheritDoc IPhysicsManager.removeCollider }\n   */\n  removeCollider(collider: PhysXCollider): void {\n    this._pxScene.removeActor(collider._pxActor, true);\n  }\n\n  /**\n   * {@inheritDoc IPhysicsManager.addCharacterController }\n   */\n  addCharacterController(characterController: PhysXCharacterController): void {\n    // Physx have no API to remove/readd cct into scene.\n    if (!characterController._pxController) {\n      const shape = characterController._shape;\n      if (shape) {\n        const lastPXManager = characterController._pxManager;\n        if (lastPXManager !== this) {\n          lastPXManager && characterController._destroyPXController();\n          characterController._createPXController(this, shape);\n        }\n      }\n    }\n    characterController._pxManager = this;\n  }\n\n  /**\n   * {@inheritDoc IPhysicsManager.removeCharacterController }\n   */\n  removeCharacterController(characterController: PhysXCharacterController): void {\n    characterController._pxManager = null;\n  }\n\n  /**\n   * {@inheritDoc IPhysicsManager.update }\n   */\n  update(elapsedTime: number): void {\n    this._simulate(elapsedTime);\n    this._fetchResults();\n    this._fireEvent();\n  }\n\n  /**\n   * {@inheritDoc IPhysicsManager.raycast }\n   */\n  raycast(\n    ray: Ray,\n    distance: number,\n    onRaycast: (obj: number) => boolean,\n    hit?: (shapeUniqueID: number, distance: number, position: Vector3, normal: Vector3) => void\n  ): boolean {\n    const { _pxRaycastHit: pxHitResult } = this;\n    distance = Math.min(distance, 3.4e38); // float32 max value limit in physx raycast.\n\n    const raycastCallback = {\n      preFilter: (filterData, index, actor) => {\n        if (onRaycast(index)) {\n          return 2; // eBLOCK\n        } else {\n          return 0; // eNONE\n        }\n      },\n      postFilter: (filterData, hit) => {}\n    };\n\n    const result = this._pxScene.raycastSingle(\n      ray.origin,\n      ray.direction,\n      distance,\n      pxHitResult,\n      this._pxFilterData,\n      this._physXPhysics._physX.PxQueryFilterCallback.implement(raycastCallback)\n    );\n\n    if (result && hit != undefined) {\n      const { _tempPosition: position, _tempNormal: normal } = PhysXPhysicsScene;\n      const { position: pxPosition, normal: pxNormal } = pxHitResult;\n      position.set(pxPosition.x, pxPosition.y, pxPosition.z);\n      normal.set(pxNormal.x, pxNormal.y, pxNormal.z);\n\n      hit(pxHitResult.getShape().getUUID(), pxHitResult.distance, position, normal);\n    }\n    return result;\n  }\n\n  /**\n   * @internal\n   */\n  _getControllerManager(): any {\n    let pxControllerManager = this._pxControllerManager;\n    if (pxControllerManager === null) {\n      this._pxControllerManager = pxControllerManager = this._pxScene.createControllerManager();\n    }\n    return pxControllerManager;\n  }\n\n  private _simulate(elapsedTime: number): void {\n    this._pxScene.simulate(elapsedTime, true);\n  }\n\n  private _fetchResults(block: boolean = true): void {\n    this._pxScene.fetchResults(block);\n  }\n\n  private _getTrigger(index1: number, index2: number): TriggerEvent {\n    let event: TriggerEvent;\n    if (this._eventPool.length) {\n      event = this._eventPool.pop();\n      event.index1 = index1;\n      event.index2 = index2;\n    } else {\n      event = new TriggerEvent(index1, index2);\n    }\n    this._physXManager._eventMap[index1][index2] = event;\n    return event;\n  }\n\n  private _fireEvent(): void {\n    const { _eventPool: eventPool, _currentEvents: currentEvents } = this;\n    currentEvents.forEach((event, i) => {\n      if (event.state == TriggerEventState.Enter) {\n        this._onTriggerEnter(event.index1, event.index2);\n        event.state = TriggerEventState.Stay;\n      } else if (event.state == TriggerEventState.Stay) {\n        this._onTriggerStay(event.index1, event.index2);\n      } else if (event.state == TriggerEventState.Exit) {\n        currentEvents.deleteByIndex(i);\n        this._onTriggerExit(event.index1, event.index2);\n        eventPool.push(event);\n      }\n    });\n  }\n}\n\n/**\n * Filtering flags for scene queries.\n */\nenum QueryFlag {\n  STATIC = 1 << 0,\n  DYNAMIC = 1 << 1,\n  PRE_FILTER = 1 << 2,\n  POST_FILTER = 1 << 3,\n  ANY_HIT = 1 << 4,\n  NO_BLOCK = 1 << 5\n}\n\n/**\n * Physics state\n */\nenum TriggerEventState {\n  Enter,\n  Stay,\n  Exit\n}\n\n/**\n * Trigger event to store interactive object ids and state.\n */\nexport class TriggerEvent {\n  state: TriggerEventState;\n  index1: number;\n  index2: number;\n\n  constructor(index1: number, index2: number) {\n    this.index1 = index1;\n    this.index2 = index2;\n  }\n}\n","import { IStaticCollider } from \"@galacean/engine-design\";\nimport { Quaternion, Vector3 } from \"@galacean/engine\";\nimport { PhysXCollider } from \"./PhysXCollider\";\nimport { PhysXPhysics } from \"./PhysXPhysics\";\n\n/**\n * A static collider component that will not move.\n * @remarks Mostly used for object which always stays at the same place and never moves around.\n */\nexport class PhysXStaticCollider extends PhysXCollider implements IStaticCollider {\n  constructor(physXPhysics: PhysXPhysics, position: Vector3, rotation: Quaternion) {\n    super(physXPhysics);\n    this._pxActor = physXPhysics._pxPhysics.createRigidStatic(this._transform(position, rotation));\n  }\n}\n","/**\n * PhysX runtime mode.\n */\nexport enum PhysXRuntimeMode {\n  /** Use webAssembly mode first, if WebAssembly mode is not supported, roll back to JavaScript mode.  */\n  Auto,\n  /** WebAssembly mode. */\n  WebAssembly,\n  /** JavaScript mode. */\n  JavaScript\n}\n","import { IJoint } from \"@galacean/engine-design\";\nimport { Quaternion, Vector3 } from \"@galacean/engine\";\nimport { PhysXCollider } from \"../PhysXCollider\";\nimport { PhysXPhysics } from \"../PhysXPhysics\";\n\n/**\n * a base interface providing common functionality for PhysX joints\n */\nexport class PhysXJoint implements IJoint {\n  protected static _xAxis = new Vector3(1, 0, 0);\n  protected static _defaultVec = new Vector3();\n  protected static _defaultQuat = new Quaternion();\n\n  protected _pxJoint: any;\n  protected _collider: PhysXCollider;\n  private _connectedAnchor = new Vector3();\n  private _breakForce: number = Number.MAX_VALUE;\n  private _breakTorque: number = Number.MAX_VALUE;\n\n  protected _physXPhysics: PhysXPhysics;\n\n  constructor(physXPhysics: PhysXPhysics) {\n    this._physXPhysics = physXPhysics;\n  }\n\n  /**\n   * {@inheritDoc IJoint.setConnectedCollider }\n   */\n  setConnectedCollider(value: PhysXCollider): void {\n    this._pxJoint.setActors(value?._pxActor || null, this._collider?._pxActor || null);\n  }\n\n  /**\n   * {@inheritDoc IJoint.setConnectedAnchor }\n   */\n  setConnectedAnchor(value: Vector3): void {\n    this._connectedAnchor.copyFrom(value);\n    this._setLocalPose(0, value, PhysXJoint._defaultQuat);\n  }\n\n  /**\n   * {@inheritDoc IJoint.setConnectedMassScale }\n   */\n  setConnectedMassScale(value: number): void {\n    this._pxJoint.setInvMassScale0(1 / value);\n  }\n\n  /**\n   * {@inheritDoc IJoint.setConnectedInertiaScale }\n   */\n  setConnectedInertiaScale(value: number): void {\n    this._pxJoint.setInvInertiaScale0(1 / value);\n  }\n\n  /**\n   * {@inheritDoc IJoint.setMassScale }\n   */\n  setMassScale(value: number): void {\n    this._pxJoint.setInvMassScale1(1 / value);\n  }\n\n  /**\n   * {@inheritDoc IJoint.setInertiaScale }\n   */\n  setInertiaScale(value: number): void {\n    this._pxJoint.setInvInertiaScale1(1 / value);\n  }\n\n  /**\n   * {@inheritDoc IJoint.setBreakForce }\n   */\n  setBreakForce(value: number): void {\n    this._breakForce = value;\n    this._pxJoint.setBreakForce(this._breakForce, this._breakTorque);\n  }\n\n  /**\n   * {@inheritDoc IJoint.setBreakTorque }\n   */\n  setBreakTorque(value: number): void {\n    this._breakTorque = value;\n    this._pxJoint.setBreakForce(this._breakForce, this._breakTorque);\n  }\n\n  /**\n   * Set the joint local pose for an actor.\n   * @param actor 0 for the first actor, 1 for the second actor.\n   * @param position the local position for the actor this joint\n   * @param rotation the local rotation for the actor this joint\n   */\n  protected _setLocalPose(actor: number, position: Vector3, rotation: Quaternion): void {\n    this._pxJoint.setLocalPose(actor, position, rotation);\n  }\n}\n","import { IFixedJoint } from \"@galacean/engine-design\";\nimport { PhysXCollider } from \"../PhysXCollider\";\nimport { PhysXPhysics } from \"../PhysXPhysics\";\nimport { PhysXJoint } from \"./PhysXJoint\";\n\n/**\n * A fixed joint permits no relative movement between two colliders. ie the bodies are glued together.\n */\nexport class PhysXFixedJoint extends PhysXJoint implements IFixedJoint {\n  constructor(physXPhysics: PhysXPhysics, collider: PhysXCollider) {\n    super(physXPhysics);\n    this._collider = collider;\n    this._pxJoint = physXPhysics._pxPhysics.createFixedJoint(\n      null,\n      PhysXJoint._defaultVec,\n      PhysXJoint._defaultQuat,\n      collider._pxActor,\n      PhysXJoint._defaultVec,\n      PhysXJoint._defaultQuat\n    );\n  }\n}\n","import { IHingeJoint } from \"@galacean/engine-design\";\nimport { Quaternion, Vector3 } from \"@galacean/engine\";\nimport { PhysXCollider } from \"../PhysXCollider\";\nimport { PhysXPhysics } from \"../PhysXPhysics\";\nimport { PhysXJoint } from \"./PhysXJoint\";\n\n/**\n * A joint which behaves in a similar way to a hinge or axle.\n */\nexport class PhysXHingeJoint extends PhysXJoint implements IHingeJoint {\n  private _axisRotationQuaternion = new Quaternion();\n  private _swingOffset = new Vector3();\n\n  constructor(physXPhysics: PhysXPhysics, collider: PhysXCollider) {\n    super(physXPhysics);\n    this._collider = collider;\n    this._pxJoint = physXPhysics._pxPhysics.createRevoluteJoint(\n      null,\n      PhysXJoint._defaultVec,\n      PhysXJoint._defaultQuat,\n      collider._pxActor,\n      PhysXJoint._defaultVec,\n      PhysXJoint._defaultQuat\n    );\n  }\n\n  /**\n   * {@inheritDoc IHingeJoint.setAxis }\n   */\n  setAxis(value: Vector3): void {\n    const xAxis = PhysXJoint._xAxis;\n    const axisRotationQuaternion = this._axisRotationQuaternion;\n    xAxis.set(1, 0, 0);\n    value.normalize();\n    const angle = Math.acos(Vector3.dot(xAxis, value));\n    Vector3.cross(xAxis, value, xAxis);\n    Quaternion.rotationAxisAngle(xAxis, angle, axisRotationQuaternion);\n\n    this._setLocalPose(0, this._swingOffset, axisRotationQuaternion);\n  }\n\n  /**\n   * {@inheritDoc IHingeJoint.setSwingOffset }\n   */\n  setSwingOffset(value: Vector3): void {\n    this._swingOffset.copyFrom(value);\n    this._setLocalPose(1, this._swingOffset, this._axisRotationQuaternion);\n  }\n\n  /**\n   * {@inheritDoc IHingeJoint.getAngle }\n   */\n  getAngle(): number {\n    return this._pxJoint.getAngle();\n  }\n\n  /**\n   * {@inheritDoc IHingeJoint.getVelocity }\n   */\n  getVelocity(): Readonly<number> {\n    return this._pxJoint.getVelocity();\n  }\n\n  /**\n   * {@inheritDoc IHingeJoint.setHardLimitCone }\n   */\n  setHardLimit(lowerLimit: number, upperLimit: number, contactDist: number): void {\n    this._pxJoint.setHardLimit(lowerLimit, upperLimit, contactDist);\n  }\n\n  /**\n   * {@inheritDoc IHingeJoint.setHardLimitCone }\n   */\n  setSoftLimit(lowerLimit: number, upperLimit: number, stiffness: number, damping: number): void {\n    this._pxJoint.setSoftLimit(lowerLimit, upperLimit, stiffness, damping);\n  }\n\n  /**\n   * {@inheritDoc IHingeJoint.setDriveVelocity }\n   */\n  setDriveVelocity(velocity: number, autowake: boolean = true): void {\n    this._pxJoint.setDriveVelocity(velocity, autowake);\n  }\n\n  /**\n   * {@inheritDoc IHingeJoint.setDriveForceLimit }\n   */\n  setDriveForceLimit(limit: number): void {\n    this._pxJoint.setDriveForceLimit(limit);\n  }\n\n  /**\n   * {@inheritDoc IHingeJoint.setDriveGearRatio }\n   */\n  setDriveGearRatio(ratio: number): void {\n    this._pxJoint.setDriveGearRatio(ratio);\n  }\n\n  /**\n   * {@inheritDoc IHingeJoint.setHingeJointFlag }\n   */\n  setHingeJointFlag(flag: number, value: boolean): void {\n    this._pxJoint.setRevoluteJointFlag(flag, value);\n  }\n}\n","import { PhysXPhysics } from \"../PhysXPhysics\";\nimport { PhysXJoint } from \"./PhysXJoint\";\nimport { ISpringJoint } from \"@galacean/engine-design\";\nimport { PhysXCollider } from \"../PhysXCollider\";\nimport { Vector3 } from \"@galacean/engine\";\n\n/**\n * a joint that maintains an upper or lower bound (or both) on the distance between two points on different objects\n */\nexport class PhysXSpringJoint extends PhysXJoint implements ISpringJoint {\n  private _swingOffset = new Vector3();\n\n  constructor(physXPhysics: PhysXPhysics, collider: PhysXCollider) {\n    super(physXPhysics);\n    this._collider = collider;\n    this._pxJoint = physXPhysics._pxPhysics.createDistanceJoint(\n      null,\n      PhysXJoint._defaultVec,\n      PhysXJoint._defaultQuat,\n      collider._pxActor,\n      PhysXJoint._defaultVec,\n      PhysXJoint._defaultQuat\n    );\n    this._pxJoint.setDistanceJointFlag(2, true); // enable max distance;\n    this._pxJoint.setDistanceJointFlag(4, true); // enable min distance;\n    this._pxJoint.setDistanceJointFlag(8, true); // enable spring;\n  }\n\n  /**\n   * {@inheritDoc ISpringJoint.setSwingOffset }\n   */\n  setSwingOffset(value: Vector3): void {\n    this._swingOffset.copyFrom(value);\n    this._setLocalPose(1, value, PhysXJoint._defaultQuat);\n  }\n\n  /**\n   * {@inheritDoc ISpringJoint.setMinDistance }\n   */\n  setMinDistance(distance: number): void {\n    this._pxJoint.setMinDistance(distance);\n  }\n\n  /**\n   * {@inheritDoc ISpringJoint.setMaxDistance }\n   */\n  setMaxDistance(distance: number): void {\n    this._pxJoint.setMaxDistance(distance);\n  }\n\n  /**\n   * {@inheritDoc ISpringJoint.setTolerance }\n   */\n  setTolerance(tolerance: number): void {\n    this._pxJoint.setTolerance(tolerance);\n  }\n\n  /**\n   * {@inheritDoc ISpringJoint.setStiffness }\n   */\n  setStiffness(stiffness: number): void {\n    this._pxJoint.setStiffness(stiffness);\n  }\n\n  /**\n   * {@inheritDoc ISpringJoint.setDamping }\n   */\n  setDamping(damping: number): void {\n    this._pxJoint.setDamping(damping);\n  }\n}\n","import { IPlaneColliderShape } from \"@galacean/engine-design\";\nimport { Quaternion, Vector3 } from \"@galacean/engine\";\nimport { PhysXPhysics } from \"../PhysXPhysics\";\nimport { PhysXPhysicsMaterial } from \"../PhysXPhysicsMaterial\";\nimport { PhysXColliderShape } from \"./PhysXColliderShape\";\n\n/**\n * Plane collider shape in PhysX.\n */\nexport class PhysXPlaneColliderShape extends PhysXColliderShape implements IPlaneColliderShape {\n  constructor(physXPhysics: PhysXPhysics, uniqueID: number, material: PhysXPhysicsMaterial) {\n    super(physXPhysics);\n    this._axis = new Quaternion(0, 0, PhysXColliderShape.halfSqrt, PhysXColliderShape.halfSqrt);\n    this._physXRotation.copyFrom(this._axis);\n\n    this._pxGeometry = new physXPhysics._physX.PxPlaneGeometry();\n    this._initialize(material, uniqueID);\n    this._setLocalPose();\n  }\n}\n","import { Vector3 } from \"@galacean/engine\";\nimport { ISphereColliderShape } from \"@galacean/engine-design\";\nimport { PhysXPhysics } from \"../PhysXPhysics\";\nimport { PhysXPhysicsMaterial } from \"../PhysXPhysicsMaterial\";\nimport { PhysXColliderShape } from \"./PhysXColliderShape\";\n\n/**\n * Sphere collider shape in PhysX.\n */\nexport class PhysXSphereColliderShape extends PhysXColliderShape implements ISphereColliderShape {\n  private _radius: number;\n  private _maxScale: number = 1;\n\n  constructor(physXPhysics: PhysXPhysics, uniqueID: number, radius: number, material: PhysXPhysicsMaterial) {\n    super(physXPhysics);\n\n    this._radius = radius;\n\n    this._pxGeometry = new physXPhysics._physX.PxSphereGeometry(this._radius * this._maxScale);\n    this._initialize(material, uniqueID);\n    this._setLocalPose();\n  }\n\n  /**\n   * {@inheritDoc ISphereColliderShape.setRadius }\n   */\n  setRadius(value: number): void {\n    this._radius = value;\n    this._pxGeometry.radius = value * this._maxScale;\n    this._pxShape.setGeometry(this._pxGeometry);\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.setWorldScale }\n   */\n  override setWorldScale(scale: Vector3): void {\n    super.setWorldScale(scale);\n\n    this._maxScale = Math.max(Math.abs(scale.x), Math.abs(scale.y), Math.abs(scale.z));\n    this._pxGeometry.radius = this._radius * this._maxScale;\n    this._pxShape.setGeometry(this._pxGeometry);\n  }\n}\n","import { Quaternion, Vector3, version } from \"@galacean/engine\";\nimport {\n  IBoxColliderShape,\n  ICapsuleColliderShape,\n  ICharacterController,\n  IDynamicCollider,\n  IFixedJoint,\n  IHingeJoint,\n  IPhysics,\n  IPhysicsManager,\n  IPhysicsMaterial,\n  IPhysicsScene,\n  IPlaneColliderShape,\n  ISphereColliderShape,\n  ISpringJoint,\n  IStaticCollider\n} from \"@galacean/engine-design\";\nimport { PhysXCharacterController } from \"./PhysXCharacterController\";\nimport { PhysXCollider } from \"./PhysXCollider\";\nimport { PhysXDynamicCollider } from \"./PhysXDynamicCollider\";\nimport { PhysXPhysicsManager } from \"./PhysXPhysicsManager\";\nimport { PhysXPhysicsMaterial } from \"./PhysXPhysicsMaterial\";\nimport { PhysXPhysicsScene } from \"./PhysXPhysicsScene\";\nimport { PhysXStaticCollider } from \"./PhysXStaticCollider\";\nimport { PhysXRuntimeMode } from \"./enum/PhysXRuntimeMode\";\nimport { PhysXFixedJoint } from \"./joint/PhysXFixedJoint\";\nimport { PhysXHingeJoint } from \"./joint/PhysXHingeJoint\";\nimport { PhysXSpringJoint } from \"./joint/PhysXSpringJoint\";\nimport { PhysXBoxColliderShape } from \"./shape/PhysXBoxColliderShape\";\nimport { PhysXCapsuleColliderShape } from \"./shape/PhysXCapsuleColliderShape\";\nimport { PhysXPlaneColliderShape } from \"./shape/PhysXPlaneColliderShape\";\nimport { PhysXSphereColliderShape } from \"./shape/PhysXSphereColliderShape\";\n\n/**\n * PhysX object creation.\n */\n\nexport class PhysXPhysics implements IPhysics {\n  /** @internal PhysX wasm object */\n  _physX: any;\n  /** @internal PhysX Foundation SDK singleton class */\n  _pxFoundation: any;\n  /** @internal PhysX physics object */\n  _pxPhysics: any;\n\n  private _runTimeMode: PhysXRuntimeMode;\n  private _initializeState: InitializeState = InitializeState.Uninitialized;\n  private _initializePromise: Promise<void>;\n\n  constructor(runtimeMode: PhysXRuntimeMode = PhysXRuntimeMode.Auto) {\n    this._runTimeMode = runtimeMode;\n  }\n\n  /**\n   * Initialize PhysXPhysics.\n   * @param runtimeMode - Runtime mode\n   * @returns Promise object\n   */\n  initialize(): Promise<void> {\n    if (this._initializeState === InitializeState.Initialized) {\n      return Promise.resolve();\n    } else if (this._initializeState === InitializeState.Initializing) {\n      return this._initializePromise;\n    }\n\n    let runtimeMode = this._runTimeMode;\n    const scriptPromise = new Promise((resolve, reject) => {\n      const script = document.createElement(\"script\");\n      document.body.appendChild(script);\n      script.async = true;\n      script.onload = resolve;\n      script.onerror = reject;\n      if (runtimeMode == PhysXRuntimeMode.Auto) {\n        const supported = (() => {\n          try {\n            if (typeof WebAssembly === \"object\" && typeof WebAssembly.instantiate === \"function\") {\n              const module = new WebAssembly.Module(Uint8Array.of(0x0, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00));\n              if (module instanceof WebAssembly.Module)\n                return new WebAssembly.Instance(module) instanceof WebAssembly.Instance;\n            }\n          } catch (e) {}\n          return false;\n        })();\n        if (supported) {\n          runtimeMode = PhysXRuntimeMode.WebAssembly;\n        } else {\n          runtimeMode = PhysXRuntimeMode.JavaScript;\n        }\n      }\n\n      if (runtimeMode == PhysXRuntimeMode.JavaScript) {\n        script.src = `https://mdn.alipayobjects.com/rms/afts/file/A*rnDeR58NNGoAAAAAAAAAAAAAARQnAQ/physx.release.js.js`;\n      } else if (runtimeMode == PhysXRuntimeMode.WebAssembly) {\n        script.src = `https://mdn.alipayobjects.com/rms/afts/file/A*nA97QLQehRMAAAAAAAAAAAAAARQnAQ/physx.release.js`;\n      }\n    });\n\n    const initializePromise = new Promise<void>((resolve, reject) => {\n      scriptPromise\n        .then(\n          () =>\n            (<any>window).PHYSX().then((PHYSX) => {\n              this._init(PHYSX);\n              this._initializeState = InitializeState.Initialized;\n              this._initializePromise = null;\n              console.log(\"PhysX loaded.\");\n              resolve();\n            }, reject),\n          reject\n        )\n        .catch(reject);\n    });\n\n    this._initializePromise = initializePromise;\n    return initializePromise;\n  }\n\n  /**\n   * Destroy PhysXPhysics.\n   */\n  public destroy(): void {\n    this._physX.PxCloseExtensions();\n    this._pxPhysics.release();\n    this._pxFoundation.release();\n    this._physX = null;\n    this._pxFoundation = null;\n    this._pxPhysics = null;\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createPhysicsManager }\n   */\n  createPhysicsManager(): IPhysicsManager {\n    return new PhysXPhysicsManager();\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createPhysicsScene }\n   */\n  createPhysicsScene(\n    physicsManager: PhysXPhysicsManager,\n    onContactBegin?: (obj1: number, obj2: number) => void,\n    onContactEnd?: (obj1: number, obj2: number) => void,\n    onContactStay?: (obj1: number, obj2: number) => void,\n    onTriggerBegin?: (obj1: number, obj2: number) => void,\n    onTriggerEnd?: (obj1: number, obj2: number) => void,\n    onTriggerStay?: (obj1: number, obj2: number) => void\n  ): IPhysicsScene {\n    const manager = new PhysXPhysicsScene(\n      this,\n      physicsManager,\n      onContactBegin,\n      onContactEnd,\n      onContactStay,\n      onTriggerBegin,\n      onTriggerEnd,\n      onTriggerStay\n    );\n    return manager;\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createStaticCollider }\n   */\n  createStaticCollider(position: Vector3, rotation: Quaternion): IStaticCollider {\n    return new PhysXStaticCollider(this, position, rotation);\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createDynamicCollider }\n   */\n  createDynamicCollider(position: Vector3, rotation: Quaternion): IDynamicCollider {\n    return new PhysXDynamicCollider(this, position, rotation);\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createCharacterController }\n   */\n  createCharacterController(): ICharacterController {\n    return new PhysXCharacterController(this);\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createPhysicsMaterial }\n   */\n  createPhysicsMaterial(\n    staticFriction: number,\n    dynamicFriction: number,\n    bounciness: number,\n    frictionCombine: number,\n    bounceCombine: number\n  ): IPhysicsMaterial {\n    return new PhysXPhysicsMaterial(this, staticFriction, dynamicFriction, bounciness, frictionCombine, bounceCombine);\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createBoxColliderShape }\n   */\n  createBoxColliderShape(uniqueID: number, size: Vector3, material: PhysXPhysicsMaterial): IBoxColliderShape {\n    return new PhysXBoxColliderShape(this, uniqueID, size, material);\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createSphereColliderShape }\n   */\n  createSphereColliderShape(uniqueID: number, radius: number, material: PhysXPhysicsMaterial): ISphereColliderShape {\n    return new PhysXSphereColliderShape(this, uniqueID, radius, material);\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createPlaneColliderShape }\n   */\n  createPlaneColliderShape(uniqueID: number, material: PhysXPhysicsMaterial): IPlaneColliderShape {\n    return new PhysXPlaneColliderShape(this, uniqueID, material);\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createCapsuleColliderShape }\n   */\n  createCapsuleColliderShape(\n    uniqueID: number,\n    radius: number,\n    height: number,\n    material: PhysXPhysicsMaterial\n  ): ICapsuleColliderShape {\n    return new PhysXCapsuleColliderShape(this, uniqueID, radius, height, material);\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createFixedJoint }\n   */\n  createFixedJoint(collider: PhysXCollider): IFixedJoint {\n    return new PhysXFixedJoint(this, collider);\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createHingeJoint }\n   */\n  createHingeJoint(collider: PhysXCollider): IHingeJoint {\n    return new PhysXHingeJoint(this, collider);\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createSpringJoint }\n   */\n  createSpringJoint(collider: PhysXCollider): ISpringJoint {\n    return new PhysXSpringJoint(this, collider);\n  }\n\n  private _init(physX: any): void {\n    const version = physX.PX_PHYSICS_VERSION;\n    const defaultErrorCallback = new physX.PxDefaultErrorCallback();\n    const allocator = new physX.PxDefaultAllocator();\n    const pxFoundation = physX.PxCreateFoundation(version, allocator, defaultErrorCallback);\n    const pxPhysics = physX.PxCreatePhysics(version, pxFoundation, new physX.PxTolerancesScale(), false, null);\n\n    physX.PxInitExtensions(pxPhysics, null);\n    this._physX = physX;\n    this._pxFoundation = pxFoundation;\n    this._pxPhysics = pxPhysics;\n  }\n}\n\nenum InitializeState {\n  Uninitialized,\n  Initializing,\n  Initialized\n}\n","export { PhysXPhysics } from \"./PhysXPhysics\";\nexport { PhysXRuntimeMode } from \"./enum/PhysXRuntimeMode\";\n\n//@ts-ignore\nexport const version = `__buildVersion`;\n\nconsole.log(`Galacean PhysX version: ${version}`);\n"],"names":["PhysXColliderShape","physXPhysics","_controllers","DisorderedArray","_worldScale","Vector3","_position","_rotation","_axis","_physXRotation","Quaternion","_shapeFlags","ShapeFlag","_physXPhysics","setRotation","value","rotationYawPitchRoll","x","y","z","multiply","normalize","_setLocalPose","setPosition","copyFrom","controllers","i","n","length","get","_updateShapePosition","setWorldScale","scale","setContactOffset","offset","_pxShape","_pxController","setMaterial","_pxMaterial","setIsTrigger","_modifyFlag","_setShapeFlags","destroy","release","flags","setFlags","_physX","PxShapeFlags","transform","translation","rotation","setLocalPose","_initialize","material","id","_id","_pxPhysics","createShape","_pxGeometry","setUUID","flag","halfSqrt","PhysXBoxColliderShape","uniqueID","size","_halfSize","_sizeScale","halfSize","set","PxBoxGeometry","setSize","tempExtents","_tempHalfExtents","halfExtents","setGeometry","_updateController","Math","abs","extents","pxController","setHalfHeight","setHalfSideExtent","setHalfForwardExtent","PhysXCapsuleColliderShape","radius","height","_upAxis","_radius","_halfHeight","PxCapsuleGeometry","setRadius","sizeScale","max","setHeight","halfHeight","setUpAxis","upAxis","axis","physXRotation","geometry","PhysXCharacterController","_shapeScaledPosition","_worldPosition","move","disp","minDist","elapsedTime","setWorldPosition","position","_updateNativePosition","getWorldPosition","getPosition","subtract","setStepOffset","setNonWalkableMode","setUpDirection","up","setSlopeLimit","slopeLimit","addShape","shape","_pxManager","_createPXController","_shape","add","removeShape","_destroyPXController","delete","pxManager","desc","PxBoxControllerDesc","halfSideExtent","halfForwardExtent","PxCapsuleControllerDesc","climbingMode","_getControllerManager","createController","shapePosition","worldScale","worldPosition","_tempVec","PhysXCollider","_pxActor","attachShape","detachShape","setWorldTransform","setGlobalPose","_transform","getWorldTransform","outPosition","outRotation","getGlobalPose","w","pos","rot","_tempTransform","PhysXDynamicCollider","createRigidDynamic","setLinearDamping","setAngularDamping","setLinearVelocity","setAngularVelocity","setMass","setCenterOfMass","setCMassLocalPose","setInertiaTensor","setMassSpaceInertiaTensor","setMaxAngularVelocity","setMaxDepenetrationVelocity","setSleepThreshold","setSolverIterations","setSolverIterationCounts","setCollisionDetectionMode","setRigidBodyFlag","PxRigidBodyFlag","eENABLE_CCD","eENABLE_CCD_FRICTION","eENABLE_SPECULATIVE_CCD","physX","setIsKinematic","eKINEMATIC","setConstraints","setRigidDynamicLockFlags","addForce","force","addTorque","torque","positionOrRotation","setKinematicTarget","tempTranslation","_tempTranslation","tempRotation","_tempRotation","sleep","putToSleep","wakeUp","PhysXPhysicsManager","_eventMap","PhysXPhysicsMaterial","staticFriction","dynamicFriction","bounciness","frictionCombine","bounceCombine","pxMaterial","createMaterial","setFrictionCombineMode","setRestitutionCombineMode","setBounciness","setRestitution","setDynamicFriction","setStaticFriction","setBounceCombine","setFrictionCombine","PhysXPhysicsScene","physicsManager","onContactEnter","onContactExit","onContactStay","onTriggerEnter","onTriggerExit","onTriggerStay","_pxControllerManager","_currentEvents","_eventPool","_physXManager","_pxRaycastHit","PxRaycastHit","_pxFilterData","PxQueryFilterData","PxQueryFlags","QueryFlag","_onContactEnter","_onContactExit","_onContactStay","_onTriggerEnter","_onTriggerExit","_onTriggerStay","triggerCallback","onContactBegin","index1","index2","onContactEnd","onContactPersist","onTriggerBegin","event","_getTrigger","state","onTriggerEnd","subMap","undefined","pxPhysics","physXSimulationCallbackInstance","PxSimulationEventCallback","implement","sceneDesc","getDefaultSceneDesc","getTolerancesScale","_pxScene","createScene","setGravity","addColliderShape","colliderShape","removeColliderShape","eventPool","currentEvents","eventMap","forEach","deleteByIndex","push","addCollider","collider","addActor","removeCollider","removeActor","addCharacterController","characterController","lastPXManager","removeCharacterController","update","_simulate","_fetchResults","_fireEvent","raycast","ray","distance","onRaycast","hit","pxHitResult","min","raycastCallback","preFilter","filterData","index","actor","postFilter","result","raycastSingle","origin","direction","PxQueryFilterCallback","_tempPosition","_tempNormal","normal","pxNormal","pxPosition","getShape","getUUID","pxControllerManager","createControllerManager","simulate","block","fetchResults","pop","TriggerEvent","PhysXStaticCollider","createRigidStatic","PhysXRuntimeMode","PhysXJoint","_connectedAnchor","_breakForce","Number","MAX_VALUE","_breakTorque","setConnectedCollider","_pxJoint","setActors","_collider","setConnectedAnchor","_defaultQuat","setConnectedMassScale","setInvMassScale0","setConnectedInertiaScale","setInvInertiaScale0","setMassScale","setInvMassScale1","setInertiaScale","setInvInertiaScale1","setBreakForce","setBreakTorque","_xAxis","_defaultVec","PhysXFixedJoint","createFixedJoint","PhysXHingeJoint","_axisRotationQuaternion","_swingOffset","createRevoluteJoint","setAxis","xAxis","axisRotationQuaternion","angle","acos","dot","cross","rotationAxisAngle","setSwingOffset","getAngle","getVelocity","setHardLimit","lowerLimit","upperLimit","contactDist","setSoftLimit","stiffness","damping","setDriveVelocity","velocity","autowake","setDriveForceLimit","limit","setDriveGearRatio","ratio","setHingeJointFlag","setRevoluteJointFlag","PhysXSpringJoint","createDistanceJoint","setDistanceJointFlag","setMinDistance","setMaxDistance","setTolerance","tolerance","setStiffness","setDamping","PhysXPlaneColliderShape","PxPlaneGeometry","PhysXSphereColliderShape","_maxScale","PxSphereGeometry","PhysXPhysics","runtimeMode","Auto","_initializeState","_runTimeMode","initialize","Promise","resolve","_initializePromise","scriptPromise","reject","script","document","createElement","body","appendChild","async","onload","onerror","supported","WebAssembly","instantiate","module","Module","Uint8Array","of","Instance","e","JavaScript","src","initializePromise","then","window","PHYSX","_init","console","log","catch","PxCloseExtensions","_pxFoundation","createPhysicsManager","createPhysicsScene","manager","createStaticCollider","createDynamicCollider","createCharacterController","createPhysicsMaterial","createBoxColliderShape","createSphereColliderShape","createPlaneColliderShape","createCapsuleColliderShape","createHingeJoint","createSpringJoint","version","PX_PHYSICS_VERSION","defaultErrorCallback","PxDefaultErrorCallback","allocator","PxDefaultAllocator","pxFoundation","PxCreateFoundation","PxCreatePhysics","PxTolerancesScale","PxInitExtensions"],"mappings":"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"}