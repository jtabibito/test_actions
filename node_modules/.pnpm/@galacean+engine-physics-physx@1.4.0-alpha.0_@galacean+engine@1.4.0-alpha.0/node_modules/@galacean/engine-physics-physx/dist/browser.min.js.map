{"version":3,"file":"browser.min.js","sources":["../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_instanceof.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_set_prototype_of.js","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_inherits.js","../src/shape/PhysXColliderShape.ts","../src/enum/PhysXRuntimeMode.ts","../src/shape/PhysXBoxColliderShape.ts","../src/shape/PhysXCapsuleColliderShape.ts","../src/PhysXCharacterController.ts","../src/PhysXCollider.ts","../src/PhysXDynamicCollider.ts","../src/PhysXPhysicsManager.ts","../src/PhysXPhysicsMaterial.ts","../src/PhysXPhysicsScene.ts","../src/PhysXStaticCollider.ts","../src/joint/PhysXJoint.ts","../src/joint/PhysXFixedJoint.ts","../src/joint/PhysXHingeJoint.ts","../src/joint/PhysXSpringJoint.ts","../src/shape/PhysXPlaneColliderShape.ts","../src/shape/PhysXSphereColliderShape.ts","../src/PhysXPhysics.ts","../../../node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_type_of.js","../src/index.ts"],"sourcesContent":["function _instanceof(left, right) {\n    if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n        return !!right[Symbol.hasInstance](left);\n    } else return left instanceof right;\n}\nexport { _instanceof as _ };\n","function _set_prototype_of(o, p) {\n    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {\n        o.__proto__ = p;\n\n        return o;\n    };\n\n    return _set_prototype_of(o, p);\n}\nexport { _set_prototype_of as _ };\n","import { _ as _set_prototype_of } from \"./_set_prototype_of.js\";\n\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });\n\n    if (superClass) _set_prototype_of(subClass, superClass);\n}\nexport { _inherits as _ };\n","import { Quaternion, Vector3, DisorderedArray } from \"@galacean/engine\";\nimport { IColliderShape } from \"@galacean/engine-design\";\nimport { PhysXCharacterController } from \"../PhysXCharacterController\";\nimport { PhysXPhysics } from \"../PhysXPhysics\";\nimport { PhysXPhysicsMaterial } from \"../PhysXPhysicsMaterial\";\n\n/**\n * Flags which affect the behavior of Shapes.\n */\nexport enum ShapeFlag {\n  /** The shape will partake in collision in the physical simulation. */\n  SIMULATION_SHAPE = 1 << 0,\n  /** The shape will partake in scene queries (ray casts, overlap tests, sweeps, ...). */\n  SCENE_QUERY_SHAPE = 1 << 1,\n  /** The shape is a trigger which can send reports whenever other shapes enter/leave its volume. */\n  TRIGGER_SHAPE = 1 << 2\n}\n\n/**\n * Abstract class for collider shapes.\n */\nexport abstract class PhysXColliderShape implements IColliderShape {\n  static readonly halfSqrt: number = 0.70710678118655;\n  static transform = {\n    translation: new Vector3(),\n    rotation: null\n  };\n\n  /** @internal */\n  _controllers: DisorderedArray<PhysXCharacterController> = new DisorderedArray<PhysXCharacterController>();\n\n  protected _physXPhysics: PhysXPhysics;\n  protected _worldScale: Vector3 = new Vector3(1, 1, 1);\n  protected _position: Vector3 = new Vector3();\n  protected _rotation: Vector3 = null;\n  protected _axis: Quaternion = null;\n  protected _physXRotation: Quaternion = new Quaternion();\n\n  private _shapeFlags: ShapeFlag = ShapeFlag.SCENE_QUERY_SHAPE | ShapeFlag.SIMULATION_SHAPE;\n\n  /** @internal */\n  _pxMaterial: any;\n  /** @internal */\n  _pxShape: any;\n  /** @internal */\n  _pxGeometry: any;\n  /** @internal */\n  _id: number;\n\n  constructor(physXPhysics: PhysXPhysics) {\n    this._physXPhysics = physXPhysics;\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.setRotation }\n   */\n  setRotation(value: Vector3): void {\n    this._rotation = value;\n    Quaternion.rotationYawPitchRoll(value.x, value.y, value.z, this._physXRotation);\n    this._axis && Quaternion.multiply(this._physXRotation, this._axis, this._physXRotation);\n    this._physXRotation.normalize();\n    this._setLocalPose();\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.setPosition }\n   */\n  setPosition(value: Vector3): void {\n    if (value !== this._position) {\n      this._position.copyFrom(value);\n    }\n    const controllers = this._controllers;\n    for (let i = 0, n = controllers.length; i < n; i++) {\n      controllers.get(i)._updateShapePosition(this._position, this._worldScale);\n    }\n\n    this._setLocalPose();\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.setWorldScale }\n   */\n  setWorldScale(scale: Vector3): void {\n    this._worldScale.copyFrom(scale);\n    this._setLocalPose();\n\n    const controllers = this._controllers;\n    for (let i = 0, n = controllers.length; i < n; i++) {\n      controllers.get(i)._updateShapePosition(this._position, this._worldScale);\n    }\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.setContactOffset }\n   * @default 0.02f * PxTolerancesScale::length\n   */\n  setContactOffset(offset: number): void {\n    this._pxShape.setContactOffset(offset);\n\n    const controllers = this._controllers;\n    for (let i = 0, n = controllers.length; i < n; i++) {\n      controllers.get(i)._pxController?.setContactOffset(offset);\n    }\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.setMaterial }\n   */\n  setMaterial(value: PhysXPhysicsMaterial): void {\n    this._pxMaterial = value._pxMaterial;\n    this._pxShape.setMaterial(this._pxMaterial);\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.setIsTrigger }\n   */\n  setIsTrigger(value: boolean): void {\n    this._modifyFlag(ShapeFlag.SIMULATION_SHAPE, !value);\n    this._modifyFlag(ShapeFlag.TRIGGER_SHAPE, value);\n    this._setShapeFlags(this._shapeFlags);\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.destroy }\n   */\n  destroy(): void {\n    this._pxShape.release();\n  }\n\n  /**\n   *  @internal\n   */\n  _setShapeFlags(flags: ShapeFlag) {\n    this._shapeFlags = flags;\n    this._pxShape.setFlags(new this._physXPhysics._physX.PxShapeFlags(this._shapeFlags));\n  }\n\n  protected _setLocalPose(): void {\n    const transform = PhysXColliderShape.transform;\n    Vector3.multiply(this._position, this._worldScale, transform.translation);\n    transform.rotation = this._physXRotation;\n    this._pxShape.setLocalPose(transform);\n  }\n\n  protected _initialize(material: PhysXPhysicsMaterial, id: number): void {\n    this._id = id;\n    this._pxMaterial = material._pxMaterial;\n    this._pxShape = this._physXPhysics._pxPhysics.createShape(\n      this._pxGeometry,\n      material._pxMaterial,\n      true,\n      new this._physXPhysics._physX.PxShapeFlags(this._shapeFlags)\n    );\n    this._pxShape.setUUID(id);\n  }\n\n  private _modifyFlag(flag: ShapeFlag, value: boolean): void {\n    this._shapeFlags = value ? this._shapeFlags | flag : this._shapeFlags & ~flag;\n  }\n}\n","/**\n * PhysX runtime mode.\n */\nexport enum PhysXRuntimeMode {\n  /** Use webAssembly mode first, if WebAssembly mode is not supported, roll back to JavaScript mode.  */\n  Auto,\n  /** WebAssembly mode. */\n  WebAssembly,\n  /** JavaScript mode. */\n  JavaScript\n}\n","import { Vector3 } from \"@galacean/engine\";\nimport { IBoxColliderShape } from \"@galacean/engine-design\";\nimport { PhysXPhysics } from \"../PhysXPhysics\";\nimport { PhysXPhysicsMaterial } from \"../PhysXPhysicsMaterial\";\nimport { PhysXColliderShape } from \"./PhysXColliderShape\";\n\n/**\n * Box collider shape in PhysX.\n */\nexport class PhysXBoxColliderShape extends PhysXColliderShape implements IBoxColliderShape {\n  private static _tempHalfExtents = new Vector3();\n  /** @internal */\n  _halfSize: Vector3 = new Vector3();\n  private _sizeScale: Vector3 = new Vector3(1, 1, 1);\n\n  constructor(physXPhysics: PhysXPhysics, uniqueID: number, size: Vector3, material: PhysXPhysicsMaterial) {\n    super(physXPhysics);\n    const halfSize = this._halfSize;\n    halfSize.set(size.x * 0.5, size.y * 0.5, size.z * 0.5);\n    this._pxGeometry = new physXPhysics._physX.PxBoxGeometry(halfSize.x, halfSize.y, halfSize.z);\n    this._initialize(material, uniqueID);\n    this._setLocalPose();\n  }\n\n  /**\n   * {@inheritDoc IBoxColliderShape.setSize }\n   */\n  setSize(value: Vector3): void {\n    const halfSize = this._halfSize;\n    const tempExtents = PhysXBoxColliderShape._tempHalfExtents;\n    halfSize.set(value.x * 0.5, value.y * 0.5, value.z * 0.5);\n    Vector3.multiply(halfSize, this._sizeScale, tempExtents);\n    this._pxGeometry.halfExtents = tempExtents;\n    this._pxShape.setGeometry(this._pxGeometry);\n\n    this._updateController(tempExtents);\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.setWorldScale }\n   */\n  override setWorldScale(scale: Vector3): void {\n    super.setWorldScale(scale);\n    this._sizeScale.set(Math.abs(scale.x), Math.abs(scale.y), Math.abs(scale.z));\n    const tempExtents = PhysXBoxColliderShape._tempHalfExtents;\n    Vector3.multiply(this._halfSize, this._sizeScale, tempExtents);\n    this._pxGeometry.halfExtents = tempExtents;\n    this._pxShape.setGeometry(this._pxGeometry);\n\n    this._updateController(tempExtents);\n  }\n\n  private _updateController(extents: Vector3) {\n    const controllers = this._controllers;\n    for (let i = 0, n = controllers.length; i < n; i++) {\n      const pxController = controllers.get(i)._pxController;\n\n      if (pxController) {\n        pxController.setHalfHeight(extents.x);\n        pxController.setHalfSideExtent(extents.y);\n        pxController.setHalfForwardExtent(extents.z);\n      }\n    }\n  }\n}\n","import { ICapsuleColliderShape } from \"@galacean/engine-design\";\nimport { Quaternion, Vector3 } from \"@galacean/engine\";\nimport { PhysXPhysics } from \"../PhysXPhysics\";\nimport { PhysXPhysicsMaterial } from \"../PhysXPhysicsMaterial\";\nimport { PhysXColliderShape } from \"./PhysXColliderShape\";\n\n/**\n * Capsule collider shape in PhysX.\n */\nexport class PhysXCapsuleColliderShape extends PhysXColliderShape implements ICapsuleColliderShape {\n  /** @internal */\n  _radius: number;\n  /** @internal */\n  _halfHeight: number;\n  private _upAxis: ColliderShapeUpAxis = ColliderShapeUpAxis.Y;\n  private _sizeScale: Vector3 = new Vector3(1, 1, 1);\n\n  constructor(\n    physXPhysics: PhysXPhysics,\n    uniqueID: number,\n    radius: number,\n    height: number,\n    material: PhysXPhysicsMaterial\n  ) {\n    super(physXPhysics);\n\n    this._radius = radius;\n    this._halfHeight = height * 0.5;\n    this._axis = new Quaternion(0, 0, PhysXColliderShape.halfSqrt, PhysXColliderShape.halfSqrt);\n    this._physXRotation.copyFrom(this._axis);\n\n    this._pxGeometry = new physXPhysics._physX.PxCapsuleGeometry(this._radius, this._halfHeight);\n    this._initialize(material, uniqueID);\n    this._setLocalPose();\n  }\n\n  /**\n   * {@inheritDoc ICapsuleColliderShape.setRadius }\n   */\n  setRadius(value: number): void {\n    this._radius = value;\n    const sizeScale = this._sizeScale;\n    switch (this._upAxis) {\n      case ColliderShapeUpAxis.X:\n        this._pxGeometry.radius = this._radius * Math.max(sizeScale.y, sizeScale.z);\n        break;\n      case ColliderShapeUpAxis.Y:\n        this._pxGeometry.radius = this._radius * Math.max(sizeScale.x, sizeScale.z);\n        break;\n      case ColliderShapeUpAxis.Z:\n        this._pxGeometry.radius = this._radius * Math.max(sizeScale.x, sizeScale.y);\n        break;\n    }\n    this._pxShape.setGeometry(this._pxGeometry);\n\n    const radius = this._pxGeometry.radius;\n    const controllers = this._controllers;\n    for (let i = 0, n = controllers.length; i < n; i++) {\n      controllers.get(i)._pxController?.setRadius(radius);\n    }\n  }\n\n  /**\n   * {@inheritDoc ICapsuleColliderShape.setHeight }\n   */\n  setHeight(value: number): void {\n    this._halfHeight = value * 0.5;\n    const sizeScale = this._sizeScale;\n    switch (this._upAxis) {\n      case ColliderShapeUpAxis.X:\n        this._pxGeometry.halfHeight = this._halfHeight * sizeScale.x;\n        break;\n      case ColliderShapeUpAxis.Y:\n        this._pxGeometry.halfHeight = this._halfHeight * sizeScale.y;\n        break;\n      case ColliderShapeUpAxis.Z:\n        this._pxGeometry.halfHeight = this._halfHeight * sizeScale.z;\n        break;\n    }\n    this._pxShape.setGeometry(this._pxGeometry);\n\n    const height = this._pxGeometry.halfHeight * 2;\n    const controllers = this._controllers;\n    for (let i = 0, n = controllers.length; i < n; i++) {\n      controllers.get(i)._pxController?.setHeight(height);\n    }\n  }\n\n  /**\n   * {@inheritDoc ICapsuleColliderShape.setUpAxis }\n   */\n  setUpAxis(upAxis: ColliderShapeUpAxis): void {\n    const { _rotation: rotation, _axis: axis, _physXRotation: physXRotation } = this;\n\n    this._upAxis = upAxis;\n    switch (this._upAxis) {\n      case ColliderShapeUpAxis.X:\n        axis.set(0, 0, 0, 1);\n        break;\n      case ColliderShapeUpAxis.Y:\n        axis.set(0, 0, PhysXColliderShape.halfSqrt, PhysXColliderShape.halfSqrt);\n        break;\n      case ColliderShapeUpAxis.Z:\n        axis.set(0, PhysXColliderShape.halfSqrt, 0, PhysXColliderShape.halfSqrt);\n        break;\n    }\n    if (rotation) {\n      Quaternion.rotationYawPitchRoll(rotation.x, rotation.y, rotation.z, physXRotation);\n      Quaternion.multiply(physXRotation, axis, physXRotation);\n    } else {\n      physXRotation.copyFrom(axis);\n    }\n    this._setLocalPose();\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.setWorldScale }\n   */\n  override setWorldScale(scale: Vector3): void {\n    super.setWorldScale(scale);\n\n    const sizeScale = this._sizeScale.set(Math.abs(scale.x), Math.abs(scale.y), Math.abs(scale.z));\n    const geometry = this._pxGeometry;\n    switch (this._upAxis) {\n      case ColliderShapeUpAxis.X:\n        geometry.radius = this._radius * Math.max(sizeScale.y, sizeScale.z);\n        geometry.halfHeight = this._halfHeight * sizeScale.x;\n        break;\n      case ColliderShapeUpAxis.Y:\n        geometry.radius = this._radius * Math.max(sizeScale.x, sizeScale.z);\n        geometry.halfHeight = this._halfHeight * sizeScale.y;\n        break;\n      case ColliderShapeUpAxis.Z:\n        geometry.radius = this._radius * Math.max(sizeScale.x, sizeScale.y);\n        geometry.halfHeight = this._halfHeight * sizeScale.z;\n        break;\n    }\n    this._pxShape.setGeometry(geometry);\n\n    const radius = geometry.radius;\n    const height = geometry.halfHeight * 2;\n    const controllers = this._controllers;\n    for (let i = 0, n = controllers.length; i < n; i++) {\n      const pxController = controllers.get(i)._pxController;\n      if (pxController) {\n        pxController.setRadius(radius);\n        pxController.setHeight(height);\n      }\n    }\n  }\n}\n\n/**\n * The up axis of the collider shape.\n */\nenum ColliderShapeUpAxis {\n  /** Up axis is X. */\n  X,\n  /** Up axis is Y. */\n  Y,\n  /** Up axis is Z. */\n  Z\n}\n","import { ICharacterController } from \"@galacean/engine-design\";\nimport { Vector3 } from \"@galacean/engine\";\nimport { PhysXPhysics } from \"./PhysXPhysics\";\nimport { PhysXPhysicsScene } from \"./PhysXPhysicsScene\";\nimport { PhysXBoxColliderShape } from \"./shape/PhysXBoxColliderShape\";\nimport { PhysXCapsuleColliderShape } from \"./shape/PhysXCapsuleColliderShape\";\nimport { PhysXColliderShape } from \"./shape/PhysXColliderShape\";\n\n/**\n * Base class for character controllers.\n */\nexport class PhysXCharacterController implements ICharacterController {\n  private static _tempVec = new Vector3();\n\n  /** @internal */\n  _id: number;\n  /** @internal */\n  _pxController: any;\n  /** @internal */\n  _pxManager: PhysXPhysicsScene;\n  /** @internal */\n  _shape: PhysXColliderShape;\n  private _shapeScaledPosition = new Vector3();\n  private _worldPosition: Vector3 = null;\n\n  private _physXPhysics: PhysXPhysics;\n\n  constructor(physXPhysics: PhysXPhysics) {\n    this._physXPhysics = physXPhysics;\n  }\n\n  /**\n   * {@inheritDoc ICharacterController.move }\n   */\n  move(disp: Vector3, minDist: number, elapsedTime: number): number {\n    return this._pxController?.move(disp, minDist, elapsedTime) ?? 0;\n  }\n\n  /**\n   * {@inheritDoc ICharacterController.setWorldPosition }\n   */\n  setWorldPosition(position: Vector3): void {\n    this._worldPosition = position;\n    this._updateNativePosition();\n  }\n\n  /**\n   * {@inheritDoc ICharacterController.getWorldPosition }\n   */\n  getWorldPosition(position: Vector3): void {\n    if (this._pxController) {\n      position.copyFrom(this._pxController.getPosition());\n      position.subtract(this._shapeScaledPosition);\n    }\n  }\n\n  /**\n   * {@inheritDoc ICharacterController.setStepOffset }\n   */\n  setStepOffset(offset: number): void {\n    this._pxController?.setStepOffset(offset);\n  }\n\n  /**\n   * {@inheritDoc ICharacterController.setNonWalkableMode }\n   */\n  setNonWalkableMode(flag: number): void {\n    this._pxController?.setNonWalkableMode(flag);\n  }\n\n  /**\n   * {@inheritDoc ICharacterController.setUpDirection }\n   */\n  setUpDirection(up: Vector3): void {\n    this._pxController?.setUpDirection(up);\n  }\n\n  /**\n   * {@inheritDoc ICharacterController.setSlopeLimit }\n   */\n  setSlopeLimit(slopeLimit: number): void {\n    this._pxController?.setSlopeLimit(slopeLimit);\n  }\n\n  /**\n   * {@inheritDoc ICharacterController.addShape }\n   */\n  addShape(shape: PhysXColliderShape): void {\n    // When CharacterController is disabled, set shape property need check pxController whether exist because of this._pxManager is null and won't create pxController\n    this._pxManager && this._createPXController(this._pxManager, shape);\n    this._shape = shape;\n    shape._controllers.add(this);\n  }\n\n  /**\n   * {@inheritDoc ICharacterController.removeShape }\n   */\n  removeShape(shape: PhysXColliderShape): void {\n    this._destroyPXController();\n    this._shape = null;\n    shape._controllers.delete(this);\n  }\n\n  /**\n   * {@inheritDoc ICharacterController.destroy }\n   */\n  destroy(): void {\n    this._destroyPXController();\n  }\n\n  /**\n   * @internal\n   */\n  _createPXController(pxManager: PhysXPhysicsScene, shape: PhysXColliderShape): void {\n    let desc: any;\n    if (shape instanceof PhysXBoxColliderShape) {\n      desc = new this._physXPhysics._physX.PxBoxControllerDesc();\n      desc.halfHeight = shape._halfSize.x;\n      desc.halfSideExtent = shape._halfSize.y;\n      desc.halfForwardExtent = shape._halfSize.z;\n    } else if (shape instanceof PhysXCapsuleColliderShape) {\n      desc = new this._physXPhysics._physX.PxCapsuleControllerDesc();\n      desc.radius = shape._radius;\n      desc.height = shape._halfHeight * 2;\n      desc.climbingMode = 1; // constraint mode\n    } else {\n      throw \"unsupported shape type\";\n    }\n\n    desc.setMaterial(shape._pxMaterial);\n\n    this._pxController = pxManager._getControllerManager().createController(desc);\n    this._pxController.setUUID(shape._id);\n  }\n\n  /**\n   * @internal\n   */\n  _destroyPXController(): void {\n    if (this._pxController) {\n      this._pxController.release();\n      this._pxController = null;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _updateShapePosition(shapePosition: Vector3, worldScale: Vector3): void {\n    Vector3.multiply(shapePosition, worldScale, this._shapeScaledPosition);\n    this._updateNativePosition();\n  }\n\n  private _updateNativePosition() {\n    const worldPosition = this._worldPosition;\n    if (this._pxController && worldPosition) {\n      Vector3.add(worldPosition, this._shapeScaledPosition, PhysXCharacterController._tempVec);\n      this._pxController.setPosition(PhysXCharacterController._tempVec);\n    }\n  }\n}\n","import { ICollider } from \"@galacean/engine-design\";\nimport { Quaternion, Vector3 } from \"@galacean/engine\";\nimport { PhysXPhysics } from \"./PhysXPhysics\";\nimport { PhysXColliderShape } from \"./shape/PhysXColliderShape\";\n\n/**\n * Abstract class of physical collider.\n */\nexport abstract class PhysXCollider implements ICollider {\n  private static _tempTransform: {\n    translation: Vector3;\n    rotation: Quaternion;\n  } = { translation: null, rotation: null };\n\n  /** @internal */\n  _pxActor: any;\n\n  protected _physXPhysics: PhysXPhysics;\n\n  constructor(physXPhysics: PhysXPhysics) {\n    this._physXPhysics = physXPhysics;\n  }\n\n  /**\n   * {@inheritDoc ICollider.addShape }\n   */\n  addShape(shape: PhysXColliderShape): void {\n    this._pxActor.attachShape(shape._pxShape);\n  }\n\n  /**\n   * {@inheritDoc ICollider.removeShape }\n   */\n  removeShape(shape: PhysXColliderShape): void {\n    this._pxActor.detachShape(shape._pxShape, true);\n  }\n\n  /**\n   * {@inheritDoc ICollider.setWorldTransform }\n   */\n  setWorldTransform(position: Vector3, rotation: Quaternion): void {\n    this._pxActor.setGlobalPose(this._transform(position, rotation), true);\n  }\n\n  /**\n   * {@inheritDoc ICollider.getWorldTransform }\n   */\n  getWorldTransform(outPosition: Vector3, outRotation: Quaternion): void {\n    const transform = this._pxActor.getGlobalPose();\n    outPosition.set(transform.translation.x, transform.translation.y, transform.translation.z);\n    outRotation.set(transform.rotation.x, transform.rotation.y, transform.rotation.z, transform.rotation.w);\n  }\n\n  /**\n   * {@inheritDoc ICollider.destroy }\n   */\n  destroy(): void {\n    this._pxActor.release();\n  }\n\n  /**\n   * @internal\n   */\n  _transform(pos: Vector3, rot: Quaternion): { translation: Vector3; rotation: Quaternion } {\n    const transform = PhysXCollider._tempTransform;\n    transform.translation = pos;\n    transform.rotation = rot.normalize();\n    return transform;\n  }\n}\n","import { IDynamicCollider } from \"@galacean/engine-design\";\nimport { Quaternion, Vector3 } from \"@galacean/engine\";\nimport { PhysXCollider } from \"./PhysXCollider\";\nimport { PhysXPhysics } from \"./PhysXPhysics\";\n\n/**\n * The collision detection mode constants used for PhysXDynamicCollider.collisionDetectionMode.\n * */\nexport enum CollisionDetectionMode {\n  /** Continuous collision detection is off for this dynamic collider. */\n  Discrete,\n  /** Continuous collision detection is on for colliding with static mesh geometry. */\n  Continuous,\n  /** Continuous collision detection is on for colliding with static and dynamic geometry. */\n  ContinuousDynamic,\n  /** Speculative continuous collision detection is on for static and dynamic geometries */\n  ContinuousSpeculative\n}\n\n/**\n * A dynamic collider can act with self-defined movement or physical force\n */\nexport class PhysXDynamicCollider extends PhysXCollider implements IDynamicCollider {\n  private static _tempTranslation = new Vector3();\n  private static _tempRotation = new Quaternion();\n\n  constructor(physXPhysics: PhysXPhysics, position: Vector3, rotation: Quaternion) {\n    super(physXPhysics);\n    const transform = this._transform(position, rotation);\n    this._pxActor = physXPhysics._pxPhysics.createRigidDynamic(transform);\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setLinearDamping }\n   */\n  setLinearDamping(value: number): void {\n    this._pxActor.setLinearDamping(value);\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setAngularDamping }\n   */\n  setAngularDamping(value: number): void {\n    this._pxActor.setAngularDamping(value);\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setLinearVelocity }\n   */\n  setLinearVelocity(value: Vector3): void {\n    this._pxActor.setLinearVelocity(value, true);\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setAngularVelocity }\n   */\n  setAngularVelocity(value: Vector3): void {\n    this._pxActor.setAngularVelocity(value, true);\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setMass }\n   */\n  setMass(value: number): void {\n    this._pxActor.setMass(value);\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setCenterOfMass }\n   */\n  setCenterOfMass(position: Vector3): void {\n    this._pxActor.setCMassLocalPose(position);\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setInertiaTensor }\n   */\n  setInertiaTensor(value: Vector3): void {\n    this._pxActor.setMassSpaceInertiaTensor(value);\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setMaxAngularVelocity }\n   */\n  setMaxAngularVelocity(value: number): void {\n    this._pxActor.setMaxAngularVelocity(value);\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setMaxDepenetrationVelocity }\n   */\n  setMaxDepenetrationVelocity(value: number): void {\n    this._pxActor.setMaxDepenetrationVelocity(value);\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setSleepThreshold }\n   * @default 1e-5f * PxTolerancesScale::speed * PxTolerancesScale::speed\n   */\n  setSleepThreshold(value: number): void {\n    this._pxActor.setSleepThreshold(value);\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setSolverIterations }\n   */\n  setSolverIterations(value: number): void {\n    this._pxActor.setSolverIterationCounts(value, 1);\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setCollisionDetectionMode }\n   */\n  setCollisionDetectionMode(value: number): void {\n    switch (value) {\n      case CollisionDetectionMode.Continuous:\n        this._pxActor.setRigidBodyFlag(this._physXPhysics._physX.PxRigidBodyFlag.eENABLE_CCD, true);\n        break;\n      case CollisionDetectionMode.ContinuousDynamic:\n        this._pxActor.setRigidBodyFlag(this._physXPhysics._physX.PxRigidBodyFlag.eENABLE_CCD_FRICTION, true);\n        break;\n      case CollisionDetectionMode.ContinuousSpeculative:\n        this._pxActor.setRigidBodyFlag(this._physXPhysics._physX.PxRigidBodyFlag.eENABLE_SPECULATIVE_CCD, true);\n        break;\n      case CollisionDetectionMode.Discrete:\n        const physX = this._physXPhysics._physX;\n        this._pxActor.setRigidBodyFlag(physX.PxRigidBodyFlag.eENABLE_CCD, false);\n        this._pxActor.setRigidBodyFlag(physX.PxRigidBodyFlag.eENABLE_CCD_FRICTION, false);\n        this._pxActor.setRigidBodyFlag(physX.PxRigidBodyFlag.eENABLE_SPECULATIVE_CCD, false);\n        break;\n    }\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setIsKinematic }\n   */\n  setIsKinematic(value: boolean): void {\n    if (value) {\n      this._pxActor.setRigidBodyFlag(this._physXPhysics._physX.PxRigidBodyFlag.eKINEMATIC, true);\n    } else {\n      this._pxActor.setRigidBodyFlag(this._physXPhysics._physX.PxRigidBodyFlag.eKINEMATIC, false);\n    }\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.setConstraints }\n   */\n  setConstraints(flags: number): void {\n    this._pxActor.setRigidDynamicLockFlags(flags);\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.addForce }\n   */\n  addForce(force: Vector3) {\n    this._pxActor.addForce({ x: force.x, y: force.y, z: force.z });\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.addTorque }\n   */\n  addTorque(torque: Vector3) {\n    this._pxActor.addTorque({ x: torque.x, y: torque.y, z: torque.z });\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.move }\n   */\n  move(positionOrRotation: Vector3 | Quaternion, rotation?: Quaternion): void {\n    if (rotation) {\n      this._pxActor.setKinematicTarget(positionOrRotation, rotation);\n      return;\n    }\n\n    const tempTranslation = PhysXDynamicCollider._tempTranslation;\n    const tempRotation = PhysXDynamicCollider._tempRotation;\n    this.getWorldTransform(tempTranslation, tempRotation);\n    if (positionOrRotation instanceof Vector3) {\n      this._pxActor.setKinematicTarget(positionOrRotation, tempRotation);\n    } else {\n      this._pxActor.setKinematicTarget(tempTranslation, positionOrRotation);\n    }\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.sleep }\n   */\n  sleep(): void {\n    return this._pxActor.putToSleep();\n  }\n\n  /**\n   * {@inheritDoc IDynamicCollider.wakeUp }\n   */\n  wakeUp(): void {\n    return this._pxActor.wakeUp();\n  }\n}\n","import { IPhysicsManager } from \"@galacean/engine-design\";\nimport { TriggerEvent } from \"./PhysXPhysicsScene\";\n\nexport class PhysXPhysicsManager implements IPhysicsManager {\n  /** @internal */\n  _eventMap: Record<number, Record<number, TriggerEvent>> = {};\n}\n","import { IPhysicsMaterial } from \"@galacean/engine-design\";\nimport { PhysXPhysics } from \"./PhysXPhysics\";\n\n/**\n * Physics material describes how to handle colliding objects (friction, bounciness).\n */\nexport class PhysXPhysicsMaterial implements IPhysicsMaterial {\n  /** @internal */\n  _pxMaterial: any;\n\n  protected _physXPhysics: PhysXPhysics;\n\n  constructor(\n    physXPhysics: PhysXPhysics,\n    staticFriction: number,\n    dynamicFriction: number,\n    bounciness: number,\n    frictionCombine: CombineMode,\n    bounceCombine: CombineMode\n  ) {\n    this._physXPhysics = physXPhysics;\n    const pxMaterial = physXPhysics._pxPhysics.createMaterial(staticFriction, dynamicFriction, bounciness);\n    pxMaterial.setFrictionCombineMode(frictionCombine);\n    pxMaterial.setRestitutionCombineMode(bounceCombine);\n    this._pxMaterial = pxMaterial;\n  }\n\n  /**\n   * {@inheritDoc IPhysicsMaterial.setBounciness }\n   */\n  setBounciness(value: number) {\n    this._pxMaterial.setRestitution(value);\n  }\n\n  /**\n   * {@inheritDoc IPhysicsMaterial.setDynamicFriction }\n   */\n  setDynamicFriction(value: number) {\n    this._pxMaterial.setDynamicFriction(value);\n  }\n\n  /**\n   * {@inheritDoc IPhysicsMaterial.setStaticFriction }\n   */\n  setStaticFriction(value: number) {\n    this._pxMaterial.setStaticFriction(value);\n  }\n\n  /**\n   * {@inheritDoc IPhysicsMaterial.setBounceCombine }\n   */\n  setBounceCombine(value: CombineMode) {\n    this._pxMaterial.setRestitutionCombineMode(value);\n  }\n\n  /**\n   * {@inheritDoc IPhysicsMaterial.setFrictionCombine }\n   */\n  setFrictionCombine(value: CombineMode) {\n    this._pxMaterial.setFrictionCombineMode(value);\n  }\n\n  /**\n   * {@inheritDoc IPhysicsMaterial.destroy }\n   */\n  destroy(): void {\n    this._pxMaterial.release();\n  }\n}\n\n/**\n * Describes how physics materials of the colliding objects are combined.\n */\nenum CombineMode {\n  /** Averages the friction/bounce of the two colliding materials. */\n  Average,\n  /** Uses the smaller friction/bounce of the two colliding materials. */\n  Minimum,\n  /** Multiplies the friction/bounce of the two colliding materials. */\n  Multiply,\n  /** Uses the larger friction/bounce of the two colliding materials. */\n  Maximum\n}\n","import { Ray, Vector3, DisorderedArray } from \"@galacean/engine\";\nimport { IPhysicsScene } from \"@galacean/engine-design\";\nimport { PhysXCharacterController } from \"./PhysXCharacterController\";\nimport { PhysXCollider } from \"./PhysXCollider\";\nimport { PhysXPhysics } from \"./PhysXPhysics\";\nimport { PhysXPhysicsManager } from \"./PhysXPhysicsManager\";\nimport { PhysXColliderShape } from \"./shape/PhysXColliderShape\";\n\n/**\n * A manager is a collection of colliders and constraints which can interact.\n */\nexport class PhysXPhysicsScene implements IPhysicsScene {\n  /** @internal */\n  _pxControllerManager: any = null;\n\n  private static _tempPosition: Vector3 = new Vector3();\n  private static _tempNormal: Vector3 = new Vector3();\n\n  private _physXPhysics: PhysXPhysics;\n  private _physXManager: PhysXPhysicsManager;\n  private _pxRaycastHit: any;\n  private _pxFilterData: any;\n\n  private _pxScene: any;\n\n  private readonly _onContactEnter?: (obj1: number, obj2: number) => void;\n  private readonly _onContactExit?: (obj1: number, obj2: number) => void;\n  private readonly _onContactStay?: (obj1: number, obj2: number) => void;\n  private readonly _onTriggerEnter?: (obj1: number, obj2: number) => void;\n  private readonly _onTriggerExit?: (obj1: number, obj2: number) => void;\n  private readonly _onTriggerStay?: (obj1: number, obj2: number) => void;\n\n  private _currentEvents: DisorderedArray<TriggerEvent> = new DisorderedArray<TriggerEvent>();\n\n  private _eventPool: TriggerEvent[] = [];\n\n  constructor(\n    physXPhysics: PhysXPhysics,\n    physicsManager: PhysXPhysicsManager,\n    onContactEnter?: (obj1: number, obj2: number) => void,\n    onContactExit?: (obj1: number, obj2: number) => void,\n    onContactStay?: (obj1: number, obj2: number) => void,\n    onTriggerEnter?: (obj1: number, obj2: number) => void,\n    onTriggerExit?: (obj1: number, obj2: number) => void,\n    onTriggerStay?: (obj1: number, obj2: number) => void\n  ) {\n    this._physXPhysics = physXPhysics;\n    this._physXManager = physicsManager;\n\n    const physX = physXPhysics._physX;\n\n    this._pxRaycastHit = new physX.PxRaycastHit();\n    this._pxFilterData = new physX.PxQueryFilterData();\n    this._pxFilterData.flags = new physX.PxQueryFlags(QueryFlag.STATIC | QueryFlag.DYNAMIC | QueryFlag.PRE_FILTER);\n\n    this._onContactEnter = onContactEnter;\n    this._onContactExit = onContactExit;\n    this._onContactStay = onContactStay;\n    this._onTriggerEnter = onTriggerEnter;\n    this._onTriggerExit = onTriggerExit;\n    this._onTriggerStay = onTriggerStay;\n\n    const triggerCallback = {\n      onContactBegin: (index1, index2) => {\n        this._onContactEnter(index1, index2);\n      },\n      onContactEnd: (index1, index2) => {\n        this._onContactExit(index1, index2);\n      },\n      onContactPersist: (index1, index2) => {\n        this._onContactStay(index1, index2);\n      },\n      onTriggerBegin: (index1, index2) => {\n        const event = index1 < index2 ? this._getTrigger(index1, index2) : this._getTrigger(index2, index1);\n        event.state = TriggerEventState.Enter;\n        this._currentEvents.add(event);\n      },\n      onTriggerEnd: (index1, index2) => {\n        let event: TriggerEvent;\n        if (index1 < index2) {\n          const subMap = this._physXManager._eventMap[index1];\n          event = subMap[index2];\n          subMap[index2] = undefined;\n        } else {\n          const subMap = this._physXManager._eventMap[index2];\n          event = subMap[index1];\n          subMap[index1] = undefined;\n        }\n        event.state = TriggerEventState.Exit;\n      }\n    };\n\n    const pxPhysics = physXPhysics._pxPhysics;\n    const physXSimulationCallbackInstance = physX.PxSimulationEventCallback.implement(triggerCallback);\n    const sceneDesc = physX.getDefaultSceneDesc(pxPhysics.getTolerancesScale(), 0, physXSimulationCallbackInstance);\n    this._pxScene = pxPhysics.createScene(sceneDesc);\n  }\n\n  /**\n   * {@inheritDoc IPhysicsManager.setGravity }\n   */\n  setGravity(value: Vector3) {\n    this._pxScene.setGravity(value);\n  }\n\n  /**\n   * {@inheritDoc IPhysicsManager.addColliderShape }\n   */\n  addColliderShape(colliderShape: PhysXColliderShape) {\n    this._physXManager._eventMap[colliderShape._id] = {};\n  }\n\n  /**\n   * {@inheritDoc IPhysicsManager.removeColliderShape }\n   */\n  removeColliderShape(colliderShape: PhysXColliderShape) {\n    const { _eventPool: eventPool, _currentEvents: currentEvents } = this;\n    const { _id: id } = colliderShape;\n    const { _eventMap: eventMap } = this._physXManager;\n    currentEvents.forEach((event, i) => {\n      if (event.index1 == id) {\n        currentEvents.deleteByIndex(i);\n        eventPool.push(event);\n      } else if (event.index2 == id) {\n        currentEvents.deleteByIndex(i);\n        eventPool.push(event);\n        // If the shape is big index, should clear from the small index shape subMap\n        eventMap[event.index1][id] = undefined;\n      }\n    });\n    delete eventMap[id];\n  }\n\n  /**\n   * {@inheritDoc IPhysicsManager.addCollider }\n   */\n  addCollider(collider: PhysXCollider): void {\n    this._pxScene.addActor(collider._pxActor, null);\n  }\n\n  /**\n   * {@inheritDoc IPhysicsManager.removeCollider }\n   */\n  removeCollider(collider: PhysXCollider): void {\n    this._pxScene.removeActor(collider._pxActor, true);\n  }\n\n  /**\n   * {@inheritDoc IPhysicsManager.addCharacterController }\n   */\n  addCharacterController(characterController: PhysXCharacterController): void {\n    // Physx have no API to remove/readd cct into scene.\n    if (!characterController._pxController) {\n      const shape = characterController._shape;\n      if (shape) {\n        const lastPXManager = characterController._pxManager;\n        if (lastPXManager !== this) {\n          lastPXManager && characterController._destroyPXController();\n          characterController._createPXController(this, shape);\n        }\n      }\n    }\n    characterController._pxManager = this;\n  }\n\n  /**\n   * {@inheritDoc IPhysicsManager.removeCharacterController }\n   */\n  removeCharacterController(characterController: PhysXCharacterController): void {\n    characterController._pxManager = null;\n  }\n\n  /**\n   * {@inheritDoc IPhysicsManager.update }\n   */\n  update(elapsedTime: number): void {\n    this._simulate(elapsedTime);\n    this._fetchResults();\n    this._fireEvent();\n  }\n\n  /**\n   * {@inheritDoc IPhysicsManager.raycast }\n   */\n  raycast(\n    ray: Ray,\n    distance: number,\n    onRaycast: (obj: number) => boolean,\n    hit?: (shapeUniqueID: number, distance: number, position: Vector3, normal: Vector3) => void\n  ): boolean {\n    const { _pxRaycastHit: pxHitResult } = this;\n    distance = Math.min(distance, 3.4e38); // float32 max value limit in physx raycast.\n\n    const raycastCallback = {\n      preFilter: (filterData, index, actor) => {\n        if (onRaycast(index)) {\n          return 2; // eBLOCK\n        } else {\n          return 0; // eNONE\n        }\n      },\n      postFilter: (filterData, hit) => {}\n    };\n\n    const result = this._pxScene.raycastSingle(\n      ray.origin,\n      ray.direction,\n      distance,\n      pxHitResult,\n      this._pxFilterData,\n      this._physXPhysics._physX.PxQueryFilterCallback.implement(raycastCallback)\n    );\n\n    if (result && hit != undefined) {\n      const { _tempPosition: position, _tempNormal: normal } = PhysXPhysicsScene;\n      const { position: pxPosition, normal: pxNormal } = pxHitResult;\n      position.set(pxPosition.x, pxPosition.y, pxPosition.z);\n      normal.set(pxNormal.x, pxNormal.y, pxNormal.z);\n\n      hit(pxHitResult.getShape().getUUID(), pxHitResult.distance, position, normal);\n    }\n    return result;\n  }\n\n  /**\n   * @internal\n   */\n  _getControllerManager(): any {\n    let pxControllerManager = this._pxControllerManager;\n    if (pxControllerManager === null) {\n      this._pxControllerManager = pxControllerManager = this._pxScene.createControllerManager();\n    }\n    return pxControllerManager;\n  }\n\n  private _simulate(elapsedTime: number): void {\n    this._pxScene.simulate(elapsedTime, true);\n  }\n\n  private _fetchResults(block: boolean = true): void {\n    this._pxScene.fetchResults(block);\n  }\n\n  private _getTrigger(index1: number, index2: number): TriggerEvent {\n    let event: TriggerEvent;\n    if (this._eventPool.length) {\n      event = this._eventPool.pop();\n      event.index1 = index1;\n      event.index2 = index2;\n    } else {\n      event = new TriggerEvent(index1, index2);\n    }\n    this._physXManager._eventMap[index1][index2] = event;\n    return event;\n  }\n\n  private _fireEvent(): void {\n    const { _eventPool: eventPool, _currentEvents: currentEvents } = this;\n    currentEvents.forEach((event, i) => {\n      if (event.state == TriggerEventState.Enter) {\n        this._onTriggerEnter(event.index1, event.index2);\n        event.state = TriggerEventState.Stay;\n      } else if (event.state == TriggerEventState.Stay) {\n        this._onTriggerStay(event.index1, event.index2);\n      } else if (event.state == TriggerEventState.Exit) {\n        currentEvents.deleteByIndex(i);\n        this._onTriggerExit(event.index1, event.index2);\n        eventPool.push(event);\n      }\n    });\n  }\n}\n\n/**\n * Filtering flags for scene queries.\n */\nenum QueryFlag {\n  STATIC = 1 << 0,\n  DYNAMIC = 1 << 1,\n  PRE_FILTER = 1 << 2,\n  POST_FILTER = 1 << 3,\n  ANY_HIT = 1 << 4,\n  NO_BLOCK = 1 << 5\n}\n\n/**\n * Physics state\n */\nenum TriggerEventState {\n  Enter,\n  Stay,\n  Exit\n}\n\n/**\n * Trigger event to store interactive object ids and state.\n */\nexport class TriggerEvent {\n  state: TriggerEventState;\n  index1: number;\n  index2: number;\n\n  constructor(index1: number, index2: number) {\n    this.index1 = index1;\n    this.index2 = index2;\n  }\n}\n","import { IStaticCollider } from \"@galacean/engine-design\";\nimport { Quaternion, Vector3 } from \"@galacean/engine\";\nimport { PhysXCollider } from \"./PhysXCollider\";\nimport { PhysXPhysics } from \"./PhysXPhysics\";\n\n/**\n * A static collider component that will not move.\n * @remarks Mostly used for object which always stays at the same place and never moves around.\n */\nexport class PhysXStaticCollider extends PhysXCollider implements IStaticCollider {\n  constructor(physXPhysics: PhysXPhysics, position: Vector3, rotation: Quaternion) {\n    super(physXPhysics);\n    this._pxActor = physXPhysics._pxPhysics.createRigidStatic(this._transform(position, rotation));\n  }\n}\n","import { IJoint } from \"@galacean/engine-design\";\nimport { Quaternion, Vector3 } from \"@galacean/engine\";\nimport { PhysXCollider } from \"../PhysXCollider\";\nimport { PhysXPhysics } from \"../PhysXPhysics\";\n\n/**\n * a base interface providing common functionality for PhysX joints\n */\nexport class PhysXJoint implements IJoint {\n  protected static _xAxis = new Vector3(1, 0, 0);\n  protected static _defaultVec = new Vector3();\n  protected static _defaultQuat = new Quaternion();\n\n  protected _pxJoint: any;\n  protected _collider: PhysXCollider;\n  private _connectedAnchor = new Vector3();\n  private _breakForce: number = Number.MAX_VALUE;\n  private _breakTorque: number = Number.MAX_VALUE;\n\n  protected _physXPhysics: PhysXPhysics;\n\n  constructor(physXPhysics: PhysXPhysics) {\n    this._physXPhysics = physXPhysics;\n  }\n\n  /**\n   * {@inheritDoc IJoint.setConnectedCollider }\n   */\n  setConnectedCollider(value: PhysXCollider): void {\n    this._pxJoint.setActors(value?._pxActor || null, this._collider?._pxActor || null);\n  }\n\n  /**\n   * {@inheritDoc IJoint.setConnectedAnchor }\n   */\n  setConnectedAnchor(value: Vector3): void {\n    this._connectedAnchor.copyFrom(value);\n    this._setLocalPose(0, value, PhysXJoint._defaultQuat);\n  }\n\n  /**\n   * {@inheritDoc IJoint.setConnectedMassScale }\n   */\n  setConnectedMassScale(value: number): void {\n    this._pxJoint.setInvMassScale0(1 / value);\n  }\n\n  /**\n   * {@inheritDoc IJoint.setConnectedInertiaScale }\n   */\n  setConnectedInertiaScale(value: number): void {\n    this._pxJoint.setInvInertiaScale0(1 / value);\n  }\n\n  /**\n   * {@inheritDoc IJoint.setMassScale }\n   */\n  setMassScale(value: number): void {\n    this._pxJoint.setInvMassScale1(1 / value);\n  }\n\n  /**\n   * {@inheritDoc IJoint.setInertiaScale }\n   */\n  setInertiaScale(value: number): void {\n    this._pxJoint.setInvInertiaScale1(1 / value);\n  }\n\n  /**\n   * {@inheritDoc IJoint.setBreakForce }\n   */\n  setBreakForce(value: number): void {\n    this._breakForce = value;\n    this._pxJoint.setBreakForce(this._breakForce, this._breakTorque);\n  }\n\n  /**\n   * {@inheritDoc IJoint.setBreakTorque }\n   */\n  setBreakTorque(value: number): void {\n    this._breakTorque = value;\n    this._pxJoint.setBreakForce(this._breakForce, this._breakTorque);\n  }\n\n  /**\n   * Set the joint local pose for an actor.\n   * @param actor 0 for the first actor, 1 for the second actor.\n   * @param position the local position for the actor this joint\n   * @param rotation the local rotation for the actor this joint\n   */\n  protected _setLocalPose(actor: number, position: Vector3, rotation: Quaternion): void {\n    this._pxJoint.setLocalPose(actor, position, rotation);\n  }\n}\n","import { IFixedJoint } from \"@galacean/engine-design\";\nimport { PhysXCollider } from \"../PhysXCollider\";\nimport { PhysXPhysics } from \"../PhysXPhysics\";\nimport { PhysXJoint } from \"./PhysXJoint\";\n\n/**\n * A fixed joint permits no relative movement between two colliders. ie the bodies are glued together.\n */\nexport class PhysXFixedJoint extends PhysXJoint implements IFixedJoint {\n  constructor(physXPhysics: PhysXPhysics, collider: PhysXCollider) {\n    super(physXPhysics);\n    this._collider = collider;\n    this._pxJoint = physXPhysics._pxPhysics.createFixedJoint(\n      null,\n      PhysXJoint._defaultVec,\n      PhysXJoint._defaultQuat,\n      collider._pxActor,\n      PhysXJoint._defaultVec,\n      PhysXJoint._defaultQuat\n    );\n  }\n}\n","import { IHingeJoint } from \"@galacean/engine-design\";\nimport { Quaternion, Vector3 } from \"@galacean/engine\";\nimport { PhysXCollider } from \"../PhysXCollider\";\nimport { PhysXPhysics } from \"../PhysXPhysics\";\nimport { PhysXJoint } from \"./PhysXJoint\";\n\n/**\n * A joint which behaves in a similar way to a hinge or axle.\n */\nexport class PhysXHingeJoint extends PhysXJoint implements IHingeJoint {\n  private _axisRotationQuaternion = new Quaternion();\n  private _swingOffset = new Vector3();\n\n  constructor(physXPhysics: PhysXPhysics, collider: PhysXCollider) {\n    super(physXPhysics);\n    this._collider = collider;\n    this._pxJoint = physXPhysics._pxPhysics.createRevoluteJoint(\n      null,\n      PhysXJoint._defaultVec,\n      PhysXJoint._defaultQuat,\n      collider._pxActor,\n      PhysXJoint._defaultVec,\n      PhysXJoint._defaultQuat\n    );\n  }\n\n  /**\n   * {@inheritDoc IHingeJoint.setAxis }\n   */\n  setAxis(value: Vector3): void {\n    const xAxis = PhysXJoint._xAxis;\n    const axisRotationQuaternion = this._axisRotationQuaternion;\n    xAxis.set(1, 0, 0);\n    value.normalize();\n    const angle = Math.acos(Vector3.dot(xAxis, value));\n    Vector3.cross(xAxis, value, xAxis);\n    Quaternion.rotationAxisAngle(xAxis, angle, axisRotationQuaternion);\n\n    this._setLocalPose(0, this._swingOffset, axisRotationQuaternion);\n  }\n\n  /**\n   * {@inheritDoc IHingeJoint.setSwingOffset }\n   */\n  setSwingOffset(value: Vector3): void {\n    this._swingOffset.copyFrom(value);\n    this._setLocalPose(1, this._swingOffset, this._axisRotationQuaternion);\n  }\n\n  /**\n   * {@inheritDoc IHingeJoint.getAngle }\n   */\n  getAngle(): number {\n    return this._pxJoint.getAngle();\n  }\n\n  /**\n   * {@inheritDoc IHingeJoint.getVelocity }\n   */\n  getVelocity(): Readonly<number> {\n    return this._pxJoint.getVelocity();\n  }\n\n  /**\n   * {@inheritDoc IHingeJoint.setHardLimitCone }\n   */\n  setHardLimit(lowerLimit: number, upperLimit: number, contactDist: number): void {\n    this._pxJoint.setHardLimit(lowerLimit, upperLimit, contactDist);\n  }\n\n  /**\n   * {@inheritDoc IHingeJoint.setHardLimitCone }\n   */\n  setSoftLimit(lowerLimit: number, upperLimit: number, stiffness: number, damping: number): void {\n    this._pxJoint.setSoftLimit(lowerLimit, upperLimit, stiffness, damping);\n  }\n\n  /**\n   * {@inheritDoc IHingeJoint.setDriveVelocity }\n   */\n  setDriveVelocity(velocity: number, autowake: boolean = true): void {\n    this._pxJoint.setDriveVelocity(velocity, autowake);\n  }\n\n  /**\n   * {@inheritDoc IHingeJoint.setDriveForceLimit }\n   */\n  setDriveForceLimit(limit: number): void {\n    this._pxJoint.setDriveForceLimit(limit);\n  }\n\n  /**\n   * {@inheritDoc IHingeJoint.setDriveGearRatio }\n   */\n  setDriveGearRatio(ratio: number): void {\n    this._pxJoint.setDriveGearRatio(ratio);\n  }\n\n  /**\n   * {@inheritDoc IHingeJoint.setHingeJointFlag }\n   */\n  setHingeJointFlag(flag: number, value: boolean): void {\n    this._pxJoint.setRevoluteJointFlag(flag, value);\n  }\n}\n","import { PhysXPhysics } from \"../PhysXPhysics\";\nimport { PhysXJoint } from \"./PhysXJoint\";\nimport { ISpringJoint } from \"@galacean/engine-design\";\nimport { PhysXCollider } from \"../PhysXCollider\";\nimport { Vector3 } from \"@galacean/engine\";\n\n/**\n * a joint that maintains an upper or lower bound (or both) on the distance between two points on different objects\n */\nexport class PhysXSpringJoint extends PhysXJoint implements ISpringJoint {\n  private _swingOffset = new Vector3();\n\n  constructor(physXPhysics: PhysXPhysics, collider: PhysXCollider) {\n    super(physXPhysics);\n    this._collider = collider;\n    this._pxJoint = physXPhysics._pxPhysics.createDistanceJoint(\n      null,\n      PhysXJoint._defaultVec,\n      PhysXJoint._defaultQuat,\n      collider._pxActor,\n      PhysXJoint._defaultVec,\n      PhysXJoint._defaultQuat\n    );\n    this._pxJoint.setDistanceJointFlag(2, true); // enable max distance;\n    this._pxJoint.setDistanceJointFlag(4, true); // enable min distance;\n    this._pxJoint.setDistanceJointFlag(8, true); // enable spring;\n  }\n\n  /**\n   * {@inheritDoc ISpringJoint.setSwingOffset }\n   */\n  setSwingOffset(value: Vector3): void {\n    this._swingOffset.copyFrom(value);\n    this._setLocalPose(1, value, PhysXJoint._defaultQuat);\n  }\n\n  /**\n   * {@inheritDoc ISpringJoint.setMinDistance }\n   */\n  setMinDistance(distance: number): void {\n    this._pxJoint.setMinDistance(distance);\n  }\n\n  /**\n   * {@inheritDoc ISpringJoint.setMaxDistance }\n   */\n  setMaxDistance(distance: number): void {\n    this._pxJoint.setMaxDistance(distance);\n  }\n\n  /**\n   * {@inheritDoc ISpringJoint.setTolerance }\n   */\n  setTolerance(tolerance: number): void {\n    this._pxJoint.setTolerance(tolerance);\n  }\n\n  /**\n   * {@inheritDoc ISpringJoint.setStiffness }\n   */\n  setStiffness(stiffness: number): void {\n    this._pxJoint.setStiffness(stiffness);\n  }\n\n  /**\n   * {@inheritDoc ISpringJoint.setDamping }\n   */\n  setDamping(damping: number): void {\n    this._pxJoint.setDamping(damping);\n  }\n}\n","import { IPlaneColliderShape } from \"@galacean/engine-design\";\nimport { Quaternion, Vector3 } from \"@galacean/engine\";\nimport { PhysXPhysics } from \"../PhysXPhysics\";\nimport { PhysXPhysicsMaterial } from \"../PhysXPhysicsMaterial\";\nimport { PhysXColliderShape } from \"./PhysXColliderShape\";\n\n/**\n * Plane collider shape in PhysX.\n */\nexport class PhysXPlaneColliderShape extends PhysXColliderShape implements IPlaneColliderShape {\n  constructor(physXPhysics: PhysXPhysics, uniqueID: number, material: PhysXPhysicsMaterial) {\n    super(physXPhysics);\n    this._axis = new Quaternion(0, 0, PhysXColliderShape.halfSqrt, PhysXColliderShape.halfSqrt);\n    this._physXRotation.copyFrom(this._axis);\n\n    this._pxGeometry = new physXPhysics._physX.PxPlaneGeometry();\n    this._initialize(material, uniqueID);\n    this._setLocalPose();\n  }\n}\n","import { Vector3 } from \"@galacean/engine\";\nimport { ISphereColliderShape } from \"@galacean/engine-design\";\nimport { PhysXPhysics } from \"../PhysXPhysics\";\nimport { PhysXPhysicsMaterial } from \"../PhysXPhysicsMaterial\";\nimport { PhysXColliderShape } from \"./PhysXColliderShape\";\n\n/**\n * Sphere collider shape in PhysX.\n */\nexport class PhysXSphereColliderShape extends PhysXColliderShape implements ISphereColliderShape {\n  private _radius: number;\n  private _maxScale: number = 1;\n\n  constructor(physXPhysics: PhysXPhysics, uniqueID: number, radius: number, material: PhysXPhysicsMaterial) {\n    super(physXPhysics);\n\n    this._radius = radius;\n\n    this._pxGeometry = new physXPhysics._physX.PxSphereGeometry(this._radius * this._maxScale);\n    this._initialize(material, uniqueID);\n    this._setLocalPose();\n  }\n\n  /**\n   * {@inheritDoc ISphereColliderShape.setRadius }\n   */\n  setRadius(value: number): void {\n    this._radius = value;\n    this._pxGeometry.radius = value * this._maxScale;\n    this._pxShape.setGeometry(this._pxGeometry);\n  }\n\n  /**\n   * {@inheritDoc IColliderShape.setWorldScale }\n   */\n  override setWorldScale(scale: Vector3): void {\n    super.setWorldScale(scale);\n\n    this._maxScale = Math.max(Math.abs(scale.x), Math.abs(scale.y), Math.abs(scale.z));\n    this._pxGeometry.radius = this._radius * this._maxScale;\n    this._pxShape.setGeometry(this._pxGeometry);\n  }\n}\n","import { Quaternion, Vector3, version } from \"@galacean/engine\";\nimport {\n  IBoxColliderShape,\n  ICapsuleColliderShape,\n  ICharacterController,\n  IDynamicCollider,\n  IFixedJoint,\n  IHingeJoint,\n  IPhysics,\n  IPhysicsManager,\n  IPhysicsMaterial,\n  IPhysicsScene,\n  IPlaneColliderShape,\n  ISphereColliderShape,\n  ISpringJoint,\n  IStaticCollider\n} from \"@galacean/engine-design\";\nimport { PhysXCharacterController } from \"./PhysXCharacterController\";\nimport { PhysXCollider } from \"./PhysXCollider\";\nimport { PhysXDynamicCollider } from \"./PhysXDynamicCollider\";\nimport { PhysXPhysicsManager } from \"./PhysXPhysicsManager\";\nimport { PhysXPhysicsMaterial } from \"./PhysXPhysicsMaterial\";\nimport { PhysXPhysicsScene } from \"./PhysXPhysicsScene\";\nimport { PhysXStaticCollider } from \"./PhysXStaticCollider\";\nimport { PhysXRuntimeMode } from \"./enum/PhysXRuntimeMode\";\nimport { PhysXFixedJoint } from \"./joint/PhysXFixedJoint\";\nimport { PhysXHingeJoint } from \"./joint/PhysXHingeJoint\";\nimport { PhysXSpringJoint } from \"./joint/PhysXSpringJoint\";\nimport { PhysXBoxColliderShape } from \"./shape/PhysXBoxColliderShape\";\nimport { PhysXCapsuleColliderShape } from \"./shape/PhysXCapsuleColliderShape\";\nimport { PhysXPlaneColliderShape } from \"./shape/PhysXPlaneColliderShape\";\nimport { PhysXSphereColliderShape } from \"./shape/PhysXSphereColliderShape\";\n\n/**\n * PhysX object creation.\n */\n\nexport class PhysXPhysics implements IPhysics {\n  /** @internal PhysX wasm object */\n  _physX: any;\n  /** @internal PhysX Foundation SDK singleton class */\n  _pxFoundation: any;\n  /** @internal PhysX physics object */\n  _pxPhysics: any;\n\n  private _runTimeMode: PhysXRuntimeMode;\n  private _initializeState: InitializeState = InitializeState.Uninitialized;\n  private _initializePromise: Promise<void>;\n\n  constructor(runtimeMode: PhysXRuntimeMode = PhysXRuntimeMode.Auto) {\n    this._runTimeMode = runtimeMode;\n  }\n\n  /**\n   * Initialize PhysXPhysics.\n   * @param runtimeMode - Runtime mode\n   * @returns Promise object\n   */\n  initialize(): Promise<void> {\n    if (this._initializeState === InitializeState.Initialized) {\n      return Promise.resolve();\n    } else if (this._initializeState === InitializeState.Initializing) {\n      return this._initializePromise;\n    }\n\n    let runtimeMode = this._runTimeMode;\n    const scriptPromise = new Promise((resolve, reject) => {\n      const script = document.createElement(\"script\");\n      document.body.appendChild(script);\n      script.async = true;\n      script.onload = resolve;\n      script.onerror = reject;\n      if (runtimeMode == PhysXRuntimeMode.Auto) {\n        const supported = (() => {\n          try {\n            if (typeof WebAssembly === \"object\" && typeof WebAssembly.instantiate === \"function\") {\n              const module = new WebAssembly.Module(Uint8Array.of(0x0, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00));\n              if (module instanceof WebAssembly.Module)\n                return new WebAssembly.Instance(module) instanceof WebAssembly.Instance;\n            }\n          } catch (e) {}\n          return false;\n        })();\n        if (supported) {\n          runtimeMode = PhysXRuntimeMode.WebAssembly;\n        } else {\n          runtimeMode = PhysXRuntimeMode.JavaScript;\n        }\n      }\n\n      if (runtimeMode == PhysXRuntimeMode.JavaScript) {\n        script.src = `https://mdn.alipayobjects.com/rms/afts/file/A*rnDeR58NNGoAAAAAAAAAAAAAARQnAQ/physx.release.js.js`;\n      } else if (runtimeMode == PhysXRuntimeMode.WebAssembly) {\n        script.src = `https://mdn.alipayobjects.com/rms/afts/file/A*nA97QLQehRMAAAAAAAAAAAAAARQnAQ/physx.release.js`;\n      }\n    });\n\n    const initializePromise = new Promise<void>((resolve, reject) => {\n      scriptPromise\n        .then(\n          () =>\n            (<any>window).PHYSX().then((PHYSX) => {\n              this._init(PHYSX);\n              this._initializeState = InitializeState.Initialized;\n              this._initializePromise = null;\n              console.log(\"PhysX loaded.\");\n              resolve();\n            }, reject),\n          reject\n        )\n        .catch(reject);\n    });\n\n    this._initializePromise = initializePromise;\n    return initializePromise;\n  }\n\n  /**\n   * Destroy PhysXPhysics.\n   */\n  public destroy(): void {\n    this._physX.PxCloseExtensions();\n    this._pxPhysics.release();\n    this._pxFoundation.release();\n    this._physX = null;\n    this._pxFoundation = null;\n    this._pxPhysics = null;\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createPhysicsManager }\n   */\n  createPhysicsManager(): IPhysicsManager {\n    return new PhysXPhysicsManager();\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createPhysicsScene }\n   */\n  createPhysicsScene(\n    physicsManager: PhysXPhysicsManager,\n    onContactBegin?: (obj1: number, obj2: number) => void,\n    onContactEnd?: (obj1: number, obj2: number) => void,\n    onContactStay?: (obj1: number, obj2: number) => void,\n    onTriggerBegin?: (obj1: number, obj2: number) => void,\n    onTriggerEnd?: (obj1: number, obj2: number) => void,\n    onTriggerStay?: (obj1: number, obj2: number) => void\n  ): IPhysicsScene {\n    const manager = new PhysXPhysicsScene(\n      this,\n      physicsManager,\n      onContactBegin,\n      onContactEnd,\n      onContactStay,\n      onTriggerBegin,\n      onTriggerEnd,\n      onTriggerStay\n    );\n    return manager;\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createStaticCollider }\n   */\n  createStaticCollider(position: Vector3, rotation: Quaternion): IStaticCollider {\n    return new PhysXStaticCollider(this, position, rotation);\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createDynamicCollider }\n   */\n  createDynamicCollider(position: Vector3, rotation: Quaternion): IDynamicCollider {\n    return new PhysXDynamicCollider(this, position, rotation);\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createCharacterController }\n   */\n  createCharacterController(): ICharacterController {\n    return new PhysXCharacterController(this);\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createPhysicsMaterial }\n   */\n  createPhysicsMaterial(\n    staticFriction: number,\n    dynamicFriction: number,\n    bounciness: number,\n    frictionCombine: number,\n    bounceCombine: number\n  ): IPhysicsMaterial {\n    return new PhysXPhysicsMaterial(this, staticFriction, dynamicFriction, bounciness, frictionCombine, bounceCombine);\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createBoxColliderShape }\n   */\n  createBoxColliderShape(uniqueID: number, size: Vector3, material: PhysXPhysicsMaterial): IBoxColliderShape {\n    return new PhysXBoxColliderShape(this, uniqueID, size, material);\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createSphereColliderShape }\n   */\n  createSphereColliderShape(uniqueID: number, radius: number, material: PhysXPhysicsMaterial): ISphereColliderShape {\n    return new PhysXSphereColliderShape(this, uniqueID, radius, material);\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createPlaneColliderShape }\n   */\n  createPlaneColliderShape(uniqueID: number, material: PhysXPhysicsMaterial): IPlaneColliderShape {\n    return new PhysXPlaneColliderShape(this, uniqueID, material);\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createCapsuleColliderShape }\n   */\n  createCapsuleColliderShape(\n    uniqueID: number,\n    radius: number,\n    height: number,\n    material: PhysXPhysicsMaterial\n  ): ICapsuleColliderShape {\n    return new PhysXCapsuleColliderShape(this, uniqueID, radius, height, material);\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createFixedJoint }\n   */\n  createFixedJoint(collider: PhysXCollider): IFixedJoint {\n    return new PhysXFixedJoint(this, collider);\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createHingeJoint }\n   */\n  createHingeJoint(collider: PhysXCollider): IHingeJoint {\n    return new PhysXHingeJoint(this, collider);\n  }\n\n  /**\n   * {@inheritDoc IPhysics.createSpringJoint }\n   */\n  createSpringJoint(collider: PhysXCollider): ISpringJoint {\n    return new PhysXSpringJoint(this, collider);\n  }\n\n  private _init(physX: any): void {\n    const version = physX.PX_PHYSICS_VERSION;\n    const defaultErrorCallback = new physX.PxDefaultErrorCallback();\n    const allocator = new physX.PxDefaultAllocator();\n    const pxFoundation = physX.PxCreateFoundation(version, allocator, defaultErrorCallback);\n    const pxPhysics = physX.PxCreatePhysics(version, pxFoundation, new physX.PxTolerancesScale(), false, null);\n\n    physX.PxInitExtensions(pxPhysics, null);\n    this._physX = physX;\n    this._pxFoundation = pxFoundation;\n    this._pxPhysics = pxPhysics;\n  }\n}\n\nenum InitializeState {\n  Uninitialized,\n  Initializing,\n  Initialized\n}\n","function _type_of(obj) {\n    \"@swc/helpers - typeof\";\n\n    return obj && typeof Symbol !== \"undefined\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n}\nexport { _type_of as _ };\n","export { PhysXPhysics } from \"./PhysXPhysics\";\nexport { PhysXRuntimeMode } from \"./enum/PhysXRuntimeMode\";\n\n//@ts-ignore\nexport const version = `__buildVersion`;\n\nconsole.log(`Galacean PhysX version: ${version}`);\n"],"names":["_instanceof","left","right","Symbol","hasInstance","_set_prototype_of","o","p","Object","setPrototypeOf","__proto__","_inherits","subClass","superClass","TypeError","prototype","create","constructor","value","writable","configurable","PhysXRuntimeMode","PhysXColliderShape","physXPhysics","_controllers","DisorderedArray","_worldScale","Vector3","_position","_rotation","_axis","_physXRotation","Quaternion","_shapeFlags","ShapeFlag","_physXPhysics","setRotation","rotationYawPitchRoll","x","y","z","multiply","normalize","_setLocalPose","setPosition","copyFrom","controllers","i","n","length","get","_updateShapePosition","setWorldScale","scale","setContactOffset","offset","_pxShape","_pxController","setMaterial","_pxMaterial","setIsTrigger","_modifyFlag","_setShapeFlags","destroy","release","flags","setFlags","_physX","PxShapeFlags","_proto","transform","translation","rotation","setLocalPose","_initialize","material","id","_id","_pxPhysics","createShape","_pxGeometry","setUUID","flag","halfSqrt","PhysXBoxColliderShape","uniqueID","size","_this","_halfSize","_sizeScale","halfSize","set","PxBoxGeometry","setSize","tempExtents","_tempHalfExtents","halfExtents","setGeometry","_updateController","Math","abs","extents","pxController","setHalfHeight","setHalfSideExtent","setHalfForwardExtent","PhysXCapsuleColliderShape","PhysXColliderShape1","radius","height","call","_upAxis","_radius","_halfHeight","PxCapsuleGeometry","setRadius","sizeScale","max","setHeight","halfHeight","setUpAxis","upAxis","axis","physXRotation","geometry","PhysXCharacterController","_shapeScaledPosition","_worldPosition","move","disp","minDist","elapsedTime","_this__pxController","_this__pxController_move","setWorldPosition","position","_updateNativePosition","getWorldPosition","getPosition","subtract","setStepOffset","setNonWalkableMode","setUpDirection","up","setSlopeLimit","slopeLimit","addShape","shape","_pxManager","_createPXController","_shape","add","removeShape","_destroyPXController","delete","pxManager","desc","PxBoxControllerDesc","halfSideExtent","halfForwardExtent","PxCapsuleControllerDesc","climbingMode","_getControllerManager","createController","shapePosition","worldScale","worldPosition","_tempVec","PhysXCollider","_pxActor","attachShape","detachShape","setWorldTransform","setGlobalPose","_transform","getWorldTransform","outPosition","outRotation","getGlobalPose","w","pos","rot","_tempTransform","PhysXDynamicCollider","createRigidDynamic","setLinearDamping","setAngularDamping","setLinearVelocity","setAngularVelocity","setMass","setCenterOfMass","setCMassLocalPose","setInertiaTensor","setMassSpaceInertiaTensor","setMaxAngularVelocity","setMaxDepenetrationVelocity","setSleepThreshold","setSolverIterations","setSolverIterationCounts","setCollisionDetectionMode","setRigidBodyFlag","PxRigidBodyFlag","eENABLE_CCD","eENABLE_CCD_FRICTION","eENABLE_SPECULATIVE_CCD","physX","setIsKinematic","eKINEMATIC","setConstraints","setRigidDynamicLockFlags","addForce","force","addTorque","torque","positionOrRotation","setKinematicTarget","tempTranslation","_tempTranslation","tempRotation","_tempRotation","sleep","putToSleep","wakeUp","PhysXPhysicsManager","_eventMap","PhysXPhysicsMaterial","staticFriction","dynamicFriction","bounciness","frictionCombine","bounceCombine","pxMaterial","createMaterial","setFrictionCombineMode","setRestitutionCombineMode","setBounciness","setRestitution","setDynamicFriction","setStaticFriction","setBounceCombine","setFrictionCombine","PhysXPhysicsScene","physicsManager","onContactEnter","onContactExit","onContactStay","onTriggerEnter","onTriggerExit","onTriggerStay","_pxControllerManager","_currentEvents","_eventPool","_physXManager","_pxRaycastHit","PxRaycastHit","_pxFilterData","PxQueryFilterData","PxQueryFlags","QueryFlag","_onContactEnter","_onContactExit","_onContactStay","_onTriggerEnter","_onTriggerExit","_onTriggerStay","pxPhysics","physXSimulationCallbackInstance","PxSimulationEventCallback","implement","onContactBegin","index1","index2","onContactEnd","onContactPersist","onTriggerBegin","event","_getTrigger","state","onTriggerEnd","subMap","undefined","sceneDesc","getDefaultSceneDesc","getTolerancesScale","_pxScene","createScene","setGravity","addColliderShape","colliderShape","removeColliderShape","eventPool","eventMap","_this__physXManager","currentEvents","forEach","deleteByIndex","push","addCollider","collider","addActor","removeCollider","removeActor","addCharacterController","characterController","lastPXManager","removeCharacterController","update","_simulate","_fetchResults","_fireEvent","raycast","ray","distance","onRaycast","hit","pxHitResult","min","result","raycastSingle","origin","direction","PxQueryFilterCallback","preFilter","filterData","index","actor","postFilter","_tempPosition","_tempNormal","normal","pxNormal","pxPosition","getShape","getUUID","pxControllerManager","createControllerManager","simulate","block","fetchResults","pop","TriggerEvent","_this1","PhysXStaticCollider","createRigidStatic","PhysXJoint","_connectedAnchor","_breakForce","Number","MAX_VALUE","_breakTorque","setConnectedCollider","_this__collider","_pxJoint","setActors","_collider","setConnectedAnchor","_defaultQuat","setConnectedMassScale","setInvMassScale0","setConnectedInertiaScale","setInvInertiaScale0","setMassScale","setInvMassScale1","setInertiaScale","setInvInertiaScale1","setBreakForce","setBreakTorque","_xAxis","_defaultVec","PhysXFixedJoint","PhysXJoint1","createFixedJoint","PhysXHingeJoint","_axisRotationQuaternion","_swingOffset","createRevoluteJoint","setAxis","xAxis","axisRotationQuaternion","angle","acos","dot","cross","rotationAxisAngle","setSwingOffset","getAngle","getVelocity","setHardLimit","lowerLimit","upperLimit","contactDist","setSoftLimit","stiffness","damping","setDriveVelocity","velocity","autowake","setDriveForceLimit","limit","setDriveGearRatio","ratio","setHingeJointFlag","setRevoluteJointFlag","PhysXSpringJoint","createDistanceJoint","setDistanceJointFlag","setMinDistance","setMaxDistance","setTolerance","tolerance","setStiffness","setDamping","PhysXPlaneColliderShape","PxPlaneGeometry","PhysXSphereColliderShape","_maxScale","PxSphereGeometry","PhysXPhysics","runtimeMode","Auto","_initializeState","_runTimeMode","initialize","Promise","resolve","_initializePromise","scriptPromise","reject","script","document","createElement","body","appendChild","async","onload","onerror","obj","WebAssembly","instantiate","module","Module","Uint8Array","of","Instance","e","JavaScript","src","initializePromise","then","window","PHYSX","_init","console","log","catch","PxCloseExtensions","_pxFoundation","createPhysicsManager","createPhysicsScene","createStaticCollider","createDynamicCollider","createCharacterController","createPhysicsMaterial","createBoxColliderShape","createSphereColliderShape","createPlaneColliderShape","createCapsuleColliderShape","createHingeJoint","createSpringJoint","version","PX_PHYSICS_VERSION","defaultErrorCallback","PxDefaultErrorCallback","allocator","PxDefaultAllocator","pxFoundation","PxCreateFoundation","PxCreatePhysics","PxTolerancesScale","PxInitExtensions"],"mappings":"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"}