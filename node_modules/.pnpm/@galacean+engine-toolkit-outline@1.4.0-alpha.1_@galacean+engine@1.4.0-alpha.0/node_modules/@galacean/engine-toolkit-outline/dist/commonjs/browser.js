'use strict';

var engine = require('@galacean/engine');

function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;

        if ("value" in descriptor) descriptor.writable = true;

        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);

    return Constructor;
}

function _set_prototype_of(o, p) {
    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;

        return o;
    };

    return _set_prototype_of(o, p);
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });

    if (superClass) _set_prototype_of(subClass, superClass);
}

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol */


function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
  var e = new Error(message);
  return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

var outlineFs = "#define GLSLIFY 1\nuniform vec3 material_OutlineColor;uniform sampler2D material_OutlineTexture;uniform vec2 material_TexSize;varying vec2 v_uv;float luminance(vec4 color){return 0.2125*color.r+0.7154*color.g+0.0721*color.b;}float sobel(){float Gx[9];Gx[0]=-1.0;Gx[1]=0.0;Gx[2]=1.0;Gx[3]=-2.0;Gx[4]=0.0;Gx[5]=2.0;Gx[6]=-1.0;Gx[7]=0.0;Gx[8]=1.0;float Gy[9];Gy[0]=-1.0;Gy[1]=-2.0;Gy[2]=-1.0;Gy[3]=0.0;Gy[4]=0.0;Gy[5]=0.0;Gy[6]=1.0;Gy[7]=2.0;Gy[8]=1.0;float texColor;float edgeX=0.0;float edgeY=0.0;vec2 uv[9];uv[0]=v_uv+material_TexSize.xy*vec2(-1,-1);uv[1]=v_uv+material_TexSize.xy*vec2(0,-1);uv[2]=v_uv+material_TexSize.xy*vec2(1,-1);uv[3]=v_uv+material_TexSize.xy*vec2(-1,0);uv[4]=v_uv+material_TexSize.xy*vec2(0,0);uv[5]=v_uv+material_TexSize.xy*vec2(1,0);uv[6]=v_uv+material_TexSize.xy*vec2(-1,1);uv[7]=v_uv+material_TexSize.xy*vec2(0,1);uv[8]=v_uv+material_TexSize.xy*vec2(1,1);for(int i=0;i<9;i++){texColor=luminance(texture2D(material_OutlineTexture,uv[i]));edgeX+=texColor*Gx[i];edgeY+=texColor*Gy[i];}return abs(edgeX)+abs(edgeY);}vec4 linearToGamma(vec4 linearIn){return vec4(pow(linearIn.rgb,vec3(1.0/2.2)),linearIn.a);}void main(){float sobelFactor=step(1.0,sobel());gl_FragColor=mix(vec4(0),vec4(material_OutlineColor,1.0),sobelFactor);\n#ifndef ENGINE_IS_COLORSPACE_GAMMA\ngl_FragColor=linearToGamma(gl_FragColor);\n#endif\n}"; // eslint-disable-line

var outlineVs = "#define GLSLIFY 1\nattribute vec3 POSITION;attribute vec2 TEXCOORD_0;varying vec2 v_uv;void main(){gl_Position=vec4(POSITION.xzy,1.0);gl_Position.y*=-1.0;v_uv=TEXCOORD_0;}"; // eslint-disable-line

var replaceFs = "#define GLSLIFY 1\nuniform vec4 camera_OutlineReplaceColor;void main(){gl_FragColor=camera_OutlineReplaceColor;}"; // eslint-disable-line

var replaceVs = "#define GLSLIFY 1\n#include <common>\n#include <common_vert>\n#include <blendShape_input>\nvoid main(){\n#include <begin_position_vert>\n#include <begin_normal_vert>\n#include <blendShape_vert>\n#include <skinning_vert>\n#include <position_vert>\n}"; // eslint-disable-line

exports.OutlineManager = /*#__PURE__*/ function(Script) {
    _inherits(OutlineManager, Script);
    function OutlineManager(entity) {
        var _this;
        _this = Script.call(this, entity) || this;
        /** whether outline children of selected entities with subColor, default false */ _this.isChildrenIncluded = false;
        _this._size = 1;
        _this._clearColor = new engine.Color(1, 1, 1, 1);
        _this._replaceColor = new engine.Color(1, 0, 0, 1);
        _this._outlineMainColor = new engine.Color(0.95, 0.35, 0.14, 1);
        _this._outlineSubColor = new engine.Color(0.16, 0.67, 0.89, 1);
        _this._layer = engine.Layer.Layer29;
        _this._outlineEntities = [];
        _this._subLineEntities = [];
        _this._renderers = [];
        _this._layerMap = [];
        _this._cameraViewport = new engine.Vector4();
        _this._outLineViewport = new engine.Vector4(0, 0, 1, 1);
        var engine$1 = _this.engine;
        var outlineMaterial = new engine.BaseMaterial(engine$1, engine.Shader.find("outline-postprocess-shader"));
        var replaceShader = engine.Shader.find("outline-replace-shader");
        var screenEntity = _this.entity.createChild("screen");
        var screenRenderer = screenEntity.addComponent(engine.MeshRenderer);
        screenRenderer.receiveShadows = false;
        screenRenderer.castShadows = false;
        screenEntity.layer = _this._layer;
        screenEntity.isActive = false;
        screenRenderer.mesh = engine.PrimitiveMesh.createPlane(engine$1, 2, 2);
        screenRenderer.setMaterial(outlineMaterial);
        outlineMaterial.isTransparent = true;
        _this._outlineMaterial = outlineMaterial;
        _this._replaceShader = replaceShader;
        _this._screenEntity = screenEntity;
        _this.size = _this._size;
        return _this;
    }
    var _proto = OutlineManager.prototype;
    /**
   * Clear all entities you want to outline.
   */ _proto.clear = function clear() {
        this._outlineEntities.length = 0;
    };
    /**
   * Add the entity you want to outline.
   * @param entity - The entity you wanna add.
   */ _proto.addEntity = function addEntity(entity) {
        if (this._outlineEntities.indexOf(entity) === -1) {
            this._outlineEntities.push(entity);
            this.isChildrenIncluded && this._calSublineEntites();
        }
    };
    /**
   * Remove the entity you do not want to outline.
   * @param entity - The entity you wanna remove.
   */ _proto.removeEntity = function removeEntity(entity) {
        var index = this._outlineEntities.indexOf(entity);
        var len = this._outlineEntities.length;
        if (index > -1) {
            if (index < len - 1) {
                this._outlineEntities[index] = this._outlineEntities[len - 1];
            }
            this._outlineEntities.length--;
            this.isChildrenIncluded && this._calSublineEntites();
        }
    };
    _proto.onEndRender = function onEndRender(camera) {
        var outlineEntities = this._outlineEntities;
        if (!outlineEntities.length) return;
        // Check frame buffer size
        this._checkFrameBufferSize(this._size);
        this._renderEntity(camera, this.subColor, this._subLineEntities);
        this._renderEntity(camera, this.mainColor, outlineEntities);
    };
    _proto.onDestroy = function onDestroy() {
        this._renderTarget.getColorTexture().destroy(true);
        this._renderTarget.destroy();
        this._screenEntity.destroy();
        this._outlineEntities = null;
        this._renderers = null;
        this._layerMap = null;
    };
    _proto._renderEntity = function _renderEntity(camera, outlineColor, entities) {
        var scene = camera.scene;
        var originalClearFlags = camera.clearFlags;
        var originalCullingMask = camera.cullingMask;
        var originalEnableFrustumCulling = camera.enableFrustumCulling;
        var originalSolidColor = scene.background.solidColor;
        var originalBackgroundMode = scene.background.mode;
        var originalRenderTarget = camera.renderTarget;
        var originalPostProcessEnabled = camera.enablePostProcess;
        var originalHDR = camera.enableHDR;
        var originalDepthMode = camera.depthTextureMode;
        var originalOpaqueTextureEnabled = camera.opaqueTextureEnabled;
        var renderers = this._renderers;
        var layerMap = this._layerMap;
        layerMap.length = 0;
        for(var i = entities.length - 1; i >= 0; i--){
            var entity = entities[i];
            // replace material
            renderers.length = 0;
            entity.getComponents(engine.MeshRenderer, renderers);
            // replace layer
            if (renderers.length) {
                layerMap.push({
                    entity: entity,
                    layer: entity.layer
                });
                entity.layer = this._layer;
            }
        }
        // 1. render outline mesh with replace material
        this._screenEntity.isActive = false;
        camera.renderTarget = this._renderTarget;
        scene.background.solidColor = this._clearColor;
        scene.background.mode = engine.BackgroundMode.SolidColor;
        camera.cullingMask = this._layer;
        camera.setReplacementShader(this._replaceShader);
        camera.shaderData.setColor(OutlineManager._replaceColorProp, this._replaceColor);
        // Reset internal RT and useless pass
        camera.enablePostProcess = false;
        camera.enableHDR = false;
        camera.depthTextureMode = engine.DepthTextureMode.None;
        camera.opaqueTextureEnabled = false;
        camera.render();
        // 2. render screen only
        this._screenEntity.isActive = true;
        this._cameraViewport.copyFrom(camera.viewport);
        camera.renderTarget = null;
        camera.viewport = this._outLineViewport;
        camera.clearFlags = engine.CameraClearFlags.None;
        camera.enableFrustumCulling = false;
        camera.resetReplacementShader();
        for(var i1 = layerMap.length - 1; i1 >= 0; i1--){
            var _layerMap_i = layerMap[i1], entity1 = _layerMap_i.entity, layer = _layerMap_i.layer;
            entity1.layer = layer;
        }
        this._outlineMaterial.shaderData.setColor(OutlineManager._outlineColorProp, outlineColor);
        camera.render();
        // 3. restore
        this._screenEntity.isActive = false;
        camera.clearFlags = originalClearFlags;
        camera.enableFrustumCulling = originalEnableFrustumCulling;
        camera.cullingMask = originalCullingMask;
        camera.viewport = this._cameraViewport;
        scene.background.solidColor = originalSolidColor;
        scene.background.mode = originalBackgroundMode;
        camera.renderTarget = originalRenderTarget;
        camera.enablePostProcess = originalPostProcessEnabled;
        camera.enableHDR = originalHDR;
        camera.depthTextureMode = originalDepthMode;
        camera.opaqueTextureEnabled = originalOpaqueTextureEnabled;
    };
    _proto._calSublineEntites = function _calSublineEntites() {
        var _this = this;
        this._subLineEntities.length = 0;
        for(var i = 0; i < this._outlineEntities.length; i++){
            OutlineManager._traverseEntity(this._outlineEntities[i], function(entity) {
                _this._subLineEntities.push(entity);
            });
        }
    };
    _proto._checkFrameBufferSize = function _checkFrameBufferSize(size) {
        var lastSize = this._size;
        var _this_engine_canvas = this.engine.canvas, width = _this_engine_canvas.width, height = _this_engine_canvas.height;
        var offWidth = width / size;
        var offHeight = height / size;
        if (!this._renderTarget || size !== lastSize || this._renderTarget.width !== offWidth || this._renderTarget.height !== offHeight) {
            if (this._renderTarget) {
                this._renderTarget.getColorTexture().destroy(true);
                this._renderTarget.destroy();
            }
            var renderColorTexture = new engine.Texture2D(this.engine, offWidth, offHeight);
            var renderTarget = new engine.RenderTarget(this.engine, offWidth, offHeight, renderColorTexture);
            this._outlineMaterial.shaderData.setTexture(OutlineManager._outlineTextureProp, renderColorTexture);
            this._outlineMaterial.shaderData.setVector2(OutlineManager._texSizeProp, new engine.Vector2(1 / offWidth, 1 / offHeight));
            renderColorTexture.wrapModeU = renderColorTexture.wrapModeV = engine.TextureWrapMode.Clamp;
            this._renderTarget = renderTarget;
        }
    };
    OutlineManager._traverseEntity = function _traverseEntity(entity, callback) {
        callback(entity);
        for(var i = entity.children.length - 1; i >= 0; i--){
            this._traverseEntity(entity.children[i], callback);
        }
    };
    _create_class(OutlineManager, [
        {
            key: "layer",
            get: function get() {
                return this.layer;
            },
            set: /**
   * Outline layer, default Layer29.
   */ function set(value) {
                this._layer = value;
            }
        },
        {
            key: "mainColor",
            get: /** Outline main color. */ function get() {
                return this._outlineMainColor;
            },
            set: function set(value) {
                var color = this._outlineMainColor;
                if (value !== color) {
                    color.copyFrom(value);
                }
            }
        },
        {
            key: "subColor",
            get: /** Outline sub color. */ function get() {
                return this._outlineSubColor;
            },
            set: function set(value) {
                var color = this._outlineSubColor;
                if (value !== color) {
                    color.copyFrom(value);
                }
            }
        },
        {
            key: "size",
            get: /** Outline size.[1~6] */ function get() {
                return this._size;
            },
            set: function set(value) {
                value = Math.max(1, Math.min(value, 6));
                this._checkFrameBufferSize(value);
                this._size = value;
            }
        }
    ]);
    return OutlineManager;
}(engine.Script);
exports.OutlineManager._outlineColorProp = engine.ShaderProperty.getByName("material_OutlineColor");
exports.OutlineManager._outlineTextureProp = engine.ShaderProperty.getByName("material_OutlineTexture");
exports.OutlineManager._texSizeProp = engine.ShaderProperty.getByName("material_TexSize");
exports.OutlineManager._replaceColorProp = engine.ShaderProperty.getByName("camera_OutlineReplaceColor");
exports.OutlineManager = __decorate([
    engine.dependentComponents(engine.Camera, engine.DependentMode.CheckOnly)
], exports.OutlineManager);
engine.Shader.create("outline-postprocess-shader", outlineVs, outlineFs);
engine.Shader.create("outline-replace-shader", replaceVs, replaceFs);
//# sourceMappingURL=browser.js.map
