{"version":3,"file":"browser.js","sources":["../../src/planar-shadow/PlanarShadowShaderFactory.ts","../../../../node_modules/.pnpm/@swc+helpers@0.5.7/node_modules/@swc/helpers/esm/_create_class.js","../../../../node_modules/.pnpm/@swc+helpers@0.5.7/node_modules/@swc/helpers/esm/_set_prototype_of.js","../../../../node_modules/.pnpm/@swc+helpers@0.5.7/node_modules/@swc/helpers/esm/_inherits.js","../../src/grid/GridMaterial.ts","../../src/grid/GridMesh.ts","../../src/grid/GridControl.ts","../../src/water/WaterRippleMaterial.ts","../../src/water/WaterMaterial.ts","../../src/water/WaterfallMaterial.ts","../../src/bake-pbr/fragment.ts","../../src/bake-pbr/vertex.ts","../../src/bake-pbr/BakePBRMaterial.ts","../../src/plain-color/PlainColorMaterial.ts"],"sourcesContent":["import {\n  BlendFactor,\n  Color,\n  CompareFunction,\n  Material,\n  RenderQueueType,\n  Shader,\n  ShaderPass,\n  ShaderProperty,\n  StencilOperation,\n  Vector3\n} from \"@galacean/engine\";\n\nexport class PlanarShadowShaderFactory {\n  private static _lightDirProp = ShaderProperty.getByName(\"u_lightDir\");\n  private static _planarHeightProp = ShaderProperty.getByName(\"u_planarHeight\");\n  private static _shadowColorProp = ShaderProperty.getByName(\"u_planarShadowColor\");\n  private static _shadowFalloffProp = ShaderProperty.getByName(\"u_planarShadowFalloff\");\n\n  /**\n   * Replace material Shader and initialization。\n   * @param material - Material to replace and initialization。\n   */\n  static replaceShader(material: Material) {\n    material.shader = Shader.find(\"planarShadowShader\");\n\n    const shadowRenderState = material.renderStates[1];\n    shadowRenderState.renderQueueType = RenderQueueType.Transparent;\n    shadowRenderState.depthState.writeEnabled = false;\n\n    const targetBlendState = shadowRenderState.blendState.targetBlendState;\n    targetBlendState.enabled = true;\n    targetBlendState.sourceColorBlendFactor = BlendFactor.SourceAlpha;\n    targetBlendState.destinationColorBlendFactor = BlendFactor.OneMinusSourceAlpha;\n    targetBlendState.sourceAlphaBlendFactor = BlendFactor.One;\n    targetBlendState.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n\n    // set shadow pass stencilState\n    const stencilState = shadowRenderState.stencilState;\n    stencilState.enabled = true;\n    stencilState.referenceValue = 0;\n    stencilState.compareFunctionFront = CompareFunction.Equal;\n    stencilState.compareFunctionBack = CompareFunction.Equal;\n    stencilState.failOperationFront = StencilOperation.Keep;\n    stencilState.failOperationBack = StencilOperation.Keep;\n    stencilState.zFailOperationFront = StencilOperation.Keep;\n    stencilState.zFailOperationBack = StencilOperation.Keep;\n    stencilState.passOperationFront = StencilOperation.IncrementWrap;\n    stencilState.passOperationBack = StencilOperation.IncrementWrap;\n\n    const shaderData = material.shaderData;\n    shaderData.setFloat(PlanarShadowShaderFactory._shadowFalloffProp, 0);\n    shaderData.setColor(PlanarShadowShaderFactory._shadowColorProp, new Color(1.0, 1.0, 1.0, 1.0));\n    shaderData.setVector3(PlanarShadowShaderFactory._lightDirProp, new Vector3(0, 0, 0));\n    shaderData.setFloat(PlanarShadowShaderFactory._planarHeightProp, 0);\n  }\n\n  /**\n   * Set planar height.\n   */\n  static setPlanarHeight(material: Material, value: number) {\n    material.shaderData.setFloat(PlanarShadowShaderFactory._planarHeightProp, value);\n  }\n\n  /**\n   * Set light direction.\n   */\n  static setLightDirection(material: Material, value: Vector3) {\n    const lightDir = material.shaderData.getVector3(PlanarShadowShaderFactory._lightDirProp);\n    if (value !== lightDir) {\n      lightDir.copyFrom(value.normalize());\n    } else {\n      value.normalize();\n    }\n  }\n\n  /**\n   * Set shadow color\n   */\n  static setShadowColor(material: Material, value: Color) {\n    const shadowColor = material.shaderData.getColor(PlanarShadowShaderFactory._shadowColorProp);\n    if (value !== shadowColor) {\n      shadowColor.copyFrom(value);\n    }\n  }\n\n  /**\n   * Set Shadow falloff coefficient\n   */\n  static setShadowFalloff(material: Material, value: number) {\n    material.shaderData.setFloat(PlanarShadowShaderFactory._shadowFalloffProp, value);\n  }\n}\n\nconst planarShadow = new ShaderPass(\n  `\n    attribute vec4 POSITION;\n    varying vec4 color;\n\n    uniform vec3 u_lightDir;\n    uniform float u_planarHeight;\n    uniform vec4 u_planarShadowColor;\n    uniform float u_planarShadowFalloff;\n\n    uniform mat4 renderer_ModelMat;\n    uniform mat4 camera_VPMat;\n\n    #ifdef RENDERER_HAS_SKIN\n      attribute vec4 JOINTS_0;\n      attribute vec4 WEIGHTS_0;\n\n      #ifdef RENDERER_USE_JOINT_TEXTURE\n        uniform sampler2D renderer_JointSampler;\n        uniform float renderer_JointCount;\n        mat4 getJointMatrix(sampler2D smp, float index) {\n            float base = index / renderer_JointCount;\n            float hf = 0.5 / renderer_JointCount;\n            float v = base + hf;\n\n            vec4 m0 = texture2D(smp, vec2(0.125, v ));\n            vec4 m1 = texture2D(smp, vec2(0.375, v ));\n            vec4 m2 = texture2D(smp, vec2(0.625, v ));\n            vec4 m3 = texture2D(smp, vec2(0.875, v ));\n\n            return mat4(m0, m1, m2, m3);\n        }\n      #else\n          uniform mat4 renderer_JointMatrix[ RENDERER_JOINTS_NUM ];\n      #endif\n    #endif\n\n    vec3 ShadowProjectPos(vec4 vertPos) {\n      vec3 shadowPos;\n\n      // get the world space coordinates of the vertex\n      vec3 worldPos = (renderer_ModelMat * vertPos).xyz;\n      \n      // world space coordinates of the shadow (the part below the ground is unchanged)\n      shadowPos.y = min(worldPos.y , u_planarHeight);\n      shadowPos.xz = worldPos.xz - u_lightDir.xz * max(0.0, worldPos.y - u_planarHeight) / u_lightDir.y;\n\n      return shadowPos;\n    }\n\n    void main() {\n     vec4 position = vec4(POSITION.xyz, 1.0 );\n      #ifdef RENDERER_HAS_SKIN\n          #ifdef RENDERER_USE_JOINT_TEXTURE\n              mat4 skinMatrix =\n                  WEIGHTS_0.x * getJointMatrix(renderer_JointSampler, JOINTS_0.x ) +\n                  WEIGHTS_0.y * getJointMatrix(renderer_JointSampler, JOINTS_0.y ) +\n                  WEIGHTS_0.z * getJointMatrix(renderer_JointSampler, JOINTS_0.z ) +\n                  WEIGHTS_0.w * getJointMatrix(renderer_JointSampler, JOINTS_0.w );\n          #else\n              mat4 skinMatrix =\n                  WEIGHTS_0.x * renderer_JointMatrix[ int( JOINTS_0.x ) ] +\n                  WEIGHTS_0.y * renderer_JointMatrix[ int( JOINTS_0.y ) ] +\n                  WEIGHTS_0.z * renderer_JointMatrix[ int( JOINTS_0.z ) ] +\n                  WEIGHTS_0.w * renderer_JointMatrix[ int( JOINTS_0.w ) ];\n          #endif\n          position = skinMatrix * position;\n      #endif\n\n      // get the shadow's world space coordinates\n      vec3 shadowPos = ShadowProjectPos(position);\n\n      // convert to clip space\n      gl_Position = camera_VPMat * vec4(shadowPos, 1.0);\n\n      // get the world coordinates of the center point\n      vec3 center = vec3(renderer_ModelMat[3].x, u_planarHeight, renderer_ModelMat[3].z);\n      // calculate shadow falloff\n      float falloff = 0.5 - clamp(distance(shadowPos , center) * u_planarShadowFalloff, 0.0, 1.0);\n\n      // shadow color\n      color = u_planarShadowColor;\n      color.a *= falloff;\n    }\n    `,\n  `\n    varying vec4 color;\n    void main() {\n       gl_FragColor = color;\n    }\n    `\n);\nShader.create(\"planarShadowShader\", [Shader.find(\"pbr\").subShaders[0].passes[0], planarShadow]);\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","export function _set_prototype_of(o, p) {\n    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {\n        o.__proto__ = p;\n\n        return o;\n    };\n\n    return _set_prototype_of(o, p);\n}\nexport { _set_prototype_of as _ };\n","import { _set_prototype_of } from \"./_set_prototype_of.js\";\n\nexport function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });\n\n    if (superClass) _set_prototype_of(subClass, superClass);\n}\nexport { _inherits as _ };\n","import { BaseMaterial, Engine, MathUtil, Shader, ShaderProperty } from \"@galacean/engine\";\n\n/**\n * Grid Material.\n */\nexport class GridMaterial extends BaseMaterial {\n  private static _farClipProperty = ShaderProperty.getByName(\"u_far\");\n  private static _nearClipProperty = ShaderProperty.getByName(\"u_near\");\n  private static _primaryScaleProperty = ShaderProperty.getByName(\"u_primaryScale\");\n  private static _secondaryScaleProperty = ShaderProperty.getByName(\"u_secondaryScale\");\n  private static _gridIntensityProperty = ShaderProperty.getByName(\"u_gridIntensity\");\n  private static _axisIntensityProperty = ShaderProperty.getByName(\"u_axisIntensity\");\n  private static _flipProgressProperty = ShaderProperty.getByName(\"u_flipProgress\");\n  private static _fadeProperty = ShaderProperty.getByName(\"u_fade\");\n\n  /**\n   * Near clip plane - the closest point to the camera when rendering occurs.\n   */\n  get nearClipPlane(): number {\n    return this.shaderData.getFloat(GridMaterial._nearClipProperty);\n  }\n\n  set nearClipPlane(value: number) {\n    this.shaderData.setFloat(GridMaterial._nearClipProperty, value);\n  }\n\n  /**\n   * Far clip plane - the furthest point to the camera when rendering occurs.\n   */\n  get farClipPlane(): number {\n    return this.shaderData.getFloat(GridMaterial._farClipProperty);\n  }\n\n  set farClipPlane(value: number) {\n    this.shaderData.setFloat(GridMaterial._farClipProperty, value);\n  }\n\n  /**\n   * Primary scale of grid size.\n   */\n  get primaryScale(): number {\n    return this.shaderData.getFloat(GridMaterial._primaryScaleProperty);\n  }\n\n  set primaryScale(value: number) {\n    this.shaderData.setFloat(GridMaterial._primaryScaleProperty, value);\n  }\n\n  /**\n   * Secondary scale of grid size.\n   */\n  get secondaryScale(): number {\n    return this.shaderData.getFloat(GridMaterial._secondaryScaleProperty);\n  }\n\n  set secondaryScale(value: number) {\n    this.shaderData.setFloat(GridMaterial._secondaryScaleProperty, value);\n  }\n\n  /**\n   * Grid color intensity.\n   */\n  get gridIntensity(): number {\n    return this.shaderData.getFloat(GridMaterial._gridIntensityProperty);\n  }\n\n  set gridIntensity(value: number) {\n    this.shaderData.setFloat(GridMaterial._gridIntensityProperty, value);\n  }\n\n  /**\n   * Axis color intensity.\n   */\n  get axisIntensity(): number {\n    return this.shaderData.getFloat(GridMaterial._axisIntensityProperty);\n  }\n\n  set axisIntensity(value: number) {\n    this.shaderData.setFloat(GridMaterial._axisIntensityProperty, value);\n  }\n\n  /**\n   * 2D-3D flip progress.\n   */\n  get flipProgress(): number {\n    return this.shaderData.getFloat(GridMaterial._flipProgressProperty);\n  }\n\n  set flipProgress(value: number) {\n    this.shaderData.setFloat(GridMaterial._flipProgressProperty, MathUtil.clamp(value, 0, 1));\n  }\n\n  /**\n   * fade parameter.\n   */\n  get fade(): number {\n    return this.shaderData.getFloat(GridMaterial._fadeProperty);\n  }\n\n  set fade(value: number) {\n    this.shaderData.setFloat(GridMaterial._fadeProperty, MathUtil.clamp(value, 0, 1));\n  }\n\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"grid\"));\n    this.isTransparent = true;\n\n    const shaderData = this.shaderData;\n    shaderData.setFloat(GridMaterial._nearClipProperty, 0.1);\n    shaderData.setFloat(GridMaterial._farClipProperty, 100);\n    shaderData.setFloat(GridMaterial._primaryScaleProperty, 10);\n    shaderData.setFloat(GridMaterial._secondaryScaleProperty, 1);\n    shaderData.setFloat(GridMaterial._gridIntensityProperty, 0.2);\n    shaderData.setFloat(GridMaterial._axisIntensityProperty, 0.1);\n    shaderData.setFloat(GridMaterial._flipProgressProperty, 0.0);\n    shaderData.setFloat(GridMaterial._fadeProperty, 0.0);\n  }\n}\n\nShader.create(\n  \"grid\",\n  `\n#include <common>\n\nattribute vec4 POSITION_FLIP;\n\nuniform mat4 camera_ViewInvMat;\nuniform mat4 camera_ProjMat;\nuniform vec4 camera_ProjectionParams;\n\nvarying vec3 nearPoint;\nvarying vec3 farPoint;\n\n\nvec3 UnprojectPoint(float x, float y, float z, mat4 viewInvMat, mat4 projInvMat) {\n    vec4 unprojectedPoint =  viewInvMat * projInvMat * vec4(x, y, z, 1.0);\n    return unprojectedPoint.xyz / unprojectedPoint.w;\n}\n\n\nvoid main() {\n    float tol = 0.0001;\n    mat4 viewInvMat = camera_ViewInvMat;\n    if (abs(viewInvMat[3][1]) < tol) {\n        viewInvMat[3][1] = tol;\n    }\n    mat4 projInvMat = INVERSE_MAT(camera_ProjMat);\n\n    bool flipY = camera_ProjectionParams.x < 0.0;\n    float x = flipY? POSITION_FLIP.z : POSITION_FLIP.x;\n    float y = flipY? POSITION_FLIP.w : POSITION_FLIP.y;\n\n    nearPoint = UnprojectPoint(x, y, -1.0, viewInvMat, projInvMat);// unprojecting on the near plane\n    farPoint = UnprojectPoint(x, y, 1.0, viewInvMat, projInvMat);// unprojecting on the far plane\n    gl_Position = vec4(x, y, 0.0, 1.0);// using directly the clipped coordinates\n}`,\n\n  `\n#include <transform_declare>\n\nuniform float u_far;\nuniform float u_near;\nuniform float u_primaryScale;\nuniform float u_secondaryScale;\nuniform float u_gridIntensity;\nuniform float u_axisIntensity;\nuniform float u_flipProgress;\nuniform float u_fade;\n\nvarying vec3 nearPoint;\nvarying vec3 farPoint;\n  \nvec4 grid(vec3 fragPos3D, float scale, float fade) {\n    vec2 coord = mix(fragPos3D.xz, fragPos3D.xy, u_flipProgress) * scale;\n    vec2 derivative = fwidth(coord);\n    vec2 grid = abs(fract(coord - 0.5) - 0.5) / derivative;\n    float line = min(grid.x, grid.y);\n    float minimumz = min(derivative.y, 1.0);\n    float minimumx = min(derivative.x, 1.0);\n    vec4 color = vec4(u_gridIntensity, u_gridIntensity, u_gridIntensity, fade * (1.0 - min(line, 1.0)));\n    // z-axis\n    if (fragPos3D.x > -u_axisIntensity * minimumx && fragPos3D.x < u_axisIntensity * minimumx)\n        color.z = 1.0;\n    // x-axis or y-axis\n    float xy = mix(fragPos3D.z, fragPos3D.y, u_flipProgress);\n    if (xy > -u_axisIntensity * minimumz && xy < u_axisIntensity * minimumz)\n        color.x = 1.0;\n    return color;\n}\n\nfloat computeDepth(vec3 pos) {\n    vec4 clip_space_pos = camera_ProjMat * camera_ViewMat * vec4(pos.xyz, 1.0);\n    // map to 0-1\n    return (clip_space_pos.z / clip_space_pos.w) * 0.5 + 0.5;\n}\n\nfloat computeLinearDepth(vec3 pos) {\n    vec4 clip_space_pos = camera_ProjMat * camera_ViewMat * vec4(pos.xyz, 1.0);\n    float clip_space_depth = clip_space_pos.z / clip_space_pos.w;\n    float linearDepth = (2.0 * u_near * u_far) / (u_far + u_near - clip_space_depth * (u_far - u_near));\n    return linearDepth / u_far;// normalize\n}\n\nvoid main() {\n    float ty = -nearPoint.y / (farPoint.y - nearPoint.y);\n    float tz = -nearPoint.z / (farPoint.z - nearPoint.z);\n    float t = mix(ty, tz, u_flipProgress);\n    vec3 fragPos3D = nearPoint + t * (farPoint - nearPoint);\n\n    gl_FragDepth = computeDepth(fragPos3D);\n\n    float linearDepth = computeLinearDepth(fragPos3D);\n    float fading = max(0.0, (0.5 - linearDepth));\n\n    // adding multiple resolution for the grid\n    gl_FragColor = (grid(fragPos3D, u_primaryScale, u_fade) + grid(fragPos3D, u_secondaryScale, 1.0 - u_fade));\n    gl_FragColor.a *= fading;\n}\n`\n);\n","import {\n  Buffer,\n  BufferBindFlag,\n  BufferUsage,\n  ContentRestorer,\n  Engine,\n  MeshTopology,\n  ModelMesh,\n  VertexElement,\n  VertexElementFormat\n} from \"@galacean/engine\";\n\nexport class GridMesh {\n  static createGridPlane(engine: Engine): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    GridMesh._updateGridData(mesh);\n    engine.resourceManager.addContentRestorer(new GridMeshRestorer(mesh));\n    return mesh;\n  }\n\n  static _updateGridData(mesh: ModelMesh) {\n    // No-FlipY: POSITION_FLIP.xy, FlipY: POSITION_FLIP.zw\n    // prettier-ignore\n    const vertices = new Float32Array([\n      -1, -1, 1, -1, // left-bottom\n      1, -1, -1, -1,  // right-bottom\n      -1, 1, 1, 1,  // left-top\n      1, 1, -1, 1]); // right-top\n\n    mesh.setVertexElements([new VertexElement(\"POSITION_FLIP\", 0, VertexElementFormat.Vector4, 0)]);\n    mesh.setVertexBufferBinding(new Buffer(mesh.engine, BufferBindFlag.VertexBuffer, vertices, BufferUsage.Static), 16);\n    mesh.addSubMesh(0, 4, MeshTopology.TriangleStrip);\n\n    const { bounds } = mesh;\n    bounds.min.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n    bounds.max.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n    return mesh;\n  }\n}\n\n/**\n * @internal\n */\nexport class GridMeshRestorer extends ContentRestorer<ModelMesh> {\n  constructor(resource: ModelMesh) {\n    super(resource);\n  }\n\n  /**\n   * @override\n   */\n  restoreContent(): void {\n    GridMesh._updateGridData(this.resource);\n  }\n}\n","import { Camera, Script, MeshRenderer, MathUtil } from \"@galacean/engine\";\nimport { GridMaterial } from \"./GridMaterial\";\nimport { GridMesh } from \"./GridMesh\";\n\n/**\n * Grid Control\n */\nexport class GridControl extends Script {\n  private _material: GridMaterial;\n  private _progress: number = 0;\n  private _is2DGrid: boolean = false;\n  private _flipGrid: boolean = false;\n\n  /**\n   * Flip speed\n   */\n  speed = 10.0;\n\n  /**\n   * Camera\n   */\n  camera: Camera = null;\n\n  /**\n   * target distance\n   */\n  distance: number = 8;\n\n  /**\n   * Grid Material.\n   */\n  get material(): GridMaterial {\n    return this._material;\n  }\n\n  /**\n   * Is 2D Grid.\n   */\n  get is2DGrid(): boolean {\n    return this._is2DGrid;\n  }\n\n  set is2DGrid(value: boolean) {\n    this._is2DGrid = value;\n    this._progress = 0;\n    this._flipGrid = true;\n  }\n\n  override onAwake() {\n    const { engine, entity } = this;\n\n    const gridRenderer = entity.addComponent(MeshRenderer);\n    gridRenderer.receiveShadows = false;\n    gridRenderer.castShadows = false;\n    gridRenderer.mesh = GridMesh.createGridPlane(engine);\n    this._material = new GridMaterial(engine);\n    gridRenderer.setMaterial(this._material);\n  }\n\n  override onUpdate(deltaTime: number) {\n    const { _material: material, camera } = this;\n    if (camera === null) return;\n\n    material.nearClipPlane = camera.nearClipPlane;\n    material.farClipPlane = camera.farClipPlane;\n\n    const logDistance = Math.log2(this.distance);\n    const upperDistance = Math.pow(2, Math.floor(logDistance) + 1);\n    const lowerDistance = Math.pow(2, Math.floor(logDistance));\n    material.fade = (this.distance - lowerDistance) / (upperDistance - lowerDistance);\n\n    const level = -Math.floor(logDistance);\n    material.primaryScale = Math.pow(2, level);\n    material.secondaryScale = Math.pow(2, level + 1);\n    material.axisIntensity = 0.3 / material.primaryScale;\n\n    if (this._flipGrid) {\n      this._progress += deltaTime;\n      let percent = MathUtil.clamp(this._progress * this.speed, 0, 1);\n      if (percent >= 1) {\n        this._flipGrid = false;\n      }\n\n      if (!this._is2DGrid) {\n        percent = 1 - percent;\n      }\n      material.flipProgress = percent;\n    }\n  }\n}\n","import { BaseMaterial, Engine, Shader, ShaderProperty, Texture2D, Vector2, Vector3 } from \"@galacean/engine\";\n\nconst vertexSource = `\n  attribute vec3 POSITION;\n  attribute vec2 TEXCOORD_0;\n  attribute vec4 COLOR_0;\n  uniform mat4 renderer_MVPMat;\n  \n  uniform float u_time;\n  uniform vec2 u_foam_speed; \n  uniform vec2 u_distorsion_speed; \n  varying vec2 waterTexCoords;\n  varying vec2 normalTexCoords;\n  varying vec4 v_color;\n      \n  void main() {\n    gl_Position = renderer_MVPMat * vec4(POSITION, 1.0);\n    waterTexCoords = TEXCOORD_0 + vec2(u_foam_speed.x * u_time, u_foam_speed.y * u_time);\n    normalTexCoords = TEXCOORD_0 + vec2(u_distorsion_speed.x * cos(u_time), u_distorsion_speed.y * sin(u_time));\n    v_color = COLOR_0; \n  }\n  `;\n\nconst fragmentSource = `\n  #include <common>\n  varying vec4 v_color;\n  varying vec2 waterTexCoords;\n  varying vec2 normalTexCoords;\n  uniform sampler2D material_NormalTexture;\n  uniform sampler2D u_foamTex;\n  uniform vec3 u_foamColor;\n  uniform vec2 u_foam_param;\n  uniform float u_distorsion_amount;\n  void main() {  \n    vec4 normalTex = texture2D(material_NormalTexture, normalTexCoords) * 2.0 - 1.0;\n    vec4 waterTex = texture2D(u_foamTex, waterTexCoords + (normalTex.rg * u_distorsion_amount));\n    float alphaComp = v_color.r * waterTex.r * u_foam_param.x;\n    float alpha = pow(alphaComp,2.0);\n    alpha = smoothstep(0.5 - u_foam_param.y, 0.5+ u_foam_param.y, alpha);\n    alpha = saturate(alpha);\n    \n    gl_FragColor = vec4(u_foamColor.rgb, alpha);\n  }\n  `;\n\nShader.create(\"water-ripple\", vertexSource, fragmentSource);\n\nexport class WaterRippleMaterial extends BaseMaterial {\n  private static _foamColor = ShaderProperty.getByName(\"u_foamColor\");\n  private static _foamSpeed = ShaderProperty.getByName(\"u_foam_speed\");\n  private static _foamParam = ShaderProperty.getByName(\"u_foam_param\");\n  private static _distorsionSpeed = ShaderProperty.getByName(\"u_distorsion_speed\");\n  private static _distorsionAmount = ShaderProperty.getByName(\"u_distorsion_amount\");\n\n  static _foamTextureProp = ShaderProperty.getByName(\"u_foamTex\");\n\n  /**\n   * Foam Texture Map\n   */\n  get foamTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(WaterRippleMaterial._foamTextureProp);\n  }\n\n  set foamTexture(value: Texture2D) {\n    this.shaderData.setTexture(WaterRippleMaterial._foamTextureProp, value);\n  }\n\n  /**\n   * Normal Texture Map\n   */\n  get normalTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(WaterRippleMaterial._normalTextureProp);\n  }\n\n  set normalTexture(value: Texture2D) {\n    this.shaderData.setTexture(WaterRippleMaterial._normalTextureProp, value);\n  }\n\n  /**\n   * Foam Color\n   */\n  get foamColor(): Vector3 {\n    return this.shaderData.getVector3(WaterRippleMaterial._foamColor);\n  }\n\n  set foamColor(val: Vector3) {\n    this.shaderData.setVector3(WaterRippleMaterial._foamColor, val);\n  }\n\n  /**\n   * Foam speed on x direction and y direction\n   * foam speed y, foam amount, foam smoothness\n   */\n  get foamSpeed(): Vector2 {\n    return this.shaderData.getVector2(WaterRippleMaterial._foamSpeed);\n  }\n\n  set foamSpeed(val: Vector2) {\n    this.shaderData.setVector2(WaterRippleMaterial._foamSpeed, val);\n  }\n\n  /**\n   * Foam Param;\n   * x for foam amount\n   * y for foam smoothness, must between 0 ~ 0.5;\n   */\n  get foamParam(): Vector2 {\n    return this.shaderData.getVector2(WaterRippleMaterial._foamParam);\n  }\n\n  set foamParam(val: Vector2) {\n    this.shaderData.setVector2(WaterRippleMaterial._foamParam, val);\n  }\n\n  /**\n   * Distorsion Speed on x direction and y direction\n   */\n  get distorsionSpeed(): Vector2 {\n    return this.shaderData.getVector2(WaterRippleMaterial._distorsionSpeed);\n  }\n\n  set distorsionSpeed(val: Vector2) {\n    this.shaderData.setVector2(WaterRippleMaterial._distorsionSpeed, val);\n  }\n\n  /**\n   * Distorsion Amount, must between -1 ~ 1\n   */\n  get distorsionAmount(): number {\n    return this.shaderData.getFloat(WaterRippleMaterial._distorsionAmount);\n  }\n\n  set distorsionAmount(val: number) {\n    this.shaderData.setFloat(WaterRippleMaterial._distorsionAmount, val);\n  }\n\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"water-ripple\"));\n    this.isTransparent = true;\n\n    const shaderData = this.shaderData;\n    shaderData.setVector3(\n      WaterRippleMaterial._foamColor,\n      new Vector3((69 + 255) / 400, (156 + 255) / 400, (247 + 255) / 400)\n    );\n    shaderData.setVector2(WaterRippleMaterial._foamSpeed, new Vector2(-1, 0.3));\n    shaderData.setVector2(WaterRippleMaterial._foamParam, new Vector2(2.0, 0.05));\n    shaderData.setVector2(WaterRippleMaterial._distorsionSpeed, new Vector2(1.0, 0));\n    shaderData.setFloat(WaterRippleMaterial._distorsionAmount, 0.03);\n  }\n}\n","import { BaseMaterial, Engine, Shader, ShaderProperty, Texture2D, Vector2, Vector4 } from \"@galacean/engine\";\n\nconst vertexSource = `\n    attribute vec3 POSITION;\n    attribute vec2 TEXCOORD_0;\n    attribute vec4 COLOR_0;\n\n    uniform mat4 renderer_MVPMat;\n    \n    uniform float u_time;\n    uniform vec2 u_water_speed; \n    uniform vec2 u_distorsion_speed; \n    \n    varying vec4 v_color;\n    varying vec2 waterTexCoords;\n    varying vec2 normalTexCoords;\n  \n    void main() {\n      gl_Position = renderer_MVPMat * vec4(POSITION, 1.0);\n  \n      waterTexCoords = TEXCOORD_0 + vec2(u_water_speed.x * sin(u_time), u_water_speed.y * cos(u_time));\n      normalTexCoords = TEXCOORD_0 + vec2(u_distorsion_speed.x * cos(u_time), u_distorsion_speed.y * sin(u_time));     \n      \n      v_color = COLOR_0;\n    }\n    `;\n\nconst fragmentSource = `\n    #include <common>\n    varying vec4 v_color;\n    varying vec2 waterTexCoords;\n    varying vec2 normalTexCoords;\n  \n    uniform sampler2D material_NormalTexture;\n    uniform sampler2D u_waterTex;\n    uniform sampler2D u_edgeTex;\n  \n    uniform vec4 u_edgeColor;\n    uniform vec2 u_edgeParam;\n    uniform float u_distorsion_amount;\n  \n    void main() {\n      vec4 normalTex = texture2D(material_NormalTexture, normalTexCoords) * 2.0 - 1.0;\n      vec4 waterTex = texture2D(u_waterTex, waterTexCoords + (normalTex.rg * u_distorsion_amount));\n      vec4 edgeTex = texture2D(u_edgeTex, waterTexCoords + (normalTex.rg * u_distorsion_amount));\n  \n      float edge = pow((v_color.r + edgeTex.r) * v_color.r, 2.0);\n      edge = saturate(1.0 - smoothstep(u_edgeParam.x - u_edgeParam.y, u_edgeParam.x + u_edgeParam.y, edge));\n      vec4 finalCol = mix(waterTex, u_edgeColor, edge);\n  \n      gl_FragColor = finalCol;\n    }\n    `;\n\nShader.create(\"water\", vertexSource, fragmentSource);\n\nexport class WaterMaterial extends BaseMaterial {\n  private static _waterSpeed = ShaderProperty.getByName(\"u_water_speed\");\n  private static _edgeColor = ShaderProperty.getByName(\"u_edgeColor\");\n  private static _edgeParam = ShaderProperty.getByName(\"u_edgeParam\");\n  private static _distorsionAmount = ShaderProperty.getByName(\"u_distorsion_amount\");\n  private static _distorsionSpeed = ShaderProperty.getByName(\"u_distorsion_speed\");\n\n  static _waterTextureProp = ShaderProperty.getByName(\"u_waterTex\");\n  static _edgeTextureProp = ShaderProperty.getByName(\"u_edgeTex\");\n\n  /**\n   *  Normal Texture Map\n   */\n  get normalTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(WaterMaterial._normalTextureProp);\n  }\n\n  set normalTexture(value: Texture2D) {\n    this.shaderData.setTexture(WaterMaterial._normalTextureProp, value);\n  }\n\n  /**\n   *  Water Texture Map\n   */\n  get waterTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(WaterMaterial._waterTextureProp);\n  }\n\n  set waterTexture(value: Texture2D) {\n    this.shaderData.setTexture(WaterMaterial._waterTextureProp, value);\n  }\n\n  /**\n   *  Edge Texture Map\n   */\n  get edgeTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(WaterMaterial._edgeTextureProp);\n  }\n\n  set edgeTexture(value: Texture2D) {\n    this.shaderData.setTexture(WaterMaterial._edgeTextureProp, value);\n  }\n\n  /**\n   *  Water Speed on x direction and y direction\n   */\n  get waterSpeed(): Vector2 {\n    return this.shaderData.getVector2(WaterMaterial._waterSpeed);\n  }\n\n  set waterSpeed(val: Vector2) {\n    this.shaderData.setVector2(WaterMaterial._waterSpeed, val);\n  }\n\n  /**\n   * Water Edge Color\n   */\n  get edgeColor(): Vector4 {\n    return this.shaderData.getVector4(WaterMaterial._edgeColor);\n  }\n\n  set edgeColor(val: Vector4) {\n    this.shaderData.setVector4(WaterMaterial._edgeColor, val);\n  }\n\n  /**\n   * Edge Param;\n   * x for edge thickness, must between 0 ~ 1;\n   * y for edge smoothness, must between 0 ~ 0.5;\n   */\n  get edgeParam(): Vector2 {\n    return this.shaderData.getVector2(WaterMaterial._edgeParam);\n  }\n\n  set edgeParam(val: Vector2) {\n    this.shaderData.setVector2(WaterMaterial._edgeParam, val);\n  }\n\n  /**\n   * Distorsion Amount, must between -1 ~ 1\n   */\n  get distorsionAmount(): number {\n    return this.shaderData.getFloat(WaterMaterial._distorsionAmount);\n  }\n\n  set distorsionAmount(val: number) {\n    this.shaderData.setFloat(WaterMaterial._distorsionAmount, val);\n  }\n\n  /**\n   * Distorsion Speed on x direction and y direction\n   */\n  get distorsionSpeed(): Vector2 {\n    return this.shaderData.getVector2(WaterMaterial._distorsionSpeed);\n  }\n\n  set distorsionSpeed(val: Vector2) {\n    this.shaderData.setVector2(WaterMaterial._distorsionSpeed, val);\n  }\n\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"water\"));\n\n    this.shaderData.setVector2(WaterMaterial._waterSpeed, new Vector2(-0.02, 0.02));\n    this.shaderData.setVector4(\n      WaterMaterial._edgeColor,\n      new Vector4((69 + 255) / 510, (156 + 255) / 510, (247 + 255) / 510, 1)\n    );\n    this.shaderData.setVector2(WaterMaterial._edgeParam, new Vector2(0.008, 0.002));\n    this.shaderData.setFloat(WaterMaterial._distorsionAmount, 0.02);\n    this.shaderData.setVector2(WaterMaterial._distorsionSpeed, new Vector2(0.2, 0.2));\n  }\n}\n","import { BaseMaterial, Engine, Shader, ShaderProperty, Texture2D, Vector2, Vector4 } from \"@galacean/engine\";\n\nconst vertexSource = `\n    attribute vec3 POSITION;\n    attribute vec2 TEXCOORD_0;\n    attribute vec4 COLOR_0;\n  \n    uniform mat4 renderer_MVPMat;\n    \n    uniform float u_time;\n    uniform vec2 u_water_speed; \n    uniform vec2 u_waterfall_speed; \n    uniform vec2 u_distorsion_speed; \n  \n    varying vec2 waterTexCoords;\n    varying vec2 waterfallTexCoords;\n    varying vec2 normalTexCoords;\n    varying vec4 v_color;\n\n    void main() {\n      gl_Position = renderer_MVPMat * vec4(POSITION, 1.0);\n  \n      waterTexCoords = TEXCOORD_0 + vec2(u_water_speed.x * u_time, u_water_speed.y * u_time);\n      waterfallTexCoords = TEXCOORD_0 + vec2(u_waterfall_speed.x * u_time, u_waterfall_speed.y * u_time);\n      normalTexCoords = TEXCOORD_0 + vec2(u_distorsion_speed.x * cos(u_time), u_distorsion_speed.y * sin(u_time));    \n      \n      v_color = COLOR_0; \n    }\n    `;\n\nconst fragmentSource = `\n    #include <common>\n    varying vec4 v_color;\n    varying vec2 waterTexCoords;\n    varying vec2 waterfallTexCoords;\n    varying vec2 normalTexCoords;\n  \n    uniform sampler2D material_NormalTexture;\n    uniform sampler2D u_waterTex;\n    uniform sampler2D u_waterfallTex;\n    uniform sampler2D u_edgeNoiseTex;\n  \n    uniform vec4 u_edgeColor;\n    uniform vec2 u_edgeParam;\n    uniform float u_distorsion_amount;\n  \n    void main() {      \n      vec4 normalTex = texture2D(material_NormalTexture, normalTexCoords) * 2.0 - 1.0;\n      \n      vec4 waterTex = texture2D(u_waterTex, waterTexCoords + (normalTex.rg * u_distorsion_amount));\n      vec4 waterfallTex = texture2D(u_waterfallTex, waterfallTexCoords + (normalTex.rg * u_distorsion_amount));\n  \n      vec4 streamEdge = texture2D(u_edgeNoiseTex, waterTexCoords);\n      vec4 fallEdge = texture2D(u_edgeNoiseTex, waterfallTexCoords);\n  \n      float edgeShape = mix(fallEdge.r, streamEdge.r, v_color.r);\n      edgeShape = saturate(edgeShape * v_color.g);\n      edgeShape = saturate(smoothstep(u_edgeParam.x - u_edgeParam.y, u_edgeParam.x + u_edgeParam.y, edgeShape));\n  \n      vec4 waterAll = mix(waterfallTex, waterTex, v_color.r);\n      vec4 finalCol = mix(waterAll, u_edgeColor, edgeShape);\n  \n      gl_FragColor = finalCol;\n    }\n    `;\n\nShader.create(\"water-fall\", vertexSource, fragmentSource);\n\nexport class WaterFallMaterial extends BaseMaterial {\n  private static _waterSpeed = ShaderProperty.getByName(\"u_water_speed\");\n  private static _waterfallSpeed = ShaderProperty.getByName(\"u_waterfall_speed\");\n  private static _distorsionSpeed = ShaderProperty.getByName(\"u_distorsion_speed\");\n\n  private static _edgeColor = ShaderProperty.getByName(\"u_edgeColor\");\n  private static _edgeParam = ShaderProperty.getByName(\"u_edgeParam\");\n  private static _distorsionAmount = ShaderProperty.getByName(\"u_distorsion_amount\");\n\n  static _waterTextureProp = ShaderProperty.getByName(\"u_waterTex\");\n  static _waterfallTextureProp = ShaderProperty.getByName(\"u_waterfallTex\");\n  static _edgeTextureProp = ShaderProperty.getByName(\"u_edgeNoiseTex\");\n\n  /**\n   *  Normal Texture Map\n   */\n  get normalTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(WaterFallMaterial._normalTextureProp);\n  }\n\n  set normalTexture(value: Texture2D) {\n    this.shaderData.setTexture(WaterFallMaterial._normalTextureProp, value);\n  }\n\n  /**\n   *  Water Texture Map\n   */\n  get waterTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(WaterFallMaterial._waterTextureProp);\n  }\n\n  set waterTexture(value: Texture2D) {\n    this.shaderData.setTexture(WaterFallMaterial._waterTextureProp, value);\n  }\n\n  /**\n   *  Water Fall Texture Map\n   */\n  get waterfallTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(WaterFallMaterial._waterfallTextureProp);\n  }\n\n  set waterfallTexture(value: Texture2D) {\n    this.shaderData.setTexture(WaterFallMaterial._waterfallTextureProp, value);\n  }\n\n  /**\n   *  Edge Noise Texture Map\n   */\n  get edgeNoiseTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(WaterFallMaterial._edgeTextureProp);\n  }\n\n  set edgeNoiseTexture(value: Texture2D) {\n    this.shaderData.setTexture(WaterFallMaterial._edgeTextureProp, value);\n  }\n\n  /**\n   *  Water Speed on x direction and y direction\n   */\n  get waterSpeed(): Vector2 {\n    return this.shaderData.getVector2(WaterFallMaterial._waterSpeed);\n  }\n\n  set waterSpeed(val: Vector2) {\n    this.shaderData.setVector2(WaterFallMaterial._waterSpeed, val);\n  }\n\n  /**\n   *  Water Speed on x direction and y direction\n   */\n  get waterfallSpeed(): Vector2 {\n    return this.shaderData.getVector2(WaterFallMaterial._waterfallSpeed);\n  }\n\n  set waterfallSpeed(val: Vector2) {\n    this.shaderData.setVector2(WaterFallMaterial._waterfallSpeed, val);\n  }\n\n  /**\n   * Water Edge Color\n   */\n  get edgeColor(): Vector4 {\n    return this.shaderData.getVector4(WaterFallMaterial._edgeColor);\n  }\n\n  set edgeColor(val: Vector4) {\n    this.shaderData.setVector4(WaterFallMaterial._edgeColor, val);\n  }\n\n  /**\n   * Edge Param;\n   * x for edge thickness, must between 0 ~ 1;\n   * y for edge smoothness, must between 0 ~ 0.5;\n   */\n  get edgeParam(): Vector2 {\n    return this.shaderData.getVector2(WaterFallMaterial._edgeParam);\n  }\n\n  set edgeParam(val: Vector2) {\n    this.shaderData.setVector2(WaterFallMaterial._edgeParam, val);\n  }\n\n  /**\n   * Distorsion Amount, must between -1 ~ 1\n   */\n  get distorsionAmount(): number {\n    return this.shaderData.getFloat(WaterFallMaterial._distorsionAmount);\n  }\n\n  set distorsionAmount(val: number) {\n    this.shaderData.setFloat(WaterFallMaterial._distorsionAmount, val);\n  }\n\n  /**\n   * Distorsion Speed on x direction and y direction\n   */\n  get distorsionSpeed(): Vector2 {\n    return this.shaderData.getVector2(WaterFallMaterial._distorsionSpeed);\n  }\n\n  set distorsionSpeed(val: Vector2) {\n    this.shaderData.setVector2(WaterFallMaterial._distorsionSpeed, val);\n  }\n\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"water-fall\"));\n\n    this.shaderData.setVector2(WaterFallMaterial._waterSpeed, new Vector2(0.2, 0.0));\n    this.shaderData.setVector2(WaterFallMaterial._waterfallSpeed, new Vector2(0.9, 0));\n    this.shaderData.setVector4(WaterFallMaterial._edgeColor, new Vector4(160 / 255, 250 / 255, 250 / 255, 1.0));\n    this.shaderData.setVector2(WaterFallMaterial._edgeParam, new Vector2(0.7, 0.05));\n    this.shaderData.setFloat(WaterFallMaterial._distorsionAmount, 0.03);\n    this.shaderData.setVector2(WaterFallMaterial._distorsionSpeed, new Vector2(1.0, 1.0));\n  }\n}\n","export default `\n#define IS_METALLIC_WORKFLOW\n#include <common>\n#include <camera_declare>\n\n#include <FogFragmentDeclaration>\n\n#include <uv_share>\n#include <normal_share>\n#include <color_share>\n#include <worldpos_share>\n\n#include <light_frag_define>\n#include <pbr_frag_define>\n#include <pbr_helper>\n\n#ifdef LIGHTMAP_TEXTURE\n    uniform sampler2D u_lightMapTexture;\n    uniform float u_lightMapIntensity;\n#endif\n\n\nvoid main() {\n    Geometry geometry;\n    Material material;\n    ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n    \n    initGeometry(geometry, gl_FrontFacing);\n    initMaterial(material, geometry);\n    \n    addTotalDirectRadiance(geometry, material, reflectedLight);\n    \n    \n    // IBL diffuse\n    #ifdef LIGHTMAP_TEXTURE\n        vec2 lightMapUV = v_uv;\n        #ifdef RENDERER_HAS_UV1\n            lightMapUV = v_uv1;\n        #endif\n        reflectedLight.indirectDiffuse += texture2D(u_lightMapTexture, lightMapUV).rgb * u_lightMapIntensity * BRDF_Diffuse_Lambert( material.diffuseColor );\n    #endif\n    \n    // IBL specular\n    vec3 radiance = getLightProbeRadiance(geometry, geometry.normal, material.roughness, int(scene_EnvMapLight.mipMapLevel), scene_EnvMapLight.specularIntensity);\n    float radianceAttenuation = 1.0;\n    \n    #ifdef MATERIAL_CLEARCOAT\n        vec3 clearCoatRadiance = getLightProbeRadiance( geometry, geometry.clearCoatNormal, material.clearCoatRoughness, int(scene_EnvMapLight.mipMapLevel), scene_EnvMapLight.specularIntensity );\n    \n        reflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * envBRDFApprox(vec3( 0.04 ), material.clearCoatRoughness, geometry.clearCoatDotNV);\n        radianceAttenuation -= material.clearCoat * F_Schlick(geometry.clearCoatDotNV);\n    #endif\n    \n    reflectedLight.indirectSpecular += radianceAttenuation * radiance * envBRDFApprox(material.specularColor, material.roughness, geometry.dotNV );\n    \n    \n    // Occlusion\n    #ifdef MATERIAL_OCCLUSIONTEXTURE\n        vec2 aoUV = v_uv;\n        #ifdef RENDERER_HAS_UV1\n            if(material_OcclusionTextureCoord == 1.0){\n                aoUV = v_uv1;\n            }\n        #endif\n        float ambientOcclusion = (texture2D(material_OcclusionTexture, aoUV).r - 1.0) * material_OcclusionIntensity + 1.0;\n        reflectedLight.indirectDiffuse *= ambientOcclusion;\n        #ifdef SCENE_USE_SPECULAR_ENV\n            reflectedLight.indirectSpecular *= computeSpecularOcclusion(ambientOcclusion, material.roughness, geometry.dotNV);\n        #endif\n    #endif\n        \n        \n    // Emissive\n    vec3 emissiveRadiance = material_EmissiveColor;\n    #ifdef MATERIAL_HAS_EMISSIVETEXTURE\n        vec4 emissiveColor = texture2D(material_EmissiveTexture, v_uv);\n        #ifndef ENGINE_IS_COLORSPACE_GAMMA\n            emissiveColor = gammaToLinear(emissiveColor);\n        #endif\n        emissiveRadiance *= emissiveColor.rgb;\n    #endif\n        \n    // Total\n    vec3 totalRadiance =    reflectedLight.directDiffuse + \n                            reflectedLight.indirectDiffuse + \n                            reflectedLight.directSpecular + \n                            reflectedLight.indirectSpecular + \n                            emissiveRadiance;\n                            \n        \n    gl_FragColor = vec4(totalRadiance, material.opacity);\n        \n    #include <FogFragment>\n        \n    #ifndef ENGINE_IS_COLORSPACE_GAMMA\n        gl_FragColor = linearToGamma(gl_FragColor);\n    #endif\n\n}\n`;\n","export default `\n#include <common>\n#include <common_vert>\n#include <blendShape_input>\n#include <uv_share>\n#include <color_share>\n#include <normal_share>\n#include <worldpos_share>\n\n#include <ShadowVertexDeclaration>\n#include <FogVertexDeclaration>\n\nvoid main() {\n\n    #include <begin_position_vert>\n    #include <begin_normal_vert>\n    #include <blendShape_vert>\n    #include <skinning_vert>\n    #include <uv_vert>\n    #include <color_vert>\n    #include <normal_vert>\n    #include <worldpos_vert>\n    #include <position_vert>\n\n    #include <ShadowVertex>\n    #include <FogVertex>\n}\n`;\n","import { Engine, PBRMaterial, Shader, ShaderProperty, Texture2D } from \"@galacean/engine\";\nimport fragment from \"./fragment\";\nimport vertex from \"./vertex\";\n\nShader.create(\"bake-pbr\", vertex, fragment);\n\n/**\n * Bake PBR Material.\n */\nexport class BakePBRMaterial extends PBRMaterial {\n  private static _lightMapTextureProp = ShaderProperty.getByName(\"u_lightMapTexture\");\n  private static _lightMapIntensityProp = ShaderProperty.getByName(\"u_lightMapIntensity\");\n\n  /**\n   * Light map texture.\n   */\n  get lightmapTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(BakePBRMaterial._lightMapTextureProp);\n  }\n\n  set lightmapTexture(value: Texture2D) {\n    this.shaderData.setTexture(BakePBRMaterial._lightMapTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"LIGHTMAP_TEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"LIGHTMAP_TEXTURE\");\n    }\n  }\n\n  /**\n   * Light map intensity, default 1.0.\n   */\n  get lightmapIntensity(): number {\n    return this.shaderData.getFloat(BakePBRMaterial._lightMapIntensityProp);\n  }\n\n  set lightmapIntensity(value: number) {\n    this.shaderData.setFloat(BakePBRMaterial._lightMapIntensityProp, value);\n  }\n\n  /**\n   * Create a pbr metallic-roughness workflow material instance.\n   * @param engine - Engine to which the material belongs\n   */\n  constructor(engine: Engine) {\n    super(engine);\n    this.shader = Shader.find(\"bake-pbr\");\n    this.shaderData.setFloat(BakePBRMaterial._lightMapIntensityProp, 1);\n  }\n\n  override clone(): BakePBRMaterial {\n    const dest = new BakePBRMaterial(this._engine);\n    this.cloneTo(dest);\n    return dest;\n  }\n}\n","import { BaseMaterial, Color, CullMode, Engine, Shader } from \"@galacean/engine\";\n\n/**\n * plain color Material. don't effected by light and fog.\n */\nexport class PlainColorMaterial extends BaseMaterial {\n  /**\n   * Base color.\n   */\n  get baseColor(): Color {\n    return this.shaderData.getColor(PlainColorMaterial._baseColorProp);\n  }\n\n  set baseColor(value: Color) {\n    const baseColor = this.shaderData.getColor(PlainColorMaterial._baseColorProp);\n    if (value !== baseColor) {\n      baseColor.copyFrom(value);\n    }\n  }\n\n  /**\n   * Create a plain color material instance.\n   * @param engine - Engine to which the material belongs\n   */\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"plain-color\"));\n\n    const shaderData = this.shaderData;\n\n    shaderData.enableMacro(\"MATERIAL_OMIT_NORMAL\");\n\n    shaderData.setColor(PlainColorMaterial._baseColorProp, new Color(1, 1, 1, 1));\n\n    this.renderState.rasterState.cullMode = CullMode.Off;\n  }\n\n  override clone(): PlainColorMaterial {\n    const dest = new PlainColorMaterial(this._engine);\n    this.cloneTo(dest);\n    return dest;\n  }\n}\n\nShader.create(\n  \"plain-color\",\n  `\n#include <common>\n#include <common_vert>\n#include <blendShape_input>\n\nvoid main() {\n    #include <begin_position_vert>\n    #include <blendShape_vert>\n    #include <skinning_vert>\n    #include <position_vert>\n}\n`,\n\n  `\n#include <common>\n\nuniform vec4 material_BaseColor;\n\nvoid main() {\n     vec4 baseColor = material_BaseColor;\n\n    #ifdef MATERIAL_IS_ALPHA_CUTOFF\n        if( baseColor.a < material_AlphaCutoff ) {\n            discard;\n        }\n    #endif\n\n    gl_FragColor = baseColor;\n\n     #ifndef ENGINE_IS_COLORSPACE_GAMMA\n        gl_FragColor = linearToGamma(gl_FragColor);\n    #endif\n}\n`\n);\n"],"names":["PlanarShadowShaderFactory","replaceShader","material","shader","Shader","find","shadowRenderState","renderStates","renderQueueType","RenderQueueType","Transparent","depthState","writeEnabled","targetBlendState","blendState","enabled","sourceColorBlendFactor","BlendFactor","SourceAlpha","destinationColorBlendFactor","OneMinusSourceAlpha","sourceAlphaBlendFactor","One","destinationAlphaBlendFactor","stencilState","referenceValue","compareFunctionFront","CompareFunction","Equal","compareFunctionBack","failOperationFront","StencilOperation","Keep","failOperationBack","zFailOperationFront","zFailOperationBack","passOperationFront","IncrementWrap","passOperationBack","shaderData","setFloat","_shadowFalloffProp","setColor","_shadowColorProp","Color","setVector3","_lightDirProp","Vector3","_planarHeightProp","setPlanarHeight","value","setLightDirection","lightDir","getVector3","copyFrom","normalize","setShadowColor","shadowColor","getColor","setShadowFalloff","ShaderProperty","getByName","planarShadow","ShaderPass","create","subShaders","passes","GridMaterial","engine","isTransparent","_nearClipProperty","_farClipProperty","_primaryScaleProperty","_secondaryScaleProperty","_gridIntensityProperty","_axisIntensityProperty","_flipProgressProperty","_fadeProperty","nearClipPlane","getFloat","farClipPlane","primaryScale","secondaryScale","gridIntensity","axisIntensity","flipProgress","MathUtil","clamp","fade","BaseMaterial","GridMesh","createGridPlane","mesh","ModelMesh","_updateGridData","resourceManager","addContentRestorer","GridMeshRestorer","vertices","Float32Array","setVertexElements","VertexElement","VertexElementFormat","Vector4","setVertexBufferBinding","Buffer","BufferBindFlag","VertexBuffer","BufferUsage","Static","addSubMesh","MeshTopology","TriangleStrip","bounds","min","set","Number","MAX_VALUE","max","resource","restoreContent","ContentRestorer","GridControl","_progress","_is2DGrid","_flipGrid","speed","camera","distance","onAwake","entity","gridRenderer","addComponent","MeshRenderer","receiveShadows","castShadows","_material","setMaterial","onUpdate","deltaTime","logDistance","Math","log2","upperDistance","pow","floor","lowerDistance","level","percent","is2DGrid","Script","vertexSource","fragmentSource","WaterRippleMaterial","_foamColor","setVector2","_foamSpeed","Vector2","_foamParam","_distorsionSpeed","_distorsionAmount","foamTexture","getTexture","_foamTextureProp","setTexture","normalTexture","_normalTextureProp","foamColor","val","foamSpeed","getVector2","foamParam","distorsionSpeed","distorsionAmount","WaterMaterial","_waterSpeed","setVector4","_edgeColor","_edgeParam","waterTexture","_waterTextureProp","edgeTexture","_edgeTextureProp","waterSpeed","edgeColor","getVector4","edgeParam","WaterFallMaterial","_waterfallSpeed","waterfallTexture","_waterfallTextureProp","edgeNoiseTexture","waterfallSpeed","vertex","fragment","BakePBRMaterial","_lightMapIntensityProp","clone","dest","_engine","cloneTo","lightmapTexture","_lightMapTextureProp","enableMacro","disableMacro","lightmapIntensity","PBRMaterial","PlainColorMaterial","_baseColorProp","renderState","rasterState","cullMode","CullMode","Off","baseColor"],"mappings":"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","x_google_ignoreList":[1,2,3]}