{"version":3,"file":"WaterMaterial.js","sources":["../../../src/water/WaterMaterial.ts"],"sourcesContent":["import { BaseMaterial, Engine, Shader, ShaderProperty, Texture2D, Vector2, Vector4 } from \"@galacean/engine\";\n\nconst vertexSource = `\n    attribute vec3 POSITION;\n    attribute vec2 TEXCOORD_0;\n    attribute vec4 COLOR_0;\n\n    uniform mat4 renderer_MVPMat;\n    \n    uniform float u_time;\n    uniform vec2 u_water_speed; \n    uniform vec2 u_distorsion_speed; \n    \n    varying vec4 v_color;\n    varying vec2 waterTexCoords;\n    varying vec2 normalTexCoords;\n  \n    void main() {\n      gl_Position = renderer_MVPMat * vec4(POSITION, 1.0);\n  \n      waterTexCoords = TEXCOORD_0 + vec2(u_water_speed.x * sin(u_time), u_water_speed.y * cos(u_time));\n      normalTexCoords = TEXCOORD_0 + vec2(u_distorsion_speed.x * cos(u_time), u_distorsion_speed.y * sin(u_time));     \n      \n      v_color = COLOR_0;\n    }\n    `;\n\nconst fragmentSource = `\n    #include <common>\n    varying vec4 v_color;\n    varying vec2 waterTexCoords;\n    varying vec2 normalTexCoords;\n  \n    uniform sampler2D material_NormalTexture;\n    uniform sampler2D u_waterTex;\n    uniform sampler2D u_edgeTex;\n  \n    uniform vec4 u_edgeColor;\n    uniform vec2 u_edgeParam;\n    uniform float u_distorsion_amount;\n  \n    void main() {\n      vec4 normalTex = texture2D(material_NormalTexture, normalTexCoords) * 2.0 - 1.0;\n      vec4 waterTex = texture2D(u_waterTex, waterTexCoords + (normalTex.rg * u_distorsion_amount));\n      vec4 edgeTex = texture2D(u_edgeTex, waterTexCoords + (normalTex.rg * u_distorsion_amount));\n  \n      float edge = pow((v_color.r + edgeTex.r) * v_color.r, 2.0);\n      edge = saturate(1.0 - smoothstep(u_edgeParam.x - u_edgeParam.y, u_edgeParam.x + u_edgeParam.y, edge));\n      vec4 finalCol = mix(waterTex, u_edgeColor, edge);\n  \n      gl_FragColor = finalCol;\n    }\n    `;\n\nShader.create(\"water\", vertexSource, fragmentSource);\n\nexport class WaterMaterial extends BaseMaterial {\n  private static _waterSpeed = ShaderProperty.getByName(\"u_water_speed\");\n  private static _edgeColor = ShaderProperty.getByName(\"u_edgeColor\");\n  private static _edgeParam = ShaderProperty.getByName(\"u_edgeParam\");\n  private static _distorsionAmount = ShaderProperty.getByName(\"u_distorsion_amount\");\n  private static _distorsionSpeed = ShaderProperty.getByName(\"u_distorsion_speed\");\n\n  static _waterTextureProp = ShaderProperty.getByName(\"u_waterTex\");\n  static _edgeTextureProp = ShaderProperty.getByName(\"u_edgeTex\");\n\n  /**\n   *  Normal Texture Map\n   */\n  get normalTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(WaterMaterial._normalTextureProp);\n  }\n\n  set normalTexture(value: Texture2D) {\n    this.shaderData.setTexture(WaterMaterial._normalTextureProp, value);\n  }\n\n  /**\n   *  Water Texture Map\n   */\n  get waterTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(WaterMaterial._waterTextureProp);\n  }\n\n  set waterTexture(value: Texture2D) {\n    this.shaderData.setTexture(WaterMaterial._waterTextureProp, value);\n  }\n\n  /**\n   *  Edge Texture Map\n   */\n  get edgeTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(WaterMaterial._edgeTextureProp);\n  }\n\n  set edgeTexture(value: Texture2D) {\n    this.shaderData.setTexture(WaterMaterial._edgeTextureProp, value);\n  }\n\n  /**\n   *  Water Speed on x direction and y direction\n   */\n  get waterSpeed(): Vector2 {\n    return this.shaderData.getVector2(WaterMaterial._waterSpeed);\n  }\n\n  set waterSpeed(val: Vector2) {\n    this.shaderData.setVector2(WaterMaterial._waterSpeed, val);\n  }\n\n  /**\n   * Water Edge Color\n   */\n  get edgeColor(): Vector4 {\n    return this.shaderData.getVector4(WaterMaterial._edgeColor);\n  }\n\n  set edgeColor(val: Vector4) {\n    this.shaderData.setVector4(WaterMaterial._edgeColor, val);\n  }\n\n  /**\n   * Edge Param;\n   * x for edge thickness, must between 0 ~ 1;\n   * y for edge smoothness, must between 0 ~ 0.5;\n   */\n  get edgeParam(): Vector2 {\n    return this.shaderData.getVector2(WaterMaterial._edgeParam);\n  }\n\n  set edgeParam(val: Vector2) {\n    this.shaderData.setVector2(WaterMaterial._edgeParam, val);\n  }\n\n  /**\n   * Distorsion Amount, must between -1 ~ 1\n   */\n  get distorsionAmount(): number {\n    return this.shaderData.getFloat(WaterMaterial._distorsionAmount);\n  }\n\n  set distorsionAmount(val: number) {\n    this.shaderData.setFloat(WaterMaterial._distorsionAmount, val);\n  }\n\n  /**\n   * Distorsion Speed on x direction and y direction\n   */\n  get distorsionSpeed(): Vector2 {\n    return this.shaderData.getVector2(WaterMaterial._distorsionSpeed);\n  }\n\n  set distorsionSpeed(val: Vector2) {\n    this.shaderData.setVector2(WaterMaterial._distorsionSpeed, val);\n  }\n\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"water\"));\n\n    this.shaderData.setVector2(WaterMaterial._waterSpeed, new Vector2(-0.02, 0.02));\n    this.shaderData.setVector4(\n      WaterMaterial._edgeColor,\n      new Vector4((69 + 255) / 510, (156 + 255) / 510, (247 + 255) / 510, 1)\n    );\n    this.shaderData.setVector2(WaterMaterial._edgeParam, new Vector2(0.008, 0.002));\n    this.shaderData.setFloat(WaterMaterial._distorsionAmount, 0.02);\n    this.shaderData.setVector2(WaterMaterial._distorsionSpeed, new Vector2(0.2, 0.2));\n  }\n}\n"],"names":["vertexSource","fragmentSource","Shader","create","WaterMaterial","engine","find","shaderData","setVector2","_waterSpeed","Vector2","setVector4","_edgeColor","Vector4","_edgeParam","setFloat","_distorsionAmount","_distorsionSpeed","normalTexture","getTexture","_normalTextureProp","value","setTexture","waterTexture","_waterTextureProp","edgeTexture","_edgeTextureProp","waterSpeed","getVector2","val","edgeColor","getVector4","edgeParam","distorsionAmount","getFloat","distorsionSpeed","BaseMaterial","ShaderProperty","getByName"],"mappings":"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"}