{"version":3,"file":"WaterfallMaterial.js","sources":["../../../src/water/WaterfallMaterial.ts"],"sourcesContent":["import { BaseMaterial, Engine, Shader, ShaderProperty, Texture2D, Vector2, Vector4 } from \"@galacean/engine\";\n\nconst vertexSource = `\n    attribute vec3 POSITION;\n    attribute vec2 TEXCOORD_0;\n    attribute vec4 COLOR_0;\n  \n    uniform mat4 renderer_MVPMat;\n    \n    uniform float u_time;\n    uniform vec2 u_water_speed; \n    uniform vec2 u_waterfall_speed; \n    uniform vec2 u_distorsion_speed; \n  \n    varying vec2 waterTexCoords;\n    varying vec2 waterfallTexCoords;\n    varying vec2 normalTexCoords;\n    varying vec4 v_color;\n\n    void main() {\n      gl_Position = renderer_MVPMat * vec4(POSITION, 1.0);\n  \n      waterTexCoords = TEXCOORD_0 + vec2(u_water_speed.x * u_time, u_water_speed.y * u_time);\n      waterfallTexCoords = TEXCOORD_0 + vec2(u_waterfall_speed.x * u_time, u_waterfall_speed.y * u_time);\n      normalTexCoords = TEXCOORD_0 + vec2(u_distorsion_speed.x * cos(u_time), u_distorsion_speed.y * sin(u_time));    \n      \n      v_color = COLOR_0; \n    }\n    `;\n\nconst fragmentSource = `\n    #include <common>\n    varying vec4 v_color;\n    varying vec2 waterTexCoords;\n    varying vec2 waterfallTexCoords;\n    varying vec2 normalTexCoords;\n  \n    uniform sampler2D material_NormalTexture;\n    uniform sampler2D u_waterTex;\n    uniform sampler2D u_waterfallTex;\n    uniform sampler2D u_edgeNoiseTex;\n  \n    uniform vec4 u_edgeColor;\n    uniform vec2 u_edgeParam;\n    uniform float u_distorsion_amount;\n  \n    void main() {      \n      vec4 normalTex = texture2D(material_NormalTexture, normalTexCoords) * 2.0 - 1.0;\n      \n      vec4 waterTex = texture2D(u_waterTex, waterTexCoords + (normalTex.rg * u_distorsion_amount));\n      vec4 waterfallTex = texture2D(u_waterfallTex, waterfallTexCoords + (normalTex.rg * u_distorsion_amount));\n  \n      vec4 streamEdge = texture2D(u_edgeNoiseTex, waterTexCoords);\n      vec4 fallEdge = texture2D(u_edgeNoiseTex, waterfallTexCoords);\n  \n      float edgeShape = mix(fallEdge.r, streamEdge.r, v_color.r);\n      edgeShape = saturate(edgeShape * v_color.g);\n      edgeShape = saturate(smoothstep(u_edgeParam.x - u_edgeParam.y, u_edgeParam.x + u_edgeParam.y, edgeShape));\n  \n      vec4 waterAll = mix(waterfallTex, waterTex, v_color.r);\n      vec4 finalCol = mix(waterAll, u_edgeColor, edgeShape);\n  \n      gl_FragColor = finalCol;\n    }\n    `;\n\nShader.create(\"water-fall\", vertexSource, fragmentSource);\n\nexport class WaterFallMaterial extends BaseMaterial {\n  private static _waterSpeed = ShaderProperty.getByName(\"u_water_speed\");\n  private static _waterfallSpeed = ShaderProperty.getByName(\"u_waterfall_speed\");\n  private static _distorsionSpeed = ShaderProperty.getByName(\"u_distorsion_speed\");\n\n  private static _edgeColor = ShaderProperty.getByName(\"u_edgeColor\");\n  private static _edgeParam = ShaderProperty.getByName(\"u_edgeParam\");\n  private static _distorsionAmount = ShaderProperty.getByName(\"u_distorsion_amount\");\n\n  static _waterTextureProp = ShaderProperty.getByName(\"u_waterTex\");\n  static _waterfallTextureProp = ShaderProperty.getByName(\"u_waterfallTex\");\n  static _edgeTextureProp = ShaderProperty.getByName(\"u_edgeNoiseTex\");\n\n  /**\n   *  Normal Texture Map\n   */\n  get normalTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(WaterFallMaterial._normalTextureProp);\n  }\n\n  set normalTexture(value: Texture2D) {\n    this.shaderData.setTexture(WaterFallMaterial._normalTextureProp, value);\n  }\n\n  /**\n   *  Water Texture Map\n   */\n  get waterTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(WaterFallMaterial._waterTextureProp);\n  }\n\n  set waterTexture(value: Texture2D) {\n    this.shaderData.setTexture(WaterFallMaterial._waterTextureProp, value);\n  }\n\n  /**\n   *  Water Fall Texture Map\n   */\n  get waterfallTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(WaterFallMaterial._waterfallTextureProp);\n  }\n\n  set waterfallTexture(value: Texture2D) {\n    this.shaderData.setTexture(WaterFallMaterial._waterfallTextureProp, value);\n  }\n\n  /**\n   *  Edge Noise Texture Map\n   */\n  get edgeNoiseTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(WaterFallMaterial._edgeTextureProp);\n  }\n\n  set edgeNoiseTexture(value: Texture2D) {\n    this.shaderData.setTexture(WaterFallMaterial._edgeTextureProp, value);\n  }\n\n  /**\n   *  Water Speed on x direction and y direction\n   */\n  get waterSpeed(): Vector2 {\n    return this.shaderData.getVector2(WaterFallMaterial._waterSpeed);\n  }\n\n  set waterSpeed(val: Vector2) {\n    this.shaderData.setVector2(WaterFallMaterial._waterSpeed, val);\n  }\n\n  /**\n   *  Water Speed on x direction and y direction\n   */\n  get waterfallSpeed(): Vector2 {\n    return this.shaderData.getVector2(WaterFallMaterial._waterfallSpeed);\n  }\n\n  set waterfallSpeed(val: Vector2) {\n    this.shaderData.setVector2(WaterFallMaterial._waterfallSpeed, val);\n  }\n\n  /**\n   * Water Edge Color\n   */\n  get edgeColor(): Vector4 {\n    return this.shaderData.getVector4(WaterFallMaterial._edgeColor);\n  }\n\n  set edgeColor(val: Vector4) {\n    this.shaderData.setVector4(WaterFallMaterial._edgeColor, val);\n  }\n\n  /**\n   * Edge Param;\n   * x for edge thickness, must between 0 ~ 1;\n   * y for edge smoothness, must between 0 ~ 0.5;\n   */\n  get edgeParam(): Vector2 {\n    return this.shaderData.getVector2(WaterFallMaterial._edgeParam);\n  }\n\n  set edgeParam(val: Vector2) {\n    this.shaderData.setVector2(WaterFallMaterial._edgeParam, val);\n  }\n\n  /**\n   * Distorsion Amount, must between -1 ~ 1\n   */\n  get distorsionAmount(): number {\n    return this.shaderData.getFloat(WaterFallMaterial._distorsionAmount);\n  }\n\n  set distorsionAmount(val: number) {\n    this.shaderData.setFloat(WaterFallMaterial._distorsionAmount, val);\n  }\n\n  /**\n   * Distorsion Speed on x direction and y direction\n   */\n  get distorsionSpeed(): Vector2 {\n    return this.shaderData.getVector2(WaterFallMaterial._distorsionSpeed);\n  }\n\n  set distorsionSpeed(val: Vector2) {\n    this.shaderData.setVector2(WaterFallMaterial._distorsionSpeed, val);\n  }\n\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"water-fall\"));\n\n    this.shaderData.setVector2(WaterFallMaterial._waterSpeed, new Vector2(0.2, 0.0));\n    this.shaderData.setVector2(WaterFallMaterial._waterfallSpeed, new Vector2(0.9, 0));\n    this.shaderData.setVector4(WaterFallMaterial._edgeColor, new Vector4(160 / 255, 250 / 255, 250 / 255, 1.0));\n    this.shaderData.setVector2(WaterFallMaterial._edgeParam, new Vector2(0.7, 0.05));\n    this.shaderData.setFloat(WaterFallMaterial._distorsionAmount, 0.03);\n    this.shaderData.setVector2(WaterFallMaterial._distorsionSpeed, new Vector2(1.0, 1.0));\n  }\n}\n"],"names":["vertexSource","fragmentSource","Shader","create","WaterFallMaterial","engine","find","shaderData","setVector2","_waterSpeed","Vector2","_waterfallSpeed","setVector4","_edgeColor","Vector4","_edgeParam","setFloat","_distorsionAmount","_distorsionSpeed","normalTexture","getTexture","_normalTextureProp","value","setTexture","waterTexture","_waterTextureProp","waterfallTexture","_waterfallTextureProp","edgeNoiseTexture","_edgeTextureProp","waterSpeed","getVector2","val","waterfallSpeed","edgeColor","getVector4","edgeParam","distorsionAmount","getFloat","distorsionSpeed","BaseMaterial","ShaderProperty","getByName"],"mappings":"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"}