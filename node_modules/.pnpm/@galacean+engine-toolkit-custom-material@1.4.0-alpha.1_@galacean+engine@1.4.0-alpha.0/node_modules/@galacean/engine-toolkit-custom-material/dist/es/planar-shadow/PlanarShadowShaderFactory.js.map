{"version":3,"file":"PlanarShadowShaderFactory.js","sources":["../../../src/planar-shadow/PlanarShadowShaderFactory.ts"],"sourcesContent":["import {\n  BlendFactor,\n  Color,\n  CompareFunction,\n  Material,\n  RenderQueueType,\n  Shader,\n  ShaderPass,\n  ShaderProperty,\n  StencilOperation,\n  Vector3\n} from \"@galacean/engine\";\n\nexport class PlanarShadowShaderFactory {\n  private static _lightDirProp = ShaderProperty.getByName(\"u_lightDir\");\n  private static _planarHeightProp = ShaderProperty.getByName(\"u_planarHeight\");\n  private static _shadowColorProp = ShaderProperty.getByName(\"u_planarShadowColor\");\n  private static _shadowFalloffProp = ShaderProperty.getByName(\"u_planarShadowFalloff\");\n\n  /**\n   * Replace material Shader and initialization。\n   * @param material - Material to replace and initialization。\n   */\n  static replaceShader(material: Material) {\n    material.shader = Shader.find(\"planarShadowShader\");\n\n    const shadowRenderState = material.renderStates[1];\n    shadowRenderState.renderQueueType = RenderQueueType.Transparent;\n    shadowRenderState.depthState.writeEnabled = false;\n\n    const targetBlendState = shadowRenderState.blendState.targetBlendState;\n    targetBlendState.enabled = true;\n    targetBlendState.sourceColorBlendFactor = BlendFactor.SourceAlpha;\n    targetBlendState.destinationColorBlendFactor = BlendFactor.OneMinusSourceAlpha;\n    targetBlendState.sourceAlphaBlendFactor = BlendFactor.One;\n    targetBlendState.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n\n    // set shadow pass stencilState\n    const stencilState = shadowRenderState.stencilState;\n    stencilState.enabled = true;\n    stencilState.referenceValue = 0;\n    stencilState.compareFunctionFront = CompareFunction.Equal;\n    stencilState.compareFunctionBack = CompareFunction.Equal;\n    stencilState.failOperationFront = StencilOperation.Keep;\n    stencilState.failOperationBack = StencilOperation.Keep;\n    stencilState.zFailOperationFront = StencilOperation.Keep;\n    stencilState.zFailOperationBack = StencilOperation.Keep;\n    stencilState.passOperationFront = StencilOperation.IncrementWrap;\n    stencilState.passOperationBack = StencilOperation.IncrementWrap;\n\n    const shaderData = material.shaderData;\n    shaderData.setFloat(PlanarShadowShaderFactory._shadowFalloffProp, 0);\n    shaderData.setColor(PlanarShadowShaderFactory._shadowColorProp, new Color(1.0, 1.0, 1.0, 1.0));\n    shaderData.setVector3(PlanarShadowShaderFactory._lightDirProp, new Vector3(0, 0, 0));\n    shaderData.setFloat(PlanarShadowShaderFactory._planarHeightProp, 0);\n  }\n\n  /**\n   * Set planar height.\n   */\n  static setPlanarHeight(material: Material, value: number) {\n    material.shaderData.setFloat(PlanarShadowShaderFactory._planarHeightProp, value);\n  }\n\n  /**\n   * Set light direction.\n   */\n  static setLightDirection(material: Material, value: Vector3) {\n    const lightDir = material.shaderData.getVector3(PlanarShadowShaderFactory._lightDirProp);\n    if (value !== lightDir) {\n      lightDir.copyFrom(value.normalize());\n    } else {\n      value.normalize();\n    }\n  }\n\n  /**\n   * Set shadow color\n   */\n  static setShadowColor(material: Material, value: Color) {\n    const shadowColor = material.shaderData.getColor(PlanarShadowShaderFactory._shadowColorProp);\n    if (value !== shadowColor) {\n      shadowColor.copyFrom(value);\n    }\n  }\n\n  /**\n   * Set Shadow falloff coefficient\n   */\n  static setShadowFalloff(material: Material, value: number) {\n    material.shaderData.setFloat(PlanarShadowShaderFactory._shadowFalloffProp, value);\n  }\n}\n\nconst planarShadow = new ShaderPass(\n  `\n    attribute vec4 POSITION;\n    varying vec4 color;\n\n    uniform vec3 u_lightDir;\n    uniform float u_planarHeight;\n    uniform vec4 u_planarShadowColor;\n    uniform float u_planarShadowFalloff;\n\n    uniform mat4 renderer_ModelMat;\n    uniform mat4 camera_VPMat;\n\n    #ifdef RENDERER_HAS_SKIN\n      attribute vec4 JOINTS_0;\n      attribute vec4 WEIGHTS_0;\n\n      #ifdef RENDERER_USE_JOINT_TEXTURE\n        uniform sampler2D renderer_JointSampler;\n        uniform float renderer_JointCount;\n        mat4 getJointMatrix(sampler2D smp, float index) {\n            float base = index / renderer_JointCount;\n            float hf = 0.5 / renderer_JointCount;\n            float v = base + hf;\n\n            vec4 m0 = texture2D(smp, vec2(0.125, v ));\n            vec4 m1 = texture2D(smp, vec2(0.375, v ));\n            vec4 m2 = texture2D(smp, vec2(0.625, v ));\n            vec4 m3 = texture2D(smp, vec2(0.875, v ));\n\n            return mat4(m0, m1, m2, m3);\n        }\n      #else\n          uniform mat4 renderer_JointMatrix[ RENDERER_JOINTS_NUM ];\n      #endif\n    #endif\n\n    vec3 ShadowProjectPos(vec4 vertPos) {\n      vec3 shadowPos;\n\n      // get the world space coordinates of the vertex\n      vec3 worldPos = (renderer_ModelMat * vertPos).xyz;\n      \n      // world space coordinates of the shadow (the part below the ground is unchanged)\n      shadowPos.y = min(worldPos.y , u_planarHeight);\n      shadowPos.xz = worldPos.xz - u_lightDir.xz * max(0.0, worldPos.y - u_planarHeight) / u_lightDir.y;\n\n      return shadowPos;\n    }\n\n    void main() {\n     vec4 position = vec4(POSITION.xyz, 1.0 );\n      #ifdef RENDERER_HAS_SKIN\n          #ifdef RENDERER_USE_JOINT_TEXTURE\n              mat4 skinMatrix =\n                  WEIGHTS_0.x * getJointMatrix(renderer_JointSampler, JOINTS_0.x ) +\n                  WEIGHTS_0.y * getJointMatrix(renderer_JointSampler, JOINTS_0.y ) +\n                  WEIGHTS_0.z * getJointMatrix(renderer_JointSampler, JOINTS_0.z ) +\n                  WEIGHTS_0.w * getJointMatrix(renderer_JointSampler, JOINTS_0.w );\n          #else\n              mat4 skinMatrix =\n                  WEIGHTS_0.x * renderer_JointMatrix[ int( JOINTS_0.x ) ] +\n                  WEIGHTS_0.y * renderer_JointMatrix[ int( JOINTS_0.y ) ] +\n                  WEIGHTS_0.z * renderer_JointMatrix[ int( JOINTS_0.z ) ] +\n                  WEIGHTS_0.w * renderer_JointMatrix[ int( JOINTS_0.w ) ];\n          #endif\n          position = skinMatrix * position;\n      #endif\n\n      // get the shadow's world space coordinates\n      vec3 shadowPos = ShadowProjectPos(position);\n\n      // convert to clip space\n      gl_Position = camera_VPMat * vec4(shadowPos, 1.0);\n\n      // get the world coordinates of the center point\n      vec3 center = vec3(renderer_ModelMat[3].x, u_planarHeight, renderer_ModelMat[3].z);\n      // calculate shadow falloff\n      float falloff = 0.5 - clamp(distance(shadowPos , center) * u_planarShadowFalloff, 0.0, 1.0);\n\n      // shadow color\n      color = u_planarShadowColor;\n      color.a *= falloff;\n    }\n    `,\n  `\n    varying vec4 color;\n    void main() {\n       gl_FragColor = color;\n    }\n    `\n);\nShader.create(\"planarShadowShader\", [Shader.find(\"pbr\").subShaders[0].passes[0], planarShadow]);\n"],"names":["PlanarShadowShaderFactory","replaceShader","material","shader","Shader","find","shadowRenderState","renderStates","renderQueueType","RenderQueueType","Transparent","depthState","writeEnabled","targetBlendState","blendState","enabled","sourceColorBlendFactor","BlendFactor","SourceAlpha","destinationColorBlendFactor","OneMinusSourceAlpha","sourceAlphaBlendFactor","One","destinationAlphaBlendFactor","stencilState","referenceValue","compareFunctionFront","CompareFunction","Equal","compareFunctionBack","failOperationFront","StencilOperation","Keep","failOperationBack","zFailOperationFront","zFailOperationBack","passOperationFront","IncrementWrap","passOperationBack","shaderData","setFloat","_shadowFalloffProp","setColor","_shadowColorProp","Color","setVector3","_lightDirProp","Vector3","_planarHeightProp","setPlanarHeight","value","setLightDirection","lightDir","getVector3","copyFrom","normalize","setShadowColor","shadowColor","getColor","setShadowFalloff","ShaderProperty","getByName","planarShadow","ShaderPass","create","subShaders","passes"],"mappings":";;AAaO,IAAA,yBAAMA,iBAAD,WAAL;AAAMA,IAAAA,SAAAA,yBAAAA,GAAAA,EAAAA;AAMX;;;AAGC,MACD,yBAAOC,CAAAA,aAgCN,GAhCD,SAAOA,cAAcC,QAAkB,EAAA;AACrCA,QAAAA,QAAAA,CAASC,MAAM,GAAGC,MAAOC,CAAAA,IAAI,CAAC,oBAAA,CAAA,CAAA;AAE9B,QAAA,IAAMC,iBAAoBJ,GAAAA,QAAAA,CAASK,YAAY,CAAC,CAAE,CAAA,CAAA;QAClDD,iBAAkBE,CAAAA,eAAe,GAAGC,eAAAA,CAAgBC,WAAW,CAAA;QAC/DJ,iBAAkBK,CAAAA,UAAU,CAACC,YAAY,GAAG,KAAA,CAAA;AAE5C,QAAA,IAAMC,gBAAmBP,GAAAA,iBAAAA,CAAkBQ,UAAU,CAACD,gBAAgB,CAAA;AACtEA,QAAAA,gBAAAA,CAAiBE,OAAO,GAAG,IAAA,CAAA;QAC3BF,gBAAiBG,CAAAA,sBAAsB,GAAGC,WAAAA,CAAYC,WAAW,CAAA;QACjEL,gBAAiBM,CAAAA,2BAA2B,GAAGF,WAAAA,CAAYG,mBAAmB,CAAA;QAC9EP,gBAAiBQ,CAAAA,sBAAsB,GAAGJ,WAAAA,CAAYK,GAAG,CAAA;QACzDT,gBAAiBU,CAAAA,2BAA2B,GAAGN,WAAAA,CAAYG,mBAAmB,CAAA;;QAG9E,IAAMI,YAAAA,GAAelB,kBAAkBkB,YAAY,CAAA;AACnDA,QAAAA,YAAAA,CAAaT,OAAO,GAAG,IAAA,CAAA;AACvBS,QAAAA,YAAAA,CAAaC,cAAc,GAAG,CAAA,CAAA;QAC9BD,YAAaE,CAAAA,oBAAoB,GAAGC,eAAAA,CAAgBC,KAAK,CAAA;QACzDJ,YAAaK,CAAAA,mBAAmB,GAAGF,eAAAA,CAAgBC,KAAK,CAAA;QACxDJ,YAAaM,CAAAA,kBAAkB,GAAGC,gBAAAA,CAAiBC,IAAI,CAAA;QACvDR,YAAaS,CAAAA,iBAAiB,GAAGF,gBAAAA,CAAiBC,IAAI,CAAA;QACtDR,YAAaU,CAAAA,mBAAmB,GAAGH,gBAAAA,CAAiBC,IAAI,CAAA;QACxDR,YAAaW,CAAAA,kBAAkB,GAAGJ,gBAAAA,CAAiBC,IAAI,CAAA;QACvDR,YAAaY,CAAAA,kBAAkB,GAAGL,gBAAAA,CAAiBM,aAAa,CAAA;QAChEb,YAAac,CAAAA,iBAAiB,GAAGP,gBAAAA,CAAiBM,aAAa,CAAA;QAE/D,IAAME,UAAAA,GAAarC,SAASqC,UAAU,CAAA;AACtCA,QAAAA,UAAAA,CAAWC,QAAQ,CAACxC,yBAtCXA,CAsCqCyC,kBAAkB,EAAE,CAAA,CAAA,CAAA;QAClEF,UAAWG,CAAAA,QAAQ,CAvCV1C,yBAuCqC2C,CAAAA,gBAAgB,EAAE,IAAIC,KAAAA,CAAM,GAAK,EAAA,GAAA,EAAK,GAAK,EAAA,GAAA,CAAA,CAAA,CAAA;QACzFL,UAAWM,CAAAA,UAAU,CAAC7C,yBAxCbA,CAwCuC8C,aAAa,EAAE,IAAIC,OAAQ,CAAA,CAAA,EAAG,CAAG,EAAA,CAAA,CAAA,CAAA,CAAA;AACjFR,QAAAA,UAAAA,CAAWC,QAAQ,CAACxC,yBAzCXA,CAyCqCgD,iBAAiB,EAAE,CAAA,CAAA,CAAA;AACnE,KAAA,CAAA;AAEA;;MA5CWhD,0BA+CJiD,eAEN,GAFD,SAAOA,eAAgB/C,CAAAA,QAAkB,EAAEgD,KAAa,EAAA;AACtDhD,QAAAA,QAAAA,CAASqC,UAAU,CAACC,QAAQ,CAACxC,yBAhDpBA,CAgD8CgD,iBAAiB,EAAEE,KAAAA,CAAAA,CAAAA;AAC5E,KAAA,CAAA;AAEA;;MAnDWlD,0BAsDJmD,iBAON,GAPD,SAAOA,iBAAkBjD,CAAAA,QAAkB,EAAEgD,KAAc,EAAA;QACzD,IAAME,QAAAA,GAAWlD,SAASqC,UAAU,CAACc,UAAU,CAvDtCrD,0BAuDiE8C,aAAa,CAAA,CAAA;AACvF,QAAA,IAAII,UAAUE,QAAU,EAAA;YACtBA,QAASE,CAAAA,QAAQ,CAACJ,KAAAA,CAAMK,SAAS,EAAA,CAAA,CAAA;SAC5B,MAAA;AACLL,YAAAA,KAAAA,CAAMK,SAAS,EAAA,CAAA;AACjB,SAAA;AACF,KAAA,CAAA;AAEA;;MA/DWvD,0BAkEJwD,cAKN,GALD,SAAOA,cAAetD,CAAAA,QAAkB,EAAEgD,KAAY,EAAA;QACpD,IAAMO,WAAAA,GAAcvD,SAASqC,UAAU,CAACmB,QAAQ,CAnEvC1D,0BAmEkE2C,gBAAgB,CAAA,CAAA;AAC3F,QAAA,IAAIO,UAAUO,WAAa,EAAA;AACzBA,YAAAA,WAAAA,CAAYH,QAAQ,CAACJ,KAAAA,CAAAA,CAAAA;AACvB,SAAA;AACF,KAAA,CAAA;AAEA;;MAzEWlD,0BA4EJ2D,gBAEN,GAFD,SAAOA,gBAAiBzD,CAAAA,QAAkB,EAAEgD,KAAa,EAAA;AACvDhD,QAAAA,QAAAA,CAASqC,UAAU,CAACC,QAAQ,CAACxC,yBA7EpBA,CA6E8CyC,kBAAkB,EAAES,KAAAA,CAAAA,CAAAA;AAC7E,KAAA,CAAA;AA9EWlD,IAAAA,OAAAA,yBAAAA,CAAAA;AA+EZ,CAAA,GAAA;AA/EYA,yBACI8C,CAAAA,aAAAA,GAAgBc,cAAeC,CAAAA,SAAS,CAAC,YAAA,CAAA,CAAA;AAD7C7D,yBAEIgD,CAAAA,iBAAAA,GAAoBY,cAAeC,CAAAA,SAAS,CAAC,gBAAA,CAAA,CAAA;AAFjD7D,yBAGI2C,CAAAA,gBAAAA,GAAmBiB,cAAeC,CAAAA,SAAS,CAAC,qBAAA,CAAA,CAAA;AAHhD7D,yBAIIyC,CAAAA,kBAAAA,GAAqBmB,cAAeC,CAAAA,SAAS,CAAC,uBAAA,CAAA,CAAA;AA6E/D,IAAMC,YAAAA,GAAe,IAAIC,UAAAA,CACtB,wiGAoFA,EAAA,yFAAA,CAAA,CAAA;AAOH3D,MAAO4D,CAAAA,MAAM,CAAC,oBAAsB,EAAA;IAAC5D,MAAOC,CAAAA,IAAI,CAAC,KAAO4D,CAAAA,CAAAA,UAAU,CAAC,CAAE,CAAA,CAACC,MAAM,CAAC,CAAE,CAAA;AAAEJ,IAAAA,YAAAA;AAAa,CAAA,CAAA;;;;"}