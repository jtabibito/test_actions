import { _ as _create_class } from '../_create_class-8d4b456b.js';
import { _ as _inherits } from '../_inherits-5a51c3d0.js';
import { MeshRenderer, MathUtil, Script } from '@galacean/engine';
import { GridMaterial } from './GridMaterial.js';
import { GridMesh } from './GridMesh.js';

/**
 * Grid Control
 */ var GridControl = /*#__PURE__*/ function(Script) {
    _inherits(GridControl, Script);
    function GridControl() {
        var _this;
        _this = Script.apply(this, arguments) || this;
        _this._progress = 0;
        _this._is2DGrid = false;
        _this._flipGrid = false;
        /**
   * Flip speed
   */ _this.speed = 10.0;
        /**
   * Camera
   */ _this.camera = null;
        /**
   * target distance
   */ _this.distance = 8;
        return _this;
    }
    var _proto = GridControl.prototype;
    _proto.onAwake = function onAwake() {
        var _this = this, engine = _this.engine, entity = _this.entity;
        var gridRenderer = entity.addComponent(MeshRenderer);
        gridRenderer.receiveShadows = false;
        gridRenderer.castShadows = false;
        gridRenderer.mesh = GridMesh.createGridPlane(engine);
        this._material = new GridMaterial(engine);
        gridRenderer.setMaterial(this._material);
    };
    _proto.onUpdate = function onUpdate(deltaTime) {
        var _this = this, material = _this._material, camera = _this.camera;
        if (camera === null) return;
        material.nearClipPlane = camera.nearClipPlane;
        material.farClipPlane = camera.farClipPlane;
        var logDistance = Math.log2(this.distance);
        var upperDistance = Math.pow(2, Math.floor(logDistance) + 1);
        var lowerDistance = Math.pow(2, Math.floor(logDistance));
        material.fade = (this.distance - lowerDistance) / (upperDistance - lowerDistance);
        var level = -Math.floor(logDistance);
        material.primaryScale = Math.pow(2, level);
        material.secondaryScale = Math.pow(2, level + 1);
        material.axisIntensity = 0.3 / material.primaryScale;
        if (this._flipGrid) {
            this._progress += deltaTime;
            var percent = MathUtil.clamp(this._progress * this.speed, 0, 1);
            if (percent >= 1) {
                this._flipGrid = false;
            }
            if (!this._is2DGrid) {
                percent = 1 - percent;
            }
            material.flipProgress = percent;
        }
    };
    _create_class(GridControl, [
        {
            key: "material",
            get: /**
   * Grid Material.
   */ function get() {
                return this._material;
            }
        },
        {
            key: "is2DGrid",
            get: /**
   * Is 2D Grid.
   */ function get() {
                return this._is2DGrid;
            },
            set: function set(value) {
                this._is2DGrid = value;
                this._progress = 0;
                this._flipGrid = true;
            }
        }
    ]);
    return GridControl;
}(Script);

export { GridControl };
//# sourceMappingURL=GridControl.js.map
