{"version":3,"file":"BakePBRMaterial.js","sources":["../../../src/bake-pbr/BakePBRMaterial.ts"],"sourcesContent":["import { Engine, PBRMaterial, Shader, ShaderProperty, Texture2D } from \"@galacean/engine\";\nimport fragment from \"./fragment\";\nimport vertex from \"./vertex\";\n\nShader.create(\"bake-pbr\", vertex, fragment);\n\n/**\n * Bake PBR Material.\n */\nexport class BakePBRMaterial extends PBRMaterial {\n  private static _lightMapTextureProp = ShaderProperty.getByName(\"u_lightMapTexture\");\n  private static _lightMapIntensityProp = ShaderProperty.getByName(\"u_lightMapIntensity\");\n\n  /**\n   * Light map texture.\n   */\n  get lightmapTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(BakePBRMaterial._lightMapTextureProp);\n  }\n\n  set lightmapTexture(value: Texture2D) {\n    this.shaderData.setTexture(BakePBRMaterial._lightMapTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"LIGHTMAP_TEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"LIGHTMAP_TEXTURE\");\n    }\n  }\n\n  /**\n   * Light map intensity, default 1.0.\n   */\n  get lightmapIntensity(): number {\n    return this.shaderData.getFloat(BakePBRMaterial._lightMapIntensityProp);\n  }\n\n  set lightmapIntensity(value: number) {\n    this.shaderData.setFloat(BakePBRMaterial._lightMapIntensityProp, value);\n  }\n\n  /**\n   * Create a pbr metallic-roughness workflow material instance.\n   * @param engine - Engine to which the material belongs\n   */\n  constructor(engine: Engine) {\n    super(engine);\n    this.shader = Shader.find(\"bake-pbr\");\n    this.shaderData.setFloat(BakePBRMaterial._lightMapIntensityProp, 1);\n  }\n\n  override clone(): BakePBRMaterial {\n    const dest = new BakePBRMaterial(this._engine);\n    this.cloneTo(dest);\n    return dest;\n  }\n}\n"],"names":["Shader","create","vertex","fragment","BakePBRMaterial","engine","shader","find","shaderData","setFloat","_lightMapIntensityProp","clone","dest","_engine","cloneTo","lightmapTexture","getTexture","_lightMapTextureProp","value","setTexture","enableMacro","disableMacro","lightmapIntensity","getFloat","PBRMaterial","ShaderProperty","getByName"],"mappings":";;;;;;AAIAA,MAAOC,CAAAA,MAAM,CAAC,UAAA,EAAYC,MAAQC,EAAAA,QAAAA,CAAAA,CAAAA;AAElC;;AAEC,IACM,IAAA,eAAMC,iBAAD,SAAL,WAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,eAAAA,EAAAA,WAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,eAAAA,CAmCCC,MAAc,EAAA;;AAClBA,QAAAA,KAAAA,GAAAA,WAAAA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,CAAAA,IAAAA,IAAAA,CAAAA;AACN,QAAA,KAAA,CAAKC,MAAM,GAAGN,MAAOO,CAAAA,IAAI,CAAC,UAAA,CAAA,CAAA;AAC1B,QAAA,KAAA,CAAKC,UAAU,CAACC,QAAQ,CAACL,eAtChBA,CAsCgCM,sBAAsB,EAAE,CAAA,CAAA,CAAA;;;AAtCxDN,IAAAA,IAAAA,MAAAA,GAAAA,eAAAA,CAAAA,SAAAA,CAAAA;IAyCX,MAASO,CAAAA,KAIR,GAJD,SAASA,KAAAA,GAAAA;AACP,QAAA,IAAMC,IAAO,GAAA,IA1CJR,eA0CwB,CAAA,IAAI,CAACS,OAAO,CAAA,CAAA;QAC7C,IAAI,CAACC,OAAO,CAACF,IAAAA,CAAAA,CAAAA;QACb,OAAOA,IAAAA,CAAAA;AACT,KAAA,CAAA;AA7CWR,IAAAA,aAAAA,CAAAA,eAAAA,EAAAA;;YAOPW,GAAAA,EAAAA,iBAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAkB,IAAI,CAACP,UAAU,CAACQ,UAAU,CARnCZ,gBAQoDa,oBAAoB,CAAA,CAAA;AACnF,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAoBC,KAAgB,EAAA;gBAClC,IAAI,CAACV,UAAU,CAACW,UAAU,CAACf,eAZlBA,CAYkCa,oBAAoB,EAAEC,KAAAA,CAAAA,CAAAA;AACjE,gBAAA,IAAIA,KAAO,EAAA;AACT,oBAAA,IAAI,CAACV,UAAU,CAACY,WAAW,CAAC,kBAAA,CAAA,CAAA;iBACvB,MAAA;AACL,oBAAA,IAAI,CAACZ,UAAU,CAACa,YAAY,CAAC,kBAAA,CAAA,CAAA;AAC/B,iBAAA;AACF,aAAA;;;YAKIC,GAAAA,EAAAA,mBAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACd,UAAU,CAACe,QAAQ,CAxBtBnB,gBAwBuCM,sBAAsB,CAAA,CAAA;AACxE,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAsBQ,KAAa,EAAA;gBACjC,IAAI,CAACV,UAAU,CAACC,QAAQ,CAACL,eA5BhBA,CA4BgCM,sBAAsB,EAAEQ,KAAAA,CAAAA,CAAAA;AACnE,aAAA;;;AA7BWd,IAAAA,OAAAA,eAAAA,CAAAA;EAAwBoB,WA8CpC,EAAA;AA9CYpB,eACIa,CAAAA,oBAAAA,GAAuBQ,cAAeC,CAAAA,SAAS,CAAC,mBAAA,CAAA,CAAA;AADpDtB,eAEIM,CAAAA,sBAAAA,GAAyBe,cAAeC,CAAAA,SAAS,CAAC,qBAAA,CAAA;;;;"}