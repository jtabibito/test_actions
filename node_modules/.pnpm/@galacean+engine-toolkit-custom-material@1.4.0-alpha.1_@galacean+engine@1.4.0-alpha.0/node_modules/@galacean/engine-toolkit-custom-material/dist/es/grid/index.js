export { GridMaterial } from './GridMaterial.js';
export { GridControl } from './GridControl.js';
import '../_create_class-8d4b456b.js';
import '../_inherits-5a51c3d0.js';
import '@galacean/engine';
import './GridMesh.js';

var Grid = "Shader \"Grid\" {\n\n  SubShader \"Default\" {\n\n    Pass \"Forward\" {\n      \n      mat4 camera_ViewInvMat;\n\n      VertexShader = vert;\n      FragmentShader = frag;\n\n      struct a2v {\n        vec3 POSITION;\n      }\n\n      struct v2f {\n        vec3 nearPoint;\n        vec3 farPoint;\n      }\n\n      vec3 UnprojectPoint(float x, float y, float z, mat4 viewInvMat, mat4 projInvMat) {\n        vec4 unprojectedPoint =  viewInvMat * projInvMat * vec4(x, y, z, 1.0);\n        return unprojectedPoint.xyz / unprojectedPoint.w;\n      }\n\n      #ifdef GRAPHICS_API_WEBGL2\n        #define INVERSE_MAT(mat) inverse(mat)\n      #else\n        mat2 inverseMat(mat2 m) {\n          return mat2(m[1][1],-m[0][1],\n              -m[1][0], m[0][0]) / (m[0][0]*m[1][1] - m[0][1]*m[1][0]);\n        }\n        mat3 inverseMat(mat3 m) {\n          float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];\n          float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];\n          float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];\n\n          float b01 = a22 * a11 - a12 * a21;\n          float b11 = -a22 * a10 + a12 * a20;\n          float b21 = a21 * a10 - a11 * a20;\n\n          float det = a00 * b01 + a01 * b11 + a02 * b21;\n\n          return mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11),\n                b11, (a22 * a00 - a02 * a20), (-a12 * a00 + a02 * a10),\n                b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10)) / det;\n        }\n        mat4 inverseMat(mat4 m) {\n          float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n            a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n            a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n            a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n            b00 = a00 * a11 - a01 * a10,\n            b01 = a00 * a12 - a02 * a10,\n            b02 = a00 * a13 - a03 * a10,\n            b03 = a01 * a12 - a02 * a11,\n            b04 = a01 * a13 - a03 * a11,\n            b05 = a02 * a13 - a03 * a12,\n            b06 = a20 * a31 - a21 * a30,\n            b07 = a20 * a32 - a22 * a30,\n            b08 = a20 * a33 - a23 * a30,\n            b09 = a21 * a32 - a22 * a31,\n            b10 = a21 * a33 - a23 * a31,\n            b11 = a22 * a33 - a23 * a32,\n\n            det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n          return mat4(\n            a11 * b11 - a12 * b10 + a13 * b09,\n            a02 * b10 - a01 * b11 - a03 * b09,\n            a31 * b05 - a32 * b04 + a33 * b03,\n            a22 * b04 - a21 * b05 - a23 * b03,\n            a12 * b08 - a10 * b11 - a13 * b07,\n            a00 * b11 - a02 * b08 + a03 * b07,\n            a32 * b02 - a30 * b05 - a33 * b01,\n            a20 * b05 - a22 * b02 + a23 * b01,\n            a10 * b10 - a11 * b08 + a13 * b06,\n            a01 * b08 - a00 * b10 - a03 * b06,\n            a30 * b04 - a31 * b02 + a33 * b00,\n            a21 * b02 - a20 * b04 - a23 * b00,\n            a11 * b07 - a10 * b09 - a12 * b06,\n            a00 * b09 - a01 * b07 + a02 * b06,\n            a31 * b01 - a30 * b03 - a32 * b00,\n            a20 * b03 - a21 * b01 + a22 * b00) / det;\n        }\n\n        #define INVERSE_MAT(mat) inverseMat(mat)\n      #endif\n\n\n      v2f vert(a2v v) {\n        v2f o;\n\n        float tol = 0.0001;\n        mat4 viewInvMat = camera_ViewInvMat;\n        if (abs(viewInvMat[3][1]) < tol) {\n            viewInvMat[3][1] = tol;\n        }\n        mat4 projInvMat = INVERSE_MAT(camera_ProjMat);\n\n        o.nearPoint = UnprojectPoint(v.POSITION.x, v.POSITION.y, -1.0, viewInvMat, projInvMat);// unprojecting on the near plane\n        o.farPoint = UnprojectPoint(v.POSITION.x, v.POSITION.y, 1.0, viewInvMat, projInvMat);// unprojecting on the far plane\n        gl_Position = vec4(v.POSITION, 1.0);// using directly the clipped coordinates\n      }\n\n      mat4 renderer_LocalMat;\n      mat4 renderer_ModelMat;\n      mat4 camera_ViewMat;\n      mat4 camera_ProjMat;\n      mat4 renderer_MVMat;\n      mat4 renderer_MVPMat;\n      mat4 renderer_NormalMat;\n\n      float u_far;\n      float u_near;\n      float u_primaryScale;\n      float u_secondaryScale;\n      float u_gridIntensity;\n      float u_axisIntensity;\n      float u_flipProgress;\n      float u_fade;\n\n      vec4 grid(vec3 fragPos3D, float scale, float fade) {\n        vec2 coord = mix(fragPos3D.xz, fragPos3D.xy, u_flipProgress) * scale;\n        vec2 derivative = fwidth(coord);\n        vec2 grid = abs(fract(coord - 0.5) - 0.5) / derivative;\n        float line = min(grid.x, grid.y);\n        float minimumz = min(derivative.y, 1.0);\n        float minimumx = min(derivative.x, 1.0);\n        vec4 color = vec4(u_gridIntensity, u_gridIntensity, u_gridIntensity, fade * (1.0 - min(line, 1.0)));\n        // z-axis\n        if (fragPos3D.x > -u_axisIntensity * minimumx && fragPos3D.x < u_axisIntensity * minimumx) {\n          color.z = 1.0;\n        }\n        // x-axis or y-axis\n        float xy = mix(fragPos3D.z, fragPos3D.y, u_flipProgress);\n        if (xy > -u_axisIntensity * minimumz && xy < u_axisIntensity * minimumz) {\n          color.x = 1.0;\n        }\n        return color;\n      }\n\n      float computeDepth(vec3 pos) {\n        vec4 clip_space_pos = camera_ProjMat * camera_ViewMat * vec4(pos.xyz, 1.0);\n        // map to 0-1\n        return (clip_space_pos.z / clip_space_pos.w) * 0.5 + 0.5;\n      }\n\n      float computeLinearDepth(vec3 pos) {\n        vec4 clip_space_pos = camera_ProjMat * camera_ViewMat * vec4(pos.xyz, 1.0);\n        float clip_space_depth = clip_space_pos.z / clip_space_pos.w;\n        float linearDepth = (2.0 * u_near * u_far) / (u_far + u_near - clip_space_depth * (u_far - u_near));\n        return linearDepth / u_far;// normalize\n      }\n\n      void frag(v2f i) {\n        float ty = -i.nearPoint.y / (i.farPoint.y - i.nearPoint.y);\n        float tz = -i.nearPoint.z / (i.farPoint.z - i.nearPoint.z);\n        float t = mix(ty, tz, u_flipProgress);\n        vec3 fragPos3D = i.nearPoint + t * (i.farPoint - i.nearPoint);\n\n        gl_FragDepth = computeDepth(fragPos3D);\n\n        float linearDepth = computeLinearDepth(fragPos3D);\n        float fading = max(0.0, (0.5 - linearDepth));\n\n        // adding multiple resolution for the grid\n        gl_FragColor = (grid(fragPos3D, u_primaryScale, u_fade) + grid(fragPos3D, u_secondaryScale, 1.0 - u_fade));\n        gl_FragColor.a *= fading;\n      }\n    }\n  }\n}";

export { Grid as GridShaderSource };
//# sourceMappingURL=index.js.map
