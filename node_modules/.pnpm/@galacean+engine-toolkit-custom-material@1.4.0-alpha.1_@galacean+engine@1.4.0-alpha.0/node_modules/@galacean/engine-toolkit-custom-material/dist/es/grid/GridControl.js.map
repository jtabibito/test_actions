{"version":3,"file":"GridControl.js","sources":["../../../src/grid/GridControl.ts"],"sourcesContent":["import { Camera, Script, MeshRenderer, MathUtil } from \"@galacean/engine\";\nimport { GridMaterial } from \"./GridMaterial\";\nimport { GridMesh } from \"./GridMesh\";\n\n/**\n * Grid Control\n */\nexport class GridControl extends Script {\n  private _material: GridMaterial;\n  private _progress: number = 0;\n  private _is2DGrid: boolean = false;\n  private _flipGrid: boolean = false;\n\n  /**\n   * Flip speed\n   */\n  speed = 10.0;\n\n  /**\n   * Camera\n   */\n  camera: Camera = null;\n\n  /**\n   * target distance\n   */\n  distance: number = 8;\n\n  /**\n   * Grid Material.\n   */\n  get material(): GridMaterial {\n    return this._material;\n  }\n\n  /**\n   * Is 2D Grid.\n   */\n  get is2DGrid(): boolean {\n    return this._is2DGrid;\n  }\n\n  set is2DGrid(value: boolean) {\n    this._is2DGrid = value;\n    this._progress = 0;\n    this._flipGrid = true;\n  }\n\n  override onAwake() {\n    const { engine, entity } = this;\n\n    const gridRenderer = entity.addComponent(MeshRenderer);\n    gridRenderer.receiveShadows = false;\n    gridRenderer.castShadows = false;\n    gridRenderer.mesh = GridMesh.createGridPlane(engine);\n    this._material = new GridMaterial(engine);\n    gridRenderer.setMaterial(this._material);\n  }\n\n  override onUpdate(deltaTime: number) {\n    const { _material: material, camera } = this;\n    if (camera === null) return;\n\n    material.nearClipPlane = camera.nearClipPlane;\n    material.farClipPlane = camera.farClipPlane;\n\n    const logDistance = Math.log2(this.distance);\n    const upperDistance = Math.pow(2, Math.floor(logDistance) + 1);\n    const lowerDistance = Math.pow(2, Math.floor(logDistance));\n    material.fade = (this.distance - lowerDistance) / (upperDistance - lowerDistance);\n\n    const level = -Math.floor(logDistance);\n    material.primaryScale = Math.pow(2, level);\n    material.secondaryScale = Math.pow(2, level + 1);\n    material.axisIntensity = 0.3 / material.primaryScale;\n\n    if (this._flipGrid) {\n      this._progress += deltaTime;\n      let percent = MathUtil.clamp(this._progress * this.speed, 0, 1);\n      if (percent >= 1) {\n        this._flipGrid = false;\n      }\n\n      if (!this._is2DGrid) {\n        percent = 1 - percent;\n      }\n      material.flipProgress = percent;\n    }\n  }\n}\n"],"names":["GridControl","_progress","_is2DGrid","_flipGrid","speed","camera","distance","onAwake","engine","entity","gridRenderer","addComponent","MeshRenderer","receiveShadows","castShadows","mesh","GridMesh","createGridPlane","_material","GridMaterial","setMaterial","onUpdate","deltaTime","material","nearClipPlane","farClipPlane","logDistance","Math","log2","upperDistance","pow","floor","lowerDistance","fade","level","primaryScale","secondaryScale","axisIntensity","percent","MathUtil","clamp","flipProgress","is2DGrid","value","Script"],"mappings":"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"}