{"version":3,"file":"PlainColorMaterial.js","sources":["../../../src/plain-color/PlainColorMaterial.ts"],"sourcesContent":["import { BaseMaterial, Color, CullMode, Engine, Shader } from \"@galacean/engine\";\n\n/**\n * plain color Material. don't effected by light and fog.\n */\nexport class PlainColorMaterial extends BaseMaterial {\n  /**\n   * Base color.\n   */\n  get baseColor(): Color {\n    return this.shaderData.getColor(PlainColorMaterial._baseColorProp);\n  }\n\n  set baseColor(value: Color) {\n    const baseColor = this.shaderData.getColor(PlainColorMaterial._baseColorProp);\n    if (value !== baseColor) {\n      baseColor.copyFrom(value);\n    }\n  }\n\n  /**\n   * Create a plain color material instance.\n   * @param engine - Engine to which the material belongs\n   */\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"plain-color\"));\n\n    const shaderData = this.shaderData;\n\n    shaderData.enableMacro(\"MATERIAL_OMIT_NORMAL\");\n\n    shaderData.setColor(PlainColorMaterial._baseColorProp, new Color(1, 1, 1, 1));\n\n    this.renderState.rasterState.cullMode = CullMode.Off;\n  }\n\n  override clone(): PlainColorMaterial {\n    const dest = new PlainColorMaterial(this._engine);\n    this.cloneTo(dest);\n    return dest;\n  }\n}\n\nShader.create(\n  \"plain-color\",\n  `\n#include <common>\n#include <common_vert>\n#include <blendShape_input>\n\nvoid main() {\n    #include <begin_position_vert>\n    #include <blendShape_vert>\n    #include <skinning_vert>\n    #include <position_vert>\n}\n`,\n\n  `\n#include <common>\n\nuniform vec4 material_BaseColor;\n\nvoid main() {\n     vec4 baseColor = material_BaseColor;\n\n    #ifdef MATERIAL_IS_ALPHA_CUTOFF\n        if( baseColor.a < material_AlphaCutoff ) {\n            discard;\n        }\n    #endif\n\n    gl_FragColor = baseColor;\n\n     #ifndef ENGINE_IS_COLORSPACE_GAMMA\n        gl_FragColor = linearToGamma(gl_FragColor);\n    #endif\n}\n`\n);\n"],"names":["PlainColorMaterial","engine","Shader","find","shaderData","enableMacro","setColor","_baseColorProp","Color","renderState","rasterState","cullMode","CullMode","Off","clone","dest","_engine","cloneTo","baseColor","getColor","value","copyFrom","BaseMaterial","create"],"mappings":";;;;AAEA;;AAEC,IACM,IAAA,kBAAMA,iBAAD,SAAL,YAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,kBAAAA,EAAAA,YAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,kBAAAA,CAmBCC,MAAc,EAAA;;wCAClBA,MAAQC,EAAAA,MAAAA,CAAOC,IAAI,CAAC,aAAA,CAAA,CAAA,IAAA,IAAA,CAAA;QAE1B,IAAMC,UAAAA,GAAa,MAAKA,UAAU,CAAA;AAElCA,QAAAA,UAAAA,CAAWC,WAAW,CAAC,sBAAA,CAAA,CAAA;QAEvBD,UAAWE,CAAAA,QAAQ,CA1BVN,kBA0B8BO,CAAAA,cAAc,EAAE,IAAIC,KAAAA,CAAM,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,CAAA,CAAA,CAAA;AAE1E,QAAA,KAAA,CAAKC,WAAW,CAACC,WAAW,CAACC,QAAQ,GAAGC,SAASC,GAAG,CAAA;;;AA5B3Cb,IAAAA,IAAAA,MAAAA,GAAAA,kBAAAA,CAAAA,SAAAA,CAAAA;IA+BX,MAASc,CAAAA,KAIR,GAJD,SAASA,KAAAA,GAAAA;AACP,QAAA,IAAMC,IAAO,GAAA,IAhCJf,kBAgC2B,CAAA,IAAI,CAACgB,OAAO,CAAA,CAAA;QAChD,IAAI,CAACC,OAAO,CAACF,IAAAA,CAAAA,CAAAA;QACb,OAAOA,IAAAA,CAAAA;AACT,KAAA,CAAA;AAnCWf,IAAAA,aAAAA,CAAAA,kBAAAA,EAAAA;;YAIPkB,GAAAA,EAAAA,WAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACd,UAAU,CAACe,QAAQ,CALtBnB,mBAK0CO,cAAc,CAAA,CAAA;AACnE,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAca,KAAY,EAAA;gBACxB,IAAMF,SAAAA,GAAY,IAAI,CAACd,UAAU,CAACe,QAAQ,CAACnB,kBATlCA,CASqDO,cAAc,CAAA,CAAA;AAC5E,gBAAA,IAAIa,UAAUF,SAAW,EAAA;AACvBA,oBAAAA,SAAAA,CAAUG,QAAQ,CAACD,KAAAA,CAAAA,CAAAA;AACrB,iBAAA;AACF,aAAA;;;AAbWpB,IAAAA,OAAAA,kBAAAA,CAAAA;EAA2BsB,YAoCvC,EAAA;AAEDpB,MAAOqB,CAAAA,MAAM,CACX,aAAA,EACC,gOAaA,EAAA,+YAAA,CAAA;;;;"}