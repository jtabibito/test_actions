import { _ as _create_class } from '../_create_class-8d4b456b.js';
import { _ as _inherits } from '../_inherits-5a51c3d0.js';
import { Shader, ShaderProperty, Vector3, Vector2, BaseMaterial } from '@galacean/engine';

var vertexSource = "\n  attribute vec3 POSITION;\n  attribute vec2 TEXCOORD_0;\n  attribute vec4 COLOR_0;\n  uniform mat4 renderer_MVPMat;\n  \n  uniform float u_time;\n  uniform vec2 u_foam_speed; \n  uniform vec2 u_distorsion_speed; \n  varying vec2 waterTexCoords;\n  varying vec2 normalTexCoords;\n  varying vec4 v_color;\n      \n  void main() {\n    gl_Position = renderer_MVPMat * vec4(POSITION, 1.0);\n    waterTexCoords = TEXCOORD_0 + vec2(u_foam_speed.x * u_time, u_foam_speed.y * u_time);\n    normalTexCoords = TEXCOORD_0 + vec2(u_distorsion_speed.x * cos(u_time), u_distorsion_speed.y * sin(u_time));\n    v_color = COLOR_0; \n  }\n  ";
var fragmentSource = "\n  #include <common>\n  varying vec4 v_color;\n  varying vec2 waterTexCoords;\n  varying vec2 normalTexCoords;\n  uniform sampler2D material_NormalTexture;\n  uniform sampler2D u_foamTex;\n  uniform vec3 u_foamColor;\n  uniform vec2 u_foam_param;\n  uniform float u_distorsion_amount;\n  void main() {  \n    vec4 normalTex = texture2D(material_NormalTexture, normalTexCoords) * 2.0 - 1.0;\n    vec4 waterTex = texture2D(u_foamTex, waterTexCoords + (normalTex.rg * u_distorsion_amount));\n    float alphaComp = v_color.r * waterTex.r * u_foam_param.x;\n    float alpha = pow(alphaComp,2.0);\n    alpha = smoothstep(0.5 - u_foam_param.y, 0.5+ u_foam_param.y, alpha);\n    alpha = saturate(alpha);\n    \n    gl_FragColor = vec4(u_foamColor.rgb, alpha);\n  }\n  ";
Shader.create("water-ripple", vertexSource, fragmentSource);
var WaterRippleMaterial = /*#__PURE__*/ function(BaseMaterial) {
    _inherits(WaterRippleMaterial, BaseMaterial);
    function WaterRippleMaterial(engine) {
        var _this;
        _this = BaseMaterial.call(this, engine, Shader.find("water-ripple")) || this;
        _this.isTransparent = true;
        var shaderData = _this.shaderData;
        shaderData.setVector3(WaterRippleMaterial._foamColor, new Vector3((69 + 255) / 400, (156 + 255) / 400, (247 + 255) / 400));
        shaderData.setVector2(WaterRippleMaterial._foamSpeed, new Vector2(-1, 0.3));
        shaderData.setVector2(WaterRippleMaterial._foamParam, new Vector2(2.0, 0.05));
        shaderData.setVector2(WaterRippleMaterial._distorsionSpeed, new Vector2(1.0, 0));
        shaderData.setFloat(WaterRippleMaterial._distorsionAmount, 0.03);
        return _this;
    }
    _create_class(WaterRippleMaterial, [
        {
            key: "foamTexture",
            get: /**
   * Foam Texture Map
   */ function get() {
                return this.shaderData.getTexture(WaterRippleMaterial._foamTextureProp);
            },
            set: function set(value) {
                this.shaderData.setTexture(WaterRippleMaterial._foamTextureProp, value);
            }
        },
        {
            key: "normalTexture",
            get: /**
   * Normal Texture Map
   */ function get() {
                return this.shaderData.getTexture(WaterRippleMaterial._normalTextureProp);
            },
            set: function set(value) {
                this.shaderData.setTexture(WaterRippleMaterial._normalTextureProp, value);
            }
        },
        {
            key: "foamColor",
            get: /**
   * Foam Color
   */ function get() {
                return this.shaderData.getVector3(WaterRippleMaterial._foamColor);
            },
            set: function set(val) {
                this.shaderData.setVector3(WaterRippleMaterial._foamColor, val);
            }
        },
        {
            key: "foamSpeed",
            get: /**
   * Foam speed on x direction and y direction
   * foam speed y, foam amount, foam smoothness
   */ function get() {
                return this.shaderData.getVector2(WaterRippleMaterial._foamSpeed);
            },
            set: function set(val) {
                this.shaderData.setVector2(WaterRippleMaterial._foamSpeed, val);
            }
        },
        {
            key: "foamParam",
            get: /**
   * Foam Param;
   * x for foam amount
   * y for foam smoothness, must between 0 ~ 0.5;
   */ function get() {
                return this.shaderData.getVector2(WaterRippleMaterial._foamParam);
            },
            set: function set(val) {
                this.shaderData.setVector2(WaterRippleMaterial._foamParam, val);
            }
        },
        {
            key: "distorsionSpeed",
            get: /**
   * Distorsion Speed on x direction and y direction
   */ function get() {
                return this.shaderData.getVector2(WaterRippleMaterial._distorsionSpeed);
            },
            set: function set(val) {
                this.shaderData.setVector2(WaterRippleMaterial._distorsionSpeed, val);
            }
        },
        {
            key: "distorsionAmount",
            get: /**
   * Distorsion Amount, must between -1 ~ 1
   */ function get() {
                return this.shaderData.getFloat(WaterRippleMaterial._distorsionAmount);
            },
            set: function set(val) {
                this.shaderData.setFloat(WaterRippleMaterial._distorsionAmount, val);
            }
        }
    ]);
    return WaterRippleMaterial;
}(BaseMaterial);
WaterRippleMaterial._foamColor = ShaderProperty.getByName("u_foamColor");
WaterRippleMaterial._foamSpeed = ShaderProperty.getByName("u_foam_speed");
WaterRippleMaterial._foamParam = ShaderProperty.getByName("u_foam_param");
WaterRippleMaterial._distorsionSpeed = ShaderProperty.getByName("u_distorsion_speed");
WaterRippleMaterial._distorsionAmount = ShaderProperty.getByName("u_distorsion_amount");
WaterRippleMaterial._foamTextureProp = ShaderProperty.getByName("u_foamTex");

export { WaterRippleMaterial };
//# sourceMappingURL=WaterRippleMaterial.js.map
