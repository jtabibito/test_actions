import { _ as _create_class } from '../_create_class-8d4b456b.js';
import { _ as _inherits } from '../_inherits-5a51c3d0.js';
import { Shader, Color, CullMode, BaseMaterial } from '@galacean/engine';

/**
 * plain color Material. don't effected by light and fog.
 */ var PlainColorMaterial = /*#__PURE__*/ function(BaseMaterial) {
    _inherits(PlainColorMaterial, BaseMaterial);
    function PlainColorMaterial(engine) {
        var _this;
        _this = BaseMaterial.call(this, engine, Shader.find("plain-color")) || this;
        var shaderData = _this.shaderData;
        shaderData.enableMacro("MATERIAL_OMIT_NORMAL");
        shaderData.setColor(PlainColorMaterial._baseColorProp, new Color(1, 1, 1, 1));
        _this.renderState.rasterState.cullMode = CullMode.Off;
        return _this;
    }
    var _proto = PlainColorMaterial.prototype;
    _proto.clone = function clone() {
        var dest = new PlainColorMaterial(this._engine);
        this.cloneTo(dest);
        return dest;
    };
    _create_class(PlainColorMaterial, [
        {
            key: "baseColor",
            get: /**
   * Base color.
   */ function get() {
                return this.shaderData.getColor(PlainColorMaterial._baseColorProp);
            },
            set: function set(value) {
                var baseColor = this.shaderData.getColor(PlainColorMaterial._baseColorProp);
                if (value !== baseColor) {
                    baseColor.copyFrom(value);
                }
            }
        }
    ]);
    return PlainColorMaterial;
}(BaseMaterial);
Shader.create("plain-color", "\n#include <common>\n#include <common_vert>\n#include <blendShape_input>\n\nvoid main() {\n    #include <begin_position_vert>\n    #include <blendShape_vert>\n    #include <skinning_vert>\n    #include <position_vert>\n}\n", "\n#include <common>\n\nuniform vec4 material_BaseColor;\n\nvoid main() {\n     vec4 baseColor = material_BaseColor;\n\n    #ifdef MATERIAL_IS_ALPHA_CUTOFF\n        if( baseColor.a < material_AlphaCutoff ) {\n            discard;\n        }\n    #endif\n\n    gl_FragColor = baseColor;\n\n     #ifndef ENGINE_IS_COLORSPACE_GAMMA\n        gl_FragColor = linearToGamma(gl_FragColor);\n    #endif\n}\n");

export { PlainColorMaterial };
//# sourceMappingURL=PlainColorMaterial.js.map
