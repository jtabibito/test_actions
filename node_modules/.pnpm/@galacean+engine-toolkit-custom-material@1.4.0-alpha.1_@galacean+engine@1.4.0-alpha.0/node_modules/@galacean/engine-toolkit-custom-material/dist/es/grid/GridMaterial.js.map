{"version":3,"file":"GridMaterial.js","sources":["../../../src/grid/GridMaterial.ts"],"sourcesContent":["import { BaseMaterial, Engine, MathUtil, Shader, ShaderProperty } from \"@galacean/engine\";\n\n/**\n * Grid Material.\n */\nexport class GridMaterial extends BaseMaterial {\n  private static _farClipProperty = ShaderProperty.getByName(\"u_far\");\n  private static _nearClipProperty = ShaderProperty.getByName(\"u_near\");\n  private static _primaryScaleProperty = ShaderProperty.getByName(\"u_primaryScale\");\n  private static _secondaryScaleProperty = ShaderProperty.getByName(\"u_secondaryScale\");\n  private static _gridIntensityProperty = ShaderProperty.getByName(\"u_gridIntensity\");\n  private static _axisIntensityProperty = ShaderProperty.getByName(\"u_axisIntensity\");\n  private static _flipProgressProperty = ShaderProperty.getByName(\"u_flipProgress\");\n  private static _fadeProperty = ShaderProperty.getByName(\"u_fade\");\n\n  /**\n   * Near clip plane - the closest point to the camera when rendering occurs.\n   */\n  get nearClipPlane(): number {\n    return this.shaderData.getFloat(GridMaterial._nearClipProperty);\n  }\n\n  set nearClipPlane(value: number) {\n    this.shaderData.setFloat(GridMaterial._nearClipProperty, value);\n  }\n\n  /**\n   * Far clip plane - the furthest point to the camera when rendering occurs.\n   */\n  get farClipPlane(): number {\n    return this.shaderData.getFloat(GridMaterial._farClipProperty);\n  }\n\n  set farClipPlane(value: number) {\n    this.shaderData.setFloat(GridMaterial._farClipProperty, value);\n  }\n\n  /**\n   * Primary scale of grid size.\n   */\n  get primaryScale(): number {\n    return this.shaderData.getFloat(GridMaterial._primaryScaleProperty);\n  }\n\n  set primaryScale(value: number) {\n    this.shaderData.setFloat(GridMaterial._primaryScaleProperty, value);\n  }\n\n  /**\n   * Secondary scale of grid size.\n   */\n  get secondaryScale(): number {\n    return this.shaderData.getFloat(GridMaterial._secondaryScaleProperty);\n  }\n\n  set secondaryScale(value: number) {\n    this.shaderData.setFloat(GridMaterial._secondaryScaleProperty, value);\n  }\n\n  /**\n   * Grid color intensity.\n   */\n  get gridIntensity(): number {\n    return this.shaderData.getFloat(GridMaterial._gridIntensityProperty);\n  }\n\n  set gridIntensity(value: number) {\n    this.shaderData.setFloat(GridMaterial._gridIntensityProperty, value);\n  }\n\n  /**\n   * Axis color intensity.\n   */\n  get axisIntensity(): number {\n    return this.shaderData.getFloat(GridMaterial._axisIntensityProperty);\n  }\n\n  set axisIntensity(value: number) {\n    this.shaderData.setFloat(GridMaterial._axisIntensityProperty, value);\n  }\n\n  /**\n   * 2D-3D flip progress.\n   */\n  get flipProgress(): number {\n    return this.shaderData.getFloat(GridMaterial._flipProgressProperty);\n  }\n\n  set flipProgress(value: number) {\n    this.shaderData.setFloat(GridMaterial._flipProgressProperty, MathUtil.clamp(value, 0, 1));\n  }\n\n  /**\n   * fade parameter.\n   */\n  get fade(): number {\n    return this.shaderData.getFloat(GridMaterial._fadeProperty);\n  }\n\n  set fade(value: number) {\n    this.shaderData.setFloat(GridMaterial._fadeProperty, MathUtil.clamp(value, 0, 1));\n  }\n\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"grid\"));\n    this.isTransparent = true;\n\n    const shaderData = this.shaderData;\n    shaderData.setFloat(GridMaterial._nearClipProperty, 0.1);\n    shaderData.setFloat(GridMaterial._farClipProperty, 100);\n    shaderData.setFloat(GridMaterial._primaryScaleProperty, 10);\n    shaderData.setFloat(GridMaterial._secondaryScaleProperty, 1);\n    shaderData.setFloat(GridMaterial._gridIntensityProperty, 0.2);\n    shaderData.setFloat(GridMaterial._axisIntensityProperty, 0.1);\n    shaderData.setFloat(GridMaterial._flipProgressProperty, 0.0);\n    shaderData.setFloat(GridMaterial._fadeProperty, 0.0);\n  }\n}\n\nShader.create(\n  \"grid\",\n  `\n#include <common>\n\nattribute vec4 POSITION_FLIP;\n\nuniform mat4 camera_ViewInvMat;\nuniform mat4 camera_ProjMat;\nuniform vec4 camera_ProjectionParams;\n\nvarying vec3 nearPoint;\nvarying vec3 farPoint;\n\n\nvec3 UnprojectPoint(float x, float y, float z, mat4 viewInvMat, mat4 projInvMat) {\n    vec4 unprojectedPoint =  viewInvMat * projInvMat * vec4(x, y, z, 1.0);\n    return unprojectedPoint.xyz / unprojectedPoint.w;\n}\n\n\nvoid main() {\n    float tol = 0.0001;\n    mat4 viewInvMat = camera_ViewInvMat;\n    if (abs(viewInvMat[3][1]) < tol) {\n        viewInvMat[3][1] = tol;\n    }\n    mat4 projInvMat = INVERSE_MAT(camera_ProjMat);\n\n    bool flipY = camera_ProjectionParams.x < 0.0;\n    float x = flipY? POSITION_FLIP.z : POSITION_FLIP.x;\n    float y = flipY? POSITION_FLIP.w : POSITION_FLIP.y;\n\n    nearPoint = UnprojectPoint(x, y, -1.0, viewInvMat, projInvMat);// unprojecting on the near plane\n    farPoint = UnprojectPoint(x, y, 1.0, viewInvMat, projInvMat);// unprojecting on the far plane\n    gl_Position = vec4(x, y, 0.0, 1.0);// using directly the clipped coordinates\n}`,\n\n  `\n#include <transform_declare>\n\nuniform float u_far;\nuniform float u_near;\nuniform float u_primaryScale;\nuniform float u_secondaryScale;\nuniform float u_gridIntensity;\nuniform float u_axisIntensity;\nuniform float u_flipProgress;\nuniform float u_fade;\n\nvarying vec3 nearPoint;\nvarying vec3 farPoint;\n  \nvec4 grid(vec3 fragPos3D, float scale, float fade) {\n    vec2 coord = mix(fragPos3D.xz, fragPos3D.xy, u_flipProgress) * scale;\n    vec2 derivative = fwidth(coord);\n    vec2 grid = abs(fract(coord - 0.5) - 0.5) / derivative;\n    float line = min(grid.x, grid.y);\n    float minimumz = min(derivative.y, 1.0);\n    float minimumx = min(derivative.x, 1.0);\n    vec4 color = vec4(u_gridIntensity, u_gridIntensity, u_gridIntensity, fade * (1.0 - min(line, 1.0)));\n    // z-axis\n    if (fragPos3D.x > -u_axisIntensity * minimumx && fragPos3D.x < u_axisIntensity * minimumx)\n        color.z = 1.0;\n    // x-axis or y-axis\n    float xy = mix(fragPos3D.z, fragPos3D.y, u_flipProgress);\n    if (xy > -u_axisIntensity * minimumz && xy < u_axisIntensity * minimumz)\n        color.x = 1.0;\n    return color;\n}\n\nfloat computeDepth(vec3 pos) {\n    vec4 clip_space_pos = camera_ProjMat * camera_ViewMat * vec4(pos.xyz, 1.0);\n    // map to 0-1\n    return (clip_space_pos.z / clip_space_pos.w) * 0.5 + 0.5;\n}\n\nfloat computeLinearDepth(vec3 pos) {\n    vec4 clip_space_pos = camera_ProjMat * camera_ViewMat * vec4(pos.xyz, 1.0);\n    float clip_space_depth = clip_space_pos.z / clip_space_pos.w;\n    float linearDepth = (2.0 * u_near * u_far) / (u_far + u_near - clip_space_depth * (u_far - u_near));\n    return linearDepth / u_far;// normalize\n}\n\nvoid main() {\n    float ty = -nearPoint.y / (farPoint.y - nearPoint.y);\n    float tz = -nearPoint.z / (farPoint.z - nearPoint.z);\n    float t = mix(ty, tz, u_flipProgress);\n    vec3 fragPos3D = nearPoint + t * (farPoint - nearPoint);\n\n    gl_FragDepth = computeDepth(fragPos3D);\n\n    float linearDepth = computeLinearDepth(fragPos3D);\n    float fading = max(0.0, (0.5 - linearDepth));\n\n    // adding multiple resolution for the grid\n    gl_FragColor = (grid(fragPos3D, u_primaryScale, u_fade) + grid(fragPos3D, u_secondaryScale, 1.0 - u_fade));\n    gl_FragColor.a *= fading;\n}\n`\n);\n"],"names":["GridMaterial","engine","Shader","find","isTransparent","shaderData","setFloat","_nearClipProperty","_farClipProperty","_primaryScaleProperty","_secondaryScaleProperty","_gridIntensityProperty","_axisIntensityProperty","_flipProgressProperty","_fadeProperty","nearClipPlane","getFloat","value","farClipPlane","primaryScale","secondaryScale","gridIntensity","axisIntensity","flipProgress","MathUtil","clamp","fade","BaseMaterial","ShaderProperty","getByName","create"],"mappings":"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"}