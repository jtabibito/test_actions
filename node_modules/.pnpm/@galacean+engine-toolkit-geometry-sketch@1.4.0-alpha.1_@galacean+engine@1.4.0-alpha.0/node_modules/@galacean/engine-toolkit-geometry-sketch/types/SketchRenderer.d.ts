import { Entity, Matrix, ModelMesh, SkinnedMeshRenderer } from "@galacean/engine";
import { SketchMode } from "./SketchMode";
import { BiTangentMaterial, NormalMaterial, TangentMaterial, WireframeMaterial } from "./material";
/**
 * Sketch Renderer
 */
export declare class SketchRenderer extends SkinnedMeshRenderer {
    private static _weightMacro;
    private static _jointMacro;
    private static _MAX_TEXTURE_ROWS;
    private static _jointIndexBegin;
    private static _verticesSamplerProp;
    private static _verticesTextureHeightProp;
    private static _verticesTextureWidthProp;
    private static _indicesSamplerProp;
    private static _indicesTextureHeightProp;
    private static _indicesTextureWidthProp;
    private static _lineScaleProp;
    private static _worldMatrixProp;
    private static _worldNormalProp;
    private _worldNormalMatrix;
    private _worldMatrix;
    private _targetMesh;
    private _verticesTexture;
    private _indicesTexture;
    private _showState;
    private readonly _wireframeMaterial;
    private readonly _normalMaterial;
    private readonly _tangentMaterial;
    private readonly _biTangentMaterial;
    private readonly _triangleSubMesh;
    private readonly _lineSubMesh;
    /**
     * Line scale
     */
    get scale(): number;
    set scale(value: number);
    /**
     * World matrix
     */
    set worldMatrix(value: Matrix);
    /**
     * Target mesh
     */
    set targetMesh(value: ModelMesh);
    /**
     * Material for wireframe shading
     */
    get wireframeMaterial(): WireframeMaterial;
    /**
     * Material for normal shading
     */
    get normalMaterial(): NormalMaterial;
    /**
     * Material for tangent shading
     */
    get tangentMaterial(): TangentMaterial;
    /**
     * Material for biTangent shading
     */
    get biTangentMaterial(): BiTangentMaterial;
    constructor(entity: Entity);
    /**
     * Set sketch mode
     * @param mode - The sketch mode
     * @param isShow - whether show the sketch
     */
    setSketchMode(mode: SketchMode, isShow: boolean): void;
    clear(): void;
    update(deltaTime: number): void;
    private _uploadIndicesBuffer;
    private _uploadVerticesBuffer;
    private _createVerticesTexture;
    private _updateMeshElement;
    private _updateLineSubMesh;
    private _updateTriangleSubMesh;
    private _destroy;
}
