export declare const geometryTextureDefine = "\n   uniform sampler2D u_verticesSampler;\n   uniform float u_verticesTextureWidth;\n   uniform float u_verticesTextureHeight;\n   \n   uniform sampler2D u_indicesSampler;\n   uniform float u_indicesTextureWidth;\n   uniform float u_indicesTextureHeight;\n   \n   vec4 getVertexElement(float row, float col) {\n        return texture2D(u_verticesSampler, vec2((col + 0.5) / u_verticesTextureWidth, (row + 0.5) / u_verticesTextureHeight));\n   }\n   \n   vec3 getIndicesElement(float row, float col) {\n        return texture2D(u_indicesSampler, vec2((col + 0.5) / u_indicesTextureWidth, (row + 0.5) / u_indicesTextureHeight )).xyz;\n   }\n   \n   vec2 getVec2(inout vec4[ELEMENT_COUNT] rows, inout int row_index, inout int value_index) {\n        row_index += (value_index+1)/4;\n        value_index = (value_index+1)%4;\n        float x = rows[row_index][value_index];\n        \n        row_index += (value_index+1)/4;\n        value_index = (value_index+1)%4;\n        float y = rows[row_index][value_index];\n        \n        return vec2(x, y);\n   }\n   \n   vec3 getVec3(inout vec4[ELEMENT_COUNT] rows, inout int row_index, inout int value_index) {\n        row_index += (value_index+1)/4;\n        value_index = (value_index+1)%4;\n        float x = rows[row_index][value_index];\n        \n        row_index += (value_index+1)/4;\n        value_index = (value_index+1)%4;\n        float y = rows[row_index][value_index];\n        \n        row_index += (value_index+1)/4;\n        value_index = (value_index+1)%4;\n        float z = rows[row_index][value_index];\n        return vec3(x, y, z);\n   }\n   \n   vec4 getVec4(inout vec4[ELEMENT_COUNT] rows, inout int row_index, inout int value_index) {\n        row_index += (value_index+1)/4;\n        value_index = (value_index+1)%4;\n        float x = rows[row_index][value_index];\n        \n        row_index += (value_index+1)/4;\n        value_index = (value_index+1)%4;\n        float y = rows[row_index][value_index];\n        \n        row_index += (value_index+1)/4;\n        value_index = (value_index+1)%4;\n        float z = rows[row_index][value_index];\n        \n        row_index += (value_index+1)/4;\n        value_index = (value_index+1)%4;\n        float w = rows[row_index][value_index];\n        return vec4(x, y, z, w);\n   }\n";
export declare const geometryTextureVert = "\n        int row = pointIndex * ELEMENT_COUNT / int(u_verticesTextureWidth);\n        int col = pointIndex * ELEMENT_COUNT % int(u_verticesTextureWidth);\n        \n        vec4 rows[ELEMENT_COUNT];\n        for( int i = 0; i < ELEMENT_COUNT; i++ ) {\n            rows[i] = getVertexElement(float(row), float(col + i));\n        }\n        \n        vec3 POSITION = vec3(rows[0].x, rows[0].y, rows[0].z);        \n        int row_index = 0;\n        int value_index = 2;\n#ifdef RENDERER_HAS_NORMAL \n        vec3 NORMAL = getVec3(rows, row_index, value_index);\n#endif\n\n#ifdef RENDERER_HAS_VERTEXCOLOR\n        vec4 COLOR_0 = getVec4(rows, row_index, value_index);\n#endif\n\n#ifdef RENDERER_HAS_WEIGHT\n        vec4 WEIGHTS_0 = getVec4(rows, row_index, value_index);\n#endif\n\n#ifdef RENDERER_HAS_JOINT\n        vec4 JOINTS_0 = getVec4(rows, row_index, value_index);\n#endif\n\n#ifdef RENDERER_HAS_TANGENT\n        vec4 TANGENT = getVec4(rows, row_index, value_index);\n#endif\n\n#ifdef RENDERER_HAS_UV\n        vec2 TEXCOORD_0 = getVec2(rows, row_index, value_index);\n#endif\n";
