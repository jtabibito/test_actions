{"version":3,"file":"WireframeMaterial.js","sources":["../../../src/material/WireframeMaterial.ts"],"sourcesContent":["import { BaseMaterial, Color, Engine, RenderFace, Shader } from \"@galacean/engine\";\nimport { geometryTextureDefine, geometryTextureVert } from \"./GeometryShader\";\n\nShader.create(\n  \"wireframeShader\",\n  `\n#include <common>\n   uniform float u_lineScale;\n   uniform mat4 camera_VPMat;\n   uniform mat4 u_worldMatrix;\n   uniform mat4 u_worldNormal;\n\n#ifdef RENDERER_HAS_SKIN\n#ifdef RENDERER_USE_JOINT_TEXTURE\n    uniform sampler2D renderer_JointSampler;\n    uniform float renderer_JointCount;\n\n    mat4 getJointMatrix(sampler2D smp, float index) {\n        float base = index / renderer_JointCount;\n        float hf = 0.5 / renderer_JointCount;\n        float v = base + hf;\n\n        vec4 m0 = texture2D(smp, vec2(0.125, v ));\n        vec4 m1 = texture2D(smp, vec2(0.375, v ));\n        vec4 m2 = texture2D(smp, vec2(0.625, v ));\n        vec4 m3 = texture2D(smp, vec2(0.875, v ));\n\n        return mat4(m0, m1, m2, m3);\n    }\n#else\n    uniform mat4 renderer_JointMatrix[ RENDERER_JOINTS_NUM ];\n#endif\n#endif\n\n${geometryTextureDefine}\n\nvarying vec3 v_baryCenter;\n\nvoid main() {\n    int indicesIndex = gl_VertexID / 3;\n    int indicesRow = indicesIndex / int(u_indicesTextureWidth);\n    int indicesCol = indicesIndex % int(u_indicesTextureWidth);\n    vec3 triangleIndices = getIndicesElement(float(indicesRow), float(indicesCol));\n    int subIndex = gl_VertexID % 3;\n    v_baryCenter = vec3(0.0);\n    v_baryCenter[subIndex] = 1.0;\n    \n    int pointIndex = int(triangleIndices[subIndex]);\n    ${geometryTextureVert}\n\n    #include <begin_position_vert>\n    #include <begin_normal_vert>\n    #include <skinning_vert>\n    \n    gl_Position = u_worldMatrix * position; \n    gl_Position = camera_VPMat * gl_Position; \n}\n`,\n  `\nvarying vec3 v_baryCenter;\n\nfloat edgeFactor(){\n    vec3 d = fwidth(v_baryCenter);\n    vec3 a3 = smoothstep(vec3(0.0), d * 1.5, v_baryCenter);\n    return min(min(a3.x, a3.y), a3.z);\n}\n\nuniform vec4 material_BaseColor;\nvoid main() {\n    if (gl_FrontFacing) {\n        gl_FragColor = vec4(material_BaseColor.xyz, 1.0 - edgeFactor());\n    } else {\n        // fade back face\n        gl_FragColor = vec4(material_BaseColor.xyz, (1.0 - edgeFactor()) * 0.3);\n    }\n}\n`\n);\n\nexport class WireframeMaterial extends BaseMaterial {\n  /**\n   * Base color.\n   */\n  get baseColor(): Color {\n    return this.shaderData.getColor(WireframeMaterial._baseColorProp);\n  }\n\n  set baseColor(value: Color) {\n    const baseColor = this.shaderData.getColor(WireframeMaterial._baseColorProp);\n    if (value !== baseColor) {\n      baseColor.copyFrom(value);\n    }\n  }\n\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"wireframeShader\"));\n    this.shaderData.setColor(WireframeMaterial._baseColorProp, new Color(0, 0, 0, 1));\n    this.isTransparent = true;\n    this.renderFace = RenderFace.Double;\n  }\n}\n"],"names":["Shader","create","geometryTextureDefine","geometryTextureVert","WireframeMaterial","engine","find","shaderData","setColor","_baseColorProp","Color","isTransparent","renderFace","RenderFace","Double","baseColor","getColor","value","copyFrom","BaseMaterial"],"mappings":";;;;AAGAA,MAAOC,CAAAA,MAAM,CACX,iBACA,EAAC,+zBA6BDC,qBAAsB,GAAA,0dAAA,GAclBC,sBAAoB,iNAUvB,EAAA,geAAA,CAAA,CAAA;AAqBI,IAAA,iBAAMC,iBAAD,SAAL,YAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,iBAAAA,EAAAA,YAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,iBAAAA,CAeCC,MAAc,EAAA;;wCAClBA,MAAQL,EAAAA,MAAAA,CAAOM,IAAI,CAAC,iBAAA,CAAA,CAAA,IAAA,IAAA,CAAA;AAC1B,QAAA,KAAA,CAAKC,UAAU,CAACC,QAAQ,CAACJ,iBAjBhBA,CAiBkCK,cAAc,EAAE,IAAIC,KAAAA,CAAM,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,CAAA,CAAA,CAAA;AAC9E,QAAA,KAAA,CAAKC,aAAa,GAAG,IAAA,CAAA;QACrB,KAAKC,CAAAA,UAAU,GAAGC,UAAAA,CAAWC,MAAM,CAAA;;;AAnB1BV,IAAAA,aAAAA,CAAAA,iBAAAA,EAAAA;;YAIPW,GAAAA,EAAAA,WAAAA;;;MAAJ,SAAA,GAAA,GAAA;gBACE,OAAO,IAAI,CAACR,UAAU,CAACS,QAAQ,CALtBZ,kBAKyCK,cAAc,CAAA,CAAA;AAClE,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAcQ,KAAY,EAAA;gBACxB,IAAMF,SAAAA,GAAY,IAAI,CAACR,UAAU,CAACS,QAAQ,CAACZ,iBATlCA,CASoDK,cAAc,CAAA,CAAA;AAC3E,gBAAA,IAAIQ,UAAUF,SAAW,EAAA;AACvBA,oBAAAA,SAAAA,CAAUG,QAAQ,CAACD,KAAAA,CAAAA,CAAAA;AACrB,iBAAA;AACF,aAAA;;;AAbWb,IAAAA,OAAAA,iBAAAA,CAAAA;EAA0Be,YAqBtC;;;;"}