{"version":3,"file":"SketchRenderer.js","sources":["../../src/SketchRenderer.ts"],"sourcesContent":["import {\n  Entity,\n  IndexBufferBinding,\n  IndexFormat,\n  Matrix,\n  MeshTopology,\n  ModelMesh,\n  ShaderMacro,\n  ShaderProperty,\n  SkinnedMeshRenderer,\n  SubMesh,\n  Texture2D,\n  TextureFilterMode,\n  TextureFormat,\n  VertexBufferBinding,\n  VertexElement\n} from \"@galacean/engine\";\nimport { SketchMode } from \"./SketchMode\";\nimport { BiTangentMaterial, NormalMaterial, TangentMaterial, WireframeMaterial } from \"./material\";\n\n/**\n * Sketch Renderer\n */\nexport class SketchRenderer extends SkinnedMeshRenderer {\n  private static _weightMacro = ShaderMacro.getByName(\"RENDERER_HAS_WEIGHT\");\n  private static _jointMacro = ShaderMacro.getByName(\"RENDERER_HAS_JOINT\");\n\n  private static _MAX_TEXTURE_ROWS = 512;\n  private static _jointIndexBegin = -1;\n\n  private static _verticesSamplerProp = ShaderProperty.getByName(\"u_verticesSampler\");\n  private static _verticesTextureHeightProp = ShaderProperty.getByName(\"u_verticesTextureHeight\");\n  private static _verticesTextureWidthProp = ShaderProperty.getByName(\"u_verticesTextureWidth\");\n\n  private static _indicesSamplerProp = ShaderProperty.getByName(\"u_indicesSampler\");\n  private static _indicesTextureHeightProp = ShaderProperty.getByName(\"u_indicesTextureHeight\");\n  private static _indicesTextureWidthProp = ShaderProperty.getByName(\"u_indicesTextureWidth\");\n\n  private static _lineScaleProp = ShaderProperty.getByName(\"u_lineScale\");\n  private static _worldMatrixProp = ShaderProperty.getByName(\"u_worldMatrix\");\n  private static _worldNormalProp = ShaderProperty.getByName(\"u_worldNormal\");\n\n  private _worldNormalMatrix = new Matrix();\n  private _worldMatrix: Matrix = null;\n  private _targetMesh: ModelMesh = null;\n  private _verticesTexture: Texture2D = null;\n  private _indicesTexture: Texture2D = null;\n\n  private _showState = [false, false, false, false];\n  private readonly _wireframeMaterial: WireframeMaterial;\n  private readonly _normalMaterial: NormalMaterial;\n  private readonly _tangentMaterial: TangentMaterial;\n  private readonly _biTangentMaterial: BiTangentMaterial;\n\n  private readonly _triangleSubMesh = new SubMesh();\n  private readonly _lineSubMesh = new SubMesh(0, 0, MeshTopology.Lines);\n\n  /**\n   * Line scale\n   */\n  get scale(): number {\n    return this.shaderData.getFloat(SketchRenderer._lineScaleProp);\n  }\n\n  set scale(value: number) {\n    this.shaderData.setFloat(SketchRenderer._lineScaleProp, value);\n  }\n\n  /**\n   * World matrix\n   */\n  set worldMatrix(value: Matrix) {\n    if (value !== this._worldMatrix) {\n      this._worldMatrix = value;\n      this.shaderData.setMatrix(SketchRenderer._worldMatrixProp, value);\n    }\n  }\n\n  /**\n   * Target mesh\n   */\n  set targetMesh(value: ModelMesh) {\n    if (value !== this._targetMesh) {\n      this._destroy();\n      this._targetMesh = value;\n      this._uploadVerticesBuffer(value);\n      this._uploadIndicesBuffer(value);\n\n      this._updateTriangleSubMesh(value);\n      this._updateLineSubMesh(value);\n      for (let i = 0; i < 4; i++) {\n        this.setSketchMode(i, this._showState[i]);\n      }\n    }\n  }\n\n  /**\n   * Material for wireframe shading\n   */\n  get wireframeMaterial(): WireframeMaterial {\n    return this._wireframeMaterial;\n  }\n\n  /**\n   * Material for normal shading\n   */\n  get normalMaterial(): NormalMaterial {\n    return this._normalMaterial;\n  }\n\n  /**\n   * Material for tangent shading\n   */\n  get tangentMaterial(): TangentMaterial {\n    return this._normalMaterial;\n  }\n\n  /**\n   * Material for biTangent shading\n   */\n  get biTangentMaterial(): BiTangentMaterial {\n    return this._normalMaterial;\n  }\n\n  constructor(entity: Entity) {\n    super(entity);\n    const engine = this.engine;\n    this.mesh = new ModelMesh(engine);\n    this._wireframeMaterial = new WireframeMaterial(engine);\n    this._normalMaterial = new NormalMaterial(engine);\n    this._tangentMaterial = new TangentMaterial(engine);\n    this._biTangentMaterial = new BiTangentMaterial(engine);\n\n    this.mesh.addSubMesh(this._triangleSubMesh); // wireframe\n    this.mesh.addSubMesh(this._lineSubMesh); // normal\n    this.mesh.addSubMesh(this._lineSubMesh); // tangent\n    this.mesh.addSubMesh(this._lineSubMesh); // bi-tangent\n\n    this.scale = 0.1;\n  }\n\n  /**\n   * Set sketch mode\n   * @param mode - The sketch mode\n   * @param isShow - whether show the sketch\n   */\n  setSketchMode(mode: SketchMode, isShow: boolean) {\n    switch (mode) {\n      case SketchMode.Wireframe:\n        if (isShow) {\n          this._targetMesh && this.setMaterial(0, this._wireframeMaterial);\n          this._showState[0] = true;\n        } else {\n          this.setMaterial(0, null);\n          this._showState[0] = false;\n        }\n        break;\n      case SketchMode.Normal:\n        if (isShow) {\n          this._targetMesh && this.setMaterial(1, this._normalMaterial);\n          this._showState[1] = true;\n        } else {\n          this.setMaterial(1, null);\n          this._showState[1] = false;\n        }\n        break;\n      case SketchMode.Tangent:\n        if (isShow) {\n          this._targetMesh && this.setMaterial(2, this._tangentMaterial);\n          this._showState[2] = true;\n        } else {\n          this.setMaterial(2, null);\n          this._showState[2] = false;\n        }\n        break;\n      case SketchMode.BiTangent:\n        if (isShow) {\n          this._targetMesh && this.setMaterial(3, this._biTangentMaterial);\n          this._showState[3] = true;\n        } else {\n          this.setMaterial(3, null);\n          this._showState[3] = false;\n        }\n        break;\n    }\n  }\n\n  clear() {\n    this.setMaterial(0, null);\n    this.setMaterial(1, null);\n    this.setMaterial(2, null);\n    this.setMaterial(3, null);\n  }\n\n  override update(deltaTime: number) {\n    super.update(deltaTime);\n    const worldMatrix = this._worldMatrix;\n    if (worldMatrix) {\n      const worldNormalMatrix = this._worldNormalMatrix;\n      Matrix.invert(worldMatrix, worldNormalMatrix);\n      worldNormalMatrix.transpose();\n      this.shaderData.setMatrix(SketchRenderer._worldNormalProp, worldNormalMatrix);\n    }\n  }\n\n  private _uploadIndicesBuffer(value: ModelMesh) {\n    //@ts-ignore\n    const indexBuffer = (<IndexBufferBinding>value._indexBufferBinding).buffer;\n    const byteLength = indexBuffer.byteLength;\n    const buffer = new Uint8Array(byteLength);\n    indexBuffer.getData(buffer);\n\n    //@ts-ignore\n    const indexFormat = <IndexFormat>value._indicesFormat;\n    let triangleCount = 0;\n    switch (indexFormat) {\n      case IndexFormat.UInt8: {\n        triangleCount = byteLength / 3;\n        const width = Math.min(triangleCount, SketchRenderer._MAX_TEXTURE_ROWS);\n        const height = Math.ceil(triangleCount / SketchRenderer._MAX_TEXTURE_ROWS);\n        this._indicesTexture = new Texture2D(this.engine, width, height, TextureFormat.R32G32B32A32, false);\n\n        const floatBuffer = new Float32Array(width * height * 4);\n        for (let i = 0; i < triangleCount; i++) {\n          for (let j = 0; j < 3; j++) {\n            floatBuffer[i * 4 + j] = buffer[i * 3 + j];\n          }\n          floatBuffer[i * 4 + 3] = 0;\n        }\n        this._indicesTexture.setPixelBuffer(floatBuffer);\n        this.shaderData.setTexture(SketchRenderer._indicesSamplerProp, this._indicesTexture);\n        this.shaderData.setFloat(SketchRenderer._indicesTextureWidthProp, width);\n        this.shaderData.setFloat(SketchRenderer._indicesTextureHeightProp, height);\n        break;\n      }\n      case IndexFormat.UInt16: {\n        const uint16Buffer = new Uint16Array(buffer.buffer);\n\n        triangleCount = byteLength / 6;\n        const width = Math.min(triangleCount, SketchRenderer._MAX_TEXTURE_ROWS);\n        const height = Math.ceil(triangleCount / SketchRenderer._MAX_TEXTURE_ROWS);\n        this._indicesTexture = new Texture2D(this.engine, width, height, TextureFormat.R32G32B32A32, false);\n\n        const floatBuffer = new Float32Array(width * height * 4);\n        for (let i = 0; i < triangleCount; i++) {\n          for (let j = 0; j < 3; j++) {\n            floatBuffer[i * 4 + j] = uint16Buffer[i * 3 + j];\n          }\n          floatBuffer[i * 4 + 3] = 0;\n        }\n        this._indicesTexture.setPixelBuffer(floatBuffer);\n        this.shaderData.setTexture(SketchRenderer._indicesSamplerProp, this._indicesTexture);\n        this.shaderData.setFloat(SketchRenderer._indicesTextureWidthProp, width);\n        this.shaderData.setFloat(SketchRenderer._indicesTextureHeightProp, height);\n        break;\n      }\n      case IndexFormat.UInt32: {\n        const uint32Buffer = new Uint32Array(buffer.buffer);\n\n        triangleCount = byteLength / 12;\n        const width = Math.min(triangleCount, SketchRenderer._MAX_TEXTURE_ROWS);\n        const height = Math.ceil(triangleCount / SketchRenderer._MAX_TEXTURE_ROWS);\n        this._indicesTexture = new Texture2D(this.engine, width, height, TextureFormat.R32G32B32A32, false);\n\n        const floatBuffer = new Float32Array(width * height * 4);\n        for (let i = 0; i < triangleCount; i++) {\n          for (let j = 0; j < 3; j++) {\n            floatBuffer[i * 4 + j] = uint32Buffer[i * 3 + j];\n          }\n          floatBuffer[i * 4 + 3] = 0;\n        }\n        this._indicesTexture.setPixelBuffer(floatBuffer);\n        this.shaderData.setTexture(SketchRenderer._indicesSamplerProp, this._indicesTexture);\n        this.shaderData.setFloat(SketchRenderer._indicesTextureWidthProp, width);\n        this.shaderData.setFloat(SketchRenderer._indicesTextureHeightProp, height);\n        break;\n      }\n    }\n    this._indicesTexture.filterMode = TextureFilterMode.Point;\n  }\n\n  private _uploadVerticesBuffer(value: ModelMesh) {\n    //@ts-ignore\n    const vertexBufferBinding = <VertexBufferBinding>value._vertexBufferBindings[0];\n    const vertexCount = value.vertexCount;\n    const elementCount = this._updateMeshElement(value);\n    const jointIndexBegin = SketchRenderer._jointIndexBegin;\n    let newElementCount = elementCount;\n    if (jointIndexBegin !== -1) {\n      newElementCount += 3;\n    }\n\n    const buffer = new Float32Array(elementCount * vertexCount);\n    vertexBufferBinding.buffer.getData(buffer);\n    const uint8Buffer = new Uint8Array(buffer.buffer);\n\n    const alignElementCount = Math.ceil(newElementCount / 4) * 4;\n    this.shaderData.enableMacro(\"ELEMENT_COUNT\", (alignElementCount / 4).toString());\n\n    const width = Math.min(vertexCount, SketchRenderer._MAX_TEXTURE_ROWS) * alignElementCount;\n    const height = Math.ceil(vertexCount / SketchRenderer._MAX_TEXTURE_ROWS);\n    const alignBuffer = new Float32Array(width * height);\n\n    for (let i = 0; i < vertexCount; i++) {\n      for (let j = 0; j < newElementCount; j++) {\n        if (jointIndexBegin !== -1 && j === jointIndexBegin) {\n          alignBuffer[i * alignElementCount + j] = uint8Buffer[i * elementCount * 4 + jointIndexBegin * 4];\n        } else if (jointIndexBegin !== -1 && j === jointIndexBegin + 1) {\n          alignBuffer[i * alignElementCount + j] = uint8Buffer[i * elementCount * 4 + jointIndexBegin * 4 + 1];\n        } else if (jointIndexBegin !== -1 && j === jointIndexBegin + 2) {\n          alignBuffer[i * alignElementCount + j] = uint8Buffer[i * elementCount * 4 + jointIndexBegin * 4 + 2];\n        } else if (jointIndexBegin !== -1 && j === jointIndexBegin + 3) {\n          alignBuffer[i * alignElementCount + j] = uint8Buffer[i * elementCount * 4 + jointIndexBegin * 4 + 3];\n        } else {\n          if (jointIndexBegin !== -1 && j > jointIndexBegin + 3) {\n            alignBuffer[i * alignElementCount + j] = buffer[i * elementCount + j - 3];\n          } else {\n            alignBuffer[i * alignElementCount + j] = buffer[i * elementCount + j];\n          }\n        }\n      }\n    }\n    this._createVerticesTexture(alignBuffer, width / 4, height);\n    SketchRenderer._jointIndexBegin = -1;\n  }\n\n  private _createVerticesTexture(vertexBuffer: ArrayBufferView, width: number, height: number) {\n    this._verticesTexture = new Texture2D(this.engine, width, height, TextureFormat.R32G32B32A32, false);\n    this._verticesTexture.filterMode = TextureFilterMode.Point;\n    this._verticesTexture.setPixelBuffer(vertexBuffer);\n\n    this.shaderData.setTexture(SketchRenderer._verticesSamplerProp, this._verticesTexture);\n    this.shaderData.setFloat(SketchRenderer._verticesTextureWidthProp, width);\n    this.shaderData.setFloat(SketchRenderer._verticesTextureHeightProp, height);\n  }\n\n  private _updateMeshElement(value: ModelMesh): number {\n    const shaderData = this.shaderData;\n    //@ts-ignore\n    shaderData.disableMacro(SketchRenderer._normalMacro);\n    //@ts-ignore\n    shaderData.disableMacro(SketchRenderer._vertexColorMacro);\n    //@ts-ignore\n    shaderData.disableMacro(SketchRenderer._tangentMacro);\n    //@ts-ignore\n    shaderData.disableMacro(SketchRenderer._uvMacro);\n    //@ts-ignore\n    shaderData.disableMacro(SketchRenderer._uv1Macro);\n    shaderData.disableMacro(SketchRenderer._weightMacro);\n    shaderData.disableMacro(SketchRenderer._jointMacro);\n\n    let elementCount = 0;\n    //@ts-ignore\n    const vertexElements = <VertexElement[]>value._vertexElements;\n    for (let i = 0, n = vertexElements.length; i < n; i++) {\n      const { semantic } = vertexElements[i];\n      switch (semantic) {\n        case \"POSITION\":\n          elementCount += 3;\n          break;\n        case \"NORMAL\":\n          elementCount += 3;\n          //@ts-ignore\n          shaderData.enableMacro(SketchRenderer._normalMacro);\n          break;\n        case \"COLOR_0\":\n          elementCount += 4;\n          //@ts-ignore\n          shaderData.enableMacro(SketchRenderer._vertexColorMacro);\n          break;\n        case \"WEIGHTS_0\":\n          elementCount += 4;\n          shaderData.enableMacro(SketchRenderer._weightMacro);\n          break;\n        case \"JOINTS_0\":\n          SketchRenderer._jointIndexBegin = elementCount;\n          elementCount += 1;\n          shaderData.enableMacro(SketchRenderer._jointMacro);\n          break;\n        case \"TANGENT\":\n          //@ts-ignore\n          shaderData.enableMacro(SketchRenderer._tangentMacro);\n          elementCount += 4;\n          break;\n        case \"TEXCOORD_0\":\n          //@ts-ignore\n          shaderData.enableMacro(SketchRenderer._uvMacro);\n          elementCount += 2;\n          break;\n        case \"TEXCOORD_1\":\n          //@ts-ignore\n          shaderData.enableMacro(SketchRenderer._uv1Macro);\n          elementCount += 2;\n          break;\n        case \"TEXCOORD_2\":\n          elementCount += 2;\n          break;\n        case \"TEXCOORD_3\":\n          elementCount += 2;\n          break;\n        case \"TEXCOORD_4\":\n          elementCount += 2;\n          break;\n        case \"TEXCOORD_5\":\n          elementCount += 2;\n          break;\n        case \"TEXCOORD_6\":\n          elementCount += 2;\n          break;\n        case \"TEXCOORD_7\":\n          elementCount += 2;\n          break;\n      }\n    }\n    return elementCount;\n  }\n\n  private _updateLineSubMesh(mesh: ModelMesh) {\n    this._lineSubMesh.count = mesh.vertexCount * 2;\n  }\n\n  private _updateTriangleSubMesh(mesh: ModelMesh) {\n    let triangleCount = 0;\n    const subMeshes = mesh.subMeshes;\n    for (let i = 0; i < subMeshes.length; i++) {\n      const subMesh = subMeshes[i];\n      triangleCount += subMesh.count;\n    }\n    this._triangleSubMesh.count = triangleCount;\n  }\n\n  private _destroy() {\n    this._indicesTexture && this._indicesTexture.destroy();\n    this._verticesTexture && this._verticesTexture.destroy();\n  }\n}\n"],"names":["SketchRenderer","entity","_worldNormalMatrix","Matrix","_worldMatrix","_targetMesh","_verticesTexture","_indicesTexture","_showState","_triangleSubMesh","SubMesh","_lineSubMesh","MeshTopology","Lines","engine","mesh","ModelMesh","_wireframeMaterial","WireframeMaterial","_normalMaterial","NormalMaterial","_tangentMaterial","TangentMaterial","_biTangentMaterial","BiTangentMaterial","addSubMesh","scale","setSketchMode","mode","isShow","SketchMode","Wireframe","setMaterial","Normal","Tangent","BiTangent","clear","update","deltaTime","worldMatrix","worldNormalMatrix","invert","transpose","shaderData","setMatrix","_worldNormalProp","_uploadIndicesBuffer","value","indexBuffer","_indexBufferBinding","buffer","byteLength","Uint8Array","getData","indexFormat","_indicesFormat","triangleCount","IndexFormat","UInt8","width","Math","min","_MAX_TEXTURE_ROWS","height","ceil","Texture2D","TextureFormat","R32G32B32A32","floatBuffer","Float32Array","i","j","setPixelBuffer","setTexture","_indicesSamplerProp","setFloat","_indicesTextureWidthProp","_indicesTextureHeightProp","UInt16","uint16Buffer","Uint16Array","UInt32","uint32Buffer","Uint32Array","filterMode","TextureFilterMode","Point","_uploadVerticesBuffer","vertexBufferBinding","_vertexBufferBindings","vertexCount","elementCount","_updateMeshElement","jointIndexBegin","_jointIndexBegin","newElementCount","uint8Buffer","alignElementCount","enableMacro","toString","alignBuffer","_createVerticesTexture","vertexBuffer","_verticesSamplerProp","_verticesTextureWidthProp","_verticesTextureHeightProp","disableMacro","_normalMacro","_vertexColorMacro","_tangentMacro","_uvMacro","_uv1Macro","_weightMacro","_jointMacro","vertexElements","_vertexElements","n","length","semantic","_updateLineSubMesh","count","_updateTriangleSubMesh","subMeshes","subMesh","_destroy","destroy","getFloat","_lineScaleProp","_worldMatrixProp","targetMesh","wireframeMaterial","normalMaterial","tangentMaterial","biTangentMaterial","SkinnedMeshRenderer","ShaderMacro","getByName","ShaderProperty"],"mappings":"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"}