{"version":3,"file":"TBNMaterial.js","sources":["../../../src/material/TBNMaterial.ts"],"sourcesContent":["import { BaseMaterial, Color, Engine, Shader } from \"@galacean/engine\";\nimport { geometryTextureDefine, geometryTextureVert } from \"./GeometryShader\";\n\nShader.create(\n  \"tbnShader\",\n  `\n#include <common>\n   uniform float u_lineScale;\n   uniform mat4 camera_VPMat;\n   uniform mat4 u_worldMatrix;\n   uniform mat4 u_worldNormal;\n\n#ifdef RENDERER_HAS_SKIN\n#ifdef RENDERER_USE_JOINT_TEXTURE\n    uniform sampler2D renderer_JointSampler;\n    uniform float renderer_JointCount;\n\n    mat4 getJointMatrix(sampler2D smp, float index) {\n        float base = index / renderer_JointCount;\n        float hf = 0.5 / renderer_JointCount;\n        float v = base + hf;\n\n        vec4 m0 = texture2D(smp, vec2(0.125, v ));\n        vec4 m1 = texture2D(smp, vec2(0.375, v ));\n        vec4 m2 = texture2D(smp, vec2(0.625, v ));\n        vec4 m3 = texture2D(smp, vec2(0.875, v ));\n\n        return mat4(m0, m1, m2, m3);\n    }\n#else\n    uniform mat4 renderer_JointMatrix[ RENDERER_JOINTS_NUM ];\n#endif\n#endif\n\n${geometryTextureDefine}\n\nvoid main() {\n    int pointIndex = gl_VertexID / 2;\n    ${geometryTextureVert}\n\n    #include <begin_position_vert>\n    #include <begin_normal_vert>\n    #include <skinning_vert>\n\n    gl_Position = u_worldMatrix * position; \n    \n#if defined(SHOW_NORMAL) && defined(RENDERER_HAS_NORMAL)\n    if (gl_VertexID % 2 == 1) {\n        vec3 normalW = normalize( mat3(u_worldNormal) * normal.xyz );\n        gl_Position.xyz += normalize(normalW) * u_lineScale;\n    }\n#endif\n\n#if defined(SHOW_TANGENT) && defined(RENDERER_HAS_TANGENT)\n    if (gl_VertexID % 2 == 1) {\n        vec3 tangentW = normalize( mat3(u_worldNormal) * tangent.xyz );\n        gl_Position.xyz += normalize(tangentW) * u_lineScale;\n    }\n#endif\n\n#if defined(SHOW_BITANGENT) && defined(RENDERER_HAS_TANGENT) && defined(RENDERER_HAS_NORMAL)\n    if (gl_VertexID % 2 == 1) {\n        vec3 normalW = normalize( mat3(u_worldNormal) * normal.xyz );\n        vec3 tangentW = normalize( mat3(u_worldNormal) * tangent.xyz );\n        vec3 bitangentW = cross( normalW, tangentW ) * tangent.w;\n        gl_Position.xyz += normalize(bitangentW) * u_lineScale;\n    }\n#endif\n    \n    gl_Position = camera_VPMat * gl_Position; \n}\n`,\n  `\nuniform vec4 material_BaseColor;\nvoid main() {\n    gl_FragColor = material_BaseColor;\n}\n`\n);\n\n/**\n * Material for normal shading\n */\nexport class NormalMaterial extends BaseMaterial {\n  /**\n   * Base color.\n   */\n  get baseColor(): Color {\n    return this.shaderData.getColor(NormalMaterial._baseColorProp);\n  }\n\n  set baseColor(value: Color) {\n    const baseColor = this.shaderData.getColor(NormalMaterial._baseColorProp);\n    if (value !== baseColor) {\n      baseColor.copyFrom(value);\n    }\n  }\n\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"tbnShader\"));\n    this.shaderData.setColor(NormalMaterial._baseColorProp, new Color(1, 0, 0, 1));\n    this.shaderData.enableMacro(\"SHOW_NORMAL\");\n  }\n}\n\n/**\n * Material for normal tangent\n */\nexport class TangentMaterial extends BaseMaterial {\n  /**\n   * Base color.\n   */\n  get baseColor(): Color {\n    return this.shaderData.getColor(TangentMaterial._baseColorProp);\n  }\n\n  set baseColor(value: Color) {\n    const baseColor = this.shaderData.getColor(TangentMaterial._baseColorProp);\n    if (value !== baseColor) {\n      baseColor.copyFrom(value);\n    }\n  }\n\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"tbnShader\"));\n    this.shaderData.setColor(TangentMaterial._baseColorProp, new Color(0, 1, 0, 1));\n    this.shaderData.enableMacro(\"SHOW_TANGENT\");\n  }\n}\n\n/**\n * Material for normal bi-tangent\n */\nexport class BiTangentMaterial extends BaseMaterial {\n  /**\n   * Base color.\n   */\n  get baseColor(): Color {\n    return this.shaderData.getColor(BiTangentMaterial._baseColorProp);\n  }\n\n  set baseColor(value: Color) {\n    const baseColor = this.shaderData.getColor(BiTangentMaterial._baseColorProp);\n    if (value !== baseColor) {\n      baseColor.copyFrom(value);\n    }\n  }\n\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"tbnShader\"));\n    this.shaderData.setColor(BiTangentMaterial._baseColorProp, new Color(0, 0, 1, 1));\n    this.shaderData.enableMacro(\"SHOW_BITANGENT\");\n  }\n}\n"],"names":["Shader","create","geometryTextureDefine","geometryTextureVert","NormalMaterial","engine","find","shaderData","setColor","_baseColorProp","Color","enableMacro","baseColor","getColor","value","copyFrom","BaseMaterial","TangentMaterial","BiTangentMaterial"],"mappings":"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"}