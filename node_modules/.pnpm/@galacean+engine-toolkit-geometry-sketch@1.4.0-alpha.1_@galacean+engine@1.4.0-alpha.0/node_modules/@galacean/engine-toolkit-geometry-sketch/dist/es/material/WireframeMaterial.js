import { _ as _inherits, a as _create_class } from '../_inherits-ae42bcd9.js';
import { Shader, Color, RenderFace, BaseMaterial } from '@galacean/engine';
import { geometryTextureDefine, geometryTextureVert } from './GeometryShader.js';

Shader.create("wireframeShader", "\n#include <common>\n   uniform float u_lineScale;\n   uniform mat4 camera_VPMat;\n   uniform mat4 u_worldMatrix;\n   uniform mat4 u_worldNormal;\n\n#ifdef RENDERER_HAS_SKIN\n#ifdef RENDERER_USE_JOINT_TEXTURE\n    uniform sampler2D renderer_JointSampler;\n    uniform float renderer_JointCount;\n\n    mat4 getJointMatrix(sampler2D smp, float index) {\n        float base = index / renderer_JointCount;\n        float hf = 0.5 / renderer_JointCount;\n        float v = base + hf;\n\n        vec4 m0 = texture2D(smp, vec2(0.125, v ));\n        vec4 m1 = texture2D(smp, vec2(0.375, v ));\n        vec4 m2 = texture2D(smp, vec2(0.625, v ));\n        vec4 m3 = texture2D(smp, vec2(0.875, v ));\n\n        return mat4(m0, m1, m2, m3);\n    }\n#else\n    uniform mat4 renderer_JointMatrix[ RENDERER_JOINTS_NUM ];\n#endif\n#endif\n\n" + geometryTextureDefine + "\n\nvarying vec3 v_baryCenter;\n\nvoid main() {\n    int indicesIndex = gl_VertexID / 3;\n    int indicesRow = indicesIndex / int(u_indicesTextureWidth);\n    int indicesCol = indicesIndex % int(u_indicesTextureWidth);\n    vec3 triangleIndices = getIndicesElement(float(indicesRow), float(indicesCol));\n    int subIndex = gl_VertexID % 3;\n    v_baryCenter = vec3(0.0);\n    v_baryCenter[subIndex] = 1.0;\n    \n    int pointIndex = int(triangleIndices[subIndex]);\n    " + geometryTextureVert + "\n\n    #include <begin_position_vert>\n    #include <begin_normal_vert>\n    #include <skinning_vert>\n    \n    gl_Position = u_worldMatrix * position; \n    gl_Position = camera_VPMat * gl_Position; \n}\n", "\nvarying vec3 v_baryCenter;\n\nfloat edgeFactor(){\n    vec3 d = fwidth(v_baryCenter);\n    vec3 a3 = smoothstep(vec3(0.0), d * 1.5, v_baryCenter);\n    return min(min(a3.x, a3.y), a3.z);\n}\n\nuniform vec4 material_BaseColor;\nvoid main() {\n    if (gl_FrontFacing) {\n        gl_FragColor = vec4(material_BaseColor.xyz, 1.0 - edgeFactor());\n    } else {\n        // fade back face\n        gl_FragColor = vec4(material_BaseColor.xyz, (1.0 - edgeFactor()) * 0.3);\n    }\n}\n");
var WireframeMaterial = /*#__PURE__*/ function(BaseMaterial) {
    _inherits(WireframeMaterial, BaseMaterial);
    function WireframeMaterial(engine) {
        var _this;
        _this = BaseMaterial.call(this, engine, Shader.find("wireframeShader")) || this;
        _this.shaderData.setColor(WireframeMaterial._baseColorProp, new Color(0, 0, 0, 1));
        _this.isTransparent = true;
        _this.renderFace = RenderFace.Double;
        return _this;
    }
    _create_class(WireframeMaterial, [
        {
            key: "baseColor",
            get: /**
   * Base color.
   */ function get() {
                return this.shaderData.getColor(WireframeMaterial._baseColorProp);
            },
            set: function set(value) {
                var baseColor = this.shaderData.getColor(WireframeMaterial._baseColorProp);
                if (value !== baseColor) {
                    baseColor.copyFrom(value);
                }
            }
        }
    ]);
    return WireframeMaterial;
}(BaseMaterial);

export { WireframeMaterial };
//# sourceMappingURL=WireframeMaterial.js.map
