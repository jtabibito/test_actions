{"version":3,"file":"browser.js","sources":["../../src/SketchMode.ts","../../../../node_modules/.pnpm/@swc+helpers@0.5.7/node_modules/@swc/helpers/esm/_create_class.js","../../../../node_modules/.pnpm/@swc+helpers@0.5.7/node_modules/@swc/helpers/esm/_set_prototype_of.js","../../../../node_modules/.pnpm/@swc+helpers@0.5.7/node_modules/@swc/helpers/esm/_inherits.js","../../src/material/GeometryShader.ts","../../src/material/TBNMaterial.ts","../../src/material/WireframeMaterial.ts","../../src/SketchRenderer.ts"],"sourcesContent":["export enum SketchMode {\n  Wireframe,\n  Normal,\n  Tangent,\n  BiTangent\n}","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","export function _set_prototype_of(o, p) {\n    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {\n        o.__proto__ = p;\n\n        return o;\n    };\n\n    return _set_prototype_of(o, p);\n}\nexport { _set_prototype_of as _ };\n","import { _set_prototype_of } from \"./_set_prototype_of.js\";\n\nexport function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });\n\n    if (superClass) _set_prototype_of(subClass, superClass);\n}\nexport { _inherits as _ };\n","export const geometryTextureDefine = `\n   uniform sampler2D u_verticesSampler;\n   uniform float u_verticesTextureWidth;\n   uniform float u_verticesTextureHeight;\n   \n   uniform sampler2D u_indicesSampler;\n   uniform float u_indicesTextureWidth;\n   uniform float u_indicesTextureHeight;\n   \n   vec4 getVertexElement(float row, float col) {\n        return texture2D(u_verticesSampler, vec2((col + 0.5) / u_verticesTextureWidth, (row + 0.5) / u_verticesTextureHeight));\n   }\n   \n   vec3 getIndicesElement(float row, float col) {\n        return texture2D(u_indicesSampler, vec2((col + 0.5) / u_indicesTextureWidth, (row + 0.5) / u_indicesTextureHeight )).xyz;\n   }\n   \n   vec2 getVec2(inout vec4[ELEMENT_COUNT] rows, inout int row_index, inout int value_index) {\n        row_index += (value_index+1)/4;\n        value_index = (value_index+1)%4;\n        float x = rows[row_index][value_index];\n        \n        row_index += (value_index+1)/4;\n        value_index = (value_index+1)%4;\n        float y = rows[row_index][value_index];\n        \n        return vec2(x, y);\n   }\n   \n   vec3 getVec3(inout vec4[ELEMENT_COUNT] rows, inout int row_index, inout int value_index) {\n        row_index += (value_index+1)/4;\n        value_index = (value_index+1)%4;\n        float x = rows[row_index][value_index];\n        \n        row_index += (value_index+1)/4;\n        value_index = (value_index+1)%4;\n        float y = rows[row_index][value_index];\n        \n        row_index += (value_index+1)/4;\n        value_index = (value_index+1)%4;\n        float z = rows[row_index][value_index];\n        return vec3(x, y, z);\n   }\n   \n   vec4 getVec4(inout vec4[ELEMENT_COUNT] rows, inout int row_index, inout int value_index) {\n        row_index += (value_index+1)/4;\n        value_index = (value_index+1)%4;\n        float x = rows[row_index][value_index];\n        \n        row_index += (value_index+1)/4;\n        value_index = (value_index+1)%4;\n        float y = rows[row_index][value_index];\n        \n        row_index += (value_index+1)/4;\n        value_index = (value_index+1)%4;\n        float z = rows[row_index][value_index];\n        \n        row_index += (value_index+1)/4;\n        value_index = (value_index+1)%4;\n        float w = rows[row_index][value_index];\n        return vec4(x, y, z, w);\n   }\n`;\n\nexport const geometryTextureVert = `\n        int row = pointIndex * ELEMENT_COUNT / int(u_verticesTextureWidth);\n        int col = pointIndex * ELEMENT_COUNT % int(u_verticesTextureWidth);\n        \n        vec4 rows[ELEMENT_COUNT];\n        for( int i = 0; i < ELEMENT_COUNT; i++ ) {\n            rows[i] = getVertexElement(float(row), float(col + i));\n        }\n        \n        vec3 POSITION = vec3(rows[0].x, rows[0].y, rows[0].z);        \n        int row_index = 0;\n        int value_index = 2;\n#ifdef RENDERER_HAS_NORMAL \n        vec3 NORMAL = getVec3(rows, row_index, value_index);\n#endif\n\n#ifdef RENDERER_HAS_VERTEXCOLOR\n        vec4 COLOR_0 = getVec4(rows, row_index, value_index);\n#endif\n\n#ifdef RENDERER_HAS_WEIGHT\n        vec4 WEIGHTS_0 = getVec4(rows, row_index, value_index);\n#endif\n\n#ifdef RENDERER_HAS_JOINT\n        vec4 JOINTS_0 = getVec4(rows, row_index, value_index);\n#endif\n\n#ifdef RENDERER_HAS_TANGENT\n        vec4 TANGENT = getVec4(rows, row_index, value_index);\n#endif\n\n#ifdef RENDERER_HAS_UV\n        vec2 TEXCOORD_0 = getVec2(rows, row_index, value_index);\n#endif\n`;\n","import { BaseMaterial, Color, Engine, Shader } from \"@galacean/engine\";\nimport { geometryTextureDefine, geometryTextureVert } from \"./GeometryShader\";\n\nShader.create(\n  \"tbnShader\",\n  `\n#include <common>\n   uniform float u_lineScale;\n   uniform mat4 camera_VPMat;\n   uniform mat4 u_worldMatrix;\n   uniform mat4 u_worldNormal;\n\n#ifdef RENDERER_HAS_SKIN\n#ifdef RENDERER_USE_JOINT_TEXTURE\n    uniform sampler2D renderer_JointSampler;\n    uniform float renderer_JointCount;\n\n    mat4 getJointMatrix(sampler2D smp, float index) {\n        float base = index / renderer_JointCount;\n        float hf = 0.5 / renderer_JointCount;\n        float v = base + hf;\n\n        vec4 m0 = texture2D(smp, vec2(0.125, v ));\n        vec4 m1 = texture2D(smp, vec2(0.375, v ));\n        vec4 m2 = texture2D(smp, vec2(0.625, v ));\n        vec4 m3 = texture2D(smp, vec2(0.875, v ));\n\n        return mat4(m0, m1, m2, m3);\n    }\n#else\n    uniform mat4 renderer_JointMatrix[ RENDERER_JOINTS_NUM ];\n#endif\n#endif\n\n${geometryTextureDefine}\n\nvoid main() {\n    int pointIndex = gl_VertexID / 2;\n    ${geometryTextureVert}\n\n    #include <begin_position_vert>\n    #include <begin_normal_vert>\n    #include <skinning_vert>\n\n    gl_Position = u_worldMatrix * position; \n    \n#if defined(SHOW_NORMAL) && defined(RENDERER_HAS_NORMAL)\n    if (gl_VertexID % 2 == 1) {\n        vec3 normalW = normalize( mat3(u_worldNormal) * normal.xyz );\n        gl_Position.xyz += normalize(normalW) * u_lineScale;\n    }\n#endif\n\n#if defined(SHOW_TANGENT) && defined(RENDERER_HAS_TANGENT)\n    if (gl_VertexID % 2 == 1) {\n        vec3 tangentW = normalize( mat3(u_worldNormal) * tangent.xyz );\n        gl_Position.xyz += normalize(tangentW) * u_lineScale;\n    }\n#endif\n\n#if defined(SHOW_BITANGENT) && defined(RENDERER_HAS_TANGENT) && defined(RENDERER_HAS_NORMAL)\n    if (gl_VertexID % 2 == 1) {\n        vec3 normalW = normalize( mat3(u_worldNormal) * normal.xyz );\n        vec3 tangentW = normalize( mat3(u_worldNormal) * tangent.xyz );\n        vec3 bitangentW = cross( normalW, tangentW ) * tangent.w;\n        gl_Position.xyz += normalize(bitangentW) * u_lineScale;\n    }\n#endif\n    \n    gl_Position = camera_VPMat * gl_Position; \n}\n`,\n  `\nuniform vec4 material_BaseColor;\nvoid main() {\n    gl_FragColor = material_BaseColor;\n}\n`\n);\n\n/**\n * Material for normal shading\n */\nexport class NormalMaterial extends BaseMaterial {\n  /**\n   * Base color.\n   */\n  get baseColor(): Color {\n    return this.shaderData.getColor(NormalMaterial._baseColorProp);\n  }\n\n  set baseColor(value: Color) {\n    const baseColor = this.shaderData.getColor(NormalMaterial._baseColorProp);\n    if (value !== baseColor) {\n      baseColor.copyFrom(value);\n    }\n  }\n\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"tbnShader\"));\n    this.shaderData.setColor(NormalMaterial._baseColorProp, new Color(1, 0, 0, 1));\n    this.shaderData.enableMacro(\"SHOW_NORMAL\");\n  }\n}\n\n/**\n * Material for normal tangent\n */\nexport class TangentMaterial extends BaseMaterial {\n  /**\n   * Base color.\n   */\n  get baseColor(): Color {\n    return this.shaderData.getColor(TangentMaterial._baseColorProp);\n  }\n\n  set baseColor(value: Color) {\n    const baseColor = this.shaderData.getColor(TangentMaterial._baseColorProp);\n    if (value !== baseColor) {\n      baseColor.copyFrom(value);\n    }\n  }\n\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"tbnShader\"));\n    this.shaderData.setColor(TangentMaterial._baseColorProp, new Color(0, 1, 0, 1));\n    this.shaderData.enableMacro(\"SHOW_TANGENT\");\n  }\n}\n\n/**\n * Material for normal bi-tangent\n */\nexport class BiTangentMaterial extends BaseMaterial {\n  /**\n   * Base color.\n   */\n  get baseColor(): Color {\n    return this.shaderData.getColor(BiTangentMaterial._baseColorProp);\n  }\n\n  set baseColor(value: Color) {\n    const baseColor = this.shaderData.getColor(BiTangentMaterial._baseColorProp);\n    if (value !== baseColor) {\n      baseColor.copyFrom(value);\n    }\n  }\n\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"tbnShader\"));\n    this.shaderData.setColor(BiTangentMaterial._baseColorProp, new Color(0, 0, 1, 1));\n    this.shaderData.enableMacro(\"SHOW_BITANGENT\");\n  }\n}\n","import { BaseMaterial, Color, Engine, RenderFace, Shader } from \"@galacean/engine\";\nimport { geometryTextureDefine, geometryTextureVert } from \"./GeometryShader\";\n\nShader.create(\n  \"wireframeShader\",\n  `\n#include <common>\n   uniform float u_lineScale;\n   uniform mat4 camera_VPMat;\n   uniform mat4 u_worldMatrix;\n   uniform mat4 u_worldNormal;\n\n#ifdef RENDERER_HAS_SKIN\n#ifdef RENDERER_USE_JOINT_TEXTURE\n    uniform sampler2D renderer_JointSampler;\n    uniform float renderer_JointCount;\n\n    mat4 getJointMatrix(sampler2D smp, float index) {\n        float base = index / renderer_JointCount;\n        float hf = 0.5 / renderer_JointCount;\n        float v = base + hf;\n\n        vec4 m0 = texture2D(smp, vec2(0.125, v ));\n        vec4 m1 = texture2D(smp, vec2(0.375, v ));\n        vec4 m2 = texture2D(smp, vec2(0.625, v ));\n        vec4 m3 = texture2D(smp, vec2(0.875, v ));\n\n        return mat4(m0, m1, m2, m3);\n    }\n#else\n    uniform mat4 renderer_JointMatrix[ RENDERER_JOINTS_NUM ];\n#endif\n#endif\n\n${geometryTextureDefine}\n\nvarying vec3 v_baryCenter;\n\nvoid main() {\n    int indicesIndex = gl_VertexID / 3;\n    int indicesRow = indicesIndex / int(u_indicesTextureWidth);\n    int indicesCol = indicesIndex % int(u_indicesTextureWidth);\n    vec3 triangleIndices = getIndicesElement(float(indicesRow), float(indicesCol));\n    int subIndex = gl_VertexID % 3;\n    v_baryCenter = vec3(0.0);\n    v_baryCenter[subIndex] = 1.0;\n    \n    int pointIndex = int(triangleIndices[subIndex]);\n    ${geometryTextureVert}\n\n    #include <begin_position_vert>\n    #include <begin_normal_vert>\n    #include <skinning_vert>\n    \n    gl_Position = u_worldMatrix * position; \n    gl_Position = camera_VPMat * gl_Position; \n}\n`,\n  `\nvarying vec3 v_baryCenter;\n\nfloat edgeFactor(){\n    vec3 d = fwidth(v_baryCenter);\n    vec3 a3 = smoothstep(vec3(0.0), d * 1.5, v_baryCenter);\n    return min(min(a3.x, a3.y), a3.z);\n}\n\nuniform vec4 material_BaseColor;\nvoid main() {\n    if (gl_FrontFacing) {\n        gl_FragColor = vec4(material_BaseColor.xyz, 1.0 - edgeFactor());\n    } else {\n        // fade back face\n        gl_FragColor = vec4(material_BaseColor.xyz, (1.0 - edgeFactor()) * 0.3);\n    }\n}\n`\n);\n\nexport class WireframeMaterial extends BaseMaterial {\n  /**\n   * Base color.\n   */\n  get baseColor(): Color {\n    return this.shaderData.getColor(WireframeMaterial._baseColorProp);\n  }\n\n  set baseColor(value: Color) {\n    const baseColor = this.shaderData.getColor(WireframeMaterial._baseColorProp);\n    if (value !== baseColor) {\n      baseColor.copyFrom(value);\n    }\n  }\n\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"wireframeShader\"));\n    this.shaderData.setColor(WireframeMaterial._baseColorProp, new Color(0, 0, 0, 1));\n    this.isTransparent = true;\n    this.renderFace = RenderFace.Double;\n  }\n}\n","import {\n  Entity,\n  IndexBufferBinding,\n  IndexFormat,\n  Matrix,\n  MeshTopology,\n  ModelMesh,\n  ShaderMacro,\n  ShaderProperty,\n  SkinnedMeshRenderer,\n  SubMesh,\n  Texture2D,\n  TextureFilterMode,\n  TextureFormat,\n  VertexBufferBinding,\n  VertexElement\n} from \"@galacean/engine\";\nimport { SketchMode } from \"./SketchMode\";\nimport { BiTangentMaterial, NormalMaterial, TangentMaterial, WireframeMaterial } from \"./material\";\n\n/**\n * Sketch Renderer\n */\nexport class SketchRenderer extends SkinnedMeshRenderer {\n  private static _weightMacro = ShaderMacro.getByName(\"RENDERER_HAS_WEIGHT\");\n  private static _jointMacro = ShaderMacro.getByName(\"RENDERER_HAS_JOINT\");\n\n  private static _MAX_TEXTURE_ROWS = 512;\n  private static _jointIndexBegin = -1;\n\n  private static _verticesSamplerProp = ShaderProperty.getByName(\"u_verticesSampler\");\n  private static _verticesTextureHeightProp = ShaderProperty.getByName(\"u_verticesTextureHeight\");\n  private static _verticesTextureWidthProp = ShaderProperty.getByName(\"u_verticesTextureWidth\");\n\n  private static _indicesSamplerProp = ShaderProperty.getByName(\"u_indicesSampler\");\n  private static _indicesTextureHeightProp = ShaderProperty.getByName(\"u_indicesTextureHeight\");\n  private static _indicesTextureWidthProp = ShaderProperty.getByName(\"u_indicesTextureWidth\");\n\n  private static _lineScaleProp = ShaderProperty.getByName(\"u_lineScale\");\n  private static _worldMatrixProp = ShaderProperty.getByName(\"u_worldMatrix\");\n  private static _worldNormalProp = ShaderProperty.getByName(\"u_worldNormal\");\n\n  private _worldNormalMatrix = new Matrix();\n  private _worldMatrix: Matrix = null;\n  private _targetMesh: ModelMesh = null;\n  private _verticesTexture: Texture2D = null;\n  private _indicesTexture: Texture2D = null;\n\n  private _showState = [false, false, false, false];\n  private readonly _wireframeMaterial: WireframeMaterial;\n  private readonly _normalMaterial: NormalMaterial;\n  private readonly _tangentMaterial: TangentMaterial;\n  private readonly _biTangentMaterial: BiTangentMaterial;\n\n  private readonly _triangleSubMesh = new SubMesh();\n  private readonly _lineSubMesh = new SubMesh(0, 0, MeshTopology.Lines);\n\n  /**\n   * Line scale\n   */\n  get scale(): number {\n    return this.shaderData.getFloat(SketchRenderer._lineScaleProp);\n  }\n\n  set scale(value: number) {\n    this.shaderData.setFloat(SketchRenderer._lineScaleProp, value);\n  }\n\n  /**\n   * World matrix\n   */\n  set worldMatrix(value: Matrix) {\n    if (value !== this._worldMatrix) {\n      this._worldMatrix = value;\n      this.shaderData.setMatrix(SketchRenderer._worldMatrixProp, value);\n    }\n  }\n\n  /**\n   * Target mesh\n   */\n  set targetMesh(value: ModelMesh) {\n    if (value !== this._targetMesh) {\n      this._destroy();\n      this._targetMesh = value;\n      this._uploadVerticesBuffer(value);\n      this._uploadIndicesBuffer(value);\n\n      this._updateTriangleSubMesh(value);\n      this._updateLineSubMesh(value);\n      for (let i = 0; i < 4; i++) {\n        this.setSketchMode(i, this._showState[i]);\n      }\n    }\n  }\n\n  /**\n   * Material for wireframe shading\n   */\n  get wireframeMaterial(): WireframeMaterial {\n    return this._wireframeMaterial;\n  }\n\n  /**\n   * Material for normal shading\n   */\n  get normalMaterial(): NormalMaterial {\n    return this._normalMaterial;\n  }\n\n  /**\n   * Material for tangent shading\n   */\n  get tangentMaterial(): TangentMaterial {\n    return this._normalMaterial;\n  }\n\n  /**\n   * Material for biTangent shading\n   */\n  get biTangentMaterial(): BiTangentMaterial {\n    return this._normalMaterial;\n  }\n\n  constructor(entity: Entity) {\n    super(entity);\n    const engine = this.engine;\n    this.mesh = new ModelMesh(engine);\n    this._wireframeMaterial = new WireframeMaterial(engine);\n    this._normalMaterial = new NormalMaterial(engine);\n    this._tangentMaterial = new TangentMaterial(engine);\n    this._biTangentMaterial = new BiTangentMaterial(engine);\n\n    this.mesh.addSubMesh(this._triangleSubMesh); // wireframe\n    this.mesh.addSubMesh(this._lineSubMesh); // normal\n    this.mesh.addSubMesh(this._lineSubMesh); // tangent\n    this.mesh.addSubMesh(this._lineSubMesh); // bi-tangent\n\n    this.scale = 0.1;\n  }\n\n  /**\n   * Set sketch mode\n   * @param mode - The sketch mode\n   * @param isShow - whether show the sketch\n   */\n  setSketchMode(mode: SketchMode, isShow: boolean) {\n    switch (mode) {\n      case SketchMode.Wireframe:\n        if (isShow) {\n          this._targetMesh && this.setMaterial(0, this._wireframeMaterial);\n          this._showState[0] = true;\n        } else {\n          this.setMaterial(0, null);\n          this._showState[0] = false;\n        }\n        break;\n      case SketchMode.Normal:\n        if (isShow) {\n          this._targetMesh && this.setMaterial(1, this._normalMaterial);\n          this._showState[1] = true;\n        } else {\n          this.setMaterial(1, null);\n          this._showState[1] = false;\n        }\n        break;\n      case SketchMode.Tangent:\n        if (isShow) {\n          this._targetMesh && this.setMaterial(2, this._tangentMaterial);\n          this._showState[2] = true;\n        } else {\n          this.setMaterial(2, null);\n          this._showState[2] = false;\n        }\n        break;\n      case SketchMode.BiTangent:\n        if (isShow) {\n          this._targetMesh && this.setMaterial(3, this._biTangentMaterial);\n          this._showState[3] = true;\n        } else {\n          this.setMaterial(3, null);\n          this._showState[3] = false;\n        }\n        break;\n    }\n  }\n\n  clear() {\n    this.setMaterial(0, null);\n    this.setMaterial(1, null);\n    this.setMaterial(2, null);\n    this.setMaterial(3, null);\n  }\n\n  override update(deltaTime: number) {\n    super.update(deltaTime);\n    const worldMatrix = this._worldMatrix;\n    if (worldMatrix) {\n      const worldNormalMatrix = this._worldNormalMatrix;\n      Matrix.invert(worldMatrix, worldNormalMatrix);\n      worldNormalMatrix.transpose();\n      this.shaderData.setMatrix(SketchRenderer._worldNormalProp, worldNormalMatrix);\n    }\n  }\n\n  private _uploadIndicesBuffer(value: ModelMesh) {\n    //@ts-ignore\n    const indexBuffer = (<IndexBufferBinding>value._indexBufferBinding).buffer;\n    const byteLength = indexBuffer.byteLength;\n    const buffer = new Uint8Array(byteLength);\n    indexBuffer.getData(buffer);\n\n    //@ts-ignore\n    const indexFormat = <IndexFormat>value._indicesFormat;\n    let triangleCount = 0;\n    switch (indexFormat) {\n      case IndexFormat.UInt8: {\n        triangleCount = byteLength / 3;\n        const width = Math.min(triangleCount, SketchRenderer._MAX_TEXTURE_ROWS);\n        const height = Math.ceil(triangleCount / SketchRenderer._MAX_TEXTURE_ROWS);\n        this._indicesTexture = new Texture2D(this.engine, width, height, TextureFormat.R32G32B32A32, false);\n\n        const floatBuffer = new Float32Array(width * height * 4);\n        for (let i = 0; i < triangleCount; i++) {\n          for (let j = 0; j < 3; j++) {\n            floatBuffer[i * 4 + j] = buffer[i * 3 + j];\n          }\n          floatBuffer[i * 4 + 3] = 0;\n        }\n        this._indicesTexture.setPixelBuffer(floatBuffer);\n        this.shaderData.setTexture(SketchRenderer._indicesSamplerProp, this._indicesTexture);\n        this.shaderData.setFloat(SketchRenderer._indicesTextureWidthProp, width);\n        this.shaderData.setFloat(SketchRenderer._indicesTextureHeightProp, height);\n        break;\n      }\n      case IndexFormat.UInt16: {\n        const uint16Buffer = new Uint16Array(buffer.buffer);\n\n        triangleCount = byteLength / 6;\n        const width = Math.min(triangleCount, SketchRenderer._MAX_TEXTURE_ROWS);\n        const height = Math.ceil(triangleCount / SketchRenderer._MAX_TEXTURE_ROWS);\n        this._indicesTexture = new Texture2D(this.engine, width, height, TextureFormat.R32G32B32A32, false);\n\n        const floatBuffer = new Float32Array(width * height * 4);\n        for (let i = 0; i < triangleCount; i++) {\n          for (let j = 0; j < 3; j++) {\n            floatBuffer[i * 4 + j] = uint16Buffer[i * 3 + j];\n          }\n          floatBuffer[i * 4 + 3] = 0;\n        }\n        this._indicesTexture.setPixelBuffer(floatBuffer);\n        this.shaderData.setTexture(SketchRenderer._indicesSamplerProp, this._indicesTexture);\n        this.shaderData.setFloat(SketchRenderer._indicesTextureWidthProp, width);\n        this.shaderData.setFloat(SketchRenderer._indicesTextureHeightProp, height);\n        break;\n      }\n      case IndexFormat.UInt32: {\n        const uint32Buffer = new Uint32Array(buffer.buffer);\n\n        triangleCount = byteLength / 12;\n        const width = Math.min(triangleCount, SketchRenderer._MAX_TEXTURE_ROWS);\n        const height = Math.ceil(triangleCount / SketchRenderer._MAX_TEXTURE_ROWS);\n        this._indicesTexture = new Texture2D(this.engine, width, height, TextureFormat.R32G32B32A32, false);\n\n        const floatBuffer = new Float32Array(width * height * 4);\n        for (let i = 0; i < triangleCount; i++) {\n          for (let j = 0; j < 3; j++) {\n            floatBuffer[i * 4 + j] = uint32Buffer[i * 3 + j];\n          }\n          floatBuffer[i * 4 + 3] = 0;\n        }\n        this._indicesTexture.setPixelBuffer(floatBuffer);\n        this.shaderData.setTexture(SketchRenderer._indicesSamplerProp, this._indicesTexture);\n        this.shaderData.setFloat(SketchRenderer._indicesTextureWidthProp, width);\n        this.shaderData.setFloat(SketchRenderer._indicesTextureHeightProp, height);\n        break;\n      }\n    }\n    this._indicesTexture.filterMode = TextureFilterMode.Point;\n  }\n\n  private _uploadVerticesBuffer(value: ModelMesh) {\n    //@ts-ignore\n    const vertexBufferBinding = <VertexBufferBinding>value._vertexBufferBindings[0];\n    const vertexCount = value.vertexCount;\n    const elementCount = this._updateMeshElement(value);\n    const jointIndexBegin = SketchRenderer._jointIndexBegin;\n    let newElementCount = elementCount;\n    if (jointIndexBegin !== -1) {\n      newElementCount += 3;\n    }\n\n    const buffer = new Float32Array(elementCount * vertexCount);\n    vertexBufferBinding.buffer.getData(buffer);\n    const uint8Buffer = new Uint8Array(buffer.buffer);\n\n    const alignElementCount = Math.ceil(newElementCount / 4) * 4;\n    this.shaderData.enableMacro(\"ELEMENT_COUNT\", (alignElementCount / 4).toString());\n\n    const width = Math.min(vertexCount, SketchRenderer._MAX_TEXTURE_ROWS) * alignElementCount;\n    const height = Math.ceil(vertexCount / SketchRenderer._MAX_TEXTURE_ROWS);\n    const alignBuffer = new Float32Array(width * height);\n\n    for (let i = 0; i < vertexCount; i++) {\n      for (let j = 0; j < newElementCount; j++) {\n        if (jointIndexBegin !== -1 && j === jointIndexBegin) {\n          alignBuffer[i * alignElementCount + j] = uint8Buffer[i * elementCount * 4 + jointIndexBegin * 4];\n        } else if (jointIndexBegin !== -1 && j === jointIndexBegin + 1) {\n          alignBuffer[i * alignElementCount + j] = uint8Buffer[i * elementCount * 4 + jointIndexBegin * 4 + 1];\n        } else if (jointIndexBegin !== -1 && j === jointIndexBegin + 2) {\n          alignBuffer[i * alignElementCount + j] = uint8Buffer[i * elementCount * 4 + jointIndexBegin * 4 + 2];\n        } else if (jointIndexBegin !== -1 && j === jointIndexBegin + 3) {\n          alignBuffer[i * alignElementCount + j] = uint8Buffer[i * elementCount * 4 + jointIndexBegin * 4 + 3];\n        } else {\n          if (jointIndexBegin !== -1 && j > jointIndexBegin + 3) {\n            alignBuffer[i * alignElementCount + j] = buffer[i * elementCount + j - 3];\n          } else {\n            alignBuffer[i * alignElementCount + j] = buffer[i * elementCount + j];\n          }\n        }\n      }\n    }\n    this._createVerticesTexture(alignBuffer, width / 4, height);\n    SketchRenderer._jointIndexBegin = -1;\n  }\n\n  private _createVerticesTexture(vertexBuffer: ArrayBufferView, width: number, height: number) {\n    this._verticesTexture = new Texture2D(this.engine, width, height, TextureFormat.R32G32B32A32, false);\n    this._verticesTexture.filterMode = TextureFilterMode.Point;\n    this._verticesTexture.setPixelBuffer(vertexBuffer);\n\n    this.shaderData.setTexture(SketchRenderer._verticesSamplerProp, this._verticesTexture);\n    this.shaderData.setFloat(SketchRenderer._verticesTextureWidthProp, width);\n    this.shaderData.setFloat(SketchRenderer._verticesTextureHeightProp, height);\n  }\n\n  private _updateMeshElement(value: ModelMesh): number {\n    const shaderData = this.shaderData;\n    //@ts-ignore\n    shaderData.disableMacro(SketchRenderer._normalMacro);\n    //@ts-ignore\n    shaderData.disableMacro(SketchRenderer._vertexColorMacro);\n    //@ts-ignore\n    shaderData.disableMacro(SketchRenderer._tangentMacro);\n    //@ts-ignore\n    shaderData.disableMacro(SketchRenderer._uvMacro);\n    //@ts-ignore\n    shaderData.disableMacro(SketchRenderer._uv1Macro);\n    shaderData.disableMacro(SketchRenderer._weightMacro);\n    shaderData.disableMacro(SketchRenderer._jointMacro);\n\n    let elementCount = 0;\n    //@ts-ignore\n    const vertexElements = <VertexElement[]>value._vertexElements;\n    for (let i = 0, n = vertexElements.length; i < n; i++) {\n      const { semantic } = vertexElements[i];\n      switch (semantic) {\n        case \"POSITION\":\n          elementCount += 3;\n          break;\n        case \"NORMAL\":\n          elementCount += 3;\n          //@ts-ignore\n          shaderData.enableMacro(SketchRenderer._normalMacro);\n          break;\n        case \"COLOR_0\":\n          elementCount += 4;\n          //@ts-ignore\n          shaderData.enableMacro(SketchRenderer._vertexColorMacro);\n          break;\n        case \"WEIGHTS_0\":\n          elementCount += 4;\n          shaderData.enableMacro(SketchRenderer._weightMacro);\n          break;\n        case \"JOINTS_0\":\n          SketchRenderer._jointIndexBegin = elementCount;\n          elementCount += 1;\n          shaderData.enableMacro(SketchRenderer._jointMacro);\n          break;\n        case \"TANGENT\":\n          //@ts-ignore\n          shaderData.enableMacro(SketchRenderer._tangentMacro);\n          elementCount += 4;\n          break;\n        case \"TEXCOORD_0\":\n          //@ts-ignore\n          shaderData.enableMacro(SketchRenderer._uvMacro);\n          elementCount += 2;\n          break;\n        case \"TEXCOORD_1\":\n          //@ts-ignore\n          shaderData.enableMacro(SketchRenderer._uv1Macro);\n          elementCount += 2;\n          break;\n        case \"TEXCOORD_2\":\n          elementCount += 2;\n          break;\n        case \"TEXCOORD_3\":\n          elementCount += 2;\n          break;\n        case \"TEXCOORD_4\":\n          elementCount += 2;\n          break;\n        case \"TEXCOORD_5\":\n          elementCount += 2;\n          break;\n        case \"TEXCOORD_6\":\n          elementCount += 2;\n          break;\n        case \"TEXCOORD_7\":\n          elementCount += 2;\n          break;\n      }\n    }\n    return elementCount;\n  }\n\n  private _updateLineSubMesh(mesh: ModelMesh) {\n    this._lineSubMesh.count = mesh.vertexCount * 2;\n  }\n\n  private _updateTriangleSubMesh(mesh: ModelMesh) {\n    let triangleCount = 0;\n    const subMeshes = mesh.subMeshes;\n    for (let i = 0; i < subMeshes.length; i++) {\n      const subMesh = subMeshes[i];\n      triangleCount += subMesh.count;\n    }\n    this._triangleSubMesh.count = triangleCount;\n  }\n\n  private _destroy() {\n    this._indicesTexture && this._indicesTexture.destroy();\n    this._verticesTexture && this._verticesTexture.destroy();\n  }\n}\n"],"names":["SketchMode","geometryTextureDefine","geometryTextureVert","Shader","create","NormalMaterial","engine","find","shaderData","setColor","_baseColorProp","Color","enableMacro","baseColor","getColor","value","copyFrom","BaseMaterial","TangentMaterial","BiTangentMaterial","WireframeMaterial","isTransparent","renderFace","RenderFace","Double","SketchRenderer","entity","_worldNormalMatrix","Matrix","_worldMatrix","_targetMesh","_verticesTexture","_indicesTexture","_showState","_triangleSubMesh","SubMesh","_lineSubMesh","MeshTopology","Lines","mesh","ModelMesh","_wireframeMaterial","_normalMaterial","_tangentMaterial","_biTangentMaterial","addSubMesh","scale","setSketchMode","mode","isShow","Wireframe","setMaterial","Normal","Tangent","BiTangent","clear","update","deltaTime","worldMatrix","worldNormalMatrix","invert","transpose","setMatrix","_worldNormalProp","_uploadIndicesBuffer","indexBuffer","_indexBufferBinding","buffer","byteLength","Uint8Array","getData","indexFormat","_indicesFormat","triangleCount","IndexFormat","UInt8","width","Math","min","_MAX_TEXTURE_ROWS","height","ceil","Texture2D","TextureFormat","R32G32B32A32","floatBuffer","Float32Array","i","j","setPixelBuffer","setTexture","_indicesSamplerProp","setFloat","_indicesTextureWidthProp","_indicesTextureHeightProp","UInt16","uint16Buffer","Uint16Array","UInt32","uint32Buffer","Uint32Array","filterMode","TextureFilterMode","Point","_uploadVerticesBuffer","vertexBufferBinding","_vertexBufferBindings","vertexCount","elementCount","_updateMeshElement","jointIndexBegin","_jointIndexBegin","newElementCount","uint8Buffer","alignElementCount","toString","alignBuffer","_createVerticesTexture","vertexBuffer","_verticesSamplerProp","_verticesTextureWidthProp","_verticesTextureHeightProp","disableMacro","_normalMacro","_vertexColorMacro","_tangentMacro","_uvMacro","_uv1Macro","_weightMacro","_jointMacro","vertexElements","_vertexElements","n","length","semantic","_updateLineSubMesh","count","_updateTriangleSubMesh","subMeshes","subMesh","_destroy","destroy","getFloat","_lineScaleProp","_worldMatrixProp","targetMesh","wireframeMaterial","normalMaterial","tangentMaterial","biTangentMaterial","SkinnedMeshRenderer","ShaderMacro","getByName","ShaderProperty"],"mappings":"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","x_google_ignoreList":[1,2,3]}